// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8203
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8203
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// end ;
8203: PPOPN 2
8205: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8206: LD_INT 22
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 91
8218: PUSH
8219: LD_INT 8
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 69
8238: IFFALSE 8396
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8247: LD_INT 315
8249: PUSH
8250: LD_INT 280
8252: PUSH
8253: LD_INT 245
8255: PUSH
8256: LD_INT 210
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: LD_OWVAR 67
8269: ARRAY
8270: PPUSH
8271: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 54
8302: PUSH
8303: EMPTY
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: ST_TO_ADDR
// if not tmp then
8316: LD_VAR 0 2
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8396
// for i in tmp do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_VAR 0 2
8334: PUSH
8335: FOR_IN
8336: IFFALSE 8364
// begin ComExitBuilding ( i ) ;
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 174
// end ;
8362: GO 8335
8364: POP
8365: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8366: LD_EXP 23
8370: PPUSH
8371: LD_INT 142
8373: PPUSH
8374: LD_INT 71
8376: PPUSH
8377: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_INT 142
8388: PPUSH
8389: LD_INT 71
8391: PPUSH
8392: CALL_OW 114
// end ;
8396: PPOPN 2
8398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8399: LD_INT 22
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 58
8421: PUSH
8422: EMPTY
8423: LIST
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 1000
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 91
8444: PUSH
8445: LD_EXP 17
8449: PUSH
8450: LD_INT 8
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PUSH
8470: LD_EXP 17
8474: PPUSH
8475: CALL_OW 302
8479: AND
8480: IFFALSE 8594
8482: GO 8484
8484: DISABLE
// begin enable ;
8485: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8486: LD_EXP 17
8490: PPUSH
8491: LD_INT 22
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 58
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1000
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 91
8536: PUSH
8537: LD_EXP 17
8541: PUSH
8542: LD_INT 8
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 69
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8570: LD_EXP 17
8574: PPUSH
8575: LD_INT 52
8577: PPUSH
8578: LD_INT 90
8580: PPUSH
8581: CALL_OW 171
// AddComHold ( Olaf ) ;
8585: LD_EXP 17
8589: PPUSH
8590: CALL_OW 200
// end ;
8594: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8595: LD_EXP 12
8599: PUSH
8600: LD_INT 2
8602: PPUSH
8603: CALL_OW 302
8607: NOT
8608: AND
8609: PUSH
8610: LD_OWVAR 67
8614: PUSH
8615: LD_INT 1
8617: EQUAL
8618: AND
8619: PUSH
8620: LD_EXP 13
8624: NOT
8625: AND
8626: IFFALSE 8643
8628: GO 8630
8630: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8631: LD_EXP 16
8635: PPUSH
8636: LD_STRING DH-prison-missing
8638: PPUSH
8639: CALL_OW 88
// end ;
8643: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8644: LD_EXP 12
8648: PUSH
8649: LD_INT 8
8651: PPUSH
8652: CALL_OW 302
8656: NOT
8657: AND
8658: PUSH
8659: LD_OWVAR 67
8663: PUSH
8664: LD_INT 1
8666: GREATER
8667: AND
8668: PUSH
8669: LD_EXP 13
8673: NOT
8674: AND
8675: IFFALSE 8692
8677: GO 8679
8679: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8680: LD_EXP 16
8684: PPUSH
8685: LD_STRING DH-prison-missing
8687: PPUSH
8688: CALL_OW 88
// end ;
8692: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8693: LD_EXP 12
8697: PUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 302
8705: NOT
8706: AND
8707: PUSH
8708: LD_EXP 13
8712: NOT
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8719: LD_EXP 16
8723: PPUSH
8724: LD_STRING DH-prison-missing-a
8726: PPUSH
8727: CALL_OW 88
// end ;
8731: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8732: LD_EXP 12
8736: PUSH
8737: LD_INT 10
8739: PPUSH
8740: CALL_OW 302
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 13
8751: NOT
8752: AND
8753: IFFALSE 8770
8755: GO 8757
8757: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8758: LD_EXP 16
8762: PPUSH
8763: LD_STRING DH-prison-missing-a
8765: PPUSH
8766: CALL_OW 88
// end ;
8770: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8771: LD_EXP 13
8775: NOT
8776: PUSH
8777: LD_EXP 12
8781: AND
8782: PUSH
8783: LD_INT 2
8785: PPUSH
8786: LD_EXP 20
8790: PPUSH
8791: CALL_OW 292
8795: AND
8796: IFFALSE 8883
8798: GO 8800
8800: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8801: LD_EXP 20
8805: PPUSH
8806: LD_EXP 16
8810: PPUSH
8811: CALL_OW 119
// DialogueOn ;
8815: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8828: LD_EXP 20
8832: PPUSH
8833: LD_STRING DK-prison-found
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8840: LD_EXP 16
8844: PPUSH
8845: LD_STRING DH-prison-found
8847: PPUSH
8848: CALL_OW 88
// DialogueOff ;
8852: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 235
// prisonFound := true ;
8868: LD_ADDR_EXP 13
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8876: LD_STRING O6_prison_out
8878: PPUSH
8879: CALL_OW 337
// end ;
8883: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8884: LD_EXP 16
8888: PPUSH
8889: CALL_OW 256
8893: PUSH
8894: LD_INT 500
8896: LESS
8897: IFFALSE 8910
8899: GO 8901
8901: DISABLE
// heikeHurt := true ;
8902: LD_ADDR_EXP 14
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
8910: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8911: LD_INT 22
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: IFFALSE 9255
8941: GO 8943
8943: DISABLE
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
// begin uc_side := 3 ;
8949: LD_ADDR_OWVAR 20
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// uc_nation := 3 ;
8957: LD_ADDR_OWVAR 21
8961: PUSH
8962: LD_INT 3
8964: ST_TO_ADDR
// tmp := [ ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// for i := 1 to 5 do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_INT 5
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9094
// begin PrepareHuman ( false , 1 , 4 ) ;
8988: LD_INT 0
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 4
8996: PPUSH
8997: CALL_OW 380
// un := CreateHuman ;
9001: LD_ADDR_VAR 0 3
9005: PUSH
9006: CALL_OW 44
9010: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9011: LD_VAR 0 3
9015: PPUSH
9016: LD_INT 4
9018: PPUSH
9019: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 158
9030: PPUSH
9031: LD_INT 80
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 147
9048: PPUSH
9049: LD_INT 75
9051: PPUSH
9052: CALL_OW 111
// wait ( 0 0$1 ) ;
9056: LD_INT 35
9058: PPUSH
9059: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9063: LD_ADDR_VAR 0 2
9067: PUSH
9068: LD_VAR 0 2
9072: PPUSH
9073: LD_VAR 0 2
9077: PUSH
9078: LD_INT 1
9080: PLUS
9081: PPUSH
9082: LD_VAR 0 3
9086: PPUSH
9087: CALL_OW 1
9091: ST_TO_ADDR
// end ;
9092: GO 8985
9094: POP
9095: POP
// repeat wait ( 0 0$1 ) ;
9096: LD_INT 35
9098: PPUSH
9099: CALL_OW 67
// for i in tmp do
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9235
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 74
9145: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: CALL_OW 250
9159: PPUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: CALL_OW 251
9173: PPUSH
9174: CALL_OW 428
9178: IFFALSE 9219
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 250
9198: PPUSH
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: CALL_OW 251
9212: PPUSH
9213: CALL_OW 114
9217: GO 9233
// ComAttackUnit ( i , Heike ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_EXP 16
9228: PPUSH
9229: CALL_OW 115
// end ;
9233: GO 9113
9235: POP
9236: POP
// until IsDead ( Heike ) or not tmp ;
9237: LD_EXP 16
9241: PPUSH
9242: CALL_OW 301
9246: PUSH
9247: LD_VAR 0 2
9251: NOT
9252: OR
9253: IFFALSE 9096
// end ;
9255: PPOPN 3
9257: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9258: LD_EXP 12
9262: PUSH
9263: LD_EXP 16
9267: PPUSH
9268: CALL_OW 302
9272: AND
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 22
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 50
9299: PUSH
9300: EMPTY
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 71
9312: PUSH
9313: LD_INT 0
9315: EQUAL
9316: AND
9317: IFFALSE 9680
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin if not heikeHurt then
9325: LD_EXP 14
9329: NOT
9330: IFFALSE 9339
// SetAchievement ( ACH_INVINCIBLE ) ;
9332: LD_STRING ACH_INVINCIBLE
9334: PPUSH
9335: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9339: LD_STRING enableBioCharacter(BIO_GIVI)
9341: PPUSH
9342: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9346: LD_STRING enableBioCharacter(BIO_MIKE)
9348: PPUSH
9349: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9353: LD_STRING enableBioCharacter(BIO_OLAF)
9355: PPUSH
9356: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9360: LD_ADDR_VAR 0 1
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 50
9387: PUSH
9388: EMPTY
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 69
9400: ST_TO_ADDR
// if prisonFound then
9401: LD_EXP 13
9405: IFFALSE 9419
// AddMedal ( med1 , 1 ) else
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 101
9417: GO 9430
// AddMedal ( med1 , - 1 ) ;
9419: LD_STRING med1
9421: PPUSH
9422: LD_INT 1
9424: NEG
9425: PPUSH
9426: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9430: LD_VAR 0 1
9434: PUSH
9435: LD_INT 3
9437: LESS
9438: PUSH
9439: LD_EXP 13
9443: NOT
9444: AND
9445: PUSH
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 4
9453: LESS
9454: PUSH
9455: LD_EXP 13
9459: AND
9460: OR
9461: IFFALSE 9476
// AddMedal ( med2 , - 1 ) else
9463: LD_STRING med2
9465: PPUSH
9466: LD_INT 1
9468: NEG
9469: PPUSH
9470: CALL_OW 101
9474: GO 9486
// AddMedal ( med2 , 1 ) ;
9476: LD_STRING med2
9478: PPUSH
9479: LD_INT 1
9481: PPUSH
9482: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9486: LD_EXP 13
9490: PUSH
9491: LD_EXP 4
9495: AND
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 4
9504: GREATEREQUAL
9505: AND
9506: IFFALSE 9520
// AddMedal ( med3 , 1 ) else
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 101
9518: GO 9531
// AddMedal ( med3 , - 1 ) ;
9520: LD_STRING med3
9522: PPUSH
9523: LD_INT 1
9525: NEG
9526: PPUSH
9527: CALL_OW 101
// GiveMedals ( MAIN ) ;
9531: LD_STRING MAIN
9533: PPUSH
9534: CALL_OW 102
// RewardPeople ( tmp ) ;
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9547: LD_EXP 4
9551: PPUSH
9552: LD_STRING 01_JohnnySaved
9554: PPUSH
9555: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9559: LD_EXP 16
9563: PPUSH
9564: LD_STRING 01_Heike
9566: PPUSH
9567: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9571: LD_EXP 18
9575: PPUSH
9576: CALL_OW 302
9580: PUSH
9581: LD_EXP 18
9585: PUSH
9586: LD_VAR 0 1
9590: IN
9591: AND
9592: IFFALSE 9606
// SaveCharacters ( Givi , 01_Givi ) ;
9594: LD_EXP 18
9598: PPUSH
9599: LD_STRING 01_Givi
9601: PPUSH
9602: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9606: LD_EXP 19
9610: PPUSH
9611: CALL_OW 302
9615: PUSH
9616: LD_EXP 19
9620: PUSH
9621: LD_VAR 0 1
9625: IN
9626: AND
9627: IFFALSE 9641
// SaveCharacters ( Mike , 01_Mike ) ;
9629: LD_EXP 19
9633: PPUSH
9634: LD_STRING 01_Mike
9636: PPUSH
9637: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9641: LD_EXP 20
9645: PPUSH
9646: CALL_OW 302
9650: PUSH
9651: LD_EXP 20
9655: PUSH
9656: LD_VAR 0 1
9660: IN
9661: AND
9662: IFFALSE 9676
// SaveCharacters ( Kamil , 01_Kamil ) ;
9664: LD_EXP 20
9668: PPUSH
9669: LD_STRING 01_Kamil
9671: PPUSH
9672: CALL_OW 38
// YouWin ;
9676: CALL_OW 103
// end ; end_of_file
9680: PPOPN 1
9682: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9683: LD_VAR 0 1
9687: PUSH
9688: LD_EXP 16
9692: EQUAL
9693: IFFALSE 9702
// YouLost ( Heike ) ;
9695: LD_STRING Heike
9697: PPUSH
9698: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 3
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 25
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 69
9735: IN
9736: IFFALSE 9842
// begin if un in russianPatrol then
9738: LD_VAR 0 1
9742: PUSH
9743: LD_EXP 21
9747: IN
9748: IFFALSE 9766
// russianPatrol := russianPatrol diff un ;
9750: LD_ADDR_EXP 21
9754: PUSH
9755: LD_EXP 21
9759: PUSH
9760: LD_VAR 0 1
9764: DIFF
9765: ST_TO_ADDR
// if un in russianForestPatrol then
9766: LD_VAR 0 1
9770: PUSH
9771: LD_EXP 22
9775: IN
9776: IFFALSE 9794
// russianForestPatrol := russianForestPatrol diff un ;
9778: LD_ADDR_EXP 22
9782: PUSH
9783: LD_EXP 22
9787: PUSH
9788: LD_VAR 0 1
9792: DIFF
9793: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9794: LD_ADDR_EXP 5
9798: PUSH
9799: LD_EXP 5
9803: PPUSH
9804: LD_EXP 5
9808: PUSH
9809: LD_INT 1
9811: PLUS
9812: PPUSH
9813: LD_VAR 0 1
9817: PPUSH
9818: CALL_OW 250
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 251
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// end ; end ;
9842: PPOPN 1
9844: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9845: LD_VAR 0 1
9849: PUSH
9850: LD_EXP 16
9854: EQUAL
9855: IFFALSE 9864
// YouLost ( Heike ) ;
9857: LD_STRING Heike
9859: PPUSH
9860: CALL_OW 104
// if un = Olaf then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 17
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( Olaf ) ;
9876: LD_STRING Olaf
9878: PPUSH
9879: CALL_OW 104
// end ;
9883: PPOPN 1
9885: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9886: LD_VAR 0 1
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: PUSH
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 5
9902: EQUAL
9903: AND
9904: IFFALSE 9913
// YouLost ( FriendlyFire ) ;
9906: LD_STRING FriendlyFire
9908: PPUSH
9909: CALL_OW 104
// end ; end_of_file
9913: PPOPN 2
9915: END
// every 0 0$1 do
9916: GO 9918
9918: DISABLE
// begin enable ;
9919: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9920: LD_STRING updateTimer(
9922: PUSH
9923: LD_OWVAR 1
9927: STR
9928: PUSH
9929: LD_STRING );
9931: STR
9932: PPUSH
9933: CALL_OW 559
// end ;
9937: END
// export function SOS_MapStart ( ) ; begin
9938: LD_INT 0
9940: PPUSH
// if streamModeActive then
9941: LD_EXP 27
9945: IFFALSE 9954
// DefineStreamItems ( true ) ;
9947: LD_INT 1
9949: PPUSH
9950: CALL 11758 0 1
// UpdateLuaVariables ( ) ;
9954: CALL 9971 0 0
// UpdateFactoryWaypoints ( ) ;
9958: CALL 24619 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9962: CALL 24876 0 0
// end ;
9966: LD_VAR 0 1
9970: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
9971: LD_INT 0
9973: PPUSH
// if not globalGameSaveCounter then
9974: LD_EXP 26
9978: NOT
9979: IFFALSE 9990
// ToLua ( setGameSaveCounter(0) ) else
9981: LD_STRING setGameSaveCounter(0)
9983: PPUSH
9984: CALL_OW 559
9988: GO 10022
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9990: LD_ADDR_EXP 26
9994: PUSH
9995: LD_EXP 26
9999: PPUSH
10000: CALL 68833 0 1
10004: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10005: LD_STRING setGameSaveCounter(
10007: PUSH
10008: LD_EXP 26
10012: STR
10013: PUSH
10014: LD_STRING )
10016: STR
10017: PPUSH
10018: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10022: LD_STRING setGameDifficulty(
10024: PUSH
10025: LD_OWVAR 67
10029: STR
10030: PUSH
10031: LD_STRING )
10033: STR
10034: PPUSH
10035: CALL_OW 559
// end ;
10039: LD_VAR 0 1
10043: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10044: LD_INT 0
10046: PPUSH
// if p2 = stream_mode then
10047: LD_VAR 0 2
10051: PUSH
10052: LD_INT 100
10054: EQUAL
10055: IFFALSE 11058
// begin if not StreamModeActive then
10057: LD_EXP 27
10061: NOT
10062: IFFALSE 10072
// StreamModeActive := true ;
10064: LD_ADDR_EXP 27
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// if p3 = 0 then
10072: LD_VAR 0 3
10076: PUSH
10077: LD_INT 0
10079: EQUAL
10080: IFFALSE 10086
// InitStreamMode ;
10082: CALL 11294 0 0
// if p3 = 1 then
10086: LD_VAR 0 3
10090: PUSH
10091: LD_INT 1
10093: EQUAL
10094: IFFALSE 10104
// sRocket := true ;
10096: LD_ADDR_EXP 32
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// if p3 = 2 then
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 2
10111: EQUAL
10112: IFFALSE 10122
// sSpeed := true ;
10114: LD_ADDR_EXP 31
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// if p3 = 3 then
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 3
10129: EQUAL
10130: IFFALSE 10140
// sEngine := true ;
10132: LD_ADDR_EXP 33
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// if p3 = 4 then
10140: LD_VAR 0 3
10144: PUSH
10145: LD_INT 4
10147: EQUAL
10148: IFFALSE 10158
// sSpec := true ;
10150: LD_ADDR_EXP 30
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if p3 = 5 then
10158: LD_VAR 0 3
10162: PUSH
10163: LD_INT 5
10165: EQUAL
10166: IFFALSE 10176
// sLevel := true ;
10168: LD_ADDR_EXP 34
10172: PUSH
10173: LD_INT 1
10175: ST_TO_ADDR
// if p3 = 6 then
10176: LD_VAR 0 3
10180: PUSH
10181: LD_INT 6
10183: EQUAL
10184: IFFALSE 10194
// sArmoury := true ;
10186: LD_ADDR_EXP 35
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if p3 = 7 then
10194: LD_VAR 0 3
10198: PUSH
10199: LD_INT 7
10201: EQUAL
10202: IFFALSE 10212
// sRadar := true ;
10204: LD_ADDR_EXP 36
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// if p3 = 8 then
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 8
10219: EQUAL
10220: IFFALSE 10230
// sBunker := true ;
10222: LD_ADDR_EXP 37
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// if p3 = 9 then
10230: LD_VAR 0 3
10234: PUSH
10235: LD_INT 9
10237: EQUAL
10238: IFFALSE 10248
// sHack := true ;
10240: LD_ADDR_EXP 38
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// if p3 = 10 then
10248: LD_VAR 0 3
10252: PUSH
10253: LD_INT 10
10255: EQUAL
10256: IFFALSE 10266
// sFire := true ;
10258: LD_ADDR_EXP 39
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// if p3 = 11 then
10266: LD_VAR 0 3
10270: PUSH
10271: LD_INT 11
10273: EQUAL
10274: IFFALSE 10284
// sRefresh := true ;
10276: LD_ADDR_EXP 40
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// if p3 = 12 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_INT 12
10291: EQUAL
10292: IFFALSE 10302
// sExp := true ;
10294: LD_ADDR_EXP 41
10298: PUSH
10299: LD_INT 1
10301: ST_TO_ADDR
// if p3 = 13 then
10302: LD_VAR 0 3
10306: PUSH
10307: LD_INT 13
10309: EQUAL
10310: IFFALSE 10320
// sDepot := true ;
10312: LD_ADDR_EXP 42
10316: PUSH
10317: LD_INT 1
10319: ST_TO_ADDR
// if p3 = 14 then
10320: LD_VAR 0 3
10324: PUSH
10325: LD_INT 14
10327: EQUAL
10328: IFFALSE 10338
// sFlag := true ;
10330: LD_ADDR_EXP 43
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// if p3 = 15 then
10338: LD_VAR 0 3
10342: PUSH
10343: LD_INT 15
10345: EQUAL
10346: IFFALSE 10356
// sKamikadze := true ;
10348: LD_ADDR_EXP 51
10352: PUSH
10353: LD_INT 1
10355: ST_TO_ADDR
// if p3 = 16 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_INT 16
10363: EQUAL
10364: IFFALSE 10374
// sTroll := true ;
10366: LD_ADDR_EXP 52
10370: PUSH
10371: LD_INT 1
10373: ST_TO_ADDR
// if p3 = 17 then
10374: LD_VAR 0 3
10378: PUSH
10379: LD_INT 17
10381: EQUAL
10382: IFFALSE 10392
// sSlow := true ;
10384: LD_ADDR_EXP 53
10388: PUSH
10389: LD_INT 1
10391: ST_TO_ADDR
// if p3 = 18 then
10392: LD_VAR 0 3
10396: PUSH
10397: LD_INT 18
10399: EQUAL
10400: IFFALSE 10410
// sLack := true ;
10402: LD_ADDR_EXP 54
10406: PUSH
10407: LD_INT 1
10409: ST_TO_ADDR
// if p3 = 19 then
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 19
10417: EQUAL
10418: IFFALSE 10428
// sTank := true ;
10420: LD_ADDR_EXP 56
10424: PUSH
10425: LD_INT 1
10427: ST_TO_ADDR
// if p3 = 20 then
10428: LD_VAR 0 3
10432: PUSH
10433: LD_INT 20
10435: EQUAL
10436: IFFALSE 10446
// sRemote := true ;
10438: LD_ADDR_EXP 57
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// if p3 = 21 then
10446: LD_VAR 0 3
10450: PUSH
10451: LD_INT 21
10453: EQUAL
10454: IFFALSE 10464
// sPowell := true ;
10456: LD_ADDR_EXP 58
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// if p3 = 22 then
10464: LD_VAR 0 3
10468: PUSH
10469: LD_INT 22
10471: EQUAL
10472: IFFALSE 10482
// sTeleport := true ;
10474: LD_ADDR_EXP 61
10478: PUSH
10479: LD_INT 1
10481: ST_TO_ADDR
// if p3 = 23 then
10482: LD_VAR 0 3
10486: PUSH
10487: LD_INT 23
10489: EQUAL
10490: IFFALSE 10500
// sOilTower := true ;
10492: LD_ADDR_EXP 63
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if p3 = 24 then
10500: LD_VAR 0 3
10504: PUSH
10505: LD_INT 24
10507: EQUAL
10508: IFFALSE 10518
// sShovel := true ;
10510: LD_ADDR_EXP 64
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// if p3 = 25 then
10518: LD_VAR 0 3
10522: PUSH
10523: LD_INT 25
10525: EQUAL
10526: IFFALSE 10536
// sSheik := true ;
10528: LD_ADDR_EXP 65
10532: PUSH
10533: LD_INT 1
10535: ST_TO_ADDR
// if p3 = 26 then
10536: LD_VAR 0 3
10540: PUSH
10541: LD_INT 26
10543: EQUAL
10544: IFFALSE 10554
// sEarthquake := true ;
10546: LD_ADDR_EXP 67
10550: PUSH
10551: LD_INT 1
10553: ST_TO_ADDR
// if p3 = 27 then
10554: LD_VAR 0 3
10558: PUSH
10559: LD_INT 27
10561: EQUAL
10562: IFFALSE 10572
// sAI := true ;
10564: LD_ADDR_EXP 68
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// if p3 = 28 then
10572: LD_VAR 0 3
10576: PUSH
10577: LD_INT 28
10579: EQUAL
10580: IFFALSE 10590
// sCargo := true ;
10582: LD_ADDR_EXP 71
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// if p3 = 29 then
10590: LD_VAR 0 3
10594: PUSH
10595: LD_INT 29
10597: EQUAL
10598: IFFALSE 10608
// sDLaser := true ;
10600: LD_ADDR_EXP 72
10604: PUSH
10605: LD_INT 1
10607: ST_TO_ADDR
// if p3 = 30 then
10608: LD_VAR 0 3
10612: PUSH
10613: LD_INT 30
10615: EQUAL
10616: IFFALSE 10626
// sExchange := true ;
10618: LD_ADDR_EXP 73
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// if p3 = 31 then
10626: LD_VAR 0 3
10630: PUSH
10631: LD_INT 31
10633: EQUAL
10634: IFFALSE 10644
// sFac := true ;
10636: LD_ADDR_EXP 74
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// if p3 = 32 then
10644: LD_VAR 0 3
10648: PUSH
10649: LD_INT 32
10651: EQUAL
10652: IFFALSE 10662
// sPower := true ;
10654: LD_ADDR_EXP 75
10658: PUSH
10659: LD_INT 1
10661: ST_TO_ADDR
// if p3 = 33 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_INT 33
10669: EQUAL
10670: IFFALSE 10680
// sRandom := true ;
10672: LD_ADDR_EXP 76
10676: PUSH
10677: LD_INT 1
10679: ST_TO_ADDR
// if p3 = 34 then
10680: LD_VAR 0 3
10684: PUSH
10685: LD_INT 34
10687: EQUAL
10688: IFFALSE 10698
// sShield := true ;
10690: LD_ADDR_EXP 77
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// if p3 = 35 then
10698: LD_VAR 0 3
10702: PUSH
10703: LD_INT 35
10705: EQUAL
10706: IFFALSE 10716
// sTime := true ;
10708: LD_ADDR_EXP 78
10712: PUSH
10713: LD_INT 1
10715: ST_TO_ADDR
// if p3 = 36 then
10716: LD_VAR 0 3
10720: PUSH
10721: LD_INT 36
10723: EQUAL
10724: IFFALSE 10734
// sTools := true ;
10726: LD_ADDR_EXP 79
10730: PUSH
10731: LD_INT 1
10733: ST_TO_ADDR
// if p3 = 101 then
10734: LD_VAR 0 3
10738: PUSH
10739: LD_INT 101
10741: EQUAL
10742: IFFALSE 10752
// sSold := true ;
10744: LD_ADDR_EXP 44
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// if p3 = 102 then
10752: LD_VAR 0 3
10756: PUSH
10757: LD_INT 102
10759: EQUAL
10760: IFFALSE 10770
// sDiff := true ;
10762: LD_ADDR_EXP 45
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// if p3 = 103 then
10770: LD_VAR 0 3
10774: PUSH
10775: LD_INT 103
10777: EQUAL
10778: IFFALSE 10788
// sFog := true ;
10780: LD_ADDR_EXP 48
10784: PUSH
10785: LD_INT 1
10787: ST_TO_ADDR
// if p3 = 104 then
10788: LD_VAR 0 3
10792: PUSH
10793: LD_INT 104
10795: EQUAL
10796: IFFALSE 10806
// sReset := true ;
10798: LD_ADDR_EXP 49
10802: PUSH
10803: LD_INT 1
10805: ST_TO_ADDR
// if p3 = 105 then
10806: LD_VAR 0 3
10810: PUSH
10811: LD_INT 105
10813: EQUAL
10814: IFFALSE 10824
// sSun := true ;
10816: LD_ADDR_EXP 50
10820: PUSH
10821: LD_INT 1
10823: ST_TO_ADDR
// if p3 = 106 then
10824: LD_VAR 0 3
10828: PUSH
10829: LD_INT 106
10831: EQUAL
10832: IFFALSE 10842
// sTiger := true ;
10834: LD_ADDR_EXP 46
10838: PUSH
10839: LD_INT 1
10841: ST_TO_ADDR
// if p3 = 107 then
10842: LD_VAR 0 3
10846: PUSH
10847: LD_INT 107
10849: EQUAL
10850: IFFALSE 10860
// sBomb := true ;
10852: LD_ADDR_EXP 47
10856: PUSH
10857: LD_INT 1
10859: ST_TO_ADDR
// if p3 = 108 then
10860: LD_VAR 0 3
10864: PUSH
10865: LD_INT 108
10867: EQUAL
10868: IFFALSE 10878
// sWound := true ;
10870: LD_ADDR_EXP 55
10874: PUSH
10875: LD_INT 1
10877: ST_TO_ADDR
// if p3 = 109 then
10878: LD_VAR 0 3
10882: PUSH
10883: LD_INT 109
10885: EQUAL
10886: IFFALSE 10896
// sBetray := true ;
10888: LD_ADDR_EXP 59
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if p3 = 110 then
10896: LD_VAR 0 3
10900: PUSH
10901: LD_INT 110
10903: EQUAL
10904: IFFALSE 10914
// sContamin := true ;
10906: LD_ADDR_EXP 60
10910: PUSH
10911: LD_INT 1
10913: ST_TO_ADDR
// if p3 = 111 then
10914: LD_VAR 0 3
10918: PUSH
10919: LD_INT 111
10921: EQUAL
10922: IFFALSE 10932
// sOil := true ;
10924: LD_ADDR_EXP 62
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// if p3 = 112 then
10932: LD_VAR 0 3
10936: PUSH
10937: LD_INT 112
10939: EQUAL
10940: IFFALSE 10950
// sStu := true ;
10942: LD_ADDR_EXP 66
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// if p3 = 113 then
10950: LD_VAR 0 3
10954: PUSH
10955: LD_INT 113
10957: EQUAL
10958: IFFALSE 10968
// sBazooka := true ;
10960: LD_ADDR_EXP 69
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// if p3 = 114 then
10968: LD_VAR 0 3
10972: PUSH
10973: LD_INT 114
10975: EQUAL
10976: IFFALSE 10986
// sMortar := true ;
10978: LD_ADDR_EXP 70
10982: PUSH
10983: LD_INT 1
10985: ST_TO_ADDR
// if p3 = 115 then
10986: LD_VAR 0 3
10990: PUSH
10991: LD_INT 115
10993: EQUAL
10994: IFFALSE 11004
// sRanger := true ;
10996: LD_ADDR_EXP 80
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// if p3 = 116 then
11004: LD_VAR 0 3
11008: PUSH
11009: LD_INT 116
11011: EQUAL
11012: IFFALSE 11022
// sComputer := true ;
11014: LD_ADDR_EXP 81
11018: PUSH
11019: LD_INT 1
11021: ST_TO_ADDR
// if p3 = 117 then
11022: LD_VAR 0 3
11026: PUSH
11027: LD_INT 117
11029: EQUAL
11030: IFFALSE 11040
// s30 := true ;
11032: LD_ADDR_EXP 82
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// if p3 = 118 then
11040: LD_VAR 0 3
11044: PUSH
11045: LD_INT 118
11047: EQUAL
11048: IFFALSE 11058
// s60 := true ;
11050: LD_ADDR_EXP 83
11054: PUSH
11055: LD_INT 1
11057: ST_TO_ADDR
// end ; if p2 = hack_mode then
11058: LD_VAR 0 2
11062: PUSH
11063: LD_INT 101
11065: EQUAL
11066: IFFALSE 11194
// begin case p3 of 1 :
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 1
11075: DOUBLE
11076: EQUAL
11077: IFTRUE 11081
11079: GO 11088
11081: POP
// hHackUnlimitedResources ; 2 :
11082: CALL 23365 0 0
11086: GO 11194
11088: LD_INT 2
11090: DOUBLE
11091: EQUAL
11092: IFTRUE 11096
11094: GO 11103
11096: POP
// hHackSetLevel10 ; 3 :
11097: CALL 23498 0 0
11101: GO 11194
11103: LD_INT 3
11105: DOUBLE
11106: EQUAL
11107: IFTRUE 11111
11109: GO 11118
11111: POP
// hHackSetLevel10YourUnits ; 4 :
11112: CALL 23583 0 0
11116: GO 11194
11118: LD_INT 4
11120: DOUBLE
11121: EQUAL
11122: IFTRUE 11126
11124: GO 11133
11126: POP
// hHackInvincible ; 5 :
11127: CALL 24031 0 0
11131: GO 11194
11133: LD_INT 5
11135: DOUBLE
11136: EQUAL
11137: IFTRUE 11141
11139: GO 11148
11141: POP
// hHackInvisible ; 6 :
11142: CALL 24142 0 0
11146: GO 11194
11148: LD_INT 6
11150: DOUBLE
11151: EQUAL
11152: IFTRUE 11156
11154: GO 11163
11156: POP
// hHackChangeYourSide ; 7 :
11157: CALL 24199 0 0
11161: GO 11194
11163: LD_INT 7
11165: DOUBLE
11166: EQUAL
11167: IFTRUE 11171
11169: GO 11178
11171: POP
// hHackChangeUnitSide ; 8 :
11172: CALL 24241 0 0
11176: GO 11194
11178: LD_INT 8
11180: DOUBLE
11181: EQUAL
11182: IFTRUE 11186
11184: GO 11193
11186: POP
// hHackFog ; end ;
11187: CALL 24342 0 0
11191: GO 11194
11193: POP
// end ; if p2 = game_save_mode then
11194: LD_VAR 0 2
11198: PUSH
11199: LD_INT 102
11201: EQUAL
11202: IFFALSE 11267
// begin if p3 = 1 then
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 1
11211: EQUAL
11212: IFFALSE 11224
// globalGameSaveCounter := p4 ;
11214: LD_ADDR_EXP 26
11218: PUSH
11219: LD_VAR 0 4
11223: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11224: LD_VAR 0 3
11228: PUSH
11229: LD_INT 2
11231: EQUAL
11232: PUSH
11233: LD_EXP 26
11237: AND
11238: IFFALSE 11257
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11240: LD_STRING setGameSaveCounter(
11242: PUSH
11243: LD_EXP 26
11247: STR
11248: PUSH
11249: LD_STRING )
11251: STR
11252: PPUSH
11253: CALL_OW 559
// display_strings := globalGameSaveCounter ;
11257: LD_ADDR_OWVAR 47
11261: PUSH
11262: LD_EXP 26
11266: ST_TO_ADDR
// end ; end ;
11267: LD_VAR 0 7
11271: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11272: GO 11274
11274: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11275: LD_STRING initStreamRollete();
11277: PPUSH
11278: CALL_OW 559
// InitStreamMode ;
11282: CALL 11294 0 0
// DefineStreamItems ( false ) ;
11286: LD_INT 0
11288: PPUSH
11289: CALL 11758 0 1
// end ;
11293: END
// function InitStreamMode ; begin
11294: LD_INT 0
11296: PPUSH
// streamModeActive := false ;
11297: LD_ADDR_EXP 27
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// normalCounter := 36 ;
11305: LD_ADDR_EXP 28
11309: PUSH
11310: LD_INT 36
11312: ST_TO_ADDR
// hardcoreCounter := 18 ;
11313: LD_ADDR_EXP 29
11317: PUSH
11318: LD_INT 18
11320: ST_TO_ADDR
// sRocket := false ;
11321: LD_ADDR_EXP 32
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sSpeed := false ;
11329: LD_ADDR_EXP 31
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sEngine := false ;
11337: LD_ADDR_EXP 33
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sSpec := false ;
11345: LD_ADDR_EXP 30
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sLevel := false ;
11353: LD_ADDR_EXP 34
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sArmoury := false ;
11361: LD_ADDR_EXP 35
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sRadar := false ;
11369: LD_ADDR_EXP 36
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sBunker := false ;
11377: LD_ADDR_EXP 37
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sHack := false ;
11385: LD_ADDR_EXP 38
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sFire := false ;
11393: LD_ADDR_EXP 39
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sRefresh := false ;
11401: LD_ADDR_EXP 40
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sExp := false ;
11409: LD_ADDR_EXP 41
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sDepot := false ;
11417: LD_ADDR_EXP 42
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sFlag := false ;
11425: LD_ADDR_EXP 43
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sKamikadze := false ;
11433: LD_ADDR_EXP 51
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sTroll := false ;
11441: LD_ADDR_EXP 52
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sSlow := false ;
11449: LD_ADDR_EXP 53
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// sLack := false ;
11457: LD_ADDR_EXP 54
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// sTank := false ;
11465: LD_ADDR_EXP 56
11469: PUSH
11470: LD_INT 0
11472: ST_TO_ADDR
// sRemote := false ;
11473: LD_ADDR_EXP 57
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
// sPowell := false ;
11481: LD_ADDR_EXP 58
11485: PUSH
11486: LD_INT 0
11488: ST_TO_ADDR
// sTeleport := false ;
11489: LD_ADDR_EXP 61
11493: PUSH
11494: LD_INT 0
11496: ST_TO_ADDR
// sOilTower := false ;
11497: LD_ADDR_EXP 63
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// sShovel := false ;
11505: LD_ADDR_EXP 64
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// sSheik := false ;
11513: LD_ADDR_EXP 65
11517: PUSH
11518: LD_INT 0
11520: ST_TO_ADDR
// sEarthquake := false ;
11521: LD_ADDR_EXP 67
11525: PUSH
11526: LD_INT 0
11528: ST_TO_ADDR
// sAI := false ;
11529: LD_ADDR_EXP 68
11533: PUSH
11534: LD_INT 0
11536: ST_TO_ADDR
// sCargo := false ;
11537: LD_ADDR_EXP 71
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// sDLaser := false ;
11545: LD_ADDR_EXP 72
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// sExchange := false ;
11553: LD_ADDR_EXP 73
11557: PUSH
11558: LD_INT 0
11560: ST_TO_ADDR
// sFac := false ;
11561: LD_ADDR_EXP 74
11565: PUSH
11566: LD_INT 0
11568: ST_TO_ADDR
// sPower := false ;
11569: LD_ADDR_EXP 75
11573: PUSH
11574: LD_INT 0
11576: ST_TO_ADDR
// sRandom := false ;
11577: LD_ADDR_EXP 76
11581: PUSH
11582: LD_INT 0
11584: ST_TO_ADDR
// sShield := false ;
11585: LD_ADDR_EXP 77
11589: PUSH
11590: LD_INT 0
11592: ST_TO_ADDR
// sTime := false ;
11593: LD_ADDR_EXP 78
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// sTools := false ;
11601: LD_ADDR_EXP 79
11605: PUSH
11606: LD_INT 0
11608: ST_TO_ADDR
// sSold := false ;
11609: LD_ADDR_EXP 44
11613: PUSH
11614: LD_INT 0
11616: ST_TO_ADDR
// sDiff := false ;
11617: LD_ADDR_EXP 45
11621: PUSH
11622: LD_INT 0
11624: ST_TO_ADDR
// sFog := false ;
11625: LD_ADDR_EXP 48
11629: PUSH
11630: LD_INT 0
11632: ST_TO_ADDR
// sReset := false ;
11633: LD_ADDR_EXP 49
11637: PUSH
11638: LD_INT 0
11640: ST_TO_ADDR
// sSun := false ;
11641: LD_ADDR_EXP 50
11645: PUSH
11646: LD_INT 0
11648: ST_TO_ADDR
// sTiger := false ;
11649: LD_ADDR_EXP 46
11653: PUSH
11654: LD_INT 0
11656: ST_TO_ADDR
// sBomb := false ;
11657: LD_ADDR_EXP 47
11661: PUSH
11662: LD_INT 0
11664: ST_TO_ADDR
// sWound := false ;
11665: LD_ADDR_EXP 55
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// sBetray := false ;
11673: LD_ADDR_EXP 59
11677: PUSH
11678: LD_INT 0
11680: ST_TO_ADDR
// sContamin := false ;
11681: LD_ADDR_EXP 60
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// sOil := false ;
11689: LD_ADDR_EXP 62
11693: PUSH
11694: LD_INT 0
11696: ST_TO_ADDR
// sStu := false ;
11697: LD_ADDR_EXP 66
11701: PUSH
11702: LD_INT 0
11704: ST_TO_ADDR
// sBazooka := false ;
11705: LD_ADDR_EXP 69
11709: PUSH
11710: LD_INT 0
11712: ST_TO_ADDR
// sMortar := false ;
11713: LD_ADDR_EXP 70
11717: PUSH
11718: LD_INT 0
11720: ST_TO_ADDR
// sRanger := false ;
11721: LD_ADDR_EXP 80
11725: PUSH
11726: LD_INT 0
11728: ST_TO_ADDR
// sComputer := false ;
11729: LD_ADDR_EXP 81
11733: PUSH
11734: LD_INT 0
11736: ST_TO_ADDR
// s30 := false ;
11737: LD_ADDR_EXP 82
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// s60 := false ;
11745: LD_ADDR_EXP 83
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// end ;
11753: LD_VAR 0 1
11757: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11758: LD_INT 0
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
11764: PPUSH
11765: PPUSH
11766: PPUSH
// result := [ ] ;
11767: LD_ADDR_VAR 0 2
11771: PUSH
11772: EMPTY
11773: ST_TO_ADDR
// if campaign_id = 1 then
11774: LD_OWVAR 69
11778: PUSH
11779: LD_INT 1
11781: EQUAL
11782: IFFALSE 14948
// begin case mission_number of 1 :
11784: LD_OWVAR 70
11788: PUSH
11789: LD_INT 1
11791: DOUBLE
11792: EQUAL
11793: IFTRUE 11797
11795: GO 11873
11797: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_INT 2
11805: PUSH
11806: LD_INT 4
11808: PUSH
11809: LD_INT 11
11811: PUSH
11812: LD_INT 12
11814: PUSH
11815: LD_INT 15
11817: PUSH
11818: LD_INT 16
11820: PUSH
11821: LD_INT 22
11823: PUSH
11824: LD_INT 23
11826: PUSH
11827: LD_INT 26
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 101
11843: PUSH
11844: LD_INT 102
11846: PUSH
11847: LD_INT 106
11849: PUSH
11850: LD_INT 116
11852: PUSH
11853: LD_INT 117
11855: PUSH
11856: LD_INT 118
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: ST_TO_ADDR
11871: GO 14946
11873: LD_INT 2
11875: DOUBLE
11876: EQUAL
11877: IFTRUE 11881
11879: GO 11965
11881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11882: LD_ADDR_VAR 0 2
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 4
11892: PUSH
11893: LD_INT 11
11895: PUSH
11896: LD_INT 12
11898: PUSH
11899: LD_INT 15
11901: PUSH
11902: LD_INT 16
11904: PUSH
11905: LD_INT 22
11907: PUSH
11908: LD_INT 23
11910: PUSH
11911: LD_INT 26
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 101
11927: PUSH
11928: LD_INT 102
11930: PUSH
11931: LD_INT 105
11933: PUSH
11934: LD_INT 106
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 116
11942: PUSH
11943: LD_INT 117
11945: PUSH
11946: LD_INT 118
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: ST_TO_ADDR
11963: GO 14946
11965: LD_INT 3
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12061
11973: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 2
11981: PUSH
11982: LD_INT 4
11984: PUSH
11985: LD_INT 5
11987: PUSH
11988: LD_INT 11
11990: PUSH
11991: LD_INT 12
11993: PUSH
11994: LD_INT 15
11996: PUSH
11997: LD_INT 16
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_INT 26
12005: PUSH
12006: LD_INT 36
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 101
12023: PUSH
12024: LD_INT 102
12026: PUSH
12027: LD_INT 105
12029: PUSH
12030: LD_INT 106
12032: PUSH
12033: LD_INT 108
12035: PUSH
12036: LD_INT 116
12038: PUSH
12039: LD_INT 117
12041: PUSH
12042: LD_INT 118
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: ST_TO_ADDR
12059: GO 14946
12061: LD_INT 4
12063: DOUBLE
12064: EQUAL
12065: IFTRUE 12069
12067: GO 12165
12069: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12070: LD_ADDR_VAR 0 2
12074: PUSH
12075: LD_INT 2
12077: PUSH
12078: LD_INT 4
12080: PUSH
12081: LD_INT 5
12083: PUSH
12084: LD_INT 8
12086: PUSH
12087: LD_INT 11
12089: PUSH
12090: LD_INT 12
12092: PUSH
12093: LD_INT 15
12095: PUSH
12096: LD_INT 16
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 23
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 36
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 101
12127: PUSH
12128: LD_INT 102
12130: PUSH
12131: LD_INT 105
12133: PUSH
12134: LD_INT 106
12136: PUSH
12137: LD_INT 108
12139: PUSH
12140: LD_INT 116
12142: PUSH
12143: LD_INT 117
12145: PUSH
12146: LD_INT 118
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: ST_TO_ADDR
12163: GO 14946
12165: LD_INT 5
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12285
12173: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 4
12184: PUSH
12185: LD_INT 5
12187: PUSH
12188: LD_INT 6
12190: PUSH
12191: LD_INT 8
12193: PUSH
12194: LD_INT 11
12196: PUSH
12197: LD_INT 12
12199: PUSH
12200: LD_INT 15
12202: PUSH
12203: LD_INT 16
12205: PUSH
12206: LD_INT 22
12208: PUSH
12209: LD_INT 23
12211: PUSH
12212: LD_INT 25
12214: PUSH
12215: LD_INT 26
12217: PUSH
12218: LD_INT 36
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 101
12239: PUSH
12240: LD_INT 102
12242: PUSH
12243: LD_INT 105
12245: PUSH
12246: LD_INT 106
12248: PUSH
12249: LD_INT 108
12251: PUSH
12252: LD_INT 109
12254: PUSH
12255: LD_INT 112
12257: PUSH
12258: LD_INT 116
12260: PUSH
12261: LD_INT 117
12263: PUSH
12264: LD_INT 118
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: ST_TO_ADDR
12283: GO 14946
12285: LD_INT 6
12287: DOUBLE
12288: EQUAL
12289: IFTRUE 12293
12291: GO 12425
12293: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: LD_INT 4
12304: PUSH
12305: LD_INT 5
12307: PUSH
12308: LD_INT 6
12310: PUSH
12311: LD_INT 8
12313: PUSH
12314: LD_INT 11
12316: PUSH
12317: LD_INT 12
12319: PUSH
12320: LD_INT 15
12322: PUSH
12323: LD_INT 16
12325: PUSH
12326: LD_INT 20
12328: PUSH
12329: LD_INT 21
12331: PUSH
12332: LD_INT 22
12334: PUSH
12335: LD_INT 23
12337: PUSH
12338: LD_INT 25
12340: PUSH
12341: LD_INT 26
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 31
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 36
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 101
12379: PUSH
12380: LD_INT 102
12382: PUSH
12383: LD_INT 105
12385: PUSH
12386: LD_INT 106
12388: PUSH
12389: LD_INT 108
12391: PUSH
12392: LD_INT 109
12394: PUSH
12395: LD_INT 112
12397: PUSH
12398: LD_INT 116
12400: PUSH
12401: LD_INT 117
12403: PUSH
12404: LD_INT 118
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: ST_TO_ADDR
12423: GO 14946
12425: LD_INT 7
12427: DOUBLE
12428: EQUAL
12429: IFTRUE 12433
12431: GO 12545
12433: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 4
12444: PUSH
12445: LD_INT 5
12447: PUSH
12448: LD_INT 7
12450: PUSH
12451: LD_INT 11
12453: PUSH
12454: LD_INT 12
12456: PUSH
12457: LD_INT 15
12459: PUSH
12460: LD_INT 16
12462: PUSH
12463: LD_INT 20
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 22
12471: PUSH
12472: LD_INT 23
12474: PUSH
12475: LD_INT 25
12477: PUSH
12478: LD_INT 26
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 101
12499: PUSH
12500: LD_INT 102
12502: PUSH
12503: LD_INT 103
12505: PUSH
12506: LD_INT 105
12508: PUSH
12509: LD_INT 106
12511: PUSH
12512: LD_INT 108
12514: PUSH
12515: LD_INT 112
12517: PUSH
12518: LD_INT 116
12520: PUSH
12521: LD_INT 117
12523: PUSH
12524: LD_INT 118
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: ST_TO_ADDR
12543: GO 14946
12545: LD_INT 8
12547: DOUBLE
12548: EQUAL
12549: IFTRUE 12553
12551: GO 12693
12553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12554: LD_ADDR_VAR 0 2
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 4
12564: PUSH
12565: LD_INT 5
12567: PUSH
12568: LD_INT 6
12570: PUSH
12571: LD_INT 7
12573: PUSH
12574: LD_INT 8
12576: PUSH
12577: LD_INT 11
12579: PUSH
12580: LD_INT 12
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: LD_INT 16
12588: PUSH
12589: LD_INT 20
12591: PUSH
12592: LD_INT 21
12594: PUSH
12595: LD_INT 22
12597: PUSH
12598: LD_INT 23
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 26
12606: PUSH
12607: LD_INT 30
12609: PUSH
12610: LD_INT 31
12612: PUSH
12613: LD_INT 32
12615: PUSH
12616: LD_INT 36
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 101
12643: PUSH
12644: LD_INT 102
12646: PUSH
12647: LD_INT 103
12649: PUSH
12650: LD_INT 105
12652: PUSH
12653: LD_INT 106
12655: PUSH
12656: LD_INT 108
12658: PUSH
12659: LD_INT 109
12661: PUSH
12662: LD_INT 112
12664: PUSH
12665: LD_INT 116
12667: PUSH
12668: LD_INT 117
12670: PUSH
12671: LD_INT 118
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: ST_TO_ADDR
12691: GO 14946
12693: LD_INT 9
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12849
12701: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12702: LD_ADDR_VAR 0 2
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: LD_INT 4
12712: PUSH
12713: LD_INT 5
12715: PUSH
12716: LD_INT 6
12718: PUSH
12719: LD_INT 7
12721: PUSH
12722: LD_INT 8
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 15
12733: PUSH
12734: LD_INT 16
12736: PUSH
12737: LD_INT 20
12739: PUSH
12740: LD_INT 21
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_INT 23
12748: PUSH
12749: LD_INT 25
12751: PUSH
12752: LD_INT 26
12754: PUSH
12755: LD_INT 28
12757: PUSH
12758: LD_INT 30
12760: PUSH
12761: LD_INT 31
12763: PUSH
12764: LD_INT 32
12766: PUSH
12767: LD_INT 36
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 101
12795: PUSH
12796: LD_INT 102
12798: PUSH
12799: LD_INT 103
12801: PUSH
12802: LD_INT 105
12804: PUSH
12805: LD_INT 106
12807: PUSH
12808: LD_INT 108
12810: PUSH
12811: LD_INT 109
12813: PUSH
12814: LD_INT 112
12816: PUSH
12817: LD_INT 114
12819: PUSH
12820: LD_INT 116
12822: PUSH
12823: LD_INT 117
12825: PUSH
12826: LD_INT 118
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: ST_TO_ADDR
12847: GO 14946
12849: LD_INT 10
12851: DOUBLE
12852: EQUAL
12853: IFTRUE 12857
12855: GO 13053
12857: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12858: LD_ADDR_VAR 0 2
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: LD_INT 4
12868: PUSH
12869: LD_INT 5
12871: PUSH
12872: LD_INT 6
12874: PUSH
12875: LD_INT 7
12877: PUSH
12878: LD_INT 8
12880: PUSH
12881: LD_INT 9
12883: PUSH
12884: LD_INT 10
12886: PUSH
12887: LD_INT 11
12889: PUSH
12890: LD_INT 12
12892: PUSH
12893: LD_INT 13
12895: PUSH
12896: LD_INT 14
12898: PUSH
12899: LD_INT 15
12901: PUSH
12902: LD_INT 16
12904: PUSH
12905: LD_INT 17
12907: PUSH
12908: LD_INT 18
12910: PUSH
12911: LD_INT 19
12913: PUSH
12914: LD_INT 20
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: LD_INT 25
12931: PUSH
12932: LD_INT 26
12934: PUSH
12935: LD_INT 28
12937: PUSH
12938: LD_INT 30
12940: PUSH
12941: LD_INT 31
12943: PUSH
12944: LD_INT 32
12946: PUSH
12947: LD_INT 36
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 101
12983: PUSH
12984: LD_INT 102
12986: PUSH
12987: LD_INT 103
12989: PUSH
12990: LD_INT 104
12992: PUSH
12993: LD_INT 105
12995: PUSH
12996: LD_INT 106
12998: PUSH
12999: LD_INT 107
13001: PUSH
13002: LD_INT 108
13004: PUSH
13005: LD_INT 109
13007: PUSH
13008: LD_INT 110
13010: PUSH
13011: LD_INT 111
13013: PUSH
13014: LD_INT 112
13016: PUSH
13017: LD_INT 114
13019: PUSH
13020: LD_INT 116
13022: PUSH
13023: LD_INT 117
13025: PUSH
13026: LD_INT 118
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: ST_TO_ADDR
13051: GO 14946
13053: LD_INT 11
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 13265
13061: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13062: LD_ADDR_VAR 0 2
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: LD_INT 3
13072: PUSH
13073: LD_INT 4
13075: PUSH
13076: LD_INT 5
13078: PUSH
13079: LD_INT 6
13081: PUSH
13082: LD_INT 7
13084: PUSH
13085: LD_INT 8
13087: PUSH
13088: LD_INT 9
13090: PUSH
13091: LD_INT 10
13093: PUSH
13094: LD_INT 11
13096: PUSH
13097: LD_INT 12
13099: PUSH
13100: LD_INT 13
13102: PUSH
13103: LD_INT 14
13105: PUSH
13106: LD_INT 15
13108: PUSH
13109: LD_INT 16
13111: PUSH
13112: LD_INT 17
13114: PUSH
13115: LD_INT 18
13117: PUSH
13118: LD_INT 19
13120: PUSH
13121: LD_INT 20
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 23
13132: PUSH
13133: LD_INT 24
13135: PUSH
13136: LD_INT 25
13138: PUSH
13139: LD_INT 26
13141: PUSH
13142: LD_INT 28
13144: PUSH
13145: LD_INT 30
13147: PUSH
13148: LD_INT 31
13150: PUSH
13151: LD_INT 32
13153: PUSH
13154: LD_INT 34
13156: PUSH
13157: LD_INT 36
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 101
13195: PUSH
13196: LD_INT 102
13198: PUSH
13199: LD_INT 103
13201: PUSH
13202: LD_INT 104
13204: PUSH
13205: LD_INT 105
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 107
13213: PUSH
13214: LD_INT 108
13216: PUSH
13217: LD_INT 109
13219: PUSH
13220: LD_INT 110
13222: PUSH
13223: LD_INT 111
13225: PUSH
13226: LD_INT 112
13228: PUSH
13229: LD_INT 114
13231: PUSH
13232: LD_INT 116
13234: PUSH
13235: LD_INT 117
13237: PUSH
13238: LD_INT 118
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: ST_TO_ADDR
13263: GO 14946
13265: LD_INT 12
13267: DOUBLE
13268: EQUAL
13269: IFTRUE 13273
13271: GO 13493
13273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: LD_INT 4
13290: PUSH
13291: LD_INT 5
13293: PUSH
13294: LD_INT 6
13296: PUSH
13297: LD_INT 7
13299: PUSH
13300: LD_INT 8
13302: PUSH
13303: LD_INT 9
13305: PUSH
13306: LD_INT 10
13308: PUSH
13309: LD_INT 11
13311: PUSH
13312: LD_INT 12
13314: PUSH
13315: LD_INT 13
13317: PUSH
13318: LD_INT 14
13320: PUSH
13321: LD_INT 15
13323: PUSH
13324: LD_INT 16
13326: PUSH
13327: LD_INT 17
13329: PUSH
13330: LD_INT 18
13332: PUSH
13333: LD_INT 19
13335: PUSH
13336: LD_INT 20
13338: PUSH
13339: LD_INT 21
13341: PUSH
13342: LD_INT 22
13344: PUSH
13345: LD_INT 23
13347: PUSH
13348: LD_INT 24
13350: PUSH
13351: LD_INT 25
13353: PUSH
13354: LD_INT 26
13356: PUSH
13357: LD_INT 27
13359: PUSH
13360: LD_INT 28
13362: PUSH
13363: LD_INT 30
13365: PUSH
13366: LD_INT 31
13368: PUSH
13369: LD_INT 32
13371: PUSH
13372: LD_INT 33
13374: PUSH
13375: LD_INT 34
13377: PUSH
13378: LD_INT 36
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 101
13419: PUSH
13420: LD_INT 102
13422: PUSH
13423: LD_INT 103
13425: PUSH
13426: LD_INT 104
13428: PUSH
13429: LD_INT 105
13431: PUSH
13432: LD_INT 106
13434: PUSH
13435: LD_INT 107
13437: PUSH
13438: LD_INT 108
13440: PUSH
13441: LD_INT 109
13443: PUSH
13444: LD_INT 110
13446: PUSH
13447: LD_INT 111
13449: PUSH
13450: LD_INT 112
13452: PUSH
13453: LD_INT 113
13455: PUSH
13456: LD_INT 114
13458: PUSH
13459: LD_INT 116
13461: PUSH
13462: LD_INT 117
13464: PUSH
13465: LD_INT 118
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: ST_TO_ADDR
13491: GO 14946
13493: LD_INT 13
13495: DOUBLE
13496: EQUAL
13497: IFTRUE 13501
13499: GO 13709
13501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: LD_INT 4
13518: PUSH
13519: LD_INT 5
13521: PUSH
13522: LD_INT 8
13524: PUSH
13525: LD_INT 9
13527: PUSH
13528: LD_INT 10
13530: PUSH
13531: LD_INT 11
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: LD_INT 14
13539: PUSH
13540: LD_INT 15
13542: PUSH
13543: LD_INT 16
13545: PUSH
13546: LD_INT 17
13548: PUSH
13549: LD_INT 18
13551: PUSH
13552: LD_INT 19
13554: PUSH
13555: LD_INT 20
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 23
13566: PUSH
13567: LD_INT 24
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 26
13575: PUSH
13576: LD_INT 27
13578: PUSH
13579: LD_INT 28
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 31
13587: PUSH
13588: LD_INT 32
13590: PUSH
13591: LD_INT 33
13593: PUSH
13594: LD_INT 34
13596: PUSH
13597: LD_INT 36
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 101
13635: PUSH
13636: LD_INT 102
13638: PUSH
13639: LD_INT 103
13641: PUSH
13642: LD_INT 104
13644: PUSH
13645: LD_INT 105
13647: PUSH
13648: LD_INT 106
13650: PUSH
13651: LD_INT 107
13653: PUSH
13654: LD_INT 108
13656: PUSH
13657: LD_INT 109
13659: PUSH
13660: LD_INT 110
13662: PUSH
13663: LD_INT 111
13665: PUSH
13666: LD_INT 112
13668: PUSH
13669: LD_INT 113
13671: PUSH
13672: LD_INT 114
13674: PUSH
13675: LD_INT 116
13677: PUSH
13678: LD_INT 117
13680: PUSH
13681: LD_INT 118
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: ST_TO_ADDR
13707: GO 14946
13709: LD_INT 14
13711: DOUBLE
13712: EQUAL
13713: IFTRUE 13717
13715: GO 13941
13717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: LD_INT 3
13731: PUSH
13732: LD_INT 4
13734: PUSH
13735: LD_INT 5
13737: PUSH
13738: LD_INT 6
13740: PUSH
13741: LD_INT 7
13743: PUSH
13744: LD_INT 8
13746: PUSH
13747: LD_INT 9
13749: PUSH
13750: LD_INT 10
13752: PUSH
13753: LD_INT 11
13755: PUSH
13756: LD_INT 12
13758: PUSH
13759: LD_INT 13
13761: PUSH
13762: LD_INT 14
13764: PUSH
13765: LD_INT 15
13767: PUSH
13768: LD_INT 16
13770: PUSH
13771: LD_INT 17
13773: PUSH
13774: LD_INT 18
13776: PUSH
13777: LD_INT 19
13779: PUSH
13780: LD_INT 20
13782: PUSH
13783: LD_INT 21
13785: PUSH
13786: LD_INT 22
13788: PUSH
13789: LD_INT 23
13791: PUSH
13792: LD_INT 24
13794: PUSH
13795: LD_INT 25
13797: PUSH
13798: LD_INT 26
13800: PUSH
13801: LD_INT 27
13803: PUSH
13804: LD_INT 28
13806: PUSH
13807: LD_INT 29
13809: PUSH
13810: LD_INT 30
13812: PUSH
13813: LD_INT 31
13815: PUSH
13816: LD_INT 32
13818: PUSH
13819: LD_INT 33
13821: PUSH
13822: LD_INT 34
13824: PUSH
13825: LD_INT 36
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 101
13867: PUSH
13868: LD_INT 102
13870: PUSH
13871: LD_INT 103
13873: PUSH
13874: LD_INT 104
13876: PUSH
13877: LD_INT 105
13879: PUSH
13880: LD_INT 106
13882: PUSH
13883: LD_INT 107
13885: PUSH
13886: LD_INT 108
13888: PUSH
13889: LD_INT 109
13891: PUSH
13892: LD_INT 110
13894: PUSH
13895: LD_INT 111
13897: PUSH
13898: LD_INT 112
13900: PUSH
13901: LD_INT 113
13903: PUSH
13904: LD_INT 114
13906: PUSH
13907: LD_INT 116
13909: PUSH
13910: LD_INT 117
13912: PUSH
13913: LD_INT 118
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: ST_TO_ADDR
13939: GO 14946
13941: LD_INT 15
13943: DOUBLE
13944: EQUAL
13945: IFTRUE 13949
13947: GO 14173
13949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: LD_INT 4
13966: PUSH
13967: LD_INT 5
13969: PUSH
13970: LD_INT 6
13972: PUSH
13973: LD_INT 7
13975: PUSH
13976: LD_INT 8
13978: PUSH
13979: LD_INT 9
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 11
13987: PUSH
13988: LD_INT 12
13990: PUSH
13991: LD_INT 13
13993: PUSH
13994: LD_INT 14
13996: PUSH
13997: LD_INT 15
13999: PUSH
14000: LD_INT 16
14002: PUSH
14003: LD_INT 17
14005: PUSH
14006: LD_INT 18
14008: PUSH
14009: LD_INT 19
14011: PUSH
14012: LD_INT 20
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_INT 23
14023: PUSH
14024: LD_INT 24
14026: PUSH
14027: LD_INT 25
14029: PUSH
14030: LD_INT 26
14032: PUSH
14033: LD_INT 27
14035: PUSH
14036: LD_INT 28
14038: PUSH
14039: LD_INT 29
14041: PUSH
14042: LD_INT 30
14044: PUSH
14045: LD_INT 31
14047: PUSH
14048: LD_INT 32
14050: PUSH
14051: LD_INT 33
14053: PUSH
14054: LD_INT 34
14056: PUSH
14057: LD_INT 36
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 101
14099: PUSH
14100: LD_INT 102
14102: PUSH
14103: LD_INT 103
14105: PUSH
14106: LD_INT 104
14108: PUSH
14109: LD_INT 105
14111: PUSH
14112: LD_INT 106
14114: PUSH
14115: LD_INT 107
14117: PUSH
14118: LD_INT 108
14120: PUSH
14121: LD_INT 109
14123: PUSH
14124: LD_INT 110
14126: PUSH
14127: LD_INT 111
14129: PUSH
14130: LD_INT 112
14132: PUSH
14133: LD_INT 113
14135: PUSH
14136: LD_INT 114
14138: PUSH
14139: LD_INT 116
14141: PUSH
14142: LD_INT 117
14144: PUSH
14145: LD_INT 118
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: ST_TO_ADDR
14171: GO 14946
14173: LD_INT 16
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14317
14181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14182: LD_ADDR_VAR 0 2
14186: PUSH
14187: LD_INT 2
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: LD_INT 5
14195: PUSH
14196: LD_INT 7
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 15
14207: PUSH
14208: LD_INT 16
14210: PUSH
14211: LD_INT 20
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 25
14225: PUSH
14226: LD_INT 26
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 31
14234: PUSH
14235: LD_INT 32
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: LD_INT 34
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 101
14267: PUSH
14268: LD_INT 102
14270: PUSH
14271: LD_INT 103
14273: PUSH
14274: LD_INT 106
14276: PUSH
14277: LD_INT 108
14279: PUSH
14280: LD_INT 112
14282: PUSH
14283: LD_INT 113
14285: PUSH
14286: LD_INT 114
14288: PUSH
14289: LD_INT 116
14291: PUSH
14292: LD_INT 117
14294: PUSH
14295: LD_INT 118
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: ST_TO_ADDR
14315: GO 14946
14317: LD_INT 17
14319: DOUBLE
14320: EQUAL
14321: IFTRUE 14325
14323: GO 14549
14325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: LD_INT 2
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: LD_INT 7
14351: PUSH
14352: LD_INT 8
14354: PUSH
14355: LD_INT 9
14357: PUSH
14358: LD_INT 10
14360: PUSH
14361: LD_INT 11
14363: PUSH
14364: LD_INT 12
14366: PUSH
14367: LD_INT 13
14369: PUSH
14370: LD_INT 14
14372: PUSH
14373: LD_INT 15
14375: PUSH
14376: LD_INT 16
14378: PUSH
14379: LD_INT 17
14381: PUSH
14382: LD_INT 18
14384: PUSH
14385: LD_INT 19
14387: PUSH
14388: LD_INT 20
14390: PUSH
14391: LD_INT 21
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_INT 23
14399: PUSH
14400: LD_INT 24
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 26
14408: PUSH
14409: LD_INT 27
14411: PUSH
14412: LD_INT 28
14414: PUSH
14415: LD_INT 29
14417: PUSH
14418: LD_INT 30
14420: PUSH
14421: LD_INT 31
14423: PUSH
14424: LD_INT 32
14426: PUSH
14427: LD_INT 33
14429: PUSH
14430: LD_INT 34
14432: PUSH
14433: LD_INT 36
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 101
14475: PUSH
14476: LD_INT 102
14478: PUSH
14479: LD_INT 103
14481: PUSH
14482: LD_INT 104
14484: PUSH
14485: LD_INT 105
14487: PUSH
14488: LD_INT 106
14490: PUSH
14491: LD_INT 107
14493: PUSH
14494: LD_INT 108
14496: PUSH
14497: LD_INT 109
14499: PUSH
14500: LD_INT 110
14502: PUSH
14503: LD_INT 111
14505: PUSH
14506: LD_INT 112
14508: PUSH
14509: LD_INT 113
14511: PUSH
14512: LD_INT 114
14514: PUSH
14515: LD_INT 116
14517: PUSH
14518: LD_INT 117
14520: PUSH
14521: LD_INT 118
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: ST_TO_ADDR
14547: GO 14946
14549: LD_INT 18
14551: DOUBLE
14552: EQUAL
14553: IFTRUE 14557
14555: GO 14705
14557: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14558: LD_ADDR_VAR 0 2
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: LD_INT 4
14568: PUSH
14569: LD_INT 5
14571: PUSH
14572: LD_INT 7
14574: PUSH
14575: LD_INT 11
14577: PUSH
14578: LD_INT 12
14580: PUSH
14581: LD_INT 15
14583: PUSH
14584: LD_INT 16
14586: PUSH
14587: LD_INT 20
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 22
14595: PUSH
14596: LD_INT 23
14598: PUSH
14599: LD_INT 25
14601: PUSH
14602: LD_INT 26
14604: PUSH
14605: LD_INT 30
14607: PUSH
14608: LD_INT 31
14610: PUSH
14611: LD_INT 32
14613: PUSH
14614: LD_INT 33
14616: PUSH
14617: LD_INT 34
14619: PUSH
14620: LD_INT 35
14622: PUSH
14623: LD_INT 36
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 101
14651: PUSH
14652: LD_INT 102
14654: PUSH
14655: LD_INT 103
14657: PUSH
14658: LD_INT 106
14660: PUSH
14661: LD_INT 108
14663: PUSH
14664: LD_INT 112
14666: PUSH
14667: LD_INT 113
14669: PUSH
14670: LD_INT 114
14672: PUSH
14673: LD_INT 115
14675: PUSH
14676: LD_INT 116
14678: PUSH
14679: LD_INT 117
14681: PUSH
14682: LD_INT 118
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: ST_TO_ADDR
14703: GO 14946
14705: LD_INT 19
14707: DOUBLE
14708: EQUAL
14709: IFTRUE 14713
14711: GO 14945
14713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14714: LD_ADDR_VAR 0 2
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: LD_INT 3
14727: PUSH
14728: LD_INT 4
14730: PUSH
14731: LD_INT 5
14733: PUSH
14734: LD_INT 6
14736: PUSH
14737: LD_INT 7
14739: PUSH
14740: LD_INT 8
14742: PUSH
14743: LD_INT 9
14745: PUSH
14746: LD_INT 10
14748: PUSH
14749: LD_INT 11
14751: PUSH
14752: LD_INT 12
14754: PUSH
14755: LD_INT 13
14757: PUSH
14758: LD_INT 14
14760: PUSH
14761: LD_INT 15
14763: PUSH
14764: LD_INT 16
14766: PUSH
14767: LD_INT 17
14769: PUSH
14770: LD_INT 18
14772: PUSH
14773: LD_INT 19
14775: PUSH
14776: LD_INT 20
14778: PUSH
14779: LD_INT 21
14781: PUSH
14782: LD_INT 22
14784: PUSH
14785: LD_INT 23
14787: PUSH
14788: LD_INT 24
14790: PUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 26
14796: PUSH
14797: LD_INT 27
14799: PUSH
14800: LD_INT 28
14802: PUSH
14803: LD_INT 29
14805: PUSH
14806: LD_INT 30
14808: PUSH
14809: LD_INT 31
14811: PUSH
14812: LD_INT 32
14814: PUSH
14815: LD_INT 33
14817: PUSH
14818: LD_INT 34
14820: PUSH
14821: LD_INT 35
14823: PUSH
14824: LD_INT 36
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 101
14867: PUSH
14868: LD_INT 102
14870: PUSH
14871: LD_INT 103
14873: PUSH
14874: LD_INT 104
14876: PUSH
14877: LD_INT 105
14879: PUSH
14880: LD_INT 106
14882: PUSH
14883: LD_INT 107
14885: PUSH
14886: LD_INT 108
14888: PUSH
14889: LD_INT 109
14891: PUSH
14892: LD_INT 110
14894: PUSH
14895: LD_INT 111
14897: PUSH
14898: LD_INT 112
14900: PUSH
14901: LD_INT 113
14903: PUSH
14904: LD_INT 114
14906: PUSH
14907: LD_INT 115
14909: PUSH
14910: LD_INT 116
14912: PUSH
14913: LD_INT 117
14915: PUSH
14916: LD_INT 118
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: ST_TO_ADDR
14943: GO 14946
14945: POP
// end else
14946: GO 15177
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: LD_INT 4
14964: PUSH
14965: LD_INT 5
14967: PUSH
14968: LD_INT 6
14970: PUSH
14971: LD_INT 7
14973: PUSH
14974: LD_INT 8
14976: PUSH
14977: LD_INT 9
14979: PUSH
14980: LD_INT 10
14982: PUSH
14983: LD_INT 11
14985: PUSH
14986: LD_INT 12
14988: PUSH
14989: LD_INT 13
14991: PUSH
14992: LD_INT 14
14994: PUSH
14995: LD_INT 15
14997: PUSH
14998: LD_INT 16
15000: PUSH
15001: LD_INT 17
15003: PUSH
15004: LD_INT 18
15006: PUSH
15007: LD_INT 19
15009: PUSH
15010: LD_INT 20
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 22
15018: PUSH
15019: LD_INT 23
15021: PUSH
15022: LD_INT 24
15024: PUSH
15025: LD_INT 25
15027: PUSH
15028: LD_INT 26
15030: PUSH
15031: LD_INT 27
15033: PUSH
15034: LD_INT 28
15036: PUSH
15037: LD_INT 29
15039: PUSH
15040: LD_INT 30
15042: PUSH
15043: LD_INT 31
15045: PUSH
15046: LD_INT 32
15048: PUSH
15049: LD_INT 33
15051: PUSH
15052: LD_INT 34
15054: PUSH
15055: LD_INT 35
15057: PUSH
15058: LD_INT 36
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 101
15101: PUSH
15102: LD_INT 102
15104: PUSH
15105: LD_INT 103
15107: PUSH
15108: LD_INT 104
15110: PUSH
15111: LD_INT 105
15113: PUSH
15114: LD_INT 106
15116: PUSH
15117: LD_INT 107
15119: PUSH
15120: LD_INT 108
15122: PUSH
15123: LD_INT 109
15125: PUSH
15126: LD_INT 110
15128: PUSH
15129: LD_INT 111
15131: PUSH
15132: LD_INT 112
15134: PUSH
15135: LD_INT 113
15137: PUSH
15138: LD_INT 114
15140: PUSH
15141: LD_INT 115
15143: PUSH
15144: LD_INT 116
15146: PUSH
15147: LD_INT 117
15149: PUSH
15150: LD_INT 118
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: ST_TO_ADDR
// if result then
15177: LD_VAR 0 2
15181: IFFALSE 15967
// begin normal :=  ;
15183: LD_ADDR_VAR 0 5
15187: PUSH
15188: LD_STRING 
15190: ST_TO_ADDR
// hardcore :=  ;
15191: LD_ADDR_VAR 0 6
15195: PUSH
15196: LD_STRING 
15198: ST_TO_ADDR
// active :=  ;
15199: LD_ADDR_VAR 0 7
15203: PUSH
15204: LD_STRING 
15206: ST_TO_ADDR
// for i = 1 to normalCounter do
15207: LD_ADDR_VAR 0 8
15211: PUSH
15212: DOUBLE
15213: LD_INT 1
15215: DEC
15216: ST_TO_ADDR
15217: LD_EXP 28
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15324
// begin tmp := 0 ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_STRING 0
15232: ST_TO_ADDR
// if result [ 1 ] then
15233: LD_VAR 0 2
15237: PUSH
15238: LD_INT 1
15240: ARRAY
15241: IFFALSE 15306
// if result [ 1 ] [ 1 ] = i then
15243: LD_VAR 0 2
15247: PUSH
15248: LD_INT 1
15250: ARRAY
15251: PUSH
15252: LD_INT 1
15254: ARRAY
15255: PUSH
15256: LD_VAR 0 8
15260: EQUAL
15261: IFFALSE 15306
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15263: LD_ADDR_VAR 0 2
15267: PUSH
15268: LD_VAR 0 2
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: LD_VAR 0 2
15280: PUSH
15281: LD_INT 1
15283: ARRAY
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 3
15292: PPUSH
15293: CALL_OW 1
15297: ST_TO_ADDR
// tmp := 1 ;
15298: LD_ADDR_VAR 0 3
15302: PUSH
15303: LD_STRING 1
15305: ST_TO_ADDR
// end ; normal := normal & tmp ;
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: LD_VAR 0 5
15315: PUSH
15316: LD_VAR 0 3
15320: STR
15321: ST_TO_ADDR
// end ;
15322: GO 15222
15324: POP
15325: POP
// for i = 1 to hardcoreCounter do
15326: LD_ADDR_VAR 0 8
15330: PUSH
15331: DOUBLE
15332: LD_INT 1
15334: DEC
15335: ST_TO_ADDR
15336: LD_EXP 29
15340: PUSH
15341: FOR_TO
15342: IFFALSE 15447
// begin tmp := 0 ;
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: LD_STRING 0
15351: ST_TO_ADDR
// if result [ 2 ] then
15352: LD_VAR 0 2
15356: PUSH
15357: LD_INT 2
15359: ARRAY
15360: IFFALSE 15429
// if result [ 2 ] [ 1 ] = 100 + i then
15362: LD_VAR 0 2
15366: PUSH
15367: LD_INT 2
15369: ARRAY
15370: PUSH
15371: LD_INT 1
15373: ARRAY
15374: PUSH
15375: LD_INT 100
15377: PUSH
15378: LD_VAR 0 8
15382: PLUS
15383: EQUAL
15384: IFFALSE 15429
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15386: LD_ADDR_VAR 0 2
15390: PUSH
15391: LD_VAR 0 2
15395: PPUSH
15396: LD_INT 2
15398: PPUSH
15399: LD_VAR 0 2
15403: PUSH
15404: LD_INT 2
15406: ARRAY
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 3
15415: PPUSH
15416: CALL_OW 1
15420: ST_TO_ADDR
// tmp := 1 ;
15421: LD_ADDR_VAR 0 3
15425: PUSH
15426: LD_STRING 1
15428: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15429: LD_ADDR_VAR 0 6
15433: PUSH
15434: LD_VAR 0 6
15438: PUSH
15439: LD_VAR 0 3
15443: STR
15444: ST_TO_ADDR
// end ;
15445: GO 15341
15447: POP
15448: POP
// if isGameLoad then
15449: LD_VAR 0 1
15453: IFFALSE 15928
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15455: LD_ADDR_VAR 0 4
15459: PUSH
15460: LD_EXP 32
15464: PUSH
15465: LD_EXP 31
15469: PUSH
15470: LD_EXP 33
15474: PUSH
15475: LD_EXP 30
15479: PUSH
15480: LD_EXP 34
15484: PUSH
15485: LD_EXP 35
15489: PUSH
15490: LD_EXP 36
15494: PUSH
15495: LD_EXP 37
15499: PUSH
15500: LD_EXP 38
15504: PUSH
15505: LD_EXP 39
15509: PUSH
15510: LD_EXP 40
15514: PUSH
15515: LD_EXP 41
15519: PUSH
15520: LD_EXP 42
15524: PUSH
15525: LD_EXP 43
15529: PUSH
15530: LD_EXP 51
15534: PUSH
15535: LD_EXP 52
15539: PUSH
15540: LD_EXP 53
15544: PUSH
15545: LD_EXP 54
15549: PUSH
15550: LD_EXP 56
15554: PUSH
15555: LD_EXP 57
15559: PUSH
15560: LD_EXP 58
15564: PUSH
15565: LD_EXP 61
15569: PUSH
15570: LD_EXP 63
15574: PUSH
15575: LD_EXP 64
15579: PUSH
15580: LD_EXP 65
15584: PUSH
15585: LD_EXP 67
15589: PUSH
15590: LD_EXP 68
15594: PUSH
15595: LD_EXP 71
15599: PUSH
15600: LD_EXP 72
15604: PUSH
15605: LD_EXP 73
15609: PUSH
15610: LD_EXP 74
15614: PUSH
15615: LD_EXP 75
15619: PUSH
15620: LD_EXP 76
15624: PUSH
15625: LD_EXP 77
15629: PUSH
15630: LD_EXP 78
15634: PUSH
15635: LD_EXP 79
15639: PUSH
15640: LD_EXP 44
15644: PUSH
15645: LD_EXP 45
15649: PUSH
15650: LD_EXP 48
15654: PUSH
15655: LD_EXP 49
15659: PUSH
15660: LD_EXP 50
15664: PUSH
15665: LD_EXP 46
15669: PUSH
15670: LD_EXP 47
15674: PUSH
15675: LD_EXP 55
15679: PUSH
15680: LD_EXP 59
15684: PUSH
15685: LD_EXP 60
15689: PUSH
15690: LD_EXP 62
15694: PUSH
15695: LD_EXP 66
15699: PUSH
15700: LD_EXP 69
15704: PUSH
15705: LD_EXP 70
15709: PUSH
15710: LD_EXP 80
15714: PUSH
15715: LD_EXP 81
15719: PUSH
15720: LD_EXP 82
15724: PUSH
15725: LD_EXP 83
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: ST_TO_ADDR
// tmp :=  ;
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: LD_STRING 
15793: ST_TO_ADDR
// for i = 1 to normalCounter do
15794: LD_ADDR_VAR 0 8
15798: PUSH
15799: DOUBLE
15800: LD_INT 1
15802: DEC
15803: ST_TO_ADDR
15804: LD_EXP 28
15808: PUSH
15809: FOR_TO
15810: IFFALSE 15846
// begin if flags [ i ] then
15812: LD_VAR 0 4
15816: PUSH
15817: LD_VAR 0 8
15821: ARRAY
15822: IFFALSE 15844
// tmp := tmp & i & ; ;
15824: LD_ADDR_VAR 0 3
15828: PUSH
15829: LD_VAR 0 3
15833: PUSH
15834: LD_VAR 0 8
15838: STR
15839: PUSH
15840: LD_STRING ;
15842: STR
15843: ST_TO_ADDR
// end ;
15844: GO 15809
15846: POP
15847: POP
// for i = 1 to hardcoreCounter do
15848: LD_ADDR_VAR 0 8
15852: PUSH
15853: DOUBLE
15854: LD_INT 1
15856: DEC
15857: ST_TO_ADDR
15858: LD_EXP 29
15862: PUSH
15863: FOR_TO
15864: IFFALSE 15910
// begin if flags [ normalCounter + i ] then
15866: LD_VAR 0 4
15870: PUSH
15871: LD_EXP 28
15875: PUSH
15876: LD_VAR 0 8
15880: PLUS
15881: ARRAY
15882: IFFALSE 15908
// tmp := tmp & ( 100 + i ) & ; ;
15884: LD_ADDR_VAR 0 3
15888: PUSH
15889: LD_VAR 0 3
15893: PUSH
15894: LD_INT 100
15896: PUSH
15897: LD_VAR 0 8
15901: PLUS
15902: STR
15903: PUSH
15904: LD_STRING ;
15906: STR
15907: ST_TO_ADDR
// end ;
15908: GO 15863
15910: POP
15911: POP
// if tmp then
15912: LD_VAR 0 3
15916: IFFALSE 15928
// active := tmp ;
15918: LD_ADDR_VAR 0 7
15922: PUSH
15923: LD_VAR 0 3
15927: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15928: LD_STRING getStreamItemsFromMission("
15930: PUSH
15931: LD_VAR 0 5
15935: STR
15936: PUSH
15937: LD_STRING ","
15939: STR
15940: PUSH
15941: LD_VAR 0 6
15945: STR
15946: PUSH
15947: LD_STRING ","
15949: STR
15950: PUSH
15951: LD_VAR 0 7
15955: STR
15956: PUSH
15957: LD_STRING ")
15959: STR
15960: PPUSH
15961: CALL_OW 559
// end else
15965: GO 15974
// ToLua ( getStreamItemsFromMission("","","") ) ;
15967: LD_STRING getStreamItemsFromMission("","","")
15969: PPUSH
15970: CALL_OW 559
// end ;
15974: LD_VAR 0 2
15978: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15979: LD_EXP 27
15983: PUSH
15984: LD_EXP 32
15988: AND
15989: IFFALSE 16113
15991: GO 15993
15993: DISABLE
15994: LD_INT 0
15996: PPUSH
15997: PPUSH
// begin enable ;
15998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 22
16006: PUSH
16007: LD_OWVAR 2
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: LD_INT 34
16021: PUSH
16022: LD_INT 7
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 34
16031: PUSH
16032: LD_INT 45
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 34
16041: PUSH
16042: LD_INT 28
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 34
16051: PUSH
16052: LD_INT 47
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PPUSH
16070: CALL_OW 69
16074: ST_TO_ADDR
// if not tmp then
16075: LD_VAR 0 2
16079: NOT
16080: IFFALSE 16084
// exit ;
16082: GO 16113
// for i in tmp do
16084: LD_ADDR_VAR 0 1
16088: PUSH
16089: LD_VAR 0 2
16093: PUSH
16094: FOR_IN
16095: IFFALSE 16111
// begin SetLives ( i , 0 ) ;
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_INT 0
16104: PPUSH
16105: CALL_OW 234
// end ;
16109: GO 16094
16111: POP
16112: POP
// end ;
16113: PPOPN 2
16115: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16116: LD_EXP 27
16120: PUSH
16121: LD_EXP 33
16125: AND
16126: IFFALSE 16210
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// begin enable ;
16135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16136: LD_ADDR_VAR 0 2
16140: PUSH
16141: LD_INT 22
16143: PUSH
16144: LD_OWVAR 2
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 32
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: ST_TO_ADDR
// if not tmp then
16172: LD_VAR 0 2
16176: NOT
16177: IFFALSE 16181
// exit ;
16179: GO 16210
// for i in tmp do
16181: LD_ADDR_VAR 0 1
16185: PUSH
16186: LD_VAR 0 2
16190: PUSH
16191: FOR_IN
16192: IFFALSE 16208
// begin SetLives ( i , 0 ) ;
16194: LD_VAR 0 1
16198: PPUSH
16199: LD_INT 0
16201: PPUSH
16202: CALL_OW 234
// end ;
16206: GO 16191
16208: POP
16209: POP
// end ;
16210: PPOPN 2
16212: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16213: LD_EXP 27
16217: PUSH
16218: LD_EXP 30
16222: AND
16223: IFFALSE 16316
16225: GO 16227
16227: DISABLE
16228: LD_INT 0
16230: PPUSH
// begin enable ;
16231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16232: LD_ADDR_VAR 0 1
16236: PUSH
16237: LD_INT 22
16239: PUSH
16240: LD_OWVAR 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 5
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 9
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 25
16274: PUSH
16275: LD_INT 8
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16314
// begin SetClass ( i , 1 ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: CALL_OW 336
// end ;
16312: GO 16297
16314: POP
16315: POP
// end ;
16316: PPOPN 1
16318: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16319: LD_EXP 27
16323: PUSH
16324: LD_EXP 31
16328: AND
16329: PUSH
16330: LD_OWVAR 65
16334: PUSH
16335: LD_INT 7
16337: LESS
16338: AND
16339: IFFALSE 16353
16341: GO 16343
16343: DISABLE
// begin enable ;
16344: ENABLE
// game_speed := 7 ;
16345: LD_ADDR_OWVAR 65
16349: PUSH
16350: LD_INT 7
16352: ST_TO_ADDR
// end ;
16353: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16354: LD_EXP 27
16358: PUSH
16359: LD_EXP 34
16363: AND
16364: IFFALSE 16566
16366: GO 16368
16368: DISABLE
16369: LD_INT 0
16371: PPUSH
16372: PPUSH
16373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16374: LD_ADDR_VAR 0 3
16378: PUSH
16379: LD_INT 81
16381: PUSH
16382: LD_OWVAR 2
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 21
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PPUSH
16405: CALL_OW 69
16409: ST_TO_ADDR
// if not tmp then
16410: LD_VAR 0 3
16414: NOT
16415: IFFALSE 16419
// exit ;
16417: GO 16566
// if tmp > 5 then
16419: LD_VAR 0 3
16423: PUSH
16424: LD_INT 5
16426: GREATER
16427: IFFALSE 16439
// k := 5 else
16429: LD_ADDR_VAR 0 2
16433: PUSH
16434: LD_INT 5
16436: ST_TO_ADDR
16437: GO 16449
// k := tmp ;
16439: LD_ADDR_VAR 0 2
16443: PUSH
16444: LD_VAR 0 3
16448: ST_TO_ADDR
// for i := 1 to k do
16449: LD_ADDR_VAR 0 1
16453: PUSH
16454: DOUBLE
16455: LD_INT 1
16457: DEC
16458: ST_TO_ADDR
16459: LD_VAR 0 2
16463: PUSH
16464: FOR_TO
16465: IFFALSE 16564
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16467: LD_VAR 0 3
16471: PUSH
16472: LD_VAR 0 1
16476: ARRAY
16477: PPUSH
16478: LD_VAR 0 1
16482: PUSH
16483: LD_INT 4
16485: MOD
16486: PUSH
16487: LD_INT 1
16489: PLUS
16490: PPUSH
16491: CALL_OW 259
16495: PUSH
16496: LD_INT 10
16498: LESS
16499: IFFALSE 16562
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16501: LD_VAR 0 3
16505: PUSH
16506: LD_VAR 0 1
16510: ARRAY
16511: PPUSH
16512: LD_VAR 0 1
16516: PUSH
16517: LD_INT 4
16519: MOD
16520: PUSH
16521: LD_INT 1
16523: PLUS
16524: PPUSH
16525: LD_VAR 0 3
16529: PUSH
16530: LD_VAR 0 1
16534: ARRAY
16535: PPUSH
16536: LD_VAR 0 1
16540: PUSH
16541: LD_INT 4
16543: MOD
16544: PUSH
16545: LD_INT 1
16547: PLUS
16548: PPUSH
16549: CALL_OW 259
16553: PUSH
16554: LD_INT 1
16556: PLUS
16557: PPUSH
16558: CALL_OW 237
16562: GO 16464
16564: POP
16565: POP
// end ;
16566: PPOPN 3
16568: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16569: LD_EXP 27
16573: PUSH
16574: LD_EXP 35
16578: AND
16579: IFFALSE 16599
16581: GO 16583
16583: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16584: LD_INT 4
16586: PPUSH
16587: LD_OWVAR 2
16591: PPUSH
16592: LD_INT 0
16594: PPUSH
16595: CALL_OW 324
16599: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16600: LD_EXP 27
16604: PUSH
16605: LD_EXP 64
16609: AND
16610: IFFALSE 16630
16612: GO 16614
16614: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16615: LD_INT 19
16617: PPUSH
16618: LD_OWVAR 2
16622: PPUSH
16623: LD_INT 0
16625: PPUSH
16626: CALL_OW 324
16630: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16631: LD_EXP 27
16635: PUSH
16636: LD_EXP 36
16640: AND
16641: IFFALSE 16743
16643: GO 16645
16645: DISABLE
16646: LD_INT 0
16648: PPUSH
16649: PPUSH
// begin enable ;
16650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16651: LD_ADDR_VAR 0 2
16655: PUSH
16656: LD_INT 22
16658: PUSH
16659: LD_OWVAR 2
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 2
16670: PUSH
16671: LD_INT 34
16673: PUSH
16674: LD_INT 11
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 34
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: ST_TO_ADDR
// if not tmp then
16705: LD_VAR 0 2
16709: NOT
16710: IFFALSE 16714
// exit ;
16712: GO 16743
// for i in tmp do
16714: LD_ADDR_VAR 0 1
16718: PUSH
16719: LD_VAR 0 2
16723: PUSH
16724: FOR_IN
16725: IFFALSE 16741
// begin SetLives ( i , 0 ) ;
16727: LD_VAR 0 1
16731: PPUSH
16732: LD_INT 0
16734: PPUSH
16735: CALL_OW 234
// end ;
16739: GO 16724
16741: POP
16742: POP
// end ;
16743: PPOPN 2
16745: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16746: LD_EXP 27
16750: PUSH
16751: LD_EXP 37
16755: AND
16756: IFFALSE 16776
16758: GO 16760
16760: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16761: LD_INT 32
16763: PPUSH
16764: LD_OWVAR 2
16768: PPUSH
16769: LD_INT 0
16771: PPUSH
16772: CALL_OW 324
16776: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16777: LD_EXP 27
16781: PUSH
16782: LD_EXP 38
16786: AND
16787: IFFALSE 16968
16789: GO 16791
16791: DISABLE
16792: LD_INT 0
16794: PPUSH
16795: PPUSH
16796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 33
16816: PUSH
16817: LD_INT 3
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// if not tmp then
16833: LD_VAR 0 2
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 16968
// side := 0 ;
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_INT 0
16849: ST_TO_ADDR
// for i := 1 to 8 do
16850: LD_ADDR_VAR 0 1
16854: PUSH
16855: DOUBLE
16856: LD_INT 1
16858: DEC
16859: ST_TO_ADDR
16860: LD_INT 8
16862: PUSH
16863: FOR_TO
16864: IFFALSE 16912
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16866: LD_OWVAR 2
16870: PUSH
16871: LD_VAR 0 1
16875: NONEQUAL
16876: PUSH
16877: LD_OWVAR 2
16881: PPUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 81
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: IFFALSE 16910
// begin side := i ;
16898: LD_ADDR_VAR 0 3
16902: PUSH
16903: LD_VAR 0 1
16907: ST_TO_ADDR
// break ;
16908: GO 16912
// end ;
16910: GO 16863
16912: POP
16913: POP
// if not side then
16914: LD_VAR 0 3
16918: NOT
16919: IFFALSE 16923
// exit ;
16921: GO 16968
// for i := 1 to tmp do
16923: LD_ADDR_VAR 0 1
16927: PUSH
16928: DOUBLE
16929: LD_INT 1
16931: DEC
16932: ST_TO_ADDR
16933: LD_VAR 0 2
16937: PUSH
16938: FOR_TO
16939: IFFALSE 16966
// if Prob ( 60 ) then
16941: LD_INT 60
16943: PPUSH
16944: CALL_OW 13
16948: IFFALSE 16964
// SetSide ( i , side ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_VAR 0 3
16959: PPUSH
16960: CALL_OW 235
16964: GO 16938
16966: POP
16967: POP
// end ;
16968: PPOPN 3
16970: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16971: LD_EXP 27
16975: PUSH
16976: LD_EXP 40
16980: AND
16981: IFFALSE 17100
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16989: LD_ADDR_VAR 0 1
16993: PUSH
16994: LD_INT 22
16996: PUSH
16997: LD_OWVAR 2
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 21
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 3
17018: PUSH
17019: LD_INT 23
17021: PUSH
17022: LD_INT 0
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PPUSH
17038: CALL_OW 69
17042: PUSH
17043: FOR_IN
17044: IFFALSE 17098
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 257
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 3
17064: PUSH
17065: LD_INT 4
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: IN
17074: IFFALSE 17096
// SetClass ( un , rand ( 1 , 4 ) ) ;
17076: LD_VAR 0 1
17080: PPUSH
17081: LD_INT 1
17083: PPUSH
17084: LD_INT 4
17086: PPUSH
17087: CALL_OW 12
17091: PPUSH
17092: CALL_OW 336
17096: GO 17043
17098: POP
17099: POP
// end ;
17100: PPOPN 1
17102: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17103: LD_EXP 27
17107: PUSH
17108: LD_EXP 39
17112: AND
17113: IFFALSE 17192
17115: GO 17117
17117: DISABLE
17118: LD_INT 0
17120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17121: LD_ADDR_VAR 0 1
17125: PUSH
17126: LD_INT 22
17128: PUSH
17129: LD_OWVAR 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 21
17140: PUSH
17141: LD_INT 3
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PPUSH
17152: CALL_OW 69
17156: ST_TO_ADDR
// if not tmp then
17157: LD_VAR 0 1
17161: NOT
17162: IFFALSE 17166
// exit ;
17164: GO 17192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17166: LD_VAR 0 1
17170: PUSH
17171: LD_INT 1
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 12
17183: ARRAY
17184: PPUSH
17185: LD_INT 100
17187: PPUSH
17188: CALL_OW 234
// end ;
17192: PPOPN 1
17194: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17195: LD_EXP 27
17199: PUSH
17200: LD_EXP 41
17204: AND
17205: IFFALSE 17303
17207: GO 17209
17209: DISABLE
17210: LD_INT 0
17212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_INT 22
17220: PUSH
17221: LD_OWVAR 2
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: ST_TO_ADDR
// if not tmp then
17249: LD_VAR 0 1
17253: NOT
17254: IFFALSE 17258
// exit ;
17256: GO 17303
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17258: LD_VAR 0 1
17262: PUSH
17263: LD_INT 1
17265: PPUSH
17266: LD_VAR 0 1
17270: PPUSH
17271: CALL_OW 12
17275: ARRAY
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: LD_INT 4
17282: PPUSH
17283: CALL_OW 12
17287: PPUSH
17288: LD_INT 3000
17290: PPUSH
17291: LD_INT 9000
17293: PPUSH
17294: CALL_OW 12
17298: PPUSH
17299: CALL_OW 492
// end ;
17303: PPOPN 1
17305: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17306: LD_EXP 27
17310: PUSH
17311: LD_EXP 42
17315: AND
17316: IFFALSE 17336
17318: GO 17320
17320: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17321: LD_INT 1
17323: PPUSH
17324: LD_OWVAR 2
17328: PPUSH
17329: LD_INT 0
17331: PPUSH
17332: CALL_OW 324
17336: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17337: LD_EXP 27
17341: PUSH
17342: LD_EXP 43
17346: AND
17347: IFFALSE 17430
17349: GO 17351
17351: DISABLE
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17356: LD_ADDR_VAR 0 2
17360: PUSH
17361: LD_INT 22
17363: PUSH
17364: LD_OWVAR 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 21
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 69
17391: ST_TO_ADDR
// if not tmp then
17392: LD_VAR 0 2
17396: NOT
17397: IFFALSE 17401
// exit ;
17399: GO 17430
// for i in tmp do
17401: LD_ADDR_VAR 0 1
17405: PUSH
17406: LD_VAR 0 2
17410: PUSH
17411: FOR_IN
17412: IFFALSE 17428
// SetBLevel ( i , 10 ) ;
17414: LD_VAR 0 1
17418: PPUSH
17419: LD_INT 10
17421: PPUSH
17422: CALL_OW 241
17426: GO 17411
17428: POP
17429: POP
// end ;
17430: PPOPN 2
17432: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17433: LD_EXP 27
17437: PUSH
17438: LD_EXP 44
17442: AND
17443: IFFALSE 17554
17445: GO 17447
17447: DISABLE
17448: LD_INT 0
17450: PPUSH
17451: PPUSH
17452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17453: LD_ADDR_VAR 0 3
17457: PUSH
17458: LD_INT 22
17460: PUSH
17461: LD_OWVAR 2
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 25
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PPUSH
17484: CALL_OW 69
17488: ST_TO_ADDR
// if not tmp then
17489: LD_VAR 0 3
17493: NOT
17494: IFFALSE 17498
// exit ;
17496: GO 17554
// un := tmp [ rand ( 1 , tmp ) ] ;
17498: LD_ADDR_VAR 0 2
17502: PUSH
17503: LD_VAR 0 3
17507: PUSH
17508: LD_INT 1
17510: PPUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: CALL_OW 12
17520: ARRAY
17521: ST_TO_ADDR
// if Crawls ( un ) then
17522: LD_VAR 0 2
17526: PPUSH
17527: CALL_OW 318
17531: IFFALSE 17542
// ComWalk ( un ) ;
17533: LD_VAR 0 2
17537: PPUSH
17538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17542: LD_VAR 0 2
17546: PPUSH
17547: LD_INT 5
17549: PPUSH
17550: CALL_OW 336
// end ;
17554: PPOPN 3
17556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17557: LD_EXP 27
17561: PUSH
17562: LD_EXP 45
17566: AND
17567: PUSH
17568: LD_OWVAR 67
17572: PUSH
17573: LD_INT 4
17575: LESS
17576: AND
17577: IFFALSE 17596
17579: GO 17581
17581: DISABLE
// begin Difficulty := Difficulty + 1 ;
17582: LD_ADDR_OWVAR 67
17586: PUSH
17587: LD_OWVAR 67
17591: PUSH
17592: LD_INT 1
17594: PLUS
17595: ST_TO_ADDR
// end ;
17596: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17597: LD_EXP 27
17601: PUSH
17602: LD_EXP 46
17606: AND
17607: IFFALSE 17710
17609: GO 17611
17611: DISABLE
17612: LD_INT 0
17614: PPUSH
// begin for i := 1 to 5 do
17615: LD_ADDR_VAR 0 1
17619: PUSH
17620: DOUBLE
17621: LD_INT 1
17623: DEC
17624: ST_TO_ADDR
17625: LD_INT 5
17627: PUSH
17628: FOR_TO
17629: IFFALSE 17708
// begin uc_nation := nation_nature ;
17631: LD_ADDR_OWVAR 21
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// uc_side := 0 ;
17639: LD_ADDR_OWVAR 20
17643: PUSH
17644: LD_INT 0
17646: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17647: LD_ADDR_OWVAR 29
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 12
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: ST_TO_ADDR
// hc_agressivity := 20 ;
17662: LD_ADDR_OWVAR 35
17666: PUSH
17667: LD_INT 20
17669: ST_TO_ADDR
// hc_class := class_tiger ;
17670: LD_ADDR_OWVAR 28
17674: PUSH
17675: LD_INT 14
17677: ST_TO_ADDR
// hc_gallery :=  ;
17678: LD_ADDR_OWVAR 33
17682: PUSH
17683: LD_STRING 
17685: ST_TO_ADDR
// hc_name :=  ;
17686: LD_ADDR_OWVAR 26
17690: PUSH
17691: LD_STRING 
17693: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17694: CALL_OW 44
17698: PPUSH
17699: LD_INT 0
17701: PPUSH
17702: CALL_OW 51
// end ;
17706: GO 17628
17708: POP
17709: POP
// end ;
17710: PPOPN 1
17712: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17713: LD_EXP 27
17717: PUSH
17718: LD_EXP 47
17722: AND
17723: IFFALSE 17732
17725: GO 17727
17727: DISABLE
// StreamSibBomb ;
17728: CALL 17733 0 0
17732: END
// export function StreamSibBomb ; var i , x , y ; begin
17733: LD_INT 0
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
// result := false ;
17739: LD_ADDR_VAR 0 1
17743: PUSH
17744: LD_INT 0
17746: ST_TO_ADDR
// for i := 1 to 16 do
17747: LD_ADDR_VAR 0 2
17751: PUSH
17752: DOUBLE
17753: LD_INT 1
17755: DEC
17756: ST_TO_ADDR
17757: LD_INT 16
17759: PUSH
17760: FOR_TO
17761: IFFALSE 17960
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17763: LD_ADDR_VAR 0 3
17767: PUSH
17768: LD_INT 10
17770: PUSH
17771: LD_INT 20
17773: PUSH
17774: LD_INT 30
17776: PUSH
17777: LD_INT 40
17779: PUSH
17780: LD_INT 50
17782: PUSH
17783: LD_INT 60
17785: PUSH
17786: LD_INT 70
17788: PUSH
17789: LD_INT 80
17791: PUSH
17792: LD_INT 90
17794: PUSH
17795: LD_INT 100
17797: PUSH
17798: LD_INT 110
17800: PUSH
17801: LD_INT 120
17803: PUSH
17804: LD_INT 130
17806: PUSH
17807: LD_INT 140
17809: PUSH
17810: LD_INT 150
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PPUSH
17833: LD_INT 15
17835: PPUSH
17836: CALL_OW 12
17840: ARRAY
17841: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17842: LD_ADDR_VAR 0 4
17846: PUSH
17847: LD_INT 10
17849: PUSH
17850: LD_INT 20
17852: PUSH
17853: LD_INT 30
17855: PUSH
17856: LD_INT 40
17858: PUSH
17859: LD_INT 50
17861: PUSH
17862: LD_INT 60
17864: PUSH
17865: LD_INT 70
17867: PUSH
17868: LD_INT 80
17870: PUSH
17871: LD_INT 90
17873: PUSH
17874: LD_INT 100
17876: PUSH
17877: LD_INT 110
17879: PUSH
17880: LD_INT 120
17882: PUSH
17883: LD_INT 130
17885: PUSH
17886: LD_INT 140
17888: PUSH
17889: LD_INT 150
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_INT 15
17914: PPUSH
17915: CALL_OW 12
17919: ARRAY
17920: ST_TO_ADDR
// if ValidHex ( x , y ) then
17921: LD_VAR 0 3
17925: PPUSH
17926: LD_VAR 0 4
17930: PPUSH
17931: CALL_OW 488
17935: IFFALSE 17958
// begin result := [ x , y ] ;
17937: LD_ADDR_VAR 0 1
17941: PUSH
17942: LD_VAR 0 3
17946: PUSH
17947: LD_VAR 0 4
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: ST_TO_ADDR
// break ;
17956: GO 17960
// end ; end ;
17958: GO 17760
17960: POP
17961: POP
// if result then
17962: LD_VAR 0 1
17966: IFFALSE 18026
// begin ToLua ( playSibBomb() ) ;
17968: LD_STRING playSibBomb()
17970: PPUSH
17971: CALL_OW 559
// wait ( 0 0$14 ) ;
17975: LD_INT 490
17977: PPUSH
17978: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17982: LD_VAR 0 1
17986: PUSH
17987: LD_INT 1
17989: ARRAY
17990: PPUSH
17991: LD_VAR 0 1
17995: PUSH
17996: LD_INT 2
17998: ARRAY
17999: PPUSH
18000: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18004: LD_VAR 0 1
18008: PUSH
18009: LD_INT 1
18011: ARRAY
18012: PPUSH
18013: LD_VAR 0 1
18017: PUSH
18018: LD_INT 2
18020: ARRAY
18021: PPUSH
18022: CALL_OW 429
// end ; end ;
18026: LD_VAR 0 1
18030: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18031: LD_EXP 27
18035: PUSH
18036: LD_EXP 49
18040: AND
18041: IFFALSE 18053
18043: GO 18045
18045: DISABLE
// YouLost (  ) ;
18046: LD_STRING 
18048: PPUSH
18049: CALL_OW 104
18053: END
// every 0 0$1 trigger StreamModeActive and sFog do
18054: LD_EXP 27
18058: PUSH
18059: LD_EXP 48
18063: AND
18064: IFFALSE 18078
18066: GO 18068
18068: DISABLE
// FogOff ( your_side ) ;
18069: LD_OWVAR 2
18073: PPUSH
18074: CALL_OW 344
18078: END
// every 0 0$1 trigger StreamModeActive and sSun do
18079: LD_EXP 27
18083: PUSH
18084: LD_EXP 50
18088: AND
18089: IFFALSE 18117
18091: GO 18093
18093: DISABLE
// begin solar_recharge_percent := 0 ;
18094: LD_ADDR_OWVAR 79
18098: PUSH
18099: LD_INT 0
18101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18102: LD_INT 10500
18104: PPUSH
18105: CALL_OW 67
// solar_recharge_percent := 100 ;
18109: LD_ADDR_OWVAR 79
18113: PUSH
18114: LD_INT 100
18116: ST_TO_ADDR
// end ;
18117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18118: LD_EXP 27
18122: PUSH
18123: LD_EXP 51
18127: AND
18128: IFFALSE 18367
18130: GO 18132
18132: DISABLE
18133: LD_INT 0
18135: PPUSH
18136: PPUSH
18137: PPUSH
// begin tmp := [ ] ;
18138: LD_ADDR_VAR 0 3
18142: PUSH
18143: EMPTY
18144: ST_TO_ADDR
// for i := 1 to 6 do
18145: LD_ADDR_VAR 0 1
18149: PUSH
18150: DOUBLE
18151: LD_INT 1
18153: DEC
18154: ST_TO_ADDR
18155: LD_INT 6
18157: PUSH
18158: FOR_TO
18159: IFFALSE 18264
// begin uc_nation := nation_nature ;
18161: LD_ADDR_OWVAR 21
18165: PUSH
18166: LD_INT 0
18168: ST_TO_ADDR
// uc_side := 0 ;
18169: LD_ADDR_OWVAR 20
18173: PUSH
18174: LD_INT 0
18176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18177: LD_ADDR_OWVAR 29
18181: PUSH
18182: LD_INT 12
18184: PUSH
18185: LD_INT 12
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: ST_TO_ADDR
// hc_agressivity := 20 ;
18192: LD_ADDR_OWVAR 35
18196: PUSH
18197: LD_INT 20
18199: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18200: LD_ADDR_OWVAR 28
18204: PUSH
18205: LD_INT 17
18207: ST_TO_ADDR
// hc_gallery :=  ;
18208: LD_ADDR_OWVAR 33
18212: PUSH
18213: LD_STRING 
18215: ST_TO_ADDR
// hc_name :=  ;
18216: LD_ADDR_OWVAR 26
18220: PUSH
18221: LD_STRING 
18223: ST_TO_ADDR
// un := CreateHuman ;
18224: LD_ADDR_VAR 0 2
18228: PUSH
18229: CALL_OW 44
18233: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18234: LD_VAR 0 2
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: CALL_OW 51
// tmp := tmp ^ un ;
18246: LD_ADDR_VAR 0 3
18250: PUSH
18251: LD_VAR 0 3
18255: PUSH
18256: LD_VAR 0 2
18260: ADD
18261: ST_TO_ADDR
// end ;
18262: GO 18158
18264: POP
18265: POP
// repeat wait ( 0 0$1 ) ;
18266: LD_INT 35
18268: PPUSH
18269: CALL_OW 67
// for un in tmp do
18273: LD_ADDR_VAR 0 2
18277: PUSH
18278: LD_VAR 0 3
18282: PUSH
18283: FOR_IN
18284: IFFALSE 18358
// begin if IsDead ( un ) then
18286: LD_VAR 0 2
18290: PPUSH
18291: CALL_OW 301
18295: IFFALSE 18315
// begin tmp := tmp diff un ;
18297: LD_ADDR_VAR 0 3
18301: PUSH
18302: LD_VAR 0 3
18306: PUSH
18307: LD_VAR 0 2
18311: DIFF
18312: ST_TO_ADDR
// continue ;
18313: GO 18283
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18315: LD_VAR 0 2
18319: PPUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 22
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: PPUSH
18342: LD_VAR 0 2
18346: PPUSH
18347: CALL_OW 74
18351: PPUSH
18352: CALL_OW 115
// end ;
18356: GO 18283
18358: POP
18359: POP
// until not tmp ;
18360: LD_VAR 0 3
18364: NOT
18365: IFFALSE 18266
// end ;
18367: PPOPN 3
18369: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18370: LD_EXP 27
18374: PUSH
18375: LD_EXP 52
18379: AND
18380: IFFALSE 18434
18382: GO 18384
18384: DISABLE
// begin ToLua ( displayTroll(); ) ;
18385: LD_STRING displayTroll();
18387: PPUSH
18388: CALL_OW 559
// wait ( 3 3$00 ) ;
18392: LD_INT 6300
18394: PPUSH
18395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18399: LD_STRING hideTroll();
18401: PPUSH
18402: CALL_OW 559
// wait ( 1 1$00 ) ;
18406: LD_INT 2100
18408: PPUSH
18409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18413: LD_STRING displayTroll();
18415: PPUSH
18416: CALL_OW 559
// wait ( 1 1$00 ) ;
18420: LD_INT 2100
18422: PPUSH
18423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18427: LD_STRING hideTroll();
18429: PPUSH
18430: CALL_OW 559
// end ;
18434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18435: LD_EXP 27
18439: PUSH
18440: LD_EXP 53
18444: AND
18445: IFFALSE 18508
18447: GO 18449
18449: DISABLE
18450: LD_INT 0
18452: PPUSH
// begin p := 0 ;
18453: LD_ADDR_VAR 0 1
18457: PUSH
18458: LD_INT 0
18460: ST_TO_ADDR
// repeat game_speed := 1 ;
18461: LD_ADDR_OWVAR 65
18465: PUSH
18466: LD_INT 1
18468: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18469: LD_INT 35
18471: PPUSH
18472: CALL_OW 67
// p := p + 1 ;
18476: LD_ADDR_VAR 0 1
18480: PUSH
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 1
18488: PLUS
18489: ST_TO_ADDR
// until p >= 60 ;
18490: LD_VAR 0 1
18494: PUSH
18495: LD_INT 60
18497: GREATEREQUAL
18498: IFFALSE 18461
// game_speed := 4 ;
18500: LD_ADDR_OWVAR 65
18504: PUSH
18505: LD_INT 4
18507: ST_TO_ADDR
// end ;
18508: PPOPN 1
18510: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18511: LD_EXP 27
18515: PUSH
18516: LD_EXP 54
18520: AND
18521: IFFALSE 18667
18523: GO 18525
18525: DISABLE
18526: LD_INT 0
18528: PPUSH
18529: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18530: LD_ADDR_VAR 0 1
18534: PUSH
18535: LD_INT 22
18537: PUSH
18538: LD_OWVAR 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 2
18549: PUSH
18550: LD_INT 30
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 30
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PPUSH
18579: CALL_OW 69
18583: ST_TO_ADDR
// if not depot then
18584: LD_VAR 0 1
18588: NOT
18589: IFFALSE 18593
// exit ;
18591: GO 18667
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18593: LD_ADDR_VAR 0 2
18597: PUSH
18598: LD_VAR 0 1
18602: PUSH
18603: LD_INT 1
18605: PPUSH
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 12
18615: ARRAY
18616: PPUSH
18617: CALL_OW 274
18621: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_INT 1
18629: PPUSH
18630: LD_INT 0
18632: PPUSH
18633: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18637: LD_VAR 0 2
18641: PPUSH
18642: LD_INT 2
18644: PPUSH
18645: LD_INT 0
18647: PPUSH
18648: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18652: LD_VAR 0 2
18656: PPUSH
18657: LD_INT 3
18659: PPUSH
18660: LD_INT 0
18662: PPUSH
18663: CALL_OW 277
// end ;
18667: PPOPN 2
18669: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18670: LD_EXP 27
18674: PUSH
18675: LD_EXP 55
18679: AND
18680: IFFALSE 18777
18682: GO 18684
18684: DISABLE
18685: LD_INT 0
18687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18688: LD_ADDR_VAR 0 1
18692: PUSH
18693: LD_INT 22
18695: PUSH
18696: LD_OWVAR 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 21
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 3
18717: PUSH
18718: LD_INT 23
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: ST_TO_ADDR
// if not tmp then
18742: LD_VAR 0 1
18746: NOT
18747: IFFALSE 18751
// exit ;
18749: GO 18777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18751: LD_VAR 0 1
18755: PUSH
18756: LD_INT 1
18758: PPUSH
18759: LD_VAR 0 1
18763: PPUSH
18764: CALL_OW 12
18768: ARRAY
18769: PPUSH
18770: LD_INT 200
18772: PPUSH
18773: CALL_OW 234
// end ;
18777: PPOPN 1
18779: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18780: LD_EXP 27
18784: PUSH
18785: LD_EXP 56
18789: AND
18790: IFFALSE 18869
18792: GO 18794
18794: DISABLE
18795: LD_INT 0
18797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18798: LD_ADDR_VAR 0 1
18802: PUSH
18803: LD_INT 22
18805: PUSH
18806: LD_OWVAR 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 21
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PPUSH
18829: CALL_OW 69
18833: ST_TO_ADDR
// if not tmp then
18834: LD_VAR 0 1
18838: NOT
18839: IFFALSE 18843
// exit ;
18841: GO 18869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18843: LD_VAR 0 1
18847: PUSH
18848: LD_INT 1
18850: PPUSH
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 12
18860: ARRAY
18861: PPUSH
18862: LD_INT 60
18864: PPUSH
18865: CALL_OW 234
// end ;
18869: PPOPN 1
18871: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18872: LD_EXP 27
18876: PUSH
18877: LD_EXP 57
18881: AND
18882: IFFALSE 18981
18884: GO 18886
18886: DISABLE
18887: LD_INT 0
18889: PPUSH
18890: PPUSH
// begin enable ;
18891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18892: LD_ADDR_VAR 0 1
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_OWVAR 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 61
18911: PUSH
18912: EMPTY
18913: LIST
18914: PUSH
18915: LD_INT 33
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: ST_TO_ADDR
// if not tmp then
18935: LD_VAR 0 1
18939: NOT
18940: IFFALSE 18944
// exit ;
18942: GO 18981
// for i in tmp do
18944: LD_ADDR_VAR 0 2
18948: PUSH
18949: LD_VAR 0 1
18953: PUSH
18954: FOR_IN
18955: IFFALSE 18979
// if IsControledBy ( i ) then
18957: LD_VAR 0 2
18961: PPUSH
18962: CALL_OW 312
18966: IFFALSE 18977
// ComUnlink ( i ) ;
18968: LD_VAR 0 2
18972: PPUSH
18973: CALL_OW 136
18977: GO 18954
18979: POP
18980: POP
// end ;
18981: PPOPN 2
18983: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18984: LD_EXP 27
18988: PUSH
18989: LD_EXP 58
18993: AND
18994: IFFALSE 19134
18996: GO 18998
18998: DISABLE
18999: LD_INT 0
19001: PPUSH
19002: PPUSH
// begin ToLua ( displayPowell(); ) ;
19003: LD_STRING displayPowell();
19005: PPUSH
19006: CALL_OW 559
// uc_side := 0 ;
19010: LD_ADDR_OWVAR 20
19014: PUSH
19015: LD_INT 0
19017: ST_TO_ADDR
// uc_nation := 2 ;
19018: LD_ADDR_OWVAR 21
19022: PUSH
19023: LD_INT 2
19025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19026: LD_ADDR_OWVAR 37
19030: PUSH
19031: LD_INT 14
19033: ST_TO_ADDR
// vc_engine := engine_siberite ;
19034: LD_ADDR_OWVAR 39
19038: PUSH
19039: LD_INT 3
19041: ST_TO_ADDR
// vc_control := control_apeman ;
19042: LD_ADDR_OWVAR 38
19046: PUSH
19047: LD_INT 5
19049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19050: LD_ADDR_OWVAR 40
19054: PUSH
19055: LD_INT 29
19057: ST_TO_ADDR
// un := CreateVehicle ;
19058: LD_ADDR_VAR 0 2
19062: PUSH
19063: CALL_OW 45
19067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19068: LD_VAR 0 2
19072: PPUSH
19073: LD_INT 1
19075: PPUSH
19076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19080: LD_INT 35
19082: PPUSH
19083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19087: LD_VAR 0 2
19091: PPUSH
19092: LD_INT 22
19094: PUSH
19095: LD_OWVAR 2
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: PPUSH
19109: LD_VAR 0 2
19113: PPUSH
19114: CALL_OW 74
19118: PPUSH
19119: CALL_OW 115
// until IsDead ( un ) ;
19123: LD_VAR 0 2
19127: PPUSH
19128: CALL_OW 301
19132: IFFALSE 19080
// end ;
19134: PPOPN 2
19136: END
// every 0 0$1 trigger StreamModeActive and sStu do
19137: LD_EXP 27
19141: PUSH
19142: LD_EXP 66
19146: AND
19147: IFFALSE 19163
19149: GO 19151
19151: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19152: LD_STRING displayStucuk();
19154: PPUSH
19155: CALL_OW 559
// ResetFog ;
19159: CALL_OW 335
// end ;
19163: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19164: LD_EXP 27
19168: PUSH
19169: LD_EXP 59
19173: AND
19174: IFFALSE 19315
19176: GO 19178
19178: DISABLE
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19183: LD_ADDR_VAR 0 2
19187: PUSH
19188: LD_INT 22
19190: PUSH
19191: LD_OWVAR 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 21
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PPUSH
19214: CALL_OW 69
19218: ST_TO_ADDR
// if not tmp then
19219: LD_VAR 0 2
19223: NOT
19224: IFFALSE 19228
// exit ;
19226: GO 19315
// un := tmp [ rand ( 1 , tmp ) ] ;
19228: LD_ADDR_VAR 0 1
19232: PUSH
19233: LD_VAR 0 2
19237: PUSH
19238: LD_INT 1
19240: PPUSH
19241: LD_VAR 0 2
19245: PPUSH
19246: CALL_OW 12
19250: ARRAY
19251: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19252: LD_VAR 0 1
19256: PPUSH
19257: LD_INT 0
19259: PPUSH
19260: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19264: LD_VAR 0 1
19268: PPUSH
19269: LD_OWVAR 3
19273: PUSH
19274: LD_VAR 0 1
19278: DIFF
19279: PPUSH
19280: LD_VAR 0 1
19284: PPUSH
19285: CALL_OW 74
19289: PPUSH
19290: CALL_OW 115
// wait ( 0 0$20 ) ;
19294: LD_INT 700
19296: PPUSH
19297: CALL_OW 67
// SetSide ( un , your_side ) ;
19301: LD_VAR 0 1
19305: PPUSH
19306: LD_OWVAR 2
19310: PPUSH
19311: CALL_OW 235
// end ;
19315: PPOPN 2
19317: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19318: LD_EXP 27
19322: PUSH
19323: LD_EXP 60
19327: AND
19328: IFFALSE 19434
19330: GO 19332
19332: DISABLE
19333: LD_INT 0
19335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19336: LD_ADDR_VAR 0 1
19340: PUSH
19341: LD_INT 22
19343: PUSH
19344: LD_OWVAR 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 30
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 69
19389: ST_TO_ADDR
// if not depot then
19390: LD_VAR 0 1
19394: NOT
19395: IFFALSE 19399
// exit ;
19397: GO 19434
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19399: LD_VAR 0 1
19403: PUSH
19404: LD_INT 1
19406: ARRAY
19407: PPUSH
19408: CALL_OW 250
19412: PPUSH
19413: LD_VAR 0 1
19417: PUSH
19418: LD_INT 1
19420: ARRAY
19421: PPUSH
19422: CALL_OW 251
19426: PPUSH
19427: LD_INT 70
19429: PPUSH
19430: CALL_OW 495
// end ;
19434: PPOPN 1
19436: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19437: LD_EXP 27
19441: PUSH
19442: LD_EXP 61
19446: AND
19447: IFFALSE 19658
19449: GO 19451
19451: DISABLE
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
19457: PPUSH
19458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19459: LD_ADDR_VAR 0 5
19463: PUSH
19464: LD_INT 22
19466: PUSH
19467: LD_OWVAR 2
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 21
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: ST_TO_ADDR
// if not tmp then
19495: LD_VAR 0 5
19499: NOT
19500: IFFALSE 19504
// exit ;
19502: GO 19658
// for i in tmp do
19504: LD_ADDR_VAR 0 1
19508: PUSH
19509: LD_VAR 0 5
19513: PUSH
19514: FOR_IN
19515: IFFALSE 19656
// begin d := rand ( 0 , 5 ) ;
19517: LD_ADDR_VAR 0 4
19521: PUSH
19522: LD_INT 0
19524: PPUSH
19525: LD_INT 5
19527: PPUSH
19528: CALL_OW 12
19532: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19533: LD_ADDR_VAR 0 2
19537: PUSH
19538: LD_VAR 0 1
19542: PPUSH
19543: CALL_OW 250
19547: PPUSH
19548: LD_VAR 0 4
19552: PPUSH
19553: LD_INT 3
19555: PPUSH
19556: LD_INT 12
19558: PPUSH
19559: CALL_OW 12
19563: PPUSH
19564: CALL_OW 272
19568: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19569: LD_ADDR_VAR 0 3
19573: PUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 251
19583: PPUSH
19584: LD_VAR 0 4
19588: PPUSH
19589: LD_INT 3
19591: PPUSH
19592: LD_INT 12
19594: PPUSH
19595: CALL_OW 12
19599: PPUSH
19600: CALL_OW 273
19604: ST_TO_ADDR
// if ValidHex ( x , y ) then
19605: LD_VAR 0 2
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: CALL_OW 488
19619: IFFALSE 19654
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19621: LD_VAR 0 1
19625: PPUSH
19626: LD_VAR 0 2
19630: PPUSH
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_INT 3
19638: PPUSH
19639: LD_INT 6
19641: PPUSH
19642: CALL_OW 12
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: CALL_OW 483
// end ;
19654: GO 19514
19656: POP
19657: POP
// end ;
19658: PPOPN 5
19660: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19661: LD_EXP 27
19665: PUSH
19666: LD_EXP 62
19670: AND
19671: IFFALSE 19765
19673: GO 19675
19675: DISABLE
19676: LD_INT 0
19678: PPUSH
19679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_INT 22
19687: PUSH
19688: LD_OWVAR 2
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 32
19699: PUSH
19700: LD_INT 1
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 21
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// if not tmp then
19727: LD_VAR 0 2
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19765
// for i in tmp do
19736: LD_ADDR_VAR 0 1
19740: PUSH
19741: LD_VAR 0 2
19745: PUSH
19746: FOR_IN
19747: IFFALSE 19763
// SetFuel ( i , 0 ) ;
19749: LD_VAR 0 1
19753: PPUSH
19754: LD_INT 0
19756: PPUSH
19757: CALL_OW 240
19761: GO 19746
19763: POP
19764: POP
// end ;
19765: PPOPN 2
19767: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19768: LD_EXP 27
19772: PUSH
19773: LD_EXP 63
19777: AND
19778: IFFALSE 19844
19780: GO 19782
19782: DISABLE
19783: LD_INT 0
19785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19786: LD_ADDR_VAR 0 1
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_OWVAR 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 30
19805: PUSH
19806: LD_INT 29
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19844
// DestroyUnit ( tmp [ 1 ] ) ;
19831: LD_VAR 0 1
19835: PUSH
19836: LD_INT 1
19838: ARRAY
19839: PPUSH
19840: CALL_OW 65
// end ;
19844: PPOPN 1
19846: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19847: LD_EXP 27
19851: PUSH
19852: LD_EXP 65
19856: AND
19857: IFFALSE 19986
19859: GO 19861
19861: DISABLE
19862: LD_INT 0
19864: PPUSH
// begin uc_side := 0 ;
19865: LD_ADDR_OWVAR 20
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// uc_nation := nation_arabian ;
19873: LD_ADDR_OWVAR 21
19877: PUSH
19878: LD_INT 2
19880: ST_TO_ADDR
// hc_gallery :=  ;
19881: LD_ADDR_OWVAR 33
19885: PUSH
19886: LD_STRING 
19888: ST_TO_ADDR
// hc_name :=  ;
19889: LD_ADDR_OWVAR 26
19893: PUSH
19894: LD_STRING 
19896: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19897: LD_INT 1
19899: PPUSH
19900: LD_INT 11
19902: PPUSH
19903: LD_INT 10
19905: PPUSH
19906: CALL_OW 380
// un := CreateHuman ;
19910: LD_ADDR_VAR 0 1
19914: PUSH
19915: CALL_OW 44
19919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19920: LD_VAR 0 1
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19932: LD_INT 35
19934: PPUSH
19935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19939: LD_VAR 0 1
19943: PPUSH
19944: LD_INT 22
19946: PUSH
19947: LD_OWVAR 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PPUSH
19956: CALL_OW 69
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 74
19970: PPUSH
19971: CALL_OW 115
// until IsDead ( un ) ;
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 301
19984: IFFALSE 19932
// end ;
19986: PPOPN 1
19988: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19989: LD_EXP 27
19993: PUSH
19994: LD_EXP 67
19998: AND
19999: IFFALSE 20011
20001: GO 20003
20003: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20004: LD_STRING earthquake(getX(game), 0, 32)
20006: PPUSH
20007: CALL_OW 559
20011: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20012: LD_EXP 27
20016: PUSH
20017: LD_EXP 68
20021: AND
20022: IFFALSE 20113
20024: GO 20026
20026: DISABLE
20027: LD_INT 0
20029: PPUSH
// begin enable ;
20030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20031: LD_ADDR_VAR 0 1
20035: PUSH
20036: LD_INT 22
20038: PUSH
20039: LD_OWVAR 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 33
20060: PUSH
20061: LD_INT 3
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 69
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 1
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20087: LD_VAR 0 1
20091: PUSH
20092: LD_INT 1
20094: PPUSH
20095: LD_VAR 0 1
20099: PPUSH
20100: CALL_OW 12
20104: ARRAY
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 234
// end ;
20113: PPOPN 1
20115: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20116: LD_EXP 27
20120: PUSH
20121: LD_EXP 69
20125: AND
20126: IFFALSE 20267
20128: GO 20130
20130: DISABLE
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
20135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20136: LD_ADDR_VAR 0 3
20140: PUSH
20141: LD_INT 22
20143: PUSH
20144: LD_OWVAR 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 25
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PPUSH
20167: CALL_OW 69
20171: ST_TO_ADDR
// if not tmp then
20172: LD_VAR 0 3
20176: NOT
20177: IFFALSE 20181
// exit ;
20179: GO 20267
// un := tmp [ rand ( 1 , tmp ) ] ;
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_VAR 0 3
20198: PPUSH
20199: CALL_OW 12
20203: ARRAY
20204: ST_TO_ADDR
// if Crawls ( un ) then
20205: LD_VAR 0 2
20209: PPUSH
20210: CALL_OW 318
20214: IFFALSE 20225
// ComWalk ( un ) ;
20216: LD_VAR 0 2
20220: PPUSH
20221: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20225: LD_VAR 0 2
20229: PPUSH
20230: LD_INT 9
20232: PPUSH
20233: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20237: LD_INT 28
20239: PPUSH
20240: LD_OWVAR 2
20244: PPUSH
20245: LD_INT 2
20247: PPUSH
20248: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20252: LD_INT 29
20254: PPUSH
20255: LD_OWVAR 2
20259: PPUSH
20260: LD_INT 2
20262: PPUSH
20263: CALL_OW 322
// end ;
20267: PPOPN 3
20269: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20270: LD_EXP 27
20274: PUSH
20275: LD_EXP 70
20279: AND
20280: IFFALSE 20391
20282: GO 20284
20284: DISABLE
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
20289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: LD_INT 22
20297: PUSH
20298: LD_OWVAR 2
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 25
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PPUSH
20321: CALL_OW 69
20325: ST_TO_ADDR
// if not tmp then
20326: LD_VAR 0 3
20330: NOT
20331: IFFALSE 20335
// exit ;
20333: GO 20391
// un := tmp [ rand ( 1 , tmp ) ] ;
20335: LD_ADDR_VAR 0 2
20339: PUSH
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 1
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: CALL_OW 12
20357: ARRAY
20358: ST_TO_ADDR
// if Crawls ( un ) then
20359: LD_VAR 0 2
20363: PPUSH
20364: CALL_OW 318
20368: IFFALSE 20379
// ComWalk ( un ) ;
20370: LD_VAR 0 2
20374: PPUSH
20375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20379: LD_VAR 0 2
20383: PPUSH
20384: LD_INT 8
20386: PPUSH
20387: CALL_OW 336
// end ;
20391: PPOPN 3
20393: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20394: LD_EXP 27
20398: PUSH
20399: LD_EXP 71
20403: AND
20404: IFFALSE 20548
20406: GO 20408
20408: DISABLE
20409: LD_INT 0
20411: PPUSH
20412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20413: LD_ADDR_VAR 0 2
20417: PUSH
20418: LD_INT 22
20420: PUSH
20421: LD_OWVAR 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 21
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: LD_INT 34
20445: PUSH
20446: LD_INT 12
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 34
20455: PUSH
20456: LD_INT 51
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 34
20465: PUSH
20466: LD_INT 32
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: PPUSH
20484: CALL_OW 69
20488: ST_TO_ADDR
// if not tmp then
20489: LD_VAR 0 2
20493: NOT
20494: IFFALSE 20498
// exit ;
20496: GO 20548
// for i in tmp do
20498: LD_ADDR_VAR 0 1
20502: PUSH
20503: LD_VAR 0 2
20507: PUSH
20508: FOR_IN
20509: IFFALSE 20546
// if GetCargo ( i , mat_artifact ) = 0 then
20511: LD_VAR 0 1
20515: PPUSH
20516: LD_INT 4
20518: PPUSH
20519: CALL_OW 289
20523: PUSH
20524: LD_INT 0
20526: EQUAL
20527: IFFALSE 20544
// SetCargo ( i , mat_siberit , 100 ) ;
20529: LD_VAR 0 1
20533: PPUSH
20534: LD_INT 3
20536: PPUSH
20537: LD_INT 100
20539: PPUSH
20540: CALL_OW 290
20544: GO 20508
20546: POP
20547: POP
// end ;
20548: PPOPN 2
20550: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20551: LD_EXP 27
20555: PUSH
20556: LD_EXP 72
20560: AND
20561: IFFALSE 20744
20563: GO 20565
20565: DISABLE
20566: LD_INT 0
20568: PPUSH
20569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20570: LD_ADDR_VAR 0 2
20574: PUSH
20575: LD_INT 22
20577: PUSH
20578: LD_OWVAR 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 69
20591: ST_TO_ADDR
// if not tmp then
20592: LD_VAR 0 2
20596: NOT
20597: IFFALSE 20601
// exit ;
20599: GO 20744
// for i := 1 to 2 do
20601: LD_ADDR_VAR 0 1
20605: PUSH
20606: DOUBLE
20607: LD_INT 1
20609: DEC
20610: ST_TO_ADDR
20611: LD_INT 2
20613: PUSH
20614: FOR_TO
20615: IFFALSE 20742
// begin uc_side := your_side ;
20617: LD_ADDR_OWVAR 20
20621: PUSH
20622: LD_OWVAR 2
20626: ST_TO_ADDR
// uc_nation := nation_american ;
20627: LD_ADDR_OWVAR 21
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// vc_chassis := us_morphling ;
20635: LD_ADDR_OWVAR 37
20639: PUSH
20640: LD_INT 5
20642: ST_TO_ADDR
// vc_engine := engine_siberite ;
20643: LD_ADDR_OWVAR 39
20647: PUSH
20648: LD_INT 3
20650: ST_TO_ADDR
// vc_control := control_computer ;
20651: LD_ADDR_OWVAR 38
20655: PUSH
20656: LD_INT 3
20658: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20659: LD_ADDR_OWVAR 40
20663: PUSH
20664: LD_INT 10
20666: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20667: LD_VAR 0 2
20671: PUSH
20672: LD_INT 1
20674: ARRAY
20675: PPUSH
20676: CALL_OW 310
20680: NOT
20681: IFFALSE 20728
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20683: CALL_OW 45
20687: PPUSH
20688: LD_VAR 0 2
20692: PUSH
20693: LD_INT 1
20695: ARRAY
20696: PPUSH
20697: CALL_OW 250
20701: PPUSH
20702: LD_VAR 0 2
20706: PUSH
20707: LD_INT 1
20709: ARRAY
20710: PPUSH
20711: CALL_OW 251
20715: PPUSH
20716: LD_INT 12
20718: PPUSH
20719: LD_INT 1
20721: PPUSH
20722: CALL_OW 50
20726: GO 20740
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20728: CALL_OW 45
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 51
// end ;
20740: GO 20614
20742: POP
20743: POP
// end ;
20744: PPOPN 2
20746: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20747: LD_EXP 27
20751: PUSH
20752: LD_EXP 73
20756: AND
20757: IFFALSE 20979
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20770: LD_ADDR_VAR 0 6
20774: PUSH
20775: LD_INT 22
20777: PUSH
20778: LD_OWVAR 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 3
20799: PUSH
20800: LD_INT 23
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: ST_TO_ADDR
// if not tmp then
20824: LD_VAR 0 6
20828: NOT
20829: IFFALSE 20833
// exit ;
20831: GO 20979
// s1 := rand ( 1 , 4 ) ;
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_INT 1
20840: PPUSH
20841: LD_INT 4
20843: PPUSH
20844: CALL_OW 12
20848: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20849: LD_ADDR_VAR 0 4
20853: PUSH
20854: LD_VAR 0 6
20858: PUSH
20859: LD_INT 1
20861: ARRAY
20862: PPUSH
20863: LD_VAR 0 2
20867: PPUSH
20868: CALL_OW 259
20872: ST_TO_ADDR
// if s1 = 1 then
20873: LD_VAR 0 2
20877: PUSH
20878: LD_INT 1
20880: EQUAL
20881: IFFALSE 20901
// s2 := rand ( 2 , 4 ) else
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 2
20890: PPUSH
20891: LD_INT 4
20893: PPUSH
20894: CALL_OW 12
20898: ST_TO_ADDR
20899: GO 20909
// s2 := 1 ;
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20909: LD_ADDR_VAR 0 5
20913: PUSH
20914: LD_VAR 0 6
20918: PUSH
20919: LD_INT 1
20921: ARRAY
20922: PPUSH
20923: LD_VAR 0 3
20927: PPUSH
20928: CALL_OW 259
20932: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20933: LD_VAR 0 6
20937: PUSH
20938: LD_INT 1
20940: ARRAY
20941: PPUSH
20942: LD_VAR 0 2
20946: PPUSH
20947: LD_VAR 0 5
20951: PPUSH
20952: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20956: LD_VAR 0 6
20960: PUSH
20961: LD_INT 1
20963: ARRAY
20964: PPUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: CALL_OW 237
// end ;
20979: PPOPN 6
20981: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20982: LD_EXP 27
20986: PUSH
20987: LD_EXP 74
20991: AND
20992: IFFALSE 21071
20994: GO 20996
20996: DISABLE
20997: LD_INT 0
20999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21000: LD_ADDR_VAR 0 1
21004: PUSH
21005: LD_INT 22
21007: PUSH
21008: LD_OWVAR 2
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 30
21019: PUSH
21020: LD_INT 3
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 69
21035: ST_TO_ADDR
// if not tmp then
21036: LD_VAR 0 1
21040: NOT
21041: IFFALSE 21045
// exit ;
21043: GO 21071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21045: LD_VAR 0 1
21049: PUSH
21050: LD_INT 1
21052: PPUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 12
21062: ARRAY
21063: PPUSH
21064: LD_INT 1
21066: PPUSH
21067: CALL_OW 234
// end ;
21071: PPOPN 1
21073: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21074: LD_EXP 27
21078: PUSH
21079: LD_EXP 75
21083: AND
21084: IFFALSE 21196
21086: GO 21088
21088: DISABLE
21089: LD_INT 0
21091: PPUSH
21092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21093: LD_ADDR_VAR 0 2
21097: PUSH
21098: LD_INT 22
21100: PUSH
21101: LD_OWVAR 2
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 2
21112: PUSH
21113: LD_INT 30
21115: PUSH
21116: LD_INT 27
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 30
21125: PUSH
21126: LD_INT 26
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 30
21135: PUSH
21136: LD_INT 28
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 2
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21196
// for i in tmp do
21167: LD_ADDR_VAR 0 1
21171: PUSH
21172: LD_VAR 0 2
21176: PUSH
21177: FOR_IN
21178: IFFALSE 21194
// SetLives ( i , 1 ) ;
21180: LD_VAR 0 1
21184: PPUSH
21185: LD_INT 1
21187: PPUSH
21188: CALL_OW 234
21192: GO 21177
21194: POP
21195: POP
// end ;
21196: PPOPN 2
21198: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21199: LD_EXP 27
21203: PUSH
21204: LD_EXP 76
21208: AND
21209: IFFALSE 21496
21211: GO 21213
21213: DISABLE
21214: LD_INT 0
21216: PPUSH
21217: PPUSH
21218: PPUSH
// begin i := rand ( 1 , 7 ) ;
21219: LD_ADDR_VAR 0 1
21223: PUSH
21224: LD_INT 1
21226: PPUSH
21227: LD_INT 7
21229: PPUSH
21230: CALL_OW 12
21234: ST_TO_ADDR
// case i of 1 :
21235: LD_VAR 0 1
21239: PUSH
21240: LD_INT 1
21242: DOUBLE
21243: EQUAL
21244: IFTRUE 21248
21246: GO 21258
21248: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21249: LD_STRING earthquake(getX(game), 0, 32)
21251: PPUSH
21252: CALL_OW 559
21256: GO 21496
21258: LD_INT 2
21260: DOUBLE
21261: EQUAL
21262: IFTRUE 21266
21264: GO 21280
21266: POP
// begin ToLua ( displayStucuk(); ) ;
21267: LD_STRING displayStucuk();
21269: PPUSH
21270: CALL_OW 559
// ResetFog ;
21274: CALL_OW 335
// end ; 3 :
21278: GO 21496
21280: LD_INT 3
21282: DOUBLE
21283: EQUAL
21284: IFTRUE 21288
21286: GO 21392
21288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_OWVAR 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 25
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: ST_TO_ADDR
// if not tmp then
21325: LD_VAR 0 2
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 21496
// un := tmp [ rand ( 1 , tmp ) ] ;
21334: LD_ADDR_VAR 0 3
21338: PUSH
21339: LD_VAR 0 2
21343: PUSH
21344: LD_INT 1
21346: PPUSH
21347: LD_VAR 0 2
21351: PPUSH
21352: CALL_OW 12
21356: ARRAY
21357: ST_TO_ADDR
// if Crawls ( un ) then
21358: LD_VAR 0 3
21362: PPUSH
21363: CALL_OW 318
21367: IFFALSE 21378
// ComWalk ( un ) ;
21369: LD_VAR 0 3
21373: PPUSH
21374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_INT 8
21385: PPUSH
21386: CALL_OW 336
// end ; 4 :
21390: GO 21496
21392: LD_INT 4
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 21474
21400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21401: LD_ADDR_VAR 0 2
21405: PUSH
21406: LD_INT 22
21408: PUSH
21409: LD_OWVAR 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 30
21420: PUSH
21421: LD_INT 29
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL_OW 69
21436: ST_TO_ADDR
// if not tmp then
21437: LD_VAR 0 2
21441: NOT
21442: IFFALSE 21446
// exit ;
21444: GO 21496
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21446: LD_VAR 0 2
21450: PUSH
21451: LD_INT 1
21453: ARRAY
21454: PPUSH
21455: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21459: LD_VAR 0 2
21463: PUSH
21464: LD_INT 1
21466: ARRAY
21467: PPUSH
21468: CALL_OW 65
// end ; 5 .. 7 :
21472: GO 21496
21474: LD_INT 5
21476: DOUBLE
21477: GREATEREQUAL
21478: IFFALSE 21486
21480: LD_INT 7
21482: DOUBLE
21483: LESSEQUAL
21484: IFTRUE 21488
21486: GO 21495
21488: POP
// StreamSibBomb ; end ;
21489: CALL 17733 0 0
21493: GO 21496
21495: POP
// end ;
21496: PPOPN 3
21498: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21499: LD_EXP 27
21503: PUSH
21504: LD_EXP 77
21508: AND
21509: IFFALSE 21665
21511: GO 21513
21513: DISABLE
21514: LD_INT 0
21516: PPUSH
21517: PPUSH
21518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21519: LD_ADDR_VAR 0 2
21523: PUSH
21524: LD_INT 81
21526: PUSH
21527: LD_OWVAR 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 21
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 21
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PPUSH
21568: CALL_OW 69
21572: ST_TO_ADDR
// if not tmp then
21573: LD_VAR 0 2
21577: NOT
21578: IFFALSE 21582
// exit ;
21580: GO 21665
// p := 0 ;
21582: LD_ADDR_VAR 0 3
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21590: LD_INT 35
21592: PPUSH
21593: CALL_OW 67
// p := p + 1 ;
21597: LD_ADDR_VAR 0 3
21601: PUSH
21602: LD_VAR 0 3
21606: PUSH
21607: LD_INT 1
21609: PLUS
21610: ST_TO_ADDR
// for i in tmp do
21611: LD_ADDR_VAR 0 1
21615: PUSH
21616: LD_VAR 0 2
21620: PUSH
21621: FOR_IN
21622: IFFALSE 21653
// if GetLives ( i ) < 1000 then
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 256
21633: PUSH
21634: LD_INT 1000
21636: LESS
21637: IFFALSE 21651
// SetLives ( i , 1000 ) ;
21639: LD_VAR 0 1
21643: PPUSH
21644: LD_INT 1000
21646: PPUSH
21647: CALL_OW 234
21651: GO 21621
21653: POP
21654: POP
// until p > 20 ;
21655: LD_VAR 0 3
21659: PUSH
21660: LD_INT 20
21662: GREATER
21663: IFFALSE 21590
// end ;
21665: PPOPN 3
21667: END
// every 0 0$1 trigger StreamModeActive and sTime do
21668: LD_EXP 27
21672: PUSH
21673: LD_EXP 78
21677: AND
21678: IFFALSE 21713
21680: GO 21682
21682: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21683: LD_INT 28
21685: PPUSH
21686: LD_OWVAR 2
21690: PPUSH
21691: LD_INT 2
21693: PPUSH
21694: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21698: LD_INT 30
21700: PPUSH
21701: LD_OWVAR 2
21705: PPUSH
21706: LD_INT 2
21708: PPUSH
21709: CALL_OW 322
// end ;
21713: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21714: LD_EXP 27
21718: PUSH
21719: LD_EXP 79
21723: AND
21724: IFFALSE 21845
21726: GO 21728
21728: DISABLE
21729: LD_INT 0
21731: PPUSH
21732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21733: LD_ADDR_VAR 0 2
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 21
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: LD_INT 23
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 2
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21845
// for i in tmp do
21796: LD_ADDR_VAR 0 1
21800: PUSH
21801: LD_VAR 0 2
21805: PUSH
21806: FOR_IN
21807: IFFALSE 21843
// begin if Crawls ( i ) then
21809: LD_VAR 0 1
21813: PPUSH
21814: CALL_OW 318
21818: IFFALSE 21829
// ComWalk ( i ) ;
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 138
// SetClass ( i , 2 ) ;
21829: LD_VAR 0 1
21833: PPUSH
21834: LD_INT 2
21836: PPUSH
21837: CALL_OW 336
// end ;
21841: GO 21806
21843: POP
21844: POP
// end ;
21845: PPOPN 2
21847: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21848: LD_EXP 27
21852: PUSH
21853: LD_EXP 80
21857: AND
21858: IFFALSE 22146
21860: GO 21862
21862: DISABLE
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
21867: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21868: LD_OWVAR 2
21872: PPUSH
21873: LD_INT 9
21875: PPUSH
21876: LD_INT 1
21878: PPUSH
21879: LD_INT 1
21881: PPUSH
21882: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21886: LD_INT 9
21888: PPUSH
21889: LD_OWVAR 2
21893: PPUSH
21894: CALL_OW 343
// uc_side := 9 ;
21898: LD_ADDR_OWVAR 20
21902: PUSH
21903: LD_INT 9
21905: ST_TO_ADDR
// uc_nation := 2 ;
21906: LD_ADDR_OWVAR 21
21910: PUSH
21911: LD_INT 2
21913: ST_TO_ADDR
// hc_name := Dark Warrior ;
21914: LD_ADDR_OWVAR 26
21918: PUSH
21919: LD_STRING Dark Warrior
21921: ST_TO_ADDR
// hc_gallery :=  ;
21922: LD_ADDR_OWVAR 33
21926: PUSH
21927: LD_STRING 
21929: ST_TO_ADDR
// hc_noskilllimit := true ;
21930: LD_ADDR_OWVAR 76
21934: PUSH
21935: LD_INT 1
21937: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21938: LD_ADDR_OWVAR 31
21942: PUSH
21943: LD_INT 30
21945: PUSH
21946: LD_INT 30
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 30
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: ST_TO_ADDR
// un := CreateHuman ;
21961: LD_ADDR_VAR 0 3
21965: PUSH
21966: CALL_OW 44
21970: ST_TO_ADDR
// hc_noskilllimit := false ;
21971: LD_ADDR_OWVAR 76
21975: PUSH
21976: LD_INT 0
21978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21979: LD_VAR 0 3
21983: PPUSH
21984: LD_INT 1
21986: PPUSH
21987: CALL_OW 51
// ToLua ( playRanger() ) ;
21991: LD_STRING playRanger()
21993: PPUSH
21994: CALL_OW 559
// p := 0 ;
21998: LD_ADDR_VAR 0 2
22002: PUSH
22003: LD_INT 0
22005: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22006: LD_INT 35
22008: PPUSH
22009: CALL_OW 67
// p := p + 1 ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: LD_INT 1
22025: PLUS
22026: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22027: LD_VAR 0 3
22031: PPUSH
22032: CALL_OW 256
22036: PUSH
22037: LD_INT 1000
22039: LESS
22040: IFFALSE 22054
// SetLives ( un , 1000 ) ;
22042: LD_VAR 0 3
22046: PPUSH
22047: LD_INT 1000
22049: PPUSH
22050: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22054: LD_VAR 0 3
22058: PPUSH
22059: LD_INT 81
22061: PUSH
22062: LD_OWVAR 2
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 91
22073: PUSH
22074: LD_VAR 0 3
22078: PUSH
22079: LD_INT 30
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: LIST
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PPUSH
22091: CALL_OW 69
22095: PPUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: CALL_OW 74
22105: PPUSH
22106: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22110: LD_VAR 0 2
22114: PUSH
22115: LD_INT 80
22117: GREATER
22118: PUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: CALL_OW 301
22128: OR
22129: IFFALSE 22006
// if un then
22131: LD_VAR 0 3
22135: IFFALSE 22146
// RemoveUnit ( un ) ;
22137: LD_VAR 0 3
22141: PPUSH
22142: CALL_OW 64
// end ;
22146: PPOPN 3
22148: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22149: LD_EXP 81
22153: IFFALSE 22269
22155: GO 22157
22157: DISABLE
22158: LD_INT 0
22160: PPUSH
22161: PPUSH
22162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22163: LD_ADDR_VAR 0 2
22167: PUSH
22168: LD_INT 81
22170: PUSH
22171: LD_OWVAR 2
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 21
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 69
22198: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22199: LD_STRING playComputer()
22201: PPUSH
22202: CALL_OW 559
// if not tmp then
22206: LD_VAR 0 2
22210: NOT
22211: IFFALSE 22215
// exit ;
22213: GO 22269
// for i in tmp do
22215: LD_ADDR_VAR 0 1
22219: PUSH
22220: LD_VAR 0 2
22224: PUSH
22225: FOR_IN
22226: IFFALSE 22267
// for j := 1 to 4 do
22228: LD_ADDR_VAR 0 3
22232: PUSH
22233: DOUBLE
22234: LD_INT 1
22236: DEC
22237: ST_TO_ADDR
22238: LD_INT 4
22240: PUSH
22241: FOR_TO
22242: IFFALSE 22263
// SetSkill ( i , j , 10 ) ;
22244: LD_VAR 0 1
22248: PPUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: LD_INT 10
22256: PPUSH
22257: CALL_OW 237
22261: GO 22241
22263: POP
22264: POP
22265: GO 22225
22267: POP
22268: POP
// end ;
22269: PPOPN 3
22271: END
// every 0 0$1 trigger s30 do var i , tmp ;
22272: LD_EXP 82
22276: IFFALSE 22345
22278: GO 22280
22280: DISABLE
22281: LD_INT 0
22283: PPUSH
22284: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22285: LD_ADDR_VAR 0 2
22289: PUSH
22290: LD_INT 22
22292: PUSH
22293: LD_OWVAR 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: ST_TO_ADDR
// if not tmp then
22307: LD_VAR 0 2
22311: NOT
22312: IFFALSE 22316
// exit ;
22314: GO 22345
// for i in tmp do
22316: LD_ADDR_VAR 0 1
22320: PUSH
22321: LD_VAR 0 2
22325: PUSH
22326: FOR_IN
22327: IFFALSE 22343
// SetLives ( i , 300 ) ;
22329: LD_VAR 0 1
22333: PPUSH
22334: LD_INT 300
22336: PPUSH
22337: CALL_OW 234
22341: GO 22326
22343: POP
22344: POP
// end ;
22345: PPOPN 2
22347: END
// every 0 0$1 trigger s60 do var i , tmp ;
22348: LD_EXP 83
22352: IFFALSE 22421
22354: GO 22356
22356: DISABLE
22357: LD_INT 0
22359: PPUSH
22360: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_INT 22
22368: PUSH
22369: LD_OWVAR 2
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PPUSH
22378: CALL_OW 69
22382: ST_TO_ADDR
// if not tmp then
22383: LD_VAR 0 2
22387: NOT
22388: IFFALSE 22392
// exit ;
22390: GO 22421
// for i in tmp do
22392: LD_ADDR_VAR 0 1
22396: PUSH
22397: LD_VAR 0 2
22401: PUSH
22402: FOR_IN
22403: IFFALSE 22419
// SetLives ( i , 600 ) ;
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_INT 600
22412: PPUSH
22413: CALL_OW 234
22417: GO 22402
22419: POP
22420: POP
// end ;
22421: PPOPN 2
22423: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22424: LD_INT 0
22426: PPUSH
// case cmd of 301 :
22427: LD_VAR 0 1
22431: PUSH
22432: LD_INT 301
22434: DOUBLE
22435: EQUAL
22436: IFTRUE 22440
22438: GO 22472
22440: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22441: LD_VAR 0 6
22445: PPUSH
22446: LD_VAR 0 7
22450: PPUSH
22451: LD_VAR 0 8
22455: PPUSH
22456: LD_VAR 0 4
22460: PPUSH
22461: LD_VAR 0 5
22465: PPUSH
22466: CALL 23673 0 5
22470: GO 22593
22472: LD_INT 302
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22517
22480: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22481: LD_VAR 0 6
22485: PPUSH
22486: LD_VAR 0 7
22490: PPUSH
22491: LD_VAR 0 8
22495: PPUSH
22496: LD_VAR 0 9
22500: PPUSH
22501: LD_VAR 0 4
22505: PPUSH
22506: LD_VAR 0 5
22510: PPUSH
22511: CALL 23764 0 6
22515: GO 22593
22517: LD_INT 303
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22562
22525: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22526: LD_VAR 0 6
22530: PPUSH
22531: LD_VAR 0 7
22535: PPUSH
22536: LD_VAR 0 8
22540: PPUSH
22541: LD_VAR 0 9
22545: PPUSH
22546: LD_VAR 0 4
22550: PPUSH
22551: LD_VAR 0 5
22555: PPUSH
22556: CALL 22598 0 6
22560: GO 22593
22562: LD_INT 304
22564: DOUBLE
22565: EQUAL
22566: IFTRUE 22570
22568: GO 22592
22570: POP
// hHackTeleport ( unit , x , y ) ; end ;
22571: LD_VAR 0 2
22575: PPUSH
22576: LD_VAR 0 4
22580: PPUSH
22581: LD_VAR 0 5
22585: PPUSH
22586: CALL 24357 0 3
22590: GO 22593
22592: POP
// end ;
22593: LD_VAR 0 12
22597: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22598: LD_INT 0
22600: PPUSH
22601: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22602: LD_VAR 0 1
22606: PUSH
22607: LD_INT 1
22609: LESS
22610: PUSH
22611: LD_VAR 0 1
22615: PUSH
22616: LD_INT 3
22618: GREATER
22619: OR
22620: PUSH
22621: LD_VAR 0 5
22625: PPUSH
22626: LD_VAR 0 6
22630: PPUSH
22631: CALL_OW 428
22635: OR
22636: IFFALSE 22640
// exit ;
22638: GO 23360
// uc_side := your_side ;
22640: LD_ADDR_OWVAR 20
22644: PUSH
22645: LD_OWVAR 2
22649: ST_TO_ADDR
// uc_nation := nation ;
22650: LD_ADDR_OWVAR 21
22654: PUSH
22655: LD_VAR 0 1
22659: ST_TO_ADDR
// bc_level = 1 ;
22660: LD_ADDR_OWVAR 43
22664: PUSH
22665: LD_INT 1
22667: ST_TO_ADDR
// case btype of 1 :
22668: LD_VAR 0 2
22672: PUSH
22673: LD_INT 1
22675: DOUBLE
22676: EQUAL
22677: IFTRUE 22681
22679: GO 22692
22681: POP
// bc_type := b_depot ; 2 :
22682: LD_ADDR_OWVAR 42
22686: PUSH
22687: LD_INT 0
22689: ST_TO_ADDR
22690: GO 23304
22692: LD_INT 2
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22711
22700: POP
// bc_type := b_warehouse ; 3 :
22701: LD_ADDR_OWVAR 42
22705: PUSH
22706: LD_INT 1
22708: ST_TO_ADDR
22709: GO 23304
22711: LD_INT 3
22713: DOUBLE
22714: EQUAL
22715: IFTRUE 22719
22717: GO 22730
22719: POP
// bc_type := b_lab ; 4 .. 9 :
22720: LD_ADDR_OWVAR 42
22724: PUSH
22725: LD_INT 6
22727: ST_TO_ADDR
22728: GO 23304
22730: LD_INT 4
22732: DOUBLE
22733: GREATEREQUAL
22734: IFFALSE 22742
22736: LD_INT 9
22738: DOUBLE
22739: LESSEQUAL
22740: IFTRUE 22744
22742: GO 22796
22744: POP
// begin bc_type := b_lab_half ;
22745: LD_ADDR_OWVAR 42
22749: PUSH
22750: LD_INT 7
22752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22753: LD_ADDR_OWVAR 44
22757: PUSH
22758: LD_INT 10
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 15
22769: PUSH
22770: LD_INT 14
22772: PUSH
22773: LD_INT 13
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: LD_VAR 0 2
22788: PUSH
22789: LD_INT 3
22791: MINUS
22792: ARRAY
22793: ST_TO_ADDR
// end ; 10 .. 13 :
22794: GO 23304
22796: LD_INT 10
22798: DOUBLE
22799: GREATEREQUAL
22800: IFFALSE 22808
22802: LD_INT 13
22804: DOUBLE
22805: LESSEQUAL
22806: IFTRUE 22810
22808: GO 22887
22810: POP
// begin bc_type := b_lab_full ;
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 8
22818: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22819: LD_ADDR_OWVAR 44
22823: PUSH
22824: LD_INT 10
22826: PUSH
22827: LD_INT 12
22829: PUSH
22830: LD_INT 14
22832: PUSH
22833: LD_INT 13
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: PUSH
22842: LD_VAR 0 2
22846: PUSH
22847: LD_INT 9
22849: MINUS
22850: ARRAY
22851: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22852: LD_ADDR_OWVAR 45
22856: PUSH
22857: LD_INT 11
22859: PUSH
22860: LD_INT 15
22862: PUSH
22863: LD_INT 12
22865: PUSH
22866: LD_INT 15
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: PUSH
22875: LD_VAR 0 2
22879: PUSH
22880: LD_INT 9
22882: MINUS
22883: ARRAY
22884: ST_TO_ADDR
// end ; 14 :
22885: GO 23304
22887: LD_INT 14
22889: DOUBLE
22890: EQUAL
22891: IFTRUE 22895
22893: GO 22906
22895: POP
// bc_type := b_workshop ; 15 :
22896: LD_ADDR_OWVAR 42
22900: PUSH
22901: LD_INT 2
22903: ST_TO_ADDR
22904: GO 23304
22906: LD_INT 15
22908: DOUBLE
22909: EQUAL
22910: IFTRUE 22914
22912: GO 22925
22914: POP
// bc_type := b_factory ; 16 :
22915: LD_ADDR_OWVAR 42
22919: PUSH
22920: LD_INT 3
22922: ST_TO_ADDR
22923: GO 23304
22925: LD_INT 16
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 22944
22933: POP
// bc_type := b_ext_gun ; 17 :
22934: LD_ADDR_OWVAR 42
22938: PUSH
22939: LD_INT 17
22941: ST_TO_ADDR
22942: GO 23304
22944: LD_INT 17
22946: DOUBLE
22947: EQUAL
22948: IFTRUE 22952
22950: GO 22980
22952: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22953: LD_ADDR_OWVAR 42
22957: PUSH
22958: LD_INT 19
22960: PUSH
22961: LD_INT 23
22963: PUSH
22964: LD_INT 19
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: LD_VAR 0 1
22976: ARRAY
22977: ST_TO_ADDR
22978: GO 23304
22980: LD_INT 18
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 22999
22988: POP
// bc_type := b_ext_radar ; 19 :
22989: LD_ADDR_OWVAR 42
22993: PUSH
22994: LD_INT 20
22996: ST_TO_ADDR
22997: GO 23304
22999: LD_INT 19
23001: DOUBLE
23002: EQUAL
23003: IFTRUE 23007
23005: GO 23018
23007: POP
// bc_type := b_ext_radio ; 20 :
23008: LD_ADDR_OWVAR 42
23012: PUSH
23013: LD_INT 22
23015: ST_TO_ADDR
23016: GO 23304
23018: LD_INT 20
23020: DOUBLE
23021: EQUAL
23022: IFTRUE 23026
23024: GO 23037
23026: POP
// bc_type := b_ext_siberium ; 21 :
23027: LD_ADDR_OWVAR 42
23031: PUSH
23032: LD_INT 21
23034: ST_TO_ADDR
23035: GO 23304
23037: LD_INT 21
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23056
23045: POP
// bc_type := b_ext_computer ; 22 :
23046: LD_ADDR_OWVAR 42
23050: PUSH
23051: LD_INT 24
23053: ST_TO_ADDR
23054: GO 23304
23056: LD_INT 22
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23075
23064: POP
// bc_type := b_ext_track ; 23 :
23065: LD_ADDR_OWVAR 42
23069: PUSH
23070: LD_INT 16
23072: ST_TO_ADDR
23073: GO 23304
23075: LD_INT 23
23077: DOUBLE
23078: EQUAL
23079: IFTRUE 23083
23081: GO 23094
23083: POP
// bc_type := b_ext_laser ; 24 :
23084: LD_ADDR_OWVAR 42
23088: PUSH
23089: LD_INT 25
23091: ST_TO_ADDR
23092: GO 23304
23094: LD_INT 24
23096: DOUBLE
23097: EQUAL
23098: IFTRUE 23102
23100: GO 23113
23102: POP
// bc_type := b_control_tower ; 25 :
23103: LD_ADDR_OWVAR 42
23107: PUSH
23108: LD_INT 36
23110: ST_TO_ADDR
23111: GO 23304
23113: LD_INT 25
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23132
23121: POP
// bc_type := b_breastwork ; 26 :
23122: LD_ADDR_OWVAR 42
23126: PUSH
23127: LD_INT 31
23129: ST_TO_ADDR
23130: GO 23304
23132: LD_INT 26
23134: DOUBLE
23135: EQUAL
23136: IFTRUE 23140
23138: GO 23151
23140: POP
// bc_type := b_bunker ; 27 :
23141: LD_ADDR_OWVAR 42
23145: PUSH
23146: LD_INT 32
23148: ST_TO_ADDR
23149: GO 23304
23151: LD_INT 27
23153: DOUBLE
23154: EQUAL
23155: IFTRUE 23159
23157: GO 23170
23159: POP
// bc_type := b_turret ; 28 :
23160: LD_ADDR_OWVAR 42
23164: PUSH
23165: LD_INT 33
23167: ST_TO_ADDR
23168: GO 23304
23170: LD_INT 28
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23189
23178: POP
// bc_type := b_armoury ; 29 :
23179: LD_ADDR_OWVAR 42
23183: PUSH
23184: LD_INT 4
23186: ST_TO_ADDR
23187: GO 23304
23189: LD_INT 29
23191: DOUBLE
23192: EQUAL
23193: IFTRUE 23197
23195: GO 23208
23197: POP
// bc_type := b_barracks ; 30 :
23198: LD_ADDR_OWVAR 42
23202: PUSH
23203: LD_INT 5
23205: ST_TO_ADDR
23206: GO 23304
23208: LD_INT 30
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23227
23216: POP
// bc_type := b_solar_power ; 31 :
23217: LD_ADDR_OWVAR 42
23221: PUSH
23222: LD_INT 27
23224: ST_TO_ADDR
23225: GO 23304
23227: LD_INT 31
23229: DOUBLE
23230: EQUAL
23231: IFTRUE 23235
23233: GO 23246
23235: POP
// bc_type := b_oil_power ; 32 :
23236: LD_ADDR_OWVAR 42
23240: PUSH
23241: LD_INT 26
23243: ST_TO_ADDR
23244: GO 23304
23246: LD_INT 32
23248: DOUBLE
23249: EQUAL
23250: IFTRUE 23254
23252: GO 23265
23254: POP
// bc_type := b_siberite_power ; 33 :
23255: LD_ADDR_OWVAR 42
23259: PUSH
23260: LD_INT 28
23262: ST_TO_ADDR
23263: GO 23304
23265: LD_INT 33
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23284
23273: POP
// bc_type := b_oil_mine ; 34 :
23274: LD_ADDR_OWVAR 42
23278: PUSH
23279: LD_INT 29
23281: ST_TO_ADDR
23282: GO 23304
23284: LD_INT 34
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23303
23292: POP
// bc_type := b_siberite_mine ; end ;
23293: LD_ADDR_OWVAR 42
23297: PUSH
23298: LD_INT 30
23300: ST_TO_ADDR
23301: GO 23304
23303: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23304: LD_ADDR_VAR 0 8
23308: PUSH
23309: LD_VAR 0 5
23313: PPUSH
23314: LD_VAR 0 6
23318: PPUSH
23319: LD_VAR 0 3
23323: PPUSH
23324: CALL_OW 47
23328: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23329: LD_OWVAR 42
23333: PUSH
23334: LD_INT 32
23336: PUSH
23337: LD_INT 33
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: IN
23344: IFFALSE 23360
// PlaceWeaponTurret ( b , weapon ) ;
23346: LD_VAR 0 8
23350: PPUSH
23351: LD_VAR 0 4
23355: PPUSH
23356: CALL_OW 431
// end ;
23360: LD_VAR 0 7
23364: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23365: LD_INT 0
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23371: LD_ADDR_VAR 0 4
23375: PUSH
23376: LD_INT 22
23378: PUSH
23379: LD_OWVAR 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 2
23390: PUSH
23391: LD_INT 30
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 30
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PPUSH
23420: CALL_OW 69
23424: ST_TO_ADDR
// if not tmp then
23425: LD_VAR 0 4
23429: NOT
23430: IFFALSE 23434
// exit ;
23432: GO 23493
// for i in tmp do
23434: LD_ADDR_VAR 0 2
23438: PUSH
23439: LD_VAR 0 4
23443: PUSH
23444: FOR_IN
23445: IFFALSE 23491
// for j = 1 to 3 do
23447: LD_ADDR_VAR 0 3
23451: PUSH
23452: DOUBLE
23453: LD_INT 1
23455: DEC
23456: ST_TO_ADDR
23457: LD_INT 3
23459: PUSH
23460: FOR_TO
23461: IFFALSE 23487
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23463: LD_VAR 0 2
23467: PPUSH
23468: CALL_OW 274
23472: PPUSH
23473: LD_VAR 0 3
23477: PPUSH
23478: LD_INT 99999
23480: PPUSH
23481: CALL_OW 277
23485: GO 23460
23487: POP
23488: POP
23489: GO 23444
23491: POP
23492: POP
// end ;
23493: LD_VAR 0 1
23497: RET
// export function hHackSetLevel10 ; var i , j ; begin
23498: LD_INT 0
23500: PPUSH
23501: PPUSH
23502: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23503: LD_ADDR_VAR 0 2
23507: PUSH
23508: LD_INT 21
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: PUSH
23523: FOR_IN
23524: IFFALSE 23576
// if IsSelected ( i ) then
23526: LD_VAR 0 2
23530: PPUSH
23531: CALL_OW 306
23535: IFFALSE 23574
// begin for j := 1 to 4 do
23537: LD_ADDR_VAR 0 3
23541: PUSH
23542: DOUBLE
23543: LD_INT 1
23545: DEC
23546: ST_TO_ADDR
23547: LD_INT 4
23549: PUSH
23550: FOR_TO
23551: IFFALSE 23572
// SetSkill ( i , j , 10 ) ;
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_VAR 0 3
23562: PPUSH
23563: LD_INT 10
23565: PPUSH
23566: CALL_OW 237
23570: GO 23550
23572: POP
23573: POP
// end ;
23574: GO 23523
23576: POP
23577: POP
// end ;
23578: LD_VAR 0 1
23582: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23583: LD_INT 0
23585: PPUSH
23586: PPUSH
23587: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23588: LD_ADDR_VAR 0 2
23592: PUSH
23593: LD_INT 22
23595: PUSH
23596: LD_OWVAR 2
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 21
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PPUSH
23619: CALL_OW 69
23623: PUSH
23624: FOR_IN
23625: IFFALSE 23666
// begin for j := 1 to 4 do
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: DOUBLE
23633: LD_INT 1
23635: DEC
23636: ST_TO_ADDR
23637: LD_INT 4
23639: PUSH
23640: FOR_TO
23641: IFFALSE 23662
// SetSkill ( i , j , 10 ) ;
23643: LD_VAR 0 2
23647: PPUSH
23648: LD_VAR 0 3
23652: PPUSH
23653: LD_INT 10
23655: PPUSH
23656: CALL_OW 237
23660: GO 23640
23662: POP
23663: POP
// end ;
23664: GO 23624
23666: POP
23667: POP
// end ;
23668: LD_VAR 0 1
23672: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23673: LD_INT 0
23675: PPUSH
// uc_side := your_side ;
23676: LD_ADDR_OWVAR 20
23680: PUSH
23681: LD_OWVAR 2
23685: ST_TO_ADDR
// uc_nation := nation ;
23686: LD_ADDR_OWVAR 21
23690: PUSH
23691: LD_VAR 0 1
23695: ST_TO_ADDR
// InitHc ;
23696: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23700: LD_INT 0
23702: PPUSH
23703: LD_VAR 0 2
23707: PPUSH
23708: LD_VAR 0 3
23712: PPUSH
23713: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23717: LD_VAR 0 4
23721: PPUSH
23722: LD_VAR 0 5
23726: PPUSH
23727: CALL_OW 428
23731: PUSH
23732: LD_INT 0
23734: EQUAL
23735: IFFALSE 23759
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23737: CALL_OW 44
23741: PPUSH
23742: LD_VAR 0 4
23746: PPUSH
23747: LD_VAR 0 5
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: CALL_OW 48
// end ;
23759: LD_VAR 0 6
23763: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23764: LD_INT 0
23766: PPUSH
23767: PPUSH
// uc_side := your_side ;
23768: LD_ADDR_OWVAR 20
23772: PUSH
23773: LD_OWVAR 2
23777: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23778: LD_VAR 0 1
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 4
23794: PUSH
23795: LD_INT 5
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: IN
23805: IFFALSE 23817
// uc_nation := nation_american else
23807: LD_ADDR_OWVAR 21
23811: PUSH
23812: LD_INT 1
23814: ST_TO_ADDR
23815: GO 23860
// if chassis in [ 11 , 12 , 13 , 14 ] then
23817: LD_VAR 0 1
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 13
23830: PUSH
23831: LD_INT 14
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: IN
23840: IFFALSE 23852
// uc_nation := nation_arabian else
23842: LD_ADDR_OWVAR 21
23846: PUSH
23847: LD_INT 2
23849: ST_TO_ADDR
23850: GO 23860
// uc_nation := nation_russian ;
23852: LD_ADDR_OWVAR 21
23856: PUSH
23857: LD_INT 3
23859: ST_TO_ADDR
// vc_chassis := chassis ;
23860: LD_ADDR_OWVAR 37
23864: PUSH
23865: LD_VAR 0 1
23869: ST_TO_ADDR
// vc_engine := engine ;
23870: LD_ADDR_OWVAR 39
23874: PUSH
23875: LD_VAR 0 2
23879: ST_TO_ADDR
// vc_control := control ;
23880: LD_ADDR_OWVAR 38
23884: PUSH
23885: LD_VAR 0 3
23889: ST_TO_ADDR
// vc_weapon := weapon ;
23890: LD_ADDR_OWVAR 40
23894: PUSH
23895: LD_VAR 0 4
23899: ST_TO_ADDR
// un := CreateVehicle ;
23900: LD_ADDR_VAR 0 8
23904: PUSH
23905: CALL_OW 45
23909: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23910: LD_VAR 0 8
23914: PPUSH
23915: LD_INT 0
23917: PPUSH
23918: LD_INT 5
23920: PPUSH
23921: CALL_OW 12
23925: PPUSH
23926: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23930: LD_VAR 0 8
23934: PPUSH
23935: LD_VAR 0 5
23939: PPUSH
23940: LD_VAR 0 6
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 48
// end ;
23952: LD_VAR 0 7
23956: RET
// export hInvincible ; every 1 do
23957: GO 23959
23959: DISABLE
// hInvincible := [ ] ;
23960: LD_ADDR_EXP 84
23964: PUSH
23965: EMPTY
23966: ST_TO_ADDR
23967: END
// every 10 do var i ;
23968: GO 23970
23970: DISABLE
23971: LD_INT 0
23973: PPUSH
// begin enable ;
23974: ENABLE
// if not hInvincible then
23975: LD_EXP 84
23979: NOT
23980: IFFALSE 23984
// exit ;
23982: GO 24028
// for i in hInvincible do
23984: LD_ADDR_VAR 0 1
23988: PUSH
23989: LD_EXP 84
23993: PUSH
23994: FOR_IN
23995: IFFALSE 24026
// if GetLives ( i ) < 1000 then
23997: LD_VAR 0 1
24001: PPUSH
24002: CALL_OW 256
24006: PUSH
24007: LD_INT 1000
24009: LESS
24010: IFFALSE 24024
// SetLives ( i , 1000 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_INT 1000
24019: PPUSH
24020: CALL_OW 234
24024: GO 23994
24026: POP
24027: POP
// end ;
24028: PPOPN 1
24030: END
// export function hHackInvincible ; var i ; begin
24031: LD_INT 0
24033: PPUSH
24034: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24035: LD_ADDR_VAR 0 2
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: LD_INT 21
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 21
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: PPUSH
24068: CALL_OW 69
24072: PUSH
24073: FOR_IN
24074: IFFALSE 24135
// if IsSelected ( i ) then
24076: LD_VAR 0 2
24080: PPUSH
24081: CALL_OW 306
24085: IFFALSE 24133
// begin if i in hInvincible then
24087: LD_VAR 0 2
24091: PUSH
24092: LD_EXP 84
24096: IN
24097: IFFALSE 24117
// hInvincible := hInvincible diff i else
24099: LD_ADDR_EXP 84
24103: PUSH
24104: LD_EXP 84
24108: PUSH
24109: LD_VAR 0 2
24113: DIFF
24114: ST_TO_ADDR
24115: GO 24133
// hInvincible := hInvincible union i ;
24117: LD_ADDR_EXP 84
24121: PUSH
24122: LD_EXP 84
24126: PUSH
24127: LD_VAR 0 2
24131: UNION
24132: ST_TO_ADDR
// end ;
24133: GO 24073
24135: POP
24136: POP
// end ;
24137: LD_VAR 0 1
24141: RET
// export function hHackInvisible ; var i , j ; begin
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
24146: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_INT 21
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PPUSH
24162: CALL_OW 69
24166: PUSH
24167: FOR_IN
24168: IFFALSE 24192
// if IsSelected ( i ) then
24170: LD_VAR 0 2
24174: PPUSH
24175: CALL_OW 306
24179: IFFALSE 24190
// ComForceInvisible ( i ) ;
24181: LD_VAR 0 2
24185: PPUSH
24186: CALL_OW 496
24190: GO 24167
24192: POP
24193: POP
// end ;
24194: LD_VAR 0 1
24198: RET
// export function hHackChangeYourSide ; begin
24199: LD_INT 0
24201: PPUSH
// if your_side = 8 then
24202: LD_OWVAR 2
24206: PUSH
24207: LD_INT 8
24209: EQUAL
24210: IFFALSE 24222
// your_side := 0 else
24212: LD_ADDR_OWVAR 2
24216: PUSH
24217: LD_INT 0
24219: ST_TO_ADDR
24220: GO 24236
// your_side := your_side + 1 ;
24222: LD_ADDR_OWVAR 2
24226: PUSH
24227: LD_OWVAR 2
24231: PUSH
24232: LD_INT 1
24234: PLUS
24235: ST_TO_ADDR
// end ;
24236: LD_VAR 0 1
24240: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24241: LD_INT 0
24243: PPUSH
24244: PPUSH
24245: PPUSH
// for i in all_units do
24246: LD_ADDR_VAR 0 2
24250: PUSH
24251: LD_OWVAR 3
24255: PUSH
24256: FOR_IN
24257: IFFALSE 24335
// if IsSelected ( i ) then
24259: LD_VAR 0 2
24263: PPUSH
24264: CALL_OW 306
24268: IFFALSE 24333
// begin j := GetSide ( i ) ;
24270: LD_ADDR_VAR 0 3
24274: PUSH
24275: LD_VAR 0 2
24279: PPUSH
24280: CALL_OW 255
24284: ST_TO_ADDR
// if j = 8 then
24285: LD_VAR 0 3
24289: PUSH
24290: LD_INT 8
24292: EQUAL
24293: IFFALSE 24305
// j := 0 else
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: LD_INT 0
24302: ST_TO_ADDR
24303: GO 24319
// j := j + 1 ;
24305: LD_ADDR_VAR 0 3
24309: PUSH
24310: LD_VAR 0 3
24314: PUSH
24315: LD_INT 1
24317: PLUS
24318: ST_TO_ADDR
// SetSide ( i , j ) ;
24319: LD_VAR 0 2
24323: PPUSH
24324: LD_VAR 0 3
24328: PPUSH
24329: CALL_OW 235
// end ;
24333: GO 24256
24335: POP
24336: POP
// end ;
24337: LD_VAR 0 1
24341: RET
// export function hHackFog ; begin
24342: LD_INT 0
24344: PPUSH
// FogOff ( true ) ;
24345: LD_INT 1
24347: PPUSH
24348: CALL_OW 344
// end ;
24352: LD_VAR 0 1
24356: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24357: LD_INT 0
24359: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24360: LD_VAR 0 1
24364: PPUSH
24365: LD_VAR 0 2
24369: PPUSH
24370: LD_VAR 0 3
24374: PPUSH
24375: LD_INT 1
24377: PPUSH
24378: LD_INT 1
24380: PPUSH
24381: CALL_OW 483
// CenterOnXY ( x , y ) ;
24385: LD_VAR 0 2
24389: PPUSH
24390: LD_VAR 0 3
24394: PPUSH
24395: CALL_OW 84
// end ;
24399: LD_VAR 0 4
24403: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24404: LD_INT 0
24406: PPUSH
24407: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24408: LD_VAR 0 1
24412: NOT
24413: PUSH
24414: LD_VAR 0 2
24418: PPUSH
24419: LD_VAR 0 3
24423: PPUSH
24424: CALL_OW 488
24428: NOT
24429: OR
24430: PUSH
24431: LD_VAR 0 1
24435: PPUSH
24436: CALL_OW 266
24440: PUSH
24441: LD_INT 3
24443: NONEQUAL
24444: PUSH
24445: LD_VAR 0 1
24449: PPUSH
24450: CALL_OW 247
24454: PUSH
24455: LD_INT 1
24457: EQUAL
24458: NOT
24459: AND
24460: OR
24461: IFFALSE 24465
// exit ;
24463: GO 24614
// if GetType ( factory ) = unit_human then
24465: LD_VAR 0 1
24469: PPUSH
24470: CALL_OW 247
24474: PUSH
24475: LD_INT 1
24477: EQUAL
24478: IFFALSE 24495
// factory := IsInUnit ( factory ) ;
24480: LD_ADDR_VAR 0 1
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 310
24494: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL_OW 266
24504: PUSH
24505: LD_INT 3
24507: NONEQUAL
24508: IFFALSE 24512
// exit ;
24510: GO 24614
// if HexInfo ( x , y ) = factory then
24512: LD_VAR 0 2
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: CALL_OW 428
24526: PUSH
24527: LD_VAR 0 1
24531: EQUAL
24532: IFFALSE 24559
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24534: LD_ADDR_EXP 85
24538: PUSH
24539: LD_EXP 85
24543: PPUSH
24544: LD_VAR 0 1
24548: PPUSH
24549: LD_INT 0
24551: PPUSH
24552: CALL_OW 1
24556: ST_TO_ADDR
24557: GO 24610
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24559: LD_ADDR_EXP 85
24563: PUSH
24564: LD_EXP 85
24568: PPUSH
24569: LD_VAR 0 1
24573: PPUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 255
24583: PUSH
24584: LD_VAR 0 1
24588: PUSH
24589: LD_VAR 0 2
24593: PUSH
24594: LD_VAR 0 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: PPUSH
24605: CALL_OW 1
24609: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24610: CALL 24619 0 0
// end ;
24614: LD_VAR 0 4
24618: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24619: LD_INT 0
24621: PPUSH
24622: PPUSH
24623: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24624: LD_STRING resetFactoryWaypoint();
24626: PPUSH
24627: CALL_OW 559
// if factoryWaypoints then
24631: LD_EXP 85
24635: IFFALSE 24761
// begin list := PrepareArray ( factoryWaypoints ) ;
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: LD_EXP 85
24646: PPUSH
24647: CALL 71230 0 1
24651: ST_TO_ADDR
// for i := 1 to list do
24652: LD_ADDR_VAR 0 2
24656: PUSH
24657: DOUBLE
24658: LD_INT 1
24660: DEC
24661: ST_TO_ADDR
24662: LD_VAR 0 3
24666: PUSH
24667: FOR_TO
24668: IFFALSE 24759
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24670: LD_STRING setFactoryWaypointXY(
24672: PUSH
24673: LD_VAR 0 3
24677: PUSH
24678: LD_VAR 0 2
24682: ARRAY
24683: PUSH
24684: LD_INT 1
24686: ARRAY
24687: STR
24688: PUSH
24689: LD_STRING ,
24691: STR
24692: PUSH
24693: LD_VAR 0 3
24697: PUSH
24698: LD_VAR 0 2
24702: ARRAY
24703: PUSH
24704: LD_INT 2
24706: ARRAY
24707: STR
24708: PUSH
24709: LD_STRING ,
24711: STR
24712: PUSH
24713: LD_VAR 0 3
24717: PUSH
24718: LD_VAR 0 2
24722: ARRAY
24723: PUSH
24724: LD_INT 3
24726: ARRAY
24727: STR
24728: PUSH
24729: LD_STRING ,
24731: STR
24732: PUSH
24733: LD_VAR 0 3
24737: PUSH
24738: LD_VAR 0 2
24742: ARRAY
24743: PUSH
24744: LD_INT 4
24746: ARRAY
24747: STR
24748: PUSH
24749: LD_STRING )
24751: STR
24752: PPUSH
24753: CALL_OW 559
24757: GO 24667
24759: POP
24760: POP
// end ; end ;
24761: LD_VAR 0 1
24765: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24766: LD_INT 0
24768: PPUSH
// if HexInfo ( x , y ) = warehouse then
24769: LD_VAR 0 2
24773: PPUSH
24774: LD_VAR 0 3
24778: PPUSH
24779: CALL_OW 428
24783: PUSH
24784: LD_VAR 0 1
24788: EQUAL
24789: IFFALSE 24816
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24791: LD_ADDR_EXP 86
24795: PUSH
24796: LD_EXP 86
24800: PPUSH
24801: LD_VAR 0 1
24805: PPUSH
24806: LD_INT 0
24808: PPUSH
24809: CALL_OW 1
24813: ST_TO_ADDR
24814: GO 24867
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24816: LD_ADDR_EXP 86
24820: PUSH
24821: LD_EXP 86
24825: PPUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: LD_VAR 0 1
24835: PPUSH
24836: CALL_OW 255
24840: PUSH
24841: LD_VAR 0 1
24845: PUSH
24846: LD_VAR 0 2
24850: PUSH
24851: LD_VAR 0 3
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: PPUSH
24862: CALL_OW 1
24866: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24867: CALL 24876 0 0
// end ;
24871: LD_VAR 0 4
24875: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24881: LD_STRING resetWarehouseGatheringPoints();
24883: PPUSH
24884: CALL_OW 559
// if warehouseGatheringPoints then
24888: LD_EXP 86
24892: IFFALSE 25018
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24894: LD_ADDR_VAR 0 3
24898: PUSH
24899: LD_EXP 86
24903: PPUSH
24904: CALL 71230 0 1
24908: ST_TO_ADDR
// for i := 1 to list do
24909: LD_ADDR_VAR 0 2
24913: PUSH
24914: DOUBLE
24915: LD_INT 1
24917: DEC
24918: ST_TO_ADDR
24919: LD_VAR 0 3
24923: PUSH
24924: FOR_TO
24925: IFFALSE 25016
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24927: LD_STRING setWarehouseGatheringPointXY(
24929: PUSH
24930: LD_VAR 0 3
24934: PUSH
24935: LD_VAR 0 2
24939: ARRAY
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: STR
24945: PUSH
24946: LD_STRING ,
24948: STR
24949: PUSH
24950: LD_VAR 0 3
24954: PUSH
24955: LD_VAR 0 2
24959: ARRAY
24960: PUSH
24961: LD_INT 2
24963: ARRAY
24964: STR
24965: PUSH
24966: LD_STRING ,
24968: STR
24969: PUSH
24970: LD_VAR 0 3
24974: PUSH
24975: LD_VAR 0 2
24979: ARRAY
24980: PUSH
24981: LD_INT 3
24983: ARRAY
24984: STR
24985: PUSH
24986: LD_STRING ,
24988: STR
24989: PUSH
24990: LD_VAR 0 3
24994: PUSH
24995: LD_VAR 0 2
24999: ARRAY
25000: PUSH
25001: LD_INT 4
25003: ARRAY
25004: STR
25005: PUSH
25006: LD_STRING )
25008: STR
25009: PPUSH
25010: CALL_OW 559
25014: GO 24924
25016: POP
25017: POP
// end ; end ;
25018: LD_VAR 0 1
25022: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25023: LD_EXP 86
25027: IFFALSE 25712
25029: GO 25031
25031: DISABLE
25032: LD_INT 0
25034: PPUSH
25035: PPUSH
25036: PPUSH
25037: PPUSH
25038: PPUSH
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
// begin enable ;
25043: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25044: LD_ADDR_VAR 0 3
25048: PUSH
25049: LD_EXP 86
25053: PPUSH
25054: CALL 71230 0 1
25058: ST_TO_ADDR
// if not list then
25059: LD_VAR 0 3
25063: NOT
25064: IFFALSE 25068
// exit ;
25066: GO 25712
// for i := 1 to list do
25068: LD_ADDR_VAR 0 1
25072: PUSH
25073: DOUBLE
25074: LD_INT 1
25076: DEC
25077: ST_TO_ADDR
25078: LD_VAR 0 3
25082: PUSH
25083: FOR_TO
25084: IFFALSE 25710
// begin depot := list [ i ] [ 2 ] ;
25086: LD_ADDR_VAR 0 8
25090: PUSH
25091: LD_VAR 0 3
25095: PUSH
25096: LD_VAR 0 1
25100: ARRAY
25101: PUSH
25102: LD_INT 2
25104: ARRAY
25105: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25106: LD_ADDR_VAR 0 5
25110: PUSH
25111: LD_VAR 0 3
25115: PUSH
25116: LD_VAR 0 1
25120: ARRAY
25121: PUSH
25122: LD_INT 1
25124: ARRAY
25125: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25126: LD_VAR 0 8
25130: PPUSH
25131: CALL_OW 301
25135: PUSH
25136: LD_VAR 0 5
25140: PUSH
25141: LD_VAR 0 8
25145: PPUSH
25146: CALL_OW 255
25150: NONEQUAL
25151: OR
25152: IFFALSE 25181
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25154: LD_ADDR_EXP 86
25158: PUSH
25159: LD_EXP 86
25163: PPUSH
25164: LD_VAR 0 8
25168: PPUSH
25169: LD_INT 0
25171: PPUSH
25172: CALL_OW 1
25176: ST_TO_ADDR
// exit ;
25177: POP
25178: POP
25179: GO 25712
// end ; x := list [ i ] [ 3 ] ;
25181: LD_ADDR_VAR 0 6
25185: PUSH
25186: LD_VAR 0 3
25190: PUSH
25191: LD_VAR 0 1
25195: ARRAY
25196: PUSH
25197: LD_INT 3
25199: ARRAY
25200: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25201: LD_ADDR_VAR 0 7
25205: PUSH
25206: LD_VAR 0 3
25210: PUSH
25211: LD_VAR 0 1
25215: ARRAY
25216: PUSH
25217: LD_INT 4
25219: ARRAY
25220: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25221: LD_ADDR_VAR 0 9
25225: PUSH
25226: LD_VAR 0 6
25230: PPUSH
25231: LD_VAR 0 7
25235: PPUSH
25236: LD_INT 16
25238: PPUSH
25239: CALL 69818 0 3
25243: ST_TO_ADDR
// if not cratesNearbyPoint then
25244: LD_VAR 0 9
25248: NOT
25249: IFFALSE 25255
// exit ;
25251: POP
25252: POP
25253: GO 25712
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25255: LD_ADDR_VAR 0 4
25259: PUSH
25260: LD_INT 22
25262: PUSH
25263: LD_VAR 0 5
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 3
25274: PUSH
25275: LD_INT 60
25277: PUSH
25278: EMPTY
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 91
25287: PUSH
25288: LD_VAR 0 8
25292: PUSH
25293: LD_INT 6
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 25
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 25
25316: PUSH
25317: LD_INT 16
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: PPUSH
25335: CALL_OW 69
25339: PUSH
25340: LD_VAR 0 8
25344: PPUSH
25345: CALL_OW 313
25349: PPUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 60
25355: PUSH
25356: EMPTY
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: LD_INT 25
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 25
25378: PUSH
25379: LD_INT 16
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 72
25399: UNION
25400: ST_TO_ADDR
// if tmp then
25401: LD_VAR 0 4
25405: IFFALSE 25485
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25407: LD_ADDR_VAR 0 4
25411: PUSH
25412: LD_VAR 0 4
25416: PPUSH
25417: LD_INT 3
25419: PPUSH
25420: CALL 67787 0 2
25424: ST_TO_ADDR
// for j in tmp do
25425: LD_ADDR_VAR 0 2
25429: PUSH
25430: LD_VAR 0 4
25434: PUSH
25435: FOR_IN
25436: IFFALSE 25479
// begin if IsInUnit ( j ) then
25438: LD_VAR 0 2
25442: PPUSH
25443: CALL_OW 310
25447: IFFALSE 25458
// ComExit ( j ) ;
25449: LD_VAR 0 2
25453: PPUSH
25454: CALL 67870 0 1
// AddComCollect ( j , x , y ) ;
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 6
25467: PPUSH
25468: LD_VAR 0 7
25472: PPUSH
25473: CALL_OW 177
// end ;
25477: GO 25435
25479: POP
25480: POP
// exit ;
25481: POP
25482: POP
25483: GO 25712
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25485: LD_ADDR_VAR 0 4
25489: PUSH
25490: LD_INT 22
25492: PUSH
25493: LD_VAR 0 5
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 91
25504: PUSH
25505: LD_VAR 0 8
25509: PUSH
25510: LD_INT 8
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: LD_INT 34
25523: PUSH
25524: LD_INT 12
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 34
25533: PUSH
25534: LD_INT 51
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 34
25543: PUSH
25544: LD_INT 32
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 34
25553: PUSH
25554: LD_INT 89
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: PPUSH
25573: CALL_OW 69
25577: ST_TO_ADDR
// if tmp then
25578: LD_VAR 0 4
25582: IFFALSE 25708
// begin for j in tmp do
25584: LD_ADDR_VAR 0 2
25588: PUSH
25589: LD_VAR 0 4
25593: PUSH
25594: FOR_IN
25595: IFFALSE 25706
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25597: LD_VAR 0 2
25601: PPUSH
25602: CALL_OW 262
25606: PUSH
25607: LD_INT 3
25609: EQUAL
25610: PUSH
25611: LD_VAR 0 2
25615: PPUSH
25616: CALL_OW 261
25620: PUSH
25621: LD_INT 20
25623: GREATER
25624: OR
25625: PUSH
25626: LD_VAR 0 2
25630: PPUSH
25631: CALL_OW 314
25635: NOT
25636: AND
25637: PUSH
25638: LD_VAR 0 2
25642: PPUSH
25643: CALL_OW 263
25647: PUSH
25648: LD_INT 1
25650: NONEQUAL
25651: PUSH
25652: LD_VAR 0 2
25656: PPUSH
25657: CALL_OW 311
25661: OR
25662: AND
25663: IFFALSE 25704
// begin ComCollect ( j , x , y ) ;
25665: LD_VAR 0 2
25669: PPUSH
25670: LD_VAR 0 6
25674: PPUSH
25675: LD_VAR 0 7
25679: PPUSH
25680: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25684: LD_VAR 0 2
25688: PPUSH
25689: LD_VAR 0 8
25693: PPUSH
25694: CALL_OW 172
// exit ;
25698: POP
25699: POP
25700: POP
25701: POP
25702: GO 25712
// end ;
25704: GO 25594
25706: POP
25707: POP
// end ; end ;
25708: GO 25083
25710: POP
25711: POP
// end ; end_of_file end_of_file
25712: PPOPN 9
25714: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25715: LD_INT 0
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25721: LD_VAR 0 1
25725: PPUSH
25726: CALL_OW 264
25730: PUSH
25731: LD_INT 91
25733: EQUAL
25734: IFFALSE 25806
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25736: LD_INT 68
25738: PPUSH
25739: LD_VAR 0 1
25743: PPUSH
25744: CALL_OW 255
25748: PPUSH
25749: CALL_OW 321
25753: PUSH
25754: LD_INT 2
25756: EQUAL
25757: IFFALSE 25769
// eff := 70 else
25759: LD_ADDR_VAR 0 4
25763: PUSH
25764: LD_INT 70
25766: ST_TO_ADDR
25767: GO 25777
// eff := 30 ;
25769: LD_ADDR_VAR 0 4
25773: PUSH
25774: LD_INT 30
25776: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25777: LD_VAR 0 1
25781: PPUSH
25782: CALL_OW 250
25786: PPUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 251
25796: PPUSH
25797: LD_VAR 0 4
25801: PPUSH
25802: CALL_OW 495
// end ; end ;
25806: LD_VAR 0 2
25810: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25811: LD_INT 0
25813: PPUSH
// end ;
25814: LD_VAR 0 4
25818: RET
// export function SOS_Command ( cmd ) ; begin
25819: LD_INT 0
25821: PPUSH
// end ;
25822: LD_VAR 0 2
25826: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25827: LD_INT 0
25829: PPUSH
// end ;
25830: LD_VAR 0 6
25834: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25835: LD_INT 0
25837: PPUSH
25838: PPUSH
// if not vehicle or not factory then
25839: LD_VAR 0 1
25843: NOT
25844: PUSH
25845: LD_VAR 0 2
25849: NOT
25850: OR
25851: IFFALSE 25855
// exit ;
25853: GO 26086
// if factoryWaypoints >= factory then
25855: LD_EXP 85
25859: PUSH
25860: LD_VAR 0 2
25864: GREATEREQUAL
25865: IFFALSE 26086
// if factoryWaypoints [ factory ] then
25867: LD_EXP 85
25871: PUSH
25872: LD_VAR 0 2
25876: ARRAY
25877: IFFALSE 26086
// begin if GetControl ( vehicle ) = control_manual then
25879: LD_VAR 0 1
25883: PPUSH
25884: CALL_OW 263
25888: PUSH
25889: LD_INT 1
25891: EQUAL
25892: IFFALSE 25973
// begin driver := IsDrivenBy ( vehicle ) ;
25894: LD_ADDR_VAR 0 4
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 311
25908: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25909: LD_VAR 0 4
25913: PPUSH
25914: LD_EXP 85
25918: PUSH
25919: LD_VAR 0 2
25923: ARRAY
25924: PUSH
25925: LD_INT 3
25927: ARRAY
25928: PPUSH
25929: LD_EXP 85
25933: PUSH
25934: LD_VAR 0 2
25938: ARRAY
25939: PUSH
25940: LD_INT 4
25942: ARRAY
25943: PPUSH
25944: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25948: LD_VAR 0 4
25952: PPUSH
25953: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25957: LD_VAR 0 4
25961: PPUSH
25962: LD_VAR 0 2
25966: PPUSH
25967: CALL_OW 180
// end else
25971: GO 26086
// if GetControl ( vehicle ) = control_remote then
25973: LD_VAR 0 1
25977: PPUSH
25978: CALL_OW 263
25982: PUSH
25983: LD_INT 2
25985: EQUAL
25986: IFFALSE 26047
// begin wait ( 0 0$2 ) ;
25988: LD_INT 70
25990: PPUSH
25991: CALL_OW 67
// if Connect ( vehicle ) then
25995: LD_VAR 0 1
25999: PPUSH
26000: CALL 38110 0 1
26004: IFFALSE 26045
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26006: LD_VAR 0 1
26010: PPUSH
26011: LD_EXP 85
26015: PUSH
26016: LD_VAR 0 2
26020: ARRAY
26021: PUSH
26022: LD_INT 3
26024: ARRAY
26025: PPUSH
26026: LD_EXP 85
26030: PUSH
26031: LD_VAR 0 2
26035: ARRAY
26036: PUSH
26037: LD_INT 4
26039: ARRAY
26040: PPUSH
26041: CALL_OW 171
// end else
26045: GO 26086
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_EXP 85
26056: PUSH
26057: LD_VAR 0 2
26061: ARRAY
26062: PUSH
26063: LD_INT 3
26065: ARRAY
26066: PPUSH
26067: LD_EXP 85
26071: PUSH
26072: LD_VAR 0 2
26076: ARRAY
26077: PUSH
26078: LD_INT 4
26080: ARRAY
26081: PPUSH
26082: CALL_OW 171
// end ; end ;
26086: LD_VAR 0 3
26090: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26091: LD_INT 0
26093: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26094: LD_VAR 0 1
26098: PUSH
26099: LD_INT 250
26101: EQUAL
26102: PUSH
26103: LD_VAR 0 2
26107: PPUSH
26108: CALL_OW 264
26112: PUSH
26113: LD_INT 81
26115: EQUAL
26116: AND
26117: IFFALSE 26138
// MinerPlaceMine ( unit , x , y ) ;
26119: LD_VAR 0 2
26123: PPUSH
26124: LD_VAR 0 4
26128: PPUSH
26129: LD_VAR 0 5
26133: PPUSH
26134: CALL 28523 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26138: LD_VAR 0 1
26142: PUSH
26143: LD_INT 251
26145: EQUAL
26146: PUSH
26147: LD_VAR 0 2
26151: PPUSH
26152: CALL_OW 264
26156: PUSH
26157: LD_INT 81
26159: EQUAL
26160: AND
26161: IFFALSE 26182
// MinerDetonateMine ( unit , x , y ) ;
26163: LD_VAR 0 2
26167: PPUSH
26168: LD_VAR 0 4
26172: PPUSH
26173: LD_VAR 0 5
26177: PPUSH
26178: CALL 28798 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26182: LD_VAR 0 1
26186: PUSH
26187: LD_INT 252
26189: EQUAL
26190: PUSH
26191: LD_VAR 0 2
26195: PPUSH
26196: CALL_OW 264
26200: PUSH
26201: LD_INT 81
26203: EQUAL
26204: AND
26205: IFFALSE 26226
// MinerCreateMinefield ( unit , x , y ) ;
26207: LD_VAR 0 2
26211: PPUSH
26212: LD_VAR 0 4
26216: PPUSH
26217: LD_VAR 0 5
26221: PPUSH
26222: CALL 29215 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26226: LD_VAR 0 1
26230: PUSH
26231: LD_INT 253
26233: EQUAL
26234: PUSH
26235: LD_VAR 0 2
26239: PPUSH
26240: CALL_OW 257
26244: PUSH
26245: LD_INT 5
26247: EQUAL
26248: AND
26249: IFFALSE 26270
// ComBinocular ( unit , x , y ) ;
26251: LD_VAR 0 2
26255: PPUSH
26256: LD_VAR 0 4
26260: PPUSH
26261: LD_VAR 0 5
26265: PPUSH
26266: CALL 29584 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26270: LD_VAR 0 1
26274: PUSH
26275: LD_INT 254
26277: EQUAL
26278: PUSH
26279: LD_VAR 0 2
26283: PPUSH
26284: CALL_OW 264
26288: PUSH
26289: LD_INT 99
26291: EQUAL
26292: AND
26293: PUSH
26294: LD_VAR 0 3
26298: PPUSH
26299: CALL_OW 263
26303: PUSH
26304: LD_INT 3
26306: EQUAL
26307: AND
26308: IFFALSE 26324
// HackDestroyVehicle ( unit , selectedUnit ) ;
26310: LD_VAR 0 2
26314: PPUSH
26315: LD_VAR 0 3
26319: PPUSH
26320: CALL 27887 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 255
26331: EQUAL
26332: PUSH
26333: LD_VAR 0 2
26337: PPUSH
26338: CALL_OW 264
26342: PUSH
26343: LD_INT 14
26345: PUSH
26346: LD_INT 53
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: IN
26353: AND
26354: PUSH
26355: LD_VAR 0 4
26359: PPUSH
26360: LD_VAR 0 5
26364: PPUSH
26365: CALL_OW 488
26369: AND
26370: IFFALSE 26394
// CutTreeXYR ( unit , x , y , 12 ) ;
26372: LD_VAR 0 2
26376: PPUSH
26377: LD_VAR 0 4
26381: PPUSH
26382: LD_VAR 0 5
26386: PPUSH
26387: LD_INT 12
26389: PPUSH
26390: CALL 26457 0 4
// if cmd = 256 then
26394: LD_VAR 0 1
26398: PUSH
26399: LD_INT 256
26401: EQUAL
26402: IFFALSE 26423
// SetFactoryWaypoint ( unit , x , y ) ;
26404: LD_VAR 0 2
26408: PPUSH
26409: LD_VAR 0 4
26413: PPUSH
26414: LD_VAR 0 5
26418: PPUSH
26419: CALL 24404 0 3
// if cmd = 257 then
26423: LD_VAR 0 1
26427: PUSH
26428: LD_INT 257
26430: EQUAL
26431: IFFALSE 26452
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26433: LD_VAR 0 2
26437: PPUSH
26438: LD_VAR 0 4
26442: PPUSH
26443: LD_VAR 0 5
26447: PPUSH
26448: CALL 24766 0 3
// end ;
26452: LD_VAR 0 6
26456: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26457: LD_INT 0
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26468: LD_VAR 0 1
26472: NOT
26473: PUSH
26474: LD_VAR 0 2
26478: PPUSH
26479: LD_VAR 0 3
26483: PPUSH
26484: CALL_OW 488
26488: NOT
26489: OR
26490: PUSH
26491: LD_VAR 0 4
26495: NOT
26496: OR
26497: IFFALSE 26501
// exit ;
26499: GO 26841
// list := [ ] ;
26501: LD_ADDR_VAR 0 13
26505: PUSH
26506: EMPTY
26507: ST_TO_ADDR
// if x - r < 0 then
26508: LD_VAR 0 2
26512: PUSH
26513: LD_VAR 0 4
26517: MINUS
26518: PUSH
26519: LD_INT 0
26521: LESS
26522: IFFALSE 26534
// min_x := 0 else
26524: LD_ADDR_VAR 0 7
26528: PUSH
26529: LD_INT 0
26531: ST_TO_ADDR
26532: GO 26550
// min_x := x - r ;
26534: LD_ADDR_VAR 0 7
26538: PUSH
26539: LD_VAR 0 2
26543: PUSH
26544: LD_VAR 0 4
26548: MINUS
26549: ST_TO_ADDR
// if y - r < 0 then
26550: LD_VAR 0 3
26554: PUSH
26555: LD_VAR 0 4
26559: MINUS
26560: PUSH
26561: LD_INT 0
26563: LESS
26564: IFFALSE 26576
// min_y := 0 else
26566: LD_ADDR_VAR 0 8
26570: PUSH
26571: LD_INT 0
26573: ST_TO_ADDR
26574: GO 26592
// min_y := y - r ;
26576: LD_ADDR_VAR 0 8
26580: PUSH
26581: LD_VAR 0 3
26585: PUSH
26586: LD_VAR 0 4
26590: MINUS
26591: ST_TO_ADDR
// max_x := x + r ;
26592: LD_ADDR_VAR 0 9
26596: PUSH
26597: LD_VAR 0 2
26601: PUSH
26602: LD_VAR 0 4
26606: PLUS
26607: ST_TO_ADDR
// max_y := y + r ;
26608: LD_ADDR_VAR 0 10
26612: PUSH
26613: LD_VAR 0 3
26617: PUSH
26618: LD_VAR 0 4
26622: PLUS
26623: ST_TO_ADDR
// for _x = min_x to max_x do
26624: LD_ADDR_VAR 0 11
26628: PUSH
26629: DOUBLE
26630: LD_VAR 0 7
26634: DEC
26635: ST_TO_ADDR
26636: LD_VAR 0 9
26640: PUSH
26641: FOR_TO
26642: IFFALSE 26759
// for _y = min_y to max_y do
26644: LD_ADDR_VAR 0 12
26648: PUSH
26649: DOUBLE
26650: LD_VAR 0 8
26654: DEC
26655: ST_TO_ADDR
26656: LD_VAR 0 10
26660: PUSH
26661: FOR_TO
26662: IFFALSE 26755
// begin if not ValidHex ( _x , _y ) then
26664: LD_VAR 0 11
26668: PPUSH
26669: LD_VAR 0 12
26673: PPUSH
26674: CALL_OW 488
26678: NOT
26679: IFFALSE 26683
// continue ;
26681: GO 26661
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26683: LD_VAR 0 11
26687: PPUSH
26688: LD_VAR 0 12
26692: PPUSH
26693: CALL_OW 351
26697: PUSH
26698: LD_VAR 0 11
26702: PPUSH
26703: LD_VAR 0 12
26707: PPUSH
26708: CALL_OW 554
26712: AND
26713: IFFALSE 26753
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26715: LD_ADDR_VAR 0 13
26719: PUSH
26720: LD_VAR 0 13
26724: PPUSH
26725: LD_VAR 0 13
26729: PUSH
26730: LD_INT 1
26732: PLUS
26733: PPUSH
26734: LD_VAR 0 11
26738: PUSH
26739: LD_VAR 0 12
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PPUSH
26748: CALL_OW 2
26752: ST_TO_ADDR
// end ;
26753: GO 26661
26755: POP
26756: POP
26757: GO 26641
26759: POP
26760: POP
// if not list then
26761: LD_VAR 0 13
26765: NOT
26766: IFFALSE 26770
// exit ;
26768: GO 26841
// for i in list do
26770: LD_ADDR_VAR 0 6
26774: PUSH
26775: LD_VAR 0 13
26779: PUSH
26780: FOR_IN
26781: IFFALSE 26839
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26783: LD_VAR 0 1
26787: PPUSH
26788: LD_STRING M
26790: PUSH
26791: LD_VAR 0 6
26795: PUSH
26796: LD_INT 1
26798: ARRAY
26799: PUSH
26800: LD_VAR 0 6
26804: PUSH
26805: LD_INT 2
26807: ARRAY
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: PPUSH
26833: CALL_OW 447
26837: GO 26780
26839: POP
26840: POP
// end ;
26841: LD_VAR 0 5
26845: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26846: LD_EXP 88
26850: NOT
26851: IFFALSE 26901
26853: GO 26855
26855: DISABLE
// begin initHack := true ;
26856: LD_ADDR_EXP 88
26860: PUSH
26861: LD_INT 1
26863: ST_TO_ADDR
// hackTanks := [ ] ;
26864: LD_ADDR_EXP 89
26868: PUSH
26869: EMPTY
26870: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26871: LD_ADDR_EXP 90
26875: PUSH
26876: EMPTY
26877: ST_TO_ADDR
// hackLimit := 3 ;
26878: LD_ADDR_EXP 91
26882: PUSH
26883: LD_INT 3
26885: ST_TO_ADDR
// hackDist := 12 ;
26886: LD_ADDR_EXP 92
26890: PUSH
26891: LD_INT 12
26893: ST_TO_ADDR
// hackCounter := [ ] ;
26894: LD_ADDR_EXP 93
26898: PUSH
26899: EMPTY
26900: ST_TO_ADDR
// end ;
26901: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26902: LD_EXP 88
26906: PUSH
26907: LD_INT 34
26909: PUSH
26910: LD_INT 99
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PPUSH
26917: CALL_OW 69
26921: AND
26922: IFFALSE 27175
26924: GO 26926
26926: DISABLE
26927: LD_INT 0
26929: PPUSH
26930: PPUSH
// begin enable ;
26931: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26932: LD_ADDR_VAR 0 1
26936: PUSH
26937: LD_INT 34
26939: PUSH
26940: LD_INT 99
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PPUSH
26947: CALL_OW 69
26951: PUSH
26952: FOR_IN
26953: IFFALSE 27173
// begin if not i in hackTanks then
26955: LD_VAR 0 1
26959: PUSH
26960: LD_EXP 89
26964: IN
26965: NOT
26966: IFFALSE 27049
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26968: LD_ADDR_EXP 89
26972: PUSH
26973: LD_EXP 89
26977: PPUSH
26978: LD_EXP 89
26982: PUSH
26983: LD_INT 1
26985: PLUS
26986: PPUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 1
26996: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26997: LD_ADDR_EXP 90
27001: PUSH
27002: LD_EXP 90
27006: PPUSH
27007: LD_EXP 90
27011: PUSH
27012: LD_INT 1
27014: PLUS
27015: PPUSH
27016: EMPTY
27017: PPUSH
27018: CALL_OW 1
27022: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27023: LD_ADDR_EXP 93
27027: PUSH
27028: LD_EXP 93
27032: PPUSH
27033: LD_EXP 93
27037: PUSH
27038: LD_INT 1
27040: PLUS
27041: PPUSH
27042: EMPTY
27043: PPUSH
27044: CALL_OW 1
27048: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27049: LD_VAR 0 1
27053: PPUSH
27054: CALL_OW 302
27058: NOT
27059: IFFALSE 27072
// begin HackUnlinkAll ( i ) ;
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL 27178 0 1
// continue ;
27070: GO 26952
// end ; HackCheckCapturedStatus ( i ) ;
27072: LD_VAR 0 1
27076: PPUSH
27077: CALL 27621 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27081: LD_ADDR_VAR 0 2
27085: PUSH
27086: LD_INT 81
27088: PUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 255
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 33
27105: PUSH
27106: LD_INT 3
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 91
27115: PUSH
27116: LD_VAR 0 1
27120: PUSH
27121: LD_EXP 92
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 50
27133: PUSH
27134: EMPTY
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: PPUSH
27143: CALL_OW 69
27147: ST_TO_ADDR
// if not tmp then
27148: LD_VAR 0 2
27152: NOT
27153: IFFALSE 27157
// continue ;
27155: GO 26952
// HackLink ( i , tmp ) ;
27157: LD_VAR 0 1
27161: PPUSH
27162: LD_VAR 0 2
27166: PPUSH
27167: CALL 27314 0 2
// end ;
27171: GO 26952
27173: POP
27174: POP
// end ;
27175: PPOPN 2
27177: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27178: LD_INT 0
27180: PPUSH
27181: PPUSH
27182: PPUSH
// if not hack in hackTanks then
27183: LD_VAR 0 1
27187: PUSH
27188: LD_EXP 89
27192: IN
27193: NOT
27194: IFFALSE 27198
// exit ;
27196: GO 27309
// index := GetElementIndex ( hackTanks , hack ) ;
27198: LD_ADDR_VAR 0 4
27202: PUSH
27203: LD_EXP 89
27207: PPUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL 34926 0 2
27217: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27218: LD_EXP 90
27222: PUSH
27223: LD_VAR 0 4
27227: ARRAY
27228: IFFALSE 27309
// begin for i in hackTanksCaptured [ index ] do
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_EXP 90
27239: PUSH
27240: LD_VAR 0 4
27244: ARRAY
27245: PUSH
27246: FOR_IN
27247: IFFALSE 27273
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27249: LD_VAR 0 3
27253: PUSH
27254: LD_INT 1
27256: ARRAY
27257: PPUSH
27258: LD_VAR 0 3
27262: PUSH
27263: LD_INT 2
27265: ARRAY
27266: PPUSH
27267: CALL_OW 235
27271: GO 27246
27273: POP
27274: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27275: LD_ADDR_EXP 90
27279: PUSH
27280: LD_EXP 90
27284: PPUSH
27285: LD_VAR 0 4
27289: PPUSH
27290: EMPTY
27291: PPUSH
27292: CALL_OW 1
27296: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27297: LD_VAR 0 1
27301: PPUSH
27302: LD_INT 0
27304: PPUSH
27305: CALL_OW 505
// end ; end ;
27309: LD_VAR 0 2
27313: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
27318: PPUSH
// if not hack in hackTanks or not vehicles then
27319: LD_VAR 0 1
27323: PUSH
27324: LD_EXP 89
27328: IN
27329: NOT
27330: PUSH
27331: LD_VAR 0 2
27335: NOT
27336: OR
27337: IFFALSE 27341
// exit ;
27339: GO 27616
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_INT 1
27358: PPUSH
27359: LD_INT 1
27361: PPUSH
27362: CALL 35576 0 4
27366: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27367: LD_ADDR_VAR 0 5
27371: PUSH
27372: LD_EXP 89
27376: PPUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL 34926 0 2
27386: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27387: LD_EXP 90
27391: PUSH
27392: LD_VAR 0 5
27396: ARRAY
27397: PUSH
27398: LD_EXP 91
27402: LESS
27403: IFFALSE 27592
// begin for i := 1 to vehicles do
27405: LD_ADDR_VAR 0 4
27409: PUSH
27410: DOUBLE
27411: LD_INT 1
27413: DEC
27414: ST_TO_ADDR
27415: LD_VAR 0 2
27419: PUSH
27420: FOR_TO
27421: IFFALSE 27590
// begin if hackTanksCaptured [ index ] = hackLimit then
27423: LD_EXP 90
27427: PUSH
27428: LD_VAR 0 5
27432: ARRAY
27433: PUSH
27434: LD_EXP 91
27438: EQUAL
27439: IFFALSE 27443
// break ;
27441: GO 27590
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27443: LD_ADDR_EXP 93
27447: PUSH
27448: LD_EXP 93
27452: PPUSH
27453: LD_VAR 0 5
27457: PPUSH
27458: LD_EXP 93
27462: PUSH
27463: LD_VAR 0 5
27467: ARRAY
27468: PUSH
27469: LD_INT 1
27471: PLUS
27472: PPUSH
27473: CALL_OW 1
27477: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27478: LD_ADDR_EXP 90
27482: PUSH
27483: LD_EXP 90
27487: PPUSH
27488: LD_VAR 0 5
27492: PUSH
27493: LD_EXP 90
27497: PUSH
27498: LD_VAR 0 5
27502: ARRAY
27503: PUSH
27504: LD_INT 1
27506: PLUS
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PPUSH
27512: LD_VAR 0 2
27516: PUSH
27517: LD_VAR 0 4
27521: ARRAY
27522: PUSH
27523: LD_VAR 0 2
27527: PUSH
27528: LD_VAR 0 4
27532: ARRAY
27533: PPUSH
27534: CALL_OW 255
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PPUSH
27543: CALL 35141 0 3
27547: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27548: LD_VAR 0 2
27552: PUSH
27553: LD_VAR 0 4
27557: ARRAY
27558: PPUSH
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL_OW 255
27568: PPUSH
27569: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27573: LD_VAR 0 2
27577: PUSH
27578: LD_VAR 0 4
27582: ARRAY
27583: PPUSH
27584: CALL_OW 141
// end ;
27588: GO 27420
27590: POP
27591: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_EXP 90
27601: PUSH
27602: LD_VAR 0 5
27606: ARRAY
27607: PUSH
27608: LD_INT 0
27610: PLUS
27611: PPUSH
27612: CALL_OW 505
// end ;
27616: LD_VAR 0 3
27620: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27621: LD_INT 0
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
// if not hack in hackTanks then
27627: LD_VAR 0 1
27631: PUSH
27632: LD_EXP 89
27636: IN
27637: NOT
27638: IFFALSE 27642
// exit ;
27640: GO 27882
// index := GetElementIndex ( hackTanks , hack ) ;
27642: LD_ADDR_VAR 0 4
27646: PUSH
27647: LD_EXP 89
27651: PPUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL 34926 0 2
27661: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: DOUBLE
27668: LD_EXP 90
27672: PUSH
27673: LD_VAR 0 4
27677: ARRAY
27678: INC
27679: ST_TO_ADDR
27680: LD_INT 1
27682: PUSH
27683: FOR_DOWNTO
27684: IFFALSE 27856
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27686: LD_ADDR_VAR 0 5
27690: PUSH
27691: LD_EXP 90
27695: PUSH
27696: LD_VAR 0 4
27700: ARRAY
27701: PUSH
27702: LD_VAR 0 3
27706: ARRAY
27707: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27708: LD_VAR 0 5
27712: PUSH
27713: LD_INT 1
27715: ARRAY
27716: PPUSH
27717: CALL_OW 302
27721: NOT
27722: PUSH
27723: LD_VAR 0 5
27727: PUSH
27728: LD_INT 1
27730: ARRAY
27731: PPUSH
27732: CALL_OW 255
27736: PUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 255
27746: NONEQUAL
27747: OR
27748: IFFALSE 27854
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27750: LD_VAR 0 5
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: CALL_OW 305
27763: PUSH
27764: LD_VAR 0 5
27768: PUSH
27769: LD_INT 1
27771: ARRAY
27772: PPUSH
27773: CALL_OW 255
27777: PUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 255
27787: EQUAL
27788: AND
27789: IFFALSE 27813
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27791: LD_VAR 0 5
27795: PUSH
27796: LD_INT 1
27798: ARRAY
27799: PPUSH
27800: LD_VAR 0 5
27804: PUSH
27805: LD_INT 2
27807: ARRAY
27808: PPUSH
27809: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27813: LD_ADDR_EXP 90
27817: PUSH
27818: LD_EXP 90
27822: PPUSH
27823: LD_VAR 0 4
27827: PPUSH
27828: LD_EXP 90
27832: PUSH
27833: LD_VAR 0 4
27837: ARRAY
27838: PPUSH
27839: LD_VAR 0 3
27843: PPUSH
27844: CALL_OW 3
27848: PPUSH
27849: CALL_OW 1
27853: ST_TO_ADDR
// end ; end ;
27854: GO 27683
27856: POP
27857: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_EXP 90
27867: PUSH
27868: LD_VAR 0 4
27872: ARRAY
27873: PUSH
27874: LD_INT 0
27876: PLUS
27877: PPUSH
27878: CALL_OW 505
// end ;
27882: LD_VAR 0 2
27886: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27887: LD_INT 0
27889: PPUSH
27890: PPUSH
27891: PPUSH
27892: PPUSH
// if not hack in hackTanks then
27893: LD_VAR 0 1
27897: PUSH
27898: LD_EXP 89
27902: IN
27903: NOT
27904: IFFALSE 27908
// exit ;
27906: GO 27993
// index := GetElementIndex ( hackTanks , hack ) ;
27908: LD_ADDR_VAR 0 5
27912: PUSH
27913: LD_EXP 89
27917: PPUSH
27918: LD_VAR 0 1
27922: PPUSH
27923: CALL 34926 0 2
27927: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27928: LD_ADDR_VAR 0 4
27932: PUSH
27933: DOUBLE
27934: LD_INT 1
27936: DEC
27937: ST_TO_ADDR
27938: LD_EXP 90
27942: PUSH
27943: LD_VAR 0 5
27947: ARRAY
27948: PUSH
27949: FOR_TO
27950: IFFALSE 27991
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27952: LD_EXP 90
27956: PUSH
27957: LD_VAR 0 5
27961: ARRAY
27962: PUSH
27963: LD_VAR 0 4
27967: ARRAY
27968: PUSH
27969: LD_INT 1
27971: ARRAY
27972: PUSH
27973: LD_VAR 0 2
27977: EQUAL
27978: IFFALSE 27989
// KillUnit ( vehicle ) ;
27980: LD_VAR 0 2
27984: PPUSH
27985: CALL_OW 66
27989: GO 27949
27991: POP
27992: POP
// end ;
27993: LD_VAR 0 3
27997: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27998: LD_EXP 94
28002: NOT
28003: IFFALSE 28038
28005: GO 28007
28007: DISABLE
// begin initMiner := true ;
28008: LD_ADDR_EXP 94
28012: PUSH
28013: LD_INT 1
28015: ST_TO_ADDR
// minersList := [ ] ;
28016: LD_ADDR_EXP 95
28020: PUSH
28021: EMPTY
28022: ST_TO_ADDR
// minerMinesList := [ ] ;
28023: LD_ADDR_EXP 96
28027: PUSH
28028: EMPTY
28029: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28030: LD_ADDR_EXP 97
28034: PUSH
28035: LD_INT 5
28037: ST_TO_ADDR
// end ;
28038: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28039: LD_EXP 94
28043: PUSH
28044: LD_INT 34
28046: PUSH
28047: LD_INT 81
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PPUSH
28054: CALL_OW 69
28058: AND
28059: IFFALSE 28520
28061: GO 28063
28063: DISABLE
28064: LD_INT 0
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
// begin enable ;
28070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28071: LD_ADDR_VAR 0 1
28075: PUSH
28076: LD_INT 34
28078: PUSH
28079: LD_INT 81
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: PUSH
28091: FOR_IN
28092: IFFALSE 28164
// begin if not i in minersList then
28094: LD_VAR 0 1
28098: PUSH
28099: LD_EXP 95
28103: IN
28104: NOT
28105: IFFALSE 28162
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28107: LD_ADDR_EXP 95
28111: PUSH
28112: LD_EXP 95
28116: PPUSH
28117: LD_EXP 95
28121: PUSH
28122: LD_INT 1
28124: PLUS
28125: PPUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 1
28135: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28136: LD_ADDR_EXP 96
28140: PUSH
28141: LD_EXP 96
28145: PPUSH
28146: LD_EXP 96
28150: PUSH
28151: LD_INT 1
28153: PLUS
28154: PPUSH
28155: EMPTY
28156: PPUSH
28157: CALL_OW 1
28161: ST_TO_ADDR
// end end ;
28162: GO 28091
28164: POP
28165: POP
// for i := minerMinesList downto 1 do
28166: LD_ADDR_VAR 0 1
28170: PUSH
28171: DOUBLE
28172: LD_EXP 96
28176: INC
28177: ST_TO_ADDR
28178: LD_INT 1
28180: PUSH
28181: FOR_DOWNTO
28182: IFFALSE 28518
// begin if IsLive ( minersList [ i ] ) then
28184: LD_EXP 95
28188: PUSH
28189: LD_VAR 0 1
28193: ARRAY
28194: PPUSH
28195: CALL_OW 300
28199: IFFALSE 28227
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28201: LD_EXP 95
28205: PUSH
28206: LD_VAR 0 1
28210: ARRAY
28211: PPUSH
28212: LD_EXP 96
28216: PUSH
28217: LD_VAR 0 1
28221: ARRAY
28222: PPUSH
28223: CALL_OW 505
// if not minerMinesList [ i ] then
28227: LD_EXP 96
28231: PUSH
28232: LD_VAR 0 1
28236: ARRAY
28237: NOT
28238: IFFALSE 28242
// continue ;
28240: GO 28181
// for j := minerMinesList [ i ] downto 1 do
28242: LD_ADDR_VAR 0 2
28246: PUSH
28247: DOUBLE
28248: LD_EXP 96
28252: PUSH
28253: LD_VAR 0 1
28257: ARRAY
28258: INC
28259: ST_TO_ADDR
28260: LD_INT 1
28262: PUSH
28263: FOR_DOWNTO
28264: IFFALSE 28514
// begin side := GetSide ( minersList [ i ] ) ;
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_EXP 95
28275: PUSH
28276: LD_VAR 0 1
28280: ARRAY
28281: PPUSH
28282: CALL_OW 255
28286: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_EXP 96
28296: PUSH
28297: LD_VAR 0 1
28301: ARRAY
28302: PUSH
28303: LD_VAR 0 2
28307: ARRAY
28308: PUSH
28309: LD_INT 1
28311: ARRAY
28312: PPUSH
28313: LD_EXP 96
28317: PUSH
28318: LD_VAR 0 1
28322: ARRAY
28323: PUSH
28324: LD_VAR 0 2
28328: ARRAY
28329: PUSH
28330: LD_INT 2
28332: ARRAY
28333: PPUSH
28334: CALL_OW 428
28338: ST_TO_ADDR
// if not tmp then
28339: LD_VAR 0 4
28343: NOT
28344: IFFALSE 28348
// continue ;
28346: GO 28263
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28348: LD_VAR 0 4
28352: PUSH
28353: LD_INT 81
28355: PUSH
28356: LD_VAR 0 3
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 69
28369: IN
28370: PUSH
28371: LD_EXP 96
28375: PUSH
28376: LD_VAR 0 1
28380: ARRAY
28381: PUSH
28382: LD_VAR 0 2
28386: ARRAY
28387: PUSH
28388: LD_INT 1
28390: ARRAY
28391: PPUSH
28392: LD_EXP 96
28396: PUSH
28397: LD_VAR 0 1
28401: ARRAY
28402: PUSH
28403: LD_VAR 0 2
28407: ARRAY
28408: PUSH
28409: LD_INT 2
28411: ARRAY
28412: PPUSH
28413: CALL_OW 458
28417: AND
28418: IFFALSE 28512
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28420: LD_EXP 96
28424: PUSH
28425: LD_VAR 0 1
28429: ARRAY
28430: PUSH
28431: LD_VAR 0 2
28435: ARRAY
28436: PUSH
28437: LD_INT 1
28439: ARRAY
28440: PPUSH
28441: LD_EXP 96
28445: PUSH
28446: LD_VAR 0 1
28450: ARRAY
28451: PUSH
28452: LD_VAR 0 2
28456: ARRAY
28457: PUSH
28458: LD_INT 2
28460: ARRAY
28461: PPUSH
28462: LD_VAR 0 3
28466: PPUSH
28467: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28471: LD_ADDR_EXP 96
28475: PUSH
28476: LD_EXP 96
28480: PPUSH
28481: LD_VAR 0 1
28485: PPUSH
28486: LD_EXP 96
28490: PUSH
28491: LD_VAR 0 1
28495: ARRAY
28496: PPUSH
28497: LD_VAR 0 2
28501: PPUSH
28502: CALL_OW 3
28506: PPUSH
28507: CALL_OW 1
28511: ST_TO_ADDR
// end ; end ;
28512: GO 28263
28514: POP
28515: POP
// end ;
28516: GO 28181
28518: POP
28519: POP
// end ;
28520: PPOPN 4
28522: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28523: LD_INT 0
28525: PPUSH
28526: PPUSH
// result := false ;
28527: LD_ADDR_VAR 0 4
28531: PUSH
28532: LD_INT 0
28534: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28535: LD_VAR 0 1
28539: PPUSH
28540: CALL_OW 264
28544: PUSH
28545: LD_INT 81
28547: EQUAL
28548: NOT
28549: IFFALSE 28553
// exit ;
28551: GO 28793
// index := GetElementIndex ( minersList , unit ) ;
28553: LD_ADDR_VAR 0 5
28557: PUSH
28558: LD_EXP 95
28562: PPUSH
28563: LD_VAR 0 1
28567: PPUSH
28568: CALL 34926 0 2
28572: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28573: LD_EXP 96
28577: PUSH
28578: LD_VAR 0 5
28582: ARRAY
28583: PUSH
28584: LD_EXP 97
28588: GREATEREQUAL
28589: IFFALSE 28593
// exit ;
28591: GO 28793
// ComMoveXY ( unit , x , y ) ;
28593: LD_VAR 0 1
28597: PPUSH
28598: LD_VAR 0 2
28602: PPUSH
28603: LD_VAR 0 3
28607: PPUSH
28608: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28612: LD_INT 35
28614: PPUSH
28615: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28619: LD_VAR 0 1
28623: PPUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: LD_VAR 0 3
28633: PPUSH
28634: CALL 66281 0 3
28638: NOT
28639: PUSH
28640: LD_VAR 0 1
28644: PPUSH
28645: CALL_OW 314
28649: AND
28650: IFFALSE 28654
// exit ;
28652: GO 28793
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28654: LD_VAR 0 2
28658: PPUSH
28659: LD_VAR 0 3
28663: PPUSH
28664: CALL_OW 428
28668: PUSH
28669: LD_VAR 0 1
28673: EQUAL
28674: PUSH
28675: LD_VAR 0 1
28679: PPUSH
28680: CALL_OW 314
28684: NOT
28685: AND
28686: IFFALSE 28612
// PlaySoundXY ( x , y , PlantMine ) ;
28688: LD_VAR 0 2
28692: PPUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: LD_STRING PlantMine
28700: PPUSH
28701: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_VAR 0 3
28714: PPUSH
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL_OW 255
28724: PPUSH
28725: LD_INT 0
28727: PPUSH
28728: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28732: LD_ADDR_EXP 96
28736: PUSH
28737: LD_EXP 96
28741: PPUSH
28742: LD_VAR 0 5
28746: PUSH
28747: LD_EXP 96
28751: PUSH
28752: LD_VAR 0 5
28756: ARRAY
28757: PUSH
28758: LD_INT 1
28760: PLUS
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PPUSH
28766: LD_VAR 0 2
28770: PUSH
28771: LD_VAR 0 3
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL 35141 0 3
28784: ST_TO_ADDR
// result := true ;
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: LD_INT 1
28792: ST_TO_ADDR
// end ;
28793: LD_VAR 0 4
28797: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
// if not unit in minersList then
28803: LD_VAR 0 1
28807: PUSH
28808: LD_EXP 95
28812: IN
28813: NOT
28814: IFFALSE 28818
// exit ;
28816: GO 29210
// index := GetElementIndex ( minersList , unit ) ;
28818: LD_ADDR_VAR 0 6
28822: PUSH
28823: LD_EXP 95
28827: PPUSH
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL 34926 0 2
28837: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28838: LD_ADDR_VAR 0 5
28842: PUSH
28843: DOUBLE
28844: LD_EXP 96
28848: PUSH
28849: LD_VAR 0 6
28853: ARRAY
28854: INC
28855: ST_TO_ADDR
28856: LD_INT 1
28858: PUSH
28859: FOR_DOWNTO
28860: IFFALSE 29021
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28862: LD_EXP 96
28866: PUSH
28867: LD_VAR 0 6
28871: ARRAY
28872: PUSH
28873: LD_VAR 0 5
28877: ARRAY
28878: PUSH
28879: LD_INT 1
28881: ARRAY
28882: PUSH
28883: LD_VAR 0 2
28887: EQUAL
28888: PUSH
28889: LD_EXP 96
28893: PUSH
28894: LD_VAR 0 6
28898: ARRAY
28899: PUSH
28900: LD_VAR 0 5
28904: ARRAY
28905: PUSH
28906: LD_INT 2
28908: ARRAY
28909: PUSH
28910: LD_VAR 0 3
28914: EQUAL
28915: AND
28916: IFFALSE 29019
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28918: LD_EXP 96
28922: PUSH
28923: LD_VAR 0 6
28927: ARRAY
28928: PUSH
28929: LD_VAR 0 5
28933: ARRAY
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: LD_EXP 96
28943: PUSH
28944: LD_VAR 0 6
28948: ARRAY
28949: PUSH
28950: LD_VAR 0 5
28954: ARRAY
28955: PUSH
28956: LD_INT 2
28958: ARRAY
28959: PPUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 255
28969: PPUSH
28970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28974: LD_ADDR_EXP 96
28978: PUSH
28979: LD_EXP 96
28983: PPUSH
28984: LD_VAR 0 6
28988: PPUSH
28989: LD_EXP 96
28993: PUSH
28994: LD_VAR 0 6
28998: ARRAY
28999: PPUSH
29000: LD_VAR 0 5
29004: PPUSH
29005: CALL_OW 3
29009: PPUSH
29010: CALL_OW 1
29014: ST_TO_ADDR
// exit ;
29015: POP
29016: POP
29017: GO 29210
// end ; end ;
29019: GO 28859
29021: POP
29022: POP
// for i := minerMinesList [ index ] downto 1 do
29023: LD_ADDR_VAR 0 5
29027: PUSH
29028: DOUBLE
29029: LD_EXP 96
29033: PUSH
29034: LD_VAR 0 6
29038: ARRAY
29039: INC
29040: ST_TO_ADDR
29041: LD_INT 1
29043: PUSH
29044: FOR_DOWNTO
29045: IFFALSE 29208
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29047: LD_EXP 96
29051: PUSH
29052: LD_VAR 0 6
29056: ARRAY
29057: PUSH
29058: LD_VAR 0 5
29062: ARRAY
29063: PUSH
29064: LD_INT 1
29066: ARRAY
29067: PPUSH
29068: LD_EXP 96
29072: PUSH
29073: LD_VAR 0 6
29077: ARRAY
29078: PUSH
29079: LD_VAR 0 5
29083: ARRAY
29084: PUSH
29085: LD_INT 2
29087: ARRAY
29088: PPUSH
29089: LD_VAR 0 2
29093: PPUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: CALL_OW 298
29103: PUSH
29104: LD_INT 6
29106: LESS
29107: IFFALSE 29206
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29109: LD_EXP 96
29113: PUSH
29114: LD_VAR 0 6
29118: ARRAY
29119: PUSH
29120: LD_VAR 0 5
29124: ARRAY
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: LD_EXP 96
29134: PUSH
29135: LD_VAR 0 6
29139: ARRAY
29140: PUSH
29141: LD_VAR 0 5
29145: ARRAY
29146: PUSH
29147: LD_INT 2
29149: ARRAY
29150: PPUSH
29151: LD_VAR 0 1
29155: PPUSH
29156: CALL_OW 255
29160: PPUSH
29161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29165: LD_ADDR_EXP 96
29169: PUSH
29170: LD_EXP 96
29174: PPUSH
29175: LD_VAR 0 6
29179: PPUSH
29180: LD_EXP 96
29184: PUSH
29185: LD_VAR 0 6
29189: ARRAY
29190: PPUSH
29191: LD_VAR 0 5
29195: PPUSH
29196: CALL_OW 3
29200: PPUSH
29201: CALL_OW 1
29205: ST_TO_ADDR
// end ; end ;
29206: GO 29044
29208: POP
29209: POP
// end ;
29210: LD_VAR 0 4
29214: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29215: LD_INT 0
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
29223: PPUSH
29224: PPUSH
29225: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 264
29235: PUSH
29236: LD_INT 81
29238: EQUAL
29239: NOT
29240: PUSH
29241: LD_VAR 0 1
29245: PUSH
29246: LD_EXP 95
29250: IN
29251: NOT
29252: OR
29253: IFFALSE 29257
// exit ;
29255: GO 29579
// index := GetElementIndex ( minersList , unit ) ;
29257: LD_ADDR_VAR 0 6
29261: PUSH
29262: LD_EXP 95
29266: PPUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: CALL 34926 0 2
29276: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29277: LD_ADDR_VAR 0 8
29281: PUSH
29282: LD_EXP 97
29286: PUSH
29287: LD_EXP 96
29291: PUSH
29292: LD_VAR 0 6
29296: ARRAY
29297: MINUS
29298: ST_TO_ADDR
// if not minesFreeAmount then
29299: LD_VAR 0 8
29303: NOT
29304: IFFALSE 29308
// exit ;
29306: GO 29579
// tmp := [ ] ;
29308: LD_ADDR_VAR 0 7
29312: PUSH
29313: EMPTY
29314: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29315: LD_ADDR_VAR 0 5
29319: PUSH
29320: DOUBLE
29321: LD_INT 1
29323: DEC
29324: ST_TO_ADDR
29325: LD_VAR 0 8
29329: PUSH
29330: FOR_TO
29331: IFFALSE 29526
// begin _d := rand ( 0 , 5 ) ;
29333: LD_ADDR_VAR 0 11
29337: PUSH
29338: LD_INT 0
29340: PPUSH
29341: LD_INT 5
29343: PPUSH
29344: CALL_OW 12
29348: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29349: LD_ADDR_VAR 0 12
29353: PUSH
29354: LD_INT 2
29356: PPUSH
29357: LD_INT 6
29359: PPUSH
29360: CALL_OW 12
29364: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29365: LD_ADDR_VAR 0 9
29369: PUSH
29370: LD_VAR 0 2
29374: PPUSH
29375: LD_VAR 0 11
29379: PPUSH
29380: LD_VAR 0 12
29384: PPUSH
29385: CALL_OW 272
29389: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29390: LD_ADDR_VAR 0 10
29394: PUSH
29395: LD_VAR 0 3
29399: PPUSH
29400: LD_VAR 0 11
29404: PPUSH
29405: LD_VAR 0 12
29409: PPUSH
29410: CALL_OW 273
29414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29415: LD_VAR 0 9
29419: PPUSH
29420: LD_VAR 0 10
29424: PPUSH
29425: CALL_OW 488
29429: PUSH
29430: LD_VAR 0 9
29434: PUSH
29435: LD_VAR 0 10
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_VAR 0 7
29448: IN
29449: NOT
29450: AND
29451: PUSH
29452: LD_VAR 0 9
29456: PPUSH
29457: LD_VAR 0 10
29461: PPUSH
29462: CALL_OW 458
29466: NOT
29467: AND
29468: IFFALSE 29510
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29470: LD_ADDR_VAR 0 7
29474: PUSH
29475: LD_VAR 0 7
29479: PPUSH
29480: LD_VAR 0 7
29484: PUSH
29485: LD_INT 1
29487: PLUS
29488: PPUSH
29489: LD_VAR 0 9
29493: PUSH
29494: LD_VAR 0 10
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PPUSH
29503: CALL_OW 1
29507: ST_TO_ADDR
29508: GO 29524
// i := i - 1 ;
29510: LD_ADDR_VAR 0 5
29514: PUSH
29515: LD_VAR 0 5
29519: PUSH
29520: LD_INT 1
29522: MINUS
29523: ST_TO_ADDR
// end ;
29524: GO 29330
29526: POP
29527: POP
// for i in tmp do
29528: LD_ADDR_VAR 0 5
29532: PUSH
29533: LD_VAR 0 7
29537: PUSH
29538: FOR_IN
29539: IFFALSE 29577
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29541: LD_VAR 0 1
29545: PPUSH
29546: LD_VAR 0 5
29550: PUSH
29551: LD_INT 1
29553: ARRAY
29554: PPUSH
29555: LD_VAR 0 5
29559: PUSH
29560: LD_INT 2
29562: ARRAY
29563: PPUSH
29564: CALL 28523 0 3
29568: NOT
29569: IFFALSE 29575
// exit ;
29571: POP
29572: POP
29573: GO 29579
29575: GO 29538
29577: POP
29578: POP
// end ;
29579: LD_VAR 0 4
29583: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
// if not GetClass ( unit ) = class_sniper then
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 257
29602: PUSH
29603: LD_INT 5
29605: EQUAL
29606: NOT
29607: IFFALSE 29611
// exit ;
29609: GO 29999
// dist := 8 ;
29611: LD_ADDR_VAR 0 5
29615: PUSH
29616: LD_INT 8
29618: ST_TO_ADDR
// viewRange := 12 ;
29619: LD_ADDR_VAR 0 7
29623: PUSH
29624: LD_INT 12
29626: ST_TO_ADDR
// side := GetSide ( unit ) ;
29627: LD_ADDR_VAR 0 6
29631: PUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 255
29641: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29642: LD_INT 61
29644: PPUSH
29645: LD_VAR 0 6
29649: PPUSH
29650: CALL_OW 321
29654: PUSH
29655: LD_INT 2
29657: EQUAL
29658: IFFALSE 29668
// viewRange := 16 ;
29660: LD_ADDR_VAR 0 7
29664: PUSH
29665: LD_INT 16
29667: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29668: LD_VAR 0 1
29672: PPUSH
29673: LD_VAR 0 2
29677: PPUSH
29678: LD_VAR 0 3
29682: PPUSH
29683: CALL_OW 297
29687: PUSH
29688: LD_VAR 0 5
29692: GREATER
29693: IFFALSE 29772
// begin ComMoveXY ( unit , x , y ) ;
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_VAR 0 2
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29714: LD_INT 35
29716: PPUSH
29717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: LD_VAR 0 3
29735: PPUSH
29736: CALL 66281 0 3
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29999
// until GetDistUnitXY ( unit , x , y ) < dist ;
29745: LD_VAR 0 1
29749: PPUSH
29750: LD_VAR 0 2
29754: PPUSH
29755: LD_VAR 0 3
29759: PPUSH
29760: CALL_OW 297
29764: PUSH
29765: LD_VAR 0 5
29769: LESS
29770: IFFALSE 29714
// end ; ComTurnXY ( unit , x , y ) ;
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_VAR 0 2
29781: PPUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: CALL_OW 118
// wait ( 5 ) ;
29791: LD_INT 5
29793: PPUSH
29794: CALL_OW 67
// _d := GetDir ( unit ) ;
29798: LD_ADDR_VAR 0 10
29802: PUSH
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 254
29812: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29813: LD_ADDR_VAR 0 8
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 250
29827: PPUSH
29828: LD_VAR 0 10
29832: PPUSH
29833: LD_VAR 0 5
29837: PPUSH
29838: CALL_OW 272
29842: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29843: LD_ADDR_VAR 0 9
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 251
29857: PPUSH
29858: LD_VAR 0 10
29862: PPUSH
29863: LD_VAR 0 5
29867: PPUSH
29868: CALL_OW 273
29872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29873: LD_VAR 0 8
29877: PPUSH
29878: LD_VAR 0 9
29882: PPUSH
29883: CALL_OW 488
29887: NOT
29888: IFFALSE 29892
// exit ;
29890: GO 29999
// ComAnimCustom ( unit , 1 ) ;
29892: LD_VAR 0 1
29896: PPUSH
29897: LD_INT 1
29899: PPUSH
29900: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29904: LD_VAR 0 8
29908: PPUSH
29909: LD_VAR 0 9
29913: PPUSH
29914: LD_VAR 0 6
29918: PPUSH
29919: LD_VAR 0 7
29923: PPUSH
29924: CALL_OW 330
// repeat wait ( 1 ) ;
29928: LD_INT 1
29930: PPUSH
29931: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL_OW 316
29944: PUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 314
29954: OR
29955: PUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: CALL_OW 302
29965: NOT
29966: OR
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 301
29977: OR
29978: IFFALSE 29928
// RemoveSeeing ( _x , _y , side ) ;
29980: LD_VAR 0 8
29984: PPUSH
29985: LD_VAR 0 9
29989: PPUSH
29990: LD_VAR 0 6
29994: PPUSH
29995: CALL_OW 331
// end ; end_of_file
29999: LD_VAR 0 4
30003: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
// if exist_mode then
30008: LD_VAR 0 2
30012: IFFALSE 30037
// unit := CreateCharacter ( prefix & ident ) else
30014: LD_ADDR_VAR 0 5
30018: PUSH
30019: LD_VAR 0 3
30023: PUSH
30024: LD_VAR 0 1
30028: STR
30029: PPUSH
30030: CALL_OW 34
30034: ST_TO_ADDR
30035: GO 30052
// unit := NewCharacter ( ident ) ;
30037: LD_ADDR_VAR 0 5
30041: PUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL_OW 25
30051: ST_TO_ADDR
// result := unit ;
30052: LD_ADDR_VAR 0 4
30056: PUSH
30057: LD_VAR 0 5
30061: ST_TO_ADDR
// end ;
30062: LD_VAR 0 4
30066: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30067: LD_INT 0
30069: PPUSH
30070: PPUSH
// if not side or not nation then
30071: LD_VAR 0 1
30075: NOT
30076: PUSH
30077: LD_VAR 0 2
30081: NOT
30082: OR
30083: IFFALSE 30087
// exit ;
30085: GO 30855
// case nation of nation_american :
30087: LD_VAR 0 2
30091: PUSH
30092: LD_INT 1
30094: DOUBLE
30095: EQUAL
30096: IFTRUE 30100
30098: GO 30314
30100: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30101: LD_ADDR_VAR 0 4
30105: PUSH
30106: LD_INT 35
30108: PUSH
30109: LD_INT 45
30111: PUSH
30112: LD_INT 46
30114: PUSH
30115: LD_INT 47
30117: PUSH
30118: LD_INT 82
30120: PUSH
30121: LD_INT 83
30123: PUSH
30124: LD_INT 84
30126: PUSH
30127: LD_INT 85
30129: PUSH
30130: LD_INT 86
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: LD_INT 6
30141: PUSH
30142: LD_INT 15
30144: PUSH
30145: LD_INT 16
30147: PUSH
30148: LD_INT 7
30150: PUSH
30151: LD_INT 12
30153: PUSH
30154: LD_INT 13
30156: PUSH
30157: LD_INT 10
30159: PUSH
30160: LD_INT 14
30162: PUSH
30163: LD_INT 20
30165: PUSH
30166: LD_INT 21
30168: PUSH
30169: LD_INT 22
30171: PUSH
30172: LD_INT 25
30174: PUSH
30175: LD_INT 32
30177: PUSH
30178: LD_INT 27
30180: PUSH
30181: LD_INT 36
30183: PUSH
30184: LD_INT 69
30186: PUSH
30187: LD_INT 39
30189: PUSH
30190: LD_INT 34
30192: PUSH
30193: LD_INT 40
30195: PUSH
30196: LD_INT 48
30198: PUSH
30199: LD_INT 49
30201: PUSH
30202: LD_INT 50
30204: PUSH
30205: LD_INT 51
30207: PUSH
30208: LD_INT 52
30210: PUSH
30211: LD_INT 53
30213: PUSH
30214: LD_INT 54
30216: PUSH
30217: LD_INT 55
30219: PUSH
30220: LD_INT 56
30222: PUSH
30223: LD_INT 57
30225: PUSH
30226: LD_INT 58
30228: PUSH
30229: LD_INT 59
30231: PUSH
30232: LD_INT 60
30234: PUSH
30235: LD_INT 61
30237: PUSH
30238: LD_INT 62
30240: PUSH
30241: LD_INT 80
30243: PUSH
30244: LD_INT 82
30246: PUSH
30247: LD_INT 83
30249: PUSH
30250: LD_INT 84
30252: PUSH
30253: LD_INT 85
30255: PUSH
30256: LD_INT 86
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30779
30314: LD_INT 2
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30548
30322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30323: LD_ADDR_VAR 0 4
30327: PUSH
30328: LD_INT 35
30330: PUSH
30331: LD_INT 45
30333: PUSH
30334: LD_INT 46
30336: PUSH
30337: LD_INT 47
30339: PUSH
30340: LD_INT 82
30342: PUSH
30343: LD_INT 83
30345: PUSH
30346: LD_INT 84
30348: PUSH
30349: LD_INT 85
30351: PUSH
30352: LD_INT 87
30354: PUSH
30355: LD_INT 70
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 11
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: LD_INT 4
30369: PUSH
30370: LD_INT 5
30372: PUSH
30373: LD_INT 6
30375: PUSH
30376: LD_INT 15
30378: PUSH
30379: LD_INT 18
30381: PUSH
30382: LD_INT 7
30384: PUSH
30385: LD_INT 17
30387: PUSH
30388: LD_INT 8
30390: PUSH
30391: LD_INT 20
30393: PUSH
30394: LD_INT 21
30396: PUSH
30397: LD_INT 22
30399: PUSH
30400: LD_INT 72
30402: PUSH
30403: LD_INT 26
30405: PUSH
30406: LD_INT 69
30408: PUSH
30409: LD_INT 39
30411: PUSH
30412: LD_INT 40
30414: PUSH
30415: LD_INT 41
30417: PUSH
30418: LD_INT 42
30420: PUSH
30421: LD_INT 43
30423: PUSH
30424: LD_INT 48
30426: PUSH
30427: LD_INT 49
30429: PUSH
30430: LD_INT 50
30432: PUSH
30433: LD_INT 51
30435: PUSH
30436: LD_INT 52
30438: PUSH
30439: LD_INT 53
30441: PUSH
30442: LD_INT 54
30444: PUSH
30445: LD_INT 55
30447: PUSH
30448: LD_INT 56
30450: PUSH
30451: LD_INT 60
30453: PUSH
30454: LD_INT 61
30456: PUSH
30457: LD_INT 62
30459: PUSH
30460: LD_INT 66
30462: PUSH
30463: LD_INT 67
30465: PUSH
30466: LD_INT 68
30468: PUSH
30469: LD_INT 81
30471: PUSH
30472: LD_INT 82
30474: PUSH
30475: LD_INT 83
30477: PUSH
30478: LD_INT 84
30480: PUSH
30481: LD_INT 85
30483: PUSH
30484: LD_INT 87
30486: PUSH
30487: LD_INT 88
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
30546: GO 30779
30548: LD_INT 3
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30778
30556: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30557: LD_ADDR_VAR 0 4
30561: PUSH
30562: LD_INT 46
30564: PUSH
30565: LD_INT 47
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: LD_INT 2
30573: PUSH
30574: LD_INT 82
30576: PUSH
30577: LD_INT 83
30579: PUSH
30580: LD_INT 84
30582: PUSH
30583: LD_INT 85
30585: PUSH
30586: LD_INT 86
30588: PUSH
30589: LD_INT 11
30591: PUSH
30592: LD_INT 9
30594: PUSH
30595: LD_INT 20
30597: PUSH
30598: LD_INT 19
30600: PUSH
30601: LD_INT 21
30603: PUSH
30604: LD_INT 24
30606: PUSH
30607: LD_INT 22
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 28
30615: PUSH
30616: LD_INT 29
30618: PUSH
30619: LD_INT 30
30621: PUSH
30622: LD_INT 31
30624: PUSH
30625: LD_INT 37
30627: PUSH
30628: LD_INT 38
30630: PUSH
30631: LD_INT 32
30633: PUSH
30634: LD_INT 27
30636: PUSH
30637: LD_INT 33
30639: PUSH
30640: LD_INT 69
30642: PUSH
30643: LD_INT 39
30645: PUSH
30646: LD_INT 34
30648: PUSH
30649: LD_INT 40
30651: PUSH
30652: LD_INT 71
30654: PUSH
30655: LD_INT 23
30657: PUSH
30658: LD_INT 44
30660: PUSH
30661: LD_INT 48
30663: PUSH
30664: LD_INT 49
30666: PUSH
30667: LD_INT 50
30669: PUSH
30670: LD_INT 51
30672: PUSH
30673: LD_INT 52
30675: PUSH
30676: LD_INT 53
30678: PUSH
30679: LD_INT 54
30681: PUSH
30682: LD_INT 55
30684: PUSH
30685: LD_INT 56
30687: PUSH
30688: LD_INT 57
30690: PUSH
30691: LD_INT 58
30693: PUSH
30694: LD_INT 59
30696: PUSH
30697: LD_INT 63
30699: PUSH
30700: LD_INT 64
30702: PUSH
30703: LD_INT 65
30705: PUSH
30706: LD_INT 82
30708: PUSH
30709: LD_INT 83
30711: PUSH
30712: LD_INT 84
30714: PUSH
30715: LD_INT 85
30717: PUSH
30718: LD_INT 86
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: ST_TO_ADDR
30776: GO 30779
30778: POP
// if state > - 1 and state < 3 then
30779: LD_VAR 0 3
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: GREATER
30788: PUSH
30789: LD_VAR 0 3
30793: PUSH
30794: LD_INT 3
30796: LESS
30797: AND
30798: IFFALSE 30855
// for i in result do
30800: LD_ADDR_VAR 0 5
30804: PUSH
30805: LD_VAR 0 4
30809: PUSH
30810: FOR_IN
30811: IFFALSE 30853
// if GetTech ( i , side ) <> state then
30813: LD_VAR 0 5
30817: PPUSH
30818: LD_VAR 0 1
30822: PPUSH
30823: CALL_OW 321
30827: PUSH
30828: LD_VAR 0 3
30832: NONEQUAL
30833: IFFALSE 30851
// result := result diff i ;
30835: LD_ADDR_VAR 0 4
30839: PUSH
30840: LD_VAR 0 4
30844: PUSH
30845: LD_VAR 0 5
30849: DIFF
30850: ST_TO_ADDR
30851: GO 30810
30853: POP
30854: POP
// end ;
30855: LD_VAR 0 4
30859: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30860: LD_INT 0
30862: PPUSH
30863: PPUSH
30864: PPUSH
// result := true ;
30865: LD_ADDR_VAR 0 3
30869: PUSH
30870: LD_INT 1
30872: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30873: LD_ADDR_VAR 0 5
30877: PUSH
30878: LD_VAR 0 2
30882: PPUSH
30883: CALL_OW 480
30887: ST_TO_ADDR
// if not tmp then
30888: LD_VAR 0 5
30892: NOT
30893: IFFALSE 30897
// exit ;
30895: GO 30946
// for i in tmp do
30897: LD_ADDR_VAR 0 4
30901: PUSH
30902: LD_VAR 0 5
30906: PUSH
30907: FOR_IN
30908: IFFALSE 30944
// if GetTech ( i , side ) <> state_researched then
30910: LD_VAR 0 4
30914: PPUSH
30915: LD_VAR 0 1
30919: PPUSH
30920: CALL_OW 321
30924: PUSH
30925: LD_INT 2
30927: NONEQUAL
30928: IFFALSE 30942
// begin result := false ;
30930: LD_ADDR_VAR 0 3
30934: PUSH
30935: LD_INT 0
30937: ST_TO_ADDR
// exit ;
30938: POP
30939: POP
30940: GO 30946
// end ;
30942: GO 30907
30944: POP
30945: POP
// end ;
30946: LD_VAR 0 3
30950: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30951: LD_INT 0
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
30965: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30966: LD_VAR 0 1
30970: NOT
30971: PUSH
30972: LD_VAR 0 1
30976: PPUSH
30977: CALL_OW 257
30981: PUSH
30982: LD_INT 9
30984: NONEQUAL
30985: OR
30986: IFFALSE 30990
// exit ;
30988: GO 31563
// side := GetSide ( unit ) ;
30990: LD_ADDR_VAR 0 9
30994: PUSH
30995: LD_VAR 0 1
30999: PPUSH
31000: CALL_OW 255
31004: ST_TO_ADDR
// tech_space := tech_spacanom ;
31005: LD_ADDR_VAR 0 12
31009: PUSH
31010: LD_INT 29
31012: ST_TO_ADDR
// tech_time := tech_taurad ;
31013: LD_ADDR_VAR 0 13
31017: PUSH
31018: LD_INT 28
31020: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31021: LD_ADDR_VAR 0 11
31025: PUSH
31026: LD_VAR 0 1
31030: PPUSH
31031: CALL_OW 310
31035: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31036: LD_VAR 0 11
31040: PPUSH
31041: CALL_OW 247
31045: PUSH
31046: LD_INT 2
31048: EQUAL
31049: IFFALSE 31053
// exit ;
31051: GO 31563
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31053: LD_ADDR_VAR 0 8
31057: PUSH
31058: LD_INT 81
31060: PUSH
31061: LD_VAR 0 9
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 21
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PPUSH
31091: CALL_OW 69
31095: ST_TO_ADDR
// if not tmp then
31096: LD_VAR 0 8
31100: NOT
31101: IFFALSE 31105
// exit ;
31103: GO 31563
// if in_unit then
31105: LD_VAR 0 11
31109: IFFALSE 31133
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31111: LD_ADDR_VAR 0 10
31115: PUSH
31116: LD_VAR 0 8
31120: PPUSH
31121: LD_VAR 0 11
31125: PPUSH
31126: CALL_OW 74
31130: ST_TO_ADDR
31131: GO 31153
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31133: LD_ADDR_VAR 0 10
31137: PUSH
31138: LD_VAR 0 8
31142: PPUSH
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 74
31152: ST_TO_ADDR
// if not enemy then
31153: LD_VAR 0 10
31157: NOT
31158: IFFALSE 31162
// exit ;
31160: GO 31563
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31162: LD_VAR 0 11
31166: PUSH
31167: LD_VAR 0 11
31171: PPUSH
31172: LD_VAR 0 10
31176: PPUSH
31177: CALL_OW 296
31181: PUSH
31182: LD_INT 13
31184: GREATER
31185: AND
31186: PUSH
31187: LD_VAR 0 1
31191: PPUSH
31192: LD_VAR 0 10
31196: PPUSH
31197: CALL_OW 296
31201: PUSH
31202: LD_INT 12
31204: GREATER
31205: OR
31206: IFFALSE 31210
// exit ;
31208: GO 31563
// missile := [ 1 ] ;
31210: LD_ADDR_VAR 0 14
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: EMPTY
31219: LIST
31220: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31221: LD_VAR 0 9
31225: PPUSH
31226: LD_VAR 0 12
31230: PPUSH
31231: CALL_OW 325
31235: IFFALSE 31264
// missile := Replace ( missile , missile + 1 , 2 ) ;
31237: LD_ADDR_VAR 0 14
31241: PUSH
31242: LD_VAR 0 14
31246: PPUSH
31247: LD_VAR 0 14
31251: PUSH
31252: LD_INT 1
31254: PLUS
31255: PPUSH
31256: LD_INT 2
31258: PPUSH
31259: CALL_OW 1
31263: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31264: LD_VAR 0 9
31268: PPUSH
31269: LD_VAR 0 13
31273: PPUSH
31274: CALL_OW 325
31278: PUSH
31279: LD_VAR 0 10
31283: PPUSH
31284: CALL_OW 255
31288: PPUSH
31289: LD_VAR 0 13
31293: PPUSH
31294: CALL_OW 325
31298: NOT
31299: AND
31300: IFFALSE 31329
// missile := Replace ( missile , missile + 1 , 3 ) ;
31302: LD_ADDR_VAR 0 14
31306: PUSH
31307: LD_VAR 0 14
31311: PPUSH
31312: LD_VAR 0 14
31316: PUSH
31317: LD_INT 1
31319: PLUS
31320: PPUSH
31321: LD_INT 3
31323: PPUSH
31324: CALL_OW 1
31328: ST_TO_ADDR
// if missile < 2 then
31329: LD_VAR 0 14
31333: PUSH
31334: LD_INT 2
31336: LESS
31337: IFFALSE 31341
// exit ;
31339: GO 31563
// x := GetX ( enemy ) ;
31341: LD_ADDR_VAR 0 4
31345: PUSH
31346: LD_VAR 0 10
31350: PPUSH
31351: CALL_OW 250
31355: ST_TO_ADDR
// y := GetY ( enemy ) ;
31356: LD_ADDR_VAR 0 5
31360: PUSH
31361: LD_VAR 0 10
31365: PPUSH
31366: CALL_OW 251
31370: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31371: LD_ADDR_VAR 0 6
31375: PUSH
31376: LD_VAR 0 4
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PPUSH
31385: LD_INT 1
31387: PPUSH
31388: CALL_OW 12
31392: PLUS
31393: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31394: LD_ADDR_VAR 0 7
31398: PUSH
31399: LD_VAR 0 5
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PPUSH
31408: LD_INT 1
31410: PPUSH
31411: CALL_OW 12
31415: PLUS
31416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31417: LD_VAR 0 6
31421: PPUSH
31422: LD_VAR 0 7
31426: PPUSH
31427: CALL_OW 488
31431: NOT
31432: IFFALSE 31454
// begin _x := x ;
31434: LD_ADDR_VAR 0 6
31438: PUSH
31439: LD_VAR 0 4
31443: ST_TO_ADDR
// _y := y ;
31444: LD_ADDR_VAR 0 7
31448: PUSH
31449: LD_VAR 0 5
31453: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31454: LD_ADDR_VAR 0 3
31458: PUSH
31459: LD_INT 1
31461: PPUSH
31462: LD_VAR 0 14
31466: PPUSH
31467: CALL_OW 12
31471: ST_TO_ADDR
// case i of 1 :
31472: LD_VAR 0 3
31476: PUSH
31477: LD_INT 1
31479: DOUBLE
31480: EQUAL
31481: IFTRUE 31485
31483: GO 31502
31485: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31486: LD_VAR 0 1
31490: PPUSH
31491: LD_VAR 0 10
31495: PPUSH
31496: CALL_OW 115
31500: GO 31563
31502: LD_INT 2
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31532
31510: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_VAR 0 6
31520: PPUSH
31521: LD_VAR 0 7
31525: PPUSH
31526: CALL_OW 153
31530: GO 31563
31532: LD_INT 3
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31540
31538: GO 31562
31540: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31541: LD_VAR 0 1
31545: PPUSH
31546: LD_VAR 0 6
31550: PPUSH
31551: LD_VAR 0 7
31555: PPUSH
31556: CALL_OW 154
31560: GO 31563
31562: POP
// end ;
31563: LD_VAR 0 2
31567: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31568: LD_INT 0
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
31574: PPUSH
31575: PPUSH
// if not unit or not building then
31576: LD_VAR 0 1
31580: NOT
31581: PUSH
31582: LD_VAR 0 2
31586: NOT
31587: OR
31588: IFFALSE 31592
// exit ;
31590: GO 31750
// x := GetX ( building ) ;
31592: LD_ADDR_VAR 0 5
31596: PUSH
31597: LD_VAR 0 2
31601: PPUSH
31602: CALL_OW 250
31606: ST_TO_ADDR
// y := GetY ( building ) ;
31607: LD_ADDR_VAR 0 6
31611: PUSH
31612: LD_VAR 0 2
31616: PPUSH
31617: CALL_OW 251
31621: ST_TO_ADDR
// for i = 0 to 5 do
31622: LD_ADDR_VAR 0 4
31626: PUSH
31627: DOUBLE
31628: LD_INT 0
31630: DEC
31631: ST_TO_ADDR
31632: LD_INT 5
31634: PUSH
31635: FOR_TO
31636: IFFALSE 31748
// begin _x := ShiftX ( x , i , 3 ) ;
31638: LD_ADDR_VAR 0 7
31642: PUSH
31643: LD_VAR 0 5
31647: PPUSH
31648: LD_VAR 0 4
31652: PPUSH
31653: LD_INT 3
31655: PPUSH
31656: CALL_OW 272
31660: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31661: LD_ADDR_VAR 0 8
31665: PUSH
31666: LD_VAR 0 6
31670: PPUSH
31671: LD_VAR 0 4
31675: PPUSH
31676: LD_INT 3
31678: PPUSH
31679: CALL_OW 273
31683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31684: LD_VAR 0 7
31688: PPUSH
31689: LD_VAR 0 8
31693: PPUSH
31694: CALL_OW 488
31698: NOT
31699: IFFALSE 31703
// continue ;
31701: GO 31635
// if HexInfo ( _x , _y ) = 0 then
31703: LD_VAR 0 7
31707: PPUSH
31708: LD_VAR 0 8
31712: PPUSH
31713: CALL_OW 428
31717: PUSH
31718: LD_INT 0
31720: EQUAL
31721: IFFALSE 31746
// begin ComMoveXY ( unit , _x , _y ) ;
31723: LD_VAR 0 1
31727: PPUSH
31728: LD_VAR 0 7
31732: PPUSH
31733: LD_VAR 0 8
31737: PPUSH
31738: CALL_OW 111
// exit ;
31742: POP
31743: POP
31744: GO 31750
// end ; end ;
31746: GO 31635
31748: POP
31749: POP
// end ;
31750: LD_VAR 0 3
31754: RET
// export function ScanBase ( side , base_area ) ; begin
31755: LD_INT 0
31757: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_VAR 0 2
31767: PPUSH
31768: LD_INT 81
31770: PUSH
31771: LD_VAR 0 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PPUSH
31780: CALL_OW 70
31784: ST_TO_ADDR
// end ;
31785: LD_VAR 0 3
31789: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31790: LD_INT 0
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
// result := false ;
31796: LD_ADDR_VAR 0 2
31800: PUSH
31801: LD_INT 0
31803: ST_TO_ADDR
// side := GetSide ( unit ) ;
31804: LD_ADDR_VAR 0 3
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 255
31818: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31819: LD_ADDR_VAR 0 4
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 248
31833: ST_TO_ADDR
// case nat of 1 :
31834: LD_VAR 0 4
31838: PUSH
31839: LD_INT 1
31841: DOUBLE
31842: EQUAL
31843: IFTRUE 31847
31845: GO 31858
31847: POP
// tech := tech_lassight ; 2 :
31848: LD_ADDR_VAR 0 5
31852: PUSH
31853: LD_INT 12
31855: ST_TO_ADDR
31856: GO 31897
31858: LD_INT 2
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31877
31866: POP
// tech := tech_mortar ; 3 :
31867: LD_ADDR_VAR 0 5
31871: PUSH
31872: LD_INT 41
31874: ST_TO_ADDR
31875: GO 31897
31877: LD_INT 3
31879: DOUBLE
31880: EQUAL
31881: IFTRUE 31885
31883: GO 31896
31885: POP
// tech := tech_bazooka ; end ;
31886: LD_ADDR_VAR 0 5
31890: PUSH
31891: LD_INT 44
31893: ST_TO_ADDR
31894: GO 31897
31896: POP
// if Researched ( side , tech ) then
31897: LD_VAR 0 3
31901: PPUSH
31902: LD_VAR 0 5
31906: PPUSH
31907: CALL_OW 325
31911: IFFALSE 31938
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31913: LD_ADDR_VAR 0 2
31917: PUSH
31918: LD_INT 5
31920: PUSH
31921: LD_INT 8
31923: PUSH
31924: LD_INT 9
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: PUSH
31932: LD_VAR 0 4
31936: ARRAY
31937: ST_TO_ADDR
// end ;
31938: LD_VAR 0 2
31942: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
31947: PPUSH
// if not mines then
31948: LD_VAR 0 2
31952: NOT
31953: IFFALSE 31957
// exit ;
31955: GO 32101
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31957: LD_ADDR_VAR 0 5
31961: PUSH
31962: LD_INT 81
31964: PUSH
31965: LD_VAR 0 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 3
31976: PUSH
31977: LD_INT 21
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PPUSH
31995: CALL_OW 69
31999: ST_TO_ADDR
// for i in mines do
32000: LD_ADDR_VAR 0 4
32004: PUSH
32005: LD_VAR 0 2
32009: PUSH
32010: FOR_IN
32011: IFFALSE 32099
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32013: LD_VAR 0 4
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: PPUSH
32022: LD_VAR 0 4
32026: PUSH
32027: LD_INT 2
32029: ARRAY
32030: PPUSH
32031: CALL_OW 458
32035: NOT
32036: IFFALSE 32040
// continue ;
32038: GO 32010
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32040: LD_VAR 0 4
32044: PUSH
32045: LD_INT 1
32047: ARRAY
32048: PPUSH
32049: LD_VAR 0 4
32053: PUSH
32054: LD_INT 2
32056: ARRAY
32057: PPUSH
32058: CALL_OW 428
32062: PUSH
32063: LD_VAR 0 5
32067: IN
32068: IFFALSE 32097
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32070: LD_VAR 0 4
32074: PUSH
32075: LD_INT 1
32077: ARRAY
32078: PPUSH
32079: LD_VAR 0 4
32083: PUSH
32084: LD_INT 2
32086: ARRAY
32087: PPUSH
32088: LD_VAR 0 1
32092: PPUSH
32093: CALL_OW 456
// end ;
32097: GO 32010
32099: POP
32100: POP
// end ;
32101: LD_VAR 0 3
32105: RET
// export function Count ( array ) ; var i ; begin
32106: LD_INT 0
32108: PPUSH
32109: PPUSH
// result := 0 ;
32110: LD_ADDR_VAR 0 2
32114: PUSH
32115: LD_INT 0
32117: ST_TO_ADDR
// for i in array do
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_VAR 0 1
32127: PUSH
32128: FOR_IN
32129: IFFALSE 32153
// if i then
32131: LD_VAR 0 3
32135: IFFALSE 32151
// result := result + 1 ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_VAR 0 2
32146: PUSH
32147: LD_INT 1
32149: PLUS
32150: ST_TO_ADDR
32151: GO 32128
32153: POP
32154: POP
// end ;
32155: LD_VAR 0 2
32159: RET
// export function IsEmpty ( building ) ; begin
32160: LD_INT 0
32162: PPUSH
// if not building then
32163: LD_VAR 0 1
32167: NOT
32168: IFFALSE 32172
// exit ;
32170: GO 32215
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32172: LD_ADDR_VAR 0 2
32176: PUSH
32177: LD_VAR 0 1
32181: PUSH
32182: LD_INT 22
32184: PUSH
32185: LD_VAR 0 1
32189: PPUSH
32190: CALL_OW 255
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 58
32201: PUSH
32202: EMPTY
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PPUSH
32209: CALL_OW 69
32213: IN
32214: ST_TO_ADDR
// end ;
32215: LD_VAR 0 2
32219: RET
// export function IsNotFull ( building ) ; var places ; begin
32220: LD_INT 0
32222: PPUSH
32223: PPUSH
// if not building then
32224: LD_VAR 0 1
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 32404
// result := false ;
32233: LD_ADDR_VAR 0 2
32237: PUSH
32238: LD_INT 0
32240: ST_TO_ADDR
// places := 0 ;
32241: LD_ADDR_VAR 0 3
32245: PUSH
32246: LD_INT 0
32248: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL_OW 266
32258: PUSH
32259: LD_INT 0
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32321
32265: LD_INT 1
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32321
32271: LD_INT 6
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32321
32277: LD_INT 7
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32321
32283: LD_INT 8
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32321
32289: LD_INT 4
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32321
32295: LD_INT 5
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32321
32301: LD_INT 2
32303: DOUBLE
32304: EQUAL
32305: IFTRUE 32321
32307: LD_INT 3
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32321
32313: LD_INT 35
32315: DOUBLE
32316: EQUAL
32317: IFTRUE 32321
32319: GO 32332
32321: POP
// places := 6 ; b_bunker , b_breastwork :
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 6
32329: ST_TO_ADDR
32330: GO 32377
32332: LD_INT 32
32334: DOUBLE
32335: EQUAL
32336: IFTRUE 32346
32338: LD_INT 31
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32357
32346: POP
// places := 1 ; b_control_tower :
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_INT 1
32354: ST_TO_ADDR
32355: GO 32377
32357: LD_INT 36
32359: DOUBLE
32360: EQUAL
32361: IFTRUE 32365
32363: GO 32376
32365: POP
// places := 3 ; end ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_INT 3
32373: ST_TO_ADDR
32374: GO 32377
32376: POP
// if places then
32377: LD_VAR 0 3
32381: IFFALSE 32404
// result := UnitsInside ( building ) < places ;
32383: LD_ADDR_VAR 0 2
32387: PUSH
32388: LD_VAR 0 1
32392: PPUSH
32393: CALL_OW 313
32397: PUSH
32398: LD_VAR 0 3
32402: LESS
32403: ST_TO_ADDR
// end ;
32404: LD_VAR 0 2
32408: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32409: LD_INT 0
32411: PPUSH
32412: PPUSH
32413: PPUSH
32414: PPUSH
// tmp := [ ] ;
32415: LD_ADDR_VAR 0 3
32419: PUSH
32420: EMPTY
32421: ST_TO_ADDR
// list := [ ] ;
32422: LD_ADDR_VAR 0 5
32426: PUSH
32427: EMPTY
32428: ST_TO_ADDR
// for i = 16 to 25 do
32429: LD_ADDR_VAR 0 4
32433: PUSH
32434: DOUBLE
32435: LD_INT 16
32437: DEC
32438: ST_TO_ADDR
32439: LD_INT 25
32441: PUSH
32442: FOR_TO
32443: IFFALSE 32516
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32445: LD_ADDR_VAR 0 3
32449: PUSH
32450: LD_VAR 0 3
32454: PUSH
32455: LD_INT 22
32457: PUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: CALL_OW 255
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 91
32474: PUSH
32475: LD_VAR 0 1
32479: PUSH
32480: LD_INT 6
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 30
32490: PUSH
32491: LD_VAR 0 4
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: PPUSH
32508: CALL_OW 69
32512: ADD
32513: ST_TO_ADDR
32514: GO 32442
32516: POP
32517: POP
// for i = 1 to tmp do
32518: LD_ADDR_VAR 0 4
32522: PUSH
32523: DOUBLE
32524: LD_INT 1
32526: DEC
32527: ST_TO_ADDR
32528: LD_VAR 0 3
32532: PUSH
32533: FOR_TO
32534: IFFALSE 32622
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32536: LD_ADDR_VAR 0 5
32540: PUSH
32541: LD_VAR 0 5
32545: PUSH
32546: LD_VAR 0 3
32550: PUSH
32551: LD_VAR 0 4
32555: ARRAY
32556: PPUSH
32557: CALL_OW 266
32561: PUSH
32562: LD_VAR 0 3
32566: PUSH
32567: LD_VAR 0 4
32571: ARRAY
32572: PPUSH
32573: CALL_OW 250
32577: PUSH
32578: LD_VAR 0 3
32582: PUSH
32583: LD_VAR 0 4
32587: ARRAY
32588: PPUSH
32589: CALL_OW 251
32593: PUSH
32594: LD_VAR 0 3
32598: PUSH
32599: LD_VAR 0 4
32603: ARRAY
32604: PPUSH
32605: CALL_OW 254
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: PUSH
32616: EMPTY
32617: LIST
32618: ADD
32619: ST_TO_ADDR
32620: GO 32533
32622: POP
32623: POP
// result := list ;
32624: LD_ADDR_VAR 0 2
32628: PUSH
32629: LD_VAR 0 5
32633: ST_TO_ADDR
// end ;
32634: LD_VAR 0 2
32638: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32639: LD_INT 0
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
// if not factory then
32648: LD_VAR 0 1
32652: NOT
32653: IFFALSE 32657
// exit ;
32655: GO 33250
// if control = control_apeman then
32657: LD_VAR 0 4
32661: PUSH
32662: LD_INT 5
32664: EQUAL
32665: IFFALSE 32774
// begin tmp := UnitsInside ( factory ) ;
32667: LD_ADDR_VAR 0 8
32671: PUSH
32672: LD_VAR 0 1
32676: PPUSH
32677: CALL_OW 313
32681: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32682: LD_VAR 0 8
32686: PPUSH
32687: LD_INT 25
32689: PUSH
32690: LD_INT 12
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PPUSH
32697: CALL_OW 72
32701: NOT
32702: IFFALSE 32712
// control := control_manual ;
32704: LD_ADDR_VAR 0 4
32708: PUSH
32709: LD_INT 1
32711: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32712: LD_ADDR_VAR 0 8
32716: PUSH
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL 32409 0 1
32726: ST_TO_ADDR
// if tmp then
32727: LD_VAR 0 8
32731: IFFALSE 32774
// begin for i in tmp do
32733: LD_ADDR_VAR 0 7
32737: PUSH
32738: LD_VAR 0 8
32742: PUSH
32743: FOR_IN
32744: IFFALSE 32772
// if i [ 1 ] = b_ext_radio then
32746: LD_VAR 0 7
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: PUSH
32755: LD_INT 22
32757: EQUAL
32758: IFFALSE 32770
// begin control := control_remote ;
32760: LD_ADDR_VAR 0 4
32764: PUSH
32765: LD_INT 2
32767: ST_TO_ADDR
// break ;
32768: GO 32772
// end ;
32770: GO 32743
32772: POP
32773: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32774: LD_VAR 0 1
32778: PPUSH
32779: LD_VAR 0 2
32783: PPUSH
32784: LD_VAR 0 3
32788: PPUSH
32789: LD_VAR 0 4
32793: PPUSH
32794: LD_VAR 0 5
32798: PPUSH
32799: CALL_OW 448
32803: IFFALSE 32838
// begin result := [ chassis , engine , control , weapon ] ;
32805: LD_ADDR_VAR 0 6
32809: PUSH
32810: LD_VAR 0 2
32814: PUSH
32815: LD_VAR 0 3
32819: PUSH
32820: LD_VAR 0 4
32824: PUSH
32825: LD_VAR 0 5
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: ST_TO_ADDR
// exit ;
32836: GO 33250
// end ; _chassis := AvailableChassisList ( factory ) ;
32838: LD_ADDR_VAR 0 9
32842: PUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 475
32852: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32853: LD_ADDR_VAR 0 11
32857: PUSH
32858: LD_VAR 0 1
32862: PPUSH
32863: CALL_OW 476
32867: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32868: LD_ADDR_VAR 0 12
32872: PUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 477
32882: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32883: LD_ADDR_VAR 0 10
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 478
32897: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32898: LD_VAR 0 9
32902: NOT
32903: PUSH
32904: LD_VAR 0 11
32908: NOT
32909: OR
32910: PUSH
32911: LD_VAR 0 12
32915: NOT
32916: OR
32917: PUSH
32918: LD_VAR 0 10
32922: NOT
32923: OR
32924: IFFALSE 32959
// begin result := [ chassis , engine , control , weapon ] ;
32926: LD_ADDR_VAR 0 6
32930: PUSH
32931: LD_VAR 0 2
32935: PUSH
32936: LD_VAR 0 3
32940: PUSH
32941: LD_VAR 0 4
32945: PUSH
32946: LD_VAR 0 5
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: ST_TO_ADDR
// exit ;
32957: GO 33250
// end ; if not chassis in _chassis then
32959: LD_VAR 0 2
32963: PUSH
32964: LD_VAR 0 9
32968: IN
32969: NOT
32970: IFFALSE 32996
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32972: LD_ADDR_VAR 0 2
32976: PUSH
32977: LD_VAR 0 9
32981: PUSH
32982: LD_INT 1
32984: PPUSH
32985: LD_VAR 0 9
32989: PPUSH
32990: CALL_OW 12
32994: ARRAY
32995: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32996: LD_VAR 0 2
33000: PPUSH
33001: LD_VAR 0 3
33005: PPUSH
33006: CALL 33255 0 2
33010: NOT
33011: IFFALSE 33070
// repeat engine := _engine [ 1 ] ;
33013: LD_ADDR_VAR 0 3
33017: PUSH
33018: LD_VAR 0 11
33022: PUSH
33023: LD_INT 1
33025: ARRAY
33026: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33027: LD_ADDR_VAR 0 11
33031: PUSH
33032: LD_VAR 0 11
33036: PPUSH
33037: LD_INT 1
33039: PPUSH
33040: CALL_OW 3
33044: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33045: LD_VAR 0 2
33049: PPUSH
33050: LD_VAR 0 3
33054: PPUSH
33055: CALL 33255 0 2
33059: PUSH
33060: LD_VAR 0 11
33064: PUSH
33065: EMPTY
33066: EQUAL
33067: OR
33068: IFFALSE 33013
// if not control in _control then
33070: LD_VAR 0 4
33074: PUSH
33075: LD_VAR 0 12
33079: IN
33080: NOT
33081: IFFALSE 33107
// control := _control [ rand ( 1 , _control ) ] ;
33083: LD_ADDR_VAR 0 4
33087: PUSH
33088: LD_VAR 0 12
33092: PUSH
33093: LD_INT 1
33095: PPUSH
33096: LD_VAR 0 12
33100: PPUSH
33101: CALL_OW 12
33105: ARRAY
33106: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33107: LD_VAR 0 2
33111: PPUSH
33112: LD_VAR 0 5
33116: PPUSH
33117: CALL 33475 0 2
33121: NOT
33122: IFFALSE 33181
// repeat weapon := _weapon [ 1 ] ;
33124: LD_ADDR_VAR 0 5
33128: PUSH
33129: LD_VAR 0 10
33133: PUSH
33134: LD_INT 1
33136: ARRAY
33137: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33138: LD_ADDR_VAR 0 10
33142: PUSH
33143: LD_VAR 0 10
33147: PPUSH
33148: LD_INT 1
33150: PPUSH
33151: CALL_OW 3
33155: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33156: LD_VAR 0 2
33160: PPUSH
33161: LD_VAR 0 5
33165: PPUSH
33166: CALL 33475 0 2
33170: PUSH
33171: LD_VAR 0 10
33175: PUSH
33176: EMPTY
33177: EQUAL
33178: OR
33179: IFFALSE 33124
// result := [ ] ;
33181: LD_ADDR_VAR 0 6
33185: PUSH
33186: EMPTY
33187: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33188: LD_VAR 0 1
33192: PPUSH
33193: LD_VAR 0 2
33197: PPUSH
33198: LD_VAR 0 3
33202: PPUSH
33203: LD_VAR 0 4
33207: PPUSH
33208: LD_VAR 0 5
33212: PPUSH
33213: CALL_OW 448
33217: IFFALSE 33250
// result := [ chassis , engine , control , weapon ] ;
33219: LD_ADDR_VAR 0 6
33223: PUSH
33224: LD_VAR 0 2
33228: PUSH
33229: LD_VAR 0 3
33233: PUSH
33234: LD_VAR 0 4
33238: PUSH
33239: LD_VAR 0 5
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: ST_TO_ADDR
// end ;
33250: LD_VAR 0 6
33254: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33255: LD_INT 0
33257: PPUSH
// if not chassis or not engine then
33258: LD_VAR 0 1
33262: NOT
33263: PUSH
33264: LD_VAR 0 2
33268: NOT
33269: OR
33270: IFFALSE 33274
// exit ;
33272: GO 33470
// case engine of engine_solar :
33274: LD_VAR 0 2
33278: PUSH
33279: LD_INT 2
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33325
33287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: LD_INT 11
33295: PUSH
33296: LD_INT 12
33298: PUSH
33299: LD_INT 13
33301: PUSH
33302: LD_INT 14
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: ST_TO_ADDR
33323: GO 33454
33325: LD_INT 1
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33333
33331: GO 33395
33333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33334: LD_ADDR_VAR 0 3
33338: PUSH
33339: LD_INT 11
33341: PUSH
33342: LD_INT 12
33344: PUSH
33345: LD_INT 13
33347: PUSH
33348: LD_INT 14
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: LD_INT 5
33365: PUSH
33366: LD_INT 21
33368: PUSH
33369: LD_INT 23
33371: PUSH
33372: LD_INT 22
33374: PUSH
33375: LD_INT 24
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
33393: GO 33454
33395: LD_INT 3
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33453
33403: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 13
33411: PUSH
33412: LD_INT 14
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: LD_INT 4
33423: PUSH
33424: LD_INT 5
33426: PUSH
33427: LD_INT 21
33429: PUSH
33430: LD_INT 22
33432: PUSH
33433: LD_INT 23
33435: PUSH
33436: LD_INT 24
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: ST_TO_ADDR
33451: GO 33454
33453: POP
// result := ( chassis in result ) ;
33454: LD_ADDR_VAR 0 3
33458: PUSH
33459: LD_VAR 0 1
33463: PUSH
33464: LD_VAR 0 3
33468: IN
33469: ST_TO_ADDR
// end ;
33470: LD_VAR 0 3
33474: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33475: LD_INT 0
33477: PPUSH
// if not chassis or not weapon then
33478: LD_VAR 0 1
33482: NOT
33483: PUSH
33484: LD_VAR 0 2
33488: NOT
33489: OR
33490: IFFALSE 33494
// exit ;
33492: GO 34554
// case weapon of us_machine_gun :
33494: LD_VAR 0 2
33498: PUSH
33499: LD_INT 2
33501: DOUBLE
33502: EQUAL
33503: IFTRUE 33507
33505: GO 33537
33507: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33508: LD_ADDR_VAR 0 3
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 4
33524: PUSH
33525: LD_INT 5
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: ST_TO_ADDR
33535: GO 34538
33537: LD_INT 3
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33545
33543: GO 33575
33545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33546: LD_ADDR_VAR 0 3
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 3
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
33573: GO 34538
33575: LD_INT 11
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33583
33581: GO 33613
33583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 4
33600: PUSH
33601: LD_INT 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
33611: GO 34538
33613: LD_INT 4
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33647
33621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33622: LD_ADDR_VAR 0 3
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: LD_INT 5
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: ST_TO_ADDR
33645: GO 34538
33647: LD_INT 5
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 33681
33655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
33679: GO 34538
33681: LD_INT 9
33683: DOUBLE
33684: EQUAL
33685: IFTRUE 33689
33687: GO 33715
33689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33690: LD_ADDR_VAR 0 3
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: LD_INT 4
33703: PUSH
33704: LD_INT 5
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
33713: GO 34538
33715: LD_INT 7
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33749
33723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33724: LD_ADDR_VAR 0 3
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: LD_INT 4
33737: PUSH
33738: LD_INT 5
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
33747: GO 34538
33749: LD_INT 12
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33783
33757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 3
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: LD_INT 5
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
33781: GO 34538
33783: LD_INT 13
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33817
33791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 4
33805: PUSH
33806: LD_INT 5
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
33815: GO 34538
33817: LD_INT 14
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33825
33823: GO 33843
33825: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33826: LD_ADDR_VAR 0 3
33830: PUSH
33831: LD_INT 4
33833: PUSH
33834: LD_INT 5
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: ST_TO_ADDR
33841: GO 34538
33843: LD_INT 6
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33851
33849: GO 33869
33851: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33852: LD_ADDR_VAR 0 3
33856: PUSH
33857: LD_INT 4
33859: PUSH
33860: LD_INT 5
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: ST_TO_ADDR
33867: GO 34538
33869: LD_INT 10
33871: DOUBLE
33872: EQUAL
33873: IFTRUE 33877
33875: GO 33895
33877: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_INT 4
33885: PUSH
33886: LD_INT 5
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: ST_TO_ADDR
33893: GO 34538
33895: LD_INT 22
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 33929
33903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33904: LD_ADDR_VAR 0 3
33908: PUSH
33909: LD_INT 11
33911: PUSH
33912: LD_INT 12
33914: PUSH
33915: LD_INT 13
33917: PUSH
33918: LD_INT 14
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 34538
33929: LD_INT 23
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33963
33937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33938: LD_ADDR_VAR 0 3
33942: PUSH
33943: LD_INT 11
33945: PUSH
33946: LD_INT 12
33948: PUSH
33949: LD_INT 13
33951: PUSH
33952: LD_INT 14
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
33961: GO 34538
33963: LD_INT 24
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 33997
33971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_INT 11
33979: PUSH
33980: LD_INT 12
33982: PUSH
33983: LD_INT 13
33985: PUSH
33986: LD_INT 14
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: ST_TO_ADDR
33995: GO 34538
33997: LD_INT 30
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34005
34003: GO 34031
34005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34006: LD_ADDR_VAR 0 3
34010: PUSH
34011: LD_INT 11
34013: PUSH
34014: LD_INT 12
34016: PUSH
34017: LD_INT 13
34019: PUSH
34020: LD_INT 14
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
34029: GO 34538
34031: LD_INT 25
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34039
34037: GO 34057
34039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: LD_INT 13
34047: PUSH
34048: LD_INT 14
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: ST_TO_ADDR
34055: GO 34538
34057: LD_INT 27
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34083
34065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 13
34073: PUSH
34074: LD_INT 14
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: ST_TO_ADDR
34081: GO 34538
34083: LD_INT 92
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34117
34091: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34092: LD_ADDR_VAR 0 3
34096: PUSH
34097: LD_INT 11
34099: PUSH
34100: LD_INT 12
34102: PUSH
34103: LD_INT 13
34105: PUSH
34106: LD_INT 14
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34538
34117: LD_INT 28
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34143
34125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 13
34133: PUSH
34134: LD_INT 14
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: ST_TO_ADDR
34141: GO 34538
34143: LD_INT 29
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34169
34151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 13
34159: PUSH
34160: LD_INT 14
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: ST_TO_ADDR
34167: GO 34538
34169: LD_INT 31
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34195
34177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_INT 13
34185: PUSH
34186: LD_INT 14
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: ST_TO_ADDR
34193: GO 34538
34195: LD_INT 26
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34203
34201: GO 34221
34203: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: LD_INT 13
34211: PUSH
34212: LD_INT 14
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: ST_TO_ADDR
34219: GO 34538
34221: LD_INT 42
34223: DOUBLE
34224: EQUAL
34225: IFTRUE 34229
34227: GO 34255
34229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34230: LD_ADDR_VAR 0 3
34234: PUSH
34235: LD_INT 21
34237: PUSH
34238: LD_INT 22
34240: PUSH
34241: LD_INT 23
34243: PUSH
34244: LD_INT 24
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
34253: GO 34538
34255: LD_INT 43
34257: DOUBLE
34258: EQUAL
34259: IFTRUE 34263
34261: GO 34289
34263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34264: LD_ADDR_VAR 0 3
34268: PUSH
34269: LD_INT 21
34271: PUSH
34272: LD_INT 22
34274: PUSH
34275: LD_INT 23
34277: PUSH
34278: LD_INT 24
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
34287: GO 34538
34289: LD_INT 44
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34323
34297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: LD_INT 21
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_INT 23
34311: PUSH
34312: LD_INT 24
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: ST_TO_ADDR
34321: GO 34538
34323: LD_INT 45
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34331
34329: GO 34357
34331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 21
34339: PUSH
34340: LD_INT 22
34342: PUSH
34343: LD_INT 23
34345: PUSH
34346: LD_INT 24
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
34355: GO 34538
34357: LD_INT 49
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34391
34365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_INT 21
34373: PUSH
34374: LD_INT 22
34376: PUSH
34377: LD_INT 23
34379: PUSH
34380: LD_INT 24
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
34389: GO 34538
34391: LD_INT 51
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34425
34399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 21
34407: PUSH
34408: LD_INT 22
34410: PUSH
34411: LD_INT 23
34413: PUSH
34414: LD_INT 24
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
34423: GO 34538
34425: LD_INT 52
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34433
34431: GO 34459
34433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34434: LD_ADDR_VAR 0 3
34438: PUSH
34439: LD_INT 21
34441: PUSH
34442: LD_INT 22
34444: PUSH
34445: LD_INT 23
34447: PUSH
34448: LD_INT 24
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
34457: GO 34538
34459: LD_INT 53
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34485
34467: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34468: LD_ADDR_VAR 0 3
34472: PUSH
34473: LD_INT 23
34475: PUSH
34476: LD_INT 24
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: ST_TO_ADDR
34483: GO 34538
34485: LD_INT 46
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34511
34493: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34494: LD_ADDR_VAR 0 3
34498: PUSH
34499: LD_INT 23
34501: PUSH
34502: LD_INT 24
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 34538
34511: LD_INT 47
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34537
34519: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34520: LD_ADDR_VAR 0 3
34524: PUSH
34525: LD_INT 23
34527: PUSH
34528: LD_INT 24
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: ST_TO_ADDR
34535: GO 34538
34537: POP
// result := ( chassis in result ) ;
34538: LD_ADDR_VAR 0 3
34542: PUSH
34543: LD_VAR 0 1
34547: PUSH
34548: LD_VAR 0 3
34552: IN
34553: ST_TO_ADDR
// end ;
34554: LD_VAR 0 3
34558: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
// result := array ;
34568: LD_ADDR_VAR 0 5
34572: PUSH
34573: LD_VAR 0 1
34577: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34578: LD_VAR 0 1
34582: NOT
34583: PUSH
34584: LD_VAR 0 2
34588: NOT
34589: OR
34590: PUSH
34591: LD_VAR 0 3
34595: NOT
34596: OR
34597: PUSH
34598: LD_VAR 0 2
34602: PUSH
34603: LD_VAR 0 1
34607: GREATER
34608: OR
34609: PUSH
34610: LD_VAR 0 3
34614: PUSH
34615: LD_VAR 0 1
34619: GREATER
34620: OR
34621: IFFALSE 34625
// exit ;
34623: GO 34921
// if direction then
34625: LD_VAR 0 4
34629: IFFALSE 34693
// begin d := 1 ;
34631: LD_ADDR_VAR 0 9
34635: PUSH
34636: LD_INT 1
34638: ST_TO_ADDR
// if i_from > i_to then
34639: LD_VAR 0 2
34643: PUSH
34644: LD_VAR 0 3
34648: GREATER
34649: IFFALSE 34675
// length := ( array - i_from ) + i_to else
34651: LD_ADDR_VAR 0 11
34655: PUSH
34656: LD_VAR 0 1
34660: PUSH
34661: LD_VAR 0 2
34665: MINUS
34666: PUSH
34667: LD_VAR 0 3
34671: PLUS
34672: ST_TO_ADDR
34673: GO 34691
// length := i_to - i_from ;
34675: LD_ADDR_VAR 0 11
34679: PUSH
34680: LD_VAR 0 3
34684: PUSH
34685: LD_VAR 0 2
34689: MINUS
34690: ST_TO_ADDR
// end else
34691: GO 34754
// begin d := - 1 ;
34693: LD_ADDR_VAR 0 9
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: ST_TO_ADDR
// if i_from > i_to then
34702: LD_VAR 0 2
34706: PUSH
34707: LD_VAR 0 3
34711: GREATER
34712: IFFALSE 34732
// length := i_from - i_to else
34714: LD_ADDR_VAR 0 11
34718: PUSH
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 3
34728: MINUS
34729: ST_TO_ADDR
34730: GO 34754
// length := ( array - i_to ) + i_from ;
34732: LD_ADDR_VAR 0 11
34736: PUSH
34737: LD_VAR 0 1
34741: PUSH
34742: LD_VAR 0 3
34746: MINUS
34747: PUSH
34748: LD_VAR 0 2
34752: PLUS
34753: ST_TO_ADDR
// end ; if not length then
34754: LD_VAR 0 11
34758: NOT
34759: IFFALSE 34763
// exit ;
34761: GO 34921
// tmp := array ;
34763: LD_ADDR_VAR 0 10
34767: PUSH
34768: LD_VAR 0 1
34772: ST_TO_ADDR
// for i = 1 to length do
34773: LD_ADDR_VAR 0 6
34777: PUSH
34778: DOUBLE
34779: LD_INT 1
34781: DEC
34782: ST_TO_ADDR
34783: LD_VAR 0 11
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34909
// begin for j = 1 to array do
34791: LD_ADDR_VAR 0 7
34795: PUSH
34796: DOUBLE
34797: LD_INT 1
34799: DEC
34800: ST_TO_ADDR
34801: LD_VAR 0 1
34805: PUSH
34806: FOR_TO
34807: IFFALSE 34895
// begin k := j + d ;
34809: LD_ADDR_VAR 0 8
34813: PUSH
34814: LD_VAR 0 7
34818: PUSH
34819: LD_VAR 0 9
34823: PLUS
34824: ST_TO_ADDR
// if k > array then
34825: LD_VAR 0 8
34829: PUSH
34830: LD_VAR 0 1
34834: GREATER
34835: IFFALSE 34845
// k := 1 ;
34837: LD_ADDR_VAR 0 8
34841: PUSH
34842: LD_INT 1
34844: ST_TO_ADDR
// if not k then
34845: LD_VAR 0 8
34849: NOT
34850: IFFALSE 34862
// k := array ;
34852: LD_ADDR_VAR 0 8
34856: PUSH
34857: LD_VAR 0 1
34861: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34862: LD_ADDR_VAR 0 10
34866: PUSH
34867: LD_VAR 0 10
34871: PPUSH
34872: LD_VAR 0 8
34876: PPUSH
34877: LD_VAR 0 1
34881: PUSH
34882: LD_VAR 0 7
34886: ARRAY
34887: PPUSH
34888: CALL_OW 1
34892: ST_TO_ADDR
// end ;
34893: GO 34806
34895: POP
34896: POP
// array := tmp ;
34897: LD_ADDR_VAR 0 1
34901: PUSH
34902: LD_VAR 0 10
34906: ST_TO_ADDR
// end ;
34907: GO 34788
34909: POP
34910: POP
// result := array ;
34911: LD_ADDR_VAR 0 5
34915: PUSH
34916: LD_VAR 0 1
34920: ST_TO_ADDR
// end ;
34921: LD_VAR 0 5
34925: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34926: LD_INT 0
34928: PPUSH
34929: PPUSH
// result := 0 ;
34930: LD_ADDR_VAR 0 3
34934: PUSH
34935: LD_INT 0
34937: ST_TO_ADDR
// if not array or not value in array then
34938: LD_VAR 0 1
34942: NOT
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 1
34953: IN
34954: NOT
34955: OR
34956: IFFALSE 34960
// exit ;
34958: GO 35014
// for i = 1 to array do
34960: LD_ADDR_VAR 0 4
34964: PUSH
34965: DOUBLE
34966: LD_INT 1
34968: DEC
34969: ST_TO_ADDR
34970: LD_VAR 0 1
34974: PUSH
34975: FOR_TO
34976: IFFALSE 35012
// if value = array [ i ] then
34978: LD_VAR 0 2
34982: PUSH
34983: LD_VAR 0 1
34987: PUSH
34988: LD_VAR 0 4
34992: ARRAY
34993: EQUAL
34994: IFFALSE 35010
// begin result := i ;
34996: LD_ADDR_VAR 0 3
35000: PUSH
35001: LD_VAR 0 4
35005: ST_TO_ADDR
// exit ;
35006: POP
35007: POP
35008: GO 35014
// end ;
35010: GO 34975
35012: POP
35013: POP
// end ;
35014: LD_VAR 0 3
35018: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35019: LD_INT 0
35021: PPUSH
// vc_chassis := chassis ;
35022: LD_ADDR_OWVAR 37
35026: PUSH
35027: LD_VAR 0 1
35031: ST_TO_ADDR
// vc_engine := engine ;
35032: LD_ADDR_OWVAR 39
35036: PUSH
35037: LD_VAR 0 2
35041: ST_TO_ADDR
// vc_control := control ;
35042: LD_ADDR_OWVAR 38
35046: PUSH
35047: LD_VAR 0 3
35051: ST_TO_ADDR
// vc_weapon := weapon ;
35052: LD_ADDR_OWVAR 40
35056: PUSH
35057: LD_VAR 0 4
35061: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35062: LD_ADDR_OWVAR 41
35066: PUSH
35067: LD_VAR 0 5
35071: ST_TO_ADDR
// end ;
35072: LD_VAR 0 6
35076: RET
// export function WantPlant ( unit ) ; var task ; begin
35077: LD_INT 0
35079: PPUSH
35080: PPUSH
// result := false ;
35081: LD_ADDR_VAR 0 2
35085: PUSH
35086: LD_INT 0
35088: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 437
35103: ST_TO_ADDR
// if task then
35104: LD_VAR 0 3
35108: IFFALSE 35136
// if task [ 1 ] [ 1 ] = p then
35110: LD_VAR 0 3
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: PUSH
35119: LD_INT 1
35121: ARRAY
35122: PUSH
35123: LD_STRING p
35125: EQUAL
35126: IFFALSE 35136
// result := true ;
35128: LD_ADDR_VAR 0 2
35132: PUSH
35133: LD_INT 1
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 2
35140: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
// if pos < 1 then
35147: LD_VAR 0 2
35151: PUSH
35152: LD_INT 1
35154: LESS
35155: IFFALSE 35159
// exit ;
35157: GO 35462
// if pos = 1 then
35159: LD_VAR 0 2
35163: PUSH
35164: LD_INT 1
35166: EQUAL
35167: IFFALSE 35200
// result := Replace ( arr , pos [ 1 ] , value ) else
35169: LD_ADDR_VAR 0 4
35173: PUSH
35174: LD_VAR 0 1
35178: PPUSH
35179: LD_VAR 0 2
35183: PUSH
35184: LD_INT 1
35186: ARRAY
35187: PPUSH
35188: LD_VAR 0 3
35192: PPUSH
35193: CALL_OW 1
35197: ST_TO_ADDR
35198: GO 35462
// begin tmp := arr ;
35200: LD_ADDR_VAR 0 6
35204: PUSH
35205: LD_VAR 0 1
35209: ST_TO_ADDR
// s_arr := [ tmp ] ;
35210: LD_ADDR_VAR 0 7
35214: PUSH
35215: LD_VAR 0 6
35219: PUSH
35220: EMPTY
35221: LIST
35222: ST_TO_ADDR
// for i = 1 to pos - 1 do
35223: LD_ADDR_VAR 0 5
35227: PUSH
35228: DOUBLE
35229: LD_INT 1
35231: DEC
35232: ST_TO_ADDR
35233: LD_VAR 0 2
35237: PUSH
35238: LD_INT 1
35240: MINUS
35241: PUSH
35242: FOR_TO
35243: IFFALSE 35288
// begin tmp := tmp [ pos [ i ] ] ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_VAR 0 6
35254: PUSH
35255: LD_VAR 0 2
35259: PUSH
35260: LD_VAR 0 5
35264: ARRAY
35265: ARRAY
35266: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35267: LD_ADDR_VAR 0 7
35271: PUSH
35272: LD_VAR 0 7
35276: PUSH
35277: LD_VAR 0 6
35281: PUSH
35282: EMPTY
35283: LIST
35284: ADD
35285: ST_TO_ADDR
// end ;
35286: GO 35242
35288: POP
35289: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35290: LD_ADDR_VAR 0 6
35294: PUSH
35295: LD_VAR 0 6
35299: PPUSH
35300: LD_VAR 0 2
35304: PUSH
35305: LD_VAR 0 2
35309: ARRAY
35310: PPUSH
35311: LD_VAR 0 3
35315: PPUSH
35316: CALL_OW 1
35320: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35321: LD_ADDR_VAR 0 7
35325: PUSH
35326: LD_VAR 0 7
35330: PPUSH
35331: LD_VAR 0 7
35335: PPUSH
35336: LD_VAR 0 6
35340: PPUSH
35341: CALL_OW 1
35345: ST_TO_ADDR
// for i = s_arr downto 2 do
35346: LD_ADDR_VAR 0 5
35350: PUSH
35351: DOUBLE
35352: LD_VAR 0 7
35356: INC
35357: ST_TO_ADDR
35358: LD_INT 2
35360: PUSH
35361: FOR_DOWNTO
35362: IFFALSE 35446
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35364: LD_ADDR_VAR 0 6
35368: PUSH
35369: LD_VAR 0 7
35373: PUSH
35374: LD_VAR 0 5
35378: PUSH
35379: LD_INT 1
35381: MINUS
35382: ARRAY
35383: PPUSH
35384: LD_VAR 0 2
35388: PUSH
35389: LD_VAR 0 5
35393: PUSH
35394: LD_INT 1
35396: MINUS
35397: ARRAY
35398: PPUSH
35399: LD_VAR 0 7
35403: PUSH
35404: LD_VAR 0 5
35408: ARRAY
35409: PPUSH
35410: CALL_OW 1
35414: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35415: LD_ADDR_VAR 0 7
35419: PUSH
35420: LD_VAR 0 7
35424: PPUSH
35425: LD_VAR 0 5
35429: PUSH
35430: LD_INT 1
35432: MINUS
35433: PPUSH
35434: LD_VAR 0 6
35438: PPUSH
35439: CALL_OW 1
35443: ST_TO_ADDR
// end ;
35444: GO 35361
35446: POP
35447: POP
// result := s_arr [ 1 ] ;
35448: LD_ADDR_VAR 0 4
35452: PUSH
35453: LD_VAR 0 7
35457: PUSH
35458: LD_INT 1
35460: ARRAY
35461: ST_TO_ADDR
// end ; end ;
35462: LD_VAR 0 4
35466: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
// if not list then
35471: LD_VAR 0 1
35475: NOT
35476: IFFALSE 35480
// exit ;
35478: GO 35571
// i := list [ pos1 ] ;
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: LD_VAR 0 1
35489: PUSH
35490: LD_VAR 0 2
35494: ARRAY
35495: ST_TO_ADDR
// if not i then
35496: LD_VAR 0 5
35500: NOT
35501: IFFALSE 35505
// exit ;
35503: GO 35571
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35505: LD_ADDR_VAR 0 1
35509: PUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: LD_VAR 0 1
35524: PUSH
35525: LD_VAR 0 3
35529: ARRAY
35530: PPUSH
35531: CALL_OW 1
35535: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35536: LD_ADDR_VAR 0 1
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: LD_VAR 0 3
35550: PPUSH
35551: LD_VAR 0 5
35555: PPUSH
35556: CALL_OW 1
35560: ST_TO_ADDR
// result := list ;
35561: LD_ADDR_VAR 0 4
35565: PUSH
35566: LD_VAR 0 1
35570: ST_TO_ADDR
// end ;
35571: LD_VAR 0 4
35575: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35576: LD_INT 0
35578: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35579: LD_ADDR_VAR 0 5
35583: PUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 250
35593: PPUSH
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL_OW 251
35603: PPUSH
35604: LD_VAR 0 2
35608: PPUSH
35609: LD_VAR 0 3
35613: PPUSH
35614: LD_VAR 0 4
35618: PPUSH
35619: CALL 35629 0 5
35623: ST_TO_ADDR
// end ;
35624: LD_VAR 0 5
35628: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35629: LD_INT 0
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
// if not list then
35635: LD_VAR 0 3
35639: NOT
35640: IFFALSE 35644
// exit ;
35642: GO 36032
// result := [ ] ;
35644: LD_ADDR_VAR 0 6
35648: PUSH
35649: EMPTY
35650: ST_TO_ADDR
// for i in list do
35651: LD_ADDR_VAR 0 7
35655: PUSH
35656: LD_VAR 0 3
35660: PUSH
35661: FOR_IN
35662: IFFALSE 35864
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35664: LD_ADDR_VAR 0 9
35668: PUSH
35669: LD_VAR 0 7
35673: PPUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: LD_VAR 0 2
35683: PPUSH
35684: CALL_OW 297
35688: ST_TO_ADDR
// if not result then
35689: LD_VAR 0 6
35693: NOT
35694: IFFALSE 35720
// result := [ [ i , tmp ] ] else
35696: LD_ADDR_VAR 0 6
35700: PUSH
35701: LD_VAR 0 7
35705: PUSH
35706: LD_VAR 0 9
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: ST_TO_ADDR
35718: GO 35862
// begin if result [ result ] [ 2 ] < tmp then
35720: LD_VAR 0 6
35724: PUSH
35725: LD_VAR 0 6
35729: ARRAY
35730: PUSH
35731: LD_INT 2
35733: ARRAY
35734: PUSH
35735: LD_VAR 0 9
35739: LESS
35740: IFFALSE 35782
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35742: LD_ADDR_VAR 0 6
35746: PUSH
35747: LD_VAR 0 6
35751: PPUSH
35752: LD_VAR 0 6
35756: PUSH
35757: LD_INT 1
35759: PLUS
35760: PPUSH
35761: LD_VAR 0 7
35765: PUSH
35766: LD_VAR 0 9
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PPUSH
35775: CALL_OW 2
35779: ST_TO_ADDR
35780: GO 35862
// for j = 1 to result do
35782: LD_ADDR_VAR 0 8
35786: PUSH
35787: DOUBLE
35788: LD_INT 1
35790: DEC
35791: ST_TO_ADDR
35792: LD_VAR 0 6
35796: PUSH
35797: FOR_TO
35798: IFFALSE 35860
// begin if tmp < result [ j ] [ 2 ] then
35800: LD_VAR 0 9
35804: PUSH
35805: LD_VAR 0 6
35809: PUSH
35810: LD_VAR 0 8
35814: ARRAY
35815: PUSH
35816: LD_INT 2
35818: ARRAY
35819: LESS
35820: IFFALSE 35858
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35822: LD_ADDR_VAR 0 6
35826: PUSH
35827: LD_VAR 0 6
35831: PPUSH
35832: LD_VAR 0 8
35836: PPUSH
35837: LD_VAR 0 7
35841: PUSH
35842: LD_VAR 0 9
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PPUSH
35851: CALL_OW 2
35855: ST_TO_ADDR
// break ;
35856: GO 35860
// end ; end ;
35858: GO 35797
35860: POP
35861: POP
// end ; end ;
35862: GO 35661
35864: POP
35865: POP
// if result and not asc then
35866: LD_VAR 0 6
35870: PUSH
35871: LD_VAR 0 4
35875: NOT
35876: AND
35877: IFFALSE 35952
// begin tmp := result ;
35879: LD_ADDR_VAR 0 9
35883: PUSH
35884: LD_VAR 0 6
35888: ST_TO_ADDR
// for i = tmp downto 1 do
35889: LD_ADDR_VAR 0 7
35893: PUSH
35894: DOUBLE
35895: LD_VAR 0 9
35899: INC
35900: ST_TO_ADDR
35901: LD_INT 1
35903: PUSH
35904: FOR_DOWNTO
35905: IFFALSE 35950
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35907: LD_ADDR_VAR 0 6
35911: PUSH
35912: LD_VAR 0 6
35916: PPUSH
35917: LD_VAR 0 9
35921: PUSH
35922: LD_VAR 0 7
35926: MINUS
35927: PUSH
35928: LD_INT 1
35930: PLUS
35931: PPUSH
35932: LD_VAR 0 9
35936: PUSH
35937: LD_VAR 0 7
35941: ARRAY
35942: PPUSH
35943: CALL_OW 1
35947: ST_TO_ADDR
35948: GO 35904
35950: POP
35951: POP
// end ; tmp := [ ] ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: EMPTY
35958: ST_TO_ADDR
// if mode then
35959: LD_VAR 0 5
35963: IFFALSE 36032
// begin for i = 1 to result do
35965: LD_ADDR_VAR 0 7
35969: PUSH
35970: DOUBLE
35971: LD_INT 1
35973: DEC
35974: ST_TO_ADDR
35975: LD_VAR 0 6
35979: PUSH
35980: FOR_TO
35981: IFFALSE 36020
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_VAR 0 9
35992: PPUSH
35993: LD_VAR 0 7
35997: PPUSH
35998: LD_VAR 0 6
36002: PUSH
36003: LD_VAR 0 7
36007: ARRAY
36008: PUSH
36009: LD_INT 1
36011: ARRAY
36012: PPUSH
36013: CALL_OW 1
36017: ST_TO_ADDR
36018: GO 35980
36020: POP
36021: POP
// result := tmp ;
36022: LD_ADDR_VAR 0 6
36026: PUSH
36027: LD_VAR 0 9
36031: ST_TO_ADDR
// end ; end ;
36032: LD_VAR 0 6
36036: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36037: LD_INT 0
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// if not x or not y then
36067: LD_VAR 0 2
36071: NOT
36072: PUSH
36073: LD_VAR 0 3
36077: NOT
36078: OR
36079: IFFALSE 36083
// exit ;
36081: GO 37733
// if not range then
36083: LD_VAR 0 4
36087: NOT
36088: IFFALSE 36098
// range := 10 ;
36090: LD_ADDR_VAR 0 4
36094: PUSH
36095: LD_INT 10
36097: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36098: LD_ADDR_VAR 0 8
36102: PUSH
36103: LD_INT 81
36105: PUSH
36106: LD_VAR 0 1
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 92
36117: PUSH
36118: LD_VAR 0 2
36122: PUSH
36123: LD_VAR 0 3
36127: PUSH
36128: LD_VAR 0 4
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 3
36141: PUSH
36142: LD_INT 21
36144: PUSH
36145: LD_INT 3
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL_OW 69
36165: ST_TO_ADDR
// if not tmp then
36166: LD_VAR 0 8
36170: NOT
36171: IFFALSE 36175
// exit ;
36173: GO 37733
// for i in tmp do
36175: LD_ADDR_VAR 0 6
36179: PUSH
36180: LD_VAR 0 8
36184: PUSH
36185: FOR_IN
36186: IFFALSE 37708
// begin points := [ 0 , 0 , 0 ] ;
36188: LD_ADDR_VAR 0 9
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: ST_TO_ADDR
// bpoints := 1 ;
36207: LD_ADDR_VAR 0 10
36211: PUSH
36212: LD_INT 1
36214: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36215: LD_VAR 0 6
36219: PPUSH
36220: CALL_OW 247
36224: PUSH
36225: LD_INT 1
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36811
36233: POP
// begin if GetClass ( i ) = 1 then
36234: LD_VAR 0 6
36238: PPUSH
36239: CALL_OW 257
36243: PUSH
36244: LD_INT 1
36246: EQUAL
36247: IFFALSE 36268
// points := [ 10 , 5 , 3 ] ;
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_INT 10
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 257
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: LD_INT 3
36283: PUSH
36284: LD_INT 4
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: IFFALSE 36313
// points := [ 3 , 2 , 1 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 3
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 257
36322: PUSH
36323: LD_INT 5
36325: EQUAL
36326: IFFALSE 36347
// points := [ 130 , 5 , 2 ] ;
36328: LD_ADDR_VAR 0 9
36332: PUSH
36333: LD_INT 130
36335: PUSH
36336: LD_INT 5
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36347: LD_VAR 0 6
36351: PPUSH
36352: CALL_OW 257
36356: PUSH
36357: LD_INT 8
36359: EQUAL
36360: IFFALSE 36381
// points := [ 35 , 35 , 30 ] ;
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_INT 35
36369: PUSH
36370: LD_INT 35
36372: PUSH
36373: LD_INT 30
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36381: LD_VAR 0 6
36385: PPUSH
36386: CALL_OW 257
36390: PUSH
36391: LD_INT 9
36393: EQUAL
36394: IFFALSE 36415
// points := [ 20 , 55 , 40 ] ;
36396: LD_ADDR_VAR 0 9
36400: PUSH
36401: LD_INT 20
36403: PUSH
36404: LD_INT 55
36406: PUSH
36407: LD_INT 40
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36415: LD_VAR 0 6
36419: PPUSH
36420: CALL_OW 257
36424: PUSH
36425: LD_INT 12
36427: PUSH
36428: LD_INT 16
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: IN
36435: IFFALSE 36456
// points := [ 5 , 3 , 2 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 5
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 257
36465: PUSH
36466: LD_INT 17
36468: EQUAL
36469: IFFALSE 36490
// points := [ 100 , 50 , 75 ] ;
36471: LD_ADDR_VAR 0 9
36475: PUSH
36476: LD_INT 100
36478: PUSH
36479: LD_INT 50
36481: PUSH
36482: LD_INT 75
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36490: LD_VAR 0 6
36494: PPUSH
36495: CALL_OW 257
36499: PUSH
36500: LD_INT 15
36502: EQUAL
36503: IFFALSE 36524
// points := [ 10 , 5 , 3 ] ;
36505: LD_ADDR_VAR 0 9
36509: PUSH
36510: LD_INT 10
36512: PUSH
36513: LD_INT 5
36515: PUSH
36516: LD_INT 3
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36524: LD_VAR 0 6
36528: PPUSH
36529: CALL_OW 257
36533: PUSH
36534: LD_INT 14
36536: EQUAL
36537: IFFALSE 36558
// points := [ 10 , 0 , 0 ] ;
36539: LD_ADDR_VAR 0 9
36543: PUSH
36544: LD_INT 10
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36558: LD_VAR 0 6
36562: PPUSH
36563: CALL_OW 257
36567: PUSH
36568: LD_INT 11
36570: EQUAL
36571: IFFALSE 36592
// points := [ 30 , 10 , 5 ] ;
36573: LD_ADDR_VAR 0 9
36577: PUSH
36578: LD_INT 30
36580: PUSH
36581: LD_INT 10
36583: PUSH
36584: LD_INT 5
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36592: LD_VAR 0 1
36596: PPUSH
36597: LD_INT 5
36599: PPUSH
36600: CALL_OW 321
36604: PUSH
36605: LD_INT 2
36607: EQUAL
36608: IFFALSE 36625
// bpoints := bpoints * 1.8 ;
36610: LD_ADDR_VAR 0 10
36614: PUSH
36615: LD_VAR 0 10
36619: PUSH
36620: LD_REAL  1.80000000000000E+0000
36623: MUL
36624: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36625: LD_VAR 0 6
36629: PPUSH
36630: CALL_OW 257
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 3
36643: PUSH
36644: LD_INT 4
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: IN
36653: PUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: LD_INT 51
36661: PPUSH
36662: CALL_OW 321
36666: PUSH
36667: LD_INT 2
36669: EQUAL
36670: AND
36671: IFFALSE 36688
// bpoints := bpoints * 1.2 ;
36673: LD_ADDR_VAR 0 10
36677: PUSH
36678: LD_VAR 0 10
36682: PUSH
36683: LD_REAL  1.20000000000000E+0000
36686: MUL
36687: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36688: LD_VAR 0 6
36692: PPUSH
36693: CALL_OW 257
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: LD_INT 7
36703: PUSH
36704: LD_INT 9
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: IN
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_INT 52
36720: PPUSH
36721: CALL_OW 321
36725: PUSH
36726: LD_INT 2
36728: EQUAL
36729: AND
36730: IFFALSE 36747
// bpoints := bpoints * 1.5 ;
36732: LD_ADDR_VAR 0 10
36736: PUSH
36737: LD_VAR 0 10
36741: PUSH
36742: LD_REAL  1.50000000000000E+0000
36745: MUL
36746: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36747: LD_VAR 0 1
36751: PPUSH
36752: LD_INT 66
36754: PPUSH
36755: CALL_OW 321
36759: PUSH
36760: LD_INT 2
36762: EQUAL
36763: IFFALSE 36780
// bpoints := bpoints * 1.1 ;
36765: LD_ADDR_VAR 0 10
36769: PUSH
36770: LD_VAR 0 10
36774: PUSH
36775: LD_REAL  1.10000000000000E+0000
36778: MUL
36779: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36780: LD_ADDR_VAR 0 10
36784: PUSH
36785: LD_VAR 0 10
36789: PUSH
36790: LD_VAR 0 6
36794: PPUSH
36795: LD_INT 1
36797: PPUSH
36798: CALL_OW 259
36802: PUSH
36803: LD_REAL  1.15000000000000E+0000
36806: MUL
36807: MUL
36808: ST_TO_ADDR
// end ; unit_vehicle :
36809: GO 37637
36811: LD_INT 2
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 37625
36819: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36820: LD_VAR 0 6
36824: PPUSH
36825: CALL_OW 264
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 42
36835: PUSH
36836: LD_INT 24
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: IN
36844: IFFALSE 36865
// points := [ 25 , 5 , 3 ] ;
36846: LD_ADDR_VAR 0 9
36850: PUSH
36851: LD_INT 25
36853: PUSH
36854: LD_INT 5
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36865: LD_VAR 0 6
36869: PPUSH
36870: CALL_OW 264
36874: PUSH
36875: LD_INT 4
36877: PUSH
36878: LD_INT 43
36880: PUSH
36881: LD_INT 25
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: IN
36889: IFFALSE 36910
// points := [ 40 , 15 , 5 ] ;
36891: LD_ADDR_VAR 0 9
36895: PUSH
36896: LD_INT 40
36898: PUSH
36899: LD_INT 15
36901: PUSH
36902: LD_INT 5
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36910: LD_VAR 0 6
36914: PPUSH
36915: CALL_OW 264
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 23
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: IN
36930: IFFALSE 36951
// points := [ 7 , 25 , 8 ] ;
36932: LD_ADDR_VAR 0 9
36936: PUSH
36937: LD_INT 7
36939: PUSH
36940: LD_INT 25
36942: PUSH
36943: LD_INT 8
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36951: LD_VAR 0 6
36955: PPUSH
36956: CALL_OW 264
36960: PUSH
36961: LD_INT 5
36963: PUSH
36964: LD_INT 27
36966: PUSH
36967: LD_INT 44
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: IN
36975: IFFALSE 36996
// points := [ 14 , 50 , 16 ] ;
36977: LD_ADDR_VAR 0 9
36981: PUSH
36982: LD_INT 14
36984: PUSH
36985: LD_INT 50
36987: PUSH
36988: LD_INT 16
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36996: LD_VAR 0 6
37000: PPUSH
37001: CALL_OW 264
37005: PUSH
37006: LD_INT 6
37008: PUSH
37009: LD_INT 46
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: IN
37016: IFFALSE 37037
// points := [ 32 , 120 , 70 ] ;
37018: LD_ADDR_VAR 0 9
37022: PUSH
37023: LD_INT 32
37025: PUSH
37026: LD_INT 120
37028: PUSH
37029: LD_INT 70
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37037: LD_VAR 0 6
37041: PPUSH
37042: CALL_OW 264
37046: PUSH
37047: LD_INT 7
37049: PUSH
37050: LD_INT 28
37052: PUSH
37053: LD_INT 45
37055: PUSH
37056: LD_INT 92
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: IN
37065: IFFALSE 37086
// points := [ 35 , 20 , 45 ] ;
37067: LD_ADDR_VAR 0 9
37071: PUSH
37072: LD_INT 35
37074: PUSH
37075: LD_INT 20
37077: PUSH
37078: LD_INT 45
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37086: LD_VAR 0 6
37090: PPUSH
37091: CALL_OW 264
37095: PUSH
37096: LD_INT 47
37098: PUSH
37099: EMPTY
37100: LIST
37101: IN
37102: IFFALSE 37123
// points := [ 67 , 45 , 75 ] ;
37104: LD_ADDR_VAR 0 9
37108: PUSH
37109: LD_INT 67
37111: PUSH
37112: LD_INT 45
37114: PUSH
37115: LD_INT 75
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37123: LD_VAR 0 6
37127: PPUSH
37128: CALL_OW 264
37132: PUSH
37133: LD_INT 26
37135: PUSH
37136: EMPTY
37137: LIST
37138: IN
37139: IFFALSE 37160
// points := [ 120 , 30 , 80 ] ;
37141: LD_ADDR_VAR 0 9
37145: PUSH
37146: LD_INT 120
37148: PUSH
37149: LD_INT 30
37151: PUSH
37152: LD_INT 80
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37160: LD_VAR 0 6
37164: PPUSH
37165: CALL_OW 264
37169: PUSH
37170: LD_INT 22
37172: PUSH
37173: EMPTY
37174: LIST
37175: IN
37176: IFFALSE 37197
// points := [ 40 , 1 , 1 ] ;
37178: LD_ADDR_VAR 0 9
37182: PUSH
37183: LD_INT 40
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37197: LD_VAR 0 6
37201: PPUSH
37202: CALL_OW 264
37206: PUSH
37207: LD_INT 29
37209: PUSH
37210: EMPTY
37211: LIST
37212: IN
37213: IFFALSE 37234
// points := [ 70 , 200 , 400 ] ;
37215: LD_ADDR_VAR 0 9
37219: PUSH
37220: LD_INT 70
37222: PUSH
37223: LD_INT 200
37225: PUSH
37226: LD_INT 400
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37234: LD_VAR 0 6
37238: PPUSH
37239: CALL_OW 264
37243: PUSH
37244: LD_INT 14
37246: PUSH
37247: LD_INT 53
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: IN
37254: IFFALSE 37275
// points := [ 40 , 10 , 20 ] ;
37256: LD_ADDR_VAR 0 9
37260: PUSH
37261: LD_INT 40
37263: PUSH
37264: LD_INT 10
37266: PUSH
37267: LD_INT 20
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37275: LD_VAR 0 6
37279: PPUSH
37280: CALL_OW 264
37284: PUSH
37285: LD_INT 9
37287: PUSH
37288: EMPTY
37289: LIST
37290: IN
37291: IFFALSE 37312
// points := [ 5 , 70 , 20 ] ;
37293: LD_ADDR_VAR 0 9
37297: PUSH
37298: LD_INT 5
37300: PUSH
37301: LD_INT 70
37303: PUSH
37304: LD_INT 20
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37312: LD_VAR 0 6
37316: PPUSH
37317: CALL_OW 264
37321: PUSH
37322: LD_INT 10
37324: PUSH
37325: EMPTY
37326: LIST
37327: IN
37328: IFFALSE 37349
// points := [ 35 , 110 , 70 ] ;
37330: LD_ADDR_VAR 0 9
37334: PUSH
37335: LD_INT 35
37337: PUSH
37338: LD_INT 110
37340: PUSH
37341: LD_INT 70
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37349: LD_VAR 0 6
37353: PPUSH
37354: CALL_OW 265
37358: PUSH
37359: LD_INT 25
37361: EQUAL
37362: IFFALSE 37383
// points := [ 80 , 65 , 100 ] ;
37364: LD_ADDR_VAR 0 9
37368: PUSH
37369: LD_INT 80
37371: PUSH
37372: LD_INT 65
37374: PUSH
37375: LD_INT 100
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37383: LD_VAR 0 6
37387: PPUSH
37388: CALL_OW 263
37392: PUSH
37393: LD_INT 1
37395: EQUAL
37396: IFFALSE 37431
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37398: LD_ADDR_VAR 0 10
37402: PUSH
37403: LD_VAR 0 10
37407: PUSH
37408: LD_VAR 0 6
37412: PPUSH
37413: CALL_OW 311
37417: PPUSH
37418: LD_INT 3
37420: PPUSH
37421: CALL_OW 259
37425: PUSH
37426: LD_INT 4
37428: MUL
37429: MUL
37430: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37431: LD_VAR 0 6
37435: PPUSH
37436: CALL_OW 263
37440: PUSH
37441: LD_INT 2
37443: EQUAL
37444: IFFALSE 37495
// begin j := IsControledBy ( i ) ;
37446: LD_ADDR_VAR 0 7
37450: PUSH
37451: LD_VAR 0 6
37455: PPUSH
37456: CALL_OW 312
37460: ST_TO_ADDR
// if j then
37461: LD_VAR 0 7
37465: IFFALSE 37495
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37467: LD_ADDR_VAR 0 10
37471: PUSH
37472: LD_VAR 0 10
37476: PUSH
37477: LD_VAR 0 7
37481: PPUSH
37482: LD_INT 3
37484: PPUSH
37485: CALL_OW 259
37489: PUSH
37490: LD_INT 3
37492: MUL
37493: MUL
37494: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37495: LD_VAR 0 6
37499: PPUSH
37500: CALL_OW 264
37504: PUSH
37505: LD_INT 5
37507: PUSH
37508: LD_INT 6
37510: PUSH
37511: LD_INT 46
37513: PUSH
37514: LD_INT 44
37516: PUSH
37517: LD_INT 47
37519: PUSH
37520: LD_INT 45
37522: PUSH
37523: LD_INT 28
37525: PUSH
37526: LD_INT 7
37528: PUSH
37529: LD_INT 27
37531: PUSH
37532: LD_INT 29
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: IN
37547: PUSH
37548: LD_VAR 0 1
37552: PPUSH
37553: LD_INT 52
37555: PPUSH
37556: CALL_OW 321
37560: PUSH
37561: LD_INT 2
37563: EQUAL
37564: AND
37565: IFFALSE 37582
// bpoints := bpoints * 1.2 ;
37567: LD_ADDR_VAR 0 10
37571: PUSH
37572: LD_VAR 0 10
37576: PUSH
37577: LD_REAL  1.20000000000000E+0000
37580: MUL
37581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37582: LD_VAR 0 6
37586: PPUSH
37587: CALL_OW 264
37591: PUSH
37592: LD_INT 6
37594: PUSH
37595: LD_INT 46
37597: PUSH
37598: LD_INT 47
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: IN
37606: IFFALSE 37623
// bpoints := bpoints * 1.2 ;
37608: LD_ADDR_VAR 0 10
37612: PUSH
37613: LD_VAR 0 10
37617: PUSH
37618: LD_REAL  1.20000000000000E+0000
37621: MUL
37622: ST_TO_ADDR
// end ; unit_building :
37623: GO 37637
37625: LD_INT 3
37627: DOUBLE
37628: EQUAL
37629: IFTRUE 37633
37631: GO 37636
37633: POP
// ; end ;
37634: GO 37637
37636: POP
// for j = 1 to 3 do
37637: LD_ADDR_VAR 0 7
37641: PUSH
37642: DOUBLE
37643: LD_INT 1
37645: DEC
37646: ST_TO_ADDR
37647: LD_INT 3
37649: PUSH
37650: FOR_TO
37651: IFFALSE 37704
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37653: LD_ADDR_VAR 0 5
37657: PUSH
37658: LD_VAR 0 5
37662: PPUSH
37663: LD_VAR 0 7
37667: PPUSH
37668: LD_VAR 0 5
37672: PUSH
37673: LD_VAR 0 7
37677: ARRAY
37678: PUSH
37679: LD_VAR 0 9
37683: PUSH
37684: LD_VAR 0 7
37688: ARRAY
37689: PUSH
37690: LD_VAR 0 10
37694: MUL
37695: PLUS
37696: PPUSH
37697: CALL_OW 1
37701: ST_TO_ADDR
37702: GO 37650
37704: POP
37705: POP
// end ;
37706: GO 36185
37708: POP
37709: POP
// result := Replace ( result , 4 , tmp ) ;
37710: LD_ADDR_VAR 0 5
37714: PUSH
37715: LD_VAR 0 5
37719: PPUSH
37720: LD_INT 4
37722: PPUSH
37723: LD_VAR 0 8
37727: PPUSH
37728: CALL_OW 1
37732: ST_TO_ADDR
// end ;
37733: LD_VAR 0 5
37737: RET
// export function DangerAtRange ( unit , range ) ; begin
37738: LD_INT 0
37740: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: LD_VAR 0 1
37750: PPUSH
37751: CALL_OW 255
37755: PPUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 250
37765: PPUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 251
37775: PPUSH
37776: LD_VAR 0 2
37780: PPUSH
37781: CALL 36037 0 4
37785: ST_TO_ADDR
// end ;
37786: LD_VAR 0 3
37790: RET
// export function DangerInArea ( side , area ) ; begin
37791: LD_INT 0
37793: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37794: LD_ADDR_VAR 0 3
37798: PUSH
37799: LD_VAR 0 2
37803: PPUSH
37804: LD_INT 81
37806: PUSH
37807: LD_VAR 0 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PPUSH
37816: CALL_OW 70
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 3
37825: RET
// export function IsExtension ( b ) ; begin
37826: LD_INT 0
37828: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37829: LD_ADDR_VAR 0 2
37833: PUSH
37834: LD_VAR 0 1
37838: PUSH
37839: LD_INT 23
37841: PUSH
37842: LD_INT 20
37844: PUSH
37845: LD_INT 22
37847: PUSH
37848: LD_INT 17
37850: PUSH
37851: LD_INT 24
37853: PUSH
37854: LD_INT 21
37856: PUSH
37857: LD_INT 19
37859: PUSH
37860: LD_INT 16
37862: PUSH
37863: LD_INT 25
37865: PUSH
37866: LD_INT 18
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: IN
37881: ST_TO_ADDR
// end ;
37882: LD_VAR 0 2
37886: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
37891: PPUSH
// result := [ ] ;
37892: LD_ADDR_VAR 0 4
37896: PUSH
37897: EMPTY
37898: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37899: LD_ADDR_VAR 0 5
37903: PUSH
37904: LD_VAR 0 2
37908: PPUSH
37909: LD_INT 21
37911: PUSH
37912: LD_INT 3
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PPUSH
37919: CALL_OW 70
37923: ST_TO_ADDR
// if not tmp then
37924: LD_VAR 0 5
37928: NOT
37929: IFFALSE 37933
// exit ;
37931: GO 37997
// if checkLink then
37933: LD_VAR 0 3
37937: IFFALSE 37987
// begin for i in tmp do
37939: LD_ADDR_VAR 0 6
37943: PUSH
37944: LD_VAR 0 5
37948: PUSH
37949: FOR_IN
37950: IFFALSE 37985
// if GetBase ( i ) <> base then
37952: LD_VAR 0 6
37956: PPUSH
37957: CALL_OW 274
37961: PUSH
37962: LD_VAR 0 1
37966: NONEQUAL
37967: IFFALSE 37983
// ComLinkToBase ( base , i ) ;
37969: LD_VAR 0 1
37973: PPUSH
37974: LD_VAR 0 6
37978: PPUSH
37979: CALL_OW 169
37983: GO 37949
37985: POP
37986: POP
// end ; result := tmp ;
37987: LD_ADDR_VAR 0 4
37991: PUSH
37992: LD_VAR 0 5
37996: ST_TO_ADDR
// end ;
37997: LD_VAR 0 4
38001: RET
// export function ComComplete ( units , b ) ; var i ; begin
38002: LD_INT 0
38004: PPUSH
38005: PPUSH
// if not units then
38006: LD_VAR 0 1
38010: NOT
38011: IFFALSE 38015
// exit ;
38013: GO 38105
// for i in units do
38015: LD_ADDR_VAR 0 4
38019: PUSH
38020: LD_VAR 0 1
38024: PUSH
38025: FOR_IN
38026: IFFALSE 38103
// if BuildingStatus ( b ) = bs_build then
38028: LD_VAR 0 2
38032: PPUSH
38033: CALL_OW 461
38037: PUSH
38038: LD_INT 1
38040: EQUAL
38041: IFFALSE 38101
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38043: LD_VAR 0 4
38047: PPUSH
38048: LD_STRING h
38050: PUSH
38051: LD_VAR 0 2
38055: PPUSH
38056: CALL_OW 250
38060: PUSH
38061: LD_VAR 0 2
38065: PPUSH
38066: CALL_OW 251
38070: PUSH
38071: LD_VAR 0 2
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: PPUSH
38097: CALL_OW 446
38101: GO 38025
38103: POP
38104: POP
// end ;
38105: LD_VAR 0 3
38109: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38110: LD_INT 0
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38118: LD_VAR 0 1
38122: NOT
38123: PUSH
38124: LD_VAR 0 1
38128: PPUSH
38129: CALL_OW 263
38133: PUSH
38134: LD_INT 2
38136: NONEQUAL
38137: OR
38138: IFFALSE 38142
// exit ;
38140: GO 38458
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38142: LD_ADDR_VAR 0 6
38146: PUSH
38147: LD_INT 22
38149: PUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 255
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 30
38169: PUSH
38170: LD_INT 36
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 34
38179: PUSH
38180: LD_INT 31
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PPUSH
38196: CALL_OW 69
38200: ST_TO_ADDR
// if not tmp then
38201: LD_VAR 0 6
38205: NOT
38206: IFFALSE 38210
// exit ;
38208: GO 38458
// result := [ ] ;
38210: LD_ADDR_VAR 0 2
38214: PUSH
38215: EMPTY
38216: ST_TO_ADDR
// for i in tmp do
38217: LD_ADDR_VAR 0 3
38221: PUSH
38222: LD_VAR 0 6
38226: PUSH
38227: FOR_IN
38228: IFFALSE 38299
// begin t := UnitsInside ( i ) ;
38230: LD_ADDR_VAR 0 4
38234: PUSH
38235: LD_VAR 0 3
38239: PPUSH
38240: CALL_OW 313
38244: ST_TO_ADDR
// if t then
38245: LD_VAR 0 4
38249: IFFALSE 38297
// for j in t do
38251: LD_ADDR_VAR 0 7
38255: PUSH
38256: LD_VAR 0 4
38260: PUSH
38261: FOR_IN
38262: IFFALSE 38295
// result := Replace ( result , result + 1 , j ) ;
38264: LD_ADDR_VAR 0 2
38268: PUSH
38269: LD_VAR 0 2
38273: PPUSH
38274: LD_VAR 0 2
38278: PUSH
38279: LD_INT 1
38281: PLUS
38282: PPUSH
38283: LD_VAR 0 7
38287: PPUSH
38288: CALL_OW 1
38292: ST_TO_ADDR
38293: GO 38261
38295: POP
38296: POP
// end ;
38297: GO 38227
38299: POP
38300: POP
// if not result then
38301: LD_VAR 0 2
38305: NOT
38306: IFFALSE 38310
// exit ;
38308: GO 38458
// mech := result [ 1 ] ;
38310: LD_ADDR_VAR 0 5
38314: PUSH
38315: LD_VAR 0 2
38319: PUSH
38320: LD_INT 1
38322: ARRAY
38323: ST_TO_ADDR
// if result > 1 then
38324: LD_VAR 0 2
38328: PUSH
38329: LD_INT 1
38331: GREATER
38332: IFFALSE 38444
// begin for i = 2 to result do
38334: LD_ADDR_VAR 0 3
38338: PUSH
38339: DOUBLE
38340: LD_INT 2
38342: DEC
38343: ST_TO_ADDR
38344: LD_VAR 0 2
38348: PUSH
38349: FOR_TO
38350: IFFALSE 38442
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38352: LD_ADDR_VAR 0 4
38356: PUSH
38357: LD_VAR 0 2
38361: PUSH
38362: LD_VAR 0 3
38366: ARRAY
38367: PPUSH
38368: LD_INT 3
38370: PPUSH
38371: CALL_OW 259
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_VAR 0 3
38385: ARRAY
38386: PPUSH
38387: CALL_OW 432
38391: MINUS
38392: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38393: LD_VAR 0 4
38397: PUSH
38398: LD_VAR 0 5
38402: PPUSH
38403: LD_INT 3
38405: PPUSH
38406: CALL_OW 259
38410: PUSH
38411: LD_VAR 0 5
38415: PPUSH
38416: CALL_OW 432
38420: MINUS
38421: GREATEREQUAL
38422: IFFALSE 38440
// mech := result [ i ] ;
38424: LD_ADDR_VAR 0 5
38428: PUSH
38429: LD_VAR 0 2
38433: PUSH
38434: LD_VAR 0 3
38438: ARRAY
38439: ST_TO_ADDR
// end ;
38440: GO 38349
38442: POP
38443: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38444: LD_VAR 0 1
38448: PPUSH
38449: LD_VAR 0 5
38453: PPUSH
38454: CALL_OW 135
// end ;
38458: LD_VAR 0 2
38462: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38463: LD_INT 0
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
// result := [ ] ;
38478: LD_ADDR_VAR 0 7
38482: PUSH
38483: EMPTY
38484: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38485: LD_VAR 0 1
38489: PPUSH
38490: CALL_OW 266
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: IN
38505: NOT
38506: IFFALSE 38510
// exit ;
38508: GO 40144
// if name then
38510: LD_VAR 0 3
38514: IFFALSE 38530
// SetBName ( base_dep , name ) ;
38516: LD_VAR 0 1
38520: PPUSH
38521: LD_VAR 0 3
38525: PPUSH
38526: CALL_OW 500
// base := GetBase ( base_dep ) ;
38530: LD_ADDR_VAR 0 15
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 274
38544: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38545: LD_ADDR_VAR 0 16
38549: PUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 255
38559: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38560: LD_ADDR_VAR 0 17
38564: PUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 248
38574: ST_TO_ADDR
// if sources then
38575: LD_VAR 0 5
38579: IFFALSE 38626
// for i = 1 to 3 do
38581: LD_ADDR_VAR 0 8
38585: PUSH
38586: DOUBLE
38587: LD_INT 1
38589: DEC
38590: ST_TO_ADDR
38591: LD_INT 3
38593: PUSH
38594: FOR_TO
38595: IFFALSE 38624
// AddResourceType ( base , i , sources [ i ] ) ;
38597: LD_VAR 0 15
38601: PPUSH
38602: LD_VAR 0 8
38606: PPUSH
38607: LD_VAR 0 5
38611: PUSH
38612: LD_VAR 0 8
38616: ARRAY
38617: PPUSH
38618: CALL_OW 276
38622: GO 38594
38624: POP
38625: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38626: LD_ADDR_VAR 0 18
38630: PUSH
38631: LD_VAR 0 15
38635: PPUSH
38636: LD_VAR 0 2
38640: PPUSH
38641: LD_INT 1
38643: PPUSH
38644: CALL 37887 0 3
38648: ST_TO_ADDR
// InitHc ;
38649: CALL_OW 19
// InitUc ;
38653: CALL_OW 18
// uc_side := side ;
38657: LD_ADDR_OWVAR 20
38661: PUSH
38662: LD_VAR 0 16
38666: ST_TO_ADDR
// uc_nation := nation ;
38667: LD_ADDR_OWVAR 21
38671: PUSH
38672: LD_VAR 0 17
38676: ST_TO_ADDR
// if buildings then
38677: LD_VAR 0 18
38681: IFFALSE 40003
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38683: LD_ADDR_VAR 0 19
38687: PUSH
38688: LD_VAR 0 18
38692: PPUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 30
38698: PUSH
38699: LD_INT 29
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 30
38708: PUSH
38709: LD_INT 30
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: PPUSH
38721: CALL_OW 72
38725: ST_TO_ADDR
// if tmp then
38726: LD_VAR 0 19
38730: IFFALSE 38778
// for i in tmp do
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_VAR 0 19
38741: PUSH
38742: FOR_IN
38743: IFFALSE 38776
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38745: LD_VAR 0 8
38749: PPUSH
38750: CALL_OW 250
38754: PPUSH
38755: LD_VAR 0 8
38759: PPUSH
38760: CALL_OW 251
38764: PPUSH
38765: LD_VAR 0 16
38769: PPUSH
38770: CALL_OW 441
38774: GO 38742
38776: POP
38777: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38778: LD_VAR 0 18
38782: PPUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 30
38788: PUSH
38789: LD_INT 32
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 30
38798: PUSH
38799: LD_INT 33
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: PPUSH
38811: CALL_OW 72
38815: IFFALSE 38903
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38817: LD_ADDR_VAR 0 8
38821: PUSH
38822: LD_VAR 0 18
38826: PPUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 30
38832: PUSH
38833: LD_INT 32
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 30
38842: PUSH
38843: LD_INT 33
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PPUSH
38855: CALL_OW 72
38859: PUSH
38860: FOR_IN
38861: IFFALSE 38901
// begin if not GetBWeapon ( i ) then
38863: LD_VAR 0 8
38867: PPUSH
38868: CALL_OW 269
38872: NOT
38873: IFFALSE 38899
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38875: LD_VAR 0 8
38879: PPUSH
38880: LD_VAR 0 8
38884: PPUSH
38885: LD_VAR 0 2
38889: PPUSH
38890: CALL 40149 0 2
38894: PPUSH
38895: CALL_OW 431
// end ;
38899: GO 38860
38901: POP
38902: POP
// end ; for i = 1 to personel do
38903: LD_ADDR_VAR 0 8
38907: PUSH
38908: DOUBLE
38909: LD_INT 1
38911: DEC
38912: ST_TO_ADDR
38913: LD_VAR 0 6
38917: PUSH
38918: FOR_TO
38919: IFFALSE 39983
// begin if i > 4 then
38921: LD_VAR 0 8
38925: PUSH
38926: LD_INT 4
38928: GREATER
38929: IFFALSE 38933
// break ;
38931: GO 39983
// case i of 1 :
38933: LD_VAR 0 8
38937: PUSH
38938: LD_INT 1
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 39026
38946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38947: LD_ADDR_VAR 0 12
38951: PUSH
38952: LD_VAR 0 18
38956: PPUSH
38957: LD_INT 22
38959: PUSH
38960: LD_VAR 0 16
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 58
38971: PUSH
38972: EMPTY
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 30
38980: PUSH
38981: LD_INT 32
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 30
38990: PUSH
38991: LD_INT 4
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 30
39000: PUSH
39001: LD_INT 5
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL_OW 72
39023: ST_TO_ADDR
39024: GO 39248
39026: LD_INT 2
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39034
39032: GO 39096
39034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39035: LD_ADDR_VAR 0 12
39039: PUSH
39040: LD_VAR 0 18
39044: PPUSH
39045: LD_INT 22
39047: PUSH
39048: LD_VAR 0 16
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 30
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 30
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PPUSH
39089: CALL_OW 72
39093: ST_TO_ADDR
39094: GO 39248
39096: LD_INT 3
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39104
39102: GO 39166
39104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39105: LD_ADDR_VAR 0 12
39109: PUSH
39110: LD_VAR 0 18
39114: PPUSH
39115: LD_INT 22
39117: PUSH
39118: LD_VAR 0 16
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: LD_INT 30
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 30
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PPUSH
39159: CALL_OW 72
39163: ST_TO_ADDR
39164: GO 39248
39166: LD_INT 4
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39247
39174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39175: LD_ADDR_VAR 0 12
39179: PUSH
39180: LD_VAR 0 18
39184: PPUSH
39185: LD_INT 22
39187: PUSH
39188: LD_VAR 0 16
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: LD_INT 30
39202: PUSH
39203: LD_INT 6
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 30
39212: PUSH
39213: LD_INT 7
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 30
39222: PUSH
39223: LD_INT 8
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PPUSH
39240: CALL_OW 72
39244: ST_TO_ADDR
39245: GO 39248
39247: POP
// if i = 1 then
39248: LD_VAR 0 8
39252: PUSH
39253: LD_INT 1
39255: EQUAL
39256: IFFALSE 39367
// begin tmp := [ ] ;
39258: LD_ADDR_VAR 0 19
39262: PUSH
39263: EMPTY
39264: ST_TO_ADDR
// for j in f do
39265: LD_ADDR_VAR 0 9
39269: PUSH
39270: LD_VAR 0 12
39274: PUSH
39275: FOR_IN
39276: IFFALSE 39349
// if GetBType ( j ) = b_bunker then
39278: LD_VAR 0 9
39282: PPUSH
39283: CALL_OW 266
39287: PUSH
39288: LD_INT 32
39290: EQUAL
39291: IFFALSE 39318
// tmp := Insert ( tmp , 1 , j ) else
39293: LD_ADDR_VAR 0 19
39297: PUSH
39298: LD_VAR 0 19
39302: PPUSH
39303: LD_INT 1
39305: PPUSH
39306: LD_VAR 0 9
39310: PPUSH
39311: CALL_OW 2
39315: ST_TO_ADDR
39316: GO 39347
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39318: LD_ADDR_VAR 0 19
39322: PUSH
39323: LD_VAR 0 19
39327: PPUSH
39328: LD_VAR 0 19
39332: PUSH
39333: LD_INT 1
39335: PLUS
39336: PPUSH
39337: LD_VAR 0 9
39341: PPUSH
39342: CALL_OW 2
39346: ST_TO_ADDR
39347: GO 39275
39349: POP
39350: POP
// if tmp then
39351: LD_VAR 0 19
39355: IFFALSE 39367
// f := tmp ;
39357: LD_ADDR_VAR 0 12
39361: PUSH
39362: LD_VAR 0 19
39366: ST_TO_ADDR
// end ; x := personel [ i ] ;
39367: LD_ADDR_VAR 0 13
39371: PUSH
39372: LD_VAR 0 6
39376: PUSH
39377: LD_VAR 0 8
39381: ARRAY
39382: ST_TO_ADDR
// if x = - 1 then
39383: LD_VAR 0 13
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: EQUAL
39392: IFFALSE 39601
// begin for j in f do
39394: LD_ADDR_VAR 0 9
39398: PUSH
39399: LD_VAR 0 12
39403: PUSH
39404: FOR_IN
39405: IFFALSE 39597
// repeat InitHc ;
39407: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39411: LD_VAR 0 9
39415: PPUSH
39416: CALL_OW 266
39420: PUSH
39421: LD_INT 5
39423: EQUAL
39424: IFFALSE 39494
// begin if UnitsInside ( j ) < 3 then
39426: LD_VAR 0 9
39430: PPUSH
39431: CALL_OW 313
39435: PUSH
39436: LD_INT 3
39438: LESS
39439: IFFALSE 39475
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39441: LD_INT 0
39443: PPUSH
39444: LD_INT 5
39446: PUSH
39447: LD_INT 8
39449: PUSH
39450: LD_INT 9
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: PUSH
39458: LD_VAR 0 17
39462: ARRAY
39463: PPUSH
39464: LD_VAR 0 4
39468: PPUSH
39469: CALL_OW 380
39473: GO 39492
// PrepareHuman ( false , i , skill ) ;
39475: LD_INT 0
39477: PPUSH
39478: LD_VAR 0 8
39482: PPUSH
39483: LD_VAR 0 4
39487: PPUSH
39488: CALL_OW 380
// end else
39492: GO 39511
// PrepareHuman ( false , i , skill ) ;
39494: LD_INT 0
39496: PPUSH
39497: LD_VAR 0 8
39501: PPUSH
39502: LD_VAR 0 4
39506: PPUSH
39507: CALL_OW 380
// un := CreateHuman ;
39511: LD_ADDR_VAR 0 14
39515: PUSH
39516: CALL_OW 44
39520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39521: LD_ADDR_VAR 0 7
39525: PUSH
39526: LD_VAR 0 7
39530: PPUSH
39531: LD_INT 1
39533: PPUSH
39534: LD_VAR 0 14
39538: PPUSH
39539: CALL_OW 2
39543: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39544: LD_VAR 0 14
39548: PPUSH
39549: LD_VAR 0 9
39553: PPUSH
39554: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39558: LD_VAR 0 9
39562: PPUSH
39563: CALL_OW 313
39567: PUSH
39568: LD_INT 6
39570: EQUAL
39571: PUSH
39572: LD_VAR 0 9
39576: PPUSH
39577: CALL_OW 266
39581: PUSH
39582: LD_INT 32
39584: PUSH
39585: LD_INT 31
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: IN
39592: OR
39593: IFFALSE 39407
39595: GO 39404
39597: POP
39598: POP
// end else
39599: GO 39981
// for j = 1 to x do
39601: LD_ADDR_VAR 0 9
39605: PUSH
39606: DOUBLE
39607: LD_INT 1
39609: DEC
39610: ST_TO_ADDR
39611: LD_VAR 0 13
39615: PUSH
39616: FOR_TO
39617: IFFALSE 39979
// begin InitHc ;
39619: CALL_OW 19
// if not f then
39623: LD_VAR 0 12
39627: NOT
39628: IFFALSE 39717
// begin PrepareHuman ( false , i , skill ) ;
39630: LD_INT 0
39632: PPUSH
39633: LD_VAR 0 8
39637: PPUSH
39638: LD_VAR 0 4
39642: PPUSH
39643: CALL_OW 380
// un := CreateHuman ;
39647: LD_ADDR_VAR 0 14
39651: PUSH
39652: CALL_OW 44
39656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39657: LD_ADDR_VAR 0 7
39661: PUSH
39662: LD_VAR 0 7
39666: PPUSH
39667: LD_INT 1
39669: PPUSH
39670: LD_VAR 0 14
39674: PPUSH
39675: CALL_OW 2
39679: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39680: LD_VAR 0 14
39684: PPUSH
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL_OW 250
39694: PPUSH
39695: LD_VAR 0 1
39699: PPUSH
39700: CALL_OW 251
39704: PPUSH
39705: LD_INT 10
39707: PPUSH
39708: LD_INT 0
39710: PPUSH
39711: CALL_OW 50
// continue ;
39715: GO 39616
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39717: LD_VAR 0 12
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: PPUSH
39726: CALL_OW 313
39730: PUSH
39731: LD_VAR 0 12
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: PPUSH
39740: CALL_OW 266
39744: PUSH
39745: LD_INT 32
39747: PUSH
39748: LD_INT 31
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: IN
39755: AND
39756: PUSH
39757: LD_VAR 0 12
39761: PUSH
39762: LD_INT 1
39764: ARRAY
39765: PPUSH
39766: CALL_OW 313
39770: PUSH
39771: LD_INT 6
39773: EQUAL
39774: OR
39775: IFFALSE 39795
// f := Delete ( f , 1 ) ;
39777: LD_ADDR_VAR 0 12
39781: PUSH
39782: LD_VAR 0 12
39786: PPUSH
39787: LD_INT 1
39789: PPUSH
39790: CALL_OW 3
39794: ST_TO_ADDR
// if not f then
39795: LD_VAR 0 12
39799: NOT
39800: IFFALSE 39818
// begin x := x + 2 ;
39802: LD_ADDR_VAR 0 13
39806: PUSH
39807: LD_VAR 0 13
39811: PUSH
39812: LD_INT 2
39814: PLUS
39815: ST_TO_ADDR
// continue ;
39816: GO 39616
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39818: LD_VAR 0 12
39822: PUSH
39823: LD_INT 1
39825: ARRAY
39826: PPUSH
39827: CALL_OW 266
39831: PUSH
39832: LD_INT 5
39834: EQUAL
39835: IFFALSE 39909
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39837: LD_VAR 0 12
39841: PUSH
39842: LD_INT 1
39844: ARRAY
39845: PPUSH
39846: CALL_OW 313
39850: PUSH
39851: LD_INT 3
39853: LESS
39854: IFFALSE 39890
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39856: LD_INT 0
39858: PPUSH
39859: LD_INT 5
39861: PUSH
39862: LD_INT 8
39864: PUSH
39865: LD_INT 9
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: PUSH
39873: LD_VAR 0 17
39877: ARRAY
39878: PPUSH
39879: LD_VAR 0 4
39883: PPUSH
39884: CALL_OW 380
39888: GO 39907
// PrepareHuman ( false , i , skill ) ;
39890: LD_INT 0
39892: PPUSH
39893: LD_VAR 0 8
39897: PPUSH
39898: LD_VAR 0 4
39902: PPUSH
39903: CALL_OW 380
// end else
39907: GO 39926
// PrepareHuman ( false , i , skill ) ;
39909: LD_INT 0
39911: PPUSH
39912: LD_VAR 0 8
39916: PPUSH
39917: LD_VAR 0 4
39921: PPUSH
39922: CALL_OW 380
// un := CreateHuman ;
39926: LD_ADDR_VAR 0 14
39930: PUSH
39931: CALL_OW 44
39935: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39936: LD_ADDR_VAR 0 7
39940: PUSH
39941: LD_VAR 0 7
39945: PPUSH
39946: LD_INT 1
39948: PPUSH
39949: LD_VAR 0 14
39953: PPUSH
39954: CALL_OW 2
39958: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39959: LD_VAR 0 14
39963: PPUSH
39964: LD_VAR 0 12
39968: PUSH
39969: LD_INT 1
39971: ARRAY
39972: PPUSH
39973: CALL_OW 52
// end ;
39977: GO 39616
39979: POP
39980: POP
// end ;
39981: GO 38918
39983: POP
39984: POP
// result := result ^ buildings ;
39985: LD_ADDR_VAR 0 7
39989: PUSH
39990: LD_VAR 0 7
39994: PUSH
39995: LD_VAR 0 18
39999: ADD
40000: ST_TO_ADDR
// end else
40001: GO 40144
// begin for i = 1 to personel do
40003: LD_ADDR_VAR 0 8
40007: PUSH
40008: DOUBLE
40009: LD_INT 1
40011: DEC
40012: ST_TO_ADDR
40013: LD_VAR 0 6
40017: PUSH
40018: FOR_TO
40019: IFFALSE 40142
// begin if i > 4 then
40021: LD_VAR 0 8
40025: PUSH
40026: LD_INT 4
40028: GREATER
40029: IFFALSE 40033
// break ;
40031: GO 40142
// x := personel [ i ] ;
40033: LD_ADDR_VAR 0 13
40037: PUSH
40038: LD_VAR 0 6
40042: PUSH
40043: LD_VAR 0 8
40047: ARRAY
40048: ST_TO_ADDR
// if x = - 1 then
40049: LD_VAR 0 13
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: EQUAL
40058: IFFALSE 40062
// continue ;
40060: GO 40018
// PrepareHuman ( false , i , skill ) ;
40062: LD_INT 0
40064: PPUSH
40065: LD_VAR 0 8
40069: PPUSH
40070: LD_VAR 0 4
40074: PPUSH
40075: CALL_OW 380
// un := CreateHuman ;
40079: LD_ADDR_VAR 0 14
40083: PUSH
40084: CALL_OW 44
40088: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40089: LD_VAR 0 14
40093: PPUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 250
40103: PPUSH
40104: LD_VAR 0 1
40108: PPUSH
40109: CALL_OW 251
40113: PPUSH
40114: LD_INT 10
40116: PPUSH
40117: LD_INT 0
40119: PPUSH
40120: CALL_OW 50
// result := result ^ un ;
40124: LD_ADDR_VAR 0 7
40128: PUSH
40129: LD_VAR 0 7
40133: PUSH
40134: LD_VAR 0 14
40138: ADD
40139: ST_TO_ADDR
// end ;
40140: GO 40018
40142: POP
40143: POP
// end ; end ;
40144: LD_VAR 0 7
40148: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40149: LD_INT 0
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
// result := false ;
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_INT 0
40174: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40175: LD_VAR 0 1
40179: NOT
40180: PUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 266
40190: PUSH
40191: LD_INT 32
40193: PUSH
40194: LD_INT 33
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: IN
40201: NOT
40202: OR
40203: IFFALSE 40207
// exit ;
40205: GO 41316
// nat := GetNation ( tower ) ;
40207: LD_ADDR_VAR 0 12
40211: PUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 248
40221: ST_TO_ADDR
// side := GetSide ( tower ) ;
40222: LD_ADDR_VAR 0 16
40226: PUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 255
40236: ST_TO_ADDR
// x := GetX ( tower ) ;
40237: LD_ADDR_VAR 0 10
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 250
40251: ST_TO_ADDR
// y := GetY ( tower ) ;
40252: LD_ADDR_VAR 0 11
40256: PUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: CALL_OW 251
40266: ST_TO_ADDR
// if not x or not y then
40267: LD_VAR 0 10
40271: NOT
40272: PUSH
40273: LD_VAR 0 11
40277: NOT
40278: OR
40279: IFFALSE 40283
// exit ;
40281: GO 41316
// weapon := 0 ;
40283: LD_ADDR_VAR 0 18
40287: PUSH
40288: LD_INT 0
40290: ST_TO_ADDR
// fac_list := [ ] ;
40291: LD_ADDR_VAR 0 17
40295: PUSH
40296: EMPTY
40297: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40298: LD_ADDR_VAR 0 6
40302: PUSH
40303: LD_VAR 0 1
40307: PPUSH
40308: CALL_OW 274
40312: PPUSH
40313: LD_VAR 0 2
40317: PPUSH
40318: LD_INT 0
40320: PPUSH
40321: CALL 37887 0 3
40325: PPUSH
40326: LD_INT 30
40328: PUSH
40329: LD_INT 3
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PPUSH
40336: CALL_OW 72
40340: ST_TO_ADDR
// if not factories then
40341: LD_VAR 0 6
40345: NOT
40346: IFFALSE 40350
// exit ;
40348: GO 41316
// for i in factories do
40350: LD_ADDR_VAR 0 8
40354: PUSH
40355: LD_VAR 0 6
40359: PUSH
40360: FOR_IN
40361: IFFALSE 40386
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40363: LD_ADDR_VAR 0 17
40367: PUSH
40368: LD_VAR 0 17
40372: PUSH
40373: LD_VAR 0 8
40377: PPUSH
40378: CALL_OW 478
40382: UNION
40383: ST_TO_ADDR
40384: GO 40360
40386: POP
40387: POP
// if not fac_list then
40388: LD_VAR 0 17
40392: NOT
40393: IFFALSE 40397
// exit ;
40395: GO 41316
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40397: LD_ADDR_VAR 0 5
40401: PUSH
40402: LD_INT 4
40404: PUSH
40405: LD_INT 5
40407: PUSH
40408: LD_INT 9
40410: PUSH
40411: LD_INT 10
40413: PUSH
40414: LD_INT 6
40416: PUSH
40417: LD_INT 7
40419: PUSH
40420: LD_INT 11
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 27
40434: PUSH
40435: LD_INT 28
40437: PUSH
40438: LD_INT 26
40440: PUSH
40441: LD_INT 30
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 43
40452: PUSH
40453: LD_INT 44
40455: PUSH
40456: LD_INT 46
40458: PUSH
40459: LD_INT 45
40461: PUSH
40462: LD_INT 47
40464: PUSH
40465: LD_INT 49
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: PUSH
40481: LD_VAR 0 12
40485: ARRAY
40486: ST_TO_ADDR
// list := list isect fac_list ;
40487: LD_ADDR_VAR 0 5
40491: PUSH
40492: LD_VAR 0 5
40496: PUSH
40497: LD_VAR 0 17
40501: ISECT
40502: ST_TO_ADDR
// if not list then
40503: LD_VAR 0 5
40507: NOT
40508: IFFALSE 40512
// exit ;
40510: GO 41316
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40512: LD_VAR 0 12
40516: PUSH
40517: LD_INT 3
40519: EQUAL
40520: PUSH
40521: LD_INT 49
40523: PUSH
40524: LD_VAR 0 5
40528: IN
40529: AND
40530: PUSH
40531: LD_INT 31
40533: PPUSH
40534: LD_VAR 0 16
40538: PPUSH
40539: CALL_OW 321
40543: PUSH
40544: LD_INT 2
40546: EQUAL
40547: AND
40548: IFFALSE 40608
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40550: LD_INT 22
40552: PUSH
40553: LD_VAR 0 16
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 35
40564: PUSH
40565: LD_INT 49
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 91
40574: PUSH
40575: LD_VAR 0 1
40579: PUSH
40580: LD_INT 10
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: PPUSH
40593: CALL_OW 69
40597: NOT
40598: IFFALSE 40608
// weapon := ru_time_lapser ;
40600: LD_ADDR_VAR 0 18
40604: PUSH
40605: LD_INT 49
40607: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40608: LD_VAR 0 12
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: IN
40623: PUSH
40624: LD_INT 11
40626: PUSH
40627: LD_VAR 0 5
40631: IN
40632: PUSH
40633: LD_INT 30
40635: PUSH
40636: LD_VAR 0 5
40640: IN
40641: OR
40642: AND
40643: PUSH
40644: LD_INT 6
40646: PPUSH
40647: LD_VAR 0 16
40651: PPUSH
40652: CALL_OW 321
40656: PUSH
40657: LD_INT 2
40659: EQUAL
40660: AND
40661: IFFALSE 40826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40663: LD_INT 22
40665: PUSH
40666: LD_VAR 0 16
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 35
40680: PUSH
40681: LD_INT 11
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 35
40690: PUSH
40691: LD_INT 30
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 91
40705: PUSH
40706: LD_VAR 0 1
40710: PUSH
40711: LD_INT 18
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: PPUSH
40724: CALL_OW 69
40728: NOT
40729: PUSH
40730: LD_INT 22
40732: PUSH
40733: LD_VAR 0 16
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 30
40747: PUSH
40748: LD_INT 32
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 30
40757: PUSH
40758: LD_INT 33
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 91
40772: PUSH
40773: LD_VAR 0 1
40777: PUSH
40778: LD_INT 12
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: PUSH
40791: EMPTY
40792: LIST
40793: PPUSH
40794: CALL_OW 69
40798: PUSH
40799: LD_INT 2
40801: GREATER
40802: AND
40803: IFFALSE 40826
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40805: LD_ADDR_VAR 0 18
40809: PUSH
40810: LD_INT 11
40812: PUSH
40813: LD_INT 30
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_VAR 0 12
40824: ARRAY
40825: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40826: LD_VAR 0 18
40830: NOT
40831: PUSH
40832: LD_INT 40
40834: PPUSH
40835: LD_VAR 0 16
40839: PPUSH
40840: CALL_OW 321
40844: PUSH
40845: LD_INT 2
40847: EQUAL
40848: AND
40849: PUSH
40850: LD_INT 7
40852: PUSH
40853: LD_VAR 0 5
40857: IN
40858: PUSH
40859: LD_INT 28
40861: PUSH
40862: LD_VAR 0 5
40866: IN
40867: OR
40868: PUSH
40869: LD_INT 45
40871: PUSH
40872: LD_VAR 0 5
40876: IN
40877: OR
40878: AND
40879: IFFALSE 41133
// begin hex := GetHexInfo ( x , y ) ;
40881: LD_ADDR_VAR 0 4
40885: PUSH
40886: LD_VAR 0 10
40890: PPUSH
40891: LD_VAR 0 11
40895: PPUSH
40896: CALL_OW 546
40900: ST_TO_ADDR
// if hex [ 1 ] then
40901: LD_VAR 0 4
40905: PUSH
40906: LD_INT 1
40908: ARRAY
40909: IFFALSE 40913
// exit ;
40911: GO 41316
// height := hex [ 2 ] ;
40913: LD_ADDR_VAR 0 15
40917: PUSH
40918: LD_VAR 0 4
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40927: LD_ADDR_VAR 0 14
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: LD_INT 3
40940: PUSH
40941: LD_INT 5
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// for i in tmp do
40950: LD_ADDR_VAR 0 8
40954: PUSH
40955: LD_VAR 0 14
40959: PUSH
40960: FOR_IN
40961: IFFALSE 41131
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40963: LD_ADDR_VAR 0 9
40967: PUSH
40968: LD_VAR 0 10
40972: PPUSH
40973: LD_VAR 0 8
40977: PPUSH
40978: LD_INT 5
40980: PPUSH
40981: CALL_OW 272
40985: PUSH
40986: LD_VAR 0 11
40990: PPUSH
40991: LD_VAR 0 8
40995: PPUSH
40996: LD_INT 5
40998: PPUSH
40999: CALL_OW 273
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41008: LD_VAR 0 9
41012: PUSH
41013: LD_INT 1
41015: ARRAY
41016: PPUSH
41017: LD_VAR 0 9
41021: PUSH
41022: LD_INT 2
41024: ARRAY
41025: PPUSH
41026: CALL_OW 488
41030: IFFALSE 41129
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41032: LD_ADDR_VAR 0 4
41036: PUSH
41037: LD_VAR 0 9
41041: PUSH
41042: LD_INT 1
41044: ARRAY
41045: PPUSH
41046: LD_VAR 0 9
41050: PUSH
41051: LD_INT 2
41053: ARRAY
41054: PPUSH
41055: CALL_OW 546
41059: ST_TO_ADDR
// if hex [ 1 ] then
41060: LD_VAR 0 4
41064: PUSH
41065: LD_INT 1
41067: ARRAY
41068: IFFALSE 41072
// continue ;
41070: GO 40960
// h := hex [ 2 ] ;
41072: LD_ADDR_VAR 0 13
41076: PUSH
41077: LD_VAR 0 4
41081: PUSH
41082: LD_INT 2
41084: ARRAY
41085: ST_TO_ADDR
// if h + 7 < height then
41086: LD_VAR 0 13
41090: PUSH
41091: LD_INT 7
41093: PLUS
41094: PUSH
41095: LD_VAR 0 15
41099: LESS
41100: IFFALSE 41129
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41102: LD_ADDR_VAR 0 18
41106: PUSH
41107: LD_INT 7
41109: PUSH
41110: LD_INT 28
41112: PUSH
41113: LD_INT 45
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: PUSH
41121: LD_VAR 0 12
41125: ARRAY
41126: ST_TO_ADDR
// break ;
41127: GO 41131
// end ; end ; end ;
41129: GO 40960
41131: POP
41132: POP
// end ; if not weapon then
41133: LD_VAR 0 18
41137: NOT
41138: IFFALSE 41198
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41140: LD_ADDR_VAR 0 5
41144: PUSH
41145: LD_VAR 0 5
41149: PUSH
41150: LD_INT 11
41152: PUSH
41153: LD_INT 30
41155: PUSH
41156: LD_INT 49
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: DIFF
41164: ST_TO_ADDR
// if not list then
41165: LD_VAR 0 5
41169: NOT
41170: IFFALSE 41174
// exit ;
41172: GO 41316
// weapon := list [ rand ( 1 , list ) ] ;
41174: LD_ADDR_VAR 0 18
41178: PUSH
41179: LD_VAR 0 5
41183: PUSH
41184: LD_INT 1
41186: PPUSH
41187: LD_VAR 0 5
41191: PPUSH
41192: CALL_OW 12
41196: ARRAY
41197: ST_TO_ADDR
// end ; if weapon then
41198: LD_VAR 0 18
41202: IFFALSE 41316
// begin tmp := CostOfWeapon ( weapon ) ;
41204: LD_ADDR_VAR 0 14
41208: PUSH
41209: LD_VAR 0 18
41213: PPUSH
41214: CALL_OW 451
41218: ST_TO_ADDR
// j := GetBase ( tower ) ;
41219: LD_ADDR_VAR 0 9
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 274
41233: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41234: LD_VAR 0 9
41238: PPUSH
41239: LD_INT 1
41241: PPUSH
41242: CALL_OW 275
41246: PUSH
41247: LD_VAR 0 14
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: GREATEREQUAL
41256: PUSH
41257: LD_VAR 0 9
41261: PPUSH
41262: LD_INT 2
41264: PPUSH
41265: CALL_OW 275
41269: PUSH
41270: LD_VAR 0 14
41274: PUSH
41275: LD_INT 2
41277: ARRAY
41278: GREATEREQUAL
41279: AND
41280: PUSH
41281: LD_VAR 0 9
41285: PPUSH
41286: LD_INT 3
41288: PPUSH
41289: CALL_OW 275
41293: PUSH
41294: LD_VAR 0 14
41298: PUSH
41299: LD_INT 3
41301: ARRAY
41302: GREATEREQUAL
41303: AND
41304: IFFALSE 41316
// result := weapon ;
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_VAR 0 18
41315: ST_TO_ADDR
// end ; end ;
41316: LD_VAR 0 3
41320: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41321: LD_INT 0
41323: PPUSH
41324: PPUSH
// result := true ;
41325: LD_ADDR_VAR 0 3
41329: PUSH
41330: LD_INT 1
41332: ST_TO_ADDR
// if array1 = array2 then
41333: LD_VAR 0 1
41337: PUSH
41338: LD_VAR 0 2
41342: EQUAL
41343: IFFALSE 41403
// begin for i = 1 to array1 do
41345: LD_ADDR_VAR 0 4
41349: PUSH
41350: DOUBLE
41351: LD_INT 1
41353: DEC
41354: ST_TO_ADDR
41355: LD_VAR 0 1
41359: PUSH
41360: FOR_TO
41361: IFFALSE 41399
// if array1 [ i ] <> array2 [ i ] then
41363: LD_VAR 0 1
41367: PUSH
41368: LD_VAR 0 4
41372: ARRAY
41373: PUSH
41374: LD_VAR 0 2
41378: PUSH
41379: LD_VAR 0 4
41383: ARRAY
41384: NONEQUAL
41385: IFFALSE 41397
// begin result := false ;
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_INT 0
41394: ST_TO_ADDR
// break ;
41395: GO 41399
// end ;
41397: GO 41360
41399: POP
41400: POP
// end else
41401: GO 41411
// result := false ;
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_INT 0
41410: ST_TO_ADDR
// end ;
41411: LD_VAR 0 3
41415: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41416: LD_INT 0
41418: PPUSH
41419: PPUSH
// if not array1 or not array2 then
41420: LD_VAR 0 1
41424: NOT
41425: PUSH
41426: LD_VAR 0 2
41430: NOT
41431: OR
41432: IFFALSE 41436
// exit ;
41434: GO 41500
// result := true ;
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_INT 1
41443: ST_TO_ADDR
// for i = 1 to array1 do
41444: LD_ADDR_VAR 0 4
41448: PUSH
41449: DOUBLE
41450: LD_INT 1
41452: DEC
41453: ST_TO_ADDR
41454: LD_VAR 0 1
41458: PUSH
41459: FOR_TO
41460: IFFALSE 41498
// if array1 [ i ] <> array2 [ i ] then
41462: LD_VAR 0 1
41466: PUSH
41467: LD_VAR 0 4
41471: ARRAY
41472: PUSH
41473: LD_VAR 0 2
41477: PUSH
41478: LD_VAR 0 4
41482: ARRAY
41483: NONEQUAL
41484: IFFALSE 41496
// begin result := false ;
41486: LD_ADDR_VAR 0 3
41490: PUSH
41491: LD_INT 0
41493: ST_TO_ADDR
// break ;
41494: GO 41498
// end ;
41496: GO 41459
41498: POP
41499: POP
// end ;
41500: LD_VAR 0 3
41504: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41505: LD_INT 0
41507: PPUSH
41508: PPUSH
41509: PPUSH
// pom := GetBase ( fac ) ;
41510: LD_ADDR_VAR 0 5
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 274
41524: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41525: LD_ADDR_VAR 0 4
41529: PUSH
41530: LD_VAR 0 2
41534: PUSH
41535: LD_INT 1
41537: ARRAY
41538: PPUSH
41539: LD_VAR 0 2
41543: PUSH
41544: LD_INT 2
41546: ARRAY
41547: PPUSH
41548: LD_VAR 0 2
41552: PUSH
41553: LD_INT 3
41555: ARRAY
41556: PPUSH
41557: LD_VAR 0 2
41561: PUSH
41562: LD_INT 4
41564: ARRAY
41565: PPUSH
41566: CALL_OW 449
41570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41571: LD_ADDR_VAR 0 3
41575: PUSH
41576: LD_VAR 0 5
41580: PPUSH
41581: LD_INT 1
41583: PPUSH
41584: CALL_OW 275
41588: PUSH
41589: LD_VAR 0 4
41593: PUSH
41594: LD_INT 1
41596: ARRAY
41597: GREATEREQUAL
41598: PUSH
41599: LD_VAR 0 5
41603: PPUSH
41604: LD_INT 2
41606: PPUSH
41607: CALL_OW 275
41611: PUSH
41612: LD_VAR 0 4
41616: PUSH
41617: LD_INT 2
41619: ARRAY
41620: GREATEREQUAL
41621: AND
41622: PUSH
41623: LD_VAR 0 5
41627: PPUSH
41628: LD_INT 3
41630: PPUSH
41631: CALL_OW 275
41635: PUSH
41636: LD_VAR 0 4
41640: PUSH
41641: LD_INT 3
41643: ARRAY
41644: GREATEREQUAL
41645: AND
41646: ST_TO_ADDR
// end ;
41647: LD_VAR 0 3
41651: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41652: LD_INT 0
41654: PPUSH
41655: PPUSH
41656: PPUSH
41657: PPUSH
// pom := GetBase ( building ) ;
41658: LD_ADDR_VAR 0 3
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 274
41672: ST_TO_ADDR
// if not pom then
41673: LD_VAR 0 3
41677: NOT
41678: IFFALSE 41682
// exit ;
41680: GO 41852
// btype := GetBType ( building ) ;
41682: LD_ADDR_VAR 0 5
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 266
41696: ST_TO_ADDR
// if btype = b_armoury then
41697: LD_VAR 0 5
41701: PUSH
41702: LD_INT 4
41704: EQUAL
41705: IFFALSE 41715
// btype := b_barracks ;
41707: LD_ADDR_VAR 0 5
41711: PUSH
41712: LD_INT 5
41714: ST_TO_ADDR
// if btype = b_depot then
41715: LD_VAR 0 5
41719: PUSH
41720: LD_INT 0
41722: EQUAL
41723: IFFALSE 41733
// btype := b_warehouse ;
41725: LD_ADDR_VAR 0 5
41729: PUSH
41730: LD_INT 1
41732: ST_TO_ADDR
// if btype = b_workshop then
41733: LD_VAR 0 5
41737: PUSH
41738: LD_INT 2
41740: EQUAL
41741: IFFALSE 41751
// btype := b_factory ;
41743: LD_ADDR_VAR 0 5
41747: PUSH
41748: LD_INT 3
41750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41751: LD_ADDR_VAR 0 4
41755: PUSH
41756: LD_VAR 0 5
41760: PPUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 248
41770: PPUSH
41771: CALL_OW 450
41775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41776: LD_ADDR_VAR 0 2
41780: PUSH
41781: LD_VAR 0 3
41785: PPUSH
41786: LD_INT 1
41788: PPUSH
41789: CALL_OW 275
41793: PUSH
41794: LD_VAR 0 4
41798: PUSH
41799: LD_INT 1
41801: ARRAY
41802: GREATEREQUAL
41803: PUSH
41804: LD_VAR 0 3
41808: PPUSH
41809: LD_INT 2
41811: PPUSH
41812: CALL_OW 275
41816: PUSH
41817: LD_VAR 0 4
41821: PUSH
41822: LD_INT 2
41824: ARRAY
41825: GREATEREQUAL
41826: AND
41827: PUSH
41828: LD_VAR 0 3
41832: PPUSH
41833: LD_INT 3
41835: PPUSH
41836: CALL_OW 275
41840: PUSH
41841: LD_VAR 0 4
41845: PUSH
41846: LD_INT 3
41848: ARRAY
41849: GREATEREQUAL
41850: AND
41851: ST_TO_ADDR
// end ;
41852: LD_VAR 0 2
41856: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41857: LD_INT 0
41859: PPUSH
41860: PPUSH
41861: PPUSH
// pom := GetBase ( building ) ;
41862: LD_ADDR_VAR 0 4
41866: PUSH
41867: LD_VAR 0 1
41871: PPUSH
41872: CALL_OW 274
41876: ST_TO_ADDR
// if not pom then
41877: LD_VAR 0 4
41881: NOT
41882: IFFALSE 41886
// exit ;
41884: GO 41987
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41886: LD_ADDR_VAR 0 5
41890: PUSH
41891: LD_VAR 0 2
41895: PPUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 248
41905: PPUSH
41906: CALL_OW 450
41910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41911: LD_ADDR_VAR 0 3
41915: PUSH
41916: LD_VAR 0 4
41920: PPUSH
41921: LD_INT 1
41923: PPUSH
41924: CALL_OW 275
41928: PUSH
41929: LD_VAR 0 5
41933: PUSH
41934: LD_INT 1
41936: ARRAY
41937: GREATEREQUAL
41938: PUSH
41939: LD_VAR 0 4
41943: PPUSH
41944: LD_INT 2
41946: PPUSH
41947: CALL_OW 275
41951: PUSH
41952: LD_VAR 0 5
41956: PUSH
41957: LD_INT 2
41959: ARRAY
41960: GREATEREQUAL
41961: AND
41962: PUSH
41963: LD_VAR 0 4
41967: PPUSH
41968: LD_INT 3
41970: PPUSH
41971: CALL_OW 275
41975: PUSH
41976: LD_VAR 0 5
41980: PUSH
41981: LD_INT 3
41983: ARRAY
41984: GREATEREQUAL
41985: AND
41986: ST_TO_ADDR
// end ;
41987: LD_VAR 0 3
41991: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41992: LD_INT 0
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
// result := false ;
42005: LD_ADDR_VAR 0 8
42009: PUSH
42010: LD_INT 0
42012: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42013: LD_VAR 0 5
42017: NOT
42018: PUSH
42019: LD_VAR 0 1
42023: NOT
42024: OR
42025: PUSH
42026: LD_VAR 0 2
42030: NOT
42031: OR
42032: PUSH
42033: LD_VAR 0 3
42037: NOT
42038: OR
42039: IFFALSE 42043
// exit ;
42041: GO 42857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42043: LD_ADDR_VAR 0 14
42047: PUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: LD_VAR 0 2
42057: PPUSH
42058: LD_VAR 0 3
42062: PPUSH
42063: LD_VAR 0 4
42067: PPUSH
42068: LD_VAR 0 5
42072: PUSH
42073: LD_INT 1
42075: ARRAY
42076: PPUSH
42077: CALL_OW 248
42081: PPUSH
42082: LD_INT 0
42084: PPUSH
42085: CALL 44090 0 6
42089: ST_TO_ADDR
// if not hexes then
42090: LD_VAR 0 14
42094: NOT
42095: IFFALSE 42099
// exit ;
42097: GO 42857
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42099: LD_ADDR_VAR 0 17
42103: PUSH
42104: LD_VAR 0 5
42108: PPUSH
42109: LD_INT 22
42111: PUSH
42112: LD_VAR 0 13
42116: PPUSH
42117: CALL_OW 255
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 30
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 30
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PPUSH
42158: CALL_OW 72
42162: ST_TO_ADDR
// for i = 1 to hexes do
42163: LD_ADDR_VAR 0 9
42167: PUSH
42168: DOUBLE
42169: LD_INT 1
42171: DEC
42172: ST_TO_ADDR
42173: LD_VAR 0 14
42177: PUSH
42178: FOR_TO
42179: IFFALSE 42855
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42181: LD_ADDR_VAR 0 13
42185: PUSH
42186: LD_VAR 0 14
42190: PUSH
42191: LD_VAR 0 9
42195: ARRAY
42196: PUSH
42197: LD_INT 1
42199: ARRAY
42200: PPUSH
42201: LD_VAR 0 14
42205: PUSH
42206: LD_VAR 0 9
42210: ARRAY
42211: PUSH
42212: LD_INT 2
42214: ARRAY
42215: PPUSH
42216: CALL_OW 428
42220: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42221: LD_VAR 0 14
42225: PUSH
42226: LD_VAR 0 9
42230: ARRAY
42231: PUSH
42232: LD_INT 1
42234: ARRAY
42235: PPUSH
42236: LD_VAR 0 14
42240: PUSH
42241: LD_VAR 0 9
42245: ARRAY
42246: PUSH
42247: LD_INT 2
42249: ARRAY
42250: PPUSH
42251: CALL_OW 351
42255: PUSH
42256: LD_VAR 0 14
42260: PUSH
42261: LD_VAR 0 9
42265: ARRAY
42266: PUSH
42267: LD_INT 1
42269: ARRAY
42270: PPUSH
42271: LD_VAR 0 14
42275: PUSH
42276: LD_VAR 0 9
42280: ARRAY
42281: PUSH
42282: LD_INT 2
42284: ARRAY
42285: PPUSH
42286: CALL_OW 488
42290: NOT
42291: OR
42292: PUSH
42293: LD_VAR 0 13
42297: PPUSH
42298: CALL_OW 247
42302: PUSH
42303: LD_INT 3
42305: EQUAL
42306: OR
42307: IFFALSE 42313
// exit ;
42309: POP
42310: POP
42311: GO 42857
// if not tmp then
42313: LD_VAR 0 13
42317: NOT
42318: IFFALSE 42322
// continue ;
42320: GO 42178
// result := true ;
42322: LD_ADDR_VAR 0 8
42326: PUSH
42327: LD_INT 1
42329: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42330: LD_VAR 0 6
42334: PUSH
42335: LD_VAR 0 13
42339: PPUSH
42340: CALL_OW 247
42344: PUSH
42345: LD_INT 2
42347: EQUAL
42348: AND
42349: PUSH
42350: LD_VAR 0 13
42354: PPUSH
42355: CALL_OW 263
42359: PUSH
42360: LD_INT 1
42362: EQUAL
42363: AND
42364: IFFALSE 42528
// begin if IsDrivenBy ( tmp ) then
42366: LD_VAR 0 13
42370: PPUSH
42371: CALL_OW 311
42375: IFFALSE 42379
// continue ;
42377: GO 42178
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42379: LD_VAR 0 6
42383: PPUSH
42384: LD_INT 3
42386: PUSH
42387: LD_INT 60
42389: PUSH
42390: EMPTY
42391: LIST
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 55
42402: PUSH
42403: EMPTY
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PPUSH
42414: CALL_OW 72
42418: IFFALSE 42526
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42420: LD_ADDR_VAR 0 18
42424: PUSH
42425: LD_VAR 0 6
42429: PPUSH
42430: LD_INT 3
42432: PUSH
42433: LD_INT 60
42435: PUSH
42436: EMPTY
42437: LIST
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 55
42448: PUSH
42449: EMPTY
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PPUSH
42460: CALL_OW 72
42464: PUSH
42465: LD_INT 1
42467: ARRAY
42468: ST_TO_ADDR
// if IsInUnit ( driver ) then
42469: LD_VAR 0 18
42473: PPUSH
42474: CALL_OW 310
42478: IFFALSE 42489
// ComExit ( driver ) ;
42480: LD_VAR 0 18
42484: PPUSH
42485: CALL 67870 0 1
// AddComEnterUnit ( driver , tmp ) ;
42489: LD_VAR 0 18
42493: PPUSH
42494: LD_VAR 0 13
42498: PPUSH
42499: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42503: LD_VAR 0 18
42507: PPUSH
42508: LD_VAR 0 7
42512: PPUSH
42513: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42517: LD_VAR 0 18
42521: PPUSH
42522: CALL_OW 181
// end ; continue ;
42526: GO 42178
// end ; if not cleaners or not tmp in cleaners then
42528: LD_VAR 0 6
42532: NOT
42533: PUSH
42534: LD_VAR 0 13
42538: PUSH
42539: LD_VAR 0 6
42543: IN
42544: NOT
42545: OR
42546: IFFALSE 42853
// begin if dep then
42548: LD_VAR 0 17
42552: IFFALSE 42688
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42554: LD_ADDR_VAR 0 16
42558: PUSH
42559: LD_VAR 0 17
42563: PUSH
42564: LD_INT 1
42566: ARRAY
42567: PPUSH
42568: CALL_OW 250
42572: PPUSH
42573: LD_VAR 0 17
42577: PUSH
42578: LD_INT 1
42580: ARRAY
42581: PPUSH
42582: CALL_OW 254
42586: PPUSH
42587: LD_INT 5
42589: PPUSH
42590: CALL_OW 272
42594: PUSH
42595: LD_VAR 0 17
42599: PUSH
42600: LD_INT 1
42602: ARRAY
42603: PPUSH
42604: CALL_OW 251
42608: PPUSH
42609: LD_VAR 0 17
42613: PUSH
42614: LD_INT 1
42616: ARRAY
42617: PPUSH
42618: CALL_OW 254
42622: PPUSH
42623: LD_INT 5
42625: PPUSH
42626: CALL_OW 273
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42635: LD_VAR 0 16
42639: PUSH
42640: LD_INT 1
42642: ARRAY
42643: PPUSH
42644: LD_VAR 0 16
42648: PUSH
42649: LD_INT 2
42651: ARRAY
42652: PPUSH
42653: CALL_OW 488
42657: IFFALSE 42688
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42659: LD_VAR 0 13
42663: PPUSH
42664: LD_VAR 0 16
42668: PUSH
42669: LD_INT 1
42671: ARRAY
42672: PPUSH
42673: LD_VAR 0 16
42677: PUSH
42678: LD_INT 2
42680: ARRAY
42681: PPUSH
42682: CALL_OW 111
// continue ;
42686: GO 42178
// end ; end ; r := GetDir ( tmp ) ;
42688: LD_ADDR_VAR 0 15
42692: PUSH
42693: LD_VAR 0 13
42697: PPUSH
42698: CALL_OW 254
42702: ST_TO_ADDR
// if r = 5 then
42703: LD_VAR 0 15
42707: PUSH
42708: LD_INT 5
42710: EQUAL
42711: IFFALSE 42721
// r := 0 ;
42713: LD_ADDR_VAR 0 15
42717: PUSH
42718: LD_INT 0
42720: ST_TO_ADDR
// for j = r to 5 do
42721: LD_ADDR_VAR 0 10
42725: PUSH
42726: DOUBLE
42727: LD_VAR 0 15
42731: DEC
42732: ST_TO_ADDR
42733: LD_INT 5
42735: PUSH
42736: FOR_TO
42737: IFFALSE 42851
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42739: LD_ADDR_VAR 0 11
42743: PUSH
42744: LD_VAR 0 13
42748: PPUSH
42749: CALL_OW 250
42753: PPUSH
42754: LD_VAR 0 10
42758: PPUSH
42759: LD_INT 2
42761: PPUSH
42762: CALL_OW 272
42766: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42767: LD_ADDR_VAR 0 12
42771: PUSH
42772: LD_VAR 0 13
42776: PPUSH
42777: CALL_OW 251
42781: PPUSH
42782: LD_VAR 0 10
42786: PPUSH
42787: LD_INT 2
42789: PPUSH
42790: CALL_OW 273
42794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42795: LD_VAR 0 11
42799: PPUSH
42800: LD_VAR 0 12
42804: PPUSH
42805: CALL_OW 488
42809: PUSH
42810: LD_VAR 0 11
42814: PPUSH
42815: LD_VAR 0 12
42819: PPUSH
42820: CALL_OW 428
42824: NOT
42825: AND
42826: IFFALSE 42849
// begin ComMoveXY ( tmp , _x , _y ) ;
42828: LD_VAR 0 13
42832: PPUSH
42833: LD_VAR 0 11
42837: PPUSH
42838: LD_VAR 0 12
42842: PPUSH
42843: CALL_OW 111
// break ;
42847: GO 42851
// end ; end ;
42849: GO 42736
42851: POP
42852: POP
// end ; end ;
42853: GO 42178
42855: POP
42856: POP
// end ;
42857: LD_VAR 0 8
42861: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42862: LD_INT 0
42864: PPUSH
// result := true ;
42865: LD_ADDR_VAR 0 3
42869: PUSH
42870: LD_INT 1
42872: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42873: LD_VAR 0 2
42877: PUSH
42878: LD_INT 24
42880: DOUBLE
42881: EQUAL
42882: IFTRUE 42892
42884: LD_INT 33
42886: DOUBLE
42887: EQUAL
42888: IFTRUE 42892
42890: GO 42917
42892: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_INT 32
42900: PPUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 321
42910: PUSH
42911: LD_INT 2
42913: EQUAL
42914: ST_TO_ADDR
42915: GO 43233
42917: LD_INT 20
42919: DOUBLE
42920: EQUAL
42921: IFTRUE 42925
42923: GO 42950
42925: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42926: LD_ADDR_VAR 0 3
42930: PUSH
42931: LD_INT 6
42933: PPUSH
42934: LD_VAR 0 1
42938: PPUSH
42939: CALL_OW 321
42943: PUSH
42944: LD_INT 2
42946: EQUAL
42947: ST_TO_ADDR
42948: GO 43233
42950: LD_INT 22
42952: DOUBLE
42953: EQUAL
42954: IFTRUE 42964
42956: LD_INT 36
42958: DOUBLE
42959: EQUAL
42960: IFTRUE 42964
42962: GO 42989
42964: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_INT 15
42972: PPUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: CALL_OW 321
42982: PUSH
42983: LD_INT 2
42985: EQUAL
42986: ST_TO_ADDR
42987: GO 43233
42989: LD_INT 30
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 42997
42995: GO 43022
42997: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_INT 20
43005: PPUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: CALL_OW 321
43015: PUSH
43016: LD_INT 2
43018: EQUAL
43019: ST_TO_ADDR
43020: GO 43233
43022: LD_INT 28
43024: DOUBLE
43025: EQUAL
43026: IFTRUE 43036
43028: LD_INT 21
43030: DOUBLE
43031: EQUAL
43032: IFTRUE 43036
43034: GO 43061
43036: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 21
43044: PPUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 321
43054: PUSH
43055: LD_INT 2
43057: EQUAL
43058: ST_TO_ADDR
43059: GO 43233
43061: LD_INT 16
43063: DOUBLE
43064: EQUAL
43065: IFTRUE 43069
43067: GO 43094
43069: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43070: LD_ADDR_VAR 0 3
43074: PUSH
43075: LD_INT 84
43077: PPUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: CALL_OW 321
43087: PUSH
43088: LD_INT 2
43090: EQUAL
43091: ST_TO_ADDR
43092: GO 43233
43094: LD_INT 19
43096: DOUBLE
43097: EQUAL
43098: IFTRUE 43108
43100: LD_INT 23
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43133
43108: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 83
43116: PPUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 321
43126: PUSH
43127: LD_INT 2
43129: EQUAL
43130: ST_TO_ADDR
43131: GO 43233
43133: LD_INT 17
43135: DOUBLE
43136: EQUAL
43137: IFTRUE 43141
43139: GO 43166
43141: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43142: LD_ADDR_VAR 0 3
43146: PUSH
43147: LD_INT 39
43149: PPUSH
43150: LD_VAR 0 1
43154: PPUSH
43155: CALL_OW 321
43159: PUSH
43160: LD_INT 2
43162: EQUAL
43163: ST_TO_ADDR
43164: GO 43233
43166: LD_INT 18
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43199
43174: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 40
43182: PPUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 321
43192: PUSH
43193: LD_INT 2
43195: EQUAL
43196: ST_TO_ADDR
43197: GO 43233
43199: LD_INT 27
43201: DOUBLE
43202: EQUAL
43203: IFTRUE 43207
43205: GO 43232
43207: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43208: LD_ADDR_VAR 0 3
43212: PUSH
43213: LD_INT 35
43215: PPUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 321
43225: PUSH
43226: LD_INT 2
43228: EQUAL
43229: ST_TO_ADDR
43230: GO 43233
43232: POP
// end ;
43233: LD_VAR 0 3
43237: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43238: LD_INT 0
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
43249: PPUSH
43250: PPUSH
// result := false ;
43251: LD_ADDR_VAR 0 6
43255: PUSH
43256: LD_INT 0
43258: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43259: LD_VAR 0 1
43263: NOT
43264: PUSH
43265: LD_VAR 0 1
43269: PPUSH
43270: CALL_OW 266
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: IN
43285: NOT
43286: OR
43287: PUSH
43288: LD_VAR 0 2
43292: NOT
43293: OR
43294: PUSH
43295: LD_VAR 0 5
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 4
43314: PUSH
43315: LD_INT 5
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: IN
43326: NOT
43327: OR
43328: PUSH
43329: LD_VAR 0 3
43333: PPUSH
43334: LD_VAR 0 4
43338: PPUSH
43339: CALL_OW 488
43343: NOT
43344: OR
43345: IFFALSE 43349
// exit ;
43347: GO 44085
// side := GetSide ( depot ) ;
43349: LD_ADDR_VAR 0 9
43353: PUSH
43354: LD_VAR 0 1
43358: PPUSH
43359: CALL_OW 255
43363: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43364: LD_VAR 0 9
43368: PPUSH
43369: LD_VAR 0 2
43373: PPUSH
43374: CALL 42862 0 2
43378: NOT
43379: IFFALSE 43383
// exit ;
43381: GO 44085
// pom := GetBase ( depot ) ;
43383: LD_ADDR_VAR 0 10
43387: PUSH
43388: LD_VAR 0 1
43392: PPUSH
43393: CALL_OW 274
43397: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43398: LD_ADDR_VAR 0 11
43402: PUSH
43403: LD_VAR 0 2
43407: PPUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 248
43417: PPUSH
43418: CALL_OW 450
43422: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43423: LD_VAR 0 10
43427: PPUSH
43428: LD_INT 1
43430: PPUSH
43431: CALL_OW 275
43435: PUSH
43436: LD_VAR 0 11
43440: PUSH
43441: LD_INT 1
43443: ARRAY
43444: GREATEREQUAL
43445: PUSH
43446: LD_VAR 0 10
43450: PPUSH
43451: LD_INT 2
43453: PPUSH
43454: CALL_OW 275
43458: PUSH
43459: LD_VAR 0 11
43463: PUSH
43464: LD_INT 2
43466: ARRAY
43467: GREATEREQUAL
43468: AND
43469: PUSH
43470: LD_VAR 0 10
43474: PPUSH
43475: LD_INT 3
43477: PPUSH
43478: CALL_OW 275
43482: PUSH
43483: LD_VAR 0 11
43487: PUSH
43488: LD_INT 3
43490: ARRAY
43491: GREATEREQUAL
43492: AND
43493: NOT
43494: IFFALSE 43498
// exit ;
43496: GO 44085
// if GetBType ( depot ) = b_depot then
43498: LD_VAR 0 1
43502: PPUSH
43503: CALL_OW 266
43507: PUSH
43508: LD_INT 0
43510: EQUAL
43511: IFFALSE 43523
// dist := 28 else
43513: LD_ADDR_VAR 0 14
43517: PUSH
43518: LD_INT 28
43520: ST_TO_ADDR
43521: GO 43531
// dist := 36 ;
43523: LD_ADDR_VAR 0 14
43527: PUSH
43528: LD_INT 36
43530: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43531: LD_VAR 0 1
43535: PPUSH
43536: LD_VAR 0 3
43540: PPUSH
43541: LD_VAR 0 4
43545: PPUSH
43546: CALL_OW 297
43550: PUSH
43551: LD_VAR 0 14
43555: GREATER
43556: IFFALSE 43560
// exit ;
43558: GO 44085
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43560: LD_ADDR_VAR 0 12
43564: PUSH
43565: LD_VAR 0 2
43569: PPUSH
43570: LD_VAR 0 3
43574: PPUSH
43575: LD_VAR 0 4
43579: PPUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL_OW 248
43594: PPUSH
43595: LD_INT 0
43597: PPUSH
43598: CALL 44090 0 6
43602: ST_TO_ADDR
// if not hexes then
43603: LD_VAR 0 12
43607: NOT
43608: IFFALSE 43612
// exit ;
43610: GO 44085
// hex := GetHexInfo ( x , y ) ;
43612: LD_ADDR_VAR 0 15
43616: PUSH
43617: LD_VAR 0 3
43621: PPUSH
43622: LD_VAR 0 4
43626: PPUSH
43627: CALL_OW 546
43631: ST_TO_ADDR
// if hex [ 1 ] then
43632: LD_VAR 0 15
43636: PUSH
43637: LD_INT 1
43639: ARRAY
43640: IFFALSE 43644
// exit ;
43642: GO 44085
// height := hex [ 2 ] ;
43644: LD_ADDR_VAR 0 13
43648: PUSH
43649: LD_VAR 0 15
43653: PUSH
43654: LD_INT 2
43656: ARRAY
43657: ST_TO_ADDR
// for i = 1 to hexes do
43658: LD_ADDR_VAR 0 7
43662: PUSH
43663: DOUBLE
43664: LD_INT 1
43666: DEC
43667: ST_TO_ADDR
43668: LD_VAR 0 12
43672: PUSH
43673: FOR_TO
43674: IFFALSE 44004
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43676: LD_VAR 0 12
43680: PUSH
43681: LD_VAR 0 7
43685: ARRAY
43686: PUSH
43687: LD_INT 1
43689: ARRAY
43690: PPUSH
43691: LD_VAR 0 12
43695: PUSH
43696: LD_VAR 0 7
43700: ARRAY
43701: PUSH
43702: LD_INT 2
43704: ARRAY
43705: PPUSH
43706: CALL_OW 488
43710: NOT
43711: PUSH
43712: LD_VAR 0 12
43716: PUSH
43717: LD_VAR 0 7
43721: ARRAY
43722: PUSH
43723: LD_INT 1
43725: ARRAY
43726: PPUSH
43727: LD_VAR 0 12
43731: PUSH
43732: LD_VAR 0 7
43736: ARRAY
43737: PUSH
43738: LD_INT 2
43740: ARRAY
43741: PPUSH
43742: CALL_OW 428
43746: PUSH
43747: LD_INT 0
43749: GREATER
43750: OR
43751: PUSH
43752: LD_VAR 0 12
43756: PUSH
43757: LD_VAR 0 7
43761: ARRAY
43762: PUSH
43763: LD_INT 1
43765: ARRAY
43766: PPUSH
43767: LD_VAR 0 12
43771: PUSH
43772: LD_VAR 0 7
43776: ARRAY
43777: PUSH
43778: LD_INT 2
43780: ARRAY
43781: PPUSH
43782: CALL_OW 351
43786: OR
43787: IFFALSE 43793
// exit ;
43789: POP
43790: POP
43791: GO 44085
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43793: LD_ADDR_VAR 0 8
43797: PUSH
43798: LD_VAR 0 12
43802: PUSH
43803: LD_VAR 0 7
43807: ARRAY
43808: PUSH
43809: LD_INT 1
43811: ARRAY
43812: PPUSH
43813: LD_VAR 0 12
43817: PUSH
43818: LD_VAR 0 7
43822: ARRAY
43823: PUSH
43824: LD_INT 2
43826: ARRAY
43827: PPUSH
43828: CALL_OW 546
43832: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43833: LD_VAR 0 8
43837: PUSH
43838: LD_INT 1
43840: ARRAY
43841: PUSH
43842: LD_VAR 0 8
43846: PUSH
43847: LD_INT 2
43849: ARRAY
43850: PUSH
43851: LD_VAR 0 13
43855: PUSH
43856: LD_INT 2
43858: PLUS
43859: GREATER
43860: OR
43861: PUSH
43862: LD_VAR 0 8
43866: PUSH
43867: LD_INT 2
43869: ARRAY
43870: PUSH
43871: LD_VAR 0 13
43875: PUSH
43876: LD_INT 2
43878: MINUS
43879: LESS
43880: OR
43881: PUSH
43882: LD_VAR 0 8
43886: PUSH
43887: LD_INT 3
43889: ARRAY
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 8
43896: PUSH
43897: LD_INT 9
43899: PUSH
43900: LD_INT 10
43902: PUSH
43903: LD_INT 11
43905: PUSH
43906: LD_INT 12
43908: PUSH
43909: LD_INT 13
43911: PUSH
43912: LD_INT 16
43914: PUSH
43915: LD_INT 17
43917: PUSH
43918: LD_INT 18
43920: PUSH
43921: LD_INT 19
43923: PUSH
43924: LD_INT 20
43926: PUSH
43927: LD_INT 21
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: IN
43945: NOT
43946: OR
43947: PUSH
43948: LD_VAR 0 8
43952: PUSH
43953: LD_INT 5
43955: ARRAY
43956: NOT
43957: OR
43958: PUSH
43959: LD_VAR 0 8
43963: PUSH
43964: LD_INT 6
43966: ARRAY
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 7
43976: PUSH
43977: LD_INT 9
43979: PUSH
43980: LD_INT 10
43982: PUSH
43983: LD_INT 11
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: IN
43994: NOT
43995: OR
43996: IFFALSE 44002
// exit ;
43998: POP
43999: POP
44000: GO 44085
// end ;
44002: GO 43673
44004: POP
44005: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44006: LD_VAR 0 9
44010: PPUSH
44011: LD_VAR 0 3
44015: PPUSH
44016: LD_VAR 0 4
44020: PPUSH
44021: LD_INT 20
44023: PPUSH
44024: CALL 36037 0 4
44028: PUSH
44029: LD_INT 4
44031: ARRAY
44032: IFFALSE 44036
// exit ;
44034: GO 44085
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44036: LD_VAR 0 2
44040: PUSH
44041: LD_INT 29
44043: PUSH
44044: LD_INT 30
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: IN
44051: PUSH
44052: LD_VAR 0 3
44056: PPUSH
44057: LD_VAR 0 4
44061: PPUSH
44062: LD_VAR 0 9
44066: PPUSH
44067: CALL_OW 440
44071: NOT
44072: AND
44073: IFFALSE 44077
// exit ;
44075: GO 44085
// result := true ;
44077: LD_ADDR_VAR 0 6
44081: PUSH
44082: LD_INT 1
44084: ST_TO_ADDR
// end ;
44085: LD_VAR 0 6
44089: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44090: LD_INT 0
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
44121: PPUSH
44122: PPUSH
44123: PPUSH
44124: PPUSH
44125: PPUSH
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
// result = [ ] ;
44150: LD_ADDR_VAR 0 7
44154: PUSH
44155: EMPTY
44156: ST_TO_ADDR
// temp_list = [ ] ;
44157: LD_ADDR_VAR 0 9
44161: PUSH
44162: EMPTY
44163: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44164: LD_VAR 0 4
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: LD_INT 4
44183: PUSH
44184: LD_INT 5
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: IN
44195: NOT
44196: PUSH
44197: LD_VAR 0 1
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: IN
44212: PUSH
44213: LD_VAR 0 5
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: IN
44232: NOT
44233: AND
44234: OR
44235: IFFALSE 44239
// exit ;
44237: GO 62630
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44239: LD_VAR 0 1
44243: PUSH
44244: LD_INT 6
44246: PUSH
44247: LD_INT 7
44249: PUSH
44250: LD_INT 8
44252: PUSH
44253: LD_INT 13
44255: PUSH
44256: LD_INT 12
44258: PUSH
44259: LD_INT 15
44261: PUSH
44262: LD_INT 11
44264: PUSH
44265: LD_INT 14
44267: PUSH
44268: LD_INT 10
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: IN
44282: IFFALSE 44292
// btype = b_lab ;
44284: LD_ADDR_VAR 0 1
44288: PUSH
44289: LD_INT 6
44291: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44292: LD_VAR 0 6
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: IN
44311: NOT
44312: PUSH
44313: LD_VAR 0 1
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: LD_INT 6
44332: PUSH
44333: LD_INT 36
44335: PUSH
44336: LD_INT 4
44338: PUSH
44339: LD_INT 5
44341: PUSH
44342: LD_INT 31
44344: PUSH
44345: LD_INT 32
44347: PUSH
44348: LD_INT 33
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: IN
44364: NOT
44365: PUSH
44366: LD_VAR 0 6
44370: PUSH
44371: LD_INT 1
44373: EQUAL
44374: AND
44375: OR
44376: PUSH
44377: LD_VAR 0 1
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: IN
44392: NOT
44393: PUSH
44394: LD_VAR 0 6
44398: PUSH
44399: LD_INT 2
44401: EQUAL
44402: AND
44403: OR
44404: IFFALSE 44414
// mode = 0 ;
44406: LD_ADDR_VAR 0 6
44410: PUSH
44411: LD_INT 0
44413: ST_TO_ADDR
// case mode of 0 :
44414: LD_VAR 0 6
44418: PUSH
44419: LD_INT 0
44421: DOUBLE
44422: EQUAL
44423: IFTRUE 44427
44425: GO 55880
44427: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44428: LD_ADDR_VAR 0 11
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44621: LD_ADDR_VAR 0 12
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: NEG
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44817: LD_ADDR_VAR 0 13
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45016: LD_ADDR_VAR 0 14
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 3
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 3
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45212: LD_ADDR_VAR 0 15
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45405: LD_ADDR_VAR 0 16
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45598: LD_ADDR_VAR 0 17
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45828: LD_ADDR_VAR 0 18
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46058: LD_ADDR_VAR 0 19
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46288: LD_ADDR_VAR 0 20
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46518: LD_ADDR_VAR 0 21
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46748: LD_ADDR_VAR 0 22
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46978: LD_ADDR_VAR 0 23
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47258: LD_ADDR_VAR 0 24
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47534: LD_ADDR_VAR 0 25
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 3
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47808: LD_ADDR_VAR 0 26
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48084: LD_ADDR_VAR 0 27
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 3
48329: NEG
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48364: LD_ADDR_VAR 0 28
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48646: LD_ADDR_VAR 0 29
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48925: LD_ADDR_VAR 0 30
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 3
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49203: LD_ADDR_VAR 0 31
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 3
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49481: LD_ADDR_VAR 0 32
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49759: LD_ADDR_VAR 0 33
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 3
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50038: LD_ADDR_VAR 0 34
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 3
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50318: LD_ADDR_VAR 0 35
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50430: LD_ADDR_VAR 0 36
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50542: LD_ADDR_VAR 0 37
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50654: LD_ADDR_VAR 0 38
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50766: LD_ADDR_VAR 0 39
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50878: LD_ADDR_VAR 0 40
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50990: LD_ADDR_VAR 0 41
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: NEG
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51340: LD_ADDR_VAR 0 42
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51690: LD_ADDR_VAR 0 43
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 3
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52038: LD_ADDR_VAR 0 44
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52388: LD_ADDR_VAR 0 45
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52738: LD_ADDR_VAR 0 46
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 3
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53086: LD_ADDR_VAR 0 47
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53237: LD_ADDR_VAR 0 48
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53384: LD_ADDR_VAR 0 49
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53528: LD_ADDR_VAR 0 50
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53672: LD_ADDR_VAR 0 51
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53819: LD_ADDR_VAR 0 52
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53970: LD_ADDR_VAR 0 53
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54200: LD_ADDR_VAR 0 54
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54430: LD_ADDR_VAR 0 55
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54660: LD_ADDR_VAR 0 56
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54890: LD_ADDR_VAR 0 57
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55120: LD_ADDR_VAR 0 58
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55350: LD_ADDR_VAR 0 59
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55438: LD_ADDR_VAR 0 60
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55526: LD_ADDR_VAR 0 61
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55614: LD_ADDR_VAR 0 62
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55702: LD_ADDR_VAR 0 63
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55790: LD_ADDR_VAR 0 64
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// end ; 1 :
55878: GO 61775
55880: LD_INT 1
55882: DOUBLE
55883: EQUAL
55884: IFTRUE 55888
55886: GO 58511
55888: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55889: LD_ADDR_VAR 0 11
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55933: LD_ADDR_VAR 0 12
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55974: LD_ADDR_VAR 0 13
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56014: LD_ADDR_VAR 0 14
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56055: LD_ADDR_VAR 0 15
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56099: LD_ADDR_VAR 0 16
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56145: LD_ADDR_VAR 0 17
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56189: LD_ADDR_VAR 0 18
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56230: LD_ADDR_VAR 0 19
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56270: LD_ADDR_VAR 0 20
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56311: LD_ADDR_VAR 0 21
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56355: LD_ADDR_VAR 0 22
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 3
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56401: LD_ADDR_VAR 0 23
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56445: LD_ADDR_VAR 0 24
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56486: LD_ADDR_VAR 0 25
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 3
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56526: LD_ADDR_VAR 0 26
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56567: LD_ADDR_VAR 0 27
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 4
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56611: LD_ADDR_VAR 0 28
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: LD_INT 4
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 4
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56657: LD_ADDR_VAR 0 29
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 3
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 4
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 5
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 5
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 6
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 6
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 5
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56812: LD_ADDR_VAR 0 30
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 4
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 5
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 5
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 5
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 6
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 6
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56955: LD_ADDR_VAR 0 31
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: LD_INT 4
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: LD_INT 4
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 5
57022: PUSH
57023: LD_INT 4
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 5
57032: PUSH
57033: LD_INT 5
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 4
57042: PUSH
57043: LD_INT 5
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 6
57052: PUSH
57053: LD_INT 5
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 6
57062: PUSH
57063: LD_INT 6
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: LD_INT 6
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57094: LD_ADDR_VAR 0 32
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 4
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 4
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 5
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 6
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 6
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 5
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57237: LD_ADDR_VAR 0 33
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 4
57289: NEG
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 4
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 4
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 5
57323: NEG
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 5
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 5
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 6
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 6
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57392: LD_ADDR_VAR 0 34
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 4
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 4
57459: NEG
57460: PUSH
57461: LD_INT 4
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: NEG
57472: PUSH
57473: LD_INT 5
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 5
57483: NEG
57484: PUSH
57485: LD_INT 4
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 5
57495: NEG
57496: PUSH
57497: LD_INT 5
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 5
57507: NEG
57508: PUSH
57509: LD_INT 6
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 6
57519: NEG
57520: PUSH
57521: LD_INT 5
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 6
57531: NEG
57532: PUSH
57533: LD_INT 6
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57555: LD_ADDR_VAR 0 41
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57599: LD_ADDR_VAR 0 42
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57640: LD_ADDR_VAR 0 43
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57680: LD_ADDR_VAR 0 44
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57721: LD_ADDR_VAR 0 45
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57765: LD_ADDR_VAR 0 46
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 3
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57811: LD_ADDR_VAR 0 47
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57844: LD_ADDR_VAR 0 48
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57875: LD_ADDR_VAR 0 49
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57904: LD_ADDR_VAR 0 50
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57933: LD_ADDR_VAR 0 51
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57964: LD_ADDR_VAR 0 52
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57997: LD_ADDR_VAR 0 53
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58041: LD_ADDR_VAR 0 54
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58082: LD_ADDR_VAR 0 55
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58122: LD_ADDR_VAR 0 56
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58163: LD_ADDR_VAR 0 57
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 3
58181: NEG
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58207: LD_ADDR_VAR 0 58
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58253: LD_ADDR_VAR 0 59
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58297: LD_ADDR_VAR 0 60
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58338: LD_ADDR_VAR 0 61
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58378: LD_ADDR_VAR 0 62
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58419: LD_ADDR_VAR 0 63
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58463: LD_ADDR_VAR 0 64
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// end ; 2 :
58509: GO 61775
58511: LD_INT 2
58513: DOUBLE
58514: EQUAL
58515: IFTRUE 58519
58517: GO 61774
58519: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58520: LD_ADDR_VAR 0 29
58524: PUSH
58525: LD_INT 4
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 4
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 5
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 4
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 5
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 4
58640: PUSH
58641: LD_INT 3
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: LD_INT 4
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 4
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 5
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 4
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 4
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 4
58905: NEG
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 4
58917: NEG
58918: PUSH
58919: LD_INT 5
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 4
58953: NEG
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 5
58977: NEG
58978: PUSH
58979: LD_INT 5
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: LD_INT 5
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 5
59001: NEG
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59058: LD_ADDR_VAR 0 30
59062: PUSH
59063: LD_INT 4
59065: PUSH
59066: LD_INT 4
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 5
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 5
59095: PUSH
59096: LD_INT 5
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 4
59105: PUSH
59106: LD_INT 5
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: LD_INT 3
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 5
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 5
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 4
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 4
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 4
59248: NEG
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 4
59293: NEG
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 5
59304: NEG
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 5
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 5
59327: NEG
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: LD_INT 4
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 3
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: LD_INT 4
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 4
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: LD_INT 5
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 4
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 4
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: LD_INT 5
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59605: LD_ADDR_VAR 0 31
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 4
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 4
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 5
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 5
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 4
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 5
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 4
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 4
59784: NEG
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 4
59807: NEG
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 4
59819: NEG
59820: PUSH
59821: LD_INT 5
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: NEG
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 4
59855: NEG
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: NEG
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 5
59903: NEG
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 4
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 5
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 5
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 5
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60155: LD_ADDR_VAR 0 32
60159: PUSH
60160: LD_INT 4
60162: NEG
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 4
60173: NEG
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 4
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 5
60218: NEG
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 5
60229: NEG
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 5
60241: NEG
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: NEG
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 4
60324: NEG
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 4
60336: NEG
60337: PUSH
60338: LD_INT 4
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 4
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 4
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 4
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 5
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: LD_INT 5
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 4
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: LD_INT 4
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: LD_INT 3
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 5
60587: PUSH
60588: LD_INT 4
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: LD_INT 5
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: LD_INT 5
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: LD_INT 4
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 3
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 5
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: LD_INT 5
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60702: LD_ADDR_VAR 0 33
60706: PUSH
60707: LD_INT 4
60709: NEG
60710: PUSH
60711: LD_INT 4
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 4
60721: NEG
60722: PUSH
60723: LD_INT 5
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 3
60733: NEG
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: LD_INT 3
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 4
60757: NEG
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 5
60769: NEG
60770: PUSH
60771: LD_INT 4
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 5
60781: NEG
60782: PUSH
60783: LD_INT 5
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: LD_INT 5
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 5
60805: NEG
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 2
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 3
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 4
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 4
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 4
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 5
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 5
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 4
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 5
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 4
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 4
61042: PUSH
61043: LD_INT 4
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: LD_INT 4
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 3
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 4
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 4
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 4
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 4
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 5
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61240: LD_ADDR_VAR 0 34
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 4
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 5
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 4
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 3
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 4
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 5
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 5
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 5
61462: PUSH
61463: LD_INT 4
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 5
61472: PUSH
61473: LD_INT 5
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 4
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 5
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: LD_INT 5
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 4
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 3
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 4
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 4
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 5
61681: NEG
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 5
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 5
61704: NEG
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: ST_TO_ADDR
// end ; end ;
61772: GO 61775
61774: POP
// case btype of b_depot , b_warehouse :
61775: LD_VAR 0 1
61779: PUSH
61780: LD_INT 0
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61794
61786: LD_INT 1
61788: DOUBLE
61789: EQUAL
61790: IFTRUE 61794
61792: GO 61995
61794: POP
// case nation of nation_american :
61795: LD_VAR 0 5
61799: PUSH
61800: LD_INT 1
61802: DOUBLE
61803: EQUAL
61804: IFTRUE 61808
61806: GO 61864
61808: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61809: LD_ADDR_VAR 0 9
61813: PUSH
61814: LD_VAR 0 11
61818: PUSH
61819: LD_VAR 0 12
61823: PUSH
61824: LD_VAR 0 13
61828: PUSH
61829: LD_VAR 0 14
61833: PUSH
61834: LD_VAR 0 15
61838: PUSH
61839: LD_VAR 0 16
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: PUSH
61852: LD_VAR 0 4
61856: PUSH
61857: LD_INT 1
61859: PLUS
61860: ARRAY
61861: ST_TO_ADDR
61862: GO 61993
61864: LD_INT 2
61866: DOUBLE
61867: EQUAL
61868: IFTRUE 61872
61870: GO 61928
61872: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61873: LD_ADDR_VAR 0 9
61877: PUSH
61878: LD_VAR 0 17
61882: PUSH
61883: LD_VAR 0 18
61887: PUSH
61888: LD_VAR 0 19
61892: PUSH
61893: LD_VAR 0 20
61897: PUSH
61898: LD_VAR 0 21
61902: PUSH
61903: LD_VAR 0 22
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 4
61920: PUSH
61921: LD_INT 1
61923: PLUS
61924: ARRAY
61925: ST_TO_ADDR
61926: GO 61993
61928: LD_INT 3
61930: DOUBLE
61931: EQUAL
61932: IFTRUE 61936
61934: GO 61992
61936: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61937: LD_ADDR_VAR 0 9
61941: PUSH
61942: LD_VAR 0 23
61946: PUSH
61947: LD_VAR 0 24
61951: PUSH
61952: LD_VAR 0 25
61956: PUSH
61957: LD_VAR 0 26
61961: PUSH
61962: LD_VAR 0 27
61966: PUSH
61967: LD_VAR 0 28
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: PUSH
61980: LD_VAR 0 4
61984: PUSH
61985: LD_INT 1
61987: PLUS
61988: ARRAY
61989: ST_TO_ADDR
61990: GO 61993
61992: POP
61993: GO 62548
61995: LD_INT 2
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62009
62001: LD_INT 3
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62009
62007: GO 62065
62009: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62010: LD_ADDR_VAR 0 9
62014: PUSH
62015: LD_VAR 0 29
62019: PUSH
62020: LD_VAR 0 30
62024: PUSH
62025: LD_VAR 0 31
62029: PUSH
62030: LD_VAR 0 32
62034: PUSH
62035: LD_VAR 0 33
62039: PUSH
62040: LD_VAR 0 34
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: PUSH
62053: LD_VAR 0 4
62057: PUSH
62058: LD_INT 1
62060: PLUS
62061: ARRAY
62062: ST_TO_ADDR
62063: GO 62548
62065: LD_INT 16
62067: DOUBLE
62068: EQUAL
62069: IFTRUE 62127
62071: LD_INT 17
62073: DOUBLE
62074: EQUAL
62075: IFTRUE 62127
62077: LD_INT 18
62079: DOUBLE
62080: EQUAL
62081: IFTRUE 62127
62083: LD_INT 19
62085: DOUBLE
62086: EQUAL
62087: IFTRUE 62127
62089: LD_INT 22
62091: DOUBLE
62092: EQUAL
62093: IFTRUE 62127
62095: LD_INT 20
62097: DOUBLE
62098: EQUAL
62099: IFTRUE 62127
62101: LD_INT 21
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62127
62107: LD_INT 23
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62127
62113: LD_INT 24
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62127
62119: LD_INT 25
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62127
62125: GO 62183
62127: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62128: LD_ADDR_VAR 0 9
62132: PUSH
62133: LD_VAR 0 35
62137: PUSH
62138: LD_VAR 0 36
62142: PUSH
62143: LD_VAR 0 37
62147: PUSH
62148: LD_VAR 0 38
62152: PUSH
62153: LD_VAR 0 39
62157: PUSH
62158: LD_VAR 0 40
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: PUSH
62171: LD_VAR 0 4
62175: PUSH
62176: LD_INT 1
62178: PLUS
62179: ARRAY
62180: ST_TO_ADDR
62181: GO 62548
62183: LD_INT 6
62185: DOUBLE
62186: EQUAL
62187: IFTRUE 62239
62189: LD_INT 7
62191: DOUBLE
62192: EQUAL
62193: IFTRUE 62239
62195: LD_INT 8
62197: DOUBLE
62198: EQUAL
62199: IFTRUE 62239
62201: LD_INT 13
62203: DOUBLE
62204: EQUAL
62205: IFTRUE 62239
62207: LD_INT 12
62209: DOUBLE
62210: EQUAL
62211: IFTRUE 62239
62213: LD_INT 15
62215: DOUBLE
62216: EQUAL
62217: IFTRUE 62239
62219: LD_INT 11
62221: DOUBLE
62222: EQUAL
62223: IFTRUE 62239
62225: LD_INT 14
62227: DOUBLE
62228: EQUAL
62229: IFTRUE 62239
62231: LD_INT 10
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62239
62237: GO 62295
62239: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62240: LD_ADDR_VAR 0 9
62244: PUSH
62245: LD_VAR 0 41
62249: PUSH
62250: LD_VAR 0 42
62254: PUSH
62255: LD_VAR 0 43
62259: PUSH
62260: LD_VAR 0 44
62264: PUSH
62265: LD_VAR 0 45
62269: PUSH
62270: LD_VAR 0 46
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: PUSH
62283: LD_VAR 0 4
62287: PUSH
62288: LD_INT 1
62290: PLUS
62291: ARRAY
62292: ST_TO_ADDR
62293: GO 62548
62295: LD_INT 36
62297: DOUBLE
62298: EQUAL
62299: IFTRUE 62303
62301: GO 62359
62303: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62304: LD_ADDR_VAR 0 9
62308: PUSH
62309: LD_VAR 0 47
62313: PUSH
62314: LD_VAR 0 48
62318: PUSH
62319: LD_VAR 0 49
62323: PUSH
62324: LD_VAR 0 50
62328: PUSH
62329: LD_VAR 0 51
62333: PUSH
62334: LD_VAR 0 52
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: PUSH
62347: LD_VAR 0 4
62351: PUSH
62352: LD_INT 1
62354: PLUS
62355: ARRAY
62356: ST_TO_ADDR
62357: GO 62548
62359: LD_INT 4
62361: DOUBLE
62362: EQUAL
62363: IFTRUE 62385
62365: LD_INT 5
62367: DOUBLE
62368: EQUAL
62369: IFTRUE 62385
62371: LD_INT 34
62373: DOUBLE
62374: EQUAL
62375: IFTRUE 62385
62377: LD_INT 37
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62385
62383: GO 62441
62385: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62386: LD_ADDR_VAR 0 9
62390: PUSH
62391: LD_VAR 0 53
62395: PUSH
62396: LD_VAR 0 54
62400: PUSH
62401: LD_VAR 0 55
62405: PUSH
62406: LD_VAR 0 56
62410: PUSH
62411: LD_VAR 0 57
62415: PUSH
62416: LD_VAR 0 58
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: PUSH
62429: LD_VAR 0 4
62433: PUSH
62434: LD_INT 1
62436: PLUS
62437: ARRAY
62438: ST_TO_ADDR
62439: GO 62548
62441: LD_INT 31
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62491
62447: LD_INT 32
62449: DOUBLE
62450: EQUAL
62451: IFTRUE 62491
62453: LD_INT 33
62455: DOUBLE
62456: EQUAL
62457: IFTRUE 62491
62459: LD_INT 27
62461: DOUBLE
62462: EQUAL
62463: IFTRUE 62491
62465: LD_INT 26
62467: DOUBLE
62468: EQUAL
62469: IFTRUE 62491
62471: LD_INT 28
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62491
62477: LD_INT 29
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62491
62483: LD_INT 30
62485: DOUBLE
62486: EQUAL
62487: IFTRUE 62491
62489: GO 62547
62491: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62492: LD_ADDR_VAR 0 9
62496: PUSH
62497: LD_VAR 0 59
62501: PUSH
62502: LD_VAR 0 60
62506: PUSH
62507: LD_VAR 0 61
62511: PUSH
62512: LD_VAR 0 62
62516: PUSH
62517: LD_VAR 0 63
62521: PUSH
62522: LD_VAR 0 64
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: PUSH
62535: LD_VAR 0 4
62539: PUSH
62540: LD_INT 1
62542: PLUS
62543: ARRAY
62544: ST_TO_ADDR
62545: GO 62548
62547: POP
// temp_list2 = [ ] ;
62548: LD_ADDR_VAR 0 10
62552: PUSH
62553: EMPTY
62554: ST_TO_ADDR
// for i in temp_list do
62555: LD_ADDR_VAR 0 8
62559: PUSH
62560: LD_VAR 0 9
62564: PUSH
62565: FOR_IN
62566: IFFALSE 62618
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62568: LD_ADDR_VAR 0 10
62572: PUSH
62573: LD_VAR 0 10
62577: PUSH
62578: LD_VAR 0 8
62582: PUSH
62583: LD_INT 1
62585: ARRAY
62586: PUSH
62587: LD_VAR 0 2
62591: PLUS
62592: PUSH
62593: LD_VAR 0 8
62597: PUSH
62598: LD_INT 2
62600: ARRAY
62601: PUSH
62602: LD_VAR 0 3
62606: PLUS
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: ADD
62615: ST_TO_ADDR
62616: GO 62565
62618: POP
62619: POP
// result = temp_list2 ;
62620: LD_ADDR_VAR 0 7
62624: PUSH
62625: LD_VAR 0 10
62629: ST_TO_ADDR
// end ;
62630: LD_VAR 0 7
62634: RET
// export function EnemyInRange ( unit , dist ) ; begin
62635: LD_INT 0
62637: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62638: LD_ADDR_VAR 0 3
62642: PUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 255
62652: PPUSH
62653: LD_VAR 0 1
62657: PPUSH
62658: CALL_OW 250
62662: PPUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: CALL_OW 251
62672: PPUSH
62673: LD_VAR 0 2
62677: PPUSH
62678: CALL 36037 0 4
62682: PUSH
62683: LD_INT 4
62685: ARRAY
62686: ST_TO_ADDR
// end ;
62687: LD_VAR 0 3
62691: RET
// export function PlayerSeeMe ( unit ) ; begin
62692: LD_INT 0
62694: PPUSH
// result := See ( your_side , unit ) ;
62695: LD_ADDR_VAR 0 2
62699: PUSH
62700: LD_OWVAR 2
62704: PPUSH
62705: LD_VAR 0 1
62709: PPUSH
62710: CALL_OW 292
62714: ST_TO_ADDR
// end ;
62715: LD_VAR 0 2
62719: RET
// export function ReverseDir ( unit ) ; begin
62720: LD_INT 0
62722: PPUSH
// if not unit then
62723: LD_VAR 0 1
62727: NOT
62728: IFFALSE 62732
// exit ;
62730: GO 62755
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62732: LD_ADDR_VAR 0 2
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 254
62746: PUSH
62747: LD_INT 3
62749: PLUS
62750: PUSH
62751: LD_INT 6
62753: MOD
62754: ST_TO_ADDR
// end ;
62755: LD_VAR 0 2
62759: RET
// export function ReverseArray ( array ) ; var i ; begin
62760: LD_INT 0
62762: PPUSH
62763: PPUSH
// if not array then
62764: LD_VAR 0 1
62768: NOT
62769: IFFALSE 62773
// exit ;
62771: GO 62828
// result := [ ] ;
62773: LD_ADDR_VAR 0 2
62777: PUSH
62778: EMPTY
62779: ST_TO_ADDR
// for i := array downto 1 do
62780: LD_ADDR_VAR 0 3
62784: PUSH
62785: DOUBLE
62786: LD_VAR 0 1
62790: INC
62791: ST_TO_ADDR
62792: LD_INT 1
62794: PUSH
62795: FOR_DOWNTO
62796: IFFALSE 62826
// result := Join ( result , array [ i ] ) ;
62798: LD_ADDR_VAR 0 2
62802: PUSH
62803: LD_VAR 0 2
62807: PPUSH
62808: LD_VAR 0 1
62812: PUSH
62813: LD_VAR 0 3
62817: ARRAY
62818: PPUSH
62819: CALL 67472 0 2
62823: ST_TO_ADDR
62824: GO 62795
62826: POP
62827: POP
// end ;
62828: LD_VAR 0 2
62832: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62833: LD_INT 0
62835: PPUSH
62836: PPUSH
62837: PPUSH
62838: PPUSH
62839: PPUSH
62840: PPUSH
// if not unit or not hexes then
62841: LD_VAR 0 1
62845: NOT
62846: PUSH
62847: LD_VAR 0 2
62851: NOT
62852: OR
62853: IFFALSE 62857
// exit ;
62855: GO 62980
// dist := 9999 ;
62857: LD_ADDR_VAR 0 5
62861: PUSH
62862: LD_INT 9999
62864: ST_TO_ADDR
// for i = 1 to hexes do
62865: LD_ADDR_VAR 0 4
62869: PUSH
62870: DOUBLE
62871: LD_INT 1
62873: DEC
62874: ST_TO_ADDR
62875: LD_VAR 0 2
62879: PUSH
62880: FOR_TO
62881: IFFALSE 62968
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62883: LD_ADDR_VAR 0 6
62887: PUSH
62888: LD_VAR 0 1
62892: PPUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_VAR 0 4
62902: ARRAY
62903: PUSH
62904: LD_INT 1
62906: ARRAY
62907: PPUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_VAR 0 4
62917: ARRAY
62918: PUSH
62919: LD_INT 2
62921: ARRAY
62922: PPUSH
62923: CALL_OW 297
62927: ST_TO_ADDR
// if tdist < dist then
62928: LD_VAR 0 6
62932: PUSH
62933: LD_VAR 0 5
62937: LESS
62938: IFFALSE 62966
// begin hex := hexes [ i ] ;
62940: LD_ADDR_VAR 0 8
62944: PUSH
62945: LD_VAR 0 2
62949: PUSH
62950: LD_VAR 0 4
62954: ARRAY
62955: ST_TO_ADDR
// dist := tdist ;
62956: LD_ADDR_VAR 0 5
62960: PUSH
62961: LD_VAR 0 6
62965: ST_TO_ADDR
// end ; end ;
62966: GO 62880
62968: POP
62969: POP
// result := hex ;
62970: LD_ADDR_VAR 0 3
62974: PUSH
62975: LD_VAR 0 8
62979: ST_TO_ADDR
// end ;
62980: LD_VAR 0 3
62984: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62985: LD_INT 0
62987: PPUSH
62988: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62989: LD_VAR 0 1
62993: NOT
62994: PUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_INT 21
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 23
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PPUSH
63024: CALL_OW 69
63028: IN
63029: NOT
63030: OR
63031: IFFALSE 63035
// exit ;
63033: GO 63082
// for i = 1 to 3 do
63035: LD_ADDR_VAR 0 3
63039: PUSH
63040: DOUBLE
63041: LD_INT 1
63043: DEC
63044: ST_TO_ADDR
63045: LD_INT 3
63047: PUSH
63048: FOR_TO
63049: IFFALSE 63080
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63051: LD_VAR 0 1
63055: PPUSH
63056: CALL_OW 250
63060: PPUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 251
63070: PPUSH
63071: LD_INT 1
63073: PPUSH
63074: CALL_OW 453
63078: GO 63048
63080: POP
63081: POP
// end ;
63082: LD_VAR 0 2
63086: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63087: LD_INT 0
63089: PPUSH
63090: PPUSH
63091: PPUSH
63092: PPUSH
63093: PPUSH
63094: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63095: LD_VAR 0 1
63099: NOT
63100: PUSH
63101: LD_VAR 0 2
63105: NOT
63106: OR
63107: PUSH
63108: LD_VAR 0 1
63112: PPUSH
63113: CALL_OW 314
63117: OR
63118: IFFALSE 63122
// exit ;
63120: GO 63589
// if GetLives ( i ) < 250 then
63122: LD_VAR 0 4
63126: PPUSH
63127: CALL_OW 256
63131: PUSH
63132: LD_INT 250
63134: LESS
63135: IFFALSE 63148
// begin ComAutodestruct ( i ) ;
63137: LD_VAR 0 4
63141: PPUSH
63142: CALL 62985 0 1
// exit ;
63146: GO 63589
// end ; x := GetX ( enemy_unit ) ;
63148: LD_ADDR_VAR 0 7
63152: PUSH
63153: LD_VAR 0 2
63157: PPUSH
63158: CALL_OW 250
63162: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63163: LD_ADDR_VAR 0 8
63167: PUSH
63168: LD_VAR 0 2
63172: PPUSH
63173: CALL_OW 251
63177: ST_TO_ADDR
// if not x or not y then
63178: LD_VAR 0 7
63182: NOT
63183: PUSH
63184: LD_VAR 0 8
63188: NOT
63189: OR
63190: IFFALSE 63194
// exit ;
63192: GO 63589
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63194: LD_ADDR_VAR 0 6
63198: PUSH
63199: LD_VAR 0 7
63203: PPUSH
63204: LD_INT 0
63206: PPUSH
63207: LD_INT 4
63209: PPUSH
63210: CALL_OW 272
63214: PUSH
63215: LD_VAR 0 8
63219: PPUSH
63220: LD_INT 0
63222: PPUSH
63223: LD_INT 4
63225: PPUSH
63226: CALL_OW 273
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_VAR 0 7
63239: PPUSH
63240: LD_INT 1
63242: PPUSH
63243: LD_INT 4
63245: PPUSH
63246: CALL_OW 272
63250: PUSH
63251: LD_VAR 0 8
63255: PPUSH
63256: LD_INT 1
63258: PPUSH
63259: LD_INT 4
63261: PPUSH
63262: CALL_OW 273
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_VAR 0 7
63275: PPUSH
63276: LD_INT 2
63278: PPUSH
63279: LD_INT 4
63281: PPUSH
63282: CALL_OW 272
63286: PUSH
63287: LD_VAR 0 8
63291: PPUSH
63292: LD_INT 2
63294: PPUSH
63295: LD_INT 4
63297: PPUSH
63298: CALL_OW 273
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_VAR 0 7
63311: PPUSH
63312: LD_INT 3
63314: PPUSH
63315: LD_INT 4
63317: PPUSH
63318: CALL_OW 272
63322: PUSH
63323: LD_VAR 0 8
63327: PPUSH
63328: LD_INT 3
63330: PPUSH
63331: LD_INT 4
63333: PPUSH
63334: CALL_OW 273
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_VAR 0 7
63347: PPUSH
63348: LD_INT 4
63350: PPUSH
63351: LD_INT 4
63353: PPUSH
63354: CALL_OW 272
63358: PUSH
63359: LD_VAR 0 8
63363: PPUSH
63364: LD_INT 4
63366: PPUSH
63367: LD_INT 4
63369: PPUSH
63370: CALL_OW 273
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 7
63383: PPUSH
63384: LD_INT 5
63386: PPUSH
63387: LD_INT 4
63389: PPUSH
63390: CALL_OW 272
63394: PUSH
63395: LD_VAR 0 8
63399: PPUSH
63400: LD_INT 5
63402: PPUSH
63403: LD_INT 4
63405: PPUSH
63406: CALL_OW 273
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: ST_TO_ADDR
// for i = tmp downto 1 do
63423: LD_ADDR_VAR 0 4
63427: PUSH
63428: DOUBLE
63429: LD_VAR 0 6
63433: INC
63434: ST_TO_ADDR
63435: LD_INT 1
63437: PUSH
63438: FOR_DOWNTO
63439: IFFALSE 63540
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63441: LD_VAR 0 6
63445: PUSH
63446: LD_VAR 0 4
63450: ARRAY
63451: PUSH
63452: LD_INT 1
63454: ARRAY
63455: PPUSH
63456: LD_VAR 0 6
63460: PUSH
63461: LD_VAR 0 4
63465: ARRAY
63466: PUSH
63467: LD_INT 2
63469: ARRAY
63470: PPUSH
63471: CALL_OW 488
63475: NOT
63476: PUSH
63477: LD_VAR 0 6
63481: PUSH
63482: LD_VAR 0 4
63486: ARRAY
63487: PUSH
63488: LD_INT 1
63490: ARRAY
63491: PPUSH
63492: LD_VAR 0 6
63496: PUSH
63497: LD_VAR 0 4
63501: ARRAY
63502: PUSH
63503: LD_INT 2
63505: ARRAY
63506: PPUSH
63507: CALL_OW 428
63511: PUSH
63512: LD_INT 0
63514: NONEQUAL
63515: OR
63516: IFFALSE 63538
// tmp := Delete ( tmp , i ) ;
63518: LD_ADDR_VAR 0 6
63522: PUSH
63523: LD_VAR 0 6
63527: PPUSH
63528: LD_VAR 0 4
63532: PPUSH
63533: CALL_OW 3
63537: ST_TO_ADDR
63538: GO 63438
63540: POP
63541: POP
// j := GetClosestHex ( unit , tmp ) ;
63542: LD_ADDR_VAR 0 5
63546: PUSH
63547: LD_VAR 0 1
63551: PPUSH
63552: LD_VAR 0 6
63556: PPUSH
63557: CALL 62833 0 2
63561: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63562: LD_VAR 0 1
63566: PPUSH
63567: LD_VAR 0 5
63571: PUSH
63572: LD_INT 1
63574: ARRAY
63575: PPUSH
63576: LD_VAR 0 5
63580: PUSH
63581: LD_INT 2
63583: ARRAY
63584: PPUSH
63585: CALL_OW 111
// end ;
63589: LD_VAR 0 3
63593: RET
// export function PrepareApemanSoldier ( ) ; begin
63594: LD_INT 0
63596: PPUSH
// uc_nation := 0 ;
63597: LD_ADDR_OWVAR 21
63601: PUSH
63602: LD_INT 0
63604: ST_TO_ADDR
// hc_sex := sex_male ;
63605: LD_ADDR_OWVAR 27
63609: PUSH
63610: LD_INT 1
63612: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63613: LD_ADDR_OWVAR 28
63617: PUSH
63618: LD_INT 15
63620: ST_TO_ADDR
// hc_gallery :=  ;
63621: LD_ADDR_OWVAR 33
63625: PUSH
63626: LD_STRING 
63628: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63629: LD_ADDR_OWVAR 31
63633: PUSH
63634: LD_INT 0
63636: PPUSH
63637: LD_INT 3
63639: PPUSH
63640: CALL_OW 12
63644: PUSH
63645: LD_INT 0
63647: PPUSH
63648: LD_INT 3
63650: PPUSH
63651: CALL_OW 12
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// end ;
63668: LD_VAR 0 1
63672: RET
// export function PrepareApemanEngineer ( ) ; begin
63673: LD_INT 0
63675: PPUSH
// uc_nation := 0 ;
63676: LD_ADDR_OWVAR 21
63680: PUSH
63681: LD_INT 0
63683: ST_TO_ADDR
// hc_sex := sex_male ;
63684: LD_ADDR_OWVAR 27
63688: PUSH
63689: LD_INT 1
63691: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63692: LD_ADDR_OWVAR 28
63696: PUSH
63697: LD_INT 16
63699: ST_TO_ADDR
// hc_gallery :=  ;
63700: LD_ADDR_OWVAR 33
63704: PUSH
63705: LD_STRING 
63707: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63708: LD_ADDR_OWVAR 31
63712: PUSH
63713: LD_INT 0
63715: PPUSH
63716: LD_INT 3
63718: PPUSH
63719: CALL_OW 12
63723: PUSH
63724: LD_INT 0
63726: PPUSH
63727: LD_INT 3
63729: PPUSH
63730: CALL_OW 12
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// end ;
63747: LD_VAR 0 1
63751: RET
// export function PrepareApeman ( agressivity ) ; begin
63752: LD_INT 0
63754: PPUSH
// uc_side := 0 ;
63755: LD_ADDR_OWVAR 20
63759: PUSH
63760: LD_INT 0
63762: ST_TO_ADDR
// uc_nation := 0 ;
63763: LD_ADDR_OWVAR 21
63767: PUSH
63768: LD_INT 0
63770: ST_TO_ADDR
// hc_sex := sex_male ;
63771: LD_ADDR_OWVAR 27
63775: PUSH
63776: LD_INT 1
63778: ST_TO_ADDR
// hc_class := class_apeman ;
63779: LD_ADDR_OWVAR 28
63783: PUSH
63784: LD_INT 12
63786: ST_TO_ADDR
// hc_gallery :=  ;
63787: LD_ADDR_OWVAR 33
63791: PUSH
63792: LD_STRING 
63794: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63795: LD_ADDR_OWVAR 35
63799: PUSH
63800: LD_VAR 0 1
63804: NEG
63805: PPUSH
63806: LD_VAR 0 1
63810: PPUSH
63811: CALL_OW 12
63815: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63816: LD_ADDR_OWVAR 31
63820: PUSH
63821: LD_INT 0
63823: PPUSH
63824: LD_INT 3
63826: PPUSH
63827: CALL_OW 12
63831: PUSH
63832: LD_INT 0
63834: PPUSH
63835: LD_INT 3
63837: PPUSH
63838: CALL_OW 12
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: ST_TO_ADDR
// end ;
63855: LD_VAR 0 2
63859: RET
// export function PrepareTiger ( agressivity ) ; begin
63860: LD_INT 0
63862: PPUSH
// uc_side := 0 ;
63863: LD_ADDR_OWVAR 20
63867: PUSH
63868: LD_INT 0
63870: ST_TO_ADDR
// uc_nation := 0 ;
63871: LD_ADDR_OWVAR 21
63875: PUSH
63876: LD_INT 0
63878: ST_TO_ADDR
// hc_class := class_tiger ;
63879: LD_ADDR_OWVAR 28
63883: PUSH
63884: LD_INT 14
63886: ST_TO_ADDR
// hc_gallery :=  ;
63887: LD_ADDR_OWVAR 33
63891: PUSH
63892: LD_STRING 
63894: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63895: LD_ADDR_OWVAR 35
63899: PUSH
63900: LD_VAR 0 1
63904: NEG
63905: PPUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: CALL_OW 12
63915: ST_TO_ADDR
// end ;
63916: LD_VAR 0 2
63920: RET
// export function PrepareEnchidna ( ) ; begin
63921: LD_INT 0
63923: PPUSH
// uc_side := 0 ;
63924: LD_ADDR_OWVAR 20
63928: PUSH
63929: LD_INT 0
63931: ST_TO_ADDR
// uc_nation := 0 ;
63932: LD_ADDR_OWVAR 21
63936: PUSH
63937: LD_INT 0
63939: ST_TO_ADDR
// hc_class := class_baggie ;
63940: LD_ADDR_OWVAR 28
63944: PUSH
63945: LD_INT 13
63947: ST_TO_ADDR
// hc_gallery :=  ;
63948: LD_ADDR_OWVAR 33
63952: PUSH
63953: LD_STRING 
63955: ST_TO_ADDR
// end ;
63956: LD_VAR 0 1
63960: RET
// export function PrepareFrog ( ) ; begin
63961: LD_INT 0
63963: PPUSH
// uc_side := 0 ;
63964: LD_ADDR_OWVAR 20
63968: PUSH
63969: LD_INT 0
63971: ST_TO_ADDR
// uc_nation := 0 ;
63972: LD_ADDR_OWVAR 21
63976: PUSH
63977: LD_INT 0
63979: ST_TO_ADDR
// hc_class := class_frog ;
63980: LD_ADDR_OWVAR 28
63984: PUSH
63985: LD_INT 19
63987: ST_TO_ADDR
// hc_gallery :=  ;
63988: LD_ADDR_OWVAR 33
63992: PUSH
63993: LD_STRING 
63995: ST_TO_ADDR
// end ;
63996: LD_VAR 0 1
64000: RET
// export function PrepareFish ( ) ; begin
64001: LD_INT 0
64003: PPUSH
// uc_side := 0 ;
64004: LD_ADDR_OWVAR 20
64008: PUSH
64009: LD_INT 0
64011: ST_TO_ADDR
// uc_nation := 0 ;
64012: LD_ADDR_OWVAR 21
64016: PUSH
64017: LD_INT 0
64019: ST_TO_ADDR
// hc_class := class_fish ;
64020: LD_ADDR_OWVAR 28
64024: PUSH
64025: LD_INT 20
64027: ST_TO_ADDR
// hc_gallery :=  ;
64028: LD_ADDR_OWVAR 33
64032: PUSH
64033: LD_STRING 
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 1
64040: RET
// export function PrepareBird ( ) ; begin
64041: LD_INT 0
64043: PPUSH
// uc_side := 0 ;
64044: LD_ADDR_OWVAR 20
64048: PUSH
64049: LD_INT 0
64051: ST_TO_ADDR
// uc_nation := 0 ;
64052: LD_ADDR_OWVAR 21
64056: PUSH
64057: LD_INT 0
64059: ST_TO_ADDR
// hc_class := class_phororhacos ;
64060: LD_ADDR_OWVAR 28
64064: PUSH
64065: LD_INT 18
64067: ST_TO_ADDR
// hc_gallery :=  ;
64068: LD_ADDR_OWVAR 33
64072: PUSH
64073: LD_STRING 
64075: ST_TO_ADDR
// end ;
64076: LD_VAR 0 1
64080: RET
// export function PrepareHorse ( ) ; begin
64081: LD_INT 0
64083: PPUSH
// uc_side := 0 ;
64084: LD_ADDR_OWVAR 20
64088: PUSH
64089: LD_INT 0
64091: ST_TO_ADDR
// uc_nation := 0 ;
64092: LD_ADDR_OWVAR 21
64096: PUSH
64097: LD_INT 0
64099: ST_TO_ADDR
// hc_class := class_horse ;
64100: LD_ADDR_OWVAR 28
64104: PUSH
64105: LD_INT 21
64107: ST_TO_ADDR
// hc_gallery :=  ;
64108: LD_ADDR_OWVAR 33
64112: PUSH
64113: LD_STRING 
64115: ST_TO_ADDR
// end ;
64116: LD_VAR 0 1
64120: RET
// export function PrepareMastodont ( ) ; begin
64121: LD_INT 0
64123: PPUSH
// uc_side := 0 ;
64124: LD_ADDR_OWVAR 20
64128: PUSH
64129: LD_INT 0
64131: ST_TO_ADDR
// uc_nation := 0 ;
64132: LD_ADDR_OWVAR 21
64136: PUSH
64137: LD_INT 0
64139: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64140: LD_ADDR_OWVAR 37
64144: PUSH
64145: LD_INT 31
64147: ST_TO_ADDR
// vc_control := control_rider ;
64148: LD_ADDR_OWVAR 38
64152: PUSH
64153: LD_INT 4
64155: ST_TO_ADDR
// end ;
64156: LD_VAR 0 1
64160: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64161: LD_INT 0
64163: PPUSH
64164: PPUSH
64165: PPUSH
// uc_side = 0 ;
64166: LD_ADDR_OWVAR 20
64170: PUSH
64171: LD_INT 0
64173: ST_TO_ADDR
// uc_nation = 0 ;
64174: LD_ADDR_OWVAR 21
64178: PUSH
64179: LD_INT 0
64181: ST_TO_ADDR
// InitHc_All ( ) ;
64182: CALL_OW 584
// InitVc ;
64186: CALL_OW 20
// if mastodonts then
64190: LD_VAR 0 6
64194: IFFALSE 64261
// for i = 1 to mastodonts do
64196: LD_ADDR_VAR 0 11
64200: PUSH
64201: DOUBLE
64202: LD_INT 1
64204: DEC
64205: ST_TO_ADDR
64206: LD_VAR 0 6
64210: PUSH
64211: FOR_TO
64212: IFFALSE 64259
// begin vc_chassis := 31 ;
64214: LD_ADDR_OWVAR 37
64218: PUSH
64219: LD_INT 31
64221: ST_TO_ADDR
// vc_control := control_rider ;
64222: LD_ADDR_OWVAR 38
64226: PUSH
64227: LD_INT 4
64229: ST_TO_ADDR
// animal := CreateVehicle ;
64230: LD_ADDR_VAR 0 12
64234: PUSH
64235: CALL_OW 45
64239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64240: LD_VAR 0 12
64244: PPUSH
64245: LD_VAR 0 8
64249: PPUSH
64250: LD_INT 0
64252: PPUSH
64253: CALL 66389 0 3
// end ;
64257: GO 64211
64259: POP
64260: POP
// if horses then
64261: LD_VAR 0 5
64265: IFFALSE 64332
// for i = 1 to horses do
64267: LD_ADDR_VAR 0 11
64271: PUSH
64272: DOUBLE
64273: LD_INT 1
64275: DEC
64276: ST_TO_ADDR
64277: LD_VAR 0 5
64281: PUSH
64282: FOR_TO
64283: IFFALSE 64330
// begin hc_class := 21 ;
64285: LD_ADDR_OWVAR 28
64289: PUSH
64290: LD_INT 21
64292: ST_TO_ADDR
// hc_gallery :=  ;
64293: LD_ADDR_OWVAR 33
64297: PUSH
64298: LD_STRING 
64300: ST_TO_ADDR
// animal := CreateHuman ;
64301: LD_ADDR_VAR 0 12
64305: PUSH
64306: CALL_OW 44
64310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64311: LD_VAR 0 12
64315: PPUSH
64316: LD_VAR 0 8
64320: PPUSH
64321: LD_INT 0
64323: PPUSH
64324: CALL 66389 0 3
// end ;
64328: GO 64282
64330: POP
64331: POP
// if birds then
64332: LD_VAR 0 1
64336: IFFALSE 64403
// for i = 1 to birds do
64338: LD_ADDR_VAR 0 11
64342: PUSH
64343: DOUBLE
64344: LD_INT 1
64346: DEC
64347: ST_TO_ADDR
64348: LD_VAR 0 1
64352: PUSH
64353: FOR_TO
64354: IFFALSE 64401
// begin hc_class = 18 ;
64356: LD_ADDR_OWVAR 28
64360: PUSH
64361: LD_INT 18
64363: ST_TO_ADDR
// hc_gallery =  ;
64364: LD_ADDR_OWVAR 33
64368: PUSH
64369: LD_STRING 
64371: ST_TO_ADDR
// animal := CreateHuman ;
64372: LD_ADDR_VAR 0 12
64376: PUSH
64377: CALL_OW 44
64381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64382: LD_VAR 0 12
64386: PPUSH
64387: LD_VAR 0 8
64391: PPUSH
64392: LD_INT 0
64394: PPUSH
64395: CALL 66389 0 3
// end ;
64399: GO 64353
64401: POP
64402: POP
// if tigers then
64403: LD_VAR 0 2
64407: IFFALSE 64491
// for i = 1 to tigers do
64409: LD_ADDR_VAR 0 11
64413: PUSH
64414: DOUBLE
64415: LD_INT 1
64417: DEC
64418: ST_TO_ADDR
64419: LD_VAR 0 2
64423: PUSH
64424: FOR_TO
64425: IFFALSE 64489
// begin hc_class = class_tiger ;
64427: LD_ADDR_OWVAR 28
64431: PUSH
64432: LD_INT 14
64434: ST_TO_ADDR
// hc_gallery =  ;
64435: LD_ADDR_OWVAR 33
64439: PUSH
64440: LD_STRING 
64442: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64443: LD_ADDR_OWVAR 35
64447: PUSH
64448: LD_INT 7
64450: NEG
64451: PPUSH
64452: LD_INT 7
64454: PPUSH
64455: CALL_OW 12
64459: ST_TO_ADDR
// animal := CreateHuman ;
64460: LD_ADDR_VAR 0 12
64464: PUSH
64465: CALL_OW 44
64469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64470: LD_VAR 0 12
64474: PPUSH
64475: LD_VAR 0 8
64479: PPUSH
64480: LD_INT 0
64482: PPUSH
64483: CALL 66389 0 3
// end ;
64487: GO 64424
64489: POP
64490: POP
// if apemans then
64491: LD_VAR 0 3
64495: IFFALSE 64618
// for i = 1 to apemans do
64497: LD_ADDR_VAR 0 11
64501: PUSH
64502: DOUBLE
64503: LD_INT 1
64505: DEC
64506: ST_TO_ADDR
64507: LD_VAR 0 3
64511: PUSH
64512: FOR_TO
64513: IFFALSE 64616
// begin hc_class = class_apeman ;
64515: LD_ADDR_OWVAR 28
64519: PUSH
64520: LD_INT 12
64522: ST_TO_ADDR
// hc_gallery =  ;
64523: LD_ADDR_OWVAR 33
64527: PUSH
64528: LD_STRING 
64530: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64531: LD_ADDR_OWVAR 35
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PPUSH
64540: LD_INT 2
64542: PPUSH
64543: CALL_OW 12
64547: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64548: LD_ADDR_OWVAR 31
64552: PUSH
64553: LD_INT 1
64555: PPUSH
64556: LD_INT 3
64558: PPUSH
64559: CALL_OW 12
64563: PUSH
64564: LD_INT 1
64566: PPUSH
64567: LD_INT 3
64569: PPUSH
64570: CALL_OW 12
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: ST_TO_ADDR
// animal := CreateHuman ;
64587: LD_ADDR_VAR 0 12
64591: PUSH
64592: CALL_OW 44
64596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64597: LD_VAR 0 12
64601: PPUSH
64602: LD_VAR 0 8
64606: PPUSH
64607: LD_INT 0
64609: PPUSH
64610: CALL 66389 0 3
// end ;
64614: GO 64512
64616: POP
64617: POP
// if enchidnas then
64618: LD_VAR 0 4
64622: IFFALSE 64689
// for i = 1 to enchidnas do
64624: LD_ADDR_VAR 0 11
64628: PUSH
64629: DOUBLE
64630: LD_INT 1
64632: DEC
64633: ST_TO_ADDR
64634: LD_VAR 0 4
64638: PUSH
64639: FOR_TO
64640: IFFALSE 64687
// begin hc_class = 13 ;
64642: LD_ADDR_OWVAR 28
64646: PUSH
64647: LD_INT 13
64649: ST_TO_ADDR
// hc_gallery =  ;
64650: LD_ADDR_OWVAR 33
64654: PUSH
64655: LD_STRING 
64657: ST_TO_ADDR
// animal := CreateHuman ;
64658: LD_ADDR_VAR 0 12
64662: PUSH
64663: CALL_OW 44
64667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64668: LD_VAR 0 12
64672: PPUSH
64673: LD_VAR 0 8
64677: PPUSH
64678: LD_INT 0
64680: PPUSH
64681: CALL 66389 0 3
// end ;
64685: GO 64639
64687: POP
64688: POP
// if fishes then
64689: LD_VAR 0 7
64693: IFFALSE 64760
// for i = 1 to fishes do
64695: LD_ADDR_VAR 0 11
64699: PUSH
64700: DOUBLE
64701: LD_INT 1
64703: DEC
64704: ST_TO_ADDR
64705: LD_VAR 0 7
64709: PUSH
64710: FOR_TO
64711: IFFALSE 64758
// begin hc_class = 20 ;
64713: LD_ADDR_OWVAR 28
64717: PUSH
64718: LD_INT 20
64720: ST_TO_ADDR
// hc_gallery =  ;
64721: LD_ADDR_OWVAR 33
64725: PUSH
64726: LD_STRING 
64728: ST_TO_ADDR
// animal := CreateHuman ;
64729: LD_ADDR_VAR 0 12
64733: PUSH
64734: CALL_OW 44
64738: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64739: LD_VAR 0 12
64743: PPUSH
64744: LD_VAR 0 9
64748: PPUSH
64749: LD_INT 0
64751: PPUSH
64752: CALL 66389 0 3
// end ;
64756: GO 64710
64758: POP
64759: POP
// end ;
64760: LD_VAR 0 10
64764: RET
// export function WantHeal ( sci , unit ) ; begin
64765: LD_INT 0
64767: PPUSH
// if GetTaskList ( sci ) > 0 then
64768: LD_VAR 0 1
64772: PPUSH
64773: CALL_OW 437
64777: PUSH
64778: LD_INT 0
64780: GREATER
64781: IFFALSE 64851
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64783: LD_VAR 0 1
64787: PPUSH
64788: CALL_OW 437
64792: PUSH
64793: LD_INT 1
64795: ARRAY
64796: PUSH
64797: LD_INT 1
64799: ARRAY
64800: PUSH
64801: LD_STRING l
64803: EQUAL
64804: PUSH
64805: LD_VAR 0 1
64809: PPUSH
64810: CALL_OW 437
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PUSH
64819: LD_INT 4
64821: ARRAY
64822: PUSH
64823: LD_VAR 0 2
64827: EQUAL
64828: AND
64829: IFFALSE 64841
// result := true else
64831: LD_ADDR_VAR 0 3
64835: PUSH
64836: LD_INT 1
64838: ST_TO_ADDR
64839: GO 64849
// result := false ;
64841: LD_ADDR_VAR 0 3
64845: PUSH
64846: LD_INT 0
64848: ST_TO_ADDR
// end else
64849: GO 64859
// result := false ;
64851: LD_ADDR_VAR 0 3
64855: PUSH
64856: LD_INT 0
64858: ST_TO_ADDR
// end ;
64859: LD_VAR 0 3
64863: RET
// export function HealTarget ( sci ) ; begin
64864: LD_INT 0
64866: PPUSH
// if not sci then
64867: LD_VAR 0 1
64871: NOT
64872: IFFALSE 64876
// exit ;
64874: GO 64941
// result := 0 ;
64876: LD_ADDR_VAR 0 2
64880: PUSH
64881: LD_INT 0
64883: ST_TO_ADDR
// if GetTaskList ( sci ) then
64884: LD_VAR 0 1
64888: PPUSH
64889: CALL_OW 437
64893: IFFALSE 64941
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 437
64904: PUSH
64905: LD_INT 1
64907: ARRAY
64908: PUSH
64909: LD_INT 1
64911: ARRAY
64912: PUSH
64913: LD_STRING l
64915: EQUAL
64916: IFFALSE 64941
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64918: LD_ADDR_VAR 0 2
64922: PUSH
64923: LD_VAR 0 1
64927: PPUSH
64928: CALL_OW 437
64932: PUSH
64933: LD_INT 1
64935: ARRAY
64936: PUSH
64937: LD_INT 4
64939: ARRAY
64940: ST_TO_ADDR
// end ;
64941: LD_VAR 0 2
64945: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64946: LD_INT 0
64948: PPUSH
64949: PPUSH
64950: PPUSH
64951: PPUSH
// if not base_units then
64952: LD_VAR 0 1
64956: NOT
64957: IFFALSE 64961
// exit ;
64959: GO 65048
// result := false ;
64961: LD_ADDR_VAR 0 2
64965: PUSH
64966: LD_INT 0
64968: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64969: LD_ADDR_VAR 0 5
64973: PUSH
64974: LD_VAR 0 1
64978: PPUSH
64979: LD_INT 21
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PPUSH
64989: CALL_OW 72
64993: ST_TO_ADDR
// if not tmp then
64994: LD_VAR 0 5
64998: NOT
64999: IFFALSE 65003
// exit ;
65001: GO 65048
// for i in tmp do
65003: LD_ADDR_VAR 0 3
65007: PUSH
65008: LD_VAR 0 5
65012: PUSH
65013: FOR_IN
65014: IFFALSE 65046
// begin result := EnemyInRange ( i , 22 ) ;
65016: LD_ADDR_VAR 0 2
65020: PUSH
65021: LD_VAR 0 3
65025: PPUSH
65026: LD_INT 22
65028: PPUSH
65029: CALL 62635 0 2
65033: ST_TO_ADDR
// if result then
65034: LD_VAR 0 2
65038: IFFALSE 65044
// exit ;
65040: POP
65041: POP
65042: GO 65048
// end ;
65044: GO 65013
65046: POP
65047: POP
// end ;
65048: LD_VAR 0 2
65052: RET
// export function FilterByTag ( units , tag ) ; begin
65053: LD_INT 0
65055: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65056: LD_ADDR_VAR 0 3
65060: PUSH
65061: LD_VAR 0 1
65065: PPUSH
65066: LD_INT 120
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PPUSH
65078: CALL_OW 72
65082: ST_TO_ADDR
// end ;
65083: LD_VAR 0 3
65087: RET
// export function IsDriver ( un ) ; begin
65088: LD_INT 0
65090: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65091: LD_ADDR_VAR 0 2
65095: PUSH
65096: LD_VAR 0 1
65100: PUSH
65101: LD_INT 55
65103: PUSH
65104: EMPTY
65105: LIST
65106: PPUSH
65107: CALL_OW 69
65111: IN
65112: ST_TO_ADDR
// end ;
65113: LD_VAR 0 2
65117: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65118: LD_INT 0
65120: PPUSH
65121: PPUSH
// list := [ ] ;
65122: LD_ADDR_VAR 0 5
65126: PUSH
65127: EMPTY
65128: ST_TO_ADDR
// case d of 0 :
65129: LD_VAR 0 3
65133: PUSH
65134: LD_INT 0
65136: DOUBLE
65137: EQUAL
65138: IFTRUE 65142
65140: GO 65275
65142: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65143: LD_ADDR_VAR 0 5
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_INT 4
65155: MINUS
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 4
65164: MINUS
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_INT 3
65181: MINUS
65182: PUSH
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_INT 4
65203: PLUS
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 4
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: PUSH
65218: LD_VAR 0 1
65222: PUSH
65223: LD_INT 3
65225: PLUS
65226: PUSH
65227: LD_VAR 0 2
65231: PUSH
65232: LD_INT 3
65234: PLUS
65235: PUSH
65236: LD_INT 5
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: LIST
65243: PUSH
65244: LD_VAR 0 1
65248: PUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_INT 4
65256: PLUS
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: LIST
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: ST_TO_ADDR
// end ; 1 :
65273: GO 65973
65275: LD_INT 1
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65283
65281: GO 65416
65283: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65284: LD_ADDR_VAR 0 5
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_VAR 0 2
65298: PUSH
65299: LD_INT 4
65301: MINUS
65302: PUSH
65303: LD_INT 3
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: LIST
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: LD_INT 3
65318: MINUS
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: LD_INT 3
65327: MINUS
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_INT 4
65344: MINUS
65345: PUSH
65346: LD_VAR 0 2
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: PUSH
65359: LD_VAR 0 1
65363: PUSH
65364: LD_VAR 0 2
65368: PUSH
65369: LD_INT 3
65371: PLUS
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: PUSH
65381: LD_VAR 0 1
65385: PUSH
65386: LD_INT 4
65388: PLUS
65389: PUSH
65390: LD_VAR 0 2
65394: PUSH
65395: LD_INT 4
65397: PLUS
65398: PUSH
65399: LD_INT 5
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: ST_TO_ADDR
// end ; 2 :
65414: GO 65973
65416: LD_INT 2
65418: DOUBLE
65419: EQUAL
65420: IFTRUE 65424
65422: GO 65553
65424: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65425: LD_ADDR_VAR 0 5
65429: PUSH
65430: LD_VAR 0 1
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_INT 3
65442: MINUS
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: PUSH
65452: LD_VAR 0 1
65456: PUSH
65457: LD_INT 4
65459: PLUS
65460: PUSH
65461: LD_VAR 0 2
65465: PUSH
65466: LD_INT 4
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: LD_VAR 0 1
65478: PUSH
65479: LD_VAR 0 2
65483: PUSH
65484: LD_INT 4
65486: PLUS
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: PUSH
65496: LD_VAR 0 1
65500: PUSH
65501: LD_INT 3
65503: MINUS
65504: PUSH
65505: LD_VAR 0 2
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: PUSH
65518: LD_VAR 0 1
65522: PUSH
65523: LD_INT 4
65525: MINUS
65526: PUSH
65527: LD_VAR 0 2
65531: PUSH
65532: LD_INT 4
65534: MINUS
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: ST_TO_ADDR
// end ; 3 :
65551: GO 65973
65553: LD_INT 3
65555: DOUBLE
65556: EQUAL
65557: IFTRUE 65561
65559: GO 65694
65561: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65562: LD_ADDR_VAR 0 5
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_INT 3
65574: PLUS
65575: PUSH
65576: LD_VAR 0 2
65580: PUSH
65581: LD_INT 4
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: PUSH
65589: LD_VAR 0 1
65593: PUSH
65594: LD_INT 4
65596: PLUS
65597: PUSH
65598: LD_VAR 0 2
65602: PUSH
65603: LD_INT 4
65605: PLUS
65606: PUSH
65607: LD_INT 5
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: LD_VAR 0 1
65619: PUSH
65620: LD_INT 4
65622: MINUS
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: PUSH
65637: LD_VAR 0 1
65641: PUSH
65642: LD_VAR 0 2
65646: PUSH
65647: LD_INT 4
65649: MINUS
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: PUSH
65659: LD_VAR 0 1
65663: PUSH
65664: LD_INT 3
65666: MINUS
65667: PUSH
65668: LD_VAR 0 2
65672: PUSH
65673: LD_INT 3
65675: MINUS
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: ST_TO_ADDR
// end ; 4 :
65692: GO 65973
65694: LD_INT 4
65696: DOUBLE
65697: EQUAL
65698: IFTRUE 65702
65700: GO 65835
65702: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65703: LD_ADDR_VAR 0 5
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_INT 4
65720: PLUS
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_INT 3
65737: PLUS
65738: PUSH
65739: LD_VAR 0 2
65743: PUSH
65744: LD_INT 3
65746: PLUS
65747: PUSH
65748: LD_INT 5
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: LD_VAR 0 1
65760: PUSH
65761: LD_INT 4
65763: PLUS
65764: PUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_INT 4
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: LD_VAR 0 1
65782: PUSH
65783: LD_VAR 0 2
65787: PUSH
65788: LD_INT 3
65790: MINUS
65791: PUSH
65792: LD_INT 3
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: LD_INT 4
65807: MINUS
65808: PUSH
65809: LD_VAR 0 2
65813: PUSH
65814: LD_INT 4
65816: MINUS
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: ST_TO_ADDR
// end ; 5 :
65833: GO 65973
65835: LD_INT 5
65837: DOUBLE
65838: EQUAL
65839: IFTRUE 65843
65841: GO 65972
65843: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65844: LD_ADDR_VAR 0 5
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 4
65856: MINUS
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_VAR 0 2
65880: PUSH
65881: LD_INT 4
65883: MINUS
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: LD_VAR 0 1
65897: PUSH
65898: LD_INT 4
65900: PLUS
65901: PUSH
65902: LD_VAR 0 2
65906: PUSH
65907: LD_INT 4
65909: PLUS
65910: PUSH
65911: LD_INT 5
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: PUSH
65919: LD_VAR 0 1
65923: PUSH
65924: LD_INT 3
65926: PLUS
65927: PUSH
65928: LD_VAR 0 2
65932: PUSH
65933: LD_INT 4
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: PUSH
65941: LD_VAR 0 1
65945: PUSH
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 3
65953: PLUS
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: ST_TO_ADDR
// end ; end ;
65970: GO 65973
65972: POP
// result := list ;
65973: LD_ADDR_VAR 0 4
65977: PUSH
65978: LD_VAR 0 5
65982: ST_TO_ADDR
// end ;
65983: LD_VAR 0 4
65987: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65988: LD_INT 0
65990: PPUSH
65991: PPUSH
65992: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65993: LD_VAR 0 1
65997: NOT
65998: PUSH
65999: LD_VAR 0 2
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: LD_INT 3
66012: PUSH
66013: LD_INT 4
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: IN
66022: NOT
66023: OR
66024: IFFALSE 66028
// exit ;
66026: GO 66111
// tmp := [ ] ;
66028: LD_ADDR_VAR 0 5
66032: PUSH
66033: EMPTY
66034: ST_TO_ADDR
// for i in units do
66035: LD_ADDR_VAR 0 4
66039: PUSH
66040: LD_VAR 0 1
66044: PUSH
66045: FOR_IN
66046: IFFALSE 66080
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66048: LD_ADDR_VAR 0 5
66052: PUSH
66053: LD_VAR 0 5
66057: PPUSH
66058: LD_VAR 0 4
66062: PPUSH
66063: LD_VAR 0 2
66067: PPUSH
66068: CALL_OW 259
66072: PPUSH
66073: CALL 67472 0 2
66077: ST_TO_ADDR
66078: GO 66045
66080: POP
66081: POP
// if not tmp then
66082: LD_VAR 0 5
66086: NOT
66087: IFFALSE 66091
// exit ;
66089: GO 66111
// result := SortListByListDesc ( units , tmp ) ;
66091: LD_ADDR_VAR 0 3
66095: PUSH
66096: LD_VAR 0 1
66100: PPUSH
66101: LD_VAR 0 5
66105: PPUSH
66106: CALL_OW 77
66110: ST_TO_ADDR
// end ;
66111: LD_VAR 0 3
66115: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66116: LD_INT 0
66118: PPUSH
66119: PPUSH
66120: PPUSH
// result := false ;
66121: LD_ADDR_VAR 0 3
66125: PUSH
66126: LD_INT 0
66128: ST_TO_ADDR
// if not building then
66129: LD_VAR 0 2
66133: NOT
66134: IFFALSE 66138
// exit ;
66136: GO 66276
// x := GetX ( building ) ;
66138: LD_ADDR_VAR 0 4
66142: PUSH
66143: LD_VAR 0 2
66147: PPUSH
66148: CALL_OW 250
66152: ST_TO_ADDR
// y := GetY ( building ) ;
66153: LD_ADDR_VAR 0 5
66157: PUSH
66158: LD_VAR 0 2
66162: PPUSH
66163: CALL_OW 251
66167: ST_TO_ADDR
// if not x or not y then
66168: LD_VAR 0 4
66172: NOT
66173: PUSH
66174: LD_VAR 0 5
66178: NOT
66179: OR
66180: IFFALSE 66184
// exit ;
66182: GO 66276
// if GetTaskList ( unit ) then
66184: LD_VAR 0 1
66188: PPUSH
66189: CALL_OW 437
66193: IFFALSE 66276
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66195: LD_STRING e
66197: PUSH
66198: LD_VAR 0 1
66202: PPUSH
66203: CALL_OW 437
66207: PUSH
66208: LD_INT 1
66210: ARRAY
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: EQUAL
66216: PUSH
66217: LD_VAR 0 4
66221: PUSH
66222: LD_VAR 0 1
66226: PPUSH
66227: CALL_OW 437
66231: PUSH
66232: LD_INT 1
66234: ARRAY
66235: PUSH
66236: LD_INT 2
66238: ARRAY
66239: EQUAL
66240: AND
66241: PUSH
66242: LD_VAR 0 5
66246: PUSH
66247: LD_VAR 0 1
66251: PPUSH
66252: CALL_OW 437
66256: PUSH
66257: LD_INT 1
66259: ARRAY
66260: PUSH
66261: LD_INT 3
66263: ARRAY
66264: EQUAL
66265: AND
66266: IFFALSE 66276
// result := true end ;
66268: LD_ADDR_VAR 0 3
66272: PUSH
66273: LD_INT 1
66275: ST_TO_ADDR
// end ;
66276: LD_VAR 0 3
66280: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66281: LD_INT 0
66283: PPUSH
// result := false ;
66284: LD_ADDR_VAR 0 4
66288: PUSH
66289: LD_INT 0
66291: ST_TO_ADDR
// if GetTaskList ( unit ) then
66292: LD_VAR 0 1
66296: PPUSH
66297: CALL_OW 437
66301: IFFALSE 66384
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66303: LD_STRING M
66305: PUSH
66306: LD_VAR 0 1
66310: PPUSH
66311: CALL_OW 437
66315: PUSH
66316: LD_INT 1
66318: ARRAY
66319: PUSH
66320: LD_INT 1
66322: ARRAY
66323: EQUAL
66324: PUSH
66325: LD_VAR 0 2
66329: PUSH
66330: LD_VAR 0 1
66334: PPUSH
66335: CALL_OW 437
66339: PUSH
66340: LD_INT 1
66342: ARRAY
66343: PUSH
66344: LD_INT 2
66346: ARRAY
66347: EQUAL
66348: AND
66349: PUSH
66350: LD_VAR 0 3
66354: PUSH
66355: LD_VAR 0 1
66359: PPUSH
66360: CALL_OW 437
66364: PUSH
66365: LD_INT 1
66367: ARRAY
66368: PUSH
66369: LD_INT 3
66371: ARRAY
66372: EQUAL
66373: AND
66374: IFFALSE 66384
// result := true ;
66376: LD_ADDR_VAR 0 4
66380: PUSH
66381: LD_INT 1
66383: ST_TO_ADDR
// end ; end ;
66384: LD_VAR 0 4
66388: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66389: LD_INT 0
66391: PPUSH
66392: PPUSH
66393: PPUSH
66394: PPUSH
// if not unit or not area then
66395: LD_VAR 0 1
66399: NOT
66400: PUSH
66401: LD_VAR 0 2
66405: NOT
66406: OR
66407: IFFALSE 66411
// exit ;
66409: GO 66575
// tmp := AreaToList ( area , i ) ;
66411: LD_ADDR_VAR 0 6
66415: PUSH
66416: LD_VAR 0 2
66420: PPUSH
66421: LD_VAR 0 5
66425: PPUSH
66426: CALL_OW 517
66430: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66431: LD_ADDR_VAR 0 5
66435: PUSH
66436: DOUBLE
66437: LD_INT 1
66439: DEC
66440: ST_TO_ADDR
66441: LD_VAR 0 6
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PUSH
66450: FOR_TO
66451: IFFALSE 66573
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66453: LD_ADDR_VAR 0 7
66457: PUSH
66458: LD_VAR 0 6
66462: PUSH
66463: LD_INT 1
66465: ARRAY
66466: PUSH
66467: LD_VAR 0 5
66471: ARRAY
66472: PUSH
66473: LD_VAR 0 6
66477: PUSH
66478: LD_INT 2
66480: ARRAY
66481: PUSH
66482: LD_VAR 0 5
66486: ARRAY
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66492: LD_VAR 0 7
66496: PUSH
66497: LD_INT 1
66499: ARRAY
66500: PPUSH
66501: LD_VAR 0 7
66505: PUSH
66506: LD_INT 2
66508: ARRAY
66509: PPUSH
66510: CALL_OW 428
66514: PUSH
66515: LD_INT 0
66517: EQUAL
66518: IFFALSE 66571
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66520: LD_VAR 0 1
66524: PPUSH
66525: LD_VAR 0 7
66529: PUSH
66530: LD_INT 1
66532: ARRAY
66533: PPUSH
66534: LD_VAR 0 7
66538: PUSH
66539: LD_INT 2
66541: ARRAY
66542: PPUSH
66543: LD_VAR 0 3
66547: PPUSH
66548: CALL_OW 48
// result := IsPlaced ( unit ) ;
66552: LD_ADDR_VAR 0 4
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 305
66566: ST_TO_ADDR
// exit ;
66567: POP
66568: POP
66569: GO 66575
// end ; end ;
66571: GO 66450
66573: POP
66574: POP
// end ;
66575: LD_VAR 0 4
66579: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66580: LD_INT 0
66582: PPUSH
66583: PPUSH
66584: PPUSH
// if not side or side > 8 then
66585: LD_VAR 0 1
66589: NOT
66590: PUSH
66591: LD_VAR 0 1
66595: PUSH
66596: LD_INT 8
66598: GREATER
66599: OR
66600: IFFALSE 66604
// exit ;
66602: GO 66791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66604: LD_ADDR_VAR 0 4
66608: PUSH
66609: LD_INT 22
66611: PUSH
66612: LD_VAR 0 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 21
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PPUSH
66635: CALL_OW 69
66639: ST_TO_ADDR
// if not tmp then
66640: LD_VAR 0 4
66644: NOT
66645: IFFALSE 66649
// exit ;
66647: GO 66791
// enable_addtolog := true ;
66649: LD_ADDR_OWVAR 81
66653: PUSH
66654: LD_INT 1
66656: ST_TO_ADDR
// AddToLog ( [ ) ;
66657: LD_STRING [
66659: PPUSH
66660: CALL_OW 561
// for i in tmp do
66664: LD_ADDR_VAR 0 3
66668: PUSH
66669: LD_VAR 0 4
66673: PUSH
66674: FOR_IN
66675: IFFALSE 66782
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66677: LD_STRING [
66679: PUSH
66680: LD_VAR 0 3
66684: PPUSH
66685: CALL_OW 266
66689: STR
66690: PUSH
66691: LD_STRING , 
66693: STR
66694: PUSH
66695: LD_VAR 0 3
66699: PPUSH
66700: CALL_OW 250
66704: STR
66705: PUSH
66706: LD_STRING , 
66708: STR
66709: PUSH
66710: LD_VAR 0 3
66714: PPUSH
66715: CALL_OW 251
66719: STR
66720: PUSH
66721: LD_STRING , 
66723: STR
66724: PUSH
66725: LD_VAR 0 3
66729: PPUSH
66730: CALL_OW 254
66734: STR
66735: PUSH
66736: LD_STRING , 
66738: STR
66739: PUSH
66740: LD_VAR 0 3
66744: PPUSH
66745: LD_INT 1
66747: PPUSH
66748: CALL_OW 268
66752: STR
66753: PUSH
66754: LD_STRING , 
66756: STR
66757: PUSH
66758: LD_VAR 0 3
66762: PPUSH
66763: LD_INT 2
66765: PPUSH
66766: CALL_OW 268
66770: STR
66771: PUSH
66772: LD_STRING ],
66774: STR
66775: PPUSH
66776: CALL_OW 561
// end ;
66780: GO 66674
66782: POP
66783: POP
// AddToLog ( ]; ) ;
66784: LD_STRING ];
66786: PPUSH
66787: CALL_OW 561
// end ;
66791: LD_VAR 0 2
66795: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66796: LD_INT 0
66798: PPUSH
66799: PPUSH
66800: PPUSH
66801: PPUSH
66802: PPUSH
// if not area or not rate or not max then
66803: LD_VAR 0 1
66807: NOT
66808: PUSH
66809: LD_VAR 0 2
66813: NOT
66814: OR
66815: PUSH
66816: LD_VAR 0 4
66820: NOT
66821: OR
66822: IFFALSE 66826
// exit ;
66824: GO 67015
// while 1 do
66826: LD_INT 1
66828: IFFALSE 67015
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66830: LD_ADDR_VAR 0 9
66834: PUSH
66835: LD_VAR 0 1
66839: PPUSH
66840: LD_INT 1
66842: PPUSH
66843: CALL_OW 287
66847: PUSH
66848: LD_INT 10
66850: MUL
66851: ST_TO_ADDR
// r := rate / 10 ;
66852: LD_ADDR_VAR 0 7
66856: PUSH
66857: LD_VAR 0 2
66861: PUSH
66862: LD_INT 10
66864: DIVREAL
66865: ST_TO_ADDR
// time := 1 1$00 ;
66866: LD_ADDR_VAR 0 8
66870: PUSH
66871: LD_INT 2100
66873: ST_TO_ADDR
// if amount < min then
66874: LD_VAR 0 9
66878: PUSH
66879: LD_VAR 0 3
66883: LESS
66884: IFFALSE 66902
// r := r * 2 else
66886: LD_ADDR_VAR 0 7
66890: PUSH
66891: LD_VAR 0 7
66895: PUSH
66896: LD_INT 2
66898: MUL
66899: ST_TO_ADDR
66900: GO 66928
// if amount > max then
66902: LD_VAR 0 9
66906: PUSH
66907: LD_VAR 0 4
66911: GREATER
66912: IFFALSE 66928
// r := r / 2 ;
66914: LD_ADDR_VAR 0 7
66918: PUSH
66919: LD_VAR 0 7
66923: PUSH
66924: LD_INT 2
66926: DIVREAL
66927: ST_TO_ADDR
// time := time / r ;
66928: LD_ADDR_VAR 0 8
66932: PUSH
66933: LD_VAR 0 8
66937: PUSH
66938: LD_VAR 0 7
66942: DIVREAL
66943: ST_TO_ADDR
// if time < 0 then
66944: LD_VAR 0 8
66948: PUSH
66949: LD_INT 0
66951: LESS
66952: IFFALSE 66969
// time := time * - 1 ;
66954: LD_ADDR_VAR 0 8
66958: PUSH
66959: LD_VAR 0 8
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: MUL
66968: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66969: LD_VAR 0 8
66973: PUSH
66974: LD_INT 35
66976: PPUSH
66977: LD_INT 875
66979: PPUSH
66980: CALL_OW 12
66984: PLUS
66985: PPUSH
66986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66990: LD_INT 1
66992: PPUSH
66993: LD_INT 5
66995: PPUSH
66996: CALL_OW 12
67000: PPUSH
67001: LD_VAR 0 1
67005: PPUSH
67006: LD_INT 1
67008: PPUSH
67009: CALL_OW 55
// end ;
67013: GO 66826
// end ;
67015: LD_VAR 0 5
67019: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67020: LD_INT 0
67022: PPUSH
67023: PPUSH
67024: PPUSH
67025: PPUSH
67026: PPUSH
67027: PPUSH
67028: PPUSH
67029: PPUSH
// if not turrets or not factories then
67030: LD_VAR 0 1
67034: NOT
67035: PUSH
67036: LD_VAR 0 2
67040: NOT
67041: OR
67042: IFFALSE 67046
// exit ;
67044: GO 67353
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67046: LD_ADDR_VAR 0 10
67050: PUSH
67051: LD_INT 5
67053: PUSH
67054: LD_INT 6
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: LD_INT 4
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: LD_INT 5
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 24
67088: PUSH
67089: LD_INT 25
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 23
67098: PUSH
67099: LD_INT 27
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 42
67112: PUSH
67113: LD_INT 43
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 44
67122: PUSH
67123: LD_INT 46
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 45
67132: PUSH
67133: LD_INT 47
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// result := [ ] ;
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: EMPTY
67156: ST_TO_ADDR
// for i in turrets do
67157: LD_ADDR_VAR 0 4
67161: PUSH
67162: LD_VAR 0 1
67166: PUSH
67167: FOR_IN
67168: IFFALSE 67351
// begin nat := GetNation ( i ) ;
67170: LD_ADDR_VAR 0 7
67174: PUSH
67175: LD_VAR 0 4
67179: PPUSH
67180: CALL_OW 248
67184: ST_TO_ADDR
// weapon := 0 ;
67185: LD_ADDR_VAR 0 8
67189: PUSH
67190: LD_INT 0
67192: ST_TO_ADDR
// if not nat then
67193: LD_VAR 0 7
67197: NOT
67198: IFFALSE 67202
// continue ;
67200: GO 67167
// for j in list [ nat ] do
67202: LD_ADDR_VAR 0 5
67206: PUSH
67207: LD_VAR 0 10
67211: PUSH
67212: LD_VAR 0 7
67216: ARRAY
67217: PUSH
67218: FOR_IN
67219: IFFALSE 67260
// if GetBWeapon ( i ) = j [ 1 ] then
67221: LD_VAR 0 4
67225: PPUSH
67226: CALL_OW 269
67230: PUSH
67231: LD_VAR 0 5
67235: PUSH
67236: LD_INT 1
67238: ARRAY
67239: EQUAL
67240: IFFALSE 67258
// begin weapon := j [ 2 ] ;
67242: LD_ADDR_VAR 0 8
67246: PUSH
67247: LD_VAR 0 5
67251: PUSH
67252: LD_INT 2
67254: ARRAY
67255: ST_TO_ADDR
// break ;
67256: GO 67260
// end ;
67258: GO 67218
67260: POP
67261: POP
// if not weapon then
67262: LD_VAR 0 8
67266: NOT
67267: IFFALSE 67271
// continue ;
67269: GO 67167
// for k in factories do
67271: LD_ADDR_VAR 0 6
67275: PUSH
67276: LD_VAR 0 2
67280: PUSH
67281: FOR_IN
67282: IFFALSE 67347
// begin weapons := AvailableWeaponList ( k ) ;
67284: LD_ADDR_VAR 0 9
67288: PUSH
67289: LD_VAR 0 6
67293: PPUSH
67294: CALL_OW 478
67298: ST_TO_ADDR
// if not weapons then
67299: LD_VAR 0 9
67303: NOT
67304: IFFALSE 67308
// continue ;
67306: GO 67281
// if weapon in weapons then
67308: LD_VAR 0 8
67312: PUSH
67313: LD_VAR 0 9
67317: IN
67318: IFFALSE 67345
// begin result := [ i , weapon ] ;
67320: LD_ADDR_VAR 0 3
67324: PUSH
67325: LD_VAR 0 4
67329: PUSH
67330: LD_VAR 0 8
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: ST_TO_ADDR
// exit ;
67339: POP
67340: POP
67341: POP
67342: POP
67343: GO 67353
// end ; end ;
67345: GO 67281
67347: POP
67348: POP
// end ;
67349: GO 67167
67351: POP
67352: POP
// end ;
67353: LD_VAR 0 3
67357: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67358: LD_INT 0
67360: PPUSH
// if not side or side > 8 then
67361: LD_VAR 0 3
67365: NOT
67366: PUSH
67367: LD_VAR 0 3
67371: PUSH
67372: LD_INT 8
67374: GREATER
67375: OR
67376: IFFALSE 67380
// exit ;
67378: GO 67439
// if not range then
67380: LD_VAR 0 4
67384: NOT
67385: IFFALSE 67396
// range := - 12 ;
67387: LD_ADDR_VAR 0 4
67391: PUSH
67392: LD_INT 12
67394: NEG
67395: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67396: LD_VAR 0 1
67400: PPUSH
67401: LD_VAR 0 2
67405: PPUSH
67406: LD_VAR 0 3
67410: PPUSH
67411: LD_VAR 0 4
67415: PPUSH
67416: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67420: LD_VAR 0 1
67424: PPUSH
67425: LD_VAR 0 2
67429: PPUSH
67430: LD_VAR 0 3
67434: PPUSH
67435: CALL_OW 331
// end ;
67439: LD_VAR 0 5
67443: RET
// export function Video ( mode ) ; begin
67444: LD_INT 0
67446: PPUSH
// ingame_video = mode ;
67447: LD_ADDR_OWVAR 52
67451: PUSH
67452: LD_VAR 0 1
67456: ST_TO_ADDR
// interface_hidden = mode ;
67457: LD_ADDR_OWVAR 54
67461: PUSH
67462: LD_VAR 0 1
67466: ST_TO_ADDR
// end ;
67467: LD_VAR 0 2
67471: RET
// export function Join ( array , element ) ; begin
67472: LD_INT 0
67474: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67475: LD_ADDR_VAR 0 3
67479: PUSH
67480: LD_VAR 0 1
67484: PPUSH
67485: LD_VAR 0 1
67489: PUSH
67490: LD_INT 1
67492: PLUS
67493: PPUSH
67494: LD_VAR 0 2
67498: PPUSH
67499: CALL_OW 1
67503: ST_TO_ADDR
// end ;
67504: LD_VAR 0 3
67508: RET
// export function JoinUnion ( array , element ) ; begin
67509: LD_INT 0
67511: PPUSH
// result := array union element ;
67512: LD_ADDR_VAR 0 3
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_VAR 0 2
67526: UNION
67527: ST_TO_ADDR
// end ;
67528: LD_VAR 0 3
67532: RET
// export function GetBehemoths ( side ) ; begin
67533: LD_INT 0
67535: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67536: LD_ADDR_VAR 0 2
67540: PUSH
67541: LD_INT 22
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 31
67555: PUSH
67556: LD_INT 25
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PPUSH
67567: CALL_OW 69
67571: ST_TO_ADDR
// end ;
67572: LD_VAR 0 2
67576: RET
// export function Shuffle ( array ) ; var i , index ; begin
67577: LD_INT 0
67579: PPUSH
67580: PPUSH
67581: PPUSH
// result := [ ] ;
67582: LD_ADDR_VAR 0 2
67586: PUSH
67587: EMPTY
67588: ST_TO_ADDR
// if not array then
67589: LD_VAR 0 1
67593: NOT
67594: IFFALSE 67598
// exit ;
67596: GO 67697
// Randomize ;
67598: CALL_OW 10
// for i = array downto 1 do
67602: LD_ADDR_VAR 0 3
67606: PUSH
67607: DOUBLE
67608: LD_VAR 0 1
67612: INC
67613: ST_TO_ADDR
67614: LD_INT 1
67616: PUSH
67617: FOR_DOWNTO
67618: IFFALSE 67695
// begin index := rand ( 1 , array ) ;
67620: LD_ADDR_VAR 0 4
67624: PUSH
67625: LD_INT 1
67627: PPUSH
67628: LD_VAR 0 1
67632: PPUSH
67633: CALL_OW 12
67637: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67638: LD_ADDR_VAR 0 2
67642: PUSH
67643: LD_VAR 0 2
67647: PPUSH
67648: LD_VAR 0 2
67652: PUSH
67653: LD_INT 1
67655: PLUS
67656: PPUSH
67657: LD_VAR 0 1
67661: PUSH
67662: LD_VAR 0 4
67666: ARRAY
67667: PPUSH
67668: CALL_OW 2
67672: ST_TO_ADDR
// array := Delete ( array , index ) ;
67673: LD_ADDR_VAR 0 1
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: LD_VAR 0 4
67687: PPUSH
67688: CALL_OW 3
67692: ST_TO_ADDR
// end ;
67693: GO 67617
67695: POP
67696: POP
// end ;
67697: LD_VAR 0 2
67701: RET
// export function GetBaseMaterials ( base ) ; begin
67702: LD_INT 0
67704: PPUSH
// result := [ 0 , 0 , 0 ] ;
67705: LD_ADDR_VAR 0 2
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: LIST
67723: ST_TO_ADDR
// if not base then
67724: LD_VAR 0 1
67728: NOT
67729: IFFALSE 67733
// exit ;
67731: GO 67782
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67733: LD_ADDR_VAR 0 2
67737: PUSH
67738: LD_VAR 0 1
67742: PPUSH
67743: LD_INT 1
67745: PPUSH
67746: CALL_OW 275
67750: PUSH
67751: LD_VAR 0 1
67755: PPUSH
67756: LD_INT 2
67758: PPUSH
67759: CALL_OW 275
67763: PUSH
67764: LD_VAR 0 1
67768: PPUSH
67769: LD_INT 3
67771: PPUSH
67772: CALL_OW 275
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// end ;
67782: LD_VAR 0 2
67786: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67787: LD_INT 0
67789: PPUSH
67790: PPUSH
// result := array ;
67791: LD_ADDR_VAR 0 3
67795: PUSH
67796: LD_VAR 0 1
67800: ST_TO_ADDR
// if size >= result then
67801: LD_VAR 0 2
67805: PUSH
67806: LD_VAR 0 3
67810: GREATEREQUAL
67811: IFFALSE 67815
// exit ;
67813: GO 67865
// if size then
67815: LD_VAR 0 2
67819: IFFALSE 67865
// for i := array downto size do
67821: LD_ADDR_VAR 0 4
67825: PUSH
67826: DOUBLE
67827: LD_VAR 0 1
67831: INC
67832: ST_TO_ADDR
67833: LD_VAR 0 2
67837: PUSH
67838: FOR_DOWNTO
67839: IFFALSE 67863
// result := Delete ( result , result ) ;
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_VAR 0 3
67850: PPUSH
67851: LD_VAR 0 3
67855: PPUSH
67856: CALL_OW 3
67860: ST_TO_ADDR
67861: GO 67838
67863: POP
67864: POP
// end ;
67865: LD_VAR 0 3
67869: RET
// export function ComExit ( unit ) ; var tmp ; begin
67870: LD_INT 0
67872: PPUSH
67873: PPUSH
// if not IsInUnit ( unit ) then
67874: LD_VAR 0 1
67878: PPUSH
67879: CALL_OW 310
67883: NOT
67884: IFFALSE 67888
// exit ;
67886: GO 67948
// tmp := IsInUnit ( unit ) ;
67888: LD_ADDR_VAR 0 3
67892: PUSH
67893: LD_VAR 0 1
67897: PPUSH
67898: CALL_OW 310
67902: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67903: LD_VAR 0 3
67907: PPUSH
67908: CALL_OW 247
67912: PUSH
67913: LD_INT 2
67915: EQUAL
67916: IFFALSE 67929
// ComExitVehicle ( unit ) else
67918: LD_VAR 0 1
67922: PPUSH
67923: CALL_OW 121
67927: GO 67938
// ComExitBuilding ( unit ) ;
67929: LD_VAR 0 1
67933: PPUSH
67934: CALL_OW 122
// result := tmp ;
67938: LD_ADDR_VAR 0 2
67942: PUSH
67943: LD_VAR 0 3
67947: ST_TO_ADDR
// end ;
67948: LD_VAR 0 2
67952: RET
// export function ComExitAll ( units ) ; var i ; begin
67953: LD_INT 0
67955: PPUSH
67956: PPUSH
// if not units then
67957: LD_VAR 0 1
67961: NOT
67962: IFFALSE 67966
// exit ;
67964: GO 67992
// for i in units do
67966: LD_ADDR_VAR 0 3
67970: PUSH
67971: LD_VAR 0 1
67975: PUSH
67976: FOR_IN
67977: IFFALSE 67990
// ComExit ( i ) ;
67979: LD_VAR 0 3
67983: PPUSH
67984: CALL 67870 0 1
67988: GO 67976
67990: POP
67991: POP
// end ;
67992: LD_VAR 0 2
67996: RET
// export function ResetHc ; begin
67997: LD_INT 0
67999: PPUSH
// InitHc ;
68000: CALL_OW 19
// hc_importance := 0 ;
68004: LD_ADDR_OWVAR 32
68008: PUSH
68009: LD_INT 0
68011: ST_TO_ADDR
// end ;
68012: LD_VAR 0 1
68016: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68017: LD_INT 0
68019: PPUSH
68020: PPUSH
68021: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68022: LD_ADDR_VAR 0 6
68026: PUSH
68027: LD_VAR 0 1
68031: PUSH
68032: LD_VAR 0 3
68036: PLUS
68037: PUSH
68038: LD_INT 2
68040: DIV
68041: ST_TO_ADDR
// if _x < 0 then
68042: LD_VAR 0 6
68046: PUSH
68047: LD_INT 0
68049: LESS
68050: IFFALSE 68067
// _x := _x * - 1 ;
68052: LD_ADDR_VAR 0 6
68056: PUSH
68057: LD_VAR 0 6
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: MUL
68066: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68067: LD_ADDR_VAR 0 7
68071: PUSH
68072: LD_VAR 0 2
68076: PUSH
68077: LD_VAR 0 4
68081: PLUS
68082: PUSH
68083: LD_INT 2
68085: DIV
68086: ST_TO_ADDR
// if _y < 0 then
68087: LD_VAR 0 7
68091: PUSH
68092: LD_INT 0
68094: LESS
68095: IFFALSE 68112
// _y := _y * - 1 ;
68097: LD_ADDR_VAR 0 7
68101: PUSH
68102: LD_VAR 0 7
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: MUL
68111: ST_TO_ADDR
// result := [ _x , _y ] ;
68112: LD_ADDR_VAR 0 5
68116: PUSH
68117: LD_VAR 0 6
68121: PUSH
68122: LD_VAR 0 7
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: ST_TO_ADDR
// end ;
68131: LD_VAR 0 5
68135: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68136: LD_INT 0
68138: PPUSH
68139: PPUSH
68140: PPUSH
68141: PPUSH
// task := GetTaskList ( unit ) ;
68142: LD_ADDR_VAR 0 7
68146: PUSH
68147: LD_VAR 0 1
68151: PPUSH
68152: CALL_OW 437
68156: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68157: LD_VAR 0 7
68161: NOT
68162: PUSH
68163: LD_VAR 0 1
68167: PPUSH
68168: LD_VAR 0 2
68172: PPUSH
68173: CALL_OW 308
68177: NOT
68178: AND
68179: IFFALSE 68183
// exit ;
68181: GO 68301
// if IsInArea ( unit , area ) then
68183: LD_VAR 0 1
68187: PPUSH
68188: LD_VAR 0 2
68192: PPUSH
68193: CALL_OW 308
68197: IFFALSE 68215
// begin ComMoveToArea ( unit , goAway ) ;
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 3
68208: PPUSH
68209: CALL_OW 113
// exit ;
68213: GO 68301
// end ; if task [ 1 ] [ 1 ] <> M then
68215: LD_VAR 0 7
68219: PUSH
68220: LD_INT 1
68222: ARRAY
68223: PUSH
68224: LD_INT 1
68226: ARRAY
68227: PUSH
68228: LD_STRING M
68230: NONEQUAL
68231: IFFALSE 68235
// exit ;
68233: GO 68301
// x := task [ 1 ] [ 2 ] ;
68235: LD_ADDR_VAR 0 5
68239: PUSH
68240: LD_VAR 0 7
68244: PUSH
68245: LD_INT 1
68247: ARRAY
68248: PUSH
68249: LD_INT 2
68251: ARRAY
68252: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68253: LD_ADDR_VAR 0 6
68257: PUSH
68258: LD_VAR 0 7
68262: PUSH
68263: LD_INT 1
68265: ARRAY
68266: PUSH
68267: LD_INT 3
68269: ARRAY
68270: ST_TO_ADDR
// if InArea ( x , y , area ) then
68271: LD_VAR 0 5
68275: PPUSH
68276: LD_VAR 0 6
68280: PPUSH
68281: LD_VAR 0 2
68285: PPUSH
68286: CALL_OW 309
68290: IFFALSE 68301
// ComStop ( unit ) ;
68292: LD_VAR 0 1
68296: PPUSH
68297: CALL_OW 141
// end ;
68301: LD_VAR 0 4
68305: RET
// export function Abs ( value ) ; begin
68306: LD_INT 0
68308: PPUSH
// result := value ;
68309: LD_ADDR_VAR 0 2
68313: PUSH
68314: LD_VAR 0 1
68318: ST_TO_ADDR
// if value < 0 then
68319: LD_VAR 0 1
68323: PUSH
68324: LD_INT 0
68326: LESS
68327: IFFALSE 68344
// result := value * - 1 ;
68329: LD_ADDR_VAR 0 2
68333: PUSH
68334: LD_VAR 0 1
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: MUL
68343: ST_TO_ADDR
// end ;
68344: LD_VAR 0 2
68348: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68349: LD_INT 0
68351: PPUSH
68352: PPUSH
68353: PPUSH
68354: PPUSH
68355: PPUSH
68356: PPUSH
68357: PPUSH
68358: PPUSH
// if not unit or not building then
68359: LD_VAR 0 1
68363: NOT
68364: PUSH
68365: LD_VAR 0 2
68369: NOT
68370: OR
68371: IFFALSE 68375
// exit ;
68373: GO 68601
// x := GetX ( building ) ;
68375: LD_ADDR_VAR 0 4
68379: PUSH
68380: LD_VAR 0 2
68384: PPUSH
68385: CALL_OW 250
68389: ST_TO_ADDR
// y := GetY ( building ) ;
68390: LD_ADDR_VAR 0 6
68394: PUSH
68395: LD_VAR 0 2
68399: PPUSH
68400: CALL_OW 251
68404: ST_TO_ADDR
// d := GetDir ( building ) ;
68405: LD_ADDR_VAR 0 8
68409: PUSH
68410: LD_VAR 0 2
68414: PPUSH
68415: CALL_OW 254
68419: ST_TO_ADDR
// r := 4 ;
68420: LD_ADDR_VAR 0 9
68424: PUSH
68425: LD_INT 4
68427: ST_TO_ADDR
// for i := 1 to 5 do
68428: LD_ADDR_VAR 0 10
68432: PUSH
68433: DOUBLE
68434: LD_INT 1
68436: DEC
68437: ST_TO_ADDR
68438: LD_INT 5
68440: PUSH
68441: FOR_TO
68442: IFFALSE 68599
// begin _x := ShiftX ( x , d , r + i ) ;
68444: LD_ADDR_VAR 0 5
68448: PUSH
68449: LD_VAR 0 4
68453: PPUSH
68454: LD_VAR 0 8
68458: PPUSH
68459: LD_VAR 0 9
68463: PUSH
68464: LD_VAR 0 10
68468: PLUS
68469: PPUSH
68470: CALL_OW 272
68474: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68475: LD_ADDR_VAR 0 7
68479: PUSH
68480: LD_VAR 0 6
68484: PPUSH
68485: LD_VAR 0 8
68489: PPUSH
68490: LD_VAR 0 9
68494: PUSH
68495: LD_VAR 0 10
68499: PLUS
68500: PPUSH
68501: CALL_OW 273
68505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68506: LD_VAR 0 5
68510: PPUSH
68511: LD_VAR 0 7
68515: PPUSH
68516: CALL_OW 488
68520: PUSH
68521: LD_VAR 0 5
68525: PPUSH
68526: LD_VAR 0 7
68530: PPUSH
68531: CALL_OW 428
68535: PPUSH
68536: CALL_OW 247
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: LD_INT 2
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: IN
68551: NOT
68552: AND
68553: IFFALSE 68597
// begin ComMoveXY ( unit , _x , _y ) ;
68555: LD_VAR 0 1
68559: PPUSH
68560: LD_VAR 0 5
68564: PPUSH
68565: LD_VAR 0 7
68569: PPUSH
68570: CALL_OW 111
// result := [ _x , _y ] ;
68574: LD_ADDR_VAR 0 3
68578: PUSH
68579: LD_VAR 0 5
68583: PUSH
68584: LD_VAR 0 7
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: ST_TO_ADDR
// exit ;
68593: POP
68594: POP
68595: GO 68601
// end ; end ;
68597: GO 68441
68599: POP
68600: POP
// end ;
68601: LD_VAR 0 3
68605: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68606: LD_INT 0
68608: PPUSH
68609: PPUSH
68610: PPUSH
// result := 0 ;
68611: LD_ADDR_VAR 0 3
68615: PUSH
68616: LD_INT 0
68618: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68619: LD_VAR 0 1
68623: PUSH
68624: LD_INT 0
68626: LESS
68627: PUSH
68628: LD_VAR 0 1
68632: PUSH
68633: LD_INT 8
68635: GREATER
68636: OR
68637: PUSH
68638: LD_VAR 0 2
68642: PUSH
68643: LD_INT 0
68645: LESS
68646: OR
68647: PUSH
68648: LD_VAR 0 2
68652: PUSH
68653: LD_INT 8
68655: GREATER
68656: OR
68657: IFFALSE 68661
// exit ;
68659: GO 68736
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68661: LD_ADDR_VAR 0 4
68665: PUSH
68666: LD_INT 22
68668: PUSH
68669: LD_VAR 0 2
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PPUSH
68678: CALL_OW 69
68682: PUSH
68683: FOR_IN
68684: IFFALSE 68734
// begin un := UnitShoot ( i ) ;
68686: LD_ADDR_VAR 0 5
68690: PUSH
68691: LD_VAR 0 4
68695: PPUSH
68696: CALL_OW 504
68700: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68701: LD_VAR 0 5
68705: PPUSH
68706: CALL_OW 255
68710: PUSH
68711: LD_VAR 0 1
68715: EQUAL
68716: IFFALSE 68732
// begin result := un ;
68718: LD_ADDR_VAR 0 3
68722: PUSH
68723: LD_VAR 0 5
68727: ST_TO_ADDR
// exit ;
68728: POP
68729: POP
68730: GO 68736
// end ; end ;
68732: GO 68683
68734: POP
68735: POP
// end ;
68736: LD_VAR 0 3
68740: RET
// export function GetCargoBay ( units ) ; begin
68741: LD_INT 0
68743: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68744: LD_ADDR_VAR 0 2
68748: PUSH
68749: LD_VAR 0 1
68753: PPUSH
68754: LD_INT 2
68756: PUSH
68757: LD_INT 34
68759: PUSH
68760: LD_INT 12
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 34
68769: PUSH
68770: LD_INT 51
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 34
68779: PUSH
68780: LD_INT 32
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 34
68789: PUSH
68790: LD_INT 89
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: PPUSH
68804: CALL_OW 72
68808: ST_TO_ADDR
// end ;
68809: LD_VAR 0 2
68813: RET
// export function Negate ( value ) ; begin
68814: LD_INT 0
68816: PPUSH
// result := not value ;
68817: LD_ADDR_VAR 0 2
68821: PUSH
68822: LD_VAR 0 1
68826: NOT
68827: ST_TO_ADDR
// end ;
68828: LD_VAR 0 2
68832: RET
// export function Inc ( value ) ; begin
68833: LD_INT 0
68835: PPUSH
// result := value + 1 ;
68836: LD_ADDR_VAR 0 2
68840: PUSH
68841: LD_VAR 0 1
68845: PUSH
68846: LD_INT 1
68848: PLUS
68849: ST_TO_ADDR
// end ;
68850: LD_VAR 0 2
68854: RET
// export function Dec ( value ) ; begin
68855: LD_INT 0
68857: PPUSH
// result := value - 1 ;
68858: LD_ADDR_VAR 0 2
68862: PUSH
68863: LD_VAR 0 1
68867: PUSH
68868: LD_INT 1
68870: MINUS
68871: ST_TO_ADDR
// end ;
68872: LD_VAR 0 2
68876: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68877: LD_INT 0
68879: PPUSH
68880: PPUSH
68881: PPUSH
68882: PPUSH
68883: PPUSH
68884: PPUSH
68885: PPUSH
68886: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68887: LD_VAR 0 1
68891: PPUSH
68892: LD_VAR 0 2
68896: PPUSH
68897: CALL_OW 488
68901: NOT
68902: PUSH
68903: LD_VAR 0 3
68907: PPUSH
68908: LD_VAR 0 4
68912: PPUSH
68913: CALL_OW 488
68917: NOT
68918: OR
68919: IFFALSE 68932
// begin result := - 1 ;
68921: LD_ADDR_VAR 0 5
68925: PUSH
68926: LD_INT 1
68928: NEG
68929: ST_TO_ADDR
// exit ;
68930: GO 69167
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68932: LD_ADDR_VAR 0 12
68936: PUSH
68937: LD_VAR 0 1
68941: PPUSH
68942: LD_VAR 0 2
68946: PPUSH
68947: LD_VAR 0 3
68951: PPUSH
68952: LD_VAR 0 4
68956: PPUSH
68957: CALL 68017 0 4
68961: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68962: LD_ADDR_VAR 0 11
68966: PUSH
68967: LD_VAR 0 1
68971: PPUSH
68972: LD_VAR 0 2
68976: PPUSH
68977: LD_VAR 0 12
68981: PUSH
68982: LD_INT 1
68984: ARRAY
68985: PPUSH
68986: LD_VAR 0 12
68990: PUSH
68991: LD_INT 2
68993: ARRAY
68994: PPUSH
68995: CALL_OW 298
68999: ST_TO_ADDR
// distance := 9999 ;
69000: LD_ADDR_VAR 0 10
69004: PUSH
69005: LD_INT 9999
69007: ST_TO_ADDR
// for i := 0 to 5 do
69008: LD_ADDR_VAR 0 6
69012: PUSH
69013: DOUBLE
69014: LD_INT 0
69016: DEC
69017: ST_TO_ADDR
69018: LD_INT 5
69020: PUSH
69021: FOR_TO
69022: IFFALSE 69165
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69024: LD_ADDR_VAR 0 7
69028: PUSH
69029: LD_VAR 0 1
69033: PPUSH
69034: LD_VAR 0 6
69038: PPUSH
69039: LD_VAR 0 11
69043: PPUSH
69044: CALL_OW 272
69048: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69049: LD_ADDR_VAR 0 8
69053: PUSH
69054: LD_VAR 0 2
69058: PPUSH
69059: LD_VAR 0 6
69063: PPUSH
69064: LD_VAR 0 11
69068: PPUSH
69069: CALL_OW 273
69073: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69074: LD_VAR 0 7
69078: PPUSH
69079: LD_VAR 0 8
69083: PPUSH
69084: CALL_OW 488
69088: NOT
69089: IFFALSE 69093
// continue ;
69091: GO 69021
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69093: LD_ADDR_VAR 0 9
69097: PUSH
69098: LD_VAR 0 12
69102: PUSH
69103: LD_INT 1
69105: ARRAY
69106: PPUSH
69107: LD_VAR 0 12
69111: PUSH
69112: LD_INT 2
69114: ARRAY
69115: PPUSH
69116: LD_VAR 0 7
69120: PPUSH
69121: LD_VAR 0 8
69125: PPUSH
69126: CALL_OW 298
69130: ST_TO_ADDR
// if tmp < distance then
69131: LD_VAR 0 9
69135: PUSH
69136: LD_VAR 0 10
69140: LESS
69141: IFFALSE 69163
// begin result := i ;
69143: LD_ADDR_VAR 0 5
69147: PUSH
69148: LD_VAR 0 6
69152: ST_TO_ADDR
// distance := tmp ;
69153: LD_ADDR_VAR 0 10
69157: PUSH
69158: LD_VAR 0 9
69162: ST_TO_ADDR
// end ; end ;
69163: GO 69021
69165: POP
69166: POP
// end ;
69167: LD_VAR 0 5
69171: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69172: LD_INT 0
69174: PPUSH
69175: PPUSH
// if not driver or not IsInUnit ( driver ) then
69176: LD_VAR 0 1
69180: NOT
69181: PUSH
69182: LD_VAR 0 1
69186: PPUSH
69187: CALL_OW 310
69191: NOT
69192: OR
69193: IFFALSE 69197
// exit ;
69195: GO 69287
// vehicle := IsInUnit ( driver ) ;
69197: LD_ADDR_VAR 0 3
69201: PUSH
69202: LD_VAR 0 1
69206: PPUSH
69207: CALL_OW 310
69211: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69212: LD_VAR 0 1
69216: PPUSH
69217: LD_STRING \
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: PUSH
69247: LD_STRING E
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: LD_VAR 0 3
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PPUSH
69283: CALL_OW 446
// end ;
69287: LD_VAR 0 2
69291: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69292: LD_INT 0
69294: PPUSH
69295: PPUSH
// if not driver or not IsInUnit ( driver ) then
69296: LD_VAR 0 1
69300: NOT
69301: PUSH
69302: LD_VAR 0 1
69306: PPUSH
69307: CALL_OW 310
69311: NOT
69312: OR
69313: IFFALSE 69317
// exit ;
69315: GO 69407
// vehicle := IsInUnit ( driver ) ;
69317: LD_ADDR_VAR 0 3
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: CALL_OW 310
69331: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_STRING \
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: PUSH
69367: LD_STRING E
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: LD_VAR 0 3
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PPUSH
69403: CALL_OW 447
// end ;
69407: LD_VAR 0 2
69411: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69412: LD_INT 0
69414: PPUSH
69415: PPUSH
69416: PPUSH
// tmp := [ ] ;
69417: LD_ADDR_VAR 0 5
69421: PUSH
69422: EMPTY
69423: ST_TO_ADDR
// for i in units do
69424: LD_ADDR_VAR 0 4
69428: PUSH
69429: LD_VAR 0 1
69433: PUSH
69434: FOR_IN
69435: IFFALSE 69473
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69437: LD_ADDR_VAR 0 5
69441: PUSH
69442: LD_VAR 0 5
69446: PPUSH
69447: LD_VAR 0 5
69451: PUSH
69452: LD_INT 1
69454: PLUS
69455: PPUSH
69456: LD_VAR 0 4
69460: PPUSH
69461: CALL_OW 256
69465: PPUSH
69466: CALL_OW 2
69470: ST_TO_ADDR
69471: GO 69434
69473: POP
69474: POP
// if not tmp then
69475: LD_VAR 0 5
69479: NOT
69480: IFFALSE 69484
// exit ;
69482: GO 69532
// if asc then
69484: LD_VAR 0 2
69488: IFFALSE 69512
// result := SortListByListAsc ( units , tmp ) else
69490: LD_ADDR_VAR 0 3
69494: PUSH
69495: LD_VAR 0 1
69499: PPUSH
69500: LD_VAR 0 5
69504: PPUSH
69505: CALL_OW 76
69509: ST_TO_ADDR
69510: GO 69532
// result := SortListByListDesc ( units , tmp ) ;
69512: LD_ADDR_VAR 0 3
69516: PUSH
69517: LD_VAR 0 1
69521: PPUSH
69522: LD_VAR 0 5
69526: PPUSH
69527: CALL_OW 77
69531: ST_TO_ADDR
// end ;
69532: LD_VAR 0 3
69536: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69537: LD_INT 0
69539: PPUSH
69540: PPUSH
// task := GetTaskList ( mech ) ;
69541: LD_ADDR_VAR 0 4
69545: PUSH
69546: LD_VAR 0 1
69550: PPUSH
69551: CALL_OW 437
69555: ST_TO_ADDR
// if not task then
69556: LD_VAR 0 4
69560: NOT
69561: IFFALSE 69565
// exit ;
69563: GO 69607
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69565: LD_ADDR_VAR 0 3
69569: PUSH
69570: LD_VAR 0 4
69574: PUSH
69575: LD_INT 1
69577: ARRAY
69578: PUSH
69579: LD_INT 1
69581: ARRAY
69582: PUSH
69583: LD_STRING r
69585: EQUAL
69586: PUSH
69587: LD_VAR 0 4
69591: PUSH
69592: LD_INT 1
69594: ARRAY
69595: PUSH
69596: LD_INT 4
69598: ARRAY
69599: PUSH
69600: LD_VAR 0 2
69604: EQUAL
69605: AND
69606: ST_TO_ADDR
// end ;
69607: LD_VAR 0 3
69611: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69612: LD_INT 0
69614: PPUSH
// SetDir ( unit , d ) ;
69615: LD_VAR 0 1
69619: PPUSH
69620: LD_VAR 0 4
69624: PPUSH
69625: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69629: LD_VAR 0 1
69633: PPUSH
69634: LD_VAR 0 2
69638: PPUSH
69639: LD_VAR 0 3
69643: PPUSH
69644: LD_VAR 0 5
69648: PPUSH
69649: CALL_OW 48
// end ;
69653: LD_VAR 0 6
69657: RET
// export function ToNaturalNumber ( number ) ; begin
69658: LD_INT 0
69660: PPUSH
// result := number div 1 ;
69661: LD_ADDR_VAR 0 2
69665: PUSH
69666: LD_VAR 0 1
69670: PUSH
69671: LD_INT 1
69673: DIV
69674: ST_TO_ADDR
// if number < 0 then
69675: LD_VAR 0 1
69679: PUSH
69680: LD_INT 0
69682: LESS
69683: IFFALSE 69693
// result := 0 ;
69685: LD_ADDR_VAR 0 2
69689: PUSH
69690: LD_INT 0
69692: ST_TO_ADDR
// end ;
69693: LD_VAR 0 2
69697: RET
// export function SortByClass ( units , class ) ; var un ; begin
69698: LD_INT 0
69700: PPUSH
69701: PPUSH
// if not units or not class then
69702: LD_VAR 0 1
69706: NOT
69707: PUSH
69708: LD_VAR 0 2
69712: NOT
69713: OR
69714: IFFALSE 69718
// exit ;
69716: GO 69813
// result := [ ] ;
69718: LD_ADDR_VAR 0 3
69722: PUSH
69723: EMPTY
69724: ST_TO_ADDR
// for un in units do
69725: LD_ADDR_VAR 0 4
69729: PUSH
69730: LD_VAR 0 1
69734: PUSH
69735: FOR_IN
69736: IFFALSE 69811
// if GetClass ( un ) = class then
69738: LD_VAR 0 4
69742: PPUSH
69743: CALL_OW 257
69747: PUSH
69748: LD_VAR 0 2
69752: EQUAL
69753: IFFALSE 69780
// result := Insert ( result , 1 , un ) else
69755: LD_ADDR_VAR 0 3
69759: PUSH
69760: LD_VAR 0 3
69764: PPUSH
69765: LD_INT 1
69767: PPUSH
69768: LD_VAR 0 4
69772: PPUSH
69773: CALL_OW 2
69777: ST_TO_ADDR
69778: GO 69809
// result := Replace ( result , result + 1 , un ) ;
69780: LD_ADDR_VAR 0 3
69784: PUSH
69785: LD_VAR 0 3
69789: PPUSH
69790: LD_VAR 0 3
69794: PUSH
69795: LD_INT 1
69797: PLUS
69798: PPUSH
69799: LD_VAR 0 4
69803: PPUSH
69804: CALL_OW 1
69808: ST_TO_ADDR
69809: GO 69735
69811: POP
69812: POP
// end ;
69813: LD_VAR 0 3
69817: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69818: LD_INT 0
69820: PPUSH
69821: PPUSH
69822: PPUSH
69823: PPUSH
69824: PPUSH
69825: PPUSH
69826: PPUSH
// result := [ ] ;
69827: LD_ADDR_VAR 0 4
69831: PUSH
69832: EMPTY
69833: ST_TO_ADDR
// if x - r < 0 then
69834: LD_VAR 0 1
69838: PUSH
69839: LD_VAR 0 3
69843: MINUS
69844: PUSH
69845: LD_INT 0
69847: LESS
69848: IFFALSE 69860
// min_x := 0 else
69850: LD_ADDR_VAR 0 8
69854: PUSH
69855: LD_INT 0
69857: ST_TO_ADDR
69858: GO 69876
// min_x := x - r ;
69860: LD_ADDR_VAR 0 8
69864: PUSH
69865: LD_VAR 0 1
69869: PUSH
69870: LD_VAR 0 3
69874: MINUS
69875: ST_TO_ADDR
// if y - r < 0 then
69876: LD_VAR 0 2
69880: PUSH
69881: LD_VAR 0 3
69885: MINUS
69886: PUSH
69887: LD_INT 0
69889: LESS
69890: IFFALSE 69902
// min_y := 0 else
69892: LD_ADDR_VAR 0 7
69896: PUSH
69897: LD_INT 0
69899: ST_TO_ADDR
69900: GO 69918
// min_y := y - r ;
69902: LD_ADDR_VAR 0 7
69906: PUSH
69907: LD_VAR 0 2
69911: PUSH
69912: LD_VAR 0 3
69916: MINUS
69917: ST_TO_ADDR
// max_x := x + r ;
69918: LD_ADDR_VAR 0 9
69922: PUSH
69923: LD_VAR 0 1
69927: PUSH
69928: LD_VAR 0 3
69932: PLUS
69933: ST_TO_ADDR
// max_y := y + r ;
69934: LD_ADDR_VAR 0 10
69938: PUSH
69939: LD_VAR 0 2
69943: PUSH
69944: LD_VAR 0 3
69948: PLUS
69949: ST_TO_ADDR
// for _x = min_x to max_x do
69950: LD_ADDR_VAR 0 5
69954: PUSH
69955: DOUBLE
69956: LD_VAR 0 8
69960: DEC
69961: ST_TO_ADDR
69962: LD_VAR 0 9
69966: PUSH
69967: FOR_TO
69968: IFFALSE 70069
// for _y = min_y to max_y do
69970: LD_ADDR_VAR 0 6
69974: PUSH
69975: DOUBLE
69976: LD_VAR 0 7
69980: DEC
69981: ST_TO_ADDR
69982: LD_VAR 0 10
69986: PUSH
69987: FOR_TO
69988: IFFALSE 70065
// begin if not ValidHex ( _x , _y ) then
69990: LD_VAR 0 5
69994: PPUSH
69995: LD_VAR 0 6
69999: PPUSH
70000: CALL_OW 488
70004: NOT
70005: IFFALSE 70009
// continue ;
70007: GO 69987
// if GetResourceTypeXY ( _x , _y ) then
70009: LD_VAR 0 5
70013: PPUSH
70014: LD_VAR 0 6
70018: PPUSH
70019: CALL_OW 283
70023: IFFALSE 70063
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70025: LD_ADDR_VAR 0 4
70029: PUSH
70030: LD_VAR 0 4
70034: PPUSH
70035: LD_VAR 0 4
70039: PUSH
70040: LD_INT 1
70042: PLUS
70043: PPUSH
70044: LD_VAR 0 5
70048: PUSH
70049: LD_VAR 0 6
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PPUSH
70058: CALL_OW 1
70062: ST_TO_ADDR
// end ;
70063: GO 69987
70065: POP
70066: POP
70067: GO 69967
70069: POP
70070: POP
// end ;
70071: LD_VAR 0 4
70075: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70076: LD_INT 0
70078: PPUSH
70079: PPUSH
70080: PPUSH
70081: PPUSH
70082: PPUSH
70083: PPUSH
70084: PPUSH
70085: PPUSH
// if not units then
70086: LD_VAR 0 1
70090: NOT
70091: IFFALSE 70095
// exit ;
70093: GO 70619
// result := UnitFilter ( units , [ f_ok ] ) ;
70095: LD_ADDR_VAR 0 3
70099: PUSH
70100: LD_VAR 0 1
70104: PPUSH
70105: LD_INT 50
70107: PUSH
70108: EMPTY
70109: LIST
70110: PPUSH
70111: CALL_OW 72
70115: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70116: LD_ADDR_VAR 0 8
70120: PUSH
70121: LD_VAR 0 1
70125: PUSH
70126: LD_INT 1
70128: ARRAY
70129: PPUSH
70130: CALL_OW 255
70134: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70135: LD_ADDR_VAR 0 10
70139: PUSH
70140: LD_INT 29
70142: PUSH
70143: LD_INT 91
70145: PUSH
70146: LD_INT 49
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: ST_TO_ADDR
// if not result then
70154: LD_VAR 0 3
70158: NOT
70159: IFFALSE 70163
// exit ;
70161: GO 70619
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70163: LD_ADDR_VAR 0 5
70167: PUSH
70168: LD_INT 81
70170: PUSH
70171: LD_VAR 0 8
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PPUSH
70180: CALL_OW 69
70184: ST_TO_ADDR
// for i in result do
70185: LD_ADDR_VAR 0 4
70189: PUSH
70190: LD_VAR 0 3
70194: PUSH
70195: FOR_IN
70196: IFFALSE 70617
// begin tag := GetTag ( i ) + 1 ;
70198: LD_ADDR_VAR 0 9
70202: PUSH
70203: LD_VAR 0 4
70207: PPUSH
70208: CALL_OW 110
70212: PUSH
70213: LD_INT 1
70215: PLUS
70216: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70217: LD_ADDR_VAR 0 7
70221: PUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: CALL_OW 250
70231: PPUSH
70232: LD_VAR 0 4
70236: PPUSH
70237: CALL_OW 251
70241: PPUSH
70242: LD_INT 6
70244: PPUSH
70245: CALL 69818 0 3
70249: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70250: LD_VAR 0 4
70254: PPUSH
70255: CALL_OW 247
70259: PUSH
70260: LD_INT 2
70262: EQUAL
70263: PUSH
70264: LD_VAR 0 7
70268: AND
70269: PUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: CALL_OW 264
70279: PUSH
70280: LD_VAR 0 10
70284: IN
70285: NOT
70286: AND
70287: IFFALSE 70326
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70289: LD_VAR 0 4
70293: PPUSH
70294: LD_VAR 0 7
70298: PUSH
70299: LD_INT 1
70301: ARRAY
70302: PUSH
70303: LD_INT 1
70305: ARRAY
70306: PPUSH
70307: LD_VAR 0 7
70311: PUSH
70312: LD_INT 1
70314: ARRAY
70315: PUSH
70316: LD_INT 2
70318: ARRAY
70319: PPUSH
70320: CALL_OW 116
70324: GO 70615
// if path > tag then
70326: LD_VAR 0 2
70330: PUSH
70331: LD_VAR 0 9
70335: GREATER
70336: IFFALSE 70544
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70338: LD_ADDR_VAR 0 6
70342: PUSH
70343: LD_VAR 0 5
70347: PPUSH
70348: LD_INT 91
70350: PUSH
70351: LD_VAR 0 4
70355: PUSH
70356: LD_INT 8
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: PPUSH
70364: CALL_OW 72
70368: ST_TO_ADDR
// if nearEnemy then
70369: LD_VAR 0 6
70373: IFFALSE 70442
// begin if GetWeapon ( i ) = ru_time_lapser then
70375: LD_VAR 0 4
70379: PPUSH
70380: CALL_OW 264
70384: PUSH
70385: LD_INT 49
70387: EQUAL
70388: IFFALSE 70416
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70390: LD_VAR 0 4
70394: PPUSH
70395: LD_VAR 0 6
70399: PPUSH
70400: LD_VAR 0 4
70404: PPUSH
70405: CALL_OW 74
70409: PPUSH
70410: CALL_OW 112
70414: GO 70440
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70416: LD_VAR 0 4
70420: PPUSH
70421: LD_VAR 0 6
70425: PPUSH
70426: LD_VAR 0 4
70430: PPUSH
70431: CALL_OW 74
70435: PPUSH
70436: CALL_OW 115
// end else
70440: GO 70542
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70442: LD_VAR 0 4
70446: PPUSH
70447: LD_VAR 0 2
70451: PUSH
70452: LD_VAR 0 9
70456: ARRAY
70457: PUSH
70458: LD_INT 1
70460: ARRAY
70461: PPUSH
70462: LD_VAR 0 2
70466: PUSH
70467: LD_VAR 0 9
70471: ARRAY
70472: PUSH
70473: LD_INT 2
70475: ARRAY
70476: PPUSH
70477: CALL_OW 297
70481: PUSH
70482: LD_INT 6
70484: GREATER
70485: IFFALSE 70528
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70487: LD_VAR 0 4
70491: PPUSH
70492: LD_VAR 0 2
70496: PUSH
70497: LD_VAR 0 9
70501: ARRAY
70502: PUSH
70503: LD_INT 1
70505: ARRAY
70506: PPUSH
70507: LD_VAR 0 2
70511: PUSH
70512: LD_VAR 0 9
70516: ARRAY
70517: PUSH
70518: LD_INT 2
70520: ARRAY
70521: PPUSH
70522: CALL_OW 114
70526: GO 70542
// SetTag ( i , tag ) ;
70528: LD_VAR 0 4
70532: PPUSH
70533: LD_VAR 0 9
70537: PPUSH
70538: CALL_OW 109
// end else
70542: GO 70615
// if enemy then
70544: LD_VAR 0 5
70548: IFFALSE 70615
// begin if GetWeapon ( i ) = ru_time_lapser then
70550: LD_VAR 0 4
70554: PPUSH
70555: CALL_OW 264
70559: PUSH
70560: LD_INT 49
70562: EQUAL
70563: IFFALSE 70591
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70565: LD_VAR 0 4
70569: PPUSH
70570: LD_VAR 0 5
70574: PPUSH
70575: LD_VAR 0 4
70579: PPUSH
70580: CALL_OW 74
70584: PPUSH
70585: CALL_OW 112
70589: GO 70615
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70591: LD_VAR 0 4
70595: PPUSH
70596: LD_VAR 0 5
70600: PPUSH
70601: LD_VAR 0 4
70605: PPUSH
70606: CALL_OW 74
70610: PPUSH
70611: CALL_OW 115
// end ; end ;
70615: GO 70195
70617: POP
70618: POP
// end ;
70619: LD_VAR 0 3
70623: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70624: LD_INT 0
70626: PPUSH
70627: PPUSH
70628: PPUSH
// if not unit or IsInUnit ( unit ) then
70629: LD_VAR 0 1
70633: NOT
70634: PUSH
70635: LD_VAR 0 1
70639: PPUSH
70640: CALL_OW 310
70644: OR
70645: IFFALSE 70649
// exit ;
70647: GO 70740
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70649: LD_ADDR_VAR 0 4
70653: PUSH
70654: LD_VAR 0 1
70658: PPUSH
70659: CALL_OW 250
70663: PPUSH
70664: LD_VAR 0 2
70668: PPUSH
70669: LD_INT 1
70671: PPUSH
70672: CALL_OW 272
70676: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70677: LD_ADDR_VAR 0 5
70681: PUSH
70682: LD_VAR 0 1
70686: PPUSH
70687: CALL_OW 251
70691: PPUSH
70692: LD_VAR 0 2
70696: PPUSH
70697: LD_INT 1
70699: PPUSH
70700: CALL_OW 273
70704: ST_TO_ADDR
// if ValidHex ( x , y ) then
70705: LD_VAR 0 4
70709: PPUSH
70710: LD_VAR 0 5
70714: PPUSH
70715: CALL_OW 488
70719: IFFALSE 70740
// ComTurnXY ( unit , x , y ) ;
70721: LD_VAR 0 1
70725: PPUSH
70726: LD_VAR 0 4
70730: PPUSH
70731: LD_VAR 0 5
70735: PPUSH
70736: CALL_OW 118
// end ;
70740: LD_VAR 0 3
70744: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70745: LD_INT 0
70747: PPUSH
70748: PPUSH
// result := false ;
70749: LD_ADDR_VAR 0 3
70753: PUSH
70754: LD_INT 0
70756: ST_TO_ADDR
// if not units then
70757: LD_VAR 0 2
70761: NOT
70762: IFFALSE 70766
// exit ;
70764: GO 70811
// for i in units do
70766: LD_ADDR_VAR 0 4
70770: PUSH
70771: LD_VAR 0 2
70775: PUSH
70776: FOR_IN
70777: IFFALSE 70809
// if See ( side , i ) then
70779: LD_VAR 0 1
70783: PPUSH
70784: LD_VAR 0 4
70788: PPUSH
70789: CALL_OW 292
70793: IFFALSE 70807
// begin result := true ;
70795: LD_ADDR_VAR 0 3
70799: PUSH
70800: LD_INT 1
70802: ST_TO_ADDR
// exit ;
70803: POP
70804: POP
70805: GO 70811
// end ;
70807: GO 70776
70809: POP
70810: POP
// end ;
70811: LD_VAR 0 3
70815: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
70820: PPUSH
70821: PPUSH
// if not unit or not points then
70822: LD_VAR 0 1
70826: NOT
70827: PUSH
70828: LD_VAR 0 2
70832: NOT
70833: OR
70834: IFFALSE 70838
// exit ;
70836: GO 70928
// dist := 99999 ;
70838: LD_ADDR_VAR 0 5
70842: PUSH
70843: LD_INT 99999
70845: ST_TO_ADDR
// for i in points do
70846: LD_ADDR_VAR 0 4
70850: PUSH
70851: LD_VAR 0 2
70855: PUSH
70856: FOR_IN
70857: IFFALSE 70926
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70859: LD_ADDR_VAR 0 6
70863: PUSH
70864: LD_VAR 0 1
70868: PPUSH
70869: LD_VAR 0 4
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PPUSH
70878: LD_VAR 0 4
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: PPUSH
70887: CALL_OW 297
70891: ST_TO_ADDR
// if tmpDist < dist then
70892: LD_VAR 0 6
70896: PUSH
70897: LD_VAR 0 5
70901: LESS
70902: IFFALSE 70924
// begin result := i ;
70904: LD_ADDR_VAR 0 3
70908: PUSH
70909: LD_VAR 0 4
70913: ST_TO_ADDR
// dist := tmpDist ;
70914: LD_ADDR_VAR 0 5
70918: PUSH
70919: LD_VAR 0 6
70923: ST_TO_ADDR
// end ; end ;
70924: GO 70856
70926: POP
70927: POP
// end ;
70928: LD_VAR 0 3
70932: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70933: LD_INT 0
70935: PPUSH
// uc_side := side ;
70936: LD_ADDR_OWVAR 20
70940: PUSH
70941: LD_VAR 0 1
70945: ST_TO_ADDR
// uc_nation := 3 ;
70946: LD_ADDR_OWVAR 21
70950: PUSH
70951: LD_INT 3
70953: ST_TO_ADDR
// vc_chassis := 25 ;
70954: LD_ADDR_OWVAR 37
70958: PUSH
70959: LD_INT 25
70961: ST_TO_ADDR
// vc_engine := engine_siberite ;
70962: LD_ADDR_OWVAR 39
70966: PUSH
70967: LD_INT 3
70969: ST_TO_ADDR
// vc_control := control_computer ;
70970: LD_ADDR_OWVAR 38
70974: PUSH
70975: LD_INT 3
70977: ST_TO_ADDR
// vc_weapon := 59 ;
70978: LD_ADDR_OWVAR 40
70982: PUSH
70983: LD_INT 59
70985: ST_TO_ADDR
// result := CreateVehicle ;
70986: LD_ADDR_VAR 0 5
70990: PUSH
70991: CALL_OW 45
70995: ST_TO_ADDR
// SetDir ( result , d ) ;
70996: LD_VAR 0 5
71000: PPUSH
71001: LD_VAR 0 4
71005: PPUSH
71006: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71010: LD_VAR 0 5
71014: PPUSH
71015: LD_VAR 0 2
71019: PPUSH
71020: LD_VAR 0 3
71024: PPUSH
71025: LD_INT 0
71027: PPUSH
71028: CALL_OW 48
// end ;
71032: LD_VAR 0 5
71036: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71037: LD_INT 0
71039: PPUSH
71040: PPUSH
71041: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71042: LD_ADDR_VAR 0 2
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: LD_INT 0
71052: PUSH
71053: LD_INT 0
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71065: LD_VAR 0 1
71069: NOT
71070: PUSH
71071: LD_VAR 0 1
71075: PPUSH
71076: CALL_OW 264
71080: PUSH
71081: LD_INT 12
71083: PUSH
71084: LD_INT 51
71086: PUSH
71087: LD_INT 32
71089: PUSH
71090: LD_INT 89
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: IN
71099: NOT
71100: OR
71101: IFFALSE 71105
// exit ;
71103: GO 71203
// for i := 1 to 3 do
71105: LD_ADDR_VAR 0 3
71109: PUSH
71110: DOUBLE
71111: LD_INT 1
71113: DEC
71114: ST_TO_ADDR
71115: LD_INT 3
71117: PUSH
71118: FOR_TO
71119: IFFALSE 71201
// begin tmp := GetCargo ( cargo , i ) ;
71121: LD_ADDR_VAR 0 4
71125: PUSH
71126: LD_VAR 0 1
71130: PPUSH
71131: LD_VAR 0 3
71135: PPUSH
71136: CALL_OW 289
71140: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71141: LD_ADDR_VAR 0 2
71145: PUSH
71146: LD_VAR 0 2
71150: PPUSH
71151: LD_VAR 0 3
71155: PPUSH
71156: LD_VAR 0 4
71160: PPUSH
71161: CALL_OW 1
71165: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71166: LD_ADDR_VAR 0 2
71170: PUSH
71171: LD_VAR 0 2
71175: PPUSH
71176: LD_INT 4
71178: PPUSH
71179: LD_VAR 0 2
71183: PUSH
71184: LD_INT 4
71186: ARRAY
71187: PUSH
71188: LD_VAR 0 4
71192: PLUS
71193: PPUSH
71194: CALL_OW 1
71198: ST_TO_ADDR
// end ;
71199: GO 71118
71201: POP
71202: POP
// end ;
71203: LD_VAR 0 2
71207: RET
// export function Length ( array ) ; begin
71208: LD_INT 0
71210: PPUSH
// result := array + 0 ;
71211: LD_ADDR_VAR 0 2
71215: PUSH
71216: LD_VAR 0 1
71220: PUSH
71221: LD_INT 0
71223: PLUS
71224: ST_TO_ADDR
// end ;
71225: LD_VAR 0 2
71229: RET
// export function PrepareArray ( array ) ; begin
71230: LD_INT 0
71232: PPUSH
// result := array diff 0 ;
71233: LD_ADDR_VAR 0 2
71237: PUSH
71238: LD_VAR 0 1
71242: PUSH
71243: LD_INT 0
71245: DIFF
71246: ST_TO_ADDR
// if not result [ 1 ] then
71247: LD_VAR 0 2
71251: PUSH
71252: LD_INT 1
71254: ARRAY
71255: NOT
71256: IFFALSE 71276
// result := Delete ( result , 1 ) ;
71258: LD_ADDR_VAR 0 2
71262: PUSH
71263: LD_VAR 0 2
71267: PPUSH
71268: LD_INT 1
71270: PPUSH
71271: CALL_OW 3
71275: ST_TO_ADDR
// end ;
71276: LD_VAR 0 2
71280: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71281: LD_INT 0
71283: PPUSH
71284: PPUSH
71285: PPUSH
71286: PPUSH
// sibRocketRange := 25 ;
71287: LD_ADDR_VAR 0 6
71291: PUSH
71292: LD_INT 25
71294: ST_TO_ADDR
// result := false ;
71295: LD_ADDR_VAR 0 4
71299: PUSH
71300: LD_INT 0
71302: ST_TO_ADDR
// for i := 0 to 5 do
71303: LD_ADDR_VAR 0 5
71307: PUSH
71308: DOUBLE
71309: LD_INT 0
71311: DEC
71312: ST_TO_ADDR
71313: LD_INT 5
71315: PUSH
71316: FOR_TO
71317: IFFALSE 71384
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71319: LD_VAR 0 1
71323: PPUSH
71324: LD_VAR 0 5
71328: PPUSH
71329: LD_VAR 0 6
71333: PPUSH
71334: CALL_OW 272
71338: PPUSH
71339: LD_VAR 0 2
71343: PPUSH
71344: LD_VAR 0 5
71348: PPUSH
71349: LD_VAR 0 6
71353: PPUSH
71354: CALL_OW 273
71358: PPUSH
71359: LD_VAR 0 3
71363: PPUSH
71364: CALL_OW 309
71368: IFFALSE 71382
// begin result := true ;
71370: LD_ADDR_VAR 0 4
71374: PUSH
71375: LD_INT 1
71377: ST_TO_ADDR
// exit ;
71378: POP
71379: POP
71380: GO 71386
// end ;
71382: GO 71316
71384: POP
71385: POP
// end ;
71386: LD_VAR 0 4
71390: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71391: LD_INT 0
71393: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71394: LD_VAR 0 1
71398: PPUSH
71399: LD_VAR 0 2
71403: PPUSH
71404: LD_INT 0
71406: PPUSH
71407: LD_INT 0
71409: PPUSH
71410: LD_INT 1
71412: PPUSH
71413: LD_INT 0
71415: PPUSH
71416: CALL_OW 587
// end ; end_of_file
71420: LD_VAR 0 3
71424: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71425: LD_VAR 0 1
71429: PUSH
71430: LD_INT 200
71432: DOUBLE
71433: GREATEREQUAL
71434: IFFALSE 71442
71436: LD_INT 299
71438: DOUBLE
71439: LESSEQUAL
71440: IFTRUE 71444
71442: GO 71476
71444: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71445: LD_VAR 0 1
71449: PPUSH
71450: LD_VAR 0 2
71454: PPUSH
71455: LD_VAR 0 3
71459: PPUSH
71460: LD_VAR 0 4
71464: PPUSH
71465: LD_VAR 0 5
71469: PPUSH
71470: CALL 26091 0 5
71474: GO 71553
71476: LD_INT 300
71478: DOUBLE
71479: GREATEREQUAL
71480: IFFALSE 71488
71482: LD_INT 399
71484: DOUBLE
71485: LESSEQUAL
71486: IFTRUE 71490
71488: GO 71552
71490: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71491: LD_VAR 0 1
71495: PPUSH
71496: LD_VAR 0 2
71500: PPUSH
71501: LD_VAR 0 3
71505: PPUSH
71506: LD_VAR 0 4
71510: PPUSH
71511: LD_VAR 0 5
71515: PPUSH
71516: LD_VAR 0 6
71520: PPUSH
71521: LD_VAR 0 7
71525: PPUSH
71526: LD_VAR 0 8
71530: PPUSH
71531: LD_VAR 0 9
71535: PPUSH
71536: LD_VAR 0 10
71540: PPUSH
71541: LD_VAR 0 11
71545: PPUSH
71546: CALL 22424 0 11
71550: GO 71553
71552: POP
// end ;
71553: PPOPN 11
71555: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71556: LD_VAR 0 1
71560: PPUSH
71561: LD_VAR 0 2
71565: PPUSH
71566: LD_VAR 0 3
71570: PPUSH
71571: LD_VAR 0 4
71575: PPUSH
71576: LD_VAR 0 5
71580: PPUSH
71581: CALL 25827 0 5
// end ; end_of_file
71585: PPOPN 5
71587: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71588: LD_VAR 0 1
71592: PPUSH
71593: LD_VAR 0 2
71597: PPUSH
71598: LD_VAR 0 3
71602: PPUSH
71603: LD_VAR 0 4
71607: PPUSH
71608: LD_VAR 0 5
71612: PPUSH
71613: LD_VAR 0 6
71617: PPUSH
71618: CALL 10044 0 6
// end ;
71622: PPOPN 6
71624: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71625: LD_INT 0
71627: PPUSH
// begin if not units then
71628: LD_VAR 0 1
71632: NOT
71633: IFFALSE 71637
// exit ;
71635: GO 71637
// end ;
71637: PPOPN 7
71639: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71640: CALL 9938 0 0
// end ;
71644: PPOPN 1
71646: END
