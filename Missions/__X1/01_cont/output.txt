// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5318
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5318
// Say ( Heike , DH-dogtag-found ) ;
5306: LD_EXP 16
5310: PPUSH
5311: LD_STRING DH-dogtag-found
5313: PPUSH
5314: CALL_OW 88
// end ;
5318: PPOPN 1
5320: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5321: LD_EXP 8
5325: NOT
5326: PUSH
5327: LD_EXP 7
5331: NOT
5332: AND
5333: PUSH
5334: LD_INT 5
5336: PPUSH
5337: LD_EXP 16
5341: PPUSH
5342: CALL_OW 292
5346: AND
5347: PUSH
5348: LD_EXP 16
5352: PPUSH
5353: LD_EXP 17
5357: PPUSH
5358: CALL_OW 296
5362: PUSH
5363: LD_INT 8
5365: LESS
5366: AND
5367: IFFALSE 5752
5369: GO 5371
5371: DISABLE
// begin olafSpotted := true ;
5372: LD_ADDR_EXP 8
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if HasTask ( Olaf ) then
5380: LD_EXP 17
5384: PPUSH
5385: CALL_OW 314
5389: IFFALSE 5400
// ComStop ( Olaf ) ;
5391: LD_EXP 17
5395: PPUSH
5396: CALL_OW 141
// InGameOn ;
5400: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5404: LD_EXP 17
5408: PPUSH
5409: LD_EXP 16
5413: PPUSH
5414: CALL_OW 296
5418: PUSH
5419: LD_INT 8
5421: GREATER
5422: IFFALSE 5438
// ComMoveUnit ( Olaf , Heike ) ;
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5438: LD_INT 35
5440: PPUSH
5441: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5445: LD_EXP 17
5449: PPUSH
5450: LD_EXP 16
5454: PPUSH
5455: CALL_OW 296
5459: PUSH
5460: LD_INT 8
5462: LESSEQUAL
5463: IFFALSE 5438
// ComTurnUnit ( Heike , Olaf ) ;
5465: LD_EXP 16
5469: PPUSH
5470: LD_EXP 17
5474: PPUSH
5475: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5479: LD_EXP 17
5483: PPUSH
5484: LD_EXP 16
5488: PPUSH
5489: CALL_OW 119
// DialogueOn ;
5493: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5497: LD_EXP 17
5501: PPUSH
5502: LD_STRING DO-olaf-1
5504: PPUSH
5505: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5509: LD_EXP 16
5513: PPUSH
5514: LD_STRING DH-olaf-1
5516: PPUSH
5517: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5521: LD_EXP 17
5525: PPUSH
5526: LD_STRING DO-olaf-2
5528: PPUSH
5529: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5533: LD_EXP 16
5537: PPUSH
5538: LD_STRING DH-olaf-2
5540: PPUSH
5541: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_STRING DO-olaf-3
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5557: LD_EXP 17
5561: PPUSH
5562: LD_STRING DO-olaf-4
5564: PPUSH
5565: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DH-olaf-4
5576: PPUSH
5577: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5581: LD_EXP 17
5585: PPUSH
5586: LD_STRING DO-olaf-5
5588: PPUSH
5589: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5593: LD_EXP 16
5597: PPUSH
5598: LD_STRING DH-olaf-5
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5605: LD_EXP 17
5609: PPUSH
5610: LD_STRING DO-olaf-6
5612: PPUSH
5613: CALL_OW 88
// if russianSpotted or johnnySaved then
5617: LD_EXP 9
5621: PUSH
5622: LD_EXP 4
5626: OR
5627: IFFALSE 5655
// begin Say ( Heike , DH-olaf-6a ) ;
5629: LD_EXP 16
5633: PPUSH
5634: LD_STRING DH-olaf-6a
5636: PPUSH
5637: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5641: LD_EXP 17
5645: PPUSH
5646: LD_STRING DO-olaf-7a
5648: PPUSH
5649: CALL_OW 88
// end else
5653: GO 5679
// begin Say ( Heike , DH-olaf-6b ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DH-olaf-6b
5662: PPUSH
5663: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5667: LD_EXP 17
5671: PPUSH
5672: LD_STRING DO-olaf-7b
5674: PPUSH
5675: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5679: LD_EXP 17
5683: PPUSH
5684: LD_STRING DO-olaf-8
5686: PPUSH
5687: CALL_OW 88
// DialogueOff ;
5691: CALL_OW 7
// InGameOff ;
5695: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5699: LD_STRING O3_camp_cont
5701: PPUSH
5702: CALL_OW 337
// if not johnnySaved then
5706: LD_EXP 4
5710: NOT
5711: IFFALSE 5722
// KillUnit ( Johnny ) ;
5713: LD_EXP 25
5717: PPUSH
5718: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_INT 52
5729: PPUSH
5730: LD_INT 90
5732: PPUSH
5733: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5737: LD_EXP 17
5741: PPUSH
5742: LD_INT 53
5744: PPUSH
5745: LD_INT 89
5747: PPUSH
5748: CALL_OW 178
// end ;
5752: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5753: LD_EXP 8
5757: NOT
5758: PUSH
5759: LD_EXP 16
5763: PPUSH
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 296
5773: PUSH
5774: LD_INT 36
5776: LESS
5777: AND
5778: IFFALSE 5798
5780: GO 5782
5782: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5783: LD_EXP 17
5787: PPUSH
5788: LD_INT 39
5790: PPUSH
5791: LD_INT 71
5793: PPUSH
5794: CALL_OW 111
5798: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5799: LD_EXP 7
5803: NOT
5804: PUSH
5805: LD_INT 2
5807: PPUSH
5808: LD_EXP 19
5812: PPUSH
5813: CALL_OW 292
5817: PUSH
5818: LD_INT 2
5820: PPUSH
5821: LD_EXP 18
5825: PPUSH
5826: CALL_OW 292
5830: OR
5831: AND
5832: IFFALSE 7153
5834: GO 5836
5836: DISABLE
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin if not johnnySaved then
5842: LD_EXP 4
5846: NOT
5847: IFFALSE 5858
// KillUnit ( Johnny ) ;
5849: LD_EXP 25
5853: PPUSH
5854: CALL_OW 66
// mercenariesSpotted := true ;
5858: LD_ADDR_EXP 7
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5866: LD_STRING O4_camp_cont
5868: PPUSH
5869: CALL_OW 337
// InGameOn ;
5873: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5877: LD_INT 53
5879: PPUSH
5880: LD_INT 89
5882: PPUSH
5883: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5887: LD_INT 53
5889: PPUSH
5890: LD_INT 89
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_INT 8
5898: NEG
5899: PPUSH
5900: CALL_OW 330
// if olafSpotted then
5904: LD_EXP 8
5908: IFFALSE 6026
// begin AddComTurnUnit ( Olaf , Heike ) ;
5910: LD_EXP 17
5914: PPUSH
5915: LD_EXP 16
5919: PPUSH
5920: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5924: LD_EXP 16
5928: PPUSH
5929: LD_INT 51
5931: PPUSH
5932: LD_INT 86
5934: PPUSH
5935: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5939: LD_EXP 16
5943: PPUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5953: LD_EXP 17
5957: PPUSH
5958: LD_STRING DO-camp-1
5960: PPUSH
5961: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5965: LD_EXP 18
5969: PUSH
5970: LD_EXP 19
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PPUSH
5979: LD_EXP 16
5983: PPUSH
5984: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5988: LD_EXP 18
5992: PPUSH
5993: LD_STRING DG-camp-1
5995: PPUSH
5996: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6000: LD_EXP 16
6004: PPUSH
6005: LD_STRING DH-camp-1
6007: PPUSH
6008: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6012: LD_EXP 17
6016: PPUSH
6017: LD_STRING DO-camp-2
6019: PPUSH
6020: CALL_OW 88
// end else
6024: GO 6421
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: LD_INT 51
6033: PPUSH
6034: LD_INT 86
6036: PPUSH
6037: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6041: LD_EXP 16
6045: PPUSH
6046: LD_EXP 18
6050: PPUSH
6051: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6055: LD_EXP 18
6059: PUSH
6060: LD_EXP 19
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: LD_EXP 16
6073: PPUSH
6074: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6078: LD_EXP 18
6082: PPUSH
6083: LD_STRING DG-camp-1a
6085: PPUSH
6086: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6090: LD_EXP 16
6094: PPUSH
6095: LD_STRING DH-camp-1a
6097: PPUSH
6098: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6109: LD_EXP 19
6113: PPUSH
6114: LD_EXP 17
6118: PPUSH
6119: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6123: LD_EXP 19
6127: PPUSH
6128: LD_STRING DM-camp-1a
6130: PPUSH
6131: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6135: LD_EXP 17
6139: PPUSH
6140: LD_INT 52
6142: PPUSH
6143: LD_INT 90
6145: PPUSH
6146: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_EXP 16
6159: PPUSH
6160: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6164: LD_EXP 18
6168: PPUSH
6169: LD_STRING DG-camp-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6176: LD_EXP 16
6180: PPUSH
6181: LD_STRING DH-camp-2a
6183: PPUSH
6184: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6188: LD_EXP 19
6192: PPUSH
6193: LD_STRING DM-camp-2a
6195: PPUSH
6196: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6207: LD_EXP 17
6211: PPUSH
6212: LD_EXP 16
6216: PPUSH
6217: CALL_OW 296
6221: PUSH
6222: LD_INT 10
6224: LESS
6225: IFFALSE 6200
// AddComTurnUnit ( Olaf , Heike ) ;
6227: LD_EXP 17
6231: PPUSH
6232: LD_EXP 16
6236: PPUSH
6237: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6241: LD_EXP 19
6245: PPUSH
6246: LD_EXP 16
6250: PPUSH
6251: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6255: LD_EXP 17
6259: PPUSH
6260: LD_STRING DO-camp-2a
6262: PPUSH
6263: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6267: LD_EXP 16
6271: PPUSH
6272: LD_EXP 17
6276: PPUSH
6277: CALL_OW 119
// if russianSpotted then
6281: LD_EXP 9
6285: IFFALSE 6325
// begin Say ( Heike , DH-camp-2aa ) ;
6287: LD_EXP 16
6291: PPUSH
6292: LD_STRING DH-camp-2aa
6294: PPUSH
6295: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6299: LD_EXP 18
6303: PPUSH
6304: LD_STRING DG-camp-2aa
6306: PPUSH
6307: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6311: LD_EXP 19
6315: PPUSH
6316: LD_STRING DM-camp-2aa
6318: PPUSH
6319: CALL_OW 88
// end else
6323: GO 6349
// begin Say ( Heike , DH-camp-2ab ) ;
6325: LD_EXP 16
6329: PPUSH
6330: LD_STRING DH-camp-2ab
6332: PPUSH
6333: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6337: LD_EXP 19
6341: PPUSH
6342: LD_STRING DM-camp-2ab
6344: PPUSH
6345: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6349: LD_EXP 16
6353: PPUSH
6354: LD_STRING DH-camp-3a
6356: PPUSH
6357: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6361: LD_EXP 17
6365: PPUSH
6366: LD_STRING DO-camp-3a
6368: PPUSH
6369: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6373: LD_EXP 18
6377: PPUSH
6378: LD_STRING DG-camp-3a
6380: PPUSH
6381: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6385: LD_EXP 16
6389: PPUSH
6390: LD_STRING DH-camp-4aa
6392: PPUSH
6393: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6397: LD_EXP 19
6401: PPUSH
6402: LD_STRING DM-camp-4aa
6404: PPUSH
6405: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6409: LD_EXP 17
6413: PPUSH
6414: LD_STRING DO-camp-4a
6416: PPUSH
6417: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DO-camp-3
6428: PPUSH
6429: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6433: LD_EXP 17
6437: PPUSH
6438: LD_STRING DO-camp-4
6440: PPUSH
6441: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6445: LD_EXP 18
6449: PPUSH
6450: LD_EXP 17
6454: PPUSH
6455: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6459: LD_EXP 18
6463: PPUSH
6464: LD_STRING DG-camp-4
6466: PPUSH
6467: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6471: LD_EXP 16
6475: PPUSH
6476: LD_EXP 18
6480: PPUSH
6481: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6485: LD_EXP 16
6489: PPUSH
6490: LD_STRING DH-camp-4
6492: PPUSH
6493: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6497: LD_EXP 19
6501: PUSH
6502: LD_EXP 17
6506: PUSH
6507: LD_EXP 18
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: PPUSH
6517: LD_EXP 16
6521: PPUSH
6522: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6526: LD_EXP 18
6530: PPUSH
6531: LD_STRING DG-camp-5
6533: PPUSH
6534: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6538: LD_EXP 18
6542: PPUSH
6543: LD_STRING DG-camp-6
6545: PPUSH
6546: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6550: LD_EXP 16
6554: PPUSH
6555: LD_STRING DH-camp-6
6557: PPUSH
6558: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6562: LD_EXP 18
6566: PPUSH
6567: LD_STRING DG-camp-7
6569: PPUSH
6570: CALL_OW 88
// if DogTagFound then
6574: LD_EXP 6
6578: IFFALSE 6618
// begin Say ( Heike , DH-quest-1a ) ;
6580: LD_EXP 16
6584: PPUSH
6585: LD_STRING DH-quest-1a
6587: PPUSH
6588: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6592: LD_EXP 18
6596: PPUSH
6597: LD_STRING DG-quest-1a
6599: PPUSH
6600: CALL_OW 88
// mercenariesQuestDone := true ;
6604: LD_ADDR_EXP 11
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// InGameOff ;
6612: CALL_OW 9
// end else
6616: GO 6784
// begin Say ( Heike , DH-camp-7 ) ;
6618: LD_EXP 16
6622: PPUSH
6623: LD_STRING DH-camp-7
6625: PPUSH
6626: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6630: LD_EXP 16
6634: PPUSH
6635: CALL_OW 256
6639: PUSH
6640: LD_INT 1000
6642: LESS
6643: IFFALSE 6735
// begin Say ( Olaf , DO-heal-1 ) ;
6645: LD_EXP 17
6649: PPUSH
6650: LD_STRING DO-heal-1
6652: PPUSH
6653: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6657: LD_EXP 16
6661: PPUSH
6662: LD_INT 51
6664: PPUSH
6665: LD_INT 88
6667: PPUSH
6668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6672: LD_INT 35
6674: PPUSH
6675: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6679: LD_EXP 16
6683: PPUSH
6684: LD_EXP 17
6688: PPUSH
6689: CALL_OW 296
6693: PUSH
6694: LD_INT 4
6696: LESS
6697: PUSH
6698: LD_EXP 16
6702: PPUSH
6703: LD_INT 51
6705: PPUSH
6706: LD_INT 88
6708: PPUSH
6709: CALL_OW 307
6713: OR
6714: IFFALSE 6672
// SetLives ( Heike , 1000 ) ;
6716: LD_EXP 16
6720: PPUSH
6721: LD_INT 1000
6723: PPUSH
6724: CALL_OW 234
// wait ( 0 0$2 ) ;
6728: LD_INT 70
6730: PPUSH
6731: CALL_OW 67
// end ; InGameOff ;
6735: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6739: LD_EXP 17
6743: PUSH
6744: LD_EXP 18
6748: PUSH
6749: LD_EXP 19
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PPUSH
6759: LD_INT 53
6761: PPUSH
6762: LD_INT 89
6764: PPUSH
6765: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6769: LD_STRING O5_proof_cont
6771: PPUSH
6772: CALL_OW 337
// mercenariesQuestReady := true ;
6776: LD_ADDR_EXP 10
6780: PUSH
6781: LD_INT 1
6783: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6784: LD_EXP 10
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7153
// wait ( 0 0$35 ) ;
6793: LD_INT 1225
6795: PPUSH
6796: CALL_OW 67
// driver := PreparePatrolTank ;
6800: LD_ADDR_VAR 0 2
6804: PUSH
6805: CALL 2821 0 0
6809: ST_TO_ADDR
// if not driver then
6810: LD_VAR 0 2
6814: NOT
6815: IFFALSE 6819
// exit ;
6817: GO 7153
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6819: LD_INT 2
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 2
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_VAR 0 2
6844: PPUSH
6845: CALL_OW 310
6849: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6850: LD_VAR 0 3
6854: PPUSH
6855: LD_INT 500
6857: PPUSH
6858: CALL_OW 234
// SetLives ( driver , 450 ) ;
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_INT 450
6869: PPUSH
6870: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6874: LD_VAR 0 2
6878: PPUSH
6879: LD_INT 59
6881: PPUSH
6882: LD_INT 60
6884: PPUSH
6885: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6889: LD_INT 35
6891: PPUSH
6892: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6896: LD_VAR 0 3
6900: PPUSH
6901: LD_INT 59
6903: PPUSH
6904: LD_INT 60
6906: PPUSH
6907: CALL_OW 307
6911: IFFALSE 6889
// if not See ( 1 , Heike ) then
6913: LD_INT 1
6915: PPUSH
6916: LD_EXP 16
6920: PPUSH
6921: CALL_OW 292
6925: NOT
6926: IFFALSE 7050
// begin if Difficulty < 3 then
6928: LD_OWVAR 67
6932: PUSH
6933: LD_INT 3
6935: LESS
6936: IFFALSE 6954
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6938: LD_INT 59
6940: PPUSH
6941: LD_INT 60
6943: PPUSH
6944: LD_INT 2
6946: PPUSH
6947: LD_INT 6
6949: PPUSH
6950: CALL_OW 330
// ComExitVehicle ( driver ) ;
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 121
// wait ( 0 0$1 ) ;
6963: LD_INT 35
6965: PPUSH
6966: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 58
6977: PPUSH
6978: LD_INT 54
6980: PPUSH
6981: CALL_OW 171
// wait ( 0 0$1 ) ;
6985: LD_INT 35
6987: PPUSH
6988: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6992: LD_VAR 0 2
6996: PPUSH
6997: LD_INT 57
6999: PPUSH
7000: LD_INT 53
7002: PPUSH
7003: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 350
7014: PPUSH
7015: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 107
7040: PPUSH
7041: LD_INT 118
7043: PPUSH
7044: CALL_OW 171
// end else
7048: GO 7065
// begin ComMoveXY ( driver , 107 , 118 ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: LD_INT 107
7057: PPUSH
7058: LD_INT 118
7060: PPUSH
7061: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7072: LD_VAR 0 3
7076: PPUSH
7077: LD_INT 107
7079: PPUSH
7080: LD_INT 118
7082: PPUSH
7083: CALL_OW 307
7087: PUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 301
7097: OR
7098: IFFALSE 7065
// if IsDead ( driver [ 1 ] ) then
7100: LD_VAR 0 2
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: CALL_OW 301
7113: IFFALSE 7117
// exit ;
7115: GO 7153
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 1
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: FOR_IN
7138: IFFALSE 7151
// RemoveUnit ( i ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 64
7149: GO 7137
7151: POP
7152: POP
// end ;
7153: PPOPN 3
7155: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7156: LD_INT 10
7158: PPUSH
7159: LD_INT 22
7161: PUSH
7162: LD_INT 2
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 2
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 70
7187: IFFALSE 7261
7189: GO 7191
7191: DISABLE
// begin InGameOn ;
7192: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7196: LD_EXP 17
7200: PUSH
7201: LD_EXP 19
7205: PUSH
7206: LD_EXP 18
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: PPUSH
7216: LD_EXP 16
7220: PPUSH
7221: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7225: LD_EXP 19
7229: PPUSH
7230: LD_STRING DM-quest-1
7232: PPUSH
7233: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7237: LD_EXP 18
7241: PPUSH
7242: LD_STRING DG-quest-1
7244: PPUSH
7245: CALL_OW 88
// InGameOff ;
7249: CALL_OW 9
// mercenariesQuestDone := true ;
7253: LD_ADDR_EXP 11
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// end ;
7261: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7262: LD_EXP 16
7266: PPUSH
7267: LD_INT 10
7269: PPUSH
7270: CALL_OW 308
7274: PUSH
7275: LD_EXP 6
7279: AND
7280: PUSH
7281: LD_EXP 10
7285: AND
7286: PUSH
7287: LD_INT 10
7289: PPUSH
7290: LD_INT 22
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 21
7302: PUSH
7303: LD_INT 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 70
7318: NOT
7319: AND
7320: IFFALSE 7492
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
// begin InGameOn ;
7328: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7332: LD_EXP 17
7336: PUSH
7337: LD_EXP 19
7341: PUSH
7342: LD_EXP 18
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PPUSH
7352: LD_EXP 16
7356: PPUSH
7357: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7361: LD_EXP 16
7365: PPUSH
7366: LD_INT 54
7368: PPUSH
7369: LD_INT 86
7371: PPUSH
7372: CALL_OW 111
// p := p + 1 ;
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PLUS
7389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7390: LD_INT 35
7392: PPUSH
7393: CALL_OW 67
// p := p + 1 ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_VAR 0 1
7406: PUSH
7407: LD_INT 1
7409: PLUS
7410: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7411: LD_EXP 16
7415: PPUSH
7416: LD_EXP 18
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 4
7428: LESS
7429: PUSH
7430: LD_VAR 0 1
7434: PUSH
7435: LD_INT 5
7437: GREATER
7438: OR
7439: IFFALSE 7390
// Say ( Mike , DM-quest-1 ) ;
7441: LD_EXP 19
7445: PPUSH
7446: LD_STRING DM-quest-1
7448: PPUSH
7449: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7453: LD_EXP 18
7457: PPUSH
7458: LD_STRING DG-quest-1
7460: PPUSH
7461: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7465: LD_EXP 16
7469: PPUSH
7470: LD_INT 55
7472: PPUSH
7473: LD_INT 87
7475: PPUSH
7476: CALL_OW 111
// InGameOff ;
7480: CALL_OW 9
// mercenariesQuestDone := true ;
7484: LD_ADDR_EXP 11
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// end ;
7492: PPOPN 1
7494: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7495: LD_EXP 16
7499: PUSH
7500: LD_INT 55
7502: PUSH
7503: EMPTY
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: IN
7511: IFFALSE 7551
7513: GO 7515
7515: DISABLE
// begin if Difficulty < 3 then
7516: LD_OWVAR 67
7520: PUSH
7521: LD_INT 3
7523: LESS
7524: IFFALSE 7539
// RemoveSeeing ( 59 , 60 , 2 ) ;
7526: LD_INT 59
7528: PPUSH
7529: LD_INT 60
7531: PPUSH
7532: LD_INT 2
7534: PPUSH
7535: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7539: LD_EXP 16
7543: PPUSH
7544: LD_STRING DH-driver
7546: PPUSH
7547: CALL_OW 88
// end ;
7551: END
// every 0 0$1 trigger mercenariesQuestDone do
7552: LD_EXP 11
7556: IFFALSE 8044
7558: GO 7560
7560: DISABLE
// begin if mercenariesQuestReady then
7561: LD_EXP 10
7565: IFFALSE 7574
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7567: LD_STRING O5_proof_cont_out
7569: PPUSH
7570: CALL_OW 337
// InGameOn ;
7574: CALL_OW 8
// if IsInUnit ( Heike ) then
7578: LD_EXP 16
7582: PPUSH
7583: CALL_OW 310
7587: IFFALSE 7598
// ComExitVehicle ( Heike ) ;
7589: LD_EXP 16
7593: PPUSH
7594: CALL_OW 121
// wait ( 3 ) ;
7598: LD_INT 3
7600: PPUSH
7601: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7605: LD_EXP 16
7609: PPUSH
7610: LD_EXP 18
7614: PPUSH
7615: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7619: LD_EXP 17
7623: PUSH
7624: LD_EXP 19
7628: PUSH
7629: LD_EXP 18
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: LD_EXP 16
7643: PPUSH
7644: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7648: LD_EXP 16
7652: PPUSH
7653: LD_STRING DH-quest-done-1
7655: PPUSH
7656: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7660: LD_EXP 19
7664: PPUSH
7665: LD_STRING DM-quest-done-1
7667: PPUSH
7668: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7672: LD_EXP 18
7676: PPUSH
7677: LD_STRING DG-quest-done-1
7679: PPUSH
7680: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7684: LD_EXP 16
7688: PPUSH
7689: LD_EXP 17
7693: PPUSH
7694: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7698: LD_EXP 16
7702: PPUSH
7703: LD_STRING DH-quest-done-2
7705: PPUSH
7706: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7710: LD_EXP 17
7714: PPUSH
7715: LD_STRING DO-quest-done-2
7717: PPUSH
7718: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7722: LD_EXP 17
7726: PPUSH
7727: LD_STRING DO-quest-done-3
7729: PPUSH
7730: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7734: LD_EXP 18
7738: PPUSH
7739: LD_INT 51
7741: PPUSH
7742: LD_INT 90
7744: PPUSH
7745: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7749: LD_EXP 18
7753: PPUSH
7754: LD_INT 50
7756: PPUSH
7757: LD_INT 89
7759: PPUSH
7760: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7764: LD_EXP 16
7768: PPUSH
7769: LD_EXP 18
7773: PPUSH
7774: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7778: LD_EXP 18
7782: PPUSH
7783: LD_STRING DG-quest-done-4
7785: PPUSH
7786: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7790: LD_EXP 18
7794: PPUSH
7795: LD_EXP 16
7799: PPUSH
7800: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7804: LD_EXP 16
7808: PPUSH
7809: CALL_OW 256
7813: PUSH
7814: LD_INT 1000
7816: LESS
7817: IFFALSE 7909
// begin Say ( Olaf , DO-heal-1 ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING DO-heal-1
7826: PPUSH
7827: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7831: LD_EXP 16
7835: PPUSH
7836: LD_INT 51
7838: PPUSH
7839: LD_INT 88
7841: PPUSH
7842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7846: LD_INT 35
7848: PPUSH
7849: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7853: LD_EXP 16
7857: PPUSH
7858: LD_EXP 17
7862: PPUSH
7863: CALL_OW 296
7867: PUSH
7868: LD_INT 4
7870: LESS
7871: PUSH
7872: LD_EXP 16
7876: PPUSH
7877: LD_INT 51
7879: PPUSH
7880: LD_INT 88
7882: PPUSH
7883: CALL_OW 307
7887: OR
7888: IFFALSE 7846
// SetLives ( Heike , 1000 ) ;
7890: LD_EXP 16
7894: PPUSH
7895: LD_INT 1000
7897: PPUSH
7898: CALL_OW 234
// wait ( 0 0$2 ) ;
7902: LD_INT 70
7904: PPUSH
7905: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7909: LD_EXP 16
7913: PPUSH
7914: LD_STRING DH-quest-done-4
7916: PPUSH
7917: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7921: LD_EXP 17
7925: PPUSH
7926: LD_STRING DO-quest-done-4
7928: PPUSH
7929: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7933: LD_EXP 16
7937: PPUSH
7938: LD_EXP 17
7942: PPUSH
7943: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7947: LD_EXP 16
7951: PPUSH
7952: LD_STRING DH-quest-done-5
7954: PPUSH
7955: CALL_OW 88
// InGameOff ;
7959: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7963: LD_STRING O6_end_cont
7965: PPUSH
7966: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7970: LD_EXP 18
7974: PPUSH
7975: LD_INT 2
7977: PPUSH
7978: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7982: LD_EXP 19
7986: PPUSH
7987: LD_INT 2
7989: PPUSH
7990: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7994: LD_INT 42
7996: PPUSH
7997: LD_INT 2
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8007: LD_EXP 17
8011: PPUSH
8012: LD_INT 53
8014: PPUSH
8015: LD_INT 89
8017: PPUSH
8018: CALL_OW 118
// lastObjectiveActive := true ;
8022: LD_ADDR_EXP 12
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8030: LD_INT 1
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL_OW 424
// PreparePrison ;
8040: CALL 1164 0 0
// end ;
8044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8045: LD_INT 22
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 91
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 4
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 69
8077: IFFALSE 8235
8079: GO 8081
8081: DISABLE
8082: LD_INT 0
8084: PPUSH
8085: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8086: LD_INT 245
8088: PUSH
8089: LD_INT 210
8091: PUSH
8092: LD_INT 210
8094: PUSH
8095: LD_INT 175
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_OWVAR 67
8108: ARRAY
8109: PPUSH
8110: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: EMPTY
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: ST_TO_ADDR
// if not tmp then
8155: LD_VAR 0 2
8159: NOT
8160: IFFALSE 8164
// exit ;
8162: GO 8235
// for i in tmp do
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: FOR_IN
8175: IFFALSE 8203
// begin ComExitBuilding ( i ) ;
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8186: LD_VAR 0 1
8190: PPUSH
8191: LD_INT 121
8193: PPUSH
8194: LD_INT 22
8196: PPUSH
8197: CALL_OW 174
// end ;
8201: GO 8174
8203: POP
8204: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8205: LD_EXP 23
8209: PPUSH
8210: LD_INT 121
8212: PPUSH
8213: LD_INT 22
8215: PPUSH
8216: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8220: LD_EXP 24
8224: PPUSH
8225: LD_INT 121
8227: PPUSH
8228: LD_INT 22
8230: PPUSH
8231: CALL_OW 114
// end ;
8235: PPOPN 2
8237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8238: LD_INT 22
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 91
8250: PUSH
8251: LD_INT 8
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PPUSH
8266: CALL_OW 69
8270: IFFALSE 8428
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8279: LD_INT 315
8281: PUSH
8282: LD_INT 280
8284: PUSH
8285: LD_INT 245
8287: PUSH
8288: LD_INT 210
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: PUSH
8297: LD_OWVAR 67
8301: ARRAY
8302: PPUSH
8303: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_INT 22
8314: PUSH
8315: LD_INT 3
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 25
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 54
8334: PUSH
8335: EMPTY
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// if not tmp then
8348: LD_VAR 0 2
8352: NOT
8353: IFFALSE 8357
// exit ;
8355: GO 8428
// for i in tmp do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: LD_VAR 0 2
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8396
// begin ComExitBuilding ( i ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_INT 142
8386: PPUSH
8387: LD_INT 71
8389: PPUSH
8390: CALL_OW 174
// end ;
8394: GO 8367
8396: POP
8397: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8398: LD_EXP 23
8402: PPUSH
8403: LD_INT 142
8405: PPUSH
8406: LD_INT 71
8408: PPUSH
8409: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8413: LD_EXP 24
8417: PPUSH
8418: LD_INT 142
8420: PPUSH
8421: LD_INT 71
8423: PPUSH
8424: CALL_OW 114
// end ;
8428: PPOPN 2
8430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8431: LD_INT 22
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 58
8453: PUSH
8454: EMPTY
8455: LIST
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 24
8462: PUSH
8463: LD_INT 1000
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 91
8476: PUSH
8477: LD_EXP 17
8481: PUSH
8482: LD_INT 8
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 69
8501: PUSH
8502: LD_EXP 17
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: IFFALSE 8626
8514: GO 8516
8516: DISABLE
// begin enable ;
8517: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8518: LD_EXP 17
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 58
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 1000
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 91
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_INT 8
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 69
8593: PUSH
8594: LD_INT 1
8596: ARRAY
8597: PPUSH
8598: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8602: LD_EXP 17
8606: PPUSH
8607: LD_INT 52
8609: PPUSH
8610: LD_INT 90
8612: PPUSH
8613: CALL_OW 171
// AddComHold ( Olaf ) ;
8617: LD_EXP 17
8621: PPUSH
8622: CALL_OW 200
// end ;
8626: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8627: LD_EXP 12
8631: PUSH
8632: LD_INT 2
8634: PPUSH
8635: CALL_OW 302
8639: NOT
8640: AND
8641: PUSH
8642: LD_OWVAR 67
8646: PUSH
8647: LD_INT 1
8649: EQUAL
8650: AND
8651: PUSH
8652: LD_EXP 13
8656: NOT
8657: AND
8658: IFFALSE 8675
8660: GO 8662
8662: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8663: LD_EXP 16
8667: PPUSH
8668: LD_STRING DH-prison-missing
8670: PPUSH
8671: CALL_OW 88
// end ;
8675: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8676: LD_EXP 12
8680: PUSH
8681: LD_INT 8
8683: PPUSH
8684: CALL_OW 302
8688: NOT
8689: AND
8690: PUSH
8691: LD_OWVAR 67
8695: PUSH
8696: LD_INT 1
8698: GREATER
8699: AND
8700: PUSH
8701: LD_EXP 13
8705: NOT
8706: AND
8707: IFFALSE 8724
8709: GO 8711
8711: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8712: LD_EXP 16
8716: PPUSH
8717: LD_STRING DH-prison-missing
8719: PPUSH
8720: CALL_OW 88
// end ;
8724: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8725: LD_EXP 12
8729: PUSH
8730: LD_INT 3
8732: PPUSH
8733: CALL_OW 302
8737: NOT
8738: AND
8739: PUSH
8740: LD_EXP 13
8744: NOT
8745: AND
8746: IFFALSE 8763
8748: GO 8750
8750: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8751: LD_EXP 16
8755: PPUSH
8756: LD_STRING DH-prison-missing-a
8758: PPUSH
8759: CALL_OW 88
// end ;
8763: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8764: LD_EXP 12
8768: PUSH
8769: LD_INT 10
8771: PPUSH
8772: CALL_OW 302
8776: NOT
8777: AND
8778: PUSH
8779: LD_EXP 13
8783: NOT
8784: AND
8785: IFFALSE 8802
8787: GO 8789
8789: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8790: LD_EXP 16
8794: PPUSH
8795: LD_STRING DH-prison-missing-a
8797: PPUSH
8798: CALL_OW 88
// end ;
8802: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8803: LD_EXP 13
8807: NOT
8808: PUSH
8809: LD_EXP 12
8813: AND
8814: PUSH
8815: LD_INT 2
8817: PPUSH
8818: LD_EXP 20
8822: PPUSH
8823: CALL_OW 292
8827: AND
8828: IFFALSE 8915
8830: GO 8832
8832: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8833: LD_EXP 20
8837: PPUSH
8838: LD_EXP 16
8842: PPUSH
8843: CALL_OW 119
// DialogueOn ;
8847: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8851: LD_EXP 20
8855: PPUSH
8856: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_STRING DK-prison-found
8867: PPUSH
8868: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8872: LD_EXP 16
8876: PPUSH
8877: LD_STRING DH-prison-found
8879: PPUSH
8880: CALL_OW 88
// DialogueOff ;
8884: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8888: LD_EXP 20
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: CALL_OW 235
// prisonFound := true ;
8900: LD_ADDR_EXP 13
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8908: LD_STRING O6_prison_out
8910: PPUSH
8911: CALL_OW 337
// end ;
8915: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8916: LD_EXP 16
8920: PPUSH
8921: CALL_OW 256
8925: PUSH
8926: LD_INT 500
8928: LESS
8929: IFFALSE 8942
8931: GO 8933
8933: DISABLE
// heikeHurt := true ;
8934: LD_ADDR_EXP 14
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
8942: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8943: LD_INT 22
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: IFFALSE 9287
8973: GO 8975
8975: DISABLE
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
8980: PPUSH
// begin uc_side := 3 ;
8981: LD_ADDR_OWVAR 20
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// uc_nation := 3 ;
8989: LD_ADDR_OWVAR 21
8993: PUSH
8994: LD_INT 3
8996: ST_TO_ADDR
// tmp := [ ] ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// for i := 1 to 5 do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_INT 5
9016: PUSH
9017: FOR_TO
9018: IFFALSE 9126
// begin PrepareHuman ( false , 1 , 4 ) ;
9020: LD_INT 0
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: LD_INT 4
9028: PPUSH
9029: CALL_OW 380
// un := CreateHuman ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: CALL_OW 44
9042: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9043: LD_VAR 0 3
9047: PPUSH
9048: LD_INT 4
9050: PPUSH
9051: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9055: LD_VAR 0 3
9059: PPUSH
9060: LD_INT 158
9062: PPUSH
9063: LD_INT 80
9065: PPUSH
9066: LD_INT 0
9068: PPUSH
9069: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9073: LD_VAR 0 3
9077: PPUSH
9078: LD_INT 147
9080: PPUSH
9081: LD_INT 75
9083: PPUSH
9084: CALL_OW 111
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 2
9109: PUSH
9110: LD_INT 1
9112: PLUS
9113: PPUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: CALL_OW 1
9123: ST_TO_ADDR
// end ;
9124: GO 9017
9126: POP
9127: POP
// repeat wait ( 0 0$1 ) ;
9128: LD_INT 35
9130: PPUSH
9131: CALL_OW 67
// for i in tmp do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: LD_VAR 0 2
9144: PUSH
9145: FOR_IN
9146: IFFALSE 9267
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9178: LD_VAR 0 3
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: CALL_OW 250
9191: PPUSH
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 1
9199: ARRAY
9200: PPUSH
9201: CALL_OW 251
9205: PPUSH
9206: CALL_OW 428
9210: IFFALSE 9251
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 1
9224: ARRAY
9225: PPUSH
9226: CALL_OW 250
9230: PPUSH
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 1
9238: ARRAY
9239: PPUSH
9240: CALL_OW 251
9244: PPUSH
9245: CALL_OW 114
9249: GO 9265
// ComAttackUnit ( i , Heike ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_EXP 16
9260: PPUSH
9261: CALL_OW 115
// end ;
9265: GO 9145
9267: POP
9268: POP
// until IsDead ( Heike ) or not tmp ;
9269: LD_EXP 16
9273: PPUSH
9274: CALL_OW 301
9278: PUSH
9279: LD_VAR 0 2
9283: NOT
9284: OR
9285: IFFALSE 9128
// end ;
9287: PPOPN 3
9289: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9290: LD_EXP 12
9294: PUSH
9295: LD_EXP 16
9299: PPUSH
9300: CALL_OW 302
9304: AND
9305: PUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 21
9311: PUSH
9312: LD_INT 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 22
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 50
9331: PUSH
9332: EMPTY
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: PPUSH
9340: CALL_OW 71
9344: PUSH
9345: LD_INT 0
9347: EQUAL
9348: AND
9349: IFFALSE 9748
9351: GO 9353
9353: DISABLE
9354: LD_INT 0
9356: PPUSH
// begin if not heikeHurt then
9357: LD_EXP 14
9361: NOT
9362: IFFALSE 9371
// SetAchievement ( ACH_INVINCIBLE ) ;
9364: LD_STRING ACH_INVINCIBLE
9366: PPUSH
9367: CALL_OW 543
// if tick <= 6 6$00 then
9371: LD_OWVAR 1
9375: PUSH
9376: LD_INT 12600
9378: LESSEQUAL
9379: IFFALSE 9388
// SetAchievement ( ACH_HSPEED_1 ) ;
9381: LD_STRING ACH_HSPEED_1
9383: PPUSH
9384: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9388: LD_STRING enableBioCharacter(BIO_GIVI)
9390: PPUSH
9391: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9395: LD_STRING enableBioCharacter(BIO_MIKE)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9402: LD_STRING enableBioCharacter(BIO_OLAF)
9404: PPUSH
9405: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 1
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 50
9436: PUSH
9437: EMPTY
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: PPUSH
9445: CALL_OW 69
9449: ST_TO_ADDR
// if Kamil in tmp then
9450: LD_EXP 20
9454: PUSH
9455: LD_VAR 0 1
9459: IN
9460: IFFALSE 9469
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9462: LD_STRING enableBioCharacter(BIO_KAMI)
9464: PPUSH
9465: CALL_OW 559
// if prisonFound then
9469: LD_EXP 13
9473: IFFALSE 9487
// AddMedal ( med1 , 1 ) else
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 101
9485: GO 9498
// AddMedal ( med1 , - 1 ) ;
9487: LD_STRING med1
9489: PPUSH
9490: LD_INT 1
9492: NEG
9493: PPUSH
9494: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9498: LD_VAR 0 1
9502: PUSH
9503: LD_INT 3
9505: LESS
9506: PUSH
9507: LD_EXP 13
9511: NOT
9512: AND
9513: PUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 4
9521: LESS
9522: PUSH
9523: LD_EXP 13
9527: AND
9528: OR
9529: IFFALSE 9544
// AddMedal ( med2 , - 1 ) else
9531: LD_STRING med2
9533: PPUSH
9534: LD_INT 1
9536: NEG
9537: PPUSH
9538: CALL_OW 101
9542: GO 9554
// AddMedal ( med2 , 1 ) ;
9544: LD_STRING med2
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9554: LD_EXP 13
9558: PUSH
9559: LD_EXP 4
9563: AND
9564: PUSH
9565: LD_VAR 0 1
9569: PUSH
9570: LD_INT 4
9572: GREATEREQUAL
9573: AND
9574: IFFALSE 9588
// AddMedal ( med3 , 1 ) else
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 101
9586: GO 9599
// AddMedal ( med3 , - 1 ) ;
9588: LD_STRING med3
9590: PPUSH
9591: LD_INT 1
9593: NEG
9594: PPUSH
9595: CALL_OW 101
// GiveMedals ( MAIN ) ;
9599: LD_STRING MAIN
9601: PPUSH
9602: CALL_OW 102
// RewardPeople ( tmp ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9615: LD_EXP 4
9619: PPUSH
9620: LD_STRING 01_JohnnySaved
9622: PPUSH
9623: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9627: LD_EXP 16
9631: PPUSH
9632: LD_STRING 01_Heike
9634: PPUSH
9635: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9639: LD_EXP 18
9643: PPUSH
9644: CALL_OW 302
9648: PUSH
9649: LD_EXP 18
9653: PUSH
9654: LD_VAR 0 1
9658: IN
9659: AND
9660: IFFALSE 9674
// SaveCharacters ( Givi , 01_Givi ) ;
9662: LD_EXP 18
9666: PPUSH
9667: LD_STRING 01_Givi
9669: PPUSH
9670: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9674: LD_EXP 19
9678: PPUSH
9679: CALL_OW 302
9683: PUSH
9684: LD_EXP 19
9688: PUSH
9689: LD_VAR 0 1
9693: IN
9694: AND
9695: IFFALSE 9709
// SaveCharacters ( Mike , 01_Mike ) ;
9697: LD_EXP 19
9701: PPUSH
9702: LD_STRING 01_Mike
9704: PPUSH
9705: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9709: LD_EXP 20
9713: PPUSH
9714: CALL_OW 302
9718: PUSH
9719: LD_EXP 20
9723: PUSH
9724: LD_VAR 0 1
9728: IN
9729: AND
9730: IFFALSE 9744
// SaveCharacters ( Kamil , 01_Kamil ) ;
9732: LD_EXP 20
9736: PPUSH
9737: LD_STRING 01_Kamil
9739: PPUSH
9740: CALL_OW 38
// YouWin ;
9744: CALL_OW 103
// end ; end_of_file
9748: PPOPN 1
9750: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9751: LD_VAR 0 1
9755: PUSH
9756: LD_EXP 16
9760: EQUAL
9761: IFFALSE 9770
// YouLost ( Heike ) ;
9763: LD_STRING Heike
9765: PPUSH
9766: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9770: LD_VAR 0 1
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 3
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 25
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: IN
9804: IFFALSE 9910
// begin if un in russianPatrol then
9806: LD_VAR 0 1
9810: PUSH
9811: LD_EXP 21
9815: IN
9816: IFFALSE 9834
// russianPatrol := russianPatrol diff un ;
9818: LD_ADDR_EXP 21
9822: PUSH
9823: LD_EXP 21
9827: PUSH
9828: LD_VAR 0 1
9832: DIFF
9833: ST_TO_ADDR
// if un in russianForestPatrol then
9834: LD_VAR 0 1
9838: PUSH
9839: LD_EXP 22
9843: IN
9844: IFFALSE 9862
// russianForestPatrol := russianForestPatrol diff un ;
9846: LD_ADDR_EXP 22
9850: PUSH
9851: LD_EXP 22
9855: PUSH
9856: LD_VAR 0 1
9860: DIFF
9861: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9862: LD_ADDR_EXP 5
9866: PUSH
9867: LD_EXP 5
9871: PPUSH
9872: LD_EXP 5
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: CALL_OW 250
9890: PUSH
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 251
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 1
9909: ST_TO_ADDR
// end ; end ;
9910: PPOPN 1
9912: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9913: LD_VAR 0 1
9917: PUSH
9918: LD_EXP 16
9922: EQUAL
9923: IFFALSE 9932
// YouLost ( Heike ) ;
9925: LD_STRING Heike
9927: PPUSH
9928: CALL_OW 104
// if un = Olaf then
9932: LD_VAR 0 1
9936: PUSH
9937: LD_EXP 17
9941: EQUAL
9942: IFFALSE 9951
// YouLost ( Olaf ) ;
9944: LD_STRING Olaf
9946: PPUSH
9947: CALL_OW 104
// end ;
9951: PPOPN 1
9953: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_INT 2
9961: EQUAL
9962: PUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_INT 5
9970: EQUAL
9971: AND
9972: IFFALSE 9981
// YouLost ( FriendlyFire ) ;
9974: LD_STRING FriendlyFire
9976: PPUSH
9977: CALL_OW 104
// end ; end_of_file
9981: PPOPN 2
9983: END
// export globalGameSaveCounter ; every 0 0$1 do
9984: GO 9986
9986: DISABLE
// begin enable ;
9987: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9988: LD_STRING updateTimer(
9990: PUSH
9991: LD_OWVAR 1
9995: STR
9996: PUSH
9997: LD_STRING );
9999: STR
10000: PPUSH
10001: CALL_OW 559
// end ;
10005: END
// every 0 0$1 do
10006: GO 10008
10008: DISABLE
// begin globalGameSaveCounter := 0 ;
10009: LD_ADDR_EXP 26
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10017: LD_STRING setGameSaveCounter(0)
10019: PPUSH
10020: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10024: LD_STRING initStreamRollete();
10026: PPUSH
10027: CALL_OW 559
// InitStreamMode ;
10031: CALL 11357 0 0
// DefineStreamItems ( false ) ;
10035: LD_INT 0
10037: PPUSH
10038: CALL 11821 0 1
// end ;
10042: END
// export function SOS_MapStart ( ) ; begin
10043: LD_INT 0
10045: PPUSH
// if streamModeActive then
10046: LD_EXP 27
10050: IFFALSE 10059
// DefineStreamItems ( true ) ;
10052: LD_INT 1
10054: PPUSH
10055: CALL 11821 0 1
// UpdateLuaVariables ( ) ;
10059: CALL 10076 0 0
// UpdateFactoryWaypoints ( ) ;
10063: CALL 24690 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10067: CALL 24947 0 0
// end ;
10071: LD_VAR 0 1
10075: RET
// function UpdateLuaVariables ( ) ; begin
10076: LD_INT 0
10078: PPUSH
// if globalGameSaveCounter then
10079: LD_EXP 26
10083: IFFALSE 10117
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10085: LD_ADDR_EXP 26
10089: PUSH
10090: LD_EXP 26
10094: PPUSH
10095: CALL 68757 0 1
10099: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10100: LD_STRING setGameSaveCounter(
10102: PUSH
10103: LD_EXP 26
10107: STR
10108: PUSH
10109: LD_STRING )
10111: STR
10112: PPUSH
10113: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10117: LD_STRING setGameDifficulty(
10119: PUSH
10120: LD_OWVAR 67
10124: STR
10125: PUSH
10126: LD_STRING )
10128: STR
10129: PPUSH
10130: CALL_OW 559
// end ;
10134: LD_VAR 0 1
10138: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10139: LD_INT 0
10141: PPUSH
// if p2 = stream_mode then
10142: LD_VAR 0 2
10146: PUSH
10147: LD_INT 100
10149: EQUAL
10150: IFFALSE 11153
// begin if not StreamModeActive then
10152: LD_EXP 27
10156: NOT
10157: IFFALSE 10167
// StreamModeActive := true ;
10159: LD_ADDR_EXP 27
10163: PUSH
10164: LD_INT 1
10166: ST_TO_ADDR
// if p3 = 0 then
10167: LD_VAR 0 3
10171: PUSH
10172: LD_INT 0
10174: EQUAL
10175: IFFALSE 10181
// InitStreamMode ;
10177: CALL 11357 0 0
// if p3 = 1 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 1
10188: EQUAL
10189: IFFALSE 10199
// sRocket := true ;
10191: LD_ADDR_EXP 32
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 2 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 2
10206: EQUAL
10207: IFFALSE 10217
// sSpeed := true ;
10209: LD_ADDR_EXP 31
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 3 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 3
10224: EQUAL
10225: IFFALSE 10235
// sEngine := true ;
10227: LD_ADDR_EXP 33
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 4 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 4
10242: EQUAL
10243: IFFALSE 10253
// sSpec := true ;
10245: LD_ADDR_EXP 30
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 5 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 5
10260: EQUAL
10261: IFFALSE 10271
// sLevel := true ;
10263: LD_ADDR_EXP 34
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 6 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 6
10278: EQUAL
10279: IFFALSE 10289
// sArmoury := true ;
10281: LD_ADDR_EXP 35
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 7 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 7
10296: EQUAL
10297: IFFALSE 10307
// sRadar := true ;
10299: LD_ADDR_EXP 36
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 8 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 8
10314: EQUAL
10315: IFFALSE 10325
// sBunker := true ;
10317: LD_ADDR_EXP 37
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 9 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 9
10332: EQUAL
10333: IFFALSE 10343
// sHack := true ;
10335: LD_ADDR_EXP 38
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 10 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 10
10350: EQUAL
10351: IFFALSE 10361
// sFire := true ;
10353: LD_ADDR_EXP 39
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 11 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 11
10368: EQUAL
10369: IFFALSE 10379
// sRefresh := true ;
10371: LD_ADDR_EXP 40
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 12 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 12
10386: EQUAL
10387: IFFALSE 10397
// sExp := true ;
10389: LD_ADDR_EXP 41
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 13 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 13
10404: EQUAL
10405: IFFALSE 10415
// sDepot := true ;
10407: LD_ADDR_EXP 42
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 14 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 14
10422: EQUAL
10423: IFFALSE 10433
// sFlag := true ;
10425: LD_ADDR_EXP 43
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 15 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 15
10440: EQUAL
10441: IFFALSE 10451
// sKamikadze := true ;
10443: LD_ADDR_EXP 51
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 16 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 16
10458: EQUAL
10459: IFFALSE 10469
// sTroll := true ;
10461: LD_ADDR_EXP 52
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 17 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 17
10476: EQUAL
10477: IFFALSE 10487
// sSlow := true ;
10479: LD_ADDR_EXP 53
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 18 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 18
10494: EQUAL
10495: IFFALSE 10505
// sLack := true ;
10497: LD_ADDR_EXP 54
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 19 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 19
10512: EQUAL
10513: IFFALSE 10523
// sTank := true ;
10515: LD_ADDR_EXP 56
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 20 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 20
10530: EQUAL
10531: IFFALSE 10541
// sRemote := true ;
10533: LD_ADDR_EXP 57
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 21 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 21
10548: EQUAL
10549: IFFALSE 10559
// sPowell := true ;
10551: LD_ADDR_EXP 58
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 22 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 22
10566: EQUAL
10567: IFFALSE 10577
// sTeleport := true ;
10569: LD_ADDR_EXP 61
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 23 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 23
10584: EQUAL
10585: IFFALSE 10595
// sOilTower := true ;
10587: LD_ADDR_EXP 63
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 24 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 24
10602: EQUAL
10603: IFFALSE 10613
// sShovel := true ;
10605: LD_ADDR_EXP 64
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 25 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 25
10620: EQUAL
10621: IFFALSE 10631
// sSheik := true ;
10623: LD_ADDR_EXP 65
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 26 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 26
10638: EQUAL
10639: IFFALSE 10649
// sEarthquake := true ;
10641: LD_ADDR_EXP 67
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 27 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 27
10656: EQUAL
10657: IFFALSE 10667
// sAI := true ;
10659: LD_ADDR_EXP 68
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 28 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 28
10674: EQUAL
10675: IFFALSE 10685
// sCargo := true ;
10677: LD_ADDR_EXP 71
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 29 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 29
10692: EQUAL
10693: IFFALSE 10703
// sDLaser := true ;
10695: LD_ADDR_EXP 72
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 30 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 30
10710: EQUAL
10711: IFFALSE 10721
// sExchange := true ;
10713: LD_ADDR_EXP 73
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 31 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 31
10728: EQUAL
10729: IFFALSE 10739
// sFac := true ;
10731: LD_ADDR_EXP 74
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 32 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 32
10746: EQUAL
10747: IFFALSE 10757
// sPower := true ;
10749: LD_ADDR_EXP 75
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 33 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 33
10764: EQUAL
10765: IFFALSE 10775
// sRandom := true ;
10767: LD_ADDR_EXP 76
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 34 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 34
10782: EQUAL
10783: IFFALSE 10793
// sShield := true ;
10785: LD_ADDR_EXP 77
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 35 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 35
10800: EQUAL
10801: IFFALSE 10811
// sTime := true ;
10803: LD_ADDR_EXP 78
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 36 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 36
10818: EQUAL
10819: IFFALSE 10829
// sTools := true ;
10821: LD_ADDR_EXP 79
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 101 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 101
10836: EQUAL
10837: IFFALSE 10847
// sSold := true ;
10839: LD_ADDR_EXP 44
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 102 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 102
10854: EQUAL
10855: IFFALSE 10865
// sDiff := true ;
10857: LD_ADDR_EXP 45
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 103 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 103
10872: EQUAL
10873: IFFALSE 10883
// sFog := true ;
10875: LD_ADDR_EXP 48
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// if p3 = 104 then
10883: LD_VAR 0 3
10887: PUSH
10888: LD_INT 104
10890: EQUAL
10891: IFFALSE 10901
// sReset := true ;
10893: LD_ADDR_EXP 49
10897: PUSH
10898: LD_INT 1
10900: ST_TO_ADDR
// if p3 = 105 then
10901: LD_VAR 0 3
10905: PUSH
10906: LD_INT 105
10908: EQUAL
10909: IFFALSE 10919
// sSun := true ;
10911: LD_ADDR_EXP 50
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if p3 = 106 then
10919: LD_VAR 0 3
10923: PUSH
10924: LD_INT 106
10926: EQUAL
10927: IFFALSE 10937
// sTiger := true ;
10929: LD_ADDR_EXP 46
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// if p3 = 107 then
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 107
10944: EQUAL
10945: IFFALSE 10955
// sBomb := true ;
10947: LD_ADDR_EXP 47
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if p3 = 108 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 108
10962: EQUAL
10963: IFFALSE 10973
// sWound := true ;
10965: LD_ADDR_EXP 55
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if p3 = 109 then
10973: LD_VAR 0 3
10977: PUSH
10978: LD_INT 109
10980: EQUAL
10981: IFFALSE 10991
// sBetray := true ;
10983: LD_ADDR_EXP 59
10987: PUSH
10988: LD_INT 1
10990: ST_TO_ADDR
// if p3 = 110 then
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 110
10998: EQUAL
10999: IFFALSE 11009
// sContamin := true ;
11001: LD_ADDR_EXP 60
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// if p3 = 111 then
11009: LD_VAR 0 3
11013: PUSH
11014: LD_INT 111
11016: EQUAL
11017: IFFALSE 11027
// sOil := true ;
11019: LD_ADDR_EXP 62
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// if p3 = 112 then
11027: LD_VAR 0 3
11031: PUSH
11032: LD_INT 112
11034: EQUAL
11035: IFFALSE 11045
// sStu := true ;
11037: LD_ADDR_EXP 66
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// if p3 = 113 then
11045: LD_VAR 0 3
11049: PUSH
11050: LD_INT 113
11052: EQUAL
11053: IFFALSE 11063
// sBazooka := true ;
11055: LD_ADDR_EXP 69
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if p3 = 114 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 114
11070: EQUAL
11071: IFFALSE 11081
// sMortar := true ;
11073: LD_ADDR_EXP 70
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// if p3 = 115 then
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 115
11088: EQUAL
11089: IFFALSE 11099
// sRanger := true ;
11091: LD_ADDR_EXP 80
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// if p3 = 116 then
11099: LD_VAR 0 3
11103: PUSH
11104: LD_INT 116
11106: EQUAL
11107: IFFALSE 11117
// sComputer := true ;
11109: LD_ADDR_EXP 81
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// if p3 = 117 then
11117: LD_VAR 0 3
11121: PUSH
11122: LD_INT 117
11124: EQUAL
11125: IFFALSE 11135
// s30 := true ;
11127: LD_ADDR_EXP 82
11131: PUSH
11132: LD_INT 1
11134: ST_TO_ADDR
// if p3 = 118 then
11135: LD_VAR 0 3
11139: PUSH
11140: LD_INT 118
11142: EQUAL
11143: IFFALSE 11153
// s60 := true ;
11145: LD_ADDR_EXP 83
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// end ; if p2 = hack_mode then
11153: LD_VAR 0 2
11157: PUSH
11158: LD_INT 101
11160: EQUAL
11161: IFFALSE 11289
// begin case p3 of 1 :
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 1
11170: DOUBLE
11171: EQUAL
11172: IFTRUE 11176
11174: GO 11183
11176: POP
// hHackUnlimitedResources ; 2 :
11177: CALL 23436 0 0
11181: GO 11289
11183: LD_INT 2
11185: DOUBLE
11186: EQUAL
11187: IFTRUE 11191
11189: GO 11198
11191: POP
// hHackSetLevel10 ; 3 :
11192: CALL 23569 0 0
11196: GO 11289
11198: LD_INT 3
11200: DOUBLE
11201: EQUAL
11202: IFTRUE 11206
11204: GO 11213
11206: POP
// hHackSetLevel10YourUnits ; 4 :
11207: CALL 23654 0 0
11211: GO 11289
11213: LD_INT 4
11215: DOUBLE
11216: EQUAL
11217: IFTRUE 11221
11219: GO 11228
11221: POP
// hHackInvincible ; 5 :
11222: CALL 24102 0 0
11226: GO 11289
11228: LD_INT 5
11230: DOUBLE
11231: EQUAL
11232: IFTRUE 11236
11234: GO 11243
11236: POP
// hHackInvisible ; 6 :
11237: CALL 24213 0 0
11241: GO 11289
11243: LD_INT 6
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11258
11251: POP
// hHackChangeYourSide ; 7 :
11252: CALL 24270 0 0
11256: GO 11289
11258: LD_INT 7
11260: DOUBLE
11261: EQUAL
11262: IFTRUE 11266
11264: GO 11273
11266: POP
// hHackChangeUnitSide ; 8 :
11267: CALL 24312 0 0
11271: GO 11289
11273: LD_INT 8
11275: DOUBLE
11276: EQUAL
11277: IFTRUE 11281
11279: GO 11288
11281: POP
// hHackFog ; end ;
11282: CALL 24413 0 0
11286: GO 11289
11288: POP
// end ; if p2 = game_save_mode then
11289: LD_VAR 0 2
11293: PUSH
11294: LD_INT 102
11296: EQUAL
11297: IFFALSE 11352
// begin if p3 = 1 then
11299: LD_VAR 0 3
11303: PUSH
11304: LD_INT 1
11306: EQUAL
11307: IFFALSE 11319
// globalGameSaveCounter := p4 ;
11309: LD_ADDR_EXP 26
11313: PUSH
11314: LD_VAR 0 4
11318: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 2
11326: EQUAL
11327: PUSH
11328: LD_EXP 26
11332: AND
11333: IFFALSE 11352
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11335: LD_STRING setGameSaveCounter(
11337: PUSH
11338: LD_EXP 26
11342: STR
11343: PUSH
11344: LD_STRING )
11346: STR
11347: PPUSH
11348: CALL_OW 559
// end ; end ;
11352: LD_VAR 0 7
11356: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11357: LD_INT 0
11359: PPUSH
// streamModeActive := false ;
11360: LD_ADDR_EXP 27
11364: PUSH
11365: LD_INT 0
11367: ST_TO_ADDR
// normalCounter := 36 ;
11368: LD_ADDR_EXP 28
11372: PUSH
11373: LD_INT 36
11375: ST_TO_ADDR
// hardcoreCounter := 18 ;
11376: LD_ADDR_EXP 29
11380: PUSH
11381: LD_INT 18
11383: ST_TO_ADDR
// sRocket := false ;
11384: LD_ADDR_EXP 32
11388: PUSH
11389: LD_INT 0
11391: ST_TO_ADDR
// sSpeed := false ;
11392: LD_ADDR_EXP 31
11396: PUSH
11397: LD_INT 0
11399: ST_TO_ADDR
// sEngine := false ;
11400: LD_ADDR_EXP 33
11404: PUSH
11405: LD_INT 0
11407: ST_TO_ADDR
// sSpec := false ;
11408: LD_ADDR_EXP 30
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// sLevel := false ;
11416: LD_ADDR_EXP 34
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// sArmoury := false ;
11424: LD_ADDR_EXP 35
11428: PUSH
11429: LD_INT 0
11431: ST_TO_ADDR
// sRadar := false ;
11432: LD_ADDR_EXP 36
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// sBunker := false ;
11440: LD_ADDR_EXP 37
11444: PUSH
11445: LD_INT 0
11447: ST_TO_ADDR
// sHack := false ;
11448: LD_ADDR_EXP 38
11452: PUSH
11453: LD_INT 0
11455: ST_TO_ADDR
// sFire := false ;
11456: LD_ADDR_EXP 39
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// sRefresh := false ;
11464: LD_ADDR_EXP 40
11468: PUSH
11469: LD_INT 0
11471: ST_TO_ADDR
// sExp := false ;
11472: LD_ADDR_EXP 41
11476: PUSH
11477: LD_INT 0
11479: ST_TO_ADDR
// sDepot := false ;
11480: LD_ADDR_EXP 42
11484: PUSH
11485: LD_INT 0
11487: ST_TO_ADDR
// sFlag := false ;
11488: LD_ADDR_EXP 43
11492: PUSH
11493: LD_INT 0
11495: ST_TO_ADDR
// sKamikadze := false ;
11496: LD_ADDR_EXP 51
11500: PUSH
11501: LD_INT 0
11503: ST_TO_ADDR
// sTroll := false ;
11504: LD_ADDR_EXP 52
11508: PUSH
11509: LD_INT 0
11511: ST_TO_ADDR
// sSlow := false ;
11512: LD_ADDR_EXP 53
11516: PUSH
11517: LD_INT 0
11519: ST_TO_ADDR
// sLack := false ;
11520: LD_ADDR_EXP 54
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// sTank := false ;
11528: LD_ADDR_EXP 56
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// sRemote := false ;
11536: LD_ADDR_EXP 57
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// sPowell := false ;
11544: LD_ADDR_EXP 58
11548: PUSH
11549: LD_INT 0
11551: ST_TO_ADDR
// sTeleport := false ;
11552: LD_ADDR_EXP 61
11556: PUSH
11557: LD_INT 0
11559: ST_TO_ADDR
// sOilTower := false ;
11560: LD_ADDR_EXP 63
11564: PUSH
11565: LD_INT 0
11567: ST_TO_ADDR
// sShovel := false ;
11568: LD_ADDR_EXP 64
11572: PUSH
11573: LD_INT 0
11575: ST_TO_ADDR
// sSheik := false ;
11576: LD_ADDR_EXP 65
11580: PUSH
11581: LD_INT 0
11583: ST_TO_ADDR
// sEarthquake := false ;
11584: LD_ADDR_EXP 67
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// sAI := false ;
11592: LD_ADDR_EXP 68
11596: PUSH
11597: LD_INT 0
11599: ST_TO_ADDR
// sCargo := false ;
11600: LD_ADDR_EXP 71
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// sDLaser := false ;
11608: LD_ADDR_EXP 72
11612: PUSH
11613: LD_INT 0
11615: ST_TO_ADDR
// sExchange := false ;
11616: LD_ADDR_EXP 73
11620: PUSH
11621: LD_INT 0
11623: ST_TO_ADDR
// sFac := false ;
11624: LD_ADDR_EXP 74
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// sPower := false ;
11632: LD_ADDR_EXP 75
11636: PUSH
11637: LD_INT 0
11639: ST_TO_ADDR
// sRandom := false ;
11640: LD_ADDR_EXP 76
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// sShield := false ;
11648: LD_ADDR_EXP 77
11652: PUSH
11653: LD_INT 0
11655: ST_TO_ADDR
// sTime := false ;
11656: LD_ADDR_EXP 78
11660: PUSH
11661: LD_INT 0
11663: ST_TO_ADDR
// sTools := false ;
11664: LD_ADDR_EXP 79
11668: PUSH
11669: LD_INT 0
11671: ST_TO_ADDR
// sSold := false ;
11672: LD_ADDR_EXP 44
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// sDiff := false ;
11680: LD_ADDR_EXP 45
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// sFog := false ;
11688: LD_ADDR_EXP 48
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// sReset := false ;
11696: LD_ADDR_EXP 49
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// sSun := false ;
11704: LD_ADDR_EXP 50
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// sTiger := false ;
11712: LD_ADDR_EXP 46
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// sBomb := false ;
11720: LD_ADDR_EXP 47
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sWound := false ;
11728: LD_ADDR_EXP 55
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// sBetray := false ;
11736: LD_ADDR_EXP 59
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// sContamin := false ;
11744: LD_ADDR_EXP 60
11748: PUSH
11749: LD_INT 0
11751: ST_TO_ADDR
// sOil := false ;
11752: LD_ADDR_EXP 62
11756: PUSH
11757: LD_INT 0
11759: ST_TO_ADDR
// sStu := false ;
11760: LD_ADDR_EXP 66
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// sBazooka := false ;
11768: LD_ADDR_EXP 69
11772: PUSH
11773: LD_INT 0
11775: ST_TO_ADDR
// sMortar := false ;
11776: LD_ADDR_EXP 70
11780: PUSH
11781: LD_INT 0
11783: ST_TO_ADDR
// sRanger := false ;
11784: LD_ADDR_EXP 80
11788: PUSH
11789: LD_INT 0
11791: ST_TO_ADDR
// sComputer := false ;
11792: LD_ADDR_EXP 81
11796: PUSH
11797: LD_INT 0
11799: ST_TO_ADDR
// s30 := false ;
11800: LD_ADDR_EXP 82
11804: PUSH
11805: LD_INT 0
11807: ST_TO_ADDR
// s60 := false ;
11808: LD_ADDR_EXP 83
11812: PUSH
11813: LD_INT 0
11815: ST_TO_ADDR
// end ;
11816: LD_VAR 0 1
11820: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
// result := [ ] ;
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: EMPTY
11836: ST_TO_ADDR
// if campaign_id = 1 then
11837: LD_OWVAR 69
11841: PUSH
11842: LD_INT 1
11844: EQUAL
11845: IFFALSE 15011
// begin case mission_number of 1 :
11847: LD_OWVAR 70
11851: PUSH
11852: LD_INT 1
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11936
11860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 11
11874: PUSH
11875: LD_INT 12
11877: PUSH
11878: LD_INT 15
11880: PUSH
11881: LD_INT 16
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 23
11889: PUSH
11890: LD_INT 26
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 106
11912: PUSH
11913: LD_INT 116
11915: PUSH
11916: LD_INT 117
11918: PUSH
11919: LD_INT 118
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: ST_TO_ADDR
11934: GO 15009
11936: LD_INT 2
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12028
11944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: LD_INT 11
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 16
11967: PUSH
11968: LD_INT 22
11970: PUSH
11971: LD_INT 23
11973: PUSH
11974: LD_INT 26
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 101
11990: PUSH
11991: LD_INT 102
11993: PUSH
11994: LD_INT 105
11996: PUSH
11997: LD_INT 106
11999: PUSH
12000: LD_INT 108
12002: PUSH
12003: LD_INT 116
12005: PUSH
12006: LD_INT 117
12008: PUSH
12009: LD_INT 118
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: ST_TO_ADDR
12026: GO 15009
12028: LD_INT 3
12030: DOUBLE
12031: EQUAL
12032: IFTRUE 12036
12034: GO 12124
12036: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 4
12047: PUSH
12048: LD_INT 5
12050: PUSH
12051: LD_INT 11
12053: PUSH
12054: LD_INT 12
12056: PUSH
12057: LD_INT 15
12059: PUSH
12060: LD_INT 16
12062: PUSH
12063: LD_INT 22
12065: PUSH
12066: LD_INT 26
12068: PUSH
12069: LD_INT 36
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 101
12086: PUSH
12087: LD_INT 102
12089: PUSH
12090: LD_INT 105
12092: PUSH
12093: LD_INT 106
12095: PUSH
12096: LD_INT 108
12098: PUSH
12099: LD_INT 116
12101: PUSH
12102: LD_INT 117
12104: PUSH
12105: LD_INT 118
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: ST_TO_ADDR
12122: GO 15009
12124: LD_INT 4
12126: DOUBLE
12127: EQUAL
12128: IFTRUE 12132
12130: GO 12228
12132: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: LD_INT 5
12146: PUSH
12147: LD_INT 8
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 15
12158: PUSH
12159: LD_INT 16
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: LD_INT 36
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 101
12190: PUSH
12191: LD_INT 102
12193: PUSH
12194: LD_INT 105
12196: PUSH
12197: LD_INT 106
12199: PUSH
12200: LD_INT 108
12202: PUSH
12203: LD_INT 116
12205: PUSH
12206: LD_INT 117
12208: PUSH
12209: LD_INT 118
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: ST_TO_ADDR
12226: GO 15009
12228: LD_INT 5
12230: DOUBLE
12231: EQUAL
12232: IFTRUE 12236
12234: GO 12348
12236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 4
12247: PUSH
12248: LD_INT 5
12250: PUSH
12251: LD_INT 6
12253: PUSH
12254: LD_INT 8
12256: PUSH
12257: LD_INT 11
12259: PUSH
12260: LD_INT 12
12262: PUSH
12263: LD_INT 15
12265: PUSH
12266: LD_INT 16
12268: PUSH
12269: LD_INT 22
12271: PUSH
12272: LD_INT 23
12274: PUSH
12275: LD_INT 25
12277: PUSH
12278: LD_INT 26
12280: PUSH
12281: LD_INT 36
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 101
12302: PUSH
12303: LD_INT 102
12305: PUSH
12306: LD_INT 105
12308: PUSH
12309: LD_INT 106
12311: PUSH
12312: LD_INT 108
12314: PUSH
12315: LD_INT 109
12317: PUSH
12318: LD_INT 112
12320: PUSH
12321: LD_INT 116
12323: PUSH
12324: LD_INT 117
12326: PUSH
12327: LD_INT 118
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
12346: GO 15009
12348: LD_INT 6
12350: DOUBLE
12351: EQUAL
12352: IFTRUE 12356
12354: GO 12488
12356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12357: LD_ADDR_VAR 0 2
12361: PUSH
12362: LD_INT 2
12364: PUSH
12365: LD_INT 4
12367: PUSH
12368: LD_INT 5
12370: PUSH
12371: LD_INT 6
12373: PUSH
12374: LD_INT 8
12376: PUSH
12377: LD_INT 11
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: LD_INT 15
12385: PUSH
12386: LD_INT 16
12388: PUSH
12389: LD_INT 20
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: LD_INT 36
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 101
12442: PUSH
12443: LD_INT 102
12445: PUSH
12446: LD_INT 105
12448: PUSH
12449: LD_INT 106
12451: PUSH
12452: LD_INT 108
12454: PUSH
12455: LD_INT 109
12457: PUSH
12458: LD_INT 112
12460: PUSH
12461: LD_INT 116
12463: PUSH
12464: LD_INT 117
12466: PUSH
12467: LD_INT 118
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: ST_TO_ADDR
12486: GO 15009
12488: LD_INT 7
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12608
12496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_INT 2
12504: PUSH
12505: LD_INT 4
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: LD_INT 7
12513: PUSH
12514: LD_INT 11
12516: PUSH
12517: LD_INT 12
12519: PUSH
12520: LD_INT 15
12522: PUSH
12523: LD_INT 16
12525: PUSH
12526: LD_INT 20
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 26
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 105
12571: PUSH
12572: LD_INT 106
12574: PUSH
12575: LD_INT 108
12577: PUSH
12578: LD_INT 112
12580: PUSH
12581: LD_INT 116
12583: PUSH
12584: LD_INT 117
12586: PUSH
12587: LD_INT 118
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: ST_TO_ADDR
12606: GO 15009
12608: LD_INT 8
12610: DOUBLE
12611: EQUAL
12612: IFTRUE 12616
12614: GO 12756
12616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: LD_INT 6
12633: PUSH
12634: LD_INT 7
12636: PUSH
12637: LD_INT 8
12639: PUSH
12640: LD_INT 11
12642: PUSH
12643: LD_INT 12
12645: PUSH
12646: LD_INT 15
12648: PUSH
12649: LD_INT 16
12651: PUSH
12652: LD_INT 20
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 23
12663: PUSH
12664: LD_INT 25
12666: PUSH
12667: LD_INT 26
12669: PUSH
12670: LD_INT 30
12672: PUSH
12673: LD_INT 31
12675: PUSH
12676: LD_INT 32
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 101
12706: PUSH
12707: LD_INT 102
12709: PUSH
12710: LD_INT 103
12712: PUSH
12713: LD_INT 105
12715: PUSH
12716: LD_INT 106
12718: PUSH
12719: LD_INT 108
12721: PUSH
12722: LD_INT 109
12724: PUSH
12725: LD_INT 112
12727: PUSH
12728: LD_INT 116
12730: PUSH
12731: LD_INT 117
12733: PUSH
12734: LD_INT 118
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: ST_TO_ADDR
12754: GO 15009
12756: LD_INT 9
12758: DOUBLE
12759: EQUAL
12760: IFTRUE 12764
12762: GO 12912
12764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12765: LD_ADDR_VAR 0 2
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: LD_INT 4
12775: PUSH
12776: LD_INT 5
12778: PUSH
12779: LD_INT 6
12781: PUSH
12782: LD_INT 7
12784: PUSH
12785: LD_INT 8
12787: PUSH
12788: LD_INT 11
12790: PUSH
12791: LD_INT 12
12793: PUSH
12794: LD_INT 15
12796: PUSH
12797: LD_INT 16
12799: PUSH
12800: LD_INT 20
12802: PUSH
12803: LD_INT 21
12805: PUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 23
12811: PUSH
12812: LD_INT 25
12814: PUSH
12815: LD_INT 26
12817: PUSH
12818: LD_INT 28
12820: PUSH
12821: LD_INT 30
12823: PUSH
12824: LD_INT 31
12826: PUSH
12827: LD_INT 32
12829: PUSH
12830: LD_INT 36
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 101
12858: PUSH
12859: LD_INT 102
12861: PUSH
12862: LD_INT 103
12864: PUSH
12865: LD_INT 105
12867: PUSH
12868: LD_INT 106
12870: PUSH
12871: LD_INT 108
12873: PUSH
12874: LD_INT 109
12876: PUSH
12877: LD_INT 112
12879: PUSH
12880: LD_INT 114
12882: PUSH
12883: LD_INT 116
12885: PUSH
12886: LD_INT 117
12888: PUSH
12889: LD_INT 118
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: ST_TO_ADDR
12910: GO 15009
12912: LD_INT 10
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 13116
12920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12921: LD_ADDR_VAR 0 2
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: LD_INT 4
12931: PUSH
12932: LD_INT 5
12934: PUSH
12935: LD_INT 6
12937: PUSH
12938: LD_INT 7
12940: PUSH
12941: LD_INT 8
12943: PUSH
12944: LD_INT 9
12946: PUSH
12947: LD_INT 10
12949: PUSH
12950: LD_INT 11
12952: PUSH
12953: LD_INT 12
12955: PUSH
12956: LD_INT 13
12958: PUSH
12959: LD_INT 14
12961: PUSH
12962: LD_INT 15
12964: PUSH
12965: LD_INT 16
12967: PUSH
12968: LD_INT 17
12970: PUSH
12971: LD_INT 18
12973: PUSH
12974: LD_INT 19
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_INT 23
12988: PUSH
12989: LD_INT 24
12991: PUSH
12992: LD_INT 25
12994: PUSH
12995: LD_INT 26
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 31
13006: PUSH
13007: LD_INT 32
13009: PUSH
13010: LD_INT 36
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 101
13046: PUSH
13047: LD_INT 102
13049: PUSH
13050: LD_INT 103
13052: PUSH
13053: LD_INT 104
13055: PUSH
13056: LD_INT 105
13058: PUSH
13059: LD_INT 106
13061: PUSH
13062: LD_INT 107
13064: PUSH
13065: LD_INT 108
13067: PUSH
13068: LD_INT 109
13070: PUSH
13071: LD_INT 110
13073: PUSH
13074: LD_INT 111
13076: PUSH
13077: LD_INT 112
13079: PUSH
13080: LD_INT 114
13082: PUSH
13083: LD_INT 116
13085: PUSH
13086: LD_INT 117
13088: PUSH
13089: LD_INT 118
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 15009
13116: LD_INT 11
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13328
13124: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 3
13135: PUSH
13136: LD_INT 4
13138: PUSH
13139: LD_INT 5
13141: PUSH
13142: LD_INT 6
13144: PUSH
13145: LD_INT 7
13147: PUSH
13148: LD_INT 8
13150: PUSH
13151: LD_INT 9
13153: PUSH
13154: LD_INT 10
13156: PUSH
13157: LD_INT 11
13159: PUSH
13160: LD_INT 12
13162: PUSH
13163: LD_INT 13
13165: PUSH
13166: LD_INT 14
13168: PUSH
13169: LD_INT 15
13171: PUSH
13172: LD_INT 16
13174: PUSH
13175: LD_INT 17
13177: PUSH
13178: LD_INT 18
13180: PUSH
13181: LD_INT 19
13183: PUSH
13184: LD_INT 20
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 22
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 24
13198: PUSH
13199: LD_INT 25
13201: PUSH
13202: LD_INT 26
13204: PUSH
13205: LD_INT 28
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 31
13213: PUSH
13214: LD_INT 32
13216: PUSH
13217: LD_INT 34
13219: PUSH
13220: LD_INT 36
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 101
13258: PUSH
13259: LD_INT 102
13261: PUSH
13262: LD_INT 103
13264: PUSH
13265: LD_INT 104
13267: PUSH
13268: LD_INT 105
13270: PUSH
13271: LD_INT 106
13273: PUSH
13274: LD_INT 107
13276: PUSH
13277: LD_INT 108
13279: PUSH
13280: LD_INT 109
13282: PUSH
13283: LD_INT 110
13285: PUSH
13286: LD_INT 111
13288: PUSH
13289: LD_INT 112
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 116
13297: PUSH
13298: LD_INT 117
13300: PUSH
13301: LD_INT 118
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
13326: GO 15009
13328: LD_INT 12
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13556
13336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13337: LD_ADDR_VAR 0 2
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 3
13350: PUSH
13351: LD_INT 4
13353: PUSH
13354: LD_INT 5
13356: PUSH
13357: LD_INT 6
13359: PUSH
13360: LD_INT 7
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: LD_INT 9
13368: PUSH
13369: LD_INT 10
13371: PUSH
13372: LD_INT 11
13374: PUSH
13375: LD_INT 12
13377: PUSH
13378: LD_INT 13
13380: PUSH
13381: LD_INT 14
13383: PUSH
13384: LD_INT 15
13386: PUSH
13387: LD_INT 16
13389: PUSH
13390: LD_INT 17
13392: PUSH
13393: LD_INT 18
13395: PUSH
13396: LD_INT 19
13398: PUSH
13399: LD_INT 20
13401: PUSH
13402: LD_INT 21
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 23
13410: PUSH
13411: LD_INT 24
13413: PUSH
13414: LD_INT 25
13416: PUSH
13417: LD_INT 26
13419: PUSH
13420: LD_INT 27
13422: PUSH
13423: LD_INT 28
13425: PUSH
13426: LD_INT 30
13428: PUSH
13429: LD_INT 31
13431: PUSH
13432: LD_INT 32
13434: PUSH
13435: LD_INT 33
13437: PUSH
13438: LD_INT 34
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 101
13482: PUSH
13483: LD_INT 102
13485: PUSH
13486: LD_INT 103
13488: PUSH
13489: LD_INT 104
13491: PUSH
13492: LD_INT 105
13494: PUSH
13495: LD_INT 106
13497: PUSH
13498: LD_INT 107
13500: PUSH
13501: LD_INT 108
13503: PUSH
13504: LD_INT 109
13506: PUSH
13507: LD_INT 110
13509: PUSH
13510: LD_INT 111
13512: PUSH
13513: LD_INT 112
13515: PUSH
13516: LD_INT 113
13518: PUSH
13519: LD_INT 114
13521: PUSH
13522: LD_INT 116
13524: PUSH
13525: LD_INT 117
13527: PUSH
13528: LD_INT 118
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 15009
13556: LD_INT 13
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13772
13564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: LD_INT 4
13581: PUSH
13582: LD_INT 5
13584: PUSH
13585: LD_INT 8
13587: PUSH
13588: LD_INT 9
13590: PUSH
13591: LD_INT 10
13593: PUSH
13594: LD_INT 11
13596: PUSH
13597: LD_INT 12
13599: PUSH
13600: LD_INT 14
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: LD_INT 16
13608: PUSH
13609: LD_INT 17
13611: PUSH
13612: LD_INT 18
13614: PUSH
13615: LD_INT 19
13617: PUSH
13618: LD_INT 20
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 23
13629: PUSH
13630: LD_INT 24
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 27
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 30
13647: PUSH
13648: LD_INT 31
13650: PUSH
13651: LD_INT 32
13653: PUSH
13654: LD_INT 33
13656: PUSH
13657: LD_INT 34
13659: PUSH
13660: LD_INT 36
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 101
13698: PUSH
13699: LD_INT 102
13701: PUSH
13702: LD_INT 103
13704: PUSH
13705: LD_INT 104
13707: PUSH
13708: LD_INT 105
13710: PUSH
13711: LD_INT 106
13713: PUSH
13714: LD_INT 107
13716: PUSH
13717: LD_INT 108
13719: PUSH
13720: LD_INT 109
13722: PUSH
13723: LD_INT 110
13725: PUSH
13726: LD_INT 111
13728: PUSH
13729: LD_INT 112
13731: PUSH
13732: LD_INT 113
13734: PUSH
13735: LD_INT 114
13737: PUSH
13738: LD_INT 116
13740: PUSH
13741: LD_INT 117
13743: PUSH
13744: LD_INT 118
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: ST_TO_ADDR
13770: GO 15009
13772: LD_INT 14
13774: DOUBLE
13775: EQUAL
13776: IFTRUE 13780
13778: GO 14004
13780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13781: LD_ADDR_VAR 0 2
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: LD_INT 2
13791: PUSH
13792: LD_INT 3
13794: PUSH
13795: LD_INT 4
13797: PUSH
13798: LD_INT 5
13800: PUSH
13801: LD_INT 6
13803: PUSH
13804: LD_INT 7
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: LD_INT 9
13812: PUSH
13813: LD_INT 10
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_INT 12
13821: PUSH
13822: LD_INT 13
13824: PUSH
13825: LD_INT 14
13827: PUSH
13828: LD_INT 15
13830: PUSH
13831: LD_INT 16
13833: PUSH
13834: LD_INT 17
13836: PUSH
13837: LD_INT 18
13839: PUSH
13840: LD_INT 19
13842: PUSH
13843: LD_INT 20
13845: PUSH
13846: LD_INT 21
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_INT 23
13854: PUSH
13855: LD_INT 24
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 26
13863: PUSH
13864: LD_INT 27
13866: PUSH
13867: LD_INT 28
13869: PUSH
13870: LD_INT 29
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: LD_INT 31
13878: PUSH
13879: LD_INT 32
13881: PUSH
13882: LD_INT 33
13884: PUSH
13885: LD_INT 34
13887: PUSH
13888: LD_INT 36
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 101
13930: PUSH
13931: LD_INT 102
13933: PUSH
13934: LD_INT 103
13936: PUSH
13937: LD_INT 104
13939: PUSH
13940: LD_INT 105
13942: PUSH
13943: LD_INT 106
13945: PUSH
13946: LD_INT 107
13948: PUSH
13949: LD_INT 108
13951: PUSH
13952: LD_INT 109
13954: PUSH
13955: LD_INT 110
13957: PUSH
13958: LD_INT 111
13960: PUSH
13961: LD_INT 112
13963: PUSH
13964: LD_INT 113
13966: PUSH
13967: LD_INT 114
13969: PUSH
13970: LD_INT 116
13972: PUSH
13973: LD_INT 117
13975: PUSH
13976: LD_INT 118
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 15009
14004: LD_INT 15
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14236
14012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 6
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: LD_INT 9
14044: PUSH
14045: LD_INT 10
14047: PUSH
14048: LD_INT 11
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 15
14062: PUSH
14063: LD_INT 16
14065: PUSH
14066: LD_INT 17
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: LD_INT 19
14074: PUSH
14075: LD_INT 20
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 23
14086: PUSH
14087: LD_INT 24
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 27
14098: PUSH
14099: LD_INT 28
14101: PUSH
14102: LD_INT 29
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 33
14116: PUSH
14117: LD_INT 34
14119: PUSH
14120: LD_INT 36
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 101
14162: PUSH
14163: LD_INT 102
14165: PUSH
14166: LD_INT 103
14168: PUSH
14169: LD_INT 104
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 107
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: LD_INT 109
14186: PUSH
14187: LD_INT 110
14189: PUSH
14190: LD_INT 111
14192: PUSH
14193: LD_INT 112
14195: PUSH
14196: LD_INT 113
14198: PUSH
14199: LD_INT 114
14201: PUSH
14202: LD_INT 116
14204: PUSH
14205: LD_INT 117
14207: PUSH
14208: LD_INT 118
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 15009
14236: LD_INT 16
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14380
14244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 4
14255: PUSH
14256: LD_INT 5
14258: PUSH
14259: LD_INT 7
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 15
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 23
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 26
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 101
14330: PUSH
14331: LD_INT 102
14333: PUSH
14334: LD_INT 103
14336: PUSH
14337: LD_INT 106
14339: PUSH
14340: LD_INT 108
14342: PUSH
14343: LD_INT 112
14345: PUSH
14346: LD_INT 113
14348: PUSH
14349: LD_INT 114
14351: PUSH
14352: LD_INT 116
14354: PUSH
14355: LD_INT 117
14357: PUSH
14358: LD_INT 118
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: ST_TO_ADDR
14378: GO 15009
14380: LD_INT 17
14382: DOUBLE
14383: EQUAL
14384: IFTRUE 14388
14386: GO 14612
14388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: LD_INT 5
14408: PUSH
14409: LD_INT 6
14411: PUSH
14412: LD_INT 7
14414: PUSH
14415: LD_INT 8
14417: PUSH
14418: LD_INT 9
14420: PUSH
14421: LD_INT 10
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: LD_INT 13
14432: PUSH
14433: LD_INT 14
14435: PUSH
14436: LD_INT 15
14438: PUSH
14439: LD_INT 16
14441: PUSH
14442: LD_INT 17
14444: PUSH
14445: LD_INT 18
14447: PUSH
14448: LD_INT 19
14450: PUSH
14451: LD_INT 20
14453: PUSH
14454: LD_INT 21
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_INT 23
14462: PUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 25
14468: PUSH
14469: LD_INT 26
14471: PUSH
14472: LD_INT 27
14474: PUSH
14475: LD_INT 28
14477: PUSH
14478: LD_INT 29
14480: PUSH
14481: LD_INT 30
14483: PUSH
14484: LD_INT 31
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: LD_INT 33
14492: PUSH
14493: LD_INT 34
14495: PUSH
14496: LD_INT 36
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 101
14538: PUSH
14539: LD_INT 102
14541: PUSH
14542: LD_INT 103
14544: PUSH
14545: LD_INT 104
14547: PUSH
14548: LD_INT 105
14550: PUSH
14551: LD_INT 106
14553: PUSH
14554: LD_INT 107
14556: PUSH
14557: LD_INT 108
14559: PUSH
14560: LD_INT 109
14562: PUSH
14563: LD_INT 110
14565: PUSH
14566: LD_INT 111
14568: PUSH
14569: LD_INT 112
14571: PUSH
14572: LD_INT 113
14574: PUSH
14575: LD_INT 114
14577: PUSH
14578: LD_INT 116
14580: PUSH
14581: LD_INT 117
14583: PUSH
14584: LD_INT 118
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: ST_TO_ADDR
14610: GO 15009
14612: LD_INT 18
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14768
14620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: LD_INT 4
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 7
14637: PUSH
14638: LD_INT 11
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: LD_INT 15
14646: PUSH
14647: LD_INT 16
14649: PUSH
14650: LD_INT 20
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_INT 23
14661: PUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 26
14667: PUSH
14668: LD_INT 30
14670: PUSH
14671: LD_INT 31
14673: PUSH
14674: LD_INT 32
14676: PUSH
14677: LD_INT 33
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 35
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 101
14714: PUSH
14715: LD_INT 102
14717: PUSH
14718: LD_INT 103
14720: PUSH
14721: LD_INT 106
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 112
14729: PUSH
14730: LD_INT 113
14732: PUSH
14733: LD_INT 114
14735: PUSH
14736: LD_INT 115
14738: PUSH
14739: LD_INT 116
14741: PUSH
14742: LD_INT 117
14744: PUSH
14745: LD_INT 118
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: ST_TO_ADDR
14766: GO 15009
14768: LD_INT 19
14770: DOUBLE
14771: EQUAL
14772: IFTRUE 14776
14774: GO 15008
14776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14777: LD_ADDR_VAR 0 2
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: LD_INT 5
14796: PUSH
14797: LD_INT 6
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: LD_INT 8
14805: PUSH
14806: LD_INT 9
14808: PUSH
14809: LD_INT 10
14811: PUSH
14812: LD_INT 11
14814: PUSH
14815: LD_INT 12
14817: PUSH
14818: LD_INT 13
14820: PUSH
14821: LD_INT 14
14823: PUSH
14824: LD_INT 15
14826: PUSH
14827: LD_INT 16
14829: PUSH
14830: LD_INT 17
14832: PUSH
14833: LD_INT 18
14835: PUSH
14836: LD_INT 19
14838: PUSH
14839: LD_INT 20
14841: PUSH
14842: LD_INT 21
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 23
14850: PUSH
14851: LD_INT 24
14853: PUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 28
14865: PUSH
14866: LD_INT 29
14868: PUSH
14869: LD_INT 30
14871: PUSH
14872: LD_INT 31
14874: PUSH
14875: LD_INT 32
14877: PUSH
14878: LD_INT 33
14880: PUSH
14881: LD_INT 34
14883: PUSH
14884: LD_INT 35
14886: PUSH
14887: LD_INT 36
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 101
14930: PUSH
14931: LD_INT 102
14933: PUSH
14934: LD_INT 103
14936: PUSH
14937: LD_INT 104
14939: PUSH
14940: LD_INT 105
14942: PUSH
14943: LD_INT 106
14945: PUSH
14946: LD_INT 107
14948: PUSH
14949: LD_INT 108
14951: PUSH
14952: LD_INT 109
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 111
14960: PUSH
14961: LD_INT 112
14963: PUSH
14964: LD_INT 113
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: LD_INT 115
14972: PUSH
14973: LD_INT 116
14975: PUSH
14976: LD_INT 117
14978: PUSH
14979: LD_INT 118
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 15009
15008: POP
// end else
15009: GO 15240
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: LD_INT 3
15024: PUSH
15025: LD_INT 4
15027: PUSH
15028: LD_INT 5
15030: PUSH
15031: LD_INT 6
15033: PUSH
15034: LD_INT 7
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: LD_INT 9
15042: PUSH
15043: LD_INT 10
15045: PUSH
15046: LD_INT 11
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 13
15054: PUSH
15055: LD_INT 14
15057: PUSH
15058: LD_INT 15
15060: PUSH
15061: LD_INT 16
15063: PUSH
15064: LD_INT 17
15066: PUSH
15067: LD_INT 18
15069: PUSH
15070: LD_INT 19
15072: PUSH
15073: LD_INT 20
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_INT 23
15084: PUSH
15085: LD_INT 24
15087: PUSH
15088: LD_INT 25
15090: PUSH
15091: LD_INT 26
15093: PUSH
15094: LD_INT 27
15096: PUSH
15097: LD_INT 28
15099: PUSH
15100: LD_INT 29
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 31
15108: PUSH
15109: LD_INT 32
15111: PUSH
15112: LD_INT 33
15114: PUSH
15115: LD_INT 34
15117: PUSH
15118: LD_INT 35
15120: PUSH
15121: LD_INT 36
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 101
15164: PUSH
15165: LD_INT 102
15167: PUSH
15168: LD_INT 103
15170: PUSH
15171: LD_INT 104
15173: PUSH
15174: LD_INT 105
15176: PUSH
15177: LD_INT 106
15179: PUSH
15180: LD_INT 107
15182: PUSH
15183: LD_INT 108
15185: PUSH
15186: LD_INT 109
15188: PUSH
15189: LD_INT 110
15191: PUSH
15192: LD_INT 111
15194: PUSH
15195: LD_INT 112
15197: PUSH
15198: LD_INT 113
15200: PUSH
15201: LD_INT 114
15203: PUSH
15204: LD_INT 115
15206: PUSH
15207: LD_INT 116
15209: PUSH
15210: LD_INT 117
15212: PUSH
15213: LD_INT 118
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ST_TO_ADDR
// if result then
15240: LD_VAR 0 2
15244: IFFALSE 16030
// begin normal :=  ;
15246: LD_ADDR_VAR 0 5
15250: PUSH
15251: LD_STRING 
15253: ST_TO_ADDR
// hardcore :=  ;
15254: LD_ADDR_VAR 0 6
15258: PUSH
15259: LD_STRING 
15261: ST_TO_ADDR
// active :=  ;
15262: LD_ADDR_VAR 0 7
15266: PUSH
15267: LD_STRING 
15269: ST_TO_ADDR
// for i = 1 to normalCounter do
15270: LD_ADDR_VAR 0 8
15274: PUSH
15275: DOUBLE
15276: LD_INT 1
15278: DEC
15279: ST_TO_ADDR
15280: LD_EXP 28
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15387
// begin tmp := 0 ;
15288: LD_ADDR_VAR 0 3
15292: PUSH
15293: LD_STRING 0
15295: ST_TO_ADDR
// if result [ 1 ] then
15296: LD_VAR 0 2
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: IFFALSE 15369
// if result [ 1 ] [ 1 ] = i then
15306: LD_VAR 0 2
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PUSH
15319: LD_VAR 0 8
15323: EQUAL
15324: IFFALSE 15369
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: LD_VAR 0 2
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 3
15355: PPUSH
15356: CALL_OW 1
15360: ST_TO_ADDR
// tmp := 1 ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_STRING 1
15368: ST_TO_ADDR
// end ; normal := normal & tmp ;
15369: LD_ADDR_VAR 0 5
15373: PUSH
15374: LD_VAR 0 5
15378: PUSH
15379: LD_VAR 0 3
15383: STR
15384: ST_TO_ADDR
// end ;
15385: GO 15285
15387: POP
15388: POP
// for i = 1 to hardcoreCounter do
15389: LD_ADDR_VAR 0 8
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_EXP 29
15403: PUSH
15404: FOR_TO
15405: IFFALSE 15510
// begin tmp := 0 ;
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_STRING 0
15414: ST_TO_ADDR
// if result [ 2 ] then
15415: LD_VAR 0 2
15419: PUSH
15420: LD_INT 2
15422: ARRAY
15423: IFFALSE 15492
// if result [ 2 ] [ 1 ] = 100 + i then
15425: LD_VAR 0 2
15429: PUSH
15430: LD_INT 2
15432: ARRAY
15433: PUSH
15434: LD_INT 1
15436: ARRAY
15437: PUSH
15438: LD_INT 100
15440: PUSH
15441: LD_VAR 0 8
15445: PLUS
15446: EQUAL
15447: IFFALSE 15492
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_INT 2
15461: PPUSH
15462: LD_VAR 0 2
15466: PUSH
15467: LD_INT 2
15469: ARRAY
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 3
15478: PPUSH
15479: CALL_OW 1
15483: ST_TO_ADDR
// tmp := 1 ;
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_STRING 1
15491: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15492: LD_ADDR_VAR 0 6
15496: PUSH
15497: LD_VAR 0 6
15501: PUSH
15502: LD_VAR 0 3
15506: STR
15507: ST_TO_ADDR
// end ;
15508: GO 15404
15510: POP
15511: POP
// if isGameLoad then
15512: LD_VAR 0 1
15516: IFFALSE 15991
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15518: LD_ADDR_VAR 0 4
15522: PUSH
15523: LD_EXP 32
15527: PUSH
15528: LD_EXP 31
15532: PUSH
15533: LD_EXP 33
15537: PUSH
15538: LD_EXP 30
15542: PUSH
15543: LD_EXP 34
15547: PUSH
15548: LD_EXP 35
15552: PUSH
15553: LD_EXP 36
15557: PUSH
15558: LD_EXP 37
15562: PUSH
15563: LD_EXP 38
15567: PUSH
15568: LD_EXP 39
15572: PUSH
15573: LD_EXP 40
15577: PUSH
15578: LD_EXP 41
15582: PUSH
15583: LD_EXP 42
15587: PUSH
15588: LD_EXP 43
15592: PUSH
15593: LD_EXP 51
15597: PUSH
15598: LD_EXP 52
15602: PUSH
15603: LD_EXP 53
15607: PUSH
15608: LD_EXP 54
15612: PUSH
15613: LD_EXP 56
15617: PUSH
15618: LD_EXP 57
15622: PUSH
15623: LD_EXP 58
15627: PUSH
15628: LD_EXP 61
15632: PUSH
15633: LD_EXP 63
15637: PUSH
15638: LD_EXP 64
15642: PUSH
15643: LD_EXP 65
15647: PUSH
15648: LD_EXP 67
15652: PUSH
15653: LD_EXP 68
15657: PUSH
15658: LD_EXP 71
15662: PUSH
15663: LD_EXP 72
15667: PUSH
15668: LD_EXP 73
15672: PUSH
15673: LD_EXP 74
15677: PUSH
15678: LD_EXP 75
15682: PUSH
15683: LD_EXP 76
15687: PUSH
15688: LD_EXP 77
15692: PUSH
15693: LD_EXP 78
15697: PUSH
15698: LD_EXP 79
15702: PUSH
15703: LD_EXP 44
15707: PUSH
15708: LD_EXP 45
15712: PUSH
15713: LD_EXP 48
15717: PUSH
15718: LD_EXP 49
15722: PUSH
15723: LD_EXP 50
15727: PUSH
15728: LD_EXP 46
15732: PUSH
15733: LD_EXP 47
15737: PUSH
15738: LD_EXP 55
15742: PUSH
15743: LD_EXP 59
15747: PUSH
15748: LD_EXP 60
15752: PUSH
15753: LD_EXP 62
15757: PUSH
15758: LD_EXP 66
15762: PUSH
15763: LD_EXP 69
15767: PUSH
15768: LD_EXP 70
15772: PUSH
15773: LD_EXP 80
15777: PUSH
15778: LD_EXP 81
15782: PUSH
15783: LD_EXP 82
15787: PUSH
15788: LD_EXP 83
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// tmp :=  ;
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// for i = 1 to normalCounter do
15857: LD_ADDR_VAR 0 8
15861: PUSH
15862: DOUBLE
15863: LD_INT 1
15865: DEC
15866: ST_TO_ADDR
15867: LD_EXP 28
15871: PUSH
15872: FOR_TO
15873: IFFALSE 15909
// begin if flags [ i ] then
15875: LD_VAR 0 4
15879: PUSH
15880: LD_VAR 0 8
15884: ARRAY
15885: IFFALSE 15907
// tmp := tmp & i & ; ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: LD_VAR 0 3
15896: PUSH
15897: LD_VAR 0 8
15901: STR
15902: PUSH
15903: LD_STRING ;
15905: STR
15906: ST_TO_ADDR
// end ;
15907: GO 15872
15909: POP
15910: POP
// for i = 1 to hardcoreCounter do
15911: LD_ADDR_VAR 0 8
15915: PUSH
15916: DOUBLE
15917: LD_INT 1
15919: DEC
15920: ST_TO_ADDR
15921: LD_EXP 29
15925: PUSH
15926: FOR_TO
15927: IFFALSE 15973
// begin if flags [ normalCounter + i ] then
15929: LD_VAR 0 4
15933: PUSH
15934: LD_EXP 28
15938: PUSH
15939: LD_VAR 0 8
15943: PLUS
15944: ARRAY
15945: IFFALSE 15971
// tmp := tmp & ( 100 + i ) & ; ;
15947: LD_ADDR_VAR 0 3
15951: PUSH
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 100
15959: PUSH
15960: LD_VAR 0 8
15964: PLUS
15965: STR
15966: PUSH
15967: LD_STRING ;
15969: STR
15970: ST_TO_ADDR
// end ;
15971: GO 15926
15973: POP
15974: POP
// if tmp then
15975: LD_VAR 0 3
15979: IFFALSE 15991
// active := tmp ;
15981: LD_ADDR_VAR 0 7
15985: PUSH
15986: LD_VAR 0 3
15990: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15991: LD_STRING getStreamItemsFromMission("
15993: PUSH
15994: LD_VAR 0 5
15998: STR
15999: PUSH
16000: LD_STRING ","
16002: STR
16003: PUSH
16004: LD_VAR 0 6
16008: STR
16009: PUSH
16010: LD_STRING ","
16012: STR
16013: PUSH
16014: LD_VAR 0 7
16018: STR
16019: PUSH
16020: LD_STRING ")
16022: STR
16023: PPUSH
16024: CALL_OW 559
// end else
16028: GO 16037
// ToLua ( getStreamItemsFromMission("","","") ) ;
16030: LD_STRING getStreamItemsFromMission("","","")
16032: PPUSH
16033: CALL_OW 559
// end ;
16037: LD_VAR 0 2
16041: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16042: LD_EXP 27
16046: PUSH
16047: LD_EXP 32
16051: AND
16052: IFFALSE 16176
16054: GO 16056
16056: DISABLE
16057: LD_INT 0
16059: PPUSH
16060: PPUSH
// begin enable ;
16061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_OWVAR 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 7
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 34
16094: PUSH
16095: LD_INT 45
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 34
16104: PUSH
16105: LD_INT 28
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 34
16114: PUSH
16115: LD_INT 47
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PPUSH
16133: CALL_OW 69
16137: ST_TO_ADDR
// if not tmp then
16138: LD_VAR 0 2
16142: NOT
16143: IFFALSE 16147
// exit ;
16145: GO 16176
// for i in tmp do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16174
// begin SetLives ( i , 0 ) ;
16160: LD_VAR 0 1
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 234
// end ;
16172: GO 16157
16174: POP
16175: POP
// end ;
16176: PPOPN 2
16178: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16179: LD_EXP 27
16183: PUSH
16184: LD_EXP 33
16188: AND
16189: IFFALSE 16273
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 32
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: CALL_OW 69
16234: ST_TO_ADDR
// if not tmp then
16235: LD_VAR 0 2
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16273
// for i in tmp do
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 2
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16271
// begin SetLives ( i , 0 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 0
16264: PPUSH
16265: CALL_OW 234
// end ;
16269: GO 16254
16271: POP
16272: POP
// end ;
16273: PPOPN 2
16275: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16276: LD_EXP 27
16280: PUSH
16281: LD_EXP 30
16285: AND
16286: IFFALSE 16379
16288: GO 16290
16290: DISABLE
16291: LD_INT 0
16293: PPUSH
// begin enable ;
16294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16295: LD_ADDR_VAR 0 1
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_OWVAR 2
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 2
16314: PUSH
16315: LD_INT 25
16317: PUSH
16318: LD_INT 5
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 25
16327: PUSH
16328: LD_INT 9
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 25
16337: PUSH
16338: LD_INT 8
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PPUSH
16355: CALL_OW 69
16359: PUSH
16360: FOR_IN
16361: IFFALSE 16377
// begin SetClass ( i , 1 ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 336
// end ;
16375: GO 16360
16377: POP
16378: POP
// end ;
16379: PPOPN 1
16381: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16382: LD_EXP 27
16386: PUSH
16387: LD_EXP 31
16391: AND
16392: PUSH
16393: LD_OWVAR 65
16397: PUSH
16398: LD_INT 7
16400: LESS
16401: AND
16402: IFFALSE 16416
16404: GO 16406
16406: DISABLE
// begin enable ;
16407: ENABLE
// game_speed := 7 ;
16408: LD_ADDR_OWVAR 65
16412: PUSH
16413: LD_INT 7
16415: ST_TO_ADDR
// end ;
16416: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16417: LD_EXP 27
16421: PUSH
16422: LD_EXP 34
16426: AND
16427: IFFALSE 16629
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
16435: PPUSH
16436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_INT 81
16444: PUSH
16445: LD_OWVAR 2
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 21
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// if not tmp then
16473: LD_VAR 0 3
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16629
// if tmp > 5 then
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 5
16489: GREATER
16490: IFFALSE 16502
// k := 5 else
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: LD_INT 5
16499: ST_TO_ADDR
16500: GO 16512
// k := tmp ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_VAR 0 3
16511: ST_TO_ADDR
// for i := 1 to k do
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_VAR 0 2
16526: PUSH
16527: FOR_TO
16528: IFFALSE 16627
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_VAR 0 1
16539: ARRAY
16540: PPUSH
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 4
16548: MOD
16549: PUSH
16550: LD_INT 1
16552: PLUS
16553: PPUSH
16554: CALL_OW 259
16558: PUSH
16559: LD_INT 10
16561: LESS
16562: IFFALSE 16625
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16564: LD_VAR 0 3
16568: PUSH
16569: LD_VAR 0 1
16573: ARRAY
16574: PPUSH
16575: LD_VAR 0 1
16579: PUSH
16580: LD_INT 4
16582: MOD
16583: PUSH
16584: LD_INT 1
16586: PLUS
16587: PPUSH
16588: LD_VAR 0 3
16592: PUSH
16593: LD_VAR 0 1
16597: ARRAY
16598: PPUSH
16599: LD_VAR 0 1
16603: PUSH
16604: LD_INT 4
16606: MOD
16607: PUSH
16608: LD_INT 1
16610: PLUS
16611: PPUSH
16612: CALL_OW 259
16616: PUSH
16617: LD_INT 1
16619: PLUS
16620: PPUSH
16621: CALL_OW 237
16625: GO 16527
16627: POP
16628: POP
// end ;
16629: PPOPN 3
16631: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16632: LD_EXP 27
16636: PUSH
16637: LD_EXP 35
16641: AND
16642: IFFALSE 16662
16644: GO 16646
16646: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16647: LD_INT 4
16649: PPUSH
16650: LD_OWVAR 2
16654: PPUSH
16655: LD_INT 0
16657: PPUSH
16658: CALL_OW 324
16662: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16663: LD_EXP 27
16667: PUSH
16668: LD_EXP 64
16672: AND
16673: IFFALSE 16693
16675: GO 16677
16677: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16678: LD_INT 19
16680: PPUSH
16681: LD_OWVAR 2
16685: PPUSH
16686: LD_INT 0
16688: PPUSH
16689: CALL_OW 324
16693: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16694: LD_EXP 27
16698: PUSH
16699: LD_EXP 36
16703: AND
16704: IFFALSE 16806
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
// begin enable ;
16713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_INT 22
16721: PUSH
16722: LD_OWVAR 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 34
16736: PUSH
16737: LD_INT 11
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 34
16746: PUSH
16747: LD_INT 30
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PPUSH
16763: CALL_OW 69
16767: ST_TO_ADDR
// if not tmp then
16768: LD_VAR 0 2
16772: NOT
16773: IFFALSE 16777
// exit ;
16775: GO 16806
// for i in tmp do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_VAR 0 2
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16804
// begin SetLives ( i , 0 ) ;
16790: LD_VAR 0 1
16794: PPUSH
16795: LD_INT 0
16797: PPUSH
16798: CALL_OW 234
// end ;
16802: GO 16787
16804: POP
16805: POP
// end ;
16806: PPOPN 2
16808: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16809: LD_EXP 27
16813: PUSH
16814: LD_EXP 37
16818: AND
16819: IFFALSE 16839
16821: GO 16823
16823: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16824: LD_INT 32
16826: PPUSH
16827: LD_OWVAR 2
16831: PPUSH
16832: LD_INT 0
16834: PPUSH
16835: CALL_OW 324
16839: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16840: LD_EXP 27
16844: PUSH
16845: LD_EXP 38
16849: AND
16850: IFFALSE 17031
16852: GO 16854
16854: DISABLE
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 33
16879: PUSH
16880: LD_INT 3
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 2
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 17031
// side := 0 ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// for i := 1 to 8 do
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: DOUBLE
16919: LD_INT 1
16921: DEC
16922: ST_TO_ADDR
16923: LD_INT 8
16925: PUSH
16926: FOR_TO
16927: IFFALSE 16975
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16929: LD_OWVAR 2
16933: PUSH
16934: LD_VAR 0 1
16938: NONEQUAL
16939: PUSH
16940: LD_OWVAR 2
16944: PPUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 81
16954: PUSH
16955: LD_INT 2
16957: EQUAL
16958: AND
16959: IFFALSE 16973
// begin side := i ;
16961: LD_ADDR_VAR 0 3
16965: PUSH
16966: LD_VAR 0 1
16970: ST_TO_ADDR
// break ;
16971: GO 16975
// end ;
16973: GO 16926
16975: POP
16976: POP
// if not side then
16977: LD_VAR 0 3
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 17031
// for i := 1 to tmp do
16986: LD_ADDR_VAR 0 1
16990: PUSH
16991: DOUBLE
16992: LD_INT 1
16994: DEC
16995: ST_TO_ADDR
16996: LD_VAR 0 2
17000: PUSH
17001: FOR_TO
17002: IFFALSE 17029
// if Prob ( 60 ) then
17004: LD_INT 60
17006: PPUSH
17007: CALL_OW 13
17011: IFFALSE 17027
// SetSide ( i , side ) ;
17013: LD_VAR 0 1
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: CALL_OW 235
17027: GO 17001
17029: POP
17030: POP
// end ;
17031: PPOPN 3
17033: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17034: LD_EXP 27
17038: PUSH
17039: LD_EXP 40
17043: AND
17044: IFFALSE 17163
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_OWVAR 2
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 21
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 23
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: PUSH
17106: FOR_IN
17107: IFFALSE 17161
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 257
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: LD_INT 4
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: IN
17137: IFFALSE 17159
// SetClass ( un , rand ( 1 , 4 ) ) ;
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: LD_INT 4
17149: PPUSH
17150: CALL_OW 12
17154: PPUSH
17155: CALL_OW 336
17159: GO 17106
17161: POP
17162: POP
// end ;
17163: PPOPN 1
17165: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17166: LD_EXP 27
17170: PUSH
17171: LD_EXP 39
17175: AND
17176: IFFALSE 17255
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_OWVAR 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 21
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: ST_TO_ADDR
// if not tmp then
17220: LD_VAR 0 1
17224: NOT
17225: IFFALSE 17229
// exit ;
17227: GO 17255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17229: LD_VAR 0 1
17233: PUSH
17234: LD_INT 1
17236: PPUSH
17237: LD_VAR 0 1
17241: PPUSH
17242: CALL_OW 12
17246: ARRAY
17247: PPUSH
17248: LD_INT 100
17250: PPUSH
17251: CALL_OW 234
// end ;
17255: PPOPN 1
17257: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17258: LD_EXP 27
17262: PUSH
17263: LD_EXP 41
17267: AND
17268: IFFALSE 17366
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17276: LD_ADDR_VAR 0 1
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_OWVAR 2
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 21
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PPUSH
17307: CALL_OW 69
17311: ST_TO_ADDR
// if not tmp then
17312: LD_VAR 0 1
17316: NOT
17317: IFFALSE 17321
// exit ;
17319: GO 17366
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 1
17328: PPUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 12
17338: ARRAY
17339: PPUSH
17340: LD_INT 1
17342: PPUSH
17343: LD_INT 4
17345: PPUSH
17346: CALL_OW 12
17350: PPUSH
17351: LD_INT 3000
17353: PPUSH
17354: LD_INT 9000
17356: PPUSH
17357: CALL_OW 12
17361: PPUSH
17362: CALL_OW 492
// end ;
17366: PPOPN 1
17368: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17369: LD_EXP 27
17373: PUSH
17374: LD_EXP 42
17378: AND
17379: IFFALSE 17399
17381: GO 17383
17383: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17384: LD_INT 1
17386: PPUSH
17387: LD_OWVAR 2
17391: PPUSH
17392: LD_INT 0
17394: PPUSH
17395: CALL_OW 324
17399: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17400: LD_EXP 27
17404: PUSH
17405: LD_EXP 43
17409: AND
17410: IFFALSE 17493
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17419: LD_ADDR_VAR 0 2
17423: PUSH
17424: LD_INT 22
17426: PUSH
17427: LD_OWVAR 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 21
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PPUSH
17450: CALL_OW 69
17454: ST_TO_ADDR
// if not tmp then
17455: LD_VAR 0 2
17459: NOT
17460: IFFALSE 17464
// exit ;
17462: GO 17493
// for i in tmp do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_VAR 0 2
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17491
// SetBLevel ( i , 10 ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_INT 10
17484: PPUSH
17485: CALL_OW 241
17489: GO 17474
17491: POP
17492: POP
// end ;
17493: PPOPN 2
17495: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17496: LD_EXP 27
17500: PUSH
17501: LD_EXP 44
17505: AND
17506: IFFALSE 17617
17508: GO 17510
17510: DISABLE
17511: LD_INT 0
17513: PPUSH
17514: PPUSH
17515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17516: LD_ADDR_VAR 0 3
17520: PUSH
17521: LD_INT 22
17523: PUSH
17524: LD_OWVAR 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PPUSH
17547: CALL_OW 69
17551: ST_TO_ADDR
// if not tmp then
17552: LD_VAR 0 3
17556: NOT
17557: IFFALSE 17561
// exit ;
17559: GO 17617
// un := tmp [ rand ( 1 , tmp ) ] ;
17561: LD_ADDR_VAR 0 2
17565: PUSH
17566: LD_VAR 0 3
17570: PUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_VAR 0 3
17578: PPUSH
17579: CALL_OW 12
17583: ARRAY
17584: ST_TO_ADDR
// if Crawls ( un ) then
17585: LD_VAR 0 2
17589: PPUSH
17590: CALL_OW 318
17594: IFFALSE 17605
// ComWalk ( un ) ;
17596: LD_VAR 0 2
17600: PPUSH
17601: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17605: LD_VAR 0 2
17609: PPUSH
17610: LD_INT 5
17612: PPUSH
17613: CALL_OW 336
// end ;
17617: PPOPN 3
17619: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17620: LD_EXP 27
17624: PUSH
17625: LD_EXP 45
17629: AND
17630: PUSH
17631: LD_OWVAR 67
17635: PUSH
17636: LD_INT 4
17638: LESS
17639: AND
17640: IFFALSE 17659
17642: GO 17644
17644: DISABLE
// begin Difficulty := Difficulty + 1 ;
17645: LD_ADDR_OWVAR 67
17649: PUSH
17650: LD_OWVAR 67
17654: PUSH
17655: LD_INT 1
17657: PLUS
17658: ST_TO_ADDR
// end ;
17659: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17660: LD_EXP 27
17664: PUSH
17665: LD_EXP 46
17669: AND
17670: IFFALSE 17773
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
// begin for i := 1 to 5 do
17678: LD_ADDR_VAR 0 1
17682: PUSH
17683: DOUBLE
17684: LD_INT 1
17686: DEC
17687: ST_TO_ADDR
17688: LD_INT 5
17690: PUSH
17691: FOR_TO
17692: IFFALSE 17771
// begin uc_nation := nation_nature ;
17694: LD_ADDR_OWVAR 21
17698: PUSH
17699: LD_INT 0
17701: ST_TO_ADDR
// uc_side := 0 ;
17702: LD_ADDR_OWVAR 20
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17710: LD_ADDR_OWVAR 29
17714: PUSH
17715: LD_INT 12
17717: PUSH
17718: LD_INT 12
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// hc_agressivity := 20 ;
17725: LD_ADDR_OWVAR 35
17729: PUSH
17730: LD_INT 20
17732: ST_TO_ADDR
// hc_class := class_tiger ;
17733: LD_ADDR_OWVAR 28
17737: PUSH
17738: LD_INT 14
17740: ST_TO_ADDR
// hc_gallery :=  ;
17741: LD_ADDR_OWVAR 33
17745: PUSH
17746: LD_STRING 
17748: ST_TO_ADDR
// hc_name :=  ;
17749: LD_ADDR_OWVAR 26
17753: PUSH
17754: LD_STRING 
17756: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17757: CALL_OW 44
17761: PPUSH
17762: LD_INT 0
17764: PPUSH
17765: CALL_OW 51
// end ;
17769: GO 17691
17771: POP
17772: POP
// end ;
17773: PPOPN 1
17775: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17776: LD_EXP 27
17780: PUSH
17781: LD_EXP 47
17785: AND
17786: IFFALSE 17795
17788: GO 17790
17790: DISABLE
// StreamSibBomb ;
17791: CALL 17796 0 0
17795: END
// export function StreamSibBomb ; var i , x , y ; begin
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
// result := false ;
17802: LD_ADDR_VAR 0 1
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// for i := 1 to 16 do
17810: LD_ADDR_VAR 0 2
17814: PUSH
17815: DOUBLE
17816: LD_INT 1
17818: DEC
17819: ST_TO_ADDR
17820: LD_INT 16
17822: PUSH
17823: FOR_TO
17824: IFFALSE 18023
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17826: LD_ADDR_VAR 0 3
17830: PUSH
17831: LD_INT 10
17833: PUSH
17834: LD_INT 20
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 40
17842: PUSH
17843: LD_INT 50
17845: PUSH
17846: LD_INT 60
17848: PUSH
17849: LD_INT 70
17851: PUSH
17852: LD_INT 80
17854: PUSH
17855: LD_INT 90
17857: PUSH
17858: LD_INT 100
17860: PUSH
17861: LD_INT 110
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 130
17869: PUSH
17870: LD_INT 140
17872: PUSH
17873: LD_INT 150
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 15
17898: PPUSH
17899: CALL_OW 12
17903: ARRAY
17904: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_INT 10
17912: PUSH
17913: LD_INT 20
17915: PUSH
17916: LD_INT 30
17918: PUSH
17919: LD_INT 40
17921: PUSH
17922: LD_INT 50
17924: PUSH
17925: LD_INT 60
17927: PUSH
17928: LD_INT 70
17930: PUSH
17931: LD_INT 80
17933: PUSH
17934: LD_INT 90
17936: PUSH
17937: LD_INT 100
17939: PUSH
17940: LD_INT 110
17942: PUSH
17943: LD_INT 120
17945: PUSH
17946: LD_INT 130
17948: PUSH
17949: LD_INT 140
17951: PUSH
17952: LD_INT 150
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_INT 15
17977: PPUSH
17978: CALL_OW 12
17982: ARRAY
17983: ST_TO_ADDR
// if ValidHex ( x , y ) then
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_VAR 0 4
17993: PPUSH
17994: CALL_OW 488
17998: IFFALSE 18021
// begin result := [ x , y ] ;
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_VAR 0 3
18009: PUSH
18010: LD_VAR 0 4
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: ST_TO_ADDR
// break ;
18019: GO 18023
// end ; end ;
18021: GO 17823
18023: POP
18024: POP
// if result then
18025: LD_VAR 0 1
18029: IFFALSE 18089
// begin ToLua ( playSibBomb() ) ;
18031: LD_STRING playSibBomb()
18033: PPUSH
18034: CALL_OW 559
// wait ( 0 0$14 ) ;
18038: LD_INT 490
18040: PPUSH
18041: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 1
18052: ARRAY
18053: PPUSH
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 2
18061: ARRAY
18062: PPUSH
18063: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18067: LD_VAR 0 1
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PPUSH
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 2
18083: ARRAY
18084: PPUSH
18085: CALL_OW 429
// end ; end ;
18089: LD_VAR 0 1
18093: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18094: LD_EXP 27
18098: PUSH
18099: LD_EXP 49
18103: AND
18104: IFFALSE 18116
18106: GO 18108
18108: DISABLE
// YouLost (  ) ;
18109: LD_STRING 
18111: PPUSH
18112: CALL_OW 104
18116: END
// every 0 0$1 trigger StreamModeActive and sFog do
18117: LD_EXP 27
18121: PUSH
18122: LD_EXP 48
18126: AND
18127: IFFALSE 18141
18129: GO 18131
18131: DISABLE
// FogOff ( your_side ) ;
18132: LD_OWVAR 2
18136: PPUSH
18137: CALL_OW 344
18141: END
// every 0 0$1 trigger StreamModeActive and sSun do
18142: LD_EXP 27
18146: PUSH
18147: LD_EXP 50
18151: AND
18152: IFFALSE 18180
18154: GO 18156
18156: DISABLE
// begin solar_recharge_percent := 0 ;
18157: LD_ADDR_OWVAR 79
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18165: LD_INT 10500
18167: PPUSH
18168: CALL_OW 67
// solar_recharge_percent := 100 ;
18172: LD_ADDR_OWVAR 79
18176: PUSH
18177: LD_INT 100
18179: ST_TO_ADDR
// end ;
18180: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18181: LD_EXP 27
18185: PUSH
18186: LD_EXP 51
18190: AND
18191: IFFALSE 18430
18193: GO 18195
18195: DISABLE
18196: LD_INT 0
18198: PPUSH
18199: PPUSH
18200: PPUSH
// begin tmp := [ ] ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// for i := 1 to 6 do
18208: LD_ADDR_VAR 0 1
18212: PUSH
18213: DOUBLE
18214: LD_INT 1
18216: DEC
18217: ST_TO_ADDR
18218: LD_INT 6
18220: PUSH
18221: FOR_TO
18222: IFFALSE 18327
// begin uc_nation := nation_nature ;
18224: LD_ADDR_OWVAR 21
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// uc_side := 0 ;
18232: LD_ADDR_OWVAR 20
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18240: LD_ADDR_OWVAR 29
18244: PUSH
18245: LD_INT 12
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: ST_TO_ADDR
// hc_agressivity := 20 ;
18255: LD_ADDR_OWVAR 35
18259: PUSH
18260: LD_INT 20
18262: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18263: LD_ADDR_OWVAR 28
18267: PUSH
18268: LD_INT 17
18270: ST_TO_ADDR
// hc_gallery :=  ;
18271: LD_ADDR_OWVAR 33
18275: PUSH
18276: LD_STRING 
18278: ST_TO_ADDR
// hc_name :=  ;
18279: LD_ADDR_OWVAR 26
18283: PUSH
18284: LD_STRING 
18286: ST_TO_ADDR
// un := CreateHuman ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: CALL_OW 44
18296: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 51
// tmp := tmp ^ un ;
18309: LD_ADDR_VAR 0 3
18313: PUSH
18314: LD_VAR 0 3
18318: PUSH
18319: LD_VAR 0 2
18323: ADD
18324: ST_TO_ADDR
// end ;
18325: GO 18221
18327: POP
18328: POP
// repeat wait ( 0 0$1 ) ;
18329: LD_INT 35
18331: PPUSH
18332: CALL_OW 67
// for un in tmp do
18336: LD_ADDR_VAR 0 2
18340: PUSH
18341: LD_VAR 0 3
18345: PUSH
18346: FOR_IN
18347: IFFALSE 18421
// begin if IsDead ( un ) then
18349: LD_VAR 0 2
18353: PPUSH
18354: CALL_OW 301
18358: IFFALSE 18378
// begin tmp := tmp diff un ;
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: LD_VAR 0 3
18369: PUSH
18370: LD_VAR 0 2
18374: DIFF
18375: ST_TO_ADDR
// continue ;
18376: GO 18346
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18378: LD_VAR 0 2
18382: PPUSH
18383: LD_INT 3
18385: PUSH
18386: LD_INT 22
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PPUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: CALL_OW 74
18414: PPUSH
18415: CALL_OW 115
// end ;
18419: GO 18346
18421: POP
18422: POP
// until not tmp ;
18423: LD_VAR 0 3
18427: NOT
18428: IFFALSE 18329
// end ;
18430: PPOPN 3
18432: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18433: LD_EXP 27
18437: PUSH
18438: LD_EXP 52
18442: AND
18443: IFFALSE 18497
18445: GO 18447
18447: DISABLE
// begin ToLua ( displayTroll(); ) ;
18448: LD_STRING displayTroll();
18450: PPUSH
18451: CALL_OW 559
// wait ( 3 3$00 ) ;
18455: LD_INT 6300
18457: PPUSH
18458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18462: LD_STRING hideTroll();
18464: PPUSH
18465: CALL_OW 559
// wait ( 1 1$00 ) ;
18469: LD_INT 2100
18471: PPUSH
18472: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18476: LD_STRING displayTroll();
18478: PPUSH
18479: CALL_OW 559
// wait ( 1 1$00 ) ;
18483: LD_INT 2100
18485: PPUSH
18486: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18490: LD_STRING hideTroll();
18492: PPUSH
18493: CALL_OW 559
// end ;
18497: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18498: LD_EXP 27
18502: PUSH
18503: LD_EXP 53
18507: AND
18508: IFFALSE 18571
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
// begin p := 0 ;
18516: LD_ADDR_VAR 0 1
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// repeat game_speed := 1 ;
18524: LD_ADDR_OWVAR 65
18528: PUSH
18529: LD_INT 1
18531: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18532: LD_INT 35
18534: PPUSH
18535: CALL_OW 67
// p := p + 1 ;
18539: LD_ADDR_VAR 0 1
18543: PUSH
18544: LD_VAR 0 1
18548: PUSH
18549: LD_INT 1
18551: PLUS
18552: ST_TO_ADDR
// until p >= 60 ;
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 60
18560: GREATEREQUAL
18561: IFFALSE 18524
// game_speed := 4 ;
18563: LD_ADDR_OWVAR 65
18567: PUSH
18568: LD_INT 4
18570: ST_TO_ADDR
// end ;
18571: PPOPN 1
18573: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18574: LD_EXP 27
18578: PUSH
18579: LD_EXP 54
18583: AND
18584: IFFALSE 18730
18586: GO 18588
18588: DISABLE
18589: LD_INT 0
18591: PPUSH
18592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_OWVAR 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 30
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 30
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PPUSH
18642: CALL_OW 69
18646: ST_TO_ADDR
// if not depot then
18647: LD_VAR 0 1
18651: NOT
18652: IFFALSE 18656
// exit ;
18654: GO 18730
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_VAR 0 1
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 12
18678: ARRAY
18679: PPUSH
18680: CALL_OW 274
18684: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: LD_INT 0
18695: PPUSH
18696: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_INT 2
18707: PPUSH
18708: LD_INT 0
18710: PPUSH
18711: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_INT 3
18722: PPUSH
18723: LD_INT 0
18725: PPUSH
18726: CALL_OW 277
// end ;
18730: PPOPN 2
18732: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18733: LD_EXP 27
18737: PUSH
18738: LD_EXP 55
18742: AND
18743: IFFALSE 18840
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 21
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: LD_INT 23
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 69
18804: ST_TO_ADDR
// if not tmp then
18805: LD_VAR 0 1
18809: NOT
18810: IFFALSE 18814
// exit ;
18812: GO 18840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18814: LD_VAR 0 1
18818: PUSH
18819: LD_INT 1
18821: PPUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 12
18831: ARRAY
18832: PPUSH
18833: LD_INT 200
18835: PPUSH
18836: CALL_OW 234
// end ;
18840: PPOPN 1
18842: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18843: LD_EXP 27
18847: PUSH
18848: LD_EXP 56
18852: AND
18853: IFFALSE 18932
18855: GO 18857
18857: DISABLE
18858: LD_INT 0
18860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18861: LD_ADDR_VAR 0 1
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 21
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 69
18896: ST_TO_ADDR
// if not tmp then
18897: LD_VAR 0 1
18901: NOT
18902: IFFALSE 18906
// exit ;
18904: GO 18932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18906: LD_VAR 0 1
18910: PUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 12
18923: ARRAY
18924: PPUSH
18925: LD_INT 60
18927: PPUSH
18928: CALL_OW 234
// end ;
18932: PPOPN 1
18934: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18935: LD_EXP 27
18939: PUSH
18940: LD_EXP 57
18944: AND
18945: IFFALSE 19044
18947: GO 18949
18949: DISABLE
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
// begin enable ;
18954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18955: LD_ADDR_VAR 0 1
18959: PUSH
18960: LD_INT 22
18962: PUSH
18963: LD_OWVAR 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 61
18974: PUSH
18975: EMPTY
18976: LIST
18977: PUSH
18978: LD_INT 33
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: ST_TO_ADDR
// if not tmp then
18998: LD_VAR 0 1
19002: NOT
19003: IFFALSE 19007
// exit ;
19005: GO 19044
// for i in tmp do
19007: LD_ADDR_VAR 0 2
19011: PUSH
19012: LD_VAR 0 1
19016: PUSH
19017: FOR_IN
19018: IFFALSE 19042
// if IsControledBy ( i ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 312
19029: IFFALSE 19040
// ComUnlink ( i ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 136
19040: GO 19017
19042: POP
19043: POP
// end ;
19044: PPOPN 2
19046: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19047: LD_EXP 27
19051: PUSH
19052: LD_EXP 58
19056: AND
19057: IFFALSE 19197
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
// begin ToLua ( displayPowell(); ) ;
19066: LD_STRING displayPowell();
19068: PPUSH
19069: CALL_OW 559
// uc_side := 0 ;
19073: LD_ADDR_OWVAR 20
19077: PUSH
19078: LD_INT 0
19080: ST_TO_ADDR
// uc_nation := 2 ;
19081: LD_ADDR_OWVAR 21
19085: PUSH
19086: LD_INT 2
19088: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19089: LD_ADDR_OWVAR 37
19093: PUSH
19094: LD_INT 14
19096: ST_TO_ADDR
// vc_engine := engine_siberite ;
19097: LD_ADDR_OWVAR 39
19101: PUSH
19102: LD_INT 3
19104: ST_TO_ADDR
// vc_control := control_apeman ;
19105: LD_ADDR_OWVAR 38
19109: PUSH
19110: LD_INT 5
19112: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19113: LD_ADDR_OWVAR 40
19117: PUSH
19118: LD_INT 29
19120: ST_TO_ADDR
// un := CreateVehicle ;
19121: LD_ADDR_VAR 0 2
19125: PUSH
19126: CALL_OW 45
19130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19131: LD_VAR 0 2
19135: PPUSH
19136: LD_INT 1
19138: PPUSH
19139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19143: LD_INT 35
19145: PPUSH
19146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19150: LD_VAR 0 2
19154: PPUSH
19155: LD_INT 22
19157: PUSH
19158: LD_OWVAR 2
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 69
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: CALL_OW 74
19181: PPUSH
19182: CALL_OW 115
// until IsDead ( un ) ;
19186: LD_VAR 0 2
19190: PPUSH
19191: CALL_OW 301
19195: IFFALSE 19143
// end ;
19197: PPOPN 2
19199: END
// every 0 0$1 trigger StreamModeActive and sStu do
19200: LD_EXP 27
19204: PUSH
19205: LD_EXP 66
19209: AND
19210: IFFALSE 19226
19212: GO 19214
19214: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19215: LD_STRING displayStucuk();
19217: PPUSH
19218: CALL_OW 559
// ResetFog ;
19222: CALL_OW 335
// end ;
19226: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19227: LD_EXP 27
19231: PUSH
19232: LD_EXP 59
19236: AND
19237: IFFALSE 19378
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19246: LD_ADDR_VAR 0 2
19250: PUSH
19251: LD_INT 22
19253: PUSH
19254: LD_OWVAR 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: ST_TO_ADDR
// if not tmp then
19282: LD_VAR 0 2
19286: NOT
19287: IFFALSE 19291
// exit ;
19289: GO 19378
// un := tmp [ rand ( 1 , tmp ) ] ;
19291: LD_ADDR_VAR 0 1
19295: PUSH
19296: LD_VAR 0 2
19300: PUSH
19301: LD_INT 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: CALL_OW 12
19313: ARRAY
19314: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19327: LD_VAR 0 1
19331: PPUSH
19332: LD_OWVAR 3
19336: PUSH
19337: LD_VAR 0 1
19341: DIFF
19342: PPUSH
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL_OW 74
19352: PPUSH
19353: CALL_OW 115
// wait ( 0 0$20 ) ;
19357: LD_INT 700
19359: PPUSH
19360: CALL_OW 67
// SetSide ( un , your_side ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_OWVAR 2
19373: PPUSH
19374: CALL_OW 235
// end ;
19378: PPOPN 2
19380: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19381: LD_EXP 27
19385: PUSH
19386: LD_EXP 60
19390: AND
19391: IFFALSE 19497
19393: GO 19395
19395: DISABLE
19396: LD_INT 0
19398: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19399: LD_ADDR_VAR 0 1
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_OWVAR 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 30
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 30
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// if not depot then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 19497
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19462: LD_VAR 0 1
19466: PUSH
19467: LD_INT 1
19469: ARRAY
19470: PPUSH
19471: CALL_OW 250
19475: PPUSH
19476: LD_VAR 0 1
19480: PUSH
19481: LD_INT 1
19483: ARRAY
19484: PPUSH
19485: CALL_OW 251
19489: PPUSH
19490: LD_INT 70
19492: PPUSH
19493: CALL_OW 495
// end ;
19497: PPOPN 1
19499: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19500: LD_EXP 27
19504: PUSH
19505: LD_EXP 61
19509: AND
19510: IFFALSE 19721
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19522: LD_ADDR_VAR 0 5
19526: PUSH
19527: LD_INT 22
19529: PUSH
19530: LD_OWVAR 2
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 21
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// if not tmp then
19558: LD_VAR 0 5
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19721
// for i in tmp do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: LD_VAR 0 5
19576: PUSH
19577: FOR_IN
19578: IFFALSE 19719
// begin d := rand ( 0 , 5 ) ;
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: LD_INT 0
19587: PPUSH
19588: LD_INT 5
19590: PPUSH
19591: CALL_OW 12
19595: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 250
19610: PPUSH
19611: LD_VAR 0 4
19615: PPUSH
19616: LD_INT 3
19618: PPUSH
19619: LD_INT 12
19621: PPUSH
19622: CALL_OW 12
19626: PPUSH
19627: CALL_OW 272
19631: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19632: LD_ADDR_VAR 0 3
19636: PUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL_OW 251
19646: PPUSH
19647: LD_VAR 0 4
19651: PPUSH
19652: LD_INT 3
19654: PPUSH
19655: LD_INT 12
19657: PPUSH
19658: CALL_OW 12
19662: PPUSH
19663: CALL_OW 273
19667: ST_TO_ADDR
// if ValidHex ( x , y ) then
19668: LD_VAR 0 2
19672: PPUSH
19673: LD_VAR 0 3
19677: PPUSH
19678: CALL_OW 488
19682: IFFALSE 19717
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_INT 3
19701: PPUSH
19702: LD_INT 6
19704: PPUSH
19705: CALL_OW 12
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 483
// end ;
19717: GO 19577
19719: POP
19720: POP
// end ;
19721: PPOPN 5
19723: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19724: LD_EXP 27
19728: PUSH
19729: LD_EXP 62
19733: AND
19734: IFFALSE 19828
19736: GO 19738
19738: DISABLE
19739: LD_INT 0
19741: PPUSH
19742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19743: LD_ADDR_VAR 0 2
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_OWVAR 2
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 32
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 2
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19828
// for i in tmp do
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_VAR 0 2
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19826
// SetFuel ( i , 0 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 240
19824: GO 19809
19826: POP
19827: POP
// end ;
19828: PPOPN 2
19830: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19831: LD_EXP 27
19835: PUSH
19836: LD_EXP 63
19840: AND
19841: IFFALSE 19907
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_OWVAR 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 30
19868: PUSH
19869: LD_INT 29
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 1
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 19907
// DestroyUnit ( tmp [ 1 ] ) ;
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: ARRAY
19902: PPUSH
19903: CALL_OW 65
// end ;
19907: PPOPN 1
19909: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19910: LD_EXP 27
19914: PUSH
19915: LD_EXP 65
19919: AND
19920: IFFALSE 20049
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
// begin uc_side := 0 ;
19928: LD_ADDR_OWVAR 20
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// uc_nation := nation_arabian ;
19936: LD_ADDR_OWVAR 21
19940: PUSH
19941: LD_INT 2
19943: ST_TO_ADDR
// hc_gallery :=  ;
19944: LD_ADDR_OWVAR 33
19948: PUSH
19949: LD_STRING 
19951: ST_TO_ADDR
// hc_name :=  ;
19952: LD_ADDR_OWVAR 26
19956: PUSH
19957: LD_STRING 
19959: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19960: LD_INT 1
19962: PPUSH
19963: LD_INT 11
19965: PPUSH
19966: LD_INT 10
19968: PPUSH
19969: CALL_OW 380
// un := CreateHuman ;
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: CALL_OW 44
19982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19983: LD_VAR 0 1
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 22
20009: PUSH
20010: LD_OWVAR 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PPUSH
20019: CALL_OW 69
20023: PPUSH
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 74
20033: PPUSH
20034: CALL_OW 115
// until IsDead ( un ) ;
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 301
20047: IFFALSE 19995
// end ;
20049: PPOPN 1
20051: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20052: LD_EXP 27
20056: PUSH
20057: LD_EXP 67
20061: AND
20062: IFFALSE 20074
20064: GO 20066
20066: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20067: LD_STRING earthquake(getX(game), 0, 32)
20069: PPUSH
20070: CALL_OW 559
20074: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20075: LD_EXP 27
20079: PUSH
20080: LD_EXP 68
20084: AND
20085: IFFALSE 20176
20087: GO 20089
20089: DISABLE
20090: LD_INT 0
20092: PPUSH
// begin enable ;
20093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20094: LD_ADDR_VAR 0 1
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_OWVAR 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 21
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 33
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: ST_TO_ADDR
// if not tmp then
20141: LD_VAR 0 1
20145: NOT
20146: IFFALSE 20150
// exit ;
20148: GO 20176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20150: LD_VAR 0 1
20154: PUSH
20155: LD_INT 1
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 234
// end ;
20176: PPOPN 1
20178: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20179: LD_EXP 27
20183: PUSH
20184: LD_EXP 69
20188: AND
20189: IFFALSE 20330
20191: GO 20193
20193: DISABLE
20194: LD_INT 0
20196: PPUSH
20197: PPUSH
20198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 22
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 25
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PPUSH
20230: CALL_OW 69
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 3
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20330
// un := tmp [ rand ( 1 , tmp ) ] ;
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 1
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: CALL_OW 12
20266: ARRAY
20267: ST_TO_ADDR
// if Crawls ( un ) then
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 318
20277: IFFALSE 20288
// ComWalk ( un ) ;
20279: LD_VAR 0 2
20283: PPUSH
20284: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20288: LD_VAR 0 2
20292: PPUSH
20293: LD_INT 9
20295: PPUSH
20296: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20300: LD_INT 28
20302: PPUSH
20303: LD_OWVAR 2
20307: PPUSH
20308: LD_INT 2
20310: PPUSH
20311: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20315: LD_INT 29
20317: PPUSH
20318: LD_OWVAR 2
20322: PPUSH
20323: LD_INT 2
20325: PPUSH
20326: CALL_OW 322
// end ;
20330: PPOPN 3
20332: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20333: LD_EXP 27
20337: PUSH
20338: LD_EXP 70
20342: AND
20343: IFFALSE 20454
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 3
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20454
// un := tmp [ rand ( 1 , tmp ) ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// if Crawls ( un ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 318
20431: IFFALSE 20442
// ComWalk ( un ) ;
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_INT 8
20449: PPUSH
20450: CALL_OW 336
// end ;
20454: PPOPN 3
20456: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20457: LD_EXP 27
20461: PUSH
20462: LD_EXP 71
20466: AND
20467: IFFALSE 20611
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20476: LD_ADDR_VAR 0 2
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_OWVAR 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 21
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 34
20508: PUSH
20509: LD_INT 12
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 34
20518: PUSH
20519: LD_INT 51
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 34
20528: PUSH
20529: LD_INT 32
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: PPUSH
20547: CALL_OW 69
20551: ST_TO_ADDR
// if not tmp then
20552: LD_VAR 0 2
20556: NOT
20557: IFFALSE 20561
// exit ;
20559: GO 20611
// for i in tmp do
20561: LD_ADDR_VAR 0 1
20565: PUSH
20566: LD_VAR 0 2
20570: PUSH
20571: FOR_IN
20572: IFFALSE 20609
// if GetCargo ( i , mat_artifact ) = 0 then
20574: LD_VAR 0 1
20578: PPUSH
20579: LD_INT 4
20581: PPUSH
20582: CALL_OW 289
20586: PUSH
20587: LD_INT 0
20589: EQUAL
20590: IFFALSE 20607
// SetCargo ( i , mat_siberit , 100 ) ;
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_INT 3
20599: PPUSH
20600: LD_INT 100
20602: PPUSH
20603: CALL_OW 290
20607: GO 20571
20609: POP
20610: POP
// end ;
20611: PPOPN 2
20613: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20614: LD_EXP 27
20618: PUSH
20619: LD_EXP 72
20623: AND
20624: IFFALSE 20807
20626: GO 20628
20628: DISABLE
20629: LD_INT 0
20631: PPUSH
20632: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 22
20640: PUSH
20641: LD_OWVAR 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: CALL_OW 69
20654: ST_TO_ADDR
// if not tmp then
20655: LD_VAR 0 2
20659: NOT
20660: IFFALSE 20664
// exit ;
20662: GO 20807
// for i := 1 to 2 do
20664: LD_ADDR_VAR 0 1
20668: PUSH
20669: DOUBLE
20670: LD_INT 1
20672: DEC
20673: ST_TO_ADDR
20674: LD_INT 2
20676: PUSH
20677: FOR_TO
20678: IFFALSE 20805
// begin uc_side := your_side ;
20680: LD_ADDR_OWVAR 20
20684: PUSH
20685: LD_OWVAR 2
20689: ST_TO_ADDR
// uc_nation := nation_american ;
20690: LD_ADDR_OWVAR 21
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// vc_chassis := us_morphling ;
20698: LD_ADDR_OWVAR 37
20702: PUSH
20703: LD_INT 5
20705: ST_TO_ADDR
// vc_engine := engine_siberite ;
20706: LD_ADDR_OWVAR 39
20710: PUSH
20711: LD_INT 3
20713: ST_TO_ADDR
// vc_control := control_computer ;
20714: LD_ADDR_OWVAR 38
20718: PUSH
20719: LD_INT 3
20721: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20722: LD_ADDR_OWVAR 40
20726: PUSH
20727: LD_INT 10
20729: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20730: LD_VAR 0 2
20734: PUSH
20735: LD_INT 1
20737: ARRAY
20738: PPUSH
20739: CALL_OW 310
20743: NOT
20744: IFFALSE 20791
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20746: CALL_OW 45
20750: PPUSH
20751: LD_VAR 0 2
20755: PUSH
20756: LD_INT 1
20758: ARRAY
20759: PPUSH
20760: CALL_OW 250
20764: PPUSH
20765: LD_VAR 0 2
20769: PUSH
20770: LD_INT 1
20772: ARRAY
20773: PPUSH
20774: CALL_OW 251
20778: PPUSH
20779: LD_INT 12
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 50
20789: GO 20803
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20791: CALL_OW 45
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 51
// end ;
20803: GO 20677
20805: POP
20806: POP
// end ;
20807: PPOPN 2
20809: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20810: LD_EXP 27
20814: PUSH
20815: LD_EXP 73
20819: AND
20820: IFFALSE 21042
20822: GO 20824
20824: DISABLE
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20833: LD_ADDR_VAR 0 6
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_OWVAR 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 3
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: ST_TO_ADDR
// if not tmp then
20887: LD_VAR 0 6
20891: NOT
20892: IFFALSE 20896
// exit ;
20894: GO 21042
// s1 := rand ( 1 , 4 ) ;
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_INT 1
20903: PPUSH
20904: LD_INT 4
20906: PPUSH
20907: CALL_OW 12
20911: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20912: LD_ADDR_VAR 0 4
20916: PUSH
20917: LD_VAR 0 6
20921: PUSH
20922: LD_INT 1
20924: ARRAY
20925: PPUSH
20926: LD_VAR 0 2
20930: PPUSH
20931: CALL_OW 259
20935: ST_TO_ADDR
// if s1 = 1 then
20936: LD_VAR 0 2
20940: PUSH
20941: LD_INT 1
20943: EQUAL
20944: IFFALSE 20964
// s2 := rand ( 2 , 4 ) else
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 2
20953: PPUSH
20954: LD_INT 4
20956: PPUSH
20957: CALL_OW 12
20961: ST_TO_ADDR
20962: GO 20972
// s2 := 1 ;
20964: LD_ADDR_VAR 0 3
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20972: LD_ADDR_VAR 0 5
20976: PUSH
20977: LD_VAR 0 6
20981: PUSH
20982: LD_INT 1
20984: ARRAY
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: CALL_OW 259
20995: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20996: LD_VAR 0 6
21000: PUSH
21001: LD_INT 1
21003: ARRAY
21004: PPUSH
21005: LD_VAR 0 2
21009: PPUSH
21010: LD_VAR 0 5
21014: PPUSH
21015: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21019: LD_VAR 0 6
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 3
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: CALL_OW 237
// end ;
21042: PPOPN 6
21044: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21045: LD_EXP 27
21049: PUSH
21050: LD_EXP 74
21054: AND
21055: IFFALSE 21134
21057: GO 21059
21059: DISABLE
21060: LD_INT 0
21062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_OWVAR 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 30
21082: PUSH
21083: LD_INT 3
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: ST_TO_ADDR
// if not tmp then
21099: LD_VAR 0 1
21103: NOT
21104: IFFALSE 21108
// exit ;
21106: GO 21134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21108: LD_VAR 0 1
21112: PUSH
21113: LD_INT 1
21115: PPUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 12
21125: ARRAY
21126: PPUSH
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 234
// end ;
21134: PPOPN 1
21136: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21137: LD_EXP 27
21141: PUSH
21142: LD_EXP 75
21146: AND
21147: IFFALSE 21259
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_OWVAR 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 30
21178: PUSH
21179: LD_INT 27
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 30
21188: PUSH
21189: LD_INT 26
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 28
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 2
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21259
// for i in tmp do
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: LD_VAR 0 2
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21257
// SetLives ( i , 1 ) ;
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 234
21255: GO 21240
21257: POP
21258: POP
// end ;
21259: PPOPN 2
21261: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21262: LD_EXP 27
21266: PUSH
21267: LD_EXP 76
21271: AND
21272: IFFALSE 21559
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
// begin i := rand ( 1 , 7 ) ;
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: LD_INT 1
21289: PPUSH
21290: LD_INT 7
21292: PPUSH
21293: CALL_OW 12
21297: ST_TO_ADDR
// case i of 1 :
21298: LD_VAR 0 1
21302: PUSH
21303: LD_INT 1
21305: DOUBLE
21306: EQUAL
21307: IFTRUE 21311
21309: GO 21321
21311: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21312: LD_STRING earthquake(getX(game), 0, 32)
21314: PPUSH
21315: CALL_OW 559
21319: GO 21559
21321: LD_INT 2
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21343
21329: POP
// begin ToLua ( displayStucuk(); ) ;
21330: LD_STRING displayStucuk();
21332: PPUSH
21333: CALL_OW 559
// ResetFog ;
21337: CALL_OW 335
// end ; 3 :
21341: GO 21559
21343: LD_INT 3
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21455
21351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_OWVAR 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 25
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 69
21387: ST_TO_ADDR
// if not tmp then
21388: LD_VAR 0 2
21392: NOT
21393: IFFALSE 21397
// exit ;
21395: GO 21559
// un := tmp [ rand ( 1 , tmp ) ] ;
21397: LD_ADDR_VAR 0 3
21401: PUSH
21402: LD_VAR 0 2
21406: PUSH
21407: LD_INT 1
21409: PPUSH
21410: LD_VAR 0 2
21414: PPUSH
21415: CALL_OW 12
21419: ARRAY
21420: ST_TO_ADDR
// if Crawls ( un ) then
21421: LD_VAR 0 3
21425: PPUSH
21426: CALL_OW 318
21430: IFFALSE 21441
// ComWalk ( un ) ;
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21441: LD_VAR 0 3
21445: PPUSH
21446: LD_INT 8
21448: PPUSH
21449: CALL_OW 336
// end ; 4 :
21453: GO 21559
21455: LD_INT 4
21457: DOUBLE
21458: EQUAL
21459: IFTRUE 21463
21461: GO 21537
21463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_INT 22
21471: PUSH
21472: LD_OWVAR 2
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 30
21483: PUSH
21484: LD_INT 29
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: ST_TO_ADDR
// if not tmp then
21500: LD_VAR 0 2
21504: NOT
21505: IFFALSE 21509
// exit ;
21507: GO 21559
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21509: LD_VAR 0 2
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21522: LD_VAR 0 2
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: CALL_OW 65
// end ; 5 .. 7 :
21535: GO 21559
21537: LD_INT 5
21539: DOUBLE
21540: GREATEREQUAL
21541: IFFALSE 21549
21543: LD_INT 7
21545: DOUBLE
21546: LESSEQUAL
21547: IFTRUE 21551
21549: GO 21558
21551: POP
// StreamSibBomb ; end ;
21552: CALL 17796 0 0
21556: GO 21559
21558: POP
// end ;
21559: PPOPN 3
21561: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21562: LD_EXP 27
21566: PUSH
21567: LD_EXP 77
21571: AND
21572: IFFALSE 21728
21574: GO 21576
21576: DISABLE
21577: LD_INT 0
21579: PPUSH
21580: PPUSH
21581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21582: LD_ADDR_VAR 0 2
21586: PUSH
21587: LD_INT 81
21589: PUSH
21590: LD_OWVAR 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 69
21635: ST_TO_ADDR
// if not tmp then
21636: LD_VAR 0 2
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 21728
// p := 0 ;
21645: LD_ADDR_VAR 0 3
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21653: LD_INT 35
21655: PPUSH
21656: CALL_OW 67
// p := p + 1 ;
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 1
21672: PLUS
21673: ST_TO_ADDR
// for i in tmp do
21674: LD_ADDR_VAR 0 1
21678: PUSH
21679: LD_VAR 0 2
21683: PUSH
21684: FOR_IN
21685: IFFALSE 21716
// if GetLives ( i ) < 1000 then
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 256
21696: PUSH
21697: LD_INT 1000
21699: LESS
21700: IFFALSE 21714
// SetLives ( i , 1000 ) ;
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_INT 1000
21709: PPUSH
21710: CALL_OW 234
21714: GO 21684
21716: POP
21717: POP
// until p > 20 ;
21718: LD_VAR 0 3
21722: PUSH
21723: LD_INT 20
21725: GREATER
21726: IFFALSE 21653
// end ;
21728: PPOPN 3
21730: END
// every 0 0$1 trigger StreamModeActive and sTime do
21731: LD_EXP 27
21735: PUSH
21736: LD_EXP 78
21740: AND
21741: IFFALSE 21776
21743: GO 21745
21745: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21746: LD_INT 28
21748: PPUSH
21749: LD_OWVAR 2
21753: PPUSH
21754: LD_INT 2
21756: PPUSH
21757: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21761: LD_INT 30
21763: PPUSH
21764: LD_OWVAR 2
21768: PPUSH
21769: LD_INT 2
21771: PPUSH
21772: CALL_OW 322
// end ;
21776: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21777: LD_EXP 27
21781: PUSH
21782: LD_EXP 79
21786: AND
21787: IFFALSE 21908
21789: GO 21791
21791: DISABLE
21792: LD_INT 0
21794: PPUSH
21795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_OWVAR 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 21
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: LD_INT 23
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: PPUSH
21845: CALL_OW 69
21849: ST_TO_ADDR
// if not tmp then
21850: LD_VAR 0 2
21854: NOT
21855: IFFALSE 21859
// exit ;
21857: GO 21908
// for i in tmp do
21859: LD_ADDR_VAR 0 1
21863: PUSH
21864: LD_VAR 0 2
21868: PUSH
21869: FOR_IN
21870: IFFALSE 21906
// begin if Crawls ( i ) then
21872: LD_VAR 0 1
21876: PPUSH
21877: CALL_OW 318
21881: IFFALSE 21892
// ComWalk ( i ) ;
21883: LD_VAR 0 1
21887: PPUSH
21888: CALL_OW 138
// SetClass ( i , 2 ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 2
21899: PPUSH
21900: CALL_OW 336
// end ;
21904: GO 21869
21906: POP
21907: POP
// end ;
21908: PPOPN 2
21910: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21911: LD_EXP 27
21915: PUSH
21916: LD_EXP 80
21920: AND
21921: IFFALSE 22209
21923: GO 21925
21925: DISABLE
21926: LD_INT 0
21928: PPUSH
21929: PPUSH
21930: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21931: LD_OWVAR 2
21935: PPUSH
21936: LD_INT 9
21938: PPUSH
21939: LD_INT 1
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21949: LD_INT 9
21951: PPUSH
21952: LD_OWVAR 2
21956: PPUSH
21957: CALL_OW 343
// uc_side := 9 ;
21961: LD_ADDR_OWVAR 20
21965: PUSH
21966: LD_INT 9
21968: ST_TO_ADDR
// uc_nation := 2 ;
21969: LD_ADDR_OWVAR 21
21973: PUSH
21974: LD_INT 2
21976: ST_TO_ADDR
// hc_name := Dark Warrior ;
21977: LD_ADDR_OWVAR 26
21981: PUSH
21982: LD_STRING Dark Warrior
21984: ST_TO_ADDR
// hc_gallery :=  ;
21985: LD_ADDR_OWVAR 33
21989: PUSH
21990: LD_STRING 
21992: ST_TO_ADDR
// hc_noskilllimit := true ;
21993: LD_ADDR_OWVAR 76
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22001: LD_ADDR_OWVAR 31
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 30
22014: PUSH
22015: LD_INT 30
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: ST_TO_ADDR
// un := CreateHuman ;
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: CALL_OW 44
22033: ST_TO_ADDR
// hc_noskilllimit := false ;
22034: LD_ADDR_OWVAR 76
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22042: LD_VAR 0 3
22046: PPUSH
22047: LD_INT 1
22049: PPUSH
22050: CALL_OW 51
// ToLua ( playRanger() ) ;
22054: LD_STRING playRanger()
22056: PPUSH
22057: CALL_OW 559
// p := 0 ;
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22069: LD_INT 35
22071: PPUSH
22072: CALL_OW 67
// p := p + 1 ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_VAR 0 2
22085: PUSH
22086: LD_INT 1
22088: PLUS
22089: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22090: LD_VAR 0 3
22094: PPUSH
22095: CALL_OW 256
22099: PUSH
22100: LD_INT 1000
22102: LESS
22103: IFFALSE 22117
// SetLives ( un , 1000 ) ;
22105: LD_VAR 0 3
22109: PPUSH
22110: LD_INT 1000
22112: PPUSH
22113: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22117: LD_VAR 0 3
22121: PPUSH
22122: LD_INT 81
22124: PUSH
22125: LD_OWVAR 2
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 91
22136: PUSH
22137: LD_VAR 0 3
22141: PUSH
22142: LD_INT 30
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: PPUSH
22159: LD_VAR 0 3
22163: PPUSH
22164: CALL_OW 74
22168: PPUSH
22169: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22173: LD_VAR 0 2
22177: PUSH
22178: LD_INT 80
22180: GREATER
22181: PUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: CALL_OW 301
22191: OR
22192: IFFALSE 22069
// if un then
22194: LD_VAR 0 3
22198: IFFALSE 22209
// RemoveUnit ( un ) ;
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 64
// end ;
22209: PPOPN 3
22211: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22212: LD_EXP 81
22216: IFFALSE 22332
22218: GO 22220
22220: DISABLE
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
22225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 81
22233: PUSH
22234: LD_OWVAR 2
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 21
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 69
22261: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22262: LD_STRING playComputer()
22264: PPUSH
22265: CALL_OW 559
// if not tmp then
22269: LD_VAR 0 2
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22332
// for i in tmp do
22278: LD_ADDR_VAR 0 1
22282: PUSH
22283: LD_VAR 0 2
22287: PUSH
22288: FOR_IN
22289: IFFALSE 22330
// for j := 1 to 4 do
22291: LD_ADDR_VAR 0 3
22295: PUSH
22296: DOUBLE
22297: LD_INT 1
22299: DEC
22300: ST_TO_ADDR
22301: LD_INT 4
22303: PUSH
22304: FOR_TO
22305: IFFALSE 22326
// SetSkill ( i , j , 10 ) ;
22307: LD_VAR 0 1
22311: PPUSH
22312: LD_VAR 0 3
22316: PPUSH
22317: LD_INT 10
22319: PPUSH
22320: CALL_OW 237
22324: GO 22304
22326: POP
22327: POP
22328: GO 22288
22330: POP
22331: POP
// end ;
22332: PPOPN 3
22334: END
// every 0 0$1 trigger s30 do var i , tmp ;
22335: LD_EXP 82
22339: IFFALSE 22408
22341: GO 22343
22343: DISABLE
22344: LD_INT 0
22346: PPUSH
22347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_INT 22
22355: PUSH
22356: LD_OWVAR 2
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PPUSH
22365: CALL_OW 69
22369: ST_TO_ADDR
// if not tmp then
22370: LD_VAR 0 2
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22408
// for i in tmp do
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: LD_VAR 0 2
22388: PUSH
22389: FOR_IN
22390: IFFALSE 22406
// SetLives ( i , 300 ) ;
22392: LD_VAR 0 1
22396: PPUSH
22397: LD_INT 300
22399: PPUSH
22400: CALL_OW 234
22404: GO 22389
22406: POP
22407: POP
// end ;
22408: PPOPN 2
22410: END
// every 0 0$1 trigger s60 do var i , tmp ;
22411: LD_EXP 83
22415: IFFALSE 22484
22417: GO 22419
22419: DISABLE
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: LD_INT 22
22431: PUSH
22432: LD_OWVAR 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 69
22445: ST_TO_ADDR
// if not tmp then
22446: LD_VAR 0 2
22450: NOT
22451: IFFALSE 22455
// exit ;
22453: GO 22484
// for i in tmp do
22455: LD_ADDR_VAR 0 1
22459: PUSH
22460: LD_VAR 0 2
22464: PUSH
22465: FOR_IN
22466: IFFALSE 22482
// SetLives ( i , 600 ) ;
22468: LD_VAR 0 1
22472: PPUSH
22473: LD_INT 600
22475: PPUSH
22476: CALL_OW 234
22480: GO 22465
22482: POP
22483: POP
// end ;
22484: PPOPN 2
22486: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22487: LD_INT 0
22489: PPUSH
// case cmd of 301 :
22490: LD_VAR 0 1
22494: PUSH
22495: LD_INT 301
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22535
22503: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22504: LD_VAR 0 6
22508: PPUSH
22509: LD_VAR 0 7
22513: PPUSH
22514: LD_VAR 0 8
22518: PPUSH
22519: LD_VAR 0 4
22523: PPUSH
22524: LD_VAR 0 5
22528: PPUSH
22529: CALL 23744 0 5
22533: GO 22656
22535: LD_INT 302
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22580
22543: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22544: LD_VAR 0 6
22548: PPUSH
22549: LD_VAR 0 7
22553: PPUSH
22554: LD_VAR 0 8
22558: PPUSH
22559: LD_VAR 0 9
22563: PPUSH
22564: LD_VAR 0 4
22568: PPUSH
22569: LD_VAR 0 5
22573: PPUSH
22574: CALL 23835 0 6
22578: GO 22656
22580: LD_INT 303
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22625
22588: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22589: LD_VAR 0 6
22593: PPUSH
22594: LD_VAR 0 7
22598: PPUSH
22599: LD_VAR 0 8
22603: PPUSH
22604: LD_VAR 0 9
22608: PPUSH
22609: LD_VAR 0 4
22613: PPUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: CALL 22661 0 6
22623: GO 22656
22625: LD_INT 304
22627: DOUBLE
22628: EQUAL
22629: IFTRUE 22633
22631: GO 22655
22633: POP
// hHackTeleport ( unit , x , y ) ; end ;
22634: LD_VAR 0 2
22638: PPUSH
22639: LD_VAR 0 4
22643: PPUSH
22644: LD_VAR 0 5
22648: PPUSH
22649: CALL 24428 0 3
22653: GO 22656
22655: POP
// end ;
22656: LD_VAR 0 12
22660: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22665: LD_VAR 0 1
22669: PUSH
22670: LD_INT 1
22672: LESS
22673: PUSH
22674: LD_VAR 0 1
22678: PUSH
22679: LD_INT 3
22681: GREATER
22682: OR
22683: PUSH
22684: LD_VAR 0 5
22688: PPUSH
22689: LD_VAR 0 6
22693: PPUSH
22694: CALL_OW 428
22698: OR
22699: IFFALSE 22703
// exit ;
22701: GO 23431
// uc_side := your_side ;
22703: LD_ADDR_OWVAR 20
22707: PUSH
22708: LD_OWVAR 2
22712: ST_TO_ADDR
// uc_nation := nation ;
22713: LD_ADDR_OWVAR 21
22717: PUSH
22718: LD_VAR 0 1
22722: ST_TO_ADDR
// bc_level = 1 ;
22723: LD_ADDR_OWVAR 43
22727: PUSH
22728: LD_INT 1
22730: ST_TO_ADDR
// case btype of 1 :
22731: LD_VAR 0 2
22735: PUSH
22736: LD_INT 1
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22755
22744: POP
// bc_type := b_depot ; 2 :
22745: LD_ADDR_OWVAR 42
22749: PUSH
22750: LD_INT 0
22752: ST_TO_ADDR
22753: GO 23375
22755: LD_INT 2
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22774
22763: POP
// bc_type := b_warehouse ; 3 :
22764: LD_ADDR_OWVAR 42
22768: PUSH
22769: LD_INT 1
22771: ST_TO_ADDR
22772: GO 23375
22774: LD_INT 3
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 22793
22782: POP
// bc_type := b_lab ; 4 .. 9 :
22783: LD_ADDR_OWVAR 42
22787: PUSH
22788: LD_INT 6
22790: ST_TO_ADDR
22791: GO 23375
22793: LD_INT 4
22795: DOUBLE
22796: GREATEREQUAL
22797: IFFALSE 22805
22799: LD_INT 9
22801: DOUBLE
22802: LESSEQUAL
22803: IFTRUE 22807
22805: GO 22867
22807: POP
// begin bc_type := b_lab_half ;
22808: LD_ADDR_OWVAR 42
22812: PUSH
22813: LD_INT 7
22815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22816: LD_ADDR_OWVAR 44
22820: PUSH
22821: LD_INT 10
22823: PUSH
22824: LD_INT 11
22826: PUSH
22827: LD_INT 12
22829: PUSH
22830: LD_INT 15
22832: PUSH
22833: LD_INT 14
22835: PUSH
22836: LD_INT 13
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PUSH
22847: LD_VAR 0 2
22851: PUSH
22852: LD_INT 3
22854: MINUS
22855: ARRAY
22856: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22857: LD_ADDR_OWVAR 45
22861: PUSH
22862: LD_INT 9
22864: ST_TO_ADDR
// end ; 10 .. 13 :
22865: GO 23375
22867: LD_INT 10
22869: DOUBLE
22870: GREATEREQUAL
22871: IFFALSE 22879
22873: LD_INT 13
22875: DOUBLE
22876: LESSEQUAL
22877: IFTRUE 22881
22879: GO 22958
22881: POP
// begin bc_type := b_lab_full ;
22882: LD_ADDR_OWVAR 42
22886: PUSH
22887: LD_INT 8
22889: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22890: LD_ADDR_OWVAR 44
22894: PUSH
22895: LD_INT 10
22897: PUSH
22898: LD_INT 12
22900: PUSH
22901: LD_INT 14
22903: PUSH
22904: LD_INT 13
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: LD_VAR 0 2
22917: PUSH
22918: LD_INT 9
22920: MINUS
22921: ARRAY
22922: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22923: LD_ADDR_OWVAR 45
22927: PUSH
22928: LD_INT 11
22930: PUSH
22931: LD_INT 15
22933: PUSH
22934: LD_INT 12
22936: PUSH
22937: LD_INT 15
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: LD_VAR 0 2
22950: PUSH
22951: LD_INT 9
22953: MINUS
22954: ARRAY
22955: ST_TO_ADDR
// end ; 14 :
22956: GO 23375
22958: LD_INT 14
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 22977
22966: POP
// bc_type := b_workshop ; 15 :
22967: LD_ADDR_OWVAR 42
22971: PUSH
22972: LD_INT 2
22974: ST_TO_ADDR
22975: GO 23375
22977: LD_INT 15
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 22996
22985: POP
// bc_type := b_factory ; 16 :
22986: LD_ADDR_OWVAR 42
22990: PUSH
22991: LD_INT 3
22993: ST_TO_ADDR
22994: GO 23375
22996: LD_INT 16
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23015
23004: POP
// bc_type := b_ext_gun ; 17 :
23005: LD_ADDR_OWVAR 42
23009: PUSH
23010: LD_INT 17
23012: ST_TO_ADDR
23013: GO 23375
23015: LD_INT 17
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23051
23023: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23024: LD_ADDR_OWVAR 42
23028: PUSH
23029: LD_INT 19
23031: PUSH
23032: LD_INT 23
23034: PUSH
23035: LD_INT 19
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_VAR 0 1
23047: ARRAY
23048: ST_TO_ADDR
23049: GO 23375
23051: LD_INT 18
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23070
23059: POP
// bc_type := b_ext_radar ; 19 :
23060: LD_ADDR_OWVAR 42
23064: PUSH
23065: LD_INT 20
23067: ST_TO_ADDR
23068: GO 23375
23070: LD_INT 19
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23089
23078: POP
// bc_type := b_ext_radio ; 20 :
23079: LD_ADDR_OWVAR 42
23083: PUSH
23084: LD_INT 22
23086: ST_TO_ADDR
23087: GO 23375
23089: LD_INT 20
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23108
23097: POP
// bc_type := b_ext_siberium ; 21 :
23098: LD_ADDR_OWVAR 42
23102: PUSH
23103: LD_INT 21
23105: ST_TO_ADDR
23106: GO 23375
23108: LD_INT 21
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23127
23116: POP
// bc_type := b_ext_computer ; 22 :
23117: LD_ADDR_OWVAR 42
23121: PUSH
23122: LD_INT 24
23124: ST_TO_ADDR
23125: GO 23375
23127: LD_INT 22
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23146
23135: POP
// bc_type := b_ext_track ; 23 :
23136: LD_ADDR_OWVAR 42
23140: PUSH
23141: LD_INT 16
23143: ST_TO_ADDR
23144: GO 23375
23146: LD_INT 23
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23165
23154: POP
// bc_type := b_ext_laser ; 24 :
23155: LD_ADDR_OWVAR 42
23159: PUSH
23160: LD_INT 25
23162: ST_TO_ADDR
23163: GO 23375
23165: LD_INT 24
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23184
23173: POP
// bc_type := b_control_tower ; 25 :
23174: LD_ADDR_OWVAR 42
23178: PUSH
23179: LD_INT 36
23181: ST_TO_ADDR
23182: GO 23375
23184: LD_INT 25
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23203
23192: POP
// bc_type := b_breastwork ; 26 :
23193: LD_ADDR_OWVAR 42
23197: PUSH
23198: LD_INT 31
23200: ST_TO_ADDR
23201: GO 23375
23203: LD_INT 26
23205: DOUBLE
23206: EQUAL
23207: IFTRUE 23211
23209: GO 23222
23211: POP
// bc_type := b_bunker ; 27 :
23212: LD_ADDR_OWVAR 42
23216: PUSH
23217: LD_INT 32
23219: ST_TO_ADDR
23220: GO 23375
23222: LD_INT 27
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23241
23230: POP
// bc_type := b_turret ; 28 :
23231: LD_ADDR_OWVAR 42
23235: PUSH
23236: LD_INT 33
23238: ST_TO_ADDR
23239: GO 23375
23241: LD_INT 28
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23260
23249: POP
// bc_type := b_armoury ; 29 :
23250: LD_ADDR_OWVAR 42
23254: PUSH
23255: LD_INT 4
23257: ST_TO_ADDR
23258: GO 23375
23260: LD_INT 29
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23279
23268: POP
// bc_type := b_barracks ; 30 :
23269: LD_ADDR_OWVAR 42
23273: PUSH
23274: LD_INT 5
23276: ST_TO_ADDR
23277: GO 23375
23279: LD_INT 30
23281: DOUBLE
23282: EQUAL
23283: IFTRUE 23287
23285: GO 23298
23287: POP
// bc_type := b_solar_power ; 31 :
23288: LD_ADDR_OWVAR 42
23292: PUSH
23293: LD_INT 27
23295: ST_TO_ADDR
23296: GO 23375
23298: LD_INT 31
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23317
23306: POP
// bc_type := b_oil_power ; 32 :
23307: LD_ADDR_OWVAR 42
23311: PUSH
23312: LD_INT 26
23314: ST_TO_ADDR
23315: GO 23375
23317: LD_INT 32
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23336
23325: POP
// bc_type := b_siberite_power ; 33 :
23326: LD_ADDR_OWVAR 42
23330: PUSH
23331: LD_INT 28
23333: ST_TO_ADDR
23334: GO 23375
23336: LD_INT 33
23338: DOUBLE
23339: EQUAL
23340: IFTRUE 23344
23342: GO 23355
23344: POP
// bc_type := b_oil_mine ; 34 :
23345: LD_ADDR_OWVAR 42
23349: PUSH
23350: LD_INT 29
23352: ST_TO_ADDR
23353: GO 23375
23355: LD_INT 34
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23374
23363: POP
// bc_type := b_siberite_mine ; end ;
23364: LD_ADDR_OWVAR 42
23368: PUSH
23369: LD_INT 30
23371: ST_TO_ADDR
23372: GO 23375
23374: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23375: LD_ADDR_VAR 0 8
23379: PUSH
23380: LD_VAR 0 5
23384: PPUSH
23385: LD_VAR 0 6
23389: PPUSH
23390: LD_VAR 0 3
23394: PPUSH
23395: CALL_OW 47
23399: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23400: LD_OWVAR 42
23404: PUSH
23405: LD_INT 32
23407: PUSH
23408: LD_INT 33
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: IN
23415: IFFALSE 23431
// PlaceWeaponTurret ( b , weapon ) ;
23417: LD_VAR 0 8
23421: PPUSH
23422: LD_VAR 0 4
23426: PPUSH
23427: CALL_OW 431
// end ;
23431: LD_VAR 0 7
23435: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23436: LD_INT 0
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23442: LD_ADDR_VAR 0 4
23446: PUSH
23447: LD_INT 22
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 30
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 30
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PPUSH
23491: CALL_OW 69
23495: ST_TO_ADDR
// if not tmp then
23496: LD_VAR 0 4
23500: NOT
23501: IFFALSE 23505
// exit ;
23503: GO 23564
// for i in tmp do
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: LD_VAR 0 4
23514: PUSH
23515: FOR_IN
23516: IFFALSE 23562
// for j = 1 to 3 do
23518: LD_ADDR_VAR 0 3
23522: PUSH
23523: DOUBLE
23524: LD_INT 1
23526: DEC
23527: ST_TO_ADDR
23528: LD_INT 3
23530: PUSH
23531: FOR_TO
23532: IFFALSE 23558
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23534: LD_VAR 0 2
23538: PPUSH
23539: CALL_OW 274
23543: PPUSH
23544: LD_VAR 0 3
23548: PPUSH
23549: LD_INT 99999
23551: PPUSH
23552: CALL_OW 277
23556: GO 23531
23558: POP
23559: POP
23560: GO 23515
23562: POP
23563: POP
// end ;
23564: LD_VAR 0 1
23568: RET
// export function hHackSetLevel10 ; var i , j ; begin
23569: LD_INT 0
23571: PPUSH
23572: PPUSH
23573: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23574: LD_ADDR_VAR 0 2
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: PUSH
23594: FOR_IN
23595: IFFALSE 23647
// if IsSelected ( i ) then
23597: LD_VAR 0 2
23601: PPUSH
23602: CALL_OW 306
23606: IFFALSE 23645
// begin for j := 1 to 4 do
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: DOUBLE
23614: LD_INT 1
23616: DEC
23617: ST_TO_ADDR
23618: LD_INT 4
23620: PUSH
23621: FOR_TO
23622: IFFALSE 23643
// SetSkill ( i , j , 10 ) ;
23624: LD_VAR 0 2
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: LD_INT 10
23636: PPUSH
23637: CALL_OW 237
23641: GO 23621
23643: POP
23644: POP
// end ;
23645: GO 23594
23647: POP
23648: POP
// end ;
23649: LD_VAR 0 1
23653: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
23658: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23659: LD_ADDR_VAR 0 2
23663: PUSH
23664: LD_INT 22
23666: PUSH
23667: LD_OWVAR 2
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 21
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 69
23694: PUSH
23695: FOR_IN
23696: IFFALSE 23737
// begin for j := 1 to 4 do
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: DOUBLE
23704: LD_INT 1
23706: DEC
23707: ST_TO_ADDR
23708: LD_INT 4
23710: PUSH
23711: FOR_TO
23712: IFFALSE 23733
// SetSkill ( i , j , 10 ) ;
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 10
23726: PPUSH
23727: CALL_OW 237
23731: GO 23711
23733: POP
23734: POP
// end ;
23735: GO 23695
23737: POP
23738: POP
// end ;
23739: LD_VAR 0 1
23743: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23744: LD_INT 0
23746: PPUSH
// uc_side := your_side ;
23747: LD_ADDR_OWVAR 20
23751: PUSH
23752: LD_OWVAR 2
23756: ST_TO_ADDR
// uc_nation := nation ;
23757: LD_ADDR_OWVAR 21
23761: PUSH
23762: LD_VAR 0 1
23766: ST_TO_ADDR
// InitHc ;
23767: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23771: LD_INT 0
23773: PPUSH
23774: LD_VAR 0 2
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23788: LD_VAR 0 4
23792: PPUSH
23793: LD_VAR 0 5
23797: PPUSH
23798: CALL_OW 428
23802: PUSH
23803: LD_INT 0
23805: EQUAL
23806: IFFALSE 23830
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23808: CALL_OW 44
23812: PPUSH
23813: LD_VAR 0 4
23817: PPUSH
23818: LD_VAR 0 5
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: CALL_OW 48
// end ;
23830: LD_VAR 0 6
23834: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23835: LD_INT 0
23837: PPUSH
23838: PPUSH
// uc_side := your_side ;
23839: LD_ADDR_OWVAR 20
23843: PUSH
23844: LD_OWVAR 2
23848: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23849: LD_VAR 0 1
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: LD_INT 3
23862: PUSH
23863: LD_INT 4
23865: PUSH
23866: LD_INT 5
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: IN
23876: IFFALSE 23888
// uc_nation := nation_american else
23878: LD_ADDR_OWVAR 21
23882: PUSH
23883: LD_INT 1
23885: ST_TO_ADDR
23886: GO 23931
// if chassis in [ 11 , 12 , 13 , 14 ] then
23888: LD_VAR 0 1
23892: PUSH
23893: LD_INT 11
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: LD_INT 13
23901: PUSH
23902: LD_INT 14
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: IN
23911: IFFALSE 23923
// uc_nation := nation_arabian else
23913: LD_ADDR_OWVAR 21
23917: PUSH
23918: LD_INT 2
23920: ST_TO_ADDR
23921: GO 23931
// uc_nation := nation_russian ;
23923: LD_ADDR_OWVAR 21
23927: PUSH
23928: LD_INT 3
23930: ST_TO_ADDR
// vc_chassis := chassis ;
23931: LD_ADDR_OWVAR 37
23935: PUSH
23936: LD_VAR 0 1
23940: ST_TO_ADDR
// vc_engine := engine ;
23941: LD_ADDR_OWVAR 39
23945: PUSH
23946: LD_VAR 0 2
23950: ST_TO_ADDR
// vc_control := control ;
23951: LD_ADDR_OWVAR 38
23955: PUSH
23956: LD_VAR 0 3
23960: ST_TO_ADDR
// vc_weapon := weapon ;
23961: LD_ADDR_OWVAR 40
23965: PUSH
23966: LD_VAR 0 4
23970: ST_TO_ADDR
// un := CreateVehicle ;
23971: LD_ADDR_VAR 0 8
23975: PUSH
23976: CALL_OW 45
23980: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23981: LD_VAR 0 8
23985: PPUSH
23986: LD_INT 0
23988: PPUSH
23989: LD_INT 5
23991: PPUSH
23992: CALL_OW 12
23996: PPUSH
23997: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24001: LD_VAR 0 8
24005: PPUSH
24006: LD_VAR 0 5
24010: PPUSH
24011: LD_VAR 0 6
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: CALL_OW 48
// end ;
24023: LD_VAR 0 7
24027: RET
// export hInvincible ; every 1 do
24028: GO 24030
24030: DISABLE
// hInvincible := [ ] ;
24031: LD_ADDR_EXP 84
24035: PUSH
24036: EMPTY
24037: ST_TO_ADDR
24038: END
// every 10 do var i ;
24039: GO 24041
24041: DISABLE
24042: LD_INT 0
24044: PPUSH
// begin enable ;
24045: ENABLE
// if not hInvincible then
24046: LD_EXP 84
24050: NOT
24051: IFFALSE 24055
// exit ;
24053: GO 24099
// for i in hInvincible do
24055: LD_ADDR_VAR 0 1
24059: PUSH
24060: LD_EXP 84
24064: PUSH
24065: FOR_IN
24066: IFFALSE 24097
// if GetLives ( i ) < 1000 then
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 256
24077: PUSH
24078: LD_INT 1000
24080: LESS
24081: IFFALSE 24095
// SetLives ( i , 1000 ) ;
24083: LD_VAR 0 1
24087: PPUSH
24088: LD_INT 1000
24090: PPUSH
24091: CALL_OW 234
24095: GO 24065
24097: POP
24098: POP
// end ;
24099: PPOPN 1
24101: END
// export function hHackInvincible ; var i ; begin
24102: LD_INT 0
24104: PPUSH
24105: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24106: LD_ADDR_VAR 0 2
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 69
24143: PUSH
24144: FOR_IN
24145: IFFALSE 24206
// if IsSelected ( i ) then
24147: LD_VAR 0 2
24151: PPUSH
24152: CALL_OW 306
24156: IFFALSE 24204
// begin if i in hInvincible then
24158: LD_VAR 0 2
24162: PUSH
24163: LD_EXP 84
24167: IN
24168: IFFALSE 24188
// hInvincible := hInvincible diff i else
24170: LD_ADDR_EXP 84
24174: PUSH
24175: LD_EXP 84
24179: PUSH
24180: LD_VAR 0 2
24184: DIFF
24185: ST_TO_ADDR
24186: GO 24204
// hInvincible := hInvincible union i ;
24188: LD_ADDR_EXP 84
24192: PUSH
24193: LD_EXP 84
24197: PUSH
24198: LD_VAR 0 2
24202: UNION
24203: ST_TO_ADDR
// end ;
24204: GO 24144
24206: POP
24207: POP
// end ;
24208: LD_VAR 0 1
24212: RET
// export function hHackInvisible ; var i , j ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
24217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_INT 21
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PPUSH
24233: CALL_OW 69
24237: PUSH
24238: FOR_IN
24239: IFFALSE 24263
// if IsSelected ( i ) then
24241: LD_VAR 0 2
24245: PPUSH
24246: CALL_OW 306
24250: IFFALSE 24261
// ComForceInvisible ( i ) ;
24252: LD_VAR 0 2
24256: PPUSH
24257: CALL_OW 496
24261: GO 24238
24263: POP
24264: POP
// end ;
24265: LD_VAR 0 1
24269: RET
// export function hHackChangeYourSide ; begin
24270: LD_INT 0
24272: PPUSH
// if your_side = 8 then
24273: LD_OWVAR 2
24277: PUSH
24278: LD_INT 8
24280: EQUAL
24281: IFFALSE 24293
// your_side := 0 else
24283: LD_ADDR_OWVAR 2
24287: PUSH
24288: LD_INT 0
24290: ST_TO_ADDR
24291: GO 24307
// your_side := your_side + 1 ;
24293: LD_ADDR_OWVAR 2
24297: PUSH
24298: LD_OWVAR 2
24302: PUSH
24303: LD_INT 1
24305: PLUS
24306: ST_TO_ADDR
// end ;
24307: LD_VAR 0 1
24311: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
24316: PPUSH
// for i in all_units do
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_OWVAR 3
24326: PUSH
24327: FOR_IN
24328: IFFALSE 24406
// if IsSelected ( i ) then
24330: LD_VAR 0 2
24334: PPUSH
24335: CALL_OW 306
24339: IFFALSE 24404
// begin j := GetSide ( i ) ;
24341: LD_ADDR_VAR 0 3
24345: PUSH
24346: LD_VAR 0 2
24350: PPUSH
24351: CALL_OW 255
24355: ST_TO_ADDR
// if j = 8 then
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 8
24363: EQUAL
24364: IFFALSE 24376
// j := 0 else
24366: LD_ADDR_VAR 0 3
24370: PUSH
24371: LD_INT 0
24373: ST_TO_ADDR
24374: GO 24390
// j := j + 1 ;
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 1
24388: PLUS
24389: ST_TO_ADDR
// SetSide ( i , j ) ;
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: CALL_OW 235
// end ;
24404: GO 24327
24406: POP
24407: POP
// end ;
24408: LD_VAR 0 1
24412: RET
// export function hHackFog ; begin
24413: LD_INT 0
24415: PPUSH
// FogOff ( true ) ;
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 344
// end ;
24423: LD_VAR 0 1
24427: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24428: LD_INT 0
24430: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24431: LD_VAR 0 1
24435: PPUSH
24436: LD_VAR 0 2
24440: PPUSH
24441: LD_VAR 0 3
24445: PPUSH
24446: LD_INT 1
24448: PPUSH
24449: LD_INT 1
24451: PPUSH
24452: CALL_OW 483
// CenterOnXY ( x , y ) ;
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_VAR 0 3
24465: PPUSH
24466: CALL_OW 84
// end ;
24470: LD_VAR 0 4
24474: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24479: LD_VAR 0 1
24483: NOT
24484: PUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: CALL_OW 488
24499: NOT
24500: OR
24501: PUSH
24502: LD_VAR 0 1
24506: PPUSH
24507: CALL_OW 266
24511: PUSH
24512: LD_INT 3
24514: NONEQUAL
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 247
24525: PUSH
24526: LD_INT 1
24528: EQUAL
24529: NOT
24530: AND
24531: OR
24532: IFFALSE 24536
// exit ;
24534: GO 24685
// if GetType ( factory ) = unit_human then
24536: LD_VAR 0 1
24540: PPUSH
24541: CALL_OW 247
24545: PUSH
24546: LD_INT 1
24548: EQUAL
24549: IFFALSE 24566
// factory := IsInUnit ( factory ) ;
24551: LD_ADDR_VAR 0 1
24555: PUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL_OW 310
24565: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24566: LD_VAR 0 1
24570: PPUSH
24571: CALL_OW 266
24575: PUSH
24576: LD_INT 3
24578: NONEQUAL
24579: IFFALSE 24583
// exit ;
24581: GO 24685
// if HexInfo ( x , y ) = factory then
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 3
24592: PPUSH
24593: CALL_OW 428
24597: PUSH
24598: LD_VAR 0 1
24602: EQUAL
24603: IFFALSE 24630
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24605: LD_ADDR_EXP 85
24609: PUSH
24610: LD_EXP 85
24614: PPUSH
24615: LD_VAR 0 1
24619: PPUSH
24620: LD_INT 0
24622: PPUSH
24623: CALL_OW 1
24627: ST_TO_ADDR
24628: GO 24681
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24630: LD_ADDR_EXP 85
24634: PUSH
24635: LD_EXP 85
24639: PPUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 255
24654: PUSH
24655: LD_VAR 0 1
24659: PUSH
24660: LD_VAR 0 2
24664: PUSH
24665: LD_VAR 0 3
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL_OW 1
24680: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24681: CALL 24690 0 0
// end ;
24685: LD_VAR 0 4
24689: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
24694: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24695: LD_STRING resetFactoryWaypoint();
24697: PPUSH
24698: CALL_OW 559
// if factoryWaypoints then
24702: LD_EXP 85
24706: IFFALSE 24832
// begin list := PrepareArray ( factoryWaypoints ) ;
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_EXP 85
24717: PPUSH
24718: CALL 71154 0 1
24722: ST_TO_ADDR
// for i := 1 to list do
24723: LD_ADDR_VAR 0 2
24727: PUSH
24728: DOUBLE
24729: LD_INT 1
24731: DEC
24732: ST_TO_ADDR
24733: LD_VAR 0 3
24737: PUSH
24738: FOR_TO
24739: IFFALSE 24830
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24741: LD_STRING setFactoryWaypointXY(
24743: PUSH
24744: LD_VAR 0 3
24748: PUSH
24749: LD_VAR 0 2
24753: ARRAY
24754: PUSH
24755: LD_INT 1
24757: ARRAY
24758: STR
24759: PUSH
24760: LD_STRING ,
24762: STR
24763: PUSH
24764: LD_VAR 0 3
24768: PUSH
24769: LD_VAR 0 2
24773: ARRAY
24774: PUSH
24775: LD_INT 2
24777: ARRAY
24778: STR
24779: PUSH
24780: LD_STRING ,
24782: STR
24783: PUSH
24784: LD_VAR 0 3
24788: PUSH
24789: LD_VAR 0 2
24793: ARRAY
24794: PUSH
24795: LD_INT 3
24797: ARRAY
24798: STR
24799: PUSH
24800: LD_STRING ,
24802: STR
24803: PUSH
24804: LD_VAR 0 3
24808: PUSH
24809: LD_VAR 0 2
24813: ARRAY
24814: PUSH
24815: LD_INT 4
24817: ARRAY
24818: STR
24819: PUSH
24820: LD_STRING )
24822: STR
24823: PPUSH
24824: CALL_OW 559
24828: GO 24738
24830: POP
24831: POP
// end ; end ;
24832: LD_VAR 0 1
24836: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24837: LD_INT 0
24839: PPUSH
// if HexInfo ( x , y ) = warehouse then
24840: LD_VAR 0 2
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: CALL_OW 428
24854: PUSH
24855: LD_VAR 0 1
24859: EQUAL
24860: IFFALSE 24887
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24862: LD_ADDR_EXP 86
24866: PUSH
24867: LD_EXP 86
24871: PPUSH
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_INT 0
24879: PPUSH
24880: CALL_OW 1
24884: ST_TO_ADDR
24885: GO 24938
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24887: LD_ADDR_EXP 86
24891: PUSH
24892: LD_EXP 86
24896: PPUSH
24897: LD_VAR 0 1
24901: PPUSH
24902: LD_VAR 0 1
24906: PPUSH
24907: CALL_OW 255
24911: PUSH
24912: LD_VAR 0 1
24916: PUSH
24917: LD_VAR 0 2
24921: PUSH
24922: LD_VAR 0 3
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 1
24937: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24938: CALL 24947 0 0
// end ;
24942: LD_VAR 0 4
24946: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24947: LD_INT 0
24949: PPUSH
24950: PPUSH
24951: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24952: LD_STRING resetWarehouseGatheringPoints();
24954: PPUSH
24955: CALL_OW 559
// if warehouseGatheringPoints then
24959: LD_EXP 86
24963: IFFALSE 25089
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_EXP 86
24974: PPUSH
24975: CALL 71154 0 1
24979: ST_TO_ADDR
// for i := 1 to list do
24980: LD_ADDR_VAR 0 2
24984: PUSH
24985: DOUBLE
24986: LD_INT 1
24988: DEC
24989: ST_TO_ADDR
24990: LD_VAR 0 3
24994: PUSH
24995: FOR_TO
24996: IFFALSE 25087
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24998: LD_STRING setWarehouseGatheringPointXY(
25000: PUSH
25001: LD_VAR 0 3
25005: PUSH
25006: LD_VAR 0 2
25010: ARRAY
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: STR
25016: PUSH
25017: LD_STRING ,
25019: STR
25020: PUSH
25021: LD_VAR 0 3
25025: PUSH
25026: LD_VAR 0 2
25030: ARRAY
25031: PUSH
25032: LD_INT 2
25034: ARRAY
25035: STR
25036: PUSH
25037: LD_STRING ,
25039: STR
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: LD_VAR 0 2
25050: ARRAY
25051: PUSH
25052: LD_INT 3
25054: ARRAY
25055: STR
25056: PUSH
25057: LD_STRING ,
25059: STR
25060: PUSH
25061: LD_VAR 0 3
25065: PUSH
25066: LD_VAR 0 2
25070: ARRAY
25071: PUSH
25072: LD_INT 4
25074: ARRAY
25075: STR
25076: PUSH
25077: LD_STRING )
25079: STR
25080: PPUSH
25081: CALL_OW 559
25085: GO 24995
25087: POP
25088: POP
// end ; end ;
25089: LD_VAR 0 1
25093: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25094: LD_EXP 86
25098: IFFALSE 25783
25100: GO 25102
25102: DISABLE
25103: LD_INT 0
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
// begin enable ;
25114: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_EXP 86
25124: PPUSH
25125: CALL 71154 0 1
25129: ST_TO_ADDR
// if not list then
25130: LD_VAR 0 3
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25783
// for i := 1 to list do
25139: LD_ADDR_VAR 0 1
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 3
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25781
// begin depot := list [ i ] [ 2 ] ;
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: LD_VAR 0 3
25166: PUSH
25167: LD_VAR 0 1
25171: ARRAY
25172: PUSH
25173: LD_INT 2
25175: ARRAY
25176: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25177: LD_ADDR_VAR 0 5
25181: PUSH
25182: LD_VAR 0 3
25186: PUSH
25187: LD_VAR 0 1
25191: ARRAY
25192: PUSH
25193: LD_INT 1
25195: ARRAY
25196: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25197: LD_VAR 0 8
25201: PPUSH
25202: CALL_OW 301
25206: PUSH
25207: LD_VAR 0 5
25211: PUSH
25212: LD_VAR 0 8
25216: PPUSH
25217: CALL_OW 255
25221: NONEQUAL
25222: OR
25223: IFFALSE 25252
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25225: LD_ADDR_EXP 86
25229: PUSH
25230: LD_EXP 86
25234: PPUSH
25235: LD_VAR 0 8
25239: PPUSH
25240: LD_INT 0
25242: PPUSH
25243: CALL_OW 1
25247: ST_TO_ADDR
// exit ;
25248: POP
25249: POP
25250: GO 25783
// end ; x := list [ i ] [ 3 ] ;
25252: LD_ADDR_VAR 0 6
25256: PUSH
25257: LD_VAR 0 3
25261: PUSH
25262: LD_VAR 0 1
25266: ARRAY
25267: PUSH
25268: LD_INT 3
25270: ARRAY
25271: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25272: LD_ADDR_VAR 0 7
25276: PUSH
25277: LD_VAR 0 3
25281: PUSH
25282: LD_VAR 0 1
25286: ARRAY
25287: PUSH
25288: LD_INT 4
25290: ARRAY
25291: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25292: LD_ADDR_VAR 0 9
25296: PUSH
25297: LD_VAR 0 6
25301: PPUSH
25302: LD_VAR 0 7
25306: PPUSH
25307: LD_INT 16
25309: PPUSH
25310: CALL 69742 0 3
25314: ST_TO_ADDR
// if not cratesNearbyPoint then
25315: LD_VAR 0 9
25319: NOT
25320: IFFALSE 25326
// exit ;
25322: POP
25323: POP
25324: GO 25783
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25326: LD_ADDR_VAR 0 4
25330: PUSH
25331: LD_INT 22
25333: PUSH
25334: LD_VAR 0 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: LD_INT 60
25348: PUSH
25349: EMPTY
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 91
25358: PUSH
25359: LD_VAR 0 8
25363: PUSH
25364: LD_INT 6
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 25
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 25
25387: PUSH
25388: LD_INT 16
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: PPUSH
25406: CALL_OW 69
25410: PUSH
25411: LD_VAR 0 8
25415: PPUSH
25416: CALL_OW 313
25420: PPUSH
25421: LD_INT 3
25423: PUSH
25424: LD_INT 60
25426: PUSH
25427: EMPTY
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 25
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 25
25449: PUSH
25450: LD_INT 16
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PPUSH
25466: CALL_OW 72
25470: UNION
25471: ST_TO_ADDR
// if tmp then
25472: LD_VAR 0 4
25476: IFFALSE 25556
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25478: LD_ADDR_VAR 0 4
25482: PUSH
25483: LD_VAR 0 4
25487: PPUSH
25488: LD_INT 3
25490: PPUSH
25491: CALL 67711 0 2
25495: ST_TO_ADDR
// for j in tmp do
25496: LD_ADDR_VAR 0 2
25500: PUSH
25501: LD_VAR 0 4
25505: PUSH
25506: FOR_IN
25507: IFFALSE 25550
// begin if IsInUnit ( j ) then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 310
25518: IFFALSE 25529
// ComExit ( j ) ;
25520: LD_VAR 0 2
25524: PPUSH
25525: CALL 67794 0 1
// AddComCollect ( j , x , y ) ;
25529: LD_VAR 0 2
25533: PPUSH
25534: LD_VAR 0 6
25538: PPUSH
25539: LD_VAR 0 7
25543: PPUSH
25544: CALL_OW 177
// end ;
25548: GO 25506
25550: POP
25551: POP
// exit ;
25552: POP
25553: POP
25554: GO 25783
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25556: LD_ADDR_VAR 0 4
25560: PUSH
25561: LD_INT 22
25563: PUSH
25564: LD_VAR 0 5
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 91
25575: PUSH
25576: LD_VAR 0 8
25580: PUSH
25581: LD_INT 8
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 34
25594: PUSH
25595: LD_INT 12
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 34
25604: PUSH
25605: LD_INT 51
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 34
25614: PUSH
25615: LD_INT 32
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 34
25624: PUSH
25625: LD_INT 89
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: PPUSH
25644: CALL_OW 69
25648: ST_TO_ADDR
// if tmp then
25649: LD_VAR 0 4
25653: IFFALSE 25779
// begin for j in tmp do
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_VAR 0 4
25664: PUSH
25665: FOR_IN
25666: IFFALSE 25777
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 262
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 261
25691: PUSH
25692: LD_INT 20
25694: GREATER
25695: OR
25696: PUSH
25697: LD_VAR 0 2
25701: PPUSH
25702: CALL_OW 314
25706: NOT
25707: AND
25708: PUSH
25709: LD_VAR 0 2
25713: PPUSH
25714: CALL_OW 263
25718: PUSH
25719: LD_INT 1
25721: NONEQUAL
25722: PUSH
25723: LD_VAR 0 2
25727: PPUSH
25728: CALL_OW 311
25732: OR
25733: AND
25734: IFFALSE 25775
// begin ComCollect ( j , x , y ) ;
25736: LD_VAR 0 2
25740: PPUSH
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_VAR 0 7
25750: PPUSH
25751: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25755: LD_VAR 0 2
25759: PPUSH
25760: LD_VAR 0 8
25764: PPUSH
25765: CALL_OW 172
// exit ;
25769: POP
25770: POP
25771: POP
25772: POP
25773: GO 25783
// end ;
25775: GO 25665
25777: POP
25778: POP
// end ; end ;
25779: GO 25154
25781: POP
25782: POP
// end ; end_of_file end_of_file
25783: PPOPN 9
25785: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
25790: PPUSH
25791: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 264
25801: PUSH
25802: LD_INT 91
25804: EQUAL
25805: IFFALSE 25877
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25807: LD_INT 68
25809: PPUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 255
25819: PPUSH
25820: CALL_OW 321
25824: PUSH
25825: LD_INT 2
25827: EQUAL
25828: IFFALSE 25840
// eff := 70 else
25830: LD_ADDR_VAR 0 4
25834: PUSH
25835: LD_INT 70
25837: ST_TO_ADDR
25838: GO 25848
// eff := 30 ;
25840: LD_ADDR_VAR 0 4
25844: PUSH
25845: LD_INT 30
25847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL_OW 250
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 251
25867: PPUSH
25868: LD_VAR 0 4
25872: PPUSH
25873: CALL_OW 495
// end ; end ;
25877: LD_VAR 0 2
25881: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25882: LD_INT 0
25884: PPUSH
// end ;
25885: LD_VAR 0 4
25889: RET
// export function SOS_Command ( cmd ) ; begin
25890: LD_INT 0
25892: PPUSH
// end ;
25893: LD_VAR 0 2
25897: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25898: LD_INT 0
25900: PPUSH
// end ;
25901: LD_VAR 0 6
25905: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25906: LD_INT 0
25908: PPUSH
25909: PPUSH
// if not vehicle or not factory then
25910: LD_VAR 0 1
25914: NOT
25915: PUSH
25916: LD_VAR 0 2
25920: NOT
25921: OR
25922: IFFALSE 25926
// exit ;
25924: GO 26157
// if factoryWaypoints >= factory then
25926: LD_EXP 85
25930: PUSH
25931: LD_VAR 0 2
25935: GREATEREQUAL
25936: IFFALSE 26157
// if factoryWaypoints [ factory ] then
25938: LD_EXP 85
25942: PUSH
25943: LD_VAR 0 2
25947: ARRAY
25948: IFFALSE 26157
// begin if GetControl ( vehicle ) = control_manual then
25950: LD_VAR 0 1
25954: PPUSH
25955: CALL_OW 263
25959: PUSH
25960: LD_INT 1
25962: EQUAL
25963: IFFALSE 26044
// begin driver := IsDrivenBy ( vehicle ) ;
25965: LD_ADDR_VAR 0 4
25969: PUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 311
25979: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25980: LD_VAR 0 4
25984: PPUSH
25985: LD_EXP 85
25989: PUSH
25990: LD_VAR 0 2
25994: ARRAY
25995: PUSH
25996: LD_INT 3
25998: ARRAY
25999: PPUSH
26000: LD_EXP 85
26004: PUSH
26005: LD_VAR 0 2
26009: ARRAY
26010: PUSH
26011: LD_INT 4
26013: ARRAY
26014: PPUSH
26015: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26019: LD_VAR 0 4
26023: PPUSH
26024: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26028: LD_VAR 0 4
26032: PPUSH
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 180
// end else
26042: GO 26157
// if GetControl ( vehicle ) = control_remote then
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 263
26053: PUSH
26054: LD_INT 2
26056: EQUAL
26057: IFFALSE 26118
// begin wait ( 0 0$2 ) ;
26059: LD_INT 70
26061: PPUSH
26062: CALL_OW 67
// if Connect ( vehicle ) then
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL 38015 0 1
26075: IFFALSE 26116
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26077: LD_VAR 0 1
26081: PPUSH
26082: LD_EXP 85
26086: PUSH
26087: LD_VAR 0 2
26091: ARRAY
26092: PUSH
26093: LD_INT 3
26095: ARRAY
26096: PPUSH
26097: LD_EXP 85
26101: PUSH
26102: LD_VAR 0 2
26106: ARRAY
26107: PUSH
26108: LD_INT 4
26110: ARRAY
26111: PPUSH
26112: CALL_OW 171
// end else
26116: GO 26157
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_EXP 85
26127: PUSH
26128: LD_VAR 0 2
26132: ARRAY
26133: PUSH
26134: LD_INT 3
26136: ARRAY
26137: PPUSH
26138: LD_EXP 85
26142: PUSH
26143: LD_VAR 0 2
26147: ARRAY
26148: PUSH
26149: LD_INT 4
26151: ARRAY
26152: PPUSH
26153: CALL_OW 171
// end ; end ;
26157: LD_VAR 0 3
26161: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26162: LD_INT 0
26164: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26165: LD_VAR 0 1
26169: PUSH
26170: LD_INT 250
26172: EQUAL
26173: PUSH
26174: LD_VAR 0 2
26178: PPUSH
26179: CALL_OW 264
26183: PUSH
26184: LD_INT 81
26186: EQUAL
26187: AND
26188: IFFALSE 26209
// MinerPlaceMine ( unit , x , y ) ;
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_VAR 0 4
26199: PPUSH
26200: LD_VAR 0 5
26204: PPUSH
26205: CALL 28594 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26209: LD_VAR 0 1
26213: PUSH
26214: LD_INT 251
26216: EQUAL
26217: PUSH
26218: LD_VAR 0 2
26222: PPUSH
26223: CALL_OW 264
26227: PUSH
26228: LD_INT 81
26230: EQUAL
26231: AND
26232: IFFALSE 26253
// MinerDetonateMine ( unit , x , y ) ;
26234: LD_VAR 0 2
26238: PPUSH
26239: LD_VAR 0 4
26243: PPUSH
26244: LD_VAR 0 5
26248: PPUSH
26249: CALL 28869 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26253: LD_VAR 0 1
26257: PUSH
26258: LD_INT 252
26260: EQUAL
26261: PUSH
26262: LD_VAR 0 2
26266: PPUSH
26267: CALL_OW 264
26271: PUSH
26272: LD_INT 81
26274: EQUAL
26275: AND
26276: IFFALSE 26297
// MinerCreateMinefield ( unit , x , y ) ;
26278: LD_VAR 0 2
26282: PPUSH
26283: LD_VAR 0 4
26287: PPUSH
26288: LD_VAR 0 5
26292: PPUSH
26293: CALL 29286 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26297: LD_VAR 0 1
26301: PUSH
26302: LD_INT 253
26304: EQUAL
26305: PUSH
26306: LD_VAR 0 2
26310: PPUSH
26311: CALL_OW 257
26315: PUSH
26316: LD_INT 5
26318: EQUAL
26319: AND
26320: IFFALSE 26341
// ComBinocular ( unit , x , y ) ;
26322: LD_VAR 0 2
26326: PPUSH
26327: LD_VAR 0 4
26331: PPUSH
26332: LD_VAR 0 5
26336: PPUSH
26337: CALL 29655 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26341: LD_VAR 0 1
26345: PUSH
26346: LD_INT 254
26348: EQUAL
26349: PUSH
26350: LD_VAR 0 2
26354: PPUSH
26355: CALL_OW 264
26359: PUSH
26360: LD_INT 99
26362: EQUAL
26363: AND
26364: PUSH
26365: LD_VAR 0 3
26369: PPUSH
26370: CALL_OW 263
26374: PUSH
26375: LD_INT 3
26377: EQUAL
26378: AND
26379: IFFALSE 26395
// HackDestroyVehicle ( unit , selectedUnit ) ;
26381: LD_VAR 0 2
26385: PPUSH
26386: LD_VAR 0 3
26390: PPUSH
26391: CALL 27958 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26395: LD_VAR 0 1
26399: PUSH
26400: LD_INT 255
26402: EQUAL
26403: PUSH
26404: LD_VAR 0 2
26408: PPUSH
26409: CALL_OW 264
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: LD_INT 53
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: IN
26424: AND
26425: PUSH
26426: LD_VAR 0 4
26430: PPUSH
26431: LD_VAR 0 5
26435: PPUSH
26436: CALL_OW 488
26440: AND
26441: IFFALSE 26465
// CutTreeXYR ( unit , x , y , 12 ) ;
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 4
26452: PPUSH
26453: LD_VAR 0 5
26457: PPUSH
26458: LD_INT 12
26460: PPUSH
26461: CALL 26528 0 4
// if cmd = 256 then
26465: LD_VAR 0 1
26469: PUSH
26470: LD_INT 256
26472: EQUAL
26473: IFFALSE 26494
// SetFactoryWaypoint ( unit , x , y ) ;
26475: LD_VAR 0 2
26479: PPUSH
26480: LD_VAR 0 4
26484: PPUSH
26485: LD_VAR 0 5
26489: PPUSH
26490: CALL 24475 0 3
// if cmd = 257 then
26494: LD_VAR 0 1
26498: PUSH
26499: LD_INT 257
26501: EQUAL
26502: IFFALSE 26523
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 4
26513: PPUSH
26514: LD_VAR 0 5
26518: PPUSH
26519: CALL 24837 0 3
// end ;
26523: LD_VAR 0 6
26527: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26528: LD_INT 0
26530: PPUSH
26531: PPUSH
26532: PPUSH
26533: PPUSH
26534: PPUSH
26535: PPUSH
26536: PPUSH
26537: PPUSH
26538: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26539: LD_VAR 0 1
26543: NOT
26544: PUSH
26545: LD_VAR 0 2
26549: PPUSH
26550: LD_VAR 0 3
26554: PPUSH
26555: CALL_OW 488
26559: NOT
26560: OR
26561: PUSH
26562: LD_VAR 0 4
26566: NOT
26567: OR
26568: IFFALSE 26572
// exit ;
26570: GO 26912
// list := [ ] ;
26572: LD_ADDR_VAR 0 13
26576: PUSH
26577: EMPTY
26578: ST_TO_ADDR
// if x - r < 0 then
26579: LD_VAR 0 2
26583: PUSH
26584: LD_VAR 0 4
26588: MINUS
26589: PUSH
26590: LD_INT 0
26592: LESS
26593: IFFALSE 26605
// min_x := 0 else
26595: LD_ADDR_VAR 0 7
26599: PUSH
26600: LD_INT 0
26602: ST_TO_ADDR
26603: GO 26621
// min_x := x - r ;
26605: LD_ADDR_VAR 0 7
26609: PUSH
26610: LD_VAR 0 2
26614: PUSH
26615: LD_VAR 0 4
26619: MINUS
26620: ST_TO_ADDR
// if y - r < 0 then
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 4
26630: MINUS
26631: PUSH
26632: LD_INT 0
26634: LESS
26635: IFFALSE 26647
// min_y := 0 else
26637: LD_ADDR_VAR 0 8
26641: PUSH
26642: LD_INT 0
26644: ST_TO_ADDR
26645: GO 26663
// min_y := y - r ;
26647: LD_ADDR_VAR 0 8
26651: PUSH
26652: LD_VAR 0 3
26656: PUSH
26657: LD_VAR 0 4
26661: MINUS
26662: ST_TO_ADDR
// max_x := x + r ;
26663: LD_ADDR_VAR 0 9
26667: PUSH
26668: LD_VAR 0 2
26672: PUSH
26673: LD_VAR 0 4
26677: PLUS
26678: ST_TO_ADDR
// max_y := y + r ;
26679: LD_ADDR_VAR 0 10
26683: PUSH
26684: LD_VAR 0 3
26688: PUSH
26689: LD_VAR 0 4
26693: PLUS
26694: ST_TO_ADDR
// for _x = min_x to max_x do
26695: LD_ADDR_VAR 0 11
26699: PUSH
26700: DOUBLE
26701: LD_VAR 0 7
26705: DEC
26706: ST_TO_ADDR
26707: LD_VAR 0 9
26711: PUSH
26712: FOR_TO
26713: IFFALSE 26830
// for _y = min_y to max_y do
26715: LD_ADDR_VAR 0 12
26719: PUSH
26720: DOUBLE
26721: LD_VAR 0 8
26725: DEC
26726: ST_TO_ADDR
26727: LD_VAR 0 10
26731: PUSH
26732: FOR_TO
26733: IFFALSE 26826
// begin if not ValidHex ( _x , _y ) then
26735: LD_VAR 0 11
26739: PPUSH
26740: LD_VAR 0 12
26744: PPUSH
26745: CALL_OW 488
26749: NOT
26750: IFFALSE 26754
// continue ;
26752: GO 26732
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26754: LD_VAR 0 11
26758: PPUSH
26759: LD_VAR 0 12
26763: PPUSH
26764: CALL_OW 351
26768: PUSH
26769: LD_VAR 0 11
26773: PPUSH
26774: LD_VAR 0 12
26778: PPUSH
26779: CALL_OW 554
26783: AND
26784: IFFALSE 26824
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26786: LD_ADDR_VAR 0 13
26790: PUSH
26791: LD_VAR 0 13
26795: PPUSH
26796: LD_VAR 0 13
26800: PUSH
26801: LD_INT 1
26803: PLUS
26804: PPUSH
26805: LD_VAR 0 11
26809: PUSH
26810: LD_VAR 0 12
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL_OW 2
26823: ST_TO_ADDR
// end ;
26824: GO 26732
26826: POP
26827: POP
26828: GO 26712
26830: POP
26831: POP
// if not list then
26832: LD_VAR 0 13
26836: NOT
26837: IFFALSE 26841
// exit ;
26839: GO 26912
// for i in list do
26841: LD_ADDR_VAR 0 6
26845: PUSH
26846: LD_VAR 0 13
26850: PUSH
26851: FOR_IN
26852: IFFALSE 26910
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26854: LD_VAR 0 1
26858: PPUSH
26859: LD_STRING M
26861: PUSH
26862: LD_VAR 0 6
26866: PUSH
26867: LD_INT 1
26869: ARRAY
26870: PUSH
26871: LD_VAR 0 6
26875: PUSH
26876: LD_INT 2
26878: ARRAY
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: PPUSH
26904: CALL_OW 447
26908: GO 26851
26910: POP
26911: POP
// end ;
26912: LD_VAR 0 5
26916: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26917: LD_EXP 88
26921: NOT
26922: IFFALSE 26972
26924: GO 26926
26926: DISABLE
// begin initHack := true ;
26927: LD_ADDR_EXP 88
26931: PUSH
26932: LD_INT 1
26934: ST_TO_ADDR
// hackTanks := [ ] ;
26935: LD_ADDR_EXP 89
26939: PUSH
26940: EMPTY
26941: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26942: LD_ADDR_EXP 90
26946: PUSH
26947: EMPTY
26948: ST_TO_ADDR
// hackLimit := 3 ;
26949: LD_ADDR_EXP 91
26953: PUSH
26954: LD_INT 3
26956: ST_TO_ADDR
// hackDist := 12 ;
26957: LD_ADDR_EXP 92
26961: PUSH
26962: LD_INT 12
26964: ST_TO_ADDR
// hackCounter := [ ] ;
26965: LD_ADDR_EXP 93
26969: PUSH
26970: EMPTY
26971: ST_TO_ADDR
// end ;
26972: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26973: LD_EXP 88
26977: PUSH
26978: LD_INT 34
26980: PUSH
26981: LD_INT 99
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 69
26992: AND
26993: IFFALSE 27246
26995: GO 26997
26997: DISABLE
26998: LD_INT 0
27000: PPUSH
27001: PPUSH
// begin enable ;
27002: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27003: LD_ADDR_VAR 0 1
27007: PUSH
27008: LD_INT 34
27010: PUSH
27011: LD_INT 99
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PPUSH
27018: CALL_OW 69
27022: PUSH
27023: FOR_IN
27024: IFFALSE 27244
// begin if not i in hackTanks then
27026: LD_VAR 0 1
27030: PUSH
27031: LD_EXP 89
27035: IN
27036: NOT
27037: IFFALSE 27120
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27039: LD_ADDR_EXP 89
27043: PUSH
27044: LD_EXP 89
27048: PPUSH
27049: LD_EXP 89
27053: PUSH
27054: LD_INT 1
27056: PLUS
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 1
27067: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27068: LD_ADDR_EXP 90
27072: PUSH
27073: LD_EXP 90
27077: PPUSH
27078: LD_EXP 90
27082: PUSH
27083: LD_INT 1
27085: PLUS
27086: PPUSH
27087: EMPTY
27088: PPUSH
27089: CALL_OW 1
27093: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27094: LD_ADDR_EXP 93
27098: PUSH
27099: LD_EXP 93
27103: PPUSH
27104: LD_EXP 93
27108: PUSH
27109: LD_INT 1
27111: PLUS
27112: PPUSH
27113: EMPTY
27114: PPUSH
27115: CALL_OW 1
27119: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27120: LD_VAR 0 1
27124: PPUSH
27125: CALL_OW 302
27129: NOT
27130: IFFALSE 27143
// begin HackUnlinkAll ( i ) ;
27132: LD_VAR 0 1
27136: PPUSH
27137: CALL 27249 0 1
// continue ;
27141: GO 27023
// end ; HackCheckCapturedStatus ( i ) ;
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL 27692 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27152: LD_ADDR_VAR 0 2
27156: PUSH
27157: LD_INT 81
27159: PUSH
27160: LD_VAR 0 1
27164: PPUSH
27165: CALL_OW 255
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 33
27176: PUSH
27177: LD_INT 3
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 91
27186: PUSH
27187: LD_VAR 0 1
27191: PUSH
27192: LD_EXP 92
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 50
27204: PUSH
27205: EMPTY
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: PPUSH
27214: CALL_OW 69
27218: ST_TO_ADDR
// if not tmp then
27219: LD_VAR 0 2
27223: NOT
27224: IFFALSE 27228
// continue ;
27226: GO 27023
// HackLink ( i , tmp ) ;
27228: LD_VAR 0 1
27232: PPUSH
27233: LD_VAR 0 2
27237: PPUSH
27238: CALL 27385 0 2
// end ;
27242: GO 27023
27244: POP
27245: POP
// end ;
27246: PPOPN 2
27248: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27249: LD_INT 0
27251: PPUSH
27252: PPUSH
27253: PPUSH
// if not hack in hackTanks then
27254: LD_VAR 0 1
27258: PUSH
27259: LD_EXP 89
27263: IN
27264: NOT
27265: IFFALSE 27269
// exit ;
27267: GO 27380
// index := GetElementIndex ( hackTanks , hack ) ;
27269: LD_ADDR_VAR 0 4
27273: PUSH
27274: LD_EXP 89
27278: PPUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL 34822 0 2
27288: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27289: LD_EXP 90
27293: PUSH
27294: LD_VAR 0 4
27298: ARRAY
27299: IFFALSE 27380
// begin for i in hackTanksCaptured [ index ] do
27301: LD_ADDR_VAR 0 3
27305: PUSH
27306: LD_EXP 90
27310: PUSH
27311: LD_VAR 0 4
27315: ARRAY
27316: PUSH
27317: FOR_IN
27318: IFFALSE 27344
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27320: LD_VAR 0 3
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: LD_VAR 0 3
27333: PUSH
27334: LD_INT 2
27336: ARRAY
27337: PPUSH
27338: CALL_OW 235
27342: GO 27317
27344: POP
27345: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27346: LD_ADDR_EXP 90
27350: PUSH
27351: LD_EXP 90
27355: PPUSH
27356: LD_VAR 0 4
27360: PPUSH
27361: EMPTY
27362: PPUSH
27363: CALL_OW 1
27367: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_INT 0
27375: PPUSH
27376: CALL_OW 505
// end ; end ;
27380: LD_VAR 0 2
27384: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27385: LD_INT 0
27387: PPUSH
27388: PPUSH
27389: PPUSH
// if not hack in hackTanks or not vehicles then
27390: LD_VAR 0 1
27394: PUSH
27395: LD_EXP 89
27399: IN
27400: NOT
27401: PUSH
27402: LD_VAR 0 2
27406: NOT
27407: OR
27408: IFFALSE 27412
// exit ;
27410: GO 27687
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27412: LD_ADDR_VAR 0 2
27416: PUSH
27417: LD_VAR 0 1
27421: PPUSH
27422: LD_VAR 0 2
27426: PPUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_INT 1
27432: PPUSH
27433: CALL 35472 0 4
27437: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: LD_EXP 89
27447: PPUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL 34822 0 2
27457: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27458: LD_EXP 90
27462: PUSH
27463: LD_VAR 0 5
27467: ARRAY
27468: PUSH
27469: LD_EXP 91
27473: LESS
27474: IFFALSE 27663
// begin for i := 1 to vehicles do
27476: LD_ADDR_VAR 0 4
27480: PUSH
27481: DOUBLE
27482: LD_INT 1
27484: DEC
27485: ST_TO_ADDR
27486: LD_VAR 0 2
27490: PUSH
27491: FOR_TO
27492: IFFALSE 27661
// begin if hackTanksCaptured [ index ] = hackLimit then
27494: LD_EXP 90
27498: PUSH
27499: LD_VAR 0 5
27503: ARRAY
27504: PUSH
27505: LD_EXP 91
27509: EQUAL
27510: IFFALSE 27514
// break ;
27512: GO 27661
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27514: LD_ADDR_EXP 93
27518: PUSH
27519: LD_EXP 93
27523: PPUSH
27524: LD_VAR 0 5
27528: PPUSH
27529: LD_EXP 93
27533: PUSH
27534: LD_VAR 0 5
27538: ARRAY
27539: PUSH
27540: LD_INT 1
27542: PLUS
27543: PPUSH
27544: CALL_OW 1
27548: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27549: LD_ADDR_EXP 90
27553: PUSH
27554: LD_EXP 90
27558: PPUSH
27559: LD_VAR 0 5
27563: PUSH
27564: LD_EXP 90
27568: PUSH
27569: LD_VAR 0 5
27573: ARRAY
27574: PUSH
27575: LD_INT 1
27577: PLUS
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: LD_VAR 0 2
27587: PUSH
27588: LD_VAR 0 4
27592: ARRAY
27593: PUSH
27594: LD_VAR 0 2
27598: PUSH
27599: LD_VAR 0 4
27603: ARRAY
27604: PPUSH
27605: CALL_OW 255
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PPUSH
27614: CALL 35037 0 3
27618: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 4
27628: ARRAY
27629: PPUSH
27630: LD_VAR 0 1
27634: PPUSH
27635: CALL_OW 255
27639: PPUSH
27640: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27644: LD_VAR 0 2
27648: PUSH
27649: LD_VAR 0 4
27653: ARRAY
27654: PPUSH
27655: CALL_OW 141
// end ;
27659: GO 27491
27661: POP
27662: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_EXP 90
27672: PUSH
27673: LD_VAR 0 5
27677: ARRAY
27678: PUSH
27679: LD_INT 0
27681: PLUS
27682: PPUSH
27683: CALL_OW 505
// end ;
27687: LD_VAR 0 3
27691: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27692: LD_INT 0
27694: PPUSH
27695: PPUSH
27696: PPUSH
27697: PPUSH
// if not hack in hackTanks then
27698: LD_VAR 0 1
27702: PUSH
27703: LD_EXP 89
27707: IN
27708: NOT
27709: IFFALSE 27713
// exit ;
27711: GO 27953
// index := GetElementIndex ( hackTanks , hack ) ;
27713: LD_ADDR_VAR 0 4
27717: PUSH
27718: LD_EXP 89
27722: PPUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL 34822 0 2
27732: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27733: LD_ADDR_VAR 0 3
27737: PUSH
27738: DOUBLE
27739: LD_EXP 90
27743: PUSH
27744: LD_VAR 0 4
27748: ARRAY
27749: INC
27750: ST_TO_ADDR
27751: LD_INT 1
27753: PUSH
27754: FOR_DOWNTO
27755: IFFALSE 27927
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27757: LD_ADDR_VAR 0 5
27761: PUSH
27762: LD_EXP 90
27766: PUSH
27767: LD_VAR 0 4
27771: ARRAY
27772: PUSH
27773: LD_VAR 0 3
27777: ARRAY
27778: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27779: LD_VAR 0 5
27783: PUSH
27784: LD_INT 1
27786: ARRAY
27787: PPUSH
27788: CALL_OW 302
27792: NOT
27793: PUSH
27794: LD_VAR 0 5
27798: PUSH
27799: LD_INT 1
27801: ARRAY
27802: PPUSH
27803: CALL_OW 255
27807: PUSH
27808: LD_VAR 0 1
27812: PPUSH
27813: CALL_OW 255
27817: NONEQUAL
27818: OR
27819: IFFALSE 27925
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27821: LD_VAR 0 5
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: CALL_OW 305
27834: PUSH
27835: LD_VAR 0 5
27839: PUSH
27840: LD_INT 1
27842: ARRAY
27843: PPUSH
27844: CALL_OW 255
27848: PUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 255
27858: EQUAL
27859: AND
27860: IFFALSE 27884
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27862: LD_VAR 0 5
27866: PUSH
27867: LD_INT 1
27869: ARRAY
27870: PPUSH
27871: LD_VAR 0 5
27875: PUSH
27876: LD_INT 2
27878: ARRAY
27879: PPUSH
27880: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27884: LD_ADDR_EXP 90
27888: PUSH
27889: LD_EXP 90
27893: PPUSH
27894: LD_VAR 0 4
27898: PPUSH
27899: LD_EXP 90
27903: PUSH
27904: LD_VAR 0 4
27908: ARRAY
27909: PPUSH
27910: LD_VAR 0 3
27914: PPUSH
27915: CALL_OW 3
27919: PPUSH
27920: CALL_OW 1
27924: ST_TO_ADDR
// end ; end ;
27925: GO 27754
27927: POP
27928: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27929: LD_VAR 0 1
27933: PPUSH
27934: LD_EXP 90
27938: PUSH
27939: LD_VAR 0 4
27943: ARRAY
27944: PUSH
27945: LD_INT 0
27947: PLUS
27948: PPUSH
27949: CALL_OW 505
// end ;
27953: LD_VAR 0 2
27957: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27958: LD_INT 0
27960: PPUSH
27961: PPUSH
27962: PPUSH
27963: PPUSH
// if not hack in hackTanks then
27964: LD_VAR 0 1
27968: PUSH
27969: LD_EXP 89
27973: IN
27974: NOT
27975: IFFALSE 27979
// exit ;
27977: GO 28064
// index := GetElementIndex ( hackTanks , hack ) ;
27979: LD_ADDR_VAR 0 5
27983: PUSH
27984: LD_EXP 89
27988: PPUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL 34822 0 2
27998: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27999: LD_ADDR_VAR 0 4
28003: PUSH
28004: DOUBLE
28005: LD_INT 1
28007: DEC
28008: ST_TO_ADDR
28009: LD_EXP 90
28013: PUSH
28014: LD_VAR 0 5
28018: ARRAY
28019: PUSH
28020: FOR_TO
28021: IFFALSE 28062
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28023: LD_EXP 90
28027: PUSH
28028: LD_VAR 0 5
28032: ARRAY
28033: PUSH
28034: LD_VAR 0 4
28038: ARRAY
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: PUSH
28044: LD_VAR 0 2
28048: EQUAL
28049: IFFALSE 28060
// KillUnit ( vehicle ) ;
28051: LD_VAR 0 2
28055: PPUSH
28056: CALL_OW 66
28060: GO 28020
28062: POP
28063: POP
// end ;
28064: LD_VAR 0 3
28068: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28069: LD_EXP 94
28073: NOT
28074: IFFALSE 28109
28076: GO 28078
28078: DISABLE
// begin initMiner := true ;
28079: LD_ADDR_EXP 94
28083: PUSH
28084: LD_INT 1
28086: ST_TO_ADDR
// minersList := [ ] ;
28087: LD_ADDR_EXP 95
28091: PUSH
28092: EMPTY
28093: ST_TO_ADDR
// minerMinesList := [ ] ;
28094: LD_ADDR_EXP 96
28098: PUSH
28099: EMPTY
28100: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28101: LD_ADDR_EXP 97
28105: PUSH
28106: LD_INT 5
28108: ST_TO_ADDR
// end ;
28109: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28110: LD_EXP 94
28114: PUSH
28115: LD_INT 34
28117: PUSH
28118: LD_INT 81
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PPUSH
28125: CALL_OW 69
28129: AND
28130: IFFALSE 28591
28132: GO 28134
28134: DISABLE
28135: LD_INT 0
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
// begin enable ;
28141: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28142: LD_ADDR_VAR 0 1
28146: PUSH
28147: LD_INT 34
28149: PUSH
28150: LD_INT 81
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 69
28161: PUSH
28162: FOR_IN
28163: IFFALSE 28235
// begin if not i in minersList then
28165: LD_VAR 0 1
28169: PUSH
28170: LD_EXP 95
28174: IN
28175: NOT
28176: IFFALSE 28233
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28178: LD_ADDR_EXP 95
28182: PUSH
28183: LD_EXP 95
28187: PPUSH
28188: LD_EXP 95
28192: PUSH
28193: LD_INT 1
28195: PLUS
28196: PPUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 1
28206: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28207: LD_ADDR_EXP 96
28211: PUSH
28212: LD_EXP 96
28216: PPUSH
28217: LD_EXP 96
28221: PUSH
28222: LD_INT 1
28224: PLUS
28225: PPUSH
28226: EMPTY
28227: PPUSH
28228: CALL_OW 1
28232: ST_TO_ADDR
// end end ;
28233: GO 28162
28235: POP
28236: POP
// for i := minerMinesList downto 1 do
28237: LD_ADDR_VAR 0 1
28241: PUSH
28242: DOUBLE
28243: LD_EXP 96
28247: INC
28248: ST_TO_ADDR
28249: LD_INT 1
28251: PUSH
28252: FOR_DOWNTO
28253: IFFALSE 28589
// begin if IsLive ( minersList [ i ] ) then
28255: LD_EXP 95
28259: PUSH
28260: LD_VAR 0 1
28264: ARRAY
28265: PPUSH
28266: CALL_OW 300
28270: IFFALSE 28298
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28272: LD_EXP 95
28276: PUSH
28277: LD_VAR 0 1
28281: ARRAY
28282: PPUSH
28283: LD_EXP 96
28287: PUSH
28288: LD_VAR 0 1
28292: ARRAY
28293: PPUSH
28294: CALL_OW 505
// if not minerMinesList [ i ] then
28298: LD_EXP 96
28302: PUSH
28303: LD_VAR 0 1
28307: ARRAY
28308: NOT
28309: IFFALSE 28313
// continue ;
28311: GO 28252
// for j := minerMinesList [ i ] downto 1 do
28313: LD_ADDR_VAR 0 2
28317: PUSH
28318: DOUBLE
28319: LD_EXP 96
28323: PUSH
28324: LD_VAR 0 1
28328: ARRAY
28329: INC
28330: ST_TO_ADDR
28331: LD_INT 1
28333: PUSH
28334: FOR_DOWNTO
28335: IFFALSE 28585
// begin side := GetSide ( minersList [ i ] ) ;
28337: LD_ADDR_VAR 0 3
28341: PUSH
28342: LD_EXP 95
28346: PUSH
28347: LD_VAR 0 1
28351: ARRAY
28352: PPUSH
28353: CALL_OW 255
28357: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28358: LD_ADDR_VAR 0 4
28362: PUSH
28363: LD_EXP 96
28367: PUSH
28368: LD_VAR 0 1
28372: ARRAY
28373: PUSH
28374: LD_VAR 0 2
28378: ARRAY
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: PPUSH
28384: LD_EXP 96
28388: PUSH
28389: LD_VAR 0 1
28393: ARRAY
28394: PUSH
28395: LD_VAR 0 2
28399: ARRAY
28400: PUSH
28401: LD_INT 2
28403: ARRAY
28404: PPUSH
28405: CALL_OW 428
28409: ST_TO_ADDR
// if not tmp then
28410: LD_VAR 0 4
28414: NOT
28415: IFFALSE 28419
// continue ;
28417: GO 28334
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28419: LD_VAR 0 4
28423: PUSH
28424: LD_INT 81
28426: PUSH
28427: LD_VAR 0 3
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 69
28440: IN
28441: PUSH
28442: LD_EXP 96
28446: PUSH
28447: LD_VAR 0 1
28451: ARRAY
28452: PUSH
28453: LD_VAR 0 2
28457: ARRAY
28458: PUSH
28459: LD_INT 1
28461: ARRAY
28462: PPUSH
28463: LD_EXP 96
28467: PUSH
28468: LD_VAR 0 1
28472: ARRAY
28473: PUSH
28474: LD_VAR 0 2
28478: ARRAY
28479: PUSH
28480: LD_INT 2
28482: ARRAY
28483: PPUSH
28484: CALL_OW 458
28488: AND
28489: IFFALSE 28583
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28491: LD_EXP 96
28495: PUSH
28496: LD_VAR 0 1
28500: ARRAY
28501: PUSH
28502: LD_VAR 0 2
28506: ARRAY
28507: PUSH
28508: LD_INT 1
28510: ARRAY
28511: PPUSH
28512: LD_EXP 96
28516: PUSH
28517: LD_VAR 0 1
28521: ARRAY
28522: PUSH
28523: LD_VAR 0 2
28527: ARRAY
28528: PUSH
28529: LD_INT 2
28531: ARRAY
28532: PPUSH
28533: LD_VAR 0 3
28537: PPUSH
28538: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28542: LD_ADDR_EXP 96
28546: PUSH
28547: LD_EXP 96
28551: PPUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: LD_EXP 96
28561: PUSH
28562: LD_VAR 0 1
28566: ARRAY
28567: PPUSH
28568: LD_VAR 0 2
28572: PPUSH
28573: CALL_OW 3
28577: PPUSH
28578: CALL_OW 1
28582: ST_TO_ADDR
// end ; end ;
28583: GO 28334
28585: POP
28586: POP
// end ;
28587: GO 28252
28589: POP
28590: POP
// end ;
28591: PPOPN 4
28593: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28594: LD_INT 0
28596: PPUSH
28597: PPUSH
// result := false ;
28598: LD_ADDR_VAR 0 4
28602: PUSH
28603: LD_INT 0
28605: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28606: LD_VAR 0 1
28610: PPUSH
28611: CALL_OW 264
28615: PUSH
28616: LD_INT 81
28618: EQUAL
28619: NOT
28620: IFFALSE 28624
// exit ;
28622: GO 28864
// index := GetElementIndex ( minersList , unit ) ;
28624: LD_ADDR_VAR 0 5
28628: PUSH
28629: LD_EXP 95
28633: PPUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL 34822 0 2
28643: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28644: LD_EXP 96
28648: PUSH
28649: LD_VAR 0 5
28653: ARRAY
28654: PUSH
28655: LD_EXP 97
28659: GREATEREQUAL
28660: IFFALSE 28664
// exit ;
28662: GO 28864
// ComMoveXY ( unit , x , y ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_VAR 0 2
28673: PPUSH
28674: LD_VAR 0 3
28678: PPUSH
28679: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28683: LD_INT 35
28685: PPUSH
28686: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_VAR 0 2
28699: PPUSH
28700: LD_VAR 0 3
28704: PPUSH
28705: CALL 66206 0 3
28709: NOT
28710: PUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 314
28720: AND
28721: IFFALSE 28725
// exit ;
28723: GO 28864
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: CALL_OW 428
28739: PUSH
28740: LD_VAR 0 1
28744: EQUAL
28745: PUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 314
28755: NOT
28756: AND
28757: IFFALSE 28683
// PlaySoundXY ( x , y , PlantMine ) ;
28759: LD_VAR 0 2
28763: PPUSH
28764: LD_VAR 0 3
28768: PPUSH
28769: LD_STRING PlantMine
28771: PPUSH
28772: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28776: LD_VAR 0 2
28780: PPUSH
28781: LD_VAR 0 3
28785: PPUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 255
28795: PPUSH
28796: LD_INT 0
28798: PPUSH
28799: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28803: LD_ADDR_EXP 96
28807: PUSH
28808: LD_EXP 96
28812: PPUSH
28813: LD_VAR 0 5
28817: PUSH
28818: LD_EXP 96
28822: PUSH
28823: LD_VAR 0 5
28827: ARRAY
28828: PUSH
28829: LD_INT 1
28831: PLUS
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PPUSH
28837: LD_VAR 0 2
28841: PUSH
28842: LD_VAR 0 3
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PPUSH
28851: CALL 35037 0 3
28855: ST_TO_ADDR
// result := true ;
28856: LD_ADDR_VAR 0 4
28860: PUSH
28861: LD_INT 1
28863: ST_TO_ADDR
// end ;
28864: LD_VAR 0 4
28868: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28869: LD_INT 0
28871: PPUSH
28872: PPUSH
28873: PPUSH
// if not unit in minersList then
28874: LD_VAR 0 1
28878: PUSH
28879: LD_EXP 95
28883: IN
28884: NOT
28885: IFFALSE 28889
// exit ;
28887: GO 29281
// index := GetElementIndex ( minersList , unit ) ;
28889: LD_ADDR_VAR 0 6
28893: PUSH
28894: LD_EXP 95
28898: PPUSH
28899: LD_VAR 0 1
28903: PPUSH
28904: CALL 34822 0 2
28908: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28909: LD_ADDR_VAR 0 5
28913: PUSH
28914: DOUBLE
28915: LD_EXP 96
28919: PUSH
28920: LD_VAR 0 6
28924: ARRAY
28925: INC
28926: ST_TO_ADDR
28927: LD_INT 1
28929: PUSH
28930: FOR_DOWNTO
28931: IFFALSE 29092
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28933: LD_EXP 96
28937: PUSH
28938: LD_VAR 0 6
28942: ARRAY
28943: PUSH
28944: LD_VAR 0 5
28948: ARRAY
28949: PUSH
28950: LD_INT 1
28952: ARRAY
28953: PUSH
28954: LD_VAR 0 2
28958: EQUAL
28959: PUSH
28960: LD_EXP 96
28964: PUSH
28965: LD_VAR 0 6
28969: ARRAY
28970: PUSH
28971: LD_VAR 0 5
28975: ARRAY
28976: PUSH
28977: LD_INT 2
28979: ARRAY
28980: PUSH
28981: LD_VAR 0 3
28985: EQUAL
28986: AND
28987: IFFALSE 29090
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28989: LD_EXP 96
28993: PUSH
28994: LD_VAR 0 6
28998: ARRAY
28999: PUSH
29000: LD_VAR 0 5
29004: ARRAY
29005: PUSH
29006: LD_INT 1
29008: ARRAY
29009: PPUSH
29010: LD_EXP 96
29014: PUSH
29015: LD_VAR 0 6
29019: ARRAY
29020: PUSH
29021: LD_VAR 0 5
29025: ARRAY
29026: PUSH
29027: LD_INT 2
29029: ARRAY
29030: PPUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 255
29040: PPUSH
29041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29045: LD_ADDR_EXP 96
29049: PUSH
29050: LD_EXP 96
29054: PPUSH
29055: LD_VAR 0 6
29059: PPUSH
29060: LD_EXP 96
29064: PUSH
29065: LD_VAR 0 6
29069: ARRAY
29070: PPUSH
29071: LD_VAR 0 5
29075: PPUSH
29076: CALL_OW 3
29080: PPUSH
29081: CALL_OW 1
29085: ST_TO_ADDR
// exit ;
29086: POP
29087: POP
29088: GO 29281
// end ; end ;
29090: GO 28930
29092: POP
29093: POP
// for i := minerMinesList [ index ] downto 1 do
29094: LD_ADDR_VAR 0 5
29098: PUSH
29099: DOUBLE
29100: LD_EXP 96
29104: PUSH
29105: LD_VAR 0 6
29109: ARRAY
29110: INC
29111: ST_TO_ADDR
29112: LD_INT 1
29114: PUSH
29115: FOR_DOWNTO
29116: IFFALSE 29279
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29118: LD_EXP 96
29122: PUSH
29123: LD_VAR 0 6
29127: ARRAY
29128: PUSH
29129: LD_VAR 0 5
29133: ARRAY
29134: PUSH
29135: LD_INT 1
29137: ARRAY
29138: PPUSH
29139: LD_EXP 96
29143: PUSH
29144: LD_VAR 0 6
29148: ARRAY
29149: PUSH
29150: LD_VAR 0 5
29154: ARRAY
29155: PUSH
29156: LD_INT 2
29158: ARRAY
29159: PPUSH
29160: LD_VAR 0 2
29164: PPUSH
29165: LD_VAR 0 3
29169: PPUSH
29170: CALL_OW 298
29174: PUSH
29175: LD_INT 6
29177: LESS
29178: IFFALSE 29277
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29180: LD_EXP 96
29184: PUSH
29185: LD_VAR 0 6
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 5
29195: ARRAY
29196: PUSH
29197: LD_INT 1
29199: ARRAY
29200: PPUSH
29201: LD_EXP 96
29205: PUSH
29206: LD_VAR 0 6
29210: ARRAY
29211: PUSH
29212: LD_VAR 0 5
29216: ARRAY
29217: PUSH
29218: LD_INT 2
29220: ARRAY
29221: PPUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 255
29231: PPUSH
29232: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29236: LD_ADDR_EXP 96
29240: PUSH
29241: LD_EXP 96
29245: PPUSH
29246: LD_VAR 0 6
29250: PPUSH
29251: LD_EXP 96
29255: PUSH
29256: LD_VAR 0 6
29260: ARRAY
29261: PPUSH
29262: LD_VAR 0 5
29266: PPUSH
29267: CALL_OW 3
29271: PPUSH
29272: CALL_OW 1
29276: ST_TO_ADDR
// end ; end ;
29277: GO 29115
29279: POP
29280: POP
// end ;
29281: LD_VAR 0 4
29285: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29286: LD_INT 0
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29297: LD_VAR 0 1
29301: PPUSH
29302: CALL_OW 264
29306: PUSH
29307: LD_INT 81
29309: EQUAL
29310: NOT
29311: PUSH
29312: LD_VAR 0 1
29316: PUSH
29317: LD_EXP 95
29321: IN
29322: NOT
29323: OR
29324: IFFALSE 29328
// exit ;
29326: GO 29650
// index := GetElementIndex ( minersList , unit ) ;
29328: LD_ADDR_VAR 0 6
29332: PUSH
29333: LD_EXP 95
29337: PPUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL 34822 0 2
29347: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29348: LD_ADDR_VAR 0 8
29352: PUSH
29353: LD_EXP 97
29357: PUSH
29358: LD_EXP 96
29362: PUSH
29363: LD_VAR 0 6
29367: ARRAY
29368: MINUS
29369: ST_TO_ADDR
// if not minesFreeAmount then
29370: LD_VAR 0 8
29374: NOT
29375: IFFALSE 29379
// exit ;
29377: GO 29650
// tmp := [ ] ;
29379: LD_ADDR_VAR 0 7
29383: PUSH
29384: EMPTY
29385: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: DOUBLE
29392: LD_INT 1
29394: DEC
29395: ST_TO_ADDR
29396: LD_VAR 0 8
29400: PUSH
29401: FOR_TO
29402: IFFALSE 29597
// begin _d := rand ( 0 , 5 ) ;
29404: LD_ADDR_VAR 0 11
29408: PUSH
29409: LD_INT 0
29411: PPUSH
29412: LD_INT 5
29414: PPUSH
29415: CALL_OW 12
29419: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29420: LD_ADDR_VAR 0 12
29424: PUSH
29425: LD_INT 2
29427: PPUSH
29428: LD_INT 6
29430: PPUSH
29431: CALL_OW 12
29435: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29436: LD_ADDR_VAR 0 9
29440: PUSH
29441: LD_VAR 0 2
29445: PPUSH
29446: LD_VAR 0 11
29450: PPUSH
29451: LD_VAR 0 12
29455: PPUSH
29456: CALL_OW 272
29460: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29461: LD_ADDR_VAR 0 10
29465: PUSH
29466: LD_VAR 0 3
29470: PPUSH
29471: LD_VAR 0 11
29475: PPUSH
29476: LD_VAR 0 12
29480: PPUSH
29481: CALL_OW 273
29485: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29486: LD_VAR 0 9
29490: PPUSH
29491: LD_VAR 0 10
29495: PPUSH
29496: CALL_OW 488
29500: PUSH
29501: LD_VAR 0 9
29505: PUSH
29506: LD_VAR 0 10
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_VAR 0 7
29519: IN
29520: NOT
29521: AND
29522: PUSH
29523: LD_VAR 0 9
29527: PPUSH
29528: LD_VAR 0 10
29532: PPUSH
29533: CALL_OW 458
29537: NOT
29538: AND
29539: IFFALSE 29581
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29541: LD_ADDR_VAR 0 7
29545: PUSH
29546: LD_VAR 0 7
29550: PPUSH
29551: LD_VAR 0 7
29555: PUSH
29556: LD_INT 1
29558: PLUS
29559: PPUSH
29560: LD_VAR 0 9
29564: PUSH
29565: LD_VAR 0 10
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PPUSH
29574: CALL_OW 1
29578: ST_TO_ADDR
29579: GO 29595
// i := i - 1 ;
29581: LD_ADDR_VAR 0 5
29585: PUSH
29586: LD_VAR 0 5
29590: PUSH
29591: LD_INT 1
29593: MINUS
29594: ST_TO_ADDR
// end ;
29595: GO 29401
29597: POP
29598: POP
// for i in tmp do
29599: LD_ADDR_VAR 0 5
29603: PUSH
29604: LD_VAR 0 7
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29648
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_VAR 0 5
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: PPUSH
29626: LD_VAR 0 5
29630: PUSH
29631: LD_INT 2
29633: ARRAY
29634: PPUSH
29635: CALL 28594 0 3
29639: NOT
29640: IFFALSE 29646
// exit ;
29642: POP
29643: POP
29644: GO 29650
29646: GO 29609
29648: POP
29649: POP
// end ;
29650: LD_VAR 0 4
29654: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29655: LD_INT 0
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
// if not GetClass ( unit ) = class_sniper then
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 257
29673: PUSH
29674: LD_INT 5
29676: EQUAL
29677: NOT
29678: IFFALSE 29682
// exit ;
29680: GO 30070
// dist := 8 ;
29682: LD_ADDR_VAR 0 5
29686: PUSH
29687: LD_INT 8
29689: ST_TO_ADDR
// viewRange := 12 ;
29690: LD_ADDR_VAR 0 7
29694: PUSH
29695: LD_INT 12
29697: ST_TO_ADDR
// side := GetSide ( unit ) ;
29698: LD_ADDR_VAR 0 6
29702: PUSH
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 255
29712: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29713: LD_INT 61
29715: PPUSH
29716: LD_VAR 0 6
29720: PPUSH
29721: CALL_OW 321
29725: PUSH
29726: LD_INT 2
29728: EQUAL
29729: IFFALSE 29739
// viewRange := 16 ;
29731: LD_ADDR_VAR 0 7
29735: PUSH
29736: LD_INT 16
29738: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29739: LD_VAR 0 1
29743: PPUSH
29744: LD_VAR 0 2
29748: PPUSH
29749: LD_VAR 0 3
29753: PPUSH
29754: CALL_OW 297
29758: PUSH
29759: LD_VAR 0 5
29763: GREATER
29764: IFFALSE 29843
// begin ComMoveXY ( unit , x , y ) ;
29766: LD_VAR 0 1
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: LD_VAR 0 3
29780: PPUSH
29781: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29785: LD_INT 35
29787: PPUSH
29788: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29792: LD_VAR 0 1
29796: PPUSH
29797: LD_VAR 0 2
29801: PPUSH
29802: LD_VAR 0 3
29806: PPUSH
29807: CALL 66206 0 3
29811: NOT
29812: IFFALSE 29816
// exit ;
29814: GO 30070
// until GetDistUnitXY ( unit , x , y ) < dist ;
29816: LD_VAR 0 1
29820: PPUSH
29821: LD_VAR 0 2
29825: PPUSH
29826: LD_VAR 0 3
29830: PPUSH
29831: CALL_OW 297
29835: PUSH
29836: LD_VAR 0 5
29840: LESS
29841: IFFALSE 29785
// end ; ComTurnXY ( unit , x , y ) ;
29843: LD_VAR 0 1
29847: PPUSH
29848: LD_VAR 0 2
29852: PPUSH
29853: LD_VAR 0 3
29857: PPUSH
29858: CALL_OW 118
// wait ( 5 ) ;
29862: LD_INT 5
29864: PPUSH
29865: CALL_OW 67
// _d := GetDir ( unit ) ;
29869: LD_ADDR_VAR 0 10
29873: PUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL_OW 254
29883: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29884: LD_ADDR_VAR 0 8
29888: PUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 250
29898: PPUSH
29899: LD_VAR 0 10
29903: PPUSH
29904: LD_VAR 0 5
29908: PPUSH
29909: CALL_OW 272
29913: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29914: LD_ADDR_VAR 0 9
29918: PUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 251
29928: PPUSH
29929: LD_VAR 0 10
29933: PPUSH
29934: LD_VAR 0 5
29938: PPUSH
29939: CALL_OW 273
29943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29944: LD_VAR 0 8
29948: PPUSH
29949: LD_VAR 0 9
29953: PPUSH
29954: CALL_OW 488
29958: NOT
29959: IFFALSE 29963
// exit ;
29961: GO 30070
// ComAnimCustom ( unit , 1 ) ;
29963: LD_VAR 0 1
29967: PPUSH
29968: LD_INT 1
29970: PPUSH
29971: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29975: LD_VAR 0 8
29979: PPUSH
29980: LD_VAR 0 9
29984: PPUSH
29985: LD_VAR 0 6
29989: PPUSH
29990: LD_VAR 0 7
29994: PPUSH
29995: CALL_OW 330
// repeat wait ( 1 ) ;
29999: LD_INT 1
30001: PPUSH
30002: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30006: LD_VAR 0 1
30010: PPUSH
30011: CALL_OW 316
30015: PUSH
30016: LD_VAR 0 1
30020: PPUSH
30021: CALL_OW 314
30025: OR
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 302
30036: NOT
30037: OR
30038: PUSH
30039: LD_VAR 0 1
30043: PPUSH
30044: CALL_OW 301
30048: OR
30049: IFFALSE 29999
// RemoveSeeing ( _x , _y , side ) ;
30051: LD_VAR 0 8
30055: PPUSH
30056: LD_VAR 0 9
30060: PPUSH
30061: LD_VAR 0 6
30065: PPUSH
30066: CALL_OW 331
// end ; end_of_file
30070: LD_VAR 0 4
30074: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30075: LD_INT 0
30077: PPUSH
30078: PPUSH
// if exist_mode then
30079: LD_VAR 0 2
30083: IFFALSE 30108
// unit := CreateCharacter ( prefix & ident ) else
30085: LD_ADDR_VAR 0 5
30089: PUSH
30090: LD_VAR 0 3
30094: PUSH
30095: LD_VAR 0 1
30099: STR
30100: PPUSH
30101: CALL_OW 34
30105: ST_TO_ADDR
30106: GO 30123
// unit := NewCharacter ( ident ) ;
30108: LD_ADDR_VAR 0 5
30112: PUSH
30113: LD_VAR 0 1
30117: PPUSH
30118: CALL_OW 25
30122: ST_TO_ADDR
// result := unit ;
30123: LD_ADDR_VAR 0 4
30127: PUSH
30128: LD_VAR 0 5
30132: ST_TO_ADDR
// end ;
30133: LD_VAR 0 4
30137: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30138: LD_INT 0
30140: PPUSH
30141: PPUSH
// if not side or not nation then
30142: LD_VAR 0 1
30146: NOT
30147: PUSH
30148: LD_VAR 0 2
30152: NOT
30153: OR
30154: IFFALSE 30158
// exit ;
30156: GO 30926
// case nation of nation_american :
30158: LD_VAR 0 2
30162: PUSH
30163: LD_INT 1
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30385
30171: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30172: LD_ADDR_VAR 0 4
30176: PUSH
30177: LD_INT 35
30179: PUSH
30180: LD_INT 45
30182: PUSH
30183: LD_INT 46
30185: PUSH
30186: LD_INT 47
30188: PUSH
30189: LD_INT 82
30191: PUSH
30192: LD_INT 83
30194: PUSH
30195: LD_INT 84
30197: PUSH
30198: LD_INT 85
30200: PUSH
30201: LD_INT 86
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 6
30212: PUSH
30213: LD_INT 15
30215: PUSH
30216: LD_INT 16
30218: PUSH
30219: LD_INT 7
30221: PUSH
30222: LD_INT 12
30224: PUSH
30225: LD_INT 13
30227: PUSH
30228: LD_INT 10
30230: PUSH
30231: LD_INT 14
30233: PUSH
30234: LD_INT 20
30236: PUSH
30237: LD_INT 21
30239: PUSH
30240: LD_INT 22
30242: PUSH
30243: LD_INT 25
30245: PUSH
30246: LD_INT 32
30248: PUSH
30249: LD_INT 27
30251: PUSH
30252: LD_INT 36
30254: PUSH
30255: LD_INT 69
30257: PUSH
30258: LD_INT 39
30260: PUSH
30261: LD_INT 34
30263: PUSH
30264: LD_INT 40
30266: PUSH
30267: LD_INT 48
30269: PUSH
30270: LD_INT 49
30272: PUSH
30273: LD_INT 50
30275: PUSH
30276: LD_INT 51
30278: PUSH
30279: LD_INT 52
30281: PUSH
30282: LD_INT 53
30284: PUSH
30285: LD_INT 54
30287: PUSH
30288: LD_INT 55
30290: PUSH
30291: LD_INT 56
30293: PUSH
30294: LD_INT 57
30296: PUSH
30297: LD_INT 58
30299: PUSH
30300: LD_INT 59
30302: PUSH
30303: LD_INT 60
30305: PUSH
30306: LD_INT 61
30308: PUSH
30309: LD_INT 62
30311: PUSH
30312: LD_INT 80
30314: PUSH
30315: LD_INT 82
30317: PUSH
30318: LD_INT 83
30320: PUSH
30321: LD_INT 84
30323: PUSH
30324: LD_INT 85
30326: PUSH
30327: LD_INT 86
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: ST_TO_ADDR
30383: GO 30850
30385: LD_INT 2
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 30619
30393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30394: LD_ADDR_VAR 0 4
30398: PUSH
30399: LD_INT 35
30401: PUSH
30402: LD_INT 45
30404: PUSH
30405: LD_INT 46
30407: PUSH
30408: LD_INT 47
30410: PUSH
30411: LD_INT 82
30413: PUSH
30414: LD_INT 83
30416: PUSH
30417: LD_INT 84
30419: PUSH
30420: LD_INT 85
30422: PUSH
30423: LD_INT 87
30425: PUSH
30426: LD_INT 70
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: LD_INT 11
30434: PUSH
30435: LD_INT 3
30437: PUSH
30438: LD_INT 4
30440: PUSH
30441: LD_INT 5
30443: PUSH
30444: LD_INT 6
30446: PUSH
30447: LD_INT 15
30449: PUSH
30450: LD_INT 18
30452: PUSH
30453: LD_INT 7
30455: PUSH
30456: LD_INT 17
30458: PUSH
30459: LD_INT 8
30461: PUSH
30462: LD_INT 20
30464: PUSH
30465: LD_INT 21
30467: PUSH
30468: LD_INT 22
30470: PUSH
30471: LD_INT 72
30473: PUSH
30474: LD_INT 26
30476: PUSH
30477: LD_INT 69
30479: PUSH
30480: LD_INT 39
30482: PUSH
30483: LD_INT 40
30485: PUSH
30486: LD_INT 41
30488: PUSH
30489: LD_INT 42
30491: PUSH
30492: LD_INT 43
30494: PUSH
30495: LD_INT 48
30497: PUSH
30498: LD_INT 49
30500: PUSH
30501: LD_INT 50
30503: PUSH
30504: LD_INT 51
30506: PUSH
30507: LD_INT 52
30509: PUSH
30510: LD_INT 53
30512: PUSH
30513: LD_INT 54
30515: PUSH
30516: LD_INT 55
30518: PUSH
30519: LD_INT 56
30521: PUSH
30522: LD_INT 60
30524: PUSH
30525: LD_INT 61
30527: PUSH
30528: LD_INT 62
30530: PUSH
30531: LD_INT 66
30533: PUSH
30534: LD_INT 67
30536: PUSH
30537: LD_INT 68
30539: PUSH
30540: LD_INT 81
30542: PUSH
30543: LD_INT 82
30545: PUSH
30546: LD_INT 83
30548: PUSH
30549: LD_INT 84
30551: PUSH
30552: LD_INT 85
30554: PUSH
30555: LD_INT 87
30557: PUSH
30558: LD_INT 88
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
30617: GO 30850
30619: LD_INT 3
30621: DOUBLE
30622: EQUAL
30623: IFTRUE 30627
30625: GO 30849
30627: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30628: LD_ADDR_VAR 0 4
30632: PUSH
30633: LD_INT 46
30635: PUSH
30636: LD_INT 47
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 82
30647: PUSH
30648: LD_INT 83
30650: PUSH
30651: LD_INT 84
30653: PUSH
30654: LD_INT 85
30656: PUSH
30657: LD_INT 86
30659: PUSH
30660: LD_INT 11
30662: PUSH
30663: LD_INT 9
30665: PUSH
30666: LD_INT 20
30668: PUSH
30669: LD_INT 19
30671: PUSH
30672: LD_INT 21
30674: PUSH
30675: LD_INT 24
30677: PUSH
30678: LD_INT 22
30680: PUSH
30681: LD_INT 25
30683: PUSH
30684: LD_INT 28
30686: PUSH
30687: LD_INT 29
30689: PUSH
30690: LD_INT 30
30692: PUSH
30693: LD_INT 31
30695: PUSH
30696: LD_INT 37
30698: PUSH
30699: LD_INT 38
30701: PUSH
30702: LD_INT 32
30704: PUSH
30705: LD_INT 27
30707: PUSH
30708: LD_INT 33
30710: PUSH
30711: LD_INT 69
30713: PUSH
30714: LD_INT 39
30716: PUSH
30717: LD_INT 34
30719: PUSH
30720: LD_INT 40
30722: PUSH
30723: LD_INT 71
30725: PUSH
30726: LD_INT 23
30728: PUSH
30729: LD_INT 44
30731: PUSH
30732: LD_INT 48
30734: PUSH
30735: LD_INT 49
30737: PUSH
30738: LD_INT 50
30740: PUSH
30741: LD_INT 51
30743: PUSH
30744: LD_INT 52
30746: PUSH
30747: LD_INT 53
30749: PUSH
30750: LD_INT 54
30752: PUSH
30753: LD_INT 55
30755: PUSH
30756: LD_INT 56
30758: PUSH
30759: LD_INT 57
30761: PUSH
30762: LD_INT 58
30764: PUSH
30765: LD_INT 59
30767: PUSH
30768: LD_INT 63
30770: PUSH
30771: LD_INT 64
30773: PUSH
30774: LD_INT 65
30776: PUSH
30777: LD_INT 82
30779: PUSH
30780: LD_INT 83
30782: PUSH
30783: LD_INT 84
30785: PUSH
30786: LD_INT 85
30788: PUSH
30789: LD_INT 86
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
30847: GO 30850
30849: POP
// if state > - 1 and state < 3 then
30850: LD_VAR 0 3
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: GREATER
30859: PUSH
30860: LD_VAR 0 3
30864: PUSH
30865: LD_INT 3
30867: LESS
30868: AND
30869: IFFALSE 30926
// for i in result do
30871: LD_ADDR_VAR 0 5
30875: PUSH
30876: LD_VAR 0 4
30880: PUSH
30881: FOR_IN
30882: IFFALSE 30924
// if GetTech ( i , side ) <> state then
30884: LD_VAR 0 5
30888: PPUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL_OW 321
30898: PUSH
30899: LD_VAR 0 3
30903: NONEQUAL
30904: IFFALSE 30922
// result := result diff i ;
30906: LD_ADDR_VAR 0 4
30910: PUSH
30911: LD_VAR 0 4
30915: PUSH
30916: LD_VAR 0 5
30920: DIFF
30921: ST_TO_ADDR
30922: GO 30881
30924: POP
30925: POP
// end ;
30926: LD_VAR 0 4
30930: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30931: LD_INT 0
30933: PPUSH
30934: PPUSH
30935: PPUSH
// result := true ;
30936: LD_ADDR_VAR 0 3
30940: PUSH
30941: LD_INT 1
30943: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_VAR 0 2
30953: PPUSH
30954: CALL_OW 480
30958: ST_TO_ADDR
// if not tmp then
30959: LD_VAR 0 5
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31017
// for i in tmp do
30968: LD_ADDR_VAR 0 4
30972: PUSH
30973: LD_VAR 0 5
30977: PUSH
30978: FOR_IN
30979: IFFALSE 31015
// if GetTech ( i , side ) <> state_researched then
30981: LD_VAR 0 4
30985: PPUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 321
30995: PUSH
30996: LD_INT 2
30998: NONEQUAL
30999: IFFALSE 31013
// begin result := false ;
31001: LD_ADDR_VAR 0 3
31005: PUSH
31006: LD_INT 0
31008: ST_TO_ADDR
// exit ;
31009: POP
31010: POP
31011: GO 31017
// end ;
31013: GO 30978
31015: POP
31016: POP
// end ;
31017: LD_VAR 0 3
31021: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31022: LD_INT 0
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31037: LD_VAR 0 1
31041: NOT
31042: PUSH
31043: LD_VAR 0 1
31047: PPUSH
31048: CALL_OW 257
31052: PUSH
31053: LD_INT 9
31055: NONEQUAL
31056: OR
31057: IFFALSE 31061
// exit ;
31059: GO 31634
// side := GetSide ( unit ) ;
31061: LD_ADDR_VAR 0 9
31065: PUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: CALL_OW 255
31075: ST_TO_ADDR
// tech_space := tech_spacanom ;
31076: LD_ADDR_VAR 0 12
31080: PUSH
31081: LD_INT 29
31083: ST_TO_ADDR
// tech_time := tech_taurad ;
31084: LD_ADDR_VAR 0 13
31088: PUSH
31089: LD_INT 28
31091: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31092: LD_ADDR_VAR 0 11
31096: PUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 310
31106: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31107: LD_VAR 0 11
31111: PPUSH
31112: CALL_OW 247
31116: PUSH
31117: LD_INT 2
31119: EQUAL
31120: IFFALSE 31124
// exit ;
31122: GO 31634
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31124: LD_ADDR_VAR 0 8
31128: PUSH
31129: LD_INT 81
31131: PUSH
31132: LD_VAR 0 9
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 3
31143: PUSH
31144: LD_INT 21
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PPUSH
31162: CALL_OW 69
31166: ST_TO_ADDR
// if not tmp then
31167: LD_VAR 0 8
31171: NOT
31172: IFFALSE 31176
// exit ;
31174: GO 31634
// if in_unit then
31176: LD_VAR 0 11
31180: IFFALSE 31204
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31182: LD_ADDR_VAR 0 10
31186: PUSH
31187: LD_VAR 0 8
31191: PPUSH
31192: LD_VAR 0 11
31196: PPUSH
31197: CALL_OW 74
31201: ST_TO_ADDR
31202: GO 31224
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31204: LD_ADDR_VAR 0 10
31208: PUSH
31209: LD_VAR 0 8
31213: PPUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 74
31223: ST_TO_ADDR
// if not enemy then
31224: LD_VAR 0 10
31228: NOT
31229: IFFALSE 31233
// exit ;
31231: GO 31634
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31233: LD_VAR 0 11
31237: PUSH
31238: LD_VAR 0 11
31242: PPUSH
31243: LD_VAR 0 10
31247: PPUSH
31248: CALL_OW 296
31252: PUSH
31253: LD_INT 13
31255: GREATER
31256: AND
31257: PUSH
31258: LD_VAR 0 1
31262: PPUSH
31263: LD_VAR 0 10
31267: PPUSH
31268: CALL_OW 296
31272: PUSH
31273: LD_INT 12
31275: GREATER
31276: OR
31277: IFFALSE 31281
// exit ;
31279: GO 31634
// missile := [ 1 ] ;
31281: LD_ADDR_VAR 0 14
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31292: LD_VAR 0 9
31296: PPUSH
31297: LD_VAR 0 12
31301: PPUSH
31302: CALL_OW 325
31306: IFFALSE 31335
// missile := Replace ( missile , missile + 1 , 2 ) ;
31308: LD_ADDR_VAR 0 14
31312: PUSH
31313: LD_VAR 0 14
31317: PPUSH
31318: LD_VAR 0 14
31322: PUSH
31323: LD_INT 1
31325: PLUS
31326: PPUSH
31327: LD_INT 2
31329: PPUSH
31330: CALL_OW 1
31334: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31335: LD_VAR 0 9
31339: PPUSH
31340: LD_VAR 0 13
31344: PPUSH
31345: CALL_OW 325
31349: PUSH
31350: LD_VAR 0 10
31354: PPUSH
31355: CALL_OW 255
31359: PPUSH
31360: LD_VAR 0 13
31364: PPUSH
31365: CALL_OW 325
31369: NOT
31370: AND
31371: IFFALSE 31400
// missile := Replace ( missile , missile + 1 , 3 ) ;
31373: LD_ADDR_VAR 0 14
31377: PUSH
31378: LD_VAR 0 14
31382: PPUSH
31383: LD_VAR 0 14
31387: PUSH
31388: LD_INT 1
31390: PLUS
31391: PPUSH
31392: LD_INT 3
31394: PPUSH
31395: CALL_OW 1
31399: ST_TO_ADDR
// if missile < 2 then
31400: LD_VAR 0 14
31404: PUSH
31405: LD_INT 2
31407: LESS
31408: IFFALSE 31412
// exit ;
31410: GO 31634
// x := GetX ( enemy ) ;
31412: LD_ADDR_VAR 0 4
31416: PUSH
31417: LD_VAR 0 10
31421: PPUSH
31422: CALL_OW 250
31426: ST_TO_ADDR
// y := GetY ( enemy ) ;
31427: LD_ADDR_VAR 0 5
31431: PUSH
31432: LD_VAR 0 10
31436: PPUSH
31437: CALL_OW 251
31441: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31442: LD_ADDR_VAR 0 6
31446: PUSH
31447: LD_VAR 0 4
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PPUSH
31456: LD_INT 1
31458: PPUSH
31459: CALL_OW 12
31463: PLUS
31464: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31465: LD_ADDR_VAR 0 7
31469: PUSH
31470: LD_VAR 0 5
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PPUSH
31479: LD_INT 1
31481: PPUSH
31482: CALL_OW 12
31486: PLUS
31487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31488: LD_VAR 0 6
31492: PPUSH
31493: LD_VAR 0 7
31497: PPUSH
31498: CALL_OW 488
31502: NOT
31503: IFFALSE 31525
// begin _x := x ;
31505: LD_ADDR_VAR 0 6
31509: PUSH
31510: LD_VAR 0 4
31514: ST_TO_ADDR
// _y := y ;
31515: LD_ADDR_VAR 0 7
31519: PUSH
31520: LD_VAR 0 5
31524: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31525: LD_ADDR_VAR 0 3
31529: PUSH
31530: LD_INT 1
31532: PPUSH
31533: LD_VAR 0 14
31537: PPUSH
31538: CALL_OW 12
31542: ST_TO_ADDR
// case i of 1 :
31543: LD_VAR 0 3
31547: PUSH
31548: LD_INT 1
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31573
31556: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31557: LD_VAR 0 1
31561: PPUSH
31562: LD_VAR 0 10
31566: PPUSH
31567: CALL_OW 115
31571: GO 31634
31573: LD_INT 2
31575: DOUBLE
31576: EQUAL
31577: IFTRUE 31581
31579: GO 31603
31581: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31582: LD_VAR 0 1
31586: PPUSH
31587: LD_VAR 0 6
31591: PPUSH
31592: LD_VAR 0 7
31596: PPUSH
31597: CALL_OW 153
31601: GO 31634
31603: LD_INT 3
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31633
31611: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31612: LD_VAR 0 1
31616: PPUSH
31617: LD_VAR 0 6
31621: PPUSH
31622: LD_VAR 0 7
31626: PPUSH
31627: CALL_OW 154
31631: GO 31634
31633: POP
// end ;
31634: LD_VAR 0 2
31638: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31639: LD_INT 0
31641: PPUSH
31642: PPUSH
31643: PPUSH
31644: PPUSH
31645: PPUSH
31646: PPUSH
// if not unit or not building then
31647: LD_VAR 0 1
31651: NOT
31652: PUSH
31653: LD_VAR 0 2
31657: NOT
31658: OR
31659: IFFALSE 31663
// exit ;
31661: GO 31821
// x := GetX ( building ) ;
31663: LD_ADDR_VAR 0 5
31667: PUSH
31668: LD_VAR 0 2
31672: PPUSH
31673: CALL_OW 250
31677: ST_TO_ADDR
// y := GetY ( building ) ;
31678: LD_ADDR_VAR 0 6
31682: PUSH
31683: LD_VAR 0 2
31687: PPUSH
31688: CALL_OW 251
31692: ST_TO_ADDR
// for i = 0 to 5 do
31693: LD_ADDR_VAR 0 4
31697: PUSH
31698: DOUBLE
31699: LD_INT 0
31701: DEC
31702: ST_TO_ADDR
31703: LD_INT 5
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31819
// begin _x := ShiftX ( x , i , 3 ) ;
31709: LD_ADDR_VAR 0 7
31713: PUSH
31714: LD_VAR 0 5
31718: PPUSH
31719: LD_VAR 0 4
31723: PPUSH
31724: LD_INT 3
31726: PPUSH
31727: CALL_OW 272
31731: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31732: LD_ADDR_VAR 0 8
31736: PUSH
31737: LD_VAR 0 6
31741: PPUSH
31742: LD_VAR 0 4
31746: PPUSH
31747: LD_INT 3
31749: PPUSH
31750: CALL_OW 273
31754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31755: LD_VAR 0 7
31759: PPUSH
31760: LD_VAR 0 8
31764: PPUSH
31765: CALL_OW 488
31769: NOT
31770: IFFALSE 31774
// continue ;
31772: GO 31706
// if HexInfo ( _x , _y ) = 0 then
31774: LD_VAR 0 7
31778: PPUSH
31779: LD_VAR 0 8
31783: PPUSH
31784: CALL_OW 428
31788: PUSH
31789: LD_INT 0
31791: EQUAL
31792: IFFALSE 31817
// begin ComMoveXY ( unit , _x , _y ) ;
31794: LD_VAR 0 1
31798: PPUSH
31799: LD_VAR 0 7
31803: PPUSH
31804: LD_VAR 0 8
31808: PPUSH
31809: CALL_OW 111
// exit ;
31813: POP
31814: POP
31815: GO 31821
// end ; end ;
31817: GO 31706
31819: POP
31820: POP
// end ;
31821: LD_VAR 0 3
31825: RET
// export function ScanBase ( side , base_area ) ; begin
31826: LD_INT 0
31828: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_VAR 0 2
31838: PPUSH
31839: LD_INT 81
31841: PUSH
31842: LD_VAR 0 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PPUSH
31851: CALL_OW 70
31855: ST_TO_ADDR
// end ;
31856: LD_VAR 0 3
31860: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31861: LD_INT 0
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
// result := false ;
31867: LD_ADDR_VAR 0 2
31871: PUSH
31872: LD_INT 0
31874: ST_TO_ADDR
// side := GetSide ( unit ) ;
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 255
31889: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31890: LD_ADDR_VAR 0 4
31894: PUSH
31895: LD_VAR 0 1
31899: PPUSH
31900: CALL_OW 248
31904: ST_TO_ADDR
// case nat of 1 :
31905: LD_VAR 0 4
31909: PUSH
31910: LD_INT 1
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31918
31916: GO 31929
31918: POP
// tech := tech_lassight ; 2 :
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_INT 12
31926: ST_TO_ADDR
31927: GO 31968
31929: LD_INT 2
31931: DOUBLE
31932: EQUAL
31933: IFTRUE 31937
31935: GO 31948
31937: POP
// tech := tech_mortar ; 3 :
31938: LD_ADDR_VAR 0 5
31942: PUSH
31943: LD_INT 41
31945: ST_TO_ADDR
31946: GO 31968
31948: LD_INT 3
31950: DOUBLE
31951: EQUAL
31952: IFTRUE 31956
31954: GO 31967
31956: POP
// tech := tech_bazooka ; end ;
31957: LD_ADDR_VAR 0 5
31961: PUSH
31962: LD_INT 44
31964: ST_TO_ADDR
31965: GO 31968
31967: POP
// if Researched ( side , tech ) then
31968: LD_VAR 0 3
31972: PPUSH
31973: LD_VAR 0 5
31977: PPUSH
31978: CALL_OW 325
31982: IFFALSE 32009
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31984: LD_ADDR_VAR 0 2
31988: PUSH
31989: LD_INT 5
31991: PUSH
31992: LD_INT 8
31994: PUSH
31995: LD_INT 9
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: LD_VAR 0 4
32007: ARRAY
32008: ST_TO_ADDR
// end ;
32009: LD_VAR 0 2
32013: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32014: LD_INT 0
32016: PPUSH
32017: PPUSH
32018: PPUSH
// if not mines then
32019: LD_VAR 0 2
32023: NOT
32024: IFFALSE 32028
// exit ;
32026: GO 32172
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32028: LD_ADDR_VAR 0 5
32032: PUSH
32033: LD_INT 81
32035: PUSH
32036: LD_VAR 0 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PPUSH
32066: CALL_OW 69
32070: ST_TO_ADDR
// for i in mines do
32071: LD_ADDR_VAR 0 4
32075: PUSH
32076: LD_VAR 0 2
32080: PUSH
32081: FOR_IN
32082: IFFALSE 32170
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32084: LD_VAR 0 4
32088: PUSH
32089: LD_INT 1
32091: ARRAY
32092: PPUSH
32093: LD_VAR 0 4
32097: PUSH
32098: LD_INT 2
32100: ARRAY
32101: PPUSH
32102: CALL_OW 458
32106: NOT
32107: IFFALSE 32111
// continue ;
32109: GO 32081
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32111: LD_VAR 0 4
32115: PUSH
32116: LD_INT 1
32118: ARRAY
32119: PPUSH
32120: LD_VAR 0 4
32124: PUSH
32125: LD_INT 2
32127: ARRAY
32128: PPUSH
32129: CALL_OW 428
32133: PUSH
32134: LD_VAR 0 5
32138: IN
32139: IFFALSE 32168
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32141: LD_VAR 0 4
32145: PUSH
32146: LD_INT 1
32148: ARRAY
32149: PPUSH
32150: LD_VAR 0 4
32154: PUSH
32155: LD_INT 2
32157: ARRAY
32158: PPUSH
32159: LD_VAR 0 1
32163: PPUSH
32164: CALL_OW 456
// end ;
32168: GO 32081
32170: POP
32171: POP
// end ;
32172: LD_VAR 0 3
32176: RET
// export function Count ( array ) ; begin
32177: LD_INT 0
32179: PPUSH
// result := array + 0 ;
32180: LD_ADDR_VAR 0 2
32184: PUSH
32185: LD_VAR 0 1
32189: PUSH
32190: LD_INT 0
32192: PLUS
32193: ST_TO_ADDR
// end ;
32194: LD_VAR 0 2
32198: RET
// export function IsEmpty ( building ) ; begin
32199: LD_INT 0
32201: PPUSH
// if not building then
32202: LD_VAR 0 1
32206: NOT
32207: IFFALSE 32211
// exit ;
32209: GO 32254
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32211: LD_ADDR_VAR 0 2
32215: PUSH
32216: LD_VAR 0 1
32220: PUSH
32221: LD_INT 22
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 255
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 58
32240: PUSH
32241: EMPTY
32242: LIST
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PPUSH
32248: CALL_OW 69
32252: IN
32253: ST_TO_ADDR
// end ;
32254: LD_VAR 0 2
32258: RET
// export function IsNotFull ( building ) ; var places ; begin
32259: LD_INT 0
32261: PPUSH
32262: PPUSH
// if not building then
32263: LD_VAR 0 1
32267: NOT
32268: IFFALSE 32272
// exit ;
32270: GO 32300
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32272: LD_ADDR_VAR 0 2
32276: PUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: LD_INT 3
32284: PUSH
32285: LD_INT 62
32287: PUSH
32288: EMPTY
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PPUSH
32295: CALL_OW 72
32299: ST_TO_ADDR
// end ;
32300: LD_VAR 0 2
32304: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32305: LD_INT 0
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
// tmp := [ ] ;
32311: LD_ADDR_VAR 0 3
32315: PUSH
32316: EMPTY
32317: ST_TO_ADDR
// list := [ ] ;
32318: LD_ADDR_VAR 0 5
32322: PUSH
32323: EMPTY
32324: ST_TO_ADDR
// for i = 16 to 25 do
32325: LD_ADDR_VAR 0 4
32329: PUSH
32330: DOUBLE
32331: LD_INT 16
32333: DEC
32334: ST_TO_ADDR
32335: LD_INT 25
32337: PUSH
32338: FOR_TO
32339: IFFALSE 32412
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32341: LD_ADDR_VAR 0 3
32345: PUSH
32346: LD_VAR 0 3
32350: PUSH
32351: LD_INT 22
32353: PUSH
32354: LD_VAR 0 1
32358: PPUSH
32359: CALL_OW 255
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 91
32370: PUSH
32371: LD_VAR 0 1
32375: PUSH
32376: LD_INT 6
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 30
32386: PUSH
32387: LD_VAR 0 4
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ADD
32409: ST_TO_ADDR
32410: GO 32338
32412: POP
32413: POP
// for i = 1 to tmp do
32414: LD_ADDR_VAR 0 4
32418: PUSH
32419: DOUBLE
32420: LD_INT 1
32422: DEC
32423: ST_TO_ADDR
32424: LD_VAR 0 3
32428: PUSH
32429: FOR_TO
32430: IFFALSE 32518
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32432: LD_ADDR_VAR 0 5
32436: PUSH
32437: LD_VAR 0 5
32441: PUSH
32442: LD_VAR 0 3
32446: PUSH
32447: LD_VAR 0 4
32451: ARRAY
32452: PPUSH
32453: CALL_OW 266
32457: PUSH
32458: LD_VAR 0 3
32462: PUSH
32463: LD_VAR 0 4
32467: ARRAY
32468: PPUSH
32469: CALL_OW 250
32473: PUSH
32474: LD_VAR 0 3
32478: PUSH
32479: LD_VAR 0 4
32483: ARRAY
32484: PPUSH
32485: CALL_OW 251
32489: PUSH
32490: LD_VAR 0 3
32494: PUSH
32495: LD_VAR 0 4
32499: ARRAY
32500: PPUSH
32501: CALL_OW 254
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: ADD
32515: ST_TO_ADDR
32516: GO 32429
32518: POP
32519: POP
// result := list ;
32520: LD_ADDR_VAR 0 2
32524: PUSH
32525: LD_VAR 0 5
32529: ST_TO_ADDR
// end ;
32530: LD_VAR 0 2
32534: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32535: LD_INT 0
32537: PPUSH
32538: PPUSH
32539: PPUSH
32540: PPUSH
32541: PPUSH
32542: PPUSH
32543: PPUSH
// if not factory then
32544: LD_VAR 0 1
32548: NOT
32549: IFFALSE 32553
// exit ;
32551: GO 33146
// if control = control_apeman then
32553: LD_VAR 0 4
32557: PUSH
32558: LD_INT 5
32560: EQUAL
32561: IFFALSE 32670
// begin tmp := UnitsInside ( factory ) ;
32563: LD_ADDR_VAR 0 8
32567: PUSH
32568: LD_VAR 0 1
32572: PPUSH
32573: CALL_OW 313
32577: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32578: LD_VAR 0 8
32582: PPUSH
32583: LD_INT 25
32585: PUSH
32586: LD_INT 12
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PPUSH
32593: CALL_OW 72
32597: NOT
32598: IFFALSE 32608
// control := control_manual ;
32600: LD_ADDR_VAR 0 4
32604: PUSH
32605: LD_INT 1
32607: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32608: LD_ADDR_VAR 0 8
32612: PUSH
32613: LD_VAR 0 1
32617: PPUSH
32618: CALL 32305 0 1
32622: ST_TO_ADDR
// if tmp then
32623: LD_VAR 0 8
32627: IFFALSE 32670
// begin for i in tmp do
32629: LD_ADDR_VAR 0 7
32633: PUSH
32634: LD_VAR 0 8
32638: PUSH
32639: FOR_IN
32640: IFFALSE 32668
// if i [ 1 ] = b_ext_radio then
32642: LD_VAR 0 7
32646: PUSH
32647: LD_INT 1
32649: ARRAY
32650: PUSH
32651: LD_INT 22
32653: EQUAL
32654: IFFALSE 32666
// begin control := control_remote ;
32656: LD_ADDR_VAR 0 4
32660: PUSH
32661: LD_INT 2
32663: ST_TO_ADDR
// break ;
32664: GO 32668
// end ;
32666: GO 32639
32668: POP
32669: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32670: LD_VAR 0 1
32674: PPUSH
32675: LD_VAR 0 2
32679: PPUSH
32680: LD_VAR 0 3
32684: PPUSH
32685: LD_VAR 0 4
32689: PPUSH
32690: LD_VAR 0 5
32694: PPUSH
32695: CALL_OW 448
32699: IFFALSE 32734
// begin result := [ chassis , engine , control , weapon ] ;
32701: LD_ADDR_VAR 0 6
32705: PUSH
32706: LD_VAR 0 2
32710: PUSH
32711: LD_VAR 0 3
32715: PUSH
32716: LD_VAR 0 4
32720: PUSH
32721: LD_VAR 0 5
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: ST_TO_ADDR
// exit ;
32732: GO 33146
// end ; _chassis := AvailableChassisList ( factory ) ;
32734: LD_ADDR_VAR 0 9
32738: PUSH
32739: LD_VAR 0 1
32743: PPUSH
32744: CALL_OW 475
32748: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32749: LD_ADDR_VAR 0 11
32753: PUSH
32754: LD_VAR 0 1
32758: PPUSH
32759: CALL_OW 476
32763: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32764: LD_ADDR_VAR 0 12
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 477
32778: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32779: LD_ADDR_VAR 0 10
32783: PUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 478
32793: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32794: LD_VAR 0 9
32798: NOT
32799: PUSH
32800: LD_VAR 0 11
32804: NOT
32805: OR
32806: PUSH
32807: LD_VAR 0 12
32811: NOT
32812: OR
32813: PUSH
32814: LD_VAR 0 10
32818: NOT
32819: OR
32820: IFFALSE 32855
// begin result := [ chassis , engine , control , weapon ] ;
32822: LD_ADDR_VAR 0 6
32826: PUSH
32827: LD_VAR 0 2
32831: PUSH
32832: LD_VAR 0 3
32836: PUSH
32837: LD_VAR 0 4
32841: PUSH
32842: LD_VAR 0 5
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// exit ;
32853: GO 33146
// end ; if not chassis in _chassis then
32855: LD_VAR 0 2
32859: PUSH
32860: LD_VAR 0 9
32864: IN
32865: NOT
32866: IFFALSE 32892
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32868: LD_ADDR_VAR 0 2
32872: PUSH
32873: LD_VAR 0 9
32877: PUSH
32878: LD_INT 1
32880: PPUSH
32881: LD_VAR 0 9
32885: PPUSH
32886: CALL_OW 12
32890: ARRAY
32891: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32892: LD_VAR 0 2
32896: PPUSH
32897: LD_VAR 0 3
32901: PPUSH
32902: CALL 33151 0 2
32906: NOT
32907: IFFALSE 32966
// repeat engine := _engine [ 1 ] ;
32909: LD_ADDR_VAR 0 3
32913: PUSH
32914: LD_VAR 0 11
32918: PUSH
32919: LD_INT 1
32921: ARRAY
32922: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32923: LD_ADDR_VAR 0 11
32927: PUSH
32928: LD_VAR 0 11
32932: PPUSH
32933: LD_INT 1
32935: PPUSH
32936: CALL_OW 3
32940: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32941: LD_VAR 0 2
32945: PPUSH
32946: LD_VAR 0 3
32950: PPUSH
32951: CALL 33151 0 2
32955: PUSH
32956: LD_VAR 0 11
32960: PUSH
32961: EMPTY
32962: EQUAL
32963: OR
32964: IFFALSE 32909
// if not control in _control then
32966: LD_VAR 0 4
32970: PUSH
32971: LD_VAR 0 12
32975: IN
32976: NOT
32977: IFFALSE 33003
// control := _control [ rand ( 1 , _control ) ] ;
32979: LD_ADDR_VAR 0 4
32983: PUSH
32984: LD_VAR 0 12
32988: PUSH
32989: LD_INT 1
32991: PPUSH
32992: LD_VAR 0 12
32996: PPUSH
32997: CALL_OW 12
33001: ARRAY
33002: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33003: LD_VAR 0 2
33007: PPUSH
33008: LD_VAR 0 5
33012: PPUSH
33013: CALL 33371 0 2
33017: NOT
33018: IFFALSE 33077
// repeat weapon := _weapon [ 1 ] ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 10
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33034: LD_ADDR_VAR 0 10
33038: PUSH
33039: LD_VAR 0 10
33043: PPUSH
33044: LD_INT 1
33046: PPUSH
33047: CALL_OW 3
33051: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33052: LD_VAR 0 2
33056: PPUSH
33057: LD_VAR 0 5
33061: PPUSH
33062: CALL 33371 0 2
33066: PUSH
33067: LD_VAR 0 10
33071: PUSH
33072: EMPTY
33073: EQUAL
33074: OR
33075: IFFALSE 33020
// result := [ ] ;
33077: LD_ADDR_VAR 0 6
33081: PUSH
33082: EMPTY
33083: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33084: LD_VAR 0 1
33088: PPUSH
33089: LD_VAR 0 2
33093: PPUSH
33094: LD_VAR 0 3
33098: PPUSH
33099: LD_VAR 0 4
33103: PPUSH
33104: LD_VAR 0 5
33108: PPUSH
33109: CALL_OW 448
33113: IFFALSE 33146
// result := [ chassis , engine , control , weapon ] ;
33115: LD_ADDR_VAR 0 6
33119: PUSH
33120: LD_VAR 0 2
33124: PUSH
33125: LD_VAR 0 3
33129: PUSH
33130: LD_VAR 0 4
33134: PUSH
33135: LD_VAR 0 5
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: ST_TO_ADDR
// end ;
33146: LD_VAR 0 6
33150: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33151: LD_INT 0
33153: PPUSH
// if not chassis or not engine then
33154: LD_VAR 0 1
33158: NOT
33159: PUSH
33160: LD_VAR 0 2
33164: NOT
33165: OR
33166: IFFALSE 33170
// exit ;
33168: GO 33366
// case engine of engine_solar :
33170: LD_VAR 0 2
33174: PUSH
33175: LD_INT 2
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33221
33183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
33219: GO 33350
33221: LD_INT 1
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33291
33229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_INT 11
33237: PUSH
33238: LD_INT 12
33240: PUSH
33241: LD_INT 13
33243: PUSH
33244: LD_INT 14
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: LD_INT 3
33255: PUSH
33256: LD_INT 4
33258: PUSH
33259: LD_INT 5
33261: PUSH
33262: LD_INT 21
33264: PUSH
33265: LD_INT 23
33267: PUSH
33268: LD_INT 22
33270: PUSH
33271: LD_INT 24
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: ST_TO_ADDR
33289: GO 33350
33291: LD_INT 3
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33349
33299: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33300: LD_ADDR_VAR 0 3
33304: PUSH
33305: LD_INT 13
33307: PUSH
33308: LD_INT 14
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: LD_INT 4
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: LD_INT 21
33325: PUSH
33326: LD_INT 22
33328: PUSH
33329: LD_INT 23
33331: PUSH
33332: LD_INT 24
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
33347: GO 33350
33349: POP
// result := ( chassis in result ) ;
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_VAR 0 1
33359: PUSH
33360: LD_VAR 0 3
33364: IN
33365: ST_TO_ADDR
// end ;
33366: LD_VAR 0 3
33370: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33371: LD_INT 0
33373: PPUSH
// if not chassis or not weapon then
33374: LD_VAR 0 1
33378: NOT
33379: PUSH
33380: LD_VAR 0 2
33384: NOT
33385: OR
33386: IFFALSE 33390
// exit ;
33388: GO 34450
// case weapon of us_machine_gun :
33390: LD_VAR 0 2
33394: PUSH
33395: LD_INT 2
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33433
33403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 3
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: ST_TO_ADDR
33431: GO 34434
33433: LD_INT 3
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33471
33441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 4
33458: PUSH
33459: LD_INT 5
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: ST_TO_ADDR
33469: GO 34434
33471: LD_INT 11
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33479
33477: GO 33509
33479: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 4
33496: PUSH
33497: LD_INT 5
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
33507: GO 34434
33509: LD_INT 4
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33543
33517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 3
33528: PUSH
33529: LD_INT 4
33531: PUSH
33532: LD_INT 5
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
33541: GO 34434
33543: LD_INT 5
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 33577
33551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33552: LD_ADDR_VAR 0 3
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 5
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
33575: GO 34434
33577: LD_INT 9
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33611
33585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 3
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: LD_INT 5
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: ST_TO_ADDR
33609: GO 34434
33611: LD_INT 7
33613: DOUBLE
33614: EQUAL
33615: IFTRUE 33619
33617: GO 33645
33619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33620: LD_ADDR_VAR 0 3
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
33643: GO 34434
33645: LD_INT 12
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33679
33653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33654: LD_ADDR_VAR 0 3
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: ST_TO_ADDR
33677: GO 34434
33679: LD_INT 13
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33713
33687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: LD_INT 5
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: ST_TO_ADDR
33711: GO 34434
33713: LD_INT 14
33715: DOUBLE
33716: EQUAL
33717: IFTRUE 33721
33719: GO 33739
33721: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33722: LD_ADDR_VAR 0 3
33726: PUSH
33727: LD_INT 4
33729: PUSH
33730: LD_INT 5
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: ST_TO_ADDR
33737: GO 34434
33739: LD_INT 6
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33765
33747: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 4
33755: PUSH
33756: LD_INT 5
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: ST_TO_ADDR
33763: GO 34434
33765: LD_INT 10
33767: DOUBLE
33768: EQUAL
33769: IFTRUE 33773
33771: GO 33791
33773: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33774: LD_ADDR_VAR 0 3
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: LD_INT 5
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: ST_TO_ADDR
33789: GO 34434
33791: LD_INT 22
33793: DOUBLE
33794: EQUAL
33795: IFTRUE 33799
33797: GO 33825
33799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_INT 11
33807: PUSH
33808: LD_INT 12
33810: PUSH
33811: LD_INT 13
33813: PUSH
33814: LD_INT 14
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: ST_TO_ADDR
33823: GO 34434
33825: LD_INT 23
33827: DOUBLE
33828: EQUAL
33829: IFTRUE 33833
33831: GO 33859
33833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33834: LD_ADDR_VAR 0 3
33838: PUSH
33839: LD_INT 11
33841: PUSH
33842: LD_INT 12
33844: PUSH
33845: LD_INT 13
33847: PUSH
33848: LD_INT 14
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
33857: GO 34434
33859: LD_INT 24
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33893
33867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_INT 11
33875: PUSH
33876: LD_INT 12
33878: PUSH
33879: LD_INT 13
33881: PUSH
33882: LD_INT 14
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
33891: GO 34434
33893: LD_INT 30
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33927
33901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 11
33909: PUSH
33910: LD_INT 12
33912: PUSH
33913: LD_INT 13
33915: PUSH
33916: LD_INT 14
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: ST_TO_ADDR
33925: GO 34434
33927: LD_INT 25
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33953
33935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33936: LD_ADDR_VAR 0 3
33940: PUSH
33941: LD_INT 13
33943: PUSH
33944: LD_INT 14
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: ST_TO_ADDR
33951: GO 34434
33953: LD_INT 27
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33961
33959: GO 33979
33961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33962: LD_ADDR_VAR 0 3
33966: PUSH
33967: LD_INT 13
33969: PUSH
33970: LD_INT 14
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: ST_TO_ADDR
33977: GO 34434
33979: LD_INT 92
33981: DOUBLE
33982: EQUAL
33983: IFTRUE 33987
33985: GO 34013
33987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33988: LD_ADDR_VAR 0 3
33992: PUSH
33993: LD_INT 11
33995: PUSH
33996: LD_INT 12
33998: PUSH
33999: LD_INT 13
34001: PUSH
34002: LD_INT 14
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: ST_TO_ADDR
34011: GO 34434
34013: LD_INT 28
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34021
34019: GO 34039
34021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 13
34029: PUSH
34030: LD_INT 14
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: ST_TO_ADDR
34037: GO 34434
34039: LD_INT 29
34041: DOUBLE
34042: EQUAL
34043: IFTRUE 34047
34045: GO 34065
34047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34048: LD_ADDR_VAR 0 3
34052: PUSH
34053: LD_INT 13
34055: PUSH
34056: LD_INT 14
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: ST_TO_ADDR
34063: GO 34434
34065: LD_INT 31
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34073
34071: GO 34091
34073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34074: LD_ADDR_VAR 0 3
34078: PUSH
34079: LD_INT 13
34081: PUSH
34082: LD_INT 14
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: ST_TO_ADDR
34089: GO 34434
34091: LD_INT 26
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34117
34099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34100: LD_ADDR_VAR 0 3
34104: PUSH
34105: LD_INT 13
34107: PUSH
34108: LD_INT 14
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34434
34117: LD_INT 42
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34151
34125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 21
34133: PUSH
34134: LD_INT 22
34136: PUSH
34137: LD_INT 23
34139: PUSH
34140: LD_INT 24
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
34149: GO 34434
34151: LD_INT 43
34153: DOUBLE
34154: EQUAL
34155: IFTRUE 34159
34157: GO 34185
34159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34160: LD_ADDR_VAR 0 3
34164: PUSH
34165: LD_INT 21
34167: PUSH
34168: LD_INT 22
34170: PUSH
34171: LD_INT 23
34173: PUSH
34174: LD_INT 24
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: ST_TO_ADDR
34183: GO 34434
34185: LD_INT 44
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34219
34193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 21
34201: PUSH
34202: LD_INT 22
34204: PUSH
34205: LD_INT 23
34207: PUSH
34208: LD_INT 24
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: ST_TO_ADDR
34217: GO 34434
34219: LD_INT 45
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34253
34227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_INT 21
34235: PUSH
34236: LD_INT 22
34238: PUSH
34239: LD_INT 23
34241: PUSH
34242: LD_INT 24
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
34251: GO 34434
34253: LD_INT 49
34255: DOUBLE
34256: EQUAL
34257: IFTRUE 34261
34259: GO 34287
34261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34262: LD_ADDR_VAR 0 3
34266: PUSH
34267: LD_INT 21
34269: PUSH
34270: LD_INT 22
34272: PUSH
34273: LD_INT 23
34275: PUSH
34276: LD_INT 24
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
34285: GO 34434
34287: LD_INT 51
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34321
34295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34296: LD_ADDR_VAR 0 3
34300: PUSH
34301: LD_INT 21
34303: PUSH
34304: LD_INT 22
34306: PUSH
34307: LD_INT 23
34309: PUSH
34310: LD_INT 24
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: ST_TO_ADDR
34319: GO 34434
34321: LD_INT 52
34323: DOUBLE
34324: EQUAL
34325: IFTRUE 34329
34327: GO 34355
34329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34330: LD_ADDR_VAR 0 3
34334: PUSH
34335: LD_INT 21
34337: PUSH
34338: LD_INT 22
34340: PUSH
34341: LD_INT 23
34343: PUSH
34344: LD_INT 24
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: ST_TO_ADDR
34353: GO 34434
34355: LD_INT 53
34357: DOUBLE
34358: EQUAL
34359: IFTRUE 34363
34361: GO 34381
34363: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34364: LD_ADDR_VAR 0 3
34368: PUSH
34369: LD_INT 23
34371: PUSH
34372: LD_INT 24
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: ST_TO_ADDR
34379: GO 34434
34381: LD_INT 46
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34407
34389: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_INT 23
34397: PUSH
34398: LD_INT 24
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: ST_TO_ADDR
34405: GO 34434
34407: LD_INT 47
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34433
34415: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_INT 23
34423: PUSH
34424: LD_INT 24
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: ST_TO_ADDR
34431: GO 34434
34433: POP
// result := ( chassis in result ) ;
34434: LD_ADDR_VAR 0 3
34438: PUSH
34439: LD_VAR 0 1
34443: PUSH
34444: LD_VAR 0 3
34448: IN
34449: ST_TO_ADDR
// end ;
34450: LD_VAR 0 3
34454: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34455: LD_INT 0
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
// result := array ;
34464: LD_ADDR_VAR 0 5
34468: PUSH
34469: LD_VAR 0 1
34473: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34474: LD_VAR 0 1
34478: NOT
34479: PUSH
34480: LD_VAR 0 2
34484: NOT
34485: OR
34486: PUSH
34487: LD_VAR 0 3
34491: NOT
34492: OR
34493: PUSH
34494: LD_VAR 0 2
34498: PUSH
34499: LD_VAR 0 1
34503: GREATER
34504: OR
34505: PUSH
34506: LD_VAR 0 3
34510: PUSH
34511: LD_VAR 0 1
34515: GREATER
34516: OR
34517: IFFALSE 34521
// exit ;
34519: GO 34817
// if direction then
34521: LD_VAR 0 4
34525: IFFALSE 34589
// begin d := 1 ;
34527: LD_ADDR_VAR 0 9
34531: PUSH
34532: LD_INT 1
34534: ST_TO_ADDR
// if i_from > i_to then
34535: LD_VAR 0 2
34539: PUSH
34540: LD_VAR 0 3
34544: GREATER
34545: IFFALSE 34571
// length := ( array - i_from ) + i_to else
34547: LD_ADDR_VAR 0 11
34551: PUSH
34552: LD_VAR 0 1
34556: PUSH
34557: LD_VAR 0 2
34561: MINUS
34562: PUSH
34563: LD_VAR 0 3
34567: PLUS
34568: ST_TO_ADDR
34569: GO 34587
// length := i_to - i_from ;
34571: LD_ADDR_VAR 0 11
34575: PUSH
34576: LD_VAR 0 3
34580: PUSH
34581: LD_VAR 0 2
34585: MINUS
34586: ST_TO_ADDR
// end else
34587: GO 34650
// begin d := - 1 ;
34589: LD_ADDR_VAR 0 9
34593: PUSH
34594: LD_INT 1
34596: NEG
34597: ST_TO_ADDR
// if i_from > i_to then
34598: LD_VAR 0 2
34602: PUSH
34603: LD_VAR 0 3
34607: GREATER
34608: IFFALSE 34628
// length := i_from - i_to else
34610: LD_ADDR_VAR 0 11
34614: PUSH
34615: LD_VAR 0 2
34619: PUSH
34620: LD_VAR 0 3
34624: MINUS
34625: ST_TO_ADDR
34626: GO 34650
// length := ( array - i_to ) + i_from ;
34628: LD_ADDR_VAR 0 11
34632: PUSH
34633: LD_VAR 0 1
34637: PUSH
34638: LD_VAR 0 3
34642: MINUS
34643: PUSH
34644: LD_VAR 0 2
34648: PLUS
34649: ST_TO_ADDR
// end ; if not length then
34650: LD_VAR 0 11
34654: NOT
34655: IFFALSE 34659
// exit ;
34657: GO 34817
// tmp := array ;
34659: LD_ADDR_VAR 0 10
34663: PUSH
34664: LD_VAR 0 1
34668: ST_TO_ADDR
// for i = 1 to length do
34669: LD_ADDR_VAR 0 6
34673: PUSH
34674: DOUBLE
34675: LD_INT 1
34677: DEC
34678: ST_TO_ADDR
34679: LD_VAR 0 11
34683: PUSH
34684: FOR_TO
34685: IFFALSE 34805
// begin for j = 1 to array do
34687: LD_ADDR_VAR 0 7
34691: PUSH
34692: DOUBLE
34693: LD_INT 1
34695: DEC
34696: ST_TO_ADDR
34697: LD_VAR 0 1
34701: PUSH
34702: FOR_TO
34703: IFFALSE 34791
// begin k := j + d ;
34705: LD_ADDR_VAR 0 8
34709: PUSH
34710: LD_VAR 0 7
34714: PUSH
34715: LD_VAR 0 9
34719: PLUS
34720: ST_TO_ADDR
// if k > array then
34721: LD_VAR 0 8
34725: PUSH
34726: LD_VAR 0 1
34730: GREATER
34731: IFFALSE 34741
// k := 1 ;
34733: LD_ADDR_VAR 0 8
34737: PUSH
34738: LD_INT 1
34740: ST_TO_ADDR
// if not k then
34741: LD_VAR 0 8
34745: NOT
34746: IFFALSE 34758
// k := array ;
34748: LD_ADDR_VAR 0 8
34752: PUSH
34753: LD_VAR 0 1
34757: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34758: LD_ADDR_VAR 0 10
34762: PUSH
34763: LD_VAR 0 10
34767: PPUSH
34768: LD_VAR 0 8
34772: PPUSH
34773: LD_VAR 0 1
34777: PUSH
34778: LD_VAR 0 7
34782: ARRAY
34783: PPUSH
34784: CALL_OW 1
34788: ST_TO_ADDR
// end ;
34789: GO 34702
34791: POP
34792: POP
// array := tmp ;
34793: LD_ADDR_VAR 0 1
34797: PUSH
34798: LD_VAR 0 10
34802: ST_TO_ADDR
// end ;
34803: GO 34684
34805: POP
34806: POP
// result := array ;
34807: LD_ADDR_VAR 0 5
34811: PUSH
34812: LD_VAR 0 1
34816: ST_TO_ADDR
// end ;
34817: LD_VAR 0 5
34821: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34822: LD_INT 0
34824: PPUSH
34825: PPUSH
// result := 0 ;
34826: LD_ADDR_VAR 0 3
34830: PUSH
34831: LD_INT 0
34833: ST_TO_ADDR
// if not array or not value in array then
34834: LD_VAR 0 1
34838: NOT
34839: PUSH
34840: LD_VAR 0 2
34844: PUSH
34845: LD_VAR 0 1
34849: IN
34850: NOT
34851: OR
34852: IFFALSE 34856
// exit ;
34854: GO 34910
// for i = 1 to array do
34856: LD_ADDR_VAR 0 4
34860: PUSH
34861: DOUBLE
34862: LD_INT 1
34864: DEC
34865: ST_TO_ADDR
34866: LD_VAR 0 1
34870: PUSH
34871: FOR_TO
34872: IFFALSE 34908
// if value = array [ i ] then
34874: LD_VAR 0 2
34878: PUSH
34879: LD_VAR 0 1
34883: PUSH
34884: LD_VAR 0 4
34888: ARRAY
34889: EQUAL
34890: IFFALSE 34906
// begin result := i ;
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: LD_VAR 0 4
34901: ST_TO_ADDR
// exit ;
34902: POP
34903: POP
34904: GO 34910
// end ;
34906: GO 34871
34908: POP
34909: POP
// end ;
34910: LD_VAR 0 3
34914: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34915: LD_INT 0
34917: PPUSH
// vc_chassis := chassis ;
34918: LD_ADDR_OWVAR 37
34922: PUSH
34923: LD_VAR 0 1
34927: ST_TO_ADDR
// vc_engine := engine ;
34928: LD_ADDR_OWVAR 39
34932: PUSH
34933: LD_VAR 0 2
34937: ST_TO_ADDR
// vc_control := control ;
34938: LD_ADDR_OWVAR 38
34942: PUSH
34943: LD_VAR 0 3
34947: ST_TO_ADDR
// vc_weapon := weapon ;
34948: LD_ADDR_OWVAR 40
34952: PUSH
34953: LD_VAR 0 4
34957: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34958: LD_ADDR_OWVAR 41
34962: PUSH
34963: LD_VAR 0 5
34967: ST_TO_ADDR
// end ;
34968: LD_VAR 0 6
34972: RET
// export function WantPlant ( unit ) ; var task ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
// result := false ;
34977: LD_ADDR_VAR 0 2
34981: PUSH
34982: LD_INT 0
34984: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34985: LD_ADDR_VAR 0 3
34989: PUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 437
34999: ST_TO_ADDR
// if task then
35000: LD_VAR 0 3
35004: IFFALSE 35032
// if task [ 1 ] [ 1 ] = p then
35006: LD_VAR 0 3
35010: PUSH
35011: LD_INT 1
35013: ARRAY
35014: PUSH
35015: LD_INT 1
35017: ARRAY
35018: PUSH
35019: LD_STRING p
35021: EQUAL
35022: IFFALSE 35032
// result := true ;
35024: LD_ADDR_VAR 0 2
35028: PUSH
35029: LD_INT 1
35031: ST_TO_ADDR
// end ;
35032: LD_VAR 0 2
35036: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35037: LD_INT 0
35039: PPUSH
35040: PPUSH
35041: PPUSH
35042: PPUSH
// if pos < 1 then
35043: LD_VAR 0 2
35047: PUSH
35048: LD_INT 1
35050: LESS
35051: IFFALSE 35055
// exit ;
35053: GO 35358
// if pos = 1 then
35055: LD_VAR 0 2
35059: PUSH
35060: LD_INT 1
35062: EQUAL
35063: IFFALSE 35096
// result := Replace ( arr , pos [ 1 ] , value ) else
35065: LD_ADDR_VAR 0 4
35069: PUSH
35070: LD_VAR 0 1
35074: PPUSH
35075: LD_VAR 0 2
35079: PUSH
35080: LD_INT 1
35082: ARRAY
35083: PPUSH
35084: LD_VAR 0 3
35088: PPUSH
35089: CALL_OW 1
35093: ST_TO_ADDR
35094: GO 35358
// begin tmp := arr ;
35096: LD_ADDR_VAR 0 6
35100: PUSH
35101: LD_VAR 0 1
35105: ST_TO_ADDR
// s_arr := [ tmp ] ;
35106: LD_ADDR_VAR 0 7
35110: PUSH
35111: LD_VAR 0 6
35115: PUSH
35116: EMPTY
35117: LIST
35118: ST_TO_ADDR
// for i = 1 to pos - 1 do
35119: LD_ADDR_VAR 0 5
35123: PUSH
35124: DOUBLE
35125: LD_INT 1
35127: DEC
35128: ST_TO_ADDR
35129: LD_VAR 0 2
35133: PUSH
35134: LD_INT 1
35136: MINUS
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35184
// begin tmp := tmp [ pos [ i ] ] ;
35141: LD_ADDR_VAR 0 6
35145: PUSH
35146: LD_VAR 0 6
35150: PUSH
35151: LD_VAR 0 2
35155: PUSH
35156: LD_VAR 0 5
35160: ARRAY
35161: ARRAY
35162: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35163: LD_ADDR_VAR 0 7
35167: PUSH
35168: LD_VAR 0 7
35172: PUSH
35173: LD_VAR 0 6
35177: PUSH
35178: EMPTY
35179: LIST
35180: ADD
35181: ST_TO_ADDR
// end ;
35182: GO 35138
35184: POP
35185: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35186: LD_ADDR_VAR 0 6
35190: PUSH
35191: LD_VAR 0 6
35195: PPUSH
35196: LD_VAR 0 2
35200: PUSH
35201: LD_VAR 0 2
35205: ARRAY
35206: PPUSH
35207: LD_VAR 0 3
35211: PPUSH
35212: CALL_OW 1
35216: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35217: LD_ADDR_VAR 0 7
35221: PUSH
35222: LD_VAR 0 7
35226: PPUSH
35227: LD_VAR 0 7
35231: PPUSH
35232: LD_VAR 0 6
35236: PPUSH
35237: CALL_OW 1
35241: ST_TO_ADDR
// for i = s_arr downto 2 do
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: DOUBLE
35248: LD_VAR 0 7
35252: INC
35253: ST_TO_ADDR
35254: LD_INT 2
35256: PUSH
35257: FOR_DOWNTO
35258: IFFALSE 35342
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35260: LD_ADDR_VAR 0 6
35264: PUSH
35265: LD_VAR 0 7
35269: PUSH
35270: LD_VAR 0 5
35274: PUSH
35275: LD_INT 1
35277: MINUS
35278: ARRAY
35279: PPUSH
35280: LD_VAR 0 2
35284: PUSH
35285: LD_VAR 0 5
35289: PUSH
35290: LD_INT 1
35292: MINUS
35293: ARRAY
35294: PPUSH
35295: LD_VAR 0 7
35299: PUSH
35300: LD_VAR 0 5
35304: ARRAY
35305: PPUSH
35306: CALL_OW 1
35310: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35311: LD_ADDR_VAR 0 7
35315: PUSH
35316: LD_VAR 0 7
35320: PPUSH
35321: LD_VAR 0 5
35325: PUSH
35326: LD_INT 1
35328: MINUS
35329: PPUSH
35330: LD_VAR 0 6
35334: PPUSH
35335: CALL_OW 1
35339: ST_TO_ADDR
// end ;
35340: GO 35257
35342: POP
35343: POP
// result := s_arr [ 1 ] ;
35344: LD_ADDR_VAR 0 4
35348: PUSH
35349: LD_VAR 0 7
35353: PUSH
35354: LD_INT 1
35356: ARRAY
35357: ST_TO_ADDR
// end ; end ;
35358: LD_VAR 0 4
35362: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35363: LD_INT 0
35365: PPUSH
35366: PPUSH
// if not list then
35367: LD_VAR 0 1
35371: NOT
35372: IFFALSE 35376
// exit ;
35374: GO 35467
// i := list [ pos1 ] ;
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: LD_VAR 0 1
35385: PUSH
35386: LD_VAR 0 2
35390: ARRAY
35391: ST_TO_ADDR
// if not i then
35392: LD_VAR 0 5
35396: NOT
35397: IFFALSE 35401
// exit ;
35399: GO 35467
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35401: LD_ADDR_VAR 0 1
35405: PUSH
35406: LD_VAR 0 1
35410: PPUSH
35411: LD_VAR 0 2
35415: PPUSH
35416: LD_VAR 0 1
35420: PUSH
35421: LD_VAR 0 3
35425: ARRAY
35426: PPUSH
35427: CALL_OW 1
35431: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35432: LD_ADDR_VAR 0 1
35436: PUSH
35437: LD_VAR 0 1
35441: PPUSH
35442: LD_VAR 0 3
35446: PPUSH
35447: LD_VAR 0 5
35451: PPUSH
35452: CALL_OW 1
35456: ST_TO_ADDR
// result := list ;
35457: LD_ADDR_VAR 0 4
35461: PUSH
35462: LD_VAR 0 1
35466: ST_TO_ADDR
// end ;
35467: LD_VAR 0 4
35471: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35472: LD_INT 0
35474: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35475: LD_ADDR_VAR 0 5
35479: PUSH
35480: LD_VAR 0 1
35484: PPUSH
35485: CALL_OW 250
35489: PPUSH
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL_OW 251
35499: PPUSH
35500: LD_VAR 0 2
35504: PPUSH
35505: LD_VAR 0 3
35509: PPUSH
35510: LD_VAR 0 4
35514: PPUSH
35515: CALL 35525 0 5
35519: ST_TO_ADDR
// end ;
35520: LD_VAR 0 5
35524: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35525: LD_INT 0
35527: PPUSH
35528: PPUSH
35529: PPUSH
35530: PPUSH
// if not list then
35531: LD_VAR 0 3
35535: NOT
35536: IFFALSE 35540
// exit ;
35538: GO 35928
// result := [ ] ;
35540: LD_ADDR_VAR 0 6
35544: PUSH
35545: EMPTY
35546: ST_TO_ADDR
// for i in list do
35547: LD_ADDR_VAR 0 7
35551: PUSH
35552: LD_VAR 0 3
35556: PUSH
35557: FOR_IN
35558: IFFALSE 35760
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35560: LD_ADDR_VAR 0 9
35564: PUSH
35565: LD_VAR 0 7
35569: PPUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: LD_VAR 0 2
35579: PPUSH
35580: CALL_OW 297
35584: ST_TO_ADDR
// if not result then
35585: LD_VAR 0 6
35589: NOT
35590: IFFALSE 35616
// result := [ [ i , tmp ] ] else
35592: LD_ADDR_VAR 0 6
35596: PUSH
35597: LD_VAR 0 7
35601: PUSH
35602: LD_VAR 0 9
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: ST_TO_ADDR
35614: GO 35758
// begin if result [ result ] [ 2 ] < tmp then
35616: LD_VAR 0 6
35620: PUSH
35621: LD_VAR 0 6
35625: ARRAY
35626: PUSH
35627: LD_INT 2
35629: ARRAY
35630: PUSH
35631: LD_VAR 0 9
35635: LESS
35636: IFFALSE 35678
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35638: LD_ADDR_VAR 0 6
35642: PUSH
35643: LD_VAR 0 6
35647: PPUSH
35648: LD_VAR 0 6
35652: PUSH
35653: LD_INT 1
35655: PLUS
35656: PPUSH
35657: LD_VAR 0 7
35661: PUSH
35662: LD_VAR 0 9
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PPUSH
35671: CALL_OW 2
35675: ST_TO_ADDR
35676: GO 35758
// for j = 1 to result do
35678: LD_ADDR_VAR 0 8
35682: PUSH
35683: DOUBLE
35684: LD_INT 1
35686: DEC
35687: ST_TO_ADDR
35688: LD_VAR 0 6
35692: PUSH
35693: FOR_TO
35694: IFFALSE 35756
// begin if tmp < result [ j ] [ 2 ] then
35696: LD_VAR 0 9
35700: PUSH
35701: LD_VAR 0 6
35705: PUSH
35706: LD_VAR 0 8
35710: ARRAY
35711: PUSH
35712: LD_INT 2
35714: ARRAY
35715: LESS
35716: IFFALSE 35754
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35718: LD_ADDR_VAR 0 6
35722: PUSH
35723: LD_VAR 0 6
35727: PPUSH
35728: LD_VAR 0 8
35732: PPUSH
35733: LD_VAR 0 7
35737: PUSH
35738: LD_VAR 0 9
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 2
35751: ST_TO_ADDR
// break ;
35752: GO 35756
// end ; end ;
35754: GO 35693
35756: POP
35757: POP
// end ; end ;
35758: GO 35557
35760: POP
35761: POP
// if result and not asc then
35762: LD_VAR 0 6
35766: PUSH
35767: LD_VAR 0 4
35771: NOT
35772: AND
35773: IFFALSE 35848
// begin tmp := result ;
35775: LD_ADDR_VAR 0 9
35779: PUSH
35780: LD_VAR 0 6
35784: ST_TO_ADDR
// for i = tmp downto 1 do
35785: LD_ADDR_VAR 0 7
35789: PUSH
35790: DOUBLE
35791: LD_VAR 0 9
35795: INC
35796: ST_TO_ADDR
35797: LD_INT 1
35799: PUSH
35800: FOR_DOWNTO
35801: IFFALSE 35846
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35803: LD_ADDR_VAR 0 6
35807: PUSH
35808: LD_VAR 0 6
35812: PPUSH
35813: LD_VAR 0 9
35817: PUSH
35818: LD_VAR 0 7
35822: MINUS
35823: PUSH
35824: LD_INT 1
35826: PLUS
35827: PPUSH
35828: LD_VAR 0 9
35832: PUSH
35833: LD_VAR 0 7
35837: ARRAY
35838: PPUSH
35839: CALL_OW 1
35843: ST_TO_ADDR
35844: GO 35800
35846: POP
35847: POP
// end ; tmp := [ ] ;
35848: LD_ADDR_VAR 0 9
35852: PUSH
35853: EMPTY
35854: ST_TO_ADDR
// if mode then
35855: LD_VAR 0 5
35859: IFFALSE 35928
// begin for i = 1 to result do
35861: LD_ADDR_VAR 0 7
35865: PUSH
35866: DOUBLE
35867: LD_INT 1
35869: DEC
35870: ST_TO_ADDR
35871: LD_VAR 0 6
35875: PUSH
35876: FOR_TO
35877: IFFALSE 35916
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35879: LD_ADDR_VAR 0 9
35883: PUSH
35884: LD_VAR 0 9
35888: PPUSH
35889: LD_VAR 0 7
35893: PPUSH
35894: LD_VAR 0 6
35898: PUSH
35899: LD_VAR 0 7
35903: ARRAY
35904: PUSH
35905: LD_INT 1
35907: ARRAY
35908: PPUSH
35909: CALL_OW 1
35913: ST_TO_ADDR
35914: GO 35876
35916: POP
35917: POP
// result := tmp ;
35918: LD_ADDR_VAR 0 6
35922: PUSH
35923: LD_VAR 0 9
35927: ST_TO_ADDR
// end ; end ;
35928: LD_VAR 0 6
35932: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35933: LD_INT 0
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35941: LD_ADDR_VAR 0 5
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// if not x or not y then
35963: LD_VAR 0 2
35967: NOT
35968: PUSH
35969: LD_VAR 0 3
35973: NOT
35974: OR
35975: IFFALSE 35979
// exit ;
35977: GO 37629
// if not range then
35979: LD_VAR 0 4
35983: NOT
35984: IFFALSE 35994
// range := 10 ;
35986: LD_ADDR_VAR 0 4
35990: PUSH
35991: LD_INT 10
35993: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35994: LD_ADDR_VAR 0 8
35998: PUSH
35999: LD_INT 81
36001: PUSH
36002: LD_VAR 0 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 92
36013: PUSH
36014: LD_VAR 0 2
36018: PUSH
36019: LD_VAR 0 3
36023: PUSH
36024: LD_VAR 0 4
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: LD_INT 21
36040: PUSH
36041: LD_INT 3
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: PPUSH
36057: CALL_OW 69
36061: ST_TO_ADDR
// if not tmp then
36062: LD_VAR 0 8
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 37629
// for i in tmp do
36071: LD_ADDR_VAR 0 6
36075: PUSH
36076: LD_VAR 0 8
36080: PUSH
36081: FOR_IN
36082: IFFALSE 37604
// begin points := [ 0 , 0 , 0 ] ;
36084: LD_ADDR_VAR 0 9
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// bpoints := 1 ;
36103: LD_ADDR_VAR 0 10
36107: PUSH
36108: LD_INT 1
36110: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36111: LD_VAR 0 6
36115: PPUSH
36116: CALL_OW 247
36120: PUSH
36121: LD_INT 1
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36129
36127: GO 36707
36129: POP
// begin if GetClass ( i ) = 1 then
36130: LD_VAR 0 6
36134: PPUSH
36135: CALL_OW 257
36139: PUSH
36140: LD_INT 1
36142: EQUAL
36143: IFFALSE 36164
// points := [ 10 , 5 , 3 ] ;
36145: LD_ADDR_VAR 0 9
36149: PUSH
36150: LD_INT 10
36152: PUSH
36153: LD_INT 5
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36164: LD_VAR 0 6
36168: PPUSH
36169: CALL_OW 257
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: IN
36188: IFFALSE 36209
// points := [ 3 , 2 , 1 ] ;
36190: LD_ADDR_VAR 0 9
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36209: LD_VAR 0 6
36213: PPUSH
36214: CALL_OW 257
36218: PUSH
36219: LD_INT 5
36221: EQUAL
36222: IFFALSE 36243
// points := [ 130 , 5 , 2 ] ;
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_INT 130
36231: PUSH
36232: LD_INT 5
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36243: LD_VAR 0 6
36247: PPUSH
36248: CALL_OW 257
36252: PUSH
36253: LD_INT 8
36255: EQUAL
36256: IFFALSE 36277
// points := [ 35 , 35 , 30 ] ;
36258: LD_ADDR_VAR 0 9
36262: PUSH
36263: LD_INT 35
36265: PUSH
36266: LD_INT 35
36268: PUSH
36269: LD_INT 30
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36277: LD_VAR 0 6
36281: PPUSH
36282: CALL_OW 257
36286: PUSH
36287: LD_INT 9
36289: EQUAL
36290: IFFALSE 36311
// points := [ 20 , 55 , 40 ] ;
36292: LD_ADDR_VAR 0 9
36296: PUSH
36297: LD_INT 20
36299: PUSH
36300: LD_INT 55
36302: PUSH
36303: LD_INT 40
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36311: LD_VAR 0 6
36315: PPUSH
36316: CALL_OW 257
36320: PUSH
36321: LD_INT 12
36323: PUSH
36324: LD_INT 16
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: IN
36331: IFFALSE 36352
// points := [ 5 , 3 , 2 ] ;
36333: LD_ADDR_VAR 0 9
36337: PUSH
36338: LD_INT 5
36340: PUSH
36341: LD_INT 3
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36352: LD_VAR 0 6
36356: PPUSH
36357: CALL_OW 257
36361: PUSH
36362: LD_INT 17
36364: EQUAL
36365: IFFALSE 36386
// points := [ 100 , 50 , 75 ] ;
36367: LD_ADDR_VAR 0 9
36371: PUSH
36372: LD_INT 100
36374: PUSH
36375: LD_INT 50
36377: PUSH
36378: LD_INT 75
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36386: LD_VAR 0 6
36390: PPUSH
36391: CALL_OW 257
36395: PUSH
36396: LD_INT 15
36398: EQUAL
36399: IFFALSE 36420
// points := [ 10 , 5 , 3 ] ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: LD_INT 10
36408: PUSH
36409: LD_INT 5
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36420: LD_VAR 0 6
36424: PPUSH
36425: CALL_OW 257
36429: PUSH
36430: LD_INT 14
36432: EQUAL
36433: IFFALSE 36454
// points := [ 10 , 0 , 0 ] ;
36435: LD_ADDR_VAR 0 9
36439: PUSH
36440: LD_INT 10
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36454: LD_VAR 0 6
36458: PPUSH
36459: CALL_OW 257
36463: PUSH
36464: LD_INT 11
36466: EQUAL
36467: IFFALSE 36488
// points := [ 30 , 10 , 5 ] ;
36469: LD_ADDR_VAR 0 9
36473: PUSH
36474: LD_INT 30
36476: PUSH
36477: LD_INT 10
36479: PUSH
36480: LD_INT 5
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36488: LD_VAR 0 1
36492: PPUSH
36493: LD_INT 5
36495: PPUSH
36496: CALL_OW 321
36500: PUSH
36501: LD_INT 2
36503: EQUAL
36504: IFFALSE 36521
// bpoints := bpoints * 1.8 ;
36506: LD_ADDR_VAR 0 10
36510: PUSH
36511: LD_VAR 0 10
36515: PUSH
36516: LD_REAL  1.80000000000000E+0000
36519: MUL
36520: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36521: LD_VAR 0 6
36525: PPUSH
36526: CALL_OW 257
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: LD_INT 3
36539: PUSH
36540: LD_INT 4
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: IN
36549: PUSH
36550: LD_VAR 0 1
36554: PPUSH
36555: LD_INT 51
36557: PPUSH
36558: CALL_OW 321
36562: PUSH
36563: LD_INT 2
36565: EQUAL
36566: AND
36567: IFFALSE 36584
// bpoints := bpoints * 1.2 ;
36569: LD_ADDR_VAR 0 10
36573: PUSH
36574: LD_VAR 0 10
36578: PUSH
36579: LD_REAL  1.20000000000000E+0000
36582: MUL
36583: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36584: LD_VAR 0 6
36588: PPUSH
36589: CALL_OW 257
36593: PUSH
36594: LD_INT 5
36596: PUSH
36597: LD_INT 7
36599: PUSH
36600: LD_INT 9
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: IN
36608: PUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: LD_INT 52
36616: PPUSH
36617: CALL_OW 321
36621: PUSH
36622: LD_INT 2
36624: EQUAL
36625: AND
36626: IFFALSE 36643
// bpoints := bpoints * 1.5 ;
36628: LD_ADDR_VAR 0 10
36632: PUSH
36633: LD_VAR 0 10
36637: PUSH
36638: LD_REAL  1.50000000000000E+0000
36641: MUL
36642: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36643: LD_VAR 0 1
36647: PPUSH
36648: LD_INT 66
36650: PPUSH
36651: CALL_OW 321
36655: PUSH
36656: LD_INT 2
36658: EQUAL
36659: IFFALSE 36676
// bpoints := bpoints * 1.1 ;
36661: LD_ADDR_VAR 0 10
36665: PUSH
36666: LD_VAR 0 10
36670: PUSH
36671: LD_REAL  1.10000000000000E+0000
36674: MUL
36675: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36676: LD_ADDR_VAR 0 10
36680: PUSH
36681: LD_VAR 0 10
36685: PUSH
36686: LD_VAR 0 6
36690: PPUSH
36691: LD_INT 1
36693: PPUSH
36694: CALL_OW 259
36698: PUSH
36699: LD_REAL  1.15000000000000E+0000
36702: MUL
36703: MUL
36704: ST_TO_ADDR
// end ; unit_vehicle :
36705: GO 37533
36707: LD_INT 2
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36715
36713: GO 37521
36715: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36716: LD_VAR 0 6
36720: PPUSH
36721: CALL_OW 264
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 42
36731: PUSH
36732: LD_INT 24
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: IN
36740: IFFALSE 36761
// points := [ 25 , 5 , 3 ] ;
36742: LD_ADDR_VAR 0 9
36746: PUSH
36747: LD_INT 25
36749: PUSH
36750: LD_INT 5
36752: PUSH
36753: LD_INT 3
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 264
36770: PUSH
36771: LD_INT 4
36773: PUSH
36774: LD_INT 43
36776: PUSH
36777: LD_INT 25
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: IN
36785: IFFALSE 36806
// points := [ 40 , 15 , 5 ] ;
36787: LD_ADDR_VAR 0 9
36791: PUSH
36792: LD_INT 40
36794: PUSH
36795: LD_INT 15
36797: PUSH
36798: LD_INT 5
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36806: LD_VAR 0 6
36810: PPUSH
36811: CALL_OW 264
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: LD_INT 23
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: IN
36826: IFFALSE 36847
// points := [ 7 , 25 , 8 ] ;
36828: LD_ADDR_VAR 0 9
36832: PUSH
36833: LD_INT 7
36835: PUSH
36836: LD_INT 25
36838: PUSH
36839: LD_INT 8
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36847: LD_VAR 0 6
36851: PPUSH
36852: CALL_OW 264
36856: PUSH
36857: LD_INT 5
36859: PUSH
36860: LD_INT 27
36862: PUSH
36863: LD_INT 44
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: IN
36871: IFFALSE 36892
// points := [ 14 , 50 , 16 ] ;
36873: LD_ADDR_VAR 0 9
36877: PUSH
36878: LD_INT 14
36880: PUSH
36881: LD_INT 50
36883: PUSH
36884: LD_INT 16
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36892: LD_VAR 0 6
36896: PPUSH
36897: CALL_OW 264
36901: PUSH
36902: LD_INT 6
36904: PUSH
36905: LD_INT 46
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: IN
36912: IFFALSE 36933
// points := [ 32 , 120 , 70 ] ;
36914: LD_ADDR_VAR 0 9
36918: PUSH
36919: LD_INT 32
36921: PUSH
36922: LD_INT 120
36924: PUSH
36925: LD_INT 70
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36933: LD_VAR 0 6
36937: PPUSH
36938: CALL_OW 264
36942: PUSH
36943: LD_INT 7
36945: PUSH
36946: LD_INT 28
36948: PUSH
36949: LD_INT 45
36951: PUSH
36952: LD_INT 92
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: IN
36961: IFFALSE 36982
// points := [ 35 , 20 , 45 ] ;
36963: LD_ADDR_VAR 0 9
36967: PUSH
36968: LD_INT 35
36970: PUSH
36971: LD_INT 20
36973: PUSH
36974: LD_INT 45
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36982: LD_VAR 0 6
36986: PPUSH
36987: CALL_OW 264
36991: PUSH
36992: LD_INT 47
36994: PUSH
36995: EMPTY
36996: LIST
36997: IN
36998: IFFALSE 37019
// points := [ 67 , 45 , 75 ] ;
37000: LD_ADDR_VAR 0 9
37004: PUSH
37005: LD_INT 67
37007: PUSH
37008: LD_INT 45
37010: PUSH
37011: LD_INT 75
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37019: LD_VAR 0 6
37023: PPUSH
37024: CALL_OW 264
37028: PUSH
37029: LD_INT 26
37031: PUSH
37032: EMPTY
37033: LIST
37034: IN
37035: IFFALSE 37056
// points := [ 120 , 30 , 80 ] ;
37037: LD_ADDR_VAR 0 9
37041: PUSH
37042: LD_INT 120
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: LD_INT 80
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37056: LD_VAR 0 6
37060: PPUSH
37061: CALL_OW 264
37065: PUSH
37066: LD_INT 22
37068: PUSH
37069: EMPTY
37070: LIST
37071: IN
37072: IFFALSE 37093
// points := [ 40 , 1 , 1 ] ;
37074: LD_ADDR_VAR 0 9
37078: PUSH
37079: LD_INT 40
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37093: LD_VAR 0 6
37097: PPUSH
37098: CALL_OW 264
37102: PUSH
37103: LD_INT 29
37105: PUSH
37106: EMPTY
37107: LIST
37108: IN
37109: IFFALSE 37130
// points := [ 70 , 200 , 400 ] ;
37111: LD_ADDR_VAR 0 9
37115: PUSH
37116: LD_INT 70
37118: PUSH
37119: LD_INT 200
37121: PUSH
37122: LD_INT 400
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37130: LD_VAR 0 6
37134: PPUSH
37135: CALL_OW 264
37139: PUSH
37140: LD_INT 14
37142: PUSH
37143: LD_INT 53
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: IN
37150: IFFALSE 37171
// points := [ 40 , 10 , 20 ] ;
37152: LD_ADDR_VAR 0 9
37156: PUSH
37157: LD_INT 40
37159: PUSH
37160: LD_INT 10
37162: PUSH
37163: LD_INT 20
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37171: LD_VAR 0 6
37175: PPUSH
37176: CALL_OW 264
37180: PUSH
37181: LD_INT 9
37183: PUSH
37184: EMPTY
37185: LIST
37186: IN
37187: IFFALSE 37208
// points := [ 5 , 70 , 20 ] ;
37189: LD_ADDR_VAR 0 9
37193: PUSH
37194: LD_INT 5
37196: PUSH
37197: LD_INT 70
37199: PUSH
37200: LD_INT 20
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37208: LD_VAR 0 6
37212: PPUSH
37213: CALL_OW 264
37217: PUSH
37218: LD_INT 10
37220: PUSH
37221: EMPTY
37222: LIST
37223: IN
37224: IFFALSE 37245
// points := [ 35 , 110 , 70 ] ;
37226: LD_ADDR_VAR 0 9
37230: PUSH
37231: LD_INT 35
37233: PUSH
37234: LD_INT 110
37236: PUSH
37237: LD_INT 70
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37245: LD_VAR 0 6
37249: PPUSH
37250: CALL_OW 265
37254: PUSH
37255: LD_INT 25
37257: EQUAL
37258: IFFALSE 37279
// points := [ 80 , 65 , 100 ] ;
37260: LD_ADDR_VAR 0 9
37264: PUSH
37265: LD_INT 80
37267: PUSH
37268: LD_INT 65
37270: PUSH
37271: LD_INT 100
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 263
37288: PUSH
37289: LD_INT 1
37291: EQUAL
37292: IFFALSE 37327
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37294: LD_ADDR_VAR 0 10
37298: PUSH
37299: LD_VAR 0 10
37303: PUSH
37304: LD_VAR 0 6
37308: PPUSH
37309: CALL_OW 311
37313: PPUSH
37314: LD_INT 3
37316: PPUSH
37317: CALL_OW 259
37321: PUSH
37322: LD_INT 4
37324: MUL
37325: MUL
37326: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37327: LD_VAR 0 6
37331: PPUSH
37332: CALL_OW 263
37336: PUSH
37337: LD_INT 2
37339: EQUAL
37340: IFFALSE 37391
// begin j := IsControledBy ( i ) ;
37342: LD_ADDR_VAR 0 7
37346: PUSH
37347: LD_VAR 0 6
37351: PPUSH
37352: CALL_OW 312
37356: ST_TO_ADDR
// if j then
37357: LD_VAR 0 7
37361: IFFALSE 37391
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37363: LD_ADDR_VAR 0 10
37367: PUSH
37368: LD_VAR 0 10
37372: PUSH
37373: LD_VAR 0 7
37377: PPUSH
37378: LD_INT 3
37380: PPUSH
37381: CALL_OW 259
37385: PUSH
37386: LD_INT 3
37388: MUL
37389: MUL
37390: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 264
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: LD_INT 6
37406: PUSH
37407: LD_INT 46
37409: PUSH
37410: LD_INT 44
37412: PUSH
37413: LD_INT 47
37415: PUSH
37416: LD_INT 45
37418: PUSH
37419: LD_INT 28
37421: PUSH
37422: LD_INT 7
37424: PUSH
37425: LD_INT 27
37427: PUSH
37428: LD_INT 29
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: IN
37443: PUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: LD_INT 52
37451: PPUSH
37452: CALL_OW 321
37456: PUSH
37457: LD_INT 2
37459: EQUAL
37460: AND
37461: IFFALSE 37478
// bpoints := bpoints * 1.2 ;
37463: LD_ADDR_VAR 0 10
37467: PUSH
37468: LD_VAR 0 10
37472: PUSH
37473: LD_REAL  1.20000000000000E+0000
37476: MUL
37477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37478: LD_VAR 0 6
37482: PPUSH
37483: CALL_OW 264
37487: PUSH
37488: LD_INT 6
37490: PUSH
37491: LD_INT 46
37493: PUSH
37494: LD_INT 47
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: IN
37502: IFFALSE 37519
// bpoints := bpoints * 1.2 ;
37504: LD_ADDR_VAR 0 10
37508: PUSH
37509: LD_VAR 0 10
37513: PUSH
37514: LD_REAL  1.20000000000000E+0000
37517: MUL
37518: ST_TO_ADDR
// end ; unit_building :
37519: GO 37533
37521: LD_INT 3
37523: DOUBLE
37524: EQUAL
37525: IFTRUE 37529
37527: GO 37532
37529: POP
// ; end ;
37530: GO 37533
37532: POP
// for j = 1 to 3 do
37533: LD_ADDR_VAR 0 7
37537: PUSH
37538: DOUBLE
37539: LD_INT 1
37541: DEC
37542: ST_TO_ADDR
37543: LD_INT 3
37545: PUSH
37546: FOR_TO
37547: IFFALSE 37600
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: LD_VAR 0 5
37558: PPUSH
37559: LD_VAR 0 7
37563: PPUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_VAR 0 7
37573: ARRAY
37574: PUSH
37575: LD_VAR 0 9
37579: PUSH
37580: LD_VAR 0 7
37584: ARRAY
37585: PUSH
37586: LD_VAR 0 10
37590: MUL
37591: PLUS
37592: PPUSH
37593: CALL_OW 1
37597: ST_TO_ADDR
37598: GO 37546
37600: POP
37601: POP
// end ;
37602: GO 36081
37604: POP
37605: POP
// result := Replace ( result , 4 , tmp ) ;
37606: LD_ADDR_VAR 0 5
37610: PUSH
37611: LD_VAR 0 5
37615: PPUSH
37616: LD_INT 4
37618: PPUSH
37619: LD_VAR 0 8
37623: PPUSH
37624: CALL_OW 1
37628: ST_TO_ADDR
// end ;
37629: LD_VAR 0 5
37633: RET
// export function DangerAtRange ( unit , range ) ; begin
37634: LD_INT 0
37636: PPUSH
// if not unit then
37637: LD_VAR 0 1
37641: NOT
37642: IFFALSE 37646
// exit ;
37644: GO 37691
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37646: LD_ADDR_VAR 0 3
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 255
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 250
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 251
37680: PPUSH
37681: LD_VAR 0 2
37685: PPUSH
37686: CALL 35933 0 4
37690: ST_TO_ADDR
// end ;
37691: LD_VAR 0 3
37695: RET
// export function DangerInArea ( side , area ) ; begin
37696: LD_INT 0
37698: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: LD_VAR 0 2
37708: PPUSH
37709: LD_INT 81
37711: PUSH
37712: LD_VAR 0 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PPUSH
37721: CALL_OW 70
37725: ST_TO_ADDR
// end ;
37726: LD_VAR 0 3
37730: RET
// export function IsExtension ( b ) ; begin
37731: LD_INT 0
37733: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37734: LD_ADDR_VAR 0 2
37738: PUSH
37739: LD_VAR 0 1
37743: PUSH
37744: LD_INT 23
37746: PUSH
37747: LD_INT 20
37749: PUSH
37750: LD_INT 22
37752: PUSH
37753: LD_INT 17
37755: PUSH
37756: LD_INT 24
37758: PUSH
37759: LD_INT 21
37761: PUSH
37762: LD_INT 19
37764: PUSH
37765: LD_INT 16
37767: PUSH
37768: LD_INT 25
37770: PUSH
37771: LD_INT 18
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: IN
37786: ST_TO_ADDR
// end ;
37787: LD_VAR 0 2
37791: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37792: LD_INT 0
37794: PPUSH
37795: PPUSH
37796: PPUSH
// result := [ ] ;
37797: LD_ADDR_VAR 0 4
37801: PUSH
37802: EMPTY
37803: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37804: LD_ADDR_VAR 0 5
37808: PUSH
37809: LD_VAR 0 2
37813: PPUSH
37814: LD_INT 21
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PPUSH
37824: CALL_OW 70
37828: ST_TO_ADDR
// if not tmp then
37829: LD_VAR 0 5
37833: NOT
37834: IFFALSE 37838
// exit ;
37836: GO 37902
// if checkLink then
37838: LD_VAR 0 3
37842: IFFALSE 37892
// begin for i in tmp do
37844: LD_ADDR_VAR 0 6
37848: PUSH
37849: LD_VAR 0 5
37853: PUSH
37854: FOR_IN
37855: IFFALSE 37890
// if GetBase ( i ) <> base then
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 274
37866: PUSH
37867: LD_VAR 0 1
37871: NONEQUAL
37872: IFFALSE 37888
// ComLinkToBase ( base , i ) ;
37874: LD_VAR 0 1
37878: PPUSH
37879: LD_VAR 0 6
37883: PPUSH
37884: CALL_OW 169
37888: GO 37854
37890: POP
37891: POP
// end ; result := tmp ;
37892: LD_ADDR_VAR 0 4
37896: PUSH
37897: LD_VAR 0 5
37901: ST_TO_ADDR
// end ;
37902: LD_VAR 0 4
37906: RET
// export function ComComplete ( units , b ) ; var i ; begin
37907: LD_INT 0
37909: PPUSH
37910: PPUSH
// if not units then
37911: LD_VAR 0 1
37915: NOT
37916: IFFALSE 37920
// exit ;
37918: GO 38010
// for i in units do
37920: LD_ADDR_VAR 0 4
37924: PUSH
37925: LD_VAR 0 1
37929: PUSH
37930: FOR_IN
37931: IFFALSE 38008
// if BuildingStatus ( b ) = bs_build then
37933: LD_VAR 0 2
37937: PPUSH
37938: CALL_OW 461
37942: PUSH
37943: LD_INT 1
37945: EQUAL
37946: IFFALSE 38006
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37948: LD_VAR 0 4
37952: PPUSH
37953: LD_STRING h
37955: PUSH
37956: LD_VAR 0 2
37960: PPUSH
37961: CALL_OW 250
37965: PUSH
37966: LD_VAR 0 2
37970: PPUSH
37971: CALL_OW 251
37975: PUSH
37976: LD_VAR 0 2
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: PUSH
37999: EMPTY
38000: LIST
38001: PPUSH
38002: CALL_OW 446
38006: GO 37930
38008: POP
38009: POP
// end ;
38010: LD_VAR 0 3
38014: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38015: LD_INT 0
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38023: LD_VAR 0 1
38027: NOT
38028: PUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: CALL_OW 263
38038: PUSH
38039: LD_INT 2
38041: NONEQUAL
38042: OR
38043: IFFALSE 38047
// exit ;
38045: GO 38363
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38047: LD_ADDR_VAR 0 6
38051: PUSH
38052: LD_INT 22
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 255
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 30
38074: PUSH
38075: LD_INT 36
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 34
38084: PUSH
38085: LD_INT 31
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 69
38105: ST_TO_ADDR
// if not tmp then
38106: LD_VAR 0 6
38110: NOT
38111: IFFALSE 38115
// exit ;
38113: GO 38363
// result := [ ] ;
38115: LD_ADDR_VAR 0 2
38119: PUSH
38120: EMPTY
38121: ST_TO_ADDR
// for i in tmp do
38122: LD_ADDR_VAR 0 3
38126: PUSH
38127: LD_VAR 0 6
38131: PUSH
38132: FOR_IN
38133: IFFALSE 38204
// begin t := UnitsInside ( i ) ;
38135: LD_ADDR_VAR 0 4
38139: PUSH
38140: LD_VAR 0 3
38144: PPUSH
38145: CALL_OW 313
38149: ST_TO_ADDR
// if t then
38150: LD_VAR 0 4
38154: IFFALSE 38202
// for j in t do
38156: LD_ADDR_VAR 0 7
38160: PUSH
38161: LD_VAR 0 4
38165: PUSH
38166: FOR_IN
38167: IFFALSE 38200
// result := Replace ( result , result + 1 , j ) ;
38169: LD_ADDR_VAR 0 2
38173: PUSH
38174: LD_VAR 0 2
38178: PPUSH
38179: LD_VAR 0 2
38183: PUSH
38184: LD_INT 1
38186: PLUS
38187: PPUSH
38188: LD_VAR 0 7
38192: PPUSH
38193: CALL_OW 1
38197: ST_TO_ADDR
38198: GO 38166
38200: POP
38201: POP
// end ;
38202: GO 38132
38204: POP
38205: POP
// if not result then
38206: LD_VAR 0 2
38210: NOT
38211: IFFALSE 38215
// exit ;
38213: GO 38363
// mech := result [ 1 ] ;
38215: LD_ADDR_VAR 0 5
38219: PUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: ST_TO_ADDR
// if result > 1 then
38229: LD_VAR 0 2
38233: PUSH
38234: LD_INT 1
38236: GREATER
38237: IFFALSE 38349
// begin for i = 2 to result do
38239: LD_ADDR_VAR 0 3
38243: PUSH
38244: DOUBLE
38245: LD_INT 2
38247: DEC
38248: ST_TO_ADDR
38249: LD_VAR 0 2
38253: PUSH
38254: FOR_TO
38255: IFFALSE 38347
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_VAR 0 3
38271: ARRAY
38272: PPUSH
38273: LD_INT 3
38275: PPUSH
38276: CALL_OW 259
38280: PUSH
38281: LD_VAR 0 2
38285: PUSH
38286: LD_VAR 0 3
38290: ARRAY
38291: PPUSH
38292: CALL_OW 432
38296: MINUS
38297: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38298: LD_VAR 0 4
38302: PUSH
38303: LD_VAR 0 5
38307: PPUSH
38308: LD_INT 3
38310: PPUSH
38311: CALL_OW 259
38315: PUSH
38316: LD_VAR 0 5
38320: PPUSH
38321: CALL_OW 432
38325: MINUS
38326: GREATEREQUAL
38327: IFFALSE 38345
// mech := result [ i ] ;
38329: LD_ADDR_VAR 0 5
38333: PUSH
38334: LD_VAR 0 2
38338: PUSH
38339: LD_VAR 0 3
38343: ARRAY
38344: ST_TO_ADDR
// end ;
38345: GO 38254
38347: POP
38348: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38349: LD_VAR 0 1
38353: PPUSH
38354: LD_VAR 0 5
38358: PPUSH
38359: CALL_OW 135
// end ;
38363: LD_VAR 0 2
38367: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38368: LD_INT 0
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
// result := [ ] ;
38383: LD_ADDR_VAR 0 7
38387: PUSH
38388: EMPTY
38389: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 266
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: IN
38410: NOT
38411: IFFALSE 38415
// exit ;
38413: GO 40049
// if name then
38415: LD_VAR 0 3
38419: IFFALSE 38435
// SetBName ( base_dep , name ) ;
38421: LD_VAR 0 1
38425: PPUSH
38426: LD_VAR 0 3
38430: PPUSH
38431: CALL_OW 500
// base := GetBase ( base_dep ) ;
38435: LD_ADDR_VAR 0 15
38439: PUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL_OW 274
38449: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38450: LD_ADDR_VAR 0 16
38454: PUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 255
38464: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38465: LD_ADDR_VAR 0 17
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 248
38479: ST_TO_ADDR
// if sources then
38480: LD_VAR 0 5
38484: IFFALSE 38531
// for i = 1 to 3 do
38486: LD_ADDR_VAR 0 8
38490: PUSH
38491: DOUBLE
38492: LD_INT 1
38494: DEC
38495: ST_TO_ADDR
38496: LD_INT 3
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38529
// AddResourceType ( base , i , sources [ i ] ) ;
38502: LD_VAR 0 15
38506: PPUSH
38507: LD_VAR 0 8
38511: PPUSH
38512: LD_VAR 0 5
38516: PUSH
38517: LD_VAR 0 8
38521: ARRAY
38522: PPUSH
38523: CALL_OW 276
38527: GO 38499
38529: POP
38530: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38531: LD_ADDR_VAR 0 18
38535: PUSH
38536: LD_VAR 0 15
38540: PPUSH
38541: LD_VAR 0 2
38545: PPUSH
38546: LD_INT 1
38548: PPUSH
38549: CALL 37792 0 3
38553: ST_TO_ADDR
// InitHc ;
38554: CALL_OW 19
// InitUc ;
38558: CALL_OW 18
// uc_side := side ;
38562: LD_ADDR_OWVAR 20
38566: PUSH
38567: LD_VAR 0 16
38571: ST_TO_ADDR
// uc_nation := nation ;
38572: LD_ADDR_OWVAR 21
38576: PUSH
38577: LD_VAR 0 17
38581: ST_TO_ADDR
// if buildings then
38582: LD_VAR 0 18
38586: IFFALSE 39908
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38588: LD_ADDR_VAR 0 19
38592: PUSH
38593: LD_VAR 0 18
38597: PPUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 29
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 30
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PPUSH
38626: CALL_OW 72
38630: ST_TO_ADDR
// if tmp then
38631: LD_VAR 0 19
38635: IFFALSE 38683
// for i in tmp do
38637: LD_ADDR_VAR 0 8
38641: PUSH
38642: LD_VAR 0 19
38646: PUSH
38647: FOR_IN
38648: IFFALSE 38681
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38650: LD_VAR 0 8
38654: PPUSH
38655: CALL_OW 250
38659: PPUSH
38660: LD_VAR 0 8
38664: PPUSH
38665: CALL_OW 251
38669: PPUSH
38670: LD_VAR 0 16
38674: PPUSH
38675: CALL_OW 441
38679: GO 38647
38681: POP
38682: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38683: LD_VAR 0 18
38687: PPUSH
38688: LD_INT 2
38690: PUSH
38691: LD_INT 30
38693: PUSH
38694: LD_INT 32
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 30
38703: PUSH
38704: LD_INT 33
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: PPUSH
38716: CALL_OW 72
38720: IFFALSE 38808
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38722: LD_ADDR_VAR 0 8
38726: PUSH
38727: LD_VAR 0 18
38731: PPUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 30
38737: PUSH
38738: LD_INT 32
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 30
38747: PUSH
38748: LD_INT 33
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: PPUSH
38760: CALL_OW 72
38764: PUSH
38765: FOR_IN
38766: IFFALSE 38806
// begin if not GetBWeapon ( i ) then
38768: LD_VAR 0 8
38772: PPUSH
38773: CALL_OW 269
38777: NOT
38778: IFFALSE 38804
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38780: LD_VAR 0 8
38784: PPUSH
38785: LD_VAR 0 8
38789: PPUSH
38790: LD_VAR 0 2
38794: PPUSH
38795: CALL 40054 0 2
38799: PPUSH
38800: CALL_OW 431
// end ;
38804: GO 38765
38806: POP
38807: POP
// end ; for i = 1 to personel do
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: DOUBLE
38814: LD_INT 1
38816: DEC
38817: ST_TO_ADDR
38818: LD_VAR 0 6
38822: PUSH
38823: FOR_TO
38824: IFFALSE 39888
// begin if i > 4 then
38826: LD_VAR 0 8
38830: PUSH
38831: LD_INT 4
38833: GREATER
38834: IFFALSE 38838
// break ;
38836: GO 39888
// case i of 1 :
38838: LD_VAR 0 8
38842: PUSH
38843: LD_INT 1
38845: DOUBLE
38846: EQUAL
38847: IFTRUE 38851
38849: GO 38931
38851: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38852: LD_ADDR_VAR 0 12
38856: PUSH
38857: LD_VAR 0 18
38861: PPUSH
38862: LD_INT 22
38864: PUSH
38865: LD_VAR 0 16
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 58
38876: PUSH
38877: EMPTY
38878: LIST
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: LD_INT 30
38885: PUSH
38886: LD_INT 32
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 30
38895: PUSH
38896: LD_INT 4
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 30
38905: PUSH
38906: LD_INT 5
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: PPUSH
38924: CALL_OW 72
38928: ST_TO_ADDR
38929: GO 39153
38931: LD_INT 2
38933: DOUBLE
38934: EQUAL
38935: IFTRUE 38939
38937: GO 39001
38939: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38940: LD_ADDR_VAR 0 12
38944: PUSH
38945: LD_VAR 0 18
38949: PPUSH
38950: LD_INT 22
38952: PUSH
38953: LD_VAR 0 16
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: LD_INT 30
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PPUSH
38994: CALL_OW 72
38998: ST_TO_ADDR
38999: GO 39153
39001: LD_INT 3
39003: DOUBLE
39004: EQUAL
39005: IFTRUE 39009
39007: GO 39071
39009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39010: LD_ADDR_VAR 0 12
39014: PUSH
39015: LD_VAR 0 18
39019: PPUSH
39020: LD_INT 22
39022: PUSH
39023: LD_VAR 0 16
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 30
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 30
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PPUSH
39064: CALL_OW 72
39068: ST_TO_ADDR
39069: GO 39153
39071: LD_INT 4
39073: DOUBLE
39074: EQUAL
39075: IFTRUE 39079
39077: GO 39152
39079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39080: LD_ADDR_VAR 0 12
39084: PUSH
39085: LD_VAR 0 18
39089: PPUSH
39090: LD_INT 22
39092: PUSH
39093: LD_VAR 0 16
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 30
39107: PUSH
39108: LD_INT 6
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 30
39117: PUSH
39118: LD_INT 7
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 30
39127: PUSH
39128: LD_INT 8
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PPUSH
39145: CALL_OW 72
39149: ST_TO_ADDR
39150: GO 39153
39152: POP
// if i = 1 then
39153: LD_VAR 0 8
39157: PUSH
39158: LD_INT 1
39160: EQUAL
39161: IFFALSE 39272
// begin tmp := [ ] ;
39163: LD_ADDR_VAR 0 19
39167: PUSH
39168: EMPTY
39169: ST_TO_ADDR
// for j in f do
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_VAR 0 12
39179: PUSH
39180: FOR_IN
39181: IFFALSE 39254
// if GetBType ( j ) = b_bunker then
39183: LD_VAR 0 9
39187: PPUSH
39188: CALL_OW 266
39192: PUSH
39193: LD_INT 32
39195: EQUAL
39196: IFFALSE 39223
// tmp := Insert ( tmp , 1 , j ) else
39198: LD_ADDR_VAR 0 19
39202: PUSH
39203: LD_VAR 0 19
39207: PPUSH
39208: LD_INT 1
39210: PPUSH
39211: LD_VAR 0 9
39215: PPUSH
39216: CALL_OW 2
39220: ST_TO_ADDR
39221: GO 39252
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39223: LD_ADDR_VAR 0 19
39227: PUSH
39228: LD_VAR 0 19
39232: PPUSH
39233: LD_VAR 0 19
39237: PUSH
39238: LD_INT 1
39240: PLUS
39241: PPUSH
39242: LD_VAR 0 9
39246: PPUSH
39247: CALL_OW 2
39251: ST_TO_ADDR
39252: GO 39180
39254: POP
39255: POP
// if tmp then
39256: LD_VAR 0 19
39260: IFFALSE 39272
// f := tmp ;
39262: LD_ADDR_VAR 0 12
39266: PUSH
39267: LD_VAR 0 19
39271: ST_TO_ADDR
// end ; x := personel [ i ] ;
39272: LD_ADDR_VAR 0 13
39276: PUSH
39277: LD_VAR 0 6
39281: PUSH
39282: LD_VAR 0 8
39286: ARRAY
39287: ST_TO_ADDR
// if x = - 1 then
39288: LD_VAR 0 13
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: EQUAL
39297: IFFALSE 39506
// begin for j in f do
39299: LD_ADDR_VAR 0 9
39303: PUSH
39304: LD_VAR 0 12
39308: PUSH
39309: FOR_IN
39310: IFFALSE 39502
// repeat InitHc ;
39312: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39316: LD_VAR 0 9
39320: PPUSH
39321: CALL_OW 266
39325: PUSH
39326: LD_INT 5
39328: EQUAL
39329: IFFALSE 39399
// begin if UnitsInside ( j ) < 3 then
39331: LD_VAR 0 9
39335: PPUSH
39336: CALL_OW 313
39340: PUSH
39341: LD_INT 3
39343: LESS
39344: IFFALSE 39380
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39346: LD_INT 0
39348: PPUSH
39349: LD_INT 5
39351: PUSH
39352: LD_INT 8
39354: PUSH
39355: LD_INT 9
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: PUSH
39363: LD_VAR 0 17
39367: ARRAY
39368: PPUSH
39369: LD_VAR 0 4
39373: PPUSH
39374: CALL_OW 380
39378: GO 39397
// PrepareHuman ( false , i , skill ) ;
39380: LD_INT 0
39382: PPUSH
39383: LD_VAR 0 8
39387: PPUSH
39388: LD_VAR 0 4
39392: PPUSH
39393: CALL_OW 380
// end else
39397: GO 39416
// PrepareHuman ( false , i , skill ) ;
39399: LD_INT 0
39401: PPUSH
39402: LD_VAR 0 8
39406: PPUSH
39407: LD_VAR 0 4
39411: PPUSH
39412: CALL_OW 380
// un := CreateHuman ;
39416: LD_ADDR_VAR 0 14
39420: PUSH
39421: CALL_OW 44
39425: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39426: LD_ADDR_VAR 0 7
39430: PUSH
39431: LD_VAR 0 7
39435: PPUSH
39436: LD_INT 1
39438: PPUSH
39439: LD_VAR 0 14
39443: PPUSH
39444: CALL_OW 2
39448: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39449: LD_VAR 0 14
39453: PPUSH
39454: LD_VAR 0 9
39458: PPUSH
39459: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39463: LD_VAR 0 9
39467: PPUSH
39468: CALL_OW 313
39472: PUSH
39473: LD_INT 6
39475: EQUAL
39476: PUSH
39477: LD_VAR 0 9
39481: PPUSH
39482: CALL_OW 266
39486: PUSH
39487: LD_INT 32
39489: PUSH
39490: LD_INT 31
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: IN
39497: OR
39498: IFFALSE 39312
39500: GO 39309
39502: POP
39503: POP
// end else
39504: GO 39886
// for j = 1 to x do
39506: LD_ADDR_VAR 0 9
39510: PUSH
39511: DOUBLE
39512: LD_INT 1
39514: DEC
39515: ST_TO_ADDR
39516: LD_VAR 0 13
39520: PUSH
39521: FOR_TO
39522: IFFALSE 39884
// begin InitHc ;
39524: CALL_OW 19
// if not f then
39528: LD_VAR 0 12
39532: NOT
39533: IFFALSE 39622
// begin PrepareHuman ( false , i , skill ) ;
39535: LD_INT 0
39537: PPUSH
39538: LD_VAR 0 8
39542: PPUSH
39543: LD_VAR 0 4
39547: PPUSH
39548: CALL_OW 380
// un := CreateHuman ;
39552: LD_ADDR_VAR 0 14
39556: PUSH
39557: CALL_OW 44
39561: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39562: LD_ADDR_VAR 0 7
39566: PUSH
39567: LD_VAR 0 7
39571: PPUSH
39572: LD_INT 1
39574: PPUSH
39575: LD_VAR 0 14
39579: PPUSH
39580: CALL_OW 2
39584: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39585: LD_VAR 0 14
39589: PPUSH
39590: LD_VAR 0 1
39594: PPUSH
39595: CALL_OW 250
39599: PPUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 251
39609: PPUSH
39610: LD_INT 10
39612: PPUSH
39613: LD_INT 0
39615: PPUSH
39616: CALL_OW 50
// continue ;
39620: GO 39521
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39622: LD_VAR 0 12
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: PPUSH
39631: CALL_OW 313
39635: PUSH
39636: LD_VAR 0 12
39640: PUSH
39641: LD_INT 1
39643: ARRAY
39644: PPUSH
39645: CALL_OW 266
39649: PUSH
39650: LD_INT 32
39652: PUSH
39653: LD_INT 31
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: IN
39660: AND
39661: PUSH
39662: LD_VAR 0 12
39666: PUSH
39667: LD_INT 1
39669: ARRAY
39670: PPUSH
39671: CALL_OW 313
39675: PUSH
39676: LD_INT 6
39678: EQUAL
39679: OR
39680: IFFALSE 39700
// f := Delete ( f , 1 ) ;
39682: LD_ADDR_VAR 0 12
39686: PUSH
39687: LD_VAR 0 12
39691: PPUSH
39692: LD_INT 1
39694: PPUSH
39695: CALL_OW 3
39699: ST_TO_ADDR
// if not f then
39700: LD_VAR 0 12
39704: NOT
39705: IFFALSE 39723
// begin x := x + 2 ;
39707: LD_ADDR_VAR 0 13
39711: PUSH
39712: LD_VAR 0 13
39716: PUSH
39717: LD_INT 2
39719: PLUS
39720: ST_TO_ADDR
// continue ;
39721: GO 39521
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39723: LD_VAR 0 12
39727: PUSH
39728: LD_INT 1
39730: ARRAY
39731: PPUSH
39732: CALL_OW 266
39736: PUSH
39737: LD_INT 5
39739: EQUAL
39740: IFFALSE 39814
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39742: LD_VAR 0 12
39746: PUSH
39747: LD_INT 1
39749: ARRAY
39750: PPUSH
39751: CALL_OW 313
39755: PUSH
39756: LD_INT 3
39758: LESS
39759: IFFALSE 39795
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39761: LD_INT 0
39763: PPUSH
39764: LD_INT 5
39766: PUSH
39767: LD_INT 8
39769: PUSH
39770: LD_INT 9
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_VAR 0 17
39782: ARRAY
39783: PPUSH
39784: LD_VAR 0 4
39788: PPUSH
39789: CALL_OW 380
39793: GO 39812
// PrepareHuman ( false , i , skill ) ;
39795: LD_INT 0
39797: PPUSH
39798: LD_VAR 0 8
39802: PPUSH
39803: LD_VAR 0 4
39807: PPUSH
39808: CALL_OW 380
// end else
39812: GO 39831
// PrepareHuman ( false , i , skill ) ;
39814: LD_INT 0
39816: PPUSH
39817: LD_VAR 0 8
39821: PPUSH
39822: LD_VAR 0 4
39826: PPUSH
39827: CALL_OW 380
// un := CreateHuman ;
39831: LD_ADDR_VAR 0 14
39835: PUSH
39836: CALL_OW 44
39840: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39841: LD_ADDR_VAR 0 7
39845: PUSH
39846: LD_VAR 0 7
39850: PPUSH
39851: LD_INT 1
39853: PPUSH
39854: LD_VAR 0 14
39858: PPUSH
39859: CALL_OW 2
39863: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39864: LD_VAR 0 14
39868: PPUSH
39869: LD_VAR 0 12
39873: PUSH
39874: LD_INT 1
39876: ARRAY
39877: PPUSH
39878: CALL_OW 52
// end ;
39882: GO 39521
39884: POP
39885: POP
// end ;
39886: GO 38823
39888: POP
39889: POP
// result := result ^ buildings ;
39890: LD_ADDR_VAR 0 7
39894: PUSH
39895: LD_VAR 0 7
39899: PUSH
39900: LD_VAR 0 18
39904: ADD
39905: ST_TO_ADDR
// end else
39906: GO 40049
// begin for i = 1 to personel do
39908: LD_ADDR_VAR 0 8
39912: PUSH
39913: DOUBLE
39914: LD_INT 1
39916: DEC
39917: ST_TO_ADDR
39918: LD_VAR 0 6
39922: PUSH
39923: FOR_TO
39924: IFFALSE 40047
// begin if i > 4 then
39926: LD_VAR 0 8
39930: PUSH
39931: LD_INT 4
39933: GREATER
39934: IFFALSE 39938
// break ;
39936: GO 40047
// x := personel [ i ] ;
39938: LD_ADDR_VAR 0 13
39942: PUSH
39943: LD_VAR 0 6
39947: PUSH
39948: LD_VAR 0 8
39952: ARRAY
39953: ST_TO_ADDR
// if x = - 1 then
39954: LD_VAR 0 13
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: EQUAL
39963: IFFALSE 39967
// continue ;
39965: GO 39923
// PrepareHuman ( false , i , skill ) ;
39967: LD_INT 0
39969: PPUSH
39970: LD_VAR 0 8
39974: PPUSH
39975: LD_VAR 0 4
39979: PPUSH
39980: CALL_OW 380
// un := CreateHuman ;
39984: LD_ADDR_VAR 0 14
39988: PUSH
39989: CALL_OW 44
39993: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39994: LD_VAR 0 14
39998: PPUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 250
40008: PPUSH
40009: LD_VAR 0 1
40013: PPUSH
40014: CALL_OW 251
40018: PPUSH
40019: LD_INT 10
40021: PPUSH
40022: LD_INT 0
40024: PPUSH
40025: CALL_OW 50
// result := result ^ un ;
40029: LD_ADDR_VAR 0 7
40033: PUSH
40034: LD_VAR 0 7
40038: PUSH
40039: LD_VAR 0 14
40043: ADD
40044: ST_TO_ADDR
// end ;
40045: GO 39923
40047: POP
40048: POP
// end ; end ;
40049: LD_VAR 0 7
40053: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
// result := false ;
40072: LD_ADDR_VAR 0 3
40076: PUSH
40077: LD_INT 0
40079: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40080: LD_VAR 0 1
40084: NOT
40085: PUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 266
40095: PUSH
40096: LD_INT 32
40098: PUSH
40099: LD_INT 33
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: IN
40106: NOT
40107: OR
40108: IFFALSE 40112
// exit ;
40110: GO 41221
// nat := GetNation ( tower ) ;
40112: LD_ADDR_VAR 0 12
40116: PUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL_OW 248
40126: ST_TO_ADDR
// side := GetSide ( tower ) ;
40127: LD_ADDR_VAR 0 16
40131: PUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 255
40141: ST_TO_ADDR
// x := GetX ( tower ) ;
40142: LD_ADDR_VAR 0 10
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 250
40156: ST_TO_ADDR
// y := GetY ( tower ) ;
40157: LD_ADDR_VAR 0 11
40161: PUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 251
40171: ST_TO_ADDR
// if not x or not y then
40172: LD_VAR 0 10
40176: NOT
40177: PUSH
40178: LD_VAR 0 11
40182: NOT
40183: OR
40184: IFFALSE 40188
// exit ;
40186: GO 41221
// weapon := 0 ;
40188: LD_ADDR_VAR 0 18
40192: PUSH
40193: LD_INT 0
40195: ST_TO_ADDR
// fac_list := [ ] ;
40196: LD_ADDR_VAR 0 17
40200: PUSH
40201: EMPTY
40202: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40203: LD_ADDR_VAR 0 6
40207: PUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 274
40217: PPUSH
40218: LD_VAR 0 2
40222: PPUSH
40223: LD_INT 0
40225: PPUSH
40226: CALL 37792 0 3
40230: PPUSH
40231: LD_INT 30
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PPUSH
40241: CALL_OW 72
40245: ST_TO_ADDR
// if not factories then
40246: LD_VAR 0 6
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 41221
// for i in factories do
40255: LD_ADDR_VAR 0 8
40259: PUSH
40260: LD_VAR 0 6
40264: PUSH
40265: FOR_IN
40266: IFFALSE 40291
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40268: LD_ADDR_VAR 0 17
40272: PUSH
40273: LD_VAR 0 17
40277: PUSH
40278: LD_VAR 0 8
40282: PPUSH
40283: CALL_OW 478
40287: UNION
40288: ST_TO_ADDR
40289: GO 40265
40291: POP
40292: POP
// if not fac_list then
40293: LD_VAR 0 17
40297: NOT
40298: IFFALSE 40302
// exit ;
40300: GO 41221
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40302: LD_ADDR_VAR 0 5
40306: PUSH
40307: LD_INT 4
40309: PUSH
40310: LD_INT 5
40312: PUSH
40313: LD_INT 9
40315: PUSH
40316: LD_INT 10
40318: PUSH
40319: LD_INT 6
40321: PUSH
40322: LD_INT 7
40324: PUSH
40325: LD_INT 11
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 27
40339: PUSH
40340: LD_INT 28
40342: PUSH
40343: LD_INT 26
40345: PUSH
40346: LD_INT 30
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 43
40357: PUSH
40358: LD_INT 44
40360: PUSH
40361: LD_INT 46
40363: PUSH
40364: LD_INT 45
40366: PUSH
40367: LD_INT 47
40369: PUSH
40370: LD_INT 49
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: PUSH
40386: LD_VAR 0 12
40390: ARRAY
40391: ST_TO_ADDR
// list := list isect fac_list ;
40392: LD_ADDR_VAR 0 5
40396: PUSH
40397: LD_VAR 0 5
40401: PUSH
40402: LD_VAR 0 17
40406: ISECT
40407: ST_TO_ADDR
// if not list then
40408: LD_VAR 0 5
40412: NOT
40413: IFFALSE 40417
// exit ;
40415: GO 41221
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40417: LD_VAR 0 12
40421: PUSH
40422: LD_INT 3
40424: EQUAL
40425: PUSH
40426: LD_INT 49
40428: PUSH
40429: LD_VAR 0 5
40433: IN
40434: AND
40435: PUSH
40436: LD_INT 31
40438: PPUSH
40439: LD_VAR 0 16
40443: PPUSH
40444: CALL_OW 321
40448: PUSH
40449: LD_INT 2
40451: EQUAL
40452: AND
40453: IFFALSE 40513
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40455: LD_INT 22
40457: PUSH
40458: LD_VAR 0 16
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 35
40469: PUSH
40470: LD_INT 49
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 91
40479: PUSH
40480: LD_VAR 0 1
40484: PUSH
40485: LD_INT 10
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: PPUSH
40498: CALL_OW 69
40502: NOT
40503: IFFALSE 40513
// weapon := ru_time_lapser ;
40505: LD_ADDR_VAR 0 18
40509: PUSH
40510: LD_INT 49
40512: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40513: LD_VAR 0 12
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: IN
40528: PUSH
40529: LD_INT 11
40531: PUSH
40532: LD_VAR 0 5
40536: IN
40537: PUSH
40538: LD_INT 30
40540: PUSH
40541: LD_VAR 0 5
40545: IN
40546: OR
40547: AND
40548: PUSH
40549: LD_INT 6
40551: PPUSH
40552: LD_VAR 0 16
40556: PPUSH
40557: CALL_OW 321
40561: PUSH
40562: LD_INT 2
40564: EQUAL
40565: AND
40566: IFFALSE 40731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40568: LD_INT 22
40570: PUSH
40571: LD_VAR 0 16
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 35
40585: PUSH
40586: LD_INT 11
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 35
40595: PUSH
40596: LD_INT 30
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 91
40610: PUSH
40611: LD_VAR 0 1
40615: PUSH
40616: LD_INT 18
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: PPUSH
40629: CALL_OW 69
40633: NOT
40634: PUSH
40635: LD_INT 22
40637: PUSH
40638: LD_VAR 0 16
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 30
40652: PUSH
40653: LD_INT 32
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: LD_INT 33
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 91
40677: PUSH
40678: LD_VAR 0 1
40682: PUSH
40683: LD_INT 12
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: PPUSH
40699: CALL_OW 69
40703: PUSH
40704: LD_INT 2
40706: GREATER
40707: AND
40708: IFFALSE 40731
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40710: LD_ADDR_VAR 0 18
40714: PUSH
40715: LD_INT 11
40717: PUSH
40718: LD_INT 30
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_VAR 0 12
40729: ARRAY
40730: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40731: LD_VAR 0 18
40735: NOT
40736: PUSH
40737: LD_INT 40
40739: PPUSH
40740: LD_VAR 0 16
40744: PPUSH
40745: CALL_OW 321
40749: PUSH
40750: LD_INT 2
40752: EQUAL
40753: AND
40754: PUSH
40755: LD_INT 7
40757: PUSH
40758: LD_VAR 0 5
40762: IN
40763: PUSH
40764: LD_INT 28
40766: PUSH
40767: LD_VAR 0 5
40771: IN
40772: OR
40773: PUSH
40774: LD_INT 45
40776: PUSH
40777: LD_VAR 0 5
40781: IN
40782: OR
40783: AND
40784: IFFALSE 41038
// begin hex := GetHexInfo ( x , y ) ;
40786: LD_ADDR_VAR 0 4
40790: PUSH
40791: LD_VAR 0 10
40795: PPUSH
40796: LD_VAR 0 11
40800: PPUSH
40801: CALL_OW 546
40805: ST_TO_ADDR
// if hex [ 1 ] then
40806: LD_VAR 0 4
40810: PUSH
40811: LD_INT 1
40813: ARRAY
40814: IFFALSE 40818
// exit ;
40816: GO 41221
// height := hex [ 2 ] ;
40818: LD_ADDR_VAR 0 15
40822: PUSH
40823: LD_VAR 0 4
40827: PUSH
40828: LD_INT 2
40830: ARRAY
40831: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40832: LD_ADDR_VAR 0 14
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// for i in tmp do
40855: LD_ADDR_VAR 0 8
40859: PUSH
40860: LD_VAR 0 14
40864: PUSH
40865: FOR_IN
40866: IFFALSE 41036
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40868: LD_ADDR_VAR 0 9
40872: PUSH
40873: LD_VAR 0 10
40877: PPUSH
40878: LD_VAR 0 8
40882: PPUSH
40883: LD_INT 5
40885: PPUSH
40886: CALL_OW 272
40890: PUSH
40891: LD_VAR 0 11
40895: PPUSH
40896: LD_VAR 0 8
40900: PPUSH
40901: LD_INT 5
40903: PPUSH
40904: CALL_OW 273
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40913: LD_VAR 0 9
40917: PUSH
40918: LD_INT 1
40920: ARRAY
40921: PPUSH
40922: LD_VAR 0 9
40926: PUSH
40927: LD_INT 2
40929: ARRAY
40930: PPUSH
40931: CALL_OW 488
40935: IFFALSE 41034
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40937: LD_ADDR_VAR 0 4
40941: PUSH
40942: LD_VAR 0 9
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 9
40955: PUSH
40956: LD_INT 2
40958: ARRAY
40959: PPUSH
40960: CALL_OW 546
40964: ST_TO_ADDR
// if hex [ 1 ] then
40965: LD_VAR 0 4
40969: PUSH
40970: LD_INT 1
40972: ARRAY
40973: IFFALSE 40977
// continue ;
40975: GO 40865
// h := hex [ 2 ] ;
40977: LD_ADDR_VAR 0 13
40981: PUSH
40982: LD_VAR 0 4
40986: PUSH
40987: LD_INT 2
40989: ARRAY
40990: ST_TO_ADDR
// if h + 7 < height then
40991: LD_VAR 0 13
40995: PUSH
40996: LD_INT 7
40998: PLUS
40999: PUSH
41000: LD_VAR 0 15
41004: LESS
41005: IFFALSE 41034
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41007: LD_ADDR_VAR 0 18
41011: PUSH
41012: LD_INT 7
41014: PUSH
41015: LD_INT 28
41017: PUSH
41018: LD_INT 45
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: PUSH
41026: LD_VAR 0 12
41030: ARRAY
41031: ST_TO_ADDR
// break ;
41032: GO 41036
// end ; end ; end ;
41034: GO 40865
41036: POP
41037: POP
// end ; if not weapon then
41038: LD_VAR 0 18
41042: NOT
41043: IFFALSE 41103
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41045: LD_ADDR_VAR 0 5
41049: PUSH
41050: LD_VAR 0 5
41054: PUSH
41055: LD_INT 11
41057: PUSH
41058: LD_INT 30
41060: PUSH
41061: LD_INT 49
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: DIFF
41069: ST_TO_ADDR
// if not list then
41070: LD_VAR 0 5
41074: NOT
41075: IFFALSE 41079
// exit ;
41077: GO 41221
// weapon := list [ rand ( 1 , list ) ] ;
41079: LD_ADDR_VAR 0 18
41083: PUSH
41084: LD_VAR 0 5
41088: PUSH
41089: LD_INT 1
41091: PPUSH
41092: LD_VAR 0 5
41096: PPUSH
41097: CALL_OW 12
41101: ARRAY
41102: ST_TO_ADDR
// end ; if weapon then
41103: LD_VAR 0 18
41107: IFFALSE 41221
// begin tmp := CostOfWeapon ( weapon ) ;
41109: LD_ADDR_VAR 0 14
41113: PUSH
41114: LD_VAR 0 18
41118: PPUSH
41119: CALL_OW 451
41123: ST_TO_ADDR
// j := GetBase ( tower ) ;
41124: LD_ADDR_VAR 0 9
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: CALL_OW 274
41138: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41139: LD_VAR 0 9
41143: PPUSH
41144: LD_INT 1
41146: PPUSH
41147: CALL_OW 275
41151: PUSH
41152: LD_VAR 0 14
41156: PUSH
41157: LD_INT 1
41159: ARRAY
41160: GREATEREQUAL
41161: PUSH
41162: LD_VAR 0 9
41166: PPUSH
41167: LD_INT 2
41169: PPUSH
41170: CALL_OW 275
41174: PUSH
41175: LD_VAR 0 14
41179: PUSH
41180: LD_INT 2
41182: ARRAY
41183: GREATEREQUAL
41184: AND
41185: PUSH
41186: LD_VAR 0 9
41190: PPUSH
41191: LD_INT 3
41193: PPUSH
41194: CALL_OW 275
41198: PUSH
41199: LD_VAR 0 14
41203: PUSH
41204: LD_INT 3
41206: ARRAY
41207: GREATEREQUAL
41208: AND
41209: IFFALSE 41221
// result := weapon ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_VAR 0 18
41220: ST_TO_ADDR
// end ; end ;
41221: LD_VAR 0 3
41225: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41226: LD_INT 0
41228: PPUSH
41229: PPUSH
// result := true ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_INT 1
41237: ST_TO_ADDR
// if array1 = array2 then
41238: LD_VAR 0 1
41242: PUSH
41243: LD_VAR 0 2
41247: EQUAL
41248: IFFALSE 41308
// begin for i = 1 to array1 do
41250: LD_ADDR_VAR 0 4
41254: PUSH
41255: DOUBLE
41256: LD_INT 1
41258: DEC
41259: ST_TO_ADDR
41260: LD_VAR 0 1
41264: PUSH
41265: FOR_TO
41266: IFFALSE 41304
// if array1 [ i ] <> array2 [ i ] then
41268: LD_VAR 0 1
41272: PUSH
41273: LD_VAR 0 4
41277: ARRAY
41278: PUSH
41279: LD_VAR 0 2
41283: PUSH
41284: LD_VAR 0 4
41288: ARRAY
41289: NONEQUAL
41290: IFFALSE 41302
// begin result := false ;
41292: LD_ADDR_VAR 0 3
41296: PUSH
41297: LD_INT 0
41299: ST_TO_ADDR
// break ;
41300: GO 41304
// end ;
41302: GO 41265
41304: POP
41305: POP
// end else
41306: GO 41316
// result := false ;
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_INT 0
41315: ST_TO_ADDR
// end ;
41316: LD_VAR 0 3
41320: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41321: LD_INT 0
41323: PPUSH
41324: PPUSH
// if not array1 or not array2 then
41325: LD_VAR 0 1
41329: NOT
41330: PUSH
41331: LD_VAR 0 2
41335: NOT
41336: OR
41337: IFFALSE 41341
// exit ;
41339: GO 41405
// result := true ;
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: LD_INT 1
41348: ST_TO_ADDR
// for i = 1 to array1 do
41349: LD_ADDR_VAR 0 4
41353: PUSH
41354: DOUBLE
41355: LD_INT 1
41357: DEC
41358: ST_TO_ADDR
41359: LD_VAR 0 1
41363: PUSH
41364: FOR_TO
41365: IFFALSE 41403
// if array1 [ i ] <> array2 [ i ] then
41367: LD_VAR 0 1
41371: PUSH
41372: LD_VAR 0 4
41376: ARRAY
41377: PUSH
41378: LD_VAR 0 2
41382: PUSH
41383: LD_VAR 0 4
41387: ARRAY
41388: NONEQUAL
41389: IFFALSE 41401
// begin result := false ;
41391: LD_ADDR_VAR 0 3
41395: PUSH
41396: LD_INT 0
41398: ST_TO_ADDR
// break ;
41399: GO 41403
// end ;
41401: GO 41364
41403: POP
41404: POP
// end ;
41405: LD_VAR 0 3
41409: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41410: LD_INT 0
41412: PPUSH
41413: PPUSH
41414: PPUSH
// pom := GetBase ( fac ) ;
41415: LD_ADDR_VAR 0 5
41419: PUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: CALL_OW 274
41429: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41430: LD_ADDR_VAR 0 4
41434: PUSH
41435: LD_VAR 0 2
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PPUSH
41444: LD_VAR 0 2
41448: PUSH
41449: LD_INT 2
41451: ARRAY
41452: PPUSH
41453: LD_VAR 0 2
41457: PUSH
41458: LD_INT 3
41460: ARRAY
41461: PPUSH
41462: LD_VAR 0 2
41466: PUSH
41467: LD_INT 4
41469: ARRAY
41470: PPUSH
41471: CALL_OW 449
41475: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_VAR 0 5
41485: PPUSH
41486: LD_INT 1
41488: PPUSH
41489: CALL_OW 275
41493: PUSH
41494: LD_VAR 0 4
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: GREATEREQUAL
41503: PUSH
41504: LD_VAR 0 5
41508: PPUSH
41509: LD_INT 2
41511: PPUSH
41512: CALL_OW 275
41516: PUSH
41517: LD_VAR 0 4
41521: PUSH
41522: LD_INT 2
41524: ARRAY
41525: GREATEREQUAL
41526: AND
41527: PUSH
41528: LD_VAR 0 5
41532: PPUSH
41533: LD_INT 3
41535: PPUSH
41536: CALL_OW 275
41540: PUSH
41541: LD_VAR 0 4
41545: PUSH
41546: LD_INT 3
41548: ARRAY
41549: GREATEREQUAL
41550: AND
41551: ST_TO_ADDR
// end ;
41552: LD_VAR 0 3
41556: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41557: LD_INT 0
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
// pom := GetBase ( building ) ;
41563: LD_ADDR_VAR 0 3
41567: PUSH
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL_OW 274
41577: ST_TO_ADDR
// if not pom then
41578: LD_VAR 0 3
41582: NOT
41583: IFFALSE 41587
// exit ;
41585: GO 41757
// btype := GetBType ( building ) ;
41587: LD_ADDR_VAR 0 5
41591: PUSH
41592: LD_VAR 0 1
41596: PPUSH
41597: CALL_OW 266
41601: ST_TO_ADDR
// if btype = b_armoury then
41602: LD_VAR 0 5
41606: PUSH
41607: LD_INT 4
41609: EQUAL
41610: IFFALSE 41620
// btype := b_barracks ;
41612: LD_ADDR_VAR 0 5
41616: PUSH
41617: LD_INT 5
41619: ST_TO_ADDR
// if btype = b_depot then
41620: LD_VAR 0 5
41624: PUSH
41625: LD_INT 0
41627: EQUAL
41628: IFFALSE 41638
// btype := b_warehouse ;
41630: LD_ADDR_VAR 0 5
41634: PUSH
41635: LD_INT 1
41637: ST_TO_ADDR
// if btype = b_workshop then
41638: LD_VAR 0 5
41642: PUSH
41643: LD_INT 2
41645: EQUAL
41646: IFFALSE 41656
// btype := b_factory ;
41648: LD_ADDR_VAR 0 5
41652: PUSH
41653: LD_INT 3
41655: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41656: LD_ADDR_VAR 0 4
41660: PUSH
41661: LD_VAR 0 5
41665: PPUSH
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 248
41675: PPUSH
41676: CALL_OW 450
41680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41681: LD_ADDR_VAR 0 2
41685: PUSH
41686: LD_VAR 0 3
41690: PPUSH
41691: LD_INT 1
41693: PPUSH
41694: CALL_OW 275
41698: PUSH
41699: LD_VAR 0 4
41703: PUSH
41704: LD_INT 1
41706: ARRAY
41707: GREATEREQUAL
41708: PUSH
41709: LD_VAR 0 3
41713: PPUSH
41714: LD_INT 2
41716: PPUSH
41717: CALL_OW 275
41721: PUSH
41722: LD_VAR 0 4
41726: PUSH
41727: LD_INT 2
41729: ARRAY
41730: GREATEREQUAL
41731: AND
41732: PUSH
41733: LD_VAR 0 3
41737: PPUSH
41738: LD_INT 3
41740: PPUSH
41741: CALL_OW 275
41745: PUSH
41746: LD_VAR 0 4
41750: PUSH
41751: LD_INT 3
41753: ARRAY
41754: GREATEREQUAL
41755: AND
41756: ST_TO_ADDR
// end ;
41757: LD_VAR 0 2
41761: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41762: LD_INT 0
41764: PPUSH
41765: PPUSH
41766: PPUSH
// pom := GetBase ( building ) ;
41767: LD_ADDR_VAR 0 4
41771: PUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: CALL_OW 274
41781: ST_TO_ADDR
// if not pom then
41782: LD_VAR 0 4
41786: NOT
41787: IFFALSE 41791
// exit ;
41789: GO 41892
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41791: LD_ADDR_VAR 0 5
41795: PUSH
41796: LD_VAR 0 2
41800: PPUSH
41801: LD_VAR 0 1
41805: PPUSH
41806: CALL_OW 248
41810: PPUSH
41811: CALL_OW 450
41815: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_VAR 0 4
41825: PPUSH
41826: LD_INT 1
41828: PPUSH
41829: CALL_OW 275
41833: PUSH
41834: LD_VAR 0 5
41838: PUSH
41839: LD_INT 1
41841: ARRAY
41842: GREATEREQUAL
41843: PUSH
41844: LD_VAR 0 4
41848: PPUSH
41849: LD_INT 2
41851: PPUSH
41852: CALL_OW 275
41856: PUSH
41857: LD_VAR 0 5
41861: PUSH
41862: LD_INT 2
41864: ARRAY
41865: GREATEREQUAL
41866: AND
41867: PUSH
41868: LD_VAR 0 4
41872: PPUSH
41873: LD_INT 3
41875: PPUSH
41876: CALL_OW 275
41880: PUSH
41881: LD_VAR 0 5
41885: PUSH
41886: LD_INT 3
41888: ARRAY
41889: GREATEREQUAL
41890: AND
41891: ST_TO_ADDR
// end ;
41892: LD_VAR 0 3
41896: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
// result := false ;
41910: LD_ADDR_VAR 0 8
41914: PUSH
41915: LD_INT 0
41917: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41918: LD_VAR 0 5
41922: NOT
41923: PUSH
41924: LD_VAR 0 1
41928: NOT
41929: OR
41930: PUSH
41931: LD_VAR 0 2
41935: NOT
41936: OR
41937: PUSH
41938: LD_VAR 0 3
41942: NOT
41943: OR
41944: IFFALSE 41948
// exit ;
41946: GO 42762
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41948: LD_ADDR_VAR 0 14
41952: PUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: LD_VAR 0 2
41962: PPUSH
41963: LD_VAR 0 3
41967: PPUSH
41968: LD_VAR 0 4
41972: PPUSH
41973: LD_VAR 0 5
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: PPUSH
41982: CALL_OW 248
41986: PPUSH
41987: LD_INT 0
41989: PPUSH
41990: CALL 44015 0 6
41994: ST_TO_ADDR
// if not hexes then
41995: LD_VAR 0 14
41999: NOT
42000: IFFALSE 42004
// exit ;
42002: GO 42762
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42004: LD_ADDR_VAR 0 17
42008: PUSH
42009: LD_VAR 0 5
42013: PPUSH
42014: LD_INT 22
42016: PUSH
42017: LD_VAR 0 13
42021: PPUSH
42022: CALL_OW 255
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 30
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 30
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PPUSH
42063: CALL_OW 72
42067: ST_TO_ADDR
// for i = 1 to hexes do
42068: LD_ADDR_VAR 0 9
42072: PUSH
42073: DOUBLE
42074: LD_INT 1
42076: DEC
42077: ST_TO_ADDR
42078: LD_VAR 0 14
42082: PUSH
42083: FOR_TO
42084: IFFALSE 42760
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42086: LD_ADDR_VAR 0 13
42090: PUSH
42091: LD_VAR 0 14
42095: PUSH
42096: LD_VAR 0 9
42100: ARRAY
42101: PUSH
42102: LD_INT 1
42104: ARRAY
42105: PPUSH
42106: LD_VAR 0 14
42110: PUSH
42111: LD_VAR 0 9
42115: ARRAY
42116: PUSH
42117: LD_INT 2
42119: ARRAY
42120: PPUSH
42121: CALL_OW 428
42125: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42126: LD_VAR 0 14
42130: PUSH
42131: LD_VAR 0 9
42135: ARRAY
42136: PUSH
42137: LD_INT 1
42139: ARRAY
42140: PPUSH
42141: LD_VAR 0 14
42145: PUSH
42146: LD_VAR 0 9
42150: ARRAY
42151: PUSH
42152: LD_INT 2
42154: ARRAY
42155: PPUSH
42156: CALL_OW 351
42160: PUSH
42161: LD_VAR 0 14
42165: PUSH
42166: LD_VAR 0 9
42170: ARRAY
42171: PUSH
42172: LD_INT 1
42174: ARRAY
42175: PPUSH
42176: LD_VAR 0 14
42180: PUSH
42181: LD_VAR 0 9
42185: ARRAY
42186: PUSH
42187: LD_INT 2
42189: ARRAY
42190: PPUSH
42191: CALL_OW 488
42195: NOT
42196: OR
42197: PUSH
42198: LD_VAR 0 13
42202: PPUSH
42203: CALL_OW 247
42207: PUSH
42208: LD_INT 3
42210: EQUAL
42211: OR
42212: IFFALSE 42218
// exit ;
42214: POP
42215: POP
42216: GO 42762
// if not tmp then
42218: LD_VAR 0 13
42222: NOT
42223: IFFALSE 42227
// continue ;
42225: GO 42083
// result := true ;
42227: LD_ADDR_VAR 0 8
42231: PUSH
42232: LD_INT 1
42234: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42235: LD_VAR 0 6
42239: PUSH
42240: LD_VAR 0 13
42244: PPUSH
42245: CALL_OW 247
42249: PUSH
42250: LD_INT 2
42252: EQUAL
42253: AND
42254: PUSH
42255: LD_VAR 0 13
42259: PPUSH
42260: CALL_OW 263
42264: PUSH
42265: LD_INT 1
42267: EQUAL
42268: AND
42269: IFFALSE 42433
// begin if IsDrivenBy ( tmp ) then
42271: LD_VAR 0 13
42275: PPUSH
42276: CALL_OW 311
42280: IFFALSE 42284
// continue ;
42282: GO 42083
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42284: LD_VAR 0 6
42288: PPUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 60
42294: PUSH
42295: EMPTY
42296: LIST
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: LD_INT 55
42307: PUSH
42308: EMPTY
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PPUSH
42319: CALL_OW 72
42323: IFFALSE 42431
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42325: LD_ADDR_VAR 0 18
42329: PUSH
42330: LD_VAR 0 6
42334: PPUSH
42335: LD_INT 3
42337: PUSH
42338: LD_INT 60
42340: PUSH
42341: EMPTY
42342: LIST
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 55
42353: PUSH
42354: EMPTY
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PPUSH
42365: CALL_OW 72
42369: PUSH
42370: LD_INT 1
42372: ARRAY
42373: ST_TO_ADDR
// if IsInUnit ( driver ) then
42374: LD_VAR 0 18
42378: PPUSH
42379: CALL_OW 310
42383: IFFALSE 42394
// ComExit ( driver ) ;
42385: LD_VAR 0 18
42389: PPUSH
42390: CALL 67794 0 1
// AddComEnterUnit ( driver , tmp ) ;
42394: LD_VAR 0 18
42398: PPUSH
42399: LD_VAR 0 13
42403: PPUSH
42404: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42408: LD_VAR 0 18
42412: PPUSH
42413: LD_VAR 0 7
42417: PPUSH
42418: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42422: LD_VAR 0 18
42426: PPUSH
42427: CALL_OW 181
// end ; continue ;
42431: GO 42083
// end ; if not cleaners or not tmp in cleaners then
42433: LD_VAR 0 6
42437: NOT
42438: PUSH
42439: LD_VAR 0 13
42443: PUSH
42444: LD_VAR 0 6
42448: IN
42449: NOT
42450: OR
42451: IFFALSE 42758
// begin if dep then
42453: LD_VAR 0 17
42457: IFFALSE 42593
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42459: LD_ADDR_VAR 0 16
42463: PUSH
42464: LD_VAR 0 17
42468: PUSH
42469: LD_INT 1
42471: ARRAY
42472: PPUSH
42473: CALL_OW 250
42477: PPUSH
42478: LD_VAR 0 17
42482: PUSH
42483: LD_INT 1
42485: ARRAY
42486: PPUSH
42487: CALL_OW 254
42491: PPUSH
42492: LD_INT 5
42494: PPUSH
42495: CALL_OW 272
42499: PUSH
42500: LD_VAR 0 17
42504: PUSH
42505: LD_INT 1
42507: ARRAY
42508: PPUSH
42509: CALL_OW 251
42513: PPUSH
42514: LD_VAR 0 17
42518: PUSH
42519: LD_INT 1
42521: ARRAY
42522: PPUSH
42523: CALL_OW 254
42527: PPUSH
42528: LD_INT 5
42530: PPUSH
42531: CALL_OW 273
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42540: LD_VAR 0 16
42544: PUSH
42545: LD_INT 1
42547: ARRAY
42548: PPUSH
42549: LD_VAR 0 16
42553: PUSH
42554: LD_INT 2
42556: ARRAY
42557: PPUSH
42558: CALL_OW 488
42562: IFFALSE 42593
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42564: LD_VAR 0 13
42568: PPUSH
42569: LD_VAR 0 16
42573: PUSH
42574: LD_INT 1
42576: ARRAY
42577: PPUSH
42578: LD_VAR 0 16
42582: PUSH
42583: LD_INT 2
42585: ARRAY
42586: PPUSH
42587: CALL_OW 111
// continue ;
42591: GO 42083
// end ; end ; r := GetDir ( tmp ) ;
42593: LD_ADDR_VAR 0 15
42597: PUSH
42598: LD_VAR 0 13
42602: PPUSH
42603: CALL_OW 254
42607: ST_TO_ADDR
// if r = 5 then
42608: LD_VAR 0 15
42612: PUSH
42613: LD_INT 5
42615: EQUAL
42616: IFFALSE 42626
// r := 0 ;
42618: LD_ADDR_VAR 0 15
42622: PUSH
42623: LD_INT 0
42625: ST_TO_ADDR
// for j = r to 5 do
42626: LD_ADDR_VAR 0 10
42630: PUSH
42631: DOUBLE
42632: LD_VAR 0 15
42636: DEC
42637: ST_TO_ADDR
42638: LD_INT 5
42640: PUSH
42641: FOR_TO
42642: IFFALSE 42756
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42644: LD_ADDR_VAR 0 11
42648: PUSH
42649: LD_VAR 0 13
42653: PPUSH
42654: CALL_OW 250
42658: PPUSH
42659: LD_VAR 0 10
42663: PPUSH
42664: LD_INT 2
42666: PPUSH
42667: CALL_OW 272
42671: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42672: LD_ADDR_VAR 0 12
42676: PUSH
42677: LD_VAR 0 13
42681: PPUSH
42682: CALL_OW 251
42686: PPUSH
42687: LD_VAR 0 10
42691: PPUSH
42692: LD_INT 2
42694: PPUSH
42695: CALL_OW 273
42699: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42700: LD_VAR 0 11
42704: PPUSH
42705: LD_VAR 0 12
42709: PPUSH
42710: CALL_OW 488
42714: PUSH
42715: LD_VAR 0 11
42719: PPUSH
42720: LD_VAR 0 12
42724: PPUSH
42725: CALL_OW 428
42729: NOT
42730: AND
42731: IFFALSE 42754
// begin ComMoveXY ( tmp , _x , _y ) ;
42733: LD_VAR 0 13
42737: PPUSH
42738: LD_VAR 0 11
42742: PPUSH
42743: LD_VAR 0 12
42747: PPUSH
42748: CALL_OW 111
// break ;
42752: GO 42756
// end ; end ;
42754: GO 42641
42756: POP
42757: POP
// end ; end ;
42758: GO 42083
42760: POP
42761: POP
// end ;
42762: LD_VAR 0 8
42766: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42767: LD_INT 0
42769: PPUSH
// result := true ;
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 1
42777: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42778: LD_VAR 0 2
42782: PUSH
42783: LD_INT 24
42785: DOUBLE
42786: EQUAL
42787: IFTRUE 42797
42789: LD_INT 33
42791: DOUBLE
42792: EQUAL
42793: IFTRUE 42797
42795: GO 42822
42797: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42798: LD_ADDR_VAR 0 3
42802: PUSH
42803: LD_INT 32
42805: PPUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 321
42815: PUSH
42816: LD_INT 2
42818: EQUAL
42819: ST_TO_ADDR
42820: GO 43138
42822: LD_INT 20
42824: DOUBLE
42825: EQUAL
42826: IFTRUE 42830
42828: GO 42855
42830: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42831: LD_ADDR_VAR 0 3
42835: PUSH
42836: LD_INT 6
42838: PPUSH
42839: LD_VAR 0 1
42843: PPUSH
42844: CALL_OW 321
42848: PUSH
42849: LD_INT 2
42851: EQUAL
42852: ST_TO_ADDR
42853: GO 43138
42855: LD_INT 22
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42869
42861: LD_INT 36
42863: DOUBLE
42864: EQUAL
42865: IFTRUE 42869
42867: GO 42894
42869: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42870: LD_ADDR_VAR 0 3
42874: PUSH
42875: LD_INT 15
42877: PPUSH
42878: LD_VAR 0 1
42882: PPUSH
42883: CALL_OW 321
42887: PUSH
42888: LD_INT 2
42890: EQUAL
42891: ST_TO_ADDR
42892: GO 43138
42894: LD_INT 30
42896: DOUBLE
42897: EQUAL
42898: IFTRUE 42902
42900: GO 42927
42902: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_INT 20
42910: PPUSH
42911: LD_VAR 0 1
42915: PPUSH
42916: CALL_OW 321
42920: PUSH
42921: LD_INT 2
42923: EQUAL
42924: ST_TO_ADDR
42925: GO 43138
42927: LD_INT 28
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42941
42933: LD_INT 21
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42941
42939: GO 42966
42941: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42942: LD_ADDR_VAR 0 3
42946: PUSH
42947: LD_INT 21
42949: PPUSH
42950: LD_VAR 0 1
42954: PPUSH
42955: CALL_OW 321
42959: PUSH
42960: LD_INT 2
42962: EQUAL
42963: ST_TO_ADDR
42964: GO 43138
42966: LD_INT 16
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 42999
42974: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42975: LD_ADDR_VAR 0 3
42979: PUSH
42980: LD_INT 84
42982: PPUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: CALL_OW 321
42992: PUSH
42993: LD_INT 2
42995: EQUAL
42996: ST_TO_ADDR
42997: GO 43138
42999: LD_INT 19
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43013
43005: LD_INT 23
43007: DOUBLE
43008: EQUAL
43009: IFTRUE 43013
43011: GO 43038
43013: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43014: LD_ADDR_VAR 0 3
43018: PUSH
43019: LD_INT 83
43021: PPUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 321
43031: PUSH
43032: LD_INT 2
43034: EQUAL
43035: ST_TO_ADDR
43036: GO 43138
43038: LD_INT 17
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43046
43044: GO 43071
43046: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_INT 39
43054: PPUSH
43055: LD_VAR 0 1
43059: PPUSH
43060: CALL_OW 321
43064: PUSH
43065: LD_INT 2
43067: EQUAL
43068: ST_TO_ADDR
43069: GO 43138
43071: LD_INT 18
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43079
43077: GO 43104
43079: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43080: LD_ADDR_VAR 0 3
43084: PUSH
43085: LD_INT 40
43087: PPUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: CALL_OW 321
43097: PUSH
43098: LD_INT 2
43100: EQUAL
43101: ST_TO_ADDR
43102: GO 43138
43104: LD_INT 27
43106: DOUBLE
43107: EQUAL
43108: IFTRUE 43112
43110: GO 43137
43112: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_INT 35
43120: PPUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: CALL_OW 321
43130: PUSH
43131: LD_INT 2
43133: EQUAL
43134: ST_TO_ADDR
43135: GO 43138
43137: POP
// end ;
43138: LD_VAR 0 3
43142: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43143: LD_INT 0
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
// result := false ;
43156: LD_ADDR_VAR 0 6
43160: PUSH
43161: LD_INT 0
43163: ST_TO_ADDR
// if btype = b_depot then
43164: LD_VAR 0 2
43168: PUSH
43169: LD_INT 0
43171: EQUAL
43172: IFFALSE 43184
// begin result := true ;
43174: LD_ADDR_VAR 0 6
43178: PUSH
43179: LD_INT 1
43181: ST_TO_ADDR
// exit ;
43182: GO 44010
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43184: LD_VAR 0 1
43188: NOT
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 266
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: IN
43210: NOT
43211: OR
43212: PUSH
43213: LD_VAR 0 2
43217: NOT
43218: OR
43219: PUSH
43220: LD_VAR 0 5
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: LD_INT 4
43239: PUSH
43240: LD_INT 5
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: IN
43251: NOT
43252: OR
43253: PUSH
43254: LD_VAR 0 3
43258: PPUSH
43259: LD_VAR 0 4
43263: PPUSH
43264: CALL_OW 488
43268: NOT
43269: OR
43270: IFFALSE 43274
// exit ;
43272: GO 44010
// side := GetSide ( depot ) ;
43274: LD_ADDR_VAR 0 9
43278: PUSH
43279: LD_VAR 0 1
43283: PPUSH
43284: CALL_OW 255
43288: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43289: LD_VAR 0 9
43293: PPUSH
43294: LD_VAR 0 2
43298: PPUSH
43299: CALL 42767 0 2
43303: NOT
43304: IFFALSE 43308
// exit ;
43306: GO 44010
// pom := GetBase ( depot ) ;
43308: LD_ADDR_VAR 0 10
43312: PUSH
43313: LD_VAR 0 1
43317: PPUSH
43318: CALL_OW 274
43322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43323: LD_ADDR_VAR 0 11
43327: PUSH
43328: LD_VAR 0 2
43332: PPUSH
43333: LD_VAR 0 1
43337: PPUSH
43338: CALL_OW 248
43342: PPUSH
43343: CALL_OW 450
43347: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43348: LD_VAR 0 10
43352: PPUSH
43353: LD_INT 1
43355: PPUSH
43356: CALL_OW 275
43360: PUSH
43361: LD_VAR 0 11
43365: PUSH
43366: LD_INT 1
43368: ARRAY
43369: GREATEREQUAL
43370: PUSH
43371: LD_VAR 0 10
43375: PPUSH
43376: LD_INT 2
43378: PPUSH
43379: CALL_OW 275
43383: PUSH
43384: LD_VAR 0 11
43388: PUSH
43389: LD_INT 2
43391: ARRAY
43392: GREATEREQUAL
43393: AND
43394: PUSH
43395: LD_VAR 0 10
43399: PPUSH
43400: LD_INT 3
43402: PPUSH
43403: CALL_OW 275
43407: PUSH
43408: LD_VAR 0 11
43412: PUSH
43413: LD_INT 3
43415: ARRAY
43416: GREATEREQUAL
43417: AND
43418: NOT
43419: IFFALSE 43423
// exit ;
43421: GO 44010
// if GetBType ( depot ) = b_depot then
43423: LD_VAR 0 1
43427: PPUSH
43428: CALL_OW 266
43432: PUSH
43433: LD_INT 0
43435: EQUAL
43436: IFFALSE 43448
// dist := 28 else
43438: LD_ADDR_VAR 0 14
43442: PUSH
43443: LD_INT 28
43445: ST_TO_ADDR
43446: GO 43456
// dist := 36 ;
43448: LD_ADDR_VAR 0 14
43452: PUSH
43453: LD_INT 36
43455: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43456: LD_VAR 0 1
43460: PPUSH
43461: LD_VAR 0 3
43465: PPUSH
43466: LD_VAR 0 4
43470: PPUSH
43471: CALL_OW 297
43475: PUSH
43476: LD_VAR 0 14
43480: GREATER
43481: IFFALSE 43485
// exit ;
43483: GO 44010
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43485: LD_ADDR_VAR 0 12
43489: PUSH
43490: LD_VAR 0 2
43494: PPUSH
43495: LD_VAR 0 3
43499: PPUSH
43500: LD_VAR 0 4
43504: PPUSH
43505: LD_VAR 0 5
43509: PPUSH
43510: LD_VAR 0 1
43514: PPUSH
43515: CALL_OW 248
43519: PPUSH
43520: LD_INT 0
43522: PPUSH
43523: CALL 44015 0 6
43527: ST_TO_ADDR
// if not hexes then
43528: LD_VAR 0 12
43532: NOT
43533: IFFALSE 43537
// exit ;
43535: GO 44010
// hex := GetHexInfo ( x , y ) ;
43537: LD_ADDR_VAR 0 15
43541: PUSH
43542: LD_VAR 0 3
43546: PPUSH
43547: LD_VAR 0 4
43551: PPUSH
43552: CALL_OW 546
43556: ST_TO_ADDR
// if hex [ 1 ] then
43557: LD_VAR 0 15
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: IFFALSE 43569
// exit ;
43567: GO 44010
// height := hex [ 2 ] ;
43569: LD_ADDR_VAR 0 13
43573: PUSH
43574: LD_VAR 0 15
43578: PUSH
43579: LD_INT 2
43581: ARRAY
43582: ST_TO_ADDR
// for i = 1 to hexes do
43583: LD_ADDR_VAR 0 7
43587: PUSH
43588: DOUBLE
43589: LD_INT 1
43591: DEC
43592: ST_TO_ADDR
43593: LD_VAR 0 12
43597: PUSH
43598: FOR_TO
43599: IFFALSE 43929
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43601: LD_VAR 0 12
43605: PUSH
43606: LD_VAR 0 7
43610: ARRAY
43611: PUSH
43612: LD_INT 1
43614: ARRAY
43615: PPUSH
43616: LD_VAR 0 12
43620: PUSH
43621: LD_VAR 0 7
43625: ARRAY
43626: PUSH
43627: LD_INT 2
43629: ARRAY
43630: PPUSH
43631: CALL_OW 488
43635: NOT
43636: PUSH
43637: LD_VAR 0 12
43641: PUSH
43642: LD_VAR 0 7
43646: ARRAY
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PPUSH
43652: LD_VAR 0 12
43656: PUSH
43657: LD_VAR 0 7
43661: ARRAY
43662: PUSH
43663: LD_INT 2
43665: ARRAY
43666: PPUSH
43667: CALL_OW 428
43671: PUSH
43672: LD_INT 0
43674: GREATER
43675: OR
43676: PUSH
43677: LD_VAR 0 12
43681: PUSH
43682: LD_VAR 0 7
43686: ARRAY
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: PPUSH
43692: LD_VAR 0 12
43696: PUSH
43697: LD_VAR 0 7
43701: ARRAY
43702: PUSH
43703: LD_INT 2
43705: ARRAY
43706: PPUSH
43707: CALL_OW 351
43711: OR
43712: IFFALSE 43718
// exit ;
43714: POP
43715: POP
43716: GO 44010
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43718: LD_ADDR_VAR 0 8
43722: PUSH
43723: LD_VAR 0 12
43727: PUSH
43728: LD_VAR 0 7
43732: ARRAY
43733: PUSH
43734: LD_INT 1
43736: ARRAY
43737: PPUSH
43738: LD_VAR 0 12
43742: PUSH
43743: LD_VAR 0 7
43747: ARRAY
43748: PUSH
43749: LD_INT 2
43751: ARRAY
43752: PPUSH
43753: CALL_OW 546
43757: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43758: LD_VAR 0 8
43762: PUSH
43763: LD_INT 1
43765: ARRAY
43766: PUSH
43767: LD_VAR 0 8
43771: PUSH
43772: LD_INT 2
43774: ARRAY
43775: PUSH
43776: LD_VAR 0 13
43780: PUSH
43781: LD_INT 2
43783: PLUS
43784: GREATER
43785: OR
43786: PUSH
43787: LD_VAR 0 8
43791: PUSH
43792: LD_INT 2
43794: ARRAY
43795: PUSH
43796: LD_VAR 0 13
43800: PUSH
43801: LD_INT 2
43803: MINUS
43804: LESS
43805: OR
43806: PUSH
43807: LD_VAR 0 8
43811: PUSH
43812: LD_INT 3
43814: ARRAY
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 8
43821: PUSH
43822: LD_INT 9
43824: PUSH
43825: LD_INT 10
43827: PUSH
43828: LD_INT 11
43830: PUSH
43831: LD_INT 12
43833: PUSH
43834: LD_INT 13
43836: PUSH
43837: LD_INT 16
43839: PUSH
43840: LD_INT 17
43842: PUSH
43843: LD_INT 18
43845: PUSH
43846: LD_INT 19
43848: PUSH
43849: LD_INT 20
43851: PUSH
43852: LD_INT 21
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: IN
43870: NOT
43871: OR
43872: PUSH
43873: LD_VAR 0 8
43877: PUSH
43878: LD_INT 5
43880: ARRAY
43881: NOT
43882: OR
43883: PUSH
43884: LD_VAR 0 8
43888: PUSH
43889: LD_INT 6
43891: ARRAY
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: LD_INT 7
43901: PUSH
43902: LD_INT 9
43904: PUSH
43905: LD_INT 10
43907: PUSH
43908: LD_INT 11
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: IN
43919: NOT
43920: OR
43921: IFFALSE 43927
// exit ;
43923: POP
43924: POP
43925: GO 44010
// end ;
43927: GO 43598
43929: POP
43930: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43931: LD_VAR 0 9
43935: PPUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_VAR 0 4
43945: PPUSH
43946: LD_INT 20
43948: PPUSH
43949: CALL 35933 0 4
43953: PUSH
43954: LD_INT 4
43956: ARRAY
43957: IFFALSE 43961
// exit ;
43959: GO 44010
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43961: LD_VAR 0 2
43965: PUSH
43966: LD_INT 29
43968: PUSH
43969: LD_INT 30
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: IN
43976: PUSH
43977: LD_VAR 0 3
43981: PPUSH
43982: LD_VAR 0 4
43986: PPUSH
43987: LD_VAR 0 9
43991: PPUSH
43992: CALL_OW 440
43996: NOT
43997: AND
43998: IFFALSE 44002
// exit ;
44000: GO 44010
// result := true ;
44002: LD_ADDR_VAR 0 6
44006: PUSH
44007: LD_INT 1
44009: ST_TO_ADDR
// end ;
44010: LD_VAR 0 6
44014: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
// result = [ ] ;
44075: LD_ADDR_VAR 0 7
44079: PUSH
44080: EMPTY
44081: ST_TO_ADDR
// temp_list = [ ] ;
44082: LD_ADDR_VAR 0 9
44086: PUSH
44087: EMPTY
44088: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44089: LD_VAR 0 4
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: LD_INT 4
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: IN
44120: NOT
44121: PUSH
44122: LD_VAR 0 1
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: IN
44137: PUSH
44138: LD_VAR 0 5
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: IN
44157: NOT
44158: AND
44159: OR
44160: IFFALSE 44164
// exit ;
44162: GO 62555
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44164: LD_VAR 0 1
44168: PUSH
44169: LD_INT 6
44171: PUSH
44172: LD_INT 7
44174: PUSH
44175: LD_INT 8
44177: PUSH
44178: LD_INT 13
44180: PUSH
44181: LD_INT 12
44183: PUSH
44184: LD_INT 15
44186: PUSH
44187: LD_INT 11
44189: PUSH
44190: LD_INT 14
44192: PUSH
44193: LD_INT 10
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: IN
44207: IFFALSE 44217
// btype = b_lab ;
44209: LD_ADDR_VAR 0 1
44213: PUSH
44214: LD_INT 6
44216: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44217: LD_VAR 0 6
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: IN
44236: NOT
44237: PUSH
44238: LD_VAR 0 1
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: LD_INT 6
44257: PUSH
44258: LD_INT 36
44260: PUSH
44261: LD_INT 4
44263: PUSH
44264: LD_INT 5
44266: PUSH
44267: LD_INT 31
44269: PUSH
44270: LD_INT 32
44272: PUSH
44273: LD_INT 33
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: IN
44289: NOT
44290: PUSH
44291: LD_VAR 0 6
44295: PUSH
44296: LD_INT 1
44298: EQUAL
44299: AND
44300: OR
44301: PUSH
44302: LD_VAR 0 1
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: IN
44317: NOT
44318: PUSH
44319: LD_VAR 0 6
44323: PUSH
44324: LD_INT 2
44326: EQUAL
44327: AND
44328: OR
44329: IFFALSE 44339
// mode = 0 ;
44331: LD_ADDR_VAR 0 6
44335: PUSH
44336: LD_INT 0
44338: ST_TO_ADDR
// case mode of 0 :
44339: LD_VAR 0 6
44343: PUSH
44344: LD_INT 0
44346: DOUBLE
44347: EQUAL
44348: IFTRUE 44352
44350: GO 55805
44352: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44353: LD_ADDR_VAR 0 11
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: LD_INT 3
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44546: LD_ADDR_VAR 0 12
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 3
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44742: LD_ADDR_VAR 0 13
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 3
44901: NEG
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: NEG
44914: PUSH
44915: LD_INT 3
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44941: LD_ADDR_VAR 0 14
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45137: LD_ADDR_VAR 0 15
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45330: LD_ADDR_VAR 0 16
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45523: LD_ADDR_VAR 0 17
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45753: LD_ADDR_VAR 0 18
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45983: LD_ADDR_VAR 0 19
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46213: LD_ADDR_VAR 0 20
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46443: LD_ADDR_VAR 0 21
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46673: LD_ADDR_VAR 0 22
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46903: LD_ADDR_VAR 0 23
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47183: LD_ADDR_VAR 0 24
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47459: LD_ADDR_VAR 0 25
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47733: LD_ADDR_VAR 0 26
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48009: LD_ADDR_VAR 0 27
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48289: LD_ADDR_VAR 0 28
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 3
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48571: LD_ADDR_VAR 0 29
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48850: LD_ADDR_VAR 0 30
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 3
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49128: LD_ADDR_VAR 0 31
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49406: LD_ADDR_VAR 0 32
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 3
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49684: LD_ADDR_VAR 0 33
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49963: LD_ADDR_VAR 0 34
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50243: LD_ADDR_VAR 0 35
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50355: LD_ADDR_VAR 0 36
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50467: LD_ADDR_VAR 0 37
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50579: LD_ADDR_VAR 0 38
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50691: LD_ADDR_VAR 0 39
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50803: LD_ADDR_VAR 0 40
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50915: LD_ADDR_VAR 0 41
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 3
51224: NEG
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51265: LD_ADDR_VAR 0 42
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: NEG
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51615: LD_ADDR_VAR 0 43
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 3
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51963: LD_ADDR_VAR 0 44
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52313: LD_ADDR_VAR 0 45
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52663: LD_ADDR_VAR 0 46
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: NEG
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53011: LD_ADDR_VAR 0 47
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53162: LD_ADDR_VAR 0 48
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53309: LD_ADDR_VAR 0 49
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53453: LD_ADDR_VAR 0 50
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53597: LD_ADDR_VAR 0 51
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53744: LD_ADDR_VAR 0 52
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53895: LD_ADDR_VAR 0 53
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54125: LD_ADDR_VAR 0 54
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54355: LD_ADDR_VAR 0 55
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54585: LD_ADDR_VAR 0 56
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54815: LD_ADDR_VAR 0 57
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55045: LD_ADDR_VAR 0 58
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55275: LD_ADDR_VAR 0 59
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55363: LD_ADDR_VAR 0 60
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55451: LD_ADDR_VAR 0 61
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55539: LD_ADDR_VAR 0 62
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55627: LD_ADDR_VAR 0 63
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55715: LD_ADDR_VAR 0 64
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// end ; 1 :
55803: GO 61700
55805: LD_INT 1
55807: DOUBLE
55808: EQUAL
55809: IFTRUE 55813
55811: GO 58436
55813: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55814: LD_ADDR_VAR 0 11
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 3
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55858: LD_ADDR_VAR 0 12
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55899: LD_ADDR_VAR 0 13
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55939: LD_ADDR_VAR 0 14
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 3
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55980: LD_ADDR_VAR 0 15
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 3
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56024: LD_ADDR_VAR 0 16
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 3
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56070: LD_ADDR_VAR 0 17
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 3
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56114: LD_ADDR_VAR 0 18
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56155: LD_ADDR_VAR 0 19
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56195: LD_ADDR_VAR 0 20
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56236: LD_ADDR_VAR 0 21
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56280: LD_ADDR_VAR 0 22
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56326: LD_ADDR_VAR 0 23
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 4
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56370: LD_ADDR_VAR 0 24
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 4
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56411: LD_ADDR_VAR 0 25
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56451: LD_ADDR_VAR 0 26
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56492: LD_ADDR_VAR 0 27
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56536: LD_ADDR_VAR 0 28
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: LD_INT 4
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: NEG
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56582: LD_ADDR_VAR 0 29
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 4
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 4
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 5
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 5
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 6
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 6
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 5
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56737: LD_ADDR_VAR 0 30
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 5
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 6
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 6
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56880: LD_ADDR_VAR 0 31
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 4
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 4
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 5
56947: PUSH
56948: LD_INT 4
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: PUSH
56958: LD_INT 5
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: PUSH
56968: LD_INT 5
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 6
56977: PUSH
56978: LD_INT 5
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 6
56987: PUSH
56988: LD_INT 6
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 5
56997: PUSH
56998: LD_INT 6
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57019: LD_ADDR_VAR 0 32
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 4
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 4
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 5
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 5
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 4
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 6
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 6
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 5
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57162: LD_ADDR_VAR 0 33
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 3
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 4
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 5
57248: NEG
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 5
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 5
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 6
57282: NEG
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 6
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57317: LD_ADDR_VAR 0 34
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 3
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: NEG
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: LD_INT 5
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 5
57408: NEG
57409: PUSH
57410: LD_INT 4
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: LD_INT 5
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: LD_INT 6
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 6
57444: NEG
57445: PUSH
57446: LD_INT 5
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 6
57456: NEG
57457: PUSH
57458: LD_INT 6
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57480: LD_ADDR_VAR 0 41
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57524: LD_ADDR_VAR 0 42
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57565: LD_ADDR_VAR 0 43
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57605: LD_ADDR_VAR 0 44
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57646: LD_ADDR_VAR 0 45
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57690: LD_ADDR_VAR 0 46
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57736: LD_ADDR_VAR 0 47
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57769: LD_ADDR_VAR 0 48
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57800: LD_ADDR_VAR 0 49
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57829: LD_ADDR_VAR 0 50
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57858: LD_ADDR_VAR 0 51
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57889: LD_ADDR_VAR 0 52
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57922: LD_ADDR_VAR 0 53
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57966: LD_ADDR_VAR 0 54
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58007: LD_ADDR_VAR 0 55
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58047: LD_ADDR_VAR 0 56
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58088: LD_ADDR_VAR 0 57
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58132: LD_ADDR_VAR 0 58
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58178: LD_ADDR_VAR 0 59
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58222: LD_ADDR_VAR 0 60
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58263: LD_ADDR_VAR 0 61
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58303: LD_ADDR_VAR 0 62
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58344: LD_ADDR_VAR 0 63
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58388: LD_ADDR_VAR 0 64
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// end ; 2 :
58434: GO 61700
58436: LD_INT 2
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58444
58442: GO 61699
58444: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58445: LD_ADDR_VAR 0 29
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 5
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 5
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 4
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 5
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 4
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: LD_INT 4
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 4
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 4
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 5
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 5
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 4
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 5
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 4
58784: NEG
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 4
58830: NEG
58831: PUSH
58832: LD_INT 4
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: LD_INT 5
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 5
58890: NEG
58891: PUSH
58892: LD_INT 4
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: LD_INT 5
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 5
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 5
58926: NEG
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58983: LD_ADDR_VAR 0 30
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: LD_INT 4
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 5
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 5
59020: PUSH
59021: LD_INT 5
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: LD_INT 5
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: LD_INT 4
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 5
59060: PUSH
59061: LD_INT 3
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 5
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 4
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 5
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 5
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 4
59335: NEG
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: LD_INT 4
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 4
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 4
59371: NEG
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 4
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 5
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 3
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 4
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 5
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 5
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59530: LD_ADDR_VAR 0 31
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 4
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 4
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 5
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 5
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 4
59686: NEG
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 4
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: NEG
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 4
59732: NEG
59733: PUSH
59734: LD_INT 4
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 4
59744: NEG
59745: PUSH
59746: LD_INT 5
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 5
59792: NEG
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: LD_INT 5
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 5
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 5
59828: NEG
59829: PUSH
59830: LD_INT 3
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 4
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 4
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 5
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 5
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 5
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60080: LD_ADDR_VAR 0 32
60084: PUSH
60085: LD_INT 4
60087: NEG
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 5
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 4
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 4
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 3
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 3
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 4
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 5
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 3
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 4
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 4
60492: PUSH
60493: LD_INT 4
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 4
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 5
60512: PUSH
60513: LD_INT 4
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 5
60522: PUSH
60523: LD_INT 5
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: PUSH
60533: LD_INT 5
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: PUSH
60543: LD_INT 4
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 5
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 5
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60627: LD_ADDR_VAR 0 33
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: LD_INT 4
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: LD_INT 5
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: LD_INT 4
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 5
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 5
60706: NEG
60707: PUSH
60708: LD_INT 5
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 5
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 5
60730: NEG
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 4
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 4
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 4
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 5
60927: PUSH
60928: LD_INT 2
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: PUSH
60968: LD_INT 4
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: LD_INT 4
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 5
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61165: LD_ADDR_VAR 0 34
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 4
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 5
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 4
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: LD_INT 5
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: LD_INT 5
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 4
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 3
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 4
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 4
61407: PUSH
61408: LD_INT 5
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 4
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 5
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 5
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 4
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 4
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: NEG
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 4
61550: NEG
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 4
61561: NEG
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 4
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 5
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 5
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 5
61629: NEG
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// end ; end ;
61697: GO 61700
61699: POP
// case btype of b_depot , b_warehouse :
61700: LD_VAR 0 1
61704: PUSH
61705: LD_INT 0
61707: DOUBLE
61708: EQUAL
61709: IFTRUE 61719
61711: LD_INT 1
61713: DOUBLE
61714: EQUAL
61715: IFTRUE 61719
61717: GO 61920
61719: POP
// case nation of nation_american :
61720: LD_VAR 0 5
61724: PUSH
61725: LD_INT 1
61727: DOUBLE
61728: EQUAL
61729: IFTRUE 61733
61731: GO 61789
61733: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61734: LD_ADDR_VAR 0 9
61738: PUSH
61739: LD_VAR 0 11
61743: PUSH
61744: LD_VAR 0 12
61748: PUSH
61749: LD_VAR 0 13
61753: PUSH
61754: LD_VAR 0 14
61758: PUSH
61759: LD_VAR 0 15
61763: PUSH
61764: LD_VAR 0 16
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: PUSH
61777: LD_VAR 0 4
61781: PUSH
61782: LD_INT 1
61784: PLUS
61785: ARRAY
61786: ST_TO_ADDR
61787: GO 61918
61789: LD_INT 2
61791: DOUBLE
61792: EQUAL
61793: IFTRUE 61797
61795: GO 61853
61797: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61798: LD_ADDR_VAR 0 9
61802: PUSH
61803: LD_VAR 0 17
61807: PUSH
61808: LD_VAR 0 18
61812: PUSH
61813: LD_VAR 0 19
61817: PUSH
61818: LD_VAR 0 20
61822: PUSH
61823: LD_VAR 0 21
61827: PUSH
61828: LD_VAR 0 22
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: PUSH
61841: LD_VAR 0 4
61845: PUSH
61846: LD_INT 1
61848: PLUS
61849: ARRAY
61850: ST_TO_ADDR
61851: GO 61918
61853: LD_INT 3
61855: DOUBLE
61856: EQUAL
61857: IFTRUE 61861
61859: GO 61917
61861: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61862: LD_ADDR_VAR 0 9
61866: PUSH
61867: LD_VAR 0 23
61871: PUSH
61872: LD_VAR 0 24
61876: PUSH
61877: LD_VAR 0 25
61881: PUSH
61882: LD_VAR 0 26
61886: PUSH
61887: LD_VAR 0 27
61891: PUSH
61892: LD_VAR 0 28
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: LD_VAR 0 4
61909: PUSH
61910: LD_INT 1
61912: PLUS
61913: ARRAY
61914: ST_TO_ADDR
61915: GO 61918
61917: POP
61918: GO 62473
61920: LD_INT 2
61922: DOUBLE
61923: EQUAL
61924: IFTRUE 61934
61926: LD_INT 3
61928: DOUBLE
61929: EQUAL
61930: IFTRUE 61934
61932: GO 61990
61934: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61935: LD_ADDR_VAR 0 9
61939: PUSH
61940: LD_VAR 0 29
61944: PUSH
61945: LD_VAR 0 30
61949: PUSH
61950: LD_VAR 0 31
61954: PUSH
61955: LD_VAR 0 32
61959: PUSH
61960: LD_VAR 0 33
61964: PUSH
61965: LD_VAR 0 34
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: PUSH
61978: LD_VAR 0 4
61982: PUSH
61983: LD_INT 1
61985: PLUS
61986: ARRAY
61987: ST_TO_ADDR
61988: GO 62473
61990: LD_INT 16
61992: DOUBLE
61993: EQUAL
61994: IFTRUE 62052
61996: LD_INT 17
61998: DOUBLE
61999: EQUAL
62000: IFTRUE 62052
62002: LD_INT 18
62004: DOUBLE
62005: EQUAL
62006: IFTRUE 62052
62008: LD_INT 19
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62052
62014: LD_INT 22
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62052
62020: LD_INT 20
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62052
62026: LD_INT 21
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62052
62032: LD_INT 23
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62052
62038: LD_INT 24
62040: DOUBLE
62041: EQUAL
62042: IFTRUE 62052
62044: LD_INT 25
62046: DOUBLE
62047: EQUAL
62048: IFTRUE 62052
62050: GO 62108
62052: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62053: LD_ADDR_VAR 0 9
62057: PUSH
62058: LD_VAR 0 35
62062: PUSH
62063: LD_VAR 0 36
62067: PUSH
62068: LD_VAR 0 37
62072: PUSH
62073: LD_VAR 0 38
62077: PUSH
62078: LD_VAR 0 39
62082: PUSH
62083: LD_VAR 0 40
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: PUSH
62096: LD_VAR 0 4
62100: PUSH
62101: LD_INT 1
62103: PLUS
62104: ARRAY
62105: ST_TO_ADDR
62106: GO 62473
62108: LD_INT 6
62110: DOUBLE
62111: EQUAL
62112: IFTRUE 62164
62114: LD_INT 7
62116: DOUBLE
62117: EQUAL
62118: IFTRUE 62164
62120: LD_INT 8
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62164
62126: LD_INT 13
62128: DOUBLE
62129: EQUAL
62130: IFTRUE 62164
62132: LD_INT 12
62134: DOUBLE
62135: EQUAL
62136: IFTRUE 62164
62138: LD_INT 15
62140: DOUBLE
62141: EQUAL
62142: IFTRUE 62164
62144: LD_INT 11
62146: DOUBLE
62147: EQUAL
62148: IFTRUE 62164
62150: LD_INT 14
62152: DOUBLE
62153: EQUAL
62154: IFTRUE 62164
62156: LD_INT 10
62158: DOUBLE
62159: EQUAL
62160: IFTRUE 62164
62162: GO 62220
62164: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62165: LD_ADDR_VAR 0 9
62169: PUSH
62170: LD_VAR 0 41
62174: PUSH
62175: LD_VAR 0 42
62179: PUSH
62180: LD_VAR 0 43
62184: PUSH
62185: LD_VAR 0 44
62189: PUSH
62190: LD_VAR 0 45
62194: PUSH
62195: LD_VAR 0 46
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: PUSH
62208: LD_VAR 0 4
62212: PUSH
62213: LD_INT 1
62215: PLUS
62216: ARRAY
62217: ST_TO_ADDR
62218: GO 62473
62220: LD_INT 36
62222: DOUBLE
62223: EQUAL
62224: IFTRUE 62228
62226: GO 62284
62228: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62229: LD_ADDR_VAR 0 9
62233: PUSH
62234: LD_VAR 0 47
62238: PUSH
62239: LD_VAR 0 48
62243: PUSH
62244: LD_VAR 0 49
62248: PUSH
62249: LD_VAR 0 50
62253: PUSH
62254: LD_VAR 0 51
62258: PUSH
62259: LD_VAR 0 52
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: PUSH
62272: LD_VAR 0 4
62276: PUSH
62277: LD_INT 1
62279: PLUS
62280: ARRAY
62281: ST_TO_ADDR
62282: GO 62473
62284: LD_INT 4
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62310
62290: LD_INT 5
62292: DOUBLE
62293: EQUAL
62294: IFTRUE 62310
62296: LD_INT 34
62298: DOUBLE
62299: EQUAL
62300: IFTRUE 62310
62302: LD_INT 37
62304: DOUBLE
62305: EQUAL
62306: IFTRUE 62310
62308: GO 62366
62310: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62311: LD_ADDR_VAR 0 9
62315: PUSH
62316: LD_VAR 0 53
62320: PUSH
62321: LD_VAR 0 54
62325: PUSH
62326: LD_VAR 0 55
62330: PUSH
62331: LD_VAR 0 56
62335: PUSH
62336: LD_VAR 0 57
62340: PUSH
62341: LD_VAR 0 58
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: PUSH
62354: LD_VAR 0 4
62358: PUSH
62359: LD_INT 1
62361: PLUS
62362: ARRAY
62363: ST_TO_ADDR
62364: GO 62473
62366: LD_INT 31
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62416
62372: LD_INT 32
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62416
62378: LD_INT 33
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62416
62384: LD_INT 27
62386: DOUBLE
62387: EQUAL
62388: IFTRUE 62416
62390: LD_INT 26
62392: DOUBLE
62393: EQUAL
62394: IFTRUE 62416
62396: LD_INT 28
62398: DOUBLE
62399: EQUAL
62400: IFTRUE 62416
62402: LD_INT 29
62404: DOUBLE
62405: EQUAL
62406: IFTRUE 62416
62408: LD_INT 30
62410: DOUBLE
62411: EQUAL
62412: IFTRUE 62416
62414: GO 62472
62416: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62417: LD_ADDR_VAR 0 9
62421: PUSH
62422: LD_VAR 0 59
62426: PUSH
62427: LD_VAR 0 60
62431: PUSH
62432: LD_VAR 0 61
62436: PUSH
62437: LD_VAR 0 62
62441: PUSH
62442: LD_VAR 0 63
62446: PUSH
62447: LD_VAR 0 64
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: PUSH
62460: LD_VAR 0 4
62464: PUSH
62465: LD_INT 1
62467: PLUS
62468: ARRAY
62469: ST_TO_ADDR
62470: GO 62473
62472: POP
// temp_list2 = [ ] ;
62473: LD_ADDR_VAR 0 10
62477: PUSH
62478: EMPTY
62479: ST_TO_ADDR
// for i in temp_list do
62480: LD_ADDR_VAR 0 8
62484: PUSH
62485: LD_VAR 0 9
62489: PUSH
62490: FOR_IN
62491: IFFALSE 62543
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62493: LD_ADDR_VAR 0 10
62497: PUSH
62498: LD_VAR 0 10
62502: PUSH
62503: LD_VAR 0 8
62507: PUSH
62508: LD_INT 1
62510: ARRAY
62511: PUSH
62512: LD_VAR 0 2
62516: PLUS
62517: PUSH
62518: LD_VAR 0 8
62522: PUSH
62523: LD_INT 2
62525: ARRAY
62526: PUSH
62527: LD_VAR 0 3
62531: PLUS
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: ADD
62540: ST_TO_ADDR
62541: GO 62490
62543: POP
62544: POP
// result = temp_list2 ;
62545: LD_ADDR_VAR 0 7
62549: PUSH
62550: LD_VAR 0 10
62554: ST_TO_ADDR
// end ;
62555: LD_VAR 0 7
62559: RET
// export function EnemyInRange ( unit , dist ) ; begin
62560: LD_INT 0
62562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62563: LD_ADDR_VAR 0 3
62567: PUSH
62568: LD_VAR 0 1
62572: PPUSH
62573: CALL_OW 255
62577: PPUSH
62578: LD_VAR 0 1
62582: PPUSH
62583: CALL_OW 250
62587: PPUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 251
62597: PPUSH
62598: LD_VAR 0 2
62602: PPUSH
62603: CALL 35933 0 4
62607: PUSH
62608: LD_INT 4
62610: ARRAY
62611: ST_TO_ADDR
// end ;
62612: LD_VAR 0 3
62616: RET
// export function PlayerSeeMe ( unit ) ; begin
62617: LD_INT 0
62619: PPUSH
// result := See ( your_side , unit ) ;
62620: LD_ADDR_VAR 0 2
62624: PUSH
62625: LD_OWVAR 2
62629: PPUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: CALL_OW 292
62639: ST_TO_ADDR
// end ;
62640: LD_VAR 0 2
62644: RET
// export function ReverseDir ( unit ) ; begin
62645: LD_INT 0
62647: PPUSH
// if not unit then
62648: LD_VAR 0 1
62652: NOT
62653: IFFALSE 62657
// exit ;
62655: GO 62680
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62657: LD_ADDR_VAR 0 2
62661: PUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 254
62671: PUSH
62672: LD_INT 3
62674: PLUS
62675: PUSH
62676: LD_INT 6
62678: MOD
62679: ST_TO_ADDR
// end ;
62680: LD_VAR 0 2
62684: RET
// export function ReverseArray ( array ) ; var i ; begin
62685: LD_INT 0
62687: PPUSH
62688: PPUSH
// if not array then
62689: LD_VAR 0 1
62693: NOT
62694: IFFALSE 62698
// exit ;
62696: GO 62753
// result := [ ] ;
62698: LD_ADDR_VAR 0 2
62702: PUSH
62703: EMPTY
62704: ST_TO_ADDR
// for i := array downto 1 do
62705: LD_ADDR_VAR 0 3
62709: PUSH
62710: DOUBLE
62711: LD_VAR 0 1
62715: INC
62716: ST_TO_ADDR
62717: LD_INT 1
62719: PUSH
62720: FOR_DOWNTO
62721: IFFALSE 62751
// result := Join ( result , array [ i ] ) ;
62723: LD_ADDR_VAR 0 2
62727: PUSH
62728: LD_VAR 0 2
62732: PPUSH
62733: LD_VAR 0 1
62737: PUSH
62738: LD_VAR 0 3
62742: ARRAY
62743: PPUSH
62744: CALL 67396 0 2
62748: ST_TO_ADDR
62749: GO 62720
62751: POP
62752: POP
// end ;
62753: LD_VAR 0 2
62757: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62758: LD_INT 0
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
// if not unit or not hexes then
62766: LD_VAR 0 1
62770: NOT
62771: PUSH
62772: LD_VAR 0 2
62776: NOT
62777: OR
62778: IFFALSE 62782
// exit ;
62780: GO 62905
// dist := 9999 ;
62782: LD_ADDR_VAR 0 5
62786: PUSH
62787: LD_INT 9999
62789: ST_TO_ADDR
// for i = 1 to hexes do
62790: LD_ADDR_VAR 0 4
62794: PUSH
62795: DOUBLE
62796: LD_INT 1
62798: DEC
62799: ST_TO_ADDR
62800: LD_VAR 0 2
62804: PUSH
62805: FOR_TO
62806: IFFALSE 62893
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62808: LD_ADDR_VAR 0 6
62812: PUSH
62813: LD_VAR 0 1
62817: PPUSH
62818: LD_VAR 0 2
62822: PUSH
62823: LD_VAR 0 4
62827: ARRAY
62828: PUSH
62829: LD_INT 1
62831: ARRAY
62832: PPUSH
62833: LD_VAR 0 2
62837: PUSH
62838: LD_VAR 0 4
62842: ARRAY
62843: PUSH
62844: LD_INT 2
62846: ARRAY
62847: PPUSH
62848: CALL_OW 297
62852: ST_TO_ADDR
// if tdist < dist then
62853: LD_VAR 0 6
62857: PUSH
62858: LD_VAR 0 5
62862: LESS
62863: IFFALSE 62891
// begin hex := hexes [ i ] ;
62865: LD_ADDR_VAR 0 8
62869: PUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_VAR 0 4
62879: ARRAY
62880: ST_TO_ADDR
// dist := tdist ;
62881: LD_ADDR_VAR 0 5
62885: PUSH
62886: LD_VAR 0 6
62890: ST_TO_ADDR
// end ; end ;
62891: GO 62805
62893: POP
62894: POP
// result := hex ;
62895: LD_ADDR_VAR 0 3
62899: PUSH
62900: LD_VAR 0 8
62904: ST_TO_ADDR
// end ;
62905: LD_VAR 0 3
62909: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62910: LD_INT 0
62912: PPUSH
62913: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62914: LD_VAR 0 1
62918: NOT
62919: PUSH
62920: LD_VAR 0 1
62924: PUSH
62925: LD_INT 21
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 23
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PPUSH
62949: CALL_OW 69
62953: IN
62954: NOT
62955: OR
62956: IFFALSE 62960
// exit ;
62958: GO 63007
// for i = 1 to 3 do
62960: LD_ADDR_VAR 0 3
62964: PUSH
62965: DOUBLE
62966: LD_INT 1
62968: DEC
62969: ST_TO_ADDR
62970: LD_INT 3
62972: PUSH
62973: FOR_TO
62974: IFFALSE 63005
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62976: LD_VAR 0 1
62980: PPUSH
62981: CALL_OW 250
62985: PPUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: CALL_OW 251
62995: PPUSH
62996: LD_INT 1
62998: PPUSH
62999: CALL_OW 453
63003: GO 62973
63005: POP
63006: POP
// end ;
63007: LD_VAR 0 2
63011: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
63019: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63020: LD_VAR 0 1
63024: NOT
63025: PUSH
63026: LD_VAR 0 2
63030: NOT
63031: OR
63032: PUSH
63033: LD_VAR 0 1
63037: PPUSH
63038: CALL_OW 314
63042: OR
63043: IFFALSE 63047
// exit ;
63045: GO 63514
// if GetLives ( i ) < 250 then
63047: LD_VAR 0 4
63051: PPUSH
63052: CALL_OW 256
63056: PUSH
63057: LD_INT 250
63059: LESS
63060: IFFALSE 63073
// begin ComAutodestruct ( i ) ;
63062: LD_VAR 0 4
63066: PPUSH
63067: CALL 62910 0 1
// exit ;
63071: GO 63514
// end ; x := GetX ( enemy_unit ) ;
63073: LD_ADDR_VAR 0 7
63077: PUSH
63078: LD_VAR 0 2
63082: PPUSH
63083: CALL_OW 250
63087: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63088: LD_ADDR_VAR 0 8
63092: PUSH
63093: LD_VAR 0 2
63097: PPUSH
63098: CALL_OW 251
63102: ST_TO_ADDR
// if not x or not y then
63103: LD_VAR 0 7
63107: NOT
63108: PUSH
63109: LD_VAR 0 8
63113: NOT
63114: OR
63115: IFFALSE 63119
// exit ;
63117: GO 63514
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63119: LD_ADDR_VAR 0 6
63123: PUSH
63124: LD_VAR 0 7
63128: PPUSH
63129: LD_INT 0
63131: PPUSH
63132: LD_INT 4
63134: PPUSH
63135: CALL_OW 272
63139: PUSH
63140: LD_VAR 0 8
63144: PPUSH
63145: LD_INT 0
63147: PPUSH
63148: LD_INT 4
63150: PPUSH
63151: CALL_OW 273
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_VAR 0 7
63164: PPUSH
63165: LD_INT 1
63167: PPUSH
63168: LD_INT 4
63170: PPUSH
63171: CALL_OW 272
63175: PUSH
63176: LD_VAR 0 8
63180: PPUSH
63181: LD_INT 1
63183: PPUSH
63184: LD_INT 4
63186: PPUSH
63187: CALL_OW 273
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_VAR 0 7
63200: PPUSH
63201: LD_INT 2
63203: PPUSH
63204: LD_INT 4
63206: PPUSH
63207: CALL_OW 272
63211: PUSH
63212: LD_VAR 0 8
63216: PPUSH
63217: LD_INT 2
63219: PPUSH
63220: LD_INT 4
63222: PPUSH
63223: CALL_OW 273
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_VAR 0 7
63236: PPUSH
63237: LD_INT 3
63239: PPUSH
63240: LD_INT 4
63242: PPUSH
63243: CALL_OW 272
63247: PUSH
63248: LD_VAR 0 8
63252: PPUSH
63253: LD_INT 3
63255: PPUSH
63256: LD_INT 4
63258: PPUSH
63259: CALL_OW 273
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_VAR 0 7
63272: PPUSH
63273: LD_INT 4
63275: PPUSH
63276: LD_INT 4
63278: PPUSH
63279: CALL_OW 272
63283: PUSH
63284: LD_VAR 0 8
63288: PPUSH
63289: LD_INT 4
63291: PPUSH
63292: LD_INT 4
63294: PPUSH
63295: CALL_OW 273
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_VAR 0 7
63308: PPUSH
63309: LD_INT 5
63311: PPUSH
63312: LD_INT 4
63314: PPUSH
63315: CALL_OW 272
63319: PUSH
63320: LD_VAR 0 8
63324: PPUSH
63325: LD_INT 5
63327: PPUSH
63328: LD_INT 4
63330: PPUSH
63331: CALL_OW 273
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: ST_TO_ADDR
// for i = tmp downto 1 do
63348: LD_ADDR_VAR 0 4
63352: PUSH
63353: DOUBLE
63354: LD_VAR 0 6
63358: INC
63359: ST_TO_ADDR
63360: LD_INT 1
63362: PUSH
63363: FOR_DOWNTO
63364: IFFALSE 63465
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63366: LD_VAR 0 6
63370: PUSH
63371: LD_VAR 0 4
63375: ARRAY
63376: PUSH
63377: LD_INT 1
63379: ARRAY
63380: PPUSH
63381: LD_VAR 0 6
63385: PUSH
63386: LD_VAR 0 4
63390: ARRAY
63391: PUSH
63392: LD_INT 2
63394: ARRAY
63395: PPUSH
63396: CALL_OW 488
63400: NOT
63401: PUSH
63402: LD_VAR 0 6
63406: PUSH
63407: LD_VAR 0 4
63411: ARRAY
63412: PUSH
63413: LD_INT 1
63415: ARRAY
63416: PPUSH
63417: LD_VAR 0 6
63421: PUSH
63422: LD_VAR 0 4
63426: ARRAY
63427: PUSH
63428: LD_INT 2
63430: ARRAY
63431: PPUSH
63432: CALL_OW 428
63436: PUSH
63437: LD_INT 0
63439: NONEQUAL
63440: OR
63441: IFFALSE 63463
// tmp := Delete ( tmp , i ) ;
63443: LD_ADDR_VAR 0 6
63447: PUSH
63448: LD_VAR 0 6
63452: PPUSH
63453: LD_VAR 0 4
63457: PPUSH
63458: CALL_OW 3
63462: ST_TO_ADDR
63463: GO 63363
63465: POP
63466: POP
// j := GetClosestHex ( unit , tmp ) ;
63467: LD_ADDR_VAR 0 5
63471: PUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: LD_VAR 0 6
63481: PPUSH
63482: CALL 62758 0 2
63486: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63487: LD_VAR 0 1
63491: PPUSH
63492: LD_VAR 0 5
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: PPUSH
63501: LD_VAR 0 5
63505: PUSH
63506: LD_INT 2
63508: ARRAY
63509: PPUSH
63510: CALL_OW 111
// end ;
63514: LD_VAR 0 3
63518: RET
// export function PrepareApemanSoldier ( ) ; begin
63519: LD_INT 0
63521: PPUSH
// uc_nation := 0 ;
63522: LD_ADDR_OWVAR 21
63526: PUSH
63527: LD_INT 0
63529: ST_TO_ADDR
// hc_sex := sex_male ;
63530: LD_ADDR_OWVAR 27
63534: PUSH
63535: LD_INT 1
63537: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63538: LD_ADDR_OWVAR 28
63542: PUSH
63543: LD_INT 15
63545: ST_TO_ADDR
// hc_gallery :=  ;
63546: LD_ADDR_OWVAR 33
63550: PUSH
63551: LD_STRING 
63553: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63554: LD_ADDR_OWVAR 31
63558: PUSH
63559: LD_INT 0
63561: PPUSH
63562: LD_INT 3
63564: PPUSH
63565: CALL_OW 12
63569: PUSH
63570: LD_INT 0
63572: PPUSH
63573: LD_INT 3
63575: PPUSH
63576: CALL_OW 12
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// end ;
63593: LD_VAR 0 1
63597: RET
// export function PrepareApemanEngineer ( ) ; begin
63598: LD_INT 0
63600: PPUSH
// uc_nation := 0 ;
63601: LD_ADDR_OWVAR 21
63605: PUSH
63606: LD_INT 0
63608: ST_TO_ADDR
// hc_sex := sex_male ;
63609: LD_ADDR_OWVAR 27
63613: PUSH
63614: LD_INT 1
63616: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63617: LD_ADDR_OWVAR 28
63621: PUSH
63622: LD_INT 16
63624: ST_TO_ADDR
// hc_gallery :=  ;
63625: LD_ADDR_OWVAR 33
63629: PUSH
63630: LD_STRING 
63632: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63633: LD_ADDR_OWVAR 31
63637: PUSH
63638: LD_INT 0
63640: PPUSH
63641: LD_INT 3
63643: PPUSH
63644: CALL_OW 12
63648: PUSH
63649: LD_INT 0
63651: PPUSH
63652: LD_INT 3
63654: PPUSH
63655: CALL_OW 12
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// end ;
63672: LD_VAR 0 1
63676: RET
// export function PrepareApeman ( agressivity ) ; begin
63677: LD_INT 0
63679: PPUSH
// uc_side := 0 ;
63680: LD_ADDR_OWVAR 20
63684: PUSH
63685: LD_INT 0
63687: ST_TO_ADDR
// uc_nation := 0 ;
63688: LD_ADDR_OWVAR 21
63692: PUSH
63693: LD_INT 0
63695: ST_TO_ADDR
// hc_sex := sex_male ;
63696: LD_ADDR_OWVAR 27
63700: PUSH
63701: LD_INT 1
63703: ST_TO_ADDR
// hc_class := class_apeman ;
63704: LD_ADDR_OWVAR 28
63708: PUSH
63709: LD_INT 12
63711: ST_TO_ADDR
// hc_gallery :=  ;
63712: LD_ADDR_OWVAR 33
63716: PUSH
63717: LD_STRING 
63719: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63720: LD_ADDR_OWVAR 35
63724: PUSH
63725: LD_VAR 0 1
63729: NEG
63730: PPUSH
63731: LD_VAR 0 1
63735: PPUSH
63736: CALL_OW 12
63740: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63741: LD_ADDR_OWVAR 31
63745: PUSH
63746: LD_INT 0
63748: PPUSH
63749: LD_INT 3
63751: PPUSH
63752: CALL_OW 12
63756: PUSH
63757: LD_INT 0
63759: PPUSH
63760: LD_INT 3
63762: PPUSH
63763: CALL_OW 12
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: ST_TO_ADDR
// end ;
63780: LD_VAR 0 2
63784: RET
// export function PrepareTiger ( agressivity ) ; begin
63785: LD_INT 0
63787: PPUSH
// uc_side := 0 ;
63788: LD_ADDR_OWVAR 20
63792: PUSH
63793: LD_INT 0
63795: ST_TO_ADDR
// uc_nation := 0 ;
63796: LD_ADDR_OWVAR 21
63800: PUSH
63801: LD_INT 0
63803: ST_TO_ADDR
// hc_class := class_tiger ;
63804: LD_ADDR_OWVAR 28
63808: PUSH
63809: LD_INT 14
63811: ST_TO_ADDR
// hc_gallery :=  ;
63812: LD_ADDR_OWVAR 33
63816: PUSH
63817: LD_STRING 
63819: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63820: LD_ADDR_OWVAR 35
63824: PUSH
63825: LD_VAR 0 1
63829: NEG
63830: PPUSH
63831: LD_VAR 0 1
63835: PPUSH
63836: CALL_OW 12
63840: ST_TO_ADDR
// end ;
63841: LD_VAR 0 2
63845: RET
// export function PrepareEnchidna ( ) ; begin
63846: LD_INT 0
63848: PPUSH
// uc_side := 0 ;
63849: LD_ADDR_OWVAR 20
63853: PUSH
63854: LD_INT 0
63856: ST_TO_ADDR
// uc_nation := 0 ;
63857: LD_ADDR_OWVAR 21
63861: PUSH
63862: LD_INT 0
63864: ST_TO_ADDR
// hc_class := class_baggie ;
63865: LD_ADDR_OWVAR 28
63869: PUSH
63870: LD_INT 13
63872: ST_TO_ADDR
// hc_gallery :=  ;
63873: LD_ADDR_OWVAR 33
63877: PUSH
63878: LD_STRING 
63880: ST_TO_ADDR
// end ;
63881: LD_VAR 0 1
63885: RET
// export function PrepareFrog ( ) ; begin
63886: LD_INT 0
63888: PPUSH
// uc_side := 0 ;
63889: LD_ADDR_OWVAR 20
63893: PUSH
63894: LD_INT 0
63896: ST_TO_ADDR
// uc_nation := 0 ;
63897: LD_ADDR_OWVAR 21
63901: PUSH
63902: LD_INT 0
63904: ST_TO_ADDR
// hc_class := class_frog ;
63905: LD_ADDR_OWVAR 28
63909: PUSH
63910: LD_INT 19
63912: ST_TO_ADDR
// hc_gallery :=  ;
63913: LD_ADDR_OWVAR 33
63917: PUSH
63918: LD_STRING 
63920: ST_TO_ADDR
// end ;
63921: LD_VAR 0 1
63925: RET
// export function PrepareFish ( ) ; begin
63926: LD_INT 0
63928: PPUSH
// uc_side := 0 ;
63929: LD_ADDR_OWVAR 20
63933: PUSH
63934: LD_INT 0
63936: ST_TO_ADDR
// uc_nation := 0 ;
63937: LD_ADDR_OWVAR 21
63941: PUSH
63942: LD_INT 0
63944: ST_TO_ADDR
// hc_class := class_fish ;
63945: LD_ADDR_OWVAR 28
63949: PUSH
63950: LD_INT 20
63952: ST_TO_ADDR
// hc_gallery :=  ;
63953: LD_ADDR_OWVAR 33
63957: PUSH
63958: LD_STRING 
63960: ST_TO_ADDR
// end ;
63961: LD_VAR 0 1
63965: RET
// export function PrepareBird ( ) ; begin
63966: LD_INT 0
63968: PPUSH
// uc_side := 0 ;
63969: LD_ADDR_OWVAR 20
63973: PUSH
63974: LD_INT 0
63976: ST_TO_ADDR
// uc_nation := 0 ;
63977: LD_ADDR_OWVAR 21
63981: PUSH
63982: LD_INT 0
63984: ST_TO_ADDR
// hc_class := class_phororhacos ;
63985: LD_ADDR_OWVAR 28
63989: PUSH
63990: LD_INT 18
63992: ST_TO_ADDR
// hc_gallery :=  ;
63993: LD_ADDR_OWVAR 33
63997: PUSH
63998: LD_STRING 
64000: ST_TO_ADDR
// end ;
64001: LD_VAR 0 1
64005: RET
// export function PrepareHorse ( ) ; begin
64006: LD_INT 0
64008: PPUSH
// uc_side := 0 ;
64009: LD_ADDR_OWVAR 20
64013: PUSH
64014: LD_INT 0
64016: ST_TO_ADDR
// uc_nation := 0 ;
64017: LD_ADDR_OWVAR 21
64021: PUSH
64022: LD_INT 0
64024: ST_TO_ADDR
// hc_class := class_horse ;
64025: LD_ADDR_OWVAR 28
64029: PUSH
64030: LD_INT 21
64032: ST_TO_ADDR
// hc_gallery :=  ;
64033: LD_ADDR_OWVAR 33
64037: PUSH
64038: LD_STRING 
64040: ST_TO_ADDR
// end ;
64041: LD_VAR 0 1
64045: RET
// export function PrepareMastodont ( ) ; begin
64046: LD_INT 0
64048: PPUSH
// uc_side := 0 ;
64049: LD_ADDR_OWVAR 20
64053: PUSH
64054: LD_INT 0
64056: ST_TO_ADDR
// uc_nation := 0 ;
64057: LD_ADDR_OWVAR 21
64061: PUSH
64062: LD_INT 0
64064: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64065: LD_ADDR_OWVAR 37
64069: PUSH
64070: LD_INT 31
64072: ST_TO_ADDR
// vc_control := control_rider ;
64073: LD_ADDR_OWVAR 38
64077: PUSH
64078: LD_INT 4
64080: ST_TO_ADDR
// end ;
64081: LD_VAR 0 1
64085: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64086: LD_INT 0
64088: PPUSH
64089: PPUSH
64090: PPUSH
// uc_side = 0 ;
64091: LD_ADDR_OWVAR 20
64095: PUSH
64096: LD_INT 0
64098: ST_TO_ADDR
// uc_nation = 0 ;
64099: LD_ADDR_OWVAR 21
64103: PUSH
64104: LD_INT 0
64106: ST_TO_ADDR
// InitHc_All ( ) ;
64107: CALL_OW 584
// InitVc ;
64111: CALL_OW 20
// if mastodonts then
64115: LD_VAR 0 6
64119: IFFALSE 64186
// for i = 1 to mastodonts do
64121: LD_ADDR_VAR 0 11
64125: PUSH
64126: DOUBLE
64127: LD_INT 1
64129: DEC
64130: ST_TO_ADDR
64131: LD_VAR 0 6
64135: PUSH
64136: FOR_TO
64137: IFFALSE 64184
// begin vc_chassis := 31 ;
64139: LD_ADDR_OWVAR 37
64143: PUSH
64144: LD_INT 31
64146: ST_TO_ADDR
// vc_control := control_rider ;
64147: LD_ADDR_OWVAR 38
64151: PUSH
64152: LD_INT 4
64154: ST_TO_ADDR
// animal := CreateVehicle ;
64155: LD_ADDR_VAR 0 12
64159: PUSH
64160: CALL_OW 45
64164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64165: LD_VAR 0 12
64169: PPUSH
64170: LD_VAR 0 8
64174: PPUSH
64175: LD_INT 0
64177: PPUSH
64178: CALL 66314 0 3
// end ;
64182: GO 64136
64184: POP
64185: POP
// if horses then
64186: LD_VAR 0 5
64190: IFFALSE 64257
// for i = 1 to horses do
64192: LD_ADDR_VAR 0 11
64196: PUSH
64197: DOUBLE
64198: LD_INT 1
64200: DEC
64201: ST_TO_ADDR
64202: LD_VAR 0 5
64206: PUSH
64207: FOR_TO
64208: IFFALSE 64255
// begin hc_class := 21 ;
64210: LD_ADDR_OWVAR 28
64214: PUSH
64215: LD_INT 21
64217: ST_TO_ADDR
// hc_gallery :=  ;
64218: LD_ADDR_OWVAR 33
64222: PUSH
64223: LD_STRING 
64225: ST_TO_ADDR
// animal := CreateHuman ;
64226: LD_ADDR_VAR 0 12
64230: PUSH
64231: CALL_OW 44
64235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64236: LD_VAR 0 12
64240: PPUSH
64241: LD_VAR 0 8
64245: PPUSH
64246: LD_INT 0
64248: PPUSH
64249: CALL 66314 0 3
// end ;
64253: GO 64207
64255: POP
64256: POP
// if birds then
64257: LD_VAR 0 1
64261: IFFALSE 64328
// for i = 1 to birds do
64263: LD_ADDR_VAR 0 11
64267: PUSH
64268: DOUBLE
64269: LD_INT 1
64271: DEC
64272: ST_TO_ADDR
64273: LD_VAR 0 1
64277: PUSH
64278: FOR_TO
64279: IFFALSE 64326
// begin hc_class := 18 ;
64281: LD_ADDR_OWVAR 28
64285: PUSH
64286: LD_INT 18
64288: ST_TO_ADDR
// hc_gallery =  ;
64289: LD_ADDR_OWVAR 33
64293: PUSH
64294: LD_STRING 
64296: ST_TO_ADDR
// animal := CreateHuman ;
64297: LD_ADDR_VAR 0 12
64301: PUSH
64302: CALL_OW 44
64306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64307: LD_VAR 0 12
64311: PPUSH
64312: LD_VAR 0 8
64316: PPUSH
64317: LD_INT 0
64319: PPUSH
64320: CALL 66314 0 3
// end ;
64324: GO 64278
64326: POP
64327: POP
// if tigers then
64328: LD_VAR 0 2
64332: IFFALSE 64416
// for i = 1 to tigers do
64334: LD_ADDR_VAR 0 11
64338: PUSH
64339: DOUBLE
64340: LD_INT 1
64342: DEC
64343: ST_TO_ADDR
64344: LD_VAR 0 2
64348: PUSH
64349: FOR_TO
64350: IFFALSE 64414
// begin hc_class = class_tiger ;
64352: LD_ADDR_OWVAR 28
64356: PUSH
64357: LD_INT 14
64359: ST_TO_ADDR
// hc_gallery =  ;
64360: LD_ADDR_OWVAR 33
64364: PUSH
64365: LD_STRING 
64367: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64368: LD_ADDR_OWVAR 35
64372: PUSH
64373: LD_INT 7
64375: NEG
64376: PPUSH
64377: LD_INT 7
64379: PPUSH
64380: CALL_OW 12
64384: ST_TO_ADDR
// animal := CreateHuman ;
64385: LD_ADDR_VAR 0 12
64389: PUSH
64390: CALL_OW 44
64394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64395: LD_VAR 0 12
64399: PPUSH
64400: LD_VAR 0 8
64404: PPUSH
64405: LD_INT 0
64407: PPUSH
64408: CALL 66314 0 3
// end ;
64412: GO 64349
64414: POP
64415: POP
// if apemans then
64416: LD_VAR 0 3
64420: IFFALSE 64543
// for i = 1 to apemans do
64422: LD_ADDR_VAR 0 11
64426: PUSH
64427: DOUBLE
64428: LD_INT 1
64430: DEC
64431: ST_TO_ADDR
64432: LD_VAR 0 3
64436: PUSH
64437: FOR_TO
64438: IFFALSE 64541
// begin hc_class = class_apeman ;
64440: LD_ADDR_OWVAR 28
64444: PUSH
64445: LD_INT 12
64447: ST_TO_ADDR
// hc_gallery =  ;
64448: LD_ADDR_OWVAR 33
64452: PUSH
64453: LD_STRING 
64455: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64456: LD_ADDR_OWVAR 35
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PPUSH
64465: LD_INT 2
64467: PPUSH
64468: CALL_OW 12
64472: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64473: LD_ADDR_OWVAR 31
64477: PUSH
64478: LD_INT 1
64480: PPUSH
64481: LD_INT 3
64483: PPUSH
64484: CALL_OW 12
64488: PUSH
64489: LD_INT 1
64491: PPUSH
64492: LD_INT 3
64494: PPUSH
64495: CALL_OW 12
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: ST_TO_ADDR
// animal := CreateHuman ;
64512: LD_ADDR_VAR 0 12
64516: PUSH
64517: CALL_OW 44
64521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64522: LD_VAR 0 12
64526: PPUSH
64527: LD_VAR 0 8
64531: PPUSH
64532: LD_INT 0
64534: PPUSH
64535: CALL 66314 0 3
// end ;
64539: GO 64437
64541: POP
64542: POP
// if enchidnas then
64543: LD_VAR 0 4
64547: IFFALSE 64614
// for i = 1 to enchidnas do
64549: LD_ADDR_VAR 0 11
64553: PUSH
64554: DOUBLE
64555: LD_INT 1
64557: DEC
64558: ST_TO_ADDR
64559: LD_VAR 0 4
64563: PUSH
64564: FOR_TO
64565: IFFALSE 64612
// begin hc_class = 13 ;
64567: LD_ADDR_OWVAR 28
64571: PUSH
64572: LD_INT 13
64574: ST_TO_ADDR
// hc_gallery =  ;
64575: LD_ADDR_OWVAR 33
64579: PUSH
64580: LD_STRING 
64582: ST_TO_ADDR
// animal := CreateHuman ;
64583: LD_ADDR_VAR 0 12
64587: PUSH
64588: CALL_OW 44
64592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64593: LD_VAR 0 12
64597: PPUSH
64598: LD_VAR 0 8
64602: PPUSH
64603: LD_INT 0
64605: PPUSH
64606: CALL 66314 0 3
// end ;
64610: GO 64564
64612: POP
64613: POP
// if fishes then
64614: LD_VAR 0 7
64618: IFFALSE 64685
// for i = 1 to fishes do
64620: LD_ADDR_VAR 0 11
64624: PUSH
64625: DOUBLE
64626: LD_INT 1
64628: DEC
64629: ST_TO_ADDR
64630: LD_VAR 0 7
64634: PUSH
64635: FOR_TO
64636: IFFALSE 64683
// begin hc_class = 20 ;
64638: LD_ADDR_OWVAR 28
64642: PUSH
64643: LD_INT 20
64645: ST_TO_ADDR
// hc_gallery =  ;
64646: LD_ADDR_OWVAR 33
64650: PUSH
64651: LD_STRING 
64653: ST_TO_ADDR
// animal := CreateHuman ;
64654: LD_ADDR_VAR 0 12
64658: PUSH
64659: CALL_OW 44
64663: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64664: LD_VAR 0 12
64668: PPUSH
64669: LD_VAR 0 9
64673: PPUSH
64674: LD_INT 0
64676: PPUSH
64677: CALL 66314 0 3
// end ;
64681: GO 64635
64683: POP
64684: POP
// end ;
64685: LD_VAR 0 10
64689: RET
// export function WantHeal ( sci , unit ) ; begin
64690: LD_INT 0
64692: PPUSH
// if GetTaskList ( sci ) > 0 then
64693: LD_VAR 0 1
64697: PPUSH
64698: CALL_OW 437
64702: PUSH
64703: LD_INT 0
64705: GREATER
64706: IFFALSE 64776
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64708: LD_VAR 0 1
64712: PPUSH
64713: CALL_OW 437
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: PUSH
64722: LD_INT 1
64724: ARRAY
64725: PUSH
64726: LD_STRING l
64728: EQUAL
64729: PUSH
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 437
64739: PUSH
64740: LD_INT 1
64742: ARRAY
64743: PUSH
64744: LD_INT 4
64746: ARRAY
64747: PUSH
64748: LD_VAR 0 2
64752: EQUAL
64753: AND
64754: IFFALSE 64766
// result := true else
64756: LD_ADDR_VAR 0 3
64760: PUSH
64761: LD_INT 1
64763: ST_TO_ADDR
64764: GO 64774
// result := false ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: LD_INT 0
64773: ST_TO_ADDR
// end else
64774: GO 64784
// result := false ;
64776: LD_ADDR_VAR 0 3
64780: PUSH
64781: LD_INT 0
64783: ST_TO_ADDR
// end ;
64784: LD_VAR 0 3
64788: RET
// export function HealTarget ( sci ) ; begin
64789: LD_INT 0
64791: PPUSH
// if not sci then
64792: LD_VAR 0 1
64796: NOT
64797: IFFALSE 64801
// exit ;
64799: GO 64866
// result := 0 ;
64801: LD_ADDR_VAR 0 2
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// if GetTaskList ( sci ) then
64809: LD_VAR 0 1
64813: PPUSH
64814: CALL_OW 437
64818: IFFALSE 64866
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64820: LD_VAR 0 1
64824: PPUSH
64825: CALL_OW 437
64829: PUSH
64830: LD_INT 1
64832: ARRAY
64833: PUSH
64834: LD_INT 1
64836: ARRAY
64837: PUSH
64838: LD_STRING l
64840: EQUAL
64841: IFFALSE 64866
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64843: LD_ADDR_VAR 0 2
64847: PUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 437
64857: PUSH
64858: LD_INT 1
64860: ARRAY
64861: PUSH
64862: LD_INT 4
64864: ARRAY
64865: ST_TO_ADDR
// end ;
64866: LD_VAR 0 2
64870: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64871: LD_INT 0
64873: PPUSH
64874: PPUSH
64875: PPUSH
64876: PPUSH
// if not base_units then
64877: LD_VAR 0 1
64881: NOT
64882: IFFALSE 64886
// exit ;
64884: GO 64973
// result := false ;
64886: LD_ADDR_VAR 0 2
64890: PUSH
64891: LD_INT 0
64893: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_VAR 0 1
64903: PPUSH
64904: LD_INT 21
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PPUSH
64914: CALL_OW 72
64918: ST_TO_ADDR
// if not tmp then
64919: LD_VAR 0 5
64923: NOT
64924: IFFALSE 64928
// exit ;
64926: GO 64973
// for i in tmp do
64928: LD_ADDR_VAR 0 3
64932: PUSH
64933: LD_VAR 0 5
64937: PUSH
64938: FOR_IN
64939: IFFALSE 64971
// begin result := EnemyInRange ( i , 22 ) ;
64941: LD_ADDR_VAR 0 2
64945: PUSH
64946: LD_VAR 0 3
64950: PPUSH
64951: LD_INT 22
64953: PPUSH
64954: CALL 62560 0 2
64958: ST_TO_ADDR
// if result then
64959: LD_VAR 0 2
64963: IFFALSE 64969
// exit ;
64965: POP
64966: POP
64967: GO 64973
// end ;
64969: GO 64938
64971: POP
64972: POP
// end ;
64973: LD_VAR 0 2
64977: RET
// export function FilterByTag ( units , tag ) ; begin
64978: LD_INT 0
64980: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64981: LD_ADDR_VAR 0 3
64985: PUSH
64986: LD_VAR 0 1
64990: PPUSH
64991: LD_INT 120
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PPUSH
65003: CALL_OW 72
65007: ST_TO_ADDR
// end ;
65008: LD_VAR 0 3
65012: RET
// export function IsDriver ( un ) ; begin
65013: LD_INT 0
65015: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65016: LD_ADDR_VAR 0 2
65020: PUSH
65021: LD_VAR 0 1
65025: PUSH
65026: LD_INT 55
65028: PUSH
65029: EMPTY
65030: LIST
65031: PPUSH
65032: CALL_OW 69
65036: IN
65037: ST_TO_ADDR
// end ;
65038: LD_VAR 0 2
65042: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65043: LD_INT 0
65045: PPUSH
65046: PPUSH
// list := [ ] ;
65047: LD_ADDR_VAR 0 5
65051: PUSH
65052: EMPTY
65053: ST_TO_ADDR
// case d of 0 :
65054: LD_VAR 0 3
65058: PUSH
65059: LD_INT 0
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65067
65065: GO 65200
65067: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65068: LD_ADDR_VAR 0 5
65072: PUSH
65073: LD_VAR 0 1
65077: PUSH
65078: LD_INT 4
65080: MINUS
65081: PUSH
65082: LD_VAR 0 2
65086: PUSH
65087: LD_INT 4
65089: MINUS
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: PUSH
65099: LD_VAR 0 1
65103: PUSH
65104: LD_INT 3
65106: MINUS
65107: PUSH
65108: LD_VAR 0 2
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: PUSH
65121: LD_VAR 0 1
65125: PUSH
65126: LD_INT 4
65128: PLUS
65129: PUSH
65130: LD_VAR 0 2
65134: PUSH
65135: LD_INT 4
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: PUSH
65143: LD_VAR 0 1
65147: PUSH
65148: LD_INT 3
65150: PLUS
65151: PUSH
65152: LD_VAR 0 2
65156: PUSH
65157: LD_INT 3
65159: PLUS
65160: PUSH
65161: LD_INT 5
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: PUSH
65169: LD_VAR 0 1
65173: PUSH
65174: LD_VAR 0 2
65178: PUSH
65179: LD_INT 4
65181: PLUS
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: ST_TO_ADDR
// end ; 1 :
65198: GO 65898
65200: LD_INT 1
65202: DOUBLE
65203: EQUAL
65204: IFTRUE 65208
65206: GO 65341
65208: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65209: LD_ADDR_VAR 0 5
65213: PUSH
65214: LD_VAR 0 1
65218: PUSH
65219: LD_VAR 0 2
65223: PUSH
65224: LD_INT 4
65226: MINUS
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: PUSH
65236: LD_VAR 0 1
65240: PUSH
65241: LD_INT 3
65243: MINUS
65244: PUSH
65245: LD_VAR 0 2
65249: PUSH
65250: LD_INT 3
65252: MINUS
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: LIST
65261: PUSH
65262: LD_VAR 0 1
65266: PUSH
65267: LD_INT 4
65269: MINUS
65270: PUSH
65271: LD_VAR 0 2
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: PUSH
65284: LD_VAR 0 1
65288: PUSH
65289: LD_VAR 0 2
65293: PUSH
65294: LD_INT 3
65296: PLUS
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: PUSH
65306: LD_VAR 0 1
65310: PUSH
65311: LD_INT 4
65313: PLUS
65314: PUSH
65315: LD_VAR 0 2
65319: PUSH
65320: LD_INT 4
65322: PLUS
65323: PUSH
65324: LD_INT 5
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// end ; 2 :
65339: GO 65898
65341: LD_INT 2
65343: DOUBLE
65344: EQUAL
65345: IFTRUE 65349
65347: GO 65478
65349: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65350: LD_ADDR_VAR 0 5
65354: PUSH
65355: LD_VAR 0 1
65359: PUSH
65360: LD_VAR 0 2
65364: PUSH
65365: LD_INT 3
65367: MINUS
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: PUSH
65377: LD_VAR 0 1
65381: PUSH
65382: LD_INT 4
65384: PLUS
65385: PUSH
65386: LD_VAR 0 2
65390: PUSH
65391: LD_INT 4
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: PUSH
65399: LD_VAR 0 1
65403: PUSH
65404: LD_VAR 0 2
65408: PUSH
65409: LD_INT 4
65411: PLUS
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: LD_VAR 0 1
65425: PUSH
65426: LD_INT 3
65428: MINUS
65429: PUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: LIST
65442: PUSH
65443: LD_VAR 0 1
65447: PUSH
65448: LD_INT 4
65450: MINUS
65451: PUSH
65452: LD_VAR 0 2
65456: PUSH
65457: LD_INT 4
65459: MINUS
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: ST_TO_ADDR
// end ; 3 :
65476: GO 65898
65478: LD_INT 3
65480: DOUBLE
65481: EQUAL
65482: IFTRUE 65486
65484: GO 65619
65486: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65487: LD_ADDR_VAR 0 5
65491: PUSH
65492: LD_VAR 0 1
65496: PUSH
65497: LD_INT 3
65499: PLUS
65500: PUSH
65501: LD_VAR 0 2
65505: PUSH
65506: LD_INT 4
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: PUSH
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 4
65521: PLUS
65522: PUSH
65523: LD_VAR 0 2
65527: PUSH
65528: LD_INT 4
65530: PLUS
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: LD_INT 4
65547: MINUS
65548: PUSH
65549: LD_VAR 0 2
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_VAR 0 1
65566: PUSH
65567: LD_VAR 0 2
65571: PUSH
65572: LD_INT 4
65574: MINUS
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 3
65591: MINUS
65592: PUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_INT 3
65600: MINUS
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// end ; 4 :
65617: GO 65898
65619: LD_INT 4
65621: DOUBLE
65622: EQUAL
65623: IFTRUE 65627
65625: GO 65760
65627: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65628: LD_ADDR_VAR 0 5
65632: PUSH
65633: LD_VAR 0 1
65637: PUSH
65638: LD_VAR 0 2
65642: PUSH
65643: LD_INT 4
65645: PLUS
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: PUSH
65655: LD_VAR 0 1
65659: PUSH
65660: LD_INT 3
65662: PLUS
65663: PUSH
65664: LD_VAR 0 2
65668: PUSH
65669: LD_INT 3
65671: PLUS
65672: PUSH
65673: LD_INT 5
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: PUSH
65681: LD_VAR 0 1
65685: PUSH
65686: LD_INT 4
65688: PLUS
65689: PUSH
65690: LD_VAR 0 2
65694: PUSH
65695: LD_INT 4
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: PUSH
65703: LD_VAR 0 1
65707: PUSH
65708: LD_VAR 0 2
65712: PUSH
65713: LD_INT 3
65715: MINUS
65716: PUSH
65717: LD_INT 3
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: LIST
65724: PUSH
65725: LD_VAR 0 1
65729: PUSH
65730: LD_INT 4
65732: MINUS
65733: PUSH
65734: LD_VAR 0 2
65738: PUSH
65739: LD_INT 4
65741: MINUS
65742: PUSH
65743: LD_INT 2
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: ST_TO_ADDR
// end ; 5 :
65758: GO 65898
65760: LD_INT 5
65762: DOUBLE
65763: EQUAL
65764: IFTRUE 65768
65766: GO 65897
65768: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65769: LD_ADDR_VAR 0 5
65773: PUSH
65774: LD_VAR 0 1
65778: PUSH
65779: LD_INT 4
65781: MINUS
65782: PUSH
65783: LD_VAR 0 2
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: LIST
65795: PUSH
65796: LD_VAR 0 1
65800: PUSH
65801: LD_VAR 0 2
65805: PUSH
65806: LD_INT 4
65808: MINUS
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: PUSH
65818: LD_VAR 0 1
65822: PUSH
65823: LD_INT 4
65825: PLUS
65826: PUSH
65827: LD_VAR 0 2
65831: PUSH
65832: LD_INT 4
65834: PLUS
65835: PUSH
65836: LD_INT 5
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: PUSH
65844: LD_VAR 0 1
65848: PUSH
65849: LD_INT 3
65851: PLUS
65852: PUSH
65853: LD_VAR 0 2
65857: PUSH
65858: LD_INT 4
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: PUSH
65866: LD_VAR 0 1
65870: PUSH
65871: LD_VAR 0 2
65875: PUSH
65876: LD_INT 3
65878: PLUS
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// end ; end ;
65895: GO 65898
65897: POP
// result := list ;
65898: LD_ADDR_VAR 0 4
65902: PUSH
65903: LD_VAR 0 5
65907: ST_TO_ADDR
// end ;
65908: LD_VAR 0 4
65912: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65913: LD_INT 0
65915: PPUSH
65916: PPUSH
65917: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65918: LD_VAR 0 1
65922: NOT
65923: PUSH
65924: LD_VAR 0 2
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: LD_INT 4
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: IN
65947: NOT
65948: OR
65949: IFFALSE 65953
// exit ;
65951: GO 66036
// tmp := [ ] ;
65953: LD_ADDR_VAR 0 5
65957: PUSH
65958: EMPTY
65959: ST_TO_ADDR
// for i in units do
65960: LD_ADDR_VAR 0 4
65964: PUSH
65965: LD_VAR 0 1
65969: PUSH
65970: FOR_IN
65971: IFFALSE 66005
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65973: LD_ADDR_VAR 0 5
65977: PUSH
65978: LD_VAR 0 5
65982: PPUSH
65983: LD_VAR 0 4
65987: PPUSH
65988: LD_VAR 0 2
65992: PPUSH
65993: CALL_OW 259
65997: PPUSH
65998: CALL 67396 0 2
66002: ST_TO_ADDR
66003: GO 65970
66005: POP
66006: POP
// if not tmp then
66007: LD_VAR 0 5
66011: NOT
66012: IFFALSE 66016
// exit ;
66014: GO 66036
// result := SortListByListDesc ( units , tmp ) ;
66016: LD_ADDR_VAR 0 3
66020: PUSH
66021: LD_VAR 0 1
66025: PPUSH
66026: LD_VAR 0 5
66030: PPUSH
66031: CALL_OW 77
66035: ST_TO_ADDR
// end ;
66036: LD_VAR 0 3
66040: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66041: LD_INT 0
66043: PPUSH
66044: PPUSH
66045: PPUSH
// result := false ;
66046: LD_ADDR_VAR 0 3
66050: PUSH
66051: LD_INT 0
66053: ST_TO_ADDR
// if not building then
66054: LD_VAR 0 2
66058: NOT
66059: IFFALSE 66063
// exit ;
66061: GO 66201
// x := GetX ( building ) ;
66063: LD_ADDR_VAR 0 4
66067: PUSH
66068: LD_VAR 0 2
66072: PPUSH
66073: CALL_OW 250
66077: ST_TO_ADDR
// y := GetY ( building ) ;
66078: LD_ADDR_VAR 0 5
66082: PUSH
66083: LD_VAR 0 2
66087: PPUSH
66088: CALL_OW 251
66092: ST_TO_ADDR
// if not x or not y then
66093: LD_VAR 0 4
66097: NOT
66098: PUSH
66099: LD_VAR 0 5
66103: NOT
66104: OR
66105: IFFALSE 66109
// exit ;
66107: GO 66201
// if GetTaskList ( unit ) then
66109: LD_VAR 0 1
66113: PPUSH
66114: CALL_OW 437
66118: IFFALSE 66201
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66120: LD_STRING e
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 437
66132: PUSH
66133: LD_INT 1
66135: ARRAY
66136: PUSH
66137: LD_INT 1
66139: ARRAY
66140: EQUAL
66141: PUSH
66142: LD_VAR 0 4
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: CALL_OW 437
66156: PUSH
66157: LD_INT 1
66159: ARRAY
66160: PUSH
66161: LD_INT 2
66163: ARRAY
66164: EQUAL
66165: AND
66166: PUSH
66167: LD_VAR 0 5
66171: PUSH
66172: LD_VAR 0 1
66176: PPUSH
66177: CALL_OW 437
66181: PUSH
66182: LD_INT 1
66184: ARRAY
66185: PUSH
66186: LD_INT 3
66188: ARRAY
66189: EQUAL
66190: AND
66191: IFFALSE 66201
// result := true end ;
66193: LD_ADDR_VAR 0 3
66197: PUSH
66198: LD_INT 1
66200: ST_TO_ADDR
// end ;
66201: LD_VAR 0 3
66205: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66206: LD_INT 0
66208: PPUSH
// result := false ;
66209: LD_ADDR_VAR 0 4
66213: PUSH
66214: LD_INT 0
66216: ST_TO_ADDR
// if GetTaskList ( unit ) then
66217: LD_VAR 0 1
66221: PPUSH
66222: CALL_OW 437
66226: IFFALSE 66309
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66228: LD_STRING M
66230: PUSH
66231: LD_VAR 0 1
66235: PPUSH
66236: CALL_OW 437
66240: PUSH
66241: LD_INT 1
66243: ARRAY
66244: PUSH
66245: LD_INT 1
66247: ARRAY
66248: EQUAL
66249: PUSH
66250: LD_VAR 0 2
66254: PUSH
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 437
66264: PUSH
66265: LD_INT 1
66267: ARRAY
66268: PUSH
66269: LD_INT 2
66271: ARRAY
66272: EQUAL
66273: AND
66274: PUSH
66275: LD_VAR 0 3
66279: PUSH
66280: LD_VAR 0 1
66284: PPUSH
66285: CALL_OW 437
66289: PUSH
66290: LD_INT 1
66292: ARRAY
66293: PUSH
66294: LD_INT 3
66296: ARRAY
66297: EQUAL
66298: AND
66299: IFFALSE 66309
// result := true ;
66301: LD_ADDR_VAR 0 4
66305: PUSH
66306: LD_INT 1
66308: ST_TO_ADDR
// end ; end ;
66309: LD_VAR 0 4
66313: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66314: LD_INT 0
66316: PPUSH
66317: PPUSH
66318: PPUSH
66319: PPUSH
// if not unit or not area then
66320: LD_VAR 0 1
66324: NOT
66325: PUSH
66326: LD_VAR 0 2
66330: NOT
66331: OR
66332: IFFALSE 66336
// exit ;
66334: GO 66499
// tmp := AreaToList ( area , i ) ;
66336: LD_ADDR_VAR 0 6
66340: PUSH
66341: LD_VAR 0 2
66345: PPUSH
66346: LD_VAR 0 5
66350: PPUSH
66351: CALL_OW 517
66355: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66356: LD_ADDR_VAR 0 5
66360: PUSH
66361: DOUBLE
66362: LD_INT 1
66364: DEC
66365: ST_TO_ADDR
66366: LD_VAR 0 6
66370: PUSH
66371: LD_INT 1
66373: ARRAY
66374: PUSH
66375: FOR_TO
66376: IFFALSE 66497
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66378: LD_ADDR_VAR 0 7
66382: PUSH
66383: LD_VAR 0 6
66387: PUSH
66388: LD_INT 1
66390: ARRAY
66391: PUSH
66392: LD_VAR 0 5
66396: ARRAY
66397: PUSH
66398: LD_VAR 0 6
66402: PUSH
66403: LD_INT 2
66405: ARRAY
66406: PUSH
66407: LD_VAR 0 5
66411: ARRAY
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
66417: LD_INT 92
66419: PUSH
66420: LD_VAR 0 7
66424: PUSH
66425: LD_INT 1
66427: ARRAY
66428: PUSH
66429: LD_VAR 0 7
66433: PUSH
66434: LD_INT 2
66436: ARRAY
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: PPUSH
66447: CALL_OW 69
66451: PUSH
66452: LD_INT 0
66454: EQUAL
66455: IFFALSE 66495
// begin PlaceUnitArea ( unit , area , mode ) ;
66457: LD_VAR 0 1
66461: PPUSH
66462: LD_VAR 0 2
66466: PPUSH
66467: LD_VAR 0 3
66471: PPUSH
66472: CALL_OW 49
// result := IsPlaced ( unit ) ;
66476: LD_ADDR_VAR 0 4
66480: PUSH
66481: LD_VAR 0 1
66485: PPUSH
66486: CALL_OW 305
66490: ST_TO_ADDR
// exit ;
66491: POP
66492: POP
66493: GO 66499
// end ; end ;
66495: GO 66375
66497: POP
66498: POP
// end ;
66499: LD_VAR 0 4
66503: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66504: LD_INT 0
66506: PPUSH
66507: PPUSH
66508: PPUSH
// if not side or side > 8 then
66509: LD_VAR 0 1
66513: NOT
66514: PUSH
66515: LD_VAR 0 1
66519: PUSH
66520: LD_INT 8
66522: GREATER
66523: OR
66524: IFFALSE 66528
// exit ;
66526: GO 66715
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66528: LD_ADDR_VAR 0 4
66532: PUSH
66533: LD_INT 22
66535: PUSH
66536: LD_VAR 0 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 21
66547: PUSH
66548: LD_INT 3
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PPUSH
66559: CALL_OW 69
66563: ST_TO_ADDR
// if not tmp then
66564: LD_VAR 0 4
66568: NOT
66569: IFFALSE 66573
// exit ;
66571: GO 66715
// enable_addtolog := true ;
66573: LD_ADDR_OWVAR 81
66577: PUSH
66578: LD_INT 1
66580: ST_TO_ADDR
// AddToLog ( [ ) ;
66581: LD_STRING [
66583: PPUSH
66584: CALL_OW 561
// for i in tmp do
66588: LD_ADDR_VAR 0 3
66592: PUSH
66593: LD_VAR 0 4
66597: PUSH
66598: FOR_IN
66599: IFFALSE 66706
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66601: LD_STRING [
66603: PUSH
66604: LD_VAR 0 3
66608: PPUSH
66609: CALL_OW 266
66613: STR
66614: PUSH
66615: LD_STRING , 
66617: STR
66618: PUSH
66619: LD_VAR 0 3
66623: PPUSH
66624: CALL_OW 250
66628: STR
66629: PUSH
66630: LD_STRING , 
66632: STR
66633: PUSH
66634: LD_VAR 0 3
66638: PPUSH
66639: CALL_OW 251
66643: STR
66644: PUSH
66645: LD_STRING , 
66647: STR
66648: PUSH
66649: LD_VAR 0 3
66653: PPUSH
66654: CALL_OW 254
66658: STR
66659: PUSH
66660: LD_STRING , 
66662: STR
66663: PUSH
66664: LD_VAR 0 3
66668: PPUSH
66669: LD_INT 1
66671: PPUSH
66672: CALL_OW 268
66676: STR
66677: PUSH
66678: LD_STRING , 
66680: STR
66681: PUSH
66682: LD_VAR 0 3
66686: PPUSH
66687: LD_INT 2
66689: PPUSH
66690: CALL_OW 268
66694: STR
66695: PUSH
66696: LD_STRING ],
66698: STR
66699: PPUSH
66700: CALL_OW 561
// end ;
66704: GO 66598
66706: POP
66707: POP
// AddToLog ( ]; ) ;
66708: LD_STRING ];
66710: PPUSH
66711: CALL_OW 561
// end ;
66715: LD_VAR 0 2
66719: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66720: LD_INT 0
66722: PPUSH
66723: PPUSH
66724: PPUSH
66725: PPUSH
66726: PPUSH
// if not area or not rate or not max then
66727: LD_VAR 0 1
66731: NOT
66732: PUSH
66733: LD_VAR 0 2
66737: NOT
66738: OR
66739: PUSH
66740: LD_VAR 0 4
66744: NOT
66745: OR
66746: IFFALSE 66750
// exit ;
66748: GO 66939
// while 1 do
66750: LD_INT 1
66752: IFFALSE 66939
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66754: LD_ADDR_VAR 0 9
66758: PUSH
66759: LD_VAR 0 1
66763: PPUSH
66764: LD_INT 1
66766: PPUSH
66767: CALL_OW 287
66771: PUSH
66772: LD_INT 10
66774: MUL
66775: ST_TO_ADDR
// r := rate / 10 ;
66776: LD_ADDR_VAR 0 7
66780: PUSH
66781: LD_VAR 0 2
66785: PUSH
66786: LD_INT 10
66788: DIVREAL
66789: ST_TO_ADDR
// time := 1 1$00 ;
66790: LD_ADDR_VAR 0 8
66794: PUSH
66795: LD_INT 2100
66797: ST_TO_ADDR
// if amount < min then
66798: LD_VAR 0 9
66802: PUSH
66803: LD_VAR 0 3
66807: LESS
66808: IFFALSE 66826
// r := r * 2 else
66810: LD_ADDR_VAR 0 7
66814: PUSH
66815: LD_VAR 0 7
66819: PUSH
66820: LD_INT 2
66822: MUL
66823: ST_TO_ADDR
66824: GO 66852
// if amount > max then
66826: LD_VAR 0 9
66830: PUSH
66831: LD_VAR 0 4
66835: GREATER
66836: IFFALSE 66852
// r := r / 2 ;
66838: LD_ADDR_VAR 0 7
66842: PUSH
66843: LD_VAR 0 7
66847: PUSH
66848: LD_INT 2
66850: DIVREAL
66851: ST_TO_ADDR
// time := time / r ;
66852: LD_ADDR_VAR 0 8
66856: PUSH
66857: LD_VAR 0 8
66861: PUSH
66862: LD_VAR 0 7
66866: DIVREAL
66867: ST_TO_ADDR
// if time < 0 then
66868: LD_VAR 0 8
66872: PUSH
66873: LD_INT 0
66875: LESS
66876: IFFALSE 66893
// time := time * - 1 ;
66878: LD_ADDR_VAR 0 8
66882: PUSH
66883: LD_VAR 0 8
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: MUL
66892: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66893: LD_VAR 0 8
66897: PUSH
66898: LD_INT 35
66900: PPUSH
66901: LD_INT 875
66903: PPUSH
66904: CALL_OW 12
66908: PLUS
66909: PPUSH
66910: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66914: LD_INT 1
66916: PPUSH
66917: LD_INT 5
66919: PPUSH
66920: CALL_OW 12
66924: PPUSH
66925: LD_VAR 0 1
66929: PPUSH
66930: LD_INT 1
66932: PPUSH
66933: CALL_OW 55
// end ;
66937: GO 66750
// end ;
66939: LD_VAR 0 5
66943: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66944: LD_INT 0
66946: PPUSH
66947: PPUSH
66948: PPUSH
66949: PPUSH
66950: PPUSH
66951: PPUSH
66952: PPUSH
66953: PPUSH
// if not turrets or not factories then
66954: LD_VAR 0 1
66958: NOT
66959: PUSH
66960: LD_VAR 0 2
66964: NOT
66965: OR
66966: IFFALSE 66970
// exit ;
66968: GO 67277
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66970: LD_ADDR_VAR 0 10
66974: PUSH
66975: LD_INT 5
66977: PUSH
66978: LD_INT 6
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 2
66987: PUSH
66988: LD_INT 4
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: LD_INT 5
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 24
67012: PUSH
67013: LD_INT 25
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 23
67022: PUSH
67023: LD_INT 27
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 42
67036: PUSH
67037: LD_INT 43
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 44
67046: PUSH
67047: LD_INT 46
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 45
67056: PUSH
67057: LD_INT 47
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: ST_TO_ADDR
// result := [ ] ;
67074: LD_ADDR_VAR 0 3
67078: PUSH
67079: EMPTY
67080: ST_TO_ADDR
// for i in turrets do
67081: LD_ADDR_VAR 0 4
67085: PUSH
67086: LD_VAR 0 1
67090: PUSH
67091: FOR_IN
67092: IFFALSE 67275
// begin nat := GetNation ( i ) ;
67094: LD_ADDR_VAR 0 7
67098: PUSH
67099: LD_VAR 0 4
67103: PPUSH
67104: CALL_OW 248
67108: ST_TO_ADDR
// weapon := 0 ;
67109: LD_ADDR_VAR 0 8
67113: PUSH
67114: LD_INT 0
67116: ST_TO_ADDR
// if not nat then
67117: LD_VAR 0 7
67121: NOT
67122: IFFALSE 67126
// continue ;
67124: GO 67091
// for j in list [ nat ] do
67126: LD_ADDR_VAR 0 5
67130: PUSH
67131: LD_VAR 0 10
67135: PUSH
67136: LD_VAR 0 7
67140: ARRAY
67141: PUSH
67142: FOR_IN
67143: IFFALSE 67184
// if GetBWeapon ( i ) = j [ 1 ] then
67145: LD_VAR 0 4
67149: PPUSH
67150: CALL_OW 269
67154: PUSH
67155: LD_VAR 0 5
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: EQUAL
67164: IFFALSE 67182
// begin weapon := j [ 2 ] ;
67166: LD_ADDR_VAR 0 8
67170: PUSH
67171: LD_VAR 0 5
67175: PUSH
67176: LD_INT 2
67178: ARRAY
67179: ST_TO_ADDR
// break ;
67180: GO 67184
// end ;
67182: GO 67142
67184: POP
67185: POP
// if not weapon then
67186: LD_VAR 0 8
67190: NOT
67191: IFFALSE 67195
// continue ;
67193: GO 67091
// for k in factories do
67195: LD_ADDR_VAR 0 6
67199: PUSH
67200: LD_VAR 0 2
67204: PUSH
67205: FOR_IN
67206: IFFALSE 67271
// begin weapons := AvailableWeaponList ( k ) ;
67208: LD_ADDR_VAR 0 9
67212: PUSH
67213: LD_VAR 0 6
67217: PPUSH
67218: CALL_OW 478
67222: ST_TO_ADDR
// if not weapons then
67223: LD_VAR 0 9
67227: NOT
67228: IFFALSE 67232
// continue ;
67230: GO 67205
// if weapon in weapons then
67232: LD_VAR 0 8
67236: PUSH
67237: LD_VAR 0 9
67241: IN
67242: IFFALSE 67269
// begin result := [ i , weapon ] ;
67244: LD_ADDR_VAR 0 3
67248: PUSH
67249: LD_VAR 0 4
67253: PUSH
67254: LD_VAR 0 8
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: ST_TO_ADDR
// exit ;
67263: POP
67264: POP
67265: POP
67266: POP
67267: GO 67277
// end ; end ;
67269: GO 67205
67271: POP
67272: POP
// end ;
67273: GO 67091
67275: POP
67276: POP
// end ;
67277: LD_VAR 0 3
67281: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67282: LD_INT 0
67284: PPUSH
// if not side or side > 8 then
67285: LD_VAR 0 3
67289: NOT
67290: PUSH
67291: LD_VAR 0 3
67295: PUSH
67296: LD_INT 8
67298: GREATER
67299: OR
67300: IFFALSE 67304
// exit ;
67302: GO 67363
// if not range then
67304: LD_VAR 0 4
67308: NOT
67309: IFFALSE 67320
// range := - 12 ;
67311: LD_ADDR_VAR 0 4
67315: PUSH
67316: LD_INT 12
67318: NEG
67319: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67320: LD_VAR 0 1
67324: PPUSH
67325: LD_VAR 0 2
67329: PPUSH
67330: LD_VAR 0 3
67334: PPUSH
67335: LD_VAR 0 4
67339: PPUSH
67340: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67344: LD_VAR 0 1
67348: PPUSH
67349: LD_VAR 0 2
67353: PPUSH
67354: LD_VAR 0 3
67358: PPUSH
67359: CALL_OW 331
// end ;
67363: LD_VAR 0 5
67367: RET
// export function Video ( mode ) ; begin
67368: LD_INT 0
67370: PPUSH
// ingame_video = mode ;
67371: LD_ADDR_OWVAR 52
67375: PUSH
67376: LD_VAR 0 1
67380: ST_TO_ADDR
// interface_hidden = mode ;
67381: LD_ADDR_OWVAR 54
67385: PUSH
67386: LD_VAR 0 1
67390: ST_TO_ADDR
// end ;
67391: LD_VAR 0 2
67395: RET
// export function Join ( array , element ) ; begin
67396: LD_INT 0
67398: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67399: LD_ADDR_VAR 0 3
67403: PUSH
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_VAR 0 1
67413: PUSH
67414: LD_INT 1
67416: PLUS
67417: PPUSH
67418: LD_VAR 0 2
67422: PPUSH
67423: CALL_OW 1
67427: ST_TO_ADDR
// end ;
67428: LD_VAR 0 3
67432: RET
// export function JoinUnion ( array , element ) ; begin
67433: LD_INT 0
67435: PPUSH
// result := array union element ;
67436: LD_ADDR_VAR 0 3
67440: PUSH
67441: LD_VAR 0 1
67445: PUSH
67446: LD_VAR 0 2
67450: UNION
67451: ST_TO_ADDR
// end ;
67452: LD_VAR 0 3
67456: RET
// export function GetBehemoths ( side ) ; begin
67457: LD_INT 0
67459: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67460: LD_ADDR_VAR 0 2
67464: PUSH
67465: LD_INT 22
67467: PUSH
67468: LD_VAR 0 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 31
67479: PUSH
67480: LD_INT 25
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PPUSH
67491: CALL_OW 69
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 2
67500: RET
// export function Shuffle ( array ) ; var i , index ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
67505: PPUSH
// result := [ ] ;
67506: LD_ADDR_VAR 0 2
67510: PUSH
67511: EMPTY
67512: ST_TO_ADDR
// if not array then
67513: LD_VAR 0 1
67517: NOT
67518: IFFALSE 67522
// exit ;
67520: GO 67621
// Randomize ;
67522: CALL_OW 10
// for i = array downto 1 do
67526: LD_ADDR_VAR 0 3
67530: PUSH
67531: DOUBLE
67532: LD_VAR 0 1
67536: INC
67537: ST_TO_ADDR
67538: LD_INT 1
67540: PUSH
67541: FOR_DOWNTO
67542: IFFALSE 67619
// begin index := rand ( 1 , array ) ;
67544: LD_ADDR_VAR 0 4
67548: PUSH
67549: LD_INT 1
67551: PPUSH
67552: LD_VAR 0 1
67556: PPUSH
67557: CALL_OW 12
67561: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67562: LD_ADDR_VAR 0 2
67566: PUSH
67567: LD_VAR 0 2
67571: PPUSH
67572: LD_VAR 0 2
67576: PUSH
67577: LD_INT 1
67579: PLUS
67580: PPUSH
67581: LD_VAR 0 1
67585: PUSH
67586: LD_VAR 0 4
67590: ARRAY
67591: PPUSH
67592: CALL_OW 2
67596: ST_TO_ADDR
// array := Delete ( array , index ) ;
67597: LD_ADDR_VAR 0 1
67601: PUSH
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 4
67611: PPUSH
67612: CALL_OW 3
67616: ST_TO_ADDR
// end ;
67617: GO 67541
67619: POP
67620: POP
// end ;
67621: LD_VAR 0 2
67625: RET
// export function GetBaseMaterials ( base ) ; begin
67626: LD_INT 0
67628: PPUSH
// result := [ 0 , 0 , 0 ] ;
67629: LD_ADDR_VAR 0 2
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// if not base then
67648: LD_VAR 0 1
67652: NOT
67653: IFFALSE 67657
// exit ;
67655: GO 67706
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67657: LD_ADDR_VAR 0 2
67661: PUSH
67662: LD_VAR 0 1
67666: PPUSH
67667: LD_INT 1
67669: PPUSH
67670: CALL_OW 275
67674: PUSH
67675: LD_VAR 0 1
67679: PPUSH
67680: LD_INT 2
67682: PPUSH
67683: CALL_OW 275
67687: PUSH
67688: LD_VAR 0 1
67692: PPUSH
67693: LD_INT 3
67695: PPUSH
67696: CALL_OW 275
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: ST_TO_ADDR
// end ;
67706: LD_VAR 0 2
67710: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67711: LD_INT 0
67713: PPUSH
67714: PPUSH
// result := array ;
67715: LD_ADDR_VAR 0 3
67719: PUSH
67720: LD_VAR 0 1
67724: ST_TO_ADDR
// if size >= result then
67725: LD_VAR 0 2
67729: PUSH
67730: LD_VAR 0 3
67734: GREATEREQUAL
67735: IFFALSE 67739
// exit ;
67737: GO 67789
// if size then
67739: LD_VAR 0 2
67743: IFFALSE 67789
// for i := array downto size do
67745: LD_ADDR_VAR 0 4
67749: PUSH
67750: DOUBLE
67751: LD_VAR 0 1
67755: INC
67756: ST_TO_ADDR
67757: LD_VAR 0 2
67761: PUSH
67762: FOR_DOWNTO
67763: IFFALSE 67787
// result := Delete ( result , result ) ;
67765: LD_ADDR_VAR 0 3
67769: PUSH
67770: LD_VAR 0 3
67774: PPUSH
67775: LD_VAR 0 3
67779: PPUSH
67780: CALL_OW 3
67784: ST_TO_ADDR
67785: GO 67762
67787: POP
67788: POP
// end ;
67789: LD_VAR 0 3
67793: RET
// export function ComExit ( unit ) ; var tmp ; begin
67794: LD_INT 0
67796: PPUSH
67797: PPUSH
// if not IsInUnit ( unit ) then
67798: LD_VAR 0 1
67802: PPUSH
67803: CALL_OW 310
67807: NOT
67808: IFFALSE 67812
// exit ;
67810: GO 67872
// tmp := IsInUnit ( unit ) ;
67812: LD_ADDR_VAR 0 3
67816: PUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: CALL_OW 310
67826: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67827: LD_VAR 0 3
67831: PPUSH
67832: CALL_OW 247
67836: PUSH
67837: LD_INT 2
67839: EQUAL
67840: IFFALSE 67853
// ComExitVehicle ( unit ) else
67842: LD_VAR 0 1
67846: PPUSH
67847: CALL_OW 121
67851: GO 67862
// ComExitBuilding ( unit ) ;
67853: LD_VAR 0 1
67857: PPUSH
67858: CALL_OW 122
// result := tmp ;
67862: LD_ADDR_VAR 0 2
67866: PUSH
67867: LD_VAR 0 3
67871: ST_TO_ADDR
// end ;
67872: LD_VAR 0 2
67876: RET
// export function ComExitAll ( units ) ; var i ; begin
67877: LD_INT 0
67879: PPUSH
67880: PPUSH
// if not units then
67881: LD_VAR 0 1
67885: NOT
67886: IFFALSE 67890
// exit ;
67888: GO 67916
// for i in units do
67890: LD_ADDR_VAR 0 3
67894: PUSH
67895: LD_VAR 0 1
67899: PUSH
67900: FOR_IN
67901: IFFALSE 67914
// ComExit ( i ) ;
67903: LD_VAR 0 3
67907: PPUSH
67908: CALL 67794 0 1
67912: GO 67900
67914: POP
67915: POP
// end ;
67916: LD_VAR 0 2
67920: RET
// export function ResetHc ; begin
67921: LD_INT 0
67923: PPUSH
// InitHc ;
67924: CALL_OW 19
// hc_importance := 0 ;
67928: LD_ADDR_OWVAR 32
67932: PUSH
67933: LD_INT 0
67935: ST_TO_ADDR
// end ;
67936: LD_VAR 0 1
67940: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67941: LD_INT 0
67943: PPUSH
67944: PPUSH
67945: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67946: LD_ADDR_VAR 0 6
67950: PUSH
67951: LD_VAR 0 1
67955: PUSH
67956: LD_VAR 0 3
67960: PLUS
67961: PUSH
67962: LD_INT 2
67964: DIV
67965: ST_TO_ADDR
// if _x < 0 then
67966: LD_VAR 0 6
67970: PUSH
67971: LD_INT 0
67973: LESS
67974: IFFALSE 67991
// _x := _x * - 1 ;
67976: LD_ADDR_VAR 0 6
67980: PUSH
67981: LD_VAR 0 6
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: MUL
67990: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67991: LD_ADDR_VAR 0 7
67995: PUSH
67996: LD_VAR 0 2
68000: PUSH
68001: LD_VAR 0 4
68005: PLUS
68006: PUSH
68007: LD_INT 2
68009: DIV
68010: ST_TO_ADDR
// if _y < 0 then
68011: LD_VAR 0 7
68015: PUSH
68016: LD_INT 0
68018: LESS
68019: IFFALSE 68036
// _y := _y * - 1 ;
68021: LD_ADDR_VAR 0 7
68025: PUSH
68026: LD_VAR 0 7
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: MUL
68035: ST_TO_ADDR
// result := [ _x , _y ] ;
68036: LD_ADDR_VAR 0 5
68040: PUSH
68041: LD_VAR 0 6
68045: PUSH
68046: LD_VAR 0 7
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: ST_TO_ADDR
// end ;
68055: LD_VAR 0 5
68059: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68060: LD_INT 0
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
// task := GetTaskList ( unit ) ;
68066: LD_ADDR_VAR 0 7
68070: PUSH
68071: LD_VAR 0 1
68075: PPUSH
68076: CALL_OW 437
68080: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68081: LD_VAR 0 7
68085: NOT
68086: PUSH
68087: LD_VAR 0 1
68091: PPUSH
68092: LD_VAR 0 2
68096: PPUSH
68097: CALL_OW 308
68101: NOT
68102: AND
68103: IFFALSE 68107
// exit ;
68105: GO 68225
// if IsInArea ( unit , area ) then
68107: LD_VAR 0 1
68111: PPUSH
68112: LD_VAR 0 2
68116: PPUSH
68117: CALL_OW 308
68121: IFFALSE 68139
// begin ComMoveToArea ( unit , goAway ) ;
68123: LD_VAR 0 1
68127: PPUSH
68128: LD_VAR 0 3
68132: PPUSH
68133: CALL_OW 113
// exit ;
68137: GO 68225
// end ; if task [ 1 ] [ 1 ] <> M then
68139: LD_VAR 0 7
68143: PUSH
68144: LD_INT 1
68146: ARRAY
68147: PUSH
68148: LD_INT 1
68150: ARRAY
68151: PUSH
68152: LD_STRING M
68154: NONEQUAL
68155: IFFALSE 68159
// exit ;
68157: GO 68225
// x := task [ 1 ] [ 2 ] ;
68159: LD_ADDR_VAR 0 5
68163: PUSH
68164: LD_VAR 0 7
68168: PUSH
68169: LD_INT 1
68171: ARRAY
68172: PUSH
68173: LD_INT 2
68175: ARRAY
68176: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68177: LD_ADDR_VAR 0 6
68181: PUSH
68182: LD_VAR 0 7
68186: PUSH
68187: LD_INT 1
68189: ARRAY
68190: PUSH
68191: LD_INT 3
68193: ARRAY
68194: ST_TO_ADDR
// if InArea ( x , y , area ) then
68195: LD_VAR 0 5
68199: PPUSH
68200: LD_VAR 0 6
68204: PPUSH
68205: LD_VAR 0 2
68209: PPUSH
68210: CALL_OW 309
68214: IFFALSE 68225
// ComStop ( unit ) ;
68216: LD_VAR 0 1
68220: PPUSH
68221: CALL_OW 141
// end ;
68225: LD_VAR 0 4
68229: RET
// export function Abs ( value ) ; begin
68230: LD_INT 0
68232: PPUSH
// result := value ;
68233: LD_ADDR_VAR 0 2
68237: PUSH
68238: LD_VAR 0 1
68242: ST_TO_ADDR
// if value < 0 then
68243: LD_VAR 0 1
68247: PUSH
68248: LD_INT 0
68250: LESS
68251: IFFALSE 68268
// result := value * - 1 ;
68253: LD_ADDR_VAR 0 2
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: MUL
68267: ST_TO_ADDR
// end ;
68268: LD_VAR 0 2
68272: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68273: LD_INT 0
68275: PPUSH
68276: PPUSH
68277: PPUSH
68278: PPUSH
68279: PPUSH
68280: PPUSH
68281: PPUSH
68282: PPUSH
// if not unit or not building then
68283: LD_VAR 0 1
68287: NOT
68288: PUSH
68289: LD_VAR 0 2
68293: NOT
68294: OR
68295: IFFALSE 68299
// exit ;
68297: GO 68525
// x := GetX ( building ) ;
68299: LD_ADDR_VAR 0 4
68303: PUSH
68304: LD_VAR 0 2
68308: PPUSH
68309: CALL_OW 250
68313: ST_TO_ADDR
// y := GetY ( building ) ;
68314: LD_ADDR_VAR 0 6
68318: PUSH
68319: LD_VAR 0 2
68323: PPUSH
68324: CALL_OW 251
68328: ST_TO_ADDR
// d := GetDir ( building ) ;
68329: LD_ADDR_VAR 0 8
68333: PUSH
68334: LD_VAR 0 2
68338: PPUSH
68339: CALL_OW 254
68343: ST_TO_ADDR
// r := 4 ;
68344: LD_ADDR_VAR 0 9
68348: PUSH
68349: LD_INT 4
68351: ST_TO_ADDR
// for i := 1 to 5 do
68352: LD_ADDR_VAR 0 10
68356: PUSH
68357: DOUBLE
68358: LD_INT 1
68360: DEC
68361: ST_TO_ADDR
68362: LD_INT 5
68364: PUSH
68365: FOR_TO
68366: IFFALSE 68523
// begin _x := ShiftX ( x , d , r + i ) ;
68368: LD_ADDR_VAR 0 5
68372: PUSH
68373: LD_VAR 0 4
68377: PPUSH
68378: LD_VAR 0 8
68382: PPUSH
68383: LD_VAR 0 9
68387: PUSH
68388: LD_VAR 0 10
68392: PLUS
68393: PPUSH
68394: CALL_OW 272
68398: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68399: LD_ADDR_VAR 0 7
68403: PUSH
68404: LD_VAR 0 6
68408: PPUSH
68409: LD_VAR 0 8
68413: PPUSH
68414: LD_VAR 0 9
68418: PUSH
68419: LD_VAR 0 10
68423: PLUS
68424: PPUSH
68425: CALL_OW 273
68429: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68430: LD_VAR 0 5
68434: PPUSH
68435: LD_VAR 0 7
68439: PPUSH
68440: CALL_OW 488
68444: PUSH
68445: LD_VAR 0 5
68449: PPUSH
68450: LD_VAR 0 7
68454: PPUSH
68455: CALL_OW 428
68459: PPUSH
68460: CALL_OW 247
68464: PUSH
68465: LD_INT 3
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: IN
68475: NOT
68476: AND
68477: IFFALSE 68521
// begin ComMoveXY ( unit , _x , _y ) ;
68479: LD_VAR 0 1
68483: PPUSH
68484: LD_VAR 0 5
68488: PPUSH
68489: LD_VAR 0 7
68493: PPUSH
68494: CALL_OW 111
// result := [ _x , _y ] ;
68498: LD_ADDR_VAR 0 3
68502: PUSH
68503: LD_VAR 0 5
68507: PUSH
68508: LD_VAR 0 7
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: ST_TO_ADDR
// exit ;
68517: POP
68518: POP
68519: GO 68525
// end ; end ;
68521: GO 68365
68523: POP
68524: POP
// end ;
68525: LD_VAR 0 3
68529: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68530: LD_INT 0
68532: PPUSH
68533: PPUSH
68534: PPUSH
// result := 0 ;
68535: LD_ADDR_VAR 0 3
68539: PUSH
68540: LD_INT 0
68542: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68543: LD_VAR 0 1
68547: PUSH
68548: LD_INT 0
68550: LESS
68551: PUSH
68552: LD_VAR 0 1
68556: PUSH
68557: LD_INT 8
68559: GREATER
68560: OR
68561: PUSH
68562: LD_VAR 0 2
68566: PUSH
68567: LD_INT 0
68569: LESS
68570: OR
68571: PUSH
68572: LD_VAR 0 2
68576: PUSH
68577: LD_INT 8
68579: GREATER
68580: OR
68581: IFFALSE 68585
// exit ;
68583: GO 68660
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68585: LD_ADDR_VAR 0 4
68589: PUSH
68590: LD_INT 22
68592: PUSH
68593: LD_VAR 0 2
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PPUSH
68602: CALL_OW 69
68606: PUSH
68607: FOR_IN
68608: IFFALSE 68658
// begin un := UnitShoot ( i ) ;
68610: LD_ADDR_VAR 0 5
68614: PUSH
68615: LD_VAR 0 4
68619: PPUSH
68620: CALL_OW 504
68624: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68625: LD_VAR 0 5
68629: PPUSH
68630: CALL_OW 255
68634: PUSH
68635: LD_VAR 0 1
68639: EQUAL
68640: IFFALSE 68656
// begin result := un ;
68642: LD_ADDR_VAR 0 3
68646: PUSH
68647: LD_VAR 0 5
68651: ST_TO_ADDR
// exit ;
68652: POP
68653: POP
68654: GO 68660
// end ; end ;
68656: GO 68607
68658: POP
68659: POP
// end ;
68660: LD_VAR 0 3
68664: RET
// export function GetCargoBay ( units ) ; begin
68665: LD_INT 0
68667: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68668: LD_ADDR_VAR 0 2
68672: PUSH
68673: LD_VAR 0 1
68677: PPUSH
68678: LD_INT 2
68680: PUSH
68681: LD_INT 34
68683: PUSH
68684: LD_INT 12
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 34
68693: PUSH
68694: LD_INT 51
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 34
68703: PUSH
68704: LD_INT 32
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 34
68713: PUSH
68714: LD_INT 89
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: PPUSH
68728: CALL_OW 72
68732: ST_TO_ADDR
// end ;
68733: LD_VAR 0 2
68737: RET
// export function Negate ( value ) ; begin
68738: LD_INT 0
68740: PPUSH
// result := not value ;
68741: LD_ADDR_VAR 0 2
68745: PUSH
68746: LD_VAR 0 1
68750: NOT
68751: ST_TO_ADDR
// end ;
68752: LD_VAR 0 2
68756: RET
// export function Inc ( value ) ; begin
68757: LD_INT 0
68759: PPUSH
// result := value + 1 ;
68760: LD_ADDR_VAR 0 2
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: LD_INT 1
68772: PLUS
68773: ST_TO_ADDR
// end ;
68774: LD_VAR 0 2
68778: RET
// export function Dec ( value ) ; begin
68779: LD_INT 0
68781: PPUSH
// result := value - 1 ;
68782: LD_ADDR_VAR 0 2
68786: PUSH
68787: LD_VAR 0 1
68791: PUSH
68792: LD_INT 1
68794: MINUS
68795: ST_TO_ADDR
// end ;
68796: LD_VAR 0 2
68800: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68801: LD_INT 0
68803: PPUSH
68804: PPUSH
68805: PPUSH
68806: PPUSH
68807: PPUSH
68808: PPUSH
68809: PPUSH
68810: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68811: LD_VAR 0 1
68815: PPUSH
68816: LD_VAR 0 2
68820: PPUSH
68821: CALL_OW 488
68825: NOT
68826: PUSH
68827: LD_VAR 0 3
68831: PPUSH
68832: LD_VAR 0 4
68836: PPUSH
68837: CALL_OW 488
68841: NOT
68842: OR
68843: IFFALSE 68856
// begin result := - 1 ;
68845: LD_ADDR_VAR 0 5
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: ST_TO_ADDR
// exit ;
68854: GO 69091
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68856: LD_ADDR_VAR 0 12
68860: PUSH
68861: LD_VAR 0 1
68865: PPUSH
68866: LD_VAR 0 2
68870: PPUSH
68871: LD_VAR 0 3
68875: PPUSH
68876: LD_VAR 0 4
68880: PPUSH
68881: CALL 67941 0 4
68885: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68886: LD_ADDR_VAR 0 11
68890: PUSH
68891: LD_VAR 0 1
68895: PPUSH
68896: LD_VAR 0 2
68900: PPUSH
68901: LD_VAR 0 12
68905: PUSH
68906: LD_INT 1
68908: ARRAY
68909: PPUSH
68910: LD_VAR 0 12
68914: PUSH
68915: LD_INT 2
68917: ARRAY
68918: PPUSH
68919: CALL_OW 298
68923: ST_TO_ADDR
// distance := 9999 ;
68924: LD_ADDR_VAR 0 10
68928: PUSH
68929: LD_INT 9999
68931: ST_TO_ADDR
// for i := 0 to 5 do
68932: LD_ADDR_VAR 0 6
68936: PUSH
68937: DOUBLE
68938: LD_INT 0
68940: DEC
68941: ST_TO_ADDR
68942: LD_INT 5
68944: PUSH
68945: FOR_TO
68946: IFFALSE 69089
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68948: LD_ADDR_VAR 0 7
68952: PUSH
68953: LD_VAR 0 1
68957: PPUSH
68958: LD_VAR 0 6
68962: PPUSH
68963: LD_VAR 0 11
68967: PPUSH
68968: CALL_OW 272
68972: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68973: LD_ADDR_VAR 0 8
68977: PUSH
68978: LD_VAR 0 2
68982: PPUSH
68983: LD_VAR 0 6
68987: PPUSH
68988: LD_VAR 0 11
68992: PPUSH
68993: CALL_OW 273
68997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68998: LD_VAR 0 7
69002: PPUSH
69003: LD_VAR 0 8
69007: PPUSH
69008: CALL_OW 488
69012: NOT
69013: IFFALSE 69017
// continue ;
69015: GO 68945
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69017: LD_ADDR_VAR 0 9
69021: PUSH
69022: LD_VAR 0 12
69026: PUSH
69027: LD_INT 1
69029: ARRAY
69030: PPUSH
69031: LD_VAR 0 12
69035: PUSH
69036: LD_INT 2
69038: ARRAY
69039: PPUSH
69040: LD_VAR 0 7
69044: PPUSH
69045: LD_VAR 0 8
69049: PPUSH
69050: CALL_OW 298
69054: ST_TO_ADDR
// if tmp < distance then
69055: LD_VAR 0 9
69059: PUSH
69060: LD_VAR 0 10
69064: LESS
69065: IFFALSE 69087
// begin result := i ;
69067: LD_ADDR_VAR 0 5
69071: PUSH
69072: LD_VAR 0 6
69076: ST_TO_ADDR
// distance := tmp ;
69077: LD_ADDR_VAR 0 10
69081: PUSH
69082: LD_VAR 0 9
69086: ST_TO_ADDR
// end ; end ;
69087: GO 68945
69089: POP
69090: POP
// end ;
69091: LD_VAR 0 5
69095: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69096: LD_INT 0
69098: PPUSH
69099: PPUSH
// if not driver or not IsInUnit ( driver ) then
69100: LD_VAR 0 1
69104: NOT
69105: PUSH
69106: LD_VAR 0 1
69110: PPUSH
69111: CALL_OW 310
69115: NOT
69116: OR
69117: IFFALSE 69121
// exit ;
69119: GO 69211
// vehicle := IsInUnit ( driver ) ;
69121: LD_ADDR_VAR 0 3
69125: PUSH
69126: LD_VAR 0 1
69130: PPUSH
69131: CALL_OW 310
69135: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69136: LD_VAR 0 1
69140: PPUSH
69141: LD_STRING \
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 0
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: PUSH
69171: LD_STRING E
69173: PUSH
69174: LD_INT 0
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: LD_VAR 0 3
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: LD_INT 0
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PPUSH
69207: CALL_OW 446
// end ;
69211: LD_VAR 0 2
69215: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69216: LD_INT 0
69218: PPUSH
69219: PPUSH
// if not driver or not IsInUnit ( driver ) then
69220: LD_VAR 0 1
69224: NOT
69225: PUSH
69226: LD_VAR 0 1
69230: PPUSH
69231: CALL_OW 310
69235: NOT
69236: OR
69237: IFFALSE 69241
// exit ;
69239: GO 69331
// vehicle := IsInUnit ( driver ) ;
69241: LD_ADDR_VAR 0 3
69245: PUSH
69246: LD_VAR 0 1
69250: PPUSH
69251: CALL_OW 310
69255: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69256: LD_VAR 0 1
69260: PPUSH
69261: LD_STRING \
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: PUSH
69291: LD_STRING E
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: LD_VAR 0 3
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PPUSH
69327: CALL_OW 447
// end ;
69331: LD_VAR 0 2
69335: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69336: LD_INT 0
69338: PPUSH
69339: PPUSH
69340: PPUSH
// tmp := [ ] ;
69341: LD_ADDR_VAR 0 5
69345: PUSH
69346: EMPTY
69347: ST_TO_ADDR
// for i in units do
69348: LD_ADDR_VAR 0 4
69352: PUSH
69353: LD_VAR 0 1
69357: PUSH
69358: FOR_IN
69359: IFFALSE 69397
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69361: LD_ADDR_VAR 0 5
69365: PUSH
69366: LD_VAR 0 5
69370: PPUSH
69371: LD_VAR 0 5
69375: PUSH
69376: LD_INT 1
69378: PLUS
69379: PPUSH
69380: LD_VAR 0 4
69384: PPUSH
69385: CALL_OW 256
69389: PPUSH
69390: CALL_OW 2
69394: ST_TO_ADDR
69395: GO 69358
69397: POP
69398: POP
// if not tmp then
69399: LD_VAR 0 5
69403: NOT
69404: IFFALSE 69408
// exit ;
69406: GO 69456
// if asc then
69408: LD_VAR 0 2
69412: IFFALSE 69436
// result := SortListByListAsc ( units , tmp ) else
69414: LD_ADDR_VAR 0 3
69418: PUSH
69419: LD_VAR 0 1
69423: PPUSH
69424: LD_VAR 0 5
69428: PPUSH
69429: CALL_OW 76
69433: ST_TO_ADDR
69434: GO 69456
// result := SortListByListDesc ( units , tmp ) ;
69436: LD_ADDR_VAR 0 3
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_VAR 0 5
69450: PPUSH
69451: CALL_OW 77
69455: ST_TO_ADDR
// end ;
69456: LD_VAR 0 3
69460: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69461: LD_INT 0
69463: PPUSH
69464: PPUSH
// task := GetTaskList ( mech ) ;
69465: LD_ADDR_VAR 0 4
69469: PUSH
69470: LD_VAR 0 1
69474: PPUSH
69475: CALL_OW 437
69479: ST_TO_ADDR
// if not task then
69480: LD_VAR 0 4
69484: NOT
69485: IFFALSE 69489
// exit ;
69487: GO 69531
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69489: LD_ADDR_VAR 0 3
69493: PUSH
69494: LD_VAR 0 4
69498: PUSH
69499: LD_INT 1
69501: ARRAY
69502: PUSH
69503: LD_INT 1
69505: ARRAY
69506: PUSH
69507: LD_STRING r
69509: EQUAL
69510: PUSH
69511: LD_VAR 0 4
69515: PUSH
69516: LD_INT 1
69518: ARRAY
69519: PUSH
69520: LD_INT 4
69522: ARRAY
69523: PUSH
69524: LD_VAR 0 2
69528: EQUAL
69529: AND
69530: ST_TO_ADDR
// end ;
69531: LD_VAR 0 3
69535: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69536: LD_INT 0
69538: PPUSH
// SetDir ( unit , d ) ;
69539: LD_VAR 0 1
69543: PPUSH
69544: LD_VAR 0 4
69548: PPUSH
69549: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69553: LD_VAR 0 1
69557: PPUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: LD_VAR 0 3
69567: PPUSH
69568: LD_VAR 0 5
69572: PPUSH
69573: CALL_OW 48
// end ;
69577: LD_VAR 0 6
69581: RET
// export function ToNaturalNumber ( number ) ; begin
69582: LD_INT 0
69584: PPUSH
// result := number div 1 ;
69585: LD_ADDR_VAR 0 2
69589: PUSH
69590: LD_VAR 0 1
69594: PUSH
69595: LD_INT 1
69597: DIV
69598: ST_TO_ADDR
// if number < 0 then
69599: LD_VAR 0 1
69603: PUSH
69604: LD_INT 0
69606: LESS
69607: IFFALSE 69617
// result := 0 ;
69609: LD_ADDR_VAR 0 2
69613: PUSH
69614: LD_INT 0
69616: ST_TO_ADDR
// end ;
69617: LD_VAR 0 2
69621: RET
// export function SortByClass ( units , class ) ; var un ; begin
69622: LD_INT 0
69624: PPUSH
69625: PPUSH
// if not units or not class then
69626: LD_VAR 0 1
69630: NOT
69631: PUSH
69632: LD_VAR 0 2
69636: NOT
69637: OR
69638: IFFALSE 69642
// exit ;
69640: GO 69737
// result := [ ] ;
69642: LD_ADDR_VAR 0 3
69646: PUSH
69647: EMPTY
69648: ST_TO_ADDR
// for un in units do
69649: LD_ADDR_VAR 0 4
69653: PUSH
69654: LD_VAR 0 1
69658: PUSH
69659: FOR_IN
69660: IFFALSE 69735
// if GetClass ( un ) = class then
69662: LD_VAR 0 4
69666: PPUSH
69667: CALL_OW 257
69671: PUSH
69672: LD_VAR 0 2
69676: EQUAL
69677: IFFALSE 69704
// result := Insert ( result , 1 , un ) else
69679: LD_ADDR_VAR 0 3
69683: PUSH
69684: LD_VAR 0 3
69688: PPUSH
69689: LD_INT 1
69691: PPUSH
69692: LD_VAR 0 4
69696: PPUSH
69697: CALL_OW 2
69701: ST_TO_ADDR
69702: GO 69733
// result := Replace ( result , result + 1 , un ) ;
69704: LD_ADDR_VAR 0 3
69708: PUSH
69709: LD_VAR 0 3
69713: PPUSH
69714: LD_VAR 0 3
69718: PUSH
69719: LD_INT 1
69721: PLUS
69722: PPUSH
69723: LD_VAR 0 4
69727: PPUSH
69728: CALL_OW 1
69732: ST_TO_ADDR
69733: GO 69659
69735: POP
69736: POP
// end ;
69737: LD_VAR 0 3
69741: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69742: LD_INT 0
69744: PPUSH
69745: PPUSH
69746: PPUSH
69747: PPUSH
69748: PPUSH
69749: PPUSH
69750: PPUSH
// result := [ ] ;
69751: LD_ADDR_VAR 0 4
69755: PUSH
69756: EMPTY
69757: ST_TO_ADDR
// if x - r < 0 then
69758: LD_VAR 0 1
69762: PUSH
69763: LD_VAR 0 3
69767: MINUS
69768: PUSH
69769: LD_INT 0
69771: LESS
69772: IFFALSE 69784
// min_x := 0 else
69774: LD_ADDR_VAR 0 8
69778: PUSH
69779: LD_INT 0
69781: ST_TO_ADDR
69782: GO 69800
// min_x := x - r ;
69784: LD_ADDR_VAR 0 8
69788: PUSH
69789: LD_VAR 0 1
69793: PUSH
69794: LD_VAR 0 3
69798: MINUS
69799: ST_TO_ADDR
// if y - r < 0 then
69800: LD_VAR 0 2
69804: PUSH
69805: LD_VAR 0 3
69809: MINUS
69810: PUSH
69811: LD_INT 0
69813: LESS
69814: IFFALSE 69826
// min_y := 0 else
69816: LD_ADDR_VAR 0 7
69820: PUSH
69821: LD_INT 0
69823: ST_TO_ADDR
69824: GO 69842
// min_y := y - r ;
69826: LD_ADDR_VAR 0 7
69830: PUSH
69831: LD_VAR 0 2
69835: PUSH
69836: LD_VAR 0 3
69840: MINUS
69841: ST_TO_ADDR
// max_x := x + r ;
69842: LD_ADDR_VAR 0 9
69846: PUSH
69847: LD_VAR 0 1
69851: PUSH
69852: LD_VAR 0 3
69856: PLUS
69857: ST_TO_ADDR
// max_y := y + r ;
69858: LD_ADDR_VAR 0 10
69862: PUSH
69863: LD_VAR 0 2
69867: PUSH
69868: LD_VAR 0 3
69872: PLUS
69873: ST_TO_ADDR
// for _x = min_x to max_x do
69874: LD_ADDR_VAR 0 5
69878: PUSH
69879: DOUBLE
69880: LD_VAR 0 8
69884: DEC
69885: ST_TO_ADDR
69886: LD_VAR 0 9
69890: PUSH
69891: FOR_TO
69892: IFFALSE 69993
// for _y = min_y to max_y do
69894: LD_ADDR_VAR 0 6
69898: PUSH
69899: DOUBLE
69900: LD_VAR 0 7
69904: DEC
69905: ST_TO_ADDR
69906: LD_VAR 0 10
69910: PUSH
69911: FOR_TO
69912: IFFALSE 69989
// begin if not ValidHex ( _x , _y ) then
69914: LD_VAR 0 5
69918: PPUSH
69919: LD_VAR 0 6
69923: PPUSH
69924: CALL_OW 488
69928: NOT
69929: IFFALSE 69933
// continue ;
69931: GO 69911
// if GetResourceTypeXY ( _x , _y ) then
69933: LD_VAR 0 5
69937: PPUSH
69938: LD_VAR 0 6
69942: PPUSH
69943: CALL_OW 283
69947: IFFALSE 69987
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69949: LD_ADDR_VAR 0 4
69953: PUSH
69954: LD_VAR 0 4
69958: PPUSH
69959: LD_VAR 0 4
69963: PUSH
69964: LD_INT 1
69966: PLUS
69967: PPUSH
69968: LD_VAR 0 5
69972: PUSH
69973: LD_VAR 0 6
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PPUSH
69982: CALL_OW 1
69986: ST_TO_ADDR
// end ;
69987: GO 69911
69989: POP
69990: POP
69991: GO 69891
69993: POP
69994: POP
// end ;
69995: LD_VAR 0 4
69999: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70000: LD_INT 0
70002: PPUSH
70003: PPUSH
70004: PPUSH
70005: PPUSH
70006: PPUSH
70007: PPUSH
70008: PPUSH
70009: PPUSH
// if not units then
70010: LD_VAR 0 1
70014: NOT
70015: IFFALSE 70019
// exit ;
70017: GO 70543
// result := UnitFilter ( units , [ f_ok ] ) ;
70019: LD_ADDR_VAR 0 3
70023: PUSH
70024: LD_VAR 0 1
70028: PPUSH
70029: LD_INT 50
70031: PUSH
70032: EMPTY
70033: LIST
70034: PPUSH
70035: CALL_OW 72
70039: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70040: LD_ADDR_VAR 0 8
70044: PUSH
70045: LD_VAR 0 1
70049: PUSH
70050: LD_INT 1
70052: ARRAY
70053: PPUSH
70054: CALL_OW 255
70058: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70059: LD_ADDR_VAR 0 10
70063: PUSH
70064: LD_INT 29
70066: PUSH
70067: LD_INT 91
70069: PUSH
70070: LD_INT 49
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: ST_TO_ADDR
// if not result then
70078: LD_VAR 0 3
70082: NOT
70083: IFFALSE 70087
// exit ;
70085: GO 70543
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70087: LD_ADDR_VAR 0 5
70091: PUSH
70092: LD_INT 81
70094: PUSH
70095: LD_VAR 0 8
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PPUSH
70104: CALL_OW 69
70108: ST_TO_ADDR
// for i in result do
70109: LD_ADDR_VAR 0 4
70113: PUSH
70114: LD_VAR 0 3
70118: PUSH
70119: FOR_IN
70120: IFFALSE 70541
// begin tag := GetTag ( i ) + 1 ;
70122: LD_ADDR_VAR 0 9
70126: PUSH
70127: LD_VAR 0 4
70131: PPUSH
70132: CALL_OW 110
70136: PUSH
70137: LD_INT 1
70139: PLUS
70140: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70141: LD_ADDR_VAR 0 7
70145: PUSH
70146: LD_VAR 0 4
70150: PPUSH
70151: CALL_OW 250
70155: PPUSH
70156: LD_VAR 0 4
70160: PPUSH
70161: CALL_OW 251
70165: PPUSH
70166: LD_INT 6
70168: PPUSH
70169: CALL 69742 0 3
70173: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70174: LD_VAR 0 4
70178: PPUSH
70179: CALL_OW 247
70183: PUSH
70184: LD_INT 2
70186: EQUAL
70187: PUSH
70188: LD_VAR 0 7
70192: AND
70193: PUSH
70194: LD_VAR 0 4
70198: PPUSH
70199: CALL_OW 264
70203: PUSH
70204: LD_VAR 0 10
70208: IN
70209: NOT
70210: AND
70211: IFFALSE 70250
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70213: LD_VAR 0 4
70217: PPUSH
70218: LD_VAR 0 7
70222: PUSH
70223: LD_INT 1
70225: ARRAY
70226: PUSH
70227: LD_INT 1
70229: ARRAY
70230: PPUSH
70231: LD_VAR 0 7
70235: PUSH
70236: LD_INT 1
70238: ARRAY
70239: PUSH
70240: LD_INT 2
70242: ARRAY
70243: PPUSH
70244: CALL_OW 116
70248: GO 70539
// if path > tag then
70250: LD_VAR 0 2
70254: PUSH
70255: LD_VAR 0 9
70259: GREATER
70260: IFFALSE 70468
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70262: LD_ADDR_VAR 0 6
70266: PUSH
70267: LD_VAR 0 5
70271: PPUSH
70272: LD_INT 91
70274: PUSH
70275: LD_VAR 0 4
70279: PUSH
70280: LD_INT 8
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: LIST
70287: PPUSH
70288: CALL_OW 72
70292: ST_TO_ADDR
// if nearEnemy then
70293: LD_VAR 0 6
70297: IFFALSE 70366
// begin if GetWeapon ( i ) = ru_time_lapser then
70299: LD_VAR 0 4
70303: PPUSH
70304: CALL_OW 264
70308: PUSH
70309: LD_INT 49
70311: EQUAL
70312: IFFALSE 70340
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70314: LD_VAR 0 4
70318: PPUSH
70319: LD_VAR 0 6
70323: PPUSH
70324: LD_VAR 0 4
70328: PPUSH
70329: CALL_OW 74
70333: PPUSH
70334: CALL_OW 112
70338: GO 70364
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70340: LD_VAR 0 4
70344: PPUSH
70345: LD_VAR 0 6
70349: PPUSH
70350: LD_VAR 0 4
70354: PPUSH
70355: CALL_OW 74
70359: PPUSH
70360: CALL 71468 0 2
// end else
70364: GO 70466
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70366: LD_VAR 0 4
70370: PPUSH
70371: LD_VAR 0 2
70375: PUSH
70376: LD_VAR 0 9
70380: ARRAY
70381: PUSH
70382: LD_INT 1
70384: ARRAY
70385: PPUSH
70386: LD_VAR 0 2
70390: PUSH
70391: LD_VAR 0 9
70395: ARRAY
70396: PUSH
70397: LD_INT 2
70399: ARRAY
70400: PPUSH
70401: CALL_OW 297
70405: PUSH
70406: LD_INT 6
70408: GREATER
70409: IFFALSE 70452
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70411: LD_VAR 0 4
70415: PPUSH
70416: LD_VAR 0 2
70420: PUSH
70421: LD_VAR 0 9
70425: ARRAY
70426: PUSH
70427: LD_INT 1
70429: ARRAY
70430: PPUSH
70431: LD_VAR 0 2
70435: PUSH
70436: LD_VAR 0 9
70440: ARRAY
70441: PUSH
70442: LD_INT 2
70444: ARRAY
70445: PPUSH
70446: CALL_OW 114
70450: GO 70466
// SetTag ( i , tag ) ;
70452: LD_VAR 0 4
70456: PPUSH
70457: LD_VAR 0 9
70461: PPUSH
70462: CALL_OW 109
// end else
70466: GO 70539
// if enemy then
70468: LD_VAR 0 5
70472: IFFALSE 70539
// begin if GetWeapon ( i ) = ru_time_lapser then
70474: LD_VAR 0 4
70478: PPUSH
70479: CALL_OW 264
70483: PUSH
70484: LD_INT 49
70486: EQUAL
70487: IFFALSE 70515
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70489: LD_VAR 0 4
70493: PPUSH
70494: LD_VAR 0 5
70498: PPUSH
70499: LD_VAR 0 4
70503: PPUSH
70504: CALL_OW 74
70508: PPUSH
70509: CALL_OW 112
70513: GO 70539
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70515: LD_VAR 0 4
70519: PPUSH
70520: LD_VAR 0 5
70524: PPUSH
70525: LD_VAR 0 4
70529: PPUSH
70530: CALL_OW 74
70534: PPUSH
70535: CALL 71468 0 2
// end ; end ;
70539: GO 70119
70541: POP
70542: POP
// end ;
70543: LD_VAR 0 3
70547: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70548: LD_INT 0
70550: PPUSH
70551: PPUSH
70552: PPUSH
// if not unit or IsInUnit ( unit ) then
70553: LD_VAR 0 1
70557: NOT
70558: PUSH
70559: LD_VAR 0 1
70563: PPUSH
70564: CALL_OW 310
70568: OR
70569: IFFALSE 70573
// exit ;
70571: GO 70664
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70573: LD_ADDR_VAR 0 4
70577: PUSH
70578: LD_VAR 0 1
70582: PPUSH
70583: CALL_OW 250
70587: PPUSH
70588: LD_VAR 0 2
70592: PPUSH
70593: LD_INT 1
70595: PPUSH
70596: CALL_OW 272
70600: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: CALL_OW 251
70615: PPUSH
70616: LD_VAR 0 2
70620: PPUSH
70621: LD_INT 1
70623: PPUSH
70624: CALL_OW 273
70628: ST_TO_ADDR
// if ValidHex ( x , y ) then
70629: LD_VAR 0 4
70633: PPUSH
70634: LD_VAR 0 5
70638: PPUSH
70639: CALL_OW 488
70643: IFFALSE 70664
// ComTurnXY ( unit , x , y ) ;
70645: LD_VAR 0 1
70649: PPUSH
70650: LD_VAR 0 4
70654: PPUSH
70655: LD_VAR 0 5
70659: PPUSH
70660: CALL_OW 118
// end ;
70664: LD_VAR 0 3
70668: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70669: LD_INT 0
70671: PPUSH
70672: PPUSH
// result := false ;
70673: LD_ADDR_VAR 0 3
70677: PUSH
70678: LD_INT 0
70680: ST_TO_ADDR
// if not units then
70681: LD_VAR 0 2
70685: NOT
70686: IFFALSE 70690
// exit ;
70688: GO 70735
// for i in units do
70690: LD_ADDR_VAR 0 4
70694: PUSH
70695: LD_VAR 0 2
70699: PUSH
70700: FOR_IN
70701: IFFALSE 70733
// if See ( side , i ) then
70703: LD_VAR 0 1
70707: PPUSH
70708: LD_VAR 0 4
70712: PPUSH
70713: CALL_OW 292
70717: IFFALSE 70731
// begin result := true ;
70719: LD_ADDR_VAR 0 3
70723: PUSH
70724: LD_INT 1
70726: ST_TO_ADDR
// exit ;
70727: POP
70728: POP
70729: GO 70735
// end ;
70731: GO 70700
70733: POP
70734: POP
// end ;
70735: LD_VAR 0 3
70739: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70740: LD_INT 0
70742: PPUSH
70743: PPUSH
70744: PPUSH
70745: PPUSH
// if not unit or not points then
70746: LD_VAR 0 1
70750: NOT
70751: PUSH
70752: LD_VAR 0 2
70756: NOT
70757: OR
70758: IFFALSE 70762
// exit ;
70760: GO 70852
// dist := 99999 ;
70762: LD_ADDR_VAR 0 5
70766: PUSH
70767: LD_INT 99999
70769: ST_TO_ADDR
// for i in points do
70770: LD_ADDR_VAR 0 4
70774: PUSH
70775: LD_VAR 0 2
70779: PUSH
70780: FOR_IN
70781: IFFALSE 70850
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70783: LD_ADDR_VAR 0 6
70787: PUSH
70788: LD_VAR 0 1
70792: PPUSH
70793: LD_VAR 0 4
70797: PUSH
70798: LD_INT 1
70800: ARRAY
70801: PPUSH
70802: LD_VAR 0 4
70806: PUSH
70807: LD_INT 2
70809: ARRAY
70810: PPUSH
70811: CALL_OW 297
70815: ST_TO_ADDR
// if tmpDist < dist then
70816: LD_VAR 0 6
70820: PUSH
70821: LD_VAR 0 5
70825: LESS
70826: IFFALSE 70848
// begin result := i ;
70828: LD_ADDR_VAR 0 3
70832: PUSH
70833: LD_VAR 0 4
70837: ST_TO_ADDR
// dist := tmpDist ;
70838: LD_ADDR_VAR 0 5
70842: PUSH
70843: LD_VAR 0 6
70847: ST_TO_ADDR
// end ; end ;
70848: GO 70780
70850: POP
70851: POP
// end ;
70852: LD_VAR 0 3
70856: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70857: LD_INT 0
70859: PPUSH
// uc_side := side ;
70860: LD_ADDR_OWVAR 20
70864: PUSH
70865: LD_VAR 0 1
70869: ST_TO_ADDR
// uc_nation := 3 ;
70870: LD_ADDR_OWVAR 21
70874: PUSH
70875: LD_INT 3
70877: ST_TO_ADDR
// vc_chassis := 25 ;
70878: LD_ADDR_OWVAR 37
70882: PUSH
70883: LD_INT 25
70885: ST_TO_ADDR
// vc_engine := engine_siberite ;
70886: LD_ADDR_OWVAR 39
70890: PUSH
70891: LD_INT 3
70893: ST_TO_ADDR
// vc_control := control_computer ;
70894: LD_ADDR_OWVAR 38
70898: PUSH
70899: LD_INT 3
70901: ST_TO_ADDR
// vc_weapon := 59 ;
70902: LD_ADDR_OWVAR 40
70906: PUSH
70907: LD_INT 59
70909: ST_TO_ADDR
// result := CreateVehicle ;
70910: LD_ADDR_VAR 0 5
70914: PUSH
70915: CALL_OW 45
70919: ST_TO_ADDR
// SetDir ( result , d ) ;
70920: LD_VAR 0 5
70924: PPUSH
70925: LD_VAR 0 4
70929: PPUSH
70930: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70934: LD_VAR 0 5
70938: PPUSH
70939: LD_VAR 0 2
70943: PPUSH
70944: LD_VAR 0 3
70948: PPUSH
70949: LD_INT 0
70951: PPUSH
70952: CALL_OW 48
// end ;
70956: LD_VAR 0 5
70960: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70961: LD_INT 0
70963: PPUSH
70964: PPUSH
70965: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70966: LD_ADDR_VAR 0 2
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70989: LD_VAR 0 1
70993: NOT
70994: PUSH
70995: LD_VAR 0 1
70999: PPUSH
71000: CALL_OW 264
71004: PUSH
71005: LD_INT 12
71007: PUSH
71008: LD_INT 51
71010: PUSH
71011: LD_INT 32
71013: PUSH
71014: LD_INT 89
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: IN
71023: NOT
71024: OR
71025: IFFALSE 71029
// exit ;
71027: GO 71127
// for i := 1 to 3 do
71029: LD_ADDR_VAR 0 3
71033: PUSH
71034: DOUBLE
71035: LD_INT 1
71037: DEC
71038: ST_TO_ADDR
71039: LD_INT 3
71041: PUSH
71042: FOR_TO
71043: IFFALSE 71125
// begin tmp := GetCargo ( cargo , i ) ;
71045: LD_ADDR_VAR 0 4
71049: PUSH
71050: LD_VAR 0 1
71054: PPUSH
71055: LD_VAR 0 3
71059: PPUSH
71060: CALL_OW 289
71064: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71065: LD_ADDR_VAR 0 2
71069: PUSH
71070: LD_VAR 0 2
71074: PPUSH
71075: LD_VAR 0 3
71079: PPUSH
71080: LD_VAR 0 4
71084: PPUSH
71085: CALL_OW 1
71089: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71090: LD_ADDR_VAR 0 2
71094: PUSH
71095: LD_VAR 0 2
71099: PPUSH
71100: LD_INT 4
71102: PPUSH
71103: LD_VAR 0 2
71107: PUSH
71108: LD_INT 4
71110: ARRAY
71111: PUSH
71112: LD_VAR 0 4
71116: PLUS
71117: PPUSH
71118: CALL_OW 1
71122: ST_TO_ADDR
// end ;
71123: GO 71042
71125: POP
71126: POP
// end ;
71127: LD_VAR 0 2
71131: RET
// export function Length ( array ) ; begin
71132: LD_INT 0
71134: PPUSH
// result := array + 0 ;
71135: LD_ADDR_VAR 0 2
71139: PUSH
71140: LD_VAR 0 1
71144: PUSH
71145: LD_INT 0
71147: PLUS
71148: ST_TO_ADDR
// end ;
71149: LD_VAR 0 2
71153: RET
// export function PrepareArray ( array ) ; begin
71154: LD_INT 0
71156: PPUSH
// result := array diff 0 ;
71157: LD_ADDR_VAR 0 2
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_INT 0
71169: DIFF
71170: ST_TO_ADDR
// if not result [ 1 ] then
71171: LD_VAR 0 2
71175: PUSH
71176: LD_INT 1
71178: ARRAY
71179: NOT
71180: IFFALSE 71200
// result := Delete ( result , 1 ) ;
71182: LD_ADDR_VAR 0 2
71186: PUSH
71187: LD_VAR 0 2
71191: PPUSH
71192: LD_INT 1
71194: PPUSH
71195: CALL_OW 3
71199: ST_TO_ADDR
// end ;
71200: LD_VAR 0 2
71204: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71205: LD_INT 0
71207: PPUSH
71208: PPUSH
71209: PPUSH
71210: PPUSH
// sibRocketRange := 25 ;
71211: LD_ADDR_VAR 0 6
71215: PUSH
71216: LD_INT 25
71218: ST_TO_ADDR
// result := false ;
71219: LD_ADDR_VAR 0 4
71223: PUSH
71224: LD_INT 0
71226: ST_TO_ADDR
// for i := 0 to 5 do
71227: LD_ADDR_VAR 0 5
71231: PUSH
71232: DOUBLE
71233: LD_INT 0
71235: DEC
71236: ST_TO_ADDR
71237: LD_INT 5
71239: PUSH
71240: FOR_TO
71241: IFFALSE 71308
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71243: LD_VAR 0 1
71247: PPUSH
71248: LD_VAR 0 5
71252: PPUSH
71253: LD_VAR 0 6
71257: PPUSH
71258: CALL_OW 272
71262: PPUSH
71263: LD_VAR 0 2
71267: PPUSH
71268: LD_VAR 0 5
71272: PPUSH
71273: LD_VAR 0 6
71277: PPUSH
71278: CALL_OW 273
71282: PPUSH
71283: LD_VAR 0 3
71287: PPUSH
71288: CALL_OW 309
71292: IFFALSE 71306
// begin result := true ;
71294: LD_ADDR_VAR 0 4
71298: PUSH
71299: LD_INT 1
71301: ST_TO_ADDR
// exit ;
71302: POP
71303: POP
71304: GO 71310
// end ;
71306: GO 71240
71308: POP
71309: POP
// end ;
71310: LD_VAR 0 4
71314: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71315: LD_INT 0
71317: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71318: LD_VAR 0 1
71322: PPUSH
71323: LD_VAR 0 2
71327: PPUSH
71328: LD_INT 0
71330: PPUSH
71331: LD_INT 0
71333: PPUSH
71334: LD_INT 1
71336: PPUSH
71337: LD_INT 0
71339: PPUSH
71340: CALL_OW 587
// end ;
71344: LD_VAR 0 3
71348: RET
// export function CenterOnNow ( unit ) ; begin
71349: LD_INT 0
71351: PPUSH
// result := IsInUnit ( unit ) ;
71352: LD_ADDR_VAR 0 2
71356: PUSH
71357: LD_VAR 0 1
71361: PPUSH
71362: CALL_OW 310
71366: ST_TO_ADDR
// if not result then
71367: LD_VAR 0 2
71371: NOT
71372: IFFALSE 71384
// result := unit ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_VAR 0 1
71383: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71384: LD_VAR 0 1
71388: PPUSH
71389: CALL_OW 87
// end ;
71393: LD_VAR 0 2
71397: RET
// export function ComMoveHex ( unit , hex ) ; begin
71398: LD_INT 0
71400: PPUSH
// if not hex then
71401: LD_VAR 0 2
71405: NOT
71406: IFFALSE 71410
// exit ;
71408: GO 71463
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71410: LD_VAR 0 2
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PPUSH
71419: LD_VAR 0 2
71423: PUSH
71424: LD_INT 2
71426: ARRAY
71427: PPUSH
71428: CALL_OW 428
71432: IFFALSE 71436
// exit ;
71434: GO 71463
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71436: LD_VAR 0 1
71440: PPUSH
71441: LD_VAR 0 2
71445: PUSH
71446: LD_INT 1
71448: ARRAY
71449: PPUSH
71450: LD_VAR 0 2
71454: PUSH
71455: LD_INT 2
71457: ARRAY
71458: PPUSH
71459: CALL_OW 111
// end ;
71463: LD_VAR 0 3
71467: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71468: LD_INT 0
71470: PPUSH
71471: PPUSH
71472: PPUSH
// if not unit or not enemy then
71473: LD_VAR 0 1
71477: NOT
71478: PUSH
71479: LD_VAR 0 2
71483: NOT
71484: OR
71485: IFFALSE 71489
// exit ;
71487: GO 71613
// x := GetX ( enemy ) ;
71489: LD_ADDR_VAR 0 4
71493: PUSH
71494: LD_VAR 0 2
71498: PPUSH
71499: CALL_OW 250
71503: ST_TO_ADDR
// y := GetY ( enemy ) ;
71504: LD_ADDR_VAR 0 5
71508: PUSH
71509: LD_VAR 0 2
71513: PPUSH
71514: CALL_OW 251
71518: ST_TO_ADDR
// if ValidHex ( x , y ) then
71519: LD_VAR 0 4
71523: PPUSH
71524: LD_VAR 0 5
71528: PPUSH
71529: CALL_OW 488
71533: IFFALSE 71613
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71535: LD_VAR 0 2
71539: PPUSH
71540: CALL_OW 247
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: IN
71555: PUSH
71556: LD_VAR 0 1
71560: PPUSH
71561: CALL_OW 255
71565: PPUSH
71566: LD_VAR 0 2
71570: PPUSH
71571: CALL_OW 292
71575: AND
71576: IFFALSE 71594
// ComAttackUnit ( unit , enemy ) else
71578: LD_VAR 0 1
71582: PPUSH
71583: LD_VAR 0 2
71587: PPUSH
71588: CALL_OW 115
71592: GO 71613
// ComAgressiveMove ( unit , x , y ) ;
71594: LD_VAR 0 1
71598: PPUSH
71599: LD_VAR 0 4
71603: PPUSH
71604: LD_VAR 0 5
71608: PPUSH
71609: CALL_OW 114
// end ; end_of_file
71613: LD_VAR 0 3
71617: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71618: LD_VAR 0 1
71622: PUSH
71623: LD_INT 200
71625: DOUBLE
71626: GREATEREQUAL
71627: IFFALSE 71635
71629: LD_INT 299
71631: DOUBLE
71632: LESSEQUAL
71633: IFTRUE 71637
71635: GO 71669
71637: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71638: LD_VAR 0 1
71642: PPUSH
71643: LD_VAR 0 2
71647: PPUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: LD_VAR 0 4
71657: PPUSH
71658: LD_VAR 0 5
71662: PPUSH
71663: CALL 26162 0 5
71667: GO 71746
71669: LD_INT 300
71671: DOUBLE
71672: GREATEREQUAL
71673: IFFALSE 71681
71675: LD_INT 399
71677: DOUBLE
71678: LESSEQUAL
71679: IFTRUE 71683
71681: GO 71745
71683: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71684: LD_VAR 0 1
71688: PPUSH
71689: LD_VAR 0 2
71693: PPUSH
71694: LD_VAR 0 3
71698: PPUSH
71699: LD_VAR 0 4
71703: PPUSH
71704: LD_VAR 0 5
71708: PPUSH
71709: LD_VAR 0 6
71713: PPUSH
71714: LD_VAR 0 7
71718: PPUSH
71719: LD_VAR 0 8
71723: PPUSH
71724: LD_VAR 0 9
71728: PPUSH
71729: LD_VAR 0 10
71733: PPUSH
71734: LD_VAR 0 11
71738: PPUSH
71739: CALL 22487 0 11
71743: GO 71746
71745: POP
// end ;
71746: PPOPN 11
71748: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71749: LD_VAR 0 1
71753: PPUSH
71754: LD_VAR 0 2
71758: PPUSH
71759: LD_VAR 0 3
71763: PPUSH
71764: LD_VAR 0 4
71768: PPUSH
71769: LD_VAR 0 5
71773: PPUSH
71774: CALL 25898 0 5
// end ; end_of_file
71778: PPOPN 5
71780: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71781: LD_VAR 0 1
71785: PPUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: LD_VAR 0 3
71795: PPUSH
71796: LD_VAR 0 4
71800: PPUSH
71801: LD_VAR 0 5
71805: PPUSH
71806: LD_VAR 0 6
71810: PPUSH
71811: CALL 10139 0 6
// end ;
71815: PPOPN 6
71817: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71818: LD_INT 0
71820: PPUSH
// begin if not units then
71821: LD_VAR 0 1
71825: NOT
71826: IFFALSE 71830
// exit ;
71828: GO 71830
// end ;
71830: PPOPN 7
71832: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71833: CALL 10043 0 0
// end ;
71837: PPOPN 1
71839: END
