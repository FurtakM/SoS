// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8231
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8231
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8203: LD_EXP 23
8207: PPUSH
8208: LD_EXP 16
8212: PPUSH
8213: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8217: LD_EXP 24
8221: PPUSH
8222: LD_EXP 16
8226: PPUSH
8227: CALL_OW 175
// end ;
8231: PPOPN 2
8233: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8234: LD_INT 22
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 91
8246: PUSH
8247: LD_INT 8
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IFFALSE 8452
8268: GO 8270
8270: DISABLE
8271: LD_INT 0
8273: PPUSH
8274: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8275: LD_INT 280
8277: PUSH
8278: LD_INT 245
8280: PUSH
8281: LD_INT 210
8283: PUSH
8284: LD_INT 175
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_OWVAR 67
8297: ARRAY
8298: PPUSH
8299: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_INT 22
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 54
8330: PUSH
8331: EMPTY
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 2
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8452
// for i in tmp do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: LD_VAR 0 2
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8392
// begin ComExitBuilding ( i ) ;
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 142
8382: PPUSH
8383: LD_INT 71
8385: PPUSH
8386: CALL_OW 174
// end ;
8390: GO 8363
8392: POP
8393: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8394: LD_EXP 23
8398: PPUSH
8399: LD_INT 142
8401: PPUSH
8402: LD_INT 71
8404: PPUSH
8405: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8409: LD_EXP 24
8413: PPUSH
8414: LD_INT 142
8416: PPUSH
8417: LD_INT 71
8419: PPUSH
8420: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8424: LD_EXP 23
8428: PPUSH
8429: LD_EXP 16
8433: PPUSH
8434: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8438: LD_EXP 24
8442: PPUSH
8443: LD_EXP 16
8447: PPUSH
8448: CALL_OW 175
// end ;
8452: PPOPN 2
8454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8455: LD_INT 22
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 58
8477: PUSH
8478: EMPTY
8479: LIST
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 24
8486: PUSH
8487: LD_INT 1000
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 91
8500: PUSH
8501: LD_EXP 17
8505: PUSH
8506: LD_INT 8
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 69
8525: PUSH
8526: LD_EXP 17
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: IFFALSE 8650
8538: GO 8540
8540: DISABLE
// begin enable ;
8541: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8542: LD_EXP 17
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 58
8569: PUSH
8570: EMPTY
8571: LIST
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 24
8578: PUSH
8579: LD_INT 1000
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 91
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_INT 8
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 90
8636: PPUSH
8637: CALL_OW 171
// AddComHold ( Olaf ) ;
8641: LD_EXP 17
8645: PPUSH
8646: CALL_OW 200
// end ;
8650: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8651: LD_EXP 12
8655: PUSH
8656: LD_INT 2
8658: PPUSH
8659: CALL_OW 302
8663: NOT
8664: AND
8665: PUSH
8666: LD_OWVAR 67
8670: PUSH
8671: LD_INT 1
8673: EQUAL
8674: AND
8675: PUSH
8676: LD_EXP 13
8680: NOT
8681: AND
8682: IFFALSE 8699
8684: GO 8686
8686: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8687: LD_EXP 16
8691: PPUSH
8692: LD_STRING DH-prison-missing
8694: PPUSH
8695: CALL_OW 88
// end ;
8699: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8700: LD_EXP 12
8704: PUSH
8705: LD_INT 8
8707: PPUSH
8708: CALL_OW 302
8712: NOT
8713: AND
8714: PUSH
8715: LD_OWVAR 67
8719: PUSH
8720: LD_INT 1
8722: GREATER
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 3
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8788: LD_EXP 12
8792: PUSH
8793: LD_INT 10
8795: PPUSH
8796: CALL_OW 302
8800: NOT
8801: AND
8802: PUSH
8803: LD_EXP 13
8807: NOT
8808: AND
8809: IFFALSE 8826
8811: GO 8813
8813: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8814: LD_EXP 16
8818: PPUSH
8819: LD_STRING DH-prison-missing-a
8821: PPUSH
8822: CALL_OW 88
// end ;
8826: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8827: LD_EXP 13
8831: NOT
8832: PUSH
8833: LD_EXP 12
8837: AND
8838: PUSH
8839: LD_INT 2
8841: PPUSH
8842: LD_EXP 20
8846: PPUSH
8847: CALL_OW 292
8851: AND
8852: IFFALSE 8939
8854: GO 8856
8856: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8857: LD_EXP 20
8861: PPUSH
8862: LD_EXP 16
8866: PPUSH
8867: CALL_OW 119
// DialogueOn ;
8871: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8875: LD_EXP 20
8879: PPUSH
8880: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8884: LD_EXP 20
8888: PPUSH
8889: LD_STRING DK-prison-found
8891: PPUSH
8892: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8896: LD_EXP 16
8900: PPUSH
8901: LD_STRING DH-prison-found
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8912: LD_EXP 20
8916: PPUSH
8917: LD_INT 2
8919: PPUSH
8920: CALL_OW 235
// prisonFound := true ;
8924: LD_ADDR_EXP 13
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8932: LD_STRING O6_prison_out
8934: PPUSH
8935: CALL_OW 337
// end ;
8939: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8940: LD_EXP 16
8944: PPUSH
8945: CALL_OW 256
8949: PUSH
8950: LD_INT 500
8952: LESS
8953: IFFALSE 8966
8955: GO 8957
8957: DISABLE
// heikeHurt := true ;
8958: LD_ADDR_EXP 14
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
8966: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8967: LD_INT 22
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 21
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: IFFALSE 9311
8997: GO 8999
8999: DISABLE
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
// begin uc_side := 3 ;
9005: LD_ADDR_OWVAR 20
9009: PUSH
9010: LD_INT 3
9012: ST_TO_ADDR
// uc_nation := 3 ;
9013: LD_ADDR_OWVAR 21
9017: PUSH
9018: LD_INT 3
9020: ST_TO_ADDR
// tmp := [ ] ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: EMPTY
9027: ST_TO_ADDR
// for i := 1 to 8 do
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_INT 8
9040: PUSH
9041: FOR_TO
9042: IFFALSE 9150
// begin PrepareHuman ( false , 1 , 4 ) ;
9044: LD_INT 0
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_INT 4
9052: PPUSH
9053: CALL_OW 380
// un := CreateHuman ;
9057: LD_ADDR_VAR 0 3
9061: PUSH
9062: CALL_OW 44
9066: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 4
9074: PPUSH
9075: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_INT 158
9086: PPUSH
9087: LD_INT 80
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9097: LD_VAR 0 3
9101: PPUSH
9102: LD_INT 147
9104: PPUSH
9105: LD_INT 75
9107: PPUSH
9108: CALL_OW 111
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 2
9133: PUSH
9134: LD_INT 1
9136: PLUS
9137: PPUSH
9138: LD_VAR 0 3
9142: PPUSH
9143: CALL_OW 1
9147: ST_TO_ADDR
// end ;
9148: GO 9041
9150: POP
9151: POP
// repeat wait ( 0 0$1 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// for i in tmp do
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 2
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9291
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_INT 3
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 69
9191: PPUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 74
9201: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 428
9234: IFFALSE 9275
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_VAR 0 3
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: CALL_OW 250
9254: PPUSH
9255: LD_VAR 0 3
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: CALL_OW 251
9268: PPUSH
9269: CALL_OW 114
9273: GO 9289
// ComAttackUnit ( i , Heike ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 115
// end ;
9289: GO 9169
9291: POP
9292: POP
// until IsDead ( Heike ) or not tmp ;
9293: LD_EXP 16
9297: PPUSH
9298: CALL_OW 301
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: IFFALSE 9152
// end ;
9311: PPOPN 3
9313: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9314: LD_EXP 12
9318: PUSH
9319: LD_EXP 16
9323: PPUSH
9324: CALL_OW 302
9328: AND
9329: PUSH
9330: LD_INT 1
9332: PPUSH
9333: LD_INT 21
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 50
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 71
9368: PUSH
9369: LD_INT 0
9371: EQUAL
9372: AND
9373: IFFALSE 9724
9375: GO 9377
9377: DISABLE
9378: LD_INT 0
9380: PPUSH
// begin if not heikeHurt then
9381: LD_EXP 14
9385: NOT
9386: IFFALSE 9395
// SetAchievement ( ACH_INVINCIBLE ) ;
9388: LD_STRING ACH_INVINCIBLE
9390: PPUSH
9391: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9395: LD_STRING enableBioCharacter(BIO_GIVI)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9402: LD_STRING enableBioCharacter(BIO_MIKE)
9404: PPUSH
9405: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9409: LD_STRING enableBioCharacter(BIO_OLAF)
9411: PPUSH
9412: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 50
9443: PUSH
9444: EMPTY
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: ST_TO_ADDR
// if prisonFound then
9457: LD_EXP 13
9461: IFFALSE 9475
// AddMedal ( med1 , 1 ) else
9463: LD_STRING med1
9465: PPUSH
9466: LD_INT 1
9468: PPUSH
9469: CALL_OW 101
9473: GO 9486
// AddMedal ( med1 , - 1 ) ;
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: NEG
9481: PPUSH
9482: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9486: LD_VAR 0 1
9490: PUSH
9491: LD_INT 3
9493: LESS
9494: PUSH
9495: LD_EXP 13
9499: NOT
9500: AND
9501: PUSH
9502: LD_VAR 0 1
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: PUSH
9511: LD_EXP 13
9515: AND
9516: OR
9517: IFFALSE 9532
// AddMedal ( med2 , - 1 ) else
9519: LD_STRING med2
9521: PPUSH
9522: LD_INT 1
9524: NEG
9525: PPUSH
9526: CALL_OW 101
9530: GO 9542
// AddMedal ( med2 , 1 ) ;
9532: LD_STRING med2
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9542: LD_EXP 13
9546: PUSH
9547: LD_EXP 4
9551: AND
9552: PUSH
9553: LD_VAR 0 1
9557: PUSH
9558: LD_INT 4
9560: GREATEREQUAL
9561: AND
9562: IFFALSE 9576
// AddMedal ( med3 , 1 ) else
9564: LD_STRING med3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 101
9574: GO 9587
// AddMedal ( med3 , - 1 ) ;
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: NEG
9582: PPUSH
9583: CALL_OW 101
// GiveMedals ( MAIN ) ;
9587: LD_STRING MAIN
9589: PPUSH
9590: CALL_OW 102
// RewardPeople ( tmp ) ;
9594: LD_VAR 0 1
9598: PPUSH
9599: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9603: LD_EXP 16
9607: PPUSH
9608: LD_STRING 01_Heike
9610: PPUSH
9611: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9615: LD_EXP 18
9619: PPUSH
9620: CALL_OW 302
9624: PUSH
9625: LD_EXP 18
9629: PUSH
9630: LD_VAR 0 1
9634: IN
9635: AND
9636: IFFALSE 9650
// SaveCharacters ( Givi , 01_Givi ) ;
9638: LD_EXP 18
9642: PPUSH
9643: LD_STRING 01_Givi
9645: PPUSH
9646: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9650: LD_EXP 19
9654: PPUSH
9655: CALL_OW 302
9659: PUSH
9660: LD_EXP 19
9664: PUSH
9665: LD_VAR 0 1
9669: IN
9670: AND
9671: IFFALSE 9685
// SaveCharacters ( Mike , 01_Mike ) ;
9673: LD_EXP 19
9677: PPUSH
9678: LD_STRING 01_Mike
9680: PPUSH
9681: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9685: LD_EXP 20
9689: PPUSH
9690: CALL_OW 302
9694: PUSH
9695: LD_EXP 20
9699: PUSH
9700: LD_VAR 0 1
9704: IN
9705: AND
9706: IFFALSE 9720
// SaveCharacters ( Kamil , 01_Kamil ) ;
9708: LD_EXP 20
9712: PPUSH
9713: LD_STRING 01_Kamil
9715: PPUSH
9716: CALL_OW 38
// YouWin ;
9720: CALL_OW 103
// end ; end_of_file
9724: PPOPN 1
9726: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9727: LD_VAR 0 1
9731: PUSH
9732: LD_EXP 16
9736: EQUAL
9737: IFFALSE 9746
// YouLost ( Heike ) ;
9739: LD_STRING Heike
9741: PPUSH
9742: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9746: LD_VAR 0 1
9750: PUSH
9751: LD_INT 22
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 25
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: IN
9780: IFFALSE 9886
// begin if un in russianPatrol then
9782: LD_VAR 0 1
9786: PUSH
9787: LD_EXP 21
9791: IN
9792: IFFALSE 9810
// russianPatrol := russianPatrol diff un ;
9794: LD_ADDR_EXP 21
9798: PUSH
9799: LD_EXP 21
9803: PUSH
9804: LD_VAR 0 1
9808: DIFF
9809: ST_TO_ADDR
// if un in russianForestPatrol then
9810: LD_VAR 0 1
9814: PUSH
9815: LD_EXP 22
9819: IN
9820: IFFALSE 9838
// russianForestPatrol := russianForestPatrol diff un ;
9822: LD_ADDR_EXP 22
9826: PUSH
9827: LD_EXP 22
9831: PUSH
9832: LD_VAR 0 1
9836: DIFF
9837: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9838: LD_ADDR_EXP 5
9842: PUSH
9843: LD_EXP 5
9847: PPUSH
9848: LD_EXP 5
9852: PUSH
9853: LD_INT 1
9855: PLUS
9856: PPUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 250
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 251
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 1
9885: ST_TO_ADDR
// end ; end ;
9886: PPOPN 1
9888: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9889: LD_VAR 0 1
9893: PUSH
9894: LD_EXP 16
9898: EQUAL
9899: IFFALSE 9908
// YouLost ( Heike ) ;
9901: LD_STRING Heike
9903: PPUSH
9904: CALL_OW 104
// if un = Olaf then
9908: LD_VAR 0 1
9912: PUSH
9913: LD_EXP 17
9917: EQUAL
9918: IFFALSE 9927
// YouLost ( Olaf ) ;
9920: LD_STRING Olaf
9922: PPUSH
9923: CALL_OW 104
// end ;
9927: PPOPN 1
9929: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_INT 2
9937: EQUAL
9938: PUSH
9939: LD_VAR 0 2
9943: PUSH
9944: LD_INT 5
9946: EQUAL
9947: AND
9948: IFFALSE 9957
// YouLost ( FriendlyFire ) ;
9950: LD_STRING FriendlyFire
9952: PPUSH
9953: CALL_OW 104
// end ; end_of_file
9957: PPOPN 2
9959: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9960: LD_INT 0
9962: PPUSH
// if p2 = 100 then
9963: LD_VAR 0 2
9967: PUSH
9968: LD_INT 100
9970: EQUAL
9971: IFFALSE 10974
// begin if not StreamModeActive then
9973: LD_EXP 26
9977: NOT
9978: IFFALSE 9988
// StreamModeActive := true ;
9980: LD_ADDR_EXP 26
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// if p3 = 0 then
9988: LD_VAR 0 3
9992: PUSH
9993: LD_INT 0
9995: EQUAL
9996: IFFALSE 10002
// InitStreamMode ;
9998: CALL 11134 0 0
// if p3 = 1 then
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 1
10009: EQUAL
10010: IFFALSE 10020
// sRocket := true ;
10012: LD_ADDR_EXP 31
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if p3 = 2 then
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: IFFALSE 10038
// sSpeed := true ;
10030: LD_ADDR_EXP 30
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if p3 = 3 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 3
10045: EQUAL
10046: IFFALSE 10056
// sEngine := true ;
10048: LD_ADDR_EXP 32
10052: PUSH
10053: LD_INT 1
10055: ST_TO_ADDR
// if p3 = 4 then
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 4
10063: EQUAL
10064: IFFALSE 10074
// sSpec := true ;
10066: LD_ADDR_EXP 29
10070: PUSH
10071: LD_INT 1
10073: ST_TO_ADDR
// if p3 = 5 then
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 5
10081: EQUAL
10082: IFFALSE 10092
// sLevel := true ;
10084: LD_ADDR_EXP 33
10088: PUSH
10089: LD_INT 1
10091: ST_TO_ADDR
// if p3 = 6 then
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 6
10099: EQUAL
10100: IFFALSE 10110
// sArmoury := true ;
10102: LD_ADDR_EXP 34
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// if p3 = 7 then
10110: LD_VAR 0 3
10114: PUSH
10115: LD_INT 7
10117: EQUAL
10118: IFFALSE 10128
// sRadar := true ;
10120: LD_ADDR_EXP 35
10124: PUSH
10125: LD_INT 1
10127: ST_TO_ADDR
// if p3 = 8 then
10128: LD_VAR 0 3
10132: PUSH
10133: LD_INT 8
10135: EQUAL
10136: IFFALSE 10146
// sBunker := true ;
10138: LD_ADDR_EXP 36
10142: PUSH
10143: LD_INT 1
10145: ST_TO_ADDR
// if p3 = 9 then
10146: LD_VAR 0 3
10150: PUSH
10151: LD_INT 9
10153: EQUAL
10154: IFFALSE 10164
// sHack := true ;
10156: LD_ADDR_EXP 37
10160: PUSH
10161: LD_INT 1
10163: ST_TO_ADDR
// if p3 = 10 then
10164: LD_VAR 0 3
10168: PUSH
10169: LD_INT 10
10171: EQUAL
10172: IFFALSE 10182
// sFire := true ;
10174: LD_ADDR_EXP 38
10178: PUSH
10179: LD_INT 1
10181: ST_TO_ADDR
// if p3 = 11 then
10182: LD_VAR 0 3
10186: PUSH
10187: LD_INT 11
10189: EQUAL
10190: IFFALSE 10200
// sRefresh := true ;
10192: LD_ADDR_EXP 39
10196: PUSH
10197: LD_INT 1
10199: ST_TO_ADDR
// if p3 = 12 then
10200: LD_VAR 0 3
10204: PUSH
10205: LD_INT 12
10207: EQUAL
10208: IFFALSE 10218
// sExp := true ;
10210: LD_ADDR_EXP 40
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// if p3 = 13 then
10218: LD_VAR 0 3
10222: PUSH
10223: LD_INT 13
10225: EQUAL
10226: IFFALSE 10236
// sDepot := true ;
10228: LD_ADDR_EXP 41
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// if p3 = 14 then
10236: LD_VAR 0 3
10240: PUSH
10241: LD_INT 14
10243: EQUAL
10244: IFFALSE 10254
// sFlag := true ;
10246: LD_ADDR_EXP 42
10250: PUSH
10251: LD_INT 1
10253: ST_TO_ADDR
// if p3 = 15 then
10254: LD_VAR 0 3
10258: PUSH
10259: LD_INT 15
10261: EQUAL
10262: IFFALSE 10272
// sKamikadze := true ;
10264: LD_ADDR_EXP 50
10268: PUSH
10269: LD_INT 1
10271: ST_TO_ADDR
// if p3 = 16 then
10272: LD_VAR 0 3
10276: PUSH
10277: LD_INT 16
10279: EQUAL
10280: IFFALSE 10290
// sTroll := true ;
10282: LD_ADDR_EXP 51
10286: PUSH
10287: LD_INT 1
10289: ST_TO_ADDR
// if p3 = 17 then
10290: LD_VAR 0 3
10294: PUSH
10295: LD_INT 17
10297: EQUAL
10298: IFFALSE 10308
// sSlow := true ;
10300: LD_ADDR_EXP 52
10304: PUSH
10305: LD_INT 1
10307: ST_TO_ADDR
// if p3 = 18 then
10308: LD_VAR 0 3
10312: PUSH
10313: LD_INT 18
10315: EQUAL
10316: IFFALSE 10326
// sLack := true ;
10318: LD_ADDR_EXP 53
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if p3 = 19 then
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 19
10333: EQUAL
10334: IFFALSE 10344
// sTank := true ;
10336: LD_ADDR_EXP 55
10340: PUSH
10341: LD_INT 1
10343: ST_TO_ADDR
// if p3 = 20 then
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 20
10351: EQUAL
10352: IFFALSE 10362
// sRemote := true ;
10354: LD_ADDR_EXP 56
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// if p3 = 21 then
10362: LD_VAR 0 3
10366: PUSH
10367: LD_INT 21
10369: EQUAL
10370: IFFALSE 10380
// sPowell := true ;
10372: LD_ADDR_EXP 57
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// if p3 = 22 then
10380: LD_VAR 0 3
10384: PUSH
10385: LD_INT 22
10387: EQUAL
10388: IFFALSE 10398
// sTeleport := true ;
10390: LD_ADDR_EXP 60
10394: PUSH
10395: LD_INT 1
10397: ST_TO_ADDR
// if p3 = 23 then
10398: LD_VAR 0 3
10402: PUSH
10403: LD_INT 23
10405: EQUAL
10406: IFFALSE 10416
// sOilTower := true ;
10408: LD_ADDR_EXP 62
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// if p3 = 24 then
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 24
10423: EQUAL
10424: IFFALSE 10434
// sShovel := true ;
10426: LD_ADDR_EXP 63
10430: PUSH
10431: LD_INT 1
10433: ST_TO_ADDR
// if p3 = 25 then
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 25
10441: EQUAL
10442: IFFALSE 10452
// sSheik := true ;
10444: LD_ADDR_EXP 64
10448: PUSH
10449: LD_INT 1
10451: ST_TO_ADDR
// if p3 = 26 then
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 26
10459: EQUAL
10460: IFFALSE 10470
// sEarthquake := true ;
10462: LD_ADDR_EXP 66
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// if p3 = 27 then
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 27
10477: EQUAL
10478: IFFALSE 10488
// sAI := true ;
10480: LD_ADDR_EXP 67
10484: PUSH
10485: LD_INT 1
10487: ST_TO_ADDR
// if p3 = 28 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_INT 28
10495: EQUAL
10496: IFFALSE 10506
// sCargo := true ;
10498: LD_ADDR_EXP 70
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if p3 = 29 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 29
10513: EQUAL
10514: IFFALSE 10524
// sDLaser := true ;
10516: LD_ADDR_EXP 71
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// if p3 = 30 then
10524: LD_VAR 0 3
10528: PUSH
10529: LD_INT 30
10531: EQUAL
10532: IFFALSE 10542
// sExchange := true ;
10534: LD_ADDR_EXP 72
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// if p3 = 31 then
10542: LD_VAR 0 3
10546: PUSH
10547: LD_INT 31
10549: EQUAL
10550: IFFALSE 10560
// sFac := true ;
10552: LD_ADDR_EXP 73
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
// if p3 = 32 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_INT 32
10567: EQUAL
10568: IFFALSE 10578
// sPower := true ;
10570: LD_ADDR_EXP 74
10574: PUSH
10575: LD_INT 1
10577: ST_TO_ADDR
// if p3 = 33 then
10578: LD_VAR 0 3
10582: PUSH
10583: LD_INT 33
10585: EQUAL
10586: IFFALSE 10596
// sRandom := true ;
10588: LD_ADDR_EXP 75
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// if p3 = 34 then
10596: LD_VAR 0 3
10600: PUSH
10601: LD_INT 34
10603: EQUAL
10604: IFFALSE 10614
// sShield := true ;
10606: LD_ADDR_EXP 76
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// if p3 = 35 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 35
10621: EQUAL
10622: IFFALSE 10632
// sTime := true ;
10624: LD_ADDR_EXP 77
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// if p3 = 36 then
10632: LD_VAR 0 3
10636: PUSH
10637: LD_INT 36
10639: EQUAL
10640: IFFALSE 10650
// sTools := true ;
10642: LD_ADDR_EXP 78
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// if p3 = 101 then
10650: LD_VAR 0 3
10654: PUSH
10655: LD_INT 101
10657: EQUAL
10658: IFFALSE 10668
// sSold := true ;
10660: LD_ADDR_EXP 43
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// if p3 = 102 then
10668: LD_VAR 0 3
10672: PUSH
10673: LD_INT 102
10675: EQUAL
10676: IFFALSE 10686
// sDiff := true ;
10678: LD_ADDR_EXP 44
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// if p3 = 103 then
10686: LD_VAR 0 3
10690: PUSH
10691: LD_INT 103
10693: EQUAL
10694: IFFALSE 10704
// sFog := true ;
10696: LD_ADDR_EXP 47
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// if p3 = 104 then
10704: LD_VAR 0 3
10708: PUSH
10709: LD_INT 104
10711: EQUAL
10712: IFFALSE 10722
// sReset := true ;
10714: LD_ADDR_EXP 48
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// if p3 = 105 then
10722: LD_VAR 0 3
10726: PUSH
10727: LD_INT 105
10729: EQUAL
10730: IFFALSE 10740
// sSun := true ;
10732: LD_ADDR_EXP 49
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// if p3 = 106 then
10740: LD_VAR 0 3
10744: PUSH
10745: LD_INT 106
10747: EQUAL
10748: IFFALSE 10758
// sTiger := true ;
10750: LD_ADDR_EXP 45
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// if p3 = 107 then
10758: LD_VAR 0 3
10762: PUSH
10763: LD_INT 107
10765: EQUAL
10766: IFFALSE 10776
// sBomb := true ;
10768: LD_ADDR_EXP 46
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// if p3 = 108 then
10776: LD_VAR 0 3
10780: PUSH
10781: LD_INT 108
10783: EQUAL
10784: IFFALSE 10794
// sWound := true ;
10786: LD_ADDR_EXP 54
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// if p3 = 109 then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_INT 109
10801: EQUAL
10802: IFFALSE 10812
// sBetray := true ;
10804: LD_ADDR_EXP 58
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// if p3 = 110 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_INT 110
10819: EQUAL
10820: IFFALSE 10830
// sContamin := true ;
10822: LD_ADDR_EXP 59
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// if p3 = 111 then
10830: LD_VAR 0 3
10834: PUSH
10835: LD_INT 111
10837: EQUAL
10838: IFFALSE 10848
// sOil := true ;
10840: LD_ADDR_EXP 61
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// if p3 = 112 then
10848: LD_VAR 0 3
10852: PUSH
10853: LD_INT 112
10855: EQUAL
10856: IFFALSE 10866
// sStu := true ;
10858: LD_ADDR_EXP 65
10862: PUSH
10863: LD_INT 1
10865: ST_TO_ADDR
// if p3 = 113 then
10866: LD_VAR 0 3
10870: PUSH
10871: LD_INT 113
10873: EQUAL
10874: IFFALSE 10884
// sBazooka := true ;
10876: LD_ADDR_EXP 68
10880: PUSH
10881: LD_INT 1
10883: ST_TO_ADDR
// if p3 = 114 then
10884: LD_VAR 0 3
10888: PUSH
10889: LD_INT 114
10891: EQUAL
10892: IFFALSE 10902
// sMortar := true ;
10894: LD_ADDR_EXP 69
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// if p3 = 115 then
10902: LD_VAR 0 3
10906: PUSH
10907: LD_INT 115
10909: EQUAL
10910: IFFALSE 10920
// sRanger := true ;
10912: LD_ADDR_EXP 79
10916: PUSH
10917: LD_INT 1
10919: ST_TO_ADDR
// if p3 = 116 then
10920: LD_VAR 0 3
10924: PUSH
10925: LD_INT 116
10927: EQUAL
10928: IFFALSE 10938
// sComputer := true ;
10930: LD_ADDR_EXP 80
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
// if p3 = 117 then
10938: LD_VAR 0 3
10942: PUSH
10943: LD_INT 117
10945: EQUAL
10946: IFFALSE 10956
// s30 := true ;
10948: LD_ADDR_EXP 81
10952: PUSH
10953: LD_INT 1
10955: ST_TO_ADDR
// if p3 = 118 then
10956: LD_VAR 0 3
10960: PUSH
10961: LD_INT 118
10963: EQUAL
10964: IFFALSE 10974
// s60 := true ;
10966: LD_ADDR_EXP 82
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// end ; if p2 = 101 then
10974: LD_VAR 0 2
10978: PUSH
10979: LD_INT 101
10981: EQUAL
10982: IFFALSE 11110
// begin case p3 of 1 :
10984: LD_VAR 0 3
10988: PUSH
10989: LD_INT 1
10991: DOUBLE
10992: EQUAL
10993: IFTRUE 10997
10995: GO 11004
10997: POP
// hHackUnlimitedResources ; 2 :
10998: CALL 22706 0 0
11002: GO 11110
11004: LD_INT 2
11006: DOUBLE
11007: EQUAL
11008: IFTRUE 11012
11010: GO 11019
11012: POP
// hHackSetLevel10 ; 3 :
11013: CALL 22839 0 0
11017: GO 11110
11019: LD_INT 3
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11034
11027: POP
// hHackSetLevel10YourUnits ; 4 :
11028: CALL 22924 0 0
11032: GO 11110
11034: LD_INT 4
11036: DOUBLE
11037: EQUAL
11038: IFTRUE 11042
11040: GO 11049
11042: POP
// hHackInvincible ; 5 :
11043: CALL 23372 0 0
11047: GO 11110
11049: LD_INT 5
11051: DOUBLE
11052: EQUAL
11053: IFTRUE 11057
11055: GO 11064
11057: POP
// hHackInvisible ; 6 :
11058: CALL 23483 0 0
11062: GO 11110
11064: LD_INT 6
11066: DOUBLE
11067: EQUAL
11068: IFTRUE 11072
11070: GO 11079
11072: POP
// hHackChangeYourSide ; 7 :
11073: CALL 23540 0 0
11077: GO 11110
11079: LD_INT 7
11081: DOUBLE
11082: EQUAL
11083: IFTRUE 11087
11085: GO 11094
11087: POP
// hHackChangeUnitSide ; 8 :
11088: CALL 23582 0 0
11092: GO 11110
11094: LD_INT 8
11096: DOUBLE
11097: EQUAL
11098: IFTRUE 11102
11100: GO 11109
11102: POP
// hHackFog ; end ;
11103: CALL 23683 0 0
11107: GO 11110
11109: POP
// end ; end ;
11110: LD_VAR 0 7
11114: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11115: GO 11117
11117: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11118: LD_STRING initStreamRollete();
11120: PPUSH
11121: CALL_OW 559
// InitStreamMode ;
11125: CALL 11134 0 0
// DefineStreamItems ( ) ;
11129: CALL 11598 0 0
// end ;
11133: END
// function InitStreamMode ; begin
11134: LD_INT 0
11136: PPUSH
// streamModeActive := false ;
11137: LD_ADDR_EXP 26
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// normalCounter := 36 ;
11145: LD_ADDR_EXP 27
11149: PUSH
11150: LD_INT 36
11152: ST_TO_ADDR
// hardcoreCounter := 16 ;
11153: LD_ADDR_EXP 28
11157: PUSH
11158: LD_INT 16
11160: ST_TO_ADDR
// sRocket := false ;
11161: LD_ADDR_EXP 31
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sSpeed := false ;
11169: LD_ADDR_EXP 30
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sEngine := false ;
11177: LD_ADDR_EXP 32
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sSpec := false ;
11185: LD_ADDR_EXP 29
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sLevel := false ;
11193: LD_ADDR_EXP 33
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sArmoury := false ;
11201: LD_ADDR_EXP 34
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sRadar := false ;
11209: LD_ADDR_EXP 35
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sBunker := false ;
11217: LD_ADDR_EXP 36
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sHack := false ;
11225: LD_ADDR_EXP 37
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sFire := false ;
11233: LD_ADDR_EXP 38
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sRefresh := false ;
11241: LD_ADDR_EXP 39
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sExp := false ;
11249: LD_ADDR_EXP 40
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sDepot := false ;
11257: LD_ADDR_EXP 41
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sFlag := false ;
11265: LD_ADDR_EXP 42
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sKamikadze := false ;
11273: LD_ADDR_EXP 50
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sTroll := false ;
11281: LD_ADDR_EXP 51
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sSlow := false ;
11289: LD_ADDR_EXP 52
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sLack := false ;
11297: LD_ADDR_EXP 53
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sTank := false ;
11305: LD_ADDR_EXP 55
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sRemote := false ;
11313: LD_ADDR_EXP 56
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sPowell := false ;
11321: LD_ADDR_EXP 57
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sTeleport := false ;
11329: LD_ADDR_EXP 60
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sOilTower := false ;
11337: LD_ADDR_EXP 62
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sShovel := false ;
11345: LD_ADDR_EXP 63
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sSheik := false ;
11353: LD_ADDR_EXP 64
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sEarthquake := false ;
11361: LD_ADDR_EXP 66
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sAI := false ;
11369: LD_ADDR_EXP 67
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sCargo := false ;
11377: LD_ADDR_EXP 70
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sDLaser := false ;
11385: LD_ADDR_EXP 71
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sExchange := false ;
11393: LD_ADDR_EXP 72
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sFac := false ;
11401: LD_ADDR_EXP 73
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sPower := false ;
11409: LD_ADDR_EXP 74
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sRandom := false ;
11417: LD_ADDR_EXP 75
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sShield := false ;
11425: LD_ADDR_EXP 76
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sTime := false ;
11433: LD_ADDR_EXP 77
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sTools := false ;
11441: LD_ADDR_EXP 78
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sSold := false ;
11449: LD_ADDR_EXP 43
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// sDiff := false ;
11457: LD_ADDR_EXP 44
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// sFog := false ;
11465: LD_ADDR_EXP 47
11469: PUSH
11470: LD_INT 0
11472: ST_TO_ADDR
// sReset := false ;
11473: LD_ADDR_EXP 48
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
// sSun := false ;
11481: LD_ADDR_EXP 49
11485: PUSH
11486: LD_INT 0
11488: ST_TO_ADDR
// sTiger := false ;
11489: LD_ADDR_EXP 45
11493: PUSH
11494: LD_INT 0
11496: ST_TO_ADDR
// sBomb := false ;
11497: LD_ADDR_EXP 46
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// sWound := false ;
11505: LD_ADDR_EXP 54
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// sBetray := false ;
11513: LD_ADDR_EXP 58
11517: PUSH
11518: LD_INT 0
11520: ST_TO_ADDR
// sContamin := false ;
11521: LD_ADDR_EXP 59
11525: PUSH
11526: LD_INT 0
11528: ST_TO_ADDR
// sOil := false ;
11529: LD_ADDR_EXP 61
11533: PUSH
11534: LD_INT 0
11536: ST_TO_ADDR
// sStu := false ;
11537: LD_ADDR_EXP 65
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// sBazooka := false ;
11545: LD_ADDR_EXP 68
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// sMortar := false ;
11553: LD_ADDR_EXP 69
11557: PUSH
11558: LD_INT 0
11560: ST_TO_ADDR
// sRanger := false ;
11561: LD_ADDR_EXP 79
11565: PUSH
11566: LD_INT 0
11568: ST_TO_ADDR
// sComputer := false ;
11569: LD_ADDR_EXP 80
11573: PUSH
11574: LD_INT 0
11576: ST_TO_ADDR
// s30 := false ;
11577: LD_ADDR_EXP 81
11581: PUSH
11582: LD_INT 0
11584: ST_TO_ADDR
// s60 := false ;
11585: LD_ADDR_EXP 82
11589: PUSH
11590: LD_INT 0
11592: ST_TO_ADDR
// end ;
11593: LD_VAR 0 1
11597: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11598: LD_INT 0
11600: PPUSH
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
// result := [ ] ;
11605: LD_ADDR_VAR 0 1
11609: PUSH
11610: EMPTY
11611: ST_TO_ADDR
// if campaign_id = 1 then
11612: LD_OWVAR 69
11616: PUSH
11617: LD_INT 1
11619: EQUAL
11620: IFFALSE 14786
// begin case mission_number of 1 :
11622: LD_OWVAR 70
11626: PUSH
11627: LD_INT 1
11629: DOUBLE
11630: EQUAL
11631: IFTRUE 11635
11633: GO 11711
11635: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: LD_INT 2
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: LD_INT 11
11649: PUSH
11650: LD_INT 12
11652: PUSH
11653: LD_INT 15
11655: PUSH
11656: LD_INT 16
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 23
11664: PUSH
11665: LD_INT 26
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 101
11681: PUSH
11682: LD_INT 102
11684: PUSH
11685: LD_INT 106
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: ST_TO_ADDR
11709: GO 14784
11711: LD_INT 2
11713: DOUBLE
11714: EQUAL
11715: IFTRUE 11719
11717: GO 11803
11719: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11720: LD_ADDR_VAR 0 1
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 4
11730: PUSH
11731: LD_INT 11
11733: PUSH
11734: LD_INT 12
11736: PUSH
11737: LD_INT 15
11739: PUSH
11740: LD_INT 16
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 23
11748: PUSH
11749: LD_INT 26
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 101
11765: PUSH
11766: LD_INT 102
11768: PUSH
11769: LD_INT 105
11771: PUSH
11772: LD_INT 106
11774: PUSH
11775: LD_INT 108
11777: PUSH
11778: LD_INT 116
11780: PUSH
11781: LD_INT 117
11783: PUSH
11784: LD_INT 118
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
11801: GO 14784
11803: LD_INT 3
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 11899
11811: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 4
11822: PUSH
11823: LD_INT 5
11825: PUSH
11826: LD_INT 11
11828: PUSH
11829: LD_INT 12
11831: PUSH
11832: LD_INT 15
11834: PUSH
11835: LD_INT 16
11837: PUSH
11838: LD_INT 22
11840: PUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 36
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 101
11861: PUSH
11862: LD_INT 102
11864: PUSH
11865: LD_INT 105
11867: PUSH
11868: LD_INT 106
11870: PUSH
11871: LD_INT 108
11873: PUSH
11874: LD_INT 116
11876: PUSH
11877: LD_INT 117
11879: PUSH
11880: LD_INT 118
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: ST_TO_ADDR
11897: GO 14784
11899: LD_INT 4
11901: DOUBLE
11902: EQUAL
11903: IFTRUE 11907
11905: GO 12003
11907: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11908: LD_ADDR_VAR 0 1
11912: PUSH
11913: LD_INT 2
11915: PUSH
11916: LD_INT 4
11918: PUSH
11919: LD_INT 5
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: LD_INT 11
11927: PUSH
11928: LD_INT 12
11930: PUSH
11931: LD_INT 15
11933: PUSH
11934: LD_INT 16
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 23
11942: PUSH
11943: LD_INT 26
11945: PUSH
11946: LD_INT 36
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 101
11965: PUSH
11966: LD_INT 102
11968: PUSH
11969: LD_INT 105
11971: PUSH
11972: LD_INT 106
11974: PUSH
11975: LD_INT 108
11977: PUSH
11978: LD_INT 116
11980: PUSH
11981: LD_INT 117
11983: PUSH
11984: LD_INT 118
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: ST_TO_ADDR
12001: GO 14784
12003: LD_INT 5
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12123
12011: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_INT 2
12019: PUSH
12020: LD_INT 4
12022: PUSH
12023: LD_INT 5
12025: PUSH
12026: LD_INT 6
12028: PUSH
12029: LD_INT 8
12031: PUSH
12032: LD_INT 11
12034: PUSH
12035: LD_INT 12
12037: PUSH
12038: LD_INT 15
12040: PUSH
12041: LD_INT 16
12043: PUSH
12044: LD_INT 22
12046: PUSH
12047: LD_INT 23
12049: PUSH
12050: LD_INT 25
12052: PUSH
12053: LD_INT 26
12055: PUSH
12056: LD_INT 36
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 101
12077: PUSH
12078: LD_INT 102
12080: PUSH
12081: LD_INT 105
12083: PUSH
12084: LD_INT 106
12086: PUSH
12087: LD_INT 108
12089: PUSH
12090: LD_INT 109
12092: PUSH
12093: LD_INT 112
12095: PUSH
12096: LD_INT 116
12098: PUSH
12099: LD_INT 117
12101: PUSH
12102: LD_INT 118
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: ST_TO_ADDR
12121: GO 14784
12123: LD_INT 6
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12263
12131: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 4
12142: PUSH
12143: LD_INT 5
12145: PUSH
12146: LD_INT 6
12148: PUSH
12149: LD_INT 8
12151: PUSH
12152: LD_INT 11
12154: PUSH
12155: LD_INT 12
12157: PUSH
12158: LD_INT 15
12160: PUSH
12161: LD_INT 16
12163: PUSH
12164: LD_INT 20
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 23
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 26
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 31
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: LD_INT 36
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 101
12217: PUSH
12218: LD_INT 102
12220: PUSH
12221: LD_INT 105
12223: PUSH
12224: LD_INT 106
12226: PUSH
12227: LD_INT 108
12229: PUSH
12230: LD_INT 109
12232: PUSH
12233: LD_INT 112
12235: PUSH
12236: LD_INT 116
12238: PUSH
12239: LD_INT 117
12241: PUSH
12242: LD_INT 118
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: ST_TO_ADDR
12261: GO 14784
12263: LD_INT 7
12265: DOUBLE
12266: EQUAL
12267: IFTRUE 12271
12269: GO 12383
12271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12272: LD_ADDR_VAR 0 1
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 4
12282: PUSH
12283: LD_INT 5
12285: PUSH
12286: LD_INT 7
12288: PUSH
12289: LD_INT 11
12291: PUSH
12292: LD_INT 12
12294: PUSH
12295: LD_INT 15
12297: PUSH
12298: LD_INT 16
12300: PUSH
12301: LD_INT 20
12303: PUSH
12304: LD_INT 21
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: LD_INT 23
12312: PUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 26
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 101
12337: PUSH
12338: LD_INT 102
12340: PUSH
12341: LD_INT 103
12343: PUSH
12344: LD_INT 105
12346: PUSH
12347: LD_INT 106
12349: PUSH
12350: LD_INT 108
12352: PUSH
12353: LD_INT 112
12355: PUSH
12356: LD_INT 116
12358: PUSH
12359: LD_INT 117
12361: PUSH
12362: LD_INT 118
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: ST_TO_ADDR
12381: GO 14784
12383: LD_INT 8
12385: DOUBLE
12386: EQUAL
12387: IFTRUE 12391
12389: GO 12531
12391: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12392: LD_ADDR_VAR 0 1
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: LD_INT 6
12408: PUSH
12409: LD_INT 7
12411: PUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 11
12417: PUSH
12418: LD_INT 12
12420: PUSH
12421: LD_INT 15
12423: PUSH
12424: LD_INT 16
12426: PUSH
12427: LD_INT 20
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: LD_INT 23
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 26
12444: PUSH
12445: LD_INT 30
12447: PUSH
12448: LD_INT 31
12450: PUSH
12451: LD_INT 32
12453: PUSH
12454: LD_INT 36
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 101
12481: PUSH
12482: LD_INT 102
12484: PUSH
12485: LD_INT 103
12487: PUSH
12488: LD_INT 105
12490: PUSH
12491: LD_INT 106
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 112
12502: PUSH
12503: LD_INT 116
12505: PUSH
12506: LD_INT 117
12508: PUSH
12509: LD_INT 118
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: ST_TO_ADDR
12529: GO 14784
12531: LD_INT 9
12533: DOUBLE
12534: EQUAL
12535: IFTRUE 12539
12537: GO 12687
12539: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12540: LD_ADDR_VAR 0 1
12544: PUSH
12545: LD_INT 2
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: LD_INT 5
12553: PUSH
12554: LD_INT 6
12556: PUSH
12557: LD_INT 7
12559: PUSH
12560: LD_INT 8
12562: PUSH
12563: LD_INT 11
12565: PUSH
12566: LD_INT 12
12568: PUSH
12569: LD_INT 15
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 26
12592: PUSH
12593: LD_INT 28
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 31
12601: PUSH
12602: LD_INT 32
12604: PUSH
12605: LD_INT 36
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 101
12633: PUSH
12634: LD_INT 102
12636: PUSH
12637: LD_INT 103
12639: PUSH
12640: LD_INT 105
12642: PUSH
12643: LD_INT 106
12645: PUSH
12646: LD_INT 108
12648: PUSH
12649: LD_INT 109
12651: PUSH
12652: LD_INT 112
12654: PUSH
12655: LD_INT 114
12657: PUSH
12658: LD_INT 116
12660: PUSH
12661: LD_INT 117
12663: PUSH
12664: LD_INT 118
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: ST_TO_ADDR
12685: GO 14784
12687: LD_INT 10
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12891
12695: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12696: LD_ADDR_VAR 0 1
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 28
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 31
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 36
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 101
12821: PUSH
12822: LD_INT 102
12824: PUSH
12825: LD_INT 103
12827: PUSH
12828: LD_INT 104
12830: PUSH
12831: LD_INT 105
12833: PUSH
12834: LD_INT 106
12836: PUSH
12837: LD_INT 107
12839: PUSH
12840: LD_INT 108
12842: PUSH
12843: LD_INT 109
12845: PUSH
12846: LD_INT 110
12848: PUSH
12849: LD_INT 111
12851: PUSH
12852: LD_INT 112
12854: PUSH
12855: LD_INT 114
12857: PUSH
12858: LD_INT 116
12860: PUSH
12861: LD_INT 117
12863: PUSH
12864: LD_INT 118
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: ST_TO_ADDR
12889: GO 14784
12891: LD_INT 11
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 13103
12899: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 3
12910: PUSH
12911: LD_INT 4
12913: PUSH
12914: LD_INT 5
12916: PUSH
12917: LD_INT 6
12919: PUSH
12920: LD_INT 7
12922: PUSH
12923: LD_INT 8
12925: PUSH
12926: LD_INT 9
12928: PUSH
12929: LD_INT 10
12931: PUSH
12932: LD_INT 11
12934: PUSH
12935: LD_INT 12
12937: PUSH
12938: LD_INT 13
12940: PUSH
12941: LD_INT 14
12943: PUSH
12944: LD_INT 15
12946: PUSH
12947: LD_INT 16
12949: PUSH
12950: LD_INT 17
12952: PUSH
12953: LD_INT 18
12955: PUSH
12956: LD_INT 19
12958: PUSH
12959: LD_INT 20
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 24
12973: PUSH
12974: LD_INT 25
12976: PUSH
12977: LD_INT 26
12979: PUSH
12980: LD_INT 28
12982: PUSH
12983: LD_INT 30
12985: PUSH
12986: LD_INT 31
12988: PUSH
12989: LD_INT 32
12991: PUSH
12992: LD_INT 34
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 101
13033: PUSH
13034: LD_INT 102
13036: PUSH
13037: LD_INT 103
13039: PUSH
13040: LD_INT 104
13042: PUSH
13043: LD_INT 105
13045: PUSH
13046: LD_INT 106
13048: PUSH
13049: LD_INT 107
13051: PUSH
13052: LD_INT 108
13054: PUSH
13055: LD_INT 109
13057: PUSH
13058: LD_INT 110
13060: PUSH
13061: LD_INT 111
13063: PUSH
13064: LD_INT 112
13066: PUSH
13067: LD_INT 114
13069: PUSH
13070: LD_INT 116
13072: PUSH
13073: LD_INT 117
13075: PUSH
13076: LD_INT 118
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: ST_TO_ADDR
13101: GO 14784
13103: LD_INT 12
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13331
13111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: LD_INT 1
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 3
13125: PUSH
13126: LD_INT 4
13128: PUSH
13129: LD_INT 5
13131: PUSH
13132: LD_INT 6
13134: PUSH
13135: LD_INT 7
13137: PUSH
13138: LD_INT 8
13140: PUSH
13141: LD_INT 9
13143: PUSH
13144: LD_INT 10
13146: PUSH
13147: LD_INT 11
13149: PUSH
13150: LD_INT 12
13152: PUSH
13153: LD_INT 13
13155: PUSH
13156: LD_INT 14
13158: PUSH
13159: LD_INT 15
13161: PUSH
13162: LD_INT 16
13164: PUSH
13165: LD_INT 17
13167: PUSH
13168: LD_INT 18
13170: PUSH
13171: LD_INT 19
13173: PUSH
13174: LD_INT 20
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_INT 23
13185: PUSH
13186: LD_INT 24
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 27
13197: PUSH
13198: LD_INT 28
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: LD_INT 31
13206: PUSH
13207: LD_INT 32
13209: PUSH
13210: LD_INT 33
13212: PUSH
13213: LD_INT 34
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 101
13257: PUSH
13258: LD_INT 102
13260: PUSH
13261: LD_INT 103
13263: PUSH
13264: LD_INT 104
13266: PUSH
13267: LD_INT 105
13269: PUSH
13270: LD_INT 106
13272: PUSH
13273: LD_INT 107
13275: PUSH
13276: LD_INT 108
13278: PUSH
13279: LD_INT 109
13281: PUSH
13282: LD_INT 110
13284: PUSH
13285: LD_INT 111
13287: PUSH
13288: LD_INT 112
13290: PUSH
13291: LD_INT 113
13293: PUSH
13294: LD_INT 114
13296: PUSH
13297: LD_INT 116
13299: PUSH
13300: LD_INT 117
13302: PUSH
13303: LD_INT 118
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: ST_TO_ADDR
13329: GO 14784
13331: LD_INT 13
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13547
13339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_INT 1
13347: PUSH
13348: LD_INT 2
13350: PUSH
13351: LD_INT 3
13353: PUSH
13354: LD_INT 4
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: LD_INT 8
13362: PUSH
13363: LD_INT 9
13365: PUSH
13366: LD_INT 10
13368: PUSH
13369: LD_INT 11
13371: PUSH
13372: LD_INT 12
13374: PUSH
13375: LD_INT 14
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 17
13386: PUSH
13387: LD_INT 18
13389: PUSH
13390: LD_INT 19
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 24
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 26
13413: PUSH
13414: LD_INT 27
13416: PUSH
13417: LD_INT 28
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 31
13425: PUSH
13426: LD_INT 32
13428: PUSH
13429: LD_INT 33
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 36
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 101
13473: PUSH
13474: LD_INT 102
13476: PUSH
13477: LD_INT 103
13479: PUSH
13480: LD_INT 104
13482: PUSH
13483: LD_INT 105
13485: PUSH
13486: LD_INT 106
13488: PUSH
13489: LD_INT 107
13491: PUSH
13492: LD_INT 108
13494: PUSH
13495: LD_INT 109
13497: PUSH
13498: LD_INT 110
13500: PUSH
13501: LD_INT 111
13503: PUSH
13504: LD_INT 112
13506: PUSH
13507: LD_INT 113
13509: PUSH
13510: LD_INT 114
13512: PUSH
13513: LD_INT 116
13515: PUSH
13516: LD_INT 117
13518: PUSH
13519: LD_INT 118
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: ST_TO_ADDR
13545: GO 14784
13547: LD_INT 14
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13779
13555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13556: LD_ADDR_VAR 0 1
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: LD_INT 2
13566: PUSH
13567: LD_INT 3
13569: PUSH
13570: LD_INT 4
13572: PUSH
13573: LD_INT 5
13575: PUSH
13576: LD_INT 6
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 9
13587: PUSH
13588: LD_INT 10
13590: PUSH
13591: LD_INT 11
13593: PUSH
13594: LD_INT 12
13596: PUSH
13597: LD_INT 13
13599: PUSH
13600: LD_INT 14
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: LD_INT 16
13608: PUSH
13609: LD_INT 17
13611: PUSH
13612: LD_INT 18
13614: PUSH
13615: LD_INT 19
13617: PUSH
13618: LD_INT 20
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 23
13629: PUSH
13630: LD_INT 24
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 27
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 29
13647: PUSH
13648: LD_INT 30
13650: PUSH
13651: LD_INT 31
13653: PUSH
13654: LD_INT 32
13656: PUSH
13657: LD_INT 33
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 36
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 101
13705: PUSH
13706: LD_INT 102
13708: PUSH
13709: LD_INT 103
13711: PUSH
13712: LD_INT 104
13714: PUSH
13715: LD_INT 105
13717: PUSH
13718: LD_INT 106
13720: PUSH
13721: LD_INT 107
13723: PUSH
13724: LD_INT 108
13726: PUSH
13727: LD_INT 109
13729: PUSH
13730: LD_INT 110
13732: PUSH
13733: LD_INT 111
13735: PUSH
13736: LD_INT 112
13738: PUSH
13739: LD_INT 113
13741: PUSH
13742: LD_INT 114
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 14784
13779: LD_INT 15
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 14011
13787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13788: LD_ADDR_VAR 0 1
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 7
13813: PUSH
13814: LD_INT 8
13816: PUSH
13817: LD_INT 9
13819: PUSH
13820: LD_INT 10
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 13
13831: PUSH
13832: LD_INT 14
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 17
13843: PUSH
13844: LD_INT 18
13846: PUSH
13847: LD_INT 19
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 26
13870: PUSH
13871: LD_INT 27
13873: PUSH
13874: LD_INT 28
13876: PUSH
13877: LD_INT 29
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 31
13885: PUSH
13886: LD_INT 32
13888: PUSH
13889: LD_INT 33
13891: PUSH
13892: LD_INT 34
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 101
13937: PUSH
13938: LD_INT 102
13940: PUSH
13941: LD_INT 103
13943: PUSH
13944: LD_INT 104
13946: PUSH
13947: LD_INT 105
13949: PUSH
13950: LD_INT 106
13952: PUSH
13953: LD_INT 107
13955: PUSH
13956: LD_INT 108
13958: PUSH
13959: LD_INT 109
13961: PUSH
13962: LD_INT 110
13964: PUSH
13965: LD_INT 111
13967: PUSH
13968: LD_INT 112
13970: PUSH
13971: LD_INT 113
13973: PUSH
13974: LD_INT 114
13976: PUSH
13977: LD_INT 116
13979: PUSH
13980: LD_INT 117
13982: PUSH
13983: LD_INT 118
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: ST_TO_ADDR
14009: GO 14784
14011: LD_INT 16
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14155
14019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14020: LD_ADDR_VAR 0 1
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 4
14030: PUSH
14031: LD_INT 5
14033: PUSH
14034: LD_INT 7
14036: PUSH
14037: LD_INT 11
14039: PUSH
14040: LD_INT 12
14042: PUSH
14043: LD_INT 15
14045: PUSH
14046: LD_INT 16
14048: PUSH
14049: LD_INT 20
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 23
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 26
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 31
14072: PUSH
14073: LD_INT 32
14075: PUSH
14076: LD_INT 33
14078: PUSH
14079: LD_INT 34
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 101
14105: PUSH
14106: LD_INT 102
14108: PUSH
14109: LD_INT 103
14111: PUSH
14112: LD_INT 106
14114: PUSH
14115: LD_INT 108
14117: PUSH
14118: LD_INT 112
14120: PUSH
14121: LD_INT 113
14123: PUSH
14124: LD_INT 114
14126: PUSH
14127: LD_INT 116
14129: PUSH
14130: LD_INT 117
14132: PUSH
14133: LD_INT 118
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: ST_TO_ADDR
14153: GO 14784
14155: LD_INT 17
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14387
14163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14164: LD_ADDR_VAR 0 1
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: LD_INT 2
14174: PUSH
14175: LD_INT 3
14177: PUSH
14178: LD_INT 4
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: LD_INT 6
14186: PUSH
14187: LD_INT 7
14189: PUSH
14190: LD_INT 8
14192: PUSH
14193: LD_INT 9
14195: PUSH
14196: LD_INT 10
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 13
14207: PUSH
14208: LD_INT 14
14210: PUSH
14211: LD_INT 15
14213: PUSH
14214: LD_INT 16
14216: PUSH
14217: LD_INT 17
14219: PUSH
14220: LD_INT 18
14222: PUSH
14223: LD_INT 19
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 24
14240: PUSH
14241: LD_INT 25
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: LD_INT 27
14249: PUSH
14250: LD_INT 28
14252: PUSH
14253: LD_INT 29
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 36
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 101
14313: PUSH
14314: LD_INT 102
14316: PUSH
14317: LD_INT 103
14319: PUSH
14320: LD_INT 104
14322: PUSH
14323: LD_INT 105
14325: PUSH
14326: LD_INT 106
14328: PUSH
14329: LD_INT 107
14331: PUSH
14332: LD_INT 108
14334: PUSH
14335: LD_INT 109
14337: PUSH
14338: LD_INT 110
14340: PUSH
14341: LD_INT 111
14343: PUSH
14344: LD_INT 112
14346: PUSH
14347: LD_INT 113
14349: PUSH
14350: LD_INT 114
14352: PUSH
14353: LD_INT 116
14355: PUSH
14356: LD_INT 117
14358: PUSH
14359: LD_INT 118
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14784
14387: LD_INT 18
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14543
14395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14396: LD_ADDR_VAR 0 1
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 5
14409: PUSH
14410: LD_INT 7
14412: PUSH
14413: LD_INT 11
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 15
14421: PUSH
14422: LD_INT 16
14424: PUSH
14425: LD_INT 20
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 25
14439: PUSH
14440: LD_INT 26
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 35
14460: PUSH
14461: LD_INT 36
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 101
14489: PUSH
14490: LD_INT 102
14492: PUSH
14493: LD_INT 103
14495: PUSH
14496: LD_INT 106
14498: PUSH
14499: LD_INT 108
14501: PUSH
14502: LD_INT 112
14504: PUSH
14505: LD_INT 113
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 115
14513: PUSH
14514: LD_INT 116
14516: PUSH
14517: LD_INT 117
14519: PUSH
14520: LD_INT 118
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: ST_TO_ADDR
14541: GO 14784
14543: LD_INT 19
14545: DOUBLE
14546: EQUAL
14547: IFTRUE 14551
14549: GO 14783
14551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14552: LD_ADDR_VAR 0 1
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: LD_INT 3
14565: PUSH
14566: LD_INT 4
14568: PUSH
14569: LD_INT 5
14571: PUSH
14572: LD_INT 6
14574: PUSH
14575: LD_INT 7
14577: PUSH
14578: LD_INT 8
14580: PUSH
14581: LD_INT 9
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: LD_INT 11
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: LD_INT 13
14595: PUSH
14596: LD_INT 14
14598: PUSH
14599: LD_INT 15
14601: PUSH
14602: LD_INT 16
14604: PUSH
14605: LD_INT 17
14607: PUSH
14608: LD_INT 18
14610: PUSH
14611: LD_INT 19
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_INT 23
14625: PUSH
14626: LD_INT 24
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 26
14634: PUSH
14635: LD_INT 27
14637: PUSH
14638: LD_INT 28
14640: PUSH
14641: LD_INT 29
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: LD_INT 32
14652: PUSH
14653: LD_INT 33
14655: PUSH
14656: LD_INT 34
14658: PUSH
14659: LD_INT 35
14661: PUSH
14662: LD_INT 36
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 101
14705: PUSH
14706: LD_INT 102
14708: PUSH
14709: LD_INT 103
14711: PUSH
14712: LD_INT 104
14714: PUSH
14715: LD_INT 105
14717: PUSH
14718: LD_INT 106
14720: PUSH
14721: LD_INT 107
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 109
14729: PUSH
14730: LD_INT 110
14732: PUSH
14733: LD_INT 111
14735: PUSH
14736: LD_INT 112
14738: PUSH
14739: LD_INT 113
14741: PUSH
14742: LD_INT 114
14744: PUSH
14745: LD_INT 115
14747: PUSH
14748: LD_INT 116
14750: PUSH
14751: LD_INT 117
14753: PUSH
14754: LD_INT 118
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: ST_TO_ADDR
14781: GO 14784
14783: POP
// end else
14784: GO 15015
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14786: LD_ADDR_VAR 0 1
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 6
14808: PUSH
14809: LD_INT 7
14811: PUSH
14812: LD_INT 8
14814: PUSH
14815: LD_INT 9
14817: PUSH
14818: LD_INT 10
14820: PUSH
14821: LD_INT 11
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: LD_INT 13
14829: PUSH
14830: LD_INT 14
14832: PUSH
14833: LD_INT 15
14835: PUSH
14836: LD_INT 16
14838: PUSH
14839: LD_INT 17
14841: PUSH
14842: LD_INT 18
14844: PUSH
14845: LD_INT 19
14847: PUSH
14848: LD_INT 20
14850: PUSH
14851: LD_INT 21
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_INT 23
14859: PUSH
14860: LD_INT 24
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 26
14868: PUSH
14869: LD_INT 27
14871: PUSH
14872: LD_INT 28
14874: PUSH
14875: LD_INT 29
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 35
14895: PUSH
14896: LD_INT 36
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 101
14939: PUSH
14940: LD_INT 102
14942: PUSH
14943: LD_INT 103
14945: PUSH
14946: LD_INT 104
14948: PUSH
14949: LD_INT 105
14951: PUSH
14952: LD_INT 106
14954: PUSH
14955: LD_INT 107
14957: PUSH
14958: LD_INT 108
14960: PUSH
14961: LD_INT 109
14963: PUSH
14964: LD_INT 110
14966: PUSH
14967: LD_INT 111
14969: PUSH
14970: LD_INT 112
14972: PUSH
14973: LD_INT 113
14975: PUSH
14976: LD_INT 114
14978: PUSH
14979: LD_INT 115
14981: PUSH
14982: LD_INT 116
14984: PUSH
14985: LD_INT 117
14987: PUSH
14988: LD_INT 118
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: ST_TO_ADDR
// if result then
15015: LD_VAR 0 1
15019: IFFALSE 15308
// begin normal :=  ;
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_STRING 
15028: ST_TO_ADDR
// hardcore :=  ;
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: LD_STRING 
15036: ST_TO_ADDR
// for i = 1 to normalCounter do
15037: LD_ADDR_VAR 0 5
15041: PUSH
15042: DOUBLE
15043: LD_INT 1
15045: DEC
15046: ST_TO_ADDR
15047: LD_EXP 27
15051: PUSH
15052: FOR_TO
15053: IFFALSE 15154
// begin tmp := 0 ;
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: LD_STRING 0
15062: ST_TO_ADDR
// if result [ 1 ] then
15063: LD_VAR 0 1
15067: PUSH
15068: LD_INT 1
15070: ARRAY
15071: IFFALSE 15136
// if result [ 1 ] [ 1 ] = i then
15073: LD_VAR 0 1
15077: PUSH
15078: LD_INT 1
15080: ARRAY
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PUSH
15086: LD_VAR 0 5
15090: EQUAL
15091: IFFALSE 15136
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15093: LD_ADDR_VAR 0 1
15097: PUSH
15098: LD_VAR 0 1
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 1
15113: ARRAY
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 3
15122: PPUSH
15123: CALL_OW 1
15127: ST_TO_ADDR
// tmp := 1 ;
15128: LD_ADDR_VAR 0 2
15132: PUSH
15133: LD_STRING 1
15135: ST_TO_ADDR
// end ; normal := normal & tmp ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_VAR 0 3
15145: PUSH
15146: LD_VAR 0 2
15150: STR
15151: ST_TO_ADDR
// end ;
15152: GO 15052
15154: POP
15155: POP
// for i = 1 to hardcoreCounter do
15156: LD_ADDR_VAR 0 5
15160: PUSH
15161: DOUBLE
15162: LD_INT 1
15164: DEC
15165: ST_TO_ADDR
15166: LD_EXP 28
15170: PUSH
15171: FOR_TO
15172: IFFALSE 15277
// begin tmp := 0 ;
15174: LD_ADDR_VAR 0 2
15178: PUSH
15179: LD_STRING 0
15181: ST_TO_ADDR
// if result [ 2 ] then
15182: LD_VAR 0 1
15186: PUSH
15187: LD_INT 2
15189: ARRAY
15190: IFFALSE 15259
// if result [ 2 ] [ 1 ] = 100 + i then
15192: LD_VAR 0 1
15196: PUSH
15197: LD_INT 2
15199: ARRAY
15200: PUSH
15201: LD_INT 1
15203: ARRAY
15204: PUSH
15205: LD_INT 100
15207: PUSH
15208: LD_VAR 0 5
15212: PLUS
15213: EQUAL
15214: IFFALSE 15259
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15216: LD_ADDR_VAR 0 1
15220: PUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_INT 2
15228: PPUSH
15229: LD_VAR 0 1
15233: PUSH
15234: LD_INT 2
15236: ARRAY
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: CALL_OW 3
15245: PPUSH
15246: CALL_OW 1
15250: ST_TO_ADDR
// tmp := 1 ;
15251: LD_ADDR_VAR 0 2
15255: PUSH
15256: LD_STRING 1
15258: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15259: LD_ADDR_VAR 0 4
15263: PUSH
15264: LD_VAR 0 4
15268: PUSH
15269: LD_VAR 0 2
15273: STR
15274: ST_TO_ADDR
// end ;
15275: GO 15171
15277: POP
15278: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15279: LD_STRING getStreamItemsFromMission("
15281: PUSH
15282: LD_VAR 0 3
15286: STR
15287: PUSH
15288: LD_STRING ","
15290: STR
15291: PUSH
15292: LD_VAR 0 4
15296: STR
15297: PUSH
15298: LD_STRING ")
15300: STR
15301: PPUSH
15302: CALL_OW 559
// end else
15306: GO 15315
// ToLua ( getStreamItemsFromMission("","") ) ;
15308: LD_STRING getStreamItemsFromMission("","")
15310: PPUSH
15311: CALL_OW 559
// end ;
15315: LD_VAR 0 1
15319: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15320: LD_EXP 26
15324: PUSH
15325: LD_EXP 31
15329: AND
15330: IFFALSE 15454
15332: GO 15334
15334: DISABLE
15335: LD_INT 0
15337: PPUSH
15338: PPUSH
// begin enable ;
15339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15340: LD_ADDR_VAR 0 2
15344: PUSH
15345: LD_INT 22
15347: PUSH
15348: LD_OWVAR 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 34
15362: PUSH
15363: LD_INT 7
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 34
15372: PUSH
15373: LD_INT 45
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 34
15382: PUSH
15383: LD_INT 28
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 34
15392: PUSH
15393: LD_INT 47
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL_OW 69
15415: ST_TO_ADDR
// if not tmp then
15416: LD_VAR 0 2
15420: NOT
15421: IFFALSE 15425
// exit ;
15423: GO 15454
// for i in tmp do
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: LD_VAR 0 2
15434: PUSH
15435: FOR_IN
15436: IFFALSE 15452
// begin SetLives ( i , 0 ) ;
15438: LD_VAR 0 1
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL_OW 234
// end ;
15450: GO 15435
15452: POP
15453: POP
// end ;
15454: PPOPN 2
15456: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15457: LD_EXP 26
15461: PUSH
15462: LD_EXP 32
15466: AND
15467: IFFALSE 15551
15469: GO 15471
15471: DISABLE
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
// begin enable ;
15476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_OWVAR 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 32
15496: PUSH
15497: LD_INT 3
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: ST_TO_ADDR
// if not tmp then
15513: LD_VAR 0 2
15517: NOT
15518: IFFALSE 15522
// exit ;
15520: GO 15551
// for i in tmp do
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_VAR 0 2
15531: PUSH
15532: FOR_IN
15533: IFFALSE 15549
// begin SetLives ( i , 0 ) ;
15535: LD_VAR 0 1
15539: PPUSH
15540: LD_INT 0
15542: PPUSH
15543: CALL_OW 234
// end ;
15547: GO 15532
15549: POP
15550: POP
// end ;
15551: PPOPN 2
15553: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15554: LD_EXP 26
15558: PUSH
15559: LD_EXP 29
15563: AND
15564: IFFALSE 15657
15566: GO 15568
15568: DISABLE
15569: LD_INT 0
15571: PPUSH
// begin enable ;
15572: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15573: LD_ADDR_VAR 0 1
15577: PUSH
15578: LD_INT 22
15580: PUSH
15581: LD_OWVAR 2
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 5
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 25
15605: PUSH
15606: LD_INT 9
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 25
15615: PUSH
15616: LD_INT 8
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15655
// begin SetClass ( i , 1 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 336
// end ;
15653: GO 15638
15655: POP
15656: POP
// end ;
15657: PPOPN 1
15659: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15660: LD_EXP 26
15664: PUSH
15665: LD_EXP 30
15669: AND
15670: PUSH
15671: LD_OWVAR 65
15675: PUSH
15676: LD_INT 7
15678: LESS
15679: AND
15680: IFFALSE 15694
15682: GO 15684
15684: DISABLE
// begin enable ;
15685: ENABLE
// game_speed := 7 ;
15686: LD_ADDR_OWVAR 65
15690: PUSH
15691: LD_INT 7
15693: ST_TO_ADDR
// end ;
15694: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15695: LD_EXP 26
15699: PUSH
15700: LD_EXP 33
15704: AND
15705: IFFALSE 15907
15707: GO 15709
15709: DISABLE
15710: LD_INT 0
15712: PPUSH
15713: PPUSH
15714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15715: LD_ADDR_VAR 0 3
15719: PUSH
15720: LD_INT 81
15722: PUSH
15723: LD_OWVAR 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 21
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PPUSH
15746: CALL_OW 69
15750: ST_TO_ADDR
// if not tmp then
15751: LD_VAR 0 3
15755: NOT
15756: IFFALSE 15760
// exit ;
15758: GO 15907
// if tmp > 5 then
15760: LD_VAR 0 3
15764: PUSH
15765: LD_INT 5
15767: GREATER
15768: IFFALSE 15780
// k := 5 else
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: LD_INT 5
15777: ST_TO_ADDR
15778: GO 15790
// k := tmp ;
15780: LD_ADDR_VAR 0 2
15784: PUSH
15785: LD_VAR 0 3
15789: ST_TO_ADDR
// for i := 1 to k do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: DOUBLE
15796: LD_INT 1
15798: DEC
15799: ST_TO_ADDR
15800: LD_VAR 0 2
15804: PUSH
15805: FOR_TO
15806: IFFALSE 15905
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15808: LD_VAR 0 3
15812: PUSH
15813: LD_VAR 0 1
15817: ARRAY
15818: PPUSH
15819: LD_VAR 0 1
15823: PUSH
15824: LD_INT 4
15826: MOD
15827: PUSH
15828: LD_INT 1
15830: PLUS
15831: PPUSH
15832: CALL_OW 259
15836: PUSH
15837: LD_INT 10
15839: LESS
15840: IFFALSE 15903
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15842: LD_VAR 0 3
15846: PUSH
15847: LD_VAR 0 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 1
15857: PUSH
15858: LD_INT 4
15860: MOD
15861: PUSH
15862: LD_INT 1
15864: PLUS
15865: PPUSH
15866: LD_VAR 0 3
15870: PUSH
15871: LD_VAR 0 1
15875: ARRAY
15876: PPUSH
15877: LD_VAR 0 1
15881: PUSH
15882: LD_INT 4
15884: MOD
15885: PUSH
15886: LD_INT 1
15888: PLUS
15889: PPUSH
15890: CALL_OW 259
15894: PUSH
15895: LD_INT 1
15897: PLUS
15898: PPUSH
15899: CALL_OW 237
15903: GO 15805
15905: POP
15906: POP
// end ;
15907: PPOPN 3
15909: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15910: LD_EXP 26
15914: PUSH
15915: LD_EXP 34
15919: AND
15920: IFFALSE 15940
15922: GO 15924
15924: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15925: LD_INT 4
15927: PPUSH
15928: LD_OWVAR 2
15932: PPUSH
15933: LD_INT 0
15935: PPUSH
15936: CALL_OW 324
15940: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15941: LD_EXP 26
15945: PUSH
15946: LD_EXP 63
15950: AND
15951: IFFALSE 15971
15953: GO 15955
15955: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15956: LD_INT 19
15958: PPUSH
15959: LD_OWVAR 2
15963: PPUSH
15964: LD_INT 0
15966: PPUSH
15967: CALL_OW 324
15971: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15972: LD_EXP 26
15976: PUSH
15977: LD_EXP 35
15981: AND
15982: IFFALSE 16084
15984: GO 15986
15986: DISABLE
15987: LD_INT 0
15989: PPUSH
15990: PPUSH
// begin enable ;
15991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_OWVAR 2
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 2
16011: PUSH
16012: LD_INT 34
16014: PUSH
16015: LD_INT 11
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 34
16024: PUSH
16025: LD_INT 30
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// if not tmp then
16046: LD_VAR 0 2
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16084
// for i in tmp do
16055: LD_ADDR_VAR 0 1
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16082
// begin SetLives ( i , 0 ) ;
16068: LD_VAR 0 1
16072: PPUSH
16073: LD_INT 0
16075: PPUSH
16076: CALL_OW 234
// end ;
16080: GO 16065
16082: POP
16083: POP
// end ;
16084: PPOPN 2
16086: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16087: LD_EXP 26
16091: PUSH
16092: LD_EXP 36
16096: AND
16097: IFFALSE 16117
16099: GO 16101
16101: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16102: LD_INT 32
16104: PPUSH
16105: LD_OWVAR 2
16109: PPUSH
16110: LD_INT 0
16112: PPUSH
16113: CALL_OW 324
16117: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16118: LD_EXP 26
16122: PUSH
16123: LD_EXP 37
16127: AND
16128: IFFALSE 16309
16130: GO 16132
16132: DISABLE
16133: LD_INT 0
16135: PPUSH
16136: PPUSH
16137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16138: LD_ADDR_VAR 0 2
16142: PUSH
16143: LD_INT 22
16145: PUSH
16146: LD_OWVAR 2
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 33
16157: PUSH
16158: LD_INT 3
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// if not tmp then
16174: LD_VAR 0 2
16178: NOT
16179: IFFALSE 16183
// exit ;
16181: GO 16309
// side := 0 ;
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: LD_INT 0
16190: ST_TO_ADDR
// for i := 1 to 8 do
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: DOUBLE
16197: LD_INT 1
16199: DEC
16200: ST_TO_ADDR
16201: LD_INT 8
16203: PUSH
16204: FOR_TO
16205: IFFALSE 16253
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16207: LD_OWVAR 2
16211: PUSH
16212: LD_VAR 0 1
16216: NONEQUAL
16217: PUSH
16218: LD_OWVAR 2
16222: PPUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 81
16232: PUSH
16233: LD_INT 2
16235: EQUAL
16236: AND
16237: IFFALSE 16251
// begin side := i ;
16239: LD_ADDR_VAR 0 3
16243: PUSH
16244: LD_VAR 0 1
16248: ST_TO_ADDR
// break ;
16249: GO 16253
// end ;
16251: GO 16204
16253: POP
16254: POP
// if not side then
16255: LD_VAR 0 3
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16309
// for i := 1 to tmp do
16264: LD_ADDR_VAR 0 1
16268: PUSH
16269: DOUBLE
16270: LD_INT 1
16272: DEC
16273: ST_TO_ADDR
16274: LD_VAR 0 2
16278: PUSH
16279: FOR_TO
16280: IFFALSE 16307
// if Prob ( 60 ) then
16282: LD_INT 60
16284: PPUSH
16285: CALL_OW 13
16289: IFFALSE 16305
// SetSide ( i , side ) ;
16291: LD_VAR 0 1
16295: PPUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: CALL_OW 235
16305: GO 16279
16307: POP
16308: POP
// end ;
16309: PPOPN 3
16311: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16312: LD_EXP 26
16316: PUSH
16317: LD_EXP 39
16321: AND
16322: IFFALSE 16441
16324: GO 16326
16326: DISABLE
16327: LD_INT 0
16329: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16330: LD_ADDR_VAR 0 1
16334: PUSH
16335: LD_INT 22
16337: PUSH
16338: LD_OWVAR 2
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 21
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: LD_INT 23
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: PUSH
16384: FOR_IN
16385: IFFALSE 16439
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 257
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: LD_INT 3
16405: PUSH
16406: LD_INT 4
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: IN
16415: IFFALSE 16437
// SetClass ( un , rand ( 1 , 4 ) ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: LD_INT 4
16427: PPUSH
16428: CALL_OW 12
16432: PPUSH
16433: CALL_OW 336
16437: GO 16384
16439: POP
16440: POP
// end ;
16441: PPOPN 1
16443: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16444: LD_EXP 26
16448: PUSH
16449: LD_EXP 38
16453: AND
16454: IFFALSE 16533
16456: GO 16458
16458: DISABLE
16459: LD_INT 0
16461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16462: LD_ADDR_VAR 0 1
16466: PUSH
16467: LD_INT 22
16469: PUSH
16470: LD_OWVAR 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 21
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: ST_TO_ADDR
// if not tmp then
16498: LD_VAR 0 1
16502: NOT
16503: IFFALSE 16507
// exit ;
16505: GO 16533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16507: LD_VAR 0 1
16511: PUSH
16512: LD_INT 1
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 12
16524: ARRAY
16525: PPUSH
16526: LD_INT 100
16528: PPUSH
16529: CALL_OW 234
// end ;
16533: PPOPN 1
16535: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16536: LD_EXP 26
16540: PUSH
16541: LD_EXP 40
16545: AND
16546: IFFALSE 16644
16548: GO 16550
16550: DISABLE
16551: LD_INT 0
16553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16554: LD_ADDR_VAR 0 1
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_OWVAR 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: ST_TO_ADDR
// if not tmp then
16590: LD_VAR 0 1
16594: NOT
16595: IFFALSE 16599
// exit ;
16597: GO 16644
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16599: LD_VAR 0 1
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 12
16616: ARRAY
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: LD_INT 4
16623: PPUSH
16624: CALL_OW 12
16628: PPUSH
16629: LD_INT 3000
16631: PPUSH
16632: LD_INT 9000
16634: PPUSH
16635: CALL_OW 12
16639: PPUSH
16640: CALL_OW 492
// end ;
16644: PPOPN 1
16646: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16647: LD_EXP 26
16651: PUSH
16652: LD_EXP 41
16656: AND
16657: IFFALSE 16677
16659: GO 16661
16661: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16662: LD_INT 1
16664: PPUSH
16665: LD_OWVAR 2
16669: PPUSH
16670: LD_INT 0
16672: PPUSH
16673: CALL_OW 324
16677: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16678: LD_EXP 26
16682: PUSH
16683: LD_EXP 42
16687: AND
16688: IFFALSE 16771
16690: GO 16692
16692: DISABLE
16693: LD_INT 0
16695: PPUSH
16696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: LD_INT 22
16704: PUSH
16705: LD_OWVAR 2
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: ST_TO_ADDR
// if not tmp then
16733: LD_VAR 0 2
16737: NOT
16738: IFFALSE 16742
// exit ;
16740: GO 16771
// for i in tmp do
16742: LD_ADDR_VAR 0 1
16746: PUSH
16747: LD_VAR 0 2
16751: PUSH
16752: FOR_IN
16753: IFFALSE 16769
// SetBLevel ( i , 10 ) ;
16755: LD_VAR 0 1
16759: PPUSH
16760: LD_INT 10
16762: PPUSH
16763: CALL_OW 241
16767: GO 16752
16769: POP
16770: POP
// end ;
16771: PPOPN 2
16773: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16774: LD_EXP 26
16778: PUSH
16779: LD_EXP 43
16783: AND
16784: IFFALSE 16895
16786: GO 16788
16788: DISABLE
16789: LD_INT 0
16791: PPUSH
16792: PPUSH
16793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16794: LD_ADDR_VAR 0 3
16798: PUSH
16799: LD_INT 22
16801: PUSH
16802: LD_OWVAR 2
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 25
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PPUSH
16825: CALL_OW 69
16829: ST_TO_ADDR
// if not tmp then
16830: LD_VAR 0 3
16834: NOT
16835: IFFALSE 16839
// exit ;
16837: GO 16895
// un := tmp [ rand ( 1 , tmp ) ] ;
16839: LD_ADDR_VAR 0 2
16843: PUSH
16844: LD_VAR 0 3
16848: PUSH
16849: LD_INT 1
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: CALL_OW 12
16861: ARRAY
16862: ST_TO_ADDR
// if Crawls ( un ) then
16863: LD_VAR 0 2
16867: PPUSH
16868: CALL_OW 318
16872: IFFALSE 16883
// ComWalk ( un ) ;
16874: LD_VAR 0 2
16878: PPUSH
16879: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16883: LD_VAR 0 2
16887: PPUSH
16888: LD_INT 5
16890: PPUSH
16891: CALL_OW 336
// end ;
16895: PPOPN 3
16897: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16898: LD_EXP 26
16902: PUSH
16903: LD_EXP 44
16907: AND
16908: PUSH
16909: LD_OWVAR 67
16913: PUSH
16914: LD_INT 4
16916: LESS
16917: AND
16918: IFFALSE 16937
16920: GO 16922
16922: DISABLE
// begin Difficulty := Difficulty + 1 ;
16923: LD_ADDR_OWVAR 67
16927: PUSH
16928: LD_OWVAR 67
16932: PUSH
16933: LD_INT 1
16935: PLUS
16936: ST_TO_ADDR
// end ;
16937: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16938: LD_EXP 26
16942: PUSH
16943: LD_EXP 45
16947: AND
16948: IFFALSE 17051
16950: GO 16952
16952: DISABLE
16953: LD_INT 0
16955: PPUSH
// begin for i := 1 to 5 do
16956: LD_ADDR_VAR 0 1
16960: PUSH
16961: DOUBLE
16962: LD_INT 1
16964: DEC
16965: ST_TO_ADDR
16966: LD_INT 5
16968: PUSH
16969: FOR_TO
16970: IFFALSE 17049
// begin uc_nation := nation_nature ;
16972: LD_ADDR_OWVAR 21
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// uc_side := 0 ;
16980: LD_ADDR_OWVAR 20
16984: PUSH
16985: LD_INT 0
16987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16988: LD_ADDR_OWVAR 29
16992: PUSH
16993: LD_INT 12
16995: PUSH
16996: LD_INT 12
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// hc_agressivity := 20 ;
17003: LD_ADDR_OWVAR 35
17007: PUSH
17008: LD_INT 20
17010: ST_TO_ADDR
// hc_class := class_tiger ;
17011: LD_ADDR_OWVAR 28
17015: PUSH
17016: LD_INT 14
17018: ST_TO_ADDR
// hc_gallery :=  ;
17019: LD_ADDR_OWVAR 33
17023: PUSH
17024: LD_STRING 
17026: ST_TO_ADDR
// hc_name :=  ;
17027: LD_ADDR_OWVAR 26
17031: PUSH
17032: LD_STRING 
17034: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17035: CALL_OW 44
17039: PPUSH
17040: LD_INT 0
17042: PPUSH
17043: CALL_OW 51
// end ;
17047: GO 16969
17049: POP
17050: POP
// end ;
17051: PPOPN 1
17053: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17054: LD_EXP 26
17058: PUSH
17059: LD_EXP 46
17063: AND
17064: IFFALSE 17073
17066: GO 17068
17068: DISABLE
// StreamSibBomb ;
17069: CALL 17074 0 0
17073: END
// export function StreamSibBomb ; var i , x , y ; begin
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
// result := false ;
17080: LD_ADDR_VAR 0 1
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// for i := 1 to 16 do
17088: LD_ADDR_VAR 0 2
17092: PUSH
17093: DOUBLE
17094: LD_INT 1
17096: DEC
17097: ST_TO_ADDR
17098: LD_INT 16
17100: PUSH
17101: FOR_TO
17102: IFFALSE 17301
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_INT 10
17111: PUSH
17112: LD_INT 20
17114: PUSH
17115: LD_INT 30
17117: PUSH
17118: LD_INT 40
17120: PUSH
17121: LD_INT 50
17123: PUSH
17124: LD_INT 60
17126: PUSH
17127: LD_INT 70
17129: PUSH
17130: LD_INT 80
17132: PUSH
17133: LD_INT 90
17135: PUSH
17136: LD_INT 100
17138: PUSH
17139: LD_INT 110
17141: PUSH
17142: LD_INT 120
17144: PUSH
17145: LD_INT 130
17147: PUSH
17148: LD_INT 140
17150: PUSH
17151: LD_INT 150
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: PPUSH
17174: LD_INT 15
17176: PPUSH
17177: CALL_OW 12
17181: ARRAY
17182: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17183: LD_ADDR_VAR 0 4
17187: PUSH
17188: LD_INT 10
17190: PUSH
17191: LD_INT 20
17193: PUSH
17194: LD_INT 30
17196: PUSH
17197: LD_INT 40
17199: PUSH
17200: LD_INT 50
17202: PUSH
17203: LD_INT 60
17205: PUSH
17206: LD_INT 70
17208: PUSH
17209: LD_INT 80
17211: PUSH
17212: LD_INT 90
17214: PUSH
17215: LD_INT 100
17217: PUSH
17218: LD_INT 110
17220: PUSH
17221: LD_INT 120
17223: PUSH
17224: LD_INT 130
17226: PUSH
17227: LD_INT 140
17229: PUSH
17230: LD_INT 150
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: PPUSH
17253: LD_INT 15
17255: PPUSH
17256: CALL_OW 12
17260: ARRAY
17261: ST_TO_ADDR
// if ValidHex ( x , y ) then
17262: LD_VAR 0 3
17266: PPUSH
17267: LD_VAR 0 4
17271: PPUSH
17272: CALL_OW 488
17276: IFFALSE 17299
// begin result := [ x , y ] ;
17278: LD_ADDR_VAR 0 1
17282: PUSH
17283: LD_VAR 0 3
17287: PUSH
17288: LD_VAR 0 4
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// break ;
17297: GO 17301
// end ; end ;
17299: GO 17101
17301: POP
17302: POP
// if result then
17303: LD_VAR 0 1
17307: IFFALSE 17367
// begin ToLua ( playSibBomb() ) ;
17309: LD_STRING playSibBomb()
17311: PPUSH
17312: CALL_OW 559
// wait ( 0 0$14 ) ;
17316: LD_INT 490
17318: PPUSH
17319: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17323: LD_VAR 0 1
17327: PUSH
17328: LD_INT 1
17330: ARRAY
17331: PPUSH
17332: LD_VAR 0 1
17336: PUSH
17337: LD_INT 2
17339: ARRAY
17340: PPUSH
17341: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17345: LD_VAR 0 1
17349: PUSH
17350: LD_INT 1
17352: ARRAY
17353: PPUSH
17354: LD_VAR 0 1
17358: PUSH
17359: LD_INT 2
17361: ARRAY
17362: PPUSH
17363: CALL_OW 429
// end ; end ;
17367: LD_VAR 0 1
17371: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17372: LD_EXP 26
17376: PUSH
17377: LD_EXP 48
17381: AND
17382: IFFALSE 17394
17384: GO 17386
17386: DISABLE
// YouLost (  ) ;
17387: LD_STRING 
17389: PPUSH
17390: CALL_OW 104
17394: END
// every 0 0$1 trigger StreamModeActive and sFog do
17395: LD_EXP 26
17399: PUSH
17400: LD_EXP 47
17404: AND
17405: IFFALSE 17419
17407: GO 17409
17409: DISABLE
// FogOff ( your_side ) ;
17410: LD_OWVAR 2
17414: PPUSH
17415: CALL_OW 344
17419: END
// every 0 0$1 trigger StreamModeActive and sSun do
17420: LD_EXP 26
17424: PUSH
17425: LD_EXP 49
17429: AND
17430: IFFALSE 17458
17432: GO 17434
17434: DISABLE
// begin solar_recharge_percent := 0 ;
17435: LD_ADDR_OWVAR 79
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17443: LD_INT 10500
17445: PPUSH
17446: CALL_OW 67
// solar_recharge_percent := 100 ;
17450: LD_ADDR_OWVAR 79
17454: PUSH
17455: LD_INT 100
17457: ST_TO_ADDR
// end ;
17458: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17459: LD_EXP 26
17463: PUSH
17464: LD_EXP 50
17468: AND
17469: IFFALSE 17708
17471: GO 17473
17473: DISABLE
17474: LD_INT 0
17476: PPUSH
17477: PPUSH
17478: PPUSH
// begin tmp := [ ] ;
17479: LD_ADDR_VAR 0 3
17483: PUSH
17484: EMPTY
17485: ST_TO_ADDR
// for i := 1 to 6 do
17486: LD_ADDR_VAR 0 1
17490: PUSH
17491: DOUBLE
17492: LD_INT 1
17494: DEC
17495: ST_TO_ADDR
17496: LD_INT 6
17498: PUSH
17499: FOR_TO
17500: IFFALSE 17605
// begin uc_nation := nation_nature ;
17502: LD_ADDR_OWVAR 21
17506: PUSH
17507: LD_INT 0
17509: ST_TO_ADDR
// uc_side := 0 ;
17510: LD_ADDR_OWVAR 20
17514: PUSH
17515: LD_INT 0
17517: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17518: LD_ADDR_OWVAR 29
17522: PUSH
17523: LD_INT 12
17525: PUSH
17526: LD_INT 12
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: ST_TO_ADDR
// hc_agressivity := 20 ;
17533: LD_ADDR_OWVAR 35
17537: PUSH
17538: LD_INT 20
17540: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17541: LD_ADDR_OWVAR 28
17545: PUSH
17546: LD_INT 17
17548: ST_TO_ADDR
// hc_gallery :=  ;
17549: LD_ADDR_OWVAR 33
17553: PUSH
17554: LD_STRING 
17556: ST_TO_ADDR
// hc_name :=  ;
17557: LD_ADDR_OWVAR 26
17561: PUSH
17562: LD_STRING 
17564: ST_TO_ADDR
// un := CreateHuman ;
17565: LD_ADDR_VAR 0 2
17569: PUSH
17570: CALL_OW 44
17574: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17575: LD_VAR 0 2
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: CALL_OW 51
// tmp := tmp ^ un ;
17587: LD_ADDR_VAR 0 3
17591: PUSH
17592: LD_VAR 0 3
17596: PUSH
17597: LD_VAR 0 2
17601: ADD
17602: ST_TO_ADDR
// end ;
17603: GO 17499
17605: POP
17606: POP
// repeat wait ( 0 0$1 ) ;
17607: LD_INT 35
17609: PPUSH
17610: CALL_OW 67
// for un in tmp do
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_VAR 0 3
17623: PUSH
17624: FOR_IN
17625: IFFALSE 17699
// begin if IsDead ( un ) then
17627: LD_VAR 0 2
17631: PPUSH
17632: CALL_OW 301
17636: IFFALSE 17656
// begin tmp := tmp diff un ;
17638: LD_ADDR_VAR 0 3
17642: PUSH
17643: LD_VAR 0 3
17647: PUSH
17648: LD_VAR 0 2
17652: DIFF
17653: ST_TO_ADDR
// continue ;
17654: GO 17624
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17656: LD_VAR 0 2
17660: PPUSH
17661: LD_INT 3
17663: PUSH
17664: LD_INT 22
17666: PUSH
17667: LD_INT 0
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 69
17682: PPUSH
17683: LD_VAR 0 2
17687: PPUSH
17688: CALL_OW 74
17692: PPUSH
17693: CALL_OW 115
// end ;
17697: GO 17624
17699: POP
17700: POP
// until not tmp ;
17701: LD_VAR 0 3
17705: NOT
17706: IFFALSE 17607
// end ;
17708: PPOPN 3
17710: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17711: LD_EXP 26
17715: PUSH
17716: LD_EXP 51
17720: AND
17721: IFFALSE 17775
17723: GO 17725
17725: DISABLE
// begin ToLua ( displayTroll(); ) ;
17726: LD_STRING displayTroll();
17728: PPUSH
17729: CALL_OW 559
// wait ( 3 3$00 ) ;
17733: LD_INT 6300
17735: PPUSH
17736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17740: LD_STRING hideTroll();
17742: PPUSH
17743: CALL_OW 559
// wait ( 1 1$00 ) ;
17747: LD_INT 2100
17749: PPUSH
17750: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17754: LD_STRING displayTroll();
17756: PPUSH
17757: CALL_OW 559
// wait ( 1 1$00 ) ;
17761: LD_INT 2100
17763: PPUSH
17764: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17768: LD_STRING hideTroll();
17770: PPUSH
17771: CALL_OW 559
// end ;
17775: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17776: LD_EXP 26
17780: PUSH
17781: LD_EXP 52
17785: AND
17786: IFFALSE 17849
17788: GO 17790
17790: DISABLE
17791: LD_INT 0
17793: PPUSH
// begin p := 0 ;
17794: LD_ADDR_VAR 0 1
17798: PUSH
17799: LD_INT 0
17801: ST_TO_ADDR
// repeat game_speed := 1 ;
17802: LD_ADDR_OWVAR 65
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17810: LD_INT 35
17812: PPUSH
17813: CALL_OW 67
// p := p + 1 ;
17817: LD_ADDR_VAR 0 1
17821: PUSH
17822: LD_VAR 0 1
17826: PUSH
17827: LD_INT 1
17829: PLUS
17830: ST_TO_ADDR
// until p >= 60 ;
17831: LD_VAR 0 1
17835: PUSH
17836: LD_INT 60
17838: GREATEREQUAL
17839: IFFALSE 17802
// game_speed := 4 ;
17841: LD_ADDR_OWVAR 65
17845: PUSH
17846: LD_INT 4
17848: ST_TO_ADDR
// end ;
17849: PPOPN 1
17851: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17852: LD_EXP 26
17856: PUSH
17857: LD_EXP 53
17861: AND
17862: IFFALSE 18008
17864: GO 17866
17866: DISABLE
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17871: LD_ADDR_VAR 0 1
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_OWVAR 2
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: LD_INT 30
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 30
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: ST_TO_ADDR
// if not depot then
17925: LD_VAR 0 1
17929: NOT
17930: IFFALSE 17934
// exit ;
17932: GO 18008
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17934: LD_ADDR_VAR 0 2
17938: PUSH
17939: LD_VAR 0 1
17943: PUSH
17944: LD_INT 1
17946: PPUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 12
17956: ARRAY
17957: PPUSH
17958: CALL_OW 274
17962: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17963: LD_VAR 0 2
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: LD_INT 0
17973: PPUSH
17974: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17978: LD_VAR 0 2
17982: PPUSH
17983: LD_INT 2
17985: PPUSH
17986: LD_INT 0
17988: PPUSH
17989: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17993: LD_VAR 0 2
17997: PPUSH
17998: LD_INT 3
18000: PPUSH
18001: LD_INT 0
18003: PPUSH
18004: CALL_OW 277
// end ;
18008: PPOPN 2
18010: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18011: LD_EXP 26
18015: PUSH
18016: LD_EXP 54
18020: AND
18021: IFFALSE 18118
18023: GO 18025
18025: DISABLE
18026: LD_INT 0
18028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18029: LD_ADDR_VAR 0 1
18033: PUSH
18034: LD_INT 22
18036: PUSH
18037: LD_OWVAR 2
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 21
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 3
18058: PUSH
18059: LD_INT 23
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 69
18082: ST_TO_ADDR
// if not tmp then
18083: LD_VAR 0 1
18087: NOT
18088: IFFALSE 18092
// exit ;
18090: GO 18118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18092: LD_VAR 0 1
18096: PUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 12
18109: ARRAY
18110: PPUSH
18111: LD_INT 200
18113: PPUSH
18114: CALL_OW 234
// end ;
18118: PPOPN 1
18120: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18121: LD_EXP 26
18125: PUSH
18126: LD_EXP 55
18130: AND
18131: IFFALSE 18210
18133: GO 18135
18135: DISABLE
18136: LD_INT 0
18138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18139: LD_ADDR_VAR 0 1
18143: PUSH
18144: LD_INT 22
18146: PUSH
18147: LD_OWVAR 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 21
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PPUSH
18170: CALL_OW 69
18174: ST_TO_ADDR
// if not tmp then
18175: LD_VAR 0 1
18179: NOT
18180: IFFALSE 18184
// exit ;
18182: GO 18210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18184: LD_VAR 0 1
18188: PUSH
18189: LD_INT 1
18191: PPUSH
18192: LD_VAR 0 1
18196: PPUSH
18197: CALL_OW 12
18201: ARRAY
18202: PPUSH
18203: LD_INT 60
18205: PPUSH
18206: CALL_OW 234
// end ;
18210: PPOPN 1
18212: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18213: LD_EXP 26
18217: PUSH
18218: LD_EXP 56
18222: AND
18223: IFFALSE 18322
18225: GO 18227
18227: DISABLE
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
// begin enable ;
18232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18233: LD_ADDR_VAR 0 1
18237: PUSH
18238: LD_INT 22
18240: PUSH
18241: LD_OWVAR 2
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 61
18252: PUSH
18253: EMPTY
18254: LIST
18255: PUSH
18256: LD_INT 33
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: ST_TO_ADDR
// if not tmp then
18276: LD_VAR 0 1
18280: NOT
18281: IFFALSE 18285
// exit ;
18283: GO 18322
// for i in tmp do
18285: LD_ADDR_VAR 0 2
18289: PUSH
18290: LD_VAR 0 1
18294: PUSH
18295: FOR_IN
18296: IFFALSE 18320
// if IsControledBy ( i ) then
18298: LD_VAR 0 2
18302: PPUSH
18303: CALL_OW 312
18307: IFFALSE 18318
// ComUnlink ( i ) ;
18309: LD_VAR 0 2
18313: PPUSH
18314: CALL_OW 136
18318: GO 18295
18320: POP
18321: POP
// end ;
18322: PPOPN 2
18324: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18325: LD_EXP 26
18329: PUSH
18330: LD_EXP 57
18334: AND
18335: IFFALSE 18475
18337: GO 18339
18339: DISABLE
18340: LD_INT 0
18342: PPUSH
18343: PPUSH
// begin ToLua ( displayPowell(); ) ;
18344: LD_STRING displayPowell();
18346: PPUSH
18347: CALL_OW 559
// uc_side := 0 ;
18351: LD_ADDR_OWVAR 20
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// uc_nation := 2 ;
18359: LD_ADDR_OWVAR 21
18363: PUSH
18364: LD_INT 2
18366: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18367: LD_ADDR_OWVAR 37
18371: PUSH
18372: LD_INT 14
18374: ST_TO_ADDR
// vc_engine := engine_siberite ;
18375: LD_ADDR_OWVAR 39
18379: PUSH
18380: LD_INT 3
18382: ST_TO_ADDR
// vc_control := control_apeman ;
18383: LD_ADDR_OWVAR 38
18387: PUSH
18388: LD_INT 5
18390: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18391: LD_ADDR_OWVAR 40
18395: PUSH
18396: LD_INT 29
18398: ST_TO_ADDR
// un := CreateVehicle ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: CALL_OW 45
18408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18409: LD_VAR 0 2
18413: PPUSH
18414: LD_INT 1
18416: PPUSH
18417: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18421: LD_INT 35
18423: PPUSH
18424: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18428: LD_VAR 0 2
18432: PPUSH
18433: LD_INT 22
18435: PUSH
18436: LD_OWVAR 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 69
18449: PPUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: CALL_OW 74
18459: PPUSH
18460: CALL_OW 115
// until IsDead ( un ) ;
18464: LD_VAR 0 2
18468: PPUSH
18469: CALL_OW 301
18473: IFFALSE 18421
// end ;
18475: PPOPN 2
18477: END
// every 0 0$1 trigger StreamModeActive and sStu do
18478: LD_EXP 26
18482: PUSH
18483: LD_EXP 65
18487: AND
18488: IFFALSE 18504
18490: GO 18492
18492: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18493: LD_STRING displayStucuk();
18495: PPUSH
18496: CALL_OW 559
// ResetFog ;
18500: CALL_OW 335
// end ;
18504: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18505: LD_EXP 26
18509: PUSH
18510: LD_EXP 58
18514: AND
18515: IFFALSE 18656
18517: GO 18519
18519: DISABLE
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18524: LD_ADDR_VAR 0 2
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_OWVAR 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 21
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: ST_TO_ADDR
// if not tmp then
18560: LD_VAR 0 2
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18656
// un := tmp [ rand ( 1 , tmp ) ] ;
18569: LD_ADDR_VAR 0 1
18573: PUSH
18574: LD_VAR 0 2
18578: PUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_VAR 0 2
18586: PPUSH
18587: CALL_OW 12
18591: ARRAY
18592: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18593: LD_VAR 0 1
18597: PPUSH
18598: LD_INT 0
18600: PPUSH
18601: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18605: LD_VAR 0 1
18609: PPUSH
18610: LD_OWVAR 3
18614: PUSH
18615: LD_VAR 0 1
18619: DIFF
18620: PPUSH
18621: LD_VAR 0 1
18625: PPUSH
18626: CALL_OW 74
18630: PPUSH
18631: CALL_OW 115
// wait ( 0 0$20 ) ;
18635: LD_INT 700
18637: PPUSH
18638: CALL_OW 67
// SetSide ( un , your_side ) ;
18642: LD_VAR 0 1
18646: PPUSH
18647: LD_OWVAR 2
18651: PPUSH
18652: CALL_OW 235
// end ;
18656: PPOPN 2
18658: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18659: LD_EXP 26
18663: PUSH
18664: LD_EXP 59
18668: AND
18669: IFFALSE 18775
18671: GO 18673
18673: DISABLE
18674: LD_INT 0
18676: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18677: LD_ADDR_VAR 0 1
18681: PUSH
18682: LD_INT 22
18684: PUSH
18685: LD_OWVAR 2
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: LD_INT 30
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 30
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PPUSH
18726: CALL_OW 69
18730: ST_TO_ADDR
// if not depot then
18731: LD_VAR 0 1
18735: NOT
18736: IFFALSE 18740
// exit ;
18738: GO 18775
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18740: LD_VAR 0 1
18744: PUSH
18745: LD_INT 1
18747: ARRAY
18748: PPUSH
18749: CALL_OW 250
18753: PPUSH
18754: LD_VAR 0 1
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: CALL_OW 251
18767: PPUSH
18768: LD_INT 70
18770: PPUSH
18771: CALL_OW 495
// end ;
18775: PPOPN 1
18777: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18778: LD_EXP 26
18782: PUSH
18783: LD_EXP 60
18787: AND
18788: IFFALSE 18999
18790: GO 18792
18792: DISABLE
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
18797: PPUSH
18798: PPUSH
18799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18800: LD_ADDR_VAR 0 5
18804: PUSH
18805: LD_INT 22
18807: PUSH
18808: LD_OWVAR 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PPUSH
18831: CALL_OW 69
18835: ST_TO_ADDR
// if not tmp then
18836: LD_VAR 0 5
18840: NOT
18841: IFFALSE 18845
// exit ;
18843: GO 18999
// for i in tmp do
18845: LD_ADDR_VAR 0 1
18849: PUSH
18850: LD_VAR 0 5
18854: PUSH
18855: FOR_IN
18856: IFFALSE 18997
// begin d := rand ( 0 , 5 ) ;
18858: LD_ADDR_VAR 0 4
18862: PUSH
18863: LD_INT 0
18865: PPUSH
18866: LD_INT 5
18868: PPUSH
18869: CALL_OW 12
18873: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18874: LD_ADDR_VAR 0 2
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 250
18888: PPUSH
18889: LD_VAR 0 4
18893: PPUSH
18894: LD_INT 3
18896: PPUSH
18897: LD_INT 12
18899: PPUSH
18900: CALL_OW 12
18904: PPUSH
18905: CALL_OW 272
18909: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18910: LD_ADDR_VAR 0 3
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 251
18924: PPUSH
18925: LD_VAR 0 4
18929: PPUSH
18930: LD_INT 3
18932: PPUSH
18933: LD_INT 12
18935: PPUSH
18936: CALL_OW 12
18940: PPUSH
18941: CALL_OW 273
18945: ST_TO_ADDR
// if ValidHex ( x , y ) then
18946: LD_VAR 0 2
18950: PPUSH
18951: LD_VAR 0 3
18955: PPUSH
18956: CALL_OW 488
18960: IFFALSE 18995
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18962: LD_VAR 0 1
18966: PPUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: LD_VAR 0 3
18976: PPUSH
18977: LD_INT 3
18979: PPUSH
18980: LD_INT 6
18982: PPUSH
18983: CALL_OW 12
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 483
// end ;
18995: GO 18855
18997: POP
18998: POP
// end ;
18999: PPOPN 5
19001: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19002: LD_EXP 26
19006: PUSH
19007: LD_EXP 61
19011: AND
19012: IFFALSE 19106
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_OWVAR 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 32
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 21
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: ST_TO_ADDR
// if not tmp then
19068: LD_VAR 0 2
19072: NOT
19073: IFFALSE 19077
// exit ;
19075: GO 19106
// for i in tmp do
19077: LD_ADDR_VAR 0 1
19081: PUSH
19082: LD_VAR 0 2
19086: PUSH
19087: FOR_IN
19088: IFFALSE 19104
// SetFuel ( i , 0 ) ;
19090: LD_VAR 0 1
19094: PPUSH
19095: LD_INT 0
19097: PPUSH
19098: CALL_OW 240
19102: GO 19087
19104: POP
19105: POP
// end ;
19106: PPOPN 2
19108: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19109: LD_EXP 26
19113: PUSH
19114: LD_EXP 62
19118: AND
19119: IFFALSE 19185
19121: GO 19123
19123: DISABLE
19124: LD_INT 0
19126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19127: LD_ADDR_VAR 0 1
19131: PUSH
19132: LD_INT 22
19134: PUSH
19135: LD_OWVAR 2
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 30
19146: PUSH
19147: LD_INT 29
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: ST_TO_ADDR
// if not tmp then
19163: LD_VAR 0 1
19167: NOT
19168: IFFALSE 19172
// exit ;
19170: GO 19185
// DestroyUnit ( tmp [ 1 ] ) ;
19172: LD_VAR 0 1
19176: PUSH
19177: LD_INT 1
19179: ARRAY
19180: PPUSH
19181: CALL_OW 65
// end ;
19185: PPOPN 1
19187: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19188: LD_EXP 26
19192: PUSH
19193: LD_EXP 64
19197: AND
19198: IFFALSE 19327
19200: GO 19202
19202: DISABLE
19203: LD_INT 0
19205: PPUSH
// begin uc_side := 0 ;
19206: LD_ADDR_OWVAR 20
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// uc_nation := nation_arabian ;
19214: LD_ADDR_OWVAR 21
19218: PUSH
19219: LD_INT 2
19221: ST_TO_ADDR
// hc_gallery :=  ;
19222: LD_ADDR_OWVAR 33
19226: PUSH
19227: LD_STRING 
19229: ST_TO_ADDR
// hc_name :=  ;
19230: LD_ADDR_OWVAR 26
19234: PUSH
19235: LD_STRING 
19237: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19238: LD_INT 1
19240: PPUSH
19241: LD_INT 11
19243: PPUSH
19244: LD_INT 10
19246: PPUSH
19247: CALL_OW 380
// un := CreateHuman ;
19251: LD_ADDR_VAR 0 1
19255: PUSH
19256: CALL_OW 44
19260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19261: LD_VAR 0 1
19265: PPUSH
19266: LD_INT 1
19268: PPUSH
19269: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19273: LD_INT 35
19275: PPUSH
19276: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_INT 22
19287: PUSH
19288: LD_OWVAR 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PPUSH
19297: CALL_OW 69
19301: PPUSH
19302: LD_VAR 0 1
19306: PPUSH
19307: CALL_OW 74
19311: PPUSH
19312: CALL_OW 115
// until IsDead ( un ) ;
19316: LD_VAR 0 1
19320: PPUSH
19321: CALL_OW 301
19325: IFFALSE 19273
// end ;
19327: PPOPN 1
19329: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19330: LD_EXP 26
19334: PUSH
19335: LD_EXP 66
19339: AND
19340: IFFALSE 19352
19342: GO 19344
19344: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19345: LD_STRING earthquake(getX(game), 0, 32)
19347: PPUSH
19348: CALL_OW 559
19352: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19353: LD_EXP 26
19357: PUSH
19358: LD_EXP 67
19362: AND
19363: IFFALSE 19454
19365: GO 19367
19367: DISABLE
19368: LD_INT 0
19370: PPUSH
// begin enable ;
19371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19372: LD_ADDR_VAR 0 1
19376: PUSH
19377: LD_INT 22
19379: PUSH
19380: LD_OWVAR 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 33
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 69
19418: ST_TO_ADDR
// if not tmp then
19419: LD_VAR 0 1
19423: NOT
19424: IFFALSE 19428
// exit ;
19426: GO 19454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19428: LD_VAR 0 1
19432: PUSH
19433: LD_INT 1
19435: PPUSH
19436: LD_VAR 0 1
19440: PPUSH
19441: CALL_OW 12
19445: ARRAY
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 234
// end ;
19454: PPOPN 1
19456: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19457: LD_EXP 26
19461: PUSH
19462: LD_EXP 68
19466: AND
19467: IFFALSE 19608
19469: GO 19471
19471: DISABLE
19472: LD_INT 0
19474: PPUSH
19475: PPUSH
19476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: LD_INT 22
19484: PUSH
19485: LD_OWVAR 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 25
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: ST_TO_ADDR
// if not tmp then
19513: LD_VAR 0 3
19517: NOT
19518: IFFALSE 19522
// exit ;
19520: GO 19608
// un := tmp [ rand ( 1 , tmp ) ] ;
19522: LD_ADDR_VAR 0 2
19526: PUSH
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 1
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: CALL_OW 12
19544: ARRAY
19545: ST_TO_ADDR
// if Crawls ( un ) then
19546: LD_VAR 0 2
19550: PPUSH
19551: CALL_OW 318
19555: IFFALSE 19566
// ComWalk ( un ) ;
19557: LD_VAR 0 2
19561: PPUSH
19562: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19566: LD_VAR 0 2
19570: PPUSH
19571: LD_INT 9
19573: PPUSH
19574: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19578: LD_INT 28
19580: PPUSH
19581: LD_OWVAR 2
19585: PPUSH
19586: LD_INT 2
19588: PPUSH
19589: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19593: LD_INT 29
19595: PPUSH
19596: LD_OWVAR 2
19600: PPUSH
19601: LD_INT 2
19603: PPUSH
19604: CALL_OW 322
// end ;
19608: PPOPN 3
19610: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19611: LD_EXP 26
19615: PUSH
19616: LD_EXP 69
19620: AND
19621: IFFALSE 19732
19623: GO 19625
19625: DISABLE
19626: LD_INT 0
19628: PPUSH
19629: PPUSH
19630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19631: LD_ADDR_VAR 0 3
19635: PUSH
19636: LD_INT 22
19638: PUSH
19639: LD_OWVAR 2
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 25
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PPUSH
19662: CALL_OW 69
19666: ST_TO_ADDR
// if not tmp then
19667: LD_VAR 0 3
19671: NOT
19672: IFFALSE 19676
// exit ;
19674: GO 19732
// un := tmp [ rand ( 1 , tmp ) ] ;
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 1
19688: PPUSH
19689: LD_VAR 0 3
19693: PPUSH
19694: CALL_OW 12
19698: ARRAY
19699: ST_TO_ADDR
// if Crawls ( un ) then
19700: LD_VAR 0 2
19704: PPUSH
19705: CALL_OW 318
19709: IFFALSE 19720
// ComWalk ( un ) ;
19711: LD_VAR 0 2
19715: PPUSH
19716: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19720: LD_VAR 0 2
19724: PPUSH
19725: LD_INT 8
19727: PPUSH
19728: CALL_OW 336
// end ;
19732: PPOPN 3
19734: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19735: LD_EXP 26
19739: PUSH
19740: LD_EXP 70
19744: AND
19745: IFFALSE 19889
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 34
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 34
19796: PUSH
19797: LD_INT 51
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 34
19806: PUSH
19807: LD_INT 32
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: ST_TO_ADDR
// if not tmp then
19830: LD_VAR 0 2
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 19889
// for i in tmp do
19839: LD_ADDR_VAR 0 1
19843: PUSH
19844: LD_VAR 0 2
19848: PUSH
19849: FOR_IN
19850: IFFALSE 19887
// if GetCargo ( i , mat_artifact ) = 0 then
19852: LD_VAR 0 1
19856: PPUSH
19857: LD_INT 4
19859: PPUSH
19860: CALL_OW 289
19864: PUSH
19865: LD_INT 0
19867: EQUAL
19868: IFFALSE 19885
// SetCargo ( i , mat_siberit , 100 ) ;
19870: LD_VAR 0 1
19874: PPUSH
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 100
19880: PPUSH
19881: CALL_OW 290
19885: GO 19849
19887: POP
19888: POP
// end ;
19889: PPOPN 2
19891: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19892: LD_EXP 26
19896: PUSH
19897: LD_EXP 71
19901: AND
19902: IFFALSE 20085
19904: GO 19906
19906: DISABLE
19907: LD_INT 0
19909: PPUSH
19910: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: LD_INT 22
19918: PUSH
19919: LD_OWVAR 2
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: ST_TO_ADDR
// if not tmp then
19933: LD_VAR 0 2
19937: NOT
19938: IFFALSE 19942
// exit ;
19940: GO 20085
// for i := 1 to 2 do
19942: LD_ADDR_VAR 0 1
19946: PUSH
19947: DOUBLE
19948: LD_INT 1
19950: DEC
19951: ST_TO_ADDR
19952: LD_INT 2
19954: PUSH
19955: FOR_TO
19956: IFFALSE 20083
// begin uc_side := your_side ;
19958: LD_ADDR_OWVAR 20
19962: PUSH
19963: LD_OWVAR 2
19967: ST_TO_ADDR
// uc_nation := nation_american ;
19968: LD_ADDR_OWVAR 21
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// vc_chassis := us_morphling ;
19976: LD_ADDR_OWVAR 37
19980: PUSH
19981: LD_INT 5
19983: ST_TO_ADDR
// vc_engine := engine_siberite ;
19984: LD_ADDR_OWVAR 39
19988: PUSH
19989: LD_INT 3
19991: ST_TO_ADDR
// vc_control := control_computer ;
19992: LD_ADDR_OWVAR 38
19996: PUSH
19997: LD_INT 3
19999: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20000: LD_ADDR_OWVAR 40
20004: PUSH
20005: LD_INT 10
20007: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20008: LD_VAR 0 2
20012: PUSH
20013: LD_INT 1
20015: ARRAY
20016: PPUSH
20017: CALL_OW 310
20021: NOT
20022: IFFALSE 20069
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20024: CALL_OW 45
20028: PPUSH
20029: LD_VAR 0 2
20033: PUSH
20034: LD_INT 1
20036: ARRAY
20037: PPUSH
20038: CALL_OW 250
20042: PPUSH
20043: LD_VAR 0 2
20047: PUSH
20048: LD_INT 1
20050: ARRAY
20051: PPUSH
20052: CALL_OW 251
20056: PPUSH
20057: LD_INT 12
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 50
20067: GO 20081
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20069: CALL_OW 45
20073: PPUSH
20074: LD_INT 1
20076: PPUSH
20077: CALL_OW 51
// end ;
20081: GO 19955
20083: POP
20084: POP
// end ;
20085: PPOPN 2
20087: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20088: LD_EXP 26
20092: PUSH
20093: LD_EXP 72
20097: AND
20098: IFFALSE 20320
20100: GO 20102
20102: DISABLE
20103: LD_INT 0
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20111: LD_ADDR_VAR 0 6
20115: PUSH
20116: LD_INT 22
20118: PUSH
20119: LD_OWVAR 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 21
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 3
20140: PUSH
20141: LD_INT 23
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: PPUSH
20160: CALL_OW 69
20164: ST_TO_ADDR
// if not tmp then
20165: LD_VAR 0 6
20169: NOT
20170: IFFALSE 20174
// exit ;
20172: GO 20320
// s1 := rand ( 1 , 4 ) ;
20174: LD_ADDR_VAR 0 2
20178: PUSH
20179: LD_INT 1
20181: PPUSH
20182: LD_INT 4
20184: PPUSH
20185: CALL_OW 12
20189: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20190: LD_ADDR_VAR 0 4
20194: PUSH
20195: LD_VAR 0 6
20199: PUSH
20200: LD_INT 1
20202: ARRAY
20203: PPUSH
20204: LD_VAR 0 2
20208: PPUSH
20209: CALL_OW 259
20213: ST_TO_ADDR
// if s1 = 1 then
20214: LD_VAR 0 2
20218: PUSH
20219: LD_INT 1
20221: EQUAL
20222: IFFALSE 20242
// s2 := rand ( 2 , 4 ) else
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_INT 2
20231: PPUSH
20232: LD_INT 4
20234: PPUSH
20235: CALL_OW 12
20239: ST_TO_ADDR
20240: GO 20250
// s2 := 1 ;
20242: LD_ADDR_VAR 0 3
20246: PUSH
20247: LD_INT 1
20249: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20250: LD_ADDR_VAR 0 5
20254: PUSH
20255: LD_VAR 0 6
20259: PUSH
20260: LD_INT 1
20262: ARRAY
20263: PPUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: CALL_OW 259
20273: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20274: LD_VAR 0 6
20278: PUSH
20279: LD_INT 1
20281: ARRAY
20282: PPUSH
20283: LD_VAR 0 2
20287: PPUSH
20288: LD_VAR 0 5
20292: PPUSH
20293: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20297: LD_VAR 0 6
20301: PUSH
20302: LD_INT 1
20304: ARRAY
20305: PPUSH
20306: LD_VAR 0 3
20310: PPUSH
20311: LD_VAR 0 4
20315: PPUSH
20316: CALL_OW 237
// end ;
20320: PPOPN 6
20322: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20323: LD_EXP 26
20327: PUSH
20328: LD_EXP 73
20332: AND
20333: IFFALSE 20412
20335: GO 20337
20337: DISABLE
20338: LD_INT 0
20340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_OWVAR 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: ST_TO_ADDR
// if not tmp then
20377: LD_VAR 0 1
20381: NOT
20382: IFFALSE 20386
// exit ;
20384: GO 20412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20386: LD_VAR 0 1
20390: PUSH
20391: LD_INT 1
20393: PPUSH
20394: LD_VAR 0 1
20398: PPUSH
20399: CALL_OW 12
20403: ARRAY
20404: PPUSH
20405: LD_INT 1
20407: PPUSH
20408: CALL_OW 234
// end ;
20412: PPOPN 1
20414: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20415: LD_EXP 26
20419: PUSH
20420: LD_EXP 74
20424: AND
20425: IFFALSE 20537
20427: GO 20429
20429: DISABLE
20430: LD_INT 0
20432: PPUSH
20433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20434: LD_ADDR_VAR 0 2
20438: PUSH
20439: LD_INT 22
20441: PUSH
20442: LD_OWVAR 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: LD_INT 30
20456: PUSH
20457: LD_INT 27
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 30
20466: PUSH
20467: LD_INT 26
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 30
20476: PUSH
20477: LD_INT 28
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 69
20498: ST_TO_ADDR
// if not tmp then
20499: LD_VAR 0 2
20503: NOT
20504: IFFALSE 20508
// exit ;
20506: GO 20537
// for i in tmp do
20508: LD_ADDR_VAR 0 1
20512: PUSH
20513: LD_VAR 0 2
20517: PUSH
20518: FOR_IN
20519: IFFALSE 20535
// SetLives ( i , 1 ) ;
20521: LD_VAR 0 1
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: CALL_OW 234
20533: GO 20518
20535: POP
20536: POP
// end ;
20537: PPOPN 2
20539: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20540: LD_EXP 26
20544: PUSH
20545: LD_EXP 75
20549: AND
20550: IFFALSE 20837
20552: GO 20554
20554: DISABLE
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
20559: PPUSH
// begin i := rand ( 1 , 7 ) ;
20560: LD_ADDR_VAR 0 1
20564: PUSH
20565: LD_INT 1
20567: PPUSH
20568: LD_INT 7
20570: PPUSH
20571: CALL_OW 12
20575: ST_TO_ADDR
// case i of 1 :
20576: LD_VAR 0 1
20580: PUSH
20581: LD_INT 1
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20599
20589: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20590: LD_STRING earthquake(getX(game), 0, 32)
20592: PPUSH
20593: CALL_OW 559
20597: GO 20837
20599: LD_INT 2
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20621
20607: POP
// begin ToLua ( displayStucuk(); ) ;
20608: LD_STRING displayStucuk();
20610: PPUSH
20611: CALL_OW 559
// ResetFog ;
20615: CALL_OW 335
// end ; 3 :
20619: GO 20837
20621: LD_INT 3
20623: DOUBLE
20624: EQUAL
20625: IFTRUE 20629
20627: GO 20733
20629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20630: LD_ADDR_VAR 0 2
20634: PUSH
20635: LD_INT 22
20637: PUSH
20638: LD_OWVAR 2
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 25
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PPUSH
20661: CALL_OW 69
20665: ST_TO_ADDR
// if not tmp then
20666: LD_VAR 0 2
20670: NOT
20671: IFFALSE 20675
// exit ;
20673: GO 20837
// un := tmp [ rand ( 1 , tmp ) ] ;
20675: LD_ADDR_VAR 0 3
20679: PUSH
20680: LD_VAR 0 2
20684: PUSH
20685: LD_INT 1
20687: PPUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 12
20697: ARRAY
20698: ST_TO_ADDR
// if Crawls ( un ) then
20699: LD_VAR 0 3
20703: PPUSH
20704: CALL_OW 318
20708: IFFALSE 20719
// ComWalk ( un ) ;
20710: LD_VAR 0 3
20714: PPUSH
20715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20719: LD_VAR 0 3
20723: PPUSH
20724: LD_INT 8
20726: PPUSH
20727: CALL_OW 336
// end ; 4 :
20731: GO 20837
20733: LD_INT 4
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20815
20741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_OWVAR 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 30
20761: PUSH
20762: LD_INT 29
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PPUSH
20773: CALL_OW 69
20777: ST_TO_ADDR
// if not tmp then
20778: LD_VAR 0 2
20782: NOT
20783: IFFALSE 20787
// exit ;
20785: GO 20837
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20787: LD_VAR 0 2
20791: PUSH
20792: LD_INT 1
20794: ARRAY
20795: PPUSH
20796: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20800: LD_VAR 0 2
20804: PUSH
20805: LD_INT 1
20807: ARRAY
20808: PPUSH
20809: CALL_OW 65
// end ; 5 .. 7 :
20813: GO 20837
20815: LD_INT 5
20817: DOUBLE
20818: GREATEREQUAL
20819: IFFALSE 20827
20821: LD_INT 7
20823: DOUBLE
20824: LESSEQUAL
20825: IFTRUE 20829
20827: GO 20836
20829: POP
// StreamSibBomb ; end ;
20830: CALL 17074 0 0
20834: GO 20837
20836: POP
// end ;
20837: PPOPN 3
20839: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20840: LD_EXP 26
20844: PUSH
20845: LD_EXP 76
20849: AND
20850: IFFALSE 21006
20852: GO 20854
20854: DISABLE
20855: LD_INT 0
20857: PPUSH
20858: PPUSH
20859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20860: LD_ADDR_VAR 0 2
20864: PUSH
20865: LD_INT 81
20867: PUSH
20868: LD_OWVAR 2
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 21
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PPUSH
20909: CALL_OW 69
20913: ST_TO_ADDR
// if not tmp then
20914: LD_VAR 0 2
20918: NOT
20919: IFFALSE 20923
// exit ;
20921: GO 21006
// p := 0 ;
20923: LD_ADDR_VAR 0 3
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20931: LD_INT 35
20933: PPUSH
20934: CALL_OW 67
// p := p + 1 ;
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 1
20950: PLUS
20951: ST_TO_ADDR
// for i in tmp do
20952: LD_ADDR_VAR 0 1
20956: PUSH
20957: LD_VAR 0 2
20961: PUSH
20962: FOR_IN
20963: IFFALSE 20994
// if GetLives ( i ) < 1000 then
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 256
20974: PUSH
20975: LD_INT 1000
20977: LESS
20978: IFFALSE 20992
// SetLives ( i , 1000 ) ;
20980: LD_VAR 0 1
20984: PPUSH
20985: LD_INT 1000
20987: PPUSH
20988: CALL_OW 234
20992: GO 20962
20994: POP
20995: POP
// until p > 20 ;
20996: LD_VAR 0 3
21000: PUSH
21001: LD_INT 20
21003: GREATER
21004: IFFALSE 20931
// end ;
21006: PPOPN 3
21008: END
// every 0 0$1 trigger StreamModeActive and sTime do
21009: LD_EXP 26
21013: PUSH
21014: LD_EXP 77
21018: AND
21019: IFFALSE 21054
21021: GO 21023
21023: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21024: LD_INT 28
21026: PPUSH
21027: LD_OWVAR 2
21031: PPUSH
21032: LD_INT 2
21034: PPUSH
21035: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21039: LD_INT 30
21041: PPUSH
21042: LD_OWVAR 2
21046: PPUSH
21047: LD_INT 2
21049: PPUSH
21050: CALL_OW 322
// end ;
21054: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21055: LD_EXP 26
21059: PUSH
21060: LD_EXP 78
21064: AND
21065: IFFALSE 21186
21067: GO 21069
21069: DISABLE
21070: LD_INT 0
21072: PPUSH
21073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21074: LD_ADDR_VAR 0 2
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_OWVAR 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 21
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 3
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 69
21127: ST_TO_ADDR
// if not tmp then
21128: LD_VAR 0 2
21132: NOT
21133: IFFALSE 21137
// exit ;
21135: GO 21186
// for i in tmp do
21137: LD_ADDR_VAR 0 1
21141: PUSH
21142: LD_VAR 0 2
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21184
// begin if Crawls ( i ) then
21150: LD_VAR 0 1
21154: PPUSH
21155: CALL_OW 318
21159: IFFALSE 21170
// ComWalk ( i ) ;
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 138
// SetClass ( i , 2 ) ;
21170: LD_VAR 0 1
21174: PPUSH
21175: LD_INT 2
21177: PPUSH
21178: CALL_OW 336
// end ;
21182: GO 21147
21184: POP
21185: POP
// end ;
21186: PPOPN 2
21188: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21189: LD_EXP 26
21193: PUSH
21194: LD_EXP 79
21198: AND
21199: IFFALSE 21487
21201: GO 21203
21203: DISABLE
21204: LD_INT 0
21206: PPUSH
21207: PPUSH
21208: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21209: LD_OWVAR 2
21213: PPUSH
21214: LD_INT 9
21216: PPUSH
21217: LD_INT 1
21219: PPUSH
21220: LD_INT 1
21222: PPUSH
21223: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21227: LD_INT 9
21229: PPUSH
21230: LD_OWVAR 2
21234: PPUSH
21235: CALL_OW 343
// uc_side := 9 ;
21239: LD_ADDR_OWVAR 20
21243: PUSH
21244: LD_INT 9
21246: ST_TO_ADDR
// uc_nation := 2 ;
21247: LD_ADDR_OWVAR 21
21251: PUSH
21252: LD_INT 2
21254: ST_TO_ADDR
// hc_name := Dark Warrior ;
21255: LD_ADDR_OWVAR 26
21259: PUSH
21260: LD_STRING Dark Warrior
21262: ST_TO_ADDR
// hc_gallery :=  ;
21263: LD_ADDR_OWVAR 33
21267: PUSH
21268: LD_STRING 
21270: ST_TO_ADDR
// hc_noskilllimit := true ;
21271: LD_ADDR_OWVAR 76
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21279: LD_ADDR_OWVAR 31
21283: PUSH
21284: LD_INT 30
21286: PUSH
21287: LD_INT 30
21289: PUSH
21290: LD_INT 30
21292: PUSH
21293: LD_INT 30
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: ST_TO_ADDR
// un := CreateHuman ;
21302: LD_ADDR_VAR 0 3
21306: PUSH
21307: CALL_OW 44
21311: ST_TO_ADDR
// hc_noskilllimit := false ;
21312: LD_ADDR_OWVAR 76
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21320: LD_VAR 0 3
21324: PPUSH
21325: LD_INT 1
21327: PPUSH
21328: CALL_OW 51
// ToLua ( playRanger() ) ;
21332: LD_STRING playRanger()
21334: PPUSH
21335: CALL_OW 559
// p := 0 ;
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_INT 0
21346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21347: LD_INT 35
21349: PPUSH
21350: CALL_OW 67
// p := p + 1 ;
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: LD_VAR 0 2
21363: PUSH
21364: LD_INT 1
21366: PLUS
21367: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21368: LD_VAR 0 3
21372: PPUSH
21373: CALL_OW 256
21377: PUSH
21378: LD_INT 1000
21380: LESS
21381: IFFALSE 21395
// SetLives ( un , 1000 ) ;
21383: LD_VAR 0 3
21387: PPUSH
21388: LD_INT 1000
21390: PPUSH
21391: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21395: LD_VAR 0 3
21399: PPUSH
21400: LD_INT 81
21402: PUSH
21403: LD_OWVAR 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 91
21414: PUSH
21415: LD_VAR 0 3
21419: PUSH
21420: LD_INT 30
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL_OW 69
21436: PPUSH
21437: LD_VAR 0 3
21441: PPUSH
21442: CALL_OW 74
21446: PPUSH
21447: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21451: LD_VAR 0 2
21455: PUSH
21456: LD_INT 80
21458: GREATER
21459: PUSH
21460: LD_VAR 0 3
21464: PPUSH
21465: CALL_OW 301
21469: OR
21470: IFFALSE 21347
// if un then
21472: LD_VAR 0 3
21476: IFFALSE 21487
// RemoveUnit ( un ) ;
21478: LD_VAR 0 3
21482: PPUSH
21483: CALL_OW 64
// end ;
21487: PPOPN 3
21489: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21490: LD_EXP 80
21494: IFFALSE 21610
21496: GO 21498
21498: DISABLE
21499: LD_INT 0
21501: PPUSH
21502: PPUSH
21503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21504: LD_ADDR_VAR 0 2
21508: PUSH
21509: LD_INT 81
21511: PUSH
21512: LD_OWVAR 2
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 21
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PPUSH
21535: CALL_OW 69
21539: ST_TO_ADDR
// if not tmp then
21540: LD_VAR 0 2
21544: NOT
21545: IFFALSE 21549
// exit ;
21547: GO 21610
// ToLua ( playComputer() ) ;
21549: LD_STRING playComputer()
21551: PPUSH
21552: CALL_OW 559
// for i in tmp do
21556: LD_ADDR_VAR 0 1
21560: PUSH
21561: LD_VAR 0 2
21565: PUSH
21566: FOR_IN
21567: IFFALSE 21608
// for j := 1 to 4 do
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: DOUBLE
21575: LD_INT 1
21577: DEC
21578: ST_TO_ADDR
21579: LD_INT 4
21581: PUSH
21582: FOR_TO
21583: IFFALSE 21604
// SetSkill ( i , j , 10 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_INT 10
21597: PPUSH
21598: CALL_OW 237
21602: GO 21582
21604: POP
21605: POP
21606: GO 21566
21608: POP
21609: POP
// end ;
21610: PPOPN 3
21612: END
// every 0 0$1 trigger s30 do var i , tmp ;
21613: LD_EXP 81
21617: IFFALSE 21686
21619: GO 21621
21621: DISABLE
21622: LD_INT 0
21624: PPUSH
21625: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21626: LD_ADDR_VAR 0 2
21630: PUSH
21631: LD_INT 22
21633: PUSH
21634: LD_OWVAR 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PPUSH
21643: CALL_OW 69
21647: ST_TO_ADDR
// if not tmp then
21648: LD_VAR 0 2
21652: NOT
21653: IFFALSE 21657
// exit ;
21655: GO 21686
// for i in tmp do
21657: LD_ADDR_VAR 0 1
21661: PUSH
21662: LD_VAR 0 2
21666: PUSH
21667: FOR_IN
21668: IFFALSE 21684
// SetLives ( i , 300 ) ;
21670: LD_VAR 0 1
21674: PPUSH
21675: LD_INT 300
21677: PPUSH
21678: CALL_OW 234
21682: GO 21667
21684: POP
21685: POP
// end ;
21686: PPOPN 2
21688: END
// every 0 0$1 trigger s60 do var i , tmp ;
21689: LD_EXP 82
21693: IFFALSE 21762
21695: GO 21697
21697: DISABLE
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: LD_INT 22
21709: PUSH
21710: LD_OWVAR 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PPUSH
21719: CALL_OW 69
21723: ST_TO_ADDR
// if not tmp then
21724: LD_VAR 0 2
21728: NOT
21729: IFFALSE 21733
// exit ;
21731: GO 21762
// for i in tmp do
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: LD_VAR 0 2
21742: PUSH
21743: FOR_IN
21744: IFFALSE 21760
// SetLives ( i , 600 ) ;
21746: LD_VAR 0 1
21750: PPUSH
21751: LD_INT 600
21753: PPUSH
21754: CALL_OW 234
21758: GO 21743
21760: POP
21761: POP
// end ;
21762: PPOPN 2
21764: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21765: LD_INT 0
21767: PPUSH
// case cmd of 301 :
21768: LD_VAR 0 1
21772: PUSH
21773: LD_INT 301
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21813
21781: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21782: LD_VAR 0 6
21786: PPUSH
21787: LD_VAR 0 7
21791: PPUSH
21792: LD_VAR 0 8
21796: PPUSH
21797: LD_VAR 0 4
21801: PPUSH
21802: LD_VAR 0 5
21806: PPUSH
21807: CALL 23014 0 5
21811: GO 21934
21813: LD_INT 302
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21821
21819: GO 21858
21821: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21822: LD_VAR 0 6
21826: PPUSH
21827: LD_VAR 0 7
21831: PPUSH
21832: LD_VAR 0 8
21836: PPUSH
21837: LD_VAR 0 9
21841: PPUSH
21842: LD_VAR 0 4
21846: PPUSH
21847: LD_VAR 0 5
21851: PPUSH
21852: CALL 23105 0 6
21856: GO 21934
21858: LD_INT 303
21860: DOUBLE
21861: EQUAL
21862: IFTRUE 21866
21864: GO 21903
21866: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21867: LD_VAR 0 6
21871: PPUSH
21872: LD_VAR 0 7
21876: PPUSH
21877: LD_VAR 0 8
21881: PPUSH
21882: LD_VAR 0 9
21886: PPUSH
21887: LD_VAR 0 4
21891: PPUSH
21892: LD_VAR 0 5
21896: PPUSH
21897: CALL 21939 0 6
21901: GO 21934
21903: LD_INT 304
21905: DOUBLE
21906: EQUAL
21907: IFTRUE 21911
21909: GO 21933
21911: POP
// hHackTeleport ( unit , x , y ) ; end ;
21912: LD_VAR 0 2
21916: PPUSH
21917: LD_VAR 0 4
21921: PPUSH
21922: LD_VAR 0 5
21926: PPUSH
21927: CALL 23698 0 3
21931: GO 21934
21933: POP
// end ;
21934: LD_VAR 0 12
21938: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21939: LD_INT 0
21941: PPUSH
21942: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21943: LD_VAR 0 1
21947: PUSH
21948: LD_INT 1
21950: LESS
21951: PUSH
21952: LD_VAR 0 1
21956: PUSH
21957: LD_INT 3
21959: GREATER
21960: OR
21961: PUSH
21962: LD_VAR 0 5
21966: PPUSH
21967: LD_VAR 0 6
21971: PPUSH
21972: CALL_OW 428
21976: OR
21977: IFFALSE 21981
// exit ;
21979: GO 22701
// uc_side := your_side ;
21981: LD_ADDR_OWVAR 20
21985: PUSH
21986: LD_OWVAR 2
21990: ST_TO_ADDR
// uc_nation := nation ;
21991: LD_ADDR_OWVAR 21
21995: PUSH
21996: LD_VAR 0 1
22000: ST_TO_ADDR
// bc_level = 1 ;
22001: LD_ADDR_OWVAR 43
22005: PUSH
22006: LD_INT 1
22008: ST_TO_ADDR
// case btype of 1 :
22009: LD_VAR 0 2
22013: PUSH
22014: LD_INT 1
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22033
22022: POP
// bc_type := b_depot ; 2 :
22023: LD_ADDR_OWVAR 42
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
22031: GO 22645
22033: LD_INT 2
22035: DOUBLE
22036: EQUAL
22037: IFTRUE 22041
22039: GO 22052
22041: POP
// bc_type := b_warehouse ; 3 :
22042: LD_ADDR_OWVAR 42
22046: PUSH
22047: LD_INT 1
22049: ST_TO_ADDR
22050: GO 22645
22052: LD_INT 3
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22071
22060: POP
// bc_type := b_lab ; 4 .. 9 :
22061: LD_ADDR_OWVAR 42
22065: PUSH
22066: LD_INT 6
22068: ST_TO_ADDR
22069: GO 22645
22071: LD_INT 4
22073: DOUBLE
22074: GREATEREQUAL
22075: IFFALSE 22083
22077: LD_INT 9
22079: DOUBLE
22080: LESSEQUAL
22081: IFTRUE 22085
22083: GO 22137
22085: POP
// begin bc_type := b_lab_half ;
22086: LD_ADDR_OWVAR 42
22090: PUSH
22091: LD_INT 7
22093: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22094: LD_ADDR_OWVAR 44
22098: PUSH
22099: LD_INT 10
22101: PUSH
22102: LD_INT 11
22104: PUSH
22105: LD_INT 12
22107: PUSH
22108: LD_INT 15
22110: PUSH
22111: LD_INT 14
22113: PUSH
22114: LD_INT 13
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: PUSH
22125: LD_VAR 0 2
22129: PUSH
22130: LD_INT 3
22132: MINUS
22133: ARRAY
22134: ST_TO_ADDR
// end ; 10 .. 13 :
22135: GO 22645
22137: LD_INT 10
22139: DOUBLE
22140: GREATEREQUAL
22141: IFFALSE 22149
22143: LD_INT 13
22145: DOUBLE
22146: LESSEQUAL
22147: IFTRUE 22151
22149: GO 22228
22151: POP
// begin bc_type := b_lab_full ;
22152: LD_ADDR_OWVAR 42
22156: PUSH
22157: LD_INT 8
22159: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22160: LD_ADDR_OWVAR 44
22164: PUSH
22165: LD_INT 10
22167: PUSH
22168: LD_INT 12
22170: PUSH
22171: LD_INT 14
22173: PUSH
22174: LD_INT 13
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: PUSH
22183: LD_VAR 0 2
22187: PUSH
22188: LD_INT 9
22190: MINUS
22191: ARRAY
22192: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22193: LD_ADDR_OWVAR 45
22197: PUSH
22198: LD_INT 11
22200: PUSH
22201: LD_INT 15
22203: PUSH
22204: LD_INT 12
22206: PUSH
22207: LD_INT 15
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 9
22223: MINUS
22224: ARRAY
22225: ST_TO_ADDR
// end ; 14 :
22226: GO 22645
22228: LD_INT 14
22230: DOUBLE
22231: EQUAL
22232: IFTRUE 22236
22234: GO 22247
22236: POP
// bc_type := b_workshop ; 15 :
22237: LD_ADDR_OWVAR 42
22241: PUSH
22242: LD_INT 2
22244: ST_TO_ADDR
22245: GO 22645
22247: LD_INT 15
22249: DOUBLE
22250: EQUAL
22251: IFTRUE 22255
22253: GO 22266
22255: POP
// bc_type := b_factory ; 16 :
22256: LD_ADDR_OWVAR 42
22260: PUSH
22261: LD_INT 3
22263: ST_TO_ADDR
22264: GO 22645
22266: LD_INT 16
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22285
22274: POP
// bc_type := b_ext_gun ; 17 :
22275: LD_ADDR_OWVAR 42
22279: PUSH
22280: LD_INT 17
22282: ST_TO_ADDR
22283: GO 22645
22285: LD_INT 17
22287: DOUBLE
22288: EQUAL
22289: IFTRUE 22293
22291: GO 22321
22293: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22294: LD_ADDR_OWVAR 42
22298: PUSH
22299: LD_INT 19
22301: PUSH
22302: LD_INT 23
22304: PUSH
22305: LD_INT 19
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: LD_VAR 0 1
22317: ARRAY
22318: ST_TO_ADDR
22319: GO 22645
22321: LD_INT 18
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22340
22329: POP
// bc_type := b_ext_radar ; 19 :
22330: LD_ADDR_OWVAR 42
22334: PUSH
22335: LD_INT 20
22337: ST_TO_ADDR
22338: GO 22645
22340: LD_INT 19
22342: DOUBLE
22343: EQUAL
22344: IFTRUE 22348
22346: GO 22359
22348: POP
// bc_type := b_ext_radio ; 20 :
22349: LD_ADDR_OWVAR 42
22353: PUSH
22354: LD_INT 22
22356: ST_TO_ADDR
22357: GO 22645
22359: LD_INT 20
22361: DOUBLE
22362: EQUAL
22363: IFTRUE 22367
22365: GO 22378
22367: POP
// bc_type := b_ext_siberium ; 21 :
22368: LD_ADDR_OWVAR 42
22372: PUSH
22373: LD_INT 21
22375: ST_TO_ADDR
22376: GO 22645
22378: LD_INT 21
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22397
22386: POP
// bc_type := b_ext_computer ; 22 :
22387: LD_ADDR_OWVAR 42
22391: PUSH
22392: LD_INT 24
22394: ST_TO_ADDR
22395: GO 22645
22397: LD_INT 22
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22416
22405: POP
// bc_type := b_ext_track ; 23 :
22406: LD_ADDR_OWVAR 42
22410: PUSH
22411: LD_INT 16
22413: ST_TO_ADDR
22414: GO 22645
22416: LD_INT 23
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22435
22424: POP
// bc_type := b_ext_laser ; 24 :
22425: LD_ADDR_OWVAR 42
22429: PUSH
22430: LD_INT 25
22432: ST_TO_ADDR
22433: GO 22645
22435: LD_INT 24
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22454
22443: POP
// bc_type := b_control_tower ; 25 :
22444: LD_ADDR_OWVAR 42
22448: PUSH
22449: LD_INT 36
22451: ST_TO_ADDR
22452: GO 22645
22454: LD_INT 25
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22473
22462: POP
// bc_type := b_breastwork ; 26 :
22463: LD_ADDR_OWVAR 42
22467: PUSH
22468: LD_INT 31
22470: ST_TO_ADDR
22471: GO 22645
22473: LD_INT 26
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22492
22481: POP
// bc_type := b_bunker ; 27 :
22482: LD_ADDR_OWVAR 42
22486: PUSH
22487: LD_INT 32
22489: ST_TO_ADDR
22490: GO 22645
22492: LD_INT 27
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22500
22498: GO 22511
22500: POP
// bc_type := b_turret ; 28 :
22501: LD_ADDR_OWVAR 42
22505: PUSH
22506: LD_INT 33
22508: ST_TO_ADDR
22509: GO 22645
22511: LD_INT 28
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22530
22519: POP
// bc_type := b_armoury ; 29 :
22520: LD_ADDR_OWVAR 42
22524: PUSH
22525: LD_INT 4
22527: ST_TO_ADDR
22528: GO 22645
22530: LD_INT 29
22532: DOUBLE
22533: EQUAL
22534: IFTRUE 22538
22536: GO 22549
22538: POP
// bc_type := b_barracks ; 30 :
22539: LD_ADDR_OWVAR 42
22543: PUSH
22544: LD_INT 5
22546: ST_TO_ADDR
22547: GO 22645
22549: LD_INT 30
22551: DOUBLE
22552: EQUAL
22553: IFTRUE 22557
22555: GO 22568
22557: POP
// bc_type := b_solar_power ; 31 :
22558: LD_ADDR_OWVAR 42
22562: PUSH
22563: LD_INT 27
22565: ST_TO_ADDR
22566: GO 22645
22568: LD_INT 31
22570: DOUBLE
22571: EQUAL
22572: IFTRUE 22576
22574: GO 22587
22576: POP
// bc_type := b_oil_power ; 32 :
22577: LD_ADDR_OWVAR 42
22581: PUSH
22582: LD_INT 26
22584: ST_TO_ADDR
22585: GO 22645
22587: LD_INT 32
22589: DOUBLE
22590: EQUAL
22591: IFTRUE 22595
22593: GO 22606
22595: POP
// bc_type := b_siberite_power ; 33 :
22596: LD_ADDR_OWVAR 42
22600: PUSH
22601: LD_INT 28
22603: ST_TO_ADDR
22604: GO 22645
22606: LD_INT 33
22608: DOUBLE
22609: EQUAL
22610: IFTRUE 22614
22612: GO 22625
22614: POP
// bc_type := b_oil_mine ; 34 :
22615: LD_ADDR_OWVAR 42
22619: PUSH
22620: LD_INT 29
22622: ST_TO_ADDR
22623: GO 22645
22625: LD_INT 34
22627: DOUBLE
22628: EQUAL
22629: IFTRUE 22633
22631: GO 22644
22633: POP
// bc_type := b_siberite_mine ; end ;
22634: LD_ADDR_OWVAR 42
22638: PUSH
22639: LD_INT 30
22641: ST_TO_ADDR
22642: GO 22645
22644: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22645: LD_ADDR_VAR 0 8
22649: PUSH
22650: LD_VAR 0 5
22654: PPUSH
22655: LD_VAR 0 6
22659: PPUSH
22660: LD_VAR 0 3
22664: PPUSH
22665: CALL_OW 47
22669: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22670: LD_OWVAR 42
22674: PUSH
22675: LD_INT 32
22677: PUSH
22678: LD_INT 33
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: IN
22685: IFFALSE 22701
// PlaceWeaponTurret ( b , weapon ) ;
22687: LD_VAR 0 8
22691: PPUSH
22692: LD_VAR 0 4
22696: PPUSH
22697: CALL_OW 431
// end ;
22701: LD_VAR 0 7
22705: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22706: LD_INT 0
22708: PPUSH
22709: PPUSH
22710: PPUSH
22711: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22712: LD_ADDR_VAR 0 4
22716: PUSH
22717: LD_INT 22
22719: PUSH
22720: LD_OWVAR 2
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 30
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 30
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PPUSH
22761: CALL_OW 69
22765: ST_TO_ADDR
// if not tmp then
22766: LD_VAR 0 4
22770: NOT
22771: IFFALSE 22775
// exit ;
22773: GO 22834
// for i in tmp do
22775: LD_ADDR_VAR 0 2
22779: PUSH
22780: LD_VAR 0 4
22784: PUSH
22785: FOR_IN
22786: IFFALSE 22832
// for j = 1 to 3 do
22788: LD_ADDR_VAR 0 3
22792: PUSH
22793: DOUBLE
22794: LD_INT 1
22796: DEC
22797: ST_TO_ADDR
22798: LD_INT 3
22800: PUSH
22801: FOR_TO
22802: IFFALSE 22828
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22804: LD_VAR 0 2
22808: PPUSH
22809: CALL_OW 274
22813: PPUSH
22814: LD_VAR 0 3
22818: PPUSH
22819: LD_INT 99999
22821: PPUSH
22822: CALL_OW 277
22826: GO 22801
22828: POP
22829: POP
22830: GO 22785
22832: POP
22833: POP
// end ;
22834: LD_VAR 0 1
22838: RET
// export function hHackSetLevel10 ; var i , j ; begin
22839: LD_INT 0
22841: PPUSH
22842: PPUSH
22843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22844: LD_ADDR_VAR 0 2
22848: PUSH
22849: LD_INT 21
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PPUSH
22859: CALL_OW 69
22863: PUSH
22864: FOR_IN
22865: IFFALSE 22917
// if IsSelected ( i ) then
22867: LD_VAR 0 2
22871: PPUSH
22872: CALL_OW 306
22876: IFFALSE 22915
// begin for j := 1 to 4 do
22878: LD_ADDR_VAR 0 3
22882: PUSH
22883: DOUBLE
22884: LD_INT 1
22886: DEC
22887: ST_TO_ADDR
22888: LD_INT 4
22890: PUSH
22891: FOR_TO
22892: IFFALSE 22913
// SetSkill ( i , j , 10 ) ;
22894: LD_VAR 0 2
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_INT 10
22906: PPUSH
22907: CALL_OW 237
22911: GO 22891
22913: POP
22914: POP
// end ;
22915: GO 22864
22917: POP
22918: POP
// end ;
22919: LD_VAR 0 1
22923: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22924: LD_INT 0
22926: PPUSH
22927: PPUSH
22928: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22929: LD_ADDR_VAR 0 2
22933: PUSH
22934: LD_INT 22
22936: PUSH
22937: LD_OWVAR 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 21
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PPUSH
22960: CALL_OW 69
22964: PUSH
22965: FOR_IN
22966: IFFALSE 23007
// begin for j := 1 to 4 do
22968: LD_ADDR_VAR 0 3
22972: PUSH
22973: DOUBLE
22974: LD_INT 1
22976: DEC
22977: ST_TO_ADDR
22978: LD_INT 4
22980: PUSH
22981: FOR_TO
22982: IFFALSE 23003
// SetSkill ( i , j , 10 ) ;
22984: LD_VAR 0 2
22988: PPUSH
22989: LD_VAR 0 3
22993: PPUSH
22994: LD_INT 10
22996: PPUSH
22997: CALL_OW 237
23001: GO 22981
23003: POP
23004: POP
// end ;
23005: GO 22965
23007: POP
23008: POP
// end ;
23009: LD_VAR 0 1
23013: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23014: LD_INT 0
23016: PPUSH
// uc_side := your_side ;
23017: LD_ADDR_OWVAR 20
23021: PUSH
23022: LD_OWVAR 2
23026: ST_TO_ADDR
// uc_nation := nation ;
23027: LD_ADDR_OWVAR 21
23031: PUSH
23032: LD_VAR 0 1
23036: ST_TO_ADDR
// InitHc ;
23037: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23041: LD_INT 0
23043: PPUSH
23044: LD_VAR 0 2
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23058: LD_VAR 0 4
23062: PPUSH
23063: LD_VAR 0 5
23067: PPUSH
23068: CALL_OW 428
23072: PUSH
23073: LD_INT 0
23075: EQUAL
23076: IFFALSE 23100
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23078: CALL_OW 44
23082: PPUSH
23083: LD_VAR 0 4
23087: PPUSH
23088: LD_VAR 0 5
23092: PPUSH
23093: LD_INT 1
23095: PPUSH
23096: CALL_OW 48
// end ;
23100: LD_VAR 0 6
23104: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23105: LD_INT 0
23107: PPUSH
23108: PPUSH
// uc_side := your_side ;
23109: LD_ADDR_OWVAR 20
23113: PUSH
23114: LD_OWVAR 2
23118: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: IN
23146: IFFALSE 23158
// uc_nation := nation_american else
23148: LD_ADDR_OWVAR 21
23152: PUSH
23153: LD_INT 1
23155: ST_TO_ADDR
23156: GO 23201
// if chassis in [ 11 , 12 , 13 , 14 ] then
23158: LD_VAR 0 1
23162: PUSH
23163: LD_INT 11
23165: PUSH
23166: LD_INT 12
23168: PUSH
23169: LD_INT 13
23171: PUSH
23172: LD_INT 14
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: IN
23181: IFFALSE 23193
// uc_nation := nation_arabian else
23183: LD_ADDR_OWVAR 21
23187: PUSH
23188: LD_INT 2
23190: ST_TO_ADDR
23191: GO 23201
// uc_nation := nation_russian ;
23193: LD_ADDR_OWVAR 21
23197: PUSH
23198: LD_INT 3
23200: ST_TO_ADDR
// vc_chassis := chassis ;
23201: LD_ADDR_OWVAR 37
23205: PUSH
23206: LD_VAR 0 1
23210: ST_TO_ADDR
// vc_engine := engine ;
23211: LD_ADDR_OWVAR 39
23215: PUSH
23216: LD_VAR 0 2
23220: ST_TO_ADDR
// vc_control := control ;
23221: LD_ADDR_OWVAR 38
23225: PUSH
23226: LD_VAR 0 3
23230: ST_TO_ADDR
// vc_weapon := weapon ;
23231: LD_ADDR_OWVAR 40
23235: PUSH
23236: LD_VAR 0 4
23240: ST_TO_ADDR
// un := CreateVehicle ;
23241: LD_ADDR_VAR 0 8
23245: PUSH
23246: CALL_OW 45
23250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23251: LD_VAR 0 8
23255: PPUSH
23256: LD_INT 0
23258: PPUSH
23259: LD_INT 5
23261: PPUSH
23262: CALL_OW 12
23266: PPUSH
23267: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23271: LD_VAR 0 8
23275: PPUSH
23276: LD_VAR 0 5
23280: PPUSH
23281: LD_VAR 0 6
23285: PPUSH
23286: LD_INT 1
23288: PPUSH
23289: CALL_OW 48
// end ;
23293: LD_VAR 0 7
23297: RET
// export hInvincible ; every 1 do
23298: GO 23300
23300: DISABLE
// hInvincible := [ ] ;
23301: LD_ADDR_EXP 83
23305: PUSH
23306: EMPTY
23307: ST_TO_ADDR
23308: END
// every 10 do var i ;
23309: GO 23311
23311: DISABLE
23312: LD_INT 0
23314: PPUSH
// begin enable ;
23315: ENABLE
// if not hInvincible then
23316: LD_EXP 83
23320: NOT
23321: IFFALSE 23325
// exit ;
23323: GO 23369
// for i in hInvincible do
23325: LD_ADDR_VAR 0 1
23329: PUSH
23330: LD_EXP 83
23334: PUSH
23335: FOR_IN
23336: IFFALSE 23367
// if GetLives ( i ) < 1000 then
23338: LD_VAR 0 1
23342: PPUSH
23343: CALL_OW 256
23347: PUSH
23348: LD_INT 1000
23350: LESS
23351: IFFALSE 23365
// SetLives ( i , 1000 ) ;
23353: LD_VAR 0 1
23357: PPUSH
23358: LD_INT 1000
23360: PPUSH
23361: CALL_OW 234
23365: GO 23335
23367: POP
23368: POP
// end ;
23369: PPOPN 1
23371: END
// export function hHackInvincible ; var i ; begin
23372: LD_INT 0
23374: PPUSH
23375: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 21
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 21
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: PPUSH
23409: CALL_OW 69
23413: PUSH
23414: FOR_IN
23415: IFFALSE 23476
// if IsSelected ( i ) then
23417: LD_VAR 0 2
23421: PPUSH
23422: CALL_OW 306
23426: IFFALSE 23474
// begin if i in hInvincible then
23428: LD_VAR 0 2
23432: PUSH
23433: LD_EXP 83
23437: IN
23438: IFFALSE 23458
// hInvincible := hInvincible diff i else
23440: LD_ADDR_EXP 83
23444: PUSH
23445: LD_EXP 83
23449: PUSH
23450: LD_VAR 0 2
23454: DIFF
23455: ST_TO_ADDR
23456: GO 23474
// hInvincible := hInvincible union i ;
23458: LD_ADDR_EXP 83
23462: PUSH
23463: LD_EXP 83
23467: PUSH
23468: LD_VAR 0 2
23472: UNION
23473: ST_TO_ADDR
// end ;
23474: GO 23414
23476: POP
23477: POP
// end ;
23478: LD_VAR 0 1
23482: RET
// export function hHackInvisible ; var i , j ; begin
23483: LD_INT 0
23485: PPUSH
23486: PPUSH
23487: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23488: LD_ADDR_VAR 0 2
23492: PUSH
23493: LD_INT 21
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PPUSH
23503: CALL_OW 69
23507: PUSH
23508: FOR_IN
23509: IFFALSE 23533
// if IsSelected ( i ) then
23511: LD_VAR 0 2
23515: PPUSH
23516: CALL_OW 306
23520: IFFALSE 23531
// ComForceInvisible ( i ) ;
23522: LD_VAR 0 2
23526: PPUSH
23527: CALL_OW 496
23531: GO 23508
23533: POP
23534: POP
// end ;
23535: LD_VAR 0 1
23539: RET
// export function hHackChangeYourSide ; begin
23540: LD_INT 0
23542: PPUSH
// if your_side = 8 then
23543: LD_OWVAR 2
23547: PUSH
23548: LD_INT 8
23550: EQUAL
23551: IFFALSE 23563
// your_side := 0 else
23553: LD_ADDR_OWVAR 2
23557: PUSH
23558: LD_INT 0
23560: ST_TO_ADDR
23561: GO 23577
// your_side := your_side + 1 ;
23563: LD_ADDR_OWVAR 2
23567: PUSH
23568: LD_OWVAR 2
23572: PUSH
23573: LD_INT 1
23575: PLUS
23576: ST_TO_ADDR
// end ;
23577: LD_VAR 0 1
23581: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23582: LD_INT 0
23584: PPUSH
23585: PPUSH
23586: PPUSH
// for i in all_units do
23587: LD_ADDR_VAR 0 2
23591: PUSH
23592: LD_OWVAR 3
23596: PUSH
23597: FOR_IN
23598: IFFALSE 23676
// if IsSelected ( i ) then
23600: LD_VAR 0 2
23604: PPUSH
23605: CALL_OW 306
23609: IFFALSE 23674
// begin j := GetSide ( i ) ;
23611: LD_ADDR_VAR 0 3
23615: PUSH
23616: LD_VAR 0 2
23620: PPUSH
23621: CALL_OW 255
23625: ST_TO_ADDR
// if j = 8 then
23626: LD_VAR 0 3
23630: PUSH
23631: LD_INT 8
23633: EQUAL
23634: IFFALSE 23646
// j := 0 else
23636: LD_ADDR_VAR 0 3
23640: PUSH
23641: LD_INT 0
23643: ST_TO_ADDR
23644: GO 23660
// j := j + 1 ;
23646: LD_ADDR_VAR 0 3
23650: PUSH
23651: LD_VAR 0 3
23655: PUSH
23656: LD_INT 1
23658: PLUS
23659: ST_TO_ADDR
// SetSide ( i , j ) ;
23660: LD_VAR 0 2
23664: PPUSH
23665: LD_VAR 0 3
23669: PPUSH
23670: CALL_OW 235
// end ;
23674: GO 23597
23676: POP
23677: POP
// end ;
23678: LD_VAR 0 1
23682: RET
// export function hHackFog ; begin
23683: LD_INT 0
23685: PPUSH
// FogOff ( true ) ;
23686: LD_INT 1
23688: PPUSH
23689: CALL_OW 344
// end ;
23693: LD_VAR 0 1
23697: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23698: LD_INT 0
23700: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23701: LD_VAR 0 1
23705: PPUSH
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 1
23718: PPUSH
23719: LD_INT 1
23721: PPUSH
23722: CALL_OW 483
// CenterOnXY ( x , y ) ;
23726: LD_VAR 0 2
23730: PPUSH
23731: LD_VAR 0 3
23735: PPUSH
23736: CALL_OW 84
// end ; end_of_file end_of_file
23740: LD_VAR 0 4
23744: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23745: LD_INT 0
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23751: LD_VAR 0 1
23755: PPUSH
23756: CALL_OW 264
23760: PUSH
23761: LD_EXP 100
23765: EQUAL
23766: IFFALSE 23838
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23768: LD_INT 68
23770: PPUSH
23771: LD_VAR 0 1
23775: PPUSH
23776: CALL_OW 255
23780: PPUSH
23781: CALL_OW 321
23785: PUSH
23786: LD_INT 2
23788: EQUAL
23789: IFFALSE 23801
// eff := 70 else
23791: LD_ADDR_VAR 0 4
23795: PUSH
23796: LD_INT 70
23798: ST_TO_ADDR
23799: GO 23809
// eff := 30 ;
23801: LD_ADDR_VAR 0 4
23805: PUSH
23806: LD_INT 30
23808: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 250
23818: PPUSH
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 251
23828: PPUSH
23829: LD_VAR 0 4
23833: PPUSH
23834: CALL_OW 495
// end ; end ;
23838: LD_VAR 0 2
23842: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23843: LD_INT 0
23845: PPUSH
// end ;
23846: LD_VAR 0 4
23850: RET
// export function SOS_Command ( cmd ) ; begin
23851: LD_INT 0
23853: PPUSH
// end ;
23854: LD_VAR 0 2
23858: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23859: LD_INT 0
23861: PPUSH
// end ;
23862: LD_VAR 0 6
23866: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23867: LD_INT 0
23869: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23870: LD_VAR 0 1
23874: PUSH
23875: LD_INT 250
23877: EQUAL
23878: PUSH
23879: LD_VAR 0 2
23883: PPUSH
23884: CALL_OW 264
23888: PUSH
23889: LD_EXP 103
23893: EQUAL
23894: AND
23895: IFFALSE 23916
// MinerPlaceMine ( unit , x , y ) ;
23897: LD_VAR 0 2
23901: PPUSH
23902: LD_VAR 0 4
23906: PPUSH
23907: LD_VAR 0 5
23911: PPUSH
23912: CALL 26265 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23916: LD_VAR 0 1
23920: PUSH
23921: LD_INT 251
23923: EQUAL
23924: PUSH
23925: LD_VAR 0 2
23929: PPUSH
23930: CALL_OW 264
23934: PUSH
23935: LD_EXP 103
23939: EQUAL
23940: AND
23941: IFFALSE 23962
// MinerDetonateMine ( unit , x , y ) ;
23943: LD_VAR 0 2
23947: PPUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: LD_VAR 0 5
23957: PPUSH
23958: CALL 26542 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23962: LD_VAR 0 1
23966: PUSH
23967: LD_INT 252
23969: EQUAL
23970: PUSH
23971: LD_VAR 0 2
23975: PPUSH
23976: CALL_OW 264
23980: PUSH
23981: LD_EXP 103
23985: EQUAL
23986: AND
23987: IFFALSE 24008
// MinerCreateMinefield ( unit , x , y ) ;
23989: LD_VAR 0 2
23993: PPUSH
23994: LD_VAR 0 4
23998: PPUSH
23999: LD_VAR 0 5
24003: PPUSH
24004: CALL 26959 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 253
24015: EQUAL
24016: PUSH
24017: LD_VAR 0 2
24021: PPUSH
24022: CALL_OW 257
24026: PUSH
24027: LD_INT 5
24029: EQUAL
24030: AND
24031: IFFALSE 24052
// ComBinocular ( unit , x , y ) ;
24033: LD_VAR 0 2
24037: PPUSH
24038: LD_VAR 0 4
24042: PPUSH
24043: LD_VAR 0 5
24047: PPUSH
24048: CALL 27330 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24052: LD_VAR 0 1
24056: PUSH
24057: LD_INT 254
24059: EQUAL
24060: PUSH
24061: LD_VAR 0 2
24065: PPUSH
24066: CALL_OW 264
24070: PUSH
24071: LD_EXP 98
24075: EQUAL
24076: AND
24077: PUSH
24078: LD_VAR 0 3
24082: PPUSH
24083: CALL_OW 263
24087: PUSH
24088: LD_INT 3
24090: EQUAL
24091: AND
24092: IFFALSE 24108
// HackDestroyVehicle ( unit , selectedUnit ) ;
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_VAR 0 3
24103: PPUSH
24104: CALL 25625 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24108: LD_VAR 0 1
24112: PUSH
24113: LD_INT 255
24115: EQUAL
24116: PUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: CALL_OW 264
24126: PUSH
24127: LD_INT 14
24129: PUSH
24130: LD_INT 53
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: IN
24137: AND
24138: PUSH
24139: LD_VAR 0 4
24143: PPUSH
24144: LD_VAR 0 5
24148: PPUSH
24149: CALL_OW 488
24153: AND
24154: IFFALSE 24178
// CutTreeXYR ( unit , x , y , 12 ) ;
24156: LD_VAR 0 2
24160: PPUSH
24161: LD_VAR 0 4
24165: PPUSH
24166: LD_VAR 0 5
24170: PPUSH
24171: LD_INT 12
24173: PPUSH
24174: CALL 24191 0 4
// end ;
24178: LD_VAR 0 6
24182: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24183: LD_INT 0
24185: PPUSH
// end ;
24186: LD_VAR 0 4
24190: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24191: LD_INT 0
24193: PPUSH
24194: PPUSH
24195: PPUSH
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
24201: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24202: LD_VAR 0 1
24206: NOT
24207: PUSH
24208: LD_VAR 0 2
24212: PPUSH
24213: LD_VAR 0 3
24217: PPUSH
24218: CALL_OW 488
24222: NOT
24223: OR
24224: PUSH
24225: LD_VAR 0 4
24229: NOT
24230: OR
24231: IFFALSE 24235
// exit ;
24233: GO 24575
// list := [ ] ;
24235: LD_ADDR_VAR 0 13
24239: PUSH
24240: EMPTY
24241: ST_TO_ADDR
// if x - r < 0 then
24242: LD_VAR 0 2
24246: PUSH
24247: LD_VAR 0 4
24251: MINUS
24252: PUSH
24253: LD_INT 0
24255: LESS
24256: IFFALSE 24268
// min_x := 0 else
24258: LD_ADDR_VAR 0 7
24262: PUSH
24263: LD_INT 0
24265: ST_TO_ADDR
24266: GO 24284
// min_x := x - r ;
24268: LD_ADDR_VAR 0 7
24272: PUSH
24273: LD_VAR 0 2
24277: PUSH
24278: LD_VAR 0 4
24282: MINUS
24283: ST_TO_ADDR
// if y - r < 0 then
24284: LD_VAR 0 3
24288: PUSH
24289: LD_VAR 0 4
24293: MINUS
24294: PUSH
24295: LD_INT 0
24297: LESS
24298: IFFALSE 24310
// min_y := 0 else
24300: LD_ADDR_VAR 0 8
24304: PUSH
24305: LD_INT 0
24307: ST_TO_ADDR
24308: GO 24326
// min_y := y - r ;
24310: LD_ADDR_VAR 0 8
24314: PUSH
24315: LD_VAR 0 3
24319: PUSH
24320: LD_VAR 0 4
24324: MINUS
24325: ST_TO_ADDR
// max_x := x + r ;
24326: LD_ADDR_VAR 0 9
24330: PUSH
24331: LD_VAR 0 2
24335: PUSH
24336: LD_VAR 0 4
24340: PLUS
24341: ST_TO_ADDR
// max_y := y + r ;
24342: LD_ADDR_VAR 0 10
24346: PUSH
24347: LD_VAR 0 3
24351: PUSH
24352: LD_VAR 0 4
24356: PLUS
24357: ST_TO_ADDR
// for _x = min_x to max_x do
24358: LD_ADDR_VAR 0 11
24362: PUSH
24363: DOUBLE
24364: LD_VAR 0 7
24368: DEC
24369: ST_TO_ADDR
24370: LD_VAR 0 9
24374: PUSH
24375: FOR_TO
24376: IFFALSE 24493
// for _y = min_y to max_y do
24378: LD_ADDR_VAR 0 12
24382: PUSH
24383: DOUBLE
24384: LD_VAR 0 8
24388: DEC
24389: ST_TO_ADDR
24390: LD_VAR 0 10
24394: PUSH
24395: FOR_TO
24396: IFFALSE 24489
// begin if not ValidHex ( _x , _y ) then
24398: LD_VAR 0 11
24402: PPUSH
24403: LD_VAR 0 12
24407: PPUSH
24408: CALL_OW 488
24412: NOT
24413: IFFALSE 24417
// continue ;
24415: GO 24395
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24417: LD_VAR 0 11
24421: PPUSH
24422: LD_VAR 0 12
24426: PPUSH
24427: CALL_OW 351
24431: PUSH
24432: LD_VAR 0 11
24436: PPUSH
24437: LD_VAR 0 12
24441: PPUSH
24442: CALL_OW 554
24446: AND
24447: IFFALSE 24487
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24449: LD_ADDR_VAR 0 13
24453: PUSH
24454: LD_VAR 0 13
24458: PPUSH
24459: LD_VAR 0 13
24463: PUSH
24464: LD_INT 1
24466: PLUS
24467: PPUSH
24468: LD_VAR 0 11
24472: PUSH
24473: LD_VAR 0 12
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PPUSH
24482: CALL_OW 2
24486: ST_TO_ADDR
// end ;
24487: GO 24395
24489: POP
24490: POP
24491: GO 24375
24493: POP
24494: POP
// if not list then
24495: LD_VAR 0 13
24499: NOT
24500: IFFALSE 24504
// exit ;
24502: GO 24575
// for i in list do
24504: LD_ADDR_VAR 0 6
24508: PUSH
24509: LD_VAR 0 13
24513: PUSH
24514: FOR_IN
24515: IFFALSE 24573
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24517: LD_VAR 0 1
24521: PPUSH
24522: LD_STRING M
24524: PUSH
24525: LD_VAR 0 6
24529: PUSH
24530: LD_INT 1
24532: ARRAY
24533: PUSH
24534: LD_VAR 0 6
24538: PUSH
24539: LD_INT 2
24541: ARRAY
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: PUSH
24564: EMPTY
24565: LIST
24566: PPUSH
24567: CALL_OW 447
24571: GO 24514
24573: POP
24574: POP
// end ;
24575: LD_VAR 0 5
24579: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24580: LD_EXP 86
24584: NOT
24585: IFFALSE 24635
24587: GO 24589
24589: DISABLE
// begin initHack := true ;
24590: LD_ADDR_EXP 86
24594: PUSH
24595: LD_INT 1
24597: ST_TO_ADDR
// hackTanks := [ ] ;
24598: LD_ADDR_EXP 87
24602: PUSH
24603: EMPTY
24604: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24605: LD_ADDR_EXP 88
24609: PUSH
24610: EMPTY
24611: ST_TO_ADDR
// hackLimit := 3 ;
24612: LD_ADDR_EXP 89
24616: PUSH
24617: LD_INT 3
24619: ST_TO_ADDR
// hackDist := 12 ;
24620: LD_ADDR_EXP 90
24624: PUSH
24625: LD_INT 12
24627: ST_TO_ADDR
// hackCounter := [ ] ;
24628: LD_ADDR_EXP 91
24632: PUSH
24633: EMPTY
24634: ST_TO_ADDR
// end ;
24635: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24636: LD_EXP 86
24640: PUSH
24641: LD_INT 34
24643: PUSH
24644: LD_EXP 98
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PPUSH
24653: CALL_OW 69
24657: AND
24658: IFFALSE 24913
24660: GO 24662
24662: DISABLE
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
// begin enable ;
24667: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24668: LD_ADDR_VAR 0 1
24672: PUSH
24673: LD_INT 34
24675: PUSH
24676: LD_EXP 98
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PPUSH
24685: CALL_OW 69
24689: PUSH
24690: FOR_IN
24691: IFFALSE 24911
// begin if not i in hackTanks then
24693: LD_VAR 0 1
24697: PUSH
24698: LD_EXP 87
24702: IN
24703: NOT
24704: IFFALSE 24787
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24706: LD_ADDR_EXP 87
24710: PUSH
24711: LD_EXP 87
24715: PPUSH
24716: LD_EXP 87
24720: PUSH
24721: LD_INT 1
24723: PLUS
24724: PPUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 1
24734: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24735: LD_ADDR_EXP 88
24739: PUSH
24740: LD_EXP 88
24744: PPUSH
24745: LD_EXP 88
24749: PUSH
24750: LD_INT 1
24752: PLUS
24753: PPUSH
24754: EMPTY
24755: PPUSH
24756: CALL_OW 1
24760: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24761: LD_ADDR_EXP 91
24765: PUSH
24766: LD_EXP 91
24770: PPUSH
24771: LD_EXP 91
24775: PUSH
24776: LD_INT 1
24778: PLUS
24779: PPUSH
24780: EMPTY
24781: PPUSH
24782: CALL_OW 1
24786: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL_OW 302
24796: NOT
24797: IFFALSE 24810
// begin HackUnlinkAll ( i ) ;
24799: LD_VAR 0 1
24803: PPUSH
24804: CALL 24916 0 1
// continue ;
24808: GO 24690
// end ; HackCheckCapturedStatus ( i ) ;
24810: LD_VAR 0 1
24814: PPUSH
24815: CALL 25359 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24819: LD_ADDR_VAR 0 2
24823: PUSH
24824: LD_INT 81
24826: PUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: CALL_OW 255
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 33
24843: PUSH
24844: LD_INT 3
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 91
24853: PUSH
24854: LD_VAR 0 1
24858: PUSH
24859: LD_EXP 90
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 50
24871: PUSH
24872: EMPTY
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: PPUSH
24881: CALL_OW 69
24885: ST_TO_ADDR
// if not tmp then
24886: LD_VAR 0 2
24890: NOT
24891: IFFALSE 24895
// continue ;
24893: GO 24690
// HackLink ( i , tmp ) ;
24895: LD_VAR 0 1
24899: PPUSH
24900: LD_VAR 0 2
24904: PPUSH
24905: CALL 25052 0 2
// end ;
24909: GO 24690
24911: POP
24912: POP
// end ;
24913: PPOPN 2
24915: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24916: LD_INT 0
24918: PPUSH
24919: PPUSH
24920: PPUSH
// if not hack in hackTanks then
24921: LD_VAR 0 1
24925: PUSH
24926: LD_EXP 87
24930: IN
24931: NOT
24932: IFFALSE 24936
// exit ;
24934: GO 25047
// index := GetElementIndex ( hackTanks , hack ) ;
24936: LD_ADDR_VAR 0 4
24940: PUSH
24941: LD_EXP 87
24945: PPUSH
24946: LD_VAR 0 1
24950: PPUSH
24951: CALL 32689 0 2
24955: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24956: LD_EXP 88
24960: PUSH
24961: LD_VAR 0 4
24965: ARRAY
24966: IFFALSE 25047
// begin for i in hackTanksCaptured [ index ] do
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_EXP 88
24977: PUSH
24978: LD_VAR 0 4
24982: ARRAY
24983: PUSH
24984: FOR_IN
24985: IFFALSE 25011
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24987: LD_VAR 0 3
24991: PUSH
24992: LD_INT 1
24994: ARRAY
24995: PPUSH
24996: LD_VAR 0 3
25000: PUSH
25001: LD_INT 2
25003: ARRAY
25004: PPUSH
25005: CALL_OW 235
25009: GO 24984
25011: POP
25012: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25013: LD_ADDR_EXP 88
25017: PUSH
25018: LD_EXP 88
25022: PPUSH
25023: LD_VAR 0 4
25027: PPUSH
25028: EMPTY
25029: PPUSH
25030: CALL_OW 1
25034: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25035: LD_VAR 0 1
25039: PPUSH
25040: LD_INT 0
25042: PPUSH
25043: CALL_OW 505
// end ; end ;
25047: LD_VAR 0 2
25051: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25052: LD_INT 0
25054: PPUSH
25055: PPUSH
25056: PPUSH
// if not hack in hackTanks or not vehicles then
25057: LD_VAR 0 1
25061: PUSH
25062: LD_EXP 87
25066: IN
25067: NOT
25068: PUSH
25069: LD_VAR 0 2
25073: NOT
25074: OR
25075: IFFALSE 25079
// exit ;
25077: GO 25354
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25079: LD_ADDR_VAR 0 2
25083: PUSH
25084: LD_VAR 0 1
25088: PPUSH
25089: LD_VAR 0 2
25093: PPUSH
25094: LD_INT 1
25096: PPUSH
25097: LD_INT 1
25099: PPUSH
25100: CALL 33339 0 4
25104: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25105: LD_ADDR_VAR 0 5
25109: PUSH
25110: LD_EXP 87
25114: PPUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL 32689 0 2
25124: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25125: LD_EXP 88
25129: PUSH
25130: LD_VAR 0 5
25134: ARRAY
25135: PUSH
25136: LD_EXP 89
25140: LESS
25141: IFFALSE 25330
// begin for i := 1 to vehicles do
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: DOUBLE
25149: LD_INT 1
25151: DEC
25152: ST_TO_ADDR
25153: LD_VAR 0 2
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25328
// begin if hackTanksCaptured [ index ] = hackLimit then
25161: LD_EXP 88
25165: PUSH
25166: LD_VAR 0 5
25170: ARRAY
25171: PUSH
25172: LD_EXP 89
25176: EQUAL
25177: IFFALSE 25181
// break ;
25179: GO 25328
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25181: LD_ADDR_EXP 91
25185: PUSH
25186: LD_EXP 91
25190: PPUSH
25191: LD_VAR 0 5
25195: PPUSH
25196: LD_EXP 91
25200: PUSH
25201: LD_VAR 0 5
25205: ARRAY
25206: PUSH
25207: LD_INT 1
25209: PLUS
25210: PPUSH
25211: CALL_OW 1
25215: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25216: LD_ADDR_EXP 88
25220: PUSH
25221: LD_EXP 88
25225: PPUSH
25226: LD_VAR 0 5
25230: PUSH
25231: LD_EXP 88
25235: PUSH
25236: LD_VAR 0 5
25240: ARRAY
25241: PUSH
25242: LD_INT 1
25244: PLUS
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: LD_VAR 0 2
25254: PUSH
25255: LD_VAR 0 4
25259: ARRAY
25260: PUSH
25261: LD_VAR 0 2
25265: PUSH
25266: LD_VAR 0 4
25270: ARRAY
25271: PPUSH
25272: CALL_OW 255
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PPUSH
25281: CALL 32904 0 3
25285: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25286: LD_VAR 0 2
25290: PUSH
25291: LD_VAR 0 4
25295: ARRAY
25296: PPUSH
25297: LD_VAR 0 1
25301: PPUSH
25302: CALL_OW 255
25306: PPUSH
25307: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25311: LD_VAR 0 2
25315: PUSH
25316: LD_VAR 0 4
25320: ARRAY
25321: PPUSH
25322: CALL_OW 141
// end ;
25326: GO 25158
25328: POP
25329: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25330: LD_VAR 0 1
25334: PPUSH
25335: LD_EXP 88
25339: PUSH
25340: LD_VAR 0 5
25344: ARRAY
25345: PUSH
25346: LD_INT 0
25348: PLUS
25349: PPUSH
25350: CALL_OW 505
// end ;
25354: LD_VAR 0 3
25358: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25359: LD_INT 0
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
// if not hack in hackTanks then
25365: LD_VAR 0 1
25369: PUSH
25370: LD_EXP 87
25374: IN
25375: NOT
25376: IFFALSE 25380
// exit ;
25378: GO 25620
// index := GetElementIndex ( hackTanks , hack ) ;
25380: LD_ADDR_VAR 0 4
25384: PUSH
25385: LD_EXP 87
25389: PPUSH
25390: LD_VAR 0 1
25394: PPUSH
25395: CALL 32689 0 2
25399: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: DOUBLE
25406: LD_EXP 88
25410: PUSH
25411: LD_VAR 0 4
25415: ARRAY
25416: INC
25417: ST_TO_ADDR
25418: LD_INT 1
25420: PUSH
25421: FOR_DOWNTO
25422: IFFALSE 25594
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25424: LD_ADDR_VAR 0 5
25428: PUSH
25429: LD_EXP 88
25433: PUSH
25434: LD_VAR 0 4
25438: ARRAY
25439: PUSH
25440: LD_VAR 0 3
25444: ARRAY
25445: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25446: LD_VAR 0 5
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: PPUSH
25455: CALL_OW 302
25459: NOT
25460: PUSH
25461: LD_VAR 0 5
25465: PUSH
25466: LD_INT 1
25468: ARRAY
25469: PPUSH
25470: CALL_OW 255
25474: PUSH
25475: LD_VAR 0 1
25479: PPUSH
25480: CALL_OW 255
25484: NONEQUAL
25485: OR
25486: IFFALSE 25592
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25488: LD_VAR 0 5
25492: PUSH
25493: LD_INT 1
25495: ARRAY
25496: PPUSH
25497: CALL_OW 305
25501: PUSH
25502: LD_VAR 0 5
25506: PUSH
25507: LD_INT 1
25509: ARRAY
25510: PPUSH
25511: CALL_OW 255
25515: PUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 255
25525: EQUAL
25526: AND
25527: IFFALSE 25551
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25529: LD_VAR 0 5
25533: PUSH
25534: LD_INT 1
25536: ARRAY
25537: PPUSH
25538: LD_VAR 0 5
25542: PUSH
25543: LD_INT 2
25545: ARRAY
25546: PPUSH
25547: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25551: LD_ADDR_EXP 88
25555: PUSH
25556: LD_EXP 88
25560: PPUSH
25561: LD_VAR 0 4
25565: PPUSH
25566: LD_EXP 88
25570: PUSH
25571: LD_VAR 0 4
25575: ARRAY
25576: PPUSH
25577: LD_VAR 0 3
25581: PPUSH
25582: CALL_OW 3
25586: PPUSH
25587: CALL_OW 1
25591: ST_TO_ADDR
// end ; end ;
25592: GO 25421
25594: POP
25595: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25596: LD_VAR 0 1
25600: PPUSH
25601: LD_EXP 88
25605: PUSH
25606: LD_VAR 0 4
25610: ARRAY
25611: PUSH
25612: LD_INT 0
25614: PLUS
25615: PPUSH
25616: CALL_OW 505
// end ;
25620: LD_VAR 0 2
25624: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25625: LD_INT 0
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
// if not hack in hackTanks then
25631: LD_VAR 0 1
25635: PUSH
25636: LD_EXP 87
25640: IN
25641: NOT
25642: IFFALSE 25646
// exit ;
25644: GO 25731
// index := GetElementIndex ( hackTanks , hack ) ;
25646: LD_ADDR_VAR 0 5
25650: PUSH
25651: LD_EXP 87
25655: PPUSH
25656: LD_VAR 0 1
25660: PPUSH
25661: CALL 32689 0 2
25665: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25666: LD_ADDR_VAR 0 4
25670: PUSH
25671: DOUBLE
25672: LD_INT 1
25674: DEC
25675: ST_TO_ADDR
25676: LD_EXP 88
25680: PUSH
25681: LD_VAR 0 5
25685: ARRAY
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25729
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25690: LD_EXP 88
25694: PUSH
25695: LD_VAR 0 5
25699: ARRAY
25700: PUSH
25701: LD_VAR 0 4
25705: ARRAY
25706: PUSH
25707: LD_INT 1
25709: ARRAY
25710: PUSH
25711: LD_VAR 0 2
25715: EQUAL
25716: IFFALSE 25727
// KillUnit ( vehicle ) ;
25718: LD_VAR 0 2
25722: PPUSH
25723: CALL_OW 66
25727: GO 25687
25729: POP
25730: POP
// end ;
25731: LD_VAR 0 3
25735: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25736: LD_EXP 92
25740: NOT
25741: IFFALSE 25776
25743: GO 25745
25745: DISABLE
// begin initMiner := true ;
25746: LD_ADDR_EXP 92
25750: PUSH
25751: LD_INT 1
25753: ST_TO_ADDR
// minersList := [ ] ;
25754: LD_ADDR_EXP 93
25758: PUSH
25759: EMPTY
25760: ST_TO_ADDR
// minerMinesList := [ ] ;
25761: LD_ADDR_EXP 94
25765: PUSH
25766: EMPTY
25767: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25768: LD_ADDR_EXP 95
25772: PUSH
25773: LD_INT 5
25775: ST_TO_ADDR
// end ;
25776: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25777: LD_EXP 92
25781: PUSH
25782: LD_INT 34
25784: PUSH
25785: LD_EXP 103
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PPUSH
25794: CALL_OW 69
25798: AND
25799: IFFALSE 26262
25801: GO 25803
25803: DISABLE
25804: LD_INT 0
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
// begin enable ;
25810: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25811: LD_ADDR_VAR 0 1
25815: PUSH
25816: LD_INT 34
25818: PUSH
25819: LD_EXP 103
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PPUSH
25828: CALL_OW 69
25832: PUSH
25833: FOR_IN
25834: IFFALSE 25906
// begin if not i in minersList then
25836: LD_VAR 0 1
25840: PUSH
25841: LD_EXP 93
25845: IN
25846: NOT
25847: IFFALSE 25904
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25849: LD_ADDR_EXP 93
25853: PUSH
25854: LD_EXP 93
25858: PPUSH
25859: LD_EXP 93
25863: PUSH
25864: LD_INT 1
25866: PLUS
25867: PPUSH
25868: LD_VAR 0 1
25872: PPUSH
25873: CALL_OW 1
25877: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25878: LD_ADDR_EXP 94
25882: PUSH
25883: LD_EXP 94
25887: PPUSH
25888: LD_EXP 94
25892: PUSH
25893: LD_INT 1
25895: PLUS
25896: PPUSH
25897: EMPTY
25898: PPUSH
25899: CALL_OW 1
25903: ST_TO_ADDR
// end end ;
25904: GO 25833
25906: POP
25907: POP
// for i := minerMinesList downto 1 do
25908: LD_ADDR_VAR 0 1
25912: PUSH
25913: DOUBLE
25914: LD_EXP 94
25918: INC
25919: ST_TO_ADDR
25920: LD_INT 1
25922: PUSH
25923: FOR_DOWNTO
25924: IFFALSE 26260
// begin if IsLive ( minersList [ i ] ) then
25926: LD_EXP 93
25930: PUSH
25931: LD_VAR 0 1
25935: ARRAY
25936: PPUSH
25937: CALL_OW 300
25941: IFFALSE 25969
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25943: LD_EXP 93
25947: PUSH
25948: LD_VAR 0 1
25952: ARRAY
25953: PPUSH
25954: LD_EXP 94
25958: PUSH
25959: LD_VAR 0 1
25963: ARRAY
25964: PPUSH
25965: CALL_OW 505
// if not minerMinesList [ i ] then
25969: LD_EXP 94
25973: PUSH
25974: LD_VAR 0 1
25978: ARRAY
25979: NOT
25980: IFFALSE 25984
// continue ;
25982: GO 25923
// for j := minerMinesList [ i ] downto 1 do
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: DOUBLE
25990: LD_EXP 94
25994: PUSH
25995: LD_VAR 0 1
25999: ARRAY
26000: INC
26001: ST_TO_ADDR
26002: LD_INT 1
26004: PUSH
26005: FOR_DOWNTO
26006: IFFALSE 26256
// begin side := GetSide ( minersList [ i ] ) ;
26008: LD_ADDR_VAR 0 3
26012: PUSH
26013: LD_EXP 93
26017: PUSH
26018: LD_VAR 0 1
26022: ARRAY
26023: PPUSH
26024: CALL_OW 255
26028: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26029: LD_ADDR_VAR 0 4
26033: PUSH
26034: LD_EXP 94
26038: PUSH
26039: LD_VAR 0 1
26043: ARRAY
26044: PUSH
26045: LD_VAR 0 2
26049: ARRAY
26050: PUSH
26051: LD_INT 1
26053: ARRAY
26054: PPUSH
26055: LD_EXP 94
26059: PUSH
26060: LD_VAR 0 1
26064: ARRAY
26065: PUSH
26066: LD_VAR 0 2
26070: ARRAY
26071: PUSH
26072: LD_INT 2
26074: ARRAY
26075: PPUSH
26076: CALL_OW 428
26080: ST_TO_ADDR
// if not tmp then
26081: LD_VAR 0 4
26085: NOT
26086: IFFALSE 26090
// continue ;
26088: GO 26005
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26090: LD_VAR 0 4
26094: PUSH
26095: LD_INT 81
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PPUSH
26107: CALL_OW 69
26111: IN
26112: PUSH
26113: LD_EXP 94
26117: PUSH
26118: LD_VAR 0 1
26122: ARRAY
26123: PUSH
26124: LD_VAR 0 2
26128: ARRAY
26129: PUSH
26130: LD_INT 1
26132: ARRAY
26133: PPUSH
26134: LD_EXP 94
26138: PUSH
26139: LD_VAR 0 1
26143: ARRAY
26144: PUSH
26145: LD_VAR 0 2
26149: ARRAY
26150: PUSH
26151: LD_INT 2
26153: ARRAY
26154: PPUSH
26155: CALL_OW 458
26159: AND
26160: IFFALSE 26254
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26162: LD_EXP 94
26166: PUSH
26167: LD_VAR 0 1
26171: ARRAY
26172: PUSH
26173: LD_VAR 0 2
26177: ARRAY
26178: PUSH
26179: LD_INT 1
26181: ARRAY
26182: PPUSH
26183: LD_EXP 94
26187: PUSH
26188: LD_VAR 0 1
26192: ARRAY
26193: PUSH
26194: LD_VAR 0 2
26198: ARRAY
26199: PUSH
26200: LD_INT 2
26202: ARRAY
26203: PPUSH
26204: LD_VAR 0 3
26208: PPUSH
26209: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26213: LD_ADDR_EXP 94
26217: PUSH
26218: LD_EXP 94
26222: PPUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: LD_EXP 94
26232: PUSH
26233: LD_VAR 0 1
26237: ARRAY
26238: PPUSH
26239: LD_VAR 0 2
26243: PPUSH
26244: CALL_OW 3
26248: PPUSH
26249: CALL_OW 1
26253: ST_TO_ADDR
// end ; end ;
26254: GO 26005
26256: POP
26257: POP
// end ;
26258: GO 25923
26260: POP
26261: POP
// end ;
26262: PPOPN 4
26264: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26265: LD_INT 0
26267: PPUSH
26268: PPUSH
// result := false ;
26269: LD_ADDR_VAR 0 4
26273: PUSH
26274: LD_INT 0
26276: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26277: LD_VAR 0 1
26281: PPUSH
26282: CALL_OW 264
26286: PUSH
26287: LD_EXP 103
26291: EQUAL
26292: NOT
26293: IFFALSE 26297
// exit ;
26295: GO 26537
// index := GetElementIndex ( minersList , unit ) ;
26297: LD_ADDR_VAR 0 5
26301: PUSH
26302: LD_EXP 93
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL 32689 0 2
26316: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26317: LD_EXP 94
26321: PUSH
26322: LD_VAR 0 5
26326: ARRAY
26327: PUSH
26328: LD_EXP 95
26332: GREATEREQUAL
26333: IFFALSE 26337
// exit ;
26335: GO 26537
// ComMoveXY ( unit , x , y ) ;
26337: LD_VAR 0 1
26341: PPUSH
26342: LD_VAR 0 2
26346: PPUSH
26347: LD_VAR 0 3
26351: PPUSH
26352: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26356: LD_INT 35
26358: PPUSH
26359: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26363: LD_VAR 0 1
26367: PPUSH
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: CALL 63461 0 3
26382: NOT
26383: PUSH
26384: LD_VAR 0 1
26388: PPUSH
26389: CALL_OW 314
26393: AND
26394: IFFALSE 26398
// exit ;
26396: GO 26537
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26398: LD_VAR 0 2
26402: PPUSH
26403: LD_VAR 0 3
26407: PPUSH
26408: CALL_OW 428
26412: PUSH
26413: LD_VAR 0 1
26417: EQUAL
26418: PUSH
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 314
26428: NOT
26429: AND
26430: IFFALSE 26356
// PlaySoundXY ( x , y , PlantMine ) ;
26432: LD_VAR 0 2
26436: PPUSH
26437: LD_VAR 0 3
26441: PPUSH
26442: LD_STRING PlantMine
26444: PPUSH
26445: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26449: LD_VAR 0 2
26453: PPUSH
26454: LD_VAR 0 3
26458: PPUSH
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 255
26468: PPUSH
26469: LD_INT 0
26471: PPUSH
26472: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26476: LD_ADDR_EXP 94
26480: PUSH
26481: LD_EXP 94
26485: PPUSH
26486: LD_VAR 0 5
26490: PUSH
26491: LD_EXP 94
26495: PUSH
26496: LD_VAR 0 5
26500: ARRAY
26501: PUSH
26502: LD_INT 1
26504: PLUS
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PPUSH
26510: LD_VAR 0 2
26514: PUSH
26515: LD_VAR 0 3
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: CALL 32904 0 3
26528: ST_TO_ADDR
// result := true ;
26529: LD_ADDR_VAR 0 4
26533: PUSH
26534: LD_INT 1
26536: ST_TO_ADDR
// end ;
26537: LD_VAR 0 4
26541: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26542: LD_INT 0
26544: PPUSH
26545: PPUSH
26546: PPUSH
// if not unit in minersList then
26547: LD_VAR 0 1
26551: PUSH
26552: LD_EXP 93
26556: IN
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26954
// index := GetElementIndex ( minersList , unit ) ;
26562: LD_ADDR_VAR 0 6
26566: PUSH
26567: LD_EXP 93
26571: PPUSH
26572: LD_VAR 0 1
26576: PPUSH
26577: CALL 32689 0 2
26581: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26582: LD_ADDR_VAR 0 5
26586: PUSH
26587: DOUBLE
26588: LD_EXP 94
26592: PUSH
26593: LD_VAR 0 6
26597: ARRAY
26598: INC
26599: ST_TO_ADDR
26600: LD_INT 1
26602: PUSH
26603: FOR_DOWNTO
26604: IFFALSE 26765
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26606: LD_EXP 94
26610: PUSH
26611: LD_VAR 0 6
26615: ARRAY
26616: PUSH
26617: LD_VAR 0 5
26621: ARRAY
26622: PUSH
26623: LD_INT 1
26625: ARRAY
26626: PUSH
26627: LD_VAR 0 2
26631: EQUAL
26632: PUSH
26633: LD_EXP 94
26637: PUSH
26638: LD_VAR 0 6
26642: ARRAY
26643: PUSH
26644: LD_VAR 0 5
26648: ARRAY
26649: PUSH
26650: LD_INT 2
26652: ARRAY
26653: PUSH
26654: LD_VAR 0 3
26658: EQUAL
26659: AND
26660: IFFALSE 26763
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26662: LD_EXP 94
26666: PUSH
26667: LD_VAR 0 6
26671: ARRAY
26672: PUSH
26673: LD_VAR 0 5
26677: ARRAY
26678: PUSH
26679: LD_INT 1
26681: ARRAY
26682: PPUSH
26683: LD_EXP 94
26687: PUSH
26688: LD_VAR 0 6
26692: ARRAY
26693: PUSH
26694: LD_VAR 0 5
26698: ARRAY
26699: PUSH
26700: LD_INT 2
26702: ARRAY
26703: PPUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: CALL_OW 255
26713: PPUSH
26714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26718: LD_ADDR_EXP 94
26722: PUSH
26723: LD_EXP 94
26727: PPUSH
26728: LD_VAR 0 6
26732: PPUSH
26733: LD_EXP 94
26737: PUSH
26738: LD_VAR 0 6
26742: ARRAY
26743: PPUSH
26744: LD_VAR 0 5
26748: PPUSH
26749: CALL_OW 3
26753: PPUSH
26754: CALL_OW 1
26758: ST_TO_ADDR
// exit ;
26759: POP
26760: POP
26761: GO 26954
// end ; end ;
26763: GO 26603
26765: POP
26766: POP
// for i := minerMinesList [ index ] downto 1 do
26767: LD_ADDR_VAR 0 5
26771: PUSH
26772: DOUBLE
26773: LD_EXP 94
26777: PUSH
26778: LD_VAR 0 6
26782: ARRAY
26783: INC
26784: ST_TO_ADDR
26785: LD_INT 1
26787: PUSH
26788: FOR_DOWNTO
26789: IFFALSE 26952
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26791: LD_EXP 94
26795: PUSH
26796: LD_VAR 0 6
26800: ARRAY
26801: PUSH
26802: LD_VAR 0 5
26806: ARRAY
26807: PUSH
26808: LD_INT 1
26810: ARRAY
26811: PPUSH
26812: LD_EXP 94
26816: PUSH
26817: LD_VAR 0 6
26821: ARRAY
26822: PUSH
26823: LD_VAR 0 5
26827: ARRAY
26828: PUSH
26829: LD_INT 2
26831: ARRAY
26832: PPUSH
26833: LD_VAR 0 2
26837: PPUSH
26838: LD_VAR 0 3
26842: PPUSH
26843: CALL_OW 298
26847: PUSH
26848: LD_INT 6
26850: LESS
26851: IFFALSE 26950
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26853: LD_EXP 94
26857: PUSH
26858: LD_VAR 0 6
26862: ARRAY
26863: PUSH
26864: LD_VAR 0 5
26868: ARRAY
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: LD_EXP 94
26878: PUSH
26879: LD_VAR 0 6
26883: ARRAY
26884: PUSH
26885: LD_VAR 0 5
26889: ARRAY
26890: PUSH
26891: LD_INT 2
26893: ARRAY
26894: PPUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 255
26904: PPUSH
26905: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26909: LD_ADDR_EXP 94
26913: PUSH
26914: LD_EXP 94
26918: PPUSH
26919: LD_VAR 0 6
26923: PPUSH
26924: LD_EXP 94
26928: PUSH
26929: LD_VAR 0 6
26933: ARRAY
26934: PPUSH
26935: LD_VAR 0 5
26939: PPUSH
26940: CALL_OW 3
26944: PPUSH
26945: CALL_OW 1
26949: ST_TO_ADDR
// end ; end ;
26950: GO 26788
26952: POP
26953: POP
// end ;
26954: LD_VAR 0 4
26958: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26959: LD_INT 0
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26970: LD_VAR 0 1
26974: PPUSH
26975: CALL_OW 264
26979: PUSH
26980: LD_EXP 103
26984: EQUAL
26985: NOT
26986: PUSH
26987: LD_VAR 0 1
26991: PUSH
26992: LD_EXP 93
26996: IN
26997: NOT
26998: OR
26999: IFFALSE 27003
// exit ;
27001: GO 27325
// index := GetElementIndex ( minersList , unit ) ;
27003: LD_ADDR_VAR 0 6
27007: PUSH
27008: LD_EXP 93
27012: PPUSH
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL 32689 0 2
27022: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27023: LD_ADDR_VAR 0 8
27027: PUSH
27028: LD_EXP 95
27032: PUSH
27033: LD_EXP 94
27037: PUSH
27038: LD_VAR 0 6
27042: ARRAY
27043: MINUS
27044: ST_TO_ADDR
// if not minesFreeAmount then
27045: LD_VAR 0 8
27049: NOT
27050: IFFALSE 27054
// exit ;
27052: GO 27325
// tmp := [ ] ;
27054: LD_ADDR_VAR 0 7
27058: PUSH
27059: EMPTY
27060: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27061: LD_ADDR_VAR 0 5
27065: PUSH
27066: DOUBLE
27067: LD_INT 1
27069: DEC
27070: ST_TO_ADDR
27071: LD_VAR 0 8
27075: PUSH
27076: FOR_TO
27077: IFFALSE 27272
// begin _d := rand ( 0 , 5 ) ;
27079: LD_ADDR_VAR 0 11
27083: PUSH
27084: LD_INT 0
27086: PPUSH
27087: LD_INT 5
27089: PPUSH
27090: CALL_OW 12
27094: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27095: LD_ADDR_VAR 0 12
27099: PUSH
27100: LD_INT 2
27102: PPUSH
27103: LD_INT 6
27105: PPUSH
27106: CALL_OW 12
27110: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27111: LD_ADDR_VAR 0 9
27115: PUSH
27116: LD_VAR 0 2
27120: PPUSH
27121: LD_VAR 0 11
27125: PPUSH
27126: LD_VAR 0 12
27130: PPUSH
27131: CALL_OW 272
27135: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27136: LD_ADDR_VAR 0 10
27140: PUSH
27141: LD_VAR 0 3
27145: PPUSH
27146: LD_VAR 0 11
27150: PPUSH
27151: LD_VAR 0 12
27155: PPUSH
27156: CALL_OW 273
27160: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27161: LD_VAR 0 9
27165: PPUSH
27166: LD_VAR 0 10
27170: PPUSH
27171: CALL_OW 488
27175: PUSH
27176: LD_VAR 0 9
27180: PUSH
27181: LD_VAR 0 10
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_VAR 0 7
27194: IN
27195: NOT
27196: AND
27197: PUSH
27198: LD_VAR 0 9
27202: PPUSH
27203: LD_VAR 0 10
27207: PPUSH
27208: CALL_OW 458
27212: NOT
27213: AND
27214: IFFALSE 27256
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27216: LD_ADDR_VAR 0 7
27220: PUSH
27221: LD_VAR 0 7
27225: PPUSH
27226: LD_VAR 0 7
27230: PUSH
27231: LD_INT 1
27233: PLUS
27234: PPUSH
27235: LD_VAR 0 9
27239: PUSH
27240: LD_VAR 0 10
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PPUSH
27249: CALL_OW 1
27253: ST_TO_ADDR
27254: GO 27270
// i := i - 1 ;
27256: LD_ADDR_VAR 0 5
27260: PUSH
27261: LD_VAR 0 5
27265: PUSH
27266: LD_INT 1
27268: MINUS
27269: ST_TO_ADDR
// end ;
27270: GO 27076
27272: POP
27273: POP
// for i in tmp do
27274: LD_ADDR_VAR 0 5
27278: PUSH
27279: LD_VAR 0 7
27283: PUSH
27284: FOR_IN
27285: IFFALSE 27323
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_VAR 0 5
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: PPUSH
27301: LD_VAR 0 5
27305: PUSH
27306: LD_INT 2
27308: ARRAY
27309: PPUSH
27310: CALL 26265 0 3
27314: NOT
27315: IFFALSE 27321
// exit ;
27317: POP
27318: POP
27319: GO 27325
27321: GO 27284
27323: POP
27324: POP
// end ;
27325: LD_VAR 0 4
27329: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27330: LD_INT 0
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
// if not GetClass ( unit ) = class_sniper then
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 257
27348: PUSH
27349: LD_INT 5
27351: EQUAL
27352: NOT
27353: IFFALSE 27357
// exit ;
27355: GO 27745
// dist := 8 ;
27357: LD_ADDR_VAR 0 5
27361: PUSH
27362: LD_INT 8
27364: ST_TO_ADDR
// viewRange := 12 ;
27365: LD_ADDR_VAR 0 7
27369: PUSH
27370: LD_INT 12
27372: ST_TO_ADDR
// side := GetSide ( unit ) ;
27373: LD_ADDR_VAR 0 6
27377: PUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 255
27387: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27388: LD_INT 61
27390: PPUSH
27391: LD_VAR 0 6
27395: PPUSH
27396: CALL_OW 321
27400: PUSH
27401: LD_INT 2
27403: EQUAL
27404: IFFALSE 27414
// viewRange := 16 ;
27406: LD_ADDR_VAR 0 7
27410: PUSH
27411: LD_INT 16
27413: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_VAR 0 2
27423: PPUSH
27424: LD_VAR 0 3
27428: PPUSH
27429: CALL_OW 297
27433: PUSH
27434: LD_VAR 0 5
27438: GREATER
27439: IFFALSE 27518
// begin ComMoveXY ( unit , x , y ) ;
27441: LD_VAR 0 1
27445: PPUSH
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_VAR 0 3
27455: PPUSH
27456: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27460: LD_INT 35
27462: PPUSH
27463: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27467: LD_VAR 0 1
27471: PPUSH
27472: LD_VAR 0 2
27476: PPUSH
27477: LD_VAR 0 3
27481: PPUSH
27482: CALL 63461 0 3
27486: NOT
27487: IFFALSE 27491
// exit ;
27489: GO 27745
// until GetDistUnitXY ( unit , x , y ) < dist ;
27491: LD_VAR 0 1
27495: PPUSH
27496: LD_VAR 0 2
27500: PPUSH
27501: LD_VAR 0 3
27505: PPUSH
27506: CALL_OW 297
27510: PUSH
27511: LD_VAR 0 5
27515: LESS
27516: IFFALSE 27460
// end ; ComTurnXY ( unit , x , y ) ;
27518: LD_VAR 0 1
27522: PPUSH
27523: LD_VAR 0 2
27527: PPUSH
27528: LD_VAR 0 3
27532: PPUSH
27533: CALL_OW 118
// wait ( 5 ) ;
27537: LD_INT 5
27539: PPUSH
27540: CALL_OW 67
// _d := GetDir ( unit ) ;
27544: LD_ADDR_VAR 0 10
27548: PUSH
27549: LD_VAR 0 1
27553: PPUSH
27554: CALL_OW 254
27558: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27559: LD_ADDR_VAR 0 8
27563: PUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: CALL_OW 250
27573: PPUSH
27574: LD_VAR 0 10
27578: PPUSH
27579: LD_VAR 0 5
27583: PPUSH
27584: CALL_OW 272
27588: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27589: LD_ADDR_VAR 0 9
27593: PUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL_OW 251
27603: PPUSH
27604: LD_VAR 0 10
27608: PPUSH
27609: LD_VAR 0 5
27613: PPUSH
27614: CALL_OW 273
27618: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27619: LD_VAR 0 8
27623: PPUSH
27624: LD_VAR 0 9
27628: PPUSH
27629: CALL_OW 488
27633: NOT
27634: IFFALSE 27638
// exit ;
27636: GO 27745
// ComAnimCustom ( unit , 1 ) ;
27638: LD_VAR 0 1
27642: PPUSH
27643: LD_INT 1
27645: PPUSH
27646: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27650: LD_VAR 0 8
27654: PPUSH
27655: LD_VAR 0 9
27659: PPUSH
27660: LD_VAR 0 6
27664: PPUSH
27665: LD_VAR 0 7
27669: PPUSH
27670: CALL_OW 330
// repeat wait ( 1 ) ;
27674: LD_INT 1
27676: PPUSH
27677: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 316
27690: PUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 314
27700: OR
27701: PUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 302
27711: NOT
27712: OR
27713: PUSH
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 301
27723: OR
27724: IFFALSE 27674
// RemoveSeeing ( _x , _y , side ) ;
27726: LD_VAR 0 8
27730: PPUSH
27731: LD_VAR 0 9
27735: PPUSH
27736: LD_VAR 0 6
27740: PPUSH
27741: CALL_OW 331
// end ; end_of_file
27745: LD_VAR 0 4
27749: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27750: LD_INT 0
27752: PPUSH
// ar_miner := 81 ;
27753: LD_ADDR_EXP 103
27757: PUSH
27758: LD_INT 81
27760: ST_TO_ADDR
// ar_crane := 88 ;
27761: LD_ADDR_EXP 102
27765: PUSH
27766: LD_INT 88
27768: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27769: LD_ADDR_EXP 97
27773: PUSH
27774: LD_INT 89
27776: ST_TO_ADDR
// us_hack := 99 ;
27777: LD_ADDR_EXP 98
27781: PUSH
27782: LD_INT 99
27784: ST_TO_ADDR
// us_artillery := 97 ;
27785: LD_ADDR_EXP 99
27789: PUSH
27790: LD_INT 97
27792: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27793: LD_ADDR_EXP 100
27797: PUSH
27798: LD_INT 91
27800: ST_TO_ADDR
// ar_mortar := 92 ;
27801: LD_ADDR_EXP 101
27805: PUSH
27806: LD_INT 92
27808: ST_TO_ADDR
// ru_radar := 98 ;
27809: LD_ADDR_EXP 96
27813: PUSH
27814: LD_INT 98
27816: ST_TO_ADDR
// tech_Artillery := 80 ;
27817: LD_ADDR_EXP 104
27821: PUSH
27822: LD_INT 80
27824: ST_TO_ADDR
// tech_RadMat := 81 ;
27825: LD_ADDR_EXP 105
27829: PUSH
27830: LD_INT 81
27832: ST_TO_ADDR
// tech_BasicTools := 82 ;
27833: LD_ADDR_EXP 106
27837: PUSH
27838: LD_INT 82
27840: ST_TO_ADDR
// tech_Cargo := 83 ;
27841: LD_ADDR_EXP 107
27845: PUSH
27846: LD_INT 83
27848: ST_TO_ADDR
// tech_Track := 84 ;
27849: LD_ADDR_EXP 108
27853: PUSH
27854: LD_INT 84
27856: ST_TO_ADDR
// tech_Crane := 85 ;
27857: LD_ADDR_EXP 109
27861: PUSH
27862: LD_INT 85
27864: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27865: LD_ADDR_EXP 110
27869: PUSH
27870: LD_INT 86
27872: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27873: LD_ADDR_EXP 111
27877: PUSH
27878: LD_INT 87
27880: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27881: LD_ADDR_EXP 112
27885: PUSH
27886: LD_INT 88
27888: ST_TO_ADDR
// class_mastodont := 31 ;
27889: LD_ADDR_EXP 113
27893: PUSH
27894: LD_INT 31
27896: ST_TO_ADDR
// class_horse := 21 ;
27897: LD_ADDR_EXP 114
27901: PUSH
27902: LD_INT 21
27904: ST_TO_ADDR
// end ;
27905: LD_VAR 0 1
27909: RET
// every 1 do
27910: GO 27912
27912: DISABLE
// InitGlobalVariables ; end_of_file
27913: CALL 27750 0 0
27917: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
// if exist_mode then
27922: LD_VAR 0 2
27926: IFFALSE 27951
// unit := CreateCharacter ( prefix & ident ) else
27928: LD_ADDR_VAR 0 5
27932: PUSH
27933: LD_VAR 0 3
27937: PUSH
27938: LD_VAR 0 1
27942: STR
27943: PPUSH
27944: CALL_OW 34
27948: ST_TO_ADDR
27949: GO 27966
// unit := NewCharacter ( ident ) ;
27951: LD_ADDR_VAR 0 5
27955: PUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 25
27965: ST_TO_ADDR
// result := unit ;
27966: LD_ADDR_VAR 0 4
27970: PUSH
27971: LD_VAR 0 5
27975: ST_TO_ADDR
// end ;
27976: LD_VAR 0 4
27980: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27981: LD_INT 0
27983: PPUSH
27984: PPUSH
// if not side or not nation then
27985: LD_VAR 0 1
27989: NOT
27990: PUSH
27991: LD_VAR 0 2
27995: NOT
27996: OR
27997: IFFALSE 28001
// exit ;
27999: GO 28769
// case nation of nation_american :
28001: LD_VAR 0 2
28005: PUSH
28006: LD_INT 1
28008: DOUBLE
28009: EQUAL
28010: IFTRUE 28014
28012: GO 28228
28014: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28015: LD_ADDR_VAR 0 4
28019: PUSH
28020: LD_INT 35
28022: PUSH
28023: LD_INT 45
28025: PUSH
28026: LD_INT 46
28028: PUSH
28029: LD_INT 47
28031: PUSH
28032: LD_INT 82
28034: PUSH
28035: LD_INT 83
28037: PUSH
28038: LD_INT 84
28040: PUSH
28041: LD_INT 85
28043: PUSH
28044: LD_INT 86
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: LD_INT 6
28055: PUSH
28056: LD_INT 15
28058: PUSH
28059: LD_INT 16
28061: PUSH
28062: LD_INT 7
28064: PUSH
28065: LD_INT 12
28067: PUSH
28068: LD_INT 13
28070: PUSH
28071: LD_INT 10
28073: PUSH
28074: LD_INT 14
28076: PUSH
28077: LD_INT 20
28079: PUSH
28080: LD_INT 21
28082: PUSH
28083: LD_INT 22
28085: PUSH
28086: LD_INT 25
28088: PUSH
28089: LD_INT 32
28091: PUSH
28092: LD_INT 27
28094: PUSH
28095: LD_INT 36
28097: PUSH
28098: LD_INT 69
28100: PUSH
28101: LD_INT 39
28103: PUSH
28104: LD_INT 34
28106: PUSH
28107: LD_INT 40
28109: PUSH
28110: LD_INT 48
28112: PUSH
28113: LD_INT 49
28115: PUSH
28116: LD_INT 50
28118: PUSH
28119: LD_INT 51
28121: PUSH
28122: LD_INT 52
28124: PUSH
28125: LD_INT 53
28127: PUSH
28128: LD_INT 54
28130: PUSH
28131: LD_INT 55
28133: PUSH
28134: LD_INT 56
28136: PUSH
28137: LD_INT 57
28139: PUSH
28140: LD_INT 58
28142: PUSH
28143: LD_INT 59
28145: PUSH
28146: LD_INT 60
28148: PUSH
28149: LD_INT 61
28151: PUSH
28152: LD_INT 62
28154: PUSH
28155: LD_INT 80
28157: PUSH
28158: LD_INT 82
28160: PUSH
28161: LD_INT 83
28163: PUSH
28164: LD_INT 84
28166: PUSH
28167: LD_INT 85
28169: PUSH
28170: LD_INT 86
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: ST_TO_ADDR
28226: GO 28693
28228: LD_INT 2
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28462
28236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28237: LD_ADDR_VAR 0 4
28241: PUSH
28242: LD_INT 35
28244: PUSH
28245: LD_INT 45
28247: PUSH
28248: LD_INT 46
28250: PUSH
28251: LD_INT 47
28253: PUSH
28254: LD_INT 82
28256: PUSH
28257: LD_INT 83
28259: PUSH
28260: LD_INT 84
28262: PUSH
28263: LD_INT 85
28265: PUSH
28266: LD_INT 87
28268: PUSH
28269: LD_INT 70
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 11
28277: PUSH
28278: LD_INT 3
28280: PUSH
28281: LD_INT 4
28283: PUSH
28284: LD_INT 5
28286: PUSH
28287: LD_INT 6
28289: PUSH
28290: LD_INT 15
28292: PUSH
28293: LD_INT 18
28295: PUSH
28296: LD_INT 7
28298: PUSH
28299: LD_INT 17
28301: PUSH
28302: LD_INT 8
28304: PUSH
28305: LD_INT 20
28307: PUSH
28308: LD_INT 21
28310: PUSH
28311: LD_INT 22
28313: PUSH
28314: LD_INT 72
28316: PUSH
28317: LD_INT 26
28319: PUSH
28320: LD_INT 69
28322: PUSH
28323: LD_INT 39
28325: PUSH
28326: LD_INT 40
28328: PUSH
28329: LD_INT 41
28331: PUSH
28332: LD_INT 42
28334: PUSH
28335: LD_INT 43
28337: PUSH
28338: LD_INT 48
28340: PUSH
28341: LD_INT 49
28343: PUSH
28344: LD_INT 50
28346: PUSH
28347: LD_INT 51
28349: PUSH
28350: LD_INT 52
28352: PUSH
28353: LD_INT 53
28355: PUSH
28356: LD_INT 54
28358: PUSH
28359: LD_INT 55
28361: PUSH
28362: LD_INT 56
28364: PUSH
28365: LD_INT 60
28367: PUSH
28368: LD_INT 61
28370: PUSH
28371: LD_INT 62
28373: PUSH
28374: LD_INT 66
28376: PUSH
28377: LD_INT 67
28379: PUSH
28380: LD_INT 68
28382: PUSH
28383: LD_INT 81
28385: PUSH
28386: LD_INT 82
28388: PUSH
28389: LD_INT 83
28391: PUSH
28392: LD_INT 84
28394: PUSH
28395: LD_INT 85
28397: PUSH
28398: LD_INT 87
28400: PUSH
28401: LD_INT 88
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
28460: GO 28693
28462: LD_INT 3
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28692
28470: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28471: LD_ADDR_VAR 0 4
28475: PUSH
28476: LD_INT 46
28478: PUSH
28479: LD_INT 47
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: LD_INT 82
28490: PUSH
28491: LD_INT 83
28493: PUSH
28494: LD_INT 84
28496: PUSH
28497: LD_INT 85
28499: PUSH
28500: LD_INT 86
28502: PUSH
28503: LD_INT 11
28505: PUSH
28506: LD_INT 9
28508: PUSH
28509: LD_INT 20
28511: PUSH
28512: LD_INT 19
28514: PUSH
28515: LD_INT 21
28517: PUSH
28518: LD_INT 24
28520: PUSH
28521: LD_INT 22
28523: PUSH
28524: LD_INT 25
28526: PUSH
28527: LD_INT 28
28529: PUSH
28530: LD_INT 29
28532: PUSH
28533: LD_INT 30
28535: PUSH
28536: LD_INT 31
28538: PUSH
28539: LD_INT 37
28541: PUSH
28542: LD_INT 38
28544: PUSH
28545: LD_INT 32
28547: PUSH
28548: LD_INT 27
28550: PUSH
28551: LD_INT 33
28553: PUSH
28554: LD_INT 69
28556: PUSH
28557: LD_INT 39
28559: PUSH
28560: LD_INT 34
28562: PUSH
28563: LD_INT 40
28565: PUSH
28566: LD_INT 71
28568: PUSH
28569: LD_INT 23
28571: PUSH
28572: LD_INT 44
28574: PUSH
28575: LD_INT 48
28577: PUSH
28578: LD_INT 49
28580: PUSH
28581: LD_INT 50
28583: PUSH
28584: LD_INT 51
28586: PUSH
28587: LD_INT 52
28589: PUSH
28590: LD_INT 53
28592: PUSH
28593: LD_INT 54
28595: PUSH
28596: LD_INT 55
28598: PUSH
28599: LD_INT 56
28601: PUSH
28602: LD_INT 57
28604: PUSH
28605: LD_INT 58
28607: PUSH
28608: LD_INT 59
28610: PUSH
28611: LD_INT 63
28613: PUSH
28614: LD_INT 64
28616: PUSH
28617: LD_INT 65
28619: PUSH
28620: LD_INT 82
28622: PUSH
28623: LD_INT 83
28625: PUSH
28626: LD_INT 84
28628: PUSH
28629: LD_INT 85
28631: PUSH
28632: LD_INT 86
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: ST_TO_ADDR
28690: GO 28693
28692: POP
// if state > - 1 and state < 3 then
28693: LD_VAR 0 3
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: GREATER
28702: PUSH
28703: LD_VAR 0 3
28707: PUSH
28708: LD_INT 3
28710: LESS
28711: AND
28712: IFFALSE 28769
// for i in result do
28714: LD_ADDR_VAR 0 5
28718: PUSH
28719: LD_VAR 0 4
28723: PUSH
28724: FOR_IN
28725: IFFALSE 28767
// if GetTech ( i , side ) <> state then
28727: LD_VAR 0 5
28731: PPUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL_OW 321
28741: PUSH
28742: LD_VAR 0 3
28746: NONEQUAL
28747: IFFALSE 28765
// result := result diff i ;
28749: LD_ADDR_VAR 0 4
28753: PUSH
28754: LD_VAR 0 4
28758: PUSH
28759: LD_VAR 0 5
28763: DIFF
28764: ST_TO_ADDR
28765: GO 28724
28767: POP
28768: POP
// end ;
28769: LD_VAR 0 4
28773: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
28778: PPUSH
// result := true ;
28779: LD_ADDR_VAR 0 3
28783: PUSH
28784: LD_INT 1
28786: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28787: LD_ADDR_VAR 0 5
28791: PUSH
28792: LD_VAR 0 2
28796: PPUSH
28797: CALL_OW 480
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 5
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28860
// for i in tmp do
28811: LD_ADDR_VAR 0 4
28815: PUSH
28816: LD_VAR 0 5
28820: PUSH
28821: FOR_IN
28822: IFFALSE 28858
// if GetTech ( i , side ) <> state_researched then
28824: LD_VAR 0 4
28828: PPUSH
28829: LD_VAR 0 1
28833: PPUSH
28834: CALL_OW 321
28838: PUSH
28839: LD_INT 2
28841: NONEQUAL
28842: IFFALSE 28856
// begin result := false ;
28844: LD_ADDR_VAR 0 3
28848: PUSH
28849: LD_INT 0
28851: ST_TO_ADDR
// exit ;
28852: POP
28853: POP
28854: GO 28860
// end ;
28856: GO 28821
28858: POP
28859: POP
// end ;
28860: LD_VAR 0 3
28864: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28865: LD_INT 0
28867: PPUSH
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
28877: PPUSH
28878: PPUSH
28879: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28880: LD_VAR 0 1
28884: NOT
28885: PUSH
28886: LD_VAR 0 1
28890: PPUSH
28891: CALL_OW 257
28895: PUSH
28896: LD_INT 9
28898: NONEQUAL
28899: OR
28900: IFFALSE 28904
// exit ;
28902: GO 29477
// side := GetSide ( unit ) ;
28904: LD_ADDR_VAR 0 9
28908: PUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: CALL_OW 255
28918: ST_TO_ADDR
// tech_space := tech_spacanom ;
28919: LD_ADDR_VAR 0 12
28923: PUSH
28924: LD_INT 29
28926: ST_TO_ADDR
// tech_time := tech_taurad ;
28927: LD_ADDR_VAR 0 13
28931: PUSH
28932: LD_INT 28
28934: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28935: LD_ADDR_VAR 0 11
28939: PUSH
28940: LD_VAR 0 1
28944: PPUSH
28945: CALL_OW 310
28949: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28950: LD_VAR 0 11
28954: PPUSH
28955: CALL_OW 247
28959: PUSH
28960: LD_INT 2
28962: EQUAL
28963: IFFALSE 28967
// exit ;
28965: GO 29477
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28967: LD_ADDR_VAR 0 8
28971: PUSH
28972: LD_INT 81
28974: PUSH
28975: LD_VAR 0 9
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PPUSH
29005: CALL_OW 69
29009: ST_TO_ADDR
// if not tmp then
29010: LD_VAR 0 8
29014: NOT
29015: IFFALSE 29019
// exit ;
29017: GO 29477
// if in_unit then
29019: LD_VAR 0 11
29023: IFFALSE 29047
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29025: LD_ADDR_VAR 0 10
29029: PUSH
29030: LD_VAR 0 8
29034: PPUSH
29035: LD_VAR 0 11
29039: PPUSH
29040: CALL_OW 74
29044: ST_TO_ADDR
29045: GO 29067
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29047: LD_ADDR_VAR 0 10
29051: PUSH
29052: LD_VAR 0 8
29056: PPUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 74
29066: ST_TO_ADDR
// if not enemy then
29067: LD_VAR 0 10
29071: NOT
29072: IFFALSE 29076
// exit ;
29074: GO 29477
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29076: LD_VAR 0 11
29080: PUSH
29081: LD_VAR 0 11
29085: PPUSH
29086: LD_VAR 0 10
29090: PPUSH
29091: CALL_OW 296
29095: PUSH
29096: LD_INT 13
29098: GREATER
29099: AND
29100: PUSH
29101: LD_VAR 0 1
29105: PPUSH
29106: LD_VAR 0 10
29110: PPUSH
29111: CALL_OW 296
29115: PUSH
29116: LD_INT 12
29118: GREATER
29119: OR
29120: IFFALSE 29124
// exit ;
29122: GO 29477
// missile := [ 1 ] ;
29124: LD_ADDR_VAR 0 14
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29135: LD_VAR 0 9
29139: PPUSH
29140: LD_VAR 0 12
29144: PPUSH
29145: CALL_OW 325
29149: IFFALSE 29178
// missile := Insert ( missile , missile + 1 , 2 ) ;
29151: LD_ADDR_VAR 0 14
29155: PUSH
29156: LD_VAR 0 14
29160: PPUSH
29161: LD_VAR 0 14
29165: PUSH
29166: LD_INT 1
29168: PLUS
29169: PPUSH
29170: LD_INT 2
29172: PPUSH
29173: CALL_OW 2
29177: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29178: LD_VAR 0 9
29182: PPUSH
29183: LD_VAR 0 13
29187: PPUSH
29188: CALL_OW 325
29192: PUSH
29193: LD_VAR 0 10
29197: PPUSH
29198: CALL_OW 255
29202: PPUSH
29203: LD_VAR 0 13
29207: PPUSH
29208: CALL_OW 325
29212: NOT
29213: AND
29214: IFFALSE 29243
// missile := Insert ( missile , missile + 1 , 3 ) ;
29216: LD_ADDR_VAR 0 14
29220: PUSH
29221: LD_VAR 0 14
29225: PPUSH
29226: LD_VAR 0 14
29230: PUSH
29231: LD_INT 1
29233: PLUS
29234: PPUSH
29235: LD_INT 3
29237: PPUSH
29238: CALL_OW 2
29242: ST_TO_ADDR
// if missile < 2 then
29243: LD_VAR 0 14
29247: PUSH
29248: LD_INT 2
29250: LESS
29251: IFFALSE 29255
// exit ;
29253: GO 29477
// x := GetX ( enemy ) ;
29255: LD_ADDR_VAR 0 4
29259: PUSH
29260: LD_VAR 0 10
29264: PPUSH
29265: CALL_OW 250
29269: ST_TO_ADDR
// y := GetY ( enemy ) ;
29270: LD_ADDR_VAR 0 5
29274: PUSH
29275: LD_VAR 0 10
29279: PPUSH
29280: CALL_OW 251
29284: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29285: LD_ADDR_VAR 0 6
29289: PUSH
29290: LD_VAR 0 4
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PPUSH
29299: LD_INT 1
29301: PPUSH
29302: CALL_OW 12
29306: PLUS
29307: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29308: LD_ADDR_VAR 0 7
29312: PUSH
29313: LD_VAR 0 5
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PPUSH
29322: LD_INT 1
29324: PPUSH
29325: CALL_OW 12
29329: PLUS
29330: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29331: LD_VAR 0 6
29335: PPUSH
29336: LD_VAR 0 7
29340: PPUSH
29341: CALL_OW 488
29345: NOT
29346: IFFALSE 29368
// begin _x := x ;
29348: LD_ADDR_VAR 0 6
29352: PUSH
29353: LD_VAR 0 4
29357: ST_TO_ADDR
// _y := y ;
29358: LD_ADDR_VAR 0 7
29362: PUSH
29363: LD_VAR 0 5
29367: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29368: LD_ADDR_VAR 0 3
29372: PUSH
29373: LD_INT 1
29375: PPUSH
29376: LD_VAR 0 14
29380: PPUSH
29381: CALL_OW 12
29385: ST_TO_ADDR
// case i of 1 :
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 1
29393: DOUBLE
29394: EQUAL
29395: IFTRUE 29399
29397: GO 29416
29399: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29400: LD_VAR 0 1
29404: PPUSH
29405: LD_VAR 0 10
29409: PPUSH
29410: CALL_OW 115
29414: GO 29477
29416: LD_INT 2
29418: DOUBLE
29419: EQUAL
29420: IFTRUE 29424
29422: GO 29446
29424: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29425: LD_VAR 0 1
29429: PPUSH
29430: LD_VAR 0 6
29434: PPUSH
29435: LD_VAR 0 7
29439: PPUSH
29440: CALL_OW 153
29444: GO 29477
29446: LD_INT 3
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29454
29452: GO 29476
29454: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29455: LD_VAR 0 1
29459: PPUSH
29460: LD_VAR 0 6
29464: PPUSH
29465: LD_VAR 0 7
29469: PPUSH
29470: CALL_OW 154
29474: GO 29477
29476: POP
// end ;
29477: LD_VAR 0 2
29481: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29482: LD_INT 0
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
// if not unit or not building then
29490: LD_VAR 0 1
29494: NOT
29495: PUSH
29496: LD_VAR 0 2
29500: NOT
29501: OR
29502: IFFALSE 29506
// exit ;
29504: GO 29664
// x := GetX ( building ) ;
29506: LD_ADDR_VAR 0 5
29510: PUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: CALL_OW 250
29520: ST_TO_ADDR
// y := GetY ( building ) ;
29521: LD_ADDR_VAR 0 6
29525: PUSH
29526: LD_VAR 0 2
29530: PPUSH
29531: CALL_OW 251
29535: ST_TO_ADDR
// for i = 0 to 5 do
29536: LD_ADDR_VAR 0 4
29540: PUSH
29541: DOUBLE
29542: LD_INT 0
29544: DEC
29545: ST_TO_ADDR
29546: LD_INT 5
29548: PUSH
29549: FOR_TO
29550: IFFALSE 29662
// begin _x := ShiftX ( x , i , 3 ) ;
29552: LD_ADDR_VAR 0 7
29556: PUSH
29557: LD_VAR 0 5
29561: PPUSH
29562: LD_VAR 0 4
29566: PPUSH
29567: LD_INT 3
29569: PPUSH
29570: CALL_OW 272
29574: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29575: LD_ADDR_VAR 0 8
29579: PUSH
29580: LD_VAR 0 6
29584: PPUSH
29585: LD_VAR 0 4
29589: PPUSH
29590: LD_INT 3
29592: PPUSH
29593: CALL_OW 273
29597: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29598: LD_VAR 0 7
29602: PPUSH
29603: LD_VAR 0 8
29607: PPUSH
29608: CALL_OW 488
29612: NOT
29613: IFFALSE 29617
// continue ;
29615: GO 29549
// if HexInfo ( _x , _y ) = 0 then
29617: LD_VAR 0 7
29621: PPUSH
29622: LD_VAR 0 8
29626: PPUSH
29627: CALL_OW 428
29631: PUSH
29632: LD_INT 0
29634: EQUAL
29635: IFFALSE 29660
// begin ComMoveXY ( unit , _x , _y ) ;
29637: LD_VAR 0 1
29641: PPUSH
29642: LD_VAR 0 7
29646: PPUSH
29647: LD_VAR 0 8
29651: PPUSH
29652: CALL_OW 111
// exit ;
29656: POP
29657: POP
29658: GO 29664
// end ; end ;
29660: GO 29549
29662: POP
29663: POP
// end ;
29664: LD_VAR 0 3
29668: RET
// export function ScanBase ( side , base_area ) ; begin
29669: LD_INT 0
29671: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29672: LD_ADDR_VAR 0 3
29676: PUSH
29677: LD_VAR 0 2
29681: PPUSH
29682: LD_INT 81
29684: PUSH
29685: LD_VAR 0 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PPUSH
29694: CALL_OW 70
29698: ST_TO_ADDR
// end ;
29699: LD_VAR 0 3
29703: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29704: LD_INT 0
29706: PPUSH
29707: PPUSH
29708: PPUSH
29709: PPUSH
// result := false ;
29710: LD_ADDR_VAR 0 2
29714: PUSH
29715: LD_INT 0
29717: ST_TO_ADDR
// side := GetSide ( unit ) ;
29718: LD_ADDR_VAR 0 3
29722: PUSH
29723: LD_VAR 0 1
29727: PPUSH
29728: CALL_OW 255
29732: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29733: LD_ADDR_VAR 0 4
29737: PUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: CALL_OW 248
29747: ST_TO_ADDR
// case nat of 1 :
29748: LD_VAR 0 4
29752: PUSH
29753: LD_INT 1
29755: DOUBLE
29756: EQUAL
29757: IFTRUE 29761
29759: GO 29772
29761: POP
// tech := tech_lassight ; 2 :
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_INT 12
29769: ST_TO_ADDR
29770: GO 29811
29772: LD_INT 2
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29791
29780: POP
// tech := tech_mortar ; 3 :
29781: LD_ADDR_VAR 0 5
29785: PUSH
29786: LD_INT 41
29788: ST_TO_ADDR
29789: GO 29811
29791: LD_INT 3
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29799
29797: GO 29810
29799: POP
// tech := tech_bazooka ; end ;
29800: LD_ADDR_VAR 0 5
29804: PUSH
29805: LD_INT 44
29807: ST_TO_ADDR
29808: GO 29811
29810: POP
// if Researched ( side , tech ) then
29811: LD_VAR 0 3
29815: PPUSH
29816: LD_VAR 0 5
29820: PPUSH
29821: CALL_OW 325
29825: IFFALSE 29852
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29827: LD_ADDR_VAR 0 2
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: LD_INT 8
29837: PUSH
29838: LD_INT 9
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: PUSH
29846: LD_VAR 0 4
29850: ARRAY
29851: ST_TO_ADDR
// end ;
29852: LD_VAR 0 2
29856: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29857: LD_INT 0
29859: PPUSH
29860: PPUSH
29861: PPUSH
// if not mines then
29862: LD_VAR 0 2
29866: NOT
29867: IFFALSE 29871
// exit ;
29869: GO 30015
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29871: LD_ADDR_VAR 0 5
29875: PUSH
29876: LD_INT 81
29878: PUSH
29879: LD_VAR 0 1
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 3
29890: PUSH
29891: LD_INT 21
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 69
29913: ST_TO_ADDR
// for i in mines do
29914: LD_ADDR_VAR 0 4
29918: PUSH
29919: LD_VAR 0 2
29923: PUSH
29924: FOR_IN
29925: IFFALSE 30013
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29927: LD_VAR 0 4
29931: PUSH
29932: LD_INT 1
29934: ARRAY
29935: PPUSH
29936: LD_VAR 0 4
29940: PUSH
29941: LD_INT 2
29943: ARRAY
29944: PPUSH
29945: CALL_OW 458
29949: NOT
29950: IFFALSE 29954
// continue ;
29952: GO 29924
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29954: LD_VAR 0 4
29958: PUSH
29959: LD_INT 1
29961: ARRAY
29962: PPUSH
29963: LD_VAR 0 4
29967: PUSH
29968: LD_INT 2
29970: ARRAY
29971: PPUSH
29972: CALL_OW 428
29976: PUSH
29977: LD_VAR 0 5
29981: IN
29982: IFFALSE 30011
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29984: LD_VAR 0 4
29988: PUSH
29989: LD_INT 1
29991: ARRAY
29992: PPUSH
29993: LD_VAR 0 4
29997: PUSH
29998: LD_INT 2
30000: ARRAY
30001: PPUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: CALL_OW 456
// end ;
30011: GO 29924
30013: POP
30014: POP
// end ;
30015: LD_VAR 0 3
30019: RET
// export function Count ( array ) ; var i ; begin
30020: LD_INT 0
30022: PPUSH
30023: PPUSH
// result := 0 ;
30024: LD_ADDR_VAR 0 2
30028: PUSH
30029: LD_INT 0
30031: ST_TO_ADDR
// for i in array do
30032: LD_ADDR_VAR 0 3
30036: PUSH
30037: LD_VAR 0 1
30041: PUSH
30042: FOR_IN
30043: IFFALSE 30067
// if i then
30045: LD_VAR 0 3
30049: IFFALSE 30065
// result := result + 1 ;
30051: LD_ADDR_VAR 0 2
30055: PUSH
30056: LD_VAR 0 2
30060: PUSH
30061: LD_INT 1
30063: PLUS
30064: ST_TO_ADDR
30065: GO 30042
30067: POP
30068: POP
// end ;
30069: LD_VAR 0 2
30073: RET
// export function IsEmpty ( building ) ; begin
30074: LD_INT 0
30076: PPUSH
// if not building then
30077: LD_VAR 0 1
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30129
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30086: LD_ADDR_VAR 0 2
30090: PUSH
30091: LD_VAR 0 1
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 255
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 58
30115: PUSH
30116: EMPTY
30117: LIST
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PPUSH
30123: CALL_OW 69
30127: IN
30128: ST_TO_ADDR
// end ;
30129: LD_VAR 0 2
30133: RET
// export function IsNotFull ( building ) ; begin
30134: LD_INT 0
30136: PPUSH
// if not building then
30137: LD_VAR 0 1
30141: NOT
30142: IFFALSE 30146
// exit ;
30144: GO 30165
// result := UnitsInside ( building ) < 6 ;
30146: LD_ADDR_VAR 0 2
30150: PUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 313
30160: PUSH
30161: LD_INT 6
30163: LESS
30164: ST_TO_ADDR
// end ;
30165: LD_VAR 0 2
30169: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30170: LD_INT 0
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
// tmp := [ ] ;
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: EMPTY
30182: ST_TO_ADDR
// list := [ ] ;
30183: LD_ADDR_VAR 0 5
30187: PUSH
30188: EMPTY
30189: ST_TO_ADDR
// for i = 16 to 25 do
30190: LD_ADDR_VAR 0 4
30194: PUSH
30195: DOUBLE
30196: LD_INT 16
30198: DEC
30199: ST_TO_ADDR
30200: LD_INT 25
30202: PUSH
30203: FOR_TO
30204: IFFALSE 30277
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_VAR 0 3
30215: PUSH
30216: LD_INT 22
30218: PUSH
30219: LD_VAR 0 1
30223: PPUSH
30224: CALL_OW 255
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 91
30235: PUSH
30236: LD_VAR 0 1
30240: PUSH
30241: LD_INT 6
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 30
30251: PUSH
30252: LD_VAR 0 4
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ADD
30274: ST_TO_ADDR
30275: GO 30203
30277: POP
30278: POP
// for i = 1 to tmp do
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: DOUBLE
30285: LD_INT 1
30287: DEC
30288: ST_TO_ADDR
30289: LD_VAR 0 3
30293: PUSH
30294: FOR_TO
30295: IFFALSE 30383
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30297: LD_ADDR_VAR 0 5
30301: PUSH
30302: LD_VAR 0 5
30306: PUSH
30307: LD_VAR 0 3
30311: PUSH
30312: LD_VAR 0 4
30316: ARRAY
30317: PPUSH
30318: CALL_OW 266
30322: PUSH
30323: LD_VAR 0 3
30327: PUSH
30328: LD_VAR 0 4
30332: ARRAY
30333: PPUSH
30334: CALL_OW 250
30338: PUSH
30339: LD_VAR 0 3
30343: PUSH
30344: LD_VAR 0 4
30348: ARRAY
30349: PPUSH
30350: CALL_OW 251
30354: PUSH
30355: LD_VAR 0 3
30359: PUSH
30360: LD_VAR 0 4
30364: ARRAY
30365: PPUSH
30366: CALL_OW 254
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: ADD
30380: ST_TO_ADDR
30381: GO 30294
30383: POP
30384: POP
// result := list ;
30385: LD_ADDR_VAR 0 2
30389: PUSH
30390: LD_VAR 0 5
30394: ST_TO_ADDR
// end ;
30395: LD_VAR 0 2
30399: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30400: LD_INT 0
30402: PPUSH
30403: PPUSH
30404: PPUSH
30405: PPUSH
30406: PPUSH
30407: PPUSH
30408: PPUSH
// if not factory then
30409: LD_VAR 0 1
30413: NOT
30414: IFFALSE 30418
// exit ;
30416: GO 31011
// if control = control_apeman then
30418: LD_VAR 0 4
30422: PUSH
30423: LD_INT 5
30425: EQUAL
30426: IFFALSE 30535
// begin tmp := UnitsInside ( factory ) ;
30428: LD_ADDR_VAR 0 8
30432: PUSH
30433: LD_VAR 0 1
30437: PPUSH
30438: CALL_OW 313
30442: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30443: LD_VAR 0 8
30447: PPUSH
30448: LD_INT 25
30450: PUSH
30451: LD_INT 12
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PPUSH
30458: CALL_OW 72
30462: NOT
30463: IFFALSE 30473
// control := control_manual ;
30465: LD_ADDR_VAR 0 4
30469: PUSH
30470: LD_INT 1
30472: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30473: LD_ADDR_VAR 0 8
30477: PUSH
30478: LD_VAR 0 1
30482: PPUSH
30483: CALL 30170 0 1
30487: ST_TO_ADDR
// if tmp then
30488: LD_VAR 0 8
30492: IFFALSE 30535
// begin for i in tmp do
30494: LD_ADDR_VAR 0 7
30498: PUSH
30499: LD_VAR 0 8
30503: PUSH
30504: FOR_IN
30505: IFFALSE 30533
// if i [ 1 ] = b_ext_radio then
30507: LD_VAR 0 7
30511: PUSH
30512: LD_INT 1
30514: ARRAY
30515: PUSH
30516: LD_INT 22
30518: EQUAL
30519: IFFALSE 30531
// begin control := control_remote ;
30521: LD_ADDR_VAR 0 4
30525: PUSH
30526: LD_INT 2
30528: ST_TO_ADDR
// break ;
30529: GO 30533
// end ;
30531: GO 30504
30533: POP
30534: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30535: LD_VAR 0 1
30539: PPUSH
30540: LD_VAR 0 2
30544: PPUSH
30545: LD_VAR 0 3
30549: PPUSH
30550: LD_VAR 0 4
30554: PPUSH
30555: LD_VAR 0 5
30559: PPUSH
30560: CALL_OW 448
30564: IFFALSE 30599
// begin result := [ chassis , engine , control , weapon ] ;
30566: LD_ADDR_VAR 0 6
30570: PUSH
30571: LD_VAR 0 2
30575: PUSH
30576: LD_VAR 0 3
30580: PUSH
30581: LD_VAR 0 4
30585: PUSH
30586: LD_VAR 0 5
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: ST_TO_ADDR
// exit ;
30597: GO 31011
// end ; _chassis := AvailableChassisList ( factory ) ;
30599: LD_ADDR_VAR 0 9
30603: PUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL_OW 475
30613: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30614: LD_ADDR_VAR 0 11
30618: PUSH
30619: LD_VAR 0 1
30623: PPUSH
30624: CALL_OW 476
30628: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30629: LD_ADDR_VAR 0 12
30633: PUSH
30634: LD_VAR 0 1
30638: PPUSH
30639: CALL_OW 477
30643: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30644: LD_ADDR_VAR 0 10
30648: PUSH
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 478
30658: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30659: LD_VAR 0 9
30663: NOT
30664: PUSH
30665: LD_VAR 0 11
30669: NOT
30670: OR
30671: PUSH
30672: LD_VAR 0 12
30676: NOT
30677: OR
30678: PUSH
30679: LD_VAR 0 10
30683: NOT
30684: OR
30685: IFFALSE 30720
// begin result := [ chassis , engine , control , weapon ] ;
30687: LD_ADDR_VAR 0 6
30691: PUSH
30692: LD_VAR 0 2
30696: PUSH
30697: LD_VAR 0 3
30701: PUSH
30702: LD_VAR 0 4
30706: PUSH
30707: LD_VAR 0 5
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: ST_TO_ADDR
// exit ;
30718: GO 31011
// end ; if not chassis in _chassis then
30720: LD_VAR 0 2
30724: PUSH
30725: LD_VAR 0 9
30729: IN
30730: NOT
30731: IFFALSE 30757
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30733: LD_ADDR_VAR 0 2
30737: PUSH
30738: LD_VAR 0 9
30742: PUSH
30743: LD_INT 1
30745: PPUSH
30746: LD_VAR 0 9
30750: PPUSH
30751: CALL_OW 12
30755: ARRAY
30756: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30757: LD_VAR 0 2
30761: PPUSH
30762: LD_VAR 0 3
30766: PPUSH
30767: CALL 31016 0 2
30771: NOT
30772: IFFALSE 30831
// repeat engine := _engine [ 1 ] ;
30774: LD_ADDR_VAR 0 3
30778: PUSH
30779: LD_VAR 0 11
30783: PUSH
30784: LD_INT 1
30786: ARRAY
30787: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30788: LD_ADDR_VAR 0 11
30792: PUSH
30793: LD_VAR 0 11
30797: PPUSH
30798: LD_INT 1
30800: PPUSH
30801: CALL_OW 3
30805: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30806: LD_VAR 0 2
30810: PPUSH
30811: LD_VAR 0 3
30815: PPUSH
30816: CALL 31016 0 2
30820: PUSH
30821: LD_VAR 0 11
30825: PUSH
30826: EMPTY
30827: EQUAL
30828: OR
30829: IFFALSE 30774
// if not control in _control then
30831: LD_VAR 0 4
30835: PUSH
30836: LD_VAR 0 12
30840: IN
30841: NOT
30842: IFFALSE 30868
// control := _control [ rand ( 1 , _control ) ] ;
30844: LD_ADDR_VAR 0 4
30848: PUSH
30849: LD_VAR 0 12
30853: PUSH
30854: LD_INT 1
30856: PPUSH
30857: LD_VAR 0 12
30861: PPUSH
30862: CALL_OW 12
30866: ARRAY
30867: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_VAR 0 5
30877: PPUSH
30878: CALL 31236 0 2
30882: NOT
30883: IFFALSE 30942
// repeat weapon := _weapon [ 1 ] ;
30885: LD_ADDR_VAR 0 5
30889: PUSH
30890: LD_VAR 0 10
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30899: LD_ADDR_VAR 0 10
30903: PUSH
30904: LD_VAR 0 10
30908: PPUSH
30909: LD_INT 1
30911: PPUSH
30912: CALL_OW 3
30916: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30917: LD_VAR 0 2
30921: PPUSH
30922: LD_VAR 0 5
30926: PPUSH
30927: CALL 31236 0 2
30931: PUSH
30932: LD_VAR 0 10
30936: PUSH
30937: EMPTY
30938: EQUAL
30939: OR
30940: IFFALSE 30885
// result := [ ] ;
30942: LD_ADDR_VAR 0 6
30946: PUSH
30947: EMPTY
30948: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30949: LD_VAR 0 1
30953: PPUSH
30954: LD_VAR 0 2
30958: PPUSH
30959: LD_VAR 0 3
30963: PPUSH
30964: LD_VAR 0 4
30968: PPUSH
30969: LD_VAR 0 5
30973: PPUSH
30974: CALL_OW 448
30978: IFFALSE 31011
// result := [ chassis , engine , control , weapon ] ;
30980: LD_ADDR_VAR 0 6
30984: PUSH
30985: LD_VAR 0 2
30989: PUSH
30990: LD_VAR 0 3
30994: PUSH
30995: LD_VAR 0 4
30999: PUSH
31000: LD_VAR 0 5
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: ST_TO_ADDR
// end ;
31011: LD_VAR 0 6
31015: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31016: LD_INT 0
31018: PPUSH
// if not chassis or not engine then
31019: LD_VAR 0 1
31023: NOT
31024: PUSH
31025: LD_VAR 0 2
31029: NOT
31030: OR
31031: IFFALSE 31035
// exit ;
31033: GO 31231
// case engine of engine_solar :
31035: LD_VAR 0 2
31039: PUSH
31040: LD_INT 2
31042: DOUBLE
31043: EQUAL
31044: IFTRUE 31048
31046: GO 31086
31048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31049: LD_ADDR_VAR 0 3
31053: PUSH
31054: LD_INT 11
31056: PUSH
31057: LD_INT 12
31059: PUSH
31060: LD_INT 13
31062: PUSH
31063: LD_INT 14
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: ST_TO_ADDR
31084: GO 31215
31086: LD_INT 1
31088: DOUBLE
31089: EQUAL
31090: IFTRUE 31094
31092: GO 31156
31094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31095: LD_ADDR_VAR 0 3
31099: PUSH
31100: LD_INT 11
31102: PUSH
31103: LD_INT 12
31105: PUSH
31106: LD_INT 13
31108: PUSH
31109: LD_INT 14
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: LD_INT 4
31123: PUSH
31124: LD_INT 5
31126: PUSH
31127: LD_INT 21
31129: PUSH
31130: LD_INT 23
31132: PUSH
31133: LD_INT 22
31135: PUSH
31136: LD_INT 24
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
31154: GO 31215
31156: LD_INT 3
31158: DOUBLE
31159: EQUAL
31160: IFTRUE 31164
31162: GO 31214
31164: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31165: LD_ADDR_VAR 0 3
31169: PUSH
31170: LD_INT 13
31172: PUSH
31173: LD_INT 14
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: LD_INT 4
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 21
31190: PUSH
31191: LD_INT 22
31193: PUSH
31194: LD_INT 23
31196: PUSH
31197: LD_INT 24
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
31212: GO 31215
31214: POP
// result := ( chassis in result ) ;
31215: LD_ADDR_VAR 0 3
31219: PUSH
31220: LD_VAR 0 1
31224: PUSH
31225: LD_VAR 0 3
31229: IN
31230: ST_TO_ADDR
// end ;
31231: LD_VAR 0 3
31235: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31236: LD_INT 0
31238: PPUSH
// if not chassis or not weapon then
31239: LD_VAR 0 1
31243: NOT
31244: PUSH
31245: LD_VAR 0 2
31249: NOT
31250: OR
31251: IFFALSE 31255
// exit ;
31253: GO 32317
// case weapon of us_machine_gun :
31255: LD_VAR 0 2
31259: PUSH
31260: LD_INT 2
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31268
31266: GO 31298
31268: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31269: LD_ADDR_VAR 0 3
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: LD_INT 4
31285: PUSH
31286: LD_INT 5
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
31296: GO 32301
31298: LD_INT 3
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31336
31306: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: LD_INT 4
31323: PUSH
31324: LD_INT 5
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: ST_TO_ADDR
31334: GO 32301
31336: LD_INT 11
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31374
31344: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: LD_INT 4
31361: PUSH
31362: LD_INT 5
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
31372: GO 32301
31374: LD_INT 4
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31408
31382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: LD_INT 4
31396: PUSH
31397: LD_INT 5
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
31406: GO 32301
31408: LD_INT 5
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31442
31416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31417: LD_ADDR_VAR 0 3
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: LD_INT 4
31430: PUSH
31431: LD_INT 5
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
31440: GO 32301
31442: LD_INT 9
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31476
31450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: LD_INT 4
31464: PUSH
31465: LD_INT 5
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
31474: GO 32301
31476: LD_INT 7
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31510
31484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 4
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
31508: GO 32301
31510: LD_INT 12
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31544
31518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31519: LD_ADDR_VAR 0 3
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 4
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
31542: GO 32301
31544: LD_INT 13
31546: DOUBLE
31547: EQUAL
31548: IFTRUE 31552
31550: GO 31578
31552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31553: LD_ADDR_VAR 0 3
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 4
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
31576: GO 32301
31578: LD_INT 14
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 31604
31586: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31587: LD_ADDR_VAR 0 3
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: LD_INT 5
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: ST_TO_ADDR
31602: GO 32301
31604: LD_INT 6
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31630
31612: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_INT 4
31620: PUSH
31621: LD_INT 5
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: ST_TO_ADDR
31628: GO 32301
31630: LD_INT 10
31632: DOUBLE
31633: EQUAL
31634: IFTRUE 31638
31636: GO 31656
31638: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31639: LD_ADDR_VAR 0 3
31643: PUSH
31644: LD_INT 4
31646: PUSH
31647: LD_INT 5
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: ST_TO_ADDR
31654: GO 32301
31656: LD_INT 22
31658: DOUBLE
31659: EQUAL
31660: IFTRUE 31664
31662: GO 31690
31664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31665: LD_ADDR_VAR 0 3
31669: PUSH
31670: LD_INT 11
31672: PUSH
31673: LD_INT 12
31675: PUSH
31676: LD_INT 13
31678: PUSH
31679: LD_INT 14
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: ST_TO_ADDR
31688: GO 32301
31690: LD_INT 23
31692: DOUBLE
31693: EQUAL
31694: IFTRUE 31698
31696: GO 31724
31698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_INT 11
31706: PUSH
31707: LD_INT 12
31709: PUSH
31710: LD_INT 13
31712: PUSH
31713: LD_INT 14
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: ST_TO_ADDR
31722: GO 32301
31724: LD_INT 24
31726: DOUBLE
31727: EQUAL
31728: IFTRUE 31732
31730: GO 31758
31732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31733: LD_ADDR_VAR 0 3
31737: PUSH
31738: LD_INT 11
31740: PUSH
31741: LD_INT 12
31743: PUSH
31744: LD_INT 13
31746: PUSH
31747: LD_INT 14
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: ST_TO_ADDR
31756: GO 32301
31758: LD_INT 30
31760: DOUBLE
31761: EQUAL
31762: IFTRUE 31766
31764: GO 31792
31766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31767: LD_ADDR_VAR 0 3
31771: PUSH
31772: LD_INT 11
31774: PUSH
31775: LD_INT 12
31777: PUSH
31778: LD_INT 13
31780: PUSH
31781: LD_INT 14
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
31790: GO 32301
31792: LD_INT 25
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31818
31800: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31801: LD_ADDR_VAR 0 3
31805: PUSH
31806: LD_INT 13
31808: PUSH
31809: LD_INT 14
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: ST_TO_ADDR
31816: GO 32301
31818: LD_INT 27
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31826
31824: GO 31844
31826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31827: LD_ADDR_VAR 0 3
31831: PUSH
31832: LD_INT 13
31834: PUSH
31835: LD_INT 14
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: ST_TO_ADDR
31842: GO 32301
31844: LD_EXP 101
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31854
31852: GO 31880
31854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31855: LD_ADDR_VAR 0 3
31859: PUSH
31860: LD_INT 11
31862: PUSH
31863: LD_INT 12
31865: PUSH
31866: LD_INT 13
31868: PUSH
31869: LD_INT 14
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: ST_TO_ADDR
31878: GO 32301
31880: LD_INT 28
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31906
31888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31889: LD_ADDR_VAR 0 3
31893: PUSH
31894: LD_INT 13
31896: PUSH
31897: LD_INT 14
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: ST_TO_ADDR
31904: GO 32301
31906: LD_INT 29
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31932
31914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_INT 13
31922: PUSH
31923: LD_INT 14
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: ST_TO_ADDR
31930: GO 32301
31932: LD_INT 31
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31958
31940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 13
31948: PUSH
31949: LD_INT 14
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: ST_TO_ADDR
31956: GO 32301
31958: LD_INT 26
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31984
31966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31967: LD_ADDR_VAR 0 3
31971: PUSH
31972: LD_INT 13
31974: PUSH
31975: LD_INT 14
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: ST_TO_ADDR
31982: GO 32301
31984: LD_INT 42
31986: DOUBLE
31987: EQUAL
31988: IFTRUE 31992
31990: GO 32018
31992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31993: LD_ADDR_VAR 0 3
31997: PUSH
31998: LD_INT 21
32000: PUSH
32001: LD_INT 22
32003: PUSH
32004: LD_INT 23
32006: PUSH
32007: LD_INT 24
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
32016: GO 32301
32018: LD_INT 43
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32052
32026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32027: LD_ADDR_VAR 0 3
32031: PUSH
32032: LD_INT 21
32034: PUSH
32035: LD_INT 22
32037: PUSH
32038: LD_INT 23
32040: PUSH
32041: LD_INT 24
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: ST_TO_ADDR
32050: GO 32301
32052: LD_INT 44
32054: DOUBLE
32055: EQUAL
32056: IFTRUE 32060
32058: GO 32086
32060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32061: LD_ADDR_VAR 0 3
32065: PUSH
32066: LD_INT 21
32068: PUSH
32069: LD_INT 22
32071: PUSH
32072: LD_INT 23
32074: PUSH
32075: LD_INT 24
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
32084: GO 32301
32086: LD_INT 45
32088: DOUBLE
32089: EQUAL
32090: IFTRUE 32094
32092: GO 32120
32094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32095: LD_ADDR_VAR 0 3
32099: PUSH
32100: LD_INT 21
32102: PUSH
32103: LD_INT 22
32105: PUSH
32106: LD_INT 23
32108: PUSH
32109: LD_INT 24
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: ST_TO_ADDR
32118: GO 32301
32120: LD_INT 49
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32154
32128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: LD_INT 21
32136: PUSH
32137: LD_INT 22
32139: PUSH
32140: LD_INT 23
32142: PUSH
32143: LD_INT 24
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: ST_TO_ADDR
32152: GO 32301
32154: LD_INT 51
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32188
32162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32163: LD_ADDR_VAR 0 3
32167: PUSH
32168: LD_INT 21
32170: PUSH
32171: LD_INT 22
32173: PUSH
32174: LD_INT 23
32176: PUSH
32177: LD_INT 24
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
32186: GO 32301
32188: LD_INT 52
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32222
32196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_INT 21
32204: PUSH
32205: LD_INT 22
32207: PUSH
32208: LD_INT 23
32210: PUSH
32211: LD_INT 24
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
32220: GO 32301
32222: LD_INT 53
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32230
32228: GO 32248
32230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: LD_INT 23
32238: PUSH
32239: LD_INT 24
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: ST_TO_ADDR
32246: GO 32301
32248: LD_INT 46
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32274
32256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32257: LD_ADDR_VAR 0 3
32261: PUSH
32262: LD_INT 23
32264: PUSH
32265: LD_INT 24
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: ST_TO_ADDR
32272: GO 32301
32274: LD_INT 47
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32282
32280: GO 32300
32282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32283: LD_ADDR_VAR 0 3
32287: PUSH
32288: LD_INT 23
32290: PUSH
32291: LD_INT 24
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: ST_TO_ADDR
32298: GO 32301
32300: POP
// result := ( chassis in result ) ;
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_VAR 0 1
32310: PUSH
32311: LD_VAR 0 3
32315: IN
32316: ST_TO_ADDR
// end ;
32317: LD_VAR 0 3
32321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32322: LD_INT 0
32324: PPUSH
32325: PPUSH
32326: PPUSH
32327: PPUSH
32328: PPUSH
32329: PPUSH
32330: PPUSH
// result := array ;
32331: LD_ADDR_VAR 0 5
32335: PUSH
32336: LD_VAR 0 1
32340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32341: LD_VAR 0 1
32345: NOT
32346: PUSH
32347: LD_VAR 0 2
32351: NOT
32352: OR
32353: PUSH
32354: LD_VAR 0 3
32358: NOT
32359: OR
32360: PUSH
32361: LD_VAR 0 2
32365: PUSH
32366: LD_VAR 0 1
32370: GREATER
32371: OR
32372: PUSH
32373: LD_VAR 0 3
32377: PUSH
32378: LD_VAR 0 1
32382: GREATER
32383: OR
32384: IFFALSE 32388
// exit ;
32386: GO 32684
// if direction then
32388: LD_VAR 0 4
32392: IFFALSE 32456
// begin d := 1 ;
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_INT 1
32401: ST_TO_ADDR
// if i_from > i_to then
32402: LD_VAR 0 2
32406: PUSH
32407: LD_VAR 0 3
32411: GREATER
32412: IFFALSE 32438
// length := ( array - i_from ) + i_to else
32414: LD_ADDR_VAR 0 11
32418: PUSH
32419: LD_VAR 0 1
32423: PUSH
32424: LD_VAR 0 2
32428: MINUS
32429: PUSH
32430: LD_VAR 0 3
32434: PLUS
32435: ST_TO_ADDR
32436: GO 32454
// length := i_to - i_from ;
32438: LD_ADDR_VAR 0 11
32442: PUSH
32443: LD_VAR 0 3
32447: PUSH
32448: LD_VAR 0 2
32452: MINUS
32453: ST_TO_ADDR
// end else
32454: GO 32517
// begin d := - 1 ;
32456: LD_ADDR_VAR 0 9
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: ST_TO_ADDR
// if i_from > i_to then
32465: LD_VAR 0 2
32469: PUSH
32470: LD_VAR 0 3
32474: GREATER
32475: IFFALSE 32495
// length := i_from - i_to else
32477: LD_ADDR_VAR 0 11
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: LD_VAR 0 3
32491: MINUS
32492: ST_TO_ADDR
32493: GO 32517
// length := ( array - i_to ) + i_from ;
32495: LD_ADDR_VAR 0 11
32499: PUSH
32500: LD_VAR 0 1
32504: PUSH
32505: LD_VAR 0 3
32509: MINUS
32510: PUSH
32511: LD_VAR 0 2
32515: PLUS
32516: ST_TO_ADDR
// end ; if not length then
32517: LD_VAR 0 11
32521: NOT
32522: IFFALSE 32526
// exit ;
32524: GO 32684
// tmp := array ;
32526: LD_ADDR_VAR 0 10
32530: PUSH
32531: LD_VAR 0 1
32535: ST_TO_ADDR
// for i = 1 to length do
32536: LD_ADDR_VAR 0 6
32540: PUSH
32541: DOUBLE
32542: LD_INT 1
32544: DEC
32545: ST_TO_ADDR
32546: LD_VAR 0 11
32550: PUSH
32551: FOR_TO
32552: IFFALSE 32672
// begin for j = 1 to array do
32554: LD_ADDR_VAR 0 7
32558: PUSH
32559: DOUBLE
32560: LD_INT 1
32562: DEC
32563: ST_TO_ADDR
32564: LD_VAR 0 1
32568: PUSH
32569: FOR_TO
32570: IFFALSE 32658
// begin k := j + d ;
32572: LD_ADDR_VAR 0 8
32576: PUSH
32577: LD_VAR 0 7
32581: PUSH
32582: LD_VAR 0 9
32586: PLUS
32587: ST_TO_ADDR
// if k > array then
32588: LD_VAR 0 8
32592: PUSH
32593: LD_VAR 0 1
32597: GREATER
32598: IFFALSE 32608
// k := 1 ;
32600: LD_ADDR_VAR 0 8
32604: PUSH
32605: LD_INT 1
32607: ST_TO_ADDR
// if not k then
32608: LD_VAR 0 8
32612: NOT
32613: IFFALSE 32625
// k := array ;
32615: LD_ADDR_VAR 0 8
32619: PUSH
32620: LD_VAR 0 1
32624: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32625: LD_ADDR_VAR 0 10
32629: PUSH
32630: LD_VAR 0 10
32634: PPUSH
32635: LD_VAR 0 8
32639: PPUSH
32640: LD_VAR 0 1
32644: PUSH
32645: LD_VAR 0 7
32649: ARRAY
32650: PPUSH
32651: CALL_OW 1
32655: ST_TO_ADDR
// end ;
32656: GO 32569
32658: POP
32659: POP
// array := tmp ;
32660: LD_ADDR_VAR 0 1
32664: PUSH
32665: LD_VAR 0 10
32669: ST_TO_ADDR
// end ;
32670: GO 32551
32672: POP
32673: POP
// result := array ;
32674: LD_ADDR_VAR 0 5
32678: PUSH
32679: LD_VAR 0 1
32683: ST_TO_ADDR
// end ;
32684: LD_VAR 0 5
32688: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32689: LD_INT 0
32691: PPUSH
32692: PPUSH
// result := 0 ;
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_INT 0
32700: ST_TO_ADDR
// if not array or not value in array then
32701: LD_VAR 0 1
32705: NOT
32706: PUSH
32707: LD_VAR 0 2
32711: PUSH
32712: LD_VAR 0 1
32716: IN
32717: NOT
32718: OR
32719: IFFALSE 32723
// exit ;
32721: GO 32777
// for i = 1 to array do
32723: LD_ADDR_VAR 0 4
32727: PUSH
32728: DOUBLE
32729: LD_INT 1
32731: DEC
32732: ST_TO_ADDR
32733: LD_VAR 0 1
32737: PUSH
32738: FOR_TO
32739: IFFALSE 32775
// if value = array [ i ] then
32741: LD_VAR 0 2
32745: PUSH
32746: LD_VAR 0 1
32750: PUSH
32751: LD_VAR 0 4
32755: ARRAY
32756: EQUAL
32757: IFFALSE 32773
// begin result := i ;
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_VAR 0 4
32768: ST_TO_ADDR
// exit ;
32769: POP
32770: POP
32771: GO 32777
// end ;
32773: GO 32738
32775: POP
32776: POP
// end ;
32777: LD_VAR 0 3
32781: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32782: LD_INT 0
32784: PPUSH
// vc_chassis := chassis ;
32785: LD_ADDR_OWVAR 37
32789: PUSH
32790: LD_VAR 0 1
32794: ST_TO_ADDR
// vc_engine := engine ;
32795: LD_ADDR_OWVAR 39
32799: PUSH
32800: LD_VAR 0 2
32804: ST_TO_ADDR
// vc_control := control ;
32805: LD_ADDR_OWVAR 38
32809: PUSH
32810: LD_VAR 0 3
32814: ST_TO_ADDR
// vc_weapon := weapon ;
32815: LD_ADDR_OWVAR 40
32819: PUSH
32820: LD_VAR 0 4
32824: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32825: LD_ADDR_OWVAR 41
32829: PUSH
32830: LD_VAR 0 5
32834: ST_TO_ADDR
// end ;
32835: LD_VAR 0 6
32839: RET
// export function WantPlant ( unit ) ; var task ; begin
32840: LD_INT 0
32842: PPUSH
32843: PPUSH
// result := false ;
32844: LD_ADDR_VAR 0 2
32848: PUSH
32849: LD_INT 0
32851: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 437
32866: ST_TO_ADDR
// if task then
32867: LD_VAR 0 3
32871: IFFALSE 32899
// if task [ 1 ] [ 1 ] = p then
32873: LD_VAR 0 3
32877: PUSH
32878: LD_INT 1
32880: ARRAY
32881: PUSH
32882: LD_INT 1
32884: ARRAY
32885: PUSH
32886: LD_STRING p
32888: EQUAL
32889: IFFALSE 32899
// result := true ;
32891: LD_ADDR_VAR 0 2
32895: PUSH
32896: LD_INT 1
32898: ST_TO_ADDR
// end ;
32899: LD_VAR 0 2
32903: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32904: LD_INT 0
32906: PPUSH
32907: PPUSH
32908: PPUSH
32909: PPUSH
// if pos < 1 then
32910: LD_VAR 0 2
32914: PUSH
32915: LD_INT 1
32917: LESS
32918: IFFALSE 32922
// exit ;
32920: GO 33225
// if pos = 1 then
32922: LD_VAR 0 2
32926: PUSH
32927: LD_INT 1
32929: EQUAL
32930: IFFALSE 32963
// result := Replace ( arr , pos [ 1 ] , value ) else
32932: LD_ADDR_VAR 0 4
32936: PUSH
32937: LD_VAR 0 1
32941: PPUSH
32942: LD_VAR 0 2
32946: PUSH
32947: LD_INT 1
32949: ARRAY
32950: PPUSH
32951: LD_VAR 0 3
32955: PPUSH
32956: CALL_OW 1
32960: ST_TO_ADDR
32961: GO 33225
// begin tmp := arr ;
32963: LD_ADDR_VAR 0 6
32967: PUSH
32968: LD_VAR 0 1
32972: ST_TO_ADDR
// s_arr := [ tmp ] ;
32973: LD_ADDR_VAR 0 7
32977: PUSH
32978: LD_VAR 0 6
32982: PUSH
32983: EMPTY
32984: LIST
32985: ST_TO_ADDR
// for i = 1 to pos - 1 do
32986: LD_ADDR_VAR 0 5
32990: PUSH
32991: DOUBLE
32992: LD_INT 1
32994: DEC
32995: ST_TO_ADDR
32996: LD_VAR 0 2
33000: PUSH
33001: LD_INT 1
33003: MINUS
33004: PUSH
33005: FOR_TO
33006: IFFALSE 33051
// begin tmp := tmp [ pos [ i ] ] ;
33008: LD_ADDR_VAR 0 6
33012: PUSH
33013: LD_VAR 0 6
33017: PUSH
33018: LD_VAR 0 2
33022: PUSH
33023: LD_VAR 0 5
33027: ARRAY
33028: ARRAY
33029: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33030: LD_ADDR_VAR 0 7
33034: PUSH
33035: LD_VAR 0 7
33039: PUSH
33040: LD_VAR 0 6
33044: PUSH
33045: EMPTY
33046: LIST
33047: ADD
33048: ST_TO_ADDR
// end ;
33049: GO 33005
33051: POP
33052: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33053: LD_ADDR_VAR 0 6
33057: PUSH
33058: LD_VAR 0 6
33062: PPUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_VAR 0 2
33072: ARRAY
33073: PPUSH
33074: LD_VAR 0 3
33078: PPUSH
33079: CALL_OW 1
33083: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33084: LD_ADDR_VAR 0 7
33088: PUSH
33089: LD_VAR 0 7
33093: PPUSH
33094: LD_VAR 0 7
33098: PPUSH
33099: LD_VAR 0 6
33103: PPUSH
33104: CALL_OW 1
33108: ST_TO_ADDR
// for i = s_arr downto 2 do
33109: LD_ADDR_VAR 0 5
33113: PUSH
33114: DOUBLE
33115: LD_VAR 0 7
33119: INC
33120: ST_TO_ADDR
33121: LD_INT 2
33123: PUSH
33124: FOR_DOWNTO
33125: IFFALSE 33209
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33127: LD_ADDR_VAR 0 6
33131: PUSH
33132: LD_VAR 0 7
33136: PUSH
33137: LD_VAR 0 5
33141: PUSH
33142: LD_INT 1
33144: MINUS
33145: ARRAY
33146: PPUSH
33147: LD_VAR 0 2
33151: PUSH
33152: LD_VAR 0 5
33156: PUSH
33157: LD_INT 1
33159: MINUS
33160: ARRAY
33161: PPUSH
33162: LD_VAR 0 7
33166: PUSH
33167: LD_VAR 0 5
33171: ARRAY
33172: PPUSH
33173: CALL_OW 1
33177: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33178: LD_ADDR_VAR 0 7
33182: PUSH
33183: LD_VAR 0 7
33187: PPUSH
33188: LD_VAR 0 5
33192: PUSH
33193: LD_INT 1
33195: MINUS
33196: PPUSH
33197: LD_VAR 0 6
33201: PPUSH
33202: CALL_OW 1
33206: ST_TO_ADDR
// end ;
33207: GO 33124
33209: POP
33210: POP
// result := s_arr [ 1 ] ;
33211: LD_ADDR_VAR 0 4
33215: PUSH
33216: LD_VAR 0 7
33220: PUSH
33221: LD_INT 1
33223: ARRAY
33224: ST_TO_ADDR
// end ; end ;
33225: LD_VAR 0 4
33229: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33230: LD_INT 0
33232: PPUSH
33233: PPUSH
// if not list then
33234: LD_VAR 0 1
33238: NOT
33239: IFFALSE 33243
// exit ;
33241: GO 33334
// i := list [ pos1 ] ;
33243: LD_ADDR_VAR 0 5
33247: PUSH
33248: LD_VAR 0 1
33252: PUSH
33253: LD_VAR 0 2
33257: ARRAY
33258: ST_TO_ADDR
// if not i then
33259: LD_VAR 0 5
33263: NOT
33264: IFFALSE 33268
// exit ;
33266: GO 33334
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33268: LD_ADDR_VAR 0 1
33272: PUSH
33273: LD_VAR 0 1
33277: PPUSH
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 1
33287: PUSH
33288: LD_VAR 0 3
33292: ARRAY
33293: PPUSH
33294: CALL_OW 1
33298: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33299: LD_ADDR_VAR 0 1
33303: PUSH
33304: LD_VAR 0 1
33308: PPUSH
33309: LD_VAR 0 3
33313: PPUSH
33314: LD_VAR 0 5
33318: PPUSH
33319: CALL_OW 1
33323: ST_TO_ADDR
// result := list ;
33324: LD_ADDR_VAR 0 4
33328: PUSH
33329: LD_VAR 0 1
33333: ST_TO_ADDR
// end ;
33334: LD_VAR 0 4
33338: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33339: LD_INT 0
33341: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33342: LD_ADDR_VAR 0 5
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 250
33356: PPUSH
33357: LD_VAR 0 1
33361: PPUSH
33362: CALL_OW 251
33366: PPUSH
33367: LD_VAR 0 2
33371: PPUSH
33372: LD_VAR 0 3
33376: PPUSH
33377: LD_VAR 0 4
33381: PPUSH
33382: CALL 33392 0 5
33386: ST_TO_ADDR
// end ;
33387: LD_VAR 0 5
33391: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33392: LD_INT 0
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
// if not list then
33398: LD_VAR 0 3
33402: NOT
33403: IFFALSE 33407
// exit ;
33405: GO 33795
// result := [ ] ;
33407: LD_ADDR_VAR 0 6
33411: PUSH
33412: EMPTY
33413: ST_TO_ADDR
// for i in list do
33414: LD_ADDR_VAR 0 7
33418: PUSH
33419: LD_VAR 0 3
33423: PUSH
33424: FOR_IN
33425: IFFALSE 33627
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33427: LD_ADDR_VAR 0 9
33431: PUSH
33432: LD_VAR 0 7
33436: PPUSH
33437: LD_VAR 0 1
33441: PPUSH
33442: LD_VAR 0 2
33446: PPUSH
33447: CALL_OW 297
33451: ST_TO_ADDR
// if not result then
33452: LD_VAR 0 6
33456: NOT
33457: IFFALSE 33483
// result := [ [ i , tmp ] ] else
33459: LD_ADDR_VAR 0 6
33463: PUSH
33464: LD_VAR 0 7
33468: PUSH
33469: LD_VAR 0 9
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: ST_TO_ADDR
33481: GO 33625
// begin if result [ result ] [ 2 ] < tmp then
33483: LD_VAR 0 6
33487: PUSH
33488: LD_VAR 0 6
33492: ARRAY
33493: PUSH
33494: LD_INT 2
33496: ARRAY
33497: PUSH
33498: LD_VAR 0 9
33502: LESS
33503: IFFALSE 33545
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33505: LD_ADDR_VAR 0 6
33509: PUSH
33510: LD_VAR 0 6
33514: PPUSH
33515: LD_VAR 0 6
33519: PUSH
33520: LD_INT 1
33522: PLUS
33523: PPUSH
33524: LD_VAR 0 7
33528: PUSH
33529: LD_VAR 0 9
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PPUSH
33538: CALL_OW 2
33542: ST_TO_ADDR
33543: GO 33625
// for j = 1 to result do
33545: LD_ADDR_VAR 0 8
33549: PUSH
33550: DOUBLE
33551: LD_INT 1
33553: DEC
33554: ST_TO_ADDR
33555: LD_VAR 0 6
33559: PUSH
33560: FOR_TO
33561: IFFALSE 33623
// begin if tmp < result [ j ] [ 2 ] then
33563: LD_VAR 0 9
33567: PUSH
33568: LD_VAR 0 6
33572: PUSH
33573: LD_VAR 0 8
33577: ARRAY
33578: PUSH
33579: LD_INT 2
33581: ARRAY
33582: LESS
33583: IFFALSE 33621
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33585: LD_ADDR_VAR 0 6
33589: PUSH
33590: LD_VAR 0 6
33594: PPUSH
33595: LD_VAR 0 8
33599: PPUSH
33600: LD_VAR 0 7
33604: PUSH
33605: LD_VAR 0 9
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 2
33618: ST_TO_ADDR
// break ;
33619: GO 33623
// end ; end ;
33621: GO 33560
33623: POP
33624: POP
// end ; end ;
33625: GO 33424
33627: POP
33628: POP
// if result and not asc then
33629: LD_VAR 0 6
33633: PUSH
33634: LD_VAR 0 4
33638: NOT
33639: AND
33640: IFFALSE 33715
// begin tmp := result ;
33642: LD_ADDR_VAR 0 9
33646: PUSH
33647: LD_VAR 0 6
33651: ST_TO_ADDR
// for i = tmp downto 1 do
33652: LD_ADDR_VAR 0 7
33656: PUSH
33657: DOUBLE
33658: LD_VAR 0 9
33662: INC
33663: ST_TO_ADDR
33664: LD_INT 1
33666: PUSH
33667: FOR_DOWNTO
33668: IFFALSE 33713
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33670: LD_ADDR_VAR 0 6
33674: PUSH
33675: LD_VAR 0 6
33679: PPUSH
33680: LD_VAR 0 9
33684: PUSH
33685: LD_VAR 0 7
33689: MINUS
33690: PUSH
33691: LD_INT 1
33693: PLUS
33694: PPUSH
33695: LD_VAR 0 9
33699: PUSH
33700: LD_VAR 0 7
33704: ARRAY
33705: PPUSH
33706: CALL_OW 1
33710: ST_TO_ADDR
33711: GO 33667
33713: POP
33714: POP
// end ; tmp := [ ] ;
33715: LD_ADDR_VAR 0 9
33719: PUSH
33720: EMPTY
33721: ST_TO_ADDR
// if mode then
33722: LD_VAR 0 5
33726: IFFALSE 33795
// begin for i = 1 to result do
33728: LD_ADDR_VAR 0 7
33732: PUSH
33733: DOUBLE
33734: LD_INT 1
33736: DEC
33737: ST_TO_ADDR
33738: LD_VAR 0 6
33742: PUSH
33743: FOR_TO
33744: IFFALSE 33783
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33746: LD_ADDR_VAR 0 9
33750: PUSH
33751: LD_VAR 0 9
33755: PPUSH
33756: LD_VAR 0 7
33760: PPUSH
33761: LD_VAR 0 6
33765: PUSH
33766: LD_VAR 0 7
33770: ARRAY
33771: PUSH
33772: LD_INT 1
33774: ARRAY
33775: PPUSH
33776: CALL_OW 1
33780: ST_TO_ADDR
33781: GO 33743
33783: POP
33784: POP
// result := tmp ;
33785: LD_ADDR_VAR 0 6
33789: PUSH
33790: LD_VAR 0 9
33794: ST_TO_ADDR
// end ; end ;
33795: LD_VAR 0 6
33799: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33800: LD_INT 0
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33808: LD_ADDR_VAR 0 5
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: ST_TO_ADDR
// if not x or not y then
33830: LD_VAR 0 2
33834: NOT
33835: PUSH
33836: LD_VAR 0 3
33840: NOT
33841: OR
33842: IFFALSE 33846
// exit ;
33844: GO 35498
// if not range then
33846: LD_VAR 0 4
33850: NOT
33851: IFFALSE 33861
// range := 10 ;
33853: LD_ADDR_VAR 0 4
33857: PUSH
33858: LD_INT 10
33860: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33861: LD_ADDR_VAR 0 8
33865: PUSH
33866: LD_INT 81
33868: PUSH
33869: LD_VAR 0 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 92
33880: PUSH
33881: LD_VAR 0 2
33885: PUSH
33886: LD_VAR 0 3
33890: PUSH
33891: LD_VAR 0 4
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: LD_INT 21
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PPUSH
33924: CALL_OW 69
33928: ST_TO_ADDR
// if not tmp then
33929: LD_VAR 0 8
33933: NOT
33934: IFFALSE 33938
// exit ;
33936: GO 35498
// for i in tmp do
33938: LD_ADDR_VAR 0 6
33942: PUSH
33943: LD_VAR 0 8
33947: PUSH
33948: FOR_IN
33949: IFFALSE 35473
// begin points := [ 0 , 0 , 0 ] ;
33951: LD_ADDR_VAR 0 9
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: ST_TO_ADDR
// bpoints := 1 ;
33970: LD_ADDR_VAR 0 10
33974: PUSH
33975: LD_INT 1
33977: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33978: LD_VAR 0 6
33982: PPUSH
33983: CALL_OW 247
33987: PUSH
33988: LD_INT 1
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34574
33996: POP
// begin if GetClass ( i ) = 1 then
33997: LD_VAR 0 6
34001: PPUSH
34002: CALL_OW 257
34006: PUSH
34007: LD_INT 1
34009: EQUAL
34010: IFFALSE 34031
// points := [ 10 , 5 , 3 ] ;
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_INT 10
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34031: LD_VAR 0 6
34035: PPUSH
34036: CALL_OW 257
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: LD_INT 4
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: IN
34055: IFFALSE 34076
// points := [ 3 , 2 , 1 ] ;
34057: LD_ADDR_VAR 0 9
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34076: LD_VAR 0 6
34080: PPUSH
34081: CALL_OW 257
34085: PUSH
34086: LD_INT 5
34088: EQUAL
34089: IFFALSE 34110
// points := [ 130 , 5 , 2 ] ;
34091: LD_ADDR_VAR 0 9
34095: PUSH
34096: LD_INT 130
34098: PUSH
34099: LD_INT 5
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34110: LD_VAR 0 6
34114: PPUSH
34115: CALL_OW 257
34119: PUSH
34120: LD_INT 8
34122: EQUAL
34123: IFFALSE 34144
// points := [ 35 , 35 , 30 ] ;
34125: LD_ADDR_VAR 0 9
34129: PUSH
34130: LD_INT 35
34132: PUSH
34133: LD_INT 35
34135: PUSH
34136: LD_INT 30
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34144: LD_VAR 0 6
34148: PPUSH
34149: CALL_OW 257
34153: PUSH
34154: LD_INT 9
34156: EQUAL
34157: IFFALSE 34178
// points := [ 20 , 55 , 40 ] ;
34159: LD_ADDR_VAR 0 9
34163: PUSH
34164: LD_INT 20
34166: PUSH
34167: LD_INT 55
34169: PUSH
34170: LD_INT 40
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34178: LD_VAR 0 6
34182: PPUSH
34183: CALL_OW 257
34187: PUSH
34188: LD_INT 12
34190: PUSH
34191: LD_INT 16
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: IN
34198: IFFALSE 34219
// points := [ 5 , 3 , 2 ] ;
34200: LD_ADDR_VAR 0 9
34204: PUSH
34205: LD_INT 5
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34219: LD_VAR 0 6
34223: PPUSH
34224: CALL_OW 257
34228: PUSH
34229: LD_INT 17
34231: EQUAL
34232: IFFALSE 34253
// points := [ 100 , 50 , 75 ] ;
34234: LD_ADDR_VAR 0 9
34238: PUSH
34239: LD_INT 100
34241: PUSH
34242: LD_INT 50
34244: PUSH
34245: LD_INT 75
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34253: LD_VAR 0 6
34257: PPUSH
34258: CALL_OW 257
34262: PUSH
34263: LD_INT 15
34265: EQUAL
34266: IFFALSE 34287
// points := [ 10 , 5 , 3 ] ;
34268: LD_ADDR_VAR 0 9
34272: PUSH
34273: LD_INT 10
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 3
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34287: LD_VAR 0 6
34291: PPUSH
34292: CALL_OW 257
34296: PUSH
34297: LD_INT 14
34299: EQUAL
34300: IFFALSE 34321
// points := [ 10 , 0 , 0 ] ;
34302: LD_ADDR_VAR 0 9
34306: PUSH
34307: LD_INT 10
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34321: LD_VAR 0 6
34325: PPUSH
34326: CALL_OW 257
34330: PUSH
34331: LD_INT 11
34333: EQUAL
34334: IFFALSE 34355
// points := [ 30 , 10 , 5 ] ;
34336: LD_ADDR_VAR 0 9
34340: PUSH
34341: LD_INT 30
34343: PUSH
34344: LD_INT 10
34346: PUSH
34347: LD_INT 5
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_INT 5
34362: PPUSH
34363: CALL_OW 321
34367: PUSH
34368: LD_INT 2
34370: EQUAL
34371: IFFALSE 34388
// bpoints := bpoints * 1.8 ;
34373: LD_ADDR_VAR 0 10
34377: PUSH
34378: LD_VAR 0 10
34382: PUSH
34383: LD_REAL  1.80000000000000E+0000
34386: MUL
34387: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 257
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: LD_INT 4
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: IN
34416: PUSH
34417: LD_VAR 0 1
34421: PPUSH
34422: LD_INT 51
34424: PPUSH
34425: CALL_OW 321
34429: PUSH
34430: LD_INT 2
34432: EQUAL
34433: AND
34434: IFFALSE 34451
// bpoints := bpoints * 1.2 ;
34436: LD_ADDR_VAR 0 10
34440: PUSH
34441: LD_VAR 0 10
34445: PUSH
34446: LD_REAL  1.20000000000000E+0000
34449: MUL
34450: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 257
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: LD_INT 7
34466: PUSH
34467: LD_INT 9
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: IN
34475: PUSH
34476: LD_VAR 0 1
34480: PPUSH
34481: LD_INT 52
34483: PPUSH
34484: CALL_OW 321
34488: PUSH
34489: LD_INT 2
34491: EQUAL
34492: AND
34493: IFFALSE 34510
// bpoints := bpoints * 1.5 ;
34495: LD_ADDR_VAR 0 10
34499: PUSH
34500: LD_VAR 0 10
34504: PUSH
34505: LD_REAL  1.50000000000000E+0000
34508: MUL
34509: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34510: LD_VAR 0 1
34514: PPUSH
34515: LD_INT 66
34517: PPUSH
34518: CALL_OW 321
34522: PUSH
34523: LD_INT 2
34525: EQUAL
34526: IFFALSE 34543
// bpoints := bpoints * 1.1 ;
34528: LD_ADDR_VAR 0 10
34532: PUSH
34533: LD_VAR 0 10
34537: PUSH
34538: LD_REAL  1.10000000000000E+0000
34541: MUL
34542: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34543: LD_ADDR_VAR 0 10
34547: PUSH
34548: LD_VAR 0 10
34552: PUSH
34553: LD_VAR 0 6
34557: PPUSH
34558: LD_INT 1
34560: PPUSH
34561: CALL_OW 259
34565: PUSH
34566: LD_REAL  1.15000000000000E+0000
34569: MUL
34570: MUL
34571: ST_TO_ADDR
// end ; unit_vehicle :
34572: GO 35402
34574: LD_INT 2
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34582
34580: GO 35390
34582: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34583: LD_VAR 0 6
34587: PPUSH
34588: CALL_OW 264
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 42
34598: PUSH
34599: LD_INT 24
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: IN
34607: IFFALSE 34628
// points := [ 25 , 5 , 3 ] ;
34609: LD_ADDR_VAR 0 9
34613: PUSH
34614: LD_INT 25
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34628: LD_VAR 0 6
34632: PPUSH
34633: CALL_OW 264
34637: PUSH
34638: LD_INT 4
34640: PUSH
34641: LD_INT 43
34643: PUSH
34644: LD_INT 25
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: IN
34652: IFFALSE 34673
// points := [ 40 , 15 , 5 ] ;
34654: LD_ADDR_VAR 0 9
34658: PUSH
34659: LD_INT 40
34661: PUSH
34662: LD_INT 15
34664: PUSH
34665: LD_INT 5
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34673: LD_VAR 0 6
34677: PPUSH
34678: CALL_OW 264
34682: PUSH
34683: LD_INT 3
34685: PUSH
34686: LD_INT 23
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: IN
34693: IFFALSE 34714
// points := [ 7 , 25 , 8 ] ;
34695: LD_ADDR_VAR 0 9
34699: PUSH
34700: LD_INT 7
34702: PUSH
34703: LD_INT 25
34705: PUSH
34706: LD_INT 8
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34714: LD_VAR 0 6
34718: PPUSH
34719: CALL_OW 264
34723: PUSH
34724: LD_INT 5
34726: PUSH
34727: LD_INT 27
34729: PUSH
34730: LD_INT 44
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: IN
34738: IFFALSE 34759
// points := [ 14 , 50 , 16 ] ;
34740: LD_ADDR_VAR 0 9
34744: PUSH
34745: LD_INT 14
34747: PUSH
34748: LD_INT 50
34750: PUSH
34751: LD_INT 16
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34759: LD_VAR 0 6
34763: PPUSH
34764: CALL_OW 264
34768: PUSH
34769: LD_INT 6
34771: PUSH
34772: LD_INT 46
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: IN
34779: IFFALSE 34800
// points := [ 32 , 120 , 70 ] ;
34781: LD_ADDR_VAR 0 9
34785: PUSH
34786: LD_INT 32
34788: PUSH
34789: LD_INT 120
34791: PUSH
34792: LD_INT 70
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34800: LD_VAR 0 6
34804: PPUSH
34805: CALL_OW 264
34809: PUSH
34810: LD_INT 7
34812: PUSH
34813: LD_INT 28
34815: PUSH
34816: LD_INT 45
34818: PUSH
34819: LD_EXP 101
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: IN
34830: IFFALSE 34851
// points := [ 35 , 20 , 45 ] ;
34832: LD_ADDR_VAR 0 9
34836: PUSH
34837: LD_INT 35
34839: PUSH
34840: LD_INT 20
34842: PUSH
34843: LD_INT 45
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34851: LD_VAR 0 6
34855: PPUSH
34856: CALL_OW 264
34860: PUSH
34861: LD_INT 47
34863: PUSH
34864: EMPTY
34865: LIST
34866: IN
34867: IFFALSE 34888
// points := [ 67 , 45 , 75 ] ;
34869: LD_ADDR_VAR 0 9
34873: PUSH
34874: LD_INT 67
34876: PUSH
34877: LD_INT 45
34879: PUSH
34880: LD_INT 75
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34888: LD_VAR 0 6
34892: PPUSH
34893: CALL_OW 264
34897: PUSH
34898: LD_INT 26
34900: PUSH
34901: EMPTY
34902: LIST
34903: IN
34904: IFFALSE 34925
// points := [ 120 , 30 , 80 ] ;
34906: LD_ADDR_VAR 0 9
34910: PUSH
34911: LD_INT 120
34913: PUSH
34914: LD_INT 30
34916: PUSH
34917: LD_INT 80
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34925: LD_VAR 0 6
34929: PPUSH
34930: CALL_OW 264
34934: PUSH
34935: LD_INT 22
34937: PUSH
34938: EMPTY
34939: LIST
34940: IN
34941: IFFALSE 34962
// points := [ 40 , 1 , 1 ] ;
34943: LD_ADDR_VAR 0 9
34947: PUSH
34948: LD_INT 40
34950: PUSH
34951: LD_INT 1
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34962: LD_VAR 0 6
34966: PPUSH
34967: CALL_OW 264
34971: PUSH
34972: LD_INT 29
34974: PUSH
34975: EMPTY
34976: LIST
34977: IN
34978: IFFALSE 34999
// points := [ 70 , 200 , 400 ] ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_INT 70
34987: PUSH
34988: LD_INT 200
34990: PUSH
34991: LD_INT 400
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34999: LD_VAR 0 6
35003: PPUSH
35004: CALL_OW 264
35008: PUSH
35009: LD_INT 14
35011: PUSH
35012: LD_INT 53
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: IN
35019: IFFALSE 35040
// points := [ 40 , 10 , 20 ] ;
35021: LD_ADDR_VAR 0 9
35025: PUSH
35026: LD_INT 40
35028: PUSH
35029: LD_INT 10
35031: PUSH
35032: LD_INT 20
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 264
35049: PUSH
35050: LD_INT 9
35052: PUSH
35053: EMPTY
35054: LIST
35055: IN
35056: IFFALSE 35077
// points := [ 5 , 70 , 20 ] ;
35058: LD_ADDR_VAR 0 9
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 70
35068: PUSH
35069: LD_INT 20
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35077: LD_VAR 0 6
35081: PPUSH
35082: CALL_OW 264
35086: PUSH
35087: LD_INT 10
35089: PUSH
35090: EMPTY
35091: LIST
35092: IN
35093: IFFALSE 35114
// points := [ 35 , 110 , 70 ] ;
35095: LD_ADDR_VAR 0 9
35099: PUSH
35100: LD_INT 35
35102: PUSH
35103: LD_INT 110
35105: PUSH
35106: LD_INT 70
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35114: LD_VAR 0 6
35118: PPUSH
35119: CALL_OW 265
35123: PUSH
35124: LD_INT 25
35126: EQUAL
35127: IFFALSE 35148
// points := [ 80 , 65 , 100 ] ;
35129: LD_ADDR_VAR 0 9
35133: PUSH
35134: LD_INT 80
35136: PUSH
35137: LD_INT 65
35139: PUSH
35140: LD_INT 100
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35148: LD_VAR 0 6
35152: PPUSH
35153: CALL_OW 263
35157: PUSH
35158: LD_INT 1
35160: EQUAL
35161: IFFALSE 35196
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35163: LD_ADDR_VAR 0 10
35167: PUSH
35168: LD_VAR 0 10
35172: PUSH
35173: LD_VAR 0 6
35177: PPUSH
35178: CALL_OW 311
35182: PPUSH
35183: LD_INT 3
35185: PPUSH
35186: CALL_OW 259
35190: PUSH
35191: LD_INT 4
35193: MUL
35194: MUL
35195: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35196: LD_VAR 0 6
35200: PPUSH
35201: CALL_OW 263
35205: PUSH
35206: LD_INT 2
35208: EQUAL
35209: IFFALSE 35260
// begin j := IsControledBy ( i ) ;
35211: LD_ADDR_VAR 0 7
35215: PUSH
35216: LD_VAR 0 6
35220: PPUSH
35221: CALL_OW 312
35225: ST_TO_ADDR
// if j then
35226: LD_VAR 0 7
35230: IFFALSE 35260
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35232: LD_ADDR_VAR 0 10
35236: PUSH
35237: LD_VAR 0 10
35241: PUSH
35242: LD_VAR 0 7
35246: PPUSH
35247: LD_INT 3
35249: PPUSH
35250: CALL_OW 259
35254: PUSH
35255: LD_INT 3
35257: MUL
35258: MUL
35259: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35260: LD_VAR 0 6
35264: PPUSH
35265: CALL_OW 264
35269: PUSH
35270: LD_INT 5
35272: PUSH
35273: LD_INT 6
35275: PUSH
35276: LD_INT 46
35278: PUSH
35279: LD_INT 44
35281: PUSH
35282: LD_INT 47
35284: PUSH
35285: LD_INT 45
35287: PUSH
35288: LD_INT 28
35290: PUSH
35291: LD_INT 7
35293: PUSH
35294: LD_INT 27
35296: PUSH
35297: LD_INT 29
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: IN
35312: PUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: LD_INT 52
35320: PPUSH
35321: CALL_OW 321
35325: PUSH
35326: LD_INT 2
35328: EQUAL
35329: AND
35330: IFFALSE 35347
// bpoints := bpoints * 1.2 ;
35332: LD_ADDR_VAR 0 10
35336: PUSH
35337: LD_VAR 0 10
35341: PUSH
35342: LD_REAL  1.20000000000000E+0000
35345: MUL
35346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35347: LD_VAR 0 6
35351: PPUSH
35352: CALL_OW 264
35356: PUSH
35357: LD_INT 6
35359: PUSH
35360: LD_INT 46
35362: PUSH
35363: LD_INT 47
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: IN
35371: IFFALSE 35388
// bpoints := bpoints * 1.2 ;
35373: LD_ADDR_VAR 0 10
35377: PUSH
35378: LD_VAR 0 10
35382: PUSH
35383: LD_REAL  1.20000000000000E+0000
35386: MUL
35387: ST_TO_ADDR
// end ; unit_building :
35388: GO 35402
35390: LD_INT 3
35392: DOUBLE
35393: EQUAL
35394: IFTRUE 35398
35396: GO 35401
35398: POP
// ; end ;
35399: GO 35402
35401: POP
// for j = 1 to 3 do
35402: LD_ADDR_VAR 0 7
35406: PUSH
35407: DOUBLE
35408: LD_INT 1
35410: DEC
35411: ST_TO_ADDR
35412: LD_INT 3
35414: PUSH
35415: FOR_TO
35416: IFFALSE 35469
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35418: LD_ADDR_VAR 0 5
35422: PUSH
35423: LD_VAR 0 5
35427: PPUSH
35428: LD_VAR 0 7
35432: PPUSH
35433: LD_VAR 0 5
35437: PUSH
35438: LD_VAR 0 7
35442: ARRAY
35443: PUSH
35444: LD_VAR 0 9
35448: PUSH
35449: LD_VAR 0 7
35453: ARRAY
35454: PUSH
35455: LD_VAR 0 10
35459: MUL
35460: PLUS
35461: PPUSH
35462: CALL_OW 1
35466: ST_TO_ADDR
35467: GO 35415
35469: POP
35470: POP
// end ;
35471: GO 33948
35473: POP
35474: POP
// result := Replace ( result , 4 , tmp ) ;
35475: LD_ADDR_VAR 0 5
35479: PUSH
35480: LD_VAR 0 5
35484: PPUSH
35485: LD_INT 4
35487: PPUSH
35488: LD_VAR 0 8
35492: PPUSH
35493: CALL_OW 1
35497: ST_TO_ADDR
// end ;
35498: LD_VAR 0 5
35502: RET
// export function DangerAtRange ( unit , range ) ; begin
35503: LD_INT 0
35505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 255
35520: PPUSH
35521: LD_VAR 0 1
35525: PPUSH
35526: CALL_OW 250
35530: PPUSH
35531: LD_VAR 0 1
35535: PPUSH
35536: CALL_OW 251
35540: PPUSH
35541: LD_VAR 0 2
35545: PPUSH
35546: CALL 33800 0 4
35550: ST_TO_ADDR
// end ;
35551: LD_VAR 0 3
35555: RET
// export function DangerInArea ( side , area ) ; begin
35556: LD_INT 0
35558: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35559: LD_ADDR_VAR 0 3
35563: PUSH
35564: LD_VAR 0 2
35568: PPUSH
35569: LD_INT 81
35571: PUSH
35572: LD_VAR 0 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL_OW 70
35585: ST_TO_ADDR
// end ;
35586: LD_VAR 0 3
35590: RET
// export function IsExtension ( b ) ; begin
35591: LD_INT 0
35593: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35594: LD_ADDR_VAR 0 2
35598: PUSH
35599: LD_VAR 0 1
35603: PUSH
35604: LD_INT 23
35606: PUSH
35607: LD_INT 20
35609: PUSH
35610: LD_INT 22
35612: PUSH
35613: LD_INT 17
35615: PUSH
35616: LD_INT 24
35618: PUSH
35619: LD_INT 21
35621: PUSH
35622: LD_INT 19
35624: PUSH
35625: LD_INT 16
35627: PUSH
35628: LD_INT 25
35630: PUSH
35631: LD_INT 18
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: IN
35646: ST_TO_ADDR
// end ;
35647: LD_VAR 0 2
35651: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35652: LD_INT 0
35654: PPUSH
35655: PPUSH
35656: PPUSH
// result := [ ] ;
35657: LD_ADDR_VAR 0 4
35661: PUSH
35662: EMPTY
35663: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35664: LD_ADDR_VAR 0 5
35668: PUSH
35669: LD_VAR 0 2
35673: PPUSH
35674: LD_INT 21
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PPUSH
35684: CALL_OW 70
35688: ST_TO_ADDR
// if not tmp then
35689: LD_VAR 0 5
35693: NOT
35694: IFFALSE 35698
// exit ;
35696: GO 35762
// if checkLink then
35698: LD_VAR 0 3
35702: IFFALSE 35752
// begin for i in tmp do
35704: LD_ADDR_VAR 0 6
35708: PUSH
35709: LD_VAR 0 5
35713: PUSH
35714: FOR_IN
35715: IFFALSE 35750
// if GetBase ( i ) <> base then
35717: LD_VAR 0 6
35721: PPUSH
35722: CALL_OW 274
35726: PUSH
35727: LD_VAR 0 1
35731: NONEQUAL
35732: IFFALSE 35748
// ComLinkToBase ( base , i ) ;
35734: LD_VAR 0 1
35738: PPUSH
35739: LD_VAR 0 6
35743: PPUSH
35744: CALL_OW 169
35748: GO 35714
35750: POP
35751: POP
// end ; result := tmp ;
35752: LD_ADDR_VAR 0 4
35756: PUSH
35757: LD_VAR 0 5
35761: ST_TO_ADDR
// end ;
35762: LD_VAR 0 4
35766: RET
// export function ComComplete ( units , b ) ; var i ; begin
35767: LD_INT 0
35769: PPUSH
35770: PPUSH
// if not units then
35771: LD_VAR 0 1
35775: NOT
35776: IFFALSE 35780
// exit ;
35778: GO 35870
// for i in units do
35780: LD_ADDR_VAR 0 4
35784: PUSH
35785: LD_VAR 0 1
35789: PUSH
35790: FOR_IN
35791: IFFALSE 35868
// if BuildingStatus ( b ) = bs_build then
35793: LD_VAR 0 2
35797: PPUSH
35798: CALL_OW 461
35802: PUSH
35803: LD_INT 1
35805: EQUAL
35806: IFFALSE 35866
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35808: LD_VAR 0 4
35812: PPUSH
35813: LD_STRING h
35815: PUSH
35816: LD_VAR 0 2
35820: PPUSH
35821: CALL_OW 250
35825: PUSH
35826: LD_VAR 0 2
35830: PPUSH
35831: CALL_OW 251
35835: PUSH
35836: LD_VAR 0 2
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: PPUSH
35862: CALL_OW 446
35866: GO 35790
35868: POP
35869: POP
// end ;
35870: LD_VAR 0 3
35874: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35875: LD_INT 0
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35883: LD_VAR 0 1
35887: NOT
35888: PUSH
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 263
35898: PUSH
35899: LD_INT 2
35901: NONEQUAL
35902: OR
35903: IFFALSE 35907
// exit ;
35905: GO 36223
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35907: LD_ADDR_VAR 0 6
35911: PUSH
35912: LD_INT 22
35914: PUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 255
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 30
35934: PUSH
35935: LD_INT 36
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 34
35944: PUSH
35945: LD_INT 31
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PPUSH
35961: CALL_OW 69
35965: ST_TO_ADDR
// if not tmp then
35966: LD_VAR 0 6
35970: NOT
35971: IFFALSE 35975
// exit ;
35973: GO 36223
// result := [ ] ;
35975: LD_ADDR_VAR 0 2
35979: PUSH
35980: EMPTY
35981: ST_TO_ADDR
// for i in tmp do
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_VAR 0 6
35991: PUSH
35992: FOR_IN
35993: IFFALSE 36064
// begin t := UnitsInside ( i ) ;
35995: LD_ADDR_VAR 0 4
35999: PUSH
36000: LD_VAR 0 3
36004: PPUSH
36005: CALL_OW 313
36009: ST_TO_ADDR
// if t then
36010: LD_VAR 0 4
36014: IFFALSE 36062
// for j in t do
36016: LD_ADDR_VAR 0 7
36020: PUSH
36021: LD_VAR 0 4
36025: PUSH
36026: FOR_IN
36027: IFFALSE 36060
// result := Replace ( result , result + 1 , j ) ;
36029: LD_ADDR_VAR 0 2
36033: PUSH
36034: LD_VAR 0 2
36038: PPUSH
36039: LD_VAR 0 2
36043: PUSH
36044: LD_INT 1
36046: PLUS
36047: PPUSH
36048: LD_VAR 0 7
36052: PPUSH
36053: CALL_OW 1
36057: ST_TO_ADDR
36058: GO 36026
36060: POP
36061: POP
// end ;
36062: GO 35992
36064: POP
36065: POP
// if not result then
36066: LD_VAR 0 2
36070: NOT
36071: IFFALSE 36075
// exit ;
36073: GO 36223
// mech := result [ 1 ] ;
36075: LD_ADDR_VAR 0 5
36079: PUSH
36080: LD_VAR 0 2
36084: PUSH
36085: LD_INT 1
36087: ARRAY
36088: ST_TO_ADDR
// if result > 1 then
36089: LD_VAR 0 2
36093: PUSH
36094: LD_INT 1
36096: GREATER
36097: IFFALSE 36209
// begin for i = 2 to result do
36099: LD_ADDR_VAR 0 3
36103: PUSH
36104: DOUBLE
36105: LD_INT 2
36107: DEC
36108: ST_TO_ADDR
36109: LD_VAR 0 2
36113: PUSH
36114: FOR_TO
36115: IFFALSE 36207
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36117: LD_ADDR_VAR 0 4
36121: PUSH
36122: LD_VAR 0 2
36126: PUSH
36127: LD_VAR 0 3
36131: ARRAY
36132: PPUSH
36133: LD_INT 3
36135: PPUSH
36136: CALL_OW 259
36140: PUSH
36141: LD_VAR 0 2
36145: PUSH
36146: LD_VAR 0 3
36150: ARRAY
36151: PPUSH
36152: CALL_OW 432
36156: MINUS
36157: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36158: LD_VAR 0 4
36162: PUSH
36163: LD_VAR 0 5
36167: PPUSH
36168: LD_INT 3
36170: PPUSH
36171: CALL_OW 259
36175: PUSH
36176: LD_VAR 0 5
36180: PPUSH
36181: CALL_OW 432
36185: MINUS
36186: GREATEREQUAL
36187: IFFALSE 36205
// mech := result [ i ] ;
36189: LD_ADDR_VAR 0 5
36193: PUSH
36194: LD_VAR 0 2
36198: PUSH
36199: LD_VAR 0 3
36203: ARRAY
36204: ST_TO_ADDR
// end ;
36205: GO 36114
36207: POP
36208: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36209: LD_VAR 0 1
36213: PPUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: CALL_OW 135
// end ;
36223: LD_VAR 0 2
36227: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
// result := [ ] ;
36243: LD_ADDR_VAR 0 7
36247: PUSH
36248: EMPTY
36249: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL_OW 266
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: IN
36270: NOT
36271: IFFALSE 36275
// exit ;
36273: GO 37909
// if name then
36275: LD_VAR 0 3
36279: IFFALSE 36295
// SetBName ( base_dep , name ) ;
36281: LD_VAR 0 1
36285: PPUSH
36286: LD_VAR 0 3
36290: PPUSH
36291: CALL_OW 500
// base := GetBase ( base_dep ) ;
36295: LD_ADDR_VAR 0 15
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 274
36309: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36310: LD_ADDR_VAR 0 16
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 255
36324: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36325: LD_ADDR_VAR 0 17
36329: PUSH
36330: LD_VAR 0 1
36334: PPUSH
36335: CALL_OW 248
36339: ST_TO_ADDR
// if sources then
36340: LD_VAR 0 5
36344: IFFALSE 36391
// for i = 1 to 3 do
36346: LD_ADDR_VAR 0 8
36350: PUSH
36351: DOUBLE
36352: LD_INT 1
36354: DEC
36355: ST_TO_ADDR
36356: LD_INT 3
36358: PUSH
36359: FOR_TO
36360: IFFALSE 36389
// AddResourceType ( base , i , sources [ i ] ) ;
36362: LD_VAR 0 15
36366: PPUSH
36367: LD_VAR 0 8
36371: PPUSH
36372: LD_VAR 0 5
36376: PUSH
36377: LD_VAR 0 8
36381: ARRAY
36382: PPUSH
36383: CALL_OW 276
36387: GO 36359
36389: POP
36390: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36391: LD_ADDR_VAR 0 18
36395: PUSH
36396: LD_VAR 0 15
36400: PPUSH
36401: LD_VAR 0 2
36405: PPUSH
36406: LD_INT 1
36408: PPUSH
36409: CALL 35652 0 3
36413: ST_TO_ADDR
// InitHc ;
36414: CALL_OW 19
// InitUc ;
36418: CALL_OW 18
// uc_side := side ;
36422: LD_ADDR_OWVAR 20
36426: PUSH
36427: LD_VAR 0 16
36431: ST_TO_ADDR
// uc_nation := nation ;
36432: LD_ADDR_OWVAR 21
36436: PUSH
36437: LD_VAR 0 17
36441: ST_TO_ADDR
// if buildings then
36442: LD_VAR 0 18
36446: IFFALSE 37768
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36448: LD_ADDR_VAR 0 19
36452: PUSH
36453: LD_VAR 0 18
36457: PPUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 30
36463: PUSH
36464: LD_INT 29
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 30
36473: PUSH
36474: LD_INT 30
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: PPUSH
36486: CALL_OW 72
36490: ST_TO_ADDR
// if tmp then
36491: LD_VAR 0 19
36495: IFFALSE 36543
// for i in tmp do
36497: LD_ADDR_VAR 0 8
36501: PUSH
36502: LD_VAR 0 19
36506: PUSH
36507: FOR_IN
36508: IFFALSE 36541
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36510: LD_VAR 0 8
36514: PPUSH
36515: CALL_OW 250
36519: PPUSH
36520: LD_VAR 0 8
36524: PPUSH
36525: CALL_OW 251
36529: PPUSH
36530: LD_VAR 0 16
36534: PPUSH
36535: CALL_OW 441
36539: GO 36507
36541: POP
36542: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36543: LD_VAR 0 18
36547: PPUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 30
36553: PUSH
36554: LD_INT 32
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 30
36563: PUSH
36564: LD_INT 33
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: PPUSH
36576: CALL_OW 72
36580: IFFALSE 36668
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36582: LD_ADDR_VAR 0 8
36586: PUSH
36587: LD_VAR 0 18
36591: PPUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 30
36597: PUSH
36598: LD_INT 32
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 33
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: PPUSH
36620: CALL_OW 72
36624: PUSH
36625: FOR_IN
36626: IFFALSE 36666
// begin if not GetBWeapon ( i ) then
36628: LD_VAR 0 8
36632: PPUSH
36633: CALL_OW 269
36637: NOT
36638: IFFALSE 36664
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36640: LD_VAR 0 8
36644: PPUSH
36645: LD_VAR 0 8
36649: PPUSH
36650: LD_VAR 0 2
36654: PPUSH
36655: CALL 37914 0 2
36659: PPUSH
36660: CALL_OW 431
// end ;
36664: GO 36625
36666: POP
36667: POP
// end ; for i = 1 to personel do
36668: LD_ADDR_VAR 0 8
36672: PUSH
36673: DOUBLE
36674: LD_INT 1
36676: DEC
36677: ST_TO_ADDR
36678: LD_VAR 0 6
36682: PUSH
36683: FOR_TO
36684: IFFALSE 37748
// begin if i > 4 then
36686: LD_VAR 0 8
36690: PUSH
36691: LD_INT 4
36693: GREATER
36694: IFFALSE 36698
// break ;
36696: GO 37748
// case i of 1 :
36698: LD_VAR 0 8
36702: PUSH
36703: LD_INT 1
36705: DOUBLE
36706: EQUAL
36707: IFTRUE 36711
36709: GO 36791
36711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36712: LD_ADDR_VAR 0 12
36716: PUSH
36717: LD_VAR 0 18
36721: PPUSH
36722: LD_INT 22
36724: PUSH
36725: LD_VAR 0 16
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 58
36736: PUSH
36737: EMPTY
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 30
36745: PUSH
36746: LD_INT 32
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 30
36755: PUSH
36756: LD_INT 4
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 30
36765: PUSH
36766: LD_INT 5
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: PPUSH
36784: CALL_OW 72
36788: ST_TO_ADDR
36789: GO 37013
36791: LD_INT 2
36793: DOUBLE
36794: EQUAL
36795: IFTRUE 36799
36797: GO 36861
36799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36800: LD_ADDR_VAR 0 12
36804: PUSH
36805: LD_VAR 0 18
36809: PPUSH
36810: LD_INT 22
36812: PUSH
36813: LD_VAR 0 16
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 30
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 30
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PPUSH
36854: CALL_OW 72
36858: ST_TO_ADDR
36859: GO 37013
36861: LD_INT 3
36863: DOUBLE
36864: EQUAL
36865: IFTRUE 36869
36867: GO 36931
36869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36870: LD_ADDR_VAR 0 12
36874: PUSH
36875: LD_VAR 0 18
36879: PPUSH
36880: LD_INT 22
36882: PUSH
36883: LD_VAR 0 16
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 30
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 30
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PPUSH
36924: CALL_OW 72
36928: ST_TO_ADDR
36929: GO 37013
36931: LD_INT 4
36933: DOUBLE
36934: EQUAL
36935: IFTRUE 36939
36937: GO 37012
36939: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36940: LD_ADDR_VAR 0 12
36944: PUSH
36945: LD_VAR 0 18
36949: PPUSH
36950: LD_INT 22
36952: PUSH
36953: LD_VAR 0 16
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 30
36967: PUSH
36968: LD_INT 6
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 30
36977: PUSH
36978: LD_INT 7
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 30
36987: PUSH
36988: LD_INT 8
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PPUSH
37005: CALL_OW 72
37009: ST_TO_ADDR
37010: GO 37013
37012: POP
// if i = 1 then
37013: LD_VAR 0 8
37017: PUSH
37018: LD_INT 1
37020: EQUAL
37021: IFFALSE 37132
// begin tmp := [ ] ;
37023: LD_ADDR_VAR 0 19
37027: PUSH
37028: EMPTY
37029: ST_TO_ADDR
// for j in f do
37030: LD_ADDR_VAR 0 9
37034: PUSH
37035: LD_VAR 0 12
37039: PUSH
37040: FOR_IN
37041: IFFALSE 37114
// if GetBType ( j ) = b_bunker then
37043: LD_VAR 0 9
37047: PPUSH
37048: CALL_OW 266
37052: PUSH
37053: LD_INT 32
37055: EQUAL
37056: IFFALSE 37083
// tmp := Insert ( tmp , 1 , j ) else
37058: LD_ADDR_VAR 0 19
37062: PUSH
37063: LD_VAR 0 19
37067: PPUSH
37068: LD_INT 1
37070: PPUSH
37071: LD_VAR 0 9
37075: PPUSH
37076: CALL_OW 2
37080: ST_TO_ADDR
37081: GO 37112
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37083: LD_ADDR_VAR 0 19
37087: PUSH
37088: LD_VAR 0 19
37092: PPUSH
37093: LD_VAR 0 19
37097: PUSH
37098: LD_INT 1
37100: PLUS
37101: PPUSH
37102: LD_VAR 0 9
37106: PPUSH
37107: CALL_OW 2
37111: ST_TO_ADDR
37112: GO 37040
37114: POP
37115: POP
// if tmp then
37116: LD_VAR 0 19
37120: IFFALSE 37132
// f := tmp ;
37122: LD_ADDR_VAR 0 12
37126: PUSH
37127: LD_VAR 0 19
37131: ST_TO_ADDR
// end ; x := personel [ i ] ;
37132: LD_ADDR_VAR 0 13
37136: PUSH
37137: LD_VAR 0 6
37141: PUSH
37142: LD_VAR 0 8
37146: ARRAY
37147: ST_TO_ADDR
// if x = - 1 then
37148: LD_VAR 0 13
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: EQUAL
37157: IFFALSE 37366
// begin for j in f do
37159: LD_ADDR_VAR 0 9
37163: PUSH
37164: LD_VAR 0 12
37168: PUSH
37169: FOR_IN
37170: IFFALSE 37362
// repeat InitHc ;
37172: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37176: LD_VAR 0 9
37180: PPUSH
37181: CALL_OW 266
37185: PUSH
37186: LD_INT 5
37188: EQUAL
37189: IFFALSE 37259
// begin if UnitsInside ( j ) < 3 then
37191: LD_VAR 0 9
37195: PPUSH
37196: CALL_OW 313
37200: PUSH
37201: LD_INT 3
37203: LESS
37204: IFFALSE 37240
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37206: LD_INT 0
37208: PPUSH
37209: LD_INT 5
37211: PUSH
37212: LD_INT 8
37214: PUSH
37215: LD_INT 9
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: PUSH
37223: LD_VAR 0 17
37227: ARRAY
37228: PPUSH
37229: LD_VAR 0 4
37233: PPUSH
37234: CALL_OW 380
37238: GO 37257
// PrepareHuman ( false , i , skill ) ;
37240: LD_INT 0
37242: PPUSH
37243: LD_VAR 0 8
37247: PPUSH
37248: LD_VAR 0 4
37252: PPUSH
37253: CALL_OW 380
// end else
37257: GO 37276
// PrepareHuman ( false , i , skill ) ;
37259: LD_INT 0
37261: PPUSH
37262: LD_VAR 0 8
37266: PPUSH
37267: LD_VAR 0 4
37271: PPUSH
37272: CALL_OW 380
// un := CreateHuman ;
37276: LD_ADDR_VAR 0 14
37280: PUSH
37281: CALL_OW 44
37285: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37286: LD_ADDR_VAR 0 7
37290: PUSH
37291: LD_VAR 0 7
37295: PPUSH
37296: LD_INT 1
37298: PPUSH
37299: LD_VAR 0 14
37303: PPUSH
37304: CALL_OW 2
37308: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37309: LD_VAR 0 14
37313: PPUSH
37314: LD_VAR 0 9
37318: PPUSH
37319: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37323: LD_VAR 0 9
37327: PPUSH
37328: CALL_OW 313
37332: PUSH
37333: LD_INT 6
37335: EQUAL
37336: PUSH
37337: LD_VAR 0 9
37341: PPUSH
37342: CALL_OW 266
37346: PUSH
37347: LD_INT 32
37349: PUSH
37350: LD_INT 31
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: IN
37357: OR
37358: IFFALSE 37172
37360: GO 37169
37362: POP
37363: POP
// end else
37364: GO 37746
// for j = 1 to x do
37366: LD_ADDR_VAR 0 9
37370: PUSH
37371: DOUBLE
37372: LD_INT 1
37374: DEC
37375: ST_TO_ADDR
37376: LD_VAR 0 13
37380: PUSH
37381: FOR_TO
37382: IFFALSE 37744
// begin InitHc ;
37384: CALL_OW 19
// if not f then
37388: LD_VAR 0 12
37392: NOT
37393: IFFALSE 37482
// begin PrepareHuman ( false , i , skill ) ;
37395: LD_INT 0
37397: PPUSH
37398: LD_VAR 0 8
37402: PPUSH
37403: LD_VAR 0 4
37407: PPUSH
37408: CALL_OW 380
// un := CreateHuman ;
37412: LD_ADDR_VAR 0 14
37416: PUSH
37417: CALL_OW 44
37421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37422: LD_ADDR_VAR 0 7
37426: PUSH
37427: LD_VAR 0 7
37431: PPUSH
37432: LD_INT 1
37434: PPUSH
37435: LD_VAR 0 14
37439: PPUSH
37440: CALL_OW 2
37444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37445: LD_VAR 0 14
37449: PPUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 250
37459: PPUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 251
37469: PPUSH
37470: LD_INT 10
37472: PPUSH
37473: LD_INT 0
37475: PPUSH
37476: CALL_OW 50
// continue ;
37480: GO 37381
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37482: LD_VAR 0 12
37486: PUSH
37487: LD_INT 1
37489: ARRAY
37490: PPUSH
37491: CALL_OW 313
37495: PUSH
37496: LD_VAR 0 12
37500: PUSH
37501: LD_INT 1
37503: ARRAY
37504: PPUSH
37505: CALL_OW 266
37509: PUSH
37510: LD_INT 32
37512: PUSH
37513: LD_INT 31
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: IN
37520: AND
37521: PUSH
37522: LD_VAR 0 12
37526: PUSH
37527: LD_INT 1
37529: ARRAY
37530: PPUSH
37531: CALL_OW 313
37535: PUSH
37536: LD_INT 6
37538: EQUAL
37539: OR
37540: IFFALSE 37560
// f := Delete ( f , 1 ) ;
37542: LD_ADDR_VAR 0 12
37546: PUSH
37547: LD_VAR 0 12
37551: PPUSH
37552: LD_INT 1
37554: PPUSH
37555: CALL_OW 3
37559: ST_TO_ADDR
// if not f then
37560: LD_VAR 0 12
37564: NOT
37565: IFFALSE 37583
// begin x := x + 2 ;
37567: LD_ADDR_VAR 0 13
37571: PUSH
37572: LD_VAR 0 13
37576: PUSH
37577: LD_INT 2
37579: PLUS
37580: ST_TO_ADDR
// continue ;
37581: GO 37381
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37583: LD_VAR 0 12
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PPUSH
37592: CALL_OW 266
37596: PUSH
37597: LD_INT 5
37599: EQUAL
37600: IFFALSE 37674
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37602: LD_VAR 0 12
37606: PUSH
37607: LD_INT 1
37609: ARRAY
37610: PPUSH
37611: CALL_OW 313
37615: PUSH
37616: LD_INT 3
37618: LESS
37619: IFFALSE 37655
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37621: LD_INT 0
37623: PPUSH
37624: LD_INT 5
37626: PUSH
37627: LD_INT 8
37629: PUSH
37630: LD_INT 9
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: PUSH
37638: LD_VAR 0 17
37642: ARRAY
37643: PPUSH
37644: LD_VAR 0 4
37648: PPUSH
37649: CALL_OW 380
37653: GO 37672
// PrepareHuman ( false , i , skill ) ;
37655: LD_INT 0
37657: PPUSH
37658: LD_VAR 0 8
37662: PPUSH
37663: LD_VAR 0 4
37667: PPUSH
37668: CALL_OW 380
// end else
37672: GO 37691
// PrepareHuman ( false , i , skill ) ;
37674: LD_INT 0
37676: PPUSH
37677: LD_VAR 0 8
37681: PPUSH
37682: LD_VAR 0 4
37686: PPUSH
37687: CALL_OW 380
// un := CreateHuman ;
37691: LD_ADDR_VAR 0 14
37695: PUSH
37696: CALL_OW 44
37700: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37701: LD_ADDR_VAR 0 7
37705: PUSH
37706: LD_VAR 0 7
37710: PPUSH
37711: LD_INT 1
37713: PPUSH
37714: LD_VAR 0 14
37718: PPUSH
37719: CALL_OW 2
37723: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37724: LD_VAR 0 14
37728: PPUSH
37729: LD_VAR 0 12
37733: PUSH
37734: LD_INT 1
37736: ARRAY
37737: PPUSH
37738: CALL_OW 52
// end ;
37742: GO 37381
37744: POP
37745: POP
// end ;
37746: GO 36683
37748: POP
37749: POP
// result := result ^ buildings ;
37750: LD_ADDR_VAR 0 7
37754: PUSH
37755: LD_VAR 0 7
37759: PUSH
37760: LD_VAR 0 18
37764: ADD
37765: ST_TO_ADDR
// end else
37766: GO 37909
// begin for i = 1 to personel do
37768: LD_ADDR_VAR 0 8
37772: PUSH
37773: DOUBLE
37774: LD_INT 1
37776: DEC
37777: ST_TO_ADDR
37778: LD_VAR 0 6
37782: PUSH
37783: FOR_TO
37784: IFFALSE 37907
// begin if i > 4 then
37786: LD_VAR 0 8
37790: PUSH
37791: LD_INT 4
37793: GREATER
37794: IFFALSE 37798
// break ;
37796: GO 37907
// x := personel [ i ] ;
37798: LD_ADDR_VAR 0 13
37802: PUSH
37803: LD_VAR 0 6
37807: PUSH
37808: LD_VAR 0 8
37812: ARRAY
37813: ST_TO_ADDR
// if x = - 1 then
37814: LD_VAR 0 13
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: EQUAL
37823: IFFALSE 37827
// continue ;
37825: GO 37783
// PrepareHuman ( false , i , skill ) ;
37827: LD_INT 0
37829: PPUSH
37830: LD_VAR 0 8
37834: PPUSH
37835: LD_VAR 0 4
37839: PPUSH
37840: CALL_OW 380
// un := CreateHuman ;
37844: LD_ADDR_VAR 0 14
37848: PUSH
37849: CALL_OW 44
37853: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37854: LD_VAR 0 14
37858: PPUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 250
37868: PPUSH
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 251
37878: PPUSH
37879: LD_INT 10
37881: PPUSH
37882: LD_INT 0
37884: PPUSH
37885: CALL_OW 50
// result := result ^ un ;
37889: LD_ADDR_VAR 0 7
37893: PUSH
37894: LD_VAR 0 7
37898: PUSH
37899: LD_VAR 0 14
37903: ADD
37904: ST_TO_ADDR
// end ;
37905: GO 37783
37907: POP
37908: POP
// end ; end ;
37909: LD_VAR 0 7
37913: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37914: LD_INT 0
37916: PPUSH
37917: PPUSH
37918: PPUSH
37919: PPUSH
37920: PPUSH
37921: PPUSH
37922: PPUSH
37923: PPUSH
37924: PPUSH
37925: PPUSH
37926: PPUSH
37927: PPUSH
37928: PPUSH
37929: PPUSH
37930: PPUSH
37931: PPUSH
// result := false ;
37932: LD_ADDR_VAR 0 3
37936: PUSH
37937: LD_INT 0
37939: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37940: LD_VAR 0 1
37944: NOT
37945: PUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 266
37955: PUSH
37956: LD_INT 32
37958: PUSH
37959: LD_INT 33
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: IN
37966: NOT
37967: OR
37968: IFFALSE 37972
// exit ;
37970: GO 39081
// nat := GetNation ( tower ) ;
37972: LD_ADDR_VAR 0 12
37976: PUSH
37977: LD_VAR 0 1
37981: PPUSH
37982: CALL_OW 248
37986: ST_TO_ADDR
// side := GetSide ( tower ) ;
37987: LD_ADDR_VAR 0 16
37991: PUSH
37992: LD_VAR 0 1
37996: PPUSH
37997: CALL_OW 255
38001: ST_TO_ADDR
// x := GetX ( tower ) ;
38002: LD_ADDR_VAR 0 10
38006: PUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 250
38016: ST_TO_ADDR
// y := GetY ( tower ) ;
38017: LD_ADDR_VAR 0 11
38021: PUSH
38022: LD_VAR 0 1
38026: PPUSH
38027: CALL_OW 251
38031: ST_TO_ADDR
// if not x or not y then
38032: LD_VAR 0 10
38036: NOT
38037: PUSH
38038: LD_VAR 0 11
38042: NOT
38043: OR
38044: IFFALSE 38048
// exit ;
38046: GO 39081
// weapon := 0 ;
38048: LD_ADDR_VAR 0 18
38052: PUSH
38053: LD_INT 0
38055: ST_TO_ADDR
// fac_list := [ ] ;
38056: LD_ADDR_VAR 0 17
38060: PUSH
38061: EMPTY
38062: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38063: LD_ADDR_VAR 0 6
38067: PUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL_OW 274
38077: PPUSH
38078: LD_VAR 0 2
38082: PPUSH
38083: LD_INT 0
38085: PPUSH
38086: CALL 35652 0 3
38090: PPUSH
38091: LD_INT 30
38093: PUSH
38094: LD_INT 3
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 72
38105: ST_TO_ADDR
// if not factories then
38106: LD_VAR 0 6
38110: NOT
38111: IFFALSE 38115
// exit ;
38113: GO 39081
// for i in factories do
38115: LD_ADDR_VAR 0 8
38119: PUSH
38120: LD_VAR 0 6
38124: PUSH
38125: FOR_IN
38126: IFFALSE 38151
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38128: LD_ADDR_VAR 0 17
38132: PUSH
38133: LD_VAR 0 17
38137: PUSH
38138: LD_VAR 0 8
38142: PPUSH
38143: CALL_OW 478
38147: UNION
38148: ST_TO_ADDR
38149: GO 38125
38151: POP
38152: POP
// if not fac_list then
38153: LD_VAR 0 17
38157: NOT
38158: IFFALSE 38162
// exit ;
38160: GO 39081
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38162: LD_ADDR_VAR 0 5
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: LD_INT 5
38172: PUSH
38173: LD_INT 9
38175: PUSH
38176: LD_INT 10
38178: PUSH
38179: LD_INT 6
38181: PUSH
38182: LD_INT 7
38184: PUSH
38185: LD_INT 11
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 27
38199: PUSH
38200: LD_INT 28
38202: PUSH
38203: LD_INT 26
38205: PUSH
38206: LD_INT 30
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 43
38217: PUSH
38218: LD_INT 44
38220: PUSH
38221: LD_INT 46
38223: PUSH
38224: LD_INT 45
38226: PUSH
38227: LD_INT 47
38229: PUSH
38230: LD_INT 49
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: LIST
38245: PUSH
38246: LD_VAR 0 12
38250: ARRAY
38251: ST_TO_ADDR
// list := list isect fac_list ;
38252: LD_ADDR_VAR 0 5
38256: PUSH
38257: LD_VAR 0 5
38261: PUSH
38262: LD_VAR 0 17
38266: ISECT
38267: ST_TO_ADDR
// if not list then
38268: LD_VAR 0 5
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 39081
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38277: LD_VAR 0 12
38281: PUSH
38282: LD_INT 3
38284: EQUAL
38285: PUSH
38286: LD_INT 49
38288: PUSH
38289: LD_VAR 0 5
38293: IN
38294: AND
38295: PUSH
38296: LD_INT 31
38298: PPUSH
38299: LD_VAR 0 16
38303: PPUSH
38304: CALL_OW 321
38308: PUSH
38309: LD_INT 2
38311: EQUAL
38312: AND
38313: IFFALSE 38373
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38315: LD_INT 22
38317: PUSH
38318: LD_VAR 0 16
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 35
38329: PUSH
38330: LD_INT 49
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 91
38339: PUSH
38340: LD_VAR 0 1
38344: PUSH
38345: LD_INT 10
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: PPUSH
38358: CALL_OW 69
38362: NOT
38363: IFFALSE 38373
// weapon := ru_time_lapser ;
38365: LD_ADDR_VAR 0 18
38369: PUSH
38370: LD_INT 49
38372: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38373: LD_VAR 0 12
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: IN
38388: PUSH
38389: LD_INT 11
38391: PUSH
38392: LD_VAR 0 5
38396: IN
38397: PUSH
38398: LD_INT 30
38400: PUSH
38401: LD_VAR 0 5
38405: IN
38406: OR
38407: AND
38408: PUSH
38409: LD_INT 6
38411: PPUSH
38412: LD_VAR 0 16
38416: PPUSH
38417: CALL_OW 321
38421: PUSH
38422: LD_INT 2
38424: EQUAL
38425: AND
38426: IFFALSE 38591
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38428: LD_INT 22
38430: PUSH
38431: LD_VAR 0 16
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: LD_INT 35
38445: PUSH
38446: LD_INT 11
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 35
38455: PUSH
38456: LD_INT 30
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 91
38470: PUSH
38471: LD_VAR 0 1
38475: PUSH
38476: LD_INT 18
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: PPUSH
38489: CALL_OW 69
38493: NOT
38494: PUSH
38495: LD_INT 22
38497: PUSH
38498: LD_VAR 0 16
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 32
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 33
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 91
38537: PUSH
38538: LD_VAR 0 1
38542: PUSH
38543: LD_INT 12
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: PPUSH
38559: CALL_OW 69
38563: PUSH
38564: LD_INT 2
38566: GREATER
38567: AND
38568: IFFALSE 38591
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38570: LD_ADDR_VAR 0 18
38574: PUSH
38575: LD_INT 11
38577: PUSH
38578: LD_INT 30
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_VAR 0 12
38589: ARRAY
38590: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38591: LD_VAR 0 18
38595: NOT
38596: PUSH
38597: LD_INT 40
38599: PPUSH
38600: LD_VAR 0 16
38604: PPUSH
38605: CALL_OW 321
38609: PUSH
38610: LD_INT 2
38612: EQUAL
38613: AND
38614: PUSH
38615: LD_INT 7
38617: PUSH
38618: LD_VAR 0 5
38622: IN
38623: PUSH
38624: LD_INT 28
38626: PUSH
38627: LD_VAR 0 5
38631: IN
38632: OR
38633: PUSH
38634: LD_INT 45
38636: PUSH
38637: LD_VAR 0 5
38641: IN
38642: OR
38643: AND
38644: IFFALSE 38898
// begin hex := GetHexInfo ( x , y ) ;
38646: LD_ADDR_VAR 0 4
38650: PUSH
38651: LD_VAR 0 10
38655: PPUSH
38656: LD_VAR 0 11
38660: PPUSH
38661: CALL_OW 546
38665: ST_TO_ADDR
// if hex [ 1 ] then
38666: LD_VAR 0 4
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: IFFALSE 38678
// exit ;
38676: GO 39081
// height := hex [ 2 ] ;
38678: LD_ADDR_VAR 0 15
38682: PUSH
38683: LD_VAR 0 4
38687: PUSH
38688: LD_INT 2
38690: ARRAY
38691: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38692: LD_ADDR_VAR 0 14
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: LD_INT 5
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
// for i in tmp do
38715: LD_ADDR_VAR 0 8
38719: PUSH
38720: LD_VAR 0 14
38724: PUSH
38725: FOR_IN
38726: IFFALSE 38896
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38728: LD_ADDR_VAR 0 9
38732: PUSH
38733: LD_VAR 0 10
38737: PPUSH
38738: LD_VAR 0 8
38742: PPUSH
38743: LD_INT 5
38745: PPUSH
38746: CALL_OW 272
38750: PUSH
38751: LD_VAR 0 11
38755: PPUSH
38756: LD_VAR 0 8
38760: PPUSH
38761: LD_INT 5
38763: PPUSH
38764: CALL_OW 273
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38773: LD_VAR 0 9
38777: PUSH
38778: LD_INT 1
38780: ARRAY
38781: PPUSH
38782: LD_VAR 0 9
38786: PUSH
38787: LD_INT 2
38789: ARRAY
38790: PPUSH
38791: CALL_OW 488
38795: IFFALSE 38894
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38797: LD_ADDR_VAR 0 4
38801: PUSH
38802: LD_VAR 0 9
38806: PUSH
38807: LD_INT 1
38809: ARRAY
38810: PPUSH
38811: LD_VAR 0 9
38815: PUSH
38816: LD_INT 2
38818: ARRAY
38819: PPUSH
38820: CALL_OW 546
38824: ST_TO_ADDR
// if hex [ 1 ] then
38825: LD_VAR 0 4
38829: PUSH
38830: LD_INT 1
38832: ARRAY
38833: IFFALSE 38837
// continue ;
38835: GO 38725
// h := hex [ 2 ] ;
38837: LD_ADDR_VAR 0 13
38841: PUSH
38842: LD_VAR 0 4
38846: PUSH
38847: LD_INT 2
38849: ARRAY
38850: ST_TO_ADDR
// if h + 7 < height then
38851: LD_VAR 0 13
38855: PUSH
38856: LD_INT 7
38858: PLUS
38859: PUSH
38860: LD_VAR 0 15
38864: LESS
38865: IFFALSE 38894
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38867: LD_ADDR_VAR 0 18
38871: PUSH
38872: LD_INT 7
38874: PUSH
38875: LD_INT 28
38877: PUSH
38878: LD_INT 45
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: LD_VAR 0 12
38890: ARRAY
38891: ST_TO_ADDR
// break ;
38892: GO 38896
// end ; end ; end ;
38894: GO 38725
38896: POP
38897: POP
// end ; if not weapon then
38898: LD_VAR 0 18
38902: NOT
38903: IFFALSE 38963
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_VAR 0 5
38914: PUSH
38915: LD_INT 11
38917: PUSH
38918: LD_INT 30
38920: PUSH
38921: LD_INT 49
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: DIFF
38929: ST_TO_ADDR
// if not list then
38930: LD_VAR 0 5
38934: NOT
38935: IFFALSE 38939
// exit ;
38937: GO 39081
// weapon := list [ rand ( 1 , list ) ] ;
38939: LD_ADDR_VAR 0 18
38943: PUSH
38944: LD_VAR 0 5
38948: PUSH
38949: LD_INT 1
38951: PPUSH
38952: LD_VAR 0 5
38956: PPUSH
38957: CALL_OW 12
38961: ARRAY
38962: ST_TO_ADDR
// end ; if weapon then
38963: LD_VAR 0 18
38967: IFFALSE 39081
// begin tmp := CostOfWeapon ( weapon ) ;
38969: LD_ADDR_VAR 0 14
38973: PUSH
38974: LD_VAR 0 18
38978: PPUSH
38979: CALL_OW 451
38983: ST_TO_ADDR
// j := GetBase ( tower ) ;
38984: LD_ADDR_VAR 0 9
38988: PUSH
38989: LD_VAR 0 1
38993: PPUSH
38994: CALL_OW 274
38998: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38999: LD_VAR 0 9
39003: PPUSH
39004: LD_INT 1
39006: PPUSH
39007: CALL_OW 275
39011: PUSH
39012: LD_VAR 0 14
39016: PUSH
39017: LD_INT 1
39019: ARRAY
39020: GREATEREQUAL
39021: PUSH
39022: LD_VAR 0 9
39026: PPUSH
39027: LD_INT 2
39029: PPUSH
39030: CALL_OW 275
39034: PUSH
39035: LD_VAR 0 14
39039: PUSH
39040: LD_INT 2
39042: ARRAY
39043: GREATEREQUAL
39044: AND
39045: PUSH
39046: LD_VAR 0 9
39050: PPUSH
39051: LD_INT 3
39053: PPUSH
39054: CALL_OW 275
39058: PUSH
39059: LD_VAR 0 14
39063: PUSH
39064: LD_INT 3
39066: ARRAY
39067: GREATEREQUAL
39068: AND
39069: IFFALSE 39081
// result := weapon ;
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: LD_VAR 0 18
39080: ST_TO_ADDR
// end ; end ;
39081: LD_VAR 0 3
39085: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39086: LD_INT 0
39088: PPUSH
39089: PPUSH
// result := true ;
39090: LD_ADDR_VAR 0 3
39094: PUSH
39095: LD_INT 1
39097: ST_TO_ADDR
// if array1 = array2 then
39098: LD_VAR 0 1
39102: PUSH
39103: LD_VAR 0 2
39107: EQUAL
39108: IFFALSE 39168
// begin for i = 1 to array1 do
39110: LD_ADDR_VAR 0 4
39114: PUSH
39115: DOUBLE
39116: LD_INT 1
39118: DEC
39119: ST_TO_ADDR
39120: LD_VAR 0 1
39124: PUSH
39125: FOR_TO
39126: IFFALSE 39164
// if array1 [ i ] <> array2 [ i ] then
39128: LD_VAR 0 1
39132: PUSH
39133: LD_VAR 0 4
39137: ARRAY
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_VAR 0 4
39148: ARRAY
39149: NONEQUAL
39150: IFFALSE 39162
// begin result := false ;
39152: LD_ADDR_VAR 0 3
39156: PUSH
39157: LD_INT 0
39159: ST_TO_ADDR
// break ;
39160: GO 39164
// end ;
39162: GO 39125
39164: POP
39165: POP
// end else
39166: GO 39176
// result := false ;
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_INT 0
39175: ST_TO_ADDR
// end ;
39176: LD_VAR 0 3
39180: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39181: LD_INT 0
39183: PPUSH
39184: PPUSH
// if not array1 or not array2 then
39185: LD_VAR 0 1
39189: NOT
39190: PUSH
39191: LD_VAR 0 2
39195: NOT
39196: OR
39197: IFFALSE 39201
// exit ;
39199: GO 39265
// result := true ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 1
39208: ST_TO_ADDR
// for i = 1 to array1 do
39209: LD_ADDR_VAR 0 4
39213: PUSH
39214: DOUBLE
39215: LD_INT 1
39217: DEC
39218: ST_TO_ADDR
39219: LD_VAR 0 1
39223: PUSH
39224: FOR_TO
39225: IFFALSE 39263
// if array1 [ i ] <> array2 [ i ] then
39227: LD_VAR 0 1
39231: PUSH
39232: LD_VAR 0 4
39236: ARRAY
39237: PUSH
39238: LD_VAR 0 2
39242: PUSH
39243: LD_VAR 0 4
39247: ARRAY
39248: NONEQUAL
39249: IFFALSE 39261
// begin result := false ;
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_INT 0
39258: ST_TO_ADDR
// break ;
39259: GO 39263
// end ;
39261: GO 39224
39263: POP
39264: POP
// end ;
39265: LD_VAR 0 3
39269: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39270: LD_INT 0
39272: PPUSH
39273: PPUSH
39274: PPUSH
// pom := GetBase ( fac ) ;
39275: LD_ADDR_VAR 0 5
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 274
39289: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39290: LD_ADDR_VAR 0 4
39294: PUSH
39295: LD_VAR 0 2
39299: PUSH
39300: LD_INT 1
39302: ARRAY
39303: PPUSH
39304: LD_VAR 0 2
39308: PUSH
39309: LD_INT 2
39311: ARRAY
39312: PPUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_INT 3
39320: ARRAY
39321: PPUSH
39322: LD_VAR 0 2
39326: PUSH
39327: LD_INT 4
39329: ARRAY
39330: PPUSH
39331: CALL_OW 449
39335: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_VAR 0 5
39345: PPUSH
39346: LD_INT 1
39348: PPUSH
39349: CALL_OW 275
39353: PUSH
39354: LD_VAR 0 4
39358: PUSH
39359: LD_INT 1
39361: ARRAY
39362: GREATEREQUAL
39363: PUSH
39364: LD_VAR 0 5
39368: PPUSH
39369: LD_INT 2
39371: PPUSH
39372: CALL_OW 275
39376: PUSH
39377: LD_VAR 0 4
39381: PUSH
39382: LD_INT 2
39384: ARRAY
39385: GREATEREQUAL
39386: AND
39387: PUSH
39388: LD_VAR 0 5
39392: PPUSH
39393: LD_INT 3
39395: PPUSH
39396: CALL_OW 275
39400: PUSH
39401: LD_VAR 0 4
39405: PUSH
39406: LD_INT 3
39408: ARRAY
39409: GREATEREQUAL
39410: AND
39411: ST_TO_ADDR
// end ;
39412: LD_VAR 0 3
39416: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39417: LD_INT 0
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
// pom := GetBase ( building ) ;
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 274
39437: ST_TO_ADDR
// if not pom then
39438: LD_VAR 0 3
39442: NOT
39443: IFFALSE 39447
// exit ;
39445: GO 39617
// btype := GetBType ( building ) ;
39447: LD_ADDR_VAR 0 5
39451: PUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 266
39461: ST_TO_ADDR
// if btype = b_armoury then
39462: LD_VAR 0 5
39466: PUSH
39467: LD_INT 4
39469: EQUAL
39470: IFFALSE 39480
// btype := b_barracks ;
39472: LD_ADDR_VAR 0 5
39476: PUSH
39477: LD_INT 5
39479: ST_TO_ADDR
// if btype = b_depot then
39480: LD_VAR 0 5
39484: PUSH
39485: LD_INT 0
39487: EQUAL
39488: IFFALSE 39498
// btype := b_warehouse ;
39490: LD_ADDR_VAR 0 5
39494: PUSH
39495: LD_INT 1
39497: ST_TO_ADDR
// if btype = b_workshop then
39498: LD_VAR 0 5
39502: PUSH
39503: LD_INT 2
39505: EQUAL
39506: IFFALSE 39516
// btype := b_factory ;
39508: LD_ADDR_VAR 0 5
39512: PUSH
39513: LD_INT 3
39515: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_VAR 0 5
39525: PPUSH
39526: LD_VAR 0 1
39530: PPUSH
39531: CALL_OW 248
39535: PPUSH
39536: CALL_OW 450
39540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39541: LD_ADDR_VAR 0 2
39545: PUSH
39546: LD_VAR 0 3
39550: PPUSH
39551: LD_INT 1
39553: PPUSH
39554: CALL_OW 275
39558: PUSH
39559: LD_VAR 0 4
39563: PUSH
39564: LD_INT 1
39566: ARRAY
39567: GREATEREQUAL
39568: PUSH
39569: LD_VAR 0 3
39573: PPUSH
39574: LD_INT 2
39576: PPUSH
39577: CALL_OW 275
39581: PUSH
39582: LD_VAR 0 4
39586: PUSH
39587: LD_INT 2
39589: ARRAY
39590: GREATEREQUAL
39591: AND
39592: PUSH
39593: LD_VAR 0 3
39597: PPUSH
39598: LD_INT 3
39600: PPUSH
39601: CALL_OW 275
39605: PUSH
39606: LD_VAR 0 4
39610: PUSH
39611: LD_INT 3
39613: ARRAY
39614: GREATEREQUAL
39615: AND
39616: ST_TO_ADDR
// end ;
39617: LD_VAR 0 2
39621: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39622: LD_INT 0
39624: PPUSH
39625: PPUSH
39626: PPUSH
// pom := GetBase ( building ) ;
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: CALL_OW 274
39641: ST_TO_ADDR
// if not pom then
39642: LD_VAR 0 4
39646: NOT
39647: IFFALSE 39651
// exit ;
39649: GO 39752
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39651: LD_ADDR_VAR 0 5
39655: PUSH
39656: LD_VAR 0 2
39660: PPUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL_OW 248
39670: PPUSH
39671: CALL_OW 450
39675: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39676: LD_ADDR_VAR 0 3
39680: PUSH
39681: LD_VAR 0 4
39685: PPUSH
39686: LD_INT 1
39688: PPUSH
39689: CALL_OW 275
39693: PUSH
39694: LD_VAR 0 5
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: GREATEREQUAL
39703: PUSH
39704: LD_VAR 0 4
39708: PPUSH
39709: LD_INT 2
39711: PPUSH
39712: CALL_OW 275
39716: PUSH
39717: LD_VAR 0 5
39721: PUSH
39722: LD_INT 2
39724: ARRAY
39725: GREATEREQUAL
39726: AND
39727: PUSH
39728: LD_VAR 0 4
39732: PPUSH
39733: LD_INT 3
39735: PPUSH
39736: CALL_OW 275
39740: PUSH
39741: LD_VAR 0 5
39745: PUSH
39746: LD_INT 3
39748: ARRAY
39749: GREATEREQUAL
39750: AND
39751: ST_TO_ADDR
// end ;
39752: LD_VAR 0 3
39756: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39757: LD_INT 0
39759: PPUSH
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
39769: PPUSH
// result := false ;
39770: LD_ADDR_VAR 0 8
39774: PUSH
39775: LD_INT 0
39777: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39778: LD_VAR 0 5
39782: NOT
39783: PUSH
39784: LD_VAR 0 1
39788: NOT
39789: OR
39790: PUSH
39791: LD_VAR 0 2
39795: NOT
39796: OR
39797: PUSH
39798: LD_VAR 0 3
39802: NOT
39803: OR
39804: IFFALSE 39808
// exit ;
39806: GO 40622
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39808: LD_ADDR_VAR 0 14
39812: PUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: LD_VAR 0 2
39822: PPUSH
39823: LD_VAR 0 3
39827: PPUSH
39828: LD_VAR 0 4
39832: PPUSH
39833: LD_VAR 0 5
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: PPUSH
39842: CALL_OW 248
39846: PPUSH
39847: LD_INT 0
39849: PPUSH
39850: CALL 41859 0 6
39854: ST_TO_ADDR
// if not hexes then
39855: LD_VAR 0 14
39859: NOT
39860: IFFALSE 39864
// exit ;
39862: GO 40622
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39864: LD_ADDR_VAR 0 17
39868: PUSH
39869: LD_VAR 0 5
39873: PPUSH
39874: LD_INT 22
39876: PUSH
39877: LD_VAR 0 13
39881: PPUSH
39882: CALL_OW 255
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 30
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 30
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PPUSH
39923: CALL_OW 72
39927: ST_TO_ADDR
// for i = 1 to hexes do
39928: LD_ADDR_VAR 0 9
39932: PUSH
39933: DOUBLE
39934: LD_INT 1
39936: DEC
39937: ST_TO_ADDR
39938: LD_VAR 0 14
39942: PUSH
39943: FOR_TO
39944: IFFALSE 40620
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39946: LD_ADDR_VAR 0 13
39950: PUSH
39951: LD_VAR 0 14
39955: PUSH
39956: LD_VAR 0 9
39960: ARRAY
39961: PUSH
39962: LD_INT 1
39964: ARRAY
39965: PPUSH
39966: LD_VAR 0 14
39970: PUSH
39971: LD_VAR 0 9
39975: ARRAY
39976: PUSH
39977: LD_INT 2
39979: ARRAY
39980: PPUSH
39981: CALL_OW 428
39985: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39986: LD_VAR 0 14
39990: PUSH
39991: LD_VAR 0 9
39995: ARRAY
39996: PUSH
39997: LD_INT 1
39999: ARRAY
40000: PPUSH
40001: LD_VAR 0 14
40005: PUSH
40006: LD_VAR 0 9
40010: ARRAY
40011: PUSH
40012: LD_INT 2
40014: ARRAY
40015: PPUSH
40016: CALL_OW 351
40020: PUSH
40021: LD_VAR 0 14
40025: PUSH
40026: LD_VAR 0 9
40030: ARRAY
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: LD_VAR 0 14
40040: PUSH
40041: LD_VAR 0 9
40045: ARRAY
40046: PUSH
40047: LD_INT 2
40049: ARRAY
40050: PPUSH
40051: CALL_OW 488
40055: NOT
40056: OR
40057: PUSH
40058: LD_VAR 0 13
40062: PPUSH
40063: CALL_OW 247
40067: PUSH
40068: LD_INT 3
40070: EQUAL
40071: OR
40072: IFFALSE 40078
// exit ;
40074: POP
40075: POP
40076: GO 40622
// if not tmp then
40078: LD_VAR 0 13
40082: NOT
40083: IFFALSE 40087
// continue ;
40085: GO 39943
// result := true ;
40087: LD_ADDR_VAR 0 8
40091: PUSH
40092: LD_INT 1
40094: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40095: LD_VAR 0 6
40099: PUSH
40100: LD_VAR 0 13
40104: PPUSH
40105: CALL_OW 247
40109: PUSH
40110: LD_INT 2
40112: EQUAL
40113: AND
40114: PUSH
40115: LD_VAR 0 13
40119: PPUSH
40120: CALL_OW 263
40124: PUSH
40125: LD_INT 1
40127: EQUAL
40128: AND
40129: IFFALSE 40293
// begin if IsDrivenBy ( tmp ) then
40131: LD_VAR 0 13
40135: PPUSH
40136: CALL_OW 311
40140: IFFALSE 40144
// continue ;
40142: GO 39943
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40144: LD_VAR 0 6
40148: PPUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 60
40154: PUSH
40155: EMPTY
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: LD_INT 55
40167: PUSH
40168: EMPTY
40169: LIST
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PPUSH
40179: CALL_OW 72
40183: IFFALSE 40291
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40185: LD_ADDR_VAR 0 18
40189: PUSH
40190: LD_VAR 0 6
40194: PPUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 60
40200: PUSH
40201: EMPTY
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: LD_INT 55
40213: PUSH
40214: EMPTY
40215: LIST
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PPUSH
40225: CALL_OW 72
40229: PUSH
40230: LD_INT 1
40232: ARRAY
40233: ST_TO_ADDR
// if IsInUnit ( driver ) then
40234: LD_VAR 0 18
40238: PPUSH
40239: CALL_OW 310
40243: IFFALSE 40254
// ComExit ( driver ) ;
40245: LD_VAR 0 18
40249: PPUSH
40250: CALL 65043 0 1
// AddComEnterUnit ( driver , tmp ) ;
40254: LD_VAR 0 18
40258: PPUSH
40259: LD_VAR 0 13
40263: PPUSH
40264: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40268: LD_VAR 0 18
40272: PPUSH
40273: LD_VAR 0 7
40277: PPUSH
40278: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40282: LD_VAR 0 18
40286: PPUSH
40287: CALL_OW 181
// end ; continue ;
40291: GO 39943
// end ; if not cleaners or not tmp in cleaners then
40293: LD_VAR 0 6
40297: NOT
40298: PUSH
40299: LD_VAR 0 13
40303: PUSH
40304: LD_VAR 0 6
40308: IN
40309: NOT
40310: OR
40311: IFFALSE 40618
// begin if dep then
40313: LD_VAR 0 17
40317: IFFALSE 40453
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40319: LD_ADDR_VAR 0 16
40323: PUSH
40324: LD_VAR 0 17
40328: PUSH
40329: LD_INT 1
40331: ARRAY
40332: PPUSH
40333: CALL_OW 250
40337: PPUSH
40338: LD_VAR 0 17
40342: PUSH
40343: LD_INT 1
40345: ARRAY
40346: PPUSH
40347: CALL_OW 254
40351: PPUSH
40352: LD_INT 5
40354: PPUSH
40355: CALL_OW 272
40359: PUSH
40360: LD_VAR 0 17
40364: PUSH
40365: LD_INT 1
40367: ARRAY
40368: PPUSH
40369: CALL_OW 251
40373: PPUSH
40374: LD_VAR 0 17
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PPUSH
40383: CALL_OW 254
40387: PPUSH
40388: LD_INT 5
40390: PPUSH
40391: CALL_OW 273
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40400: LD_VAR 0 16
40404: PUSH
40405: LD_INT 1
40407: ARRAY
40408: PPUSH
40409: LD_VAR 0 16
40413: PUSH
40414: LD_INT 2
40416: ARRAY
40417: PPUSH
40418: CALL_OW 488
40422: IFFALSE 40453
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40424: LD_VAR 0 13
40428: PPUSH
40429: LD_VAR 0 16
40433: PUSH
40434: LD_INT 1
40436: ARRAY
40437: PPUSH
40438: LD_VAR 0 16
40442: PUSH
40443: LD_INT 2
40445: ARRAY
40446: PPUSH
40447: CALL_OW 111
// continue ;
40451: GO 39943
// end ; end ; r := GetDir ( tmp ) ;
40453: LD_ADDR_VAR 0 15
40457: PUSH
40458: LD_VAR 0 13
40462: PPUSH
40463: CALL_OW 254
40467: ST_TO_ADDR
// if r = 5 then
40468: LD_VAR 0 15
40472: PUSH
40473: LD_INT 5
40475: EQUAL
40476: IFFALSE 40486
// r := 0 ;
40478: LD_ADDR_VAR 0 15
40482: PUSH
40483: LD_INT 0
40485: ST_TO_ADDR
// for j = r to 5 do
40486: LD_ADDR_VAR 0 10
40490: PUSH
40491: DOUBLE
40492: LD_VAR 0 15
40496: DEC
40497: ST_TO_ADDR
40498: LD_INT 5
40500: PUSH
40501: FOR_TO
40502: IFFALSE 40616
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40504: LD_ADDR_VAR 0 11
40508: PUSH
40509: LD_VAR 0 13
40513: PPUSH
40514: CALL_OW 250
40518: PPUSH
40519: LD_VAR 0 10
40523: PPUSH
40524: LD_INT 2
40526: PPUSH
40527: CALL_OW 272
40531: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40532: LD_ADDR_VAR 0 12
40536: PUSH
40537: LD_VAR 0 13
40541: PPUSH
40542: CALL_OW 251
40546: PPUSH
40547: LD_VAR 0 10
40551: PPUSH
40552: LD_INT 2
40554: PPUSH
40555: CALL_OW 273
40559: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40560: LD_VAR 0 11
40564: PPUSH
40565: LD_VAR 0 12
40569: PPUSH
40570: CALL_OW 488
40574: PUSH
40575: LD_VAR 0 11
40579: PPUSH
40580: LD_VAR 0 12
40584: PPUSH
40585: CALL_OW 428
40589: NOT
40590: AND
40591: IFFALSE 40614
// begin ComMoveXY ( tmp , _x , _y ) ;
40593: LD_VAR 0 13
40597: PPUSH
40598: LD_VAR 0 11
40602: PPUSH
40603: LD_VAR 0 12
40607: PPUSH
40608: CALL_OW 111
// break ;
40612: GO 40616
// end ; end ;
40614: GO 40501
40616: POP
40617: POP
// end ; end ;
40618: GO 39943
40620: POP
40621: POP
// end ;
40622: LD_VAR 0 8
40626: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40627: LD_INT 0
40629: PPUSH
// result := true ;
40630: LD_ADDR_VAR 0 3
40634: PUSH
40635: LD_INT 1
40637: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40638: LD_VAR 0 2
40642: PUSH
40643: LD_INT 24
40645: DOUBLE
40646: EQUAL
40647: IFTRUE 40657
40649: LD_INT 33
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40682
40657: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40658: LD_ADDR_VAR 0 3
40662: PUSH
40663: LD_INT 32
40665: PPUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 321
40675: PUSH
40676: LD_INT 2
40678: EQUAL
40679: ST_TO_ADDR
40680: GO 41002
40682: LD_INT 20
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40715
40690: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_INT 6
40698: PPUSH
40699: LD_VAR 0 1
40703: PPUSH
40704: CALL_OW 321
40708: PUSH
40709: LD_INT 2
40711: EQUAL
40712: ST_TO_ADDR
40713: GO 41002
40715: LD_INT 22
40717: DOUBLE
40718: EQUAL
40719: IFTRUE 40729
40721: LD_INT 36
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 40754
40729: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 15
40737: PPUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 321
40747: PUSH
40748: LD_INT 2
40750: EQUAL
40751: ST_TO_ADDR
40752: GO 41002
40754: LD_INT 30
40756: DOUBLE
40757: EQUAL
40758: IFTRUE 40762
40760: GO 40787
40762: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40763: LD_ADDR_VAR 0 3
40767: PUSH
40768: LD_INT 20
40770: PPUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 321
40780: PUSH
40781: LD_INT 2
40783: EQUAL
40784: ST_TO_ADDR
40785: GO 41002
40787: LD_INT 28
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40801
40793: LD_INT 21
40795: DOUBLE
40796: EQUAL
40797: IFTRUE 40801
40799: GO 40826
40801: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40802: LD_ADDR_VAR 0 3
40806: PUSH
40807: LD_INT 21
40809: PPUSH
40810: LD_VAR 0 1
40814: PPUSH
40815: CALL_OW 321
40819: PUSH
40820: LD_INT 2
40822: EQUAL
40823: ST_TO_ADDR
40824: GO 41002
40826: LD_INT 16
40828: DOUBLE
40829: EQUAL
40830: IFTRUE 40834
40832: GO 40861
40834: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40835: LD_ADDR_VAR 0 3
40839: PUSH
40840: LD_EXP 108
40844: PPUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 321
40854: PUSH
40855: LD_INT 2
40857: EQUAL
40858: ST_TO_ADDR
40859: GO 41002
40861: LD_INT 19
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40875
40867: LD_INT 23
40869: DOUBLE
40870: EQUAL
40871: IFTRUE 40875
40873: GO 40902
40875: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_EXP 107
40885: PPUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 321
40895: PUSH
40896: LD_INT 2
40898: EQUAL
40899: ST_TO_ADDR
40900: GO 41002
40902: LD_INT 17
40904: DOUBLE
40905: EQUAL
40906: IFTRUE 40910
40908: GO 40935
40910: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40911: LD_ADDR_VAR 0 3
40915: PUSH
40916: LD_INT 39
40918: PPUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: CALL_OW 321
40928: PUSH
40929: LD_INT 2
40931: EQUAL
40932: ST_TO_ADDR
40933: GO 41002
40935: LD_INT 18
40937: DOUBLE
40938: EQUAL
40939: IFTRUE 40943
40941: GO 40968
40943: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40944: LD_ADDR_VAR 0 3
40948: PUSH
40949: LD_INT 40
40951: PPUSH
40952: LD_VAR 0 1
40956: PPUSH
40957: CALL_OW 321
40961: PUSH
40962: LD_INT 2
40964: EQUAL
40965: ST_TO_ADDR
40966: GO 41002
40968: LD_INT 27
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 40976
40974: GO 41001
40976: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40977: LD_ADDR_VAR 0 3
40981: PUSH
40982: LD_INT 35
40984: PPUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 321
40994: PUSH
40995: LD_INT 2
40997: EQUAL
40998: ST_TO_ADDR
40999: GO 41002
41001: POP
// end ;
41002: LD_VAR 0 3
41006: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41007: LD_INT 0
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
// result := false ;
41020: LD_ADDR_VAR 0 6
41024: PUSH
41025: LD_INT 0
41027: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41028: LD_VAR 0 1
41032: NOT
41033: PUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: CALL_OW 266
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: IN
41054: NOT
41055: OR
41056: PUSH
41057: LD_VAR 0 2
41061: NOT
41062: OR
41063: PUSH
41064: LD_VAR 0 5
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: LD_INT 4
41083: PUSH
41084: LD_INT 5
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: IN
41095: NOT
41096: OR
41097: PUSH
41098: LD_VAR 0 3
41102: PPUSH
41103: LD_VAR 0 4
41107: PPUSH
41108: CALL_OW 488
41112: NOT
41113: OR
41114: IFFALSE 41118
// exit ;
41116: GO 41854
// side := GetSide ( depot ) ;
41118: LD_ADDR_VAR 0 9
41122: PUSH
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 255
41132: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41133: LD_VAR 0 9
41137: PPUSH
41138: LD_VAR 0 2
41142: PPUSH
41143: CALL 40627 0 2
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41854
// pom := GetBase ( depot ) ;
41152: LD_ADDR_VAR 0 10
41156: PUSH
41157: LD_VAR 0 1
41161: PPUSH
41162: CALL_OW 274
41166: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41167: LD_ADDR_VAR 0 11
41171: PUSH
41172: LD_VAR 0 2
41176: PPUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 248
41186: PPUSH
41187: CALL_OW 450
41191: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41192: LD_VAR 0 10
41196: PPUSH
41197: LD_INT 1
41199: PPUSH
41200: CALL_OW 275
41204: PUSH
41205: LD_VAR 0 11
41209: PUSH
41210: LD_INT 1
41212: ARRAY
41213: GREATEREQUAL
41214: PUSH
41215: LD_VAR 0 10
41219: PPUSH
41220: LD_INT 2
41222: PPUSH
41223: CALL_OW 275
41227: PUSH
41228: LD_VAR 0 11
41232: PUSH
41233: LD_INT 2
41235: ARRAY
41236: GREATEREQUAL
41237: AND
41238: PUSH
41239: LD_VAR 0 10
41243: PPUSH
41244: LD_INT 3
41246: PPUSH
41247: CALL_OW 275
41251: PUSH
41252: LD_VAR 0 11
41256: PUSH
41257: LD_INT 3
41259: ARRAY
41260: GREATEREQUAL
41261: AND
41262: NOT
41263: IFFALSE 41267
// exit ;
41265: GO 41854
// if GetBType ( depot ) = b_depot then
41267: LD_VAR 0 1
41271: PPUSH
41272: CALL_OW 266
41276: PUSH
41277: LD_INT 0
41279: EQUAL
41280: IFFALSE 41292
// dist := 28 else
41282: LD_ADDR_VAR 0 14
41286: PUSH
41287: LD_INT 28
41289: ST_TO_ADDR
41290: GO 41300
// dist := 36 ;
41292: LD_ADDR_VAR 0 14
41296: PUSH
41297: LD_INT 36
41299: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41300: LD_VAR 0 1
41304: PPUSH
41305: LD_VAR 0 3
41309: PPUSH
41310: LD_VAR 0 4
41314: PPUSH
41315: CALL_OW 297
41319: PUSH
41320: LD_VAR 0 14
41324: GREATER
41325: IFFALSE 41329
// exit ;
41327: GO 41854
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41329: LD_ADDR_VAR 0 12
41333: PUSH
41334: LD_VAR 0 2
41338: PPUSH
41339: LD_VAR 0 3
41343: PPUSH
41344: LD_VAR 0 4
41348: PPUSH
41349: LD_VAR 0 5
41353: PPUSH
41354: LD_VAR 0 1
41358: PPUSH
41359: CALL_OW 248
41363: PPUSH
41364: LD_INT 0
41366: PPUSH
41367: CALL 41859 0 6
41371: ST_TO_ADDR
// if not hexes then
41372: LD_VAR 0 12
41376: NOT
41377: IFFALSE 41381
// exit ;
41379: GO 41854
// hex := GetHexInfo ( x , y ) ;
41381: LD_ADDR_VAR 0 15
41385: PUSH
41386: LD_VAR 0 3
41390: PPUSH
41391: LD_VAR 0 4
41395: PPUSH
41396: CALL_OW 546
41400: ST_TO_ADDR
// if hex [ 1 ] then
41401: LD_VAR 0 15
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: IFFALSE 41413
// exit ;
41411: GO 41854
// height := hex [ 2 ] ;
41413: LD_ADDR_VAR 0 13
41417: PUSH
41418: LD_VAR 0 15
41422: PUSH
41423: LD_INT 2
41425: ARRAY
41426: ST_TO_ADDR
// for i = 1 to hexes do
41427: LD_ADDR_VAR 0 7
41431: PUSH
41432: DOUBLE
41433: LD_INT 1
41435: DEC
41436: ST_TO_ADDR
41437: LD_VAR 0 12
41441: PUSH
41442: FOR_TO
41443: IFFALSE 41773
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41445: LD_VAR 0 12
41449: PUSH
41450: LD_VAR 0 7
41454: ARRAY
41455: PUSH
41456: LD_INT 1
41458: ARRAY
41459: PPUSH
41460: LD_VAR 0 12
41464: PUSH
41465: LD_VAR 0 7
41469: ARRAY
41470: PUSH
41471: LD_INT 2
41473: ARRAY
41474: PPUSH
41475: CALL_OW 488
41479: NOT
41480: PUSH
41481: LD_VAR 0 12
41485: PUSH
41486: LD_VAR 0 7
41490: ARRAY
41491: PUSH
41492: LD_INT 1
41494: ARRAY
41495: PPUSH
41496: LD_VAR 0 12
41500: PUSH
41501: LD_VAR 0 7
41505: ARRAY
41506: PUSH
41507: LD_INT 2
41509: ARRAY
41510: PPUSH
41511: CALL_OW 428
41515: PUSH
41516: LD_INT 0
41518: GREATER
41519: OR
41520: PUSH
41521: LD_VAR 0 12
41525: PUSH
41526: LD_VAR 0 7
41530: ARRAY
41531: PUSH
41532: LD_INT 1
41534: ARRAY
41535: PPUSH
41536: LD_VAR 0 12
41540: PUSH
41541: LD_VAR 0 7
41545: ARRAY
41546: PUSH
41547: LD_INT 2
41549: ARRAY
41550: PPUSH
41551: CALL_OW 351
41555: OR
41556: IFFALSE 41562
// exit ;
41558: POP
41559: POP
41560: GO 41854
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41562: LD_ADDR_VAR 0 8
41566: PUSH
41567: LD_VAR 0 12
41571: PUSH
41572: LD_VAR 0 7
41576: ARRAY
41577: PUSH
41578: LD_INT 1
41580: ARRAY
41581: PPUSH
41582: LD_VAR 0 12
41586: PUSH
41587: LD_VAR 0 7
41591: ARRAY
41592: PUSH
41593: LD_INT 2
41595: ARRAY
41596: PPUSH
41597: CALL_OW 546
41601: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41602: LD_VAR 0 8
41606: PUSH
41607: LD_INT 1
41609: ARRAY
41610: PUSH
41611: LD_VAR 0 8
41615: PUSH
41616: LD_INT 2
41618: ARRAY
41619: PUSH
41620: LD_VAR 0 13
41624: PUSH
41625: LD_INT 2
41627: PLUS
41628: GREATER
41629: OR
41630: PUSH
41631: LD_VAR 0 8
41635: PUSH
41636: LD_INT 2
41638: ARRAY
41639: PUSH
41640: LD_VAR 0 13
41644: PUSH
41645: LD_INT 2
41647: MINUS
41648: LESS
41649: OR
41650: PUSH
41651: LD_VAR 0 8
41655: PUSH
41656: LD_INT 3
41658: ARRAY
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 8
41665: PUSH
41666: LD_INT 9
41668: PUSH
41669: LD_INT 10
41671: PUSH
41672: LD_INT 11
41674: PUSH
41675: LD_INT 12
41677: PUSH
41678: LD_INT 13
41680: PUSH
41681: LD_INT 16
41683: PUSH
41684: LD_INT 17
41686: PUSH
41687: LD_INT 18
41689: PUSH
41690: LD_INT 19
41692: PUSH
41693: LD_INT 20
41695: PUSH
41696: LD_INT 21
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: IN
41714: NOT
41715: OR
41716: PUSH
41717: LD_VAR 0 8
41721: PUSH
41722: LD_INT 5
41724: ARRAY
41725: NOT
41726: OR
41727: PUSH
41728: LD_VAR 0 8
41732: PUSH
41733: LD_INT 6
41735: ARRAY
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: LD_INT 7
41745: PUSH
41746: LD_INT 9
41748: PUSH
41749: LD_INT 10
41751: PUSH
41752: LD_INT 11
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: IN
41763: NOT
41764: OR
41765: IFFALSE 41771
// exit ;
41767: POP
41768: POP
41769: GO 41854
// end ;
41771: GO 41442
41773: POP
41774: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41775: LD_VAR 0 9
41779: PPUSH
41780: LD_VAR 0 3
41784: PPUSH
41785: LD_VAR 0 4
41789: PPUSH
41790: LD_INT 20
41792: PPUSH
41793: CALL 33800 0 4
41797: PUSH
41798: LD_INT 4
41800: ARRAY
41801: IFFALSE 41805
// exit ;
41803: GO 41854
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41805: LD_VAR 0 2
41809: PUSH
41810: LD_INT 29
41812: PUSH
41813: LD_INT 30
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: IN
41820: PUSH
41821: LD_VAR 0 3
41825: PPUSH
41826: LD_VAR 0 4
41830: PPUSH
41831: LD_VAR 0 9
41835: PPUSH
41836: CALL_OW 440
41840: NOT
41841: AND
41842: IFFALSE 41846
// exit ;
41844: GO 41854
// result := true ;
41846: LD_ADDR_VAR 0 6
41850: PUSH
41851: LD_INT 1
41853: ST_TO_ADDR
// end ;
41854: LD_VAR 0 6
41858: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41859: LD_INT 0
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
// result = [ ] ;
41919: LD_ADDR_VAR 0 7
41923: PUSH
41924: EMPTY
41925: ST_TO_ADDR
// temp_list = [ ] ;
41926: LD_ADDR_VAR 0 9
41930: PUSH
41931: EMPTY
41932: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41933: LD_VAR 0 4
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 3
41949: PUSH
41950: LD_INT 4
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: IN
41964: NOT
41965: PUSH
41966: LD_VAR 0 1
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: IN
41981: PUSH
41982: LD_VAR 0 5
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: IN
42001: NOT
42002: AND
42003: OR
42004: IFFALSE 42008
// exit ;
42006: GO 60399
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42008: LD_VAR 0 1
42012: PUSH
42013: LD_INT 6
42015: PUSH
42016: LD_INT 7
42018: PUSH
42019: LD_INT 8
42021: PUSH
42022: LD_INT 13
42024: PUSH
42025: LD_INT 12
42027: PUSH
42028: LD_INT 15
42030: PUSH
42031: LD_INT 11
42033: PUSH
42034: LD_INT 14
42036: PUSH
42037: LD_INT 10
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: IN
42051: IFFALSE 42061
// btype = b_lab ;
42053: LD_ADDR_VAR 0 1
42057: PUSH
42058: LD_INT 6
42060: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42061: LD_VAR 0 6
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: IN
42080: NOT
42081: PUSH
42082: LD_VAR 0 1
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 3
42098: PUSH
42099: LD_INT 6
42101: PUSH
42102: LD_INT 36
42104: PUSH
42105: LD_INT 4
42107: PUSH
42108: LD_INT 5
42110: PUSH
42111: LD_INT 31
42113: PUSH
42114: LD_INT 32
42116: PUSH
42117: LD_INT 33
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: IN
42133: NOT
42134: PUSH
42135: LD_VAR 0 6
42139: PUSH
42140: LD_INT 1
42142: EQUAL
42143: AND
42144: OR
42145: PUSH
42146: LD_VAR 0 1
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: IN
42161: NOT
42162: PUSH
42163: LD_VAR 0 6
42167: PUSH
42168: LD_INT 2
42170: EQUAL
42171: AND
42172: OR
42173: IFFALSE 42183
// mode = 0 ;
42175: LD_ADDR_VAR 0 6
42179: PUSH
42180: LD_INT 0
42182: ST_TO_ADDR
// case mode of 0 :
42183: LD_VAR 0 6
42187: PUSH
42188: LD_INT 0
42190: DOUBLE
42191: EQUAL
42192: IFTRUE 42196
42194: GO 53649
42196: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42197: LD_ADDR_VAR 0 11
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 3
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42390: LD_ADDR_VAR 0 12
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42586: LD_ADDR_VAR 0 13
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: LD_INT 3
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 3
42745: NEG
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42785: LD_ADDR_VAR 0 14
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 3
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42981: LD_ADDR_VAR 0 15
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43174: LD_ADDR_VAR 0 16
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 3
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43367: LD_ADDR_VAR 0 17
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43597: LD_ADDR_VAR 0 18
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43827: LD_ADDR_VAR 0 19
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44057: LD_ADDR_VAR 0 20
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44287: LD_ADDR_VAR 0 21
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44517: LD_ADDR_VAR 0 22
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44747: LD_ADDR_VAR 0 23
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: LD_INT 3
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 3
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45027: LD_ADDR_VAR 0 24
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45303: LD_ADDR_VAR 0 25
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45577: LD_ADDR_VAR 0 26
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45853: LD_ADDR_VAR 0 27
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46133: LD_ADDR_VAR 0 28
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 3
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46415: LD_ADDR_VAR 0 29
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46694: LD_ADDR_VAR 0 30
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46972: LD_ADDR_VAR 0 31
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 3
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47250: LD_ADDR_VAR 0 32
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47528: LD_ADDR_VAR 0 33
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47807: LD_ADDR_VAR 0 34
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48087: LD_ADDR_VAR 0 35
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48199: LD_ADDR_VAR 0 36
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48311: LD_ADDR_VAR 0 37
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48423: LD_ADDR_VAR 0 38
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48535: LD_ADDR_VAR 0 39
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48647: LD_ADDR_VAR 0 40
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48759: LD_ADDR_VAR 0 41
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49109: LD_ADDR_VAR 0 42
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: LD_INT 3
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49459: LD_ADDR_VAR 0 43
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 3
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49807: LD_ADDR_VAR 0 44
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 3
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 3
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: LD_INT 3
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50157: LD_ADDR_VAR 0 45
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: NEG
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50507: LD_ADDR_VAR 0 46
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 3
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 3
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50855: LD_ADDR_VAR 0 47
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51006: LD_ADDR_VAR 0 48
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51153: LD_ADDR_VAR 0 49
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51297: LD_ADDR_VAR 0 50
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51441: LD_ADDR_VAR 0 51
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51588: LD_ADDR_VAR 0 52
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51739: LD_ADDR_VAR 0 53
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51969: LD_ADDR_VAR 0 54
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52199: LD_ADDR_VAR 0 55
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52429: LD_ADDR_VAR 0 56
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52659: LD_ADDR_VAR 0 57
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52889: LD_ADDR_VAR 0 58
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53119: LD_ADDR_VAR 0 59
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53207: LD_ADDR_VAR 0 60
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53295: LD_ADDR_VAR 0 61
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53383: LD_ADDR_VAR 0 62
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53471: LD_ADDR_VAR 0 63
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53559: LD_ADDR_VAR 0 64
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: ST_TO_ADDR
// end ; 1 :
53647: GO 59544
53649: LD_INT 1
53651: DOUBLE
53652: EQUAL
53653: IFTRUE 53657
53655: GO 56280
53657: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53658: LD_ADDR_VAR 0 11
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53702: LD_ADDR_VAR 0 12
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53743: LD_ADDR_VAR 0 13
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53783: LD_ADDR_VAR 0 14
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53824: LD_ADDR_VAR 0 15
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53868: LD_ADDR_VAR 0 16
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53914: LD_ADDR_VAR 0 17
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53958: LD_ADDR_VAR 0 18
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53999: LD_ADDR_VAR 0 19
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54039: LD_ADDR_VAR 0 20
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54080: LD_ADDR_VAR 0 21
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: NEG
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54124: LD_ADDR_VAR 0 22
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54170: LD_ADDR_VAR 0 23
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 4
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54214: LD_ADDR_VAR 0 24
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 4
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54255: LD_ADDR_VAR 0 25
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 4
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: LD_INT 4
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54295: LD_ADDR_VAR 0 26
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54336: LD_ADDR_VAR 0 27
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 3
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 4
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54380: LD_ADDR_VAR 0 28
54384: PUSH
54385: LD_INT 3
54387: NEG
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 4
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 4
54411: NEG
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54426: LD_ADDR_VAR 0 29
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 4
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 4
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 5
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 5
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 4
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 6
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 6
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 5
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54581: LD_ADDR_VAR 0 30
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 3
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 4
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 4
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 4
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 5
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 5
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 5
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 6
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 6
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54724: LD_ADDR_VAR 0 31
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 4
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 4
54771: PUSH
54772: LD_INT 4
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: LD_INT 4
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 5
54791: PUSH
54792: LD_INT 4
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 5
54801: PUSH
54802: LD_INT 5
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: LD_INT 5
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 6
54821: PUSH
54822: LD_INT 5
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 6
54831: PUSH
54832: LD_INT 6
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 5
54841: PUSH
54842: LD_INT 6
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54863: LD_ADDR_VAR 0 32
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 4
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 4
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 3
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 5
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 5
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 4
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 6
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 6
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 5
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55006: LD_ADDR_VAR 0 33
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 4
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 4
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 4
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 5
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 5
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 5
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 6
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 6
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55161: LD_ADDR_VAR 0 34
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 4
55228: NEG
55229: PUSH
55230: LD_INT 4
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: LD_INT 5
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 5
55252: NEG
55253: PUSH
55254: LD_INT 4
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 5
55264: NEG
55265: PUSH
55266: LD_INT 5
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 5
55276: NEG
55277: PUSH
55278: LD_INT 6
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 6
55288: NEG
55289: PUSH
55290: LD_INT 5
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 6
55300: NEG
55301: PUSH
55302: LD_INT 6
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55324: LD_ADDR_VAR 0 41
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55368: LD_ADDR_VAR 0 42
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55409: LD_ADDR_VAR 0 43
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 3
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55449: LD_ADDR_VAR 0 44
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 3
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55490: LD_ADDR_VAR 0 45
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55534: LD_ADDR_VAR 0 46
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55580: LD_ADDR_VAR 0 47
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 3
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55613: LD_ADDR_VAR 0 48
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55644: LD_ADDR_VAR 0 49
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55673: LD_ADDR_VAR 0 50
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55702: LD_ADDR_VAR 0 51
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55733: LD_ADDR_VAR 0 52
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55766: LD_ADDR_VAR 0 53
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55810: LD_ADDR_VAR 0 54
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55851: LD_ADDR_VAR 0 55
55855: PUSH
55856: LD_INT 3
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55891: LD_ADDR_VAR 0 56
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55932: LD_ADDR_VAR 0 57
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55976: LD_ADDR_VAR 0 58
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56022: LD_ADDR_VAR 0 59
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56066: LD_ADDR_VAR 0 60
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56107: LD_ADDR_VAR 0 61
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56147: LD_ADDR_VAR 0 62
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56188: LD_ADDR_VAR 0 63
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56232: LD_ADDR_VAR 0 64
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: ST_TO_ADDR
// end ; 2 :
56278: GO 59544
56280: LD_INT 2
56282: DOUBLE
56283: EQUAL
56284: IFTRUE 56288
56286: GO 59543
56288: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56289: LD_ADDR_VAR 0 29
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 4
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 5
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 5
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 4
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 4
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 5
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 5
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 4
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: LD_INT 5
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 4
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 5
56734: NEG
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 5
56746: NEG
56747: PUSH
56748: LD_INT 5
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: LD_INT 5
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 5
56770: NEG
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56827: LD_ADDR_VAR 0 30
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: LD_INT 4
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 5
56854: PUSH
56855: LD_INT 4
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 5
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 4
56874: PUSH
56875: LD_INT 5
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 4
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 4
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 4
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 4
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 5
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 5
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 5
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 4
57179: NEG
57180: PUSH
57181: LD_INT 3
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: LD_INT 4
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 4
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 4
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 5
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 4
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 4
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 5
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 5
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57374: LD_ADDR_VAR 0 31
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 4
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 4
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 5
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 5
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 4
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 3
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 5
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 4
57530: NEG
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 4
57576: NEG
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: NEG
57589: PUSH
57590: LD_INT 5
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: NEG
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 5
57636: NEG
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: LD_INT 5
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 5
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 4
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 4
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 5
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 4
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 5
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57924: LD_ADDR_VAR 0 32
57928: PUSH
57929: LD_INT 4
57931: NEG
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 4
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 4
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 5
57987: NEG
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 5
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: NEG
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: LD_INT 4
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 4
58093: NEG
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: LD_INT 4
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 4
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 4
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 5
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 4
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 4
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 5
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 5
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 4
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 4
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 4
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 4
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 5
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: PUSH
58367: LD_INT 5
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: LD_INT 5
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 4
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 5
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: LD_INT 5
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58471: LD_ADDR_VAR 0 33
58475: PUSH
58476: LD_INT 4
58478: NEG
58479: PUSH
58480: LD_INT 4
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 4
58490: NEG
58491: PUSH
58492: LD_INT 5
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 4
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 5
58538: NEG
58539: PUSH
58540: LD_INT 4
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 5
58550: NEG
58551: PUSH
58552: LD_INT 5
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: LD_INT 5
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 3
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 4
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 4
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 4
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 4
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 5
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 5
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 4
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 5
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 4
58811: PUSH
58812: LD_INT 4
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 4
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 5
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 5
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 4
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 5
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 3
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59009: LD_ADDR_VAR 0 34
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 5
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 4
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 5
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 3
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 4
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 4
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 4
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 5
59231: PUSH
59232: LD_INT 4
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 5
59241: PUSH
59242: LD_INT 5
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: LD_INT 5
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: LD_INT 4
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 5
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 5
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 4
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 4
59394: NEG
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 4
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 5
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 5
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 5
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// end ; end ;
59541: GO 59544
59543: POP
// case btype of b_depot , b_warehouse :
59544: LD_VAR 0 1
59548: PUSH
59549: LD_INT 0
59551: DOUBLE
59552: EQUAL
59553: IFTRUE 59563
59555: LD_INT 1
59557: DOUBLE
59558: EQUAL
59559: IFTRUE 59563
59561: GO 59764
59563: POP
// case nation of nation_american :
59564: LD_VAR 0 5
59568: PUSH
59569: LD_INT 1
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59577
59575: GO 59633
59577: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59578: LD_ADDR_VAR 0 9
59582: PUSH
59583: LD_VAR 0 11
59587: PUSH
59588: LD_VAR 0 12
59592: PUSH
59593: LD_VAR 0 13
59597: PUSH
59598: LD_VAR 0 14
59602: PUSH
59603: LD_VAR 0 15
59607: PUSH
59608: LD_VAR 0 16
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: PUSH
59621: LD_VAR 0 4
59625: PUSH
59626: LD_INT 1
59628: PLUS
59629: ARRAY
59630: ST_TO_ADDR
59631: GO 59762
59633: LD_INT 2
59635: DOUBLE
59636: EQUAL
59637: IFTRUE 59641
59639: GO 59697
59641: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59642: LD_ADDR_VAR 0 9
59646: PUSH
59647: LD_VAR 0 17
59651: PUSH
59652: LD_VAR 0 18
59656: PUSH
59657: LD_VAR 0 19
59661: PUSH
59662: LD_VAR 0 20
59666: PUSH
59667: LD_VAR 0 21
59671: PUSH
59672: LD_VAR 0 22
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: PUSH
59685: LD_VAR 0 4
59689: PUSH
59690: LD_INT 1
59692: PLUS
59693: ARRAY
59694: ST_TO_ADDR
59695: GO 59762
59697: LD_INT 3
59699: DOUBLE
59700: EQUAL
59701: IFTRUE 59705
59703: GO 59761
59705: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59706: LD_ADDR_VAR 0 9
59710: PUSH
59711: LD_VAR 0 23
59715: PUSH
59716: LD_VAR 0 24
59720: PUSH
59721: LD_VAR 0 25
59725: PUSH
59726: LD_VAR 0 26
59730: PUSH
59731: LD_VAR 0 27
59735: PUSH
59736: LD_VAR 0 28
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: PUSH
59749: LD_VAR 0 4
59753: PUSH
59754: LD_INT 1
59756: PLUS
59757: ARRAY
59758: ST_TO_ADDR
59759: GO 59762
59761: POP
59762: GO 60317
59764: LD_INT 2
59766: DOUBLE
59767: EQUAL
59768: IFTRUE 59778
59770: LD_INT 3
59772: DOUBLE
59773: EQUAL
59774: IFTRUE 59778
59776: GO 59834
59778: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59779: LD_ADDR_VAR 0 9
59783: PUSH
59784: LD_VAR 0 29
59788: PUSH
59789: LD_VAR 0 30
59793: PUSH
59794: LD_VAR 0 31
59798: PUSH
59799: LD_VAR 0 32
59803: PUSH
59804: LD_VAR 0 33
59808: PUSH
59809: LD_VAR 0 34
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_VAR 0 4
59826: PUSH
59827: LD_INT 1
59829: PLUS
59830: ARRAY
59831: ST_TO_ADDR
59832: GO 60317
59834: LD_INT 16
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59896
59840: LD_INT 17
59842: DOUBLE
59843: EQUAL
59844: IFTRUE 59896
59846: LD_INT 18
59848: DOUBLE
59849: EQUAL
59850: IFTRUE 59896
59852: LD_INT 19
59854: DOUBLE
59855: EQUAL
59856: IFTRUE 59896
59858: LD_INT 22
59860: DOUBLE
59861: EQUAL
59862: IFTRUE 59896
59864: LD_INT 20
59866: DOUBLE
59867: EQUAL
59868: IFTRUE 59896
59870: LD_INT 21
59872: DOUBLE
59873: EQUAL
59874: IFTRUE 59896
59876: LD_INT 23
59878: DOUBLE
59879: EQUAL
59880: IFTRUE 59896
59882: LD_INT 24
59884: DOUBLE
59885: EQUAL
59886: IFTRUE 59896
59888: LD_INT 25
59890: DOUBLE
59891: EQUAL
59892: IFTRUE 59896
59894: GO 59952
59896: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59897: LD_ADDR_VAR 0 9
59901: PUSH
59902: LD_VAR 0 35
59906: PUSH
59907: LD_VAR 0 36
59911: PUSH
59912: LD_VAR 0 37
59916: PUSH
59917: LD_VAR 0 38
59921: PUSH
59922: LD_VAR 0 39
59926: PUSH
59927: LD_VAR 0 40
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: LD_VAR 0 4
59944: PUSH
59945: LD_INT 1
59947: PLUS
59948: ARRAY
59949: ST_TO_ADDR
59950: GO 60317
59952: LD_INT 6
59954: DOUBLE
59955: EQUAL
59956: IFTRUE 60008
59958: LD_INT 7
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 60008
59964: LD_INT 8
59966: DOUBLE
59967: EQUAL
59968: IFTRUE 60008
59970: LD_INT 13
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 60008
59976: LD_INT 12
59978: DOUBLE
59979: EQUAL
59980: IFTRUE 60008
59982: LD_INT 15
59984: DOUBLE
59985: EQUAL
59986: IFTRUE 60008
59988: LD_INT 11
59990: DOUBLE
59991: EQUAL
59992: IFTRUE 60008
59994: LD_INT 14
59996: DOUBLE
59997: EQUAL
59998: IFTRUE 60008
60000: LD_INT 10
60002: DOUBLE
60003: EQUAL
60004: IFTRUE 60008
60006: GO 60064
60008: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60009: LD_ADDR_VAR 0 9
60013: PUSH
60014: LD_VAR 0 41
60018: PUSH
60019: LD_VAR 0 42
60023: PUSH
60024: LD_VAR 0 43
60028: PUSH
60029: LD_VAR 0 44
60033: PUSH
60034: LD_VAR 0 45
60038: PUSH
60039: LD_VAR 0 46
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: PUSH
60052: LD_VAR 0 4
60056: PUSH
60057: LD_INT 1
60059: PLUS
60060: ARRAY
60061: ST_TO_ADDR
60062: GO 60317
60064: LD_INT 36
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60072
60070: GO 60128
60072: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60073: LD_ADDR_VAR 0 9
60077: PUSH
60078: LD_VAR 0 47
60082: PUSH
60083: LD_VAR 0 48
60087: PUSH
60088: LD_VAR 0 49
60092: PUSH
60093: LD_VAR 0 50
60097: PUSH
60098: LD_VAR 0 51
60102: PUSH
60103: LD_VAR 0 52
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: PUSH
60116: LD_VAR 0 4
60120: PUSH
60121: LD_INT 1
60123: PLUS
60124: ARRAY
60125: ST_TO_ADDR
60126: GO 60317
60128: LD_INT 4
60130: DOUBLE
60131: EQUAL
60132: IFTRUE 60154
60134: LD_INT 5
60136: DOUBLE
60137: EQUAL
60138: IFTRUE 60154
60140: LD_INT 34
60142: DOUBLE
60143: EQUAL
60144: IFTRUE 60154
60146: LD_INT 37
60148: DOUBLE
60149: EQUAL
60150: IFTRUE 60154
60152: GO 60210
60154: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60155: LD_ADDR_VAR 0 9
60159: PUSH
60160: LD_VAR 0 53
60164: PUSH
60165: LD_VAR 0 54
60169: PUSH
60170: LD_VAR 0 55
60174: PUSH
60175: LD_VAR 0 56
60179: PUSH
60180: LD_VAR 0 57
60184: PUSH
60185: LD_VAR 0 58
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_VAR 0 4
60202: PUSH
60203: LD_INT 1
60205: PLUS
60206: ARRAY
60207: ST_TO_ADDR
60208: GO 60317
60210: LD_INT 31
60212: DOUBLE
60213: EQUAL
60214: IFTRUE 60260
60216: LD_INT 32
60218: DOUBLE
60219: EQUAL
60220: IFTRUE 60260
60222: LD_INT 33
60224: DOUBLE
60225: EQUAL
60226: IFTRUE 60260
60228: LD_INT 27
60230: DOUBLE
60231: EQUAL
60232: IFTRUE 60260
60234: LD_INT 26
60236: DOUBLE
60237: EQUAL
60238: IFTRUE 60260
60240: LD_INT 28
60242: DOUBLE
60243: EQUAL
60244: IFTRUE 60260
60246: LD_INT 29
60248: DOUBLE
60249: EQUAL
60250: IFTRUE 60260
60252: LD_INT 30
60254: DOUBLE
60255: EQUAL
60256: IFTRUE 60260
60258: GO 60316
60260: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60261: LD_ADDR_VAR 0 9
60265: PUSH
60266: LD_VAR 0 59
60270: PUSH
60271: LD_VAR 0 60
60275: PUSH
60276: LD_VAR 0 61
60280: PUSH
60281: LD_VAR 0 62
60285: PUSH
60286: LD_VAR 0 63
60290: PUSH
60291: LD_VAR 0 64
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: PUSH
60304: LD_VAR 0 4
60308: PUSH
60309: LD_INT 1
60311: PLUS
60312: ARRAY
60313: ST_TO_ADDR
60314: GO 60317
60316: POP
// temp_list2 = [ ] ;
60317: LD_ADDR_VAR 0 10
60321: PUSH
60322: EMPTY
60323: ST_TO_ADDR
// for i in temp_list do
60324: LD_ADDR_VAR 0 8
60328: PUSH
60329: LD_VAR 0 9
60333: PUSH
60334: FOR_IN
60335: IFFALSE 60387
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60337: LD_ADDR_VAR 0 10
60341: PUSH
60342: LD_VAR 0 10
60346: PUSH
60347: LD_VAR 0 8
60351: PUSH
60352: LD_INT 1
60354: ARRAY
60355: PUSH
60356: LD_VAR 0 2
60360: PLUS
60361: PUSH
60362: LD_VAR 0 8
60366: PUSH
60367: LD_INT 2
60369: ARRAY
60370: PUSH
60371: LD_VAR 0 3
60375: PLUS
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: EMPTY
60382: LIST
60383: ADD
60384: ST_TO_ADDR
60385: GO 60334
60387: POP
60388: POP
// result = temp_list2 ;
60389: LD_ADDR_VAR 0 7
60393: PUSH
60394: LD_VAR 0 10
60398: ST_TO_ADDR
// end ;
60399: LD_VAR 0 7
60403: RET
// export function EnemyInRange ( unit , dist ) ; begin
60404: LD_INT 0
60406: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60407: LD_ADDR_VAR 0 3
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 255
60421: PPUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: CALL_OW 250
60431: PPUSH
60432: LD_VAR 0 1
60436: PPUSH
60437: CALL_OW 251
60441: PPUSH
60442: LD_VAR 0 2
60446: PPUSH
60447: CALL 33800 0 4
60451: PUSH
60452: LD_INT 4
60454: ARRAY
60455: ST_TO_ADDR
// end ;
60456: LD_VAR 0 3
60460: RET
// export function PlayerSeeMe ( unit ) ; begin
60461: LD_INT 0
60463: PPUSH
// result := See ( your_side , unit ) ;
60464: LD_ADDR_VAR 0 2
60468: PUSH
60469: LD_OWVAR 2
60473: PPUSH
60474: LD_VAR 0 1
60478: PPUSH
60479: CALL_OW 292
60483: ST_TO_ADDR
// end ;
60484: LD_VAR 0 2
60488: RET
// export function ReverseDir ( unit ) ; begin
60489: LD_INT 0
60491: PPUSH
// if not unit then
60492: LD_VAR 0 1
60496: NOT
60497: IFFALSE 60501
// exit ;
60499: GO 60524
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60501: LD_ADDR_VAR 0 2
60505: PUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 254
60515: PUSH
60516: LD_INT 3
60518: PLUS
60519: PUSH
60520: LD_INT 6
60522: MOD
60523: ST_TO_ADDR
// end ;
60524: LD_VAR 0 2
60528: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60529: LD_INT 0
60531: PPUSH
60532: PPUSH
60533: PPUSH
60534: PPUSH
60535: PPUSH
// if not hexes then
60536: LD_VAR 0 2
60540: NOT
60541: IFFALSE 60545
// exit ;
60543: GO 60693
// dist := 9999 ;
60545: LD_ADDR_VAR 0 5
60549: PUSH
60550: LD_INT 9999
60552: ST_TO_ADDR
// for i = 1 to hexes do
60553: LD_ADDR_VAR 0 4
60557: PUSH
60558: DOUBLE
60559: LD_INT 1
60561: DEC
60562: ST_TO_ADDR
60563: LD_VAR 0 2
60567: PUSH
60568: FOR_TO
60569: IFFALSE 60681
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60571: LD_VAR 0 1
60575: PPUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_VAR 0 4
60585: ARRAY
60586: PUSH
60587: LD_INT 1
60589: ARRAY
60590: PPUSH
60591: LD_VAR 0 2
60595: PUSH
60596: LD_VAR 0 4
60600: ARRAY
60601: PUSH
60602: LD_INT 2
60604: ARRAY
60605: PPUSH
60606: CALL_OW 297
60610: PUSH
60611: LD_VAR 0 5
60615: LESS
60616: IFFALSE 60679
// begin hex := hexes [ i ] ;
60618: LD_ADDR_VAR 0 7
60622: PUSH
60623: LD_VAR 0 2
60627: PUSH
60628: LD_VAR 0 4
60632: ARRAY
60633: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60634: LD_ADDR_VAR 0 5
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: LD_VAR 0 2
60648: PUSH
60649: LD_VAR 0 4
60653: ARRAY
60654: PUSH
60655: LD_INT 1
60657: ARRAY
60658: PPUSH
60659: LD_VAR 0 2
60663: PUSH
60664: LD_VAR 0 4
60668: ARRAY
60669: PUSH
60670: LD_INT 2
60672: ARRAY
60673: PPUSH
60674: CALL_OW 297
60678: ST_TO_ADDR
// end ; end ;
60679: GO 60568
60681: POP
60682: POP
// result := hex ;
60683: LD_ADDR_VAR 0 3
60687: PUSH
60688: LD_VAR 0 7
60692: ST_TO_ADDR
// end ;
60693: LD_VAR 0 3
60697: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60698: LD_INT 0
60700: PPUSH
60701: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60702: LD_VAR 0 1
60706: NOT
60707: PUSH
60708: LD_VAR 0 1
60712: PUSH
60713: LD_INT 21
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 23
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PPUSH
60737: CALL_OW 69
60741: IN
60742: NOT
60743: OR
60744: IFFALSE 60748
// exit ;
60746: GO 60795
// for i = 1 to 3 do
60748: LD_ADDR_VAR 0 3
60752: PUSH
60753: DOUBLE
60754: LD_INT 1
60756: DEC
60757: ST_TO_ADDR
60758: LD_INT 3
60760: PUSH
60761: FOR_TO
60762: IFFALSE 60793
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60764: LD_VAR 0 1
60768: PPUSH
60769: CALL_OW 250
60773: PPUSH
60774: LD_VAR 0 1
60778: PPUSH
60779: CALL_OW 251
60783: PPUSH
60784: LD_INT 1
60786: PPUSH
60787: CALL_OW 453
60791: GO 60761
60793: POP
60794: POP
// end ;
60795: LD_VAR 0 2
60799: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60800: LD_INT 0
60802: PPUSH
60803: PPUSH
60804: PPUSH
60805: PPUSH
60806: PPUSH
60807: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60808: LD_VAR 0 1
60812: NOT
60813: PUSH
60814: LD_VAR 0 2
60818: NOT
60819: OR
60820: PUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: CALL_OW 314
60830: OR
60831: IFFALSE 60835
// exit ;
60833: GO 61276
// x := GetX ( enemy_unit ) ;
60835: LD_ADDR_VAR 0 7
60839: PUSH
60840: LD_VAR 0 2
60844: PPUSH
60845: CALL_OW 250
60849: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60850: LD_ADDR_VAR 0 8
60854: PUSH
60855: LD_VAR 0 2
60859: PPUSH
60860: CALL_OW 251
60864: ST_TO_ADDR
// if not x or not y then
60865: LD_VAR 0 7
60869: NOT
60870: PUSH
60871: LD_VAR 0 8
60875: NOT
60876: OR
60877: IFFALSE 60881
// exit ;
60879: GO 61276
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60881: LD_ADDR_VAR 0 6
60885: PUSH
60886: LD_VAR 0 7
60890: PPUSH
60891: LD_INT 0
60893: PPUSH
60894: LD_INT 4
60896: PPUSH
60897: CALL_OW 272
60901: PUSH
60902: LD_VAR 0 8
60906: PPUSH
60907: LD_INT 0
60909: PPUSH
60910: LD_INT 4
60912: PPUSH
60913: CALL_OW 273
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_VAR 0 7
60926: PPUSH
60927: LD_INT 1
60929: PPUSH
60930: LD_INT 4
60932: PPUSH
60933: CALL_OW 272
60937: PUSH
60938: LD_VAR 0 8
60942: PPUSH
60943: LD_INT 1
60945: PPUSH
60946: LD_INT 4
60948: PPUSH
60949: CALL_OW 273
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_VAR 0 7
60962: PPUSH
60963: LD_INT 2
60965: PPUSH
60966: LD_INT 4
60968: PPUSH
60969: CALL_OW 272
60973: PUSH
60974: LD_VAR 0 8
60978: PPUSH
60979: LD_INT 2
60981: PPUSH
60982: LD_INT 4
60984: PPUSH
60985: CALL_OW 273
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_VAR 0 7
60998: PPUSH
60999: LD_INT 3
61001: PPUSH
61002: LD_INT 4
61004: PPUSH
61005: CALL_OW 272
61009: PUSH
61010: LD_VAR 0 8
61014: PPUSH
61015: LD_INT 3
61017: PPUSH
61018: LD_INT 4
61020: PPUSH
61021: CALL_OW 273
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_VAR 0 7
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: LD_INT 4
61040: PPUSH
61041: CALL_OW 272
61045: PUSH
61046: LD_VAR 0 8
61050: PPUSH
61051: LD_INT 4
61053: PPUSH
61054: LD_INT 4
61056: PPUSH
61057: CALL_OW 273
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_VAR 0 7
61070: PPUSH
61071: LD_INT 5
61073: PPUSH
61074: LD_INT 4
61076: PPUSH
61077: CALL_OW 272
61081: PUSH
61082: LD_VAR 0 8
61086: PPUSH
61087: LD_INT 5
61089: PPUSH
61090: LD_INT 4
61092: PPUSH
61093: CALL_OW 273
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: ST_TO_ADDR
// for i = tmp downto 1 do
61110: LD_ADDR_VAR 0 4
61114: PUSH
61115: DOUBLE
61116: LD_VAR 0 6
61120: INC
61121: ST_TO_ADDR
61122: LD_INT 1
61124: PUSH
61125: FOR_DOWNTO
61126: IFFALSE 61227
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61128: LD_VAR 0 6
61132: PUSH
61133: LD_VAR 0 4
61137: ARRAY
61138: PUSH
61139: LD_INT 1
61141: ARRAY
61142: PPUSH
61143: LD_VAR 0 6
61147: PUSH
61148: LD_VAR 0 4
61152: ARRAY
61153: PUSH
61154: LD_INT 2
61156: ARRAY
61157: PPUSH
61158: CALL_OW 488
61162: NOT
61163: PUSH
61164: LD_VAR 0 6
61168: PUSH
61169: LD_VAR 0 4
61173: ARRAY
61174: PUSH
61175: LD_INT 1
61177: ARRAY
61178: PPUSH
61179: LD_VAR 0 6
61183: PUSH
61184: LD_VAR 0 4
61188: ARRAY
61189: PUSH
61190: LD_INT 2
61192: ARRAY
61193: PPUSH
61194: CALL_OW 428
61198: PUSH
61199: LD_INT 0
61201: NONEQUAL
61202: OR
61203: IFFALSE 61225
// tmp := Delete ( tmp , i ) ;
61205: LD_ADDR_VAR 0 6
61209: PUSH
61210: LD_VAR 0 6
61214: PPUSH
61215: LD_VAR 0 4
61219: PPUSH
61220: CALL_OW 3
61224: ST_TO_ADDR
61225: GO 61125
61227: POP
61228: POP
// j := GetClosestHex ( unit , tmp ) ;
61229: LD_ADDR_VAR 0 5
61233: PUSH
61234: LD_VAR 0 1
61238: PPUSH
61239: LD_VAR 0 6
61243: PPUSH
61244: CALL 60529 0 2
61248: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61249: LD_VAR 0 1
61253: PPUSH
61254: LD_VAR 0 5
61258: PUSH
61259: LD_INT 1
61261: ARRAY
61262: PPUSH
61263: LD_VAR 0 5
61267: PUSH
61268: LD_INT 2
61270: ARRAY
61271: PPUSH
61272: CALL_OW 111
// end ;
61276: LD_VAR 0 3
61280: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61281: LD_INT 0
61283: PPUSH
61284: PPUSH
61285: PPUSH
// uc_side = 0 ;
61286: LD_ADDR_OWVAR 20
61290: PUSH
61291: LD_INT 0
61293: ST_TO_ADDR
// uc_nation = 0 ;
61294: LD_ADDR_OWVAR 21
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// InitHc_All ( ) ;
61302: CALL_OW 584
// InitVc ;
61306: CALL_OW 20
// if mastodonts then
61310: LD_VAR 0 6
61314: IFFALSE 61381
// for i = 1 to mastodonts do
61316: LD_ADDR_VAR 0 11
61320: PUSH
61321: DOUBLE
61322: LD_INT 1
61324: DEC
61325: ST_TO_ADDR
61326: LD_VAR 0 6
61330: PUSH
61331: FOR_TO
61332: IFFALSE 61379
// begin vc_chassis := 31 ;
61334: LD_ADDR_OWVAR 37
61338: PUSH
61339: LD_INT 31
61341: ST_TO_ADDR
// vc_control := control_rider ;
61342: LD_ADDR_OWVAR 38
61346: PUSH
61347: LD_INT 4
61349: ST_TO_ADDR
// animal := CreateVehicle ;
61350: LD_ADDR_VAR 0 12
61354: PUSH
61355: CALL_OW 45
61359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61360: LD_VAR 0 12
61364: PPUSH
61365: LD_VAR 0 8
61369: PPUSH
61370: LD_INT 0
61372: PPUSH
61373: CALL 63569 0 3
// end ;
61377: GO 61331
61379: POP
61380: POP
// if horses then
61381: LD_VAR 0 5
61385: IFFALSE 61452
// for i = 1 to horses do
61387: LD_ADDR_VAR 0 11
61391: PUSH
61392: DOUBLE
61393: LD_INT 1
61395: DEC
61396: ST_TO_ADDR
61397: LD_VAR 0 5
61401: PUSH
61402: FOR_TO
61403: IFFALSE 61450
// begin hc_class := 21 ;
61405: LD_ADDR_OWVAR 28
61409: PUSH
61410: LD_INT 21
61412: ST_TO_ADDR
// hc_gallery :=  ;
61413: LD_ADDR_OWVAR 33
61417: PUSH
61418: LD_STRING 
61420: ST_TO_ADDR
// animal := CreateHuman ;
61421: LD_ADDR_VAR 0 12
61425: PUSH
61426: CALL_OW 44
61430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61431: LD_VAR 0 12
61435: PPUSH
61436: LD_VAR 0 8
61440: PPUSH
61441: LD_INT 0
61443: PPUSH
61444: CALL 63569 0 3
// end ;
61448: GO 61402
61450: POP
61451: POP
// if birds then
61452: LD_VAR 0 1
61456: IFFALSE 61523
// for i = 1 to birds do
61458: LD_ADDR_VAR 0 11
61462: PUSH
61463: DOUBLE
61464: LD_INT 1
61466: DEC
61467: ST_TO_ADDR
61468: LD_VAR 0 1
61472: PUSH
61473: FOR_TO
61474: IFFALSE 61521
// begin hc_class = 18 ;
61476: LD_ADDR_OWVAR 28
61480: PUSH
61481: LD_INT 18
61483: ST_TO_ADDR
// hc_gallery =  ;
61484: LD_ADDR_OWVAR 33
61488: PUSH
61489: LD_STRING 
61491: ST_TO_ADDR
// animal := CreateHuman ;
61492: LD_ADDR_VAR 0 12
61496: PUSH
61497: CALL_OW 44
61501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61502: LD_VAR 0 12
61506: PPUSH
61507: LD_VAR 0 8
61511: PPUSH
61512: LD_INT 0
61514: PPUSH
61515: CALL 63569 0 3
// end ;
61519: GO 61473
61521: POP
61522: POP
// if tigers then
61523: LD_VAR 0 2
61527: IFFALSE 61611
// for i = 1 to tigers do
61529: LD_ADDR_VAR 0 11
61533: PUSH
61534: DOUBLE
61535: LD_INT 1
61537: DEC
61538: ST_TO_ADDR
61539: LD_VAR 0 2
61543: PUSH
61544: FOR_TO
61545: IFFALSE 61609
// begin hc_class = class_tiger ;
61547: LD_ADDR_OWVAR 28
61551: PUSH
61552: LD_INT 14
61554: ST_TO_ADDR
// hc_gallery =  ;
61555: LD_ADDR_OWVAR 33
61559: PUSH
61560: LD_STRING 
61562: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61563: LD_ADDR_OWVAR 35
61567: PUSH
61568: LD_INT 7
61570: NEG
61571: PPUSH
61572: LD_INT 7
61574: PPUSH
61575: CALL_OW 12
61579: ST_TO_ADDR
// animal := CreateHuman ;
61580: LD_ADDR_VAR 0 12
61584: PUSH
61585: CALL_OW 44
61589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61590: LD_VAR 0 12
61594: PPUSH
61595: LD_VAR 0 8
61599: PPUSH
61600: LD_INT 0
61602: PPUSH
61603: CALL 63569 0 3
// end ;
61607: GO 61544
61609: POP
61610: POP
// if apemans then
61611: LD_VAR 0 3
61615: IFFALSE 61738
// for i = 1 to apemans do
61617: LD_ADDR_VAR 0 11
61621: PUSH
61622: DOUBLE
61623: LD_INT 1
61625: DEC
61626: ST_TO_ADDR
61627: LD_VAR 0 3
61631: PUSH
61632: FOR_TO
61633: IFFALSE 61736
// begin hc_class = class_apeman ;
61635: LD_ADDR_OWVAR 28
61639: PUSH
61640: LD_INT 12
61642: ST_TO_ADDR
// hc_gallery =  ;
61643: LD_ADDR_OWVAR 33
61647: PUSH
61648: LD_STRING 
61650: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61651: LD_ADDR_OWVAR 35
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PPUSH
61660: LD_INT 2
61662: PPUSH
61663: CALL_OW 12
61667: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61668: LD_ADDR_OWVAR 31
61672: PUSH
61673: LD_INT 1
61675: PPUSH
61676: LD_INT 3
61678: PPUSH
61679: CALL_OW 12
61683: PUSH
61684: LD_INT 1
61686: PPUSH
61687: LD_INT 3
61689: PPUSH
61690: CALL_OW 12
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: ST_TO_ADDR
// animal := CreateHuman ;
61707: LD_ADDR_VAR 0 12
61711: PUSH
61712: CALL_OW 44
61716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61717: LD_VAR 0 12
61721: PPUSH
61722: LD_VAR 0 8
61726: PPUSH
61727: LD_INT 0
61729: PPUSH
61730: CALL 63569 0 3
// end ;
61734: GO 61632
61736: POP
61737: POP
// if enchidnas then
61738: LD_VAR 0 4
61742: IFFALSE 61809
// for i = 1 to enchidnas do
61744: LD_ADDR_VAR 0 11
61748: PUSH
61749: DOUBLE
61750: LD_INT 1
61752: DEC
61753: ST_TO_ADDR
61754: LD_VAR 0 4
61758: PUSH
61759: FOR_TO
61760: IFFALSE 61807
// begin hc_class = 13 ;
61762: LD_ADDR_OWVAR 28
61766: PUSH
61767: LD_INT 13
61769: ST_TO_ADDR
// hc_gallery =  ;
61770: LD_ADDR_OWVAR 33
61774: PUSH
61775: LD_STRING 
61777: ST_TO_ADDR
// animal := CreateHuman ;
61778: LD_ADDR_VAR 0 12
61782: PUSH
61783: CALL_OW 44
61787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61788: LD_VAR 0 12
61792: PPUSH
61793: LD_VAR 0 8
61797: PPUSH
61798: LD_INT 0
61800: PPUSH
61801: CALL 63569 0 3
// end ;
61805: GO 61759
61807: POP
61808: POP
// if fishes then
61809: LD_VAR 0 7
61813: IFFALSE 61880
// for i = 1 to fishes do
61815: LD_ADDR_VAR 0 11
61819: PUSH
61820: DOUBLE
61821: LD_INT 1
61823: DEC
61824: ST_TO_ADDR
61825: LD_VAR 0 7
61829: PUSH
61830: FOR_TO
61831: IFFALSE 61878
// begin hc_class = 20 ;
61833: LD_ADDR_OWVAR 28
61837: PUSH
61838: LD_INT 20
61840: ST_TO_ADDR
// hc_gallery =  ;
61841: LD_ADDR_OWVAR 33
61845: PUSH
61846: LD_STRING 
61848: ST_TO_ADDR
// animal := CreateHuman ;
61849: LD_ADDR_VAR 0 12
61853: PUSH
61854: CALL_OW 44
61858: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61859: LD_VAR 0 12
61863: PPUSH
61864: LD_VAR 0 9
61868: PPUSH
61869: LD_INT 0
61871: PPUSH
61872: CALL 63569 0 3
// end ;
61876: GO 61830
61878: POP
61879: POP
// end ;
61880: LD_VAR 0 10
61884: RET
// export function WantHeal ( sci , unit ) ; begin
61885: LD_INT 0
61887: PPUSH
// if GetTaskList ( sci ) > 0 then
61888: LD_VAR 0 1
61892: PPUSH
61893: CALL_OW 437
61897: PUSH
61898: LD_INT 0
61900: GREATER
61901: IFFALSE 61971
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61903: LD_VAR 0 1
61907: PPUSH
61908: CALL_OW 437
61912: PUSH
61913: LD_INT 1
61915: ARRAY
61916: PUSH
61917: LD_INT 1
61919: ARRAY
61920: PUSH
61921: LD_STRING l
61923: EQUAL
61924: PUSH
61925: LD_VAR 0 1
61929: PPUSH
61930: CALL_OW 437
61934: PUSH
61935: LD_INT 1
61937: ARRAY
61938: PUSH
61939: LD_INT 4
61941: ARRAY
61942: PUSH
61943: LD_VAR 0 2
61947: EQUAL
61948: AND
61949: IFFALSE 61961
// result := true else
61951: LD_ADDR_VAR 0 3
61955: PUSH
61956: LD_INT 1
61958: ST_TO_ADDR
61959: GO 61969
// result := false ;
61961: LD_ADDR_VAR 0 3
61965: PUSH
61966: LD_INT 0
61968: ST_TO_ADDR
// end else
61969: GO 61979
// result := false ;
61971: LD_ADDR_VAR 0 3
61975: PUSH
61976: LD_INT 0
61978: ST_TO_ADDR
// end ;
61979: LD_VAR 0 3
61983: RET
// export function HealTarget ( sci ) ; begin
61984: LD_INT 0
61986: PPUSH
// if not sci then
61987: LD_VAR 0 1
61991: NOT
61992: IFFALSE 61996
// exit ;
61994: GO 62061
// result := 0 ;
61996: LD_ADDR_VAR 0 2
62000: PUSH
62001: LD_INT 0
62003: ST_TO_ADDR
// if GetTaskList ( sci ) then
62004: LD_VAR 0 1
62008: PPUSH
62009: CALL_OW 437
62013: IFFALSE 62061
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62015: LD_VAR 0 1
62019: PPUSH
62020: CALL_OW 437
62024: PUSH
62025: LD_INT 1
62027: ARRAY
62028: PUSH
62029: LD_INT 1
62031: ARRAY
62032: PUSH
62033: LD_STRING l
62035: EQUAL
62036: IFFALSE 62061
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62038: LD_ADDR_VAR 0 2
62042: PUSH
62043: LD_VAR 0 1
62047: PPUSH
62048: CALL_OW 437
62052: PUSH
62053: LD_INT 1
62055: ARRAY
62056: PUSH
62057: LD_INT 4
62059: ARRAY
62060: ST_TO_ADDR
// end ;
62061: LD_VAR 0 2
62065: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62066: LD_INT 0
62068: PPUSH
62069: PPUSH
62070: PPUSH
62071: PPUSH
// if not base_units then
62072: LD_VAR 0 1
62076: NOT
62077: IFFALSE 62081
// exit ;
62079: GO 62168
// result := false ;
62081: LD_ADDR_VAR 0 2
62085: PUSH
62086: LD_INT 0
62088: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62089: LD_ADDR_VAR 0 5
62093: PUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: LD_INT 21
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PPUSH
62109: CALL_OW 72
62113: ST_TO_ADDR
// if not tmp then
62114: LD_VAR 0 5
62118: NOT
62119: IFFALSE 62123
// exit ;
62121: GO 62168
// for i in tmp do
62123: LD_ADDR_VAR 0 3
62127: PUSH
62128: LD_VAR 0 5
62132: PUSH
62133: FOR_IN
62134: IFFALSE 62166
// begin result := EnemyInRange ( i , 22 ) ;
62136: LD_ADDR_VAR 0 2
62140: PUSH
62141: LD_VAR 0 3
62145: PPUSH
62146: LD_INT 22
62148: PPUSH
62149: CALL 60404 0 2
62153: ST_TO_ADDR
// if result then
62154: LD_VAR 0 2
62158: IFFALSE 62164
// exit ;
62160: POP
62161: POP
62162: GO 62168
// end ;
62164: GO 62133
62166: POP
62167: POP
// end ;
62168: LD_VAR 0 2
62172: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
// if not units then
62177: LD_VAR 0 1
62181: NOT
62182: IFFALSE 62186
// exit ;
62184: GO 62256
// result := [ ] ;
62186: LD_ADDR_VAR 0 3
62190: PUSH
62191: EMPTY
62192: ST_TO_ADDR
// for i in units do
62193: LD_ADDR_VAR 0 4
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: FOR_IN
62204: IFFALSE 62254
// if GetTag ( i ) = tag then
62206: LD_VAR 0 4
62210: PPUSH
62211: CALL_OW 110
62215: PUSH
62216: LD_VAR 0 2
62220: EQUAL
62221: IFFALSE 62252
// result := Replace ( result , result + 1 , i ) ;
62223: LD_ADDR_VAR 0 3
62227: PUSH
62228: LD_VAR 0 3
62232: PPUSH
62233: LD_VAR 0 3
62237: PUSH
62238: LD_INT 1
62240: PLUS
62241: PPUSH
62242: LD_VAR 0 4
62246: PPUSH
62247: CALL_OW 1
62251: ST_TO_ADDR
62252: GO 62203
62254: POP
62255: POP
// end ;
62256: LD_VAR 0 3
62260: RET
// export function IsDriver ( un ) ; begin
62261: LD_INT 0
62263: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62264: LD_ADDR_VAR 0 2
62268: PUSH
62269: LD_VAR 0 1
62273: PUSH
62274: LD_INT 55
62276: PUSH
62277: EMPTY
62278: LIST
62279: PPUSH
62280: CALL_OW 69
62284: IN
62285: ST_TO_ADDR
// end ;
62286: LD_VAR 0 2
62290: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62291: LD_INT 0
62293: PPUSH
62294: PPUSH
// list := [ ] ;
62295: LD_ADDR_VAR 0 5
62299: PUSH
62300: EMPTY
62301: ST_TO_ADDR
// case d of 0 :
62302: LD_VAR 0 3
62306: PUSH
62307: LD_INT 0
62309: DOUBLE
62310: EQUAL
62311: IFTRUE 62315
62313: GO 62448
62315: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62316: LD_ADDR_VAR 0 5
62320: PUSH
62321: LD_VAR 0 1
62325: PUSH
62326: LD_INT 4
62328: MINUS
62329: PUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 4
62337: MINUS
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: PUSH
62347: LD_VAR 0 1
62351: PUSH
62352: LD_INT 3
62354: MINUS
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: PUSH
62369: LD_VAR 0 1
62373: PUSH
62374: LD_INT 4
62376: PLUS
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_INT 4
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: PUSH
62391: LD_VAR 0 1
62395: PUSH
62396: LD_INT 3
62398: PLUS
62399: PUSH
62400: LD_VAR 0 2
62404: PUSH
62405: LD_INT 3
62407: PLUS
62408: PUSH
62409: LD_INT 5
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: LD_VAR 0 1
62421: PUSH
62422: LD_VAR 0 2
62426: PUSH
62427: LD_INT 4
62429: PLUS
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: ST_TO_ADDR
// end ; 1 :
62446: GO 63146
62448: LD_INT 1
62450: DOUBLE
62451: EQUAL
62452: IFTRUE 62456
62454: GO 62589
62456: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62457: LD_ADDR_VAR 0 5
62461: PUSH
62462: LD_VAR 0 1
62466: PUSH
62467: LD_VAR 0 2
62471: PUSH
62472: LD_INT 4
62474: MINUS
62475: PUSH
62476: LD_INT 3
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: PUSH
62484: LD_VAR 0 1
62488: PUSH
62489: LD_INT 3
62491: MINUS
62492: PUSH
62493: LD_VAR 0 2
62497: PUSH
62498: LD_INT 3
62500: MINUS
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: PUSH
62510: LD_VAR 0 1
62514: PUSH
62515: LD_INT 4
62517: MINUS
62518: PUSH
62519: LD_VAR 0 2
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: PUSH
62532: LD_VAR 0 1
62536: PUSH
62537: LD_VAR 0 2
62541: PUSH
62542: LD_INT 3
62544: PLUS
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: PUSH
62554: LD_VAR 0 1
62558: PUSH
62559: LD_INT 4
62561: PLUS
62562: PUSH
62563: LD_VAR 0 2
62567: PUSH
62568: LD_INT 4
62570: PLUS
62571: PUSH
62572: LD_INT 5
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// end ; 2 :
62587: GO 63146
62589: LD_INT 2
62591: DOUBLE
62592: EQUAL
62593: IFTRUE 62597
62595: GO 62726
62597: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62598: LD_ADDR_VAR 0 5
62602: PUSH
62603: LD_VAR 0 1
62607: PUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_INT 3
62615: MINUS
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: PUSH
62625: LD_VAR 0 1
62629: PUSH
62630: LD_INT 4
62632: PLUS
62633: PUSH
62634: LD_VAR 0 2
62638: PUSH
62639: LD_INT 4
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: PUSH
62647: LD_VAR 0 1
62651: PUSH
62652: LD_VAR 0 2
62656: PUSH
62657: LD_INT 4
62659: PLUS
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: PUSH
62669: LD_VAR 0 1
62673: PUSH
62674: LD_INT 3
62676: MINUS
62677: PUSH
62678: LD_VAR 0 2
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: PUSH
62691: LD_VAR 0 1
62695: PUSH
62696: LD_INT 4
62698: MINUS
62699: PUSH
62700: LD_VAR 0 2
62704: PUSH
62705: LD_INT 4
62707: MINUS
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: ST_TO_ADDR
// end ; 3 :
62724: GO 63146
62726: LD_INT 3
62728: DOUBLE
62729: EQUAL
62730: IFTRUE 62734
62732: GO 62867
62734: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62735: LD_ADDR_VAR 0 5
62739: PUSH
62740: LD_VAR 0 1
62744: PUSH
62745: LD_INT 3
62747: PLUS
62748: PUSH
62749: LD_VAR 0 2
62753: PUSH
62754: LD_INT 4
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_INT 4
62769: PLUS
62770: PUSH
62771: LD_VAR 0 2
62775: PUSH
62776: LD_INT 4
62778: PLUS
62779: PUSH
62780: LD_INT 5
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: LIST
62787: PUSH
62788: LD_VAR 0 1
62792: PUSH
62793: LD_INT 4
62795: MINUS
62796: PUSH
62797: LD_VAR 0 2
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: LD_VAR 0 1
62814: PUSH
62815: LD_VAR 0 2
62819: PUSH
62820: LD_INT 4
62822: MINUS
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: PUSH
62832: LD_VAR 0 1
62836: PUSH
62837: LD_INT 3
62839: MINUS
62840: PUSH
62841: LD_VAR 0 2
62845: PUSH
62846: LD_INT 3
62848: MINUS
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// end ; 4 :
62865: GO 63146
62867: LD_INT 4
62869: DOUBLE
62870: EQUAL
62871: IFTRUE 62875
62873: GO 63008
62875: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62876: LD_ADDR_VAR 0 5
62880: PUSH
62881: LD_VAR 0 1
62885: PUSH
62886: LD_VAR 0 2
62890: PUSH
62891: LD_INT 4
62893: PLUS
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: PUSH
62903: LD_VAR 0 1
62907: PUSH
62908: LD_INT 3
62910: PLUS
62911: PUSH
62912: LD_VAR 0 2
62916: PUSH
62917: LD_INT 3
62919: PLUS
62920: PUSH
62921: LD_INT 5
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: PUSH
62929: LD_VAR 0 1
62933: PUSH
62934: LD_INT 4
62936: PLUS
62937: PUSH
62938: LD_VAR 0 2
62942: PUSH
62943: LD_INT 4
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: LIST
62950: PUSH
62951: LD_VAR 0 1
62955: PUSH
62956: LD_VAR 0 2
62960: PUSH
62961: LD_INT 3
62963: MINUS
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: PUSH
62973: LD_VAR 0 1
62977: PUSH
62978: LD_INT 4
62980: MINUS
62981: PUSH
62982: LD_VAR 0 2
62986: PUSH
62987: LD_INT 4
62989: MINUS
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: ST_TO_ADDR
// end ; 5 :
63006: GO 63146
63008: LD_INT 5
63010: DOUBLE
63011: EQUAL
63012: IFTRUE 63016
63014: GO 63145
63016: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63017: LD_ADDR_VAR 0 5
63021: PUSH
63022: LD_VAR 0 1
63026: PUSH
63027: LD_INT 4
63029: MINUS
63030: PUSH
63031: LD_VAR 0 2
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: LIST
63043: PUSH
63044: LD_VAR 0 1
63048: PUSH
63049: LD_VAR 0 2
63053: PUSH
63054: LD_INT 4
63056: MINUS
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: PUSH
63066: LD_VAR 0 1
63070: PUSH
63071: LD_INT 4
63073: PLUS
63074: PUSH
63075: LD_VAR 0 2
63079: PUSH
63080: LD_INT 4
63082: PLUS
63083: PUSH
63084: LD_INT 5
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: PUSH
63092: LD_VAR 0 1
63096: PUSH
63097: LD_INT 3
63099: PLUS
63100: PUSH
63101: LD_VAR 0 2
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: PUSH
63114: LD_VAR 0 1
63118: PUSH
63119: LD_VAR 0 2
63123: PUSH
63124: LD_INT 3
63126: PLUS
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: ST_TO_ADDR
// end ; end ;
63143: GO 63146
63145: POP
// result := list ;
63146: LD_ADDR_VAR 0 4
63150: PUSH
63151: LD_VAR 0 5
63155: ST_TO_ADDR
// end ;
63156: LD_VAR 0 4
63160: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63161: LD_INT 0
63163: PPUSH
63164: PPUSH
63165: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63166: LD_VAR 0 1
63170: NOT
63171: PUSH
63172: LD_VAR 0 2
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: LD_INT 4
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: IN
63195: NOT
63196: OR
63197: IFFALSE 63201
// exit ;
63199: GO 63293
// tmp := [ ] ;
63201: LD_ADDR_VAR 0 5
63205: PUSH
63206: EMPTY
63207: ST_TO_ADDR
// for i in units do
63208: LD_ADDR_VAR 0 4
63212: PUSH
63213: LD_VAR 0 1
63217: PUSH
63218: FOR_IN
63219: IFFALSE 63262
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63221: LD_ADDR_VAR 0 5
63225: PUSH
63226: LD_VAR 0 5
63230: PPUSH
63231: LD_VAR 0 5
63235: PUSH
63236: LD_INT 1
63238: PLUS
63239: PPUSH
63240: LD_VAR 0 4
63244: PPUSH
63245: LD_VAR 0 2
63249: PPUSH
63250: CALL_OW 259
63254: PPUSH
63255: CALL_OW 2
63259: ST_TO_ADDR
63260: GO 63218
63262: POP
63263: POP
// if not tmp then
63264: LD_VAR 0 5
63268: NOT
63269: IFFALSE 63273
// exit ;
63271: GO 63293
// result := SortListByListDesc ( units , tmp ) ;
63273: LD_ADDR_VAR 0 3
63277: PUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: LD_VAR 0 5
63287: PPUSH
63288: CALL_OW 77
63292: ST_TO_ADDR
// end ;
63293: LD_VAR 0 3
63297: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63298: LD_INT 0
63300: PPUSH
63301: PPUSH
63302: PPUSH
// result := false ;
63303: LD_ADDR_VAR 0 3
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// x := GetX ( building ) ;
63311: LD_ADDR_VAR 0 4
63315: PUSH
63316: LD_VAR 0 2
63320: PPUSH
63321: CALL_OW 250
63325: ST_TO_ADDR
// y := GetY ( building ) ;
63326: LD_ADDR_VAR 0 5
63330: PUSH
63331: LD_VAR 0 2
63335: PPUSH
63336: CALL_OW 251
63340: ST_TO_ADDR
// if not building or not x or not y then
63341: LD_VAR 0 2
63345: NOT
63346: PUSH
63347: LD_VAR 0 4
63351: NOT
63352: OR
63353: PUSH
63354: LD_VAR 0 5
63358: NOT
63359: OR
63360: IFFALSE 63364
// exit ;
63362: GO 63456
// if GetTaskList ( unit ) then
63364: LD_VAR 0 1
63368: PPUSH
63369: CALL_OW 437
63373: IFFALSE 63456
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63375: LD_STRING e
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: CALL_OW 437
63387: PUSH
63388: LD_INT 1
63390: ARRAY
63391: PUSH
63392: LD_INT 1
63394: ARRAY
63395: EQUAL
63396: PUSH
63397: LD_VAR 0 4
63401: PUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 437
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PUSH
63416: LD_INT 2
63418: ARRAY
63419: EQUAL
63420: AND
63421: PUSH
63422: LD_VAR 0 5
63426: PUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: CALL_OW 437
63436: PUSH
63437: LD_INT 1
63439: ARRAY
63440: PUSH
63441: LD_INT 3
63443: ARRAY
63444: EQUAL
63445: AND
63446: IFFALSE 63456
// result := true end ;
63448: LD_ADDR_VAR 0 3
63452: PUSH
63453: LD_INT 1
63455: ST_TO_ADDR
// end ;
63456: LD_VAR 0 3
63460: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63461: LD_INT 0
63463: PPUSH
// result := false ;
63464: LD_ADDR_VAR 0 4
63468: PUSH
63469: LD_INT 0
63471: ST_TO_ADDR
// if GetTaskList ( unit ) then
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 437
63481: IFFALSE 63564
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63483: LD_STRING M
63485: PUSH
63486: LD_VAR 0 1
63490: PPUSH
63491: CALL_OW 437
63495: PUSH
63496: LD_INT 1
63498: ARRAY
63499: PUSH
63500: LD_INT 1
63502: ARRAY
63503: EQUAL
63504: PUSH
63505: LD_VAR 0 2
63509: PUSH
63510: LD_VAR 0 1
63514: PPUSH
63515: CALL_OW 437
63519: PUSH
63520: LD_INT 1
63522: ARRAY
63523: PUSH
63524: LD_INT 2
63526: ARRAY
63527: EQUAL
63528: AND
63529: PUSH
63530: LD_VAR 0 3
63534: PUSH
63535: LD_VAR 0 1
63539: PPUSH
63540: CALL_OW 437
63544: PUSH
63545: LD_INT 1
63547: ARRAY
63548: PUSH
63549: LD_INT 3
63551: ARRAY
63552: EQUAL
63553: AND
63554: IFFALSE 63564
// result := true ;
63556: LD_ADDR_VAR 0 4
63560: PUSH
63561: LD_INT 1
63563: ST_TO_ADDR
// end ; end ;
63564: LD_VAR 0 4
63568: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63569: LD_INT 0
63571: PPUSH
63572: PPUSH
63573: PPUSH
63574: PPUSH
// if not unit or not area then
63575: LD_VAR 0 1
63579: NOT
63580: PUSH
63581: LD_VAR 0 2
63585: NOT
63586: OR
63587: IFFALSE 63591
// exit ;
63589: GO 63755
// tmp := AreaToList ( area , i ) ;
63591: LD_ADDR_VAR 0 6
63595: PUSH
63596: LD_VAR 0 2
63600: PPUSH
63601: LD_VAR 0 5
63605: PPUSH
63606: CALL_OW 517
63610: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63611: LD_ADDR_VAR 0 5
63615: PUSH
63616: DOUBLE
63617: LD_INT 1
63619: DEC
63620: ST_TO_ADDR
63621: LD_VAR 0 6
63625: PUSH
63626: LD_INT 1
63628: ARRAY
63629: PUSH
63630: FOR_TO
63631: IFFALSE 63753
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63633: LD_ADDR_VAR 0 7
63637: PUSH
63638: LD_VAR 0 6
63642: PUSH
63643: LD_INT 1
63645: ARRAY
63646: PUSH
63647: LD_VAR 0 5
63651: ARRAY
63652: PUSH
63653: LD_VAR 0 6
63657: PUSH
63658: LD_INT 2
63660: ARRAY
63661: PUSH
63662: LD_VAR 0 5
63666: ARRAY
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63672: LD_VAR 0 7
63676: PUSH
63677: LD_INT 1
63679: ARRAY
63680: PPUSH
63681: LD_VAR 0 7
63685: PUSH
63686: LD_INT 2
63688: ARRAY
63689: PPUSH
63690: CALL_OW 428
63694: PUSH
63695: LD_INT 0
63697: EQUAL
63698: IFFALSE 63751
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63700: LD_VAR 0 1
63704: PPUSH
63705: LD_VAR 0 7
63709: PUSH
63710: LD_INT 1
63712: ARRAY
63713: PPUSH
63714: LD_VAR 0 7
63718: PUSH
63719: LD_INT 2
63721: ARRAY
63722: PPUSH
63723: LD_VAR 0 3
63727: PPUSH
63728: CALL_OW 48
// result := IsPlaced ( unit ) ;
63732: LD_ADDR_VAR 0 4
63736: PUSH
63737: LD_VAR 0 1
63741: PPUSH
63742: CALL_OW 305
63746: ST_TO_ADDR
// exit ;
63747: POP
63748: POP
63749: GO 63755
// end ; end ;
63751: GO 63630
63753: POP
63754: POP
// end ;
63755: LD_VAR 0 4
63759: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63760: LD_INT 0
63762: PPUSH
63763: PPUSH
63764: PPUSH
// if not side or side > 8 then
63765: LD_VAR 0 1
63769: NOT
63770: PUSH
63771: LD_VAR 0 1
63775: PUSH
63776: LD_INT 8
63778: GREATER
63779: OR
63780: IFFALSE 63784
// exit ;
63782: GO 63971
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63784: LD_ADDR_VAR 0 4
63788: PUSH
63789: LD_INT 22
63791: PUSH
63792: LD_VAR 0 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 21
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PPUSH
63815: CALL_OW 69
63819: ST_TO_ADDR
// if not tmp then
63820: LD_VAR 0 4
63824: NOT
63825: IFFALSE 63829
// exit ;
63827: GO 63971
// enable_addtolog := true ;
63829: LD_ADDR_OWVAR 81
63833: PUSH
63834: LD_INT 1
63836: ST_TO_ADDR
// AddToLog ( [ ) ;
63837: LD_STRING [
63839: PPUSH
63840: CALL_OW 561
// for i in tmp do
63844: LD_ADDR_VAR 0 3
63848: PUSH
63849: LD_VAR 0 4
63853: PUSH
63854: FOR_IN
63855: IFFALSE 63962
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63857: LD_STRING [
63859: PUSH
63860: LD_VAR 0 3
63864: PPUSH
63865: CALL_OW 266
63869: STR
63870: PUSH
63871: LD_STRING , 
63873: STR
63874: PUSH
63875: LD_VAR 0 3
63879: PPUSH
63880: CALL_OW 250
63884: STR
63885: PUSH
63886: LD_STRING , 
63888: STR
63889: PUSH
63890: LD_VAR 0 3
63894: PPUSH
63895: CALL_OW 251
63899: STR
63900: PUSH
63901: LD_STRING , 
63903: STR
63904: PUSH
63905: LD_VAR 0 3
63909: PPUSH
63910: CALL_OW 254
63914: STR
63915: PUSH
63916: LD_STRING , 
63918: STR
63919: PUSH
63920: LD_VAR 0 3
63924: PPUSH
63925: LD_INT 1
63927: PPUSH
63928: CALL_OW 268
63932: STR
63933: PUSH
63934: LD_STRING , 
63936: STR
63937: PUSH
63938: LD_VAR 0 3
63942: PPUSH
63943: LD_INT 2
63945: PPUSH
63946: CALL_OW 268
63950: STR
63951: PUSH
63952: LD_STRING ],
63954: STR
63955: PPUSH
63956: CALL_OW 561
// end ;
63960: GO 63854
63962: POP
63963: POP
// AddToLog ( ]; ) ;
63964: LD_STRING ];
63966: PPUSH
63967: CALL_OW 561
// end ;
63971: LD_VAR 0 2
63975: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63976: LD_INT 0
63978: PPUSH
63979: PPUSH
63980: PPUSH
63981: PPUSH
63982: PPUSH
// if not area or not rate or not max then
63983: LD_VAR 0 1
63987: NOT
63988: PUSH
63989: LD_VAR 0 2
63993: NOT
63994: OR
63995: PUSH
63996: LD_VAR 0 4
64000: NOT
64001: OR
64002: IFFALSE 64006
// exit ;
64004: GO 64198
// while 1 do
64006: LD_INT 1
64008: IFFALSE 64198
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64010: LD_ADDR_VAR 0 9
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_INT 1
64022: PPUSH
64023: CALL_OW 287
64027: PUSH
64028: LD_INT 10
64030: MUL
64031: ST_TO_ADDR
// r := rate / 10 ;
64032: LD_ADDR_VAR 0 7
64036: PUSH
64037: LD_VAR 0 2
64041: PUSH
64042: LD_INT 10
64044: DIVREAL
64045: ST_TO_ADDR
// time := 1 1$00 ;
64046: LD_ADDR_VAR 0 8
64050: PUSH
64051: LD_INT 2100
64053: ST_TO_ADDR
// if amount < min then
64054: LD_VAR 0 9
64058: PUSH
64059: LD_VAR 0 3
64063: LESS
64064: IFFALSE 64082
// r := r * 2 else
64066: LD_ADDR_VAR 0 7
64070: PUSH
64071: LD_VAR 0 7
64075: PUSH
64076: LD_INT 2
64078: MUL
64079: ST_TO_ADDR
64080: GO 64108
// if amount > max then
64082: LD_VAR 0 9
64086: PUSH
64087: LD_VAR 0 4
64091: GREATER
64092: IFFALSE 64108
// r := r / 2 ;
64094: LD_ADDR_VAR 0 7
64098: PUSH
64099: LD_VAR 0 7
64103: PUSH
64104: LD_INT 2
64106: DIVREAL
64107: ST_TO_ADDR
// time := time / r ;
64108: LD_ADDR_VAR 0 8
64112: PUSH
64113: LD_VAR 0 8
64117: PUSH
64118: LD_VAR 0 7
64122: DIVREAL
64123: ST_TO_ADDR
// if time < 0 then
64124: LD_VAR 0 8
64128: PUSH
64129: LD_INT 0
64131: LESS
64132: IFFALSE 64149
// time := time * - 1 ;
64134: LD_ADDR_VAR 0 8
64138: PUSH
64139: LD_VAR 0 8
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: MUL
64148: ST_TO_ADDR
// wait ( time ) ;
64149: LD_VAR 0 8
64153: PPUSH
64154: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64158: LD_INT 35
64160: PPUSH
64161: LD_INT 875
64163: PPUSH
64164: CALL_OW 12
64168: PPUSH
64169: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64173: LD_INT 1
64175: PPUSH
64176: LD_INT 5
64178: PPUSH
64179: CALL_OW 12
64183: PPUSH
64184: LD_VAR 0 1
64188: PPUSH
64189: LD_INT 1
64191: PPUSH
64192: CALL_OW 55
// end ;
64196: GO 64006
// end ;
64198: LD_VAR 0 5
64202: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64203: LD_INT 0
64205: PPUSH
64206: PPUSH
64207: PPUSH
64208: PPUSH
64209: PPUSH
64210: PPUSH
64211: PPUSH
64212: PPUSH
// if not turrets or not factories then
64213: LD_VAR 0 1
64217: NOT
64218: PUSH
64219: LD_VAR 0 2
64223: NOT
64224: OR
64225: IFFALSE 64229
// exit ;
64227: GO 64536
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64229: LD_ADDR_VAR 0 10
64233: PUSH
64234: LD_INT 5
64236: PUSH
64237: LD_INT 6
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: LD_INT 4
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: LD_INT 5
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 24
64271: PUSH
64272: LD_INT 25
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 23
64281: PUSH
64282: LD_INT 27
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 42
64295: PUSH
64296: LD_INT 43
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 44
64305: PUSH
64306: LD_INT 46
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 45
64315: PUSH
64316: LD_INT 47
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// result := [ ] ;
64333: LD_ADDR_VAR 0 3
64337: PUSH
64338: EMPTY
64339: ST_TO_ADDR
// for i in turrets do
64340: LD_ADDR_VAR 0 4
64344: PUSH
64345: LD_VAR 0 1
64349: PUSH
64350: FOR_IN
64351: IFFALSE 64534
// begin nat := GetNation ( i ) ;
64353: LD_ADDR_VAR 0 7
64357: PUSH
64358: LD_VAR 0 4
64362: PPUSH
64363: CALL_OW 248
64367: ST_TO_ADDR
// weapon := 0 ;
64368: LD_ADDR_VAR 0 8
64372: PUSH
64373: LD_INT 0
64375: ST_TO_ADDR
// if not nat then
64376: LD_VAR 0 7
64380: NOT
64381: IFFALSE 64385
// continue ;
64383: GO 64350
// for j in list [ nat ] do
64385: LD_ADDR_VAR 0 5
64389: PUSH
64390: LD_VAR 0 10
64394: PUSH
64395: LD_VAR 0 7
64399: ARRAY
64400: PUSH
64401: FOR_IN
64402: IFFALSE 64443
// if GetBWeapon ( i ) = j [ 1 ] then
64404: LD_VAR 0 4
64408: PPUSH
64409: CALL_OW 269
64413: PUSH
64414: LD_VAR 0 5
64418: PUSH
64419: LD_INT 1
64421: ARRAY
64422: EQUAL
64423: IFFALSE 64441
// begin weapon := j [ 2 ] ;
64425: LD_ADDR_VAR 0 8
64429: PUSH
64430: LD_VAR 0 5
64434: PUSH
64435: LD_INT 2
64437: ARRAY
64438: ST_TO_ADDR
// break ;
64439: GO 64443
// end ;
64441: GO 64401
64443: POP
64444: POP
// if not weapon then
64445: LD_VAR 0 8
64449: NOT
64450: IFFALSE 64454
// continue ;
64452: GO 64350
// for k in factories do
64454: LD_ADDR_VAR 0 6
64458: PUSH
64459: LD_VAR 0 2
64463: PUSH
64464: FOR_IN
64465: IFFALSE 64530
// begin weapons := AvailableWeaponList ( k ) ;
64467: LD_ADDR_VAR 0 9
64471: PUSH
64472: LD_VAR 0 6
64476: PPUSH
64477: CALL_OW 478
64481: ST_TO_ADDR
// if not weapons then
64482: LD_VAR 0 9
64486: NOT
64487: IFFALSE 64491
// continue ;
64489: GO 64464
// if weapon in weapons then
64491: LD_VAR 0 8
64495: PUSH
64496: LD_VAR 0 9
64500: IN
64501: IFFALSE 64528
// begin result := [ i , weapon ] ;
64503: LD_ADDR_VAR 0 3
64507: PUSH
64508: LD_VAR 0 4
64512: PUSH
64513: LD_VAR 0 8
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: ST_TO_ADDR
// exit ;
64522: POP
64523: POP
64524: POP
64525: POP
64526: GO 64536
// end ; end ;
64528: GO 64464
64530: POP
64531: POP
// end ;
64532: GO 64350
64534: POP
64535: POP
// end ;
64536: LD_VAR 0 3
64540: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64541: LD_INT 0
64543: PPUSH
// if not side or side > 8 then
64544: LD_VAR 0 3
64548: NOT
64549: PUSH
64550: LD_VAR 0 3
64554: PUSH
64555: LD_INT 8
64557: GREATER
64558: OR
64559: IFFALSE 64563
// exit ;
64561: GO 64622
// if not range then
64563: LD_VAR 0 4
64567: NOT
64568: IFFALSE 64579
// range := - 12 ;
64570: LD_ADDR_VAR 0 4
64574: PUSH
64575: LD_INT 12
64577: NEG
64578: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64579: LD_VAR 0 1
64583: PPUSH
64584: LD_VAR 0 2
64588: PPUSH
64589: LD_VAR 0 3
64593: PPUSH
64594: LD_VAR 0 4
64598: PPUSH
64599: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64603: LD_VAR 0 1
64607: PPUSH
64608: LD_VAR 0 2
64612: PPUSH
64613: LD_VAR 0 3
64617: PPUSH
64618: CALL_OW 331
// end ;
64622: LD_VAR 0 5
64626: RET
// export function Video ( mode ) ; begin
64627: LD_INT 0
64629: PPUSH
// ingame_video = mode ;
64630: LD_ADDR_OWVAR 52
64634: PUSH
64635: LD_VAR 0 1
64639: ST_TO_ADDR
// interface_hidden = mode ;
64640: LD_ADDR_OWVAR 54
64644: PUSH
64645: LD_VAR 0 1
64649: ST_TO_ADDR
// end ;
64650: LD_VAR 0 2
64654: RET
// export function Join ( array , element ) ; begin
64655: LD_INT 0
64657: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64658: LD_ADDR_VAR 0 3
64662: PUSH
64663: LD_VAR 0 1
64667: PPUSH
64668: LD_VAR 0 1
64672: PUSH
64673: LD_INT 1
64675: PLUS
64676: PPUSH
64677: LD_VAR 0 2
64681: PPUSH
64682: CALL_OW 1
64686: ST_TO_ADDR
// end ;
64687: LD_VAR 0 3
64691: RET
// export function JoinUnion ( array , element ) ; begin
64692: LD_INT 0
64694: PPUSH
// result := array union element ;
64695: LD_ADDR_VAR 0 3
64699: PUSH
64700: LD_VAR 0 1
64704: PUSH
64705: LD_VAR 0 2
64709: UNION
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 3
64715: RET
// export function GetBehemoths ( side ) ; begin
64716: LD_INT 0
64718: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64719: LD_ADDR_VAR 0 2
64723: PUSH
64724: LD_INT 22
64726: PUSH
64727: LD_VAR 0 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 31
64738: PUSH
64739: LD_INT 25
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PPUSH
64750: CALL_OW 69
64754: ST_TO_ADDR
// end ;
64755: LD_VAR 0 2
64759: RET
// export function Shuffle ( array ) ; var i , index ; begin
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
64764: PPUSH
// result := [ ] ;
64765: LD_ADDR_VAR 0 2
64769: PUSH
64770: EMPTY
64771: ST_TO_ADDR
// if not array then
64772: LD_VAR 0 1
64776: NOT
64777: IFFALSE 64781
// exit ;
64779: GO 64880
// Randomize ;
64781: CALL_OW 10
// for i = array downto 1 do
64785: LD_ADDR_VAR 0 3
64789: PUSH
64790: DOUBLE
64791: LD_VAR 0 1
64795: INC
64796: ST_TO_ADDR
64797: LD_INT 1
64799: PUSH
64800: FOR_DOWNTO
64801: IFFALSE 64878
// begin index := rand ( 1 , array ) ;
64803: LD_ADDR_VAR 0 4
64807: PUSH
64808: LD_INT 1
64810: PPUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 12
64820: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64821: LD_ADDR_VAR 0 2
64825: PUSH
64826: LD_VAR 0 2
64830: PPUSH
64831: LD_VAR 0 2
64835: PUSH
64836: LD_INT 1
64838: PLUS
64839: PPUSH
64840: LD_VAR 0 1
64844: PUSH
64845: LD_VAR 0 4
64849: ARRAY
64850: PPUSH
64851: CALL_OW 2
64855: ST_TO_ADDR
// array := Delete ( array , index ) ;
64856: LD_ADDR_VAR 0 1
64860: PUSH
64861: LD_VAR 0 1
64865: PPUSH
64866: LD_VAR 0 4
64870: PPUSH
64871: CALL_OW 3
64875: ST_TO_ADDR
// end ;
64876: GO 64800
64878: POP
64879: POP
// end ;
64880: LD_VAR 0 2
64884: RET
// export function GetBaseMaterials ( base ) ; begin
64885: LD_INT 0
64887: PPUSH
// result := [ 0 , 0 , 0 ] ;
64888: LD_ADDR_VAR 0 2
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: LIST
64906: ST_TO_ADDR
// if not base then
64907: LD_VAR 0 1
64911: NOT
64912: IFFALSE 64916
// exit ;
64914: GO 64965
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64916: LD_ADDR_VAR 0 2
64920: PUSH
64921: LD_VAR 0 1
64925: PPUSH
64926: LD_INT 1
64928: PPUSH
64929: CALL_OW 275
64933: PUSH
64934: LD_VAR 0 1
64938: PPUSH
64939: LD_INT 2
64941: PPUSH
64942: CALL_OW 275
64946: PUSH
64947: LD_VAR 0 1
64951: PPUSH
64952: LD_INT 3
64954: PPUSH
64955: CALL_OW 275
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: ST_TO_ADDR
// end ;
64965: LD_VAR 0 2
64969: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64970: LD_INT 0
64972: PPUSH
64973: PPUSH
// result := array ;
64974: LD_ADDR_VAR 0 3
64978: PUSH
64979: LD_VAR 0 1
64983: ST_TO_ADDR
// if size > 0 then
64984: LD_VAR 0 2
64988: PUSH
64989: LD_INT 0
64991: GREATER
64992: IFFALSE 65038
// for i := array downto size do
64994: LD_ADDR_VAR 0 4
64998: PUSH
64999: DOUBLE
65000: LD_VAR 0 1
65004: INC
65005: ST_TO_ADDR
65006: LD_VAR 0 2
65010: PUSH
65011: FOR_DOWNTO
65012: IFFALSE 65036
// result := Delete ( result , result ) ;
65014: LD_ADDR_VAR 0 3
65018: PUSH
65019: LD_VAR 0 3
65023: PPUSH
65024: LD_VAR 0 3
65028: PPUSH
65029: CALL_OW 3
65033: ST_TO_ADDR
65034: GO 65011
65036: POP
65037: POP
// end ;
65038: LD_VAR 0 3
65042: RET
// export function ComExit ( unit ) ; var tmp ; begin
65043: LD_INT 0
65045: PPUSH
65046: PPUSH
// if not IsInUnit ( unit ) then
65047: LD_VAR 0 1
65051: PPUSH
65052: CALL_OW 310
65056: NOT
65057: IFFALSE 65061
// exit ;
65059: GO 65121
// tmp := IsInUnit ( unit ) ;
65061: LD_ADDR_VAR 0 3
65065: PUSH
65066: LD_VAR 0 1
65070: PPUSH
65071: CALL_OW 310
65075: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65076: LD_VAR 0 3
65080: PPUSH
65081: CALL_OW 247
65085: PUSH
65086: LD_INT 2
65088: EQUAL
65089: IFFALSE 65102
// ComExitVehicle ( unit ) else
65091: LD_VAR 0 1
65095: PPUSH
65096: CALL_OW 121
65100: GO 65111
// ComExitBuilding ( unit ) ;
65102: LD_VAR 0 1
65106: PPUSH
65107: CALL_OW 122
// result := tmp ;
65111: LD_ADDR_VAR 0 2
65115: PUSH
65116: LD_VAR 0 3
65120: ST_TO_ADDR
// end ;
65121: LD_VAR 0 2
65125: RET
// export function ComExitAll ( units ) ; var i ; begin
65126: LD_INT 0
65128: PPUSH
65129: PPUSH
// if not units then
65130: LD_VAR 0 1
65134: NOT
65135: IFFALSE 65139
// exit ;
65137: GO 65165
// for i in units do
65139: LD_ADDR_VAR 0 3
65143: PUSH
65144: LD_VAR 0 1
65148: PUSH
65149: FOR_IN
65150: IFFALSE 65163
// ComExit ( i ) ;
65152: LD_VAR 0 3
65156: PPUSH
65157: CALL 65043 0 1
65161: GO 65149
65163: POP
65164: POP
// end ;
65165: LD_VAR 0 2
65169: RET
// export function ResetHc ; begin
65170: LD_INT 0
65172: PPUSH
// InitHc ;
65173: CALL_OW 19
// hc_importance := 0 ;
65177: LD_ADDR_OWVAR 32
65181: PUSH
65182: LD_INT 0
65184: ST_TO_ADDR
// end ;
65185: LD_VAR 0 1
65189: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65190: LD_INT 0
65192: PPUSH
65193: PPUSH
65194: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65195: LD_ADDR_VAR 0 6
65199: PUSH
65200: LD_VAR 0 1
65204: PUSH
65205: LD_VAR 0 3
65209: PLUS
65210: PUSH
65211: LD_INT 2
65213: DIV
65214: ST_TO_ADDR
// if _x < 0 then
65215: LD_VAR 0 6
65219: PUSH
65220: LD_INT 0
65222: LESS
65223: IFFALSE 65240
// _x := _x * - 1 ;
65225: LD_ADDR_VAR 0 6
65229: PUSH
65230: LD_VAR 0 6
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: MUL
65239: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65240: LD_ADDR_VAR 0 7
65244: PUSH
65245: LD_VAR 0 2
65249: PUSH
65250: LD_VAR 0 4
65254: PLUS
65255: PUSH
65256: LD_INT 2
65258: DIV
65259: ST_TO_ADDR
// if _y < 0 then
65260: LD_VAR 0 7
65264: PUSH
65265: LD_INT 0
65267: LESS
65268: IFFALSE 65285
// _y := _y * - 1 ;
65270: LD_ADDR_VAR 0 7
65274: PUSH
65275: LD_VAR 0 7
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: MUL
65284: ST_TO_ADDR
// result := [ _x , _y ] ;
65285: LD_ADDR_VAR 0 5
65289: PUSH
65290: LD_VAR 0 6
65294: PUSH
65295: LD_VAR 0 7
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: ST_TO_ADDR
// end ;
65304: LD_VAR 0 5
65308: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65309: LD_INT 0
65311: PPUSH
65312: PPUSH
65313: PPUSH
65314: PPUSH
// task := GetTaskList ( unit ) ;
65315: LD_ADDR_VAR 0 7
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: CALL_OW 437
65329: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65330: LD_VAR 0 7
65334: NOT
65335: PUSH
65336: LD_VAR 0 1
65340: PPUSH
65341: LD_VAR 0 2
65345: PPUSH
65346: CALL_OW 308
65350: NOT
65351: AND
65352: IFFALSE 65356
// exit ;
65354: GO 65474
// if IsInArea ( unit , area ) then
65356: LD_VAR 0 1
65360: PPUSH
65361: LD_VAR 0 2
65365: PPUSH
65366: CALL_OW 308
65370: IFFALSE 65388
// begin ComMoveToArea ( unit , goAway ) ;
65372: LD_VAR 0 1
65376: PPUSH
65377: LD_VAR 0 3
65381: PPUSH
65382: CALL_OW 113
// exit ;
65386: GO 65474
// end ; if task [ 1 ] [ 1 ] <> M then
65388: LD_VAR 0 7
65392: PUSH
65393: LD_INT 1
65395: ARRAY
65396: PUSH
65397: LD_INT 1
65399: ARRAY
65400: PUSH
65401: LD_STRING M
65403: NONEQUAL
65404: IFFALSE 65408
// exit ;
65406: GO 65474
// x := task [ 1 ] [ 2 ] ;
65408: LD_ADDR_VAR 0 5
65412: PUSH
65413: LD_VAR 0 7
65417: PUSH
65418: LD_INT 1
65420: ARRAY
65421: PUSH
65422: LD_INT 2
65424: ARRAY
65425: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65426: LD_ADDR_VAR 0 6
65430: PUSH
65431: LD_VAR 0 7
65435: PUSH
65436: LD_INT 1
65438: ARRAY
65439: PUSH
65440: LD_INT 3
65442: ARRAY
65443: ST_TO_ADDR
// if InArea ( x , y , area ) then
65444: LD_VAR 0 5
65448: PPUSH
65449: LD_VAR 0 6
65453: PPUSH
65454: LD_VAR 0 2
65458: PPUSH
65459: CALL_OW 309
65463: IFFALSE 65474
// ComStop ( unit ) ;
65465: LD_VAR 0 1
65469: PPUSH
65470: CALL_OW 141
// end ;
65474: LD_VAR 0 4
65478: RET
// export function Abs ( value ) ; begin
65479: LD_INT 0
65481: PPUSH
// result := value ;
65482: LD_ADDR_VAR 0 2
65486: PUSH
65487: LD_VAR 0 1
65491: ST_TO_ADDR
// if value < 0 then
65492: LD_VAR 0 1
65496: PUSH
65497: LD_INT 0
65499: LESS
65500: IFFALSE 65517
// result := value * - 1 ;
65502: LD_ADDR_VAR 0 2
65506: PUSH
65507: LD_VAR 0 1
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: MUL
65516: ST_TO_ADDR
// end ;
65517: LD_VAR 0 2
65521: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65522: LD_INT 0
65524: PPUSH
65525: PPUSH
65526: PPUSH
65527: PPUSH
65528: PPUSH
65529: PPUSH
65530: PPUSH
65531: PPUSH
// if not unit or not building then
65532: LD_VAR 0 1
65536: NOT
65537: PUSH
65538: LD_VAR 0 2
65542: NOT
65543: OR
65544: IFFALSE 65548
// exit ;
65546: GO 65774
// x := GetX ( building ) ;
65548: LD_ADDR_VAR 0 4
65552: PUSH
65553: LD_VAR 0 2
65557: PPUSH
65558: CALL_OW 250
65562: ST_TO_ADDR
// y := GetY ( building ) ;
65563: LD_ADDR_VAR 0 6
65567: PUSH
65568: LD_VAR 0 2
65572: PPUSH
65573: CALL_OW 251
65577: ST_TO_ADDR
// d := GetDir ( building ) ;
65578: LD_ADDR_VAR 0 8
65582: PUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: CALL_OW 254
65592: ST_TO_ADDR
// r := 4 ;
65593: LD_ADDR_VAR 0 9
65597: PUSH
65598: LD_INT 4
65600: ST_TO_ADDR
// for i := 1 to 5 do
65601: LD_ADDR_VAR 0 10
65605: PUSH
65606: DOUBLE
65607: LD_INT 1
65609: DEC
65610: ST_TO_ADDR
65611: LD_INT 5
65613: PUSH
65614: FOR_TO
65615: IFFALSE 65772
// begin _x := ShiftX ( x , d , r + i ) ;
65617: LD_ADDR_VAR 0 5
65621: PUSH
65622: LD_VAR 0 4
65626: PPUSH
65627: LD_VAR 0 8
65631: PPUSH
65632: LD_VAR 0 9
65636: PUSH
65637: LD_VAR 0 10
65641: PLUS
65642: PPUSH
65643: CALL_OW 272
65647: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65648: LD_ADDR_VAR 0 7
65652: PUSH
65653: LD_VAR 0 6
65657: PPUSH
65658: LD_VAR 0 8
65662: PPUSH
65663: LD_VAR 0 9
65667: PUSH
65668: LD_VAR 0 10
65672: PLUS
65673: PPUSH
65674: CALL_OW 273
65678: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65679: LD_VAR 0 5
65683: PPUSH
65684: LD_VAR 0 7
65688: PPUSH
65689: CALL_OW 488
65693: PUSH
65694: LD_VAR 0 5
65698: PPUSH
65699: LD_VAR 0 7
65703: PPUSH
65704: CALL_OW 428
65708: PPUSH
65709: CALL_OW 247
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: IN
65724: NOT
65725: AND
65726: IFFALSE 65770
// begin ComMoveXY ( unit , _x , _y ) ;
65728: LD_VAR 0 1
65732: PPUSH
65733: LD_VAR 0 5
65737: PPUSH
65738: LD_VAR 0 7
65742: PPUSH
65743: CALL_OW 111
// result := [ _x , _y ] ;
65747: LD_ADDR_VAR 0 3
65751: PUSH
65752: LD_VAR 0 5
65756: PUSH
65757: LD_VAR 0 7
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: ST_TO_ADDR
// exit ;
65766: POP
65767: POP
65768: GO 65774
// end ; end ;
65770: GO 65614
65772: POP
65773: POP
// end ;
65774: LD_VAR 0 3
65778: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65779: LD_INT 0
65781: PPUSH
65782: PPUSH
65783: PPUSH
// result := 0 ;
65784: LD_ADDR_VAR 0 3
65788: PUSH
65789: LD_INT 0
65791: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65792: LD_VAR 0 1
65796: PUSH
65797: LD_INT 0
65799: LESS
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_INT 8
65808: GREATER
65809: OR
65810: PUSH
65811: LD_VAR 0 2
65815: PUSH
65816: LD_INT 0
65818: LESS
65819: OR
65820: PUSH
65821: LD_VAR 0 2
65825: PUSH
65826: LD_INT 8
65828: GREATER
65829: OR
65830: IFFALSE 65834
// exit ;
65832: GO 65909
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65834: LD_ADDR_VAR 0 4
65838: PUSH
65839: LD_INT 22
65841: PUSH
65842: LD_VAR 0 2
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PPUSH
65851: CALL_OW 69
65855: PUSH
65856: FOR_IN
65857: IFFALSE 65907
// begin un := UnitShoot ( i ) ;
65859: LD_ADDR_VAR 0 5
65863: PUSH
65864: LD_VAR 0 4
65868: PPUSH
65869: CALL_OW 504
65873: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65874: LD_VAR 0 5
65878: PPUSH
65879: CALL_OW 255
65883: PUSH
65884: LD_VAR 0 1
65888: EQUAL
65889: IFFALSE 65905
// begin result := un ;
65891: LD_ADDR_VAR 0 3
65895: PUSH
65896: LD_VAR 0 5
65900: ST_TO_ADDR
// exit ;
65901: POP
65902: POP
65903: GO 65909
// end ; end ;
65905: GO 65856
65907: POP
65908: POP
// end ;
65909: LD_VAR 0 3
65913: RET
// export function GetCargoBay ( units ) ; begin
65914: LD_INT 0
65916: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65917: LD_ADDR_VAR 0 2
65921: PUSH
65922: LD_VAR 0 1
65926: PPUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 34
65932: PUSH
65933: LD_INT 12
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 34
65942: PUSH
65943: LD_INT 51
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 34
65952: PUSH
65953: LD_INT 32
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 34
65962: PUSH
65963: LD_EXP 97
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: PPUSH
65979: CALL_OW 72
65983: ST_TO_ADDR
// end ;
65984: LD_VAR 0 2
65988: RET
// export function Negate ( value ) ; begin
65989: LD_INT 0
65991: PPUSH
// result := not value ;
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: LD_VAR 0 1
66001: NOT
66002: ST_TO_ADDR
// end ;
66003: LD_VAR 0 2
66007: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66008: LD_INT 0
66010: PPUSH
// if x1 = x2 then
66011: LD_VAR 0 1
66015: PUSH
66016: LD_VAR 0 3
66020: EQUAL
66021: IFFALSE 66055
// begin if y1 > y2 then
66023: LD_VAR 0 2
66027: PUSH
66028: LD_VAR 0 4
66032: GREATER
66033: IFFALSE 66045
// result := 0 else
66035: LD_ADDR_VAR 0 5
66039: PUSH
66040: LD_INT 0
66042: ST_TO_ADDR
66043: GO 66053
// result := 3 ;
66045: LD_ADDR_VAR 0 5
66049: PUSH
66050: LD_INT 3
66052: ST_TO_ADDR
// exit ;
66053: GO 66141
// end ; if y1 = y2 then
66055: LD_VAR 0 2
66059: PUSH
66060: LD_VAR 0 4
66064: EQUAL
66065: IFFALSE 66099
// begin if x1 > x2 then
66067: LD_VAR 0 1
66071: PUSH
66072: LD_VAR 0 3
66076: GREATER
66077: IFFALSE 66089
// result := 1 else
66079: LD_ADDR_VAR 0 5
66083: PUSH
66084: LD_INT 1
66086: ST_TO_ADDR
66087: GO 66097
// result := 4 ;
66089: LD_ADDR_VAR 0 5
66093: PUSH
66094: LD_INT 4
66096: ST_TO_ADDR
// exit ;
66097: GO 66141
// end ; if x1 > x2 and y1 > y2 then
66099: LD_VAR 0 1
66103: PUSH
66104: LD_VAR 0 3
66108: GREATER
66109: PUSH
66110: LD_VAR 0 2
66114: PUSH
66115: LD_VAR 0 4
66119: GREATER
66120: AND
66121: IFFALSE 66133
// result := 2 else
66123: LD_ADDR_VAR 0 5
66127: PUSH
66128: LD_INT 2
66130: ST_TO_ADDR
66131: GO 66141
// result := 5 ;
66133: LD_ADDR_VAR 0 5
66137: PUSH
66138: LD_INT 5
66140: ST_TO_ADDR
// end ;
66141: LD_VAR 0 5
66145: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66146: LD_INT 0
66148: PPUSH
66149: PPUSH
// if not driver or not IsInUnit ( driver ) then
66150: LD_VAR 0 1
66154: NOT
66155: PUSH
66156: LD_VAR 0 1
66160: PPUSH
66161: CALL_OW 310
66165: NOT
66166: OR
66167: IFFALSE 66171
// exit ;
66169: GO 66261
// vehicle := IsInUnit ( driver ) ;
66171: LD_ADDR_VAR 0 3
66175: PUSH
66176: LD_VAR 0 1
66180: PPUSH
66181: CALL_OW 310
66185: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66186: LD_VAR 0 1
66190: PPUSH
66191: LD_STRING \
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: PUSH
66221: LD_STRING E
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_VAR 0 3
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PPUSH
66257: CALL_OW 446
// end ;
66261: LD_VAR 0 2
66265: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66266: LD_INT 0
66268: PPUSH
66269: PPUSH
// if not driver or not IsInUnit ( driver ) then
66270: LD_VAR 0 1
66274: NOT
66275: PUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 310
66285: NOT
66286: OR
66287: IFFALSE 66291
// exit ;
66289: GO 66381
// vehicle := IsInUnit ( driver ) ;
66291: LD_ADDR_VAR 0 3
66295: PUSH
66296: LD_VAR 0 1
66300: PPUSH
66301: CALL_OW 310
66305: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66306: LD_VAR 0 1
66310: PPUSH
66311: LD_STRING \
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: PUSH
66341: LD_STRING E
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_VAR 0 3
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PPUSH
66377: CALL_OW 447
// end ;
66381: LD_VAR 0 2
66385: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66386: LD_INT 0
66388: PPUSH
66389: PPUSH
66390: PPUSH
// tmp := [ ] ;
66391: LD_ADDR_VAR 0 5
66395: PUSH
66396: EMPTY
66397: ST_TO_ADDR
// for i in units do
66398: LD_ADDR_VAR 0 4
66402: PUSH
66403: LD_VAR 0 1
66407: PUSH
66408: FOR_IN
66409: IFFALSE 66447
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66411: LD_ADDR_VAR 0 5
66415: PUSH
66416: LD_VAR 0 5
66420: PPUSH
66421: LD_VAR 0 5
66425: PUSH
66426: LD_INT 1
66428: PLUS
66429: PPUSH
66430: LD_VAR 0 4
66434: PPUSH
66435: CALL_OW 256
66439: PPUSH
66440: CALL_OW 2
66444: ST_TO_ADDR
66445: GO 66408
66447: POP
66448: POP
// if not tmp then
66449: LD_VAR 0 5
66453: NOT
66454: IFFALSE 66458
// exit ;
66456: GO 66506
// if asc then
66458: LD_VAR 0 2
66462: IFFALSE 66486
// result := SortListByListAsc ( units , tmp ) else
66464: LD_ADDR_VAR 0 3
66468: PUSH
66469: LD_VAR 0 1
66473: PPUSH
66474: LD_VAR 0 5
66478: PPUSH
66479: CALL_OW 76
66483: ST_TO_ADDR
66484: GO 66506
// result := SortListByListDesc ( units , tmp ) ;
66486: LD_ADDR_VAR 0 3
66490: PUSH
66491: LD_VAR 0 1
66495: PPUSH
66496: LD_VAR 0 5
66500: PPUSH
66501: CALL_OW 77
66505: ST_TO_ADDR
// end ;
66506: LD_VAR 0 3
66510: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66511: LD_INT 0
66513: PPUSH
66514: PPUSH
// task := GetTaskList ( mech ) ;
66515: LD_ADDR_VAR 0 4
66519: PUSH
66520: LD_VAR 0 1
66524: PPUSH
66525: CALL_OW 437
66529: ST_TO_ADDR
// if not task then
66530: LD_VAR 0 4
66534: NOT
66535: IFFALSE 66539
// exit ;
66537: GO 66581
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66539: LD_ADDR_VAR 0 3
66543: PUSH
66544: LD_VAR 0 4
66548: PUSH
66549: LD_INT 1
66551: ARRAY
66552: PUSH
66553: LD_INT 1
66555: ARRAY
66556: PUSH
66557: LD_STRING r
66559: EQUAL
66560: PUSH
66561: LD_VAR 0 4
66565: PUSH
66566: LD_INT 1
66568: ARRAY
66569: PUSH
66570: LD_INT 4
66572: ARRAY
66573: PUSH
66574: LD_VAR 0 2
66578: EQUAL
66579: AND
66580: ST_TO_ADDR
// end ;
66581: LD_VAR 0 3
66585: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66586: LD_INT 0
66588: PPUSH
// SetDir ( unit , d ) ;
66589: LD_VAR 0 1
66593: PPUSH
66594: LD_VAR 0 4
66598: PPUSH
66599: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66603: LD_VAR 0 1
66607: PPUSH
66608: LD_VAR 0 2
66612: PPUSH
66613: LD_VAR 0 3
66617: PPUSH
66618: LD_VAR 0 5
66622: PPUSH
66623: CALL_OW 48
// end ;
66627: LD_VAR 0 6
66631: RET
// export function ToNaturalNumber ( number ) ; begin
66632: LD_INT 0
66634: PPUSH
// result := number div 1 ;
66635: LD_ADDR_VAR 0 2
66639: PUSH
66640: LD_VAR 0 1
66644: PUSH
66645: LD_INT 1
66647: DIV
66648: ST_TO_ADDR
// if number < 0 then
66649: LD_VAR 0 1
66653: PUSH
66654: LD_INT 0
66656: LESS
66657: IFFALSE 66667
// result := 0 ;
66659: LD_ADDR_VAR 0 2
66663: PUSH
66664: LD_INT 0
66666: ST_TO_ADDR
// end ;
66667: LD_VAR 0 2
66671: RET
// export function SortByClass ( units , class ) ; var un ; begin
66672: LD_INT 0
66674: PPUSH
66675: PPUSH
// if not units or not class then
66676: LD_VAR 0 1
66680: NOT
66681: PUSH
66682: LD_VAR 0 2
66686: NOT
66687: OR
66688: IFFALSE 66692
// exit ;
66690: GO 66787
// result := [ ] ;
66692: LD_ADDR_VAR 0 3
66696: PUSH
66697: EMPTY
66698: ST_TO_ADDR
// for un in units do
66699: LD_ADDR_VAR 0 4
66703: PUSH
66704: LD_VAR 0 1
66708: PUSH
66709: FOR_IN
66710: IFFALSE 66785
// if GetClass ( un ) = class then
66712: LD_VAR 0 4
66716: PPUSH
66717: CALL_OW 257
66721: PUSH
66722: LD_VAR 0 2
66726: EQUAL
66727: IFFALSE 66754
// result := Insert ( result , 1 , un ) else
66729: LD_ADDR_VAR 0 3
66733: PUSH
66734: LD_VAR 0 3
66738: PPUSH
66739: LD_INT 1
66741: PPUSH
66742: LD_VAR 0 4
66746: PPUSH
66747: CALL_OW 2
66751: ST_TO_ADDR
66752: GO 66783
// result := Replace ( result , result + 1 , un ) ;
66754: LD_ADDR_VAR 0 3
66758: PUSH
66759: LD_VAR 0 3
66763: PPUSH
66764: LD_VAR 0 3
66768: PUSH
66769: LD_INT 1
66771: PLUS
66772: PPUSH
66773: LD_VAR 0 4
66777: PPUSH
66778: CALL_OW 1
66782: ST_TO_ADDR
66783: GO 66709
66785: POP
66786: POP
// end ;
66787: LD_VAR 0 3
66791: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66792: LD_INT 0
66794: PPUSH
66795: PPUSH
66796: PPUSH
66797: PPUSH
66798: PPUSH
66799: PPUSH
66800: PPUSH
// result := [ ] ;
66801: LD_ADDR_VAR 0 4
66805: PUSH
66806: EMPTY
66807: ST_TO_ADDR
// if x - r < 0 then
66808: LD_VAR 0 1
66812: PUSH
66813: LD_VAR 0 3
66817: MINUS
66818: PUSH
66819: LD_INT 0
66821: LESS
66822: IFFALSE 66834
// min_x := 0 else
66824: LD_ADDR_VAR 0 8
66828: PUSH
66829: LD_INT 0
66831: ST_TO_ADDR
66832: GO 66850
// min_x := x - r ;
66834: LD_ADDR_VAR 0 8
66838: PUSH
66839: LD_VAR 0 1
66843: PUSH
66844: LD_VAR 0 3
66848: MINUS
66849: ST_TO_ADDR
// if y - r < 0 then
66850: LD_VAR 0 2
66854: PUSH
66855: LD_VAR 0 3
66859: MINUS
66860: PUSH
66861: LD_INT 0
66863: LESS
66864: IFFALSE 66876
// min_y := 0 else
66866: LD_ADDR_VAR 0 7
66870: PUSH
66871: LD_INT 0
66873: ST_TO_ADDR
66874: GO 66892
// min_y := y - r ;
66876: LD_ADDR_VAR 0 7
66880: PUSH
66881: LD_VAR 0 2
66885: PUSH
66886: LD_VAR 0 3
66890: MINUS
66891: ST_TO_ADDR
// max_x := x + r ;
66892: LD_ADDR_VAR 0 9
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_VAR 0 3
66906: PLUS
66907: ST_TO_ADDR
// max_y := y + r ;
66908: LD_ADDR_VAR 0 10
66912: PUSH
66913: LD_VAR 0 2
66917: PUSH
66918: LD_VAR 0 3
66922: PLUS
66923: ST_TO_ADDR
// for _x = min_x to max_x do
66924: LD_ADDR_VAR 0 5
66928: PUSH
66929: DOUBLE
66930: LD_VAR 0 8
66934: DEC
66935: ST_TO_ADDR
66936: LD_VAR 0 9
66940: PUSH
66941: FOR_TO
66942: IFFALSE 67043
// for _y = min_y to max_y do
66944: LD_ADDR_VAR 0 6
66948: PUSH
66949: DOUBLE
66950: LD_VAR 0 7
66954: DEC
66955: ST_TO_ADDR
66956: LD_VAR 0 10
66960: PUSH
66961: FOR_TO
66962: IFFALSE 67039
// begin if not ValidHex ( _x , _y ) then
66964: LD_VAR 0 5
66968: PPUSH
66969: LD_VAR 0 6
66973: PPUSH
66974: CALL_OW 488
66978: NOT
66979: IFFALSE 66983
// continue ;
66981: GO 66961
// if GetResourceTypeXY ( _x , _y ) then
66983: LD_VAR 0 5
66987: PPUSH
66988: LD_VAR 0 6
66992: PPUSH
66993: CALL_OW 283
66997: IFFALSE 67037
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66999: LD_ADDR_VAR 0 4
67003: PUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: LD_VAR 0 4
67013: PUSH
67014: LD_INT 1
67016: PLUS
67017: PPUSH
67018: LD_VAR 0 5
67022: PUSH
67023: LD_VAR 0 6
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PPUSH
67032: CALL_OW 1
67036: ST_TO_ADDR
// end ;
67037: GO 66961
67039: POP
67040: POP
67041: GO 66941
67043: POP
67044: POP
// end ;
67045: LD_VAR 0 4
67049: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
// if not units then
67058: LD_VAR 0 1
67062: NOT
67063: IFFALSE 67067
// exit ;
67065: GO 67468
// result := UnitFilter ( units , [ f_ok ] ) ;
67067: LD_ADDR_VAR 0 3
67071: PUSH
67072: LD_VAR 0 1
67076: PPUSH
67077: LD_INT 50
67079: PUSH
67080: EMPTY
67081: LIST
67082: PPUSH
67083: CALL_OW 72
67087: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67088: LD_ADDR_VAR 0 7
67092: PUSH
67093: LD_VAR 0 1
67097: PUSH
67098: LD_INT 1
67100: ARRAY
67101: PPUSH
67102: CALL_OW 255
67106: ST_TO_ADDR
// if not result then
67107: LD_VAR 0 3
67111: NOT
67112: IFFALSE 67116
// exit ;
67114: GO 67468
// for i in result do
67116: LD_ADDR_VAR 0 4
67120: PUSH
67121: LD_VAR 0 3
67125: PUSH
67126: FOR_IN
67127: IFFALSE 67466
// begin tag := GetTag ( i ) + 1 ;
67129: LD_ADDR_VAR 0 8
67133: PUSH
67134: LD_VAR 0 4
67138: PPUSH
67139: CALL_OW 110
67143: PUSH
67144: LD_INT 1
67146: PLUS
67147: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67148: LD_ADDR_VAR 0 6
67152: PUSH
67153: LD_VAR 0 4
67157: PPUSH
67158: CALL_OW 250
67162: PPUSH
67163: LD_VAR 0 4
67167: PPUSH
67168: CALL_OW 251
67172: PPUSH
67173: LD_INT 6
67175: PPUSH
67176: CALL 66792 0 3
67180: ST_TO_ADDR
// if cr then
67181: LD_VAR 0 6
67185: IFFALSE 67224
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67187: LD_VAR 0 4
67191: PPUSH
67192: LD_VAR 0 6
67196: PUSH
67197: LD_INT 1
67199: ARRAY
67200: PUSH
67201: LD_INT 1
67203: ARRAY
67204: PPUSH
67205: LD_VAR 0 6
67209: PUSH
67210: LD_INT 1
67212: ARRAY
67213: PUSH
67214: LD_INT 2
67216: ARRAY
67217: PPUSH
67218: CALL_OW 116
67222: GO 67464
// if path > tag then
67224: LD_VAR 0 2
67228: PUSH
67229: LD_VAR 0 8
67233: GREATER
67234: IFFALSE 67412
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
67236: LD_ADDR_VAR 0 5
67240: PUSH
67241: LD_INT 81
67243: PUSH
67244: LD_VAR 0 7
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 91
67255: PUSH
67256: LD_VAR 0 4
67260: PUSH
67261: LD_INT 12
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PPUSH
67273: CALL_OW 69
67277: ST_TO_ADDR
// if enemy then
67278: LD_VAR 0 5
67282: IFFALSE 67310
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67284: LD_VAR 0 4
67288: PPUSH
67289: LD_VAR 0 5
67293: PPUSH
67294: LD_VAR 0 4
67298: PPUSH
67299: CALL_OW 74
67303: PPUSH
67304: CALL_OW 115
67308: GO 67410
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67310: LD_VAR 0 4
67314: PPUSH
67315: LD_VAR 0 2
67319: PUSH
67320: LD_VAR 0 8
67324: ARRAY
67325: PUSH
67326: LD_INT 1
67328: ARRAY
67329: PPUSH
67330: LD_VAR 0 2
67334: PUSH
67335: LD_VAR 0 8
67339: ARRAY
67340: PUSH
67341: LD_INT 2
67343: ARRAY
67344: PPUSH
67345: CALL_OW 297
67349: PUSH
67350: LD_INT 6
67352: GREATER
67353: IFFALSE 67396
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67355: LD_VAR 0 4
67359: PPUSH
67360: LD_VAR 0 2
67364: PUSH
67365: LD_VAR 0 8
67369: ARRAY
67370: PUSH
67371: LD_INT 1
67373: ARRAY
67374: PPUSH
67375: LD_VAR 0 2
67379: PUSH
67380: LD_VAR 0 8
67384: ARRAY
67385: PUSH
67386: LD_INT 2
67388: ARRAY
67389: PPUSH
67390: CALL_OW 114
67394: GO 67410
// SetTag ( i , tag ) ;
67396: LD_VAR 0 4
67400: PPUSH
67401: LD_VAR 0 8
67405: PPUSH
67406: CALL_OW 109
// end else
67410: GO 67464
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67412: LD_ADDR_VAR 0 5
67416: PUSH
67417: LD_INT 81
67419: PUSH
67420: LD_VAR 0 7
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PPUSH
67429: CALL_OW 69
67433: ST_TO_ADDR
// if enemy then
67434: LD_VAR 0 5
67438: IFFALSE 67464
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67440: LD_VAR 0 4
67444: PPUSH
67445: LD_VAR 0 5
67449: PPUSH
67450: LD_VAR 0 4
67454: PPUSH
67455: CALL_OW 74
67459: PPUSH
67460: CALL_OW 115
// end ; end ;
67464: GO 67126
67466: POP
67467: POP
// end ; end_of_file
67468: LD_VAR 0 3
67472: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67473: LD_VAR 0 1
67477: PUSH
67478: LD_INT 200
67480: DOUBLE
67481: GREATEREQUAL
67482: IFFALSE 67490
67484: LD_INT 299
67486: DOUBLE
67487: LESSEQUAL
67488: IFTRUE 67492
67490: GO 67524
67492: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67493: LD_VAR 0 1
67497: PPUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: LD_VAR 0 3
67507: PPUSH
67508: LD_VAR 0 4
67512: PPUSH
67513: LD_VAR 0 5
67517: PPUSH
67518: CALL 23867 0 5
67522: GO 67601
67524: LD_INT 300
67526: DOUBLE
67527: GREATEREQUAL
67528: IFFALSE 67536
67530: LD_INT 399
67532: DOUBLE
67533: LESSEQUAL
67534: IFTRUE 67538
67536: GO 67600
67538: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67539: LD_VAR 0 1
67543: PPUSH
67544: LD_VAR 0 2
67548: PPUSH
67549: LD_VAR 0 3
67553: PPUSH
67554: LD_VAR 0 4
67558: PPUSH
67559: LD_VAR 0 5
67563: PPUSH
67564: LD_VAR 0 6
67568: PPUSH
67569: LD_VAR 0 7
67573: PPUSH
67574: LD_VAR 0 8
67578: PPUSH
67579: LD_VAR 0 9
67583: PPUSH
67584: LD_VAR 0 10
67588: PPUSH
67589: LD_VAR 0 11
67593: PPUSH
67594: CALL 21765 0 11
67598: GO 67601
67600: POP
// end ;
67601: PPOPN 11
67603: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67604: LD_VAR 0 1
67608: PPUSH
67609: LD_VAR 0 2
67613: PPUSH
67614: LD_VAR 0 3
67618: PPUSH
67619: LD_VAR 0 4
67623: PPUSH
67624: LD_VAR 0 5
67628: PPUSH
67629: CALL 23859 0 5
// end ; end_of_file
67633: PPOPN 5
67635: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67636: LD_VAR 0 1
67640: PPUSH
67641: LD_VAR 0 2
67645: PPUSH
67646: LD_VAR 0 3
67650: PPUSH
67651: LD_VAR 0 4
67655: PPUSH
67656: LD_VAR 0 5
67660: PPUSH
67661: LD_VAR 0 6
67665: PPUSH
67666: CALL 9960 0 6
// end ;
67670: PPOPN 6
67672: END
