// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5705
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// DialogueOn ;
5446: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5450: LD_EXP 17
5454: PPUSH
5455: LD_STRING DO-olaf-1
5457: PPUSH
5458: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5462: LD_EXP 16
5466: PPUSH
5467: LD_STRING DH-olaf-1
5469: PPUSH
5470: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5474: LD_EXP 17
5478: PPUSH
5479: LD_STRING DO-olaf-2
5481: PPUSH
5482: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5486: LD_EXP 16
5490: PPUSH
5491: LD_STRING DH-olaf-2
5493: PPUSH
5494: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING DO-olaf-3
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-4
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-4
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-5
5541: PPUSH
5542: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5546: LD_EXP 16
5550: PPUSH
5551: LD_STRING DH-olaf-5
5553: PPUSH
5554: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5558: LD_EXP 17
5562: PPUSH
5563: LD_STRING DO-olaf-6
5565: PPUSH
5566: CALL_OW 88
// if russianSpotted or johnnySaved then
5570: LD_EXP 9
5574: PUSH
5575: LD_EXP 4
5579: OR
5580: IFFALSE 5608
// begin Say ( Heike , DH-olaf-6a ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-6a
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-7a
5601: PPUSH
5602: CALL_OW 88
// end else
5606: GO 5632
// begin Say ( Heike , DH-olaf-6b ) ;
5608: LD_EXP 16
5612: PPUSH
5613: LD_STRING DH-olaf-6b
5615: PPUSH
5616: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING DO-olaf-7b
5627: PPUSH
5628: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-8
5639: PPUSH
5640: CALL_OW 88
// DialogueOff ;
5644: CALL_OW 7
// InGameOff ;
5648: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5652: LD_STRING O3_camp_cont
5654: PPUSH
5655: CALL_OW 337
// if not johnnySaved then
5659: LD_EXP 4
5663: NOT
5664: IFFALSE 5675
// KillUnit ( Johnny ) ;
5666: LD_EXP 25
5670: PPUSH
5671: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5675: LD_EXP 17
5679: PPUSH
5680: LD_INT 52
5682: PPUSH
5683: LD_INT 90
5685: PPUSH
5686: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 53
5697: PPUSH
5698: LD_INT 89
5700: PPUSH
5701: CALL_OW 178
// end ;
5705: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5706: LD_EXP 8
5710: NOT
5711: PUSH
5712: LD_EXP 16
5716: PPUSH
5717: LD_EXP 18
5721: PPUSH
5722: CALL_OW 296
5726: PUSH
5727: LD_INT 36
5729: LESS
5730: AND
5731: IFFALSE 5751
5733: GO 5735
5735: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5736: LD_EXP 17
5740: PPUSH
5741: LD_INT 39
5743: PPUSH
5744: LD_INT 71
5746: PPUSH
5747: CALL_OW 111
5751: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5752: LD_EXP 7
5756: NOT
5757: PUSH
5758: LD_INT 2
5760: PPUSH
5761: LD_EXP 19
5765: PPUSH
5766: CALL_OW 292
5770: PUSH
5771: LD_INT 2
5773: PPUSH
5774: LD_EXP 18
5778: PPUSH
5779: CALL_OW 292
5783: OR
5784: AND
5785: IFFALSE 7106
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
// begin if not johnnySaved then
5795: LD_EXP 4
5799: NOT
5800: IFFALSE 5811
// KillUnit ( Johnny ) ;
5802: LD_EXP 25
5806: PPUSH
5807: CALL_OW 66
// mercenariesSpotted := true ;
5811: LD_ADDR_EXP 7
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5819: LD_STRING O4_camp_cont
5821: PPUSH
5822: CALL_OW 337
// InGameOn ;
5826: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5830: LD_INT 53
5832: PPUSH
5833: LD_INT 89
5835: PPUSH
5836: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5840: LD_INT 53
5842: PPUSH
5843: LD_INT 89
5845: PPUSH
5846: LD_INT 2
5848: PPUSH
5849: LD_INT 8
5851: NEG
5852: PPUSH
5853: CALL_OW 330
// if olafSpotted then
5857: LD_EXP 8
5861: IFFALSE 5979
// begin AddComTurnUnit ( Olaf , Heike ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_EXP 16
5872: PPUSH
5873: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 51
5884: PPUSH
5885: LD_INT 86
5887: PPUSH
5888: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_EXP 17
5901: PPUSH
5902: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5906: LD_EXP 17
5910: PPUSH
5911: LD_STRING DO-camp-1
5913: PPUSH
5914: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5918: LD_EXP 18
5922: PUSH
5923: LD_EXP 19
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PPUSH
5932: LD_EXP 16
5936: PPUSH
5937: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5941: LD_EXP 18
5945: PPUSH
5946: LD_STRING DG-camp-1
5948: PPUSH
5949: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5953: LD_EXP 16
5957: PPUSH
5958: LD_STRING DH-camp-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5965: LD_EXP 17
5969: PPUSH
5970: LD_STRING DO-camp-2
5972: PPUSH
5973: CALL_OW 88
// end else
5977: GO 6374
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 51
5986: PPUSH
5987: LD_INT 86
5989: PPUSH
5990: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_EXP 18
6003: PPUSH
6004: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6008: LD_EXP 18
6012: PUSH
6013: LD_EXP 19
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PPUSH
6022: LD_EXP 16
6026: PPUSH
6027: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6031: LD_EXP 18
6035: PPUSH
6036: LD_STRING DG-camp-1a
6038: PPUSH
6039: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6043: LD_EXP 16
6047: PPUSH
6048: LD_STRING DH-camp-1a
6050: PPUSH
6051: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6055: LD_INT 1
6057: PPUSH
6058: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6062: LD_EXP 19
6066: PPUSH
6067: LD_EXP 17
6071: PPUSH
6072: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6076: LD_EXP 19
6080: PPUSH
6081: LD_STRING DM-camp-1a
6083: PPUSH
6084: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6088: LD_EXP 17
6092: PPUSH
6093: LD_INT 52
6095: PPUSH
6096: LD_INT 90
6098: PPUSH
6099: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6103: LD_EXP 19
6107: PPUSH
6108: LD_EXP 16
6112: PPUSH
6113: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6117: LD_EXP 18
6121: PPUSH
6122: LD_STRING DG-camp-2a
6124: PPUSH
6125: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6129: LD_EXP 16
6133: PPUSH
6134: LD_STRING DH-camp-2a
6136: PPUSH
6137: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6141: LD_EXP 19
6145: PPUSH
6146: LD_STRING DM-camp-2a
6148: PPUSH
6149: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6153: LD_INT 35
6155: PPUSH
6156: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6160: LD_EXP 17
6164: PPUSH
6165: LD_EXP 16
6169: PPUSH
6170: CALL_OW 296
6174: PUSH
6175: LD_INT 10
6177: LESS
6178: IFFALSE 6153
// AddComTurnUnit ( Olaf , Heike ) ;
6180: LD_EXP 17
6184: PPUSH
6185: LD_EXP 16
6189: PPUSH
6190: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6194: LD_EXP 19
6198: PPUSH
6199: LD_EXP 16
6203: PPUSH
6204: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6208: LD_EXP 17
6212: PPUSH
6213: LD_STRING DO-camp-2a
6215: PPUSH
6216: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6220: LD_EXP 16
6224: PPUSH
6225: LD_EXP 17
6229: PPUSH
6230: CALL_OW 119
// if russianSpotted then
6234: LD_EXP 9
6238: IFFALSE 6278
// begin Say ( Heike , DH-camp-2aa ) ;
6240: LD_EXP 16
6244: PPUSH
6245: LD_STRING DH-camp-2aa
6247: PPUSH
6248: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6252: LD_EXP 18
6256: PPUSH
6257: LD_STRING DG-camp-2aa
6259: PPUSH
6260: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6264: LD_EXP 19
6268: PPUSH
6269: LD_STRING DM-camp-2aa
6271: PPUSH
6272: CALL_OW 88
// end else
6276: GO 6302
// begin Say ( Heike , DH-camp-2ab ) ;
6278: LD_EXP 16
6282: PPUSH
6283: LD_STRING DH-camp-2ab
6285: PPUSH
6286: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6290: LD_EXP 19
6294: PPUSH
6295: LD_STRING DM-camp-2ab
6297: PPUSH
6298: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6302: LD_EXP 16
6306: PPUSH
6307: LD_STRING DH-camp-3a
6309: PPUSH
6310: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6314: LD_EXP 17
6318: PPUSH
6319: LD_STRING DO-camp-3a
6321: PPUSH
6322: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6326: LD_EXP 18
6330: PPUSH
6331: LD_STRING DG-camp-3a
6333: PPUSH
6334: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6338: LD_EXP 16
6342: PPUSH
6343: LD_STRING DH-camp-4aa
6345: PPUSH
6346: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6350: LD_EXP 19
6354: PPUSH
6355: LD_STRING DM-camp-4aa
6357: PPUSH
6358: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING DO-camp-4a
6369: PPUSH
6370: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6374: LD_EXP 17
6378: PPUSH
6379: LD_STRING DO-camp-3
6381: PPUSH
6382: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6386: LD_EXP 17
6390: PPUSH
6391: LD_STRING DO-camp-4
6393: PPUSH
6394: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6398: LD_EXP 18
6402: PPUSH
6403: LD_EXP 17
6407: PPUSH
6408: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6412: LD_EXP 18
6416: PPUSH
6417: LD_STRING DG-camp-4
6419: PPUSH
6420: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6424: LD_EXP 16
6428: PPUSH
6429: LD_EXP 18
6433: PPUSH
6434: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6438: LD_EXP 16
6442: PPUSH
6443: LD_STRING DH-camp-4
6445: PPUSH
6446: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6450: LD_EXP 19
6454: PUSH
6455: LD_EXP 17
6459: PUSH
6460: LD_EXP 18
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: PPUSH
6470: LD_EXP 16
6474: PPUSH
6475: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6479: LD_EXP 18
6483: PPUSH
6484: LD_STRING DG-camp-5
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-camp-6
6498: PPUSH
6499: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6503: LD_EXP 16
6507: PPUSH
6508: LD_STRING DH-camp-6
6510: PPUSH
6511: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6515: LD_EXP 18
6519: PPUSH
6520: LD_STRING DG-camp-7
6522: PPUSH
6523: CALL_OW 88
// if DogTagFound then
6527: LD_EXP 6
6531: IFFALSE 6571
// begin Say ( Heike , DH-quest-1a ) ;
6533: LD_EXP 16
6537: PPUSH
6538: LD_STRING DH-quest-1a
6540: PPUSH
6541: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6545: LD_EXP 18
6549: PPUSH
6550: LD_STRING DG-quest-1a
6552: PPUSH
6553: CALL_OW 88
// mercenariesQuestDone := true ;
6557: LD_ADDR_EXP 11
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// InGameOff ;
6565: CALL_OW 9
// end else
6569: GO 6737
// begin Say ( Heike , DH-camp-7 ) ;
6571: LD_EXP 16
6575: PPUSH
6576: LD_STRING DH-camp-7
6578: PPUSH
6579: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6583: LD_EXP 16
6587: PPUSH
6588: CALL_OW 256
6592: PUSH
6593: LD_INT 1000
6595: LESS
6596: IFFALSE 6688
// begin Say ( Olaf , DO-heal-1 ) ;
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING DO-heal-1
6605: PPUSH
6606: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6610: LD_EXP 16
6614: PPUSH
6615: LD_INT 51
6617: PPUSH
6618: LD_INT 88
6620: PPUSH
6621: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6625: LD_INT 35
6627: PPUSH
6628: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6632: LD_EXP 16
6636: PPUSH
6637: LD_EXP 17
6641: PPUSH
6642: CALL_OW 296
6646: PUSH
6647: LD_INT 4
6649: LESS
6650: PUSH
6651: LD_EXP 16
6655: PPUSH
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 88
6661: PPUSH
6662: CALL_OW 307
6666: OR
6667: IFFALSE 6625
// SetLives ( Heike , 1000 ) ;
6669: LD_EXP 16
6673: PPUSH
6674: LD_INT 1000
6676: PPUSH
6677: CALL_OW 234
// wait ( 0 0$2 ) ;
6681: LD_INT 70
6683: PPUSH
6684: CALL_OW 67
// end ; InGameOff ;
6688: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6692: LD_EXP 17
6696: PUSH
6697: LD_EXP 18
6701: PUSH
6702: LD_EXP 19
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: PPUSH
6712: LD_INT 53
6714: PPUSH
6715: LD_INT 89
6717: PPUSH
6718: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6722: LD_STRING O5_proof_cont
6724: PPUSH
6725: CALL_OW 337
// mercenariesQuestReady := true ;
6729: LD_ADDR_EXP 10
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6737: LD_EXP 10
6741: NOT
6742: IFFALSE 6746
// exit ;
6744: GO 7106
// wait ( 0 0$35 ) ;
6746: LD_INT 1225
6748: PPUSH
6749: CALL_OW 67
// driver := PreparePatrolTank ;
6753: LD_ADDR_VAR 0 2
6757: PUSH
6758: CALL 2814 0 0
6762: ST_TO_ADDR
// if not driver then
6763: LD_VAR 0 2
6767: NOT
6768: IFFALSE 6772
// exit ;
6770: GO 7106
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6772: LD_INT 2
6774: PPUSH
6775: LD_INT 1
6777: PPUSH
6778: LD_INT 2
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6788: LD_ADDR_VAR 0 3
6792: PUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: CALL_OW 310
6802: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_INT 500
6810: PPUSH
6811: CALL_OW 234
// SetLives ( driver , 450 ) ;
6815: LD_VAR 0 2
6819: PPUSH
6820: LD_INT 450
6822: PPUSH
6823: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6827: LD_VAR 0 2
6831: PPUSH
6832: LD_INT 59
6834: PPUSH
6835: LD_INT 60
6837: PPUSH
6838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6842: LD_INT 35
6844: PPUSH
6845: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_INT 59
6856: PPUSH
6857: LD_INT 60
6859: PPUSH
6860: CALL_OW 307
6864: IFFALSE 6842
// if not See ( 1 , Heike ) then
6866: LD_INT 1
6868: PPUSH
6869: LD_EXP 16
6873: PPUSH
6874: CALL_OW 292
6878: NOT
6879: IFFALSE 7003
// begin if Difficulty < 3 then
6881: LD_OWVAR 67
6885: PUSH
6886: LD_INT 3
6888: LESS
6889: IFFALSE 6907
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 60
6896: PPUSH
6897: LD_INT 2
6899: PPUSH
6900: LD_INT 6
6902: PPUSH
6903: CALL_OW 330
// ComExitVehicle ( driver ) ;
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL_OW 121
// wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_INT 58
6930: PPUSH
6931: LD_INT 54
6933: PPUSH
6934: CALL_OW 171
// wait ( 0 0$1 ) ;
6938: LD_INT 35
6940: PPUSH
6941: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_INT 57
6952: PPUSH
6953: LD_INT 53
6955: PPUSH
6956: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 350
6967: PPUSH
6968: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6972: LD_VAR 0 2
6976: PPUSH
6977: LD_VAR 0 3
6981: PPUSH
6982: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 107
6993: PPUSH
6994: LD_INT 118
6996: PPUSH
6997: CALL_OW 171
// end else
7001: GO 7018
// begin ComMoveXY ( driver , 107 , 118 ) ;
7003: LD_VAR 0 2
7007: PPUSH
7008: LD_INT 107
7010: PPUSH
7011: LD_INT 118
7013: PPUSH
7014: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7018: LD_INT 35
7020: PPUSH
7021: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7025: LD_VAR 0 3
7029: PPUSH
7030: LD_INT 107
7032: PPUSH
7033: LD_INT 118
7035: PPUSH
7036: CALL_OW 307
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 301
7050: OR
7051: IFFALSE 7018
// if IsDead ( driver [ 1 ] ) then
7053: LD_VAR 0 2
7057: PUSH
7058: LD_INT 1
7060: ARRAY
7061: PPUSH
7062: CALL_OW 301
7066: IFFALSE 7070
// exit ;
7068: GO 7106
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7070: LD_ADDR_VAR 0 1
7074: PUSH
7075: LD_INT 22
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7104
// RemoveUnit ( i ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL_OW 64
7102: GO 7090
7104: POP
7105: POP
// end ;
7106: PPOPN 3
7108: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7109: LD_INT 10
7111: PPUSH
7112: LD_INT 22
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 21
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 70
7140: IFFALSE 7214
7142: GO 7144
7144: DISABLE
// begin InGameOn ;
7145: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7149: LD_EXP 17
7153: PUSH
7154: LD_EXP 19
7158: PUSH
7159: LD_EXP 18
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: PPUSH
7169: LD_EXP 16
7173: PPUSH
7174: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7178: LD_EXP 19
7182: PPUSH
7183: LD_STRING DM-quest-1
7185: PPUSH
7186: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7190: LD_EXP 18
7194: PPUSH
7195: LD_STRING DG-quest-1
7197: PPUSH
7198: CALL_OW 88
// InGameOff ;
7202: CALL_OW 9
// mercenariesQuestDone := true ;
7206: LD_ADDR_EXP 11
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// end ;
7214: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7215: LD_EXP 16
7219: PPUSH
7220: LD_INT 10
7222: PPUSH
7223: CALL_OW 308
7227: PUSH
7228: LD_EXP 6
7232: AND
7233: PUSH
7234: LD_EXP 10
7238: AND
7239: PUSH
7240: LD_INT 10
7242: PPUSH
7243: LD_INT 22
7245: PUSH
7246: LD_INT 2
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 21
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 70
7271: NOT
7272: AND
7273: IFFALSE 7445
7275: GO 7277
7277: DISABLE
7278: LD_INT 0
7280: PPUSH
// begin InGameOn ;
7281: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7285: LD_EXP 17
7289: PUSH
7290: LD_EXP 19
7294: PUSH
7295: LD_EXP 18
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PPUSH
7305: LD_EXP 16
7309: PPUSH
7310: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7314: LD_EXP 16
7318: PPUSH
7319: LD_INT 54
7321: PPUSH
7322: LD_INT 86
7324: PPUSH
7325: CALL_OW 111
// p := p + 1 ;
7329: LD_ADDR_VAR 0 1
7333: PUSH
7334: LD_VAR 0 1
7338: PUSH
7339: LD_INT 1
7341: PLUS
7342: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7343: LD_INT 35
7345: PPUSH
7346: CALL_OW 67
// p := p + 1 ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_VAR 0 1
7359: PUSH
7360: LD_INT 1
7362: PLUS
7363: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7364: LD_EXP 16
7368: PPUSH
7369: LD_EXP 18
7373: PPUSH
7374: CALL_OW 296
7378: PUSH
7379: LD_INT 4
7381: LESS
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: LD_INT 5
7390: GREATER
7391: OR
7392: IFFALSE 7343
// Say ( Mike , DM-quest-1 ) ;
7394: LD_EXP 19
7398: PPUSH
7399: LD_STRING DM-quest-1
7401: PPUSH
7402: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7406: LD_EXP 18
7410: PPUSH
7411: LD_STRING DG-quest-1
7413: PPUSH
7414: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7418: LD_EXP 16
7422: PPUSH
7423: LD_INT 55
7425: PPUSH
7426: LD_INT 87
7428: PPUSH
7429: CALL_OW 111
// InGameOff ;
7433: CALL_OW 9
// mercenariesQuestDone := true ;
7437: LD_ADDR_EXP 11
7441: PUSH
7442: LD_INT 1
7444: ST_TO_ADDR
// end ;
7445: PPOPN 1
7447: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7448: LD_EXP 16
7452: PUSH
7453: LD_INT 55
7455: PUSH
7456: EMPTY
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: IN
7464: IFFALSE 7504
7466: GO 7468
7468: DISABLE
// begin if Difficulty < 3 then
7469: LD_OWVAR 67
7473: PUSH
7474: LD_INT 3
7476: LESS
7477: IFFALSE 7492
// RemoveSeeing ( 59 , 60 , 2 ) ;
7479: LD_INT 59
7481: PPUSH
7482: LD_INT 60
7484: PPUSH
7485: LD_INT 2
7487: PPUSH
7488: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7492: LD_EXP 16
7496: PPUSH
7497: LD_STRING DH-driver
7499: PPUSH
7500: CALL_OW 88
// end ;
7504: END
// every 0 0$1 trigger mercenariesQuestDone do
7505: LD_EXP 11
7509: IFFALSE 7997
7511: GO 7513
7513: DISABLE
// begin if mercenariesQuestReady then
7514: LD_EXP 10
7518: IFFALSE 7527
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7520: LD_STRING O5_proof_cont_out
7522: PPUSH
7523: CALL_OW 337
// InGameOn ;
7527: CALL_OW 8
// if IsInUnit ( Heike ) then
7531: LD_EXP 16
7535: PPUSH
7536: CALL_OW 310
7540: IFFALSE 7551
// ComExitVehicle ( Heike ) ;
7542: LD_EXP 16
7546: PPUSH
7547: CALL_OW 121
// wait ( 3 ) ;
7551: LD_INT 3
7553: PPUSH
7554: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7558: LD_EXP 16
7562: PPUSH
7563: LD_EXP 18
7567: PPUSH
7568: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7572: LD_EXP 17
7576: PUSH
7577: LD_EXP 19
7581: PUSH
7582: LD_EXP 18
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: PPUSH
7592: LD_EXP 16
7596: PPUSH
7597: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7601: LD_EXP 16
7605: PPUSH
7606: LD_STRING DH-quest-done-1
7608: PPUSH
7609: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7613: LD_EXP 19
7617: PPUSH
7618: LD_STRING DM-quest-done-1
7620: PPUSH
7621: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7625: LD_EXP 18
7629: PPUSH
7630: LD_STRING DG-quest-done-1
7632: PPUSH
7633: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7637: LD_EXP 16
7641: PPUSH
7642: LD_EXP 17
7646: PPUSH
7647: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7651: LD_EXP 16
7655: PPUSH
7656: LD_STRING DH-quest-done-2
7658: PPUSH
7659: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7663: LD_EXP 17
7667: PPUSH
7668: LD_STRING DO-quest-done-2
7670: PPUSH
7671: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7675: LD_EXP 17
7679: PPUSH
7680: LD_STRING DO-quest-done-3
7682: PPUSH
7683: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7687: LD_EXP 18
7691: PPUSH
7692: LD_INT 51
7694: PPUSH
7695: LD_INT 90
7697: PPUSH
7698: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 50
7709: PPUSH
7710: LD_INT 89
7712: PPUSH
7713: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7717: LD_EXP 16
7721: PPUSH
7722: LD_EXP 18
7726: PPUSH
7727: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7731: LD_EXP 18
7735: PPUSH
7736: LD_STRING DG-quest-done-4
7738: PPUSH
7739: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7743: LD_EXP 18
7747: PPUSH
7748: LD_EXP 16
7752: PPUSH
7753: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7757: LD_EXP 16
7761: PPUSH
7762: CALL_OW 256
7766: PUSH
7767: LD_INT 1000
7769: LESS
7770: IFFALSE 7862
// begin Say ( Olaf , DO-heal-1 ) ;
7772: LD_EXP 17
7776: PPUSH
7777: LD_STRING DO-heal-1
7779: PPUSH
7780: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7784: LD_EXP 16
7788: PPUSH
7789: LD_INT 51
7791: PPUSH
7792: LD_INT 88
7794: PPUSH
7795: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7799: LD_INT 35
7801: PPUSH
7802: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7806: LD_EXP 16
7810: PPUSH
7811: LD_EXP 17
7815: PPUSH
7816: CALL_OW 296
7820: PUSH
7821: LD_INT 4
7823: LESS
7824: PUSH
7825: LD_EXP 16
7829: PPUSH
7830: LD_INT 51
7832: PPUSH
7833: LD_INT 88
7835: PPUSH
7836: CALL_OW 307
7840: OR
7841: IFFALSE 7799
// SetLives ( Heike , 1000 ) ;
7843: LD_EXP 16
7847: PPUSH
7848: LD_INT 1000
7850: PPUSH
7851: CALL_OW 234
// wait ( 0 0$2 ) ;
7855: LD_INT 70
7857: PPUSH
7858: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7862: LD_EXP 16
7866: PPUSH
7867: LD_STRING DH-quest-done-4
7869: PPUSH
7870: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7874: LD_EXP 17
7878: PPUSH
7879: LD_STRING DO-quest-done-4
7881: PPUSH
7882: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7886: LD_EXP 16
7890: PPUSH
7891: LD_EXP 17
7895: PPUSH
7896: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7900: LD_EXP 16
7904: PPUSH
7905: LD_STRING DH-quest-done-5
7907: PPUSH
7908: CALL_OW 88
// InGameOff ;
7912: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7916: LD_STRING O6_end_cont
7918: PPUSH
7919: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7923: LD_EXP 18
7927: PPUSH
7928: LD_INT 2
7930: PPUSH
7931: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7935: LD_EXP 19
7939: PPUSH
7940: LD_INT 2
7942: PPUSH
7943: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7947: LD_INT 42
7949: PPUSH
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 2
7955: PPUSH
7956: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7960: LD_EXP 17
7964: PPUSH
7965: LD_INT 53
7967: PPUSH
7968: LD_INT 89
7970: PPUSH
7971: CALL_OW 118
// lastObjectiveActive := true ;
7975: LD_ADDR_EXP 12
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 424
// PreparePrison ;
7993: CALL 1164 0 0
// end ;
7997: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7998: LD_INT 22
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 91
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PPUSH
8026: CALL_OW 69
8030: IFFALSE 8212
8032: GO 8034
8034: DISABLE
8035: LD_INT 0
8037: PPUSH
8038: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8039: LD_INT 245
8041: PUSH
8042: LD_INT 210
8044: PUSH
8045: LD_INT 210
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PUSH
8053: LD_OWVAR 67
8057: ARRAY
8058: PPUSH
8059: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 25
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 54
8090: PUSH
8091: EMPTY
8092: LIST
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: ST_TO_ADDR
// if not tmp then
8104: LD_VAR 0 2
8108: NOT
8109: IFFALSE 8113
// exit ;
8111: GO 8212
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8152
// begin ComExitBuilding ( i ) ;
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 121
8142: PPUSH
8143: LD_INT 22
8145: PPUSH
8146: CALL_OW 174
// end ;
8150: GO 8123
8152: POP
8153: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8154: LD_EXP 23
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8169: LD_EXP 24
8173: PPUSH
8174: LD_INT 121
8176: PPUSH
8177: LD_INT 22
8179: PPUSH
8180: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8184: LD_EXP 23
8188: PPUSH
8189: LD_EXP 16
8193: PPUSH
8194: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8198: LD_EXP 24
8202: PPUSH
8203: LD_EXP 16
8207: PPUSH
8208: CALL_OW 175
// end ;
8212: PPOPN 2
8214: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8215: LD_INT 22
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 91
8227: PUSH
8228: LD_INT 8
8230: PUSH
8231: LD_INT 4
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 69
8247: IFFALSE 8429
8249: GO 8251
8251: DISABLE
8252: LD_INT 0
8254: PPUSH
8255: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8256: LD_INT 280
8258: PUSH
8259: LD_INT 245
8261: PUSH
8262: LD_INT 210
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PPUSH
8276: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8280: LD_ADDR_VAR 0 2
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_INT 3
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 54
8307: PUSH
8308: EMPTY
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 69
8320: ST_TO_ADDR
// if not tmp then
8321: LD_VAR 0 2
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8429
// for i in tmp do
8330: LD_ADDR_VAR 0 1
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: FOR_IN
8341: IFFALSE 8369
// begin ComExitBuilding ( i ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8352: LD_VAR 0 1
8356: PPUSH
8357: LD_INT 142
8359: PPUSH
8360: LD_INT 71
8362: PPUSH
8363: CALL_OW 174
// end ;
8367: GO 8340
8369: POP
8370: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8371: LD_EXP 23
8375: PPUSH
8376: LD_INT 142
8378: PPUSH
8379: LD_INT 71
8381: PPUSH
8382: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8386: LD_EXP 24
8390: PPUSH
8391: LD_INT 142
8393: PPUSH
8394: LD_INT 71
8396: PPUSH
8397: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8401: LD_EXP 23
8405: PPUSH
8406: LD_EXP 16
8410: PPUSH
8411: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8415: LD_EXP 24
8419: PPUSH
8420: LD_EXP 16
8424: PPUSH
8425: CALL_OW 175
// end ;
8429: PPOPN 2
8431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8432: LD_INT 22
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 21
8444: PUSH
8445: LD_INT 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 58
8454: PUSH
8455: EMPTY
8456: LIST
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 1000
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 91
8477: PUSH
8478: LD_EXP 17
8482: PUSH
8483: LD_INT 8
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 69
8502: PUSH
8503: LD_EXP 17
8507: PPUSH
8508: CALL_OW 302
8512: AND
8513: IFFALSE 8627
8515: GO 8517
8517: DISABLE
// begin enable ;
8518: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8519: LD_EXP 17
8523: PPUSH
8524: LD_INT 22
8526: PUSH
8527: LD_INT 2
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 58
8546: PUSH
8547: EMPTY
8548: LIST
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 24
8555: PUSH
8556: LD_INT 1000
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 91
8569: PUSH
8570: LD_EXP 17
8574: PUSH
8575: LD_INT 8
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: PUSH
8595: LD_INT 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8603: LD_EXP 17
8607: PPUSH
8608: LD_INT 52
8610: PPUSH
8611: LD_INT 90
8613: PPUSH
8614: CALL_OW 171
// AddComHold ( Olaf ) ;
8618: LD_EXP 17
8622: PPUSH
8623: CALL_OW 200
// end ;
8627: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8628: LD_EXP 12
8632: PUSH
8633: LD_INT 2
8635: PPUSH
8636: CALL_OW 302
8640: NOT
8641: AND
8642: PUSH
8643: LD_OWVAR 67
8647: PUSH
8648: LD_INT 1
8650: EQUAL
8651: AND
8652: PUSH
8653: LD_EXP 13
8657: NOT
8658: AND
8659: IFFALSE 8676
8661: GO 8663
8663: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8664: LD_EXP 16
8668: PPUSH
8669: LD_STRING DH-prison-missing
8671: PPUSH
8672: CALL_OW 88
// end ;
8676: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8677: LD_EXP 12
8681: PUSH
8682: LD_INT 8
8684: PPUSH
8685: CALL_OW 302
8689: NOT
8690: AND
8691: PUSH
8692: LD_OWVAR 67
8696: PUSH
8697: LD_INT 1
8699: GREATER
8700: AND
8701: PUSH
8702: LD_EXP 13
8706: NOT
8707: AND
8708: IFFALSE 8725
8710: GO 8712
8712: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8713: LD_EXP 16
8717: PPUSH
8718: LD_STRING DH-prison-missing
8720: PPUSH
8721: CALL_OW 88
// end ;
8725: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8726: LD_EXP 12
8730: PUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 302
8738: NOT
8739: AND
8740: PUSH
8741: LD_EXP 13
8745: NOT
8746: AND
8747: IFFALSE 8764
8749: GO 8751
8751: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8752: LD_EXP 16
8756: PPUSH
8757: LD_STRING DH-prison-missing-a
8759: PPUSH
8760: CALL_OW 88
// end ;
8764: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8765: LD_EXP 12
8769: PUSH
8770: LD_INT 10
8772: PPUSH
8773: CALL_OW 302
8777: NOT
8778: AND
8779: PUSH
8780: LD_EXP 13
8784: NOT
8785: AND
8786: IFFALSE 8803
8788: GO 8790
8790: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8791: LD_EXP 16
8795: PPUSH
8796: LD_STRING DH-prison-missing-a
8798: PPUSH
8799: CALL_OW 88
// end ;
8803: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8804: LD_EXP 13
8808: NOT
8809: PUSH
8810: LD_EXP 12
8814: AND
8815: PUSH
8816: LD_INT 2
8818: PPUSH
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 292
8828: AND
8829: IFFALSE 8916
8831: GO 8833
8833: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8834: LD_EXP 20
8838: PPUSH
8839: LD_EXP 16
8843: PPUSH
8844: CALL_OW 119
// DialogueOn ;
8848: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8852: LD_EXP 20
8856: PPUSH
8857: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8861: LD_EXP 20
8865: PPUSH
8866: LD_STRING DK-prison-found
8868: PPUSH
8869: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DH-prison-found
8880: PPUSH
8881: CALL_OW 88
// DialogueOff ;
8885: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8889: LD_EXP 20
8893: PPUSH
8894: LD_INT 2
8896: PPUSH
8897: CALL_OW 235
// prisonFound := true ;
8901: LD_ADDR_EXP 13
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8909: LD_STRING O6_prison_out
8911: PPUSH
8912: CALL_OW 337
// end ;
8916: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8917: LD_EXP 16
8921: PPUSH
8922: CALL_OW 256
8926: PUSH
8927: LD_INT 500
8929: LESS
8930: IFFALSE 8943
8932: GO 8934
8934: DISABLE
// heikeHurt := true ;
8935: LD_ADDR_EXP 14
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
8943: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8944: LD_INT 22
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 21
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: IFFALSE 9288
8974: GO 8976
8976: DISABLE
8977: LD_INT 0
8979: PPUSH
8980: PPUSH
8981: PPUSH
// begin uc_side := 3 ;
8982: LD_ADDR_OWVAR 20
8986: PUSH
8987: LD_INT 3
8989: ST_TO_ADDR
// uc_nation := 3 ;
8990: LD_ADDR_OWVAR 21
8994: PUSH
8995: LD_INT 3
8997: ST_TO_ADDR
// tmp := [ ] ;
8998: LD_ADDR_VAR 0 2
9002: PUSH
9003: EMPTY
9004: ST_TO_ADDR
// for i := 1 to 8 do
9005: LD_ADDR_VAR 0 1
9009: PUSH
9010: DOUBLE
9011: LD_INT 1
9013: DEC
9014: ST_TO_ADDR
9015: LD_INT 8
9017: PUSH
9018: FOR_TO
9019: IFFALSE 9127
// begin PrepareHuman ( false , 1 , 4 ) ;
9021: LD_INT 0
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: LD_INT 4
9029: PPUSH
9030: CALL_OW 380
// un := CreateHuman ;
9034: LD_ADDR_VAR 0 3
9038: PUSH
9039: CALL_OW 44
9043: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9044: LD_VAR 0 3
9048: PPUSH
9049: LD_INT 4
9051: PPUSH
9052: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9056: LD_VAR 0 3
9060: PPUSH
9061: LD_INT 158
9063: PPUSH
9064: LD_INT 80
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9074: LD_VAR 0 3
9078: PPUSH
9079: LD_INT 147
9081: PPUSH
9082: LD_INT 75
9084: PPUSH
9085: CALL_OW 111
// wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9096: LD_ADDR_VAR 0 2
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_VAR 0 2
9110: PUSH
9111: LD_INT 1
9113: PLUS
9114: PPUSH
9115: LD_VAR 0 3
9119: PPUSH
9120: CALL_OW 1
9124: ST_TO_ADDR
// end ;
9125: GO 9018
9127: POP
9128: POP
// repeat wait ( 0 0$1 ) ;
9129: LD_INT 35
9131: PPUSH
9132: CALL_OW 67
// for i in tmp do
9136: LD_ADDR_VAR 0 1
9140: PUSH
9141: LD_VAR 0 2
9145: PUSH
9146: FOR_IN
9147: IFFALSE 9268
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9149: LD_ADDR_VAR 0 3
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_INT 3
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PPUSH
9169: LD_VAR 0 1
9173: PPUSH
9174: CALL_OW 74
9178: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9179: LD_VAR 0 3
9183: PUSH
9184: LD_INT 1
9186: ARRAY
9187: PPUSH
9188: CALL_OW 250
9192: PPUSH
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PPUSH
9202: CALL_OW 251
9206: PPUSH
9207: CALL_OW 428
9211: IFFALSE 9252
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9213: LD_VAR 0 1
9217: PPUSH
9218: LD_VAR 0 3
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PPUSH
9227: CALL_OW 250
9231: PPUSH
9232: LD_VAR 0 3
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: PPUSH
9241: CALL_OW 251
9245: PPUSH
9246: CALL_OW 114
9250: GO 9266
// ComAttackUnit ( i , Heike ) ;
9252: LD_VAR 0 1
9256: PPUSH
9257: LD_EXP 16
9261: PPUSH
9262: CALL_OW 115
// end ;
9266: GO 9146
9268: POP
9269: POP
// until IsDead ( Heike ) or not tmp ;
9270: LD_EXP 16
9274: PPUSH
9275: CALL_OW 301
9279: PUSH
9280: LD_VAR 0 2
9284: NOT
9285: OR
9286: IFFALSE 9129
// end ;
9288: PPOPN 3
9290: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9291: LD_EXP 12
9295: PUSH
9296: LD_EXP 16
9300: PPUSH
9301: CALL_OW 302
9305: AND
9306: PUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_INT 21
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 22
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 50
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 71
9345: PUSH
9346: LD_INT 0
9348: EQUAL
9349: AND
9350: IFFALSE 9680
9352: GO 9354
9354: DISABLE
9355: LD_INT 0
9357: PPUSH
// begin if not heikeHurt then
9358: LD_EXP 14
9362: NOT
9363: IFFALSE 9372
// SetAchievement ( ACH_INVINCIBLE ) ;
9365: LD_STRING ACH_INVINCIBLE
9367: PPUSH
9368: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9372: LD_ADDR_VAR 0 1
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 1
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 50
9399: PUSH
9400: EMPTY
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: PPUSH
9408: CALL_OW 69
9412: ST_TO_ADDR
// if prisonFound then
9413: LD_EXP 13
9417: IFFALSE 9431
// AddMedal ( med1 , 1 ) else
9419: LD_STRING med1
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 101
9429: GO 9442
// AddMedal ( med1 , - 1 ) ;
9431: LD_STRING med1
9433: PPUSH
9434: LD_INT 1
9436: NEG
9437: PPUSH
9438: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9442: LD_VAR 0 1
9446: PUSH
9447: LD_INT 3
9449: LESS
9450: PUSH
9451: LD_EXP 13
9455: NOT
9456: AND
9457: PUSH
9458: LD_VAR 0 1
9462: PUSH
9463: LD_INT 4
9465: LESS
9466: PUSH
9467: LD_EXP 13
9471: AND
9472: OR
9473: IFFALSE 9488
// AddMedal ( med2 , - 1 ) else
9475: LD_STRING med2
9477: PPUSH
9478: LD_INT 1
9480: NEG
9481: PPUSH
9482: CALL_OW 101
9486: GO 9498
// AddMedal ( med2 , 1 ) ;
9488: LD_STRING med2
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9498: LD_EXP 13
9502: PUSH
9503: LD_EXP 4
9507: AND
9508: PUSH
9509: LD_VAR 0 1
9513: PUSH
9514: LD_INT 4
9516: GREATEREQUAL
9517: AND
9518: IFFALSE 9532
// AddMedal ( med3 , 1 ) else
9520: LD_STRING med3
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 101
9530: GO 9543
// AddMedal ( med3 , - 1 ) ;
9532: LD_STRING med3
9534: PPUSH
9535: LD_INT 1
9537: NEG
9538: PPUSH
9539: CALL_OW 101
// GiveMedals ( MAIN ) ;
9543: LD_STRING MAIN
9545: PPUSH
9546: CALL_OW 102
// RewardPeople ( tmp ) ;
9550: LD_VAR 0 1
9554: PPUSH
9555: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9559: LD_EXP 16
9563: PPUSH
9564: LD_STRING 01_Heike
9566: PPUSH
9567: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9571: LD_EXP 18
9575: PPUSH
9576: CALL_OW 302
9580: PUSH
9581: LD_EXP 18
9585: PUSH
9586: LD_VAR 0 1
9590: IN
9591: AND
9592: IFFALSE 9606
// SaveCharacters ( Givi , 01_Givi ) ;
9594: LD_EXP 18
9598: PPUSH
9599: LD_STRING 01_Givi
9601: PPUSH
9602: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9606: LD_EXP 19
9610: PPUSH
9611: CALL_OW 302
9615: PUSH
9616: LD_EXP 19
9620: PUSH
9621: LD_VAR 0 1
9625: IN
9626: AND
9627: IFFALSE 9641
// SaveCharacters ( Mike , 01_Mike ) ;
9629: LD_EXP 19
9633: PPUSH
9634: LD_STRING 01_Mike
9636: PPUSH
9637: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9641: LD_EXP 20
9645: PPUSH
9646: CALL_OW 302
9650: PUSH
9651: LD_EXP 20
9655: PUSH
9656: LD_VAR 0 1
9660: IN
9661: AND
9662: IFFALSE 9676
// SaveCharacters ( Kamil , 01_Kamil ) ;
9664: LD_EXP 20
9668: PPUSH
9669: LD_STRING 01_Kamil
9671: PPUSH
9672: CALL_OW 38
// YouWin ;
9676: CALL_OW 103
// end ; end_of_file
9680: PPOPN 1
9682: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9683: LD_VAR 0 1
9687: PUSH
9688: LD_EXP 16
9692: EQUAL
9693: IFFALSE 9702
// YouLost ( Heike ) ;
9695: LD_STRING Heike
9697: PPUSH
9698: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 3
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 25
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 69
9735: IN
9736: IFFALSE 9842
// begin if un in russianPatrol then
9738: LD_VAR 0 1
9742: PUSH
9743: LD_EXP 21
9747: IN
9748: IFFALSE 9766
// russianPatrol := russianPatrol diff un ;
9750: LD_ADDR_EXP 21
9754: PUSH
9755: LD_EXP 21
9759: PUSH
9760: LD_VAR 0 1
9764: DIFF
9765: ST_TO_ADDR
// if un in russianForestPatrol then
9766: LD_VAR 0 1
9770: PUSH
9771: LD_EXP 22
9775: IN
9776: IFFALSE 9794
// russianForestPatrol := russianForestPatrol diff un ;
9778: LD_ADDR_EXP 22
9782: PUSH
9783: LD_EXP 22
9787: PUSH
9788: LD_VAR 0 1
9792: DIFF
9793: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9794: LD_ADDR_EXP 5
9798: PUSH
9799: LD_EXP 5
9803: PPUSH
9804: LD_EXP 5
9808: PUSH
9809: LD_INT 1
9811: PLUS
9812: PPUSH
9813: LD_VAR 0 1
9817: PPUSH
9818: CALL_OW 250
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 251
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// end ; end ;
9842: PPOPN 1
9844: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9845: LD_VAR 0 1
9849: PUSH
9850: LD_EXP 16
9854: EQUAL
9855: IFFALSE 9864
// YouLost ( Heike ) ;
9857: LD_STRING Heike
9859: PPUSH
9860: CALL_OW 104
// end ;
9864: PPOPN 1
9866: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 2
9874: EQUAL
9875: PUSH
9876: LD_VAR 0 2
9880: PUSH
9881: LD_INT 5
9883: EQUAL
9884: AND
9885: IFFALSE 9894
// YouLost ( FriendlyFire ) ;
9887: LD_STRING FriendlyFire
9889: PPUSH
9890: CALL_OW 104
// end ;
9894: PPOPN 2
9896: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9897: LD_EXP 17
9901: PPUSH
9902: CALL_OW 256
9906: PUSH
9907: LD_INT 250
9909: LESS
9910: IFFALSE 9922
9912: GO 9914
9914: DISABLE
// YouLost ( Olaf ) ; end_of_file
9915: LD_STRING Olaf
9917: PPUSH
9918: CALL_OW 104
9922: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9923: LD_INT 0
9925: PPUSH
// if p2 = 100 then
9926: LD_VAR 0 2
9930: PUSH
9931: LD_INT 100
9933: EQUAL
9934: IFFALSE 10883
// begin if not StreamModeActive then
9936: LD_EXP 26
9940: NOT
9941: IFFALSE 9951
// StreamModeActive := true ;
9943: LD_ADDR_EXP 26
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// if p3 = 0 then
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 0
9958: EQUAL
9959: IFFALSE 9965
// InitStreamMode ;
9961: CALL 11043 0 0
// if p3 = 1 then
9965: LD_VAR 0 3
9969: PUSH
9970: LD_INT 1
9972: EQUAL
9973: IFFALSE 9983
// sRocket := true ;
9975: LD_ADDR_EXP 31
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// if p3 = 2 then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 2
9990: EQUAL
9991: IFFALSE 10001
// sSpeed := true ;
9993: LD_ADDR_EXP 30
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// if p3 = 3 then
10001: LD_VAR 0 3
10005: PUSH
10006: LD_INT 3
10008: EQUAL
10009: IFFALSE 10019
// sEngine := true ;
10011: LD_ADDR_EXP 32
10015: PUSH
10016: LD_INT 1
10018: ST_TO_ADDR
// if p3 = 4 then
10019: LD_VAR 0 3
10023: PUSH
10024: LD_INT 4
10026: EQUAL
10027: IFFALSE 10037
// sSpec := true ;
10029: LD_ADDR_EXP 29
10033: PUSH
10034: LD_INT 1
10036: ST_TO_ADDR
// if p3 = 5 then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 5
10044: EQUAL
10045: IFFALSE 10055
// sLevel := true ;
10047: LD_ADDR_EXP 33
10051: PUSH
10052: LD_INT 1
10054: ST_TO_ADDR
// if p3 = 6 then
10055: LD_VAR 0 3
10059: PUSH
10060: LD_INT 6
10062: EQUAL
10063: IFFALSE 10073
// sArmoury := true ;
10065: LD_ADDR_EXP 34
10069: PUSH
10070: LD_INT 1
10072: ST_TO_ADDR
// if p3 = 7 then
10073: LD_VAR 0 3
10077: PUSH
10078: LD_INT 7
10080: EQUAL
10081: IFFALSE 10091
// sRadar := true ;
10083: LD_ADDR_EXP 35
10087: PUSH
10088: LD_INT 1
10090: ST_TO_ADDR
// if p3 = 8 then
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 8
10098: EQUAL
10099: IFFALSE 10109
// sBunker := true ;
10101: LD_ADDR_EXP 36
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// if p3 = 9 then
10109: LD_VAR 0 3
10113: PUSH
10114: LD_INT 9
10116: EQUAL
10117: IFFALSE 10127
// sHack := true ;
10119: LD_ADDR_EXP 37
10123: PUSH
10124: LD_INT 1
10126: ST_TO_ADDR
// if p3 = 10 then
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 10
10134: EQUAL
10135: IFFALSE 10145
// sFire := true ;
10137: LD_ADDR_EXP 38
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// if p3 = 11 then
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 11
10152: EQUAL
10153: IFFALSE 10163
// sRefresh := true ;
10155: LD_ADDR_EXP 39
10159: PUSH
10160: LD_INT 1
10162: ST_TO_ADDR
// if p3 = 12 then
10163: LD_VAR 0 3
10167: PUSH
10168: LD_INT 12
10170: EQUAL
10171: IFFALSE 10181
// sExp := true ;
10173: LD_ADDR_EXP 40
10177: PUSH
10178: LD_INT 1
10180: ST_TO_ADDR
// if p3 = 13 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 13
10188: EQUAL
10189: IFFALSE 10199
// sDepot := true ;
10191: LD_ADDR_EXP 41
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 14 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 14
10206: EQUAL
10207: IFFALSE 10217
// sFlag := true ;
10209: LD_ADDR_EXP 42
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 15 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 15
10224: EQUAL
10225: IFFALSE 10235
// sKamikadze := true ;
10227: LD_ADDR_EXP 50
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 16 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 16
10242: EQUAL
10243: IFFALSE 10253
// sTroll := true ;
10245: LD_ADDR_EXP 51
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 17 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 17
10260: EQUAL
10261: IFFALSE 10271
// sSlow := true ;
10263: LD_ADDR_EXP 52
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 18 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 18
10278: EQUAL
10279: IFFALSE 10289
// sLack := true ;
10281: LD_ADDR_EXP 53
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 19 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 19
10296: EQUAL
10297: IFFALSE 10307
// sTank := true ;
10299: LD_ADDR_EXP 55
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 20 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 20
10314: EQUAL
10315: IFFALSE 10325
// sRemote := true ;
10317: LD_ADDR_EXP 56
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 21 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 21
10332: EQUAL
10333: IFFALSE 10343
// sPowell := true ;
10335: LD_ADDR_EXP 57
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 22 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 22
10350: EQUAL
10351: IFFALSE 10361
// sTeleport := true ;
10353: LD_ADDR_EXP 60
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 23 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 23
10368: EQUAL
10369: IFFALSE 10379
// sOilTower := true ;
10371: LD_ADDR_EXP 62
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 24 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 24
10386: EQUAL
10387: IFFALSE 10397
// sShovel := true ;
10389: LD_ADDR_EXP 63
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 25 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 25
10404: EQUAL
10405: IFFALSE 10415
// sSheik := true ;
10407: LD_ADDR_EXP 64
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 26 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 26
10422: EQUAL
10423: IFFALSE 10433
// sEarthquake := true ;
10425: LD_ADDR_EXP 66
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 27 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 27
10440: EQUAL
10441: IFFALSE 10451
// sAI := true ;
10443: LD_ADDR_EXP 67
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 28 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 28
10458: EQUAL
10459: IFFALSE 10469
// sCargo := true ;
10461: LD_ADDR_EXP 70
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 29 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 29
10476: EQUAL
10477: IFFALSE 10487
// sDLaser := true ;
10479: LD_ADDR_EXP 71
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 30 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 30
10494: EQUAL
10495: IFFALSE 10505
// sExchange := true ;
10497: LD_ADDR_EXP 72
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 31 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 31
10512: EQUAL
10513: IFFALSE 10523
// sFac := true ;
10515: LD_ADDR_EXP 73
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 32 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 32
10530: EQUAL
10531: IFFALSE 10541
// sPower := true ;
10533: LD_ADDR_EXP 74
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 33 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 33
10548: EQUAL
10549: IFFALSE 10559
// sRandom := true ;
10551: LD_ADDR_EXP 75
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 34 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 34
10566: EQUAL
10567: IFFALSE 10577
// sShield := true ;
10569: LD_ADDR_EXP 76
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 35 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 35
10584: EQUAL
10585: IFFALSE 10595
// sTime := true ;
10587: LD_ADDR_EXP 77
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 36 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 36
10602: EQUAL
10603: IFFALSE 10613
// sTools := true ;
10605: LD_ADDR_EXP 78
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 101 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 101
10620: EQUAL
10621: IFFALSE 10631
// sSold := true ;
10623: LD_ADDR_EXP 43
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 102 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 102
10638: EQUAL
10639: IFFALSE 10649
// sDiff := true ;
10641: LD_ADDR_EXP 44
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 103 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 103
10656: EQUAL
10657: IFFALSE 10667
// sFog := true ;
10659: LD_ADDR_EXP 47
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 104 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 104
10674: EQUAL
10675: IFFALSE 10685
// sReset := true ;
10677: LD_ADDR_EXP 48
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 105 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 105
10692: EQUAL
10693: IFFALSE 10703
// sSun := true ;
10695: LD_ADDR_EXP 49
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 106 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 106
10710: EQUAL
10711: IFFALSE 10721
// sTiger := true ;
10713: LD_ADDR_EXP 45
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 107 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 107
10728: EQUAL
10729: IFFALSE 10739
// sBomb := true ;
10731: LD_ADDR_EXP 46
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 108 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 108
10746: EQUAL
10747: IFFALSE 10757
// sWound := true ;
10749: LD_ADDR_EXP 54
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 109 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 109
10764: EQUAL
10765: IFFALSE 10775
// sBetray := true ;
10767: LD_ADDR_EXP 58
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 110 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 110
10782: EQUAL
10783: IFFALSE 10793
// sContamin := true ;
10785: LD_ADDR_EXP 59
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 111 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 111
10800: EQUAL
10801: IFFALSE 10811
// sOil := true ;
10803: LD_ADDR_EXP 61
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 112 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 112
10818: EQUAL
10819: IFFALSE 10829
// sStu := true ;
10821: LD_ADDR_EXP 65
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 113 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 113
10836: EQUAL
10837: IFFALSE 10847
// sBazooka := true ;
10839: LD_ADDR_EXP 68
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 114 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 114
10854: EQUAL
10855: IFFALSE 10865
// sMortar := true ;
10857: LD_ADDR_EXP 69
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 115 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 115
10872: EQUAL
10873: IFFALSE 10883
// sRanger := true ;
10875: LD_ADDR_EXP 79
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// end ; if p2 = 101 then
10883: LD_VAR 0 2
10887: PUSH
10888: LD_INT 101
10890: EQUAL
10891: IFFALSE 11019
// begin case p3 of 1 :
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 1
10900: DOUBLE
10901: EQUAL
10902: IFTRUE 10906
10904: GO 10913
10906: POP
// hHackUnlimitedResources ; 2 :
10907: CALL 22056 0 0
10911: GO 11019
10913: LD_INT 2
10915: DOUBLE
10916: EQUAL
10917: IFTRUE 10921
10919: GO 10928
10921: POP
// hHackSetLevel10 ; 3 :
10922: CALL 22189 0 0
10926: GO 11019
10928: LD_INT 3
10930: DOUBLE
10931: EQUAL
10932: IFTRUE 10936
10934: GO 10943
10936: POP
// hHackSetLevel10YourUnits ; 4 :
10937: CALL 22274 0 0
10941: GO 11019
10943: LD_INT 4
10945: DOUBLE
10946: EQUAL
10947: IFTRUE 10951
10949: GO 10958
10951: POP
// hHackInvincible ; 5 :
10952: CALL 22722 0 0
10956: GO 11019
10958: LD_INT 5
10960: DOUBLE
10961: EQUAL
10962: IFTRUE 10966
10964: GO 10973
10966: POP
// hHackInvisible ; 6 :
10967: CALL 22833 0 0
10971: GO 11019
10973: LD_INT 6
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 10988
10981: POP
// hHackChangeYourSide ; 7 :
10982: CALL 22890 0 0
10986: GO 11019
10988: LD_INT 7
10990: DOUBLE
10991: EQUAL
10992: IFTRUE 10996
10994: GO 11003
10996: POP
// hHackChangeUnitSide ; 8 :
10997: CALL 22932 0 0
11001: GO 11019
11003: LD_INT 8
11005: DOUBLE
11006: EQUAL
11007: IFTRUE 11011
11009: GO 11018
11011: POP
// hHackFog ; end ;
11012: CALL 23033 0 0
11016: GO 11019
11018: POP
// end ; end ;
11019: LD_VAR 0 7
11023: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11024: GO 11026
11026: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11027: LD_STRING initStreamRollete();
11029: PPUSH
11030: CALL_OW 559
// InitStreamMode ;
11034: CALL 11043 0 0
// DefineStreamItems ( ) ;
11038: CALL 11483 0 0
// end ;
11042: END
// function InitStreamMode ; begin
11043: LD_INT 0
11045: PPUSH
// streamModeActive := false ;
11046: LD_ADDR_EXP 26
11050: PUSH
11051: LD_INT 0
11053: ST_TO_ADDR
// normalCounter := 36 ;
11054: LD_ADDR_EXP 27
11058: PUSH
11059: LD_INT 36
11061: ST_TO_ADDR
// hardcoreCounter := 16 ;
11062: LD_ADDR_EXP 28
11066: PUSH
11067: LD_INT 16
11069: ST_TO_ADDR
// sRocket := false ;
11070: LD_ADDR_EXP 31
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// sSpeed := false ;
11078: LD_ADDR_EXP 30
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// sEngine := false ;
11086: LD_ADDR_EXP 32
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// sSpec := false ;
11094: LD_ADDR_EXP 29
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// sLevel := false ;
11102: LD_ADDR_EXP 33
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// sArmoury := false ;
11110: LD_ADDR_EXP 34
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// sRadar := false ;
11118: LD_ADDR_EXP 35
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// sBunker := false ;
11126: LD_ADDR_EXP 36
11130: PUSH
11131: LD_INT 0
11133: ST_TO_ADDR
// sHack := false ;
11134: LD_ADDR_EXP 37
11138: PUSH
11139: LD_INT 0
11141: ST_TO_ADDR
// sFire := false ;
11142: LD_ADDR_EXP 38
11146: PUSH
11147: LD_INT 0
11149: ST_TO_ADDR
// sRefresh := false ;
11150: LD_ADDR_EXP 39
11154: PUSH
11155: LD_INT 0
11157: ST_TO_ADDR
// sExp := false ;
11158: LD_ADDR_EXP 40
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// sDepot := false ;
11166: LD_ADDR_EXP 41
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// sFlag := false ;
11174: LD_ADDR_EXP 42
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// sKamikadze := false ;
11182: LD_ADDR_EXP 50
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// sTroll := false ;
11190: LD_ADDR_EXP 51
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// sSlow := false ;
11198: LD_ADDR_EXP 52
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// sLack := false ;
11206: LD_ADDR_EXP 53
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sTank := false ;
11214: LD_ADDR_EXP 55
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sRemote := false ;
11222: LD_ADDR_EXP 56
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sPowell := false ;
11230: LD_ADDR_EXP 57
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sTeleport := false ;
11238: LD_ADDR_EXP 60
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sOilTower := false ;
11246: LD_ADDR_EXP 62
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sShovel := false ;
11254: LD_ADDR_EXP 63
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// sSheik := false ;
11262: LD_ADDR_EXP 64
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// sEarthquake := false ;
11270: LD_ADDR_EXP 66
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sAI := false ;
11278: LD_ADDR_EXP 67
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sCargo := false ;
11286: LD_ADDR_EXP 70
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sDLaser := false ;
11294: LD_ADDR_EXP 71
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sExchange := false ;
11302: LD_ADDR_EXP 72
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sFac := false ;
11310: LD_ADDR_EXP 73
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sPower := false ;
11318: LD_ADDR_EXP 74
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sRandom := false ;
11326: LD_ADDR_EXP 75
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sShield := false ;
11334: LD_ADDR_EXP 76
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sTime := false ;
11342: LD_ADDR_EXP 77
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sTools := false ;
11350: LD_ADDR_EXP 78
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sSold := false ;
11358: LD_ADDR_EXP 43
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sDiff := false ;
11366: LD_ADDR_EXP 44
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sFog := false ;
11374: LD_ADDR_EXP 47
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sReset := false ;
11382: LD_ADDR_EXP 48
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sSun := false ;
11390: LD_ADDR_EXP 49
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sTiger := false ;
11398: LD_ADDR_EXP 45
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sBomb := false ;
11406: LD_ADDR_EXP 46
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sWound := false ;
11414: LD_ADDR_EXP 54
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sBetray := false ;
11422: LD_ADDR_EXP 58
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sContamin := false ;
11430: LD_ADDR_EXP 59
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// sOil := false ;
11438: LD_ADDR_EXP 61
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// sStu := false ;
11446: LD_ADDR_EXP 65
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// sBazooka := false ;
11454: LD_ADDR_EXP 68
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// sMortar := false ;
11462: LD_ADDR_EXP 69
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// sRanger := false ;
11470: LD_ADDR_EXP 79
11474: PUSH
11475: LD_INT 0
11477: ST_TO_ADDR
// end ;
11478: LD_VAR 0 1
11482: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11483: LD_INT 0
11485: PPUSH
11486: PPUSH
11487: PPUSH
11488: PPUSH
11489: PPUSH
// result := [ ] ;
11490: LD_ADDR_VAR 0 1
11494: PUSH
11495: EMPTY
11496: ST_TO_ADDR
// if campaign_id = 1 then
11497: LD_OWVAR 69
11501: PUSH
11502: LD_INT 1
11504: EQUAL
11505: IFFALSE 14443
// begin case mission_number of 1 :
11507: LD_OWVAR 70
11511: PUSH
11512: LD_INT 1
11514: DOUBLE
11515: EQUAL
11516: IFTRUE 11520
11518: GO 11584
11520: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11521: LD_ADDR_VAR 0 1
11525: PUSH
11526: LD_INT 2
11528: PUSH
11529: LD_INT 4
11531: PUSH
11532: LD_INT 11
11534: PUSH
11535: LD_INT 12
11537: PUSH
11538: LD_INT 15
11540: PUSH
11541: LD_INT 16
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_INT 23
11549: PUSH
11550: LD_INT 26
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 101
11566: PUSH
11567: LD_INT 102
11569: PUSH
11570: LD_INT 106
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: ST_TO_ADDR
11582: GO 14441
11584: LD_INT 2
11586: DOUBLE
11587: EQUAL
11588: IFTRUE 11592
11590: GO 11664
11592: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11593: LD_ADDR_VAR 0 1
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 4
11603: PUSH
11604: LD_INT 11
11606: PUSH
11607: LD_INT 12
11609: PUSH
11610: LD_INT 15
11612: PUSH
11613: LD_INT 16
11615: PUSH
11616: LD_INT 22
11618: PUSH
11619: LD_INT 23
11621: PUSH
11622: LD_INT 26
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 101
11638: PUSH
11639: LD_INT 102
11641: PUSH
11642: LD_INT 105
11644: PUSH
11645: LD_INT 106
11647: PUSH
11648: LD_INT 108
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: ST_TO_ADDR
11662: GO 14441
11664: LD_INT 3
11666: DOUBLE
11667: EQUAL
11668: IFTRUE 11672
11670: GO 11748
11672: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11673: LD_ADDR_VAR 0 1
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 4
11683: PUSH
11684: LD_INT 5
11686: PUSH
11687: LD_INT 11
11689: PUSH
11690: LD_INT 12
11692: PUSH
11693: LD_INT 15
11695: PUSH
11696: LD_INT 16
11698: PUSH
11699: LD_INT 22
11701: PUSH
11702: LD_INT 26
11704: PUSH
11705: LD_INT 36
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 101
11722: PUSH
11723: LD_INT 102
11725: PUSH
11726: LD_INT 105
11728: PUSH
11729: LD_INT 106
11731: PUSH
11732: LD_INT 108
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
11746: GO 14441
11748: LD_INT 4
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11840
11756: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11757: LD_ADDR_VAR 0 1
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 4
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: LD_INT 8
11773: PUSH
11774: LD_INT 11
11776: PUSH
11777: LD_INT 12
11779: PUSH
11780: LD_INT 15
11782: PUSH
11783: LD_INT 16
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 23
11791: PUSH
11792: LD_INT 26
11794: PUSH
11795: LD_INT 36
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 101
11814: PUSH
11815: LD_INT 102
11817: PUSH
11818: LD_INT 105
11820: PUSH
11821: LD_INT 106
11823: PUSH
11824: LD_INT 108
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: ST_TO_ADDR
11838: GO 14441
11840: LD_INT 5
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 11948
11848: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11849: LD_ADDR_VAR 0 1
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 4
11859: PUSH
11860: LD_INT 5
11862: PUSH
11863: LD_INT 6
11865: PUSH
11866: LD_INT 8
11868: PUSH
11869: LD_INT 11
11871: PUSH
11872: LD_INT 12
11874: PUSH
11875: LD_INT 15
11877: PUSH
11878: LD_INT 16
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_INT 23
11886: PUSH
11887: LD_INT 25
11889: PUSH
11890: LD_INT 26
11892: PUSH
11893: LD_INT 36
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 101
11914: PUSH
11915: LD_INT 102
11917: PUSH
11918: LD_INT 105
11920: PUSH
11921: LD_INT 106
11923: PUSH
11924: LD_INT 108
11926: PUSH
11927: LD_INT 109
11929: PUSH
11930: LD_INT 112
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: ST_TO_ADDR
11946: GO 14441
11948: LD_INT 6
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 12076
11956: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11957: LD_ADDR_VAR 0 1
11961: PUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 4
11967: PUSH
11968: LD_INT 5
11970: PUSH
11971: LD_INT 6
11973: PUSH
11974: LD_INT 8
11976: PUSH
11977: LD_INT 11
11979: PUSH
11980: LD_INT 12
11982: PUSH
11983: LD_INT 15
11985: PUSH
11986: LD_INT 16
11988: PUSH
11989: LD_INT 20
11991: PUSH
11992: LD_INT 21
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 23
12000: PUSH
12001: LD_INT 25
12003: PUSH
12004: LD_INT 26
12006: PUSH
12007: LD_INT 30
12009: PUSH
12010: LD_INT 31
12012: PUSH
12013: LD_INT 32
12015: PUSH
12016: LD_INT 36
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 101
12042: PUSH
12043: LD_INT 102
12045: PUSH
12046: LD_INT 105
12048: PUSH
12049: LD_INT 106
12051: PUSH
12052: LD_INT 108
12054: PUSH
12055: LD_INT 109
12057: PUSH
12058: LD_INT 112
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: ST_TO_ADDR
12074: GO 14441
12076: LD_INT 7
12078: DOUBLE
12079: EQUAL
12080: IFTRUE 12084
12082: GO 12184
12084: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12085: LD_ADDR_VAR 0 1
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 4
12095: PUSH
12096: LD_INT 5
12098: PUSH
12099: LD_INT 7
12101: PUSH
12102: LD_INT 11
12104: PUSH
12105: LD_INT 12
12107: PUSH
12108: LD_INT 15
12110: PUSH
12111: LD_INT 16
12113: PUSH
12114: LD_INT 20
12116: PUSH
12117: LD_INT 21
12119: PUSH
12120: LD_INT 22
12122: PUSH
12123: LD_INT 23
12125: PUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 26
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 101
12150: PUSH
12151: LD_INT 102
12153: PUSH
12154: LD_INT 103
12156: PUSH
12157: LD_INT 105
12159: PUSH
12160: LD_INT 106
12162: PUSH
12163: LD_INT 108
12165: PUSH
12166: LD_INT 112
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: ST_TO_ADDR
12182: GO 14441
12184: LD_INT 8
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12320
12192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12193: LD_ADDR_VAR 0 1
12197: PUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 4
12203: PUSH
12204: LD_INT 5
12206: PUSH
12207: LD_INT 6
12209: PUSH
12210: LD_INT 7
12212: PUSH
12213: LD_INT 8
12215: PUSH
12216: LD_INT 11
12218: PUSH
12219: LD_INT 12
12221: PUSH
12222: LD_INT 15
12224: PUSH
12225: LD_INT 16
12227: PUSH
12228: LD_INT 20
12230: PUSH
12231: LD_INT 21
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_INT 23
12239: PUSH
12240: LD_INT 25
12242: PUSH
12243: LD_INT 26
12245: PUSH
12246: LD_INT 30
12248: PUSH
12249: LD_INT 31
12251: PUSH
12252: LD_INT 32
12254: PUSH
12255: LD_INT 36
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 101
12282: PUSH
12283: LD_INT 102
12285: PUSH
12286: LD_INT 103
12288: PUSH
12289: LD_INT 105
12291: PUSH
12292: LD_INT 106
12294: PUSH
12295: LD_INT 108
12297: PUSH
12298: LD_INT 109
12300: PUSH
12301: LD_INT 112
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: ST_TO_ADDR
12318: GO 14441
12320: LD_INT 9
12322: DOUBLE
12323: EQUAL
12324: IFTRUE 12328
12326: GO 12464
12328: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: LD_INT 4
12339: PUSH
12340: LD_INT 5
12342: PUSH
12343: LD_INT 6
12345: PUSH
12346: LD_INT 7
12348: PUSH
12349: LD_INT 8
12351: PUSH
12352: LD_INT 11
12354: PUSH
12355: LD_INT 12
12357: PUSH
12358: LD_INT 15
12360: PUSH
12361: LD_INT 16
12363: PUSH
12364: LD_INT 20
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 23
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 26
12381: PUSH
12382: LD_INT 28
12384: PUSH
12385: LD_INT 30
12387: PUSH
12388: LD_INT 31
12390: PUSH
12391: LD_INT 32
12393: PUSH
12394: LD_INT 36
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 101
12422: PUSH
12423: LD_INT 102
12425: PUSH
12426: LD_INT 103
12428: PUSH
12429: LD_INT 105
12431: PUSH
12432: LD_INT 106
12434: PUSH
12435: LD_INT 108
12437: PUSH
12438: LD_INT 109
12440: PUSH
12441: LD_INT 112
12443: PUSH
12444: LD_INT 114
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: ST_TO_ADDR
12462: GO 14441
12464: LD_INT 10
12466: DOUBLE
12467: EQUAL
12468: IFTRUE 12472
12470: GO 12656
12472: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12473: LD_ADDR_VAR 0 1
12477: PUSH
12478: LD_INT 2
12480: PUSH
12481: LD_INT 4
12483: PUSH
12484: LD_INT 5
12486: PUSH
12487: LD_INT 6
12489: PUSH
12490: LD_INT 7
12492: PUSH
12493: LD_INT 8
12495: PUSH
12496: LD_INT 9
12498: PUSH
12499: LD_INT 10
12501: PUSH
12502: LD_INT 11
12504: PUSH
12505: LD_INT 12
12507: PUSH
12508: LD_INT 13
12510: PUSH
12511: LD_INT 14
12513: PUSH
12514: LD_INT 15
12516: PUSH
12517: LD_INT 16
12519: PUSH
12520: LD_INT 17
12522: PUSH
12523: LD_INT 18
12525: PUSH
12526: LD_INT 19
12528: PUSH
12529: LD_INT 20
12531: PUSH
12532: LD_INT 21
12534: PUSH
12535: LD_INT 22
12537: PUSH
12538: LD_INT 23
12540: PUSH
12541: LD_INT 24
12543: PUSH
12544: LD_INT 25
12546: PUSH
12547: LD_INT 26
12549: PUSH
12550: LD_INT 28
12552: PUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 31
12558: PUSH
12559: LD_INT 32
12561: PUSH
12562: LD_INT 36
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 101
12598: PUSH
12599: LD_INT 102
12601: PUSH
12602: LD_INT 103
12604: PUSH
12605: LD_INT 104
12607: PUSH
12608: LD_INT 105
12610: PUSH
12611: LD_INT 106
12613: PUSH
12614: LD_INT 107
12616: PUSH
12617: LD_INT 108
12619: PUSH
12620: LD_INT 109
12622: PUSH
12623: LD_INT 110
12625: PUSH
12626: LD_INT 111
12628: PUSH
12629: LD_INT 112
12631: PUSH
12632: LD_INT 114
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: ST_TO_ADDR
12654: GO 14441
12656: LD_INT 11
12658: DOUBLE
12659: EQUAL
12660: IFTRUE 12664
12662: GO 12856
12664: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: LD_INT 3
12675: PUSH
12676: LD_INT 4
12678: PUSH
12679: LD_INT 5
12681: PUSH
12682: LD_INT 6
12684: PUSH
12685: LD_INT 7
12687: PUSH
12688: LD_INT 8
12690: PUSH
12691: LD_INT 9
12693: PUSH
12694: LD_INT 10
12696: PUSH
12697: LD_INT 11
12699: PUSH
12700: LD_INT 12
12702: PUSH
12703: LD_INT 13
12705: PUSH
12706: LD_INT 14
12708: PUSH
12709: LD_INT 15
12711: PUSH
12712: LD_INT 16
12714: PUSH
12715: LD_INT 17
12717: PUSH
12718: LD_INT 18
12720: PUSH
12721: LD_INT 19
12723: PUSH
12724: LD_INT 20
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 24
12738: PUSH
12739: LD_INT 25
12741: PUSH
12742: LD_INT 26
12744: PUSH
12745: LD_INT 28
12747: PUSH
12748: LD_INT 30
12750: PUSH
12751: LD_INT 31
12753: PUSH
12754: LD_INT 32
12756: PUSH
12757: LD_INT 34
12759: PUSH
12760: LD_INT 36
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 101
12798: PUSH
12799: LD_INT 102
12801: PUSH
12802: LD_INT 103
12804: PUSH
12805: LD_INT 104
12807: PUSH
12808: LD_INT 105
12810: PUSH
12811: LD_INT 106
12813: PUSH
12814: LD_INT 107
12816: PUSH
12817: LD_INT 108
12819: PUSH
12820: LD_INT 109
12822: PUSH
12823: LD_INT 110
12825: PUSH
12826: LD_INT 111
12828: PUSH
12829: LD_INT 112
12831: PUSH
12832: LD_INT 114
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 14441
12856: LD_INT 12
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 13072
12864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_INT 1
12872: PUSH
12873: LD_INT 2
12875: PUSH
12876: LD_INT 3
12878: PUSH
12879: LD_INT 4
12881: PUSH
12882: LD_INT 5
12884: PUSH
12885: LD_INT 6
12887: PUSH
12888: LD_INT 7
12890: PUSH
12891: LD_INT 8
12893: PUSH
12894: LD_INT 9
12896: PUSH
12897: LD_INT 10
12899: PUSH
12900: LD_INT 11
12902: PUSH
12903: LD_INT 12
12905: PUSH
12906: LD_INT 13
12908: PUSH
12909: LD_INT 14
12911: PUSH
12912: LD_INT 15
12914: PUSH
12915: LD_INT 16
12917: PUSH
12918: LD_INT 17
12920: PUSH
12921: LD_INT 18
12923: PUSH
12924: LD_INT 19
12926: PUSH
12927: LD_INT 20
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_INT 23
12938: PUSH
12939: LD_INT 24
12941: PUSH
12942: LD_INT 25
12944: PUSH
12945: LD_INT 26
12947: PUSH
12948: LD_INT 27
12950: PUSH
12951: LD_INT 28
12953: PUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 31
12959: PUSH
12960: LD_INT 32
12962: PUSH
12963: LD_INT 33
12965: PUSH
12966: LD_INT 34
12968: PUSH
12969: LD_INT 36
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 101
13010: PUSH
13011: LD_INT 102
13013: PUSH
13014: LD_INT 103
13016: PUSH
13017: LD_INT 104
13019: PUSH
13020: LD_INT 105
13022: PUSH
13023: LD_INT 106
13025: PUSH
13026: LD_INT 107
13028: PUSH
13029: LD_INT 108
13031: PUSH
13032: LD_INT 109
13034: PUSH
13035: LD_INT 110
13037: PUSH
13038: LD_INT 111
13040: PUSH
13041: LD_INT 112
13043: PUSH
13044: LD_INT 113
13046: PUSH
13047: LD_INT 114
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: ST_TO_ADDR
13070: GO 14441
13072: LD_INT 13
13074: DOUBLE
13075: EQUAL
13076: IFTRUE 13080
13078: GO 13276
13080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13081: LD_ADDR_VAR 0 1
13085: PUSH
13086: LD_INT 1
13088: PUSH
13089: LD_INT 2
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: LD_INT 4
13097: PUSH
13098: LD_INT 5
13100: PUSH
13101: LD_INT 8
13103: PUSH
13104: LD_INT 9
13106: PUSH
13107: LD_INT 10
13109: PUSH
13110: LD_INT 11
13112: PUSH
13113: LD_INT 12
13115: PUSH
13116: LD_INT 14
13118: PUSH
13119: LD_INT 15
13121: PUSH
13122: LD_INT 16
13124: PUSH
13125: LD_INT 17
13127: PUSH
13128: LD_INT 18
13130: PUSH
13131: LD_INT 19
13133: PUSH
13134: LD_INT 20
13136: PUSH
13137: LD_INT 21
13139: PUSH
13140: LD_INT 22
13142: PUSH
13143: LD_INT 23
13145: PUSH
13146: LD_INT 24
13148: PUSH
13149: LD_INT 25
13151: PUSH
13152: LD_INT 26
13154: PUSH
13155: LD_INT 27
13157: PUSH
13158: LD_INT 28
13160: PUSH
13161: LD_INT 30
13163: PUSH
13164: LD_INT 31
13166: PUSH
13167: LD_INT 32
13169: PUSH
13170: LD_INT 33
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 36
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 101
13214: PUSH
13215: LD_INT 102
13217: PUSH
13218: LD_INT 103
13220: PUSH
13221: LD_INT 104
13223: PUSH
13224: LD_INT 105
13226: PUSH
13227: LD_INT 106
13229: PUSH
13230: LD_INT 107
13232: PUSH
13233: LD_INT 108
13235: PUSH
13236: LD_INT 109
13238: PUSH
13239: LD_INT 110
13241: PUSH
13242: LD_INT 111
13244: PUSH
13245: LD_INT 112
13247: PUSH
13248: LD_INT 113
13250: PUSH
13251: LD_INT 114
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: ST_TO_ADDR
13274: GO 14441
13276: LD_INT 14
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13496
13284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13285: LD_ADDR_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: LD_INT 3
13298: PUSH
13299: LD_INT 4
13301: PUSH
13302: LD_INT 5
13304: PUSH
13305: LD_INT 6
13307: PUSH
13308: LD_INT 7
13310: PUSH
13311: LD_INT 8
13313: PUSH
13314: LD_INT 9
13316: PUSH
13317: LD_INT 10
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 13
13328: PUSH
13329: LD_INT 14
13331: PUSH
13332: LD_INT 15
13334: PUSH
13335: LD_INT 16
13337: PUSH
13338: LD_INT 17
13340: PUSH
13341: LD_INT 18
13343: PUSH
13344: LD_INT 19
13346: PUSH
13347: LD_INT 20
13349: PUSH
13350: LD_INT 21
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 23
13358: PUSH
13359: LD_INT 24
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 26
13367: PUSH
13368: LD_INT 27
13370: PUSH
13371: LD_INT 28
13373: PUSH
13374: LD_INT 29
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 31
13382: PUSH
13383: LD_INT 32
13385: PUSH
13386: LD_INT 33
13388: PUSH
13389: LD_INT 34
13391: PUSH
13392: LD_INT 36
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 101
13434: PUSH
13435: LD_INT 102
13437: PUSH
13438: LD_INT 103
13440: PUSH
13441: LD_INT 104
13443: PUSH
13444: LD_INT 105
13446: PUSH
13447: LD_INT 106
13449: PUSH
13450: LD_INT 107
13452: PUSH
13453: LD_INT 108
13455: PUSH
13456: LD_INT 109
13458: PUSH
13459: LD_INT 110
13461: PUSH
13462: LD_INT 111
13464: PUSH
13465: LD_INT 112
13467: PUSH
13468: LD_INT 113
13470: PUSH
13471: LD_INT 114
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: ST_TO_ADDR
13494: GO 14441
13496: LD_INT 15
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13716
13504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13505: LD_ADDR_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: LD_INT 2
13515: PUSH
13516: LD_INT 3
13518: PUSH
13519: LD_INT 4
13521: PUSH
13522: LD_INT 5
13524: PUSH
13525: LD_INT 6
13527: PUSH
13528: LD_INT 7
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: LD_INT 9
13536: PUSH
13537: LD_INT 10
13539: PUSH
13540: LD_INT 11
13542: PUSH
13543: LD_INT 12
13545: PUSH
13546: LD_INT 13
13548: PUSH
13549: LD_INT 14
13551: PUSH
13552: LD_INT 15
13554: PUSH
13555: LD_INT 16
13557: PUSH
13558: LD_INT 17
13560: PUSH
13561: LD_INT 18
13563: PUSH
13564: LD_INT 19
13566: PUSH
13567: LD_INT 20
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 22
13575: PUSH
13576: LD_INT 23
13578: PUSH
13579: LD_INT 24
13581: PUSH
13582: LD_INT 25
13584: PUSH
13585: LD_INT 26
13587: PUSH
13588: LD_INT 27
13590: PUSH
13591: LD_INT 28
13593: PUSH
13594: LD_INT 29
13596: PUSH
13597: LD_INT 30
13599: PUSH
13600: LD_INT 31
13602: PUSH
13603: LD_INT 32
13605: PUSH
13606: LD_INT 33
13608: PUSH
13609: LD_INT 34
13611: PUSH
13612: LD_INT 36
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 101
13654: PUSH
13655: LD_INT 102
13657: PUSH
13658: LD_INT 103
13660: PUSH
13661: LD_INT 104
13663: PUSH
13664: LD_INT 105
13666: PUSH
13667: LD_INT 106
13669: PUSH
13670: LD_INT 107
13672: PUSH
13673: LD_INT 108
13675: PUSH
13676: LD_INT 109
13678: PUSH
13679: LD_INT 110
13681: PUSH
13682: LD_INT 111
13684: PUSH
13685: LD_INT 112
13687: PUSH
13688: LD_INT 113
13690: PUSH
13691: LD_INT 114
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: ST_TO_ADDR
13714: GO 14441
13716: LD_INT 16
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13848
13724: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13725: LD_ADDR_VAR 0 1
13729: PUSH
13730: LD_INT 2
13732: PUSH
13733: LD_INT 4
13735: PUSH
13736: LD_INT 5
13738: PUSH
13739: LD_INT 7
13741: PUSH
13742: LD_INT 11
13744: PUSH
13745: LD_INT 12
13747: PUSH
13748: LD_INT 15
13750: PUSH
13751: LD_INT 16
13753: PUSH
13754: LD_INT 20
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_INT 23
13765: PUSH
13766: LD_INT 25
13768: PUSH
13769: LD_INT 26
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: LD_INT 32
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 101
13810: PUSH
13811: LD_INT 102
13813: PUSH
13814: LD_INT 103
13816: PUSH
13817: LD_INT 106
13819: PUSH
13820: LD_INT 108
13822: PUSH
13823: LD_INT 112
13825: PUSH
13826: LD_INT 113
13828: PUSH
13829: LD_INT 114
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: ST_TO_ADDR
13846: GO 14441
13848: LD_INT 17
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 14068
13856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13857: LD_ADDR_VAR 0 1
13861: PUSH
13862: LD_INT 1
13864: PUSH
13865: LD_INT 2
13867: PUSH
13868: LD_INT 3
13870: PUSH
13871: LD_INT 4
13873: PUSH
13874: LD_INT 5
13876: PUSH
13877: LD_INT 6
13879: PUSH
13880: LD_INT 7
13882: PUSH
13883: LD_INT 8
13885: PUSH
13886: LD_INT 9
13888: PUSH
13889: LD_INT 10
13891: PUSH
13892: LD_INT 11
13894: PUSH
13895: LD_INT 12
13897: PUSH
13898: LD_INT 13
13900: PUSH
13901: LD_INT 14
13903: PUSH
13904: LD_INT 15
13906: PUSH
13907: LD_INT 16
13909: PUSH
13910: LD_INT 17
13912: PUSH
13913: LD_INT 18
13915: PUSH
13916: LD_INT 19
13918: PUSH
13919: LD_INT 20
13921: PUSH
13922: LD_INT 21
13924: PUSH
13925: LD_INT 22
13927: PUSH
13928: LD_INT 23
13930: PUSH
13931: LD_INT 24
13933: PUSH
13934: LD_INT 25
13936: PUSH
13937: LD_INT 26
13939: PUSH
13940: LD_INT 27
13942: PUSH
13943: LD_INT 28
13945: PUSH
13946: LD_INT 29
13948: PUSH
13949: LD_INT 30
13951: PUSH
13952: LD_INT 31
13954: PUSH
13955: LD_INT 32
13957: PUSH
13958: LD_INT 33
13960: PUSH
13961: LD_INT 34
13963: PUSH
13964: LD_INT 36
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 101
14006: PUSH
14007: LD_INT 102
14009: PUSH
14010: LD_INT 103
14012: PUSH
14013: LD_INT 104
14015: PUSH
14016: LD_INT 105
14018: PUSH
14019: LD_INT 106
14021: PUSH
14022: LD_INT 107
14024: PUSH
14025: LD_INT 108
14027: PUSH
14028: LD_INT 109
14030: PUSH
14031: LD_INT 110
14033: PUSH
14034: LD_INT 111
14036: PUSH
14037: LD_INT 112
14039: PUSH
14040: LD_INT 113
14042: PUSH
14043: LD_INT 114
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: ST_TO_ADDR
14066: GO 14441
14068: LD_INT 18
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14212
14076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14077: LD_ADDR_VAR 0 1
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: LD_INT 4
14087: PUSH
14088: LD_INT 5
14090: PUSH
14091: LD_INT 7
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 12
14099: PUSH
14100: LD_INT 15
14102: PUSH
14103: LD_INT 16
14105: PUSH
14106: LD_INT 20
14108: PUSH
14109: LD_INT 21
14111: PUSH
14112: LD_INT 22
14114: PUSH
14115: LD_INT 23
14117: PUSH
14118: LD_INT 25
14120: PUSH
14121: LD_INT 26
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: LD_INT 32
14132: PUSH
14133: LD_INT 33
14135: PUSH
14136: LD_INT 34
14138: PUSH
14139: LD_INT 35
14141: PUSH
14142: LD_INT 36
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 101
14170: PUSH
14171: LD_INT 102
14173: PUSH
14174: LD_INT 103
14176: PUSH
14177: LD_INT 106
14179: PUSH
14180: LD_INT 108
14182: PUSH
14183: LD_INT 112
14185: PUSH
14186: LD_INT 113
14188: PUSH
14189: LD_INT 114
14191: PUSH
14192: LD_INT 115
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: ST_TO_ADDR
14210: GO 14441
14212: LD_INT 19
14214: DOUBLE
14215: EQUAL
14216: IFTRUE 14220
14218: GO 14440
14220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14221: LD_ADDR_VAR 0 1
14225: PUSH
14226: LD_INT 1
14228: PUSH
14229: LD_INT 2
14231: PUSH
14232: LD_INT 3
14234: PUSH
14235: LD_INT 4
14237: PUSH
14238: LD_INT 5
14240: PUSH
14241: LD_INT 6
14243: PUSH
14244: LD_INT 7
14246: PUSH
14247: LD_INT 8
14249: PUSH
14250: LD_INT 9
14252: PUSH
14253: LD_INT 10
14255: PUSH
14256: LD_INT 11
14258: PUSH
14259: LD_INT 12
14261: PUSH
14262: LD_INT 13
14264: PUSH
14265: LD_INT 14
14267: PUSH
14268: LD_INT 15
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: LD_INT 17
14276: PUSH
14277: LD_INT 18
14279: PUSH
14280: LD_INT 19
14282: PUSH
14283: LD_INT 20
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 22
14291: PUSH
14292: LD_INT 23
14294: PUSH
14295: LD_INT 24
14297: PUSH
14298: LD_INT 25
14300: PUSH
14301: LD_INT 26
14303: PUSH
14304: LD_INT 27
14306: PUSH
14307: LD_INT 28
14309: PUSH
14310: LD_INT 29
14312: PUSH
14313: LD_INT 30
14315: PUSH
14316: LD_INT 31
14318: PUSH
14319: LD_INT 32
14321: PUSH
14322: LD_INT 33
14324: PUSH
14325: LD_INT 34
14327: PUSH
14328: LD_INT 35
14330: PUSH
14331: LD_INT 36
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 101
14374: PUSH
14375: LD_INT 102
14377: PUSH
14378: LD_INT 103
14380: PUSH
14381: LD_INT 104
14383: PUSH
14384: LD_INT 105
14386: PUSH
14387: LD_INT 106
14389: PUSH
14390: LD_INT 107
14392: PUSH
14393: LD_INT 108
14395: PUSH
14396: LD_INT 109
14398: PUSH
14399: LD_INT 110
14401: PUSH
14402: LD_INT 111
14404: PUSH
14405: LD_INT 112
14407: PUSH
14408: LD_INT 113
14410: PUSH
14411: LD_INT 114
14413: PUSH
14414: LD_INT 115
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: ST_TO_ADDR
14438: GO 14441
14440: POP
// end else
14441: GO 14660
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14443: LD_ADDR_VAR 0 1
14447: PUSH
14448: LD_INT 1
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: LD_INT 3
14456: PUSH
14457: LD_INT 4
14459: PUSH
14460: LD_INT 5
14462: PUSH
14463: LD_INT 6
14465: PUSH
14466: LD_INT 7
14468: PUSH
14469: LD_INT 8
14471: PUSH
14472: LD_INT 9
14474: PUSH
14475: LD_INT 10
14477: PUSH
14478: LD_INT 11
14480: PUSH
14481: LD_INT 12
14483: PUSH
14484: LD_INT 13
14486: PUSH
14487: LD_INT 14
14489: PUSH
14490: LD_INT 15
14492: PUSH
14493: LD_INT 16
14495: PUSH
14496: LD_INT 17
14498: PUSH
14499: LD_INT 18
14501: PUSH
14502: LD_INT 19
14504: PUSH
14505: LD_INT 20
14507: PUSH
14508: LD_INT 21
14510: PUSH
14511: LD_INT 22
14513: PUSH
14514: LD_INT 23
14516: PUSH
14517: LD_INT 24
14519: PUSH
14520: LD_INT 25
14522: PUSH
14523: LD_INT 26
14525: PUSH
14526: LD_INT 27
14528: PUSH
14529: LD_INT 28
14531: PUSH
14532: LD_INT 29
14534: PUSH
14535: LD_INT 30
14537: PUSH
14538: LD_INT 31
14540: PUSH
14541: LD_INT 32
14543: PUSH
14544: LD_INT 33
14546: PUSH
14547: LD_INT 34
14549: PUSH
14550: LD_INT 35
14552: PUSH
14553: LD_INT 36
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 101
14596: PUSH
14597: LD_INT 102
14599: PUSH
14600: LD_INT 103
14602: PUSH
14603: LD_INT 104
14605: PUSH
14606: LD_INT 105
14608: PUSH
14609: LD_INT 106
14611: PUSH
14612: LD_INT 107
14614: PUSH
14615: LD_INT 108
14617: PUSH
14618: LD_INT 109
14620: PUSH
14621: LD_INT 110
14623: PUSH
14624: LD_INT 111
14626: PUSH
14627: LD_INT 112
14629: PUSH
14630: LD_INT 113
14632: PUSH
14633: LD_INT 114
14635: PUSH
14636: LD_INT 115
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: ST_TO_ADDR
// if result then
14660: LD_VAR 0 1
14664: IFFALSE 14953
// begin normal :=  ;
14666: LD_ADDR_VAR 0 3
14670: PUSH
14671: LD_STRING 
14673: ST_TO_ADDR
// hardcore :=  ;
14674: LD_ADDR_VAR 0 4
14678: PUSH
14679: LD_STRING 
14681: ST_TO_ADDR
// for i = 1 to normalCounter do
14682: LD_ADDR_VAR 0 5
14686: PUSH
14687: DOUBLE
14688: LD_INT 1
14690: DEC
14691: ST_TO_ADDR
14692: LD_EXP 27
14696: PUSH
14697: FOR_TO
14698: IFFALSE 14799
// begin tmp := 0 ;
14700: LD_ADDR_VAR 0 2
14704: PUSH
14705: LD_STRING 0
14707: ST_TO_ADDR
// if result [ 1 ] then
14708: LD_VAR 0 1
14712: PUSH
14713: LD_INT 1
14715: ARRAY
14716: IFFALSE 14781
// if result [ 1 ] [ 1 ] = i then
14718: LD_VAR 0 1
14722: PUSH
14723: LD_INT 1
14725: ARRAY
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PUSH
14731: LD_VAR 0 5
14735: EQUAL
14736: IFFALSE 14781
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14738: LD_ADDR_VAR 0 1
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: LD_VAR 0 1
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: CALL_OW 3
14767: PPUSH
14768: CALL_OW 1
14772: ST_TO_ADDR
// tmp := 1 ;
14773: LD_ADDR_VAR 0 2
14777: PUSH
14778: LD_STRING 1
14780: ST_TO_ADDR
// end ; normal := normal & tmp ;
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_VAR 0 3
14790: PUSH
14791: LD_VAR 0 2
14795: STR
14796: ST_TO_ADDR
// end ;
14797: GO 14697
14799: POP
14800: POP
// for i = 1 to hardcoreCounter do
14801: LD_ADDR_VAR 0 5
14805: PUSH
14806: DOUBLE
14807: LD_INT 1
14809: DEC
14810: ST_TO_ADDR
14811: LD_EXP 28
14815: PUSH
14816: FOR_TO
14817: IFFALSE 14922
// begin tmp := 0 ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_STRING 0
14826: ST_TO_ADDR
// if result [ 2 ] then
14827: LD_VAR 0 1
14831: PUSH
14832: LD_INT 2
14834: ARRAY
14835: IFFALSE 14904
// if result [ 2 ] [ 1 ] = 100 + i then
14837: LD_VAR 0 1
14841: PUSH
14842: LD_INT 2
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PUSH
14850: LD_INT 100
14852: PUSH
14853: LD_VAR 0 5
14857: PLUS
14858: EQUAL
14859: IFFALSE 14904
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14861: LD_ADDR_VAR 0 1
14865: PUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: LD_INT 2
14873: PPUSH
14874: LD_VAR 0 1
14878: PUSH
14879: LD_INT 2
14881: ARRAY
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: CALL_OW 3
14890: PPUSH
14891: CALL_OW 1
14895: ST_TO_ADDR
// tmp := 1 ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: LD_STRING 1
14903: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14904: LD_ADDR_VAR 0 4
14908: PUSH
14909: LD_VAR 0 4
14913: PUSH
14914: LD_VAR 0 2
14918: STR
14919: ST_TO_ADDR
// end ;
14920: GO 14816
14922: POP
14923: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14924: LD_STRING getStreamItemsFromMission("
14926: PUSH
14927: LD_VAR 0 3
14931: STR
14932: PUSH
14933: LD_STRING ","
14935: STR
14936: PUSH
14937: LD_VAR 0 4
14941: STR
14942: PUSH
14943: LD_STRING ")
14945: STR
14946: PPUSH
14947: CALL_OW 559
// end else
14951: GO 14960
// ToLua ( getStreamItemsFromMission("","") ) ;
14953: LD_STRING getStreamItemsFromMission("","")
14955: PPUSH
14956: CALL_OW 559
// end ;
14960: LD_VAR 0 1
14964: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14965: LD_EXP 26
14969: PUSH
14970: LD_EXP 31
14974: AND
14975: IFFALSE 15099
14977: GO 14979
14979: DISABLE
14980: LD_INT 0
14982: PPUSH
14983: PPUSH
// begin enable ;
14984: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14985: LD_ADDR_VAR 0 2
14989: PUSH
14990: LD_INT 22
14992: PUSH
14993: LD_OWVAR 2
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 34
15007: PUSH
15008: LD_INT 7
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 34
15017: PUSH
15018: LD_INT 45
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 34
15027: PUSH
15028: LD_INT 28
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 34
15037: PUSH
15038: LD_INT 47
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PPUSH
15056: CALL_OW 69
15060: ST_TO_ADDR
// if not tmp then
15061: LD_VAR 0 2
15065: NOT
15066: IFFALSE 15070
// exit ;
15068: GO 15099
// for i in tmp do
15070: LD_ADDR_VAR 0 1
15074: PUSH
15075: LD_VAR 0 2
15079: PUSH
15080: FOR_IN
15081: IFFALSE 15097
// begin SetLives ( i , 0 ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: LD_INT 0
15090: PPUSH
15091: CALL_OW 234
// end ;
15095: GO 15080
15097: POP
15098: POP
// end ;
15099: PPOPN 2
15101: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15102: LD_EXP 26
15106: PUSH
15107: LD_EXP 32
15111: AND
15112: IFFALSE 15196
15114: GO 15116
15116: DISABLE
15117: LD_INT 0
15119: PPUSH
15120: PPUSH
// begin enable ;
15121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15122: LD_ADDR_VAR 0 2
15126: PUSH
15127: LD_INT 22
15129: PUSH
15130: LD_OWVAR 2
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 32
15141: PUSH
15142: LD_INT 3
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PPUSH
15153: CALL_OW 69
15157: ST_TO_ADDR
// if not tmp then
15158: LD_VAR 0 2
15162: NOT
15163: IFFALSE 15167
// exit ;
15165: GO 15196
// for i in tmp do
15167: LD_ADDR_VAR 0 1
15171: PUSH
15172: LD_VAR 0 2
15176: PUSH
15177: FOR_IN
15178: IFFALSE 15194
// begin SetLives ( i , 0 ) ;
15180: LD_VAR 0 1
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL_OW 234
// end ;
15192: GO 15177
15194: POP
15195: POP
// end ;
15196: PPOPN 2
15198: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15199: LD_EXP 26
15203: PUSH
15204: LD_EXP 29
15208: AND
15209: IFFALSE 15302
15211: GO 15213
15213: DISABLE
15214: LD_INT 0
15216: PPUSH
// begin enable ;
15217: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15218: LD_ADDR_VAR 0 1
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_OWVAR 2
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 5
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 25
15250: PUSH
15251: LD_INT 9
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 25
15260: PUSH
15261: LD_INT 8
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PPUSH
15278: CALL_OW 69
15282: PUSH
15283: FOR_IN
15284: IFFALSE 15300
// begin SetClass ( i , 1 ) ;
15286: LD_VAR 0 1
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL_OW 336
// end ;
15298: GO 15283
15300: POP
15301: POP
// end ;
15302: PPOPN 1
15304: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15305: LD_EXP 26
15309: PUSH
15310: LD_EXP 30
15314: AND
15315: PUSH
15316: LD_OWVAR 65
15320: PUSH
15321: LD_INT 7
15323: LESS
15324: AND
15325: IFFALSE 15339
15327: GO 15329
15329: DISABLE
// begin enable ;
15330: ENABLE
// game_speed := 7 ;
15331: LD_ADDR_OWVAR 65
15335: PUSH
15336: LD_INT 7
15338: ST_TO_ADDR
// end ;
15339: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15340: LD_EXP 26
15344: PUSH
15345: LD_EXP 33
15349: AND
15350: IFFALSE 15552
15352: GO 15354
15354: DISABLE
15355: LD_INT 0
15357: PPUSH
15358: PPUSH
15359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_INT 81
15367: PUSH
15368: LD_OWVAR 2
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 21
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: CALL_OW 69
15395: ST_TO_ADDR
// if not tmp then
15396: LD_VAR 0 3
15400: NOT
15401: IFFALSE 15405
// exit ;
15403: GO 15552
// if tmp > 5 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 5
15412: GREATER
15413: IFFALSE 15425
// k := 5 else
15415: LD_ADDR_VAR 0 2
15419: PUSH
15420: LD_INT 5
15422: ST_TO_ADDR
15423: GO 15435
// k := tmp ;
15425: LD_ADDR_VAR 0 2
15429: PUSH
15430: LD_VAR 0 3
15434: ST_TO_ADDR
// for i := 1 to k do
15435: LD_ADDR_VAR 0 1
15439: PUSH
15440: DOUBLE
15441: LD_INT 1
15443: DEC
15444: ST_TO_ADDR
15445: LD_VAR 0 2
15449: PUSH
15450: FOR_TO
15451: IFFALSE 15550
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15453: LD_VAR 0 3
15457: PUSH
15458: LD_VAR 0 1
15462: ARRAY
15463: PPUSH
15464: LD_VAR 0 1
15468: PUSH
15469: LD_INT 4
15471: MOD
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: PPUSH
15477: CALL_OW 259
15481: PUSH
15482: LD_INT 10
15484: LESS
15485: IFFALSE 15548
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15487: LD_VAR 0 3
15491: PUSH
15492: LD_VAR 0 1
15496: ARRAY
15497: PPUSH
15498: LD_VAR 0 1
15502: PUSH
15503: LD_INT 4
15505: MOD
15506: PUSH
15507: LD_INT 1
15509: PLUS
15510: PPUSH
15511: LD_VAR 0 3
15515: PUSH
15516: LD_VAR 0 1
15520: ARRAY
15521: PPUSH
15522: LD_VAR 0 1
15526: PUSH
15527: LD_INT 4
15529: MOD
15530: PUSH
15531: LD_INT 1
15533: PLUS
15534: PPUSH
15535: CALL_OW 259
15539: PUSH
15540: LD_INT 1
15542: PLUS
15543: PPUSH
15544: CALL_OW 237
15548: GO 15450
15550: POP
15551: POP
// end ;
15552: PPOPN 3
15554: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15555: LD_EXP 26
15559: PUSH
15560: LD_EXP 34
15564: AND
15565: IFFALSE 15585
15567: GO 15569
15569: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15570: LD_INT 4
15572: PPUSH
15573: LD_OWVAR 2
15577: PPUSH
15578: LD_INT 0
15580: PPUSH
15581: CALL_OW 324
15585: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15586: LD_EXP 26
15590: PUSH
15591: LD_EXP 63
15595: AND
15596: IFFALSE 15616
15598: GO 15600
15600: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15601: LD_INT 19
15603: PPUSH
15604: LD_OWVAR 2
15608: PPUSH
15609: LD_INT 0
15611: PPUSH
15612: CALL_OW 324
15616: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15617: LD_EXP 26
15621: PUSH
15622: LD_EXP 35
15626: AND
15627: IFFALSE 15729
15629: GO 15631
15631: DISABLE
15632: LD_INT 0
15634: PPUSH
15635: PPUSH
// begin enable ;
15636: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_OWVAR 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: LD_INT 34
15659: PUSH
15660: LD_INT 11
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 34
15669: PUSH
15670: LD_INT 30
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PPUSH
15686: CALL_OW 69
15690: ST_TO_ADDR
// if not tmp then
15691: LD_VAR 0 2
15695: NOT
15696: IFFALSE 15700
// exit ;
15698: GO 15729
// for i in tmp do
15700: LD_ADDR_VAR 0 1
15704: PUSH
15705: LD_VAR 0 2
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15727
// begin SetLives ( i , 0 ) ;
15713: LD_VAR 0 1
15717: PPUSH
15718: LD_INT 0
15720: PPUSH
15721: CALL_OW 234
// end ;
15725: GO 15710
15727: POP
15728: POP
// end ;
15729: PPOPN 2
15731: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15732: LD_EXP 26
15736: PUSH
15737: LD_EXP 36
15741: AND
15742: IFFALSE 15762
15744: GO 15746
15746: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15747: LD_INT 32
15749: PPUSH
15750: LD_OWVAR 2
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL_OW 324
15762: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15763: LD_EXP 26
15767: PUSH
15768: LD_EXP 37
15772: AND
15773: IFFALSE 15954
15775: GO 15777
15777: DISABLE
15778: LD_INT 0
15780: PPUSH
15781: PPUSH
15782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15783: LD_ADDR_VAR 0 2
15787: PUSH
15788: LD_INT 22
15790: PUSH
15791: LD_OWVAR 2
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 33
15802: PUSH
15803: LD_INT 3
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PPUSH
15814: CALL_OW 69
15818: ST_TO_ADDR
// if not tmp then
15819: LD_VAR 0 2
15823: NOT
15824: IFFALSE 15828
// exit ;
15826: GO 15954
// side := 0 ;
15828: LD_ADDR_VAR 0 3
15832: PUSH
15833: LD_INT 0
15835: ST_TO_ADDR
// for i := 1 to 8 do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: DOUBLE
15842: LD_INT 1
15844: DEC
15845: ST_TO_ADDR
15846: LD_INT 8
15848: PUSH
15849: FOR_TO
15850: IFFALSE 15898
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15852: LD_OWVAR 2
15856: PUSH
15857: LD_VAR 0 1
15861: NONEQUAL
15862: PUSH
15863: LD_OWVAR 2
15867: PPUSH
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 81
15877: PUSH
15878: LD_INT 2
15880: EQUAL
15881: AND
15882: IFFALSE 15896
// begin side := i ;
15884: LD_ADDR_VAR 0 3
15888: PUSH
15889: LD_VAR 0 1
15893: ST_TO_ADDR
// break ;
15894: GO 15898
// end ;
15896: GO 15849
15898: POP
15899: POP
// if not side then
15900: LD_VAR 0 3
15904: NOT
15905: IFFALSE 15909
// exit ;
15907: GO 15954
// for i := 1 to tmp do
15909: LD_ADDR_VAR 0 1
15913: PUSH
15914: DOUBLE
15915: LD_INT 1
15917: DEC
15918: ST_TO_ADDR
15919: LD_VAR 0 2
15923: PUSH
15924: FOR_TO
15925: IFFALSE 15952
// if Prob ( 60 ) then
15927: LD_INT 60
15929: PPUSH
15930: CALL_OW 13
15934: IFFALSE 15950
// SetSide ( i , side ) ;
15936: LD_VAR 0 1
15940: PPUSH
15941: LD_VAR 0 3
15945: PPUSH
15946: CALL_OW 235
15950: GO 15924
15952: POP
15953: POP
// end ;
15954: PPOPN 3
15956: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15957: LD_EXP 26
15961: PUSH
15962: LD_EXP 39
15966: AND
15967: IFFALSE 16086
15969: GO 15971
15971: DISABLE
15972: LD_INT 0
15974: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_OWVAR 2
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 21
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 3
16004: PUSH
16005: LD_INT 23
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 69
16028: PUSH
16029: FOR_IN
16030: IFFALSE 16084
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 257
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: LD_INT 4
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: IN
16060: IFFALSE 16082
// SetClass ( un , rand ( 1 , 4 ) ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: LD_INT 4
16072: PPUSH
16073: CALL_OW 12
16077: PPUSH
16078: CALL_OW 336
16082: GO 16029
16084: POP
16085: POP
// end ;
16086: PPOPN 1
16088: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16089: LD_EXP 26
16093: PUSH
16094: LD_EXP 38
16098: AND
16099: IFFALSE 16178
16101: GO 16103
16103: DISABLE
16104: LD_INT 0
16106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16107: LD_ADDR_VAR 0 1
16111: PUSH
16112: LD_INT 22
16114: PUSH
16115: LD_OWVAR 2
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 3
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PPUSH
16138: CALL_OW 69
16142: ST_TO_ADDR
// if not tmp then
16143: LD_VAR 0 1
16147: NOT
16148: IFFALSE 16152
// exit ;
16150: GO 16178
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16152: LD_VAR 0 1
16156: PUSH
16157: LD_INT 1
16159: PPUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 12
16169: ARRAY
16170: PPUSH
16171: LD_INT 100
16173: PPUSH
16174: CALL_OW 234
// end ;
16178: PPOPN 1
16180: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16181: LD_EXP 26
16185: PUSH
16186: LD_EXP 40
16190: AND
16191: IFFALSE 16289
16193: GO 16195
16195: DISABLE
16196: LD_INT 0
16198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16199: LD_ADDR_VAR 0 1
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 21
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: CALL_OW 69
16234: ST_TO_ADDR
// if not tmp then
16235: LD_VAR 0 1
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16289
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16244: LD_VAR 0 1
16248: PUSH
16249: LD_INT 1
16251: PPUSH
16252: LD_VAR 0 1
16256: PPUSH
16257: CALL_OW 12
16261: ARRAY
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 4
16268: PPUSH
16269: CALL_OW 12
16273: PPUSH
16274: LD_INT 3000
16276: PPUSH
16277: LD_INT 9000
16279: PPUSH
16280: CALL_OW 12
16284: PPUSH
16285: CALL_OW 492
// end ;
16289: PPOPN 1
16291: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16292: LD_EXP 26
16296: PUSH
16297: LD_EXP 41
16301: AND
16302: IFFALSE 16322
16304: GO 16306
16306: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16307: LD_INT 1
16309: PPUSH
16310: LD_OWVAR 2
16314: PPUSH
16315: LD_INT 0
16317: PPUSH
16318: CALL_OW 324
16322: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16323: LD_EXP 26
16327: PUSH
16328: LD_EXP 42
16332: AND
16333: IFFALSE 16416
16335: GO 16337
16337: DISABLE
16338: LD_INT 0
16340: PPUSH
16341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16342: LD_ADDR_VAR 0 2
16346: PUSH
16347: LD_INT 22
16349: PUSH
16350: LD_OWVAR 2
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 21
16361: PUSH
16362: LD_INT 3
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PPUSH
16373: CALL_OW 69
16377: ST_TO_ADDR
// if not tmp then
16378: LD_VAR 0 2
16382: NOT
16383: IFFALSE 16387
// exit ;
16385: GO 16416
// for i in tmp do
16387: LD_ADDR_VAR 0 1
16391: PUSH
16392: LD_VAR 0 2
16396: PUSH
16397: FOR_IN
16398: IFFALSE 16414
// SetBLevel ( i , 10 ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_INT 10
16407: PPUSH
16408: CALL_OW 241
16412: GO 16397
16414: POP
16415: POP
// end ;
16416: PPOPN 2
16418: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16419: LD_EXP 26
16423: PUSH
16424: LD_EXP 43
16428: AND
16429: IFFALSE 16540
16431: GO 16433
16433: DISABLE
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16439: LD_ADDR_VAR 0 3
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_OWVAR 2
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 25
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: ST_TO_ADDR
// if not tmp then
16475: LD_VAR 0 3
16479: NOT
16480: IFFALSE 16484
// exit ;
16482: GO 16540
// un := tmp [ rand ( 1 , tmp ) ] ;
16484: LD_ADDR_VAR 0 2
16488: PUSH
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 1
16496: PPUSH
16497: LD_VAR 0 3
16501: PPUSH
16502: CALL_OW 12
16506: ARRAY
16507: ST_TO_ADDR
// if Crawls ( un ) then
16508: LD_VAR 0 2
16512: PPUSH
16513: CALL_OW 318
16517: IFFALSE 16528
// ComWalk ( un ) ;
16519: LD_VAR 0 2
16523: PPUSH
16524: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16528: LD_VAR 0 2
16532: PPUSH
16533: LD_INT 5
16535: PPUSH
16536: CALL_OW 336
// end ;
16540: PPOPN 3
16542: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16543: LD_EXP 26
16547: PUSH
16548: LD_EXP 44
16552: AND
16553: PUSH
16554: LD_OWVAR 67
16558: PUSH
16559: LD_INT 3
16561: LESS
16562: AND
16563: IFFALSE 16582
16565: GO 16567
16567: DISABLE
// Difficulty := Difficulty + 1 ;
16568: LD_ADDR_OWVAR 67
16572: PUSH
16573: LD_OWVAR 67
16577: PUSH
16578: LD_INT 1
16580: PLUS
16581: ST_TO_ADDR
16582: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16583: LD_EXP 26
16587: PUSH
16588: LD_EXP 45
16592: AND
16593: IFFALSE 16696
16595: GO 16597
16597: DISABLE
16598: LD_INT 0
16600: PPUSH
// begin for i := 1 to 5 do
16601: LD_ADDR_VAR 0 1
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_INT 5
16613: PUSH
16614: FOR_TO
16615: IFFALSE 16694
// begin uc_nation := nation_nature ;
16617: LD_ADDR_OWVAR 21
16621: PUSH
16622: LD_INT 0
16624: ST_TO_ADDR
// uc_side := 0 ;
16625: LD_ADDR_OWVAR 20
16629: PUSH
16630: LD_INT 0
16632: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16633: LD_ADDR_OWVAR 29
16637: PUSH
16638: LD_INT 12
16640: PUSH
16641: LD_INT 12
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: ST_TO_ADDR
// hc_agressivity := 20 ;
16648: LD_ADDR_OWVAR 35
16652: PUSH
16653: LD_INT 20
16655: ST_TO_ADDR
// hc_class := class_tiger ;
16656: LD_ADDR_OWVAR 28
16660: PUSH
16661: LD_INT 14
16663: ST_TO_ADDR
// hc_gallery :=  ;
16664: LD_ADDR_OWVAR 33
16668: PUSH
16669: LD_STRING 
16671: ST_TO_ADDR
// hc_name :=  ;
16672: LD_ADDR_OWVAR 26
16676: PUSH
16677: LD_STRING 
16679: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16680: CALL_OW 44
16684: PPUSH
16685: LD_INT 0
16687: PPUSH
16688: CALL_OW 51
// end ;
16692: GO 16614
16694: POP
16695: POP
// end ;
16696: PPOPN 1
16698: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16699: LD_EXP 26
16703: PUSH
16704: LD_EXP 46
16708: AND
16709: IFFALSE 16718
16711: GO 16713
16713: DISABLE
// StreamSibBomb ;
16714: CALL 16719 0 0
16718: END
// export function StreamSibBomb ; var i , x , y ; begin
16719: LD_INT 0
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
// result := false ;
16725: LD_ADDR_VAR 0 1
16729: PUSH
16730: LD_INT 0
16732: ST_TO_ADDR
// for i := 1 to 16 do
16733: LD_ADDR_VAR 0 2
16737: PUSH
16738: DOUBLE
16739: LD_INT 1
16741: DEC
16742: ST_TO_ADDR
16743: LD_INT 16
16745: PUSH
16746: FOR_TO
16747: IFFALSE 16946
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16749: LD_ADDR_VAR 0 3
16753: PUSH
16754: LD_INT 10
16756: PUSH
16757: LD_INT 20
16759: PUSH
16760: LD_INT 30
16762: PUSH
16763: LD_INT 40
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: LD_INT 60
16771: PUSH
16772: LD_INT 70
16774: PUSH
16775: LD_INT 80
16777: PUSH
16778: LD_INT 90
16780: PUSH
16781: LD_INT 100
16783: PUSH
16784: LD_INT 110
16786: PUSH
16787: LD_INT 120
16789: PUSH
16790: LD_INT 130
16792: PUSH
16793: LD_INT 140
16795: PUSH
16796: LD_INT 150
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: LD_INT 15
16821: PPUSH
16822: CALL_OW 12
16826: ARRAY
16827: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16828: LD_ADDR_VAR 0 4
16832: PUSH
16833: LD_INT 10
16835: PUSH
16836: LD_INT 20
16838: PUSH
16839: LD_INT 30
16841: PUSH
16842: LD_INT 40
16844: PUSH
16845: LD_INT 50
16847: PUSH
16848: LD_INT 60
16850: PUSH
16851: LD_INT 70
16853: PUSH
16854: LD_INT 80
16856: PUSH
16857: LD_INT 90
16859: PUSH
16860: LD_INT 100
16862: PUSH
16863: LD_INT 110
16865: PUSH
16866: LD_INT 120
16868: PUSH
16869: LD_INT 130
16871: PUSH
16872: LD_INT 140
16874: PUSH
16875: LD_INT 150
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 1
16897: PPUSH
16898: LD_INT 15
16900: PPUSH
16901: CALL_OW 12
16905: ARRAY
16906: ST_TO_ADDR
// if ValidHex ( x , y ) then
16907: LD_VAR 0 3
16911: PPUSH
16912: LD_VAR 0 4
16916: PPUSH
16917: CALL_OW 488
16921: IFFALSE 16944
// begin result := [ x , y ] ;
16923: LD_ADDR_VAR 0 1
16927: PUSH
16928: LD_VAR 0 3
16932: PUSH
16933: LD_VAR 0 4
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: ST_TO_ADDR
// break ;
16942: GO 16946
// end ; end ;
16944: GO 16746
16946: POP
16947: POP
// if result then
16948: LD_VAR 0 1
16952: IFFALSE 17012
// begin ToLua ( playSibBomb() ) ;
16954: LD_STRING playSibBomb()
16956: PPUSH
16957: CALL_OW 559
// wait ( 0 0$14 ) ;
16961: LD_INT 490
16963: PPUSH
16964: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 1
16975: ARRAY
16976: PPUSH
16977: LD_VAR 0 1
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16990: LD_VAR 0 1
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PPUSH
16999: LD_VAR 0 1
17003: PUSH
17004: LD_INT 2
17006: ARRAY
17007: PPUSH
17008: CALL_OW 429
// end ; end ;
17012: LD_VAR 0 1
17016: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17017: LD_EXP 26
17021: PUSH
17022: LD_EXP 48
17026: AND
17027: IFFALSE 17039
17029: GO 17031
17031: DISABLE
// YouLost (  ) ;
17032: LD_STRING 
17034: PPUSH
17035: CALL_OW 104
17039: END
// every 0 0$1 trigger StreamModeActive and sFog do
17040: LD_EXP 26
17044: PUSH
17045: LD_EXP 47
17049: AND
17050: IFFALSE 17064
17052: GO 17054
17054: DISABLE
// FogOff ( your_side ) ;
17055: LD_OWVAR 2
17059: PPUSH
17060: CALL_OW 344
17064: END
// every 0 0$1 trigger StreamModeActive and sSun do
17065: LD_EXP 26
17069: PUSH
17070: LD_EXP 49
17074: AND
17075: IFFALSE 17103
17077: GO 17079
17079: DISABLE
// begin solar_recharge_percent := 0 ;
17080: LD_ADDR_OWVAR 79
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17088: LD_INT 10500
17090: PPUSH
17091: CALL_OW 67
// solar_recharge_percent := 100 ;
17095: LD_ADDR_OWVAR 79
17099: PUSH
17100: LD_INT 100
17102: ST_TO_ADDR
// end ;
17103: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17104: LD_EXP 26
17108: PUSH
17109: LD_EXP 50
17113: AND
17114: IFFALSE 17353
17116: GO 17118
17118: DISABLE
17119: LD_INT 0
17121: PPUSH
17122: PPUSH
17123: PPUSH
// begin tmp := [ ] ;
17124: LD_ADDR_VAR 0 3
17128: PUSH
17129: EMPTY
17130: ST_TO_ADDR
// for i := 1 to 6 do
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: DOUBLE
17137: LD_INT 1
17139: DEC
17140: ST_TO_ADDR
17141: LD_INT 6
17143: PUSH
17144: FOR_TO
17145: IFFALSE 17250
// begin uc_nation := nation_nature ;
17147: LD_ADDR_OWVAR 21
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// uc_side := 0 ;
17155: LD_ADDR_OWVAR 20
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17163: LD_ADDR_OWVAR 29
17167: PUSH
17168: LD_INT 12
17170: PUSH
17171: LD_INT 12
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: ST_TO_ADDR
// hc_agressivity := 20 ;
17178: LD_ADDR_OWVAR 35
17182: PUSH
17183: LD_INT 20
17185: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17186: LD_ADDR_OWVAR 28
17190: PUSH
17191: LD_INT 17
17193: ST_TO_ADDR
// hc_gallery :=  ;
17194: LD_ADDR_OWVAR 33
17198: PUSH
17199: LD_STRING 
17201: ST_TO_ADDR
// hc_name :=  ;
17202: LD_ADDR_OWVAR 26
17206: PUSH
17207: LD_STRING 
17209: ST_TO_ADDR
// un := CreateHuman ;
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: CALL_OW 44
17219: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17220: LD_VAR 0 2
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 51
// tmp := tmp ^ un ;
17232: LD_ADDR_VAR 0 3
17236: PUSH
17237: LD_VAR 0 3
17241: PUSH
17242: LD_VAR 0 2
17246: ADD
17247: ST_TO_ADDR
// end ;
17248: GO 17144
17250: POP
17251: POP
// repeat wait ( 0 0$1 ) ;
17252: LD_INT 35
17254: PPUSH
17255: CALL_OW 67
// for un in tmp do
17259: LD_ADDR_VAR 0 2
17263: PUSH
17264: LD_VAR 0 3
17268: PUSH
17269: FOR_IN
17270: IFFALSE 17344
// begin if IsDead ( un ) then
17272: LD_VAR 0 2
17276: PPUSH
17277: CALL_OW 301
17281: IFFALSE 17301
// begin tmp := tmp diff un ;
17283: LD_ADDR_VAR 0 3
17287: PUSH
17288: LD_VAR 0 3
17292: PUSH
17293: LD_VAR 0 2
17297: DIFF
17298: ST_TO_ADDR
// continue ;
17299: GO 17269
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17301: LD_VAR 0 2
17305: PPUSH
17306: LD_INT 3
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: PPUSH
17328: LD_VAR 0 2
17332: PPUSH
17333: CALL_OW 74
17337: PPUSH
17338: CALL_OW 115
// end ;
17342: GO 17269
17344: POP
17345: POP
// until not tmp ;
17346: LD_VAR 0 3
17350: NOT
17351: IFFALSE 17252
// end ;
17353: PPOPN 3
17355: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17356: LD_EXP 26
17360: PUSH
17361: LD_EXP 51
17365: AND
17366: IFFALSE 17420
17368: GO 17370
17370: DISABLE
// begin ToLua ( displayTroll(); ) ;
17371: LD_STRING displayTroll();
17373: PPUSH
17374: CALL_OW 559
// wait ( 3 3$00 ) ;
17378: LD_INT 6300
17380: PPUSH
17381: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17385: LD_STRING hideTroll();
17387: PPUSH
17388: CALL_OW 559
// wait ( 1 1$00 ) ;
17392: LD_INT 2100
17394: PPUSH
17395: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17399: LD_STRING displayTroll();
17401: PPUSH
17402: CALL_OW 559
// wait ( 1 1$00 ) ;
17406: LD_INT 2100
17408: PPUSH
17409: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17413: LD_STRING hideTroll();
17415: PPUSH
17416: CALL_OW 559
// end ;
17420: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17421: LD_EXP 26
17425: PUSH
17426: LD_EXP 52
17430: AND
17431: IFFALSE 17494
17433: GO 17435
17435: DISABLE
17436: LD_INT 0
17438: PPUSH
// begin p := 0 ;
17439: LD_ADDR_VAR 0 1
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// repeat game_speed := 1 ;
17447: LD_ADDR_OWVAR 65
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17455: LD_INT 35
17457: PPUSH
17458: CALL_OW 67
// p := p + 1 ;
17462: LD_ADDR_VAR 0 1
17466: PUSH
17467: LD_VAR 0 1
17471: PUSH
17472: LD_INT 1
17474: PLUS
17475: ST_TO_ADDR
// until p >= 60 ;
17476: LD_VAR 0 1
17480: PUSH
17481: LD_INT 60
17483: GREATEREQUAL
17484: IFFALSE 17447
// game_speed := 4 ;
17486: LD_ADDR_OWVAR 65
17490: PUSH
17491: LD_INT 4
17493: ST_TO_ADDR
// end ;
17494: PPOPN 1
17496: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17497: LD_EXP 26
17501: PUSH
17502: LD_EXP 53
17506: AND
17507: IFFALSE 17653
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17516: LD_ADDR_VAR 0 1
17520: PUSH
17521: LD_INT 22
17523: PUSH
17524: LD_OWVAR 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: LD_INT 30
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 30
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PPUSH
17565: CALL_OW 69
17569: ST_TO_ADDR
// if not depot then
17570: LD_VAR 0 1
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17653
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17579: LD_ADDR_VAR 0 2
17583: PUSH
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 1
17591: PPUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL_OW 12
17601: ARRAY
17602: PPUSH
17603: CALL_OW 274
17607: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17608: LD_VAR 0 2
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: LD_INT 0
17618: PPUSH
17619: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17623: LD_VAR 0 2
17627: PPUSH
17628: LD_INT 2
17630: PPUSH
17631: LD_INT 0
17633: PPUSH
17634: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17638: LD_VAR 0 2
17642: PPUSH
17643: LD_INT 3
17645: PPUSH
17646: LD_INT 0
17648: PPUSH
17649: CALL_OW 277
// end ;
17653: PPOPN 2
17655: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17656: LD_EXP 26
17660: PUSH
17661: LD_EXP 54
17665: AND
17666: IFFALSE 17763
17668: GO 17670
17670: DISABLE
17671: LD_INT 0
17673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_OWVAR 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 21
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 3
17703: PUSH
17704: LD_INT 23
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: ST_TO_ADDR
// if not tmp then
17728: LD_VAR 0 1
17732: NOT
17733: IFFALSE 17737
// exit ;
17735: GO 17763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 1
17744: PPUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 12
17754: ARRAY
17755: PPUSH
17756: LD_INT 200
17758: PPUSH
17759: CALL_OW 234
// end ;
17763: PPOPN 1
17765: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17766: LD_EXP 26
17770: PUSH
17771: LD_EXP 55
17775: AND
17776: IFFALSE 17855
17778: GO 17780
17780: DISABLE
17781: LD_INT 0
17783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_OWVAR 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 21
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 1
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: PPUSH
17848: LD_INT 60
17850: PPUSH
17851: CALL_OW 234
// end ;
17855: PPOPN 1
17857: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17858: LD_EXP 26
17862: PUSH
17863: LD_EXP 56
17867: AND
17868: IFFALSE 17967
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
// begin enable ;
17877: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17878: LD_ADDR_VAR 0 1
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 61
17897: PUSH
17898: EMPTY
17899: LIST
17900: PUSH
17901: LD_INT 33
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// if not tmp then
17921: LD_VAR 0 1
17925: NOT
17926: IFFALSE 17930
// exit ;
17928: GO 17967
// for i in tmp do
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_VAR 0 1
17939: PUSH
17940: FOR_IN
17941: IFFALSE 17965
// if IsControledBy ( i ) then
17943: LD_VAR 0 2
17947: PPUSH
17948: CALL_OW 312
17952: IFFALSE 17963
// ComUnlink ( i ) ;
17954: LD_VAR 0 2
17958: PPUSH
17959: CALL_OW 136
17963: GO 17940
17965: POP
17966: POP
// end ;
17967: PPOPN 2
17969: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17970: LD_EXP 26
17974: PUSH
17975: LD_EXP 57
17979: AND
17980: IFFALSE 18120
17982: GO 17984
17984: DISABLE
17985: LD_INT 0
17987: PPUSH
17988: PPUSH
// begin ToLua ( displayPowell(); ) ;
17989: LD_STRING displayPowell();
17991: PPUSH
17992: CALL_OW 559
// uc_side := 0 ;
17996: LD_ADDR_OWVAR 20
18000: PUSH
18001: LD_INT 0
18003: ST_TO_ADDR
// uc_nation := 2 ;
18004: LD_ADDR_OWVAR 21
18008: PUSH
18009: LD_INT 2
18011: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18012: LD_ADDR_OWVAR 37
18016: PUSH
18017: LD_INT 14
18019: ST_TO_ADDR
// vc_engine := engine_siberite ;
18020: LD_ADDR_OWVAR 39
18024: PUSH
18025: LD_INT 3
18027: ST_TO_ADDR
// vc_control := control_apeman ;
18028: LD_ADDR_OWVAR 38
18032: PUSH
18033: LD_INT 5
18035: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18036: LD_ADDR_OWVAR 40
18040: PUSH
18041: LD_INT 29
18043: ST_TO_ADDR
// un := CreateVehicle ;
18044: LD_ADDR_VAR 0 2
18048: PUSH
18049: CALL_OW 45
18053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18054: LD_VAR 0 2
18058: PPUSH
18059: LD_INT 1
18061: PPUSH
18062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18066: LD_INT 35
18068: PPUSH
18069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18073: LD_VAR 0 2
18077: PPUSH
18078: LD_INT 22
18080: PUSH
18081: LD_OWVAR 2
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PPUSH
18090: CALL_OW 69
18094: PPUSH
18095: LD_VAR 0 2
18099: PPUSH
18100: CALL_OW 74
18104: PPUSH
18105: CALL_OW 115
// until IsDead ( un ) ;
18109: LD_VAR 0 2
18113: PPUSH
18114: CALL_OW 301
18118: IFFALSE 18066
// end ;
18120: PPOPN 2
18122: END
// every 0 0$1 trigger StreamModeActive and sStu do
18123: LD_EXP 26
18127: PUSH
18128: LD_EXP 65
18132: AND
18133: IFFALSE 18149
18135: GO 18137
18137: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18138: LD_STRING displayStucuk();
18140: PPUSH
18141: CALL_OW 559
// ResetFog ;
18145: CALL_OW 335
// end ;
18149: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18150: LD_EXP 26
18154: PUSH
18155: LD_EXP 58
18159: AND
18160: IFFALSE 18301
18162: GO 18164
18164: DISABLE
18165: LD_INT 0
18167: PPUSH
18168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_INT 22
18176: PUSH
18177: LD_OWVAR 2
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 21
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 69
18204: ST_TO_ADDR
// if not tmp then
18205: LD_VAR 0 2
18209: NOT
18210: IFFALSE 18214
// exit ;
18212: GO 18301
// un := tmp [ rand ( 1 , tmp ) ] ;
18214: LD_ADDR_VAR 0 1
18218: PUSH
18219: LD_VAR 0 2
18223: PUSH
18224: LD_INT 1
18226: PPUSH
18227: LD_VAR 0 2
18231: PPUSH
18232: CALL_OW 12
18236: ARRAY
18237: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18238: LD_VAR 0 1
18242: PPUSH
18243: LD_INT 0
18245: PPUSH
18246: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_OWVAR 3
18259: PUSH
18260: LD_VAR 0 1
18264: DIFF
18265: PPUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 74
18275: PPUSH
18276: CALL_OW 115
// wait ( 0 0$20 ) ;
18280: LD_INT 700
18282: PPUSH
18283: CALL_OW 67
// SetSide ( un , your_side ) ;
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_OWVAR 2
18296: PPUSH
18297: CALL_OW 235
// end ;
18301: PPOPN 2
18303: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18304: LD_EXP 26
18308: PUSH
18309: LD_EXP 59
18313: AND
18314: IFFALSE 18420
18316: GO 18318
18318: DISABLE
18319: LD_INT 0
18321: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18322: LD_ADDR_VAR 0 1
18326: PUSH
18327: LD_INT 22
18329: PUSH
18330: LD_OWVAR 2
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: LD_INT 30
18344: PUSH
18345: LD_INT 0
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 30
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 69
18375: ST_TO_ADDR
// if not depot then
18376: LD_VAR 0 1
18380: NOT
18381: IFFALSE 18385
// exit ;
18383: GO 18420
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18385: LD_VAR 0 1
18389: PUSH
18390: LD_INT 1
18392: ARRAY
18393: PPUSH
18394: CALL_OW 250
18398: PPUSH
18399: LD_VAR 0 1
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: CALL_OW 251
18412: PPUSH
18413: LD_INT 70
18415: PPUSH
18416: CALL_OW 495
// end ;
18420: PPOPN 1
18422: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18423: LD_EXP 26
18427: PUSH
18428: LD_EXP 60
18432: AND
18433: IFFALSE 18644
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
18444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18445: LD_ADDR_VAR 0 5
18449: PUSH
18450: LD_INT 22
18452: PUSH
18453: LD_OWVAR 2
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 21
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 69
18480: ST_TO_ADDR
// if not tmp then
18481: LD_VAR 0 5
18485: NOT
18486: IFFALSE 18490
// exit ;
18488: GO 18644
// for i in tmp do
18490: LD_ADDR_VAR 0 1
18494: PUSH
18495: LD_VAR 0 5
18499: PUSH
18500: FOR_IN
18501: IFFALSE 18642
// begin d := rand ( 0 , 5 ) ;
18503: LD_ADDR_VAR 0 4
18507: PUSH
18508: LD_INT 0
18510: PPUSH
18511: LD_INT 5
18513: PPUSH
18514: CALL_OW 12
18518: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18519: LD_ADDR_VAR 0 2
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 250
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: LD_INT 3
18541: PPUSH
18542: LD_INT 12
18544: PPUSH
18545: CALL_OW 12
18549: PPUSH
18550: CALL_OW 272
18554: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 251
18569: PPUSH
18570: LD_VAR 0 4
18574: PPUSH
18575: LD_INT 3
18577: PPUSH
18578: LD_INT 12
18580: PPUSH
18581: CALL_OW 12
18585: PPUSH
18586: CALL_OW 273
18590: ST_TO_ADDR
// if ValidHex ( x , y ) then
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: CALL_OW 488
18605: IFFALSE 18640
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18607: LD_VAR 0 1
18611: PPUSH
18612: LD_VAR 0 2
18616: PPUSH
18617: LD_VAR 0 3
18621: PPUSH
18622: LD_INT 3
18624: PPUSH
18625: LD_INT 6
18627: PPUSH
18628: CALL_OW 12
18632: PPUSH
18633: LD_INT 1
18635: PPUSH
18636: CALL_OW 483
// end ;
18640: GO 18500
18642: POP
18643: POP
// end ;
18644: PPOPN 5
18646: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18647: LD_EXP 26
18651: PUSH
18652: LD_EXP 61
18656: AND
18657: IFFALSE 18751
18659: GO 18661
18661: DISABLE
18662: LD_INT 0
18664: PPUSH
18665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18666: LD_ADDR_VAR 0 2
18670: PUSH
18671: LD_INT 22
18673: PUSH
18674: LD_OWVAR 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 32
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: ST_TO_ADDR
// if not tmp then
18713: LD_VAR 0 2
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 18751
// for i in tmp do
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_VAR 0 2
18731: PUSH
18732: FOR_IN
18733: IFFALSE 18749
// SetFuel ( i , 0 ) ;
18735: LD_VAR 0 1
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: CALL_OW 240
18747: GO 18732
18749: POP
18750: POP
// end ;
18751: PPOPN 2
18753: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18754: LD_EXP 26
18758: PUSH
18759: LD_EXP 62
18763: AND
18764: IFFALSE 18830
18766: GO 18768
18768: DISABLE
18769: LD_INT 0
18771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18772: LD_ADDR_VAR 0 1
18776: PUSH
18777: LD_INT 22
18779: PUSH
18780: LD_OWVAR 2
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 30
18791: PUSH
18792: LD_INT 29
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PPUSH
18803: CALL_OW 69
18807: ST_TO_ADDR
// if not tmp then
18808: LD_VAR 0 1
18812: NOT
18813: IFFALSE 18817
// exit ;
18815: GO 18830
// DestroyUnit ( tmp [ 1 ] ) ;
18817: LD_VAR 0 1
18821: PUSH
18822: LD_INT 1
18824: ARRAY
18825: PPUSH
18826: CALL_OW 65
// end ;
18830: PPOPN 1
18832: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18833: LD_EXP 26
18837: PUSH
18838: LD_EXP 64
18842: AND
18843: IFFALSE 18972
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
// begin uc_side := 0 ;
18851: LD_ADDR_OWVAR 20
18855: PUSH
18856: LD_INT 0
18858: ST_TO_ADDR
// uc_nation := nation_arabian ;
18859: LD_ADDR_OWVAR 21
18863: PUSH
18864: LD_INT 2
18866: ST_TO_ADDR
// hc_gallery :=  ;
18867: LD_ADDR_OWVAR 33
18871: PUSH
18872: LD_STRING 
18874: ST_TO_ADDR
// hc_name :=  ;
18875: LD_ADDR_OWVAR 26
18879: PUSH
18880: LD_STRING 
18882: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18883: LD_INT 1
18885: PPUSH
18886: LD_INT 11
18888: PPUSH
18889: LD_INT 10
18891: PPUSH
18892: CALL_OW 380
// un := CreateHuman ;
18896: LD_ADDR_VAR 0 1
18900: PUSH
18901: CALL_OW 44
18905: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18906: LD_VAR 0 1
18910: PPUSH
18911: LD_INT 1
18913: PPUSH
18914: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18918: LD_INT 35
18920: PPUSH
18921: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_INT 22
18932: PUSH
18933: LD_OWVAR 2
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PPUSH
18942: CALL_OW 69
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 74
18956: PPUSH
18957: CALL_OW 115
// until IsDead ( un ) ;
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 301
18970: IFFALSE 18918
// end ;
18972: PPOPN 1
18974: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18975: LD_EXP 26
18979: PUSH
18980: LD_EXP 66
18984: AND
18985: IFFALSE 18997
18987: GO 18989
18989: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18990: LD_STRING earthquake(getX(game), 0, 32)
18992: PPUSH
18993: CALL_OW 559
18997: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18998: LD_EXP 26
19002: PUSH
19003: LD_EXP 67
19007: AND
19008: IFFALSE 19099
19010: GO 19012
19012: DISABLE
19013: LD_INT 0
19015: PPUSH
// begin enable ;
19016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_INT 22
19024: PUSH
19025: LD_OWVAR 2
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 21
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 33
19046: PUSH
19047: LD_INT 3
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: ST_TO_ADDR
// if not tmp then
19064: LD_VAR 0 1
19068: NOT
19069: IFFALSE 19073
// exit ;
19071: GO 19099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19073: LD_VAR 0 1
19077: PUSH
19078: LD_INT 1
19080: PPUSH
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 12
19090: ARRAY
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 234
// end ;
19099: PPOPN 1
19101: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19102: LD_EXP 26
19106: PUSH
19107: LD_EXP 68
19111: AND
19112: IFFALSE 19253
19114: GO 19116
19116: DISABLE
19117: LD_INT 0
19119: PPUSH
19120: PPUSH
19121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19122: LD_ADDR_VAR 0 3
19126: PUSH
19127: LD_INT 22
19129: PUSH
19130: LD_OWVAR 2
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 25
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PPUSH
19153: CALL_OW 69
19157: ST_TO_ADDR
// if not tmp then
19158: LD_VAR 0 3
19162: NOT
19163: IFFALSE 19167
// exit ;
19165: GO 19253
// un := tmp [ rand ( 1 , tmp ) ] ;
19167: LD_ADDR_VAR 0 2
19171: PUSH
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 1
19179: PPUSH
19180: LD_VAR 0 3
19184: PPUSH
19185: CALL_OW 12
19189: ARRAY
19190: ST_TO_ADDR
// if Crawls ( un ) then
19191: LD_VAR 0 2
19195: PPUSH
19196: CALL_OW 318
19200: IFFALSE 19211
// ComWalk ( un ) ;
19202: LD_VAR 0 2
19206: PPUSH
19207: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19211: LD_VAR 0 2
19215: PPUSH
19216: LD_INT 9
19218: PPUSH
19219: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19223: LD_INT 28
19225: PPUSH
19226: LD_OWVAR 2
19230: PPUSH
19231: LD_INT 2
19233: PPUSH
19234: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19238: LD_INT 29
19240: PPUSH
19241: LD_OWVAR 2
19245: PPUSH
19246: LD_INT 2
19248: PPUSH
19249: CALL_OW 322
// end ;
19253: PPOPN 3
19255: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19256: LD_EXP 26
19260: PUSH
19261: LD_EXP 69
19265: AND
19266: IFFALSE 19377
19268: GO 19270
19270: DISABLE
19271: LD_INT 0
19273: PPUSH
19274: PPUSH
19275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19276: LD_ADDR_VAR 0 3
19280: PUSH
19281: LD_INT 22
19283: PUSH
19284: LD_OWVAR 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 25
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: ST_TO_ADDR
// if not tmp then
19312: LD_VAR 0 3
19316: NOT
19317: IFFALSE 19321
// exit ;
19319: GO 19377
// un := tmp [ rand ( 1 , tmp ) ] ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_VAR 0 3
19330: PUSH
19331: LD_INT 1
19333: PPUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: CALL_OW 12
19343: ARRAY
19344: ST_TO_ADDR
// if Crawls ( un ) then
19345: LD_VAR 0 2
19349: PPUSH
19350: CALL_OW 318
19354: IFFALSE 19365
// ComWalk ( un ) ;
19356: LD_VAR 0 2
19360: PPUSH
19361: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19365: LD_VAR 0 2
19369: PPUSH
19370: LD_INT 8
19372: PPUSH
19373: CALL_OW 336
// end ;
19377: PPOPN 3
19379: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19380: LD_EXP 26
19384: PUSH
19385: LD_EXP 70
19389: AND
19390: IFFALSE 19534
19392: GO 19394
19394: DISABLE
19395: LD_INT 0
19397: PPUSH
19398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_OWVAR 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 21
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 12
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 34
19441: PUSH
19442: LD_INT 51
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 34
19451: PUSH
19452: LD_INT 32
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 69
19474: ST_TO_ADDR
// if not tmp then
19475: LD_VAR 0 2
19479: NOT
19480: IFFALSE 19484
// exit ;
19482: GO 19534
// for i in tmp do
19484: LD_ADDR_VAR 0 1
19488: PUSH
19489: LD_VAR 0 2
19493: PUSH
19494: FOR_IN
19495: IFFALSE 19532
// if GetCargo ( i , mat_artifact ) = 0 then
19497: LD_VAR 0 1
19501: PPUSH
19502: LD_INT 4
19504: PPUSH
19505: CALL_OW 289
19509: PUSH
19510: LD_INT 0
19512: EQUAL
19513: IFFALSE 19530
// SetCargo ( i , mat_siberit , 100 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 3
19522: PPUSH
19523: LD_INT 100
19525: PPUSH
19526: CALL_OW 290
19530: GO 19494
19532: POP
19533: POP
// end ;
19534: PPOPN 2
19536: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19537: LD_EXP 26
19541: PUSH
19542: LD_EXP 71
19546: AND
19547: IFFALSE 19730
19549: GO 19551
19551: DISABLE
19552: LD_INT 0
19554: PPUSH
19555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19556: LD_ADDR_VAR 0 2
19560: PUSH
19561: LD_INT 22
19563: PUSH
19564: LD_OWVAR 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PPUSH
19573: CALL_OW 69
19577: ST_TO_ADDR
// if not tmp then
19578: LD_VAR 0 2
19582: NOT
19583: IFFALSE 19587
// exit ;
19585: GO 19730
// for i := 1 to 2 do
19587: LD_ADDR_VAR 0 1
19591: PUSH
19592: DOUBLE
19593: LD_INT 1
19595: DEC
19596: ST_TO_ADDR
19597: LD_INT 2
19599: PUSH
19600: FOR_TO
19601: IFFALSE 19728
// begin uc_side := your_side ;
19603: LD_ADDR_OWVAR 20
19607: PUSH
19608: LD_OWVAR 2
19612: ST_TO_ADDR
// uc_nation := nation_american ;
19613: LD_ADDR_OWVAR 21
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// vc_chassis := us_morphling ;
19621: LD_ADDR_OWVAR 37
19625: PUSH
19626: LD_INT 5
19628: ST_TO_ADDR
// vc_engine := engine_siberite ;
19629: LD_ADDR_OWVAR 39
19633: PUSH
19634: LD_INT 3
19636: ST_TO_ADDR
// vc_control := control_computer ;
19637: LD_ADDR_OWVAR 38
19641: PUSH
19642: LD_INT 3
19644: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19645: LD_ADDR_OWVAR 40
19649: PUSH
19650: LD_INT 10
19652: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19653: LD_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: CALL_OW 310
19666: NOT
19667: IFFALSE 19714
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19669: CALL_OW 45
19673: PPUSH
19674: LD_VAR 0 2
19678: PUSH
19679: LD_INT 1
19681: ARRAY
19682: PPUSH
19683: CALL_OW 250
19687: PPUSH
19688: LD_VAR 0 2
19692: PUSH
19693: LD_INT 1
19695: ARRAY
19696: PPUSH
19697: CALL_OW 251
19701: PPUSH
19702: LD_INT 12
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL_OW 50
19712: GO 19726
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19714: CALL_OW 45
19718: PPUSH
19719: LD_INT 1
19721: PPUSH
19722: CALL_OW 51
// end ;
19726: GO 19600
19728: POP
19729: POP
// end ;
19730: PPOPN 2
19732: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19733: LD_EXP 26
19737: PUSH
19738: LD_EXP 72
19742: AND
19743: IFFALSE 19965
19745: GO 19747
19747: DISABLE
19748: LD_INT 0
19750: PPUSH
19751: PPUSH
19752: PPUSH
19753: PPUSH
19754: PPUSH
19755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19756: LD_ADDR_VAR 0 6
19760: PUSH
19761: LD_INT 22
19763: PUSH
19764: LD_OWVAR 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 21
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: LD_INT 23
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: PPUSH
19805: CALL_OW 69
19809: ST_TO_ADDR
// if not tmp then
19810: LD_VAR 0 6
19814: NOT
19815: IFFALSE 19819
// exit ;
19817: GO 19965
// s1 := rand ( 1 , 4 ) ;
19819: LD_ADDR_VAR 0 2
19823: PUSH
19824: LD_INT 1
19826: PPUSH
19827: LD_INT 4
19829: PPUSH
19830: CALL_OW 12
19834: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19835: LD_ADDR_VAR 0 4
19839: PUSH
19840: LD_VAR 0 6
19844: PUSH
19845: LD_INT 1
19847: ARRAY
19848: PPUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 259
19858: ST_TO_ADDR
// if s1 = 1 then
19859: LD_VAR 0 2
19863: PUSH
19864: LD_INT 1
19866: EQUAL
19867: IFFALSE 19887
// s2 := rand ( 2 , 4 ) else
19869: LD_ADDR_VAR 0 3
19873: PUSH
19874: LD_INT 2
19876: PPUSH
19877: LD_INT 4
19879: PPUSH
19880: CALL_OW 12
19884: ST_TO_ADDR
19885: GO 19895
// s2 := 1 ;
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19895: LD_ADDR_VAR 0 5
19899: PUSH
19900: LD_VAR 0 6
19904: PUSH
19905: LD_INT 1
19907: ARRAY
19908: PPUSH
19909: LD_VAR 0 3
19913: PPUSH
19914: CALL_OW 259
19918: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19919: LD_VAR 0 6
19923: PUSH
19924: LD_INT 1
19926: ARRAY
19927: PPUSH
19928: LD_VAR 0 2
19932: PPUSH
19933: LD_VAR 0 5
19937: PPUSH
19938: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19942: LD_VAR 0 6
19946: PUSH
19947: LD_INT 1
19949: ARRAY
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: CALL_OW 237
// end ;
19965: PPOPN 6
19967: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19968: LD_EXP 26
19972: PUSH
19973: LD_EXP 73
19977: AND
19978: IFFALSE 20057
19980: GO 19982
19982: DISABLE
19983: LD_INT 0
19985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19986: LD_ADDR_VAR 0 1
19990: PUSH
19991: LD_INT 22
19993: PUSH
19994: LD_OWVAR 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 30
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PPUSH
20017: CALL_OW 69
20021: ST_TO_ADDR
// if not tmp then
20022: LD_VAR 0 1
20026: NOT
20027: IFFALSE 20031
// exit ;
20029: GO 20057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20031: LD_VAR 0 1
20035: PUSH
20036: LD_INT 1
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 12
20048: ARRAY
20049: PPUSH
20050: LD_INT 1
20052: PPUSH
20053: CALL_OW 234
// end ;
20057: PPOPN 1
20059: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20060: LD_EXP 26
20064: PUSH
20065: LD_EXP 74
20069: AND
20070: IFFALSE 20182
20072: GO 20074
20074: DISABLE
20075: LD_INT 0
20077: PPUSH
20078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20079: LD_ADDR_VAR 0 2
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_OWVAR 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 27
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 30
20111: PUSH
20112: LD_INT 26
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: LD_INT 28
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PPUSH
20139: CALL_OW 69
20143: ST_TO_ADDR
// if not tmp then
20144: LD_VAR 0 2
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20182
// for i in tmp do
20153: LD_ADDR_VAR 0 1
20157: PUSH
20158: LD_VAR 0 2
20162: PUSH
20163: FOR_IN
20164: IFFALSE 20180
// SetLives ( i , 1 ) ;
20166: LD_VAR 0 1
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: CALL_OW 234
20178: GO 20163
20180: POP
20181: POP
// end ;
20182: PPOPN 2
20184: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20185: LD_EXP 26
20189: PUSH
20190: LD_EXP 75
20194: AND
20195: IFFALSE 20469
20197: GO 20199
20199: DISABLE
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
// begin i := rand ( 1 , 7 ) ;
20205: LD_ADDR_VAR 0 1
20209: PUSH
20210: LD_INT 1
20212: PPUSH
20213: LD_INT 7
20215: PPUSH
20216: CALL_OW 12
20220: ST_TO_ADDR
// case i of 1 :
20221: LD_VAR 0 1
20225: PUSH
20226: LD_INT 1
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20244
20234: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20235: LD_STRING earthquake(getX(game), 0, 32)
20237: PPUSH
20238: CALL_OW 559
20242: GO 20469
20244: LD_INT 2
20246: DOUBLE
20247: EQUAL
20248: IFTRUE 20252
20250: GO 20266
20252: POP
// begin ToLua ( displayStucuk(); ) ;
20253: LD_STRING displayStucuk();
20255: PPUSH
20256: CALL_OW 559
// ResetFog ;
20260: CALL_OW 335
// end ; 3 :
20264: GO 20469
20266: LD_INT 3
20268: DOUBLE
20269: EQUAL
20270: IFTRUE 20274
20272: GO 20378
20274: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20275: LD_ADDR_VAR 0 2
20279: PUSH
20280: LD_INT 22
20282: PUSH
20283: LD_OWVAR 2
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 25
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 69
20310: ST_TO_ADDR
// if not tmp then
20311: LD_VAR 0 2
20315: NOT
20316: IFFALSE 20320
// exit ;
20318: GO 20469
// un := tmp [ rand ( 1 , tmp ) ] ;
20320: LD_ADDR_VAR 0 3
20324: PUSH
20325: LD_VAR 0 2
20329: PUSH
20330: LD_INT 1
20332: PPUSH
20333: LD_VAR 0 2
20337: PPUSH
20338: CALL_OW 12
20342: ARRAY
20343: ST_TO_ADDR
// if Crawls ( un ) then
20344: LD_VAR 0 3
20348: PPUSH
20349: CALL_OW 318
20353: IFFALSE 20364
// ComWalk ( un ) ;
20355: LD_VAR 0 3
20359: PPUSH
20360: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20364: LD_VAR 0 3
20368: PPUSH
20369: LD_INT 8
20371: PPUSH
20372: CALL_OW 336
// end ; 4 :
20376: GO 20469
20378: LD_INT 4
20380: DOUBLE
20381: EQUAL
20382: IFTRUE 20386
20384: GO 20447
20386: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20387: LD_ADDR_VAR 0 2
20391: PUSH
20392: LD_INT 22
20394: PUSH
20395: LD_OWVAR 2
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 30
20406: PUSH
20407: LD_INT 29
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PPUSH
20418: CALL_OW 69
20422: ST_TO_ADDR
// if not tmp then
20423: LD_VAR 0 2
20427: NOT
20428: IFFALSE 20432
// exit ;
20430: GO 20469
// DestroyUnit ( tmp [ 1 ] ) ;
20432: LD_VAR 0 2
20436: PUSH
20437: LD_INT 1
20439: ARRAY
20440: PPUSH
20441: CALL_OW 65
// end ; 5 .. 7 :
20445: GO 20469
20447: LD_INT 5
20449: DOUBLE
20450: GREATEREQUAL
20451: IFFALSE 20459
20453: LD_INT 7
20455: DOUBLE
20456: LESSEQUAL
20457: IFTRUE 20461
20459: GO 20468
20461: POP
// StreamSibBomb ; end ;
20462: CALL 16719 0 0
20466: GO 20469
20468: POP
// end ;
20469: PPOPN 3
20471: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20472: LD_EXP 26
20476: PUSH
20477: LD_EXP 76
20481: AND
20482: IFFALSE 20638
20484: GO 20486
20486: DISABLE
20487: LD_INT 0
20489: PPUSH
20490: PPUSH
20491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20492: LD_ADDR_VAR 0 2
20496: PUSH
20497: LD_INT 81
20499: PUSH
20500: LD_OWVAR 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 21
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 21
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PPUSH
20541: CALL_OW 69
20545: ST_TO_ADDR
// if not tmp then
20546: LD_VAR 0 2
20550: NOT
20551: IFFALSE 20555
// exit ;
20553: GO 20638
// p := 0 ;
20555: LD_ADDR_VAR 0 3
20559: PUSH
20560: LD_INT 0
20562: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20563: LD_INT 35
20565: PPUSH
20566: CALL_OW 67
// p := p + 1 ;
20570: LD_ADDR_VAR 0 3
20574: PUSH
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 1
20582: PLUS
20583: ST_TO_ADDR
// for i in tmp do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: LD_VAR 0 2
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20626
// if GetLives ( i ) < 1000 then
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 256
20606: PUSH
20607: LD_INT 1000
20609: LESS
20610: IFFALSE 20624
// SetLives ( i , 1000 ) ;
20612: LD_VAR 0 1
20616: PPUSH
20617: LD_INT 1000
20619: PPUSH
20620: CALL_OW 234
20624: GO 20594
20626: POP
20627: POP
// until p > 20 ;
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 20
20635: GREATER
20636: IFFALSE 20563
// end ;
20638: PPOPN 3
20640: END
// every 0 0$1 trigger StreamModeActive and sTime do
20641: LD_EXP 26
20645: PUSH
20646: LD_EXP 77
20650: AND
20651: IFFALSE 20686
20653: GO 20655
20655: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20656: LD_INT 28
20658: PPUSH
20659: LD_OWVAR 2
20663: PPUSH
20664: LD_INT 2
20666: PPUSH
20667: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20671: LD_INT 30
20673: PPUSH
20674: LD_OWVAR 2
20678: PPUSH
20679: LD_INT 2
20681: PPUSH
20682: CALL_OW 322
// end ;
20686: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20687: LD_EXP 26
20691: PUSH
20692: LD_EXP 78
20696: AND
20697: IFFALSE 20818
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 22
20713: PUSH
20714: LD_OWVAR 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 21
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: LD_INT 23
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: PPUSH
20755: CALL_OW 69
20759: ST_TO_ADDR
// if not tmp then
20760: LD_VAR 0 2
20764: NOT
20765: IFFALSE 20769
// exit ;
20767: GO 20818
// for i in tmp do
20769: LD_ADDR_VAR 0 1
20773: PUSH
20774: LD_VAR 0 2
20778: PUSH
20779: FOR_IN
20780: IFFALSE 20816
// begin if Crawls ( i ) then
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 318
20791: IFFALSE 20802
// ComWalk ( i ) ;
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 138
// SetClass ( i , 2 ) ;
20802: LD_VAR 0 1
20806: PPUSH
20807: LD_INT 2
20809: PPUSH
20810: CALL_OW 336
// end ;
20814: GO 20779
20816: POP
20817: POP
// end ;
20818: PPOPN 2
20820: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20821: LD_EXP 26
20825: PUSH
20826: LD_EXP 79
20830: AND
20831: IFFALSE 21112
20833: GO 20835
20835: DISABLE
20836: LD_INT 0
20838: PPUSH
20839: PPUSH
20840: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20841: LD_OWVAR 2
20845: PPUSH
20846: LD_INT 9
20848: PPUSH
20849: LD_INT 1
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20859: LD_INT 9
20861: PPUSH
20862: LD_OWVAR 2
20866: PPUSH
20867: CALL_OW 343
// uc_side := 9 ;
20871: LD_ADDR_OWVAR 20
20875: PUSH
20876: LD_INT 9
20878: ST_TO_ADDR
// uc_nation := 2 ;
20879: LD_ADDR_OWVAR 21
20883: PUSH
20884: LD_INT 2
20886: ST_TO_ADDR
// hc_name := Dark Warrior ;
20887: LD_ADDR_OWVAR 26
20891: PUSH
20892: LD_STRING Dark Warrior
20894: ST_TO_ADDR
// hc_gallery :=  ;
20895: LD_ADDR_OWVAR 33
20899: PUSH
20900: LD_STRING 
20902: ST_TO_ADDR
// hc_noskilllimit := true ;
20903: LD_ADDR_OWVAR 76
20907: PUSH
20908: LD_INT 1
20910: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20911: LD_ADDR_OWVAR 31
20915: PUSH
20916: LD_INT 30
20918: PUSH
20919: LD_INT 30
20921: PUSH
20922: LD_INT 30
20924: PUSH
20925: LD_INT 30
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: ST_TO_ADDR
// un := CreateHuman ;
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: CALL_OW 44
20943: ST_TO_ADDR
// hc_noskilllimit := false ;
20944: LD_ADDR_OWVAR 76
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 51
// p := 0 ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20972: LD_INT 35
20974: PPUSH
20975: CALL_OW 67
// p := p + 1 ;
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_VAR 0 2
20988: PUSH
20989: LD_INT 1
20991: PLUS
20992: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20993: LD_VAR 0 3
20997: PPUSH
20998: CALL_OW 256
21002: PUSH
21003: LD_INT 1000
21005: LESS
21006: IFFALSE 21020
// SetLives ( un , 1000 ) ;
21008: LD_VAR 0 3
21012: PPUSH
21013: LD_INT 1000
21015: PPUSH
21016: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21020: LD_VAR 0 3
21024: PPUSH
21025: LD_INT 81
21027: PUSH
21028: LD_OWVAR 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 91
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PPUSH
21057: CALL_OW 69
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: CALL_OW 74
21071: PPUSH
21072: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 60
21083: GREATER
21084: PUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 301
21094: OR
21095: IFFALSE 20972
// if un then
21097: LD_VAR 0 3
21101: IFFALSE 21112
// RemoveUnit ( un ) ;
21103: LD_VAR 0 3
21107: PPUSH
21108: CALL_OW 64
// end ;
21112: PPOPN 3
21114: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21115: LD_INT 0
21117: PPUSH
// case cmd of 301 :
21118: LD_VAR 0 1
21122: PUSH
21123: LD_INT 301
21125: DOUBLE
21126: EQUAL
21127: IFTRUE 21131
21129: GO 21163
21131: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21132: LD_VAR 0 6
21136: PPUSH
21137: LD_VAR 0 7
21141: PPUSH
21142: LD_VAR 0 8
21146: PPUSH
21147: LD_VAR 0 4
21151: PPUSH
21152: LD_VAR 0 5
21156: PPUSH
21157: CALL 22364 0 5
21161: GO 21284
21163: LD_INT 302
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21208
21171: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21172: LD_VAR 0 6
21176: PPUSH
21177: LD_VAR 0 7
21181: PPUSH
21182: LD_VAR 0 8
21186: PPUSH
21187: LD_VAR 0 9
21191: PPUSH
21192: LD_VAR 0 4
21196: PPUSH
21197: LD_VAR 0 5
21201: PPUSH
21202: CALL 22455 0 6
21206: GO 21284
21208: LD_INT 303
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21253
21216: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21217: LD_VAR 0 6
21221: PPUSH
21222: LD_VAR 0 7
21226: PPUSH
21227: LD_VAR 0 8
21231: PPUSH
21232: LD_VAR 0 9
21236: PPUSH
21237: LD_VAR 0 4
21241: PPUSH
21242: LD_VAR 0 5
21246: PPUSH
21247: CALL 21289 0 6
21251: GO 21284
21253: LD_INT 304
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21283
21261: POP
// hHackTeleport ( unit , x , y ) ; end ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_VAR 0 4
21271: PPUSH
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL 23048 0 3
21281: GO 21284
21283: POP
// end ;
21284: LD_VAR 0 12
21288: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21289: LD_INT 0
21291: PPUSH
21292: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21293: LD_VAR 0 1
21297: PUSH
21298: LD_INT 1
21300: LESS
21301: PUSH
21302: LD_VAR 0 1
21306: PUSH
21307: LD_INT 3
21309: GREATER
21310: OR
21311: PUSH
21312: LD_VAR 0 5
21316: PPUSH
21317: LD_VAR 0 6
21321: PPUSH
21322: CALL_OW 428
21326: OR
21327: IFFALSE 21331
// exit ;
21329: GO 22051
// uc_side := your_side ;
21331: LD_ADDR_OWVAR 20
21335: PUSH
21336: LD_OWVAR 2
21340: ST_TO_ADDR
// uc_nation := nation ;
21341: LD_ADDR_OWVAR 21
21345: PUSH
21346: LD_VAR 0 1
21350: ST_TO_ADDR
// bc_level = 1 ;
21351: LD_ADDR_OWVAR 43
21355: PUSH
21356: LD_INT 1
21358: ST_TO_ADDR
// case btype of 1 :
21359: LD_VAR 0 2
21363: PUSH
21364: LD_INT 1
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21383
21372: POP
// bc_type := b_depot ; 2 :
21373: LD_ADDR_OWVAR 42
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
21381: GO 21995
21383: LD_INT 2
21385: DOUBLE
21386: EQUAL
21387: IFTRUE 21391
21389: GO 21402
21391: POP
// bc_type := b_warehouse ; 3 :
21392: LD_ADDR_OWVAR 42
21396: PUSH
21397: LD_INT 1
21399: ST_TO_ADDR
21400: GO 21995
21402: LD_INT 3
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21421
21410: POP
// bc_type := b_lab ; 4 .. 9 :
21411: LD_ADDR_OWVAR 42
21415: PUSH
21416: LD_INT 6
21418: ST_TO_ADDR
21419: GO 21995
21421: LD_INT 4
21423: DOUBLE
21424: GREATEREQUAL
21425: IFFALSE 21433
21427: LD_INT 9
21429: DOUBLE
21430: LESSEQUAL
21431: IFTRUE 21435
21433: GO 21487
21435: POP
// begin bc_type := b_lab_half ;
21436: LD_ADDR_OWVAR 42
21440: PUSH
21441: LD_INT 7
21443: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21444: LD_ADDR_OWVAR 44
21448: PUSH
21449: LD_INT 10
21451: PUSH
21452: LD_INT 11
21454: PUSH
21455: LD_INT 12
21457: PUSH
21458: LD_INT 15
21460: PUSH
21461: LD_INT 14
21463: PUSH
21464: LD_INT 13
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: LD_VAR 0 2
21479: PUSH
21480: LD_INT 3
21482: MINUS
21483: ARRAY
21484: ST_TO_ADDR
// end ; 10 .. 13 :
21485: GO 21995
21487: LD_INT 10
21489: DOUBLE
21490: GREATEREQUAL
21491: IFFALSE 21499
21493: LD_INT 13
21495: DOUBLE
21496: LESSEQUAL
21497: IFTRUE 21501
21499: GO 21578
21501: POP
// begin bc_type := b_lab_full ;
21502: LD_ADDR_OWVAR 42
21506: PUSH
21507: LD_INT 8
21509: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21510: LD_ADDR_OWVAR 44
21514: PUSH
21515: LD_INT 10
21517: PUSH
21518: LD_INT 12
21520: PUSH
21521: LD_INT 14
21523: PUSH
21524: LD_INT 13
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: PUSH
21533: LD_VAR 0 2
21537: PUSH
21538: LD_INT 9
21540: MINUS
21541: ARRAY
21542: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21543: LD_ADDR_OWVAR 45
21547: PUSH
21548: LD_INT 11
21550: PUSH
21551: LD_INT 15
21553: PUSH
21554: LD_INT 12
21556: PUSH
21557: LD_INT 15
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 9
21573: MINUS
21574: ARRAY
21575: ST_TO_ADDR
// end ; 14 :
21576: GO 21995
21578: LD_INT 14
21580: DOUBLE
21581: EQUAL
21582: IFTRUE 21586
21584: GO 21597
21586: POP
// bc_type := b_workshop ; 15 :
21587: LD_ADDR_OWVAR 42
21591: PUSH
21592: LD_INT 2
21594: ST_TO_ADDR
21595: GO 21995
21597: LD_INT 15
21599: DOUBLE
21600: EQUAL
21601: IFTRUE 21605
21603: GO 21616
21605: POP
// bc_type := b_factory ; 16 :
21606: LD_ADDR_OWVAR 42
21610: PUSH
21611: LD_INT 3
21613: ST_TO_ADDR
21614: GO 21995
21616: LD_INT 16
21618: DOUBLE
21619: EQUAL
21620: IFTRUE 21624
21622: GO 21635
21624: POP
// bc_type := b_ext_gun ; 17 :
21625: LD_ADDR_OWVAR 42
21629: PUSH
21630: LD_INT 17
21632: ST_TO_ADDR
21633: GO 21995
21635: LD_INT 17
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21671
21643: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21644: LD_ADDR_OWVAR 42
21648: PUSH
21649: LD_INT 19
21651: PUSH
21652: LD_INT 23
21654: PUSH
21655: LD_INT 19
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: PUSH
21663: LD_VAR 0 1
21667: ARRAY
21668: ST_TO_ADDR
21669: GO 21995
21671: LD_INT 18
21673: DOUBLE
21674: EQUAL
21675: IFTRUE 21679
21677: GO 21690
21679: POP
// bc_type := b_ext_radar ; 19 :
21680: LD_ADDR_OWVAR 42
21684: PUSH
21685: LD_INT 20
21687: ST_TO_ADDR
21688: GO 21995
21690: LD_INT 19
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21698
21696: GO 21709
21698: POP
// bc_type := b_ext_radio ; 20 :
21699: LD_ADDR_OWVAR 42
21703: PUSH
21704: LD_INT 22
21706: ST_TO_ADDR
21707: GO 21995
21709: LD_INT 20
21711: DOUBLE
21712: EQUAL
21713: IFTRUE 21717
21715: GO 21728
21717: POP
// bc_type := b_ext_siberium ; 21 :
21718: LD_ADDR_OWVAR 42
21722: PUSH
21723: LD_INT 21
21725: ST_TO_ADDR
21726: GO 21995
21728: LD_INT 21
21730: DOUBLE
21731: EQUAL
21732: IFTRUE 21736
21734: GO 21747
21736: POP
// bc_type := b_ext_computer ; 22 :
21737: LD_ADDR_OWVAR 42
21741: PUSH
21742: LD_INT 24
21744: ST_TO_ADDR
21745: GO 21995
21747: LD_INT 22
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21766
21755: POP
// bc_type := b_ext_track ; 23 :
21756: LD_ADDR_OWVAR 42
21760: PUSH
21761: LD_INT 16
21763: ST_TO_ADDR
21764: GO 21995
21766: LD_INT 23
21768: DOUBLE
21769: EQUAL
21770: IFTRUE 21774
21772: GO 21785
21774: POP
// bc_type := b_ext_laser ; 24 :
21775: LD_ADDR_OWVAR 42
21779: PUSH
21780: LD_INT 25
21782: ST_TO_ADDR
21783: GO 21995
21785: LD_INT 24
21787: DOUBLE
21788: EQUAL
21789: IFTRUE 21793
21791: GO 21804
21793: POP
// bc_type := b_control_tower ; 25 :
21794: LD_ADDR_OWVAR 42
21798: PUSH
21799: LD_INT 36
21801: ST_TO_ADDR
21802: GO 21995
21804: LD_INT 25
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 21823
21812: POP
// bc_type := b_breastwork ; 26 :
21813: LD_ADDR_OWVAR 42
21817: PUSH
21818: LD_INT 31
21820: ST_TO_ADDR
21821: GO 21995
21823: LD_INT 26
21825: DOUBLE
21826: EQUAL
21827: IFTRUE 21831
21829: GO 21842
21831: POP
// bc_type := b_bunker ; 27 :
21832: LD_ADDR_OWVAR 42
21836: PUSH
21837: LD_INT 32
21839: ST_TO_ADDR
21840: GO 21995
21842: LD_INT 27
21844: DOUBLE
21845: EQUAL
21846: IFTRUE 21850
21848: GO 21861
21850: POP
// bc_type := b_turret ; 28 :
21851: LD_ADDR_OWVAR 42
21855: PUSH
21856: LD_INT 33
21858: ST_TO_ADDR
21859: GO 21995
21861: LD_INT 28
21863: DOUBLE
21864: EQUAL
21865: IFTRUE 21869
21867: GO 21880
21869: POP
// bc_type := b_armoury ; 29 :
21870: LD_ADDR_OWVAR 42
21874: PUSH
21875: LD_INT 4
21877: ST_TO_ADDR
21878: GO 21995
21880: LD_INT 29
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 21899
21888: POP
// bc_type := b_barracks ; 30 :
21889: LD_ADDR_OWVAR 42
21893: PUSH
21894: LD_INT 5
21896: ST_TO_ADDR
21897: GO 21995
21899: LD_INT 30
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21918
21907: POP
// bc_type := b_solar_power ; 31 :
21908: LD_ADDR_OWVAR 42
21912: PUSH
21913: LD_INT 27
21915: ST_TO_ADDR
21916: GO 21995
21918: LD_INT 31
21920: DOUBLE
21921: EQUAL
21922: IFTRUE 21926
21924: GO 21937
21926: POP
// bc_type := b_oil_power ; 32 :
21927: LD_ADDR_OWVAR 42
21931: PUSH
21932: LD_INT 26
21934: ST_TO_ADDR
21935: GO 21995
21937: LD_INT 32
21939: DOUBLE
21940: EQUAL
21941: IFTRUE 21945
21943: GO 21956
21945: POP
// bc_type := b_siberite_power ; 33 :
21946: LD_ADDR_OWVAR 42
21950: PUSH
21951: LD_INT 28
21953: ST_TO_ADDR
21954: GO 21995
21956: LD_INT 33
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 21975
21964: POP
// bc_type := b_oil_mine ; 34 :
21965: LD_ADDR_OWVAR 42
21969: PUSH
21970: LD_INT 29
21972: ST_TO_ADDR
21973: GO 21995
21975: LD_INT 34
21977: DOUBLE
21978: EQUAL
21979: IFTRUE 21983
21981: GO 21994
21983: POP
// bc_type := b_siberite_mine ; end ;
21984: LD_ADDR_OWVAR 42
21988: PUSH
21989: LD_INT 30
21991: ST_TO_ADDR
21992: GO 21995
21994: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21995: LD_ADDR_VAR 0 8
21999: PUSH
22000: LD_VAR 0 5
22004: PPUSH
22005: LD_VAR 0 6
22009: PPUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: CALL_OW 47
22019: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22020: LD_OWVAR 42
22024: PUSH
22025: LD_INT 32
22027: PUSH
22028: LD_INT 33
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: IN
22035: IFFALSE 22051
// PlaceWeaponTurret ( b , weapon ) ;
22037: LD_VAR 0 8
22041: PPUSH
22042: LD_VAR 0 4
22046: PPUSH
22047: CALL_OW 431
// end ;
22051: LD_VAR 0 7
22055: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22056: LD_INT 0
22058: PPUSH
22059: PPUSH
22060: PPUSH
22061: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22062: LD_ADDR_VAR 0 4
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_OWVAR 2
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 30
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 4
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22184
// for i in tmp do
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_VAR 0 4
22134: PUSH
22135: FOR_IN
22136: IFFALSE 22182
// for j = 1 to 3 do
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: DOUBLE
22144: LD_INT 1
22146: DEC
22147: ST_TO_ADDR
22148: LD_INT 3
22150: PUSH
22151: FOR_TO
22152: IFFALSE 22178
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22154: LD_VAR 0 2
22158: PPUSH
22159: CALL_OW 274
22163: PPUSH
22164: LD_VAR 0 3
22168: PPUSH
22169: LD_INT 99999
22171: PPUSH
22172: CALL_OW 277
22176: GO 22151
22178: POP
22179: POP
22180: GO 22135
22182: POP
22183: POP
// end ;
22184: LD_VAR 0 1
22188: RET
// export function hHackSetLevel10 ; var i , j ; begin
22189: LD_INT 0
22191: PPUSH
22192: PPUSH
22193: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22194: LD_ADDR_VAR 0 2
22198: PUSH
22199: LD_INT 21
22201: PUSH
22202: LD_INT 1
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PPUSH
22209: CALL_OW 69
22213: PUSH
22214: FOR_IN
22215: IFFALSE 22267
// if IsSelected ( i ) then
22217: LD_VAR 0 2
22221: PPUSH
22222: CALL_OW 306
22226: IFFALSE 22265
// begin for j := 1 to 4 do
22228: LD_ADDR_VAR 0 3
22232: PUSH
22233: DOUBLE
22234: LD_INT 1
22236: DEC
22237: ST_TO_ADDR
22238: LD_INT 4
22240: PUSH
22241: FOR_TO
22242: IFFALSE 22263
// SetSkill ( i , j , 10 ) ;
22244: LD_VAR 0 2
22248: PPUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: LD_INT 10
22256: PPUSH
22257: CALL_OW 237
22261: GO 22241
22263: POP
22264: POP
// end ;
22265: GO 22214
22267: POP
22268: POP
// end ;
22269: LD_VAR 0 1
22273: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22274: LD_INT 0
22276: PPUSH
22277: PPUSH
22278: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22279: LD_ADDR_VAR 0 2
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 21
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 69
22314: PUSH
22315: FOR_IN
22316: IFFALSE 22357
// begin for j := 1 to 4 do
22318: LD_ADDR_VAR 0 3
22322: PUSH
22323: DOUBLE
22324: LD_INT 1
22326: DEC
22327: ST_TO_ADDR
22328: LD_INT 4
22330: PUSH
22331: FOR_TO
22332: IFFALSE 22353
// SetSkill ( i , j , 10 ) ;
22334: LD_VAR 0 2
22338: PPUSH
22339: LD_VAR 0 3
22343: PPUSH
22344: LD_INT 10
22346: PPUSH
22347: CALL_OW 237
22351: GO 22331
22353: POP
22354: POP
// end ;
22355: GO 22315
22357: POP
22358: POP
// end ;
22359: LD_VAR 0 1
22363: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22364: LD_INT 0
22366: PPUSH
// uc_side := your_side ;
22367: LD_ADDR_OWVAR 20
22371: PUSH
22372: LD_OWVAR 2
22376: ST_TO_ADDR
// uc_nation := nation ;
22377: LD_ADDR_OWVAR 21
22381: PUSH
22382: LD_VAR 0 1
22386: ST_TO_ADDR
// InitHc ;
22387: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22391: LD_INT 0
22393: PPUSH
22394: LD_VAR 0 2
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22408: LD_VAR 0 4
22412: PPUSH
22413: LD_VAR 0 5
22417: PPUSH
22418: CALL_OW 428
22422: PUSH
22423: LD_INT 0
22425: EQUAL
22426: IFFALSE 22450
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22428: CALL_OW 44
22432: PPUSH
22433: LD_VAR 0 4
22437: PPUSH
22438: LD_VAR 0 5
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 48
// end ;
22450: LD_VAR 0 6
22454: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22455: LD_INT 0
22457: PPUSH
22458: PPUSH
// uc_side := your_side ;
22459: LD_ADDR_OWVAR 20
22463: PUSH
22464: LD_OWVAR 2
22468: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22469: LD_VAR 0 1
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 3
22482: PUSH
22483: LD_INT 4
22485: PUSH
22486: LD_INT 5
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: IN
22496: IFFALSE 22508
// uc_nation := nation_american else
22498: LD_ADDR_OWVAR 21
22502: PUSH
22503: LD_INT 1
22505: ST_TO_ADDR
22506: GO 22551
// if chassis in [ 11 , 12 , 13 , 14 ] then
22508: LD_VAR 0 1
22512: PUSH
22513: LD_INT 11
22515: PUSH
22516: LD_INT 12
22518: PUSH
22519: LD_INT 13
22521: PUSH
22522: LD_INT 14
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: IN
22531: IFFALSE 22543
// uc_nation := nation_arabian else
22533: LD_ADDR_OWVAR 21
22537: PUSH
22538: LD_INT 2
22540: ST_TO_ADDR
22541: GO 22551
// uc_nation := nation_russian ;
22543: LD_ADDR_OWVAR 21
22547: PUSH
22548: LD_INT 3
22550: ST_TO_ADDR
// vc_chassis := chassis ;
22551: LD_ADDR_OWVAR 37
22555: PUSH
22556: LD_VAR 0 1
22560: ST_TO_ADDR
// vc_engine := engine ;
22561: LD_ADDR_OWVAR 39
22565: PUSH
22566: LD_VAR 0 2
22570: ST_TO_ADDR
// vc_control := control ;
22571: LD_ADDR_OWVAR 38
22575: PUSH
22576: LD_VAR 0 3
22580: ST_TO_ADDR
// vc_weapon := weapon ;
22581: LD_ADDR_OWVAR 40
22585: PUSH
22586: LD_VAR 0 4
22590: ST_TO_ADDR
// un := CreateVehicle ;
22591: LD_ADDR_VAR 0 8
22595: PUSH
22596: CALL_OW 45
22600: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22601: LD_VAR 0 8
22605: PPUSH
22606: LD_INT 0
22608: PPUSH
22609: LD_INT 5
22611: PPUSH
22612: CALL_OW 12
22616: PPUSH
22617: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22621: LD_VAR 0 8
22625: PPUSH
22626: LD_VAR 0 5
22630: PPUSH
22631: LD_VAR 0 6
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: CALL_OW 48
// end ;
22643: LD_VAR 0 7
22647: RET
// export hInvincible ; every 1 do
22648: GO 22650
22650: DISABLE
// hInvincible := [ ] ;
22651: LD_ADDR_EXP 80
22655: PUSH
22656: EMPTY
22657: ST_TO_ADDR
22658: END
// every 10 do var i ;
22659: GO 22661
22661: DISABLE
22662: LD_INT 0
22664: PPUSH
// begin enable ;
22665: ENABLE
// if not hInvincible then
22666: LD_EXP 80
22670: NOT
22671: IFFALSE 22675
// exit ;
22673: GO 22719
// for i in hInvincible do
22675: LD_ADDR_VAR 0 1
22679: PUSH
22680: LD_EXP 80
22684: PUSH
22685: FOR_IN
22686: IFFALSE 22717
// if GetLives ( i ) < 1000 then
22688: LD_VAR 0 1
22692: PPUSH
22693: CALL_OW 256
22697: PUSH
22698: LD_INT 1000
22700: LESS
22701: IFFALSE 22715
// SetLives ( i , 1000 ) ;
22703: LD_VAR 0 1
22707: PPUSH
22708: LD_INT 1000
22710: PPUSH
22711: CALL_OW 234
22715: GO 22685
22717: POP
22718: POP
// end ;
22719: PPOPN 1
22721: END
// export function hHackInvincible ; var i ; begin
22722: LD_INT 0
22724: PPUSH
22725: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22726: LD_ADDR_VAR 0 2
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 21
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 21
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: PUSH
22764: FOR_IN
22765: IFFALSE 22826
// if IsSelected ( i ) then
22767: LD_VAR 0 2
22771: PPUSH
22772: CALL_OW 306
22776: IFFALSE 22824
// begin if i in hInvincible then
22778: LD_VAR 0 2
22782: PUSH
22783: LD_EXP 80
22787: IN
22788: IFFALSE 22808
// hInvincible := hInvincible diff i else
22790: LD_ADDR_EXP 80
22794: PUSH
22795: LD_EXP 80
22799: PUSH
22800: LD_VAR 0 2
22804: DIFF
22805: ST_TO_ADDR
22806: GO 22824
// hInvincible := hInvincible union i ;
22808: LD_ADDR_EXP 80
22812: PUSH
22813: LD_EXP 80
22817: PUSH
22818: LD_VAR 0 2
22822: UNION
22823: ST_TO_ADDR
// end ;
22824: GO 22764
22826: POP
22827: POP
// end ;
22828: LD_VAR 0 1
22832: RET
// export function hHackInvisible ; var i , j ; begin
22833: LD_INT 0
22835: PPUSH
22836: PPUSH
22837: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22838: LD_ADDR_VAR 0 2
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: PUSH
22858: FOR_IN
22859: IFFALSE 22883
// if IsSelected ( i ) then
22861: LD_VAR 0 2
22865: PPUSH
22866: CALL_OW 306
22870: IFFALSE 22881
// ComForceInvisible ( i ) ;
22872: LD_VAR 0 2
22876: PPUSH
22877: CALL_OW 496
22881: GO 22858
22883: POP
22884: POP
// end ;
22885: LD_VAR 0 1
22889: RET
// export function hHackChangeYourSide ; begin
22890: LD_INT 0
22892: PPUSH
// if your_side = 8 then
22893: LD_OWVAR 2
22897: PUSH
22898: LD_INT 8
22900: EQUAL
22901: IFFALSE 22913
// your_side := 0 else
22903: LD_ADDR_OWVAR 2
22907: PUSH
22908: LD_INT 0
22910: ST_TO_ADDR
22911: GO 22927
// your_side := your_side + 1 ;
22913: LD_ADDR_OWVAR 2
22917: PUSH
22918: LD_OWVAR 2
22922: PUSH
22923: LD_INT 1
22925: PLUS
22926: ST_TO_ADDR
// end ;
22927: LD_VAR 0 1
22931: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22932: LD_INT 0
22934: PPUSH
22935: PPUSH
22936: PPUSH
// for i in all_units do
22937: LD_ADDR_VAR 0 2
22941: PUSH
22942: LD_OWVAR 3
22946: PUSH
22947: FOR_IN
22948: IFFALSE 23026
// if IsSelected ( i ) then
22950: LD_VAR 0 2
22954: PPUSH
22955: CALL_OW 306
22959: IFFALSE 23024
// begin j := GetSide ( i ) ;
22961: LD_ADDR_VAR 0 3
22965: PUSH
22966: LD_VAR 0 2
22970: PPUSH
22971: CALL_OW 255
22975: ST_TO_ADDR
// if j = 8 then
22976: LD_VAR 0 3
22980: PUSH
22981: LD_INT 8
22983: EQUAL
22984: IFFALSE 22996
// j := 0 else
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_INT 0
22993: ST_TO_ADDR
22994: GO 23010
// j := j + 1 ;
22996: LD_ADDR_VAR 0 3
23000: PUSH
23001: LD_VAR 0 3
23005: PUSH
23006: LD_INT 1
23008: PLUS
23009: ST_TO_ADDR
// SetSide ( i , j ) ;
23010: LD_VAR 0 2
23014: PPUSH
23015: LD_VAR 0 3
23019: PPUSH
23020: CALL_OW 235
// end ;
23024: GO 22947
23026: POP
23027: POP
// end ;
23028: LD_VAR 0 1
23032: RET
// export function hHackFog ; begin
23033: LD_INT 0
23035: PPUSH
// FogOff ( true ) ;
23036: LD_INT 1
23038: PPUSH
23039: CALL_OW 344
// end ;
23043: LD_VAR 0 1
23047: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23048: LD_INT 0
23050: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23051: LD_VAR 0 1
23055: PPUSH
23056: LD_VAR 0 2
23060: PPUSH
23061: LD_VAR 0 3
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 483
// CenterOnXY ( x , y ) ;
23076: LD_VAR 0 2
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: CALL_OW 84
// end ; end_of_file end_of_file
23090: LD_VAR 0 4
23094: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 264
23110: PUSH
23111: LD_EXP 97
23115: EQUAL
23116: IFFALSE 23188
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23118: LD_INT 68
23120: PPUSH
23121: LD_VAR 0 1
23125: PPUSH
23126: CALL_OW 255
23130: PPUSH
23131: CALL_OW 321
23135: PUSH
23136: LD_INT 2
23138: EQUAL
23139: IFFALSE 23151
// eff := 70 else
23141: LD_ADDR_VAR 0 4
23145: PUSH
23146: LD_INT 70
23148: ST_TO_ADDR
23149: GO 23159
// eff := 30 ;
23151: LD_ADDR_VAR 0 4
23155: PUSH
23156: LD_INT 30
23158: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL_OW 250
23168: PPUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 251
23178: PPUSH
23179: LD_VAR 0 4
23183: PPUSH
23184: CALL_OW 495
// end ; end ;
23188: LD_VAR 0 2
23192: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23193: LD_INT 0
23195: PPUSH
// end ;
23196: LD_VAR 0 4
23200: RET
// export function SOS_Command ( cmd ) ; begin
23201: LD_INT 0
23203: PPUSH
// end ;
23204: LD_VAR 0 2
23208: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23209: LD_INT 0
23211: PPUSH
// if cmd = 121 then
23212: LD_VAR 0 1
23216: PUSH
23217: LD_INT 121
23219: EQUAL
23220: IFFALSE 23222
// end ;
23222: LD_VAR 0 6
23226: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23227: LD_INT 0
23229: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23230: LD_VAR 0 1
23234: PUSH
23235: LD_INT 250
23237: EQUAL
23238: PUSH
23239: LD_VAR 0 2
23243: PPUSH
23244: CALL_OW 264
23248: PUSH
23249: LD_EXP 100
23253: EQUAL
23254: AND
23255: IFFALSE 23276
// MinerPlaceMine ( unit , x , y ) ;
23257: LD_VAR 0 2
23261: PPUSH
23262: LD_VAR 0 4
23266: PPUSH
23267: LD_VAR 0 5
23271: PPUSH
23272: CALL 25625 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23276: LD_VAR 0 1
23280: PUSH
23281: LD_INT 251
23283: EQUAL
23284: PUSH
23285: LD_VAR 0 2
23289: PPUSH
23290: CALL_OW 264
23294: PUSH
23295: LD_EXP 100
23299: EQUAL
23300: AND
23301: IFFALSE 23322
// MinerDetonateMine ( unit , x , y ) ;
23303: LD_VAR 0 2
23307: PPUSH
23308: LD_VAR 0 4
23312: PPUSH
23313: LD_VAR 0 5
23317: PPUSH
23318: CALL 25902 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23322: LD_VAR 0 1
23326: PUSH
23327: LD_INT 252
23329: EQUAL
23330: PUSH
23331: LD_VAR 0 2
23335: PPUSH
23336: CALL_OW 264
23340: PUSH
23341: LD_EXP 100
23345: EQUAL
23346: AND
23347: IFFALSE 23368
// MinerCreateMinefield ( unit , x , y ) ;
23349: LD_VAR 0 2
23353: PPUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: LD_VAR 0 5
23363: PPUSH
23364: CALL 26319 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23368: LD_VAR 0 1
23372: PUSH
23373: LD_INT 253
23375: EQUAL
23376: PUSH
23377: LD_VAR 0 2
23381: PPUSH
23382: CALL_OW 257
23386: PUSH
23387: LD_INT 5
23389: EQUAL
23390: AND
23391: IFFALSE 23412
// ComBinocular ( unit , x , y ) ;
23393: LD_VAR 0 2
23397: PPUSH
23398: LD_VAR 0 4
23402: PPUSH
23403: LD_VAR 0 5
23407: PPUSH
23408: CALL 26690 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23412: LD_VAR 0 1
23416: PUSH
23417: LD_INT 254
23419: EQUAL
23420: PUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 264
23430: PUSH
23431: LD_EXP 95
23435: EQUAL
23436: AND
23437: PUSH
23438: LD_VAR 0 3
23442: PPUSH
23443: CALL_OW 263
23447: PUSH
23448: LD_INT 3
23450: EQUAL
23451: AND
23452: IFFALSE 23468
// HackDestroyVehicle ( unit , selectedUnit ) ;
23454: LD_VAR 0 2
23458: PPUSH
23459: LD_VAR 0 3
23463: PPUSH
23464: CALL 24985 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23468: LD_VAR 0 1
23472: PUSH
23473: LD_INT 255
23475: EQUAL
23476: PUSH
23477: LD_VAR 0 2
23481: PPUSH
23482: CALL_OW 264
23486: PUSH
23487: LD_INT 14
23489: PUSH
23490: LD_INT 53
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: IN
23497: AND
23498: PUSH
23499: LD_VAR 0 4
23503: PPUSH
23504: LD_VAR 0 5
23508: PPUSH
23509: CALL_OW 488
23513: AND
23514: IFFALSE 23538
// CutTreeXYR ( unit , x , y , 12 ) ;
23516: LD_VAR 0 2
23520: PPUSH
23521: LD_VAR 0 4
23525: PPUSH
23526: LD_VAR 0 5
23530: PPUSH
23531: LD_INT 12
23533: PPUSH
23534: CALL 23551 0 4
// end ;
23538: LD_VAR 0 6
23542: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23543: LD_INT 0
23545: PPUSH
// end ;
23546: LD_VAR 0 4
23550: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23551: LD_INT 0
23553: PPUSH
23554: PPUSH
23555: PPUSH
23556: PPUSH
23557: PPUSH
23558: PPUSH
23559: PPUSH
23560: PPUSH
23561: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23562: LD_VAR 0 1
23566: NOT
23567: PUSH
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: CALL_OW 488
23582: NOT
23583: OR
23584: PUSH
23585: LD_VAR 0 4
23589: NOT
23590: OR
23591: IFFALSE 23595
// exit ;
23593: GO 23935
// list := [ ] ;
23595: LD_ADDR_VAR 0 13
23599: PUSH
23600: EMPTY
23601: ST_TO_ADDR
// if x - r < 0 then
23602: LD_VAR 0 2
23606: PUSH
23607: LD_VAR 0 4
23611: MINUS
23612: PUSH
23613: LD_INT 0
23615: LESS
23616: IFFALSE 23628
// min_x := 0 else
23618: LD_ADDR_VAR 0 7
23622: PUSH
23623: LD_INT 0
23625: ST_TO_ADDR
23626: GO 23644
// min_x := x - r ;
23628: LD_ADDR_VAR 0 7
23632: PUSH
23633: LD_VAR 0 2
23637: PUSH
23638: LD_VAR 0 4
23642: MINUS
23643: ST_TO_ADDR
// if y - r < 0 then
23644: LD_VAR 0 3
23648: PUSH
23649: LD_VAR 0 4
23653: MINUS
23654: PUSH
23655: LD_INT 0
23657: LESS
23658: IFFALSE 23670
// min_y := 0 else
23660: LD_ADDR_VAR 0 8
23664: PUSH
23665: LD_INT 0
23667: ST_TO_ADDR
23668: GO 23686
// min_y := y - r ;
23670: LD_ADDR_VAR 0 8
23674: PUSH
23675: LD_VAR 0 3
23679: PUSH
23680: LD_VAR 0 4
23684: MINUS
23685: ST_TO_ADDR
// max_x := x + r ;
23686: LD_ADDR_VAR 0 9
23690: PUSH
23691: LD_VAR 0 2
23695: PUSH
23696: LD_VAR 0 4
23700: PLUS
23701: ST_TO_ADDR
// max_y := y + r ;
23702: LD_ADDR_VAR 0 10
23706: PUSH
23707: LD_VAR 0 3
23711: PUSH
23712: LD_VAR 0 4
23716: PLUS
23717: ST_TO_ADDR
// for _x = min_x to max_x do
23718: LD_ADDR_VAR 0 11
23722: PUSH
23723: DOUBLE
23724: LD_VAR 0 7
23728: DEC
23729: ST_TO_ADDR
23730: LD_VAR 0 9
23734: PUSH
23735: FOR_TO
23736: IFFALSE 23853
// for _y = min_y to max_y do
23738: LD_ADDR_VAR 0 12
23742: PUSH
23743: DOUBLE
23744: LD_VAR 0 8
23748: DEC
23749: ST_TO_ADDR
23750: LD_VAR 0 10
23754: PUSH
23755: FOR_TO
23756: IFFALSE 23849
// begin if not ValidHex ( _x , _y ) then
23758: LD_VAR 0 11
23762: PPUSH
23763: LD_VAR 0 12
23767: PPUSH
23768: CALL_OW 488
23772: NOT
23773: IFFALSE 23777
// continue ;
23775: GO 23755
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23777: LD_VAR 0 11
23781: PPUSH
23782: LD_VAR 0 12
23786: PPUSH
23787: CALL_OW 351
23791: PUSH
23792: LD_VAR 0 11
23796: PPUSH
23797: LD_VAR 0 12
23801: PPUSH
23802: CALL_OW 554
23806: AND
23807: IFFALSE 23847
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23809: LD_ADDR_VAR 0 13
23813: PUSH
23814: LD_VAR 0 13
23818: PPUSH
23819: LD_VAR 0 13
23823: PUSH
23824: LD_INT 1
23826: PLUS
23827: PPUSH
23828: LD_VAR 0 11
23832: PUSH
23833: LD_VAR 0 12
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PPUSH
23842: CALL_OW 2
23846: ST_TO_ADDR
// end ;
23847: GO 23755
23849: POP
23850: POP
23851: GO 23735
23853: POP
23854: POP
// if not list then
23855: LD_VAR 0 13
23859: NOT
23860: IFFALSE 23864
// exit ;
23862: GO 23935
// for i in list do
23864: LD_ADDR_VAR 0 6
23868: PUSH
23869: LD_VAR 0 13
23873: PUSH
23874: FOR_IN
23875: IFFALSE 23933
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23877: LD_VAR 0 1
23881: PPUSH
23882: LD_STRING M
23884: PUSH
23885: LD_VAR 0 6
23889: PUSH
23890: LD_INT 1
23892: ARRAY
23893: PUSH
23894: LD_VAR 0 6
23898: PUSH
23899: LD_INT 2
23901: ARRAY
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: PPUSH
23927: CALL_OW 447
23931: GO 23874
23933: POP
23934: POP
// end ;
23935: LD_VAR 0 5
23939: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23940: LD_EXP 83
23944: NOT
23945: IFFALSE 23995
23947: GO 23949
23949: DISABLE
// begin initHack := true ;
23950: LD_ADDR_EXP 83
23954: PUSH
23955: LD_INT 1
23957: ST_TO_ADDR
// hackTanks := [ ] ;
23958: LD_ADDR_EXP 84
23962: PUSH
23963: EMPTY
23964: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23965: LD_ADDR_EXP 85
23969: PUSH
23970: EMPTY
23971: ST_TO_ADDR
// hackLimit := 3 ;
23972: LD_ADDR_EXP 86
23976: PUSH
23977: LD_INT 3
23979: ST_TO_ADDR
// hackDist := 12 ;
23980: LD_ADDR_EXP 87
23984: PUSH
23985: LD_INT 12
23987: ST_TO_ADDR
// hackCounter := [ ] ;
23988: LD_ADDR_EXP 88
23992: PUSH
23993: EMPTY
23994: ST_TO_ADDR
// end ;
23995: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23996: LD_EXP 83
24000: PUSH
24001: LD_INT 34
24003: PUSH
24004: LD_EXP 95
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PPUSH
24013: CALL_OW 69
24017: AND
24018: IFFALSE 24273
24020: GO 24022
24022: DISABLE
24023: LD_INT 0
24025: PPUSH
24026: PPUSH
// begin enable ;
24027: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24028: LD_ADDR_VAR 0 1
24032: PUSH
24033: LD_INT 34
24035: PUSH
24036: LD_EXP 95
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PPUSH
24045: CALL_OW 69
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24271
// begin if not i in hackTanks then
24053: LD_VAR 0 1
24057: PUSH
24058: LD_EXP 84
24062: IN
24063: NOT
24064: IFFALSE 24147
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24066: LD_ADDR_EXP 84
24070: PUSH
24071: LD_EXP 84
24075: PPUSH
24076: LD_EXP 84
24080: PUSH
24081: LD_INT 1
24083: PLUS
24084: PPUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL_OW 1
24094: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24095: LD_ADDR_EXP 85
24099: PUSH
24100: LD_EXP 85
24104: PPUSH
24105: LD_EXP 85
24109: PUSH
24110: LD_INT 1
24112: PLUS
24113: PPUSH
24114: EMPTY
24115: PPUSH
24116: CALL_OW 1
24120: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24121: LD_ADDR_EXP 88
24125: PUSH
24126: LD_EXP 88
24130: PPUSH
24131: LD_EXP 88
24135: PUSH
24136: LD_INT 1
24138: PLUS
24139: PPUSH
24140: EMPTY
24141: PPUSH
24142: CALL_OW 1
24146: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 302
24156: NOT
24157: IFFALSE 24170
// begin HackUnlinkAll ( i ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL 24276 0 1
// continue ;
24168: GO 24050
// end ; HackCheckCapturedStatus ( i ) ;
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL 24719 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24179: LD_ADDR_VAR 0 2
24183: PUSH
24184: LD_INT 81
24186: PUSH
24187: LD_VAR 0 1
24191: PPUSH
24192: CALL_OW 255
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 33
24203: PUSH
24204: LD_INT 3
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 91
24213: PUSH
24214: LD_VAR 0 1
24218: PUSH
24219: LD_EXP 87
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 50
24231: PUSH
24232: EMPTY
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: PPUSH
24241: CALL_OW 69
24245: ST_TO_ADDR
// if not tmp then
24246: LD_VAR 0 2
24250: NOT
24251: IFFALSE 24255
// continue ;
24253: GO 24050
// HackLink ( i , tmp ) ;
24255: LD_VAR 0 1
24259: PPUSH
24260: LD_VAR 0 2
24264: PPUSH
24265: CALL 24412 0 2
// end ;
24269: GO 24050
24271: POP
24272: POP
// end ;
24273: PPOPN 2
24275: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
24280: PPUSH
// if not hack in hackTanks then
24281: LD_VAR 0 1
24285: PUSH
24286: LD_EXP 84
24290: IN
24291: NOT
24292: IFFALSE 24296
// exit ;
24294: GO 24407
// index := GetElementIndex ( hackTanks , hack ) ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_EXP 84
24305: PPUSH
24306: LD_VAR 0 1
24310: PPUSH
24311: CALL 32001 0 2
24315: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24316: LD_EXP 85
24320: PUSH
24321: LD_VAR 0 4
24325: ARRAY
24326: IFFALSE 24407
// begin for i in hackTanksCaptured [ index ] do
24328: LD_ADDR_VAR 0 3
24332: PUSH
24333: LD_EXP 85
24337: PUSH
24338: LD_VAR 0 4
24342: ARRAY
24343: PUSH
24344: FOR_IN
24345: IFFALSE 24371
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24347: LD_VAR 0 3
24351: PUSH
24352: LD_INT 1
24354: ARRAY
24355: PPUSH
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 2
24363: ARRAY
24364: PPUSH
24365: CALL_OW 235
24369: GO 24344
24371: POP
24372: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24373: LD_ADDR_EXP 85
24377: PUSH
24378: LD_EXP 85
24382: PPUSH
24383: LD_VAR 0 4
24387: PPUSH
24388: EMPTY
24389: PPUSH
24390: CALL_OW 1
24394: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24395: LD_VAR 0 1
24399: PPUSH
24400: LD_INT 0
24402: PPUSH
24403: CALL_OW 505
// end ; end ;
24407: LD_VAR 0 2
24411: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24412: LD_INT 0
24414: PPUSH
24415: PPUSH
24416: PPUSH
// if not hack in hackTanks or not vehicles then
24417: LD_VAR 0 1
24421: PUSH
24422: LD_EXP 84
24426: IN
24427: NOT
24428: PUSH
24429: LD_VAR 0 2
24433: NOT
24434: OR
24435: IFFALSE 24439
// exit ;
24437: GO 24714
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24439: LD_ADDR_VAR 0 2
24443: PUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: LD_VAR 0 2
24453: PPUSH
24454: LD_INT 1
24456: PPUSH
24457: LD_INT 1
24459: PPUSH
24460: CALL 32651 0 4
24464: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24465: LD_ADDR_VAR 0 5
24469: PUSH
24470: LD_EXP 84
24474: PPUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: CALL 32001 0 2
24484: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24485: LD_EXP 85
24489: PUSH
24490: LD_VAR 0 5
24494: ARRAY
24495: PUSH
24496: LD_EXP 86
24500: LESS
24501: IFFALSE 24690
// begin for i := 1 to vehicles do
24503: LD_ADDR_VAR 0 4
24507: PUSH
24508: DOUBLE
24509: LD_INT 1
24511: DEC
24512: ST_TO_ADDR
24513: LD_VAR 0 2
24517: PUSH
24518: FOR_TO
24519: IFFALSE 24688
// begin if hackTanksCaptured [ index ] = hackLimit then
24521: LD_EXP 85
24525: PUSH
24526: LD_VAR 0 5
24530: ARRAY
24531: PUSH
24532: LD_EXP 86
24536: EQUAL
24537: IFFALSE 24541
// break ;
24539: GO 24688
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24541: LD_ADDR_EXP 88
24545: PUSH
24546: LD_EXP 88
24550: PPUSH
24551: LD_VAR 0 5
24555: PPUSH
24556: LD_EXP 88
24560: PUSH
24561: LD_VAR 0 5
24565: ARRAY
24566: PUSH
24567: LD_INT 1
24569: PLUS
24570: PPUSH
24571: CALL_OW 1
24575: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24576: LD_ADDR_EXP 85
24580: PUSH
24581: LD_EXP 85
24585: PPUSH
24586: LD_VAR 0 5
24590: PUSH
24591: LD_EXP 85
24595: PUSH
24596: LD_VAR 0 5
24600: ARRAY
24601: PUSH
24602: LD_INT 1
24604: PLUS
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PPUSH
24610: LD_VAR 0 2
24614: PUSH
24615: LD_VAR 0 4
24619: ARRAY
24620: PUSH
24621: LD_VAR 0 2
24625: PUSH
24626: LD_VAR 0 4
24630: ARRAY
24631: PPUSH
24632: CALL_OW 255
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL 32216 0 3
24645: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24646: LD_VAR 0 2
24650: PUSH
24651: LD_VAR 0 4
24655: ARRAY
24656: PPUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 255
24666: PPUSH
24667: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24671: LD_VAR 0 2
24675: PUSH
24676: LD_VAR 0 4
24680: ARRAY
24681: PPUSH
24682: CALL_OW 141
// end ;
24686: GO 24518
24688: POP
24689: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24690: LD_VAR 0 1
24694: PPUSH
24695: LD_EXP 85
24699: PUSH
24700: LD_VAR 0 5
24704: ARRAY
24705: PUSH
24706: LD_INT 0
24708: PLUS
24709: PPUSH
24710: CALL_OW 505
// end ;
24714: LD_VAR 0 3
24718: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24719: LD_INT 0
24721: PPUSH
24722: PPUSH
24723: PPUSH
24724: PPUSH
// if not hack in hackTanks then
24725: LD_VAR 0 1
24729: PUSH
24730: LD_EXP 84
24734: IN
24735: NOT
24736: IFFALSE 24740
// exit ;
24738: GO 24980
// index := GetElementIndex ( hackTanks , hack ) ;
24740: LD_ADDR_VAR 0 4
24744: PUSH
24745: LD_EXP 84
24749: PPUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL 32001 0 2
24759: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: DOUBLE
24766: LD_EXP 85
24770: PUSH
24771: LD_VAR 0 4
24775: ARRAY
24776: INC
24777: ST_TO_ADDR
24778: LD_INT 1
24780: PUSH
24781: FOR_DOWNTO
24782: IFFALSE 24954
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24784: LD_ADDR_VAR 0 5
24788: PUSH
24789: LD_EXP 85
24793: PUSH
24794: LD_VAR 0 4
24798: ARRAY
24799: PUSH
24800: LD_VAR 0 3
24804: ARRAY
24805: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24806: LD_VAR 0 5
24810: PUSH
24811: LD_INT 1
24813: ARRAY
24814: PPUSH
24815: CALL_OW 302
24819: NOT
24820: PUSH
24821: LD_VAR 0 5
24825: PUSH
24826: LD_INT 1
24828: ARRAY
24829: PPUSH
24830: CALL_OW 255
24834: PUSH
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 255
24844: NONEQUAL
24845: OR
24846: IFFALSE 24952
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24848: LD_VAR 0 5
24852: PUSH
24853: LD_INT 1
24855: ARRAY
24856: PPUSH
24857: CALL_OW 305
24861: PUSH
24862: LD_VAR 0 5
24866: PUSH
24867: LD_INT 1
24869: ARRAY
24870: PPUSH
24871: CALL_OW 255
24875: PUSH
24876: LD_VAR 0 1
24880: PPUSH
24881: CALL_OW 255
24885: EQUAL
24886: AND
24887: IFFALSE 24911
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24889: LD_VAR 0 5
24893: PUSH
24894: LD_INT 1
24896: ARRAY
24897: PPUSH
24898: LD_VAR 0 5
24902: PUSH
24903: LD_INT 2
24905: ARRAY
24906: PPUSH
24907: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24911: LD_ADDR_EXP 85
24915: PUSH
24916: LD_EXP 85
24920: PPUSH
24921: LD_VAR 0 4
24925: PPUSH
24926: LD_EXP 85
24930: PUSH
24931: LD_VAR 0 4
24935: ARRAY
24936: PPUSH
24937: LD_VAR 0 3
24941: PPUSH
24942: CALL_OW 3
24946: PPUSH
24947: CALL_OW 1
24951: ST_TO_ADDR
// end ; end ;
24952: GO 24781
24954: POP
24955: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24956: LD_VAR 0 1
24960: PPUSH
24961: LD_EXP 85
24965: PUSH
24966: LD_VAR 0 4
24970: ARRAY
24971: PUSH
24972: LD_INT 0
24974: PLUS
24975: PPUSH
24976: CALL_OW 505
// end ;
24980: LD_VAR 0 2
24984: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24985: LD_INT 0
24987: PPUSH
24988: PPUSH
24989: PPUSH
24990: PPUSH
// if not hack in hackTanks then
24991: LD_VAR 0 1
24995: PUSH
24996: LD_EXP 84
25000: IN
25001: NOT
25002: IFFALSE 25006
// exit ;
25004: GO 25091
// index := GetElementIndex ( hackTanks , hack ) ;
25006: LD_ADDR_VAR 0 5
25010: PUSH
25011: LD_EXP 84
25015: PPUSH
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL 32001 0 2
25025: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25026: LD_ADDR_VAR 0 4
25030: PUSH
25031: DOUBLE
25032: LD_INT 1
25034: DEC
25035: ST_TO_ADDR
25036: LD_EXP 85
25040: PUSH
25041: LD_VAR 0 5
25045: ARRAY
25046: PUSH
25047: FOR_TO
25048: IFFALSE 25089
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25050: LD_EXP 85
25054: PUSH
25055: LD_VAR 0 5
25059: ARRAY
25060: PUSH
25061: LD_VAR 0 4
25065: ARRAY
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: PUSH
25071: LD_VAR 0 2
25075: EQUAL
25076: IFFALSE 25087
// KillUnit ( vehicle ) ;
25078: LD_VAR 0 2
25082: PPUSH
25083: CALL_OW 66
25087: GO 25047
25089: POP
25090: POP
// end ;
25091: LD_VAR 0 3
25095: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25096: LD_EXP 89
25100: NOT
25101: IFFALSE 25136
25103: GO 25105
25105: DISABLE
// begin initMiner := true ;
25106: LD_ADDR_EXP 89
25110: PUSH
25111: LD_INT 1
25113: ST_TO_ADDR
// minersList := [ ] ;
25114: LD_ADDR_EXP 90
25118: PUSH
25119: EMPTY
25120: ST_TO_ADDR
// minerMinesList := [ ] ;
25121: LD_ADDR_EXP 91
25125: PUSH
25126: EMPTY
25127: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25128: LD_ADDR_EXP 92
25132: PUSH
25133: LD_INT 5
25135: ST_TO_ADDR
// end ;
25136: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25137: LD_EXP 89
25141: PUSH
25142: LD_INT 34
25144: PUSH
25145: LD_EXP 100
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PPUSH
25154: CALL_OW 69
25158: AND
25159: IFFALSE 25622
25161: GO 25163
25163: DISABLE
25164: LD_INT 0
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
// begin enable ;
25170: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25171: LD_ADDR_VAR 0 1
25175: PUSH
25176: LD_INT 34
25178: PUSH
25179: LD_EXP 100
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PPUSH
25188: CALL_OW 69
25192: PUSH
25193: FOR_IN
25194: IFFALSE 25266
// begin if not i in minersList then
25196: LD_VAR 0 1
25200: PUSH
25201: LD_EXP 90
25205: IN
25206: NOT
25207: IFFALSE 25264
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25209: LD_ADDR_EXP 90
25213: PUSH
25214: LD_EXP 90
25218: PPUSH
25219: LD_EXP 90
25223: PUSH
25224: LD_INT 1
25226: PLUS
25227: PPUSH
25228: LD_VAR 0 1
25232: PPUSH
25233: CALL_OW 1
25237: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25238: LD_ADDR_EXP 91
25242: PUSH
25243: LD_EXP 91
25247: PPUSH
25248: LD_EXP 91
25252: PUSH
25253: LD_INT 1
25255: PLUS
25256: PPUSH
25257: EMPTY
25258: PPUSH
25259: CALL_OW 1
25263: ST_TO_ADDR
// end end ;
25264: GO 25193
25266: POP
25267: POP
// for i := minerMinesList downto 1 do
25268: LD_ADDR_VAR 0 1
25272: PUSH
25273: DOUBLE
25274: LD_EXP 91
25278: INC
25279: ST_TO_ADDR
25280: LD_INT 1
25282: PUSH
25283: FOR_DOWNTO
25284: IFFALSE 25620
// begin if IsLive ( minersList [ i ] ) then
25286: LD_EXP 90
25290: PUSH
25291: LD_VAR 0 1
25295: ARRAY
25296: PPUSH
25297: CALL_OW 300
25301: IFFALSE 25329
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25303: LD_EXP 90
25307: PUSH
25308: LD_VAR 0 1
25312: ARRAY
25313: PPUSH
25314: LD_EXP 91
25318: PUSH
25319: LD_VAR 0 1
25323: ARRAY
25324: PPUSH
25325: CALL_OW 505
// if not minerMinesList [ i ] then
25329: LD_EXP 91
25333: PUSH
25334: LD_VAR 0 1
25338: ARRAY
25339: NOT
25340: IFFALSE 25344
// continue ;
25342: GO 25283
// for j := minerMinesList [ i ] downto 1 do
25344: LD_ADDR_VAR 0 2
25348: PUSH
25349: DOUBLE
25350: LD_EXP 91
25354: PUSH
25355: LD_VAR 0 1
25359: ARRAY
25360: INC
25361: ST_TO_ADDR
25362: LD_INT 1
25364: PUSH
25365: FOR_DOWNTO
25366: IFFALSE 25616
// begin side := GetSide ( minersList [ i ] ) ;
25368: LD_ADDR_VAR 0 3
25372: PUSH
25373: LD_EXP 90
25377: PUSH
25378: LD_VAR 0 1
25382: ARRAY
25383: PPUSH
25384: CALL_OW 255
25388: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25389: LD_ADDR_VAR 0 4
25393: PUSH
25394: LD_EXP 91
25398: PUSH
25399: LD_VAR 0 1
25403: ARRAY
25404: PUSH
25405: LD_VAR 0 2
25409: ARRAY
25410: PUSH
25411: LD_INT 1
25413: ARRAY
25414: PPUSH
25415: LD_EXP 91
25419: PUSH
25420: LD_VAR 0 1
25424: ARRAY
25425: PUSH
25426: LD_VAR 0 2
25430: ARRAY
25431: PUSH
25432: LD_INT 2
25434: ARRAY
25435: PPUSH
25436: CALL_OW 428
25440: ST_TO_ADDR
// if not tmp then
25441: LD_VAR 0 4
25445: NOT
25446: IFFALSE 25450
// continue ;
25448: GO 25365
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25450: LD_VAR 0 4
25454: PUSH
25455: LD_INT 81
25457: PUSH
25458: LD_VAR 0 3
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PPUSH
25467: CALL_OW 69
25471: IN
25472: PUSH
25473: LD_EXP 91
25477: PUSH
25478: LD_VAR 0 1
25482: ARRAY
25483: PUSH
25484: LD_VAR 0 2
25488: ARRAY
25489: PUSH
25490: LD_INT 1
25492: ARRAY
25493: PPUSH
25494: LD_EXP 91
25498: PUSH
25499: LD_VAR 0 1
25503: ARRAY
25504: PUSH
25505: LD_VAR 0 2
25509: ARRAY
25510: PUSH
25511: LD_INT 2
25513: ARRAY
25514: PPUSH
25515: CALL_OW 458
25519: AND
25520: IFFALSE 25614
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25522: LD_EXP 91
25526: PUSH
25527: LD_VAR 0 1
25531: ARRAY
25532: PUSH
25533: LD_VAR 0 2
25537: ARRAY
25538: PUSH
25539: LD_INT 1
25541: ARRAY
25542: PPUSH
25543: LD_EXP 91
25547: PUSH
25548: LD_VAR 0 1
25552: ARRAY
25553: PUSH
25554: LD_VAR 0 2
25558: ARRAY
25559: PUSH
25560: LD_INT 2
25562: ARRAY
25563: PPUSH
25564: LD_VAR 0 3
25568: PPUSH
25569: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25573: LD_ADDR_EXP 91
25577: PUSH
25578: LD_EXP 91
25582: PPUSH
25583: LD_VAR 0 1
25587: PPUSH
25588: LD_EXP 91
25592: PUSH
25593: LD_VAR 0 1
25597: ARRAY
25598: PPUSH
25599: LD_VAR 0 2
25603: PPUSH
25604: CALL_OW 3
25608: PPUSH
25609: CALL_OW 1
25613: ST_TO_ADDR
// end ; end ;
25614: GO 25365
25616: POP
25617: POP
// end ;
25618: GO 25283
25620: POP
25621: POP
// end ;
25622: PPOPN 4
25624: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25625: LD_INT 0
25627: PPUSH
25628: PPUSH
// result := false ;
25629: LD_ADDR_VAR 0 4
25633: PUSH
25634: LD_INT 0
25636: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 264
25646: PUSH
25647: LD_EXP 100
25651: EQUAL
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 25897
// index := GetElementIndex ( minersList , unit ) ;
25657: LD_ADDR_VAR 0 5
25661: PUSH
25662: LD_EXP 90
25666: PPUSH
25667: LD_VAR 0 1
25671: PPUSH
25672: CALL 32001 0 2
25676: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25677: LD_EXP 91
25681: PUSH
25682: LD_VAR 0 5
25686: ARRAY
25687: PUSH
25688: LD_EXP 92
25692: GREATEREQUAL
25693: IFFALSE 25697
// exit ;
25695: GO 25897
// ComMoveXY ( unit , x , y ) ;
25697: LD_VAR 0 1
25701: PPUSH
25702: LD_VAR 0 2
25706: PPUSH
25707: LD_VAR 0 3
25711: PPUSH
25712: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25716: LD_INT 35
25718: PPUSH
25719: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25723: LD_VAR 0 1
25727: PPUSH
25728: LD_VAR 0 2
25732: PPUSH
25733: LD_VAR 0 3
25737: PPUSH
25738: CALL 62398 0 3
25742: NOT
25743: PUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 314
25753: AND
25754: IFFALSE 25758
// exit ;
25756: GO 25897
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25758: LD_VAR 0 2
25762: PPUSH
25763: LD_VAR 0 3
25767: PPUSH
25768: CALL_OW 428
25772: PUSH
25773: LD_VAR 0 1
25777: EQUAL
25778: PUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 314
25788: NOT
25789: AND
25790: IFFALSE 25716
// PlaySoundXY ( x , y , PlantMine ) ;
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_VAR 0 3
25801: PPUSH
25802: LD_STRING PlantMine
25804: PPUSH
25805: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25809: LD_VAR 0 2
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 255
25828: PPUSH
25829: LD_INT 0
25831: PPUSH
25832: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25836: LD_ADDR_EXP 91
25840: PUSH
25841: LD_EXP 91
25845: PPUSH
25846: LD_VAR 0 5
25850: PUSH
25851: LD_EXP 91
25855: PUSH
25856: LD_VAR 0 5
25860: ARRAY
25861: PUSH
25862: LD_INT 1
25864: PLUS
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PPUSH
25870: LD_VAR 0 2
25874: PUSH
25875: LD_VAR 0 3
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL 32216 0 3
25888: ST_TO_ADDR
// result := true ;
25889: LD_ADDR_VAR 0 4
25893: PUSH
25894: LD_INT 1
25896: ST_TO_ADDR
// end ;
25897: LD_VAR 0 4
25901: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
25906: PPUSH
// if not unit in minersList then
25907: LD_VAR 0 1
25911: PUSH
25912: LD_EXP 90
25916: IN
25917: NOT
25918: IFFALSE 25922
// exit ;
25920: GO 26314
// index := GetElementIndex ( minersList , unit ) ;
25922: LD_ADDR_VAR 0 6
25926: PUSH
25927: LD_EXP 90
25931: PPUSH
25932: LD_VAR 0 1
25936: PPUSH
25937: CALL 32001 0 2
25941: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25942: LD_ADDR_VAR 0 5
25946: PUSH
25947: DOUBLE
25948: LD_EXP 91
25952: PUSH
25953: LD_VAR 0 6
25957: ARRAY
25958: INC
25959: ST_TO_ADDR
25960: LD_INT 1
25962: PUSH
25963: FOR_DOWNTO
25964: IFFALSE 26125
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25966: LD_EXP 91
25970: PUSH
25971: LD_VAR 0 6
25975: ARRAY
25976: PUSH
25977: LD_VAR 0 5
25981: ARRAY
25982: PUSH
25983: LD_INT 1
25985: ARRAY
25986: PUSH
25987: LD_VAR 0 2
25991: EQUAL
25992: PUSH
25993: LD_EXP 91
25997: PUSH
25998: LD_VAR 0 6
26002: ARRAY
26003: PUSH
26004: LD_VAR 0 5
26008: ARRAY
26009: PUSH
26010: LD_INT 2
26012: ARRAY
26013: PUSH
26014: LD_VAR 0 3
26018: EQUAL
26019: AND
26020: IFFALSE 26123
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26022: LD_EXP 91
26026: PUSH
26027: LD_VAR 0 6
26031: ARRAY
26032: PUSH
26033: LD_VAR 0 5
26037: ARRAY
26038: PUSH
26039: LD_INT 1
26041: ARRAY
26042: PPUSH
26043: LD_EXP 91
26047: PUSH
26048: LD_VAR 0 6
26052: ARRAY
26053: PUSH
26054: LD_VAR 0 5
26058: ARRAY
26059: PUSH
26060: LD_INT 2
26062: ARRAY
26063: PPUSH
26064: LD_VAR 0 1
26068: PPUSH
26069: CALL_OW 255
26073: PPUSH
26074: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26078: LD_ADDR_EXP 91
26082: PUSH
26083: LD_EXP 91
26087: PPUSH
26088: LD_VAR 0 6
26092: PPUSH
26093: LD_EXP 91
26097: PUSH
26098: LD_VAR 0 6
26102: ARRAY
26103: PPUSH
26104: LD_VAR 0 5
26108: PPUSH
26109: CALL_OW 3
26113: PPUSH
26114: CALL_OW 1
26118: ST_TO_ADDR
// exit ;
26119: POP
26120: POP
26121: GO 26314
// end ; end ;
26123: GO 25963
26125: POP
26126: POP
// for i := minerMinesList [ index ] downto 1 do
26127: LD_ADDR_VAR 0 5
26131: PUSH
26132: DOUBLE
26133: LD_EXP 91
26137: PUSH
26138: LD_VAR 0 6
26142: ARRAY
26143: INC
26144: ST_TO_ADDR
26145: LD_INT 1
26147: PUSH
26148: FOR_DOWNTO
26149: IFFALSE 26312
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26151: LD_EXP 91
26155: PUSH
26156: LD_VAR 0 6
26160: ARRAY
26161: PUSH
26162: LD_VAR 0 5
26166: ARRAY
26167: PUSH
26168: LD_INT 1
26170: ARRAY
26171: PPUSH
26172: LD_EXP 91
26176: PUSH
26177: LD_VAR 0 6
26181: ARRAY
26182: PUSH
26183: LD_VAR 0 5
26187: ARRAY
26188: PUSH
26189: LD_INT 2
26191: ARRAY
26192: PPUSH
26193: LD_VAR 0 2
26197: PPUSH
26198: LD_VAR 0 3
26202: PPUSH
26203: CALL_OW 298
26207: PUSH
26208: LD_INT 6
26210: LESS
26211: IFFALSE 26310
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26213: LD_EXP 91
26217: PUSH
26218: LD_VAR 0 6
26222: ARRAY
26223: PUSH
26224: LD_VAR 0 5
26228: ARRAY
26229: PUSH
26230: LD_INT 1
26232: ARRAY
26233: PPUSH
26234: LD_EXP 91
26238: PUSH
26239: LD_VAR 0 6
26243: ARRAY
26244: PUSH
26245: LD_VAR 0 5
26249: ARRAY
26250: PUSH
26251: LD_INT 2
26253: ARRAY
26254: PPUSH
26255: LD_VAR 0 1
26259: PPUSH
26260: CALL_OW 255
26264: PPUSH
26265: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26269: LD_ADDR_EXP 91
26273: PUSH
26274: LD_EXP 91
26278: PPUSH
26279: LD_VAR 0 6
26283: PPUSH
26284: LD_EXP 91
26288: PUSH
26289: LD_VAR 0 6
26293: ARRAY
26294: PPUSH
26295: LD_VAR 0 5
26299: PPUSH
26300: CALL_OW 3
26304: PPUSH
26305: CALL_OW 1
26309: ST_TO_ADDR
// end ; end ;
26310: GO 26148
26312: POP
26313: POP
// end ;
26314: LD_VAR 0 4
26318: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26330: LD_VAR 0 1
26334: PPUSH
26335: CALL_OW 264
26339: PUSH
26340: LD_EXP 100
26344: EQUAL
26345: NOT
26346: PUSH
26347: LD_VAR 0 1
26351: PUSH
26352: LD_EXP 90
26356: IN
26357: NOT
26358: OR
26359: IFFALSE 26363
// exit ;
26361: GO 26685
// index := GetElementIndex ( minersList , unit ) ;
26363: LD_ADDR_VAR 0 6
26367: PUSH
26368: LD_EXP 90
26372: PPUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: CALL 32001 0 2
26382: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26383: LD_ADDR_VAR 0 8
26387: PUSH
26388: LD_EXP 92
26392: PUSH
26393: LD_EXP 91
26397: PUSH
26398: LD_VAR 0 6
26402: ARRAY
26403: MINUS
26404: ST_TO_ADDR
// if not minesFreeAmount then
26405: LD_VAR 0 8
26409: NOT
26410: IFFALSE 26414
// exit ;
26412: GO 26685
// tmp := [ ] ;
26414: LD_ADDR_VAR 0 7
26418: PUSH
26419: EMPTY
26420: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26421: LD_ADDR_VAR 0 5
26425: PUSH
26426: DOUBLE
26427: LD_INT 1
26429: DEC
26430: ST_TO_ADDR
26431: LD_VAR 0 8
26435: PUSH
26436: FOR_TO
26437: IFFALSE 26632
// begin _d := rand ( 0 , 5 ) ;
26439: LD_ADDR_VAR 0 11
26443: PUSH
26444: LD_INT 0
26446: PPUSH
26447: LD_INT 5
26449: PPUSH
26450: CALL_OW 12
26454: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26455: LD_ADDR_VAR 0 12
26459: PUSH
26460: LD_INT 2
26462: PPUSH
26463: LD_INT 6
26465: PPUSH
26466: CALL_OW 12
26470: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26471: LD_ADDR_VAR 0 9
26475: PUSH
26476: LD_VAR 0 2
26480: PPUSH
26481: LD_VAR 0 11
26485: PPUSH
26486: LD_VAR 0 12
26490: PPUSH
26491: CALL_OW 272
26495: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26496: LD_ADDR_VAR 0 10
26500: PUSH
26501: LD_VAR 0 3
26505: PPUSH
26506: LD_VAR 0 11
26510: PPUSH
26511: LD_VAR 0 12
26515: PPUSH
26516: CALL_OW 273
26520: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26521: LD_VAR 0 9
26525: PPUSH
26526: LD_VAR 0 10
26530: PPUSH
26531: CALL_OW 488
26535: PUSH
26536: LD_VAR 0 9
26540: PUSH
26541: LD_VAR 0 10
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_VAR 0 7
26554: IN
26555: NOT
26556: AND
26557: PUSH
26558: LD_VAR 0 9
26562: PPUSH
26563: LD_VAR 0 10
26567: PPUSH
26568: CALL_OW 458
26572: NOT
26573: AND
26574: IFFALSE 26616
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26576: LD_ADDR_VAR 0 7
26580: PUSH
26581: LD_VAR 0 7
26585: PPUSH
26586: LD_VAR 0 7
26590: PUSH
26591: LD_INT 1
26593: PLUS
26594: PPUSH
26595: LD_VAR 0 9
26599: PUSH
26600: LD_VAR 0 10
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL_OW 1
26613: ST_TO_ADDR
26614: GO 26630
// i := i - 1 ;
26616: LD_ADDR_VAR 0 5
26620: PUSH
26621: LD_VAR 0 5
26625: PUSH
26626: LD_INT 1
26628: MINUS
26629: ST_TO_ADDR
// end ;
26630: GO 26436
26632: POP
26633: POP
// for i in tmp do
26634: LD_ADDR_VAR 0 5
26638: PUSH
26639: LD_VAR 0 7
26643: PUSH
26644: FOR_IN
26645: IFFALSE 26683
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26647: LD_VAR 0 1
26651: PPUSH
26652: LD_VAR 0 5
26656: PUSH
26657: LD_INT 1
26659: ARRAY
26660: PPUSH
26661: LD_VAR 0 5
26665: PUSH
26666: LD_INT 2
26668: ARRAY
26669: PPUSH
26670: CALL 25625 0 3
26674: NOT
26675: IFFALSE 26681
// exit ;
26677: POP
26678: POP
26679: GO 26685
26681: GO 26644
26683: POP
26684: POP
// end ;
26685: LD_VAR 0 4
26689: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
// if not GetClass ( unit ) = class_sniper then
26699: LD_VAR 0 1
26703: PPUSH
26704: CALL_OW 257
26708: PUSH
26709: LD_INT 5
26711: EQUAL
26712: NOT
26713: IFFALSE 26717
// exit ;
26715: GO 27105
// dist := 8 ;
26717: LD_ADDR_VAR 0 5
26721: PUSH
26722: LD_INT 8
26724: ST_TO_ADDR
// viewRange := 12 ;
26725: LD_ADDR_VAR 0 7
26729: PUSH
26730: LD_INT 12
26732: ST_TO_ADDR
// side := GetSide ( unit ) ;
26733: LD_ADDR_VAR 0 6
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 255
26747: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26748: LD_INT 61
26750: PPUSH
26751: LD_VAR 0 6
26755: PPUSH
26756: CALL_OW 321
26760: PUSH
26761: LD_INT 2
26763: EQUAL
26764: IFFALSE 26774
// viewRange := 16 ;
26766: LD_ADDR_VAR 0 7
26770: PUSH
26771: LD_INT 16
26773: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26774: LD_VAR 0 1
26778: PPUSH
26779: LD_VAR 0 2
26783: PPUSH
26784: LD_VAR 0 3
26788: PPUSH
26789: CALL_OW 297
26793: PUSH
26794: LD_VAR 0 5
26798: GREATER
26799: IFFALSE 26878
// begin ComMoveXY ( unit , x , y ) ;
26801: LD_VAR 0 1
26805: PPUSH
26806: LD_VAR 0 2
26810: PPUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26820: LD_INT 35
26822: PPUSH
26823: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26827: LD_VAR 0 1
26831: PPUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL 62398 0 3
26846: NOT
26847: IFFALSE 26851
// exit ;
26849: GO 27105
// until GetDistUnitXY ( unit , x , y ) < dist ;
26851: LD_VAR 0 1
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: LD_VAR 0 3
26865: PPUSH
26866: CALL_OW 297
26870: PUSH
26871: LD_VAR 0 5
26875: LESS
26876: IFFALSE 26820
// end ; ComTurnXY ( unit , x , y ) ;
26878: LD_VAR 0 1
26882: PPUSH
26883: LD_VAR 0 2
26887: PPUSH
26888: LD_VAR 0 3
26892: PPUSH
26893: CALL_OW 118
// wait ( 5 ) ;
26897: LD_INT 5
26899: PPUSH
26900: CALL_OW 67
// _d := GetDir ( unit ) ;
26904: LD_ADDR_VAR 0 10
26908: PUSH
26909: LD_VAR 0 1
26913: PPUSH
26914: CALL_OW 254
26918: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26919: LD_ADDR_VAR 0 8
26923: PUSH
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 250
26933: PPUSH
26934: LD_VAR 0 10
26938: PPUSH
26939: LD_VAR 0 5
26943: PPUSH
26944: CALL_OW 272
26948: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26949: LD_ADDR_VAR 0 9
26953: PUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 251
26963: PPUSH
26964: LD_VAR 0 10
26968: PPUSH
26969: LD_VAR 0 5
26973: PPUSH
26974: CALL_OW 273
26978: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26979: LD_VAR 0 8
26983: PPUSH
26984: LD_VAR 0 9
26988: PPUSH
26989: CALL_OW 488
26993: NOT
26994: IFFALSE 26998
// exit ;
26996: GO 27105
// ComAnimCustom ( unit , 1 ) ;
26998: LD_VAR 0 1
27002: PPUSH
27003: LD_INT 1
27005: PPUSH
27006: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27010: LD_VAR 0 8
27014: PPUSH
27015: LD_VAR 0 9
27019: PPUSH
27020: LD_VAR 0 6
27024: PPUSH
27025: LD_VAR 0 7
27029: PPUSH
27030: CALL_OW 330
// repeat wait ( 1 ) ;
27034: LD_INT 1
27036: PPUSH
27037: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 316
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 314
27060: OR
27061: PUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: CALL_OW 302
27071: NOT
27072: OR
27073: PUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 301
27083: OR
27084: IFFALSE 27034
// RemoveSeeing ( _x , _y , side ) ;
27086: LD_VAR 0 8
27090: PPUSH
27091: LD_VAR 0 9
27095: PPUSH
27096: LD_VAR 0 6
27100: PPUSH
27101: CALL_OW 331
// end ; end_of_file
27105: LD_VAR 0 4
27109: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27110: LD_INT 0
27112: PPUSH
// ar_miner := 81 ;
27113: LD_ADDR_EXP 100
27117: PUSH
27118: LD_INT 81
27120: ST_TO_ADDR
// ar_crane := 88 ;
27121: LD_ADDR_EXP 99
27125: PUSH
27126: LD_INT 88
27128: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27129: LD_ADDR_EXP 94
27133: PUSH
27134: LD_INT 89
27136: ST_TO_ADDR
// us_hack := 99 ;
27137: LD_ADDR_EXP 95
27141: PUSH
27142: LD_INT 99
27144: ST_TO_ADDR
// us_artillery := 97 ;
27145: LD_ADDR_EXP 96
27149: PUSH
27150: LD_INT 97
27152: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27153: LD_ADDR_EXP 97
27157: PUSH
27158: LD_INT 91
27160: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
27161: LD_ADDR_EXP 98
27165: PUSH
27166: LD_INT 92
27168: ST_TO_ADDR
// ru_radar := 98 ;
27169: LD_ADDR_EXP 93
27173: PUSH
27174: LD_INT 98
27176: ST_TO_ADDR
// tech_Artillery := 80 ;
27177: LD_ADDR_EXP 101
27181: PUSH
27182: LD_INT 80
27184: ST_TO_ADDR
// tech_RadMat := 81 ;
27185: LD_ADDR_EXP 102
27189: PUSH
27190: LD_INT 81
27192: ST_TO_ADDR
// tech_BasicTools := 82 ;
27193: LD_ADDR_EXP 103
27197: PUSH
27198: LD_INT 82
27200: ST_TO_ADDR
// tech_Cargo := 83 ;
27201: LD_ADDR_EXP 104
27205: PUSH
27206: LD_INT 83
27208: ST_TO_ADDR
// tech_Track := 84 ;
27209: LD_ADDR_EXP 105
27213: PUSH
27214: LD_INT 84
27216: ST_TO_ADDR
// tech_Crane := 85 ;
27217: LD_ADDR_EXP 106
27221: PUSH
27222: LD_INT 85
27224: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27225: LD_ADDR_EXP 107
27229: PUSH
27230: LD_INT 86
27232: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27233: LD_ADDR_EXP 108
27237: PUSH
27238: LD_INT 87
27240: ST_TO_ADDR
// class_mastodont := 31 ;
27241: LD_ADDR_EXP 109
27245: PUSH
27246: LD_INT 31
27248: ST_TO_ADDR
// class_horse := 21 ;
27249: LD_ADDR_EXP 110
27253: PUSH
27254: LD_INT 21
27256: ST_TO_ADDR
// end ;
27257: LD_VAR 0 1
27261: RET
// every 1 do
27262: GO 27264
27264: DISABLE
// InitGlobalVariables ; end_of_file
27265: CALL 27110 0 0
27269: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27270: LD_INT 0
27272: PPUSH
27273: PPUSH
// if exist_mode then
27274: LD_VAR 0 2
27278: IFFALSE 27303
// unit := CreateCharacter ( prefix & ident ) else
27280: LD_ADDR_VAR 0 5
27284: PUSH
27285: LD_VAR 0 3
27289: PUSH
27290: LD_VAR 0 1
27294: STR
27295: PPUSH
27296: CALL_OW 34
27300: ST_TO_ADDR
27301: GO 27318
// unit := NewCharacter ( ident ) ;
27303: LD_ADDR_VAR 0 5
27307: PUSH
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 25
27317: ST_TO_ADDR
// result := unit ;
27318: LD_ADDR_VAR 0 4
27322: PUSH
27323: LD_VAR 0 5
27327: ST_TO_ADDR
// end ;
27328: LD_VAR 0 4
27332: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27333: LD_INT 0
27335: PPUSH
27336: PPUSH
// if not side or not nation then
27337: LD_VAR 0 1
27341: NOT
27342: PUSH
27343: LD_VAR 0 2
27347: NOT
27348: OR
27349: IFFALSE 27353
// exit ;
27351: GO 28117
// case nation of nation_american :
27353: LD_VAR 0 2
27357: PUSH
27358: LD_INT 1
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27580
27366: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27367: LD_ADDR_VAR 0 4
27371: PUSH
27372: LD_INT 35
27374: PUSH
27375: LD_INT 45
27377: PUSH
27378: LD_INT 46
27380: PUSH
27381: LD_INT 47
27383: PUSH
27384: LD_INT 82
27386: PUSH
27387: LD_INT 83
27389: PUSH
27390: LD_INT 84
27392: PUSH
27393: LD_INT 85
27395: PUSH
27396: LD_INT 86
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 6
27407: PUSH
27408: LD_INT 15
27410: PUSH
27411: LD_INT 16
27413: PUSH
27414: LD_INT 7
27416: PUSH
27417: LD_INT 12
27419: PUSH
27420: LD_INT 13
27422: PUSH
27423: LD_INT 10
27425: PUSH
27426: LD_INT 14
27428: PUSH
27429: LD_INT 20
27431: PUSH
27432: LD_INT 21
27434: PUSH
27435: LD_INT 22
27437: PUSH
27438: LD_INT 25
27440: PUSH
27441: LD_INT 32
27443: PUSH
27444: LD_INT 27
27446: PUSH
27447: LD_INT 36
27449: PUSH
27450: LD_INT 69
27452: PUSH
27453: LD_INT 39
27455: PUSH
27456: LD_INT 34
27458: PUSH
27459: LD_INT 40
27461: PUSH
27462: LD_INT 48
27464: PUSH
27465: LD_INT 49
27467: PUSH
27468: LD_INT 50
27470: PUSH
27471: LD_INT 51
27473: PUSH
27474: LD_INT 52
27476: PUSH
27477: LD_INT 53
27479: PUSH
27480: LD_INT 54
27482: PUSH
27483: LD_INT 55
27485: PUSH
27486: LD_INT 56
27488: PUSH
27489: LD_INT 57
27491: PUSH
27492: LD_INT 58
27494: PUSH
27495: LD_INT 59
27497: PUSH
27498: LD_INT 60
27500: PUSH
27501: LD_INT 61
27503: PUSH
27504: LD_INT 62
27506: PUSH
27507: LD_INT 80
27509: PUSH
27510: LD_INT 82
27512: PUSH
27513: LD_INT 83
27515: PUSH
27516: LD_INT 84
27518: PUSH
27519: LD_INT 85
27521: PUSH
27522: LD_INT 86
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
27578: GO 28041
27580: LD_INT 2
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27588
27586: GO 27810
27588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_INT 35
27596: PUSH
27597: LD_INT 45
27599: PUSH
27600: LD_INT 46
27602: PUSH
27603: LD_INT 47
27605: PUSH
27606: LD_INT 82
27608: PUSH
27609: LD_INT 83
27611: PUSH
27612: LD_INT 84
27614: PUSH
27615: LD_INT 85
27617: PUSH
27618: LD_INT 87
27620: PUSH
27621: LD_INT 70
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: LD_INT 11
27629: PUSH
27630: LD_INT 3
27632: PUSH
27633: LD_INT 4
27635: PUSH
27636: LD_INT 5
27638: PUSH
27639: LD_INT 6
27641: PUSH
27642: LD_INT 15
27644: PUSH
27645: LD_INT 18
27647: PUSH
27648: LD_INT 7
27650: PUSH
27651: LD_INT 17
27653: PUSH
27654: LD_INT 8
27656: PUSH
27657: LD_INT 20
27659: PUSH
27660: LD_INT 21
27662: PUSH
27663: LD_INT 22
27665: PUSH
27666: LD_INT 72
27668: PUSH
27669: LD_INT 26
27671: PUSH
27672: LD_INT 69
27674: PUSH
27675: LD_INT 39
27677: PUSH
27678: LD_INT 40
27680: PUSH
27681: LD_INT 41
27683: PUSH
27684: LD_INT 42
27686: PUSH
27687: LD_INT 43
27689: PUSH
27690: LD_INT 48
27692: PUSH
27693: LD_INT 49
27695: PUSH
27696: LD_INT 50
27698: PUSH
27699: LD_INT 51
27701: PUSH
27702: LD_INT 52
27704: PUSH
27705: LD_INT 53
27707: PUSH
27708: LD_INT 54
27710: PUSH
27711: LD_INT 55
27713: PUSH
27714: LD_INT 56
27716: PUSH
27717: LD_INT 60
27719: PUSH
27720: LD_INT 61
27722: PUSH
27723: LD_INT 62
27725: PUSH
27726: LD_INT 66
27728: PUSH
27729: LD_INT 67
27731: PUSH
27732: LD_INT 68
27734: PUSH
27735: LD_INT 81
27737: PUSH
27738: LD_INT 82
27740: PUSH
27741: LD_INT 83
27743: PUSH
27744: LD_INT 84
27746: PUSH
27747: LD_INT 85
27749: PUSH
27750: LD_INT 87
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
27808: GO 28041
27810: LD_INT 3
27812: DOUBLE
27813: EQUAL
27814: IFTRUE 27818
27816: GO 28040
27818: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27819: LD_ADDR_VAR 0 4
27823: PUSH
27824: LD_INT 46
27826: PUSH
27827: LD_INT 47
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 82
27838: PUSH
27839: LD_INT 83
27841: PUSH
27842: LD_INT 84
27844: PUSH
27845: LD_INT 85
27847: PUSH
27848: LD_INT 86
27850: PUSH
27851: LD_INT 11
27853: PUSH
27854: LD_INT 9
27856: PUSH
27857: LD_INT 20
27859: PUSH
27860: LD_INT 19
27862: PUSH
27863: LD_INT 21
27865: PUSH
27866: LD_INT 24
27868: PUSH
27869: LD_INT 22
27871: PUSH
27872: LD_INT 25
27874: PUSH
27875: LD_INT 28
27877: PUSH
27878: LD_INT 29
27880: PUSH
27881: LD_INT 30
27883: PUSH
27884: LD_INT 31
27886: PUSH
27887: LD_INT 37
27889: PUSH
27890: LD_INT 38
27892: PUSH
27893: LD_INT 32
27895: PUSH
27896: LD_INT 27
27898: PUSH
27899: LD_INT 33
27901: PUSH
27902: LD_INT 69
27904: PUSH
27905: LD_INT 39
27907: PUSH
27908: LD_INT 34
27910: PUSH
27911: LD_INT 40
27913: PUSH
27914: LD_INT 71
27916: PUSH
27917: LD_INT 23
27919: PUSH
27920: LD_INT 44
27922: PUSH
27923: LD_INT 48
27925: PUSH
27926: LD_INT 49
27928: PUSH
27929: LD_INT 50
27931: PUSH
27932: LD_INT 51
27934: PUSH
27935: LD_INT 52
27937: PUSH
27938: LD_INT 53
27940: PUSH
27941: LD_INT 54
27943: PUSH
27944: LD_INT 55
27946: PUSH
27947: LD_INT 56
27949: PUSH
27950: LD_INT 57
27952: PUSH
27953: LD_INT 58
27955: PUSH
27956: LD_INT 59
27958: PUSH
27959: LD_INT 63
27961: PUSH
27962: LD_INT 64
27964: PUSH
27965: LD_INT 65
27967: PUSH
27968: LD_INT 82
27970: PUSH
27971: LD_INT 83
27973: PUSH
27974: LD_INT 84
27976: PUSH
27977: LD_INT 85
27979: PUSH
27980: LD_INT 86
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: ST_TO_ADDR
28038: GO 28041
28040: POP
// if state > - 1 and state < 3 then
28041: LD_VAR 0 3
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: GREATER
28050: PUSH
28051: LD_VAR 0 3
28055: PUSH
28056: LD_INT 3
28058: LESS
28059: AND
28060: IFFALSE 28117
// for i in result do
28062: LD_ADDR_VAR 0 5
28066: PUSH
28067: LD_VAR 0 4
28071: PUSH
28072: FOR_IN
28073: IFFALSE 28115
// if GetTech ( i , side ) <> state then
28075: LD_VAR 0 5
28079: PPUSH
28080: LD_VAR 0 1
28084: PPUSH
28085: CALL_OW 321
28089: PUSH
28090: LD_VAR 0 3
28094: NONEQUAL
28095: IFFALSE 28113
// result := result diff i ;
28097: LD_ADDR_VAR 0 4
28101: PUSH
28102: LD_VAR 0 4
28106: PUSH
28107: LD_VAR 0 5
28111: DIFF
28112: ST_TO_ADDR
28113: GO 28072
28115: POP
28116: POP
// end ;
28117: LD_VAR 0 4
28121: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28122: LD_INT 0
28124: PPUSH
28125: PPUSH
28126: PPUSH
// result := true ;
28127: LD_ADDR_VAR 0 3
28131: PUSH
28132: LD_INT 1
28134: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28135: LD_ADDR_VAR 0 5
28139: PUSH
28140: LD_VAR 0 2
28144: PPUSH
28145: CALL_OW 480
28149: ST_TO_ADDR
// if not tmp then
28150: LD_VAR 0 5
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28208
// for i in tmp do
28159: LD_ADDR_VAR 0 4
28163: PUSH
28164: LD_VAR 0 5
28168: PUSH
28169: FOR_IN
28170: IFFALSE 28206
// if GetTech ( i , side ) <> state_researched then
28172: LD_VAR 0 4
28176: PPUSH
28177: LD_VAR 0 1
28181: PPUSH
28182: CALL_OW 321
28186: PUSH
28187: LD_INT 2
28189: NONEQUAL
28190: IFFALSE 28204
// begin result := false ;
28192: LD_ADDR_VAR 0 3
28196: PUSH
28197: LD_INT 0
28199: ST_TO_ADDR
// exit ;
28200: POP
28201: POP
28202: GO 28208
// end ;
28204: GO 28169
28206: POP
28207: POP
// end ;
28208: LD_VAR 0 3
28212: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28213: LD_INT 0
28215: PPUSH
28216: PPUSH
28217: PPUSH
28218: PPUSH
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
28224: PPUSH
28225: PPUSH
28226: PPUSH
28227: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28228: LD_VAR 0 1
28232: NOT
28233: PUSH
28234: LD_VAR 0 1
28238: PPUSH
28239: CALL_OW 257
28243: PUSH
28244: LD_INT 9
28246: NONEQUAL
28247: OR
28248: IFFALSE 28252
// exit ;
28250: GO 28825
// side := GetSide ( unit ) ;
28252: LD_ADDR_VAR 0 9
28256: PUSH
28257: LD_VAR 0 1
28261: PPUSH
28262: CALL_OW 255
28266: ST_TO_ADDR
// tech_space := tech_spacanom ;
28267: LD_ADDR_VAR 0 12
28271: PUSH
28272: LD_INT 29
28274: ST_TO_ADDR
// tech_time := tech_taurad ;
28275: LD_ADDR_VAR 0 13
28279: PUSH
28280: LD_INT 28
28282: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28283: LD_ADDR_VAR 0 11
28287: PUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 310
28297: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28298: LD_VAR 0 11
28302: PPUSH
28303: CALL_OW 247
28307: PUSH
28308: LD_INT 2
28310: EQUAL
28311: IFFALSE 28315
// exit ;
28313: GO 28825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28315: LD_ADDR_VAR 0 8
28319: PUSH
28320: LD_INT 81
28322: PUSH
28323: LD_VAR 0 9
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 3
28334: PUSH
28335: LD_INT 21
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PPUSH
28353: CALL_OW 69
28357: ST_TO_ADDR
// if not tmp then
28358: LD_VAR 0 8
28362: NOT
28363: IFFALSE 28367
// exit ;
28365: GO 28825
// if in_unit then
28367: LD_VAR 0 11
28371: IFFALSE 28395
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28373: LD_ADDR_VAR 0 10
28377: PUSH
28378: LD_VAR 0 8
28382: PPUSH
28383: LD_VAR 0 11
28387: PPUSH
28388: CALL_OW 74
28392: ST_TO_ADDR
28393: GO 28415
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28395: LD_ADDR_VAR 0 10
28399: PUSH
28400: LD_VAR 0 8
28404: PPUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 74
28414: ST_TO_ADDR
// if not enemy then
28415: LD_VAR 0 10
28419: NOT
28420: IFFALSE 28424
// exit ;
28422: GO 28825
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28424: LD_VAR 0 11
28428: PUSH
28429: LD_VAR 0 11
28433: PPUSH
28434: LD_VAR 0 10
28438: PPUSH
28439: CALL_OW 296
28443: PUSH
28444: LD_INT 13
28446: GREATER
28447: AND
28448: PUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: LD_VAR 0 10
28458: PPUSH
28459: CALL_OW 296
28463: PUSH
28464: LD_INT 12
28466: GREATER
28467: OR
28468: IFFALSE 28472
// exit ;
28470: GO 28825
// missile := [ 1 ] ;
28472: LD_ADDR_VAR 0 14
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28483: LD_VAR 0 9
28487: PPUSH
28488: LD_VAR 0 12
28492: PPUSH
28493: CALL_OW 325
28497: IFFALSE 28526
// missile := Insert ( missile , missile + 1 , 2 ) ;
28499: LD_ADDR_VAR 0 14
28503: PUSH
28504: LD_VAR 0 14
28508: PPUSH
28509: LD_VAR 0 14
28513: PUSH
28514: LD_INT 1
28516: PLUS
28517: PPUSH
28518: LD_INT 2
28520: PPUSH
28521: CALL_OW 2
28525: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28526: LD_VAR 0 9
28530: PPUSH
28531: LD_VAR 0 13
28535: PPUSH
28536: CALL_OW 325
28540: PUSH
28541: LD_VAR 0 10
28545: PPUSH
28546: CALL_OW 255
28550: PPUSH
28551: LD_VAR 0 13
28555: PPUSH
28556: CALL_OW 325
28560: NOT
28561: AND
28562: IFFALSE 28591
// missile := Insert ( missile , missile + 1 , 3 ) ;
28564: LD_ADDR_VAR 0 14
28568: PUSH
28569: LD_VAR 0 14
28573: PPUSH
28574: LD_VAR 0 14
28578: PUSH
28579: LD_INT 1
28581: PLUS
28582: PPUSH
28583: LD_INT 3
28585: PPUSH
28586: CALL_OW 2
28590: ST_TO_ADDR
// if missile < 2 then
28591: LD_VAR 0 14
28595: PUSH
28596: LD_INT 2
28598: LESS
28599: IFFALSE 28603
// exit ;
28601: GO 28825
// x := GetX ( enemy ) ;
28603: LD_ADDR_VAR 0 4
28607: PUSH
28608: LD_VAR 0 10
28612: PPUSH
28613: CALL_OW 250
28617: ST_TO_ADDR
// y := GetY ( enemy ) ;
28618: LD_ADDR_VAR 0 5
28622: PUSH
28623: LD_VAR 0 10
28627: PPUSH
28628: CALL_OW 251
28632: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28633: LD_ADDR_VAR 0 6
28637: PUSH
28638: LD_VAR 0 4
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PPUSH
28647: LD_INT 1
28649: PPUSH
28650: CALL_OW 12
28654: PLUS
28655: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28656: LD_ADDR_VAR 0 7
28660: PUSH
28661: LD_VAR 0 5
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PPUSH
28670: LD_INT 1
28672: PPUSH
28673: CALL_OW 12
28677: PLUS
28678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28679: LD_VAR 0 6
28683: PPUSH
28684: LD_VAR 0 7
28688: PPUSH
28689: CALL_OW 488
28693: NOT
28694: IFFALSE 28716
// begin _x := x ;
28696: LD_ADDR_VAR 0 6
28700: PUSH
28701: LD_VAR 0 4
28705: ST_TO_ADDR
// _y := y ;
28706: LD_ADDR_VAR 0 7
28710: PUSH
28711: LD_VAR 0 5
28715: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 1
28723: PPUSH
28724: LD_VAR 0 14
28728: PPUSH
28729: CALL_OW 12
28733: ST_TO_ADDR
// case i of 1 :
28734: LD_VAR 0 3
28738: PUSH
28739: LD_INT 1
28741: DOUBLE
28742: EQUAL
28743: IFTRUE 28747
28745: GO 28764
28747: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28748: LD_VAR 0 1
28752: PPUSH
28753: LD_VAR 0 10
28757: PPUSH
28758: CALL_OW 115
28762: GO 28825
28764: LD_INT 2
28766: DOUBLE
28767: EQUAL
28768: IFTRUE 28772
28770: GO 28794
28772: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_VAR 0 6
28782: PPUSH
28783: LD_VAR 0 7
28787: PPUSH
28788: CALL_OW 153
28792: GO 28825
28794: LD_INT 3
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28824
28802: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28803: LD_VAR 0 1
28807: PPUSH
28808: LD_VAR 0 6
28812: PPUSH
28813: LD_VAR 0 7
28817: PPUSH
28818: CALL_OW 154
28822: GO 28825
28824: POP
// end ;
28825: LD_VAR 0 2
28829: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
// if not unit or not building then
28838: LD_VAR 0 1
28842: NOT
28843: PUSH
28844: LD_VAR 0 2
28848: NOT
28849: OR
28850: IFFALSE 28854
// exit ;
28852: GO 29012
// x := GetX ( building ) ;
28854: LD_ADDR_VAR 0 5
28858: PUSH
28859: LD_VAR 0 2
28863: PPUSH
28864: CALL_OW 250
28868: ST_TO_ADDR
// y := GetY ( building ) ;
28869: LD_ADDR_VAR 0 6
28873: PUSH
28874: LD_VAR 0 2
28878: PPUSH
28879: CALL_OW 251
28883: ST_TO_ADDR
// for i = 0 to 5 do
28884: LD_ADDR_VAR 0 4
28888: PUSH
28889: DOUBLE
28890: LD_INT 0
28892: DEC
28893: ST_TO_ADDR
28894: LD_INT 5
28896: PUSH
28897: FOR_TO
28898: IFFALSE 29010
// begin _x := ShiftX ( x , i , 3 ) ;
28900: LD_ADDR_VAR 0 7
28904: PUSH
28905: LD_VAR 0 5
28909: PPUSH
28910: LD_VAR 0 4
28914: PPUSH
28915: LD_INT 3
28917: PPUSH
28918: CALL_OW 272
28922: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28923: LD_ADDR_VAR 0 8
28927: PUSH
28928: LD_VAR 0 6
28932: PPUSH
28933: LD_VAR 0 4
28937: PPUSH
28938: LD_INT 3
28940: PPUSH
28941: CALL_OW 273
28945: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28946: LD_VAR 0 7
28950: PPUSH
28951: LD_VAR 0 8
28955: PPUSH
28956: CALL_OW 488
28960: NOT
28961: IFFALSE 28965
// continue ;
28963: GO 28897
// if HexInfo ( _x , _y ) = 0 then
28965: LD_VAR 0 7
28969: PPUSH
28970: LD_VAR 0 8
28974: PPUSH
28975: CALL_OW 428
28979: PUSH
28980: LD_INT 0
28982: EQUAL
28983: IFFALSE 29008
// begin ComMoveXY ( unit , _x , _y ) ;
28985: LD_VAR 0 1
28989: PPUSH
28990: LD_VAR 0 7
28994: PPUSH
28995: LD_VAR 0 8
28999: PPUSH
29000: CALL_OW 111
// exit ;
29004: POP
29005: POP
29006: GO 29012
// end ; end ;
29008: GO 28897
29010: POP
29011: POP
// end ;
29012: LD_VAR 0 3
29016: RET
// export function ScanBase ( side , base_area ) ; begin
29017: LD_INT 0
29019: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29020: LD_ADDR_VAR 0 3
29024: PUSH
29025: LD_VAR 0 2
29029: PPUSH
29030: LD_INT 81
29032: PUSH
29033: LD_VAR 0 1
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PPUSH
29042: CALL_OW 70
29046: ST_TO_ADDR
// end ;
29047: LD_VAR 0 3
29051: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29052: LD_INT 0
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
// result := false ;
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_INT 0
29065: ST_TO_ADDR
// side := GetSide ( unit ) ;
29066: LD_ADDR_VAR 0 3
29070: PUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 255
29080: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29081: LD_ADDR_VAR 0 4
29085: PUSH
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 248
29095: ST_TO_ADDR
// case nat of 1 :
29096: LD_VAR 0 4
29100: PUSH
29101: LD_INT 1
29103: DOUBLE
29104: EQUAL
29105: IFTRUE 29109
29107: GO 29120
29109: POP
// tech := tech_lassight ; 2 :
29110: LD_ADDR_VAR 0 5
29114: PUSH
29115: LD_INT 12
29117: ST_TO_ADDR
29118: GO 29159
29120: LD_INT 2
29122: DOUBLE
29123: EQUAL
29124: IFTRUE 29128
29126: GO 29139
29128: POP
// tech := tech_mortar ; 3 :
29129: LD_ADDR_VAR 0 5
29133: PUSH
29134: LD_INT 41
29136: ST_TO_ADDR
29137: GO 29159
29139: LD_INT 3
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29158
29147: POP
// tech := tech_bazooka ; end ;
29148: LD_ADDR_VAR 0 5
29152: PUSH
29153: LD_INT 44
29155: ST_TO_ADDR
29156: GO 29159
29158: POP
// if Researched ( side , tech ) then
29159: LD_VAR 0 3
29163: PPUSH
29164: LD_VAR 0 5
29168: PPUSH
29169: CALL_OW 325
29173: IFFALSE 29200
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29175: LD_ADDR_VAR 0 2
29179: PUSH
29180: LD_INT 5
29182: PUSH
29183: LD_INT 8
29185: PUSH
29186: LD_INT 9
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: LIST
29193: PUSH
29194: LD_VAR 0 4
29198: ARRAY
29199: ST_TO_ADDR
// end ;
29200: LD_VAR 0 2
29204: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29205: LD_INT 0
29207: PPUSH
29208: PPUSH
29209: PPUSH
// if not mines then
29210: LD_VAR 0 2
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29363
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29219: LD_ADDR_VAR 0 5
29223: PUSH
29224: LD_INT 81
29226: PUSH
29227: LD_VAR 0 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: LD_INT 21
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PPUSH
29257: CALL_OW 69
29261: ST_TO_ADDR
// for i in mines do
29262: LD_ADDR_VAR 0 4
29266: PUSH
29267: LD_VAR 0 2
29271: PUSH
29272: FOR_IN
29273: IFFALSE 29361
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29275: LD_VAR 0 4
29279: PUSH
29280: LD_INT 1
29282: ARRAY
29283: PPUSH
29284: LD_VAR 0 4
29288: PUSH
29289: LD_INT 2
29291: ARRAY
29292: PPUSH
29293: CALL_OW 458
29297: NOT
29298: IFFALSE 29302
// continue ;
29300: GO 29272
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29302: LD_VAR 0 4
29306: PUSH
29307: LD_INT 1
29309: ARRAY
29310: PPUSH
29311: LD_VAR 0 4
29315: PUSH
29316: LD_INT 2
29318: ARRAY
29319: PPUSH
29320: CALL_OW 428
29324: PUSH
29325: LD_VAR 0 5
29329: IN
29330: IFFALSE 29359
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29332: LD_VAR 0 4
29336: PUSH
29337: LD_INT 1
29339: ARRAY
29340: PPUSH
29341: LD_VAR 0 4
29345: PUSH
29346: LD_INT 2
29348: ARRAY
29349: PPUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 456
// end ;
29359: GO 29272
29361: POP
29362: POP
// end ;
29363: LD_VAR 0 3
29367: RET
// export function Count ( array ) ; var i ; begin
29368: LD_INT 0
29370: PPUSH
29371: PPUSH
// result := 0 ;
29372: LD_ADDR_VAR 0 2
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// for i in array do
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_VAR 0 1
29389: PUSH
29390: FOR_IN
29391: IFFALSE 29415
// if i then
29393: LD_VAR 0 3
29397: IFFALSE 29413
// result := result + 1 ;
29399: LD_ADDR_VAR 0 2
29403: PUSH
29404: LD_VAR 0 2
29408: PUSH
29409: LD_INT 1
29411: PLUS
29412: ST_TO_ADDR
29413: GO 29390
29415: POP
29416: POP
// end ;
29417: LD_VAR 0 2
29421: RET
// export function IsEmpty ( building ) ; begin
29422: LD_INT 0
29424: PPUSH
// if not building then
29425: LD_VAR 0 1
29429: NOT
29430: IFFALSE 29434
// exit ;
29432: GO 29477
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29434: LD_ADDR_VAR 0 2
29438: PUSH
29439: LD_VAR 0 1
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 255
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 58
29463: PUSH
29464: EMPTY
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: IN
29476: ST_TO_ADDR
// end ;
29477: LD_VAR 0 2
29481: RET
// export function IsNotFull ( building ) ; begin
29482: LD_INT 0
29484: PPUSH
// if not building then
29485: LD_VAR 0 1
29489: NOT
29490: IFFALSE 29494
// exit ;
29492: GO 29513
// result := UnitsInside ( building ) < 6 ;
29494: LD_ADDR_VAR 0 2
29498: PUSH
29499: LD_VAR 0 1
29503: PPUSH
29504: CALL_OW 313
29508: PUSH
29509: LD_INT 6
29511: LESS
29512: ST_TO_ADDR
// end ;
29513: LD_VAR 0 2
29517: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29518: LD_INT 0
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
// tmp := [ ] ;
29524: LD_ADDR_VAR 0 3
29528: PUSH
29529: EMPTY
29530: ST_TO_ADDR
// list := [ ] ;
29531: LD_ADDR_VAR 0 5
29535: PUSH
29536: EMPTY
29537: ST_TO_ADDR
// for i = 16 to 25 do
29538: LD_ADDR_VAR 0 4
29542: PUSH
29543: DOUBLE
29544: LD_INT 16
29546: DEC
29547: ST_TO_ADDR
29548: LD_INT 25
29550: PUSH
29551: FOR_TO
29552: IFFALSE 29625
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29554: LD_ADDR_VAR 0 3
29558: PUSH
29559: LD_VAR 0 3
29563: PUSH
29564: LD_INT 22
29566: PUSH
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 255
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 91
29583: PUSH
29584: LD_VAR 0 1
29588: PUSH
29589: LD_INT 6
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 30
29599: PUSH
29600: LD_VAR 0 4
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: PPUSH
29617: CALL_OW 69
29621: ADD
29622: ST_TO_ADDR
29623: GO 29551
29625: POP
29626: POP
// for i = 1 to tmp do
29627: LD_ADDR_VAR 0 4
29631: PUSH
29632: DOUBLE
29633: LD_INT 1
29635: DEC
29636: ST_TO_ADDR
29637: LD_VAR 0 3
29641: PUSH
29642: FOR_TO
29643: IFFALSE 29731
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29645: LD_ADDR_VAR 0 5
29649: PUSH
29650: LD_VAR 0 5
29654: PUSH
29655: LD_VAR 0 3
29659: PUSH
29660: LD_VAR 0 4
29664: ARRAY
29665: PPUSH
29666: CALL_OW 266
29670: PUSH
29671: LD_VAR 0 3
29675: PUSH
29676: LD_VAR 0 4
29680: ARRAY
29681: PPUSH
29682: CALL_OW 250
29686: PUSH
29687: LD_VAR 0 3
29691: PUSH
29692: LD_VAR 0 4
29696: ARRAY
29697: PPUSH
29698: CALL_OW 251
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_VAR 0 4
29712: ARRAY
29713: PPUSH
29714: CALL_OW 254
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: ADD
29728: ST_TO_ADDR
29729: GO 29642
29731: POP
29732: POP
// result := list ;
29733: LD_ADDR_VAR 0 2
29737: PUSH
29738: LD_VAR 0 5
29742: ST_TO_ADDR
// end ;
29743: LD_VAR 0 2
29747: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29748: LD_INT 0
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
// if not factory then
29757: LD_VAR 0 1
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 30359
// if control = control_apeman then
29766: LD_VAR 0 4
29770: PUSH
29771: LD_INT 5
29773: EQUAL
29774: IFFALSE 29883
// begin tmp := UnitsInside ( factory ) ;
29776: LD_ADDR_VAR 0 8
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 313
29790: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29791: LD_VAR 0 8
29795: PPUSH
29796: LD_INT 25
29798: PUSH
29799: LD_INT 12
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PPUSH
29806: CALL_OW 72
29810: NOT
29811: IFFALSE 29821
// control := control_manual ;
29813: LD_ADDR_VAR 0 4
29817: PUSH
29818: LD_INT 1
29820: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29821: LD_ADDR_VAR 0 8
29825: PUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: CALL 29518 0 1
29835: ST_TO_ADDR
// if tmp then
29836: LD_VAR 0 8
29840: IFFALSE 29883
// begin for i in tmp do
29842: LD_ADDR_VAR 0 7
29846: PUSH
29847: LD_VAR 0 8
29851: PUSH
29852: FOR_IN
29853: IFFALSE 29881
// if i [ 1 ] = b_ext_radio then
29855: LD_VAR 0 7
29859: PUSH
29860: LD_INT 1
29862: ARRAY
29863: PUSH
29864: LD_INT 22
29866: EQUAL
29867: IFFALSE 29879
// begin control := control_remote ;
29869: LD_ADDR_VAR 0 4
29873: PUSH
29874: LD_INT 2
29876: ST_TO_ADDR
// break ;
29877: GO 29881
// end ;
29879: GO 29852
29881: POP
29882: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_VAR 0 3
29897: PPUSH
29898: LD_VAR 0 4
29902: PPUSH
29903: LD_VAR 0 5
29907: PPUSH
29908: CALL_OW 448
29912: IFFALSE 29947
// begin result := [ chassis , engine , control , weapon ] ;
29914: LD_ADDR_VAR 0 6
29918: PUSH
29919: LD_VAR 0 2
29923: PUSH
29924: LD_VAR 0 3
29928: PUSH
29929: LD_VAR 0 4
29933: PUSH
29934: LD_VAR 0 5
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: ST_TO_ADDR
// exit ;
29945: GO 30359
// end ; _chassis := AvailableChassisList ( factory ) ;
29947: LD_ADDR_VAR 0 9
29951: PUSH
29952: LD_VAR 0 1
29956: PPUSH
29957: CALL_OW 475
29961: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29962: LD_ADDR_VAR 0 11
29966: PUSH
29967: LD_VAR 0 1
29971: PPUSH
29972: CALL_OW 476
29976: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29977: LD_ADDR_VAR 0 12
29981: PUSH
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 477
29991: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29992: LD_ADDR_VAR 0 10
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 478
30006: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30007: LD_VAR 0 9
30011: NOT
30012: PUSH
30013: LD_VAR 0 11
30017: NOT
30018: OR
30019: PUSH
30020: LD_VAR 0 12
30024: NOT
30025: OR
30026: PUSH
30027: LD_VAR 0 10
30031: NOT
30032: OR
30033: IFFALSE 30068
// begin result := [ chassis , engine , control , weapon ] ;
30035: LD_ADDR_VAR 0 6
30039: PUSH
30040: LD_VAR 0 2
30044: PUSH
30045: LD_VAR 0 3
30049: PUSH
30050: LD_VAR 0 4
30054: PUSH
30055: LD_VAR 0 5
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: ST_TO_ADDR
// exit ;
30066: GO 30359
// end ; if not chassis in _chassis then
30068: LD_VAR 0 2
30072: PUSH
30073: LD_VAR 0 9
30077: IN
30078: NOT
30079: IFFALSE 30105
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30081: LD_ADDR_VAR 0 2
30085: PUSH
30086: LD_VAR 0 9
30090: PUSH
30091: LD_INT 1
30093: PPUSH
30094: LD_VAR 0 9
30098: PPUSH
30099: CALL_OW 12
30103: ARRAY
30104: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30105: LD_VAR 0 2
30109: PPUSH
30110: LD_VAR 0 3
30114: PPUSH
30115: CALL 30364 0 2
30119: NOT
30120: IFFALSE 30179
// repeat engine := _engine [ 1 ] ;
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: LD_VAR 0 11
30131: PUSH
30132: LD_INT 1
30134: ARRAY
30135: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30136: LD_ADDR_VAR 0 11
30140: PUSH
30141: LD_VAR 0 11
30145: PPUSH
30146: LD_INT 1
30148: PPUSH
30149: CALL_OW 3
30153: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30154: LD_VAR 0 2
30158: PPUSH
30159: LD_VAR 0 3
30163: PPUSH
30164: CALL 30364 0 2
30168: PUSH
30169: LD_VAR 0 11
30173: PUSH
30174: EMPTY
30175: EQUAL
30176: OR
30177: IFFALSE 30122
// if not control in _control then
30179: LD_VAR 0 4
30183: PUSH
30184: LD_VAR 0 12
30188: IN
30189: NOT
30190: IFFALSE 30216
// control := _control [ rand ( 1 , _control ) ] ;
30192: LD_ADDR_VAR 0 4
30196: PUSH
30197: LD_VAR 0 12
30201: PUSH
30202: LD_INT 1
30204: PPUSH
30205: LD_VAR 0 12
30209: PPUSH
30210: CALL_OW 12
30214: ARRAY
30215: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30216: LD_VAR 0 2
30220: PPUSH
30221: LD_VAR 0 5
30225: PPUSH
30226: CALL 30584 0 2
30230: NOT
30231: IFFALSE 30290
// repeat weapon := _weapon [ 1 ] ;
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: LD_VAR 0 10
30242: PUSH
30243: LD_INT 1
30245: ARRAY
30246: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30247: LD_ADDR_VAR 0 10
30251: PUSH
30252: LD_VAR 0 10
30256: PPUSH
30257: LD_INT 1
30259: PPUSH
30260: CALL_OW 3
30264: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_VAR 0 5
30274: PPUSH
30275: CALL 30584 0 2
30279: PUSH
30280: LD_VAR 0 10
30284: PUSH
30285: EMPTY
30286: EQUAL
30287: OR
30288: IFFALSE 30233
// result := [ ] ;
30290: LD_ADDR_VAR 0 6
30294: PUSH
30295: EMPTY
30296: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_VAR 0 2
30306: PPUSH
30307: LD_VAR 0 3
30311: PPUSH
30312: LD_VAR 0 4
30316: PPUSH
30317: LD_VAR 0 5
30321: PPUSH
30322: CALL_OW 448
30326: IFFALSE 30359
// result := [ chassis , engine , control , weapon ] ;
30328: LD_ADDR_VAR 0 6
30332: PUSH
30333: LD_VAR 0 2
30337: PUSH
30338: LD_VAR 0 3
30342: PUSH
30343: LD_VAR 0 4
30347: PUSH
30348: LD_VAR 0 5
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
// end ;
30359: LD_VAR 0 6
30363: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30364: LD_INT 0
30366: PPUSH
// if not chassis or not engine then
30367: LD_VAR 0 1
30371: NOT
30372: PUSH
30373: LD_VAR 0 2
30377: NOT
30378: OR
30379: IFFALSE 30383
// exit ;
30381: GO 30579
// case engine of engine_solar :
30383: LD_VAR 0 2
30387: PUSH
30388: LD_INT 2
30390: DOUBLE
30391: EQUAL
30392: IFTRUE 30396
30394: GO 30434
30396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30397: LD_ADDR_VAR 0 3
30401: PUSH
30402: LD_INT 11
30404: PUSH
30405: LD_INT 12
30407: PUSH
30408: LD_INT 13
30410: PUSH
30411: LD_INT 14
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
30432: GO 30563
30434: LD_INT 1
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 30504
30442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_INT 11
30450: PUSH
30451: LD_INT 12
30453: PUSH
30454: LD_INT 13
30456: PUSH
30457: LD_INT 14
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: LD_INT 3
30468: PUSH
30469: LD_INT 4
30471: PUSH
30472: LD_INT 5
30474: PUSH
30475: LD_INT 21
30477: PUSH
30478: LD_INT 23
30480: PUSH
30481: LD_INT 22
30483: PUSH
30484: LD_INT 24
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
30502: GO 30563
30504: LD_INT 3
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30562
30512: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 13
30520: PUSH
30521: LD_INT 14
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: LD_INT 4
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: LD_INT 21
30538: PUSH
30539: LD_INT 22
30541: PUSH
30542: LD_INT 23
30544: PUSH
30545: LD_INT 24
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
30560: GO 30563
30562: POP
// result := ( chassis in result ) ;
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_VAR 0 1
30572: PUSH
30573: LD_VAR 0 3
30577: IN
30578: ST_TO_ADDR
// end ;
30579: LD_VAR 0 3
30583: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30584: LD_INT 0
30586: PPUSH
// if not chassis or not weapon then
30587: LD_VAR 0 1
30591: NOT
30592: PUSH
30593: LD_VAR 0 2
30597: NOT
30598: OR
30599: IFFALSE 30603
// exit ;
30601: GO 31629
// case weapon of us_machine_gun :
30603: LD_VAR 0 2
30607: PUSH
30608: LD_INT 2
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30646
30616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: LD_INT 4
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: ST_TO_ADDR
30644: GO 31613
30646: LD_INT 3
30648: DOUBLE
30649: EQUAL
30650: IFTRUE 30654
30652: GO 30684
30654: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30655: LD_ADDR_VAR 0 3
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: LD_INT 4
30671: PUSH
30672: LD_INT 5
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
30682: GO 31613
30684: LD_INT 11
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30722
30692: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: LD_INT 4
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
30720: GO 31613
30722: LD_INT 4
30724: DOUBLE
30725: EQUAL
30726: IFTRUE 30730
30728: GO 30756
30730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30731: LD_ADDR_VAR 0 3
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: LD_INT 4
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
30754: GO 31613
30756: LD_INT 5
30758: DOUBLE
30759: EQUAL
30760: IFTRUE 30764
30762: GO 30790
30764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30765: LD_ADDR_VAR 0 3
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: LD_INT 4
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
30788: GO 31613
30790: LD_INT 9
30792: DOUBLE
30793: EQUAL
30794: IFTRUE 30798
30796: GO 30824
30798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30799: LD_ADDR_VAR 0 3
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 3
30809: PUSH
30810: LD_INT 4
30812: PUSH
30813: LD_INT 5
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: ST_TO_ADDR
30822: GO 31613
30824: LD_INT 7
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30858
30832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: LD_INT 5
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: ST_TO_ADDR
30856: GO 31613
30858: LD_INT 12
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 30892
30866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30867: LD_ADDR_VAR 0 3
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: LD_INT 4
30880: PUSH
30881: LD_INT 5
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: ST_TO_ADDR
30890: GO 31613
30892: LD_INT 13
30894: DOUBLE
30895: EQUAL
30896: IFTRUE 30900
30898: GO 30926
30900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: LD_INT 4
30914: PUSH
30915: LD_INT 5
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: ST_TO_ADDR
30924: GO 31613
30926: LD_INT 14
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 30952
30934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30935: LD_ADDR_VAR 0 3
30939: PUSH
30940: LD_INT 4
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31613
30952: LD_INT 6
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30978
30960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 4
30968: PUSH
30969: LD_INT 5
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31613
30978: LD_INT 10
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31004
30986: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 4
30994: PUSH
30995: LD_INT 5
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31613
31004: LD_INT 22
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31038
31012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 11
31020: PUSH
31021: LD_INT 12
31023: PUSH
31024: LD_INT 13
31026: PUSH
31027: LD_INT 14
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
31036: GO 31613
31038: LD_INT 23
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31072
31046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_INT 11
31054: PUSH
31055: LD_INT 12
31057: PUSH
31058: LD_INT 13
31060: PUSH
31061: LD_INT 14
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 31613
31072: LD_INT 24
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31106
31080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 11
31088: PUSH
31089: LD_INT 12
31091: PUSH
31092: LD_INT 13
31094: PUSH
31095: LD_INT 14
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 31613
31106: LD_INT 30
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31140
31114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: LD_INT 11
31122: PUSH
31123: LD_INT 12
31125: PUSH
31126: LD_INT 13
31128: PUSH
31129: LD_INT 14
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: ST_TO_ADDR
31138: GO 31613
31140: LD_INT 25
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31166
31148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31149: LD_ADDR_VAR 0 3
31153: PUSH
31154: LD_INT 13
31156: PUSH
31157: LD_INT 14
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: ST_TO_ADDR
31164: GO 31613
31166: LD_INT 27
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31192
31174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 13
31182: PUSH
31183: LD_INT 14
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: ST_TO_ADDR
31190: GO 31613
31192: LD_INT 28
31194: DOUBLE
31195: EQUAL
31196: IFTRUE 31200
31198: GO 31218
31200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_INT 13
31208: PUSH
31209: LD_INT 14
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: ST_TO_ADDR
31216: GO 31613
31218: LD_INT 29
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31244
31226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_INT 13
31234: PUSH
31235: LD_INT 14
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: ST_TO_ADDR
31242: GO 31613
31244: LD_INT 31
31246: DOUBLE
31247: EQUAL
31248: IFTRUE 31252
31250: GO 31270
31252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31253: LD_ADDR_VAR 0 3
31257: PUSH
31258: LD_INT 13
31260: PUSH
31261: LD_INT 14
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: ST_TO_ADDR
31268: GO 31613
31270: LD_INT 26
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 31296
31278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31279: LD_ADDR_VAR 0 3
31283: PUSH
31284: LD_INT 13
31286: PUSH
31287: LD_INT 14
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: ST_TO_ADDR
31294: GO 31613
31296: LD_INT 42
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31330
31304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31305: LD_ADDR_VAR 0 3
31309: PUSH
31310: LD_INT 21
31312: PUSH
31313: LD_INT 22
31315: PUSH
31316: LD_INT 23
31318: PUSH
31319: LD_INT 24
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
31328: GO 31613
31330: LD_INT 43
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31364
31338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_INT 21
31346: PUSH
31347: LD_INT 22
31349: PUSH
31350: LD_INT 23
31352: PUSH
31353: LD_INT 24
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: ST_TO_ADDR
31362: GO 31613
31364: LD_INT 44
31366: DOUBLE
31367: EQUAL
31368: IFTRUE 31372
31370: GO 31398
31372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31373: LD_ADDR_VAR 0 3
31377: PUSH
31378: LD_INT 21
31380: PUSH
31381: LD_INT 22
31383: PUSH
31384: LD_INT 23
31386: PUSH
31387: LD_INT 24
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
31396: GO 31613
31398: LD_INT 45
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31432
31406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31407: LD_ADDR_VAR 0 3
31411: PUSH
31412: LD_INT 21
31414: PUSH
31415: LD_INT 22
31417: PUSH
31418: LD_INT 23
31420: PUSH
31421: LD_INT 24
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: ST_TO_ADDR
31430: GO 31613
31432: LD_INT 49
31434: DOUBLE
31435: EQUAL
31436: IFTRUE 31440
31438: GO 31466
31440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31441: LD_ADDR_VAR 0 3
31445: PUSH
31446: LD_INT 21
31448: PUSH
31449: LD_INT 22
31451: PUSH
31452: LD_INT 23
31454: PUSH
31455: LD_INT 24
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
31464: GO 31613
31466: LD_INT 51
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31500
31474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31475: LD_ADDR_VAR 0 3
31479: PUSH
31480: LD_INT 21
31482: PUSH
31483: LD_INT 22
31485: PUSH
31486: LD_INT 23
31488: PUSH
31489: LD_INT 24
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
31498: GO 31613
31500: LD_INT 52
31502: DOUBLE
31503: EQUAL
31504: IFTRUE 31508
31506: GO 31534
31508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31509: LD_ADDR_VAR 0 3
31513: PUSH
31514: LD_INT 21
31516: PUSH
31517: LD_INT 22
31519: PUSH
31520: LD_INT 23
31522: PUSH
31523: LD_INT 24
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: ST_TO_ADDR
31532: GO 31613
31534: LD_INT 53
31536: DOUBLE
31537: EQUAL
31538: IFTRUE 31542
31540: GO 31560
31542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31543: LD_ADDR_VAR 0 3
31547: PUSH
31548: LD_INT 23
31550: PUSH
31551: LD_INT 24
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: ST_TO_ADDR
31558: GO 31613
31560: LD_INT 46
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31586
31568: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 23
31576: PUSH
31577: LD_INT 24
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: ST_TO_ADDR
31584: GO 31613
31586: LD_INT 47
31588: DOUBLE
31589: EQUAL
31590: IFTRUE 31594
31592: GO 31612
31594: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31595: LD_ADDR_VAR 0 3
31599: PUSH
31600: LD_INT 23
31602: PUSH
31603: LD_INT 24
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: ST_TO_ADDR
31610: GO 31613
31612: POP
// result := ( chassis in result ) ;
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_VAR 0 1
31622: PUSH
31623: LD_VAR 0 3
31627: IN
31628: ST_TO_ADDR
// end ;
31629: LD_VAR 0 3
31633: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31634: LD_INT 0
31636: PPUSH
31637: PPUSH
31638: PPUSH
31639: PPUSH
31640: PPUSH
31641: PPUSH
31642: PPUSH
// result := array ;
31643: LD_ADDR_VAR 0 5
31647: PUSH
31648: LD_VAR 0 1
31652: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31653: LD_VAR 0 1
31657: NOT
31658: PUSH
31659: LD_VAR 0 2
31663: NOT
31664: OR
31665: PUSH
31666: LD_VAR 0 3
31670: NOT
31671: OR
31672: PUSH
31673: LD_VAR 0 2
31677: PUSH
31678: LD_VAR 0 1
31682: GREATER
31683: OR
31684: PUSH
31685: LD_VAR 0 3
31689: PUSH
31690: LD_VAR 0 1
31694: GREATER
31695: OR
31696: IFFALSE 31700
// exit ;
31698: GO 31996
// if direction then
31700: LD_VAR 0 4
31704: IFFALSE 31768
// begin d := 1 ;
31706: LD_ADDR_VAR 0 9
31710: PUSH
31711: LD_INT 1
31713: ST_TO_ADDR
// if i_from > i_to then
31714: LD_VAR 0 2
31718: PUSH
31719: LD_VAR 0 3
31723: GREATER
31724: IFFALSE 31750
// length := ( array - i_from ) + i_to else
31726: LD_ADDR_VAR 0 11
31730: PUSH
31731: LD_VAR 0 1
31735: PUSH
31736: LD_VAR 0 2
31740: MINUS
31741: PUSH
31742: LD_VAR 0 3
31746: PLUS
31747: ST_TO_ADDR
31748: GO 31766
// length := i_to - i_from ;
31750: LD_ADDR_VAR 0 11
31754: PUSH
31755: LD_VAR 0 3
31759: PUSH
31760: LD_VAR 0 2
31764: MINUS
31765: ST_TO_ADDR
// end else
31766: GO 31829
// begin d := - 1 ;
31768: LD_ADDR_VAR 0 9
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: ST_TO_ADDR
// if i_from > i_to then
31777: LD_VAR 0 2
31781: PUSH
31782: LD_VAR 0 3
31786: GREATER
31787: IFFALSE 31807
// length := i_from - i_to else
31789: LD_ADDR_VAR 0 11
31793: PUSH
31794: LD_VAR 0 2
31798: PUSH
31799: LD_VAR 0 3
31803: MINUS
31804: ST_TO_ADDR
31805: GO 31829
// length := ( array - i_to ) + i_from ;
31807: LD_ADDR_VAR 0 11
31811: PUSH
31812: LD_VAR 0 1
31816: PUSH
31817: LD_VAR 0 3
31821: MINUS
31822: PUSH
31823: LD_VAR 0 2
31827: PLUS
31828: ST_TO_ADDR
// end ; if not length then
31829: LD_VAR 0 11
31833: NOT
31834: IFFALSE 31838
// exit ;
31836: GO 31996
// tmp := array ;
31838: LD_ADDR_VAR 0 10
31842: PUSH
31843: LD_VAR 0 1
31847: ST_TO_ADDR
// for i = 1 to length do
31848: LD_ADDR_VAR 0 6
31852: PUSH
31853: DOUBLE
31854: LD_INT 1
31856: DEC
31857: ST_TO_ADDR
31858: LD_VAR 0 11
31862: PUSH
31863: FOR_TO
31864: IFFALSE 31984
// begin for j = 1 to array do
31866: LD_ADDR_VAR 0 7
31870: PUSH
31871: DOUBLE
31872: LD_INT 1
31874: DEC
31875: ST_TO_ADDR
31876: LD_VAR 0 1
31880: PUSH
31881: FOR_TO
31882: IFFALSE 31970
// begin k := j + d ;
31884: LD_ADDR_VAR 0 8
31888: PUSH
31889: LD_VAR 0 7
31893: PUSH
31894: LD_VAR 0 9
31898: PLUS
31899: ST_TO_ADDR
// if k > array then
31900: LD_VAR 0 8
31904: PUSH
31905: LD_VAR 0 1
31909: GREATER
31910: IFFALSE 31920
// k := 1 ;
31912: LD_ADDR_VAR 0 8
31916: PUSH
31917: LD_INT 1
31919: ST_TO_ADDR
// if not k then
31920: LD_VAR 0 8
31924: NOT
31925: IFFALSE 31937
// k := array ;
31927: LD_ADDR_VAR 0 8
31931: PUSH
31932: LD_VAR 0 1
31936: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31937: LD_ADDR_VAR 0 10
31941: PUSH
31942: LD_VAR 0 10
31946: PPUSH
31947: LD_VAR 0 8
31951: PPUSH
31952: LD_VAR 0 1
31956: PUSH
31957: LD_VAR 0 7
31961: ARRAY
31962: PPUSH
31963: CALL_OW 1
31967: ST_TO_ADDR
// end ;
31968: GO 31881
31970: POP
31971: POP
// array := tmp ;
31972: LD_ADDR_VAR 0 1
31976: PUSH
31977: LD_VAR 0 10
31981: ST_TO_ADDR
// end ;
31982: GO 31863
31984: POP
31985: POP
// result := array ;
31986: LD_ADDR_VAR 0 5
31990: PUSH
31991: LD_VAR 0 1
31995: ST_TO_ADDR
// end ;
31996: LD_VAR 0 5
32000: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32001: LD_INT 0
32003: PPUSH
32004: PPUSH
// result := 0 ;
32005: LD_ADDR_VAR 0 3
32009: PUSH
32010: LD_INT 0
32012: ST_TO_ADDR
// if not array or not value in array then
32013: LD_VAR 0 1
32017: NOT
32018: PUSH
32019: LD_VAR 0 2
32023: PUSH
32024: LD_VAR 0 1
32028: IN
32029: NOT
32030: OR
32031: IFFALSE 32035
// exit ;
32033: GO 32089
// for i = 1 to array do
32035: LD_ADDR_VAR 0 4
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_VAR 0 1
32049: PUSH
32050: FOR_TO
32051: IFFALSE 32087
// if value = array [ i ] then
32053: LD_VAR 0 2
32057: PUSH
32058: LD_VAR 0 1
32062: PUSH
32063: LD_VAR 0 4
32067: ARRAY
32068: EQUAL
32069: IFFALSE 32085
// begin result := i ;
32071: LD_ADDR_VAR 0 3
32075: PUSH
32076: LD_VAR 0 4
32080: ST_TO_ADDR
// exit ;
32081: POP
32082: POP
32083: GO 32089
// end ;
32085: GO 32050
32087: POP
32088: POP
// end ;
32089: LD_VAR 0 3
32093: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32094: LD_INT 0
32096: PPUSH
// vc_chassis := chassis ;
32097: LD_ADDR_OWVAR 37
32101: PUSH
32102: LD_VAR 0 1
32106: ST_TO_ADDR
// vc_engine := engine ;
32107: LD_ADDR_OWVAR 39
32111: PUSH
32112: LD_VAR 0 2
32116: ST_TO_ADDR
// vc_control := control ;
32117: LD_ADDR_OWVAR 38
32121: PUSH
32122: LD_VAR 0 3
32126: ST_TO_ADDR
// vc_weapon := weapon ;
32127: LD_ADDR_OWVAR 40
32131: PUSH
32132: LD_VAR 0 4
32136: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32137: LD_ADDR_OWVAR 41
32141: PUSH
32142: LD_VAR 0 5
32146: ST_TO_ADDR
// end ;
32147: LD_VAR 0 6
32151: RET
// export function WantPlant ( unit ) ; var task ; begin
32152: LD_INT 0
32154: PPUSH
32155: PPUSH
// result := false ;
32156: LD_ADDR_VAR 0 2
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: LD_VAR 0 1
32173: PPUSH
32174: CALL_OW 437
32178: ST_TO_ADDR
// if task then
32179: LD_VAR 0 3
32183: IFFALSE 32211
// if task [ 1 ] [ 1 ] = p then
32185: LD_VAR 0 3
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: PUSH
32198: LD_STRING p
32200: EQUAL
32201: IFFALSE 32211
// result := true ;
32203: LD_ADDR_VAR 0 2
32207: PUSH
32208: LD_INT 1
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 2
32215: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32216: LD_INT 0
32218: PPUSH
32219: PPUSH
32220: PPUSH
32221: PPUSH
// if pos < 1 then
32222: LD_VAR 0 2
32226: PUSH
32227: LD_INT 1
32229: LESS
32230: IFFALSE 32234
// exit ;
32232: GO 32537
// if pos = 1 then
32234: LD_VAR 0 2
32238: PUSH
32239: LD_INT 1
32241: EQUAL
32242: IFFALSE 32275
// result := Replace ( arr , pos [ 1 ] , value ) else
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: LD_VAR 0 2
32258: PUSH
32259: LD_INT 1
32261: ARRAY
32262: PPUSH
32263: LD_VAR 0 3
32267: PPUSH
32268: CALL_OW 1
32272: ST_TO_ADDR
32273: GO 32537
// begin tmp := arr ;
32275: LD_ADDR_VAR 0 6
32279: PUSH
32280: LD_VAR 0 1
32284: ST_TO_ADDR
// s_arr := [ tmp ] ;
32285: LD_ADDR_VAR 0 7
32289: PUSH
32290: LD_VAR 0 6
32294: PUSH
32295: EMPTY
32296: LIST
32297: ST_TO_ADDR
// for i = 1 to pos - 1 do
32298: LD_ADDR_VAR 0 5
32302: PUSH
32303: DOUBLE
32304: LD_INT 1
32306: DEC
32307: ST_TO_ADDR
32308: LD_VAR 0 2
32312: PUSH
32313: LD_INT 1
32315: MINUS
32316: PUSH
32317: FOR_TO
32318: IFFALSE 32363
// begin tmp := tmp [ pos [ i ] ] ;
32320: LD_ADDR_VAR 0 6
32324: PUSH
32325: LD_VAR 0 6
32329: PUSH
32330: LD_VAR 0 2
32334: PUSH
32335: LD_VAR 0 5
32339: ARRAY
32340: ARRAY
32341: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32342: LD_ADDR_VAR 0 7
32346: PUSH
32347: LD_VAR 0 7
32351: PUSH
32352: LD_VAR 0 6
32356: PUSH
32357: EMPTY
32358: LIST
32359: ADD
32360: ST_TO_ADDR
// end ;
32361: GO 32317
32363: POP
32364: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32365: LD_ADDR_VAR 0 6
32369: PUSH
32370: LD_VAR 0 6
32374: PPUSH
32375: LD_VAR 0 2
32379: PUSH
32380: LD_VAR 0 2
32384: ARRAY
32385: PPUSH
32386: LD_VAR 0 3
32390: PPUSH
32391: CALL_OW 1
32395: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32396: LD_ADDR_VAR 0 7
32400: PUSH
32401: LD_VAR 0 7
32405: PPUSH
32406: LD_VAR 0 7
32410: PPUSH
32411: LD_VAR 0 6
32415: PPUSH
32416: CALL_OW 1
32420: ST_TO_ADDR
// for i = s_arr downto 2 do
32421: LD_ADDR_VAR 0 5
32425: PUSH
32426: DOUBLE
32427: LD_VAR 0 7
32431: INC
32432: ST_TO_ADDR
32433: LD_INT 2
32435: PUSH
32436: FOR_DOWNTO
32437: IFFALSE 32521
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32439: LD_ADDR_VAR 0 6
32443: PUSH
32444: LD_VAR 0 7
32448: PUSH
32449: LD_VAR 0 5
32453: PUSH
32454: LD_INT 1
32456: MINUS
32457: ARRAY
32458: PPUSH
32459: LD_VAR 0 2
32463: PUSH
32464: LD_VAR 0 5
32468: PUSH
32469: LD_INT 1
32471: MINUS
32472: ARRAY
32473: PPUSH
32474: LD_VAR 0 7
32478: PUSH
32479: LD_VAR 0 5
32483: ARRAY
32484: PPUSH
32485: CALL_OW 1
32489: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32490: LD_ADDR_VAR 0 7
32494: PUSH
32495: LD_VAR 0 7
32499: PPUSH
32500: LD_VAR 0 5
32504: PUSH
32505: LD_INT 1
32507: MINUS
32508: PPUSH
32509: LD_VAR 0 6
32513: PPUSH
32514: CALL_OW 1
32518: ST_TO_ADDR
// end ;
32519: GO 32436
32521: POP
32522: POP
// result := s_arr [ 1 ] ;
32523: LD_ADDR_VAR 0 4
32527: PUSH
32528: LD_VAR 0 7
32532: PUSH
32533: LD_INT 1
32535: ARRAY
32536: ST_TO_ADDR
// end ; end ;
32537: LD_VAR 0 4
32541: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
// if not list then
32546: LD_VAR 0 1
32550: NOT
32551: IFFALSE 32555
// exit ;
32553: GO 32646
// i := list [ pos1 ] ;
32555: LD_ADDR_VAR 0 5
32559: PUSH
32560: LD_VAR 0 1
32564: PUSH
32565: LD_VAR 0 2
32569: ARRAY
32570: ST_TO_ADDR
// if not i then
32571: LD_VAR 0 5
32575: NOT
32576: IFFALSE 32580
// exit ;
32578: GO 32646
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32580: LD_ADDR_VAR 0 1
32584: PUSH
32585: LD_VAR 0 1
32589: PPUSH
32590: LD_VAR 0 2
32594: PPUSH
32595: LD_VAR 0 1
32599: PUSH
32600: LD_VAR 0 3
32604: ARRAY
32605: PPUSH
32606: CALL_OW 1
32610: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32611: LD_ADDR_VAR 0 1
32615: PUSH
32616: LD_VAR 0 1
32620: PPUSH
32621: LD_VAR 0 3
32625: PPUSH
32626: LD_VAR 0 5
32630: PPUSH
32631: CALL_OW 1
32635: ST_TO_ADDR
// result := list ;
32636: LD_ADDR_VAR 0 4
32640: PUSH
32641: LD_VAR 0 1
32645: ST_TO_ADDR
// end ;
32646: LD_VAR 0 4
32650: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32651: LD_INT 0
32653: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32654: LD_ADDR_VAR 0 5
32658: PUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 250
32668: PPUSH
32669: LD_VAR 0 1
32673: PPUSH
32674: CALL_OW 251
32678: PPUSH
32679: LD_VAR 0 2
32683: PPUSH
32684: LD_VAR 0 3
32688: PPUSH
32689: LD_VAR 0 4
32693: PPUSH
32694: CALL 32704 0 5
32698: ST_TO_ADDR
// end ;
32699: LD_VAR 0 5
32703: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32704: LD_INT 0
32706: PPUSH
32707: PPUSH
32708: PPUSH
32709: PPUSH
// if not list then
32710: LD_VAR 0 3
32714: NOT
32715: IFFALSE 32719
// exit ;
32717: GO 33107
// result := [ ] ;
32719: LD_ADDR_VAR 0 6
32723: PUSH
32724: EMPTY
32725: ST_TO_ADDR
// for i in list do
32726: LD_ADDR_VAR 0 7
32730: PUSH
32731: LD_VAR 0 3
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32939
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32739: LD_ADDR_VAR 0 9
32743: PUSH
32744: LD_VAR 0 7
32748: PPUSH
32749: LD_VAR 0 1
32753: PPUSH
32754: LD_VAR 0 2
32758: PPUSH
32759: CALL_OW 297
32763: ST_TO_ADDR
// if not result then
32764: LD_VAR 0 6
32768: NOT
32769: IFFALSE 32795
// result := [ [ i , tmp ] ] else
32771: LD_ADDR_VAR 0 6
32775: PUSH
32776: LD_VAR 0 7
32780: PUSH
32781: LD_VAR 0 9
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: ST_TO_ADDR
32793: GO 32937
// begin if result [ result ] [ 2 ] < tmp then
32795: LD_VAR 0 6
32799: PUSH
32800: LD_VAR 0 6
32804: ARRAY
32805: PUSH
32806: LD_INT 2
32808: ARRAY
32809: PUSH
32810: LD_VAR 0 9
32814: LESS
32815: IFFALSE 32857
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32817: LD_ADDR_VAR 0 6
32821: PUSH
32822: LD_VAR 0 6
32826: PPUSH
32827: LD_VAR 0 6
32831: PUSH
32832: LD_INT 1
32834: PLUS
32835: PPUSH
32836: LD_VAR 0 7
32840: PUSH
32841: LD_VAR 0 9
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PPUSH
32850: CALL_OW 2
32854: ST_TO_ADDR
32855: GO 32937
// for j = 1 to result do
32857: LD_ADDR_VAR 0 8
32861: PUSH
32862: DOUBLE
32863: LD_INT 1
32865: DEC
32866: ST_TO_ADDR
32867: LD_VAR 0 6
32871: PUSH
32872: FOR_TO
32873: IFFALSE 32935
// begin if tmp < result [ j ] [ 2 ] then
32875: LD_VAR 0 9
32879: PUSH
32880: LD_VAR 0 6
32884: PUSH
32885: LD_VAR 0 8
32889: ARRAY
32890: PUSH
32891: LD_INT 2
32893: ARRAY
32894: LESS
32895: IFFALSE 32933
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32897: LD_ADDR_VAR 0 6
32901: PUSH
32902: LD_VAR 0 6
32906: PPUSH
32907: LD_VAR 0 8
32911: PPUSH
32912: LD_VAR 0 7
32916: PUSH
32917: LD_VAR 0 9
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PPUSH
32926: CALL_OW 2
32930: ST_TO_ADDR
// break ;
32931: GO 32935
// end ; end ;
32933: GO 32872
32935: POP
32936: POP
// end ; end ;
32937: GO 32736
32939: POP
32940: POP
// if result and not asc then
32941: LD_VAR 0 6
32945: PUSH
32946: LD_VAR 0 4
32950: NOT
32951: AND
32952: IFFALSE 33027
// begin tmp := result ;
32954: LD_ADDR_VAR 0 9
32958: PUSH
32959: LD_VAR 0 6
32963: ST_TO_ADDR
// for i = tmp downto 1 do
32964: LD_ADDR_VAR 0 7
32968: PUSH
32969: DOUBLE
32970: LD_VAR 0 9
32974: INC
32975: ST_TO_ADDR
32976: LD_INT 1
32978: PUSH
32979: FOR_DOWNTO
32980: IFFALSE 33025
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32982: LD_ADDR_VAR 0 6
32986: PUSH
32987: LD_VAR 0 6
32991: PPUSH
32992: LD_VAR 0 9
32996: PUSH
32997: LD_VAR 0 7
33001: MINUS
33002: PUSH
33003: LD_INT 1
33005: PLUS
33006: PPUSH
33007: LD_VAR 0 9
33011: PUSH
33012: LD_VAR 0 7
33016: ARRAY
33017: PPUSH
33018: CALL_OW 1
33022: ST_TO_ADDR
33023: GO 32979
33025: POP
33026: POP
// end ; tmp := [ ] ;
33027: LD_ADDR_VAR 0 9
33031: PUSH
33032: EMPTY
33033: ST_TO_ADDR
// if mode then
33034: LD_VAR 0 5
33038: IFFALSE 33107
// begin for i = 1 to result do
33040: LD_ADDR_VAR 0 7
33044: PUSH
33045: DOUBLE
33046: LD_INT 1
33048: DEC
33049: ST_TO_ADDR
33050: LD_VAR 0 6
33054: PUSH
33055: FOR_TO
33056: IFFALSE 33095
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33058: LD_ADDR_VAR 0 9
33062: PUSH
33063: LD_VAR 0 9
33067: PPUSH
33068: LD_VAR 0 7
33072: PPUSH
33073: LD_VAR 0 6
33077: PUSH
33078: LD_VAR 0 7
33082: ARRAY
33083: PUSH
33084: LD_INT 1
33086: ARRAY
33087: PPUSH
33088: CALL_OW 1
33092: ST_TO_ADDR
33093: GO 33055
33095: POP
33096: POP
// result := tmp ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: LD_VAR 0 9
33106: ST_TO_ADDR
// end ; end ;
33107: LD_VAR 0 6
33111: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33120: LD_ADDR_VAR 0 5
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: ST_TO_ADDR
// if not x or not y then
33142: LD_VAR 0 2
33146: NOT
33147: PUSH
33148: LD_VAR 0 3
33152: NOT
33153: OR
33154: IFFALSE 33158
// exit ;
33156: GO 34804
// if not range then
33158: LD_VAR 0 4
33162: NOT
33163: IFFALSE 33173
// range := 10 ;
33165: LD_ADDR_VAR 0 4
33169: PUSH
33170: LD_INT 10
33172: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33173: LD_ADDR_VAR 0 8
33177: PUSH
33178: LD_INT 81
33180: PUSH
33181: LD_VAR 0 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 92
33192: PUSH
33193: LD_VAR 0 2
33197: PUSH
33198: LD_VAR 0 3
33202: PUSH
33203: LD_VAR 0 4
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 3
33216: PUSH
33217: LD_INT 21
33219: PUSH
33220: LD_INT 3
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL_OW 69
33240: ST_TO_ADDR
// if not tmp then
33241: LD_VAR 0 8
33245: NOT
33246: IFFALSE 33250
// exit ;
33248: GO 34804
// for i in tmp do
33250: LD_ADDR_VAR 0 6
33254: PUSH
33255: LD_VAR 0 8
33259: PUSH
33260: FOR_IN
33261: IFFALSE 34779
// begin points := [ 0 , 0 , 0 ] ;
33263: LD_ADDR_VAR 0 9
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: LIST
33281: ST_TO_ADDR
// bpoints := 1 ;
33282: LD_ADDR_VAR 0 10
33286: PUSH
33287: LD_INT 1
33289: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33290: LD_VAR 0 6
33294: PPUSH
33295: CALL_OW 247
33299: PUSH
33300: LD_INT 1
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33886
33308: POP
// begin if GetClass ( i ) = 1 then
33309: LD_VAR 0 6
33313: PPUSH
33314: CALL_OW 257
33318: PUSH
33319: LD_INT 1
33321: EQUAL
33322: IFFALSE 33343
// points := [ 10 , 5 , 3 ] ;
33324: LD_ADDR_VAR 0 9
33328: PUSH
33329: LD_INT 10
33331: PUSH
33332: LD_INT 5
33334: PUSH
33335: LD_INT 3
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33343: LD_VAR 0 6
33347: PPUSH
33348: CALL_OW 257
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: LD_INT 3
33358: PUSH
33359: LD_INT 4
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: IN
33367: IFFALSE 33388
// points := [ 3 , 2 , 1 ] ;
33369: LD_ADDR_VAR 0 9
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33388: LD_VAR 0 6
33392: PPUSH
33393: CALL_OW 257
33397: PUSH
33398: LD_INT 5
33400: EQUAL
33401: IFFALSE 33422
// points := [ 130 , 5 , 2 ] ;
33403: LD_ADDR_VAR 0 9
33407: PUSH
33408: LD_INT 130
33410: PUSH
33411: LD_INT 5
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33422: LD_VAR 0 6
33426: PPUSH
33427: CALL_OW 257
33431: PUSH
33432: LD_INT 8
33434: EQUAL
33435: IFFALSE 33456
// points := [ 35 , 35 , 30 ] ;
33437: LD_ADDR_VAR 0 9
33441: PUSH
33442: LD_INT 35
33444: PUSH
33445: LD_INT 35
33447: PUSH
33448: LD_INT 30
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33456: LD_VAR 0 6
33460: PPUSH
33461: CALL_OW 257
33465: PUSH
33466: LD_INT 9
33468: EQUAL
33469: IFFALSE 33490
// points := [ 20 , 55 , 40 ] ;
33471: LD_ADDR_VAR 0 9
33475: PUSH
33476: LD_INT 20
33478: PUSH
33479: LD_INT 55
33481: PUSH
33482: LD_INT 40
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33490: LD_VAR 0 6
33494: PPUSH
33495: CALL_OW 257
33499: PUSH
33500: LD_INT 12
33502: PUSH
33503: LD_INT 16
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: IN
33510: IFFALSE 33531
// points := [ 5 , 3 , 2 ] ;
33512: LD_ADDR_VAR 0 9
33516: PUSH
33517: LD_INT 5
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33531: LD_VAR 0 6
33535: PPUSH
33536: CALL_OW 257
33540: PUSH
33541: LD_INT 17
33543: EQUAL
33544: IFFALSE 33565
// points := [ 100 , 50 , 75 ] ;
33546: LD_ADDR_VAR 0 9
33550: PUSH
33551: LD_INT 100
33553: PUSH
33554: LD_INT 50
33556: PUSH
33557: LD_INT 75
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33565: LD_VAR 0 6
33569: PPUSH
33570: CALL_OW 257
33574: PUSH
33575: LD_INT 15
33577: EQUAL
33578: IFFALSE 33599
// points := [ 10 , 5 , 3 ] ;
33580: LD_ADDR_VAR 0 9
33584: PUSH
33585: LD_INT 10
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: LD_INT 3
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33599: LD_VAR 0 6
33603: PPUSH
33604: CALL_OW 257
33608: PUSH
33609: LD_INT 14
33611: EQUAL
33612: IFFALSE 33633
// points := [ 10 , 0 , 0 ] ;
33614: LD_ADDR_VAR 0 9
33618: PUSH
33619: LD_INT 10
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33633: LD_VAR 0 6
33637: PPUSH
33638: CALL_OW 257
33642: PUSH
33643: LD_INT 11
33645: EQUAL
33646: IFFALSE 33667
// points := [ 30 , 10 , 5 ] ;
33648: LD_ADDR_VAR 0 9
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: LD_INT 10
33658: PUSH
33659: LD_INT 5
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33667: LD_VAR 0 1
33671: PPUSH
33672: LD_INT 5
33674: PPUSH
33675: CALL_OW 321
33679: PUSH
33680: LD_INT 2
33682: EQUAL
33683: IFFALSE 33700
// bpoints := bpoints * 1.8 ;
33685: LD_ADDR_VAR 0 10
33689: PUSH
33690: LD_VAR 0 10
33694: PUSH
33695: LD_REAL  1.80000000000000E+0000
33698: MUL
33699: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33700: LD_VAR 0 6
33704: PPUSH
33705: CALL_OW 257
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: IN
33728: PUSH
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_INT 51
33736: PPUSH
33737: CALL_OW 321
33741: PUSH
33742: LD_INT 2
33744: EQUAL
33745: AND
33746: IFFALSE 33763
// bpoints := bpoints * 1.2 ;
33748: LD_ADDR_VAR 0 10
33752: PUSH
33753: LD_VAR 0 10
33757: PUSH
33758: LD_REAL  1.20000000000000E+0000
33761: MUL
33762: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33763: LD_VAR 0 6
33767: PPUSH
33768: CALL_OW 257
33772: PUSH
33773: LD_INT 5
33775: PUSH
33776: LD_INT 7
33778: PUSH
33779: LD_INT 9
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: IN
33787: PUSH
33788: LD_VAR 0 1
33792: PPUSH
33793: LD_INT 52
33795: PPUSH
33796: CALL_OW 321
33800: PUSH
33801: LD_INT 2
33803: EQUAL
33804: AND
33805: IFFALSE 33822
// bpoints := bpoints * 1.5 ;
33807: LD_ADDR_VAR 0 10
33811: PUSH
33812: LD_VAR 0 10
33816: PUSH
33817: LD_REAL  1.50000000000000E+0000
33820: MUL
33821: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33822: LD_VAR 0 1
33826: PPUSH
33827: LD_INT 66
33829: PPUSH
33830: CALL_OW 321
33834: PUSH
33835: LD_INT 2
33837: EQUAL
33838: IFFALSE 33855
// bpoints := bpoints * 1.1 ;
33840: LD_ADDR_VAR 0 10
33844: PUSH
33845: LD_VAR 0 10
33849: PUSH
33850: LD_REAL  1.10000000000000E+0000
33853: MUL
33854: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33855: LD_ADDR_VAR 0 10
33859: PUSH
33860: LD_VAR 0 10
33864: PUSH
33865: LD_VAR 0 6
33869: PPUSH
33870: LD_INT 1
33872: PPUSH
33873: CALL_OW 259
33877: PUSH
33878: LD_REAL  1.15000000000000E+0000
33881: MUL
33882: MUL
33883: ST_TO_ADDR
// end ; unit_vehicle :
33884: GO 34708
33886: LD_INT 2
33888: DOUBLE
33889: EQUAL
33890: IFTRUE 33894
33892: GO 34696
33894: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33895: LD_VAR 0 6
33899: PPUSH
33900: CALL_OW 264
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: LD_INT 42
33910: PUSH
33911: LD_INT 24
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: IN
33919: IFFALSE 33940
// points := [ 25 , 5 , 3 ] ;
33921: LD_ADDR_VAR 0 9
33925: PUSH
33926: LD_INT 25
33928: PUSH
33929: LD_INT 5
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33940: LD_VAR 0 6
33944: PPUSH
33945: CALL_OW 264
33949: PUSH
33950: LD_INT 4
33952: PUSH
33953: LD_INT 43
33955: PUSH
33956: LD_INT 25
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: IN
33964: IFFALSE 33985
// points := [ 40 , 15 , 5 ] ;
33966: LD_ADDR_VAR 0 9
33970: PUSH
33971: LD_INT 40
33973: PUSH
33974: LD_INT 15
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33985: LD_VAR 0 6
33989: PPUSH
33990: CALL_OW 264
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: LD_INT 23
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: IN
34005: IFFALSE 34026
// points := [ 7 , 25 , 8 ] ;
34007: LD_ADDR_VAR 0 9
34011: PUSH
34012: LD_INT 7
34014: PUSH
34015: LD_INT 25
34017: PUSH
34018: LD_INT 8
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34026: LD_VAR 0 6
34030: PPUSH
34031: CALL_OW 264
34035: PUSH
34036: LD_INT 5
34038: PUSH
34039: LD_INT 27
34041: PUSH
34042: LD_INT 44
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: IN
34050: IFFALSE 34071
// points := [ 14 , 50 , 16 ] ;
34052: LD_ADDR_VAR 0 9
34056: PUSH
34057: LD_INT 14
34059: PUSH
34060: LD_INT 50
34062: PUSH
34063: LD_INT 16
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34071: LD_VAR 0 6
34075: PPUSH
34076: CALL_OW 264
34080: PUSH
34081: LD_INT 6
34083: PUSH
34084: LD_INT 46
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: IN
34091: IFFALSE 34112
// points := [ 32 , 120 , 70 ] ;
34093: LD_ADDR_VAR 0 9
34097: PUSH
34098: LD_INT 32
34100: PUSH
34101: LD_INT 120
34103: PUSH
34104: LD_INT 70
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34112: LD_VAR 0 6
34116: PPUSH
34117: CALL_OW 264
34121: PUSH
34122: LD_INT 7
34124: PUSH
34125: LD_INT 28
34127: PUSH
34128: LD_INT 45
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: IN
34136: IFFALSE 34157
// points := [ 35 , 20 , 45 ] ;
34138: LD_ADDR_VAR 0 9
34142: PUSH
34143: LD_INT 35
34145: PUSH
34146: LD_INT 20
34148: PUSH
34149: LD_INT 45
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34157: LD_VAR 0 6
34161: PPUSH
34162: CALL_OW 264
34166: PUSH
34167: LD_INT 47
34169: PUSH
34170: EMPTY
34171: LIST
34172: IN
34173: IFFALSE 34194
// points := [ 67 , 45 , 75 ] ;
34175: LD_ADDR_VAR 0 9
34179: PUSH
34180: LD_INT 67
34182: PUSH
34183: LD_INT 45
34185: PUSH
34186: LD_INT 75
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34194: LD_VAR 0 6
34198: PPUSH
34199: CALL_OW 264
34203: PUSH
34204: LD_INT 26
34206: PUSH
34207: EMPTY
34208: LIST
34209: IN
34210: IFFALSE 34231
// points := [ 120 , 30 , 80 ] ;
34212: LD_ADDR_VAR 0 9
34216: PUSH
34217: LD_INT 120
34219: PUSH
34220: LD_INT 30
34222: PUSH
34223: LD_INT 80
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34231: LD_VAR 0 6
34235: PPUSH
34236: CALL_OW 264
34240: PUSH
34241: LD_INT 22
34243: PUSH
34244: EMPTY
34245: LIST
34246: IN
34247: IFFALSE 34268
// points := [ 40 , 1 , 1 ] ;
34249: LD_ADDR_VAR 0 9
34253: PUSH
34254: LD_INT 40
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34268: LD_VAR 0 6
34272: PPUSH
34273: CALL_OW 264
34277: PUSH
34278: LD_INT 29
34280: PUSH
34281: EMPTY
34282: LIST
34283: IN
34284: IFFALSE 34305
// points := [ 70 , 200 , 400 ] ;
34286: LD_ADDR_VAR 0 9
34290: PUSH
34291: LD_INT 70
34293: PUSH
34294: LD_INT 200
34296: PUSH
34297: LD_INT 400
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34305: LD_VAR 0 6
34309: PPUSH
34310: CALL_OW 264
34314: PUSH
34315: LD_INT 14
34317: PUSH
34318: LD_INT 53
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: IN
34325: IFFALSE 34346
// points := [ 40 , 10 , 20 ] ;
34327: LD_ADDR_VAR 0 9
34331: PUSH
34332: LD_INT 40
34334: PUSH
34335: LD_INT 10
34337: PUSH
34338: LD_INT 20
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34346: LD_VAR 0 6
34350: PPUSH
34351: CALL_OW 264
34355: PUSH
34356: LD_INT 9
34358: PUSH
34359: EMPTY
34360: LIST
34361: IN
34362: IFFALSE 34383
// points := [ 5 , 70 , 20 ] ;
34364: LD_ADDR_VAR 0 9
34368: PUSH
34369: LD_INT 5
34371: PUSH
34372: LD_INT 70
34374: PUSH
34375: LD_INT 20
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34383: LD_VAR 0 6
34387: PPUSH
34388: CALL_OW 264
34392: PUSH
34393: LD_INT 10
34395: PUSH
34396: EMPTY
34397: LIST
34398: IN
34399: IFFALSE 34420
// points := [ 35 , 110 , 70 ] ;
34401: LD_ADDR_VAR 0 9
34405: PUSH
34406: LD_INT 35
34408: PUSH
34409: LD_INT 110
34411: PUSH
34412: LD_INT 70
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34420: LD_VAR 0 6
34424: PPUSH
34425: CALL_OW 265
34429: PUSH
34430: LD_INT 25
34432: EQUAL
34433: IFFALSE 34454
// points := [ 80 , 65 , 100 ] ;
34435: LD_ADDR_VAR 0 9
34439: PUSH
34440: LD_INT 80
34442: PUSH
34443: LD_INT 65
34445: PUSH
34446: LD_INT 100
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34454: LD_VAR 0 6
34458: PPUSH
34459: CALL_OW 263
34463: PUSH
34464: LD_INT 1
34466: EQUAL
34467: IFFALSE 34502
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34469: LD_ADDR_VAR 0 10
34473: PUSH
34474: LD_VAR 0 10
34478: PUSH
34479: LD_VAR 0 6
34483: PPUSH
34484: CALL_OW 311
34488: PPUSH
34489: LD_INT 3
34491: PPUSH
34492: CALL_OW 259
34496: PUSH
34497: LD_INT 4
34499: MUL
34500: MUL
34501: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34502: LD_VAR 0 6
34506: PPUSH
34507: CALL_OW 263
34511: PUSH
34512: LD_INT 2
34514: EQUAL
34515: IFFALSE 34566
// begin j := IsControledBy ( i ) ;
34517: LD_ADDR_VAR 0 7
34521: PUSH
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 312
34531: ST_TO_ADDR
// if j then
34532: LD_VAR 0 7
34536: IFFALSE 34566
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34538: LD_ADDR_VAR 0 10
34542: PUSH
34543: LD_VAR 0 10
34547: PUSH
34548: LD_VAR 0 7
34552: PPUSH
34553: LD_INT 3
34555: PPUSH
34556: CALL_OW 259
34560: PUSH
34561: LD_INT 3
34563: MUL
34564: MUL
34565: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34566: LD_VAR 0 6
34570: PPUSH
34571: CALL_OW 264
34575: PUSH
34576: LD_INT 5
34578: PUSH
34579: LD_INT 6
34581: PUSH
34582: LD_INT 46
34584: PUSH
34585: LD_INT 44
34587: PUSH
34588: LD_INT 47
34590: PUSH
34591: LD_INT 45
34593: PUSH
34594: LD_INT 28
34596: PUSH
34597: LD_INT 7
34599: PUSH
34600: LD_INT 27
34602: PUSH
34603: LD_INT 29
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: IN
34618: PUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: LD_INT 52
34626: PPUSH
34627: CALL_OW 321
34631: PUSH
34632: LD_INT 2
34634: EQUAL
34635: AND
34636: IFFALSE 34653
// bpoints := bpoints * 1.2 ;
34638: LD_ADDR_VAR 0 10
34642: PUSH
34643: LD_VAR 0 10
34647: PUSH
34648: LD_REAL  1.20000000000000E+0000
34651: MUL
34652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34653: LD_VAR 0 6
34657: PPUSH
34658: CALL_OW 264
34662: PUSH
34663: LD_INT 6
34665: PUSH
34666: LD_INT 46
34668: PUSH
34669: LD_INT 47
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: IN
34677: IFFALSE 34694
// bpoints := bpoints * 1.2 ;
34679: LD_ADDR_VAR 0 10
34683: PUSH
34684: LD_VAR 0 10
34688: PUSH
34689: LD_REAL  1.20000000000000E+0000
34692: MUL
34693: ST_TO_ADDR
// end ; unit_building :
34694: GO 34708
34696: LD_INT 3
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34707
34704: POP
// ; end ;
34705: GO 34708
34707: POP
// for j = 1 to 3 do
34708: LD_ADDR_VAR 0 7
34712: PUSH
34713: DOUBLE
34714: LD_INT 1
34716: DEC
34717: ST_TO_ADDR
34718: LD_INT 3
34720: PUSH
34721: FOR_TO
34722: IFFALSE 34775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34724: LD_ADDR_VAR 0 5
34728: PUSH
34729: LD_VAR 0 5
34733: PPUSH
34734: LD_VAR 0 7
34738: PPUSH
34739: LD_VAR 0 5
34743: PUSH
34744: LD_VAR 0 7
34748: ARRAY
34749: PUSH
34750: LD_VAR 0 9
34754: PUSH
34755: LD_VAR 0 7
34759: ARRAY
34760: PUSH
34761: LD_VAR 0 10
34765: MUL
34766: PLUS
34767: PPUSH
34768: CALL_OW 1
34772: ST_TO_ADDR
34773: GO 34721
34775: POP
34776: POP
// end ;
34777: GO 33260
34779: POP
34780: POP
// result := Replace ( result , 4 , tmp ) ;
34781: LD_ADDR_VAR 0 5
34785: PUSH
34786: LD_VAR 0 5
34790: PPUSH
34791: LD_INT 4
34793: PPUSH
34794: LD_VAR 0 8
34798: PPUSH
34799: CALL_OW 1
34803: ST_TO_ADDR
// end ;
34804: LD_VAR 0 5
34808: RET
// export function DangerAtRange ( unit , range ) ; begin
34809: LD_INT 0
34811: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34812: LD_ADDR_VAR 0 3
34816: PUSH
34817: LD_VAR 0 1
34821: PPUSH
34822: CALL_OW 255
34826: PPUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL_OW 250
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 251
34846: PPUSH
34847: LD_VAR 0 2
34851: PPUSH
34852: CALL 33112 0 4
34856: ST_TO_ADDR
// end ;
34857: LD_VAR 0 3
34861: RET
// export function DangerInArea ( side , area ) ; begin
34862: LD_INT 0
34864: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34865: LD_ADDR_VAR 0 3
34869: PUSH
34870: LD_VAR 0 2
34874: PPUSH
34875: LD_INT 81
34877: PUSH
34878: LD_VAR 0 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PPUSH
34887: CALL_OW 70
34891: ST_TO_ADDR
// end ;
34892: LD_VAR 0 3
34896: RET
// export function IsExtension ( b ) ; begin
34897: LD_INT 0
34899: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34900: LD_ADDR_VAR 0 2
34904: PUSH
34905: LD_VAR 0 1
34909: PUSH
34910: LD_INT 23
34912: PUSH
34913: LD_INT 20
34915: PUSH
34916: LD_INT 22
34918: PUSH
34919: LD_INT 17
34921: PUSH
34922: LD_INT 24
34924: PUSH
34925: LD_INT 21
34927: PUSH
34928: LD_INT 19
34930: PUSH
34931: LD_INT 16
34933: PUSH
34934: LD_INT 25
34936: PUSH
34937: LD_INT 18
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: IN
34952: ST_TO_ADDR
// end ;
34953: LD_VAR 0 2
34957: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
// result := [ ] ;
34963: LD_ADDR_VAR 0 4
34967: PUSH
34968: EMPTY
34969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34970: LD_ADDR_VAR 0 5
34974: PUSH
34975: LD_VAR 0 2
34979: PPUSH
34980: LD_INT 21
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PPUSH
34990: CALL_OW 70
34994: ST_TO_ADDR
// if not tmp then
34995: LD_VAR 0 5
34999: NOT
35000: IFFALSE 35004
// exit ;
35002: GO 35068
// if checkLink then
35004: LD_VAR 0 3
35008: IFFALSE 35058
// begin for i in tmp do
35010: LD_ADDR_VAR 0 6
35014: PUSH
35015: LD_VAR 0 5
35019: PUSH
35020: FOR_IN
35021: IFFALSE 35056
// if GetBase ( i ) <> base then
35023: LD_VAR 0 6
35027: PPUSH
35028: CALL_OW 274
35032: PUSH
35033: LD_VAR 0 1
35037: NONEQUAL
35038: IFFALSE 35054
// ComLinkToBase ( base , i ) ;
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_VAR 0 6
35049: PPUSH
35050: CALL_OW 169
35054: GO 35020
35056: POP
35057: POP
// end ; result := tmp ;
35058: LD_ADDR_VAR 0 4
35062: PUSH
35063: LD_VAR 0 5
35067: ST_TO_ADDR
// end ;
35068: LD_VAR 0 4
35072: RET
// export function ComComplete ( units , b ) ; var i ; begin
35073: LD_INT 0
35075: PPUSH
35076: PPUSH
// if not units then
35077: LD_VAR 0 1
35081: NOT
35082: IFFALSE 35086
// exit ;
35084: GO 35176
// for i in units do
35086: LD_ADDR_VAR 0 4
35090: PUSH
35091: LD_VAR 0 1
35095: PUSH
35096: FOR_IN
35097: IFFALSE 35174
// if BuildingStatus ( b ) = bs_build then
35099: LD_VAR 0 2
35103: PPUSH
35104: CALL_OW 461
35108: PUSH
35109: LD_INT 1
35111: EQUAL
35112: IFFALSE 35172
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35114: LD_VAR 0 4
35118: PPUSH
35119: LD_STRING h
35121: PUSH
35122: LD_VAR 0 2
35126: PPUSH
35127: CALL_OW 250
35131: PUSH
35132: LD_VAR 0 2
35136: PPUSH
35137: CALL_OW 251
35141: PUSH
35142: LD_VAR 0 2
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: PUSH
35165: EMPTY
35166: LIST
35167: PPUSH
35168: CALL_OW 446
35172: GO 35096
35174: POP
35175: POP
// end ;
35176: LD_VAR 0 3
35180: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35181: LD_INT 0
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35189: LD_VAR 0 1
35193: NOT
35194: PUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 263
35204: PUSH
35205: LD_INT 2
35207: EQUAL
35208: NOT
35209: OR
35210: IFFALSE 35214
// exit ;
35212: GO 35530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35214: LD_ADDR_VAR 0 6
35218: PUSH
35219: LD_INT 22
35221: PUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 255
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: LD_INT 30
35241: PUSH
35242: LD_INT 36
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 34
35251: PUSH
35252: LD_INT 31
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PPUSH
35268: CALL_OW 69
35272: ST_TO_ADDR
// if not tmp then
35273: LD_VAR 0 6
35277: NOT
35278: IFFALSE 35282
// exit ;
35280: GO 35530
// result := [ ] ;
35282: LD_ADDR_VAR 0 2
35286: PUSH
35287: EMPTY
35288: ST_TO_ADDR
// for i in tmp do
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_VAR 0 6
35298: PUSH
35299: FOR_IN
35300: IFFALSE 35371
// begin t := UnitsInside ( i ) ;
35302: LD_ADDR_VAR 0 4
35306: PUSH
35307: LD_VAR 0 3
35311: PPUSH
35312: CALL_OW 313
35316: ST_TO_ADDR
// if t then
35317: LD_VAR 0 4
35321: IFFALSE 35369
// for j in t do
35323: LD_ADDR_VAR 0 7
35327: PUSH
35328: LD_VAR 0 4
35332: PUSH
35333: FOR_IN
35334: IFFALSE 35367
// result := Insert ( result , result + 1 , j ) ;
35336: LD_ADDR_VAR 0 2
35340: PUSH
35341: LD_VAR 0 2
35345: PPUSH
35346: LD_VAR 0 2
35350: PUSH
35351: LD_INT 1
35353: PLUS
35354: PPUSH
35355: LD_VAR 0 7
35359: PPUSH
35360: CALL_OW 2
35364: ST_TO_ADDR
35365: GO 35333
35367: POP
35368: POP
// end ;
35369: GO 35299
35371: POP
35372: POP
// if not result then
35373: LD_VAR 0 2
35377: NOT
35378: IFFALSE 35382
// exit ;
35380: GO 35530
// mech := result [ 1 ] ;
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: ST_TO_ADDR
// if result > 1 then
35396: LD_VAR 0 2
35400: PUSH
35401: LD_INT 1
35403: GREATER
35404: IFFALSE 35516
// for i = 2 to result do
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: DOUBLE
35412: LD_INT 2
35414: DEC
35415: ST_TO_ADDR
35416: LD_VAR 0 2
35420: PUSH
35421: FOR_TO
35422: IFFALSE 35514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35424: LD_ADDR_VAR 0 4
35428: PUSH
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 3
35438: ARRAY
35439: PPUSH
35440: LD_INT 3
35442: PPUSH
35443: CALL_OW 259
35447: PUSH
35448: LD_VAR 0 2
35452: PUSH
35453: LD_VAR 0 3
35457: ARRAY
35458: PPUSH
35459: CALL_OW 432
35463: MINUS
35464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35465: LD_VAR 0 4
35469: PUSH
35470: LD_VAR 0 5
35474: PPUSH
35475: LD_INT 3
35477: PPUSH
35478: CALL_OW 259
35482: PUSH
35483: LD_VAR 0 5
35487: PPUSH
35488: CALL_OW 432
35492: MINUS
35493: GREATEREQUAL
35494: IFFALSE 35512
// mech := result [ i ] ;
35496: LD_ADDR_VAR 0 5
35500: PUSH
35501: LD_VAR 0 2
35505: PUSH
35506: LD_VAR 0 3
35510: ARRAY
35511: ST_TO_ADDR
// end ;
35512: GO 35421
35514: POP
35515: POP
// ComLinkTo ( vehicle , mech ) ;
35516: LD_VAR 0 1
35520: PPUSH
35521: LD_VAR 0 5
35525: PPUSH
35526: CALL_OW 135
// end ;
35530: LD_VAR 0 2
35534: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35535: LD_INT 0
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
// result := [ ] ;
35550: LD_ADDR_VAR 0 7
35554: PUSH
35555: EMPTY
35556: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL_OW 266
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: IN
35577: NOT
35578: IFFALSE 35582
// exit ;
35580: GO 37216
// if name then
35582: LD_VAR 0 3
35586: IFFALSE 35602
// SetBName ( base_dep , name ) ;
35588: LD_VAR 0 1
35592: PPUSH
35593: LD_VAR 0 3
35597: PPUSH
35598: CALL_OW 500
// base := GetBase ( base_dep ) ;
35602: LD_ADDR_VAR 0 15
35606: PUSH
35607: LD_VAR 0 1
35611: PPUSH
35612: CALL_OW 274
35616: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35617: LD_ADDR_VAR 0 16
35621: PUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 255
35631: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35632: LD_ADDR_VAR 0 17
35636: PUSH
35637: LD_VAR 0 1
35641: PPUSH
35642: CALL_OW 248
35646: ST_TO_ADDR
// if sources then
35647: LD_VAR 0 5
35651: IFFALSE 35698
// for i = 1 to 3 do
35653: LD_ADDR_VAR 0 8
35657: PUSH
35658: DOUBLE
35659: LD_INT 1
35661: DEC
35662: ST_TO_ADDR
35663: LD_INT 3
35665: PUSH
35666: FOR_TO
35667: IFFALSE 35696
// AddResourceType ( base , i , sources [ i ] ) ;
35669: LD_VAR 0 15
35673: PPUSH
35674: LD_VAR 0 8
35678: PPUSH
35679: LD_VAR 0 5
35683: PUSH
35684: LD_VAR 0 8
35688: ARRAY
35689: PPUSH
35690: CALL_OW 276
35694: GO 35666
35696: POP
35697: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35698: LD_ADDR_VAR 0 18
35702: PUSH
35703: LD_VAR 0 15
35707: PPUSH
35708: LD_VAR 0 2
35712: PPUSH
35713: LD_INT 1
35715: PPUSH
35716: CALL 34958 0 3
35720: ST_TO_ADDR
// InitHc ;
35721: CALL_OW 19
// InitUc ;
35725: CALL_OW 18
// uc_side := side ;
35729: LD_ADDR_OWVAR 20
35733: PUSH
35734: LD_VAR 0 16
35738: ST_TO_ADDR
// uc_nation := nation ;
35739: LD_ADDR_OWVAR 21
35743: PUSH
35744: LD_VAR 0 17
35748: ST_TO_ADDR
// if buildings then
35749: LD_VAR 0 18
35753: IFFALSE 37075
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35755: LD_ADDR_VAR 0 19
35759: PUSH
35760: LD_VAR 0 18
35764: PPUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 30
35770: PUSH
35771: LD_INT 29
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 30
35780: PUSH
35781: LD_INT 30
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: PPUSH
35793: CALL_OW 72
35797: ST_TO_ADDR
// if tmp then
35798: LD_VAR 0 19
35802: IFFALSE 35850
// for i in tmp do
35804: LD_ADDR_VAR 0 8
35808: PUSH
35809: LD_VAR 0 19
35813: PUSH
35814: FOR_IN
35815: IFFALSE 35848
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35817: LD_VAR 0 8
35821: PPUSH
35822: CALL_OW 250
35826: PPUSH
35827: LD_VAR 0 8
35831: PPUSH
35832: CALL_OW 251
35836: PPUSH
35837: LD_VAR 0 16
35841: PPUSH
35842: CALL_OW 441
35846: GO 35814
35848: POP
35849: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35850: LD_VAR 0 18
35854: PPUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 30
35860: PUSH
35861: LD_INT 32
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 30
35870: PUSH
35871: LD_INT 33
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: PPUSH
35883: CALL_OW 72
35887: IFFALSE 35975
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35889: LD_ADDR_VAR 0 8
35893: PUSH
35894: LD_VAR 0 18
35898: PPUSH
35899: LD_INT 2
35901: PUSH
35902: LD_INT 30
35904: PUSH
35905: LD_INT 32
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 30
35914: PUSH
35915: LD_INT 33
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL_OW 72
35931: PUSH
35932: FOR_IN
35933: IFFALSE 35973
// begin if not GetBWeapon ( i ) then
35935: LD_VAR 0 8
35939: PPUSH
35940: CALL_OW 269
35944: NOT
35945: IFFALSE 35971
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35947: LD_VAR 0 8
35951: PPUSH
35952: LD_VAR 0 8
35956: PPUSH
35957: LD_VAR 0 2
35961: PPUSH
35962: CALL 37221 0 2
35966: PPUSH
35967: CALL_OW 431
// end ;
35971: GO 35932
35973: POP
35974: POP
// end ; for i = 1 to personel do
35975: LD_ADDR_VAR 0 8
35979: PUSH
35980: DOUBLE
35981: LD_INT 1
35983: DEC
35984: ST_TO_ADDR
35985: LD_VAR 0 6
35989: PUSH
35990: FOR_TO
35991: IFFALSE 37055
// begin if i > 4 then
35993: LD_VAR 0 8
35997: PUSH
35998: LD_INT 4
36000: GREATER
36001: IFFALSE 36005
// break ;
36003: GO 37055
// case i of 1 :
36005: LD_VAR 0 8
36009: PUSH
36010: LD_INT 1
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36018
36016: GO 36098
36018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36019: LD_ADDR_VAR 0 12
36023: PUSH
36024: LD_VAR 0 18
36028: PPUSH
36029: LD_INT 22
36031: PUSH
36032: LD_VAR 0 16
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 58
36043: PUSH
36044: EMPTY
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: LD_INT 30
36052: PUSH
36053: LD_INT 32
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 30
36062: PUSH
36063: LD_INT 4
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 30
36072: PUSH
36073: LD_INT 5
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: PPUSH
36091: CALL_OW 72
36095: ST_TO_ADDR
36096: GO 36320
36098: LD_INT 2
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36106
36104: GO 36168
36106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36107: LD_ADDR_VAR 0 12
36111: PUSH
36112: LD_VAR 0 18
36116: PPUSH
36117: LD_INT 22
36119: PUSH
36120: LD_VAR 0 16
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: LD_INT 30
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 30
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL_OW 72
36165: ST_TO_ADDR
36166: GO 36320
36168: LD_INT 3
36170: DOUBLE
36171: EQUAL
36172: IFTRUE 36176
36174: GO 36238
36176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36177: LD_ADDR_VAR 0 12
36181: PUSH
36182: LD_VAR 0 18
36186: PPUSH
36187: LD_INT 22
36189: PUSH
36190: LD_VAR 0 16
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: LD_INT 30
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 30
36214: PUSH
36215: LD_INT 3
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PPUSH
36231: CALL_OW 72
36235: ST_TO_ADDR
36236: GO 36320
36238: LD_INT 4
36240: DOUBLE
36241: EQUAL
36242: IFTRUE 36246
36244: GO 36319
36246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36247: LD_ADDR_VAR 0 12
36251: PUSH
36252: LD_VAR 0 18
36256: PPUSH
36257: LD_INT 22
36259: PUSH
36260: LD_VAR 0 16
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 30
36274: PUSH
36275: LD_INT 6
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 30
36284: PUSH
36285: LD_INT 7
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 30
36294: PUSH
36295: LD_INT 8
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PPUSH
36312: CALL_OW 72
36316: ST_TO_ADDR
36317: GO 36320
36319: POP
// if i = 1 then
36320: LD_VAR 0 8
36324: PUSH
36325: LD_INT 1
36327: EQUAL
36328: IFFALSE 36439
// begin tmp := [ ] ;
36330: LD_ADDR_VAR 0 19
36334: PUSH
36335: EMPTY
36336: ST_TO_ADDR
// for j in f do
36337: LD_ADDR_VAR 0 9
36341: PUSH
36342: LD_VAR 0 12
36346: PUSH
36347: FOR_IN
36348: IFFALSE 36421
// if GetBType ( j ) = b_bunker then
36350: LD_VAR 0 9
36354: PPUSH
36355: CALL_OW 266
36359: PUSH
36360: LD_INT 32
36362: EQUAL
36363: IFFALSE 36390
// tmp := Insert ( tmp , 1 , j ) else
36365: LD_ADDR_VAR 0 19
36369: PUSH
36370: LD_VAR 0 19
36374: PPUSH
36375: LD_INT 1
36377: PPUSH
36378: LD_VAR 0 9
36382: PPUSH
36383: CALL_OW 2
36387: ST_TO_ADDR
36388: GO 36419
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36390: LD_ADDR_VAR 0 19
36394: PUSH
36395: LD_VAR 0 19
36399: PPUSH
36400: LD_VAR 0 19
36404: PUSH
36405: LD_INT 1
36407: PLUS
36408: PPUSH
36409: LD_VAR 0 9
36413: PPUSH
36414: CALL_OW 2
36418: ST_TO_ADDR
36419: GO 36347
36421: POP
36422: POP
// if tmp then
36423: LD_VAR 0 19
36427: IFFALSE 36439
// f := tmp ;
36429: LD_ADDR_VAR 0 12
36433: PUSH
36434: LD_VAR 0 19
36438: ST_TO_ADDR
// end ; x := personel [ i ] ;
36439: LD_ADDR_VAR 0 13
36443: PUSH
36444: LD_VAR 0 6
36448: PUSH
36449: LD_VAR 0 8
36453: ARRAY
36454: ST_TO_ADDR
// if x = - 1 then
36455: LD_VAR 0 13
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: EQUAL
36464: IFFALSE 36673
// begin for j in f do
36466: LD_ADDR_VAR 0 9
36470: PUSH
36471: LD_VAR 0 12
36475: PUSH
36476: FOR_IN
36477: IFFALSE 36669
// repeat InitHc ;
36479: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36483: LD_VAR 0 9
36487: PPUSH
36488: CALL_OW 266
36492: PUSH
36493: LD_INT 5
36495: EQUAL
36496: IFFALSE 36566
// begin if UnitsInside ( j ) < 3 then
36498: LD_VAR 0 9
36502: PPUSH
36503: CALL_OW 313
36507: PUSH
36508: LD_INT 3
36510: LESS
36511: IFFALSE 36547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36513: LD_INT 0
36515: PPUSH
36516: LD_INT 5
36518: PUSH
36519: LD_INT 8
36521: PUSH
36522: LD_INT 9
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: PUSH
36530: LD_VAR 0 17
36534: ARRAY
36535: PPUSH
36536: LD_VAR 0 4
36540: PPUSH
36541: CALL_OW 380
36545: GO 36564
// PrepareHuman ( false , i , skill ) ;
36547: LD_INT 0
36549: PPUSH
36550: LD_VAR 0 8
36554: PPUSH
36555: LD_VAR 0 4
36559: PPUSH
36560: CALL_OW 380
// end else
36564: GO 36583
// PrepareHuman ( false , i , skill ) ;
36566: LD_INT 0
36568: PPUSH
36569: LD_VAR 0 8
36573: PPUSH
36574: LD_VAR 0 4
36578: PPUSH
36579: CALL_OW 380
// un := CreateHuman ;
36583: LD_ADDR_VAR 0 14
36587: PUSH
36588: CALL_OW 44
36592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36593: LD_ADDR_VAR 0 7
36597: PUSH
36598: LD_VAR 0 7
36602: PPUSH
36603: LD_INT 1
36605: PPUSH
36606: LD_VAR 0 14
36610: PPUSH
36611: CALL_OW 2
36615: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36616: LD_VAR 0 14
36620: PPUSH
36621: LD_VAR 0 9
36625: PPUSH
36626: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36630: LD_VAR 0 9
36634: PPUSH
36635: CALL_OW 313
36639: PUSH
36640: LD_INT 6
36642: EQUAL
36643: PUSH
36644: LD_VAR 0 9
36648: PPUSH
36649: CALL_OW 266
36653: PUSH
36654: LD_INT 32
36656: PUSH
36657: LD_INT 31
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: IN
36664: OR
36665: IFFALSE 36479
36667: GO 36476
36669: POP
36670: POP
// end else
36671: GO 37053
// for j = 1 to x do
36673: LD_ADDR_VAR 0 9
36677: PUSH
36678: DOUBLE
36679: LD_INT 1
36681: DEC
36682: ST_TO_ADDR
36683: LD_VAR 0 13
36687: PUSH
36688: FOR_TO
36689: IFFALSE 37051
// begin InitHc ;
36691: CALL_OW 19
// if not f then
36695: LD_VAR 0 12
36699: NOT
36700: IFFALSE 36789
// begin PrepareHuman ( false , i , skill ) ;
36702: LD_INT 0
36704: PPUSH
36705: LD_VAR 0 8
36709: PPUSH
36710: LD_VAR 0 4
36714: PPUSH
36715: CALL_OW 380
// un := CreateHuman ;
36719: LD_ADDR_VAR 0 14
36723: PUSH
36724: CALL_OW 44
36728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36729: LD_ADDR_VAR 0 7
36733: PUSH
36734: LD_VAR 0 7
36738: PPUSH
36739: LD_INT 1
36741: PPUSH
36742: LD_VAR 0 14
36746: PPUSH
36747: CALL_OW 2
36751: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36752: LD_VAR 0 14
36756: PPUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 250
36766: PPUSH
36767: LD_VAR 0 1
36771: PPUSH
36772: CALL_OW 251
36776: PPUSH
36777: LD_INT 10
36779: PPUSH
36780: LD_INT 0
36782: PPUSH
36783: CALL_OW 50
// continue ;
36787: GO 36688
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36789: LD_VAR 0 12
36793: PUSH
36794: LD_INT 1
36796: ARRAY
36797: PPUSH
36798: CALL_OW 313
36802: PUSH
36803: LD_VAR 0 12
36807: PUSH
36808: LD_INT 1
36810: ARRAY
36811: PPUSH
36812: CALL_OW 266
36816: PUSH
36817: LD_INT 32
36819: PUSH
36820: LD_INT 31
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: IN
36827: AND
36828: PUSH
36829: LD_VAR 0 12
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: CALL_OW 313
36842: PUSH
36843: LD_INT 6
36845: EQUAL
36846: OR
36847: IFFALSE 36867
// f := Delete ( f , 1 ) ;
36849: LD_ADDR_VAR 0 12
36853: PUSH
36854: LD_VAR 0 12
36858: PPUSH
36859: LD_INT 1
36861: PPUSH
36862: CALL_OW 3
36866: ST_TO_ADDR
// if not f then
36867: LD_VAR 0 12
36871: NOT
36872: IFFALSE 36890
// begin x := x + 2 ;
36874: LD_ADDR_VAR 0 13
36878: PUSH
36879: LD_VAR 0 13
36883: PUSH
36884: LD_INT 2
36886: PLUS
36887: ST_TO_ADDR
// continue ;
36888: GO 36688
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36890: LD_VAR 0 12
36894: PUSH
36895: LD_INT 1
36897: ARRAY
36898: PPUSH
36899: CALL_OW 266
36903: PUSH
36904: LD_INT 5
36906: EQUAL
36907: IFFALSE 36981
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36909: LD_VAR 0 12
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: PPUSH
36918: CALL_OW 313
36922: PUSH
36923: LD_INT 3
36925: LESS
36926: IFFALSE 36962
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36928: LD_INT 0
36930: PPUSH
36931: LD_INT 5
36933: PUSH
36934: LD_INT 8
36936: PUSH
36937: LD_INT 9
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: PUSH
36945: LD_VAR 0 17
36949: ARRAY
36950: PPUSH
36951: LD_VAR 0 4
36955: PPUSH
36956: CALL_OW 380
36960: GO 36979
// PrepareHuman ( false , i , skill ) ;
36962: LD_INT 0
36964: PPUSH
36965: LD_VAR 0 8
36969: PPUSH
36970: LD_VAR 0 4
36974: PPUSH
36975: CALL_OW 380
// end else
36979: GO 36998
// PrepareHuman ( false , i , skill ) ;
36981: LD_INT 0
36983: PPUSH
36984: LD_VAR 0 8
36988: PPUSH
36989: LD_VAR 0 4
36993: PPUSH
36994: CALL_OW 380
// un := CreateHuman ;
36998: LD_ADDR_VAR 0 14
37002: PUSH
37003: CALL_OW 44
37007: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37008: LD_ADDR_VAR 0 7
37012: PUSH
37013: LD_VAR 0 7
37017: PPUSH
37018: LD_INT 1
37020: PPUSH
37021: LD_VAR 0 14
37025: PPUSH
37026: CALL_OW 2
37030: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37031: LD_VAR 0 14
37035: PPUSH
37036: LD_VAR 0 12
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: PPUSH
37045: CALL_OW 52
// end ;
37049: GO 36688
37051: POP
37052: POP
// end ;
37053: GO 35990
37055: POP
37056: POP
// result := result ^ buildings ;
37057: LD_ADDR_VAR 0 7
37061: PUSH
37062: LD_VAR 0 7
37066: PUSH
37067: LD_VAR 0 18
37071: ADD
37072: ST_TO_ADDR
// end else
37073: GO 37216
// begin for i = 1 to personel do
37075: LD_ADDR_VAR 0 8
37079: PUSH
37080: DOUBLE
37081: LD_INT 1
37083: DEC
37084: ST_TO_ADDR
37085: LD_VAR 0 6
37089: PUSH
37090: FOR_TO
37091: IFFALSE 37214
// begin if i > 4 then
37093: LD_VAR 0 8
37097: PUSH
37098: LD_INT 4
37100: GREATER
37101: IFFALSE 37105
// break ;
37103: GO 37214
// x := personel [ i ] ;
37105: LD_ADDR_VAR 0 13
37109: PUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_VAR 0 8
37119: ARRAY
37120: ST_TO_ADDR
// if x = - 1 then
37121: LD_VAR 0 13
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: EQUAL
37130: IFFALSE 37134
// continue ;
37132: GO 37090
// PrepareHuman ( false , i , skill ) ;
37134: LD_INT 0
37136: PPUSH
37137: LD_VAR 0 8
37141: PPUSH
37142: LD_VAR 0 4
37146: PPUSH
37147: CALL_OW 380
// un := CreateHuman ;
37151: LD_ADDR_VAR 0 14
37155: PUSH
37156: CALL_OW 44
37160: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37161: LD_VAR 0 14
37165: PPUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 250
37175: PPUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 251
37185: PPUSH
37186: LD_INT 10
37188: PPUSH
37189: LD_INT 0
37191: PPUSH
37192: CALL_OW 50
// result := result ^ un ;
37196: LD_ADDR_VAR 0 7
37200: PUSH
37201: LD_VAR 0 7
37205: PUSH
37206: LD_VAR 0 14
37210: ADD
37211: ST_TO_ADDR
// end ;
37212: GO 37090
37214: POP
37215: POP
// end ; end ;
37216: LD_VAR 0 7
37220: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37221: LD_INT 0
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
// result := false ;
37239: LD_ADDR_VAR 0 3
37243: PUSH
37244: LD_INT 0
37246: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37247: LD_VAR 0 1
37251: NOT
37252: PUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: CALL_OW 266
37262: PUSH
37263: LD_INT 32
37265: PUSH
37266: LD_INT 33
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: IN
37273: NOT
37274: OR
37275: IFFALSE 37279
// exit ;
37277: GO 38418
// nat := GetNation ( tower ) ;
37279: LD_ADDR_VAR 0 12
37283: PUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL_OW 248
37293: ST_TO_ADDR
// side := GetSide ( tower ) ;
37294: LD_ADDR_VAR 0 16
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 255
37308: ST_TO_ADDR
// x := GetX ( tower ) ;
37309: LD_ADDR_VAR 0 10
37313: PUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 250
37323: ST_TO_ADDR
// y := GetY ( tower ) ;
37324: LD_ADDR_VAR 0 11
37328: PUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 251
37338: ST_TO_ADDR
// if not x or not y then
37339: LD_VAR 0 10
37343: NOT
37344: PUSH
37345: LD_VAR 0 11
37349: NOT
37350: OR
37351: IFFALSE 37355
// exit ;
37353: GO 38418
// weapon := 0 ;
37355: LD_ADDR_VAR 0 18
37359: PUSH
37360: LD_INT 0
37362: ST_TO_ADDR
// fac_list := [ ] ;
37363: LD_ADDR_VAR 0 17
37367: PUSH
37368: EMPTY
37369: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37370: LD_ADDR_VAR 0 6
37374: PUSH
37375: LD_VAR 0 1
37379: PPUSH
37380: CALL_OW 274
37384: PPUSH
37385: LD_VAR 0 2
37389: PPUSH
37390: LD_INT 0
37392: PPUSH
37393: CALL 34958 0 3
37397: PPUSH
37398: LD_INT 30
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PPUSH
37408: CALL_OW 72
37412: ST_TO_ADDR
// if not factories then
37413: LD_VAR 0 6
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 38418
// for i in factories do
37422: LD_ADDR_VAR 0 8
37426: PUSH
37427: LD_VAR 0 6
37431: PUSH
37432: FOR_IN
37433: IFFALSE 37458
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37435: LD_ADDR_VAR 0 17
37439: PUSH
37440: LD_VAR 0 17
37444: PUSH
37445: LD_VAR 0 8
37449: PPUSH
37450: CALL_OW 478
37454: UNION
37455: ST_TO_ADDR
37456: GO 37432
37458: POP
37459: POP
// if not fac_list then
37460: LD_VAR 0 17
37464: NOT
37465: IFFALSE 37469
// exit ;
37467: GO 38418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37469: LD_ADDR_VAR 0 5
37473: PUSH
37474: LD_INT 4
37476: PUSH
37477: LD_INT 5
37479: PUSH
37480: LD_INT 9
37482: PUSH
37483: LD_INT 10
37485: PUSH
37486: LD_INT 6
37488: PUSH
37489: LD_INT 7
37491: PUSH
37492: LD_INT 11
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 27
37506: PUSH
37507: LD_INT 28
37509: PUSH
37510: LD_INT 26
37512: PUSH
37513: LD_INT 30
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 43
37524: PUSH
37525: LD_INT 44
37527: PUSH
37528: LD_INT 46
37530: PUSH
37531: LD_INT 45
37533: PUSH
37534: LD_INT 47
37536: PUSH
37537: LD_INT 49
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PUSH
37553: LD_VAR 0 12
37557: ARRAY
37558: ST_TO_ADDR
// for i in list do
37559: LD_ADDR_VAR 0 8
37563: PUSH
37564: LD_VAR 0 5
37568: PUSH
37569: FOR_IN
37570: IFFALSE 37603
// if not i in fac_list then
37572: LD_VAR 0 8
37576: PUSH
37577: LD_VAR 0 17
37581: IN
37582: NOT
37583: IFFALSE 37601
// list := list diff i ;
37585: LD_ADDR_VAR 0 5
37589: PUSH
37590: LD_VAR 0 5
37594: PUSH
37595: LD_VAR 0 8
37599: DIFF
37600: ST_TO_ADDR
37601: GO 37569
37603: POP
37604: POP
// if not list then
37605: LD_VAR 0 5
37609: NOT
37610: IFFALSE 37614
// exit ;
37612: GO 38418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37614: LD_VAR 0 12
37618: PUSH
37619: LD_INT 3
37621: EQUAL
37622: PUSH
37623: LD_INT 49
37625: PUSH
37626: LD_VAR 0 5
37630: IN
37631: AND
37632: PUSH
37633: LD_INT 31
37635: PPUSH
37636: LD_VAR 0 16
37640: PPUSH
37641: CALL_OW 321
37645: PUSH
37646: LD_INT 2
37648: EQUAL
37649: AND
37650: IFFALSE 37710
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37652: LD_INT 22
37654: PUSH
37655: LD_VAR 0 16
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 35
37666: PUSH
37667: LD_INT 49
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 91
37676: PUSH
37677: LD_VAR 0 1
37681: PUSH
37682: LD_INT 10
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: PPUSH
37695: CALL_OW 69
37699: NOT
37700: IFFALSE 37710
// weapon := ru_time_lapser ;
37702: LD_ADDR_VAR 0 18
37706: PUSH
37707: LD_INT 49
37709: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37710: LD_VAR 0 12
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: IN
37725: PUSH
37726: LD_INT 11
37728: PUSH
37729: LD_VAR 0 5
37733: IN
37734: PUSH
37735: LD_INT 30
37737: PUSH
37738: LD_VAR 0 5
37742: IN
37743: OR
37744: AND
37745: PUSH
37746: LD_INT 6
37748: PPUSH
37749: LD_VAR 0 16
37753: PPUSH
37754: CALL_OW 321
37758: PUSH
37759: LD_INT 2
37761: EQUAL
37762: AND
37763: IFFALSE 37928
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37765: LD_INT 22
37767: PUSH
37768: LD_VAR 0 16
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 35
37782: PUSH
37783: LD_INT 11
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 35
37792: PUSH
37793: LD_INT 30
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 91
37807: PUSH
37808: LD_VAR 0 1
37812: PUSH
37813: LD_INT 18
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: PPUSH
37826: CALL_OW 69
37830: NOT
37831: PUSH
37832: LD_INT 22
37834: PUSH
37835: LD_VAR 0 16
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 30
37849: PUSH
37850: LD_INT 32
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 30
37859: PUSH
37860: LD_INT 33
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 91
37874: PUSH
37875: LD_VAR 0 1
37879: PUSH
37880: LD_INT 12
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: PUSH
37893: EMPTY
37894: LIST
37895: PPUSH
37896: CALL_OW 69
37900: PUSH
37901: LD_INT 2
37903: GREATER
37904: AND
37905: IFFALSE 37928
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37907: LD_ADDR_VAR 0 18
37911: PUSH
37912: LD_INT 11
37914: PUSH
37915: LD_INT 30
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_VAR 0 12
37926: ARRAY
37927: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37928: LD_VAR 0 18
37932: NOT
37933: PUSH
37934: LD_INT 40
37936: PPUSH
37937: LD_VAR 0 16
37941: PPUSH
37942: CALL_OW 321
37946: PUSH
37947: LD_INT 2
37949: EQUAL
37950: AND
37951: PUSH
37952: LD_INT 7
37954: PUSH
37955: LD_VAR 0 5
37959: IN
37960: PUSH
37961: LD_INT 28
37963: PUSH
37964: LD_VAR 0 5
37968: IN
37969: OR
37970: PUSH
37971: LD_INT 45
37973: PUSH
37974: LD_VAR 0 5
37978: IN
37979: OR
37980: AND
37981: IFFALSE 38235
// begin hex := GetHexInfo ( x , y ) ;
37983: LD_ADDR_VAR 0 4
37987: PUSH
37988: LD_VAR 0 10
37992: PPUSH
37993: LD_VAR 0 11
37997: PPUSH
37998: CALL_OW 546
38002: ST_TO_ADDR
// if hex [ 1 ] then
38003: LD_VAR 0 4
38007: PUSH
38008: LD_INT 1
38010: ARRAY
38011: IFFALSE 38015
// exit ;
38013: GO 38418
// height := hex [ 2 ] ;
38015: LD_ADDR_VAR 0 15
38019: PUSH
38020: LD_VAR 0 4
38024: PUSH
38025: LD_INT 2
38027: ARRAY
38028: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38029: LD_ADDR_VAR 0 14
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: LD_INT 5
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: ST_TO_ADDR
// for i in tmp do
38052: LD_ADDR_VAR 0 8
38056: PUSH
38057: LD_VAR 0 14
38061: PUSH
38062: FOR_IN
38063: IFFALSE 38233
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38065: LD_ADDR_VAR 0 9
38069: PUSH
38070: LD_VAR 0 10
38074: PPUSH
38075: LD_VAR 0 8
38079: PPUSH
38080: LD_INT 5
38082: PPUSH
38083: CALL_OW 272
38087: PUSH
38088: LD_VAR 0 11
38092: PPUSH
38093: LD_VAR 0 8
38097: PPUSH
38098: LD_INT 5
38100: PPUSH
38101: CALL_OW 273
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38110: LD_VAR 0 9
38114: PUSH
38115: LD_INT 1
38117: ARRAY
38118: PPUSH
38119: LD_VAR 0 9
38123: PUSH
38124: LD_INT 2
38126: ARRAY
38127: PPUSH
38128: CALL_OW 488
38132: IFFALSE 38231
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38134: LD_ADDR_VAR 0 4
38138: PUSH
38139: LD_VAR 0 9
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 9
38152: PUSH
38153: LD_INT 2
38155: ARRAY
38156: PPUSH
38157: CALL_OW 546
38161: ST_TO_ADDR
// if hex [ 1 ] then
38162: LD_VAR 0 4
38166: PUSH
38167: LD_INT 1
38169: ARRAY
38170: IFFALSE 38174
// continue ;
38172: GO 38062
// h := hex [ 2 ] ;
38174: LD_ADDR_VAR 0 13
38178: PUSH
38179: LD_VAR 0 4
38183: PUSH
38184: LD_INT 2
38186: ARRAY
38187: ST_TO_ADDR
// if h + 7 < height then
38188: LD_VAR 0 13
38192: PUSH
38193: LD_INT 7
38195: PLUS
38196: PUSH
38197: LD_VAR 0 15
38201: LESS
38202: IFFALSE 38231
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38204: LD_ADDR_VAR 0 18
38208: PUSH
38209: LD_INT 7
38211: PUSH
38212: LD_INT 28
38214: PUSH
38215: LD_INT 45
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: PUSH
38223: LD_VAR 0 12
38227: ARRAY
38228: ST_TO_ADDR
// break ;
38229: GO 38233
// end ; end ; end ;
38231: GO 38062
38233: POP
38234: POP
// end ; if not weapon then
38235: LD_VAR 0 18
38239: NOT
38240: IFFALSE 38300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38242: LD_ADDR_VAR 0 5
38246: PUSH
38247: LD_VAR 0 5
38251: PUSH
38252: LD_INT 11
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: LD_INT 49
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: DIFF
38266: ST_TO_ADDR
// if not list then
38267: LD_VAR 0 5
38271: NOT
38272: IFFALSE 38276
// exit ;
38274: GO 38418
// weapon := list [ rand ( 1 , list ) ] ;
38276: LD_ADDR_VAR 0 18
38280: PUSH
38281: LD_VAR 0 5
38285: PUSH
38286: LD_INT 1
38288: PPUSH
38289: LD_VAR 0 5
38293: PPUSH
38294: CALL_OW 12
38298: ARRAY
38299: ST_TO_ADDR
// end ; if weapon then
38300: LD_VAR 0 18
38304: IFFALSE 38418
// begin tmp := CostOfWeapon ( weapon ) ;
38306: LD_ADDR_VAR 0 14
38310: PUSH
38311: LD_VAR 0 18
38315: PPUSH
38316: CALL_OW 451
38320: ST_TO_ADDR
// j := GetBase ( tower ) ;
38321: LD_ADDR_VAR 0 9
38325: PUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL_OW 274
38335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38336: LD_VAR 0 9
38340: PPUSH
38341: LD_INT 1
38343: PPUSH
38344: CALL_OW 275
38348: PUSH
38349: LD_VAR 0 14
38353: PUSH
38354: LD_INT 1
38356: ARRAY
38357: GREATEREQUAL
38358: PUSH
38359: LD_VAR 0 9
38363: PPUSH
38364: LD_INT 2
38366: PPUSH
38367: CALL_OW 275
38371: PUSH
38372: LD_VAR 0 14
38376: PUSH
38377: LD_INT 2
38379: ARRAY
38380: GREATEREQUAL
38381: AND
38382: PUSH
38383: LD_VAR 0 9
38387: PPUSH
38388: LD_INT 3
38390: PPUSH
38391: CALL_OW 275
38395: PUSH
38396: LD_VAR 0 14
38400: PUSH
38401: LD_INT 3
38403: ARRAY
38404: GREATEREQUAL
38405: AND
38406: IFFALSE 38418
// result := weapon ;
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_VAR 0 18
38417: ST_TO_ADDR
// end ; end ;
38418: LD_VAR 0 3
38422: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38423: LD_INT 0
38425: PPUSH
38426: PPUSH
// result := true ;
38427: LD_ADDR_VAR 0 3
38431: PUSH
38432: LD_INT 1
38434: ST_TO_ADDR
// if array1 = array2 then
38435: LD_VAR 0 1
38439: PUSH
38440: LD_VAR 0 2
38444: EQUAL
38445: IFFALSE 38505
// begin for i = 1 to array1 do
38447: LD_ADDR_VAR 0 4
38451: PUSH
38452: DOUBLE
38453: LD_INT 1
38455: DEC
38456: ST_TO_ADDR
38457: LD_VAR 0 1
38461: PUSH
38462: FOR_TO
38463: IFFALSE 38501
// if array1 [ i ] <> array2 [ i ] then
38465: LD_VAR 0 1
38469: PUSH
38470: LD_VAR 0 4
38474: ARRAY
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_VAR 0 4
38485: ARRAY
38486: NONEQUAL
38487: IFFALSE 38499
// begin result := false ;
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_INT 0
38496: ST_TO_ADDR
// break ;
38497: GO 38501
// end ;
38499: GO 38462
38501: POP
38502: POP
// end else
38503: GO 38513
// result := false ;
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: LD_INT 0
38512: ST_TO_ADDR
// end ;
38513: LD_VAR 0 3
38517: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38518: LD_INT 0
38520: PPUSH
38521: PPUSH
// if not array1 or not array2 then
38522: LD_VAR 0 1
38526: NOT
38527: PUSH
38528: LD_VAR 0 2
38532: NOT
38533: OR
38534: IFFALSE 38538
// exit ;
38536: GO 38602
// result := true ;
38538: LD_ADDR_VAR 0 3
38542: PUSH
38543: LD_INT 1
38545: ST_TO_ADDR
// for i = 1 to array1 do
38546: LD_ADDR_VAR 0 4
38550: PUSH
38551: DOUBLE
38552: LD_INT 1
38554: DEC
38555: ST_TO_ADDR
38556: LD_VAR 0 1
38560: PUSH
38561: FOR_TO
38562: IFFALSE 38600
// if array1 [ i ] <> array2 [ i ] then
38564: LD_VAR 0 1
38568: PUSH
38569: LD_VAR 0 4
38573: ARRAY
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: LD_VAR 0 4
38584: ARRAY
38585: NONEQUAL
38586: IFFALSE 38598
// begin result := false ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_INT 0
38595: ST_TO_ADDR
// break ;
38596: GO 38600
// end ;
38598: GO 38561
38600: POP
38601: POP
// end ;
38602: LD_VAR 0 3
38606: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
// pom := GetBase ( fac ) ;
38612: LD_ADDR_VAR 0 5
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 274
38626: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38627: LD_ADDR_VAR 0 4
38631: PUSH
38632: LD_VAR 0 2
38636: PUSH
38637: LD_INT 1
38639: ARRAY
38640: PPUSH
38641: LD_VAR 0 2
38645: PUSH
38646: LD_INT 2
38648: ARRAY
38649: PPUSH
38650: LD_VAR 0 2
38654: PUSH
38655: LD_INT 3
38657: ARRAY
38658: PPUSH
38659: LD_VAR 0 2
38663: PUSH
38664: LD_INT 4
38666: ARRAY
38667: PPUSH
38668: CALL_OW 449
38672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38673: LD_ADDR_VAR 0 3
38677: PUSH
38678: LD_VAR 0 5
38682: PPUSH
38683: LD_INT 1
38685: PPUSH
38686: CALL_OW 275
38690: PUSH
38691: LD_VAR 0 4
38695: PUSH
38696: LD_INT 1
38698: ARRAY
38699: GREATEREQUAL
38700: PUSH
38701: LD_VAR 0 5
38705: PPUSH
38706: LD_INT 2
38708: PPUSH
38709: CALL_OW 275
38713: PUSH
38714: LD_VAR 0 4
38718: PUSH
38719: LD_INT 2
38721: ARRAY
38722: GREATEREQUAL
38723: AND
38724: PUSH
38725: LD_VAR 0 5
38729: PPUSH
38730: LD_INT 3
38732: PPUSH
38733: CALL_OW 275
38737: PUSH
38738: LD_VAR 0 4
38742: PUSH
38743: LD_INT 3
38745: ARRAY
38746: GREATEREQUAL
38747: AND
38748: ST_TO_ADDR
// end ;
38749: LD_VAR 0 3
38753: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
// pom := GetBase ( building ) ;
38760: LD_ADDR_VAR 0 3
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 274
38774: ST_TO_ADDR
// if not pom then
38775: LD_VAR 0 3
38779: NOT
38780: IFFALSE 38784
// exit ;
38782: GO 38954
// btype := GetBType ( building ) ;
38784: LD_ADDR_VAR 0 5
38788: PUSH
38789: LD_VAR 0 1
38793: PPUSH
38794: CALL_OW 266
38798: ST_TO_ADDR
// if btype = b_armoury then
38799: LD_VAR 0 5
38803: PUSH
38804: LD_INT 4
38806: EQUAL
38807: IFFALSE 38817
// btype := b_barracks ;
38809: LD_ADDR_VAR 0 5
38813: PUSH
38814: LD_INT 5
38816: ST_TO_ADDR
// if btype = b_depot then
38817: LD_VAR 0 5
38821: PUSH
38822: LD_INT 0
38824: EQUAL
38825: IFFALSE 38835
// btype := b_warehouse ;
38827: LD_ADDR_VAR 0 5
38831: PUSH
38832: LD_INT 1
38834: ST_TO_ADDR
// if btype = b_workshop then
38835: LD_VAR 0 5
38839: PUSH
38840: LD_INT 2
38842: EQUAL
38843: IFFALSE 38853
// btype := b_factory ;
38845: LD_ADDR_VAR 0 5
38849: PUSH
38850: LD_INT 3
38852: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38853: LD_ADDR_VAR 0 4
38857: PUSH
38858: LD_VAR 0 5
38862: PPUSH
38863: LD_VAR 0 1
38867: PPUSH
38868: CALL_OW 248
38872: PPUSH
38873: CALL_OW 450
38877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38878: LD_ADDR_VAR 0 2
38882: PUSH
38883: LD_VAR 0 3
38887: PPUSH
38888: LD_INT 1
38890: PPUSH
38891: CALL_OW 275
38895: PUSH
38896: LD_VAR 0 4
38900: PUSH
38901: LD_INT 1
38903: ARRAY
38904: GREATEREQUAL
38905: PUSH
38906: LD_VAR 0 3
38910: PPUSH
38911: LD_INT 2
38913: PPUSH
38914: CALL_OW 275
38918: PUSH
38919: LD_VAR 0 4
38923: PUSH
38924: LD_INT 2
38926: ARRAY
38927: GREATEREQUAL
38928: AND
38929: PUSH
38930: LD_VAR 0 3
38934: PPUSH
38935: LD_INT 3
38937: PPUSH
38938: CALL_OW 275
38942: PUSH
38943: LD_VAR 0 4
38947: PUSH
38948: LD_INT 3
38950: ARRAY
38951: GREATEREQUAL
38952: AND
38953: ST_TO_ADDR
// end ;
38954: LD_VAR 0 2
38958: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38959: LD_INT 0
38961: PPUSH
38962: PPUSH
38963: PPUSH
// pom := GetBase ( building ) ;
38964: LD_ADDR_VAR 0 4
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 274
38978: ST_TO_ADDR
// if not pom then
38979: LD_VAR 0 4
38983: NOT
38984: IFFALSE 38988
// exit ;
38986: GO 39089
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38988: LD_ADDR_VAR 0 5
38992: PUSH
38993: LD_VAR 0 2
38997: PPUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 248
39007: PPUSH
39008: CALL_OW 450
39012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_VAR 0 4
39022: PPUSH
39023: LD_INT 1
39025: PPUSH
39026: CALL_OW 275
39030: PUSH
39031: LD_VAR 0 5
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: GREATEREQUAL
39040: PUSH
39041: LD_VAR 0 4
39045: PPUSH
39046: LD_INT 2
39048: PPUSH
39049: CALL_OW 275
39053: PUSH
39054: LD_VAR 0 5
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: GREATEREQUAL
39063: AND
39064: PUSH
39065: LD_VAR 0 4
39069: PPUSH
39070: LD_INT 3
39072: PPUSH
39073: CALL_OW 275
39077: PUSH
39078: LD_VAR 0 5
39082: PUSH
39083: LD_INT 3
39085: ARRAY
39086: GREATEREQUAL
39087: AND
39088: ST_TO_ADDR
// end ;
39089: LD_VAR 0 3
39093: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
// result := false ;
39107: LD_ADDR_VAR 0 8
39111: PUSH
39112: LD_INT 0
39114: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39115: LD_VAR 0 5
39119: NOT
39120: PUSH
39121: LD_VAR 0 1
39125: NOT
39126: OR
39127: PUSH
39128: LD_VAR 0 2
39132: NOT
39133: OR
39134: PUSH
39135: LD_VAR 0 3
39139: NOT
39140: OR
39141: IFFALSE 39145
// exit ;
39143: GO 39959
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39145: LD_ADDR_VAR 0 14
39149: PUSH
39150: LD_VAR 0 1
39154: PPUSH
39155: LD_VAR 0 2
39159: PPUSH
39160: LD_VAR 0 3
39164: PPUSH
39165: LD_VAR 0 4
39169: PPUSH
39170: LD_VAR 0 5
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: PPUSH
39179: CALL_OW 248
39183: PPUSH
39184: LD_INT 0
39186: PPUSH
39187: CALL 40796 0 6
39191: ST_TO_ADDR
// if not hexes then
39192: LD_VAR 0 14
39196: NOT
39197: IFFALSE 39201
// exit ;
39199: GO 39959
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39201: LD_ADDR_VAR 0 17
39205: PUSH
39206: LD_VAR 0 5
39210: PPUSH
39211: LD_INT 22
39213: PUSH
39214: LD_VAR 0 13
39218: PPUSH
39219: CALL_OW 255
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 30
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 72
39264: ST_TO_ADDR
// for i = 1 to hexes do
39265: LD_ADDR_VAR 0 9
39269: PUSH
39270: DOUBLE
39271: LD_INT 1
39273: DEC
39274: ST_TO_ADDR
39275: LD_VAR 0 14
39279: PUSH
39280: FOR_TO
39281: IFFALSE 39957
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39283: LD_ADDR_VAR 0 13
39287: PUSH
39288: LD_VAR 0 14
39292: PUSH
39293: LD_VAR 0 9
39297: ARRAY
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: PPUSH
39303: LD_VAR 0 14
39307: PUSH
39308: LD_VAR 0 9
39312: ARRAY
39313: PUSH
39314: LD_INT 2
39316: ARRAY
39317: PPUSH
39318: CALL_OW 428
39322: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39323: LD_VAR 0 14
39327: PUSH
39328: LD_VAR 0 9
39332: ARRAY
39333: PUSH
39334: LD_INT 1
39336: ARRAY
39337: PPUSH
39338: LD_VAR 0 14
39342: PUSH
39343: LD_VAR 0 9
39347: ARRAY
39348: PUSH
39349: LD_INT 2
39351: ARRAY
39352: PPUSH
39353: CALL_OW 351
39357: PUSH
39358: LD_VAR 0 14
39362: PUSH
39363: LD_VAR 0 9
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PPUSH
39373: LD_VAR 0 14
39377: PUSH
39378: LD_VAR 0 9
39382: ARRAY
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: CALL_OW 488
39392: NOT
39393: OR
39394: PUSH
39395: LD_VAR 0 13
39399: PPUSH
39400: CALL_OW 247
39404: PUSH
39405: LD_INT 3
39407: EQUAL
39408: OR
39409: IFFALSE 39415
// exit ;
39411: POP
39412: POP
39413: GO 39959
// if not tmp then
39415: LD_VAR 0 13
39419: NOT
39420: IFFALSE 39424
// continue ;
39422: GO 39280
// result := true ;
39424: LD_ADDR_VAR 0 8
39428: PUSH
39429: LD_INT 1
39431: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39432: LD_VAR 0 6
39436: PUSH
39437: LD_VAR 0 13
39441: PPUSH
39442: CALL_OW 247
39446: PUSH
39447: LD_INT 2
39449: EQUAL
39450: AND
39451: PUSH
39452: LD_VAR 0 13
39456: PPUSH
39457: CALL_OW 263
39461: PUSH
39462: LD_INT 1
39464: EQUAL
39465: AND
39466: IFFALSE 39630
// begin if IsDrivenBy ( tmp ) then
39468: LD_VAR 0 13
39472: PPUSH
39473: CALL_OW 311
39477: IFFALSE 39481
// continue ;
39479: GO 39280
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39481: LD_VAR 0 6
39485: PPUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 60
39491: PUSH
39492: EMPTY
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: LD_INT 55
39504: PUSH
39505: EMPTY
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PPUSH
39516: CALL_OW 72
39520: IFFALSE 39628
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39522: LD_ADDR_VAR 0 18
39526: PUSH
39527: LD_VAR 0 6
39531: PPUSH
39532: LD_INT 3
39534: PUSH
39535: LD_INT 60
39537: PUSH
39538: EMPTY
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: LD_INT 55
39550: PUSH
39551: EMPTY
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PPUSH
39562: CALL_OW 72
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: ST_TO_ADDR
// if IsInUnit ( driver ) then
39571: LD_VAR 0 18
39575: PPUSH
39576: CALL_OW 310
39580: IFFALSE 39591
// ComExit ( driver ) ;
39582: LD_VAR 0 18
39586: PPUSH
39587: CALL 63980 0 1
// AddComEnterUnit ( driver , tmp ) ;
39591: LD_VAR 0 18
39595: PPUSH
39596: LD_VAR 0 13
39600: PPUSH
39601: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39605: LD_VAR 0 18
39609: PPUSH
39610: LD_VAR 0 7
39614: PPUSH
39615: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39619: LD_VAR 0 18
39623: PPUSH
39624: CALL_OW 181
// end ; continue ;
39628: GO 39280
// end ; if not cleaners or not tmp in cleaners then
39630: LD_VAR 0 6
39634: NOT
39635: PUSH
39636: LD_VAR 0 13
39640: PUSH
39641: LD_VAR 0 6
39645: IN
39646: NOT
39647: OR
39648: IFFALSE 39955
// begin if dep then
39650: LD_VAR 0 17
39654: IFFALSE 39790
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39656: LD_ADDR_VAR 0 16
39660: PUSH
39661: LD_VAR 0 17
39665: PUSH
39666: LD_INT 1
39668: ARRAY
39669: PPUSH
39670: CALL_OW 250
39674: PPUSH
39675: LD_VAR 0 17
39679: PUSH
39680: LD_INT 1
39682: ARRAY
39683: PPUSH
39684: CALL_OW 254
39688: PPUSH
39689: LD_INT 5
39691: PPUSH
39692: CALL_OW 272
39696: PUSH
39697: LD_VAR 0 17
39701: PUSH
39702: LD_INT 1
39704: ARRAY
39705: PPUSH
39706: CALL_OW 251
39710: PPUSH
39711: LD_VAR 0 17
39715: PUSH
39716: LD_INT 1
39718: ARRAY
39719: PPUSH
39720: CALL_OW 254
39724: PPUSH
39725: LD_INT 5
39727: PPUSH
39728: CALL_OW 273
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39737: LD_VAR 0 16
39741: PUSH
39742: LD_INT 1
39744: ARRAY
39745: PPUSH
39746: LD_VAR 0 16
39750: PUSH
39751: LD_INT 2
39753: ARRAY
39754: PPUSH
39755: CALL_OW 488
39759: IFFALSE 39790
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39761: LD_VAR 0 13
39765: PPUSH
39766: LD_VAR 0 16
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PPUSH
39775: LD_VAR 0 16
39779: PUSH
39780: LD_INT 2
39782: ARRAY
39783: PPUSH
39784: CALL_OW 111
// continue ;
39788: GO 39280
// end ; end ; r := GetDir ( tmp ) ;
39790: LD_ADDR_VAR 0 15
39794: PUSH
39795: LD_VAR 0 13
39799: PPUSH
39800: CALL_OW 254
39804: ST_TO_ADDR
// if r = 5 then
39805: LD_VAR 0 15
39809: PUSH
39810: LD_INT 5
39812: EQUAL
39813: IFFALSE 39823
// r := 0 ;
39815: LD_ADDR_VAR 0 15
39819: PUSH
39820: LD_INT 0
39822: ST_TO_ADDR
// for j = r to 5 do
39823: LD_ADDR_VAR 0 10
39827: PUSH
39828: DOUBLE
39829: LD_VAR 0 15
39833: DEC
39834: ST_TO_ADDR
39835: LD_INT 5
39837: PUSH
39838: FOR_TO
39839: IFFALSE 39953
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39841: LD_ADDR_VAR 0 11
39845: PUSH
39846: LD_VAR 0 13
39850: PPUSH
39851: CALL_OW 250
39855: PPUSH
39856: LD_VAR 0 10
39860: PPUSH
39861: LD_INT 2
39863: PPUSH
39864: CALL_OW 272
39868: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39869: LD_ADDR_VAR 0 12
39873: PUSH
39874: LD_VAR 0 13
39878: PPUSH
39879: CALL_OW 251
39883: PPUSH
39884: LD_VAR 0 10
39888: PPUSH
39889: LD_INT 2
39891: PPUSH
39892: CALL_OW 273
39896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39897: LD_VAR 0 11
39901: PPUSH
39902: LD_VAR 0 12
39906: PPUSH
39907: CALL_OW 488
39911: PUSH
39912: LD_VAR 0 11
39916: PPUSH
39917: LD_VAR 0 12
39921: PPUSH
39922: CALL_OW 428
39926: NOT
39927: AND
39928: IFFALSE 39951
// begin ComMoveXY ( tmp , _x , _y ) ;
39930: LD_VAR 0 13
39934: PPUSH
39935: LD_VAR 0 11
39939: PPUSH
39940: LD_VAR 0 12
39944: PPUSH
39945: CALL_OW 111
// break ;
39949: GO 39953
// end ; end ;
39951: GO 39838
39953: POP
39954: POP
// end ; end ;
39955: GO 39280
39957: POP
39958: POP
// end ;
39959: LD_VAR 0 8
39963: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39964: LD_INT 0
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
// result := false ;
39976: LD_ADDR_VAR 0 6
39980: PUSH
39981: LD_INT 0
39983: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39984: LD_VAR 0 1
39988: NOT
39989: PUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 266
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: IN
40010: NOT
40011: OR
40012: PUSH
40013: LD_VAR 0 2
40017: NOT
40018: OR
40019: PUSH
40020: LD_VAR 0 5
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: LD_INT 4
40039: PUSH
40040: LD_INT 5
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: IN
40051: NOT
40052: OR
40053: PUSH
40054: LD_VAR 0 3
40058: PPUSH
40059: LD_VAR 0 4
40063: PPUSH
40064: CALL_OW 488
40068: NOT
40069: OR
40070: IFFALSE 40074
// exit ;
40072: GO 40791
// pom := GetBase ( depot ) ;
40074: LD_ADDR_VAR 0 10
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: CALL_OW 274
40088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40089: LD_ADDR_VAR 0 11
40093: PUSH
40094: LD_VAR 0 2
40098: PPUSH
40099: LD_VAR 0 1
40103: PPUSH
40104: CALL_OW 248
40108: PPUSH
40109: CALL_OW 450
40113: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40114: LD_VAR 0 10
40118: PPUSH
40119: LD_INT 1
40121: PPUSH
40122: CALL_OW 275
40126: PUSH
40127: LD_VAR 0 11
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: GREATEREQUAL
40136: PUSH
40137: LD_VAR 0 10
40141: PPUSH
40142: LD_INT 2
40144: PPUSH
40145: CALL_OW 275
40149: PUSH
40150: LD_VAR 0 11
40154: PUSH
40155: LD_INT 2
40157: ARRAY
40158: GREATEREQUAL
40159: AND
40160: PUSH
40161: LD_VAR 0 10
40165: PPUSH
40166: LD_INT 3
40168: PPUSH
40169: CALL_OW 275
40173: PUSH
40174: LD_VAR 0 11
40178: PUSH
40179: LD_INT 3
40181: ARRAY
40182: GREATEREQUAL
40183: AND
40184: NOT
40185: IFFALSE 40189
// exit ;
40187: GO 40791
// if GetBType ( depot ) = b_depot then
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 266
40198: PUSH
40199: LD_INT 0
40201: EQUAL
40202: IFFALSE 40214
// dist := 28 else
40204: LD_ADDR_VAR 0 14
40208: PUSH
40209: LD_INT 28
40211: ST_TO_ADDR
40212: GO 40222
// dist := 36 ;
40214: LD_ADDR_VAR 0 14
40218: PUSH
40219: LD_INT 36
40221: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40222: LD_VAR 0 1
40226: PPUSH
40227: LD_VAR 0 3
40231: PPUSH
40232: LD_VAR 0 4
40236: PPUSH
40237: CALL_OW 297
40241: PUSH
40242: LD_VAR 0 14
40246: GREATER
40247: IFFALSE 40251
// exit ;
40249: GO 40791
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40251: LD_ADDR_VAR 0 12
40255: PUSH
40256: LD_VAR 0 2
40260: PPUSH
40261: LD_VAR 0 3
40265: PPUSH
40266: LD_VAR 0 4
40270: PPUSH
40271: LD_VAR 0 5
40275: PPUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 248
40285: PPUSH
40286: LD_INT 0
40288: PPUSH
40289: CALL 40796 0 6
40293: ST_TO_ADDR
// if not hexes then
40294: LD_VAR 0 12
40298: NOT
40299: IFFALSE 40303
// exit ;
40301: GO 40791
// hex := GetHexInfo ( x , y ) ;
40303: LD_ADDR_VAR 0 15
40307: PUSH
40308: LD_VAR 0 3
40312: PPUSH
40313: LD_VAR 0 4
40317: PPUSH
40318: CALL_OW 546
40322: ST_TO_ADDR
// if hex [ 1 ] then
40323: LD_VAR 0 15
40327: PUSH
40328: LD_INT 1
40330: ARRAY
40331: IFFALSE 40335
// exit ;
40333: GO 40791
// height := hex [ 2 ] ;
40335: LD_ADDR_VAR 0 13
40339: PUSH
40340: LD_VAR 0 15
40344: PUSH
40345: LD_INT 2
40347: ARRAY
40348: ST_TO_ADDR
// for i = 1 to hexes do
40349: LD_ADDR_VAR 0 7
40353: PUSH
40354: DOUBLE
40355: LD_INT 1
40357: DEC
40358: ST_TO_ADDR
40359: LD_VAR 0 12
40363: PUSH
40364: FOR_TO
40365: IFFALSE 40695
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40367: LD_VAR 0 12
40371: PUSH
40372: LD_VAR 0 7
40376: ARRAY
40377: PUSH
40378: LD_INT 1
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 12
40386: PUSH
40387: LD_VAR 0 7
40391: ARRAY
40392: PUSH
40393: LD_INT 2
40395: ARRAY
40396: PPUSH
40397: CALL_OW 488
40401: NOT
40402: PUSH
40403: LD_VAR 0 12
40407: PUSH
40408: LD_VAR 0 7
40412: ARRAY
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: PPUSH
40418: LD_VAR 0 12
40422: PUSH
40423: LD_VAR 0 7
40427: ARRAY
40428: PUSH
40429: LD_INT 2
40431: ARRAY
40432: PPUSH
40433: CALL_OW 428
40437: PUSH
40438: LD_INT 0
40440: GREATER
40441: OR
40442: PUSH
40443: LD_VAR 0 12
40447: PUSH
40448: LD_VAR 0 7
40452: ARRAY
40453: PUSH
40454: LD_INT 1
40456: ARRAY
40457: PPUSH
40458: LD_VAR 0 12
40462: PUSH
40463: LD_VAR 0 7
40467: ARRAY
40468: PUSH
40469: LD_INT 2
40471: ARRAY
40472: PPUSH
40473: CALL_OW 351
40477: OR
40478: IFFALSE 40484
// exit ;
40480: POP
40481: POP
40482: GO 40791
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40484: LD_ADDR_VAR 0 8
40488: PUSH
40489: LD_VAR 0 12
40493: PUSH
40494: LD_VAR 0 7
40498: ARRAY
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PPUSH
40504: LD_VAR 0 12
40508: PUSH
40509: LD_VAR 0 7
40513: ARRAY
40514: PUSH
40515: LD_INT 2
40517: ARRAY
40518: PPUSH
40519: CALL_OW 546
40523: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40524: LD_VAR 0 8
40528: PUSH
40529: LD_INT 1
40531: ARRAY
40532: PUSH
40533: LD_VAR 0 8
40537: PUSH
40538: LD_INT 2
40540: ARRAY
40541: PUSH
40542: LD_VAR 0 13
40546: PUSH
40547: LD_INT 2
40549: PLUS
40550: GREATER
40551: OR
40552: PUSH
40553: LD_VAR 0 8
40557: PUSH
40558: LD_INT 2
40560: ARRAY
40561: PUSH
40562: LD_VAR 0 13
40566: PUSH
40567: LD_INT 2
40569: MINUS
40570: LESS
40571: OR
40572: PUSH
40573: LD_VAR 0 8
40577: PUSH
40578: LD_INT 3
40580: ARRAY
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 8
40587: PUSH
40588: LD_INT 9
40590: PUSH
40591: LD_INT 10
40593: PUSH
40594: LD_INT 11
40596: PUSH
40597: LD_INT 12
40599: PUSH
40600: LD_INT 13
40602: PUSH
40603: LD_INT 16
40605: PUSH
40606: LD_INT 17
40608: PUSH
40609: LD_INT 18
40611: PUSH
40612: LD_INT 19
40614: PUSH
40615: LD_INT 20
40617: PUSH
40618: LD_INT 21
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: IN
40636: NOT
40637: OR
40638: PUSH
40639: LD_VAR 0 8
40643: PUSH
40644: LD_INT 5
40646: ARRAY
40647: NOT
40648: OR
40649: PUSH
40650: LD_VAR 0 8
40654: PUSH
40655: LD_INT 6
40657: ARRAY
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 7
40667: PUSH
40668: LD_INT 9
40670: PUSH
40671: LD_INT 10
40673: PUSH
40674: LD_INT 11
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: IN
40685: NOT
40686: OR
40687: IFFALSE 40693
// exit ;
40689: POP
40690: POP
40691: GO 40791
// end ;
40693: GO 40364
40695: POP
40696: POP
// side := GetSide ( depot ) ;
40697: LD_ADDR_VAR 0 9
40701: PUSH
40702: LD_VAR 0 1
40706: PPUSH
40707: CALL_OW 255
40711: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40712: LD_VAR 0 9
40716: PPUSH
40717: LD_VAR 0 3
40721: PPUSH
40722: LD_VAR 0 4
40726: PPUSH
40727: LD_INT 20
40729: PPUSH
40730: CALL 33112 0 4
40734: PUSH
40735: LD_INT 4
40737: ARRAY
40738: IFFALSE 40742
// exit ;
40740: GO 40791
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40742: LD_VAR 0 2
40746: PUSH
40747: LD_INT 29
40749: PUSH
40750: LD_INT 30
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: IN
40757: PUSH
40758: LD_VAR 0 3
40762: PPUSH
40763: LD_VAR 0 4
40767: PPUSH
40768: LD_VAR 0 9
40772: PPUSH
40773: CALL_OW 440
40777: NOT
40778: AND
40779: IFFALSE 40783
// exit ;
40781: GO 40791
// result := true ;
40783: LD_ADDR_VAR 0 6
40787: PUSH
40788: LD_INT 1
40790: ST_TO_ADDR
// end ;
40791: LD_VAR 0 6
40795: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40796: LD_INT 0
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
// result = [ ] ;
40856: LD_ADDR_VAR 0 7
40860: PUSH
40861: EMPTY
40862: ST_TO_ADDR
// temp_list = [ ] ;
40863: LD_ADDR_VAR 0 9
40867: PUSH
40868: EMPTY
40869: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40870: LD_VAR 0 4
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: LD_INT 4
40889: PUSH
40890: LD_INT 5
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: IN
40901: NOT
40902: PUSH
40903: LD_VAR 0 1
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: IN
40918: PUSH
40919: LD_VAR 0 5
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: LD_INT 3
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: IN
40938: NOT
40939: AND
40940: OR
40941: IFFALSE 40945
// exit ;
40943: GO 59336
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40945: LD_VAR 0 1
40949: PUSH
40950: LD_INT 6
40952: PUSH
40953: LD_INT 7
40955: PUSH
40956: LD_INT 8
40958: PUSH
40959: LD_INT 13
40961: PUSH
40962: LD_INT 12
40964: PUSH
40965: LD_INT 15
40967: PUSH
40968: LD_INT 11
40970: PUSH
40971: LD_INT 14
40973: PUSH
40974: LD_INT 10
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: IN
40988: IFFALSE 40998
// btype = b_lab ;
40990: LD_ADDR_VAR 0 1
40994: PUSH
40995: LD_INT 6
40997: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40998: LD_VAR 0 6
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: IN
41017: NOT
41018: PUSH
41019: LD_VAR 0 1
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: LD_INT 6
41038: PUSH
41039: LD_INT 36
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: LD_INT 5
41047: PUSH
41048: LD_INT 31
41050: PUSH
41051: LD_INT 32
41053: PUSH
41054: LD_INT 33
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: IN
41070: NOT
41071: PUSH
41072: LD_VAR 0 6
41076: PUSH
41077: LD_INT 1
41079: EQUAL
41080: AND
41081: OR
41082: PUSH
41083: LD_VAR 0 1
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: IN
41098: NOT
41099: PUSH
41100: LD_VAR 0 6
41104: PUSH
41105: LD_INT 2
41107: EQUAL
41108: AND
41109: OR
41110: IFFALSE 41120
// mode = 0 ;
41112: LD_ADDR_VAR 0 6
41116: PUSH
41117: LD_INT 0
41119: ST_TO_ADDR
// case mode of 0 :
41120: LD_VAR 0 6
41124: PUSH
41125: LD_INT 0
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41133
41131: GO 52586
41133: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41134: LD_ADDR_VAR 0 11
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 3
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41327: LD_ADDR_VAR 0 12
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41523: LD_ADDR_VAR 0 13
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: LD_INT 3
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 3
41682: NEG
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41722: LD_ADDR_VAR 0 14
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 3
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41918: LD_ADDR_VAR 0 15
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42111: LD_ADDR_VAR 0 16
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: LD_INT 3
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42304: LD_ADDR_VAR 0 17
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42534: LD_ADDR_VAR 0 18
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42764: LD_ADDR_VAR 0 19
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42994: LD_ADDR_VAR 0 20
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43224: LD_ADDR_VAR 0 21
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43454: LD_ADDR_VAR 0 22
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43684: LD_ADDR_VAR 0 23
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: LD_INT 3
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 3
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43964: LD_ADDR_VAR 0 24
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44240: LD_ADDR_VAR 0 25
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 3
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44514: LD_ADDR_VAR 0 26
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 3
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44790: LD_ADDR_VAR 0 27
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 3
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45070: LD_ADDR_VAR 0 28
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 3
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 3
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45352: LD_ADDR_VAR 0 29
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45631: LD_ADDR_VAR 0 30
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45909: LD_ADDR_VAR 0 31
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46187: LD_ADDR_VAR 0 32
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46465: LD_ADDR_VAR 0 33
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46744: LD_ADDR_VAR 0 34
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47024: LD_ADDR_VAR 0 35
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47136: LD_ADDR_VAR 0 36
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47248: LD_ADDR_VAR 0 37
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47360: LD_ADDR_VAR 0 38
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47472: LD_ADDR_VAR 0 39
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47584: LD_ADDR_VAR 0 40
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47696: LD_ADDR_VAR 0 41
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48046: LD_ADDR_VAR 0 42
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 3
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 3
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: LD_INT 3
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 3
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: NEG
48356: PUSH
48357: LD_INT 3
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48396: LD_ADDR_VAR 0 43
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 3
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: NEG
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 3
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48744: LD_ADDR_VAR 0 44
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 3
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: NEG
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49094: LD_ADDR_VAR 0 45
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 3
49391: NEG
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49444: LD_ADDR_VAR 0 46
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49792: LD_ADDR_VAR 0 47
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49943: LD_ADDR_VAR 0 48
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50090: LD_ADDR_VAR 0 49
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50234: LD_ADDR_VAR 0 50
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50378: LD_ADDR_VAR 0 51
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50525: LD_ADDR_VAR 0 52
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50676: LD_ADDR_VAR 0 53
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50906: LD_ADDR_VAR 0 54
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51136: LD_ADDR_VAR 0 55
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51366: LD_ADDR_VAR 0 56
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51596: LD_ADDR_VAR 0 57
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51826: LD_ADDR_VAR 0 58
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52056: LD_ADDR_VAR 0 59
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52144: LD_ADDR_VAR 0 60
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52232: LD_ADDR_VAR 0 61
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52320: LD_ADDR_VAR 0 62
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52408: LD_ADDR_VAR 0 63
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52496: LD_ADDR_VAR 0 64
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// end ; 1 :
52584: GO 58481
52586: LD_INT 1
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52594
52592: GO 55217
52594: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52595: LD_ADDR_VAR 0 11
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 3
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52639: LD_ADDR_VAR 0 12
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52680: LD_ADDR_VAR 0 13
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52720: LD_ADDR_VAR 0 14
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52761: LD_ADDR_VAR 0 15
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52805: LD_ADDR_VAR 0 16
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52851: LD_ADDR_VAR 0 17
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52895: LD_ADDR_VAR 0 18
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52936: LD_ADDR_VAR 0 19
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52976: LD_ADDR_VAR 0 20
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53017: LD_ADDR_VAR 0 21
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 3
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53061: LD_ADDR_VAR 0 22
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: NEG
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53107: LD_ADDR_VAR 0 23
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 3
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 4
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53151: LD_ADDR_VAR 0 24
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53192: LD_ADDR_VAR 0 25
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 4
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 4
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53232: LD_ADDR_VAR 0 26
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 4
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53273: LD_ADDR_VAR 0 27
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53317: LD_ADDR_VAR 0 28
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: LD_INT 4
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 4
53348: NEG
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53363: LD_ADDR_VAR 0 29
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 4
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 5
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 5
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 4
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 6
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 6
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 5
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53518: LD_ADDR_VAR 0 30
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 4
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 4
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 4
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 5
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 5
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 6
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 6
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53661: LD_ADDR_VAR 0 31
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 4
53708: PUSH
53709: LD_INT 4
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 4
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 5
53728: PUSH
53729: LD_INT 4
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 5
53738: PUSH
53739: LD_INT 5
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 4
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 6
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 6
53768: PUSH
53769: LD_INT 6
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 5
53778: PUSH
53779: LD_INT 6
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53800: LD_ADDR_VAR 0 32
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 4
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 4
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 5
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 5
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 4
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 6
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 6
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 5
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53943: LD_ADDR_VAR 0 33
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: NEG
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 4
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 4
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 5
54029: NEG
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 5
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 5
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 6
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 6
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54098: LD_ADDR_VAR 0 34
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 3
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: LD_INT 4
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 4
54153: NEG
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 4
54165: NEG
54166: PUSH
54167: LD_INT 4
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 4
54177: NEG
54178: PUSH
54179: LD_INT 5
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 5
54189: NEG
54190: PUSH
54191: LD_INT 4
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 5
54201: NEG
54202: PUSH
54203: LD_INT 5
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 5
54213: NEG
54214: PUSH
54215: LD_INT 6
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 6
54225: NEG
54226: PUSH
54227: LD_INT 5
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 6
54237: NEG
54238: PUSH
54239: LD_INT 6
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54261: LD_ADDR_VAR 0 41
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54305: LD_ADDR_VAR 0 42
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54346: LD_ADDR_VAR 0 43
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54386: LD_ADDR_VAR 0 44
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54427: LD_ADDR_VAR 0 45
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54471: LD_ADDR_VAR 0 46
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 3
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54517: LD_ADDR_VAR 0 47
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54550: LD_ADDR_VAR 0 48
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54581: LD_ADDR_VAR 0 49
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54610: LD_ADDR_VAR 0 50
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54639: LD_ADDR_VAR 0 51
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54670: LD_ADDR_VAR 0 52
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54703: LD_ADDR_VAR 0 53
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 3
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54747: LD_ADDR_VAR 0 54
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54788: LD_ADDR_VAR 0 55
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54828: LD_ADDR_VAR 0 56
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54869: LD_ADDR_VAR 0 57
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54913: LD_ADDR_VAR 0 58
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54959: LD_ADDR_VAR 0 59
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55003: LD_ADDR_VAR 0 60
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55044: LD_ADDR_VAR 0 61
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55084: LD_ADDR_VAR 0 62
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55125: LD_ADDR_VAR 0 63
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55169: LD_ADDR_VAR 0 64
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: LIST
55214: ST_TO_ADDR
// end ; 2 :
55215: GO 58481
55217: LD_INT 2
55219: DOUBLE
55220: EQUAL
55221: IFTRUE 55225
55223: GO 58480
55225: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55226: LD_ADDR_VAR 0 29
55230: PUSH
55231: LD_INT 4
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 4
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 5
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 5
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 4
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 5
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 4
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: LD_INT 4
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 4
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 4
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 5
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 5
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 4
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 5
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: LD_INT 4
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 4
55623: NEG
55624: PUSH
55625: LD_INT 5
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 4
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 5
55671: NEG
55672: PUSH
55673: LD_INT 4
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 5
55683: NEG
55684: PUSH
55685: LD_INT 5
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: LD_INT 5
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 5
55707: NEG
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55764: LD_ADDR_VAR 0 30
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: LD_INT 4
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 5
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 4
55811: PUSH
55812: LD_INT 5
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: LD_INT 4
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 5
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: LD_INT 5
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: LD_INT 4
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 4
55954: NEG
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 5
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 3
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 3
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 4
56128: NEG
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 4
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: NEG
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 4
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 5
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 5
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 5
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56311: LD_ADDR_VAR 0 31
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 4
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 5
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 5
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 5
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 4
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 4
56513: NEG
56514: PUSH
56515: LD_INT 4
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 4
56525: NEG
56526: PUSH
56527: LD_INT 5
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 4
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 4
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 5
56573: NEG
56574: PUSH
56575: LD_INT 4
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 5
56585: NEG
56586: PUSH
56587: LD_INT 5
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 5
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 5
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 4
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 5
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 5
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 4
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56861: LD_ADDR_VAR 0 32
56865: PUSH
56866: LD_INT 4
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 4
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 5
56924: NEG
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 5
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 5
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 4
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 4
57030: NEG
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 4
57042: NEG
57043: PUSH
57044: LD_INT 4
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 4
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 4
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 5
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 4
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 4
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 5
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 5
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 4
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 4
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: LD_INT 5
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 4
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 5
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 5
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57408: LD_ADDR_VAR 0 33
57412: PUSH
57413: LD_INT 4
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: LD_INT 5
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 4
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 4
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 5
57475: NEG
57476: PUSH
57477: LD_INT 4
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 5
57487: NEG
57488: PUSH
57489: LD_INT 5
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: LD_INT 5
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 5
57511: NEG
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 3
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 4
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 4
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 5
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 5
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 5
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 4
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 4
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 4
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 5
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 5
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57946: LD_ADDR_VAR 0 34
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 4
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 5
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 5
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 5
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 4
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 4
58148: PUSH
58149: LD_INT 4
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 4
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 5
58178: PUSH
58179: LD_INT 5
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: LD_INT 5
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: LD_INT 4
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 5
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 5
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 4
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 4
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 5
58387: NEG
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 5
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: ST_TO_ADDR
// end ; end ;
58478: GO 58481
58480: POP
// case btype of b_depot , b_warehouse :
58481: LD_VAR 0 1
58485: PUSH
58486: LD_INT 0
58488: DOUBLE
58489: EQUAL
58490: IFTRUE 58500
58492: LD_INT 1
58494: DOUBLE
58495: EQUAL
58496: IFTRUE 58500
58498: GO 58701
58500: POP
// case nation of nation_american :
58501: LD_VAR 0 5
58505: PUSH
58506: LD_INT 1
58508: DOUBLE
58509: EQUAL
58510: IFTRUE 58514
58512: GO 58570
58514: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58515: LD_ADDR_VAR 0 9
58519: PUSH
58520: LD_VAR 0 11
58524: PUSH
58525: LD_VAR 0 12
58529: PUSH
58530: LD_VAR 0 13
58534: PUSH
58535: LD_VAR 0 14
58539: PUSH
58540: LD_VAR 0 15
58544: PUSH
58545: LD_VAR 0 16
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: PUSH
58558: LD_VAR 0 4
58562: PUSH
58563: LD_INT 1
58565: PLUS
58566: ARRAY
58567: ST_TO_ADDR
58568: GO 58699
58570: LD_INT 2
58572: DOUBLE
58573: EQUAL
58574: IFTRUE 58578
58576: GO 58634
58578: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58579: LD_ADDR_VAR 0 9
58583: PUSH
58584: LD_VAR 0 17
58588: PUSH
58589: LD_VAR 0 18
58593: PUSH
58594: LD_VAR 0 19
58598: PUSH
58599: LD_VAR 0 20
58603: PUSH
58604: LD_VAR 0 21
58608: PUSH
58609: LD_VAR 0 22
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: PUSH
58622: LD_VAR 0 4
58626: PUSH
58627: LD_INT 1
58629: PLUS
58630: ARRAY
58631: ST_TO_ADDR
58632: GO 58699
58634: LD_INT 3
58636: DOUBLE
58637: EQUAL
58638: IFTRUE 58642
58640: GO 58698
58642: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58643: LD_ADDR_VAR 0 9
58647: PUSH
58648: LD_VAR 0 23
58652: PUSH
58653: LD_VAR 0 24
58657: PUSH
58658: LD_VAR 0 25
58662: PUSH
58663: LD_VAR 0 26
58667: PUSH
58668: LD_VAR 0 27
58672: PUSH
58673: LD_VAR 0 28
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: PUSH
58686: LD_VAR 0 4
58690: PUSH
58691: LD_INT 1
58693: PLUS
58694: ARRAY
58695: ST_TO_ADDR
58696: GO 58699
58698: POP
58699: GO 59254
58701: LD_INT 2
58703: DOUBLE
58704: EQUAL
58705: IFTRUE 58715
58707: LD_INT 3
58709: DOUBLE
58710: EQUAL
58711: IFTRUE 58715
58713: GO 58771
58715: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58716: LD_ADDR_VAR 0 9
58720: PUSH
58721: LD_VAR 0 29
58725: PUSH
58726: LD_VAR 0 30
58730: PUSH
58731: LD_VAR 0 31
58735: PUSH
58736: LD_VAR 0 32
58740: PUSH
58741: LD_VAR 0 33
58745: PUSH
58746: LD_VAR 0 34
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: PUSH
58759: LD_VAR 0 4
58763: PUSH
58764: LD_INT 1
58766: PLUS
58767: ARRAY
58768: ST_TO_ADDR
58769: GO 59254
58771: LD_INT 16
58773: DOUBLE
58774: EQUAL
58775: IFTRUE 58833
58777: LD_INT 17
58779: DOUBLE
58780: EQUAL
58781: IFTRUE 58833
58783: LD_INT 18
58785: DOUBLE
58786: EQUAL
58787: IFTRUE 58833
58789: LD_INT 19
58791: DOUBLE
58792: EQUAL
58793: IFTRUE 58833
58795: LD_INT 22
58797: DOUBLE
58798: EQUAL
58799: IFTRUE 58833
58801: LD_INT 20
58803: DOUBLE
58804: EQUAL
58805: IFTRUE 58833
58807: LD_INT 21
58809: DOUBLE
58810: EQUAL
58811: IFTRUE 58833
58813: LD_INT 23
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58833
58819: LD_INT 24
58821: DOUBLE
58822: EQUAL
58823: IFTRUE 58833
58825: LD_INT 25
58827: DOUBLE
58828: EQUAL
58829: IFTRUE 58833
58831: GO 58889
58833: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58834: LD_ADDR_VAR 0 9
58838: PUSH
58839: LD_VAR 0 35
58843: PUSH
58844: LD_VAR 0 36
58848: PUSH
58849: LD_VAR 0 37
58853: PUSH
58854: LD_VAR 0 38
58858: PUSH
58859: LD_VAR 0 39
58863: PUSH
58864: LD_VAR 0 40
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 4
58881: PUSH
58882: LD_INT 1
58884: PLUS
58885: ARRAY
58886: ST_TO_ADDR
58887: GO 59254
58889: LD_INT 6
58891: DOUBLE
58892: EQUAL
58893: IFTRUE 58945
58895: LD_INT 7
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58945
58901: LD_INT 8
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58945
58907: LD_INT 13
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58945
58913: LD_INT 12
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58945
58919: LD_INT 15
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58945
58925: LD_INT 11
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58945
58931: LD_INT 14
58933: DOUBLE
58934: EQUAL
58935: IFTRUE 58945
58937: LD_INT 10
58939: DOUBLE
58940: EQUAL
58941: IFTRUE 58945
58943: GO 59001
58945: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58946: LD_ADDR_VAR 0 9
58950: PUSH
58951: LD_VAR 0 41
58955: PUSH
58956: LD_VAR 0 42
58960: PUSH
58961: LD_VAR 0 43
58965: PUSH
58966: LD_VAR 0 44
58970: PUSH
58971: LD_VAR 0 45
58975: PUSH
58976: LD_VAR 0 46
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: PUSH
58989: LD_VAR 0 4
58993: PUSH
58994: LD_INT 1
58996: PLUS
58997: ARRAY
58998: ST_TO_ADDR
58999: GO 59254
59001: LD_INT 36
59003: DOUBLE
59004: EQUAL
59005: IFTRUE 59009
59007: GO 59065
59009: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59010: LD_ADDR_VAR 0 9
59014: PUSH
59015: LD_VAR 0 47
59019: PUSH
59020: LD_VAR 0 48
59024: PUSH
59025: LD_VAR 0 49
59029: PUSH
59030: LD_VAR 0 50
59034: PUSH
59035: LD_VAR 0 51
59039: PUSH
59040: LD_VAR 0 52
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: PUSH
59053: LD_VAR 0 4
59057: PUSH
59058: LD_INT 1
59060: PLUS
59061: ARRAY
59062: ST_TO_ADDR
59063: GO 59254
59065: LD_INT 4
59067: DOUBLE
59068: EQUAL
59069: IFTRUE 59091
59071: LD_INT 5
59073: DOUBLE
59074: EQUAL
59075: IFTRUE 59091
59077: LD_INT 34
59079: DOUBLE
59080: EQUAL
59081: IFTRUE 59091
59083: LD_INT 37
59085: DOUBLE
59086: EQUAL
59087: IFTRUE 59091
59089: GO 59147
59091: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59092: LD_ADDR_VAR 0 9
59096: PUSH
59097: LD_VAR 0 53
59101: PUSH
59102: LD_VAR 0 54
59106: PUSH
59107: LD_VAR 0 55
59111: PUSH
59112: LD_VAR 0 56
59116: PUSH
59117: LD_VAR 0 57
59121: PUSH
59122: LD_VAR 0 58
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: PUSH
59135: LD_VAR 0 4
59139: PUSH
59140: LD_INT 1
59142: PLUS
59143: ARRAY
59144: ST_TO_ADDR
59145: GO 59254
59147: LD_INT 31
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59197
59153: LD_INT 32
59155: DOUBLE
59156: EQUAL
59157: IFTRUE 59197
59159: LD_INT 33
59161: DOUBLE
59162: EQUAL
59163: IFTRUE 59197
59165: LD_INT 27
59167: DOUBLE
59168: EQUAL
59169: IFTRUE 59197
59171: LD_INT 26
59173: DOUBLE
59174: EQUAL
59175: IFTRUE 59197
59177: LD_INT 28
59179: DOUBLE
59180: EQUAL
59181: IFTRUE 59197
59183: LD_INT 29
59185: DOUBLE
59186: EQUAL
59187: IFTRUE 59197
59189: LD_INT 30
59191: DOUBLE
59192: EQUAL
59193: IFTRUE 59197
59195: GO 59253
59197: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59198: LD_ADDR_VAR 0 9
59202: PUSH
59203: LD_VAR 0 59
59207: PUSH
59208: LD_VAR 0 60
59212: PUSH
59213: LD_VAR 0 61
59217: PUSH
59218: LD_VAR 0 62
59222: PUSH
59223: LD_VAR 0 63
59227: PUSH
59228: LD_VAR 0 64
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: PUSH
59241: LD_VAR 0 4
59245: PUSH
59246: LD_INT 1
59248: PLUS
59249: ARRAY
59250: ST_TO_ADDR
59251: GO 59254
59253: POP
// temp_list2 = [ ] ;
59254: LD_ADDR_VAR 0 10
59258: PUSH
59259: EMPTY
59260: ST_TO_ADDR
// for i in temp_list do
59261: LD_ADDR_VAR 0 8
59265: PUSH
59266: LD_VAR 0 9
59270: PUSH
59271: FOR_IN
59272: IFFALSE 59324
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59274: LD_ADDR_VAR 0 10
59278: PUSH
59279: LD_VAR 0 10
59283: PUSH
59284: LD_VAR 0 8
59288: PUSH
59289: LD_INT 1
59291: ARRAY
59292: PUSH
59293: LD_VAR 0 2
59297: PLUS
59298: PUSH
59299: LD_VAR 0 8
59303: PUSH
59304: LD_INT 2
59306: ARRAY
59307: PUSH
59308: LD_VAR 0 3
59312: PLUS
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: ADD
59321: ST_TO_ADDR
59322: GO 59271
59324: POP
59325: POP
// result = temp_list2 ;
59326: LD_ADDR_VAR 0 7
59330: PUSH
59331: LD_VAR 0 10
59335: ST_TO_ADDR
// end ;
59336: LD_VAR 0 7
59340: RET
// export function EnemyInRange ( unit , dist ) ; begin
59341: LD_INT 0
59343: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59344: LD_ADDR_VAR 0 3
59348: PUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 255
59358: PPUSH
59359: LD_VAR 0 1
59363: PPUSH
59364: CALL_OW 250
59368: PPUSH
59369: LD_VAR 0 1
59373: PPUSH
59374: CALL_OW 251
59378: PPUSH
59379: LD_VAR 0 2
59383: PPUSH
59384: CALL 33112 0 4
59388: PUSH
59389: LD_INT 4
59391: ARRAY
59392: ST_TO_ADDR
// end ;
59393: LD_VAR 0 3
59397: RET
// export function PlayerSeeMe ( unit ) ; begin
59398: LD_INT 0
59400: PPUSH
// result := See ( your_side , unit ) ;
59401: LD_ADDR_VAR 0 2
59405: PUSH
59406: LD_OWVAR 2
59410: PPUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: CALL_OW 292
59420: ST_TO_ADDR
// end ;
59421: LD_VAR 0 2
59425: RET
// export function ReverseDir ( unit ) ; begin
59426: LD_INT 0
59428: PPUSH
// if not unit then
59429: LD_VAR 0 1
59433: NOT
59434: IFFALSE 59438
// exit ;
59436: GO 59461
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59438: LD_ADDR_VAR 0 2
59442: PUSH
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 254
59452: PUSH
59453: LD_INT 3
59455: PLUS
59456: PUSH
59457: LD_INT 6
59459: MOD
59460: ST_TO_ADDR
// end ;
59461: LD_VAR 0 2
59465: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59466: LD_INT 0
59468: PPUSH
59469: PPUSH
59470: PPUSH
59471: PPUSH
59472: PPUSH
// if not hexes then
59473: LD_VAR 0 2
59477: NOT
59478: IFFALSE 59482
// exit ;
59480: GO 59630
// dist := 9999 ;
59482: LD_ADDR_VAR 0 5
59486: PUSH
59487: LD_INT 9999
59489: ST_TO_ADDR
// for i = 1 to hexes do
59490: LD_ADDR_VAR 0 4
59494: PUSH
59495: DOUBLE
59496: LD_INT 1
59498: DEC
59499: ST_TO_ADDR
59500: LD_VAR 0 2
59504: PUSH
59505: FOR_TO
59506: IFFALSE 59618
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59508: LD_VAR 0 1
59512: PPUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_VAR 0 4
59522: ARRAY
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PPUSH
59528: LD_VAR 0 2
59532: PUSH
59533: LD_VAR 0 4
59537: ARRAY
59538: PUSH
59539: LD_INT 2
59541: ARRAY
59542: PPUSH
59543: CALL_OW 297
59547: PUSH
59548: LD_VAR 0 5
59552: LESS
59553: IFFALSE 59616
// begin hex := hexes [ i ] ;
59555: LD_ADDR_VAR 0 7
59559: PUSH
59560: LD_VAR 0 2
59564: PUSH
59565: LD_VAR 0 4
59569: ARRAY
59570: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59571: LD_ADDR_VAR 0 5
59575: PUSH
59576: LD_VAR 0 1
59580: PPUSH
59581: LD_VAR 0 2
59585: PUSH
59586: LD_VAR 0 4
59590: ARRAY
59591: PUSH
59592: LD_INT 1
59594: ARRAY
59595: PPUSH
59596: LD_VAR 0 2
59600: PUSH
59601: LD_VAR 0 4
59605: ARRAY
59606: PUSH
59607: LD_INT 2
59609: ARRAY
59610: PPUSH
59611: CALL_OW 297
59615: ST_TO_ADDR
// end ; end ;
59616: GO 59505
59618: POP
59619: POP
// result := hex ;
59620: LD_ADDR_VAR 0 3
59624: PUSH
59625: LD_VAR 0 7
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 3
59634: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59635: LD_INT 0
59637: PPUSH
59638: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59639: LD_VAR 0 1
59643: NOT
59644: PUSH
59645: LD_VAR 0 1
59649: PUSH
59650: LD_INT 21
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 23
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PPUSH
59674: CALL_OW 69
59678: IN
59679: NOT
59680: OR
59681: IFFALSE 59685
// exit ;
59683: GO 59732
// for i = 1 to 3 do
59685: LD_ADDR_VAR 0 3
59689: PUSH
59690: DOUBLE
59691: LD_INT 1
59693: DEC
59694: ST_TO_ADDR
59695: LD_INT 3
59697: PUSH
59698: FOR_TO
59699: IFFALSE 59730
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 250
59710: PPUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 251
59720: PPUSH
59721: LD_INT 1
59723: PPUSH
59724: CALL_OW 453
59728: GO 59698
59730: POP
59731: POP
// end ;
59732: LD_VAR 0 2
59736: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59737: LD_INT 0
59739: PPUSH
59740: PPUSH
59741: PPUSH
59742: PPUSH
59743: PPUSH
59744: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59745: LD_VAR 0 1
59749: NOT
59750: PUSH
59751: LD_VAR 0 2
59755: NOT
59756: OR
59757: PUSH
59758: LD_VAR 0 1
59762: PPUSH
59763: CALL_OW 314
59767: OR
59768: IFFALSE 59772
// exit ;
59770: GO 60213
// x := GetX ( enemy_unit ) ;
59772: LD_ADDR_VAR 0 7
59776: PUSH
59777: LD_VAR 0 2
59781: PPUSH
59782: CALL_OW 250
59786: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59787: LD_ADDR_VAR 0 8
59791: PUSH
59792: LD_VAR 0 2
59796: PPUSH
59797: CALL_OW 251
59801: ST_TO_ADDR
// if not x or not y then
59802: LD_VAR 0 7
59806: NOT
59807: PUSH
59808: LD_VAR 0 8
59812: NOT
59813: OR
59814: IFFALSE 59818
// exit ;
59816: GO 60213
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59818: LD_ADDR_VAR 0 6
59822: PUSH
59823: LD_VAR 0 7
59827: PPUSH
59828: LD_INT 0
59830: PPUSH
59831: LD_INT 4
59833: PPUSH
59834: CALL_OW 272
59838: PUSH
59839: LD_VAR 0 8
59843: PPUSH
59844: LD_INT 0
59846: PPUSH
59847: LD_INT 4
59849: PPUSH
59850: CALL_OW 273
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_VAR 0 7
59863: PPUSH
59864: LD_INT 1
59866: PPUSH
59867: LD_INT 4
59869: PPUSH
59870: CALL_OW 272
59874: PUSH
59875: LD_VAR 0 8
59879: PPUSH
59880: LD_INT 1
59882: PPUSH
59883: LD_INT 4
59885: PPUSH
59886: CALL_OW 273
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_VAR 0 7
59899: PPUSH
59900: LD_INT 2
59902: PPUSH
59903: LD_INT 4
59905: PPUSH
59906: CALL_OW 272
59910: PUSH
59911: LD_VAR 0 8
59915: PPUSH
59916: LD_INT 2
59918: PPUSH
59919: LD_INT 4
59921: PPUSH
59922: CALL_OW 273
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_VAR 0 7
59935: PPUSH
59936: LD_INT 3
59938: PPUSH
59939: LD_INT 4
59941: PPUSH
59942: CALL_OW 272
59946: PUSH
59947: LD_VAR 0 8
59951: PPUSH
59952: LD_INT 3
59954: PPUSH
59955: LD_INT 4
59957: PPUSH
59958: CALL_OW 273
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_VAR 0 7
59971: PPUSH
59972: LD_INT 4
59974: PPUSH
59975: LD_INT 4
59977: PPUSH
59978: CALL_OW 272
59982: PUSH
59983: LD_VAR 0 8
59987: PPUSH
59988: LD_INT 4
59990: PPUSH
59991: LD_INT 4
59993: PPUSH
59994: CALL_OW 273
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_VAR 0 7
60007: PPUSH
60008: LD_INT 5
60010: PPUSH
60011: LD_INT 4
60013: PPUSH
60014: CALL_OW 272
60018: PUSH
60019: LD_VAR 0 8
60023: PPUSH
60024: LD_INT 5
60026: PPUSH
60027: LD_INT 4
60029: PPUSH
60030: CALL_OW 273
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// for i = tmp downto 1 do
60047: LD_ADDR_VAR 0 4
60051: PUSH
60052: DOUBLE
60053: LD_VAR 0 6
60057: INC
60058: ST_TO_ADDR
60059: LD_INT 1
60061: PUSH
60062: FOR_DOWNTO
60063: IFFALSE 60164
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60065: LD_VAR 0 6
60069: PUSH
60070: LD_VAR 0 4
60074: ARRAY
60075: PUSH
60076: LD_INT 1
60078: ARRAY
60079: PPUSH
60080: LD_VAR 0 6
60084: PUSH
60085: LD_VAR 0 4
60089: ARRAY
60090: PUSH
60091: LD_INT 2
60093: ARRAY
60094: PPUSH
60095: CALL_OW 488
60099: NOT
60100: PUSH
60101: LD_VAR 0 6
60105: PUSH
60106: LD_VAR 0 4
60110: ARRAY
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PPUSH
60116: LD_VAR 0 6
60120: PUSH
60121: LD_VAR 0 4
60125: ARRAY
60126: PUSH
60127: LD_INT 2
60129: ARRAY
60130: PPUSH
60131: CALL_OW 428
60135: PUSH
60136: LD_INT 0
60138: NONEQUAL
60139: OR
60140: IFFALSE 60162
// tmp := Delete ( tmp , i ) ;
60142: LD_ADDR_VAR 0 6
60146: PUSH
60147: LD_VAR 0 6
60151: PPUSH
60152: LD_VAR 0 4
60156: PPUSH
60157: CALL_OW 3
60161: ST_TO_ADDR
60162: GO 60062
60164: POP
60165: POP
// j := GetClosestHex ( unit , tmp ) ;
60166: LD_ADDR_VAR 0 5
60170: PUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: LD_VAR 0 6
60180: PPUSH
60181: CALL 59466 0 2
60185: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60186: LD_VAR 0 1
60190: PPUSH
60191: LD_VAR 0 5
60195: PUSH
60196: LD_INT 1
60198: ARRAY
60199: PPUSH
60200: LD_VAR 0 5
60204: PUSH
60205: LD_INT 2
60207: ARRAY
60208: PPUSH
60209: CALL_OW 111
// end ;
60213: LD_VAR 0 3
60217: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60218: LD_INT 0
60220: PPUSH
60221: PPUSH
60222: PPUSH
// uc_side = 0 ;
60223: LD_ADDR_OWVAR 20
60227: PUSH
60228: LD_INT 0
60230: ST_TO_ADDR
// uc_nation = 0 ;
60231: LD_ADDR_OWVAR 21
60235: PUSH
60236: LD_INT 0
60238: ST_TO_ADDR
// InitHc_All ( ) ;
60239: CALL_OW 584
// InitVc ;
60243: CALL_OW 20
// if mastodonts then
60247: LD_VAR 0 6
60251: IFFALSE 60318
// for i = 1 to mastodonts do
60253: LD_ADDR_VAR 0 11
60257: PUSH
60258: DOUBLE
60259: LD_INT 1
60261: DEC
60262: ST_TO_ADDR
60263: LD_VAR 0 6
60267: PUSH
60268: FOR_TO
60269: IFFALSE 60316
// begin vc_chassis := 31 ;
60271: LD_ADDR_OWVAR 37
60275: PUSH
60276: LD_INT 31
60278: ST_TO_ADDR
// vc_control := control_rider ;
60279: LD_ADDR_OWVAR 38
60283: PUSH
60284: LD_INT 4
60286: ST_TO_ADDR
// animal := CreateVehicle ;
60287: LD_ADDR_VAR 0 12
60291: PUSH
60292: CALL_OW 45
60296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60297: LD_VAR 0 12
60301: PPUSH
60302: LD_VAR 0 8
60306: PPUSH
60307: LD_INT 0
60309: PPUSH
60310: CALL 62506 0 3
// end ;
60314: GO 60268
60316: POP
60317: POP
// if horses then
60318: LD_VAR 0 5
60322: IFFALSE 60389
// for i = 1 to horses do
60324: LD_ADDR_VAR 0 11
60328: PUSH
60329: DOUBLE
60330: LD_INT 1
60332: DEC
60333: ST_TO_ADDR
60334: LD_VAR 0 5
60338: PUSH
60339: FOR_TO
60340: IFFALSE 60387
// begin hc_class := 21 ;
60342: LD_ADDR_OWVAR 28
60346: PUSH
60347: LD_INT 21
60349: ST_TO_ADDR
// hc_gallery :=  ;
60350: LD_ADDR_OWVAR 33
60354: PUSH
60355: LD_STRING 
60357: ST_TO_ADDR
// animal := CreateHuman ;
60358: LD_ADDR_VAR 0 12
60362: PUSH
60363: CALL_OW 44
60367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60368: LD_VAR 0 12
60372: PPUSH
60373: LD_VAR 0 8
60377: PPUSH
60378: LD_INT 0
60380: PPUSH
60381: CALL 62506 0 3
// end ;
60385: GO 60339
60387: POP
60388: POP
// if birds then
60389: LD_VAR 0 1
60393: IFFALSE 60460
// for i = 1 to birds do
60395: LD_ADDR_VAR 0 11
60399: PUSH
60400: DOUBLE
60401: LD_INT 1
60403: DEC
60404: ST_TO_ADDR
60405: LD_VAR 0 1
60409: PUSH
60410: FOR_TO
60411: IFFALSE 60458
// begin hc_class = 18 ;
60413: LD_ADDR_OWVAR 28
60417: PUSH
60418: LD_INT 18
60420: ST_TO_ADDR
// hc_gallery =  ;
60421: LD_ADDR_OWVAR 33
60425: PUSH
60426: LD_STRING 
60428: ST_TO_ADDR
// animal := CreateHuman ;
60429: LD_ADDR_VAR 0 12
60433: PUSH
60434: CALL_OW 44
60438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60439: LD_VAR 0 12
60443: PPUSH
60444: LD_VAR 0 8
60448: PPUSH
60449: LD_INT 0
60451: PPUSH
60452: CALL 62506 0 3
// end ;
60456: GO 60410
60458: POP
60459: POP
// if tigers then
60460: LD_VAR 0 2
60464: IFFALSE 60548
// for i = 1 to tigers do
60466: LD_ADDR_VAR 0 11
60470: PUSH
60471: DOUBLE
60472: LD_INT 1
60474: DEC
60475: ST_TO_ADDR
60476: LD_VAR 0 2
60480: PUSH
60481: FOR_TO
60482: IFFALSE 60546
// begin hc_class = class_tiger ;
60484: LD_ADDR_OWVAR 28
60488: PUSH
60489: LD_INT 14
60491: ST_TO_ADDR
// hc_gallery =  ;
60492: LD_ADDR_OWVAR 33
60496: PUSH
60497: LD_STRING 
60499: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60500: LD_ADDR_OWVAR 35
60504: PUSH
60505: LD_INT 7
60507: NEG
60508: PPUSH
60509: LD_INT 7
60511: PPUSH
60512: CALL_OW 12
60516: ST_TO_ADDR
// animal := CreateHuman ;
60517: LD_ADDR_VAR 0 12
60521: PUSH
60522: CALL_OW 44
60526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60527: LD_VAR 0 12
60531: PPUSH
60532: LD_VAR 0 8
60536: PPUSH
60537: LD_INT 0
60539: PPUSH
60540: CALL 62506 0 3
// end ;
60544: GO 60481
60546: POP
60547: POP
// if apemans then
60548: LD_VAR 0 3
60552: IFFALSE 60675
// for i = 1 to apemans do
60554: LD_ADDR_VAR 0 11
60558: PUSH
60559: DOUBLE
60560: LD_INT 1
60562: DEC
60563: ST_TO_ADDR
60564: LD_VAR 0 3
60568: PUSH
60569: FOR_TO
60570: IFFALSE 60673
// begin hc_class = class_apeman ;
60572: LD_ADDR_OWVAR 28
60576: PUSH
60577: LD_INT 12
60579: ST_TO_ADDR
// hc_gallery =  ;
60580: LD_ADDR_OWVAR 33
60584: PUSH
60585: LD_STRING 
60587: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60588: LD_ADDR_OWVAR 35
60592: PUSH
60593: LD_INT 5
60595: NEG
60596: PPUSH
60597: LD_INT 5
60599: PPUSH
60600: CALL_OW 12
60604: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60605: LD_ADDR_OWVAR 31
60609: PUSH
60610: LD_INT 1
60612: PPUSH
60613: LD_INT 3
60615: PPUSH
60616: CALL_OW 12
60620: PUSH
60621: LD_INT 1
60623: PPUSH
60624: LD_INT 3
60626: PPUSH
60627: CALL_OW 12
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// animal := CreateHuman ;
60644: LD_ADDR_VAR 0 12
60648: PUSH
60649: CALL_OW 44
60653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60654: LD_VAR 0 12
60658: PPUSH
60659: LD_VAR 0 8
60663: PPUSH
60664: LD_INT 0
60666: PPUSH
60667: CALL 62506 0 3
// end ;
60671: GO 60569
60673: POP
60674: POP
// if enchidnas then
60675: LD_VAR 0 4
60679: IFFALSE 60746
// for i = 1 to enchidnas do
60681: LD_ADDR_VAR 0 11
60685: PUSH
60686: DOUBLE
60687: LD_INT 1
60689: DEC
60690: ST_TO_ADDR
60691: LD_VAR 0 4
60695: PUSH
60696: FOR_TO
60697: IFFALSE 60744
// begin hc_class = 13 ;
60699: LD_ADDR_OWVAR 28
60703: PUSH
60704: LD_INT 13
60706: ST_TO_ADDR
// hc_gallery =  ;
60707: LD_ADDR_OWVAR 33
60711: PUSH
60712: LD_STRING 
60714: ST_TO_ADDR
// animal := CreateHuman ;
60715: LD_ADDR_VAR 0 12
60719: PUSH
60720: CALL_OW 44
60724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60725: LD_VAR 0 12
60729: PPUSH
60730: LD_VAR 0 8
60734: PPUSH
60735: LD_INT 0
60737: PPUSH
60738: CALL 62506 0 3
// end ;
60742: GO 60696
60744: POP
60745: POP
// if fishes then
60746: LD_VAR 0 7
60750: IFFALSE 60817
// for i = 1 to fishes do
60752: LD_ADDR_VAR 0 11
60756: PUSH
60757: DOUBLE
60758: LD_INT 1
60760: DEC
60761: ST_TO_ADDR
60762: LD_VAR 0 7
60766: PUSH
60767: FOR_TO
60768: IFFALSE 60815
// begin hc_class = 20 ;
60770: LD_ADDR_OWVAR 28
60774: PUSH
60775: LD_INT 20
60777: ST_TO_ADDR
// hc_gallery =  ;
60778: LD_ADDR_OWVAR 33
60782: PUSH
60783: LD_STRING 
60785: ST_TO_ADDR
// animal := CreateHuman ;
60786: LD_ADDR_VAR 0 12
60790: PUSH
60791: CALL_OW 44
60795: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60796: LD_VAR 0 12
60800: PPUSH
60801: LD_VAR 0 9
60805: PPUSH
60806: LD_INT 0
60808: PPUSH
60809: CALL 62506 0 3
// end ;
60813: GO 60767
60815: POP
60816: POP
// end ;
60817: LD_VAR 0 10
60821: RET
// export function WantHeal ( sci , unit ) ; begin
60822: LD_INT 0
60824: PPUSH
// if GetTaskList ( sci ) > 0 then
60825: LD_VAR 0 1
60829: PPUSH
60830: CALL_OW 437
60834: PUSH
60835: LD_INT 0
60837: GREATER
60838: IFFALSE 60908
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60840: LD_VAR 0 1
60844: PPUSH
60845: CALL_OW 437
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: PUSH
60854: LD_INT 1
60856: ARRAY
60857: PUSH
60858: LD_STRING l
60860: EQUAL
60861: PUSH
60862: LD_VAR 0 1
60866: PPUSH
60867: CALL_OW 437
60871: PUSH
60872: LD_INT 1
60874: ARRAY
60875: PUSH
60876: LD_INT 4
60878: ARRAY
60879: PUSH
60880: LD_VAR 0 2
60884: EQUAL
60885: AND
60886: IFFALSE 60898
// result := true else
60888: LD_ADDR_VAR 0 3
60892: PUSH
60893: LD_INT 1
60895: ST_TO_ADDR
60896: GO 60906
// result := false ;
60898: LD_ADDR_VAR 0 3
60902: PUSH
60903: LD_INT 0
60905: ST_TO_ADDR
// end else
60906: GO 60916
// result := false ;
60908: LD_ADDR_VAR 0 3
60912: PUSH
60913: LD_INT 0
60915: ST_TO_ADDR
// end ;
60916: LD_VAR 0 3
60920: RET
// export function HealTarget ( sci ) ; begin
60921: LD_INT 0
60923: PPUSH
// if not sci then
60924: LD_VAR 0 1
60928: NOT
60929: IFFALSE 60933
// exit ;
60931: GO 60998
// result := 0 ;
60933: LD_ADDR_VAR 0 2
60937: PUSH
60938: LD_INT 0
60940: ST_TO_ADDR
// if GetTaskList ( sci ) then
60941: LD_VAR 0 1
60945: PPUSH
60946: CALL_OW 437
60950: IFFALSE 60998
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60952: LD_VAR 0 1
60956: PPUSH
60957: CALL_OW 437
60961: PUSH
60962: LD_INT 1
60964: ARRAY
60965: PUSH
60966: LD_INT 1
60968: ARRAY
60969: PUSH
60970: LD_STRING l
60972: EQUAL
60973: IFFALSE 60998
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60975: LD_ADDR_VAR 0 2
60979: PUSH
60980: LD_VAR 0 1
60984: PPUSH
60985: CALL_OW 437
60989: PUSH
60990: LD_INT 1
60992: ARRAY
60993: PUSH
60994: LD_INT 4
60996: ARRAY
60997: ST_TO_ADDR
// end ;
60998: LD_VAR 0 2
61002: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61003: LD_INT 0
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
// if not base_units then
61009: LD_VAR 0 1
61013: NOT
61014: IFFALSE 61018
// exit ;
61016: GO 61105
// result := false ;
61018: LD_ADDR_VAR 0 2
61022: PUSH
61023: LD_INT 0
61025: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61026: LD_ADDR_VAR 0 5
61030: PUSH
61031: LD_VAR 0 1
61035: PPUSH
61036: LD_INT 21
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PPUSH
61046: CALL_OW 72
61050: ST_TO_ADDR
// if not tmp then
61051: LD_VAR 0 5
61055: NOT
61056: IFFALSE 61060
// exit ;
61058: GO 61105
// for i in tmp do
61060: LD_ADDR_VAR 0 3
61064: PUSH
61065: LD_VAR 0 5
61069: PUSH
61070: FOR_IN
61071: IFFALSE 61103
// begin result := EnemyInRange ( i , 22 ) ;
61073: LD_ADDR_VAR 0 2
61077: PUSH
61078: LD_VAR 0 3
61082: PPUSH
61083: LD_INT 22
61085: PPUSH
61086: CALL 59341 0 2
61090: ST_TO_ADDR
// if result then
61091: LD_VAR 0 2
61095: IFFALSE 61101
// exit ;
61097: POP
61098: POP
61099: GO 61105
// end ;
61101: GO 61070
61103: POP
61104: POP
// end ;
61105: LD_VAR 0 2
61109: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61110: LD_INT 0
61112: PPUSH
61113: PPUSH
// if not units then
61114: LD_VAR 0 1
61118: NOT
61119: IFFALSE 61123
// exit ;
61121: GO 61193
// result := [ ] ;
61123: LD_ADDR_VAR 0 3
61127: PUSH
61128: EMPTY
61129: ST_TO_ADDR
// for i in units do
61130: LD_ADDR_VAR 0 4
61134: PUSH
61135: LD_VAR 0 1
61139: PUSH
61140: FOR_IN
61141: IFFALSE 61191
// if GetTag ( i ) = tag then
61143: LD_VAR 0 4
61147: PPUSH
61148: CALL_OW 110
61152: PUSH
61153: LD_VAR 0 2
61157: EQUAL
61158: IFFALSE 61189
// result := Insert ( result , result + 1 , i ) ;
61160: LD_ADDR_VAR 0 3
61164: PUSH
61165: LD_VAR 0 3
61169: PPUSH
61170: LD_VAR 0 3
61174: PUSH
61175: LD_INT 1
61177: PLUS
61178: PPUSH
61179: LD_VAR 0 4
61183: PPUSH
61184: CALL_OW 2
61188: ST_TO_ADDR
61189: GO 61140
61191: POP
61192: POP
// end ;
61193: LD_VAR 0 3
61197: RET
// export function IsDriver ( un ) ; begin
61198: LD_INT 0
61200: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61201: LD_ADDR_VAR 0 2
61205: PUSH
61206: LD_VAR 0 1
61210: PUSH
61211: LD_INT 55
61213: PUSH
61214: EMPTY
61215: LIST
61216: PPUSH
61217: CALL_OW 69
61221: IN
61222: ST_TO_ADDR
// end ;
61223: LD_VAR 0 2
61227: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61228: LD_INT 0
61230: PPUSH
61231: PPUSH
// list := [ ] ;
61232: LD_ADDR_VAR 0 5
61236: PUSH
61237: EMPTY
61238: ST_TO_ADDR
// case d of 0 :
61239: LD_VAR 0 3
61243: PUSH
61244: LD_INT 0
61246: DOUBLE
61247: EQUAL
61248: IFTRUE 61252
61250: GO 61385
61252: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61253: LD_ADDR_VAR 0 5
61257: PUSH
61258: LD_VAR 0 1
61262: PUSH
61263: LD_INT 4
61265: MINUS
61266: PUSH
61267: LD_VAR 0 2
61271: PUSH
61272: LD_INT 4
61274: MINUS
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: PUSH
61284: LD_VAR 0 1
61288: PUSH
61289: LD_INT 3
61291: MINUS
61292: PUSH
61293: LD_VAR 0 2
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: LIST
61305: PUSH
61306: LD_VAR 0 1
61310: PUSH
61311: LD_INT 4
61313: PLUS
61314: PUSH
61315: LD_VAR 0 2
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: PUSH
61328: LD_VAR 0 1
61332: PUSH
61333: LD_INT 3
61335: PLUS
61336: PUSH
61337: LD_VAR 0 2
61341: PUSH
61342: LD_INT 3
61344: PLUS
61345: PUSH
61346: LD_INT 5
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: PUSH
61354: LD_VAR 0 1
61358: PUSH
61359: LD_VAR 0 2
61363: PUSH
61364: LD_INT 4
61366: PLUS
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: ST_TO_ADDR
// end ; 1 :
61383: GO 62083
61385: LD_INT 1
61387: DOUBLE
61388: EQUAL
61389: IFTRUE 61393
61391: GO 61526
61393: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61394: LD_ADDR_VAR 0 5
61398: PUSH
61399: LD_VAR 0 1
61403: PUSH
61404: LD_VAR 0 2
61408: PUSH
61409: LD_INT 4
61411: MINUS
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: PUSH
61421: LD_VAR 0 1
61425: PUSH
61426: LD_INT 3
61428: MINUS
61429: PUSH
61430: LD_VAR 0 2
61434: PUSH
61435: LD_INT 3
61437: MINUS
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: PUSH
61447: LD_VAR 0 1
61451: PUSH
61452: LD_INT 4
61454: MINUS
61455: PUSH
61456: LD_VAR 0 2
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 1
61473: PUSH
61474: LD_VAR 0 2
61478: PUSH
61479: LD_INT 3
61481: PLUS
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: LD_VAR 0 1
61495: PUSH
61496: LD_INT 4
61498: PLUS
61499: PUSH
61500: LD_VAR 0 2
61504: PUSH
61505: LD_INT 4
61507: PLUS
61508: PUSH
61509: LD_INT 5
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// end ; 2 :
61524: GO 62083
61526: LD_INT 2
61528: DOUBLE
61529: EQUAL
61530: IFTRUE 61534
61532: GO 61663
61534: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61535: LD_ADDR_VAR 0 5
61539: PUSH
61540: LD_VAR 0 1
61544: PUSH
61545: LD_VAR 0 2
61549: PUSH
61550: LD_INT 3
61552: MINUS
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_INT 4
61569: PLUS
61570: PUSH
61571: LD_VAR 0 2
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: LD_VAR 0 1
61588: PUSH
61589: LD_VAR 0 2
61593: PUSH
61594: LD_INT 4
61596: PLUS
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: PUSH
61606: LD_VAR 0 1
61610: PUSH
61611: LD_INT 3
61613: MINUS
61614: PUSH
61615: LD_VAR 0 2
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: PUSH
61628: LD_VAR 0 1
61632: PUSH
61633: LD_INT 4
61635: MINUS
61636: PUSH
61637: LD_VAR 0 2
61641: PUSH
61642: LD_INT 4
61644: MINUS
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: LIST
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// end ; 3 :
61661: GO 62083
61663: LD_INT 3
61665: DOUBLE
61666: EQUAL
61667: IFTRUE 61671
61669: GO 61804
61671: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61672: LD_ADDR_VAR 0 5
61676: PUSH
61677: LD_VAR 0 1
61681: PUSH
61682: LD_INT 3
61684: PLUS
61685: PUSH
61686: LD_VAR 0 2
61690: PUSH
61691: LD_INT 4
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: PUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 4
61706: PLUS
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 4
61715: PLUS
61716: PUSH
61717: LD_INT 5
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_INT 4
61732: MINUS
61733: PUSH
61734: LD_VAR 0 2
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: PUSH
61747: LD_VAR 0 1
61751: PUSH
61752: LD_VAR 0 2
61756: PUSH
61757: LD_INT 4
61759: MINUS
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: PUSH
61769: LD_VAR 0 1
61773: PUSH
61774: LD_INT 3
61776: MINUS
61777: PUSH
61778: LD_VAR 0 2
61782: PUSH
61783: LD_INT 3
61785: MINUS
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: ST_TO_ADDR
// end ; 4 :
61802: GO 62083
61804: LD_INT 4
61806: DOUBLE
61807: EQUAL
61808: IFTRUE 61812
61810: GO 61945
61812: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61813: LD_ADDR_VAR 0 5
61817: PUSH
61818: LD_VAR 0 1
61822: PUSH
61823: LD_VAR 0 2
61827: PUSH
61828: LD_INT 4
61830: PLUS
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: PUSH
61840: LD_VAR 0 1
61844: PUSH
61845: LD_INT 3
61847: PLUS
61848: PUSH
61849: LD_VAR 0 2
61853: PUSH
61854: LD_INT 3
61856: PLUS
61857: PUSH
61858: LD_INT 5
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: PUSH
61866: LD_VAR 0 1
61870: PUSH
61871: LD_INT 4
61873: PLUS
61874: PUSH
61875: LD_VAR 0 2
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 1
61892: PUSH
61893: LD_VAR 0 2
61897: PUSH
61898: LD_INT 3
61900: MINUS
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: PUSH
61910: LD_VAR 0 1
61914: PUSH
61915: LD_INT 4
61917: MINUS
61918: PUSH
61919: LD_VAR 0 2
61923: PUSH
61924: LD_INT 4
61926: MINUS
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// end ; 5 :
61943: GO 62083
61945: LD_INT 5
61947: DOUBLE
61948: EQUAL
61949: IFTRUE 61953
61951: GO 62082
61953: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61954: LD_ADDR_VAR 0 5
61958: PUSH
61959: LD_VAR 0 1
61963: PUSH
61964: LD_INT 4
61966: MINUS
61967: PUSH
61968: LD_VAR 0 2
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_VAR 0 2
61990: PUSH
61991: LD_INT 4
61993: MINUS
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_INT 4
62010: PLUS
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 4
62019: PLUS
62020: PUSH
62021: LD_INT 5
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: PUSH
62029: LD_VAR 0 1
62033: PUSH
62034: LD_INT 3
62036: PLUS
62037: PUSH
62038: LD_VAR 0 2
62042: PUSH
62043: LD_INT 4
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_INT 3
62063: PLUS
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: ST_TO_ADDR
// end ; end ;
62080: GO 62083
62082: POP
// result := list ;
62083: LD_ADDR_VAR 0 4
62087: PUSH
62088: LD_VAR 0 5
62092: ST_TO_ADDR
// end ;
62093: LD_VAR 0 4
62097: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62098: LD_INT 0
62100: PPUSH
62101: PPUSH
62102: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62103: LD_VAR 0 1
62107: NOT
62108: PUSH
62109: LD_VAR 0 2
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: IN
62132: NOT
62133: OR
62134: IFFALSE 62138
// exit ;
62136: GO 62230
// tmp := [ ] ;
62138: LD_ADDR_VAR 0 5
62142: PUSH
62143: EMPTY
62144: ST_TO_ADDR
// for i in units do
62145: LD_ADDR_VAR 0 4
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: FOR_IN
62156: IFFALSE 62199
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62158: LD_ADDR_VAR 0 5
62162: PUSH
62163: LD_VAR 0 5
62167: PPUSH
62168: LD_VAR 0 5
62172: PUSH
62173: LD_INT 1
62175: PLUS
62176: PPUSH
62177: LD_VAR 0 4
62181: PPUSH
62182: LD_VAR 0 2
62186: PPUSH
62187: CALL_OW 259
62191: PPUSH
62192: CALL_OW 2
62196: ST_TO_ADDR
62197: GO 62155
62199: POP
62200: POP
// if not tmp then
62201: LD_VAR 0 5
62205: NOT
62206: IFFALSE 62210
// exit ;
62208: GO 62230
// result := SortListByListDesc ( units , tmp ) ;
62210: LD_ADDR_VAR 0 3
62214: PUSH
62215: LD_VAR 0 1
62219: PPUSH
62220: LD_VAR 0 5
62224: PPUSH
62225: CALL_OW 77
62229: ST_TO_ADDR
// end ;
62230: LD_VAR 0 3
62234: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62235: LD_INT 0
62237: PPUSH
62238: PPUSH
62239: PPUSH
// result := false ;
62240: LD_ADDR_VAR 0 3
62244: PUSH
62245: LD_INT 0
62247: ST_TO_ADDR
// x := GetX ( building ) ;
62248: LD_ADDR_VAR 0 4
62252: PUSH
62253: LD_VAR 0 2
62257: PPUSH
62258: CALL_OW 250
62262: ST_TO_ADDR
// y := GetY ( building ) ;
62263: LD_ADDR_VAR 0 5
62267: PUSH
62268: LD_VAR 0 2
62272: PPUSH
62273: CALL_OW 251
62277: ST_TO_ADDR
// if not building or not x or not y then
62278: LD_VAR 0 2
62282: NOT
62283: PUSH
62284: LD_VAR 0 4
62288: NOT
62289: OR
62290: PUSH
62291: LD_VAR 0 5
62295: NOT
62296: OR
62297: IFFALSE 62301
// exit ;
62299: GO 62393
// if GetTaskList ( unit ) then
62301: LD_VAR 0 1
62305: PPUSH
62306: CALL_OW 437
62310: IFFALSE 62393
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62312: LD_STRING e
62314: PUSH
62315: LD_VAR 0 1
62319: PPUSH
62320: CALL_OW 437
62324: PUSH
62325: LD_INT 1
62327: ARRAY
62328: PUSH
62329: LD_INT 1
62331: ARRAY
62332: EQUAL
62333: PUSH
62334: LD_VAR 0 4
62338: PUSH
62339: LD_VAR 0 1
62343: PPUSH
62344: CALL_OW 437
62348: PUSH
62349: LD_INT 1
62351: ARRAY
62352: PUSH
62353: LD_INT 2
62355: ARRAY
62356: EQUAL
62357: AND
62358: PUSH
62359: LD_VAR 0 5
62363: PUSH
62364: LD_VAR 0 1
62368: PPUSH
62369: CALL_OW 437
62373: PUSH
62374: LD_INT 1
62376: ARRAY
62377: PUSH
62378: LD_INT 3
62380: ARRAY
62381: EQUAL
62382: AND
62383: IFFALSE 62393
// result := true end ;
62385: LD_ADDR_VAR 0 3
62389: PUSH
62390: LD_INT 1
62392: ST_TO_ADDR
// end ;
62393: LD_VAR 0 3
62397: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62398: LD_INT 0
62400: PPUSH
// result := false ;
62401: LD_ADDR_VAR 0 4
62405: PUSH
62406: LD_INT 0
62408: ST_TO_ADDR
// if GetTaskList ( unit ) then
62409: LD_VAR 0 1
62413: PPUSH
62414: CALL_OW 437
62418: IFFALSE 62501
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62420: LD_STRING M
62422: PUSH
62423: LD_VAR 0 1
62427: PPUSH
62428: CALL_OW 437
62432: PUSH
62433: LD_INT 1
62435: ARRAY
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: EQUAL
62441: PUSH
62442: LD_VAR 0 2
62446: PUSH
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 437
62456: PUSH
62457: LD_INT 1
62459: ARRAY
62460: PUSH
62461: LD_INT 2
62463: ARRAY
62464: EQUAL
62465: AND
62466: PUSH
62467: LD_VAR 0 3
62471: PUSH
62472: LD_VAR 0 1
62476: PPUSH
62477: CALL_OW 437
62481: PUSH
62482: LD_INT 1
62484: ARRAY
62485: PUSH
62486: LD_INT 3
62488: ARRAY
62489: EQUAL
62490: AND
62491: IFFALSE 62501
// result := true ;
62493: LD_ADDR_VAR 0 4
62497: PUSH
62498: LD_INT 1
62500: ST_TO_ADDR
// end ; end ;
62501: LD_VAR 0 4
62505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62506: LD_INT 0
62508: PPUSH
62509: PPUSH
62510: PPUSH
62511: PPUSH
// if not unit or not area then
62512: LD_VAR 0 1
62516: NOT
62517: PUSH
62518: LD_VAR 0 2
62522: NOT
62523: OR
62524: IFFALSE 62528
// exit ;
62526: GO 62692
// tmp := AreaToList ( area , i ) ;
62528: LD_ADDR_VAR 0 6
62532: PUSH
62533: LD_VAR 0 2
62537: PPUSH
62538: LD_VAR 0 5
62542: PPUSH
62543: CALL_OW 517
62547: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62548: LD_ADDR_VAR 0 5
62552: PUSH
62553: DOUBLE
62554: LD_INT 1
62556: DEC
62557: ST_TO_ADDR
62558: LD_VAR 0 6
62562: PUSH
62563: LD_INT 1
62565: ARRAY
62566: PUSH
62567: FOR_TO
62568: IFFALSE 62690
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62570: LD_ADDR_VAR 0 7
62574: PUSH
62575: LD_VAR 0 6
62579: PUSH
62580: LD_INT 1
62582: ARRAY
62583: PUSH
62584: LD_VAR 0 5
62588: ARRAY
62589: PUSH
62590: LD_VAR 0 6
62594: PUSH
62595: LD_INT 2
62597: ARRAY
62598: PUSH
62599: LD_VAR 0 5
62603: ARRAY
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62609: LD_VAR 0 7
62613: PUSH
62614: LD_INT 1
62616: ARRAY
62617: PPUSH
62618: LD_VAR 0 7
62622: PUSH
62623: LD_INT 2
62625: ARRAY
62626: PPUSH
62627: CALL_OW 428
62631: PUSH
62632: LD_INT 0
62634: EQUAL
62635: IFFALSE 62688
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62637: LD_VAR 0 1
62641: PPUSH
62642: LD_VAR 0 7
62646: PUSH
62647: LD_INT 1
62649: ARRAY
62650: PPUSH
62651: LD_VAR 0 7
62655: PUSH
62656: LD_INT 2
62658: ARRAY
62659: PPUSH
62660: LD_VAR 0 3
62664: PPUSH
62665: CALL_OW 48
// result := IsPlaced ( unit ) ;
62669: LD_ADDR_VAR 0 4
62673: PUSH
62674: LD_VAR 0 1
62678: PPUSH
62679: CALL_OW 305
62683: ST_TO_ADDR
// exit ;
62684: POP
62685: POP
62686: GO 62692
// end ; end ;
62688: GO 62567
62690: POP
62691: POP
// end ;
62692: LD_VAR 0 4
62696: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62697: LD_INT 0
62699: PPUSH
62700: PPUSH
62701: PPUSH
// if not side or side > 8 then
62702: LD_VAR 0 1
62706: NOT
62707: PUSH
62708: LD_VAR 0 1
62712: PUSH
62713: LD_INT 8
62715: GREATER
62716: OR
62717: IFFALSE 62721
// exit ;
62719: GO 62908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62721: LD_ADDR_VAR 0 4
62725: PUSH
62726: LD_INT 22
62728: PUSH
62729: LD_VAR 0 1
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 21
62740: PUSH
62741: LD_INT 3
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PPUSH
62752: CALL_OW 69
62756: ST_TO_ADDR
// if not tmp then
62757: LD_VAR 0 4
62761: NOT
62762: IFFALSE 62766
// exit ;
62764: GO 62908
// enable_addtolog := true ;
62766: LD_ADDR_OWVAR 81
62770: PUSH
62771: LD_INT 1
62773: ST_TO_ADDR
// AddToLog ( [ ) ;
62774: LD_STRING [
62776: PPUSH
62777: CALL_OW 561
// for i in tmp do
62781: LD_ADDR_VAR 0 3
62785: PUSH
62786: LD_VAR 0 4
62790: PUSH
62791: FOR_IN
62792: IFFALSE 62899
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62794: LD_STRING [
62796: PUSH
62797: LD_VAR 0 3
62801: PPUSH
62802: CALL_OW 266
62806: STR
62807: PUSH
62808: LD_STRING , 
62810: STR
62811: PUSH
62812: LD_VAR 0 3
62816: PPUSH
62817: CALL_OW 250
62821: STR
62822: PUSH
62823: LD_STRING , 
62825: STR
62826: PUSH
62827: LD_VAR 0 3
62831: PPUSH
62832: CALL_OW 251
62836: STR
62837: PUSH
62838: LD_STRING , 
62840: STR
62841: PUSH
62842: LD_VAR 0 3
62846: PPUSH
62847: CALL_OW 254
62851: STR
62852: PUSH
62853: LD_STRING , 
62855: STR
62856: PUSH
62857: LD_VAR 0 3
62861: PPUSH
62862: LD_INT 1
62864: PPUSH
62865: CALL_OW 268
62869: STR
62870: PUSH
62871: LD_STRING , 
62873: STR
62874: PUSH
62875: LD_VAR 0 3
62879: PPUSH
62880: LD_INT 2
62882: PPUSH
62883: CALL_OW 268
62887: STR
62888: PUSH
62889: LD_STRING ],
62891: STR
62892: PPUSH
62893: CALL_OW 561
// end ;
62897: GO 62791
62899: POP
62900: POP
// AddToLog ( ]; ) ;
62901: LD_STRING ];
62903: PPUSH
62904: CALL_OW 561
// end ;
62908: LD_VAR 0 2
62912: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62913: LD_INT 0
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
62919: PPUSH
// if not area or not rate or not max then
62920: LD_VAR 0 1
62924: NOT
62925: PUSH
62926: LD_VAR 0 2
62930: NOT
62931: OR
62932: PUSH
62933: LD_VAR 0 4
62937: NOT
62938: OR
62939: IFFALSE 62943
// exit ;
62941: GO 63135
// while 1 do
62943: LD_INT 1
62945: IFFALSE 63135
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62947: LD_ADDR_VAR 0 9
62951: PUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: LD_INT 1
62959: PPUSH
62960: CALL_OW 287
62964: PUSH
62965: LD_INT 10
62967: MUL
62968: ST_TO_ADDR
// r := rate / 10 ;
62969: LD_ADDR_VAR 0 7
62973: PUSH
62974: LD_VAR 0 2
62978: PUSH
62979: LD_INT 10
62981: DIVREAL
62982: ST_TO_ADDR
// time := 1 1$00 ;
62983: LD_ADDR_VAR 0 8
62987: PUSH
62988: LD_INT 2100
62990: ST_TO_ADDR
// if amount < min then
62991: LD_VAR 0 9
62995: PUSH
62996: LD_VAR 0 3
63000: LESS
63001: IFFALSE 63019
// r := r * 2 else
63003: LD_ADDR_VAR 0 7
63007: PUSH
63008: LD_VAR 0 7
63012: PUSH
63013: LD_INT 2
63015: MUL
63016: ST_TO_ADDR
63017: GO 63045
// if amount > max then
63019: LD_VAR 0 9
63023: PUSH
63024: LD_VAR 0 4
63028: GREATER
63029: IFFALSE 63045
// r := r / 2 ;
63031: LD_ADDR_VAR 0 7
63035: PUSH
63036: LD_VAR 0 7
63040: PUSH
63041: LD_INT 2
63043: DIVREAL
63044: ST_TO_ADDR
// time := time / r ;
63045: LD_ADDR_VAR 0 8
63049: PUSH
63050: LD_VAR 0 8
63054: PUSH
63055: LD_VAR 0 7
63059: DIVREAL
63060: ST_TO_ADDR
// if time < 0 then
63061: LD_VAR 0 8
63065: PUSH
63066: LD_INT 0
63068: LESS
63069: IFFALSE 63086
// time := time * - 1 ;
63071: LD_ADDR_VAR 0 8
63075: PUSH
63076: LD_VAR 0 8
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: MUL
63085: ST_TO_ADDR
// wait ( time ) ;
63086: LD_VAR 0 8
63090: PPUSH
63091: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63095: LD_INT 35
63097: PPUSH
63098: LD_INT 875
63100: PPUSH
63101: CALL_OW 12
63105: PPUSH
63106: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63110: LD_INT 1
63112: PPUSH
63113: LD_INT 5
63115: PPUSH
63116: CALL_OW 12
63120: PPUSH
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_INT 1
63128: PPUSH
63129: CALL_OW 55
// end ;
63133: GO 62943
// end ;
63135: LD_VAR 0 5
63139: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63140: LD_INT 0
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
63147: PPUSH
63148: PPUSH
63149: PPUSH
// if not turrets or not factories then
63150: LD_VAR 0 1
63154: NOT
63155: PUSH
63156: LD_VAR 0 2
63160: NOT
63161: OR
63162: IFFALSE 63166
// exit ;
63164: GO 63473
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63166: LD_ADDR_VAR 0 10
63170: PUSH
63171: LD_INT 5
63173: PUSH
63174: LD_INT 6
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 4
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 24
63208: PUSH
63209: LD_INT 25
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 23
63218: PUSH
63219: LD_INT 27
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 42
63232: PUSH
63233: LD_INT 43
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 44
63242: PUSH
63243: LD_INT 46
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 45
63252: PUSH
63253: LD_INT 47
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: ST_TO_ADDR
// result := [ ] ;
63270: LD_ADDR_VAR 0 3
63274: PUSH
63275: EMPTY
63276: ST_TO_ADDR
// for i in turrets do
63277: LD_ADDR_VAR 0 4
63281: PUSH
63282: LD_VAR 0 1
63286: PUSH
63287: FOR_IN
63288: IFFALSE 63471
// begin nat := GetNation ( i ) ;
63290: LD_ADDR_VAR 0 7
63294: PUSH
63295: LD_VAR 0 4
63299: PPUSH
63300: CALL_OW 248
63304: ST_TO_ADDR
// weapon := 0 ;
63305: LD_ADDR_VAR 0 8
63309: PUSH
63310: LD_INT 0
63312: ST_TO_ADDR
// if not nat then
63313: LD_VAR 0 7
63317: NOT
63318: IFFALSE 63322
// continue ;
63320: GO 63287
// for j in list [ nat ] do
63322: LD_ADDR_VAR 0 5
63326: PUSH
63327: LD_VAR 0 10
63331: PUSH
63332: LD_VAR 0 7
63336: ARRAY
63337: PUSH
63338: FOR_IN
63339: IFFALSE 63380
// if GetBWeapon ( i ) = j [ 1 ] then
63341: LD_VAR 0 4
63345: PPUSH
63346: CALL_OW 269
63350: PUSH
63351: LD_VAR 0 5
63355: PUSH
63356: LD_INT 1
63358: ARRAY
63359: EQUAL
63360: IFFALSE 63378
// begin weapon := j [ 2 ] ;
63362: LD_ADDR_VAR 0 8
63366: PUSH
63367: LD_VAR 0 5
63371: PUSH
63372: LD_INT 2
63374: ARRAY
63375: ST_TO_ADDR
// break ;
63376: GO 63380
// end ;
63378: GO 63338
63380: POP
63381: POP
// if not weapon then
63382: LD_VAR 0 8
63386: NOT
63387: IFFALSE 63391
// continue ;
63389: GO 63287
// for k in factories do
63391: LD_ADDR_VAR 0 6
63395: PUSH
63396: LD_VAR 0 2
63400: PUSH
63401: FOR_IN
63402: IFFALSE 63467
// begin weapons := AvailableWeaponList ( k ) ;
63404: LD_ADDR_VAR 0 9
63408: PUSH
63409: LD_VAR 0 6
63413: PPUSH
63414: CALL_OW 478
63418: ST_TO_ADDR
// if not weapons then
63419: LD_VAR 0 9
63423: NOT
63424: IFFALSE 63428
// continue ;
63426: GO 63401
// if weapon in weapons then
63428: LD_VAR 0 8
63432: PUSH
63433: LD_VAR 0 9
63437: IN
63438: IFFALSE 63465
// begin result := [ i , weapon ] ;
63440: LD_ADDR_VAR 0 3
63444: PUSH
63445: LD_VAR 0 4
63449: PUSH
63450: LD_VAR 0 8
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: ST_TO_ADDR
// exit ;
63459: POP
63460: POP
63461: POP
63462: POP
63463: GO 63473
// end ; end ;
63465: GO 63401
63467: POP
63468: POP
// end ;
63469: GO 63287
63471: POP
63472: POP
// end ;
63473: LD_VAR 0 3
63477: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63478: LD_INT 0
63480: PPUSH
// if not side or side > 8 then
63481: LD_VAR 0 3
63485: NOT
63486: PUSH
63487: LD_VAR 0 3
63491: PUSH
63492: LD_INT 8
63494: GREATER
63495: OR
63496: IFFALSE 63500
// exit ;
63498: GO 63559
// if not range then
63500: LD_VAR 0 4
63504: NOT
63505: IFFALSE 63516
// range := - 12 ;
63507: LD_ADDR_VAR 0 4
63511: PUSH
63512: LD_INT 12
63514: NEG
63515: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63516: LD_VAR 0 1
63520: PPUSH
63521: LD_VAR 0 2
63525: PPUSH
63526: LD_VAR 0 3
63530: PPUSH
63531: LD_VAR 0 4
63535: PPUSH
63536: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63540: LD_VAR 0 1
63544: PPUSH
63545: LD_VAR 0 2
63549: PPUSH
63550: LD_VAR 0 3
63554: PPUSH
63555: CALL_OW 331
// end ;
63559: LD_VAR 0 5
63563: RET
// export function Video ( mode ) ; begin
63564: LD_INT 0
63566: PPUSH
// ingame_video = mode ;
63567: LD_ADDR_OWVAR 52
63571: PUSH
63572: LD_VAR 0 1
63576: ST_TO_ADDR
// interface_hidden = mode ;
63577: LD_ADDR_OWVAR 54
63581: PUSH
63582: LD_VAR 0 1
63586: ST_TO_ADDR
// end ;
63587: LD_VAR 0 2
63591: RET
// export function Join ( array , element ) ; begin
63592: LD_INT 0
63594: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63595: LD_ADDR_VAR 0 3
63599: PUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_VAR 0 1
63609: PUSH
63610: LD_INT 1
63612: PLUS
63613: PPUSH
63614: LD_VAR 0 2
63618: PPUSH
63619: CALL_OW 1
63623: ST_TO_ADDR
// end ;
63624: LD_VAR 0 3
63628: RET
// export function JoinUnion ( array , element ) ; begin
63629: LD_INT 0
63631: PPUSH
// result := array union element ;
63632: LD_ADDR_VAR 0 3
63636: PUSH
63637: LD_VAR 0 1
63641: PUSH
63642: LD_VAR 0 2
63646: UNION
63647: ST_TO_ADDR
// end ;
63648: LD_VAR 0 3
63652: RET
// export function GetBehemoths ( side ) ; begin
63653: LD_INT 0
63655: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63656: LD_ADDR_VAR 0 2
63660: PUSH
63661: LD_INT 22
63663: PUSH
63664: LD_VAR 0 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 31
63675: PUSH
63676: LD_INT 25
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PPUSH
63687: CALL_OW 69
63691: ST_TO_ADDR
// end ;
63692: LD_VAR 0 2
63696: RET
// export function Shuffle ( array ) ; var i , index ; begin
63697: LD_INT 0
63699: PPUSH
63700: PPUSH
63701: PPUSH
// result := [ ] ;
63702: LD_ADDR_VAR 0 2
63706: PUSH
63707: EMPTY
63708: ST_TO_ADDR
// if not array then
63709: LD_VAR 0 1
63713: NOT
63714: IFFALSE 63718
// exit ;
63716: GO 63817
// Randomize ;
63718: CALL_OW 10
// for i = array downto 1 do
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: DOUBLE
63728: LD_VAR 0 1
63732: INC
63733: ST_TO_ADDR
63734: LD_INT 1
63736: PUSH
63737: FOR_DOWNTO
63738: IFFALSE 63815
// begin index := rand ( 1 , array ) ;
63740: LD_ADDR_VAR 0 4
63744: PUSH
63745: LD_INT 1
63747: PPUSH
63748: LD_VAR 0 1
63752: PPUSH
63753: CALL_OW 12
63757: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63758: LD_ADDR_VAR 0 2
63762: PUSH
63763: LD_VAR 0 2
63767: PPUSH
63768: LD_VAR 0 2
63772: PUSH
63773: LD_INT 1
63775: PLUS
63776: PPUSH
63777: LD_VAR 0 1
63781: PUSH
63782: LD_VAR 0 4
63786: ARRAY
63787: PPUSH
63788: CALL_OW 2
63792: ST_TO_ADDR
// array := Delete ( array , index ) ;
63793: LD_ADDR_VAR 0 1
63797: PUSH
63798: LD_VAR 0 1
63802: PPUSH
63803: LD_VAR 0 4
63807: PPUSH
63808: CALL_OW 3
63812: ST_TO_ADDR
// end ;
63813: GO 63737
63815: POP
63816: POP
// end ;
63817: LD_VAR 0 2
63821: RET
// export function GetBaseMaterials ( base ) ; begin
63822: LD_INT 0
63824: PPUSH
// result := [ 0 , 0 , 0 ] ;
63825: LD_ADDR_VAR 0 2
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: ST_TO_ADDR
// if not base then
63844: LD_VAR 0 1
63848: NOT
63849: IFFALSE 63853
// exit ;
63851: GO 63902
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63853: LD_ADDR_VAR 0 2
63857: PUSH
63858: LD_VAR 0 1
63862: PPUSH
63863: LD_INT 1
63865: PPUSH
63866: CALL_OW 275
63870: PUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: LD_INT 2
63878: PPUSH
63879: CALL_OW 275
63883: PUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_INT 3
63891: PPUSH
63892: CALL_OW 275
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// end ;
63902: LD_VAR 0 2
63906: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63907: LD_INT 0
63909: PPUSH
63910: PPUSH
// result := array ;
63911: LD_ADDR_VAR 0 3
63915: PUSH
63916: LD_VAR 0 1
63920: ST_TO_ADDR
// if size > 0 then
63921: LD_VAR 0 2
63925: PUSH
63926: LD_INT 0
63928: GREATER
63929: IFFALSE 63975
// for i := array downto size do
63931: LD_ADDR_VAR 0 4
63935: PUSH
63936: DOUBLE
63937: LD_VAR 0 1
63941: INC
63942: ST_TO_ADDR
63943: LD_VAR 0 2
63947: PUSH
63948: FOR_DOWNTO
63949: IFFALSE 63973
// result := Delete ( result , result ) ;
63951: LD_ADDR_VAR 0 3
63955: PUSH
63956: LD_VAR 0 3
63960: PPUSH
63961: LD_VAR 0 3
63965: PPUSH
63966: CALL_OW 3
63970: ST_TO_ADDR
63971: GO 63948
63973: POP
63974: POP
// end ;
63975: LD_VAR 0 3
63979: RET
// export function ComExit ( unit ) ; var tmp ; begin
63980: LD_INT 0
63982: PPUSH
63983: PPUSH
// if not IsInUnit ( unit ) then
63984: LD_VAR 0 1
63988: PPUSH
63989: CALL_OW 310
63993: NOT
63994: IFFALSE 63998
// exit ;
63996: GO 64058
// tmp := IsInUnit ( unit ) ;
63998: LD_ADDR_VAR 0 3
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL_OW 310
64012: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64013: LD_VAR 0 3
64017: PPUSH
64018: CALL_OW 247
64022: PUSH
64023: LD_INT 2
64025: EQUAL
64026: IFFALSE 64039
// ComExitVehicle ( unit ) else
64028: LD_VAR 0 1
64032: PPUSH
64033: CALL_OW 121
64037: GO 64048
// ComExitBuilding ( unit ) ;
64039: LD_VAR 0 1
64043: PPUSH
64044: CALL_OW 122
// result := tmp ;
64048: LD_ADDR_VAR 0 2
64052: PUSH
64053: LD_VAR 0 3
64057: ST_TO_ADDR
// end ;
64058: LD_VAR 0 2
64062: RET
// export function ComExitAll ( units ) ; var i ; begin
64063: LD_INT 0
64065: PPUSH
64066: PPUSH
// if not units then
64067: LD_VAR 0 1
64071: NOT
64072: IFFALSE 64076
// exit ;
64074: GO 64102
// for i in units do
64076: LD_ADDR_VAR 0 3
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: FOR_IN
64087: IFFALSE 64100
// ComExit ( i ) ;
64089: LD_VAR 0 3
64093: PPUSH
64094: CALL 63980 0 1
64098: GO 64086
64100: POP
64101: POP
// end ;
64102: LD_VAR 0 2
64106: RET
// export function ResetHc ; begin
64107: LD_INT 0
64109: PPUSH
// InitHc ;
64110: CALL_OW 19
// hc_importance := 0 ;
64114: LD_ADDR_OWVAR 32
64118: PUSH
64119: LD_INT 0
64121: ST_TO_ADDR
// end ;
64122: LD_VAR 0 1
64126: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64127: LD_INT 0
64129: PPUSH
64130: PPUSH
64131: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64132: LD_ADDR_VAR 0 6
64136: PUSH
64137: LD_VAR 0 1
64141: PUSH
64142: LD_VAR 0 3
64146: PLUS
64147: PUSH
64148: LD_INT 2
64150: DIV
64151: ST_TO_ADDR
// if _x < 0 then
64152: LD_VAR 0 6
64156: PUSH
64157: LD_INT 0
64159: LESS
64160: IFFALSE 64177
// _x := _x * - 1 ;
64162: LD_ADDR_VAR 0 6
64166: PUSH
64167: LD_VAR 0 6
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: MUL
64176: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64177: LD_ADDR_VAR 0 7
64181: PUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_VAR 0 4
64191: PLUS
64192: PUSH
64193: LD_INT 2
64195: DIV
64196: ST_TO_ADDR
// if _y < 0 then
64197: LD_VAR 0 7
64201: PUSH
64202: LD_INT 0
64204: LESS
64205: IFFALSE 64222
// _y := _y * - 1 ;
64207: LD_ADDR_VAR 0 7
64211: PUSH
64212: LD_VAR 0 7
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: MUL
64221: ST_TO_ADDR
// result := [ _x , _y ] ;
64222: LD_ADDR_VAR 0 5
64226: PUSH
64227: LD_VAR 0 6
64231: PUSH
64232: LD_VAR 0 7
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// end ;
64241: LD_VAR 0 5
64245: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64246: LD_INT 0
64248: PPUSH
64249: PPUSH
64250: PPUSH
64251: PPUSH
// task := GetTaskList ( unit ) ;
64252: LD_ADDR_VAR 0 7
64256: PUSH
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 437
64266: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64267: LD_VAR 0 7
64271: NOT
64272: PUSH
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_VAR 0 2
64282: PPUSH
64283: CALL_OW 308
64287: NOT
64288: AND
64289: IFFALSE 64293
// exit ;
64291: GO 64411
// if IsInArea ( unit , area ) then
64293: LD_VAR 0 1
64297: PPUSH
64298: LD_VAR 0 2
64302: PPUSH
64303: CALL_OW 308
64307: IFFALSE 64325
// begin ComMoveToArea ( unit , goAway ) ;
64309: LD_VAR 0 1
64313: PPUSH
64314: LD_VAR 0 3
64318: PPUSH
64319: CALL_OW 113
// exit ;
64323: GO 64411
// end ; if task [ 1 ] [ 1 ] <> M then
64325: LD_VAR 0 7
64329: PUSH
64330: LD_INT 1
64332: ARRAY
64333: PUSH
64334: LD_INT 1
64336: ARRAY
64337: PUSH
64338: LD_STRING M
64340: NONEQUAL
64341: IFFALSE 64345
// exit ;
64343: GO 64411
// x := task [ 1 ] [ 2 ] ;
64345: LD_ADDR_VAR 0 5
64349: PUSH
64350: LD_VAR 0 7
64354: PUSH
64355: LD_INT 1
64357: ARRAY
64358: PUSH
64359: LD_INT 2
64361: ARRAY
64362: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64363: LD_ADDR_VAR 0 6
64367: PUSH
64368: LD_VAR 0 7
64372: PUSH
64373: LD_INT 1
64375: ARRAY
64376: PUSH
64377: LD_INT 3
64379: ARRAY
64380: ST_TO_ADDR
// if InArea ( x , y , area ) then
64381: LD_VAR 0 5
64385: PPUSH
64386: LD_VAR 0 6
64390: PPUSH
64391: LD_VAR 0 2
64395: PPUSH
64396: CALL_OW 309
64400: IFFALSE 64411
// ComStop ( unit ) ;
64402: LD_VAR 0 1
64406: PPUSH
64407: CALL_OW 141
// end ;
64411: LD_VAR 0 4
64415: RET
// export function Abs ( value ) ; begin
64416: LD_INT 0
64418: PPUSH
// result := value ;
64419: LD_ADDR_VAR 0 2
64423: PUSH
64424: LD_VAR 0 1
64428: ST_TO_ADDR
// if value < 0 then
64429: LD_VAR 0 1
64433: PUSH
64434: LD_INT 0
64436: LESS
64437: IFFALSE 64454
// result := value * - 1 ;
64439: LD_ADDR_VAR 0 2
64443: PUSH
64444: LD_VAR 0 1
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: MUL
64453: ST_TO_ADDR
// end ;
64454: LD_VAR 0 2
64458: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64459: LD_INT 0
64461: PPUSH
64462: PPUSH
64463: PPUSH
64464: PPUSH
64465: PPUSH
64466: PPUSH
64467: PPUSH
64468: PPUSH
// if not unit or not building then
64469: LD_VAR 0 1
64473: NOT
64474: PUSH
64475: LD_VAR 0 2
64479: NOT
64480: OR
64481: IFFALSE 64485
// exit ;
64483: GO 64711
// x := GetX ( building ) ;
64485: LD_ADDR_VAR 0 4
64489: PUSH
64490: LD_VAR 0 2
64494: PPUSH
64495: CALL_OW 250
64499: ST_TO_ADDR
// y := GetY ( building ) ;
64500: LD_ADDR_VAR 0 6
64504: PUSH
64505: LD_VAR 0 2
64509: PPUSH
64510: CALL_OW 251
64514: ST_TO_ADDR
// d := GetDir ( building ) ;
64515: LD_ADDR_VAR 0 8
64519: PUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: CALL_OW 254
64529: ST_TO_ADDR
// r := 4 ;
64530: LD_ADDR_VAR 0 9
64534: PUSH
64535: LD_INT 4
64537: ST_TO_ADDR
// for i := 1 to 5 do
64538: LD_ADDR_VAR 0 10
64542: PUSH
64543: DOUBLE
64544: LD_INT 1
64546: DEC
64547: ST_TO_ADDR
64548: LD_INT 5
64550: PUSH
64551: FOR_TO
64552: IFFALSE 64709
// begin _x := ShiftX ( x , d , r + i ) ;
64554: LD_ADDR_VAR 0 5
64558: PUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: LD_VAR 0 8
64568: PPUSH
64569: LD_VAR 0 9
64573: PUSH
64574: LD_VAR 0 10
64578: PLUS
64579: PPUSH
64580: CALL_OW 272
64584: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64585: LD_ADDR_VAR 0 7
64589: PUSH
64590: LD_VAR 0 6
64594: PPUSH
64595: LD_VAR 0 8
64599: PPUSH
64600: LD_VAR 0 9
64604: PUSH
64605: LD_VAR 0 10
64609: PLUS
64610: PPUSH
64611: CALL_OW 273
64615: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64616: LD_VAR 0 5
64620: PPUSH
64621: LD_VAR 0 7
64625: PPUSH
64626: CALL_OW 488
64630: PUSH
64631: LD_VAR 0 5
64635: PPUSH
64636: LD_VAR 0 7
64640: PPUSH
64641: CALL_OW 428
64645: PPUSH
64646: CALL_OW 247
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: IN
64661: NOT
64662: AND
64663: IFFALSE 64707
// begin ComMoveXY ( unit , _x , _y ) ;
64665: LD_VAR 0 1
64669: PPUSH
64670: LD_VAR 0 5
64674: PPUSH
64675: LD_VAR 0 7
64679: PPUSH
64680: CALL_OW 111
// result := [ _x , _y ] ;
64684: LD_ADDR_VAR 0 3
64688: PUSH
64689: LD_VAR 0 5
64693: PUSH
64694: LD_VAR 0 7
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// exit ;
64703: POP
64704: POP
64705: GO 64711
// end ; end ;
64707: GO 64551
64709: POP
64710: POP
// end ;
64711: LD_VAR 0 3
64715: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64716: LD_INT 0
64718: PPUSH
64719: PPUSH
64720: PPUSH
// result := 0 ;
64721: LD_ADDR_VAR 0 3
64725: PUSH
64726: LD_INT 0
64728: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64729: LD_VAR 0 1
64733: PUSH
64734: LD_INT 0
64736: LESS
64737: PUSH
64738: LD_VAR 0 1
64742: PUSH
64743: LD_INT 8
64745: GREATER
64746: OR
64747: PUSH
64748: LD_VAR 0 2
64752: PUSH
64753: LD_INT 0
64755: LESS
64756: OR
64757: PUSH
64758: LD_VAR 0 2
64762: PUSH
64763: LD_INT 8
64765: GREATER
64766: OR
64767: IFFALSE 64771
// exit ;
64769: GO 64846
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64771: LD_ADDR_VAR 0 4
64775: PUSH
64776: LD_INT 22
64778: PUSH
64779: LD_VAR 0 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PPUSH
64788: CALL_OW 69
64792: PUSH
64793: FOR_IN
64794: IFFALSE 64844
// begin un := UnitShoot ( i ) ;
64796: LD_ADDR_VAR 0 5
64800: PUSH
64801: LD_VAR 0 4
64805: PPUSH
64806: CALL_OW 504
64810: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64811: LD_VAR 0 5
64815: PPUSH
64816: CALL_OW 255
64820: PUSH
64821: LD_VAR 0 1
64825: EQUAL
64826: IFFALSE 64842
// begin result := un ;
64828: LD_ADDR_VAR 0 3
64832: PUSH
64833: LD_VAR 0 5
64837: ST_TO_ADDR
// exit ;
64838: POP
64839: POP
64840: GO 64846
// end ; end ;
64842: GO 64793
64844: POP
64845: POP
// end ;
64846: LD_VAR 0 3
64850: RET
// export function GetCargoBay ( units ) ; begin
64851: LD_INT 0
64853: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64854: LD_ADDR_VAR 0 2
64858: PUSH
64859: LD_VAR 0 1
64863: PPUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 34
64869: PUSH
64870: LD_INT 12
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 34
64879: PUSH
64880: LD_INT 51
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 34
64889: PUSH
64890: LD_INT 32
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 34
64899: PUSH
64900: LD_EXP 94
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: PPUSH
64916: CALL_OW 72
64920: ST_TO_ADDR
// end ; end_of_file
64921: LD_VAR 0 2
64925: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64926: LD_VAR 0 1
64930: PUSH
64931: LD_INT 200
64933: DOUBLE
64934: GREATEREQUAL
64935: IFFALSE 64943
64937: LD_INT 299
64939: DOUBLE
64940: LESSEQUAL
64941: IFTRUE 64945
64943: GO 64977
64945: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64946: LD_VAR 0 1
64950: PPUSH
64951: LD_VAR 0 2
64955: PPUSH
64956: LD_VAR 0 3
64960: PPUSH
64961: LD_VAR 0 4
64965: PPUSH
64966: LD_VAR 0 5
64970: PPUSH
64971: CALL 23227 0 5
64975: GO 65054
64977: LD_INT 300
64979: DOUBLE
64980: GREATEREQUAL
64981: IFFALSE 64989
64983: LD_INT 399
64985: DOUBLE
64986: LESSEQUAL
64987: IFTRUE 64991
64989: GO 65053
64991: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64992: LD_VAR 0 1
64996: PPUSH
64997: LD_VAR 0 2
65001: PPUSH
65002: LD_VAR 0 3
65006: PPUSH
65007: LD_VAR 0 4
65011: PPUSH
65012: LD_VAR 0 5
65016: PPUSH
65017: LD_VAR 0 6
65021: PPUSH
65022: LD_VAR 0 7
65026: PPUSH
65027: LD_VAR 0 8
65031: PPUSH
65032: LD_VAR 0 9
65036: PPUSH
65037: LD_VAR 0 10
65041: PPUSH
65042: LD_VAR 0 11
65046: PPUSH
65047: CALL 21115 0 11
65051: GO 65054
65053: POP
// end ;
65054: PPOPN 11
65056: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65057: LD_VAR 0 1
65061: PPUSH
65062: LD_VAR 0 2
65066: PPUSH
65067: LD_VAR 0 3
65071: PPUSH
65072: LD_VAR 0 4
65076: PPUSH
65077: LD_VAR 0 5
65081: PPUSH
65082: CALL 23209 0 5
// end ; end_of_file
65086: PPOPN 5
65088: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65089: LD_VAR 0 1
65093: PPUSH
65094: LD_VAR 0 2
65098: PPUSH
65099: LD_VAR 0 3
65103: PPUSH
65104: LD_VAR 0 4
65108: PPUSH
65109: LD_VAR 0 5
65113: PPUSH
65114: LD_VAR 0 6
65118: PPUSH
65119: CALL 9923 0 6
// end ;
65123: PPOPN 6
65125: END
