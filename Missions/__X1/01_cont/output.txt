// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 217 0 10
// InitVariables ;
  38: CALL 73 0 0
// if debug then
  42: LD_EXP 2
  46: IFFALSE 56
// Difficulty := 4 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// PrepareRussian ;
  56: CALL 1470 0 0
// PrepareArabian ;
  60: CALL 1033 0 0
// PrepareHeike ;
  64: CALL 968 0 0
// Action ;
  68: CALL 3015 0 0
// end ;
  72: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// debug := false ;
  76: LD_ADDR_EXP 2
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// missionStarted := false ;
  84: LD_ADDR_EXP 1
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetJohnny := false ;
  92: LD_ADDR_EXP 3
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// johnnySaved := false ;
 100: LD_ADDR_EXP 4
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// dogTag := [ ] ;
 108: LD_ADDR_EXP 5
 112: PUSH
 113: EMPTY
 114: ST_TO_ADDR
// dogTagFound := false ;
 115: LD_ADDR_EXP 6
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// mercenariesSpotted := false ;
 123: LD_ADDR_EXP 7
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// olafSpotted := false ;
 131: LD_ADDR_EXP 8
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// russianSpotted := false ;
 139: LD_ADDR_EXP 9
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// mercenariesQuestReady := false ;
 147: LD_ADDR_EXP 10
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// mercenariesQuestDone := false ;
 155: LD_ADDR_EXP 11
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// lastObjectiveActive := false ;
 163: LD_ADDR_EXP 12
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// prisonFound := false ;
 171: LD_ADDR_EXP 13
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// heikeHurt := false ;
 179: LD_ADDR_EXP 14
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// animalCounter := 0 ;
 187: LD_ADDR_EXP 15
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// end ;
 195: LD_VAR 0 1
 199: RET
// every 0 0$1 trigger debug do
 200: LD_EXP 2
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// FogOff ( 2 ) ; end_of_file
 209: LD_INT 2
 211: PPUSH
 212: CALL_OW 344
 216: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
// uc_side = 0 ;
 222: LD_ADDR_OWVAR 20
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// uc_nation = 0 ;
 230: LD_ADDR_OWVAR 21
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// InitHc ;
 238: CALL_OW 19
// InitVc ;
 242: CALL_OW 20
// if mastodonts then
 246: LD_VAR 0 6
 250: IFFALSE 317
// for i = 1 to mastodonts do
 252: LD_ADDR_VAR 0 12
 256: PUSH
 257: DOUBLE
 258: LD_INT 1
 260: DEC
 261: ST_TO_ADDR
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_TO
 268: IFFALSE 315
// begin vc_chassis := 31 ;
 270: LD_ADDR_OWVAR 37
 274: PUSH
 275: LD_INT 31
 277: ST_TO_ADDR
// vc_control := control_rider ;
 278: LD_ADDR_OWVAR 38
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// animal := CreateVehicle ;
 286: LD_ADDR_VAR 0 13
 290: PUSH
 291: CALL_OW 45
 295: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 296: LD_VAR 0 13
 300: PPUSH
 301: LD_VAR 0 9
 305: PPUSH
 306: LD_INT 0
 308: PPUSH
 309: CALL_OW 49
// end ;
 313: GO 267
 315: POP
 316: POP
// if horses then
 317: LD_VAR 0 5
 321: IFFALSE 388
// for i = 1 to horses do
 323: LD_ADDR_VAR 0 12
 327: PUSH
 328: DOUBLE
 329: LD_INT 1
 331: DEC
 332: ST_TO_ADDR
 333: LD_VAR 0 5
 337: PUSH
 338: FOR_TO
 339: IFFALSE 386
// begin hc_class := 21 ;
 341: LD_ADDR_OWVAR 28
 345: PUSH
 346: LD_INT 21
 348: ST_TO_ADDR
// hc_gallery :=  ;
 349: LD_ADDR_OWVAR 33
 353: PUSH
 354: LD_STRING 
 356: ST_TO_ADDR
// animal := CreateHuman ;
 357: LD_ADDR_VAR 0 13
 361: PUSH
 362: CALL_OW 44
 366: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 367: LD_VAR 0 13
 371: PPUSH
 372: LD_VAR 0 9
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 49
// end ;
 384: GO 338
 386: POP
 387: POP
// if birds then
 388: LD_VAR 0 1
 392: IFFALSE 459
// for i = 1 to birds do
 394: LD_ADDR_VAR 0 12
 398: PUSH
 399: DOUBLE
 400: LD_INT 1
 402: DEC
 403: ST_TO_ADDR
 404: LD_VAR 0 1
 408: PUSH
 409: FOR_TO
 410: IFFALSE 457
// begin hc_class = 18 ;
 412: LD_ADDR_OWVAR 28
 416: PUSH
 417: LD_INT 18
 419: ST_TO_ADDR
// hc_gallery =  ;
 420: LD_ADDR_OWVAR 33
 424: PUSH
 425: LD_STRING 
 427: ST_TO_ADDR
// animal := CreateHuman ;
 428: LD_ADDR_VAR 0 13
 432: PUSH
 433: CALL_OW 44
 437: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 438: LD_VAR 0 13
 442: PPUSH
 443: LD_VAR 0 9
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: CALL_OW 49
// end ;
 455: GO 409
 457: POP
 458: POP
// if tigers then
 459: LD_VAR 0 2
 463: IFFALSE 547
// for i = 1 to tigers do
 465: LD_ADDR_VAR 0 12
 469: PUSH
 470: DOUBLE
 471: LD_INT 1
 473: DEC
 474: ST_TO_ADDR
 475: LD_VAR 0 2
 479: PUSH
 480: FOR_TO
 481: IFFALSE 545
// begin hc_class = class_tiger ;
 483: LD_ADDR_OWVAR 28
 487: PUSH
 488: LD_INT 14
 490: ST_TO_ADDR
// hc_gallery =  ;
 491: LD_ADDR_OWVAR 33
 495: PUSH
 496: LD_STRING 
 498: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 499: LD_ADDR_OWVAR 35
 503: PUSH
 504: LD_INT 7
 506: NEG
 507: PPUSH
 508: LD_INT 7
 510: PPUSH
 511: CALL_OW 12
 515: ST_TO_ADDR
// animal := CreateHuman ;
 516: LD_ADDR_VAR 0 13
 520: PUSH
 521: CALL_OW 44
 525: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 526: LD_VAR 0 13
 530: PPUSH
 531: LD_VAR 0 9
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 480
 545: POP
 546: POP
// if apemans then
 547: LD_VAR 0 3
 551: IFFALSE 674
// for i = 1 to apemans do
 553: LD_ADDR_VAR 0 12
 557: PUSH
 558: DOUBLE
 559: LD_INT 1
 561: DEC
 562: ST_TO_ADDR
 563: LD_VAR 0 3
 567: PUSH
 568: FOR_TO
 569: IFFALSE 672
// begin hc_class = class_apeman ;
 571: LD_ADDR_OWVAR 28
 575: PUSH
 576: LD_INT 12
 578: ST_TO_ADDR
// hc_gallery =  ;
 579: LD_ADDR_OWVAR 33
 583: PUSH
 584: LD_STRING 
 586: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 587: LD_ADDR_OWVAR 35
 591: PUSH
 592: LD_INT 5
 594: NEG
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: CALL_OW 12
 603: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 604: LD_ADDR_OWVAR 31
 608: PUSH
 609: LD_INT 1
 611: PPUSH
 612: LD_INT 3
 614: PPUSH
 615: CALL_OW 12
 619: PUSH
 620: LD_INT 1
 622: PPUSH
 623: LD_INT 3
 625: PPUSH
 626: CALL_OW 12
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: ST_TO_ADDR
// animal := CreateHuman ;
 643: LD_ADDR_VAR 0 13
 647: PUSH
 648: CALL_OW 44
 652: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 653: LD_VAR 0 13
 657: PPUSH
 658: LD_VAR 0 9
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: CALL_OW 49
// end ;
 670: GO 568
 672: POP
 673: POP
// if enchidnas then
 674: LD_VAR 0 4
 678: IFFALSE 745
// for i = 1 to enchidnas do
 680: LD_ADDR_VAR 0 12
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_VAR 0 4
 694: PUSH
 695: FOR_TO
 696: IFFALSE 743
// begin hc_class = 13 ;
 698: LD_ADDR_OWVAR 28
 702: PUSH
 703: LD_INT 13
 705: ST_TO_ADDR
// hc_gallery =  ;
 706: LD_ADDR_OWVAR 33
 710: PUSH
 711: LD_STRING 
 713: ST_TO_ADDR
// animal := CreateHuman ;
 714: LD_ADDR_VAR 0 13
 718: PUSH
 719: CALL_OW 44
 723: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 724: LD_VAR 0 13
 728: PPUSH
 729: LD_VAR 0 9
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL_OW 49
// end ;
 741: GO 695
 743: POP
 744: POP
// if fishes then
 745: LD_VAR 0 7
 749: IFFALSE 816
// for i = 1 to fishes do
 751: LD_ADDR_VAR 0 12
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 7
 765: PUSH
 766: FOR_TO
 767: IFFALSE 814
// begin hc_class = class_fish ;
 769: LD_ADDR_OWVAR 28
 773: PUSH
 774: LD_INT 20
 776: ST_TO_ADDR
// hc_gallery =  ;
 777: LD_ADDR_OWVAR 33
 781: PUSH
 782: LD_STRING 
 784: ST_TO_ADDR
// animal := CreateHuman ;
 785: LD_ADDR_VAR 0 13
 789: PUSH
 790: CALL_OW 44
 794: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 795: LD_VAR 0 13
 799: PPUSH
 800: LD_VAR 0 10
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 49
// end ;
 812: GO 766
 814: POP
 815: POP
// if frogs then
 816: LD_VAR 0 8
 820: IFFALSE 887
// for i := 1 to frogs do
 822: LD_ADDR_VAR 0 12
 826: PUSH
 827: DOUBLE
 828: LD_INT 1
 830: DEC
 831: ST_TO_ADDR
 832: LD_VAR 0 8
 836: PUSH
 837: FOR_TO
 838: IFFALSE 885
// begin hc_class := class_frog ;
 840: LD_ADDR_OWVAR 28
 844: PUSH
 845: LD_INT 19
 847: ST_TO_ADDR
// hc_gallery :=  ;
 848: LD_ADDR_OWVAR 33
 852: PUSH
 853: LD_STRING 
 855: ST_TO_ADDR
// animal := CreateHuman ;
 856: LD_ADDR_VAR 0 13
 860: PUSH
 861: CALL_OW 44
 865: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 866: LD_VAR 0 13
 870: PPUSH
 871: LD_VAR 0 10
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: CALL_OW 49
// end ;
 883: GO 837
 885: POP
 886: POP
// end ;
 887: LD_VAR 0 11
 891: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
// if not observer or not unit then
 897: LD_VAR 0 1
 901: NOT
 902: IFTRUE 911
 904: PUSH
 905: LD_VAR 0 2
 909: NOT
 910: OR
 911: IFFALSE 915
// exit ;
 913: GO 963
// if not See ( GetSide ( observer ) , unit ) then
 915: LD_VAR 0 1
 919: PPUSH
 920: CALL_OW 255
 924: PPUSH
 925: LD_VAR 0 2
 929: PPUSH
 930: CALL_OW 292
 934: NOT
 935: IFFALSE 939
// exit ;
 937: GO 963
// result := GetDistUnits ( observer , unit ) < 12 ;
 939: LD_ADDR_VAR 0 3
 943: PUSH
 944: LD_VAR 0 1
 948: PPUSH
 949: LD_VAR 0 2
 953: PPUSH
 954: CALL_OW 296
 958: PUSH
 959: LD_INT 12
 961: LESS
 962: ST_TO_ADDR
// end ; end_of_file
 963: LD_VAR 0 3
 967: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 968: LD_INT 0
 970: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 971: LD_INT 66
 973: PPUSH
 974: LD_INT 26
 976: PPUSH
 977: CALL_OW 86
// uc_side := 2 ;
 981: LD_ADDR_OWVAR 20
 985: PUSH
 986: LD_INT 2
 988: ST_TO_ADDR
// uc_nation := 2 ;
 989: LD_ADDR_OWVAR 21
 993: PUSH
 994: LD_INT 2
 996: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 997: LD_ADDR_EXP 16
1001: PUSH
1002: LD_STRING Heike
1004: PPUSH
1005: CALL_OW 25
1009: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
1010: LD_EXP 16
1014: PPUSH
1015: LD_INT 66
1017: PPUSH
1018: LD_INT 26
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: CALL_OW 48
// end ;
1028: LD_VAR 0 1
1032: RET
// export function PrepareArabian ; begin
1033: LD_INT 0
1035: PPUSH
// uc_side := 5 ;
1036: LD_ADDR_OWVAR 20
1040: PUSH
1041: LD_INT 5
1043: ST_TO_ADDR
// uc_nation := 2 ;
1044: LD_ADDR_OWVAR 21
1048: PUSH
1049: LD_INT 2
1051: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1052: LD_ADDR_EXP 17
1056: PUSH
1057: LD_STRING Olaf
1059: PPUSH
1060: CALL_OW 25
1064: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1065: LD_EXP 17
1069: PPUSH
1070: LD_INT 39
1072: PPUSH
1073: LD_INT 52
1075: PPUSH
1076: LD_INT 0
1078: PPUSH
1079: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1083: LD_ADDR_EXP 18
1087: PUSH
1088: LD_STRING Givi
1090: PPUSH
1091: CALL_OW 25
1095: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1096: LD_EXP 18
1100: PPUSH
1101: LD_INT 55
1103: PPUSH
1104: LD_INT 90
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1114: LD_EXP 18
1118: PPUSH
1119: LD_INT 53
1121: PPUSH
1122: LD_INT 89
1124: PPUSH
1125: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1129: LD_ADDR_EXP 19
1133: PUSH
1134: LD_STRING Mike
1136: PPUSH
1137: CALL_OW 25
1141: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1142: LD_EXP 19
1146: PPUSH
1147: LD_INT 53
1149: PPUSH
1150: LD_INT 87
1152: PPUSH
1153: LD_INT 0
1155: PPUSH
1156: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1160: LD_EXP 19
1164: PPUSH
1165: LD_INT 53
1167: PPUSH
1168: LD_INT 89
1170: PPUSH
1171: CALL_OW 118
// end ;
1175: LD_VAR 0 1
1179: RET
// export function PreparePrison ; begin
1180: LD_INT 0
1182: PPUSH
// uc_side := 5 ;
1183: LD_ADDR_OWVAR 20
1187: PUSH
1188: LD_INT 5
1190: ST_TO_ADDR
// uc_nation := 2 ;
1191: LD_ADDR_OWVAR 21
1195: PUSH
1196: LD_INT 2
1198: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1199: LD_ADDR_EXP 20
1203: PUSH
1204: LD_STRING Kamil
1206: PPUSH
1207: CALL_OW 25
1211: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1212: LD_OWVAR 67
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 4
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: IN
1227: IFFALSE 1243
// PlaceHumanInUnit ( Kamil , northDep ) else
1229: LD_EXP 20
1233: PPUSH
1234: LD_INT 2
1236: PPUSH
1237: CALL_OW 52
1241: GO 1255
// PlaceHumanInUnit ( Kamil , southDep ) ;
1243: LD_EXP 20
1247: PPUSH
1248: LD_INT 8
1250: PPUSH
1251: CALL_OW 52
// uc_side := 3 ;
1255: LD_ADDR_OWVAR 20
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// uc_nation := 3 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1271: LD_INT 0
1273: PPUSH
1274: LD_INT 2
1276: PPUSH
1277: LD_INT 1
1279: PPUSH
1280: CALL_OW 380
// if Difficulty > 1 then
1284: LD_OWVAR 67
1288: PUSH
1289: LD_INT 1
1291: GREATER
1292: IFFALSE 1308
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1294: CALL_OW 44
1298: PPUSH
1299: LD_INT 8
1301: PPUSH
1302: CALL_OW 52
1306: GO 1320
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1308: CALL_OW 44
1312: PPUSH
1313: LD_INT 2
1315: PPUSH
1316: CALL_OW 52
// end ; end_of_file
1320: LD_VAR 0 1
1324: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1325: LD_INT 0
1327: PPUSH
1328: PPUSH
1329: PPUSH
// uc_side := 3 ;
1330: LD_ADDR_OWVAR 20
1334: PUSH
1335: LD_INT 3
1337: ST_TO_ADDR
// uc_nation := 3 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 3
1345: ST_TO_ADDR
// russianPatrol := [ ] ;
1346: LD_ADDR_EXP 21
1350: PUSH
1351: EMPTY
1352: ST_TO_ADDR
// for i = 1 to 3 do
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: DOUBLE
1359: LD_INT 1
1361: DEC
1362: ST_TO_ADDR
1363: LD_INT 3
1365: PUSH
1366: FOR_TO
1367: IFFALSE 1463
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1369: LD_INT 1
1371: PPUSH
1372: LD_INT 1
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1382: LD_ADDR_OWVAR 29
1386: PUSH
1387: LD_INT 9
1389: PUSH
1390: LD_INT 10
1392: PPUSH
1393: LD_INT 11
1395: PPUSH
1396: CALL_OW 12
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: ST_TO_ADDR
// un := CreateHuman ;
1405: LD_ADDR_VAR 0 3
1409: PUSH
1410: CALL_OW 44
1414: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1415: LD_ADDR_EXP 21
1419: PUSH
1420: LD_EXP 21
1424: PPUSH
1425: LD_VAR 0 2
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: CALL_OW 1
1439: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1440: LD_VAR 0 3
1444: PPUSH
1445: LD_INT 26
1447: PPUSH
1448: LD_INT 22
1450: PPUSH
1451: LD_INT 4
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 50
// end ;
1461: GO 1366
1463: POP
1464: POP
// end ;
1465: LD_VAR 0 1
1469: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1470: LD_INT 0
1472: PPUSH
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
// uc_side := 3 ;
1477: LD_ADDR_OWVAR 20
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// uc_nation := 3 ;
1485: LD_ADDR_OWVAR 21
1489: PUSH
1490: LD_INT 3
1492: ST_TO_ADDR
// russianForces := [ ] ;
1493: LD_ADDR_EXP 23
1497: PUSH
1498: EMPTY
1499: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1500: LD_ADDR_EXP 22
1504: PUSH
1505: EMPTY
1506: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1507: LD_ADDR_VAR 0 5
1511: PUSH
1512: LD_INT 11
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 517
1522: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: LD_INT 21
1530: PUSH
1531: LD_INT 0
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: PUSH
1543: FOR_IN
1544: IFFALSE 1588
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1546: LD_VAR 0 2
1550: PPUSH
1551: CALL_OW 274
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_INT 200
1561: PPUSH
1562: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1566: LD_VAR 0 2
1570: PPUSH
1571: CALL_OW 274
1575: PPUSH
1576: LD_INT 2
1578: PPUSH
1579: LD_INT 10
1581: PPUSH
1582: CALL_OW 277
// end ;
1586: GO 1543
1588: POP
1589: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: LD_INT 30
1597: PUSH
1598: LD_INT 31
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PPUSH
1605: CALL_OW 69
1609: PUSH
1610: FOR_IN
1611: IFFALSE 1685
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_OWVAR 67
1623: PUSH
1624: LD_INT 1
1626: MINUS
1627: PPUSH
1628: CALL_OW 380
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1642: LD_VAR 0 4
1646: PPUSH
1647: LD_VAR 0 2
1651: PPUSH
1652: CALL_OW 254
1656: PUSH
1657: LD_INT 3
1659: MINUS
1660: PUSH
1661: LD_INT 6
1663: MOD
1664: PPUSH
1665: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1669: LD_VAR 0 4
1673: PPUSH
1674: LD_VAR 0 2
1678: PPUSH
1679: CALL_OW 52
// end ;
1683: GO 1610
1685: POP
1686: POP
// for i = 1 to 5 do
1687: LD_ADDR_VAR 0 2
1691: PUSH
1692: DOUBLE
1693: LD_INT 1
1695: DEC
1696: ST_TO_ADDR
1697: LD_INT 5
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1783
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_OWVAR 67
1713: PPUSH
1714: CALL_OW 380
// un := CreateHuman ;
1718: LD_ADDR_VAR 0 4
1722: PUSH
1723: CALL_OW 44
1727: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1728: LD_VAR 0 4
1732: PPUSH
1733: LD_INT 9
1735: PPUSH
1736: LD_INT 0
1738: PPUSH
1739: CALL_OW 49
// ComHold ( un ) ;
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1752: LD_ADDR_EXP 23
1756: PUSH
1757: LD_EXP 23
1761: PPUSH
1762: LD_EXP 23
1766: PUSH
1767: LD_INT 1
1769: PLUS
1770: PPUSH
1771: LD_VAR 0 4
1775: PPUSH
1776: CALL_OW 1
1780: ST_TO_ADDR
// end ;
1781: GO 1700
1783: POP
1784: POP
// for i := 1 to Difficulty + 1 do
1785: LD_ADDR_VAR 0 2
1789: PUSH
1790: DOUBLE
1791: LD_INT 1
1793: DEC
1794: ST_TO_ADDR
1795: LD_OWVAR 67
1799: PUSH
1800: LD_INT 1
1802: PLUS
1803: PUSH
1804: FOR_TO
1805: IFFALSE 1905
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1807: LD_INT 0
1809: PPUSH
1810: LD_INT 1
1812: PPUSH
1813: LD_OWVAR 67
1817: PPUSH
1818: CALL_OW 380
// un := CreateHuman ;
1822: LD_ADDR_VAR 0 4
1826: PUSH
1827: CALL_OW 44
1831: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1832: LD_VAR 0 4
1836: PPUSH
1837: LD_VAR 0 5
1841: PUSH
1842: LD_INT 1
1844: ARRAY
1845: PUSH
1846: LD_VAR 0 2
1850: ARRAY
1851: PPUSH
1852: LD_VAR 0 5
1856: PUSH
1857: LD_INT 2
1859: ARRAY
1860: PUSH
1861: LD_VAR 0 2
1865: ARRAY
1866: PPUSH
1867: LD_INT 0
1869: PPUSH
1870: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1874: LD_ADDR_EXP 22
1878: PUSH
1879: LD_EXP 22
1883: PPUSH
1884: LD_EXP 22
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 4
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1804
1905: POP
1906: POP
// vc_chassis := ru_medium_wheeled ;
1907: LD_ADDR_OWVAR 37
1911: PUSH
1912: LD_INT 21
1914: ST_TO_ADDR
// vc_engine := engine_combustion ;
1915: LD_ADDR_OWVAR 39
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// vc_control := control_manual ;
1923: LD_ADDR_OWVAR 38
1927: PUSH
1928: LD_INT 1
1930: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1931: LD_ADDR_OWVAR 40
1935: PUSH
1936: LD_INT 42
1938: ST_TO_ADDR
// russianTank := CreateVehicle ;
1939: LD_ADDR_EXP 24
1943: PUSH
1944: CALL_OW 45
1948: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1949: LD_EXP 24
1953: PPUSH
1954: LD_INT 121
1956: PPUSH
1957: LD_INT 25
1959: PPUSH
1960: LD_INT 0
1962: PPUSH
1963: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1967: LD_INT 0
1969: PPUSH
1970: LD_INT 1
1972: PPUSH
1973: LD_OWVAR 67
1977: PPUSH
1978: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1982: CALL_OW 44
1986: PPUSH
1987: LD_EXP 24
1991: PPUSH
1992: CALL_OW 52
// if Difficulty > 1 then
1996: LD_OWVAR 67
2000: PUSH
2001: LD_INT 1
2003: GREATER
2004: IFFALSE 2090
// begin bc_type := b_breastwork ;
2006: LD_ADDR_OWVAR 42
2010: PUSH
2011: LD_INT 31
2013: ST_TO_ADDR
// bc_level := 2 ;
2014: LD_ADDR_OWVAR 43
2018: PUSH
2019: LD_INT 2
2021: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2022: LD_ADDR_VAR 0 3
2026: PUSH
2027: LD_INT 143
2029: PPUSH
2030: LD_INT 88
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 47
2040: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2041: LD_INT 0
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_INT 2
2049: PPUSH
2050: CALL_OW 380
// un := CreateHuman ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: CALL_OW 44
2063: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2064: LD_VAR 0 4
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2076: LD_VAR 0 4
2080: PPUSH
2081: LD_VAR 0 3
2085: PPUSH
2086: CALL_OW 52
// end ; if Difficulty > 2 then
2090: LD_OWVAR 67
2094: PUSH
2095: LD_INT 2
2097: GREATER
2098: IFFALSE 2154
// begin for i := 1 to 2 do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: DOUBLE
2106: LD_INT 1
2108: DEC
2109: ST_TO_ADDR
2110: LD_INT 2
2112: PUSH
2113: FOR_TO
2114: IFFALSE 2152
// begin PrepareHuman ( false , 1 , 2 ) ;
2116: LD_INT 0
2118: PPUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2129: CALL_OW 44
2133: PPUSH
2134: LD_INT 156
2136: PPUSH
2137: LD_INT 108
2139: PPUSH
2140: LD_INT 3
2142: PPUSH
2143: LD_INT 0
2145: PPUSH
2146: CALL_OW 50
// end ;
2150: GO 2113
2152: POP
2153: POP
// end ; end ;
2154: LD_VAR 0 1
2158: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2159: LD_EXP 22
2163: IFFALSE 2471
2165: GO 2167
2167: DISABLE
2168: LD_INT 0
2170: PPUSH
2171: PPUSH
2172: PPUSH
2173: PPUSH
2174: PPUSH
2175: PPUSH
// begin enable ;
2176: ENABLE
// for i in russianForestPatrol do
2177: LD_ADDR_VAR 0 1
2181: PUSH
2182: LD_EXP 22
2186: PUSH
2187: FOR_IN
2188: IFFALSE 2469
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_INT 53
2197: PPUSH
2198: LD_INT 89
2200: PPUSH
2201: CALL_OW 297
2205: PUSH
2206: LD_INT 30
2208: LESS
2209: IFFALSE 2228
// begin ComMoveXY ( i , 114 , 80 ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_INT 114
2218: PPUSH
2219: LD_INT 80
2221: PPUSH
2222: CALL_OW 111
// continue ;
2226: GO 2187
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_EXP 22
2237: PUSH
2238: LD_VAR 0 1
2242: DIFF
2243: PPUSH
2244: LD_VAR 0 1
2248: PPUSH
2249: CALL_OW 74
2253: ST_TO_ADDR
// if tmp then
2254: LD_VAR 0 6
2258: IFFALSE 2328
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_VAR 0 6
2269: PPUSH
2270: CALL_OW 296
2274: PUSH
2275: LD_INT 14
2277: LESS
2278: IFFALSE 2295
2280: PUSH
2281: LD_VAR 0 6
2285: PPUSH
2286: CALL_OW 256
2290: PUSH
2291: LD_INT 999
2293: LESS
2294: AND
2295: IFFALSE 2328
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2297: LD_VAR 0 1
2301: PPUSH
2302: LD_VAR 0 6
2306: PPUSH
2307: CALL_OW 250
2311: PPUSH
2312: LD_VAR 0 6
2316: PPUSH
2317: CALL_OW 251
2321: PPUSH
2322: CALL_OW 114
// break ;
2326: GO 2469
// end ; if not HasTask ( i ) then
2328: LD_VAR 0 1
2332: PPUSH
2333: CALL_OW 314
2337: NOT
2338: IFFALSE 2467
// begin d := rand ( 0 , 5 ) ;
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: LD_INT 0
2347: PPUSH
2348: LD_INT 5
2350: PPUSH
2351: CALL_OW 12
2355: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2356: LD_ADDR_VAR 0 3
2360: PUSH
2361: LD_INT 3
2363: PPUSH
2364: LD_INT 7
2366: PPUSH
2367: CALL_OW 12
2371: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2372: LD_ADDR_VAR 0 4
2376: PUSH
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL_OW 250
2386: PPUSH
2387: LD_VAR 0 2
2391: PPUSH
2392: LD_VAR 0 3
2396: PPUSH
2397: CALL_OW 272
2401: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2402: LD_ADDR_VAR 0 5
2406: PUSH
2407: LD_VAR 0 1
2411: PPUSH
2412: CALL_OW 251
2416: PPUSH
2417: LD_VAR 0 2
2421: PPUSH
2422: LD_VAR 0 3
2426: PPUSH
2427: CALL_OW 273
2431: ST_TO_ADDR
// if ValidHex ( x , y ) then
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_VAR 0 5
2441: PPUSH
2442: CALL_OW 488
2446: IFFALSE 2467
// ComAgressiveMove ( i , x , y ) ;
2448: LD_VAR 0 1
2452: PPUSH
2453: LD_VAR 0 4
2457: PPUSH
2458: LD_VAR 0 5
2462: PPUSH
2463: CALL_OW 114
// end ; end ;
2467: GO 2187
2469: POP
2470: POP
// end ;
2471: PPOPN 6
2473: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2474: LD_EXP 24
2478: PPUSH
2479: CALL_OW 302
2483: IFFALSE 2500
2485: PUSH
2486: LD_EXP 24
2490: PPUSH
2491: CALL_OW 255
2495: PUSH
2496: LD_INT 3
2498: EQUAL
2499: AND
2500: IFFALSE 2767
2502: GO 2504
2504: DISABLE
// begin enable ;
2505: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2506: LD_EXP 24
2510: PPUSH
2511: LD_INT 124
2513: PPUSH
2514: LD_INT 25
2516: PPUSH
2517: CALL_OW 307
2521: IFFALSE 2535
// SetFuel ( russianTank , 100 ) ;
2523: LD_EXP 24
2527: PPUSH
2528: LD_INT 100
2530: PPUSH
2531: CALL_OW 240
// if HasTask ( russianTank ) then
2535: LD_EXP 24
2539: PPUSH
2540: CALL_OW 314
2544: IFFALSE 2548
// exit ;
2546: GO 2767
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2548: LD_EXP 24
2552: PPUSH
2553: LD_INT 121
2555: PPUSH
2556: LD_INT 25
2558: PPUSH
2559: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 122
2570: PPUSH
2571: LD_INT 48
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 107
2597: PPUSH
2598: LD_INT 57
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 70
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 100
2624: PPUSH
2625: LD_INT 61
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 105
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 78
2651: PPUSH
2652: LD_INT 64
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 140
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 100
2678: PPUSH
2679: LD_INT 61
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 107
2705: PPUSH
2706: LD_INT 57
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 122
2732: PPUSH
2733: LD_INT 48
2735: PPUSH
2736: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2740: LD_EXP 24
2744: PPUSH
2745: LD_INT 70
2747: PPUSH
2748: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2752: LD_EXP 24
2756: PPUSH
2757: LD_INT 124
2759: PPUSH
2760: LD_INT 25
2762: PPUSH
2763: CALL_OW 171
// end ; end_of_file
2767: END
// export Johnny ; export function PrepareJohnny ; begin
2768: LD_INT 0
2770: PPUSH
// uc_side := 1 ;
2771: LD_ADDR_OWVAR 20
2775: PUSH
2776: LD_INT 1
2778: ST_TO_ADDR
// uc_nation := 1 ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_INT 1
2786: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2787: LD_ADDR_EXP 25
2791: PUSH
2792: LD_STRING Harris
2794: PPUSH
2795: CALL_OW 25
2799: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2800: LD_EXP 25
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2812: LD_EXP 25
2816: PPUSH
2817: LD_INT 8
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: CALL_OW 49
// ComCrawl ( Johnny ) ;
2827: LD_EXP 25
2831: PPUSH
2832: CALL_OW 137
// end ;
2836: LD_VAR 0 1
2840: RET
// export function PreparePatrolTank ; var veh , un ; begin
2841: LD_INT 0
2843: PPUSH
2844: PPUSH
2845: PPUSH
// uc_side := 1 ;
2846: LD_ADDR_OWVAR 20
2850: PUSH
2851: LD_INT 1
2853: ST_TO_ADDR
// uc_nation := 1 ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_INT 1
2861: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: CALL_OW 380
// un := CreateHuman ;
2875: LD_ADDR_VAR 0 3
2879: PUSH
2880: CALL_OW 44
2884: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2885: LD_ADDR_OWVAR 37
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// vc_engine := engine_combustion ;
2893: LD_ADDR_OWVAR 39
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// vc_control := control_manual ;
2901: LD_ADDR_OWVAR 38
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2909: LD_ADDR_OWVAR 40
2913: PUSH
2914: LD_INT 2
2916: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2917: LD_ADDR_OWVAR 41
2921: PUSH
2922: LD_INT 72
2924: PUSH
2925: LD_INT 54
2927: PUSH
2928: LD_INT 36
2930: PUSH
2931: LD_INT 30
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: LD_OWVAR 67
2944: ARRAY
2945: ST_TO_ADDR
// veh := CreateVehicle ;
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: CALL_OW 45
2955: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2956: LD_VAR 0 2
2960: PPUSH
2961: LD_INT 1
2963: PPUSH
2964: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2968: LD_VAR 0 2
2972: PPUSH
2973: LD_INT 31
2975: PPUSH
2976: LD_INT 58
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2986: LD_VAR 0 3
2990: PPUSH
2991: LD_VAR 0 2
2995: PPUSH
2996: CALL_OW 52
// result := un ;
3000: LD_ADDR_VAR 0 1
3004: PUSH
3005: LD_VAR 0 3
3009: ST_TO_ADDR
// end ; end_of_file
3010: LD_VAR 0 1
3014: RET
// export function Action ; begin
3015: LD_INT 0
3017: PPUSH
// InGameOn ;
3018: CALL_OW 8
// wait ( 0 0$4 ) ;
3022: LD_INT 140
3024: PPUSH
3025: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3029: LD_EXP 16
3033: PPUSH
3034: LD_STRING DH-start-1
3036: PPUSH
3037: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3041: LD_EXP 16
3045: PPUSH
3046: LD_INT 71
3048: PPUSH
3049: LD_INT 29
3051: PPUSH
3052: CALL_OW 111
// wait ( 0 0$4 ) ;
3056: LD_INT 140
3058: PPUSH
3059: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3063: LD_EXP 16
3067: PPUSH
3068: LD_INT 71
3070: PPUSH
3071: LD_INT 33
3073: PPUSH
3074: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3078: LD_EXP 16
3082: PPUSH
3083: LD_INT 71
3085: PPUSH
3086: LD_INT 34
3088: PPUSH
3089: CALL_OW 178
// wait ( 0 0$4 ) ;
3093: LD_INT 140
3095: PPUSH
3096: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3100: LD_EXP 16
3104: PPUSH
3105: LD_STRING DH-start-2
3107: PPUSH
3108: CALL_OW 88
// wait ( 0 0$4 ) ;
3112: LD_INT 140
3114: PPUSH
3115: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3119: LD_EXP 16
3123: PPUSH
3124: LD_INT 65
3126: PPUSH
3127: LD_INT 26
3129: PPUSH
3130: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3134: LD_EXP 16
3138: PPUSH
3139: LD_STRING DH-start-3
3141: PPUSH
3142: CALL_OW 88
// InGameOff ;
3146: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3150: LD_STRING O1_cont
3152: PPUSH
3153: CALL_OW 337
// SaveForQuickRestart ;
3157: CALL_OW 22
// missionStarted := true ;
3161: LD_ADDR_EXP 1
3165: PUSH
3166: LD_INT 1
3168: ST_TO_ADDR
// PrepareJohnny ;
3169: CALL 2768 0 0
// end ;
3173: LD_VAR 0 1
3177: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3178: LD_EXP 8
3182: NOT
3183: IFFALSE 3192
3185: PUSH
3186: LD_EXP 7
3190: NOT
3191: AND
3192: IFFALSE 3208
3194: PUSH
3195: LD_INT 2
3197: PPUSH
3198: LD_EXP 25
3202: PPUSH
3203: CALL_OW 292
3207: AND
3208: IFFALSE 3225
3210: PUSH
3211: LD_INT 3
3213: PPUSH
3214: LD_EXP 16
3218: PPUSH
3219: CALL_OW 292
3223: NOT
3224: AND
3225: IFFALSE 3259
3227: PUSH
3228: LD_INT 22
3230: PUSH
3231: LD_INT 1
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 69
3242: PPUSH
3243: LD_EXP 16
3247: PPUSH
3248: CALL_OW 74
3252: PUSH
3253: LD_EXP 25
3257: EQUAL
3258: AND
3259: IFFALSE 3277
3261: PUSH
3262: LD_INT 1
3264: PPUSH
3265: LD_INT 2
3267: PPUSH
3268: CALL_OW 81
3272: PUSH
3273: LD_INT 0
3275: EQUAL
3276: AND
3277: IFFALSE 4248
3279: GO 3281
3281: DISABLE
// begin InGameOn ;
3282: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3286: LD_EXP 16
3290: PPUSH
3291: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3295: LD_EXP 25
3299: PPUSH
3300: LD_STRING DJ-ambush-1
3302: PPUSH
3303: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3307: LD_INT 10
3309: PPUSH
3310: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3314: LD_EXP 16
3318: PPUSH
3319: LD_EXP 25
3323: PPUSH
3324: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3328: LD_EXP 16
3332: PPUSH
3333: LD_STRING DH-ambush-1
3335: PPUSH
3336: CALL_OW 88
// wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// ComWalk ( Johnny ) ;
3347: LD_EXP 25
3351: PPUSH
3352: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3370: LD_EXP 16
3374: PPUSH
3375: LD_EXP 25
3379: PPUSH
3380: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3384: LD_INT 35
3386: PPUSH
3387: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3391: LD_EXP 25
3395: PPUSH
3396: LD_EXP 16
3400: PPUSH
3401: CALL_OW 296
3405: PUSH
3406: LD_INT 4
3408: LESS
3409: IFFALSE 3384
// ComTurnUnit ( Johnny , Heike ) ;
3411: LD_EXP 25
3415: PPUSH
3416: LD_EXP 16
3420: PPUSH
3421: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3425: LD_EXP 25
3429: PPUSH
3430: LD_STRING DJ-ambush-2
3432: PPUSH
3433: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3437: LD_EXP 16
3441: PPUSH
3442: LD_STRING DH-ambush-2
3444: PPUSH
3445: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3449: LD_EXP 25
3453: PPUSH
3454: LD_STRING DJ-ambush-3
3456: PPUSH
3457: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3461: LD_EXP 16
3465: PPUSH
3466: LD_STRING DH-ambush-3
3468: PPUSH
3469: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3473: LD_EXP 25
3477: PPUSH
3478: LD_STRING DJ-ambush-4
3480: PPUSH
3481: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3485: LD_EXP 16
3489: PPUSH
3490: LD_INT 39
3492: PPUSH
3493: LD_INT 22
3495: PPUSH
3496: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3500: LD_EXP 16
3504: PPUSH
3505: LD_STRING DH-ambush-4
3507: PPUSH
3508: CALL_OW 88
// PrepareRussianPatrol ;
3512: CALL 1325 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3516: LD_INT 39
3518: PPUSH
3519: LD_INT 22
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: LD_INT 12
3527: NEG
3528: PPUSH
3529: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3533: LD_INT 39
3535: PPUSH
3536: LD_INT 22
3538: PPUSH
3539: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3543: LD_EXP 21
3547: PPUSH
3548: LD_INT 39
3550: PPUSH
3551: LD_INT 23
3553: PPUSH
3554: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3558: LD_EXP 16
3562: PUSH
3563: LD_EXP 25
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: LD_INT 39
3574: PPUSH
3575: LD_INT 7
3577: PPUSH
3578: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3582: LD_EXP 16
3586: PUSH
3587: LD_EXP 25
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PPUSH
3596: LD_EXP 21
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3609: LD_EXP 21
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_STRING DR-ambush-5
3620: PPUSH
3621: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3625: LD_EXP 21
3629: PUSH
3630: LD_INT 2
3632: ARRAY
3633: PPUSH
3634: LD_STRING DR1-ambush-5
3636: PPUSH
3637: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3641: LD_INT 35
3643: PPUSH
3644: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3648: LD_EXP 16
3652: PPUSH
3653: LD_INT 39
3655: PPUSH
3656: LD_INT 7
3658: PPUSH
3659: CALL_OW 297
3663: PUSH
3664: LD_INT 6
3666: LESS
3667: IFFALSE 3641
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_EXP 21
3678: PUSH
3679: LD_INT 1
3681: ARRAY
3682: PPUSH
3683: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3687: LD_EXP 25
3691: PPUSH
3692: LD_EXP 16
3696: PPUSH
3697: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3701: LD_EXP 25
3705: PPUSH
3706: LD_STRING DJ-ambush-6
3708: PPUSH
3709: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3713: LD_EXP 16
3717: PPUSH
3718: LD_STRING DH-ambush-6
3720: PPUSH
3721: CALL_OW 88
// InGameOff ;
3725: CALL_OW 9
// meetJohnny := true ;
3729: LD_ADDR_EXP 3
3733: PUSH
3734: LD_INT 1
3736: ST_TO_ADDR
// ComFree ( Johnny ) ;
3737: LD_EXP 25
3741: PPUSH
3742: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3746: LD_STRING O2_ambush_cont
3748: PPUSH
3749: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3753: LD_EXP 21
3757: PUSH
3758: LD_EXP 21
3762: ARRAY
3763: PPUSH
3764: LD_INT 29
3766: PPUSH
3767: LD_INT 15
3769: PPUSH
3770: CALL_OW 111
// wait ( 0 0$2 ) ;
3774: LD_INT 70
3776: PPUSH
3777: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3781: LD_INT 3
3783: PPUSH
3784: LD_EXP 16
3788: PPUSH
3789: CALL_OW 292
3793: NOT
3794: IFFALSE 3811
3796: PUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_EXP 25
3804: PPUSH
3805: CALL_OW 292
3809: NOT
3810: AND
3811: IFFALSE 3832
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3813: LD_EXP 21
3817: PUSH
3818: LD_INT 1
3820: ARRAY
3821: PPUSH
3822: LD_INT 58
3824: PPUSH
3825: LD_INT 32
3827: PPUSH
3828: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3832: LD_INT 1750
3834: PUSH
3835: LD_INT 1400
3837: PUSH
3838: LD_INT 1225
3840: PUSH
3841: LD_INT 1050
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: PUSH
3850: LD_OWVAR 67
3854: ARRAY
3855: PPUSH
3856: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3860: LD_EXP 21
3864: PPUSH
3865: LD_INT 43
3867: PPUSH
3868: LD_INT 13
3870: PPUSH
3871: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3875: LD_INT 35
3877: PPUSH
3878: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3882: LD_EXP 21
3886: NOT
3887: IFTRUE 3901
3889: PUSH
3890: LD_EXP 25
3894: PPUSH
3895: CALL_OW 302
3899: NOT
3900: OR
3901: IFFALSE 3875
// RemoveSeeing ( 39 , 22 , 2 ) ;
3903: LD_INT 39
3905: PPUSH
3906: LD_INT 22
3908: PPUSH
3909: LD_INT 2
3911: PPUSH
3912: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3916: LD_INT 1
3918: PPUSH
3919: LD_INT 2
3921: PPUSH
3922: CALL_OW 81
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 3934
// exit ;
3932: GO 4248
// if not IsOk ( Johnny ) then
3934: LD_EXP 25
3938: PPUSH
3939: CALL_OW 302
3943: NOT
3944: IFFALSE 3955
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3946: LD_STRING O2_ambush_out_cont
3948: PPUSH
3949: CALL_OW 337
// exit ;
3953: GO 4248
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3955: LD_EXP 16
3959: PPUSH
3960: LD_EXP 25
3964: PPUSH
3965: CALL_OW 296
3969: PUSH
3970: LD_INT 10
3972: GREATER
3973: IFFALSE 4034
// begin ComMoveUnit ( Johnny , Heike ) ;
3975: LD_EXP 25
3979: PPUSH
3980: LD_EXP 16
3984: PPUSH
3985: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3989: LD_INT 35
3991: PPUSH
3992: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 81
4006: PUSH
4007: LD_INT 2
4009: EQUAL
4010: IFFALSE 4014
// exit ;
4012: GO 4248
// until GetDistUnits ( Johnny , Heike ) < 6 ;
4014: LD_EXP 25
4018: PPUSH
4019: LD_EXP 16
4023: PPUSH
4024: CALL_OW 296
4028: PUSH
4029: LD_INT 6
4031: LESS
4032: IFFALSE 3989
// end ; CenterNowOnUnits ( Heike ) ;
4034: LD_EXP 16
4038: PPUSH
4039: CALL_OW 87
// InGameOn ;
4043: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4047: LD_EXP 16
4051: PPUSH
4052: LD_EXP 25
4056: PPUSH
4057: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4061: LD_EXP 25
4065: PPUSH
4066: LD_EXP 16
4070: PPUSH
4071: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4075: LD_EXP 25
4079: PPUSH
4080: LD_STRING DJ-thanks-1
4082: PPUSH
4083: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4087: LD_EXP 16
4091: PPUSH
4092: LD_STRING DH-thanks-1
4094: PPUSH
4095: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4099: LD_EXP 25
4103: PPUSH
4104: LD_STRING DJ-thanks-2
4106: PPUSH
4107: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4111: LD_EXP 25
4115: PPUSH
4116: LD_INT 4
4118: PPUSH
4119: LD_INT 3
4121: PPUSH
4122: CALL_OW 111
// wait ( 0 0$1 ) ;
4126: LD_INT 35
4128: PPUSH
4129: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2
4140: PPUSH
4141: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4145: LD_INT 35
4147: PPUSH
4148: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4152: LD_INT 2
4154: PPUSH
4155: LD_EXP 25
4159: PPUSH
4160: CALL_OW 292
4164: NOT
4165: IFFALSE 4145
// Say ( Heike , DH-thanks-2a ) ;
4167: LD_EXP 16
4171: PPUSH
4172: LD_STRING DH-thanks-2a
4174: PPUSH
4175: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4179: LD_EXP 25
4183: PPUSH
4184: CALL_OW 64
// InGameOff ;
4188: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4192: LD_STRING O2_ambush_out_cont
4194: PPUSH
4195: CALL_OW 337
// johnnySaved := true ;
4199: LD_ADDR_EXP 4
4203: PUSH
4204: LD_INT 1
4206: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4207: LD_EXP 16
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: LD_INT 600
4217: PPUSH
4218: CALL_OW 492
// if IsOk ( Olaf ) then
4222: LD_EXP 17
4226: PPUSH
4227: CALL_OW 302
4231: IFFALSE 4248
// ComMoveXY ( Olaf , 44 , 25 ) ;
4233: LD_EXP 17
4237: PPUSH
4238: LD_INT 44
4240: PPUSH
4241: LD_INT 25
4243: PPUSH
4244: CALL_OW 111
// end ;
4248: END
// every 0 0$1 trigger russianPatrol do var i ;
4249: LD_EXP 21
4253: IFFALSE 4323
4255: GO 4257
4257: DISABLE
4258: LD_INT 0
4260: PPUSH
// begin enable ;
4261: ENABLE
// for i in russianPatrol do
4262: LD_ADDR_VAR 0 1
4266: PUSH
4267: LD_EXP 21
4271: PUSH
4272: FOR_IN
4273: IFFALSE 4321
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 256
4284: PUSH
4285: LD_INT 1000
4287: LESS
4288: IFFALSE 4302
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 314
4300: NOT
4301: AND
4302: IFFALSE 4319
// ComAgressiveMove ( i , 42 , 12 ) ;
4304: LD_VAR 0 1
4308: PPUSH
4309: LD_INT 42
4311: PPUSH
4312: LD_INT 12
4314: PPUSH
4315: CALL_OW 114
4319: GO 4272
4321: POP
4322: POP
// end ;
4323: PPOPN 1
4325: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 2
4331: PPUSH
4332: CALL_OW 81
4336: PUSH
4337: LD_INT 2
4339: EQUAL
4340: IFFALSE 4353
4342: PUSH
4343: LD_EXP 25
4347: PPUSH
4348: CALL_OW 302
4352: AND
4353: IFFALSE 4370
4355: GO 4357
4357: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4358: LD_EXP 25
4362: PPUSH
4363: LD_STRING DJ-fire-1
4365: PPUSH
4366: CALL_OW 88
4370: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4371: LD_EXP 7
4375: NOT
4376: IFFALSE 4399
4378: PUSH
4379: LD_EXP 23
4383: PPUSH
4384: LD_INT 101
4386: PUSH
4387: LD_INT 2
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PPUSH
4394: CALL_OW 72
4398: AND
4399: IFFALSE 4519
4401: GO 4403
4403: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4404: LD_EXP 16
4408: PPUSH
4409: CALL_OW 87
// DialogueOn ;
4413: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4417: LD_EXP 16
4421: PPUSH
4422: LD_STRING DH-see-enemy-patrol-1
4424: PPUSH
4425: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4429: LD_EXP 23
4433: PPUSH
4434: LD_INT 26
4436: PUSH
4437: LD_INT 1
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 72
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: LD_STRING DR-see-enemy-patrol-1
4455: PPUSH
4456: CALL_OW 88
// DialogueOff ;
4460: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4464: LD_EXP 23
4468: PPUSH
4469: LD_INT 66
4471: PPUSH
4472: LD_INT 22
4474: PPUSH
4475: CALL_OW 114
// wait ( 0 0$10 ) ;
4479: LD_INT 350
4481: PPUSH
4482: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4486: LD_EXP 23
4490: PPUSH
4491: LD_INT 175
4493: PPUSH
4494: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4498: LD_EXP 23
4502: PPUSH
4503: LD_INT 9
4505: PPUSH
4506: CALL_OW 173
// AddComFree ( russianForces ) ;
4510: LD_EXP 23
4514: PPUSH
4515: CALL_OW 199
// end ;
4519: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4520: LD_EXP 23
4524: PPUSH
4525: LD_INT 3
4527: PUSH
4528: LD_INT 24
4530: PUSH
4531: LD_INT 960
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 72
4546: IFFALSE 4799
4548: GO 4550
4550: DISABLE
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_EXP 23
4587: PPUSH
4588: LD_INT 1
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 24
4596: PUSH
4597: LD_INT 960
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 24
4606: PUSH
4607: LD_INT 500
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PPUSH
4623: CALL_OW 72
4627: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4628: LD_ADDR_VAR 0 4
4632: PUSH
4633: LD_EXP 23
4637: PPUSH
4638: LD_INT 3
4640: PUSH
4641: LD_INT 24
4643: PUSH
4644: LD_INT 500
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PPUSH
4655: CALL_OW 72
4659: ST_TO_ADDR
// if not tmp then
4660: LD_VAR 0 2
4664: NOT
4665: IFFALSE 4669
// exit ;
4667: GO 4799
// for i in tmp2 do
4669: LD_ADDR_VAR 0 1
4673: PUSH
4674: LD_VAR 0 3
4678: PUSH
4679: FOR_IN
4680: IFFALSE 4738
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4682: LD_VAR 0 1
4686: PPUSH
4687: LD_VAR 0 2
4691: PPUSH
4692: LD_VAR 0 1
4696: PPUSH
4697: CALL_OW 74
4701: PPUSH
4702: CALL_OW 296
4706: PUSH
4707: LD_INT 10
4709: LESS
4710: IFFALSE 4736
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 2
4721: PPUSH
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 74
4731: PPUSH
4732: CALL_OW 115
4736: GO 4679
4738: POP
4739: POP
// if tmp3 then
4740: LD_VAR 0 4
4744: IFFALSE 4799
// for i in tmp3 do
4746: LD_ADDR_VAR 0 1
4750: PUSH
4751: LD_VAR 0 4
4755: PUSH
4756: FOR_IN
4757: IFFALSE 4797
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4759: LD_VAR 0 1
4763: PPUSH
4764: LD_INT 119
4766: PPUSH
4767: LD_INT 21
4769: PPUSH
4770: CALL_OW 297
4774: PUSH
4775: LD_INT 10
4777: GREATER
4778: IFFALSE 4795
// ComMoveXY ( i , 119 , 21 ) ;
4780: LD_VAR 0 1
4784: PPUSH
4785: LD_INT 119
4787: PPUSH
4788: LD_INT 21
4790: PPUSH
4791: CALL_OW 111
4795: GO 4756
4797: POP
4798: POP
// end ;
4799: PPOPN 4
4801: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4802: LD_EXP 1
4806: IFFALSE 4848
4808: PUSH
4809: LD_EXP 16
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 14
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 69
4828: PPUSH
4829: LD_EXP 16
4833: PPUSH
4834: CALL_OW 74
4838: PPUSH
4839: CALL_OW 296
4843: PUSH
4844: LD_INT 6
4846: LESS
4847: AND
4848: IFFALSE 4879
4850: GO 4852
4852: DISABLE
// begin animalCounter := animalCounter + 1 ;
4853: LD_ADDR_EXP 15
4857: PUSH
4858: LD_EXP 15
4862: PUSH
4863: LD_INT 1
4865: PLUS
4866: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4867: LD_EXP 16
4871: PPUSH
4872: LD_STRING DH-tiger-1
4874: PPUSH
4875: CALL_OW 88
// end ;
4879: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4880: LD_EXP 1
4884: IFFALSE 4926
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 12
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-ape-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4958: LD_EXP 1
4962: IFFALSE 5004
4964: PUSH
4965: LD_EXP 16
4969: PPUSH
4970: LD_INT 25
4972: PUSH
4973: LD_INT 18
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PPUSH
4985: LD_EXP 16
4989: PPUSH
4990: CALL_OW 74
4994: PPUSH
4995: CALL_OW 296
4999: PUSH
5000: LD_INT 6
5002: LESS
5003: AND
5004: IFFALSE 5035
5006: GO 5008
5008: DISABLE
// begin animalCounter := animalCounter + 1 ;
5009: LD_ADDR_EXP 15
5013: PUSH
5014: LD_EXP 15
5018: PUSH
5019: LD_INT 1
5021: PLUS
5022: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
5023: LD_EXP 16
5027: PPUSH
5028: LD_STRING DH-bird-1
5030: PPUSH
5031: CALL_OW 88
// end ;
5035: END
// every 0 0$2 trigger animalCounter = 3 do
5036: LD_EXP 15
5040: PUSH
5041: LD_INT 3
5043: EQUAL
5044: IFFALSE 5056
5046: GO 5048
5048: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5049: LD_STRING ACH_ZOOLIGST
5051: PPUSH
5052: CALL_OW 543
5056: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5057: LD_INT 22
5059: PUSH
5060: LD_INT 2
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 101
5069: PUSH
5070: LD_INT 3
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 69
5085: IFFALSE 5098
5087: GO 5089
5089: DISABLE
// russianSpotted := true ;
5090: LD_ADDR_EXP 9
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
5098: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5099: LD_EXP 16
5103: PPUSH
5104: LD_INT 22
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: LD_INT 21
5116: PUSH
5117: LD_INT 3
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PPUSH
5128: CALL_OW 69
5132: PPUSH
5133: LD_EXP 16
5137: PPUSH
5138: CALL_OW 74
5142: PPUSH
5143: CALL_OW 296
5147: PUSH
5148: LD_INT 8
5150: LESS
5151: IFFALSE 5168
5153: GO 5155
5155: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5156: LD_EXP 16
5160: PPUSH
5161: LD_STRING DH-enemy-base
5163: PPUSH
5164: CALL_OW 88
5168: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5169: LD_EXP 25
5173: PPUSH
5174: CALL_OW 305
5178: NOT
5179: IFFALSE 5188
5181: PUSH
5182: LD_EXP 6
5186: NOT
5187: AND
5188: IFFALSE 5196
5190: PUSH
5191: LD_EXP 5
5195: AND
5196: IFFALSE 5205
5198: PUSH
5199: LD_EXP 12
5203: NOT
5204: AND
5205: IFFALSE 5214
5207: PUSH
5208: LD_EXP 11
5212: NOT
5213: AND
5214: IFFALSE 5392
5216: GO 5218
5218: DISABLE
5219: LD_INT 0
5221: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5222: LD_INT 35
5224: PPUSH
5225: CALL_OW 67
// for i in dogTag do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: LD_EXP 5
5238: PUSH
5239: FOR_IN
5240: IFFALSE 5289
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5242: LD_EXP 16
5246: PPUSH
5247: LD_VAR 0 1
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: LD_VAR 0 1
5260: PUSH
5261: LD_INT 2
5263: ARRAY
5264: PPUSH
5265: CALL_OW 297
5269: PUSH
5270: LD_INT 3
5272: LESS
5273: IFFALSE 5287
// begin dogTagFound := i ;
5275: LD_ADDR_EXP 6
5279: PUSH
5280: LD_VAR 0 1
5284: ST_TO_ADDR
// break ;
5285: GO 5289
// end ;
5287: GO 5239
5289: POP
5290: POP
// until dogTagFound ;
5291: LD_EXP 6
5295: IFFALSE 5222
// CenterNowOnUnits ( Heike ) ;
5297: LD_EXP 16
5301: PPUSH
5302: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5306: LD_EXP 16
5310: PPUSH
5311: LD_EXP 6
5315: PUSH
5316: LD_INT 1
5318: ARRAY
5319: PPUSH
5320: LD_EXP 6
5324: PUSH
5325: LD_INT 2
5327: ARRAY
5328: PPUSH
5329: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5333: LD_STRING ACH_DOGTAG
5335: PPUSH
5336: CALL_OW 543
// if mercenariesQuestReady then
5340: LD_EXP 10
5344: IFFALSE 5360
// Say ( Heike , DH-dogtag-found-quest ) else
5346: LD_EXP 16
5350: PPUSH
5351: LD_STRING DH-dogtag-found-quest
5353: PPUSH
5354: CALL_OW 88
5358: GO 5392
// if meetJohnny then
5360: LD_EXP 3
5364: IFFALSE 5380
// Say ( Heike , DH-dogtag-found ) else
5366: LD_EXP 16
5370: PPUSH
5371: LD_STRING DH-dogtag-found
5373: PPUSH
5374: CALL_OW 88
5378: GO 5392
// Say ( Heike , DH-dogtag-found-no-american ) ;
5380: LD_EXP 16
5384: PPUSH
5385: LD_STRING DH-dogtag-found-no-american
5387: PPUSH
5388: CALL_OW 88
// end ;
5392: PPOPN 1
5394: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5395: LD_EXP 8
5399: NOT
5400: IFFALSE 5409
5402: PUSH
5403: LD_EXP 7
5407: NOT
5408: AND
5409: IFFALSE 5425
5411: PUSH
5412: LD_INT 5
5414: PPUSH
5415: LD_EXP 16
5419: PPUSH
5420: CALL_OW 292
5424: AND
5425: IFFALSE 5447
5427: PUSH
5428: LD_EXP 16
5432: PPUSH
5433: LD_EXP 17
5437: PPUSH
5438: CALL_OW 296
5442: PUSH
5443: LD_INT 8
5445: LESS
5446: AND
5447: IFFALSE 5841
5449: GO 5451
5451: DISABLE
// begin olafSpotted := true ;
5452: LD_ADDR_EXP 8
5456: PUSH
5457: LD_INT 1
5459: ST_TO_ADDR
// if HasTask ( Olaf ) then
5460: LD_EXP 17
5464: PPUSH
5465: CALL_OW 314
5469: IFFALSE 5480
// ComStop ( Olaf ) ;
5471: LD_EXP 17
5475: PPUSH
5476: CALL_OW 141
// InGameOn ;
5480: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5484: LD_EXP 17
5488: PPUSH
5489: LD_EXP 16
5493: PPUSH
5494: CALL_OW 296
5498: PUSH
5499: LD_INT 8
5501: GREATER
5502: IFFALSE 5518
// ComMoveUnit ( Olaf , Heike ) ;
5504: LD_EXP 17
5508: PPUSH
5509: LD_EXP 16
5513: PPUSH
5514: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5518: LD_INT 35
5520: PPUSH
5521: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_EXP 16
5534: PPUSH
5535: CALL_OW 296
5539: PUSH
5540: LD_INT 8
5542: LESSEQUAL
5543: IFFALSE 5518
// ComTurnUnit ( Heike , Olaf ) ;
5545: LD_EXP 16
5549: PPUSH
5550: LD_EXP 17
5554: PPUSH
5555: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5559: LD_EXP 17
5563: PPUSH
5564: LD_EXP 16
5568: PPUSH
5569: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5573: LD_INT 18
5575: PPUSH
5576: CALL_OW 67
// DialogueOn ;
5580: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5584: LD_EXP 17
5588: PPUSH
5589: LD_STRING DO-olaf-1
5591: PPUSH
5592: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5596: LD_EXP 16
5600: PPUSH
5601: LD_STRING DH-olaf-1
5603: PPUSH
5604: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5608: LD_EXP 17
5612: PPUSH
5613: LD_STRING DO-olaf-2
5615: PPUSH
5616: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5620: LD_EXP 16
5624: PPUSH
5625: LD_STRING DH-olaf-2
5627: PPUSH
5628: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-3
5639: PPUSH
5640: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5644: LD_EXP 17
5648: PPUSH
5649: LD_STRING DO-olaf-4
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5656: LD_EXP 16
5660: PPUSH
5661: LD_STRING DH-olaf-4
5663: PPUSH
5664: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING DO-olaf-5
5675: PPUSH
5676: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5680: LD_EXP 16
5684: PPUSH
5685: LD_STRING DH-olaf-5
5687: PPUSH
5688: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5692: LD_EXP 17
5696: PPUSH
5697: LD_STRING DO-olaf-6
5699: PPUSH
5700: CALL_OW 88
// if russianSpotted or johnnySaved then
5704: LD_EXP 9
5708: IFTRUE 5716
5710: PUSH
5711: LD_EXP 4
5715: OR
5716: IFFALSE 5744
// begin Say ( Heike , DH-olaf-6a ) ;
5718: LD_EXP 16
5722: PPUSH
5723: LD_STRING DH-olaf-6a
5725: PPUSH
5726: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5730: LD_EXP 17
5734: PPUSH
5735: LD_STRING DO-olaf-7a
5737: PPUSH
5738: CALL_OW 88
// end else
5742: GO 5768
// begin Say ( Heike , DH-olaf-6b ) ;
5744: LD_EXP 16
5748: PPUSH
5749: LD_STRING DH-olaf-6b
5751: PPUSH
5752: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5756: LD_EXP 17
5760: PPUSH
5761: LD_STRING DO-olaf-7b
5763: PPUSH
5764: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5768: LD_EXP 17
5772: PPUSH
5773: LD_STRING DO-olaf-8
5775: PPUSH
5776: CALL_OW 88
// DialogueOff ;
5780: CALL_OW 7
// InGameOff ;
5784: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5788: LD_STRING O3_camp_cont
5790: PPUSH
5791: CALL_OW 337
// if not johnnySaved then
5795: LD_EXP 4
5799: NOT
5800: IFFALSE 5811
// KillUnit ( Johnny ) ;
5802: LD_EXP 25
5806: PPUSH
5807: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5811: LD_EXP 17
5815: PPUSH
5816: LD_INT 52
5818: PPUSH
5819: LD_INT 90
5821: PPUSH
5822: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5826: LD_EXP 17
5830: PPUSH
5831: LD_INT 53
5833: PPUSH
5834: LD_INT 89
5836: PPUSH
5837: CALL_OW 178
// end ;
5841: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5842: LD_EXP 8
5846: NOT
5847: IFFALSE 5869
5849: PUSH
5850: LD_EXP 16
5854: PPUSH
5855: LD_EXP 18
5859: PPUSH
5860: CALL_OW 296
5864: PUSH
5865: LD_INT 36
5867: LESS
5868: AND
5869: IFFALSE 5889
5871: GO 5873
5873: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5874: LD_EXP 17
5878: PPUSH
5879: LD_INT 39
5881: PPUSH
5882: LD_INT 71
5884: PPUSH
5885: CALL_OW 111
5889: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , tmp , driver , tank ;
5890: LD_EXP 7
5894: NOT
5895: IFFALSE 5927
5897: PUSH
5898: LD_INT 2
5900: PPUSH
5901: LD_EXP 19
5905: PPUSH
5906: CALL_OW 292
5910: IFTRUE 5926
5912: PUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_EXP 18
5920: PPUSH
5921: CALL_OW 292
5925: OR
5926: AND
5927: IFFALSE 7340
5929: GO 5931
5931: DISABLE
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin if not johnnySaved then
5938: LD_EXP 4
5942: NOT
5943: IFFALSE 5954
// KillUnit ( Johnny ) ;
5945: LD_EXP 25
5949: PPUSH
5950: CALL_OW 66
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , Heike , 30 ] ] ) ;
5954: LD_ADDR_VAR 0 2
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 91
5971: PUSH
5972: LD_EXP 16
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: ST_TO_ADDR
// if tmp then
5994: LD_VAR 0 2
5998: IFFALSE 6041
// begin for i in tmp do
6000: LD_ADDR_VAR 0 1
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: FOR_IN
6011: IFFALSE 6039
// begin ComStop ( i ) ;
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 141
// AddComMoveXY ( i , 85 , 20 ) ;
6022: LD_VAR 0 1
6026: PPUSH
6027: LD_INT 85
6029: PPUSH
6030: LD_INT 20
6032: PPUSH
6033: CALL_OW 171
// end ;
6037: GO 6010
6039: POP
6040: POP
// end ; mercenariesSpotted := true ;
6041: LD_ADDR_EXP 7
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
6049: LD_STRING O4_camp_cont
6051: PPUSH
6052: CALL_OW 337
// InGameOn ;
6056: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
6060: LD_INT 53
6062: PPUSH
6063: LD_INT 89
6065: PPUSH
6066: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
6070: LD_INT 53
6072: PPUSH
6073: LD_INT 89
6075: PPUSH
6076: LD_INT 2
6078: PPUSH
6079: LD_INT 8
6081: NEG
6082: PPUSH
6083: CALL_OW 330
// if olafSpotted then
6087: LD_EXP 8
6091: IFFALSE 6209
// begin AddComTurnUnit ( Olaf , Heike ) ;
6093: LD_EXP 17
6097: PPUSH
6098: LD_EXP 16
6102: PPUSH
6103: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
6107: LD_EXP 16
6111: PPUSH
6112: LD_INT 51
6114: PPUSH
6115: LD_INT 86
6117: PPUSH
6118: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
6122: LD_EXP 16
6126: PPUSH
6127: LD_EXP 17
6131: PPUSH
6132: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
6136: LD_EXP 17
6140: PPUSH
6141: LD_STRING DO-camp-1
6143: PPUSH
6144: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6148: LD_EXP 18
6152: PUSH
6153: LD_EXP 19
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: LD_EXP 16
6166: PPUSH
6167: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
6171: LD_EXP 18
6175: PPUSH
6176: LD_STRING DG-camp-1
6178: PPUSH
6179: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6183: LD_EXP 16
6187: PPUSH
6188: LD_STRING DH-camp-1
6190: PPUSH
6191: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_STRING DO-camp-2
6202: PPUSH
6203: CALL_OW 88
// end else
6207: GO 6604
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6209: LD_EXP 16
6213: PPUSH
6214: LD_INT 51
6216: PPUSH
6217: LD_INT 86
6219: PPUSH
6220: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6224: LD_EXP 16
6228: PPUSH
6229: LD_EXP 18
6233: PPUSH
6234: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6238: LD_EXP 18
6242: PUSH
6243: LD_EXP 19
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: LD_EXP 16
6256: PPUSH
6257: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6261: LD_EXP 18
6265: PPUSH
6266: LD_STRING DG-camp-1a
6268: PPUSH
6269: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6273: LD_EXP 16
6277: PPUSH
6278: LD_STRING DH-camp-1a
6280: PPUSH
6281: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6292: LD_EXP 19
6296: PPUSH
6297: LD_EXP 17
6301: PPUSH
6302: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6306: LD_EXP 19
6310: PPUSH
6311: LD_STRING DM-camp-1a
6313: PPUSH
6314: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6318: LD_EXP 17
6322: PPUSH
6323: LD_INT 52
6325: PPUSH
6326: LD_INT 90
6328: PPUSH
6329: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6333: LD_EXP 19
6337: PPUSH
6338: LD_EXP 16
6342: PPUSH
6343: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6347: LD_EXP 18
6351: PPUSH
6352: LD_STRING DG-camp-2a
6354: PPUSH
6355: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6359: LD_EXP 16
6363: PPUSH
6364: LD_STRING DH-camp-2a
6366: PPUSH
6367: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6371: LD_EXP 19
6375: PPUSH
6376: LD_STRING DM-camp-2a
6378: PPUSH
6379: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6383: LD_INT 35
6385: PPUSH
6386: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6390: LD_EXP 17
6394: PPUSH
6395: LD_EXP 16
6399: PPUSH
6400: CALL_OW 296
6404: PUSH
6405: LD_INT 10
6407: LESS
6408: IFFALSE 6383
// AddComTurnUnit ( Olaf , Heike ) ;
6410: LD_EXP 17
6414: PPUSH
6415: LD_EXP 16
6419: PPUSH
6420: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6424: LD_EXP 19
6428: PPUSH
6429: LD_EXP 16
6433: PPUSH
6434: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6438: LD_EXP 17
6442: PPUSH
6443: LD_STRING DO-camp-2a
6445: PPUSH
6446: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6450: LD_EXP 16
6454: PPUSH
6455: LD_EXP 17
6459: PPUSH
6460: CALL_OW 119
// if russianSpotted then
6464: LD_EXP 9
6468: IFFALSE 6508
// begin Say ( Heike , DH-camp-2aa ) ;
6470: LD_EXP 16
6474: PPUSH
6475: LD_STRING DH-camp-2aa
6477: PPUSH
6478: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6482: LD_EXP 18
6486: PPUSH
6487: LD_STRING DG-camp-2aa
6489: PPUSH
6490: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6494: LD_EXP 19
6498: PPUSH
6499: LD_STRING DM-camp-2aa
6501: PPUSH
6502: CALL_OW 88
// end else
6506: GO 6532
// begin Say ( Heike , DH-camp-2ab ) ;
6508: LD_EXP 16
6512: PPUSH
6513: LD_STRING DH-camp-2ab
6515: PPUSH
6516: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6520: LD_EXP 19
6524: PPUSH
6525: LD_STRING DM-camp-2ab
6527: PPUSH
6528: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6532: LD_EXP 16
6536: PPUSH
6537: LD_STRING DH-camp-3a
6539: PPUSH
6540: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6544: LD_EXP 17
6548: PPUSH
6549: LD_STRING DO-camp-3a
6551: PPUSH
6552: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6556: LD_EXP 18
6560: PPUSH
6561: LD_STRING DG-camp-3a
6563: PPUSH
6564: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6568: LD_EXP 16
6572: PPUSH
6573: LD_STRING DH-camp-4aa
6575: PPUSH
6576: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6580: LD_EXP 19
6584: PPUSH
6585: LD_STRING DM-camp-4aa
6587: PPUSH
6588: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6592: LD_EXP 17
6596: PPUSH
6597: LD_STRING DO-camp-4a
6599: PPUSH
6600: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6604: LD_EXP 17
6608: PPUSH
6609: LD_STRING DO-camp-3
6611: PPUSH
6612: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6616: LD_EXP 17
6620: PPUSH
6621: LD_STRING DO-camp-4
6623: PPUSH
6624: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6628: LD_EXP 18
6632: PPUSH
6633: LD_EXP 17
6637: PPUSH
6638: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6642: LD_EXP 18
6646: PPUSH
6647: LD_STRING DG-camp-4
6649: PPUSH
6650: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6654: LD_EXP 16
6658: PPUSH
6659: LD_EXP 18
6663: PPUSH
6664: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6668: LD_EXP 16
6672: PPUSH
6673: LD_STRING DH-camp-4
6675: PPUSH
6676: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6680: LD_EXP 19
6684: PUSH
6685: LD_EXP 17
6689: PUSH
6690: LD_EXP 18
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 16
6704: PPUSH
6705: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6709: LD_EXP 18
6713: PPUSH
6714: LD_STRING DG-camp-5
6716: PPUSH
6717: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6721: LD_EXP 18
6725: PPUSH
6726: LD_STRING DG-camp-6
6728: PPUSH
6729: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6733: LD_EXP 16
6737: PPUSH
6738: LD_STRING DH-camp-6
6740: PPUSH
6741: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6745: LD_EXP 18
6749: PPUSH
6750: LD_STRING DG-camp-7
6752: PPUSH
6753: CALL_OW 88
// if DogTagFound then
6757: LD_EXP 6
6761: IFFALSE 6801
// begin Say ( Heike , DH-quest-1a ) ;
6763: LD_EXP 16
6767: PPUSH
6768: LD_STRING DH-quest-1a
6770: PPUSH
6771: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6775: LD_EXP 18
6779: PPUSH
6780: LD_STRING DG-quest-1a
6782: PPUSH
6783: CALL_OW 88
// mercenariesQuestDone := true ;
6787: LD_ADDR_EXP 11
6791: PUSH
6792: LD_INT 1
6794: ST_TO_ADDR
// InGameOff ;
6795: CALL_OW 9
// end else
6799: GO 6969
// begin Say ( Heike , DH-camp-7 ) ;
6801: LD_EXP 16
6805: PPUSH
6806: LD_STRING DH-camp-7
6808: PPUSH
6809: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6813: LD_EXP 16
6817: PPUSH
6818: CALL_OW 256
6822: PUSH
6823: LD_INT 1000
6825: LESS
6826: IFFALSE 6920
// begin Say ( Olaf , DO-heal-1 ) ;
6828: LD_EXP 17
6832: PPUSH
6833: LD_STRING DO-heal-1
6835: PPUSH
6836: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6840: LD_EXP 16
6844: PPUSH
6845: LD_INT 51
6847: PPUSH
6848: LD_INT 88
6850: PPUSH
6851: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6855: LD_INT 35
6857: PPUSH
6858: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6862: LD_EXP 16
6866: PPUSH
6867: LD_EXP 17
6871: PPUSH
6872: CALL_OW 296
6876: PUSH
6877: LD_INT 4
6879: LESS
6880: IFTRUE 6899
6882: PUSH
6883: LD_EXP 16
6887: PPUSH
6888: LD_INT 51
6890: PPUSH
6891: LD_INT 88
6893: PPUSH
6894: CALL_OW 307
6898: OR
6899: IFFALSE 6855
// SetLives ( Heike , 1000 ) ;
6901: LD_EXP 16
6905: PPUSH
6906: LD_INT 1000
6908: PPUSH
6909: CALL_OW 234
// wait ( 0 0$2 ) ;
6913: LD_INT 70
6915: PPUSH
6916: CALL_OW 67
// end ; InGameOff ;
6920: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6924: LD_EXP 17
6928: PUSH
6929: LD_EXP 18
6933: PUSH
6934: LD_EXP 19
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: PPUSH
6944: LD_INT 53
6946: PPUSH
6947: LD_INT 89
6949: PPUSH
6950: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6954: LD_STRING O5_proof_cont
6956: PPUSH
6957: CALL_OW 337
// mercenariesQuestReady := true ;
6961: LD_ADDR_EXP 10
6965: PUSH
6966: LD_INT 1
6968: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6969: LD_EXP 10
6973: NOT
6974: IFFALSE 6978
// exit ;
6976: GO 7340
// wait ( 0 0$35 ) ;
6978: LD_INT 1225
6980: PPUSH
6981: CALL_OW 67
// driver := PreparePatrolTank ;
6985: LD_ADDR_VAR 0 3
6989: PUSH
6990: CALL 2841 0 0
6994: ST_TO_ADDR
// if not driver then
6995: LD_VAR 0 3
6999: NOT
7000: IFFALSE 7004
// exit ;
7002: GO 7340
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
7004: LD_INT 2
7006: PPUSH
7007: LD_INT 1
7009: PPUSH
7010: LD_INT 2
7012: PPUSH
7013: LD_INT 1
7015: PPUSH
7016: CALL_OW 80
// tank := IsInUnit ( driver ) ;
7020: LD_ADDR_VAR 0 4
7024: PUSH
7025: LD_VAR 0 3
7029: PPUSH
7030: CALL_OW 310
7034: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
7035: LD_VAR 0 4
7039: PPUSH
7040: LD_INT 500
7042: PPUSH
7043: CALL_OW 234
// SetLives ( driver , 450 ) ;
7047: LD_VAR 0 3
7051: PPUSH
7052: LD_INT 450
7054: PPUSH
7055: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
7059: LD_VAR 0 3
7063: PPUSH
7064: LD_INT 59
7066: PPUSH
7067: LD_INT 60
7069: PPUSH
7070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7074: LD_INT 35
7076: PPUSH
7077: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
7081: LD_VAR 0 4
7085: PPUSH
7086: LD_INT 59
7088: PPUSH
7089: LD_INT 60
7091: PPUSH
7092: CALL_OW 307
7096: IFFALSE 7074
// if not See ( 1 , Heike ) then
7098: LD_INT 1
7100: PPUSH
7101: LD_EXP 16
7105: PPUSH
7106: CALL_OW 292
7110: NOT
7111: IFFALSE 7235
// begin if Difficulty < 3 then
7113: LD_OWVAR 67
7117: PUSH
7118: LD_INT 3
7120: LESS
7121: IFFALSE 7139
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
7123: LD_INT 59
7125: PPUSH
7126: LD_INT 60
7128: PPUSH
7129: LD_INT 2
7131: PPUSH
7132: LD_INT 6
7134: PPUSH
7135: CALL_OW 330
// ComExitVehicle ( driver ) ;
7139: LD_VAR 0 3
7143: PPUSH
7144: CALL_OW 121
// wait ( 0 0$1 ) ;
7148: LD_INT 35
7150: PPUSH
7151: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
7155: LD_VAR 0 3
7159: PPUSH
7160: LD_INT 58
7162: PPUSH
7163: LD_INT 54
7165: PPUSH
7166: CALL_OW 171
// wait ( 0 0$1 ) ;
7170: LD_INT 35
7172: PPUSH
7173: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_INT 57
7184: PPUSH
7185: LD_INT 53
7187: PPUSH
7188: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7192: LD_VAR 0 3
7196: PPUSH
7197: LD_INT 350
7199: PPUSH
7200: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7204: LD_VAR 0 3
7208: PPUSH
7209: LD_VAR 0 4
7213: PPUSH
7214: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7218: LD_VAR 0 3
7222: PPUSH
7223: LD_INT 107
7225: PPUSH
7226: LD_INT 118
7228: PPUSH
7229: CALL_OW 171
// end else
7233: GO 7250
// begin ComMoveXY ( driver , 107 , 118 ) ;
7235: LD_VAR 0 3
7239: PPUSH
7240: LD_INT 107
7242: PPUSH
7243: LD_INT 118
7245: PPUSH
7246: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7250: LD_INT 35
7252: PPUSH
7253: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7257: LD_VAR 0 4
7261: PPUSH
7262: LD_INT 107
7264: PPUSH
7265: LD_INT 118
7267: PPUSH
7268: CALL_OW 307
7272: IFTRUE 7285
7274: PUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 301
7284: OR
7285: IFFALSE 7250
// if IsDead ( driver [ 1 ] ) then
7287: LD_VAR 0 3
7291: PUSH
7292: LD_INT 1
7294: ARRAY
7295: PPUSH
7296: CALL_OW 301
7300: IFFALSE 7304
// exit ;
7302: GO 7340
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7304: LD_ADDR_VAR 0 1
7308: PUSH
7309: LD_INT 22
7311: PUSH
7312: LD_INT 1
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PPUSH
7319: CALL_OW 69
7323: PUSH
7324: FOR_IN
7325: IFFALSE 7338
// RemoveUnit ( i ) ;
7327: LD_VAR 0 1
7331: PPUSH
7332: CALL_OW 64
7336: GO 7324
7338: POP
7339: POP
// end ;
7340: PPOPN 4
7342: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7343: LD_INT 10
7345: PPUSH
7346: LD_INT 22
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 21
7358: PUSH
7359: LD_INT 2
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PPUSH
7370: CALL_OW 70
7374: IFFALSE 7448
7376: GO 7378
7378: DISABLE
// begin InGameOn ;
7379: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7383: LD_EXP 17
7387: PUSH
7388: LD_EXP 19
7392: PUSH
7393: LD_EXP 18
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: PPUSH
7403: LD_EXP 16
7407: PPUSH
7408: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7412: LD_EXP 19
7416: PPUSH
7417: LD_STRING DM-quest-1
7419: PPUSH
7420: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7424: LD_EXP 18
7428: PPUSH
7429: LD_STRING DG-quest-1
7431: PPUSH
7432: CALL_OW 88
// InGameOff ;
7436: CALL_OW 9
// mercenariesQuestDone := true ;
7440: LD_ADDR_EXP 11
7444: PUSH
7445: LD_INT 1
7447: ST_TO_ADDR
// end ;
7448: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7449: LD_EXP 16
7453: PPUSH
7454: LD_INT 10
7456: PPUSH
7457: CALL_OW 308
7461: IFFALSE 7469
7463: PUSH
7464: LD_EXP 6
7468: AND
7469: IFFALSE 7477
7471: PUSH
7472: LD_EXP 10
7476: AND
7477: IFFALSE 7513
7479: PUSH
7480: LD_INT 10
7482: PPUSH
7483: LD_INT 22
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 70
7511: NOT
7512: AND
7513: IFFALSE 7687
7515: GO 7517
7517: DISABLE
7518: LD_INT 0
7520: PPUSH
// begin InGameOn ;
7521: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7525: LD_EXP 17
7529: PUSH
7530: LD_EXP 19
7534: PUSH
7535: LD_EXP 18
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: PPUSH
7545: LD_EXP 16
7549: PPUSH
7550: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7554: LD_EXP 16
7558: PPUSH
7559: LD_INT 54
7561: PPUSH
7562: LD_INT 86
7564: PPUSH
7565: CALL_OW 111
// p := p + 1 ;
7569: LD_ADDR_VAR 0 1
7573: PUSH
7574: LD_VAR 0 1
7578: PUSH
7579: LD_INT 1
7581: PLUS
7582: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7583: LD_INT 35
7585: PPUSH
7586: CALL_OW 67
// p := p + 1 ;
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 1
7602: PLUS
7603: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7604: LD_EXP 16
7608: PPUSH
7609: LD_EXP 18
7613: PPUSH
7614: CALL_OW 296
7618: PUSH
7619: LD_INT 4
7621: LESS
7622: IFTRUE 7634
7624: PUSH
7625: LD_VAR 0 1
7629: PUSH
7630: LD_INT 5
7632: GREATER
7633: OR
7634: IFFALSE 7583
// Say ( Mike , DM-quest-1 ) ;
7636: LD_EXP 19
7640: PPUSH
7641: LD_STRING DM-quest-1
7643: PPUSH
7644: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7648: LD_EXP 18
7652: PPUSH
7653: LD_STRING DG-quest-1
7655: PPUSH
7656: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7660: LD_EXP 16
7664: PPUSH
7665: LD_INT 55
7667: PPUSH
7668: LD_INT 87
7670: PPUSH
7671: CALL_OW 111
// InGameOff ;
7675: CALL_OW 9
// mercenariesQuestDone := true ;
7679: LD_ADDR_EXP 11
7683: PUSH
7684: LD_INT 1
7686: ST_TO_ADDR
// end ;
7687: PPOPN 1
7689: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7690: LD_EXP 16
7694: PUSH
7695: LD_INT 55
7697: PUSH
7698: EMPTY
7699: LIST
7700: PPUSH
7701: CALL_OW 69
7705: IN
7706: IFFALSE 7746
7708: GO 7710
7710: DISABLE
// begin if Difficulty < 3 then
7711: LD_OWVAR 67
7715: PUSH
7716: LD_INT 3
7718: LESS
7719: IFFALSE 7734
// RemoveSeeing ( 59 , 60 , 2 ) ;
7721: LD_INT 59
7723: PPUSH
7724: LD_INT 60
7726: PPUSH
7727: LD_INT 2
7729: PPUSH
7730: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7734: LD_EXP 16
7738: PPUSH
7739: LD_STRING DH-driver
7741: PPUSH
7742: CALL_OW 88
// end ;
7746: END
// every 0 0$1 trigger mercenariesQuestDone do
7747: LD_EXP 11
7751: IFFALSE 8241
7753: GO 7755
7755: DISABLE
// begin if mercenariesQuestReady then
7756: LD_EXP 10
7760: IFFALSE 7769
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7762: LD_STRING O5_proof_cont_out
7764: PPUSH
7765: CALL_OW 337
// InGameOn ;
7769: CALL_OW 8
// if IsInUnit ( Heike ) then
7773: LD_EXP 16
7777: PPUSH
7778: CALL_OW 310
7782: IFFALSE 7793
// ComExitVehicle ( Heike ) ;
7784: LD_EXP 16
7788: PPUSH
7789: CALL_OW 121
// wait ( 3 ) ;
7793: LD_INT 3
7795: PPUSH
7796: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7800: LD_EXP 16
7804: PPUSH
7805: LD_EXP 18
7809: PPUSH
7810: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7814: LD_EXP 17
7818: PUSH
7819: LD_EXP 19
7823: PUSH
7824: LD_EXP 18
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: PPUSH
7834: LD_EXP 16
7838: PPUSH
7839: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7843: LD_EXP 16
7847: PPUSH
7848: LD_STRING DH-quest-done-1
7850: PPUSH
7851: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7855: LD_EXP 19
7859: PPUSH
7860: LD_STRING DM-quest-done-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7867: LD_EXP 18
7871: PPUSH
7872: LD_STRING DG-quest-done-1
7874: PPUSH
7875: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7879: LD_EXP 16
7883: PPUSH
7884: LD_EXP 17
7888: PPUSH
7889: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7893: LD_EXP 16
7897: PPUSH
7898: LD_STRING DH-quest-done-2
7900: PPUSH
7901: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7905: LD_EXP 17
7909: PPUSH
7910: LD_STRING DO-quest-done-2
7912: PPUSH
7913: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7917: LD_EXP 17
7921: PPUSH
7922: LD_STRING DO-quest-done-3
7924: PPUSH
7925: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7929: LD_EXP 18
7933: PPUSH
7934: LD_INT 51
7936: PPUSH
7937: LD_INT 90
7939: PPUSH
7940: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7944: LD_EXP 18
7948: PPUSH
7949: LD_INT 50
7951: PPUSH
7952: LD_INT 89
7954: PPUSH
7955: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7959: LD_EXP 16
7963: PPUSH
7964: LD_EXP 18
7968: PPUSH
7969: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7973: LD_EXP 18
7977: PPUSH
7978: LD_STRING DG-quest-done-4
7980: PPUSH
7981: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7985: LD_EXP 18
7989: PPUSH
7990: LD_EXP 16
7994: PPUSH
7995: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7999: LD_EXP 16
8003: PPUSH
8004: CALL_OW 256
8008: PUSH
8009: LD_INT 1000
8011: LESS
8012: IFFALSE 8106
// begin Say ( Olaf , DO-heal-1 ) ;
8014: LD_EXP 17
8018: PPUSH
8019: LD_STRING DO-heal-1
8021: PPUSH
8022: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
8026: LD_EXP 16
8030: PPUSH
8031: LD_INT 51
8033: PPUSH
8034: LD_INT 88
8036: PPUSH
8037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8041: LD_INT 35
8043: PPUSH
8044: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
8048: LD_EXP 16
8052: PPUSH
8053: LD_EXP 17
8057: PPUSH
8058: CALL_OW 296
8062: PUSH
8063: LD_INT 4
8065: LESS
8066: IFTRUE 8085
8068: PUSH
8069: LD_EXP 16
8073: PPUSH
8074: LD_INT 51
8076: PPUSH
8077: LD_INT 88
8079: PPUSH
8080: CALL_OW 307
8084: OR
8085: IFFALSE 8041
// SetLives ( Heike , 1000 ) ;
8087: LD_EXP 16
8091: PPUSH
8092: LD_INT 1000
8094: PPUSH
8095: CALL_OW 234
// wait ( 0 0$2 ) ;
8099: LD_INT 70
8101: PPUSH
8102: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
8106: LD_EXP 16
8110: PPUSH
8111: LD_STRING DH-quest-done-4
8113: PPUSH
8114: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
8118: LD_EXP 17
8122: PPUSH
8123: LD_STRING DO-quest-done-4
8125: PPUSH
8126: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
8130: LD_EXP 16
8134: PPUSH
8135: LD_EXP 17
8139: PPUSH
8140: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
8144: LD_EXP 16
8148: PPUSH
8149: LD_STRING DH-quest-done-5
8151: PPUSH
8152: CALL_OW 88
// InGameOff ;
8156: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
8160: LD_STRING O6_end_cont
8162: PPUSH
8163: CALL_OW 337
// SetSide ( Givi , 2 ) ;
8167: LD_EXP 18
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 235
// SetSide ( Mike , 2 ) ;
8179: LD_EXP 19
8183: PPUSH
8184: LD_INT 2
8186: PPUSH
8187: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8191: LD_INT 42
8193: PPUSH
8194: LD_INT 2
8196: PPUSH
8197: LD_INT 2
8199: PPUSH
8200: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8204: LD_EXP 17
8208: PPUSH
8209: LD_INT 53
8211: PPUSH
8212: LD_INT 89
8214: PPUSH
8215: CALL_OW 118
// lastObjectiveActive := true ;
8219: LD_ADDR_EXP 12
8223: PUSH
8224: LD_INT 1
8226: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8227: LD_INT 1
8229: PPUSH
8230: LD_INT 1
8232: PPUSH
8233: CALL_OW 424
// PreparePrison ;
8237: CALL 1180 0 0
// end ;
8241: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8242: LD_INT 22
8244: PUSH
8245: LD_INT 2
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 91
8254: PUSH
8255: LD_INT 2
8257: PUSH
8258: LD_INT 4
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 69
8274: IFFALSE 8432
8276: GO 8278
8278: DISABLE
8279: LD_INT 0
8281: PPUSH
8282: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8283: LD_INT 245
8285: PUSH
8286: LD_INT 210
8288: PUSH
8289: LD_INT 210
8291: PUSH
8292: LD_INT 175
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: LD_OWVAR 67
8305: ARRAY
8306: PPUSH
8307: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8311: LD_ADDR_VAR 0 2
8315: PUSH
8316: LD_INT 22
8318: PUSH
8319: LD_INT 3
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 25
8328: PUSH
8329: LD_INT 1
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: LD_INT 54
8338: PUSH
8339: EMPTY
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 69
8351: ST_TO_ADDR
// if not tmp then
8352: LD_VAR 0 2
8356: NOT
8357: IFFALSE 8361
// exit ;
8359: GO 8432
// for i in tmp do
8361: LD_ADDR_VAR 0 1
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: FOR_IN
8372: IFFALSE 8400
// begin ComExitBuilding ( i ) ;
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8383: LD_VAR 0 1
8387: PPUSH
8388: LD_INT 121
8390: PPUSH
8391: LD_INT 22
8393: PPUSH
8394: CALL_OW 174
// end ;
8398: GO 8371
8400: POP
8401: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8402: LD_EXP 23
8406: PPUSH
8407: LD_INT 121
8409: PPUSH
8410: LD_INT 22
8412: PPUSH
8413: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8417: LD_EXP 24
8421: PPUSH
8422: LD_INT 121
8424: PPUSH
8425: LD_INT 22
8427: PPUSH
8428: CALL_OW 114
// end ;
8432: PPOPN 2
8434: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8435: LD_INT 22
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 91
8447: PUSH
8448: LD_INT 8
8450: PUSH
8451: LD_INT 4
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PPUSH
8463: CALL_OW 69
8467: IFFALSE 8625
8469: GO 8471
8471: DISABLE
8472: LD_INT 0
8474: PPUSH
8475: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8476: LD_INT 315
8478: PUSH
8479: LD_INT 280
8481: PUSH
8482: LD_INT 245
8484: PUSH
8485: LD_INT 210
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: PUSH
8494: LD_OWVAR 67
8498: ARRAY
8499: PPUSH
8500: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8504: LD_ADDR_VAR 0 2
8508: PUSH
8509: LD_INT 22
8511: PUSH
8512: LD_INT 3
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 25
8521: PUSH
8522: LD_INT 1
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 54
8531: PUSH
8532: EMPTY
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: PPUSH
8540: CALL_OW 69
8544: ST_TO_ADDR
// if not tmp then
8545: LD_VAR 0 2
8549: NOT
8550: IFFALSE 8554
// exit ;
8552: GO 8625
// for i in tmp do
8554: LD_ADDR_VAR 0 1
8558: PUSH
8559: LD_VAR 0 2
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8593
// begin ComExitBuilding ( i ) ;
8567: LD_VAR 0 1
8571: PPUSH
8572: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_INT 142
8583: PPUSH
8584: LD_INT 71
8586: PPUSH
8587: CALL_OW 174
// end ;
8591: GO 8564
8593: POP
8594: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8595: LD_EXP 23
8599: PPUSH
8600: LD_INT 142
8602: PPUSH
8603: LD_INT 71
8605: PPUSH
8606: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8610: LD_EXP 24
8614: PPUSH
8615: LD_INT 142
8617: PPUSH
8618: LD_INT 71
8620: PPUSH
8621: CALL_OW 114
// end ;
8625: PPOPN 2
8627: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8628: LD_INT 22
8630: PUSH
8631: LD_INT 2
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 21
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 58
8650: PUSH
8651: EMPTY
8652: LIST
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 24
8659: PUSH
8660: LD_INT 1000
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 91
8673: PUSH
8674: LD_EXP 17
8678: PUSH
8679: LD_INT 8
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: PPUSH
8694: CALL_OW 69
8698: IFFALSE 8711
8700: PUSH
8701: LD_EXP 17
8705: PPUSH
8706: CALL_OW 302
8710: AND
8711: IFFALSE 8825
8713: GO 8715
8715: DISABLE
// begin enable ;
8716: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8717: LD_EXP 17
8721: PPUSH
8722: LD_INT 22
8724: PUSH
8725: LD_INT 2
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 21
8734: PUSH
8735: LD_INT 2
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 58
8744: PUSH
8745: EMPTY
8746: LIST
8747: PUSH
8748: LD_INT 3
8750: PUSH
8751: LD_INT 24
8753: PUSH
8754: LD_INT 1000
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 91
8767: PUSH
8768: LD_EXP 17
8772: PUSH
8773: LD_INT 8
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8801: LD_EXP 17
8805: PPUSH
8806: LD_INT 52
8808: PPUSH
8809: LD_INT 90
8811: PPUSH
8812: CALL_OW 171
// AddComHold ( Olaf ) ;
8816: LD_EXP 17
8820: PPUSH
8821: CALL_OW 200
// end ;
8825: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8826: LD_EXP 12
8830: IFFALSE 8842
8832: PUSH
8833: LD_INT 2
8835: PPUSH
8836: CALL_OW 302
8840: NOT
8841: AND
8842: IFFALSE 8854
8844: PUSH
8845: LD_OWVAR 67
8849: PUSH
8850: LD_INT 1
8852: EQUAL
8853: AND
8854: IFFALSE 8863
8856: PUSH
8857: LD_EXP 13
8861: NOT
8862: AND
8863: IFFALSE 8880
8865: GO 8867
8867: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8868: LD_EXP 16
8872: PPUSH
8873: LD_STRING DH-prison-missing
8875: PPUSH
8876: CALL_OW 88
// end ;
8880: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8881: LD_EXP 12
8885: IFFALSE 8897
8887: PUSH
8888: LD_INT 8
8890: PPUSH
8891: CALL_OW 302
8895: NOT
8896: AND
8897: IFFALSE 8909
8899: PUSH
8900: LD_OWVAR 67
8904: PUSH
8905: LD_INT 1
8907: GREATER
8908: AND
8909: IFFALSE 8918
8911: PUSH
8912: LD_EXP 13
8916: NOT
8917: AND
8918: IFFALSE 8935
8920: GO 8922
8922: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8923: LD_EXP 16
8927: PPUSH
8928: LD_STRING DH-prison-missing
8930: PPUSH
8931: CALL_OW 88
// end ;
8935: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8936: LD_EXP 12
8940: IFFALSE 8952
8942: PUSH
8943: LD_INT 3
8945: PPUSH
8946: CALL_OW 302
8950: NOT
8951: AND
8952: IFFALSE 8961
8954: PUSH
8955: LD_EXP 13
8959: NOT
8960: AND
8961: IFFALSE 8978
8963: GO 8965
8965: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8966: LD_EXP 16
8970: PPUSH
8971: LD_STRING DH-prison-missing-a
8973: PPUSH
8974: CALL_OW 88
// end ;
8978: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8979: LD_EXP 12
8983: IFFALSE 8995
8985: PUSH
8986: LD_INT 10
8988: PPUSH
8989: CALL_OW 302
8993: NOT
8994: AND
8995: IFFALSE 9004
8997: PUSH
8998: LD_EXP 13
9002: NOT
9003: AND
9004: IFFALSE 9021
9006: GO 9008
9008: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
9009: LD_EXP 16
9013: PPUSH
9014: LD_STRING DH-prison-missing-a
9016: PPUSH
9017: CALL_OW 88
// end ;
9021: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
9022: LD_EXP 13
9026: NOT
9027: IFFALSE 9035
9029: PUSH
9030: LD_EXP 12
9034: AND
9035: IFFALSE 9051
9037: PUSH
9038: LD_INT 2
9040: PPUSH
9041: LD_EXP 20
9045: PPUSH
9046: CALL_OW 292
9050: AND
9051: IFFALSE 9196
9053: GO 9055
9055: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
9056: LD_EXP 20
9060: PPUSH
9061: LD_EXP 16
9065: PPUSH
9066: CALL_OW 119
// DialogueOn ;
9070: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
9074: LD_EXP 20
9078: PPUSH
9079: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
9083: LD_EXP 20
9087: PPUSH
9088: LD_STRING DK-prison-found
9090: PPUSH
9091: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
9095: LD_EXP 16
9099: PPUSH
9100: LD_STRING DH-prison-found
9102: PPUSH
9103: CALL_OW 88
// DialogueOff ;
9107: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
9111: LD_EXP 20
9115: PPUSH
9116: LD_INT 2
9118: PPUSH
9119: CALL_OW 235
// prisonFound := true ;
9123: LD_ADDR_EXP 13
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
9131: LD_STRING O6_prison_out
9133: PPUSH
9134: CALL_OW 337
// ComAgressiveMove ( russianForces , GetX ( Heike ) , GetY ( Heike ) ) ;
9138: LD_EXP 23
9142: PPUSH
9143: LD_EXP 16
9147: PPUSH
9148: CALL_OW 250
9152: PPUSH
9153: LD_EXP 16
9157: PPUSH
9158: CALL_OW 251
9162: PPUSH
9163: CALL_OW 114
// ComAgressiveMove ( russianTank , GetX ( Heike ) , GetY ( Heike ) ) ;
9167: LD_EXP 24
9171: PPUSH
9172: LD_EXP 16
9176: PPUSH
9177: CALL_OW 250
9181: PPUSH
9182: LD_EXP 16
9186: PPUSH
9187: CALL_OW 251
9191: PPUSH
9192: CALL_OW 114
// end ;
9196: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
9197: LD_EXP 16
9201: PPUSH
9202: CALL_OW 256
9206: PUSH
9207: LD_INT 500
9209: LESS
9210: IFFALSE 9223
9212: GO 9214
9214: DISABLE
// heikeHurt := true ;
9215: LD_ADDR_EXP 14
9219: PUSH
9220: LD_INT 1
9222: ST_TO_ADDR
9223: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
9224: LD_INT 22
9226: PUSH
9227: LD_INT 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 21
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: IFFALSE 9570
9254: GO 9256
9256: DISABLE
9257: LD_INT 0
9259: PPUSH
9260: PPUSH
9261: PPUSH
// begin uc_side := 3 ;
9262: LD_ADDR_OWVAR 20
9266: PUSH
9267: LD_INT 3
9269: ST_TO_ADDR
// uc_nation := 3 ;
9270: LD_ADDR_OWVAR 21
9274: PUSH
9275: LD_INT 3
9277: ST_TO_ADDR
// tmp := [ ] ;
9278: LD_ADDR_VAR 0 2
9282: PUSH
9283: EMPTY
9284: ST_TO_ADDR
// for i := 1 to 5 do
9285: LD_ADDR_VAR 0 1
9289: PUSH
9290: DOUBLE
9291: LD_INT 1
9293: DEC
9294: ST_TO_ADDR
9295: LD_INT 5
9297: PUSH
9298: FOR_TO
9299: IFFALSE 9407
// begin PrepareHuman ( false , 1 , 4 ) ;
9301: LD_INT 0
9303: PPUSH
9304: LD_INT 1
9306: PPUSH
9307: LD_INT 4
9309: PPUSH
9310: CALL_OW 380
// un := CreateHuman ;
9314: LD_ADDR_VAR 0 3
9318: PUSH
9319: CALL_OW 44
9323: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9324: LD_VAR 0 3
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: LD_INT 158
9343: PPUSH
9344: LD_INT 80
9346: PPUSH
9347: LD_INT 0
9349: PPUSH
9350: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9354: LD_VAR 0 3
9358: PPUSH
9359: LD_INT 147
9361: PPUSH
9362: LD_INT 75
9364: PPUSH
9365: CALL_OW 111
// wait ( 0 0$1 ) ;
9369: LD_INT 35
9371: PPUSH
9372: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: LD_VAR 0 2
9385: PPUSH
9386: LD_VAR 0 2
9390: PUSH
9391: LD_INT 1
9393: PLUS
9394: PPUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: CALL_OW 1
9404: ST_TO_ADDR
// end ;
9405: GO 9298
9407: POP
9408: POP
// repeat wait ( 0 0$1 ) ;
9409: LD_INT 35
9411: PPUSH
9412: CALL_OW 67
// for i in tmp do
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: FOR_IN
9427: IFFALSE 9548
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
9429: LD_ADDR_VAR 0 3
9433: PUSH
9434: LD_INT 22
9436: PUSH
9437: LD_INT 2
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PPUSH
9444: CALL_OW 69
9448: PPUSH
9449: LD_VAR 0 1
9453: PPUSH
9454: CALL_OW 74
9458: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9459: LD_VAR 0 3
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 250
9472: PPUSH
9473: LD_VAR 0 3
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PPUSH
9482: CALL_OW 251
9486: PPUSH
9487: CALL_OW 428
9491: IFFALSE 9532
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9493: LD_VAR 0 1
9497: PPUSH
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 1
9505: ARRAY
9506: PPUSH
9507: CALL_OW 250
9511: PPUSH
9512: LD_VAR 0 3
9516: PUSH
9517: LD_INT 1
9519: ARRAY
9520: PPUSH
9521: CALL_OW 251
9525: PPUSH
9526: CALL_OW 114
9530: GO 9546
// ComAttackUnit ( i , Heike ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_EXP 16
9541: PPUSH
9542: CALL_OW 115
// end ;
9546: GO 9426
9548: POP
9549: POP
// until IsDead ( Heike ) or not tmp ;
9550: LD_EXP 16
9554: PPUSH
9555: CALL_OW 301
9559: IFTRUE 9568
9561: PUSH
9562: LD_VAR 0 2
9566: NOT
9567: OR
9568: IFFALSE 9409
// end ;
9570: PPOPN 3
9572: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var m1 , m2 , m3 , tmp ;
9573: LD_EXP 12
9577: IFFALSE 9590
9579: PUSH
9580: LD_EXP 16
9584: PPUSH
9585: CALL_OW 302
9589: AND
9590: IFFALSE 9636
9592: PUSH
9593: LD_INT 1
9595: PPUSH
9596: LD_INT 21
9598: PUSH
9599: LD_INT 1
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 22
9608: PUSH
9609: LD_INT 2
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 50
9618: PUSH
9619: EMPTY
9620: LIST
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: PPUSH
9627: CALL_OW 71
9631: PUSH
9632: LD_INT 0
9634: EQUAL
9635: AND
9636: IFFALSE 10171
9638: GO 9640
9640: DISABLE
9641: LD_INT 0
9643: PPUSH
9644: PPUSH
9645: PPUSH
9646: PPUSH
// begin m1 := false ;
9647: LD_ADDR_VAR 0 1
9651: PUSH
9652: LD_INT 0
9654: ST_TO_ADDR
// m2 := false ;
9655: LD_ADDR_VAR 0 2
9659: PUSH
9660: LD_INT 0
9662: ST_TO_ADDR
// m3 := false ;
9663: LD_ADDR_VAR 0 3
9667: PUSH
9668: LD_INT 0
9670: ST_TO_ADDR
// if not heikeHurt then
9671: LD_EXP 14
9675: NOT
9676: IFFALSE 9685
// SetAchievement ( ACH_INVINCIBLE ) ;
9678: LD_STRING ACH_INVINCIBLE
9680: PPUSH
9681: CALL_OW 543
// if tick <= 6 6$00 then
9685: LD_OWVAR 1
9689: PUSH
9690: LD_INT 12600
9692: LESSEQUAL
9693: IFFALSE 9702
// SetAchievement ( ACH_HSPEED_1 ) ;
9695: LD_STRING ACH_HSPEED_1
9697: PPUSH
9698: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9702: LD_STRING enableBioCharacter(BIO_GIVI)
9704: PPUSH
9705: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9709: LD_STRING enableBioCharacter(BIO_MIKE)
9711: PPUSH
9712: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9716: LD_STRING enableBioCharacter(BIO_OLAF)
9718: PPUSH
9719: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9723: LD_ADDR_VAR 0 4
9727: PUSH
9728: LD_INT 22
9730: PUSH
9731: LD_INT 2
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 21
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 50
9750: PUSH
9751: EMPTY
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: PPUSH
9759: CALL_OW 69
9763: ST_TO_ADDR
// if Kamil in tmp then
9764: LD_EXP 20
9768: PUSH
9769: LD_VAR 0 4
9773: IN
9774: IFFALSE 9783
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9776: LD_STRING enableBioCharacter(BIO_KAMI)
9778: PPUSH
9779: CALL_OW 559
// if prisonFound then
9783: LD_EXP 13
9787: IFFALSE 9834
// begin if not IsOk ( Kamil ) then
9789: LD_EXP 20
9793: PPUSH
9794: CALL_OW 302
9798: NOT
9799: IFFALSE 9814
// AddMedal ( med1 , - 2 ) else
9801: LD_STRING med1
9803: PPUSH
9804: LD_INT 2
9806: NEG
9807: PPUSH
9808: CALL_OW 101
9812: GO 9832
// begin m1 := true ;
9814: LD_ADDR_VAR 0 1
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
9822: LD_STRING med1
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: CALL_OW 101
// end end else
9832: GO 9845
// AddMedal ( med1 , - 1 ) ;
9834: LD_STRING med1
9836: PPUSH
9837: LD_INT 1
9839: NEG
9840: PPUSH
9841: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9845: LD_VAR 0 4
9849: PUSH
9850: LD_INT 3
9852: LESS
9853: IFFALSE 9862
9855: PUSH
9856: LD_EXP 13
9860: NOT
9861: AND
9862: IFTRUE 9882
9864: PUSH
9865: LD_VAR 0 4
9869: PUSH
9870: LD_INT 4
9872: LESS
9873: IFFALSE 9881
9875: PUSH
9876: LD_EXP 13
9880: AND
9881: OR
9882: IFFALSE 9897
// AddMedal ( med2 , - 1 ) else
9884: LD_STRING med2
9886: PPUSH
9887: LD_INT 1
9889: NEG
9890: PPUSH
9891: CALL_OW 101
9895: GO 9915
// begin m2 := true ;
9897: LD_ADDR_VAR 0 2
9901: PUSH
9902: LD_INT 1
9904: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
9905: LD_STRING med2
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 101
// end ; if prisonFound and johnnySaved and tmp >= 4 then
9915: LD_EXP 13
9919: IFFALSE 9927
9921: PUSH
9922: LD_EXP 4
9926: AND
9927: IFFALSE 9939
9929: PUSH
9930: LD_VAR 0 4
9934: PUSH
9935: LD_INT 4
9937: GREATEREQUAL
9938: AND
9939: IFFALSE 9961
// begin m3 := true ;
9941: LD_ADDR_VAR 0 3
9945: PUSH
9946: LD_INT 1
9948: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
9949: LD_STRING med3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 101
// end else
9959: GO 9972
// AddMedal ( med3 , - 1 ) ;
9961: LD_STRING med3
9963: PPUSH
9964: LD_INT 1
9966: NEG
9967: PPUSH
9968: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
9972: LD_VAR 0 1
9976: IFFALSE 9984
9978: PUSH
9979: LD_VAR 0 2
9983: AND
9984: IFFALSE 9992
9986: PUSH
9987: LD_VAR 0 3
9991: AND
9992: IFFALSE 10004
9994: PUSH
9995: LD_OWVAR 67
9999: PUSH
10000: LD_INT 3
10002: GREATEREQUAL
10003: AND
10004: IFFALSE 10016
// SetAchievementEX ( ACH_ARES , 1 ) ;
10006: LD_STRING ACH_ARES
10008: PPUSH
10009: LD_INT 1
10011: PPUSH
10012: CALL_OW 564
// GiveMedals ( MAIN ) ;
10016: LD_STRING MAIN
10018: PPUSH
10019: CALL_OW 102
// RewardPeople ( tmp ) ;
10023: LD_VAR 0 4
10027: PPUSH
10028: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
10032: LD_EXP 4
10036: PPUSH
10037: LD_STRING 01_JohnnySaved
10039: PPUSH
10040: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
10044: LD_EXP 16
10048: PPUSH
10049: LD_STRING 01_Heike
10051: PPUSH
10052: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
10056: LD_EXP 18
10060: PPUSH
10061: CALL_OW 302
10065: IFFALSE 10079
10067: PUSH
10068: LD_EXP 18
10072: PUSH
10073: LD_VAR 0 4
10077: IN
10078: AND
10079: IFFALSE 10093
// SaveCharacters ( Givi , 01_Givi ) ;
10081: LD_EXP 18
10085: PPUSH
10086: LD_STRING 01_Givi
10088: PPUSH
10089: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
10093: LD_EXP 19
10097: PPUSH
10098: CALL_OW 302
10102: IFFALSE 10116
10104: PUSH
10105: LD_EXP 19
10109: PUSH
10110: LD_VAR 0 4
10114: IN
10115: AND
10116: IFFALSE 10130
// SaveCharacters ( Mike , 01_Mike ) ;
10118: LD_EXP 19
10122: PPUSH
10123: LD_STRING 01_Mike
10125: PPUSH
10126: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
10130: LD_EXP 20
10134: PPUSH
10135: CALL_OW 302
10139: IFFALSE 10153
10141: PUSH
10142: LD_EXP 20
10146: PUSH
10147: LD_VAR 0 4
10151: IN
10152: AND
10153: IFFALSE 10167
// SaveCharacters ( Kamil , 01_Kamil ) ;
10155: LD_EXP 20
10159: PPUSH
10160: LD_STRING 01_Kamil
10162: PPUSH
10163: CALL_OW 38
// YouWin ;
10167: CALL_OW 103
// end ; end_of_file
10171: PPOPN 4
10173: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10174: LD_VAR 0 1
10178: PUSH
10179: LD_EXP 16
10183: EQUAL
10184: IFFALSE 10193
// YouLost ( Heike ) ;
10186: LD_STRING Heike
10188: PPUSH
10189: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
10193: LD_VAR 0 1
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_INT 3
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 25
10210: PUSH
10211: LD_INT 1
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL_OW 69
10226: IN
10227: IFFALSE 10333
// begin if un in russianPatrol then
10229: LD_VAR 0 1
10233: PUSH
10234: LD_EXP 21
10238: IN
10239: IFFALSE 10257
// russianPatrol := russianPatrol diff un ;
10241: LD_ADDR_EXP 21
10245: PUSH
10246: LD_EXP 21
10250: PUSH
10251: LD_VAR 0 1
10255: DIFF
10256: ST_TO_ADDR
// if un in russianForestPatrol then
10257: LD_VAR 0 1
10261: PUSH
10262: LD_EXP 22
10266: IN
10267: IFFALSE 10285
// russianForestPatrol := russianForestPatrol diff un ;
10269: LD_ADDR_EXP 22
10273: PUSH
10274: LD_EXP 22
10278: PUSH
10279: LD_VAR 0 1
10283: DIFF
10284: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
10285: LD_ADDR_EXP 5
10289: PUSH
10290: LD_EXP 5
10294: PPUSH
10295: LD_EXP 5
10299: PUSH
10300: LD_INT 1
10302: PLUS
10303: PPUSH
10304: LD_VAR 0 1
10308: PPUSH
10309: CALL_OW 250
10313: PUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 251
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 1
10332: ST_TO_ADDR
// end ; end ;
10333: PPOPN 1
10335: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
10336: LD_VAR 0 1
10340: PUSH
10341: LD_EXP 16
10345: EQUAL
10346: IFFALSE 10355
// YouLost ( Heike ) ;
10348: LD_STRING Heike
10350: PPUSH
10351: CALL_OW 104
// if un = Olaf then
10355: LD_VAR 0 1
10359: PUSH
10360: LD_EXP 17
10364: EQUAL
10365: IFFALSE 10374
// YouLost ( Olaf ) ;
10367: LD_STRING Olaf
10369: PPUSH
10370: CALL_OW 104
// end ;
10374: PPOPN 1
10376: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10377: LD_VAR 0 1
10381: PUSH
10382: LD_INT 2
10384: EQUAL
10385: IFFALSE 10397
10387: PUSH
10388: LD_VAR 0 2
10392: PUSH
10393: LD_INT 5
10395: EQUAL
10396: AND
10397: IFFALSE 10406
// YouLost ( FriendlyFire ) ;
10399: LD_STRING FriendlyFire
10401: PPUSH
10402: CALL_OW 104
// end ; end_of_file
10406: PPOPN 2
10408: END
// export globalGameSaveCounter ; every 0 0$1 do
10409: GO 10411
10411: DISABLE
// begin enable ;
10412: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10413: LD_STRING updateTimer(
10415: PUSH
10416: LD_OWVAR 1
10420: STR
10421: PUSH
10422: LD_STRING );
10424: STR
10425: PPUSH
10426: CALL_OW 559
// end ;
10430: END
// every 0 0$1 do
10431: GO 10433
10433: DISABLE
// begin globalGameSaveCounter := 0 ;
10434: LD_ADDR_EXP 26
10438: PUSH
10439: LD_INT 0
10441: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10442: LD_STRING setGameSaveCounter(0)
10444: PPUSH
10445: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10449: LD_STRING initStreamRollete();
10451: PPUSH
10452: CALL_OW 559
// InitStreamMode ;
10456: CALL 11808 0 0
// DefineStreamItems ( false ) ;
10460: LD_INT 0
10462: PPUSH
10463: CALL 12272 0 1
// end ;
10467: END
// export function SOS_MapStart ( ) ; begin
10468: LD_INT 0
10470: PPUSH
// if streamModeActive then
10471: LD_EXP 27
10475: IFFALSE 10484
// DefineStreamItems ( true ) ;
10477: LD_INT 1
10479: PPUSH
10480: CALL 12272 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
10484: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
10486: PPUSH
10487: CALL_OW 559
// UpdateLuaVariables ( ) ;
10491: CALL 10508 0 0
// UpdateFactoryWaypoints ( ) ;
10495: CALL 25394 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10499: CALL 25646 0 0
// end ;
10503: LD_VAR 0 1
10507: RET
// function UpdateLuaVariables ( ) ; begin
10508: LD_INT 0
10510: PPUSH
// if globalGameSaveCounter then
10511: LD_EXP 26
10515: IFFALSE 10549
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10517: LD_ADDR_EXP 26
10521: PUSH
10522: LD_EXP 26
10526: PPUSH
10527: CALL 72542 0 1
10531: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10532: LD_STRING setGameSaveCounter(
10534: PUSH
10535: LD_EXP 26
10539: STR
10540: PUSH
10541: LD_STRING )
10543: STR
10544: PPUSH
10545: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10549: LD_STRING setGameDifficulty(
10551: PUSH
10552: LD_OWVAR 67
10556: STR
10557: PUSH
10558: LD_STRING )
10560: STR
10561: PPUSH
10562: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10566: LD_STRING displayDifficulty(
10568: PUSH
10569: LD_OWVAR 67
10573: STR
10574: PUSH
10575: LD_STRING )
10577: STR
10578: PPUSH
10579: CALL_OW 559
// end ;
10583: LD_VAR 0 1
10587: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10588: LD_INT 0
10590: PPUSH
// if p2 = stream_mode then
10591: LD_VAR 0 2
10595: PUSH
10596: LD_INT 100
10598: EQUAL
10599: IFFALSE 11602
// begin if not StreamModeActive then
10601: LD_EXP 27
10605: NOT
10606: IFFALSE 10616
// StreamModeActive := true ;
10608: LD_ADDR_EXP 27
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
// if p3 = 0 then
10616: LD_VAR 0 3
10620: PUSH
10621: LD_INT 0
10623: EQUAL
10624: IFFALSE 10630
// InitStreamMode ;
10626: CALL 11808 0 0
// if p3 = 1 then
10630: LD_VAR 0 3
10634: PUSH
10635: LD_INT 1
10637: EQUAL
10638: IFFALSE 10648
// sRocket := true ;
10640: LD_ADDR_EXP 32
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// if p3 = 2 then
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 2
10655: EQUAL
10656: IFFALSE 10666
// sSpeed := true ;
10658: LD_ADDR_EXP 31
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// if p3 = 3 then
10666: LD_VAR 0 3
10670: PUSH
10671: LD_INT 3
10673: EQUAL
10674: IFFALSE 10684
// sEngine := true ;
10676: LD_ADDR_EXP 33
10680: PUSH
10681: LD_INT 1
10683: ST_TO_ADDR
// if p3 = 4 then
10684: LD_VAR 0 3
10688: PUSH
10689: LD_INT 4
10691: EQUAL
10692: IFFALSE 10702
// sSpec := true ;
10694: LD_ADDR_EXP 30
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// if p3 = 5 then
10702: LD_VAR 0 3
10706: PUSH
10707: LD_INT 5
10709: EQUAL
10710: IFFALSE 10720
// sLevel := true ;
10712: LD_ADDR_EXP 34
10716: PUSH
10717: LD_INT 1
10719: ST_TO_ADDR
// if p3 = 6 then
10720: LD_VAR 0 3
10724: PUSH
10725: LD_INT 6
10727: EQUAL
10728: IFFALSE 10738
// sArmoury := true ;
10730: LD_ADDR_EXP 35
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// if p3 = 7 then
10738: LD_VAR 0 3
10742: PUSH
10743: LD_INT 7
10745: EQUAL
10746: IFFALSE 10756
// sRadar := true ;
10748: LD_ADDR_EXP 36
10752: PUSH
10753: LD_INT 1
10755: ST_TO_ADDR
// if p3 = 8 then
10756: LD_VAR 0 3
10760: PUSH
10761: LD_INT 8
10763: EQUAL
10764: IFFALSE 10774
// sBunker := true ;
10766: LD_ADDR_EXP 37
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// if p3 = 9 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 9
10781: EQUAL
10782: IFFALSE 10792
// sHack := true ;
10784: LD_ADDR_EXP 38
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// if p3 = 10 then
10792: LD_VAR 0 3
10796: PUSH
10797: LD_INT 10
10799: EQUAL
10800: IFFALSE 10810
// sFire := true ;
10802: LD_ADDR_EXP 39
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// if p3 = 11 then
10810: LD_VAR 0 3
10814: PUSH
10815: LD_INT 11
10817: EQUAL
10818: IFFALSE 10828
// sRefresh := true ;
10820: LD_ADDR_EXP 40
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if p3 = 12 then
10828: LD_VAR 0 3
10832: PUSH
10833: LD_INT 12
10835: EQUAL
10836: IFFALSE 10846
// sExp := true ;
10838: LD_ADDR_EXP 41
10842: PUSH
10843: LD_INT 1
10845: ST_TO_ADDR
// if p3 = 13 then
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 13
10853: EQUAL
10854: IFFALSE 10864
// sDepot := true ;
10856: LD_ADDR_EXP 42
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
// if p3 = 14 then
10864: LD_VAR 0 3
10868: PUSH
10869: LD_INT 14
10871: EQUAL
10872: IFFALSE 10882
// sFlag := true ;
10874: LD_ADDR_EXP 43
10878: PUSH
10879: LD_INT 1
10881: ST_TO_ADDR
// if p3 = 15 then
10882: LD_VAR 0 3
10886: PUSH
10887: LD_INT 15
10889: EQUAL
10890: IFFALSE 10900
// sKamikadze := true ;
10892: LD_ADDR_EXP 51
10896: PUSH
10897: LD_INT 1
10899: ST_TO_ADDR
// if p3 = 16 then
10900: LD_VAR 0 3
10904: PUSH
10905: LD_INT 16
10907: EQUAL
10908: IFFALSE 10918
// sTroll := true ;
10910: LD_ADDR_EXP 52
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// if p3 = 17 then
10918: LD_VAR 0 3
10922: PUSH
10923: LD_INT 17
10925: EQUAL
10926: IFFALSE 10936
// sSlow := true ;
10928: LD_ADDR_EXP 53
10932: PUSH
10933: LD_INT 1
10935: ST_TO_ADDR
// if p3 = 18 then
10936: LD_VAR 0 3
10940: PUSH
10941: LD_INT 18
10943: EQUAL
10944: IFFALSE 10954
// sLack := true ;
10946: LD_ADDR_EXP 54
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// if p3 = 19 then
10954: LD_VAR 0 3
10958: PUSH
10959: LD_INT 19
10961: EQUAL
10962: IFFALSE 10972
// sTank := true ;
10964: LD_ADDR_EXP 56
10968: PUSH
10969: LD_INT 1
10971: ST_TO_ADDR
// if p3 = 20 then
10972: LD_VAR 0 3
10976: PUSH
10977: LD_INT 20
10979: EQUAL
10980: IFFALSE 10990
// sRemote := true ;
10982: LD_ADDR_EXP 57
10986: PUSH
10987: LD_INT 1
10989: ST_TO_ADDR
// if p3 = 21 then
10990: LD_VAR 0 3
10994: PUSH
10995: LD_INT 21
10997: EQUAL
10998: IFFALSE 11008
// sPowell := true ;
11000: LD_ADDR_EXP 58
11004: PUSH
11005: LD_INT 1
11007: ST_TO_ADDR
// if p3 = 22 then
11008: LD_VAR 0 3
11012: PUSH
11013: LD_INT 22
11015: EQUAL
11016: IFFALSE 11026
// sTeleport := true ;
11018: LD_ADDR_EXP 61
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// if p3 = 23 then
11026: LD_VAR 0 3
11030: PUSH
11031: LD_INT 23
11033: EQUAL
11034: IFFALSE 11044
// sOilTower := true ;
11036: LD_ADDR_EXP 63
11040: PUSH
11041: LD_INT 1
11043: ST_TO_ADDR
// if p3 = 24 then
11044: LD_VAR 0 3
11048: PUSH
11049: LD_INT 24
11051: EQUAL
11052: IFFALSE 11062
// sShovel := true ;
11054: LD_ADDR_EXP 64
11058: PUSH
11059: LD_INT 1
11061: ST_TO_ADDR
// if p3 = 25 then
11062: LD_VAR 0 3
11066: PUSH
11067: LD_INT 25
11069: EQUAL
11070: IFFALSE 11080
// sSheik := true ;
11072: LD_ADDR_EXP 65
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// if p3 = 26 then
11080: LD_VAR 0 3
11084: PUSH
11085: LD_INT 26
11087: EQUAL
11088: IFFALSE 11098
// sEarthquake := true ;
11090: LD_ADDR_EXP 67
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// if p3 = 27 then
11098: LD_VAR 0 3
11102: PUSH
11103: LD_INT 27
11105: EQUAL
11106: IFFALSE 11116
// sAI := true ;
11108: LD_ADDR_EXP 68
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// if p3 = 28 then
11116: LD_VAR 0 3
11120: PUSH
11121: LD_INT 28
11123: EQUAL
11124: IFFALSE 11134
// sCargo := true ;
11126: LD_ADDR_EXP 71
11130: PUSH
11131: LD_INT 1
11133: ST_TO_ADDR
// if p3 = 29 then
11134: LD_VAR 0 3
11138: PUSH
11139: LD_INT 29
11141: EQUAL
11142: IFFALSE 11152
// sDLaser := true ;
11144: LD_ADDR_EXP 72
11148: PUSH
11149: LD_INT 1
11151: ST_TO_ADDR
// if p3 = 30 then
11152: LD_VAR 0 3
11156: PUSH
11157: LD_INT 30
11159: EQUAL
11160: IFFALSE 11170
// sExchange := true ;
11162: LD_ADDR_EXP 73
11166: PUSH
11167: LD_INT 1
11169: ST_TO_ADDR
// if p3 = 31 then
11170: LD_VAR 0 3
11174: PUSH
11175: LD_INT 31
11177: EQUAL
11178: IFFALSE 11188
// sFac := true ;
11180: LD_ADDR_EXP 74
11184: PUSH
11185: LD_INT 1
11187: ST_TO_ADDR
// if p3 = 32 then
11188: LD_VAR 0 3
11192: PUSH
11193: LD_INT 32
11195: EQUAL
11196: IFFALSE 11206
// sPower := true ;
11198: LD_ADDR_EXP 75
11202: PUSH
11203: LD_INT 1
11205: ST_TO_ADDR
// if p3 = 33 then
11206: LD_VAR 0 3
11210: PUSH
11211: LD_INT 33
11213: EQUAL
11214: IFFALSE 11224
// sRandom := true ;
11216: LD_ADDR_EXP 76
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// if p3 = 34 then
11224: LD_VAR 0 3
11228: PUSH
11229: LD_INT 34
11231: EQUAL
11232: IFFALSE 11242
// sShield := true ;
11234: LD_ADDR_EXP 77
11238: PUSH
11239: LD_INT 1
11241: ST_TO_ADDR
// if p3 = 35 then
11242: LD_VAR 0 3
11246: PUSH
11247: LD_INT 35
11249: EQUAL
11250: IFFALSE 11260
// sTime := true ;
11252: LD_ADDR_EXP 78
11256: PUSH
11257: LD_INT 1
11259: ST_TO_ADDR
// if p3 = 36 then
11260: LD_VAR 0 3
11264: PUSH
11265: LD_INT 36
11267: EQUAL
11268: IFFALSE 11278
// sTools := true ;
11270: LD_ADDR_EXP 79
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
// if p3 = 101 then
11278: LD_VAR 0 3
11282: PUSH
11283: LD_INT 101
11285: EQUAL
11286: IFFALSE 11296
// sSold := true ;
11288: LD_ADDR_EXP 44
11292: PUSH
11293: LD_INT 1
11295: ST_TO_ADDR
// if p3 = 102 then
11296: LD_VAR 0 3
11300: PUSH
11301: LD_INT 102
11303: EQUAL
11304: IFFALSE 11314
// sDiff := true ;
11306: LD_ADDR_EXP 45
11310: PUSH
11311: LD_INT 1
11313: ST_TO_ADDR
// if p3 = 103 then
11314: LD_VAR 0 3
11318: PUSH
11319: LD_INT 103
11321: EQUAL
11322: IFFALSE 11332
// sFog := true ;
11324: LD_ADDR_EXP 48
11328: PUSH
11329: LD_INT 1
11331: ST_TO_ADDR
// if p3 = 104 then
11332: LD_VAR 0 3
11336: PUSH
11337: LD_INT 104
11339: EQUAL
11340: IFFALSE 11350
// sReset := true ;
11342: LD_ADDR_EXP 49
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// if p3 = 105 then
11350: LD_VAR 0 3
11354: PUSH
11355: LD_INT 105
11357: EQUAL
11358: IFFALSE 11368
// sSun := true ;
11360: LD_ADDR_EXP 50
11364: PUSH
11365: LD_INT 1
11367: ST_TO_ADDR
// if p3 = 106 then
11368: LD_VAR 0 3
11372: PUSH
11373: LD_INT 106
11375: EQUAL
11376: IFFALSE 11386
// sTiger := true ;
11378: LD_ADDR_EXP 46
11382: PUSH
11383: LD_INT 1
11385: ST_TO_ADDR
// if p3 = 107 then
11386: LD_VAR 0 3
11390: PUSH
11391: LD_INT 107
11393: EQUAL
11394: IFFALSE 11404
// sBomb := true ;
11396: LD_ADDR_EXP 47
11400: PUSH
11401: LD_INT 1
11403: ST_TO_ADDR
// if p3 = 108 then
11404: LD_VAR 0 3
11408: PUSH
11409: LD_INT 108
11411: EQUAL
11412: IFFALSE 11422
// sWound := true ;
11414: LD_ADDR_EXP 55
11418: PUSH
11419: LD_INT 1
11421: ST_TO_ADDR
// if p3 = 109 then
11422: LD_VAR 0 3
11426: PUSH
11427: LD_INT 109
11429: EQUAL
11430: IFFALSE 11440
// sBetray := true ;
11432: LD_ADDR_EXP 59
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// if p3 = 110 then
11440: LD_VAR 0 3
11444: PUSH
11445: LD_INT 110
11447: EQUAL
11448: IFFALSE 11458
// sContamin := true ;
11450: LD_ADDR_EXP 60
11454: PUSH
11455: LD_INT 1
11457: ST_TO_ADDR
// if p3 = 111 then
11458: LD_VAR 0 3
11462: PUSH
11463: LD_INT 111
11465: EQUAL
11466: IFFALSE 11476
// sOil := true ;
11468: LD_ADDR_EXP 62
11472: PUSH
11473: LD_INT 1
11475: ST_TO_ADDR
// if p3 = 112 then
11476: LD_VAR 0 3
11480: PUSH
11481: LD_INT 112
11483: EQUAL
11484: IFFALSE 11494
// sStu := true ;
11486: LD_ADDR_EXP 66
11490: PUSH
11491: LD_INT 1
11493: ST_TO_ADDR
// if p3 = 113 then
11494: LD_VAR 0 3
11498: PUSH
11499: LD_INT 113
11501: EQUAL
11502: IFFALSE 11512
// sBazooka := true ;
11504: LD_ADDR_EXP 69
11508: PUSH
11509: LD_INT 1
11511: ST_TO_ADDR
// if p3 = 114 then
11512: LD_VAR 0 3
11516: PUSH
11517: LD_INT 114
11519: EQUAL
11520: IFFALSE 11530
// sMortar := true ;
11522: LD_ADDR_EXP 70
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// if p3 = 115 then
11530: LD_VAR 0 3
11534: PUSH
11535: LD_INT 115
11537: EQUAL
11538: IFFALSE 11548
// sRanger := true ;
11540: LD_ADDR_EXP 80
11544: PUSH
11545: LD_INT 1
11547: ST_TO_ADDR
// if p3 = 116 then
11548: LD_VAR 0 3
11552: PUSH
11553: LD_INT 116
11555: EQUAL
11556: IFFALSE 11566
// sComputer := true ;
11558: LD_ADDR_EXP 81
11562: PUSH
11563: LD_INT 1
11565: ST_TO_ADDR
// if p3 = 117 then
11566: LD_VAR 0 3
11570: PUSH
11571: LD_INT 117
11573: EQUAL
11574: IFFALSE 11584
// s30 := true ;
11576: LD_ADDR_EXP 82
11580: PUSH
11581: LD_INT 1
11583: ST_TO_ADDR
// if p3 = 118 then
11584: LD_VAR 0 3
11588: PUSH
11589: LD_INT 118
11591: EQUAL
11592: IFFALSE 11602
// s60 := true ;
11594: LD_ADDR_EXP 83
11598: PUSH
11599: LD_INT 1
11601: ST_TO_ADDR
// end ; if p2 = hack_mode then
11602: LD_VAR 0 2
11606: PUSH
11607: LD_INT 101
11609: EQUAL
11610: IFFALSE 11738
// begin case p3 of 1 :
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 1
11619: DOUBLE
11620: EQUAL
11621: IFTRUE 11625
11623: GO 11632
11625: POP
// hHackUnlimitedResources ; 2 :
11626: CALL 24001 0 0
11630: GO 11738
11632: LD_INT 2
11634: DOUBLE
11635: EQUAL
11636: IFTRUE 11640
11638: GO 11647
11640: POP
// hHackSetLevel10 ; 3 :
11641: CALL 24134 0 0
11645: GO 11738
11647: LD_INT 3
11649: DOUBLE
11650: EQUAL
11651: IFTRUE 11655
11653: GO 11662
11655: POP
// hHackSetLevel10YourUnits ; 4 :
11656: CALL 24219 0 0
11660: GO 11738
11662: LD_INT 4
11664: DOUBLE
11665: EQUAL
11666: IFTRUE 11670
11668: GO 11677
11670: POP
// hHackInvincible ; 5 :
11671: CALL 24667 0 0
11675: GO 11738
11677: LD_INT 5
11679: DOUBLE
11680: EQUAL
11681: IFTRUE 11685
11683: GO 11692
11685: POP
// hHackInvisible ; 6 :
11686: CALL 24778 0 0
11690: GO 11738
11692: LD_INT 6
11694: DOUBLE
11695: EQUAL
11696: IFTRUE 11700
11698: GO 11707
11700: POP
// hHackChangeYourSide ; 7 :
11701: CALL 24835 0 0
11705: GO 11738
11707: LD_INT 7
11709: DOUBLE
11710: EQUAL
11711: IFTRUE 11715
11713: GO 11722
11715: POP
// hHackChangeUnitSide ; 8 :
11716: CALL 24877 0 0
11720: GO 11738
11722: LD_INT 8
11724: DOUBLE
11725: EQUAL
11726: IFTRUE 11730
11728: GO 11737
11730: POP
// hHackFog ; end ;
11731: CALL 24978 0 0
11735: GO 11738
11737: POP
// end ; if p2 = game_save_mode then
11738: LD_VAR 0 2
11742: PUSH
11743: LD_INT 102
11745: EQUAL
11746: IFFALSE 11803
// begin if p3 = 1 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 1
11755: EQUAL
11756: IFFALSE 11768
// globalGameSaveCounter := p4 ;
11758: LD_ADDR_EXP 26
11762: PUSH
11763: LD_VAR 0 4
11767: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11768: LD_VAR 0 3
11772: PUSH
11773: LD_INT 2
11775: EQUAL
11776: IFFALSE 11784
11778: PUSH
11779: LD_EXP 26
11783: AND
11784: IFFALSE 11803
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11786: LD_STRING setGameSaveCounter(
11788: PUSH
11789: LD_EXP 26
11793: STR
11794: PUSH
11795: LD_STRING )
11797: STR
11798: PPUSH
11799: CALL_OW 559
// end ; end ;
11803: LD_VAR 0 7
11807: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11808: LD_INT 0
11810: PPUSH
// streamModeActive := false ;
11811: LD_ADDR_EXP 27
11815: PUSH
11816: LD_INT 0
11818: ST_TO_ADDR
// normalCounter := 36 ;
11819: LD_ADDR_EXP 28
11823: PUSH
11824: LD_INT 36
11826: ST_TO_ADDR
// hardcoreCounter := 18 ;
11827: LD_ADDR_EXP 29
11831: PUSH
11832: LD_INT 18
11834: ST_TO_ADDR
// sRocket := false ;
11835: LD_ADDR_EXP 32
11839: PUSH
11840: LD_INT 0
11842: ST_TO_ADDR
// sSpeed := false ;
11843: LD_ADDR_EXP 31
11847: PUSH
11848: LD_INT 0
11850: ST_TO_ADDR
// sEngine := false ;
11851: LD_ADDR_EXP 33
11855: PUSH
11856: LD_INT 0
11858: ST_TO_ADDR
// sSpec := false ;
11859: LD_ADDR_EXP 30
11863: PUSH
11864: LD_INT 0
11866: ST_TO_ADDR
// sLevel := false ;
11867: LD_ADDR_EXP 34
11871: PUSH
11872: LD_INT 0
11874: ST_TO_ADDR
// sArmoury := false ;
11875: LD_ADDR_EXP 35
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// sRadar := false ;
11883: LD_ADDR_EXP 36
11887: PUSH
11888: LD_INT 0
11890: ST_TO_ADDR
// sBunker := false ;
11891: LD_ADDR_EXP 37
11895: PUSH
11896: LD_INT 0
11898: ST_TO_ADDR
// sHack := false ;
11899: LD_ADDR_EXP 38
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// sFire := false ;
11907: LD_ADDR_EXP 39
11911: PUSH
11912: LD_INT 0
11914: ST_TO_ADDR
// sRefresh := false ;
11915: LD_ADDR_EXP 40
11919: PUSH
11920: LD_INT 0
11922: ST_TO_ADDR
// sExp := false ;
11923: LD_ADDR_EXP 41
11927: PUSH
11928: LD_INT 0
11930: ST_TO_ADDR
// sDepot := false ;
11931: LD_ADDR_EXP 42
11935: PUSH
11936: LD_INT 0
11938: ST_TO_ADDR
// sFlag := false ;
11939: LD_ADDR_EXP 43
11943: PUSH
11944: LD_INT 0
11946: ST_TO_ADDR
// sKamikadze := false ;
11947: LD_ADDR_EXP 51
11951: PUSH
11952: LD_INT 0
11954: ST_TO_ADDR
// sTroll := false ;
11955: LD_ADDR_EXP 52
11959: PUSH
11960: LD_INT 0
11962: ST_TO_ADDR
// sSlow := false ;
11963: LD_ADDR_EXP 53
11967: PUSH
11968: LD_INT 0
11970: ST_TO_ADDR
// sLack := false ;
11971: LD_ADDR_EXP 54
11975: PUSH
11976: LD_INT 0
11978: ST_TO_ADDR
// sTank := false ;
11979: LD_ADDR_EXP 56
11983: PUSH
11984: LD_INT 0
11986: ST_TO_ADDR
// sRemote := false ;
11987: LD_ADDR_EXP 57
11991: PUSH
11992: LD_INT 0
11994: ST_TO_ADDR
// sPowell := false ;
11995: LD_ADDR_EXP 58
11999: PUSH
12000: LD_INT 0
12002: ST_TO_ADDR
// sTeleport := false ;
12003: LD_ADDR_EXP 61
12007: PUSH
12008: LD_INT 0
12010: ST_TO_ADDR
// sOilTower := false ;
12011: LD_ADDR_EXP 63
12015: PUSH
12016: LD_INT 0
12018: ST_TO_ADDR
// sShovel := false ;
12019: LD_ADDR_EXP 64
12023: PUSH
12024: LD_INT 0
12026: ST_TO_ADDR
// sSheik := false ;
12027: LD_ADDR_EXP 65
12031: PUSH
12032: LD_INT 0
12034: ST_TO_ADDR
// sEarthquake := false ;
12035: LD_ADDR_EXP 67
12039: PUSH
12040: LD_INT 0
12042: ST_TO_ADDR
// sAI := false ;
12043: LD_ADDR_EXP 68
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
// sCargo := false ;
12051: LD_ADDR_EXP 71
12055: PUSH
12056: LD_INT 0
12058: ST_TO_ADDR
// sDLaser := false ;
12059: LD_ADDR_EXP 72
12063: PUSH
12064: LD_INT 0
12066: ST_TO_ADDR
// sExchange := false ;
12067: LD_ADDR_EXP 73
12071: PUSH
12072: LD_INT 0
12074: ST_TO_ADDR
// sFac := false ;
12075: LD_ADDR_EXP 74
12079: PUSH
12080: LD_INT 0
12082: ST_TO_ADDR
// sPower := false ;
12083: LD_ADDR_EXP 75
12087: PUSH
12088: LD_INT 0
12090: ST_TO_ADDR
// sRandom := false ;
12091: LD_ADDR_EXP 76
12095: PUSH
12096: LD_INT 0
12098: ST_TO_ADDR
// sShield := false ;
12099: LD_ADDR_EXP 77
12103: PUSH
12104: LD_INT 0
12106: ST_TO_ADDR
// sTime := false ;
12107: LD_ADDR_EXP 78
12111: PUSH
12112: LD_INT 0
12114: ST_TO_ADDR
// sTools := false ;
12115: LD_ADDR_EXP 79
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// sSold := false ;
12123: LD_ADDR_EXP 44
12127: PUSH
12128: LD_INT 0
12130: ST_TO_ADDR
// sDiff := false ;
12131: LD_ADDR_EXP 45
12135: PUSH
12136: LD_INT 0
12138: ST_TO_ADDR
// sFog := false ;
12139: LD_ADDR_EXP 48
12143: PUSH
12144: LD_INT 0
12146: ST_TO_ADDR
// sReset := false ;
12147: LD_ADDR_EXP 49
12151: PUSH
12152: LD_INT 0
12154: ST_TO_ADDR
// sSun := false ;
12155: LD_ADDR_EXP 50
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// sTiger := false ;
12163: LD_ADDR_EXP 46
12167: PUSH
12168: LD_INT 0
12170: ST_TO_ADDR
// sBomb := false ;
12171: LD_ADDR_EXP 47
12175: PUSH
12176: LD_INT 0
12178: ST_TO_ADDR
// sWound := false ;
12179: LD_ADDR_EXP 55
12183: PUSH
12184: LD_INT 0
12186: ST_TO_ADDR
// sBetray := false ;
12187: LD_ADDR_EXP 59
12191: PUSH
12192: LD_INT 0
12194: ST_TO_ADDR
// sContamin := false ;
12195: LD_ADDR_EXP 60
12199: PUSH
12200: LD_INT 0
12202: ST_TO_ADDR
// sOil := false ;
12203: LD_ADDR_EXP 62
12207: PUSH
12208: LD_INT 0
12210: ST_TO_ADDR
// sStu := false ;
12211: LD_ADDR_EXP 66
12215: PUSH
12216: LD_INT 0
12218: ST_TO_ADDR
// sBazooka := false ;
12219: LD_ADDR_EXP 69
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// sMortar := false ;
12227: LD_ADDR_EXP 70
12231: PUSH
12232: LD_INT 0
12234: ST_TO_ADDR
// sRanger := false ;
12235: LD_ADDR_EXP 80
12239: PUSH
12240: LD_INT 0
12242: ST_TO_ADDR
// sComputer := false ;
12243: LD_ADDR_EXP 81
12247: PUSH
12248: LD_INT 0
12250: ST_TO_ADDR
// s30 := false ;
12251: LD_ADDR_EXP 82
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// s60 := false ;
12259: LD_ADDR_EXP 83
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// end ;
12267: LD_VAR 0 1
12271: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
12279: PPUSH
12280: PPUSH
// result := [ ] ;
12281: LD_ADDR_VAR 0 2
12285: PUSH
12286: EMPTY
12287: ST_TO_ADDR
// if campaign_id = 1 then
12288: LD_OWVAR 69
12292: PUSH
12293: LD_INT 1
12295: EQUAL
12296: IFFALSE 15462
// begin case mission_number of 1 :
12298: LD_OWVAR 70
12302: PUSH
12303: LD_INT 1
12305: DOUBLE
12306: EQUAL
12307: IFTRUE 12311
12309: GO 12387
12311: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12312: LD_ADDR_VAR 0 2
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: LD_INT 4
12322: PUSH
12323: LD_INT 11
12325: PUSH
12326: LD_INT 12
12328: PUSH
12329: LD_INT 15
12331: PUSH
12332: LD_INT 16
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_INT 23
12340: PUSH
12341: LD_INT 26
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 101
12357: PUSH
12358: LD_INT 102
12360: PUSH
12361: LD_INT 106
12363: PUSH
12364: LD_INT 116
12366: PUSH
12367: LD_INT 117
12369: PUSH
12370: LD_INT 118
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: ST_TO_ADDR
12385: GO 15460
12387: LD_INT 2
12389: DOUBLE
12390: EQUAL
12391: IFTRUE 12395
12393: GO 12479
12395: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 4
12406: PUSH
12407: LD_INT 11
12409: PUSH
12410: LD_INT 12
12412: PUSH
12413: LD_INT 15
12415: PUSH
12416: LD_INT 16
12418: PUSH
12419: LD_INT 22
12421: PUSH
12422: LD_INT 23
12424: PUSH
12425: LD_INT 26
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 101
12441: PUSH
12442: LD_INT 102
12444: PUSH
12445: LD_INT 105
12447: PUSH
12448: LD_INT 106
12450: PUSH
12451: LD_INT 108
12453: PUSH
12454: LD_INT 116
12456: PUSH
12457: LD_INT 117
12459: PUSH
12460: LD_INT 118
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: ST_TO_ADDR
12477: GO 15460
12479: LD_INT 3
12481: DOUBLE
12482: EQUAL
12483: IFTRUE 12487
12485: GO 12575
12487: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12488: LD_ADDR_VAR 0 2
12492: PUSH
12493: LD_INT 2
12495: PUSH
12496: LD_INT 4
12498: PUSH
12499: LD_INT 5
12501: PUSH
12502: LD_INT 11
12504: PUSH
12505: LD_INT 12
12507: PUSH
12508: LD_INT 15
12510: PUSH
12511: LD_INT 16
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_INT 26
12519: PUSH
12520: LD_INT 36
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 101
12537: PUSH
12538: LD_INT 102
12540: PUSH
12541: LD_INT 105
12543: PUSH
12544: LD_INT 106
12546: PUSH
12547: LD_INT 108
12549: PUSH
12550: LD_INT 116
12552: PUSH
12553: LD_INT 117
12555: PUSH
12556: LD_INT 118
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: ST_TO_ADDR
12573: GO 15460
12575: LD_INT 4
12577: DOUBLE
12578: EQUAL
12579: IFTRUE 12583
12581: GO 12679
12583: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12584: LD_ADDR_VAR 0 2
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: LD_INT 5
12597: PUSH
12598: LD_INT 8
12600: PUSH
12601: LD_INT 11
12603: PUSH
12604: LD_INT 12
12606: PUSH
12607: LD_INT 15
12609: PUSH
12610: LD_INT 16
12612: PUSH
12613: LD_INT 22
12615: PUSH
12616: LD_INT 23
12618: PUSH
12619: LD_INT 26
12621: PUSH
12622: LD_INT 36
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 101
12641: PUSH
12642: LD_INT 102
12644: PUSH
12645: LD_INT 105
12647: PUSH
12648: LD_INT 106
12650: PUSH
12651: LD_INT 108
12653: PUSH
12654: LD_INT 116
12656: PUSH
12657: LD_INT 117
12659: PUSH
12660: LD_INT 118
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: ST_TO_ADDR
12677: GO 15460
12679: LD_INT 5
12681: DOUBLE
12682: EQUAL
12683: IFTRUE 12687
12685: GO 12799
12687: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: LD_INT 5
12701: PUSH
12702: LD_INT 6
12704: PUSH
12705: LD_INT 8
12707: PUSH
12708: LD_INT 11
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 15
12716: PUSH
12717: LD_INT 16
12719: PUSH
12720: LD_INT 22
12722: PUSH
12723: LD_INT 23
12725: PUSH
12726: LD_INT 25
12728: PUSH
12729: LD_INT 26
12731: PUSH
12732: LD_INT 36
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 101
12753: PUSH
12754: LD_INT 102
12756: PUSH
12757: LD_INT 105
12759: PUSH
12760: LD_INT 106
12762: PUSH
12763: LD_INT 108
12765: PUSH
12766: LD_INT 109
12768: PUSH
12769: LD_INT 112
12771: PUSH
12772: LD_INT 116
12774: PUSH
12775: LD_INT 117
12777: PUSH
12778: LD_INT 118
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: ST_TO_ADDR
12797: GO 15460
12799: LD_INT 6
12801: DOUBLE
12802: EQUAL
12803: IFTRUE 12807
12805: GO 12939
12807: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12808: LD_ADDR_VAR 0 2
12812: PUSH
12813: LD_INT 2
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: LD_INT 5
12821: PUSH
12822: LD_INT 6
12824: PUSH
12825: LD_INT 8
12827: PUSH
12828: LD_INT 11
12830: PUSH
12831: LD_INT 12
12833: PUSH
12834: LD_INT 15
12836: PUSH
12837: LD_INT 16
12839: PUSH
12840: LD_INT 20
12842: PUSH
12843: LD_INT 21
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 23
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 26
12857: PUSH
12858: LD_INT 30
12860: PUSH
12861: LD_INT 31
12863: PUSH
12864: LD_INT 32
12866: PUSH
12867: LD_INT 36
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 101
12893: PUSH
12894: LD_INT 102
12896: PUSH
12897: LD_INT 105
12899: PUSH
12900: LD_INT 106
12902: PUSH
12903: LD_INT 108
12905: PUSH
12906: LD_INT 109
12908: PUSH
12909: LD_INT 112
12911: PUSH
12912: LD_INT 116
12914: PUSH
12915: LD_INT 117
12917: PUSH
12918: LD_INT 118
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: ST_TO_ADDR
12937: GO 15460
12939: LD_INT 7
12941: DOUBLE
12942: EQUAL
12943: IFTRUE 12947
12945: GO 13059
12947: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12948: LD_ADDR_VAR 0 2
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 4
12958: PUSH
12959: LD_INT 5
12961: PUSH
12962: LD_INT 7
12964: PUSH
12965: LD_INT 11
12967: PUSH
12968: LD_INT 12
12970: PUSH
12971: LD_INT 15
12973: PUSH
12974: LD_INT 16
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_INT 23
12988: PUSH
12989: LD_INT 25
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 101
13013: PUSH
13014: LD_INT 102
13016: PUSH
13017: LD_INT 103
13019: PUSH
13020: LD_INT 105
13022: PUSH
13023: LD_INT 106
13025: PUSH
13026: LD_INT 108
13028: PUSH
13029: LD_INT 112
13031: PUSH
13032: LD_INT 116
13034: PUSH
13035: LD_INT 117
13037: PUSH
13038: LD_INT 118
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: ST_TO_ADDR
13057: GO 15460
13059: LD_INT 8
13061: DOUBLE
13062: EQUAL
13063: IFTRUE 13067
13065: GO 13207
13067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: LD_INT 4
13078: PUSH
13079: LD_INT 5
13081: PUSH
13082: LD_INT 6
13084: PUSH
13085: LD_INT 7
13087: PUSH
13088: LD_INT 8
13090: PUSH
13091: LD_INT 11
13093: PUSH
13094: LD_INT 12
13096: PUSH
13097: LD_INT 15
13099: PUSH
13100: LD_INT 16
13102: PUSH
13103: LD_INT 20
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 25
13117: PUSH
13118: LD_INT 26
13120: PUSH
13121: LD_INT 30
13123: PUSH
13124: LD_INT 31
13126: PUSH
13127: LD_INT 32
13129: PUSH
13130: LD_INT 36
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 101
13157: PUSH
13158: LD_INT 102
13160: PUSH
13161: LD_INT 103
13163: PUSH
13164: LD_INT 105
13166: PUSH
13167: LD_INT 106
13169: PUSH
13170: LD_INT 108
13172: PUSH
13173: LD_INT 109
13175: PUSH
13176: LD_INT 112
13178: PUSH
13179: LD_INT 116
13181: PUSH
13182: LD_INT 117
13184: PUSH
13185: LD_INT 118
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: ST_TO_ADDR
13205: GO 15460
13207: LD_INT 9
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13363
13215: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13216: LD_ADDR_VAR 0 2
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: LD_INT 4
13226: PUSH
13227: LD_INT 5
13229: PUSH
13230: LD_INT 6
13232: PUSH
13233: LD_INT 7
13235: PUSH
13236: LD_INT 8
13238: PUSH
13239: LD_INT 11
13241: PUSH
13242: LD_INT 12
13244: PUSH
13245: LD_INT 15
13247: PUSH
13248: LD_INT 16
13250: PUSH
13251: LD_INT 20
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 22
13259: PUSH
13260: LD_INT 23
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 26
13268: PUSH
13269: LD_INT 28
13271: PUSH
13272: LD_INT 30
13274: PUSH
13275: LD_INT 31
13277: PUSH
13278: LD_INT 32
13280: PUSH
13281: LD_INT 36
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 101
13309: PUSH
13310: LD_INT 102
13312: PUSH
13313: LD_INT 103
13315: PUSH
13316: LD_INT 105
13318: PUSH
13319: LD_INT 106
13321: PUSH
13322: LD_INT 108
13324: PUSH
13325: LD_INT 109
13327: PUSH
13328: LD_INT 112
13330: PUSH
13331: LD_INT 114
13333: PUSH
13334: LD_INT 116
13336: PUSH
13337: LD_INT 117
13339: PUSH
13340: LD_INT 118
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: ST_TO_ADDR
13361: GO 15460
13363: LD_INT 10
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13567
13371: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13372: LD_ADDR_VAR 0 2
13376: PUSH
13377: LD_INT 2
13379: PUSH
13380: LD_INT 4
13382: PUSH
13383: LD_INT 5
13385: PUSH
13386: LD_INT 6
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: LD_INT 8
13394: PUSH
13395: LD_INT 9
13397: PUSH
13398: LD_INT 10
13400: PUSH
13401: LD_INT 11
13403: PUSH
13404: LD_INT 12
13406: PUSH
13407: LD_INT 13
13409: PUSH
13410: LD_INT 14
13412: PUSH
13413: LD_INT 15
13415: PUSH
13416: LD_INT 16
13418: PUSH
13419: LD_INT 17
13421: PUSH
13422: LD_INT 18
13424: PUSH
13425: LD_INT 19
13427: PUSH
13428: LD_INT 20
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 22
13436: PUSH
13437: LD_INT 23
13439: PUSH
13440: LD_INT 24
13442: PUSH
13443: LD_INT 25
13445: PUSH
13446: LD_INT 26
13448: PUSH
13449: LD_INT 28
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 31
13457: PUSH
13458: LD_INT 32
13460: PUSH
13461: LD_INT 36
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 101
13497: PUSH
13498: LD_INT 102
13500: PUSH
13501: LD_INT 103
13503: PUSH
13504: LD_INT 104
13506: PUSH
13507: LD_INT 105
13509: PUSH
13510: LD_INT 106
13512: PUSH
13513: LD_INT 107
13515: PUSH
13516: LD_INT 108
13518: PUSH
13519: LD_INT 109
13521: PUSH
13522: LD_INT 110
13524: PUSH
13525: LD_INT 111
13527: PUSH
13528: LD_INT 112
13530: PUSH
13531: LD_INT 114
13533: PUSH
13534: LD_INT 116
13536: PUSH
13537: LD_INT 117
13539: PUSH
13540: LD_INT 118
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: ST_TO_ADDR
13565: GO 15460
13567: LD_INT 11
13569: DOUBLE
13570: EQUAL
13571: IFTRUE 13575
13573: GO 13779
13575: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13576: LD_ADDR_VAR 0 2
13580: PUSH
13581: LD_INT 2
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: LD_INT 7
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: LD_INT 9
13604: PUSH
13605: LD_INT 10
13607: PUSH
13608: LD_INT 11
13610: PUSH
13611: LD_INT 12
13613: PUSH
13614: LD_INT 13
13616: PUSH
13617: LD_INT 14
13619: PUSH
13620: LD_INT 15
13622: PUSH
13623: LD_INT 16
13625: PUSH
13626: LD_INT 17
13628: PUSH
13629: LD_INT 18
13631: PUSH
13632: LD_INT 19
13634: PUSH
13635: LD_INT 20
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 22
13643: PUSH
13644: LD_INT 23
13646: PUSH
13647: LD_INT 24
13649: PUSH
13650: LD_INT 25
13652: PUSH
13653: LD_INT 26
13655: PUSH
13656: LD_INT 28
13658: PUSH
13659: LD_INT 30
13661: PUSH
13662: LD_INT 31
13664: PUSH
13665: LD_INT 32
13667: PUSH
13668: LD_INT 34
13670: PUSH
13671: LD_INT 36
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 101
13709: PUSH
13710: LD_INT 102
13712: PUSH
13713: LD_INT 103
13715: PUSH
13716: LD_INT 104
13718: PUSH
13719: LD_INT 105
13721: PUSH
13722: LD_INT 106
13724: PUSH
13725: LD_INT 107
13727: PUSH
13728: LD_INT 108
13730: PUSH
13731: LD_INT 109
13733: PUSH
13734: LD_INT 110
13736: PUSH
13737: LD_INT 111
13739: PUSH
13740: LD_INT 112
13742: PUSH
13743: LD_INT 114
13745: PUSH
13746: LD_INT 116
13748: PUSH
13749: LD_INT 117
13751: PUSH
13752: LD_INT 118
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 15460
13779: LD_INT 12
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 14007
13787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 7
13813: PUSH
13814: LD_INT 8
13816: PUSH
13817: LD_INT 9
13819: PUSH
13820: LD_INT 10
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 13
13831: PUSH
13832: LD_INT 14
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 17
13843: PUSH
13844: LD_INT 18
13846: PUSH
13847: LD_INT 19
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 26
13870: PUSH
13871: LD_INT 27
13873: PUSH
13874: LD_INT 28
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 32
13885: PUSH
13886: LD_INT 33
13888: PUSH
13889: LD_INT 34
13891: PUSH
13892: LD_INT 36
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 101
13933: PUSH
13934: LD_INT 102
13936: PUSH
13937: LD_INT 103
13939: PUSH
13940: LD_INT 104
13942: PUSH
13943: LD_INT 105
13945: PUSH
13946: LD_INT 106
13948: PUSH
13949: LD_INT 107
13951: PUSH
13952: LD_INT 108
13954: PUSH
13955: LD_INT 109
13957: PUSH
13958: LD_INT 110
13960: PUSH
13961: LD_INT 111
13963: PUSH
13964: LD_INT 112
13966: PUSH
13967: LD_INT 113
13969: PUSH
13970: LD_INT 114
13972: PUSH
13973: LD_INT 116
13975: PUSH
13976: LD_INT 117
13978: PUSH
13979: LD_INT 118
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: ST_TO_ADDR
14005: GO 15460
14007: LD_INT 13
14009: DOUBLE
14010: EQUAL
14011: IFTRUE 14015
14013: GO 14223
14015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14016: LD_ADDR_VAR 0 2
14020: PUSH
14021: LD_INT 1
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: LD_INT 5
14035: PUSH
14036: LD_INT 8
14038: PUSH
14039: LD_INT 9
14041: PUSH
14042: LD_INT 10
14044: PUSH
14045: LD_INT 11
14047: PUSH
14048: LD_INT 12
14050: PUSH
14051: LD_INT 14
14053: PUSH
14054: LD_INT 15
14056: PUSH
14057: LD_INT 16
14059: PUSH
14060: LD_INT 17
14062: PUSH
14063: LD_INT 18
14065: PUSH
14066: LD_INT 19
14068: PUSH
14069: LD_INT 20
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_INT 23
14080: PUSH
14081: LD_INT 24
14083: PUSH
14084: LD_INT 25
14086: PUSH
14087: LD_INT 26
14089: PUSH
14090: LD_INT 27
14092: PUSH
14093: LD_INT 28
14095: PUSH
14096: LD_INT 30
14098: PUSH
14099: LD_INT 31
14101: PUSH
14102: LD_INT 32
14104: PUSH
14105: LD_INT 33
14107: PUSH
14108: LD_INT 34
14110: PUSH
14111: LD_INT 36
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 101
14149: PUSH
14150: LD_INT 102
14152: PUSH
14153: LD_INT 103
14155: PUSH
14156: LD_INT 104
14158: PUSH
14159: LD_INT 105
14161: PUSH
14162: LD_INT 106
14164: PUSH
14165: LD_INT 107
14167: PUSH
14168: LD_INT 108
14170: PUSH
14171: LD_INT 109
14173: PUSH
14174: LD_INT 110
14176: PUSH
14177: LD_INT 111
14179: PUSH
14180: LD_INT 112
14182: PUSH
14183: LD_INT 113
14185: PUSH
14186: LD_INT 114
14188: PUSH
14189: LD_INT 116
14191: PUSH
14192: LD_INT 117
14194: PUSH
14195: LD_INT 118
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: ST_TO_ADDR
14221: GO 15460
14223: LD_INT 14
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14455
14231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14232: LD_ADDR_VAR 0 2
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 3
14245: PUSH
14246: LD_INT 4
14248: PUSH
14249: LD_INT 5
14251: PUSH
14252: LD_INT 6
14254: PUSH
14255: LD_INT 7
14257: PUSH
14258: LD_INT 8
14260: PUSH
14261: LD_INT 9
14263: PUSH
14264: LD_INT 10
14266: PUSH
14267: LD_INT 11
14269: PUSH
14270: LD_INT 12
14272: PUSH
14273: LD_INT 13
14275: PUSH
14276: LD_INT 14
14278: PUSH
14279: LD_INT 15
14281: PUSH
14282: LD_INT 16
14284: PUSH
14285: LD_INT 17
14287: PUSH
14288: LD_INT 18
14290: PUSH
14291: LD_INT 19
14293: PUSH
14294: LD_INT 20
14296: PUSH
14297: LD_INT 21
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 23
14305: PUSH
14306: LD_INT 24
14308: PUSH
14309: LD_INT 25
14311: PUSH
14312: LD_INT 26
14314: PUSH
14315: LD_INT 27
14317: PUSH
14318: LD_INT 28
14320: PUSH
14321: LD_INT 29
14323: PUSH
14324: LD_INT 30
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 32
14332: PUSH
14333: LD_INT 33
14335: PUSH
14336: LD_INT 34
14338: PUSH
14339: LD_INT 36
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 101
14381: PUSH
14382: LD_INT 102
14384: PUSH
14385: LD_INT 103
14387: PUSH
14388: LD_INT 104
14390: PUSH
14391: LD_INT 105
14393: PUSH
14394: LD_INT 106
14396: PUSH
14397: LD_INT 107
14399: PUSH
14400: LD_INT 108
14402: PUSH
14403: LD_INT 109
14405: PUSH
14406: LD_INT 110
14408: PUSH
14409: LD_INT 111
14411: PUSH
14412: LD_INT 112
14414: PUSH
14415: LD_INT 113
14417: PUSH
14418: LD_INT 114
14420: PUSH
14421: LD_INT 116
14423: PUSH
14424: LD_INT 117
14426: PUSH
14427: LD_INT 118
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: ST_TO_ADDR
14453: GO 15460
14455: LD_INT 15
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14687
14463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14464: LD_ADDR_VAR 0 2
14468: PUSH
14469: LD_INT 1
14471: PUSH
14472: LD_INT 2
14474: PUSH
14475: LD_INT 3
14477: PUSH
14478: LD_INT 4
14480: PUSH
14481: LD_INT 5
14483: PUSH
14484: LD_INT 6
14486: PUSH
14487: LD_INT 7
14489: PUSH
14490: LD_INT 8
14492: PUSH
14493: LD_INT 9
14495: PUSH
14496: LD_INT 10
14498: PUSH
14499: LD_INT 11
14501: PUSH
14502: LD_INT 12
14504: PUSH
14505: LD_INT 13
14507: PUSH
14508: LD_INT 14
14510: PUSH
14511: LD_INT 15
14513: PUSH
14514: LD_INT 16
14516: PUSH
14517: LD_INT 17
14519: PUSH
14520: LD_INT 18
14522: PUSH
14523: LD_INT 19
14525: PUSH
14526: LD_INT 20
14528: PUSH
14529: LD_INT 21
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_INT 23
14537: PUSH
14538: LD_INT 24
14540: PUSH
14541: LD_INT 25
14543: PUSH
14544: LD_INT 26
14546: PUSH
14547: LD_INT 27
14549: PUSH
14550: LD_INT 28
14552: PUSH
14553: LD_INT 29
14555: PUSH
14556: LD_INT 30
14558: PUSH
14559: LD_INT 31
14561: PUSH
14562: LD_INT 32
14564: PUSH
14565: LD_INT 33
14567: PUSH
14568: LD_INT 34
14570: PUSH
14571: LD_INT 36
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 101
14613: PUSH
14614: LD_INT 102
14616: PUSH
14617: LD_INT 103
14619: PUSH
14620: LD_INT 104
14622: PUSH
14623: LD_INT 105
14625: PUSH
14626: LD_INT 106
14628: PUSH
14629: LD_INT 107
14631: PUSH
14632: LD_INT 108
14634: PUSH
14635: LD_INT 109
14637: PUSH
14638: LD_INT 110
14640: PUSH
14641: LD_INT 111
14643: PUSH
14644: LD_INT 112
14646: PUSH
14647: LD_INT 113
14649: PUSH
14650: LD_INT 114
14652: PUSH
14653: LD_INT 116
14655: PUSH
14656: LD_INT 117
14658: PUSH
14659: LD_INT 118
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: ST_TO_ADDR
14685: GO 15460
14687: LD_INT 16
14689: DOUBLE
14690: EQUAL
14691: IFTRUE 14695
14693: GO 14831
14695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14696: LD_ADDR_VAR 0 2
14700: PUSH
14701: LD_INT 2
14703: PUSH
14704: LD_INT 4
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: LD_INT 7
14712: PUSH
14713: LD_INT 11
14715: PUSH
14716: LD_INT 12
14718: PUSH
14719: LD_INT 15
14721: PUSH
14722: LD_INT 16
14724: PUSH
14725: LD_INT 20
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 22
14733: PUSH
14734: LD_INT 23
14736: PUSH
14737: LD_INT 25
14739: PUSH
14740: LD_INT 26
14742: PUSH
14743: LD_INT 30
14745: PUSH
14746: LD_INT 31
14748: PUSH
14749: LD_INT 32
14751: PUSH
14752: LD_INT 33
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 101
14781: PUSH
14782: LD_INT 102
14784: PUSH
14785: LD_INT 103
14787: PUSH
14788: LD_INT 106
14790: PUSH
14791: LD_INT 108
14793: PUSH
14794: LD_INT 112
14796: PUSH
14797: LD_INT 113
14799: PUSH
14800: LD_INT 114
14802: PUSH
14803: LD_INT 116
14805: PUSH
14806: LD_INT 117
14808: PUSH
14809: LD_INT 118
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: ST_TO_ADDR
14829: GO 15460
14831: LD_INT 17
14833: DOUBLE
14834: EQUAL
14835: IFTRUE 14839
14837: GO 15063
14839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14840: LD_ADDR_VAR 0 2
14844: PUSH
14845: LD_INT 1
14847: PUSH
14848: LD_INT 2
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: LD_INT 4
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 6
14862: PUSH
14863: LD_INT 7
14865: PUSH
14866: LD_INT 8
14868: PUSH
14869: LD_INT 9
14871: PUSH
14872: LD_INT 10
14874: PUSH
14875: LD_INT 11
14877: PUSH
14878: LD_INT 12
14880: PUSH
14881: LD_INT 13
14883: PUSH
14884: LD_INT 14
14886: PUSH
14887: LD_INT 15
14889: PUSH
14890: LD_INT 16
14892: PUSH
14893: LD_INT 17
14895: PUSH
14896: LD_INT 18
14898: PUSH
14899: LD_INT 19
14901: PUSH
14902: LD_INT 20
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_INT 23
14913: PUSH
14914: LD_INT 24
14916: PUSH
14917: LD_INT 25
14919: PUSH
14920: LD_INT 26
14922: PUSH
14923: LD_INT 27
14925: PUSH
14926: LD_INT 28
14928: PUSH
14929: LD_INT 29
14931: PUSH
14932: LD_INT 30
14934: PUSH
14935: LD_INT 31
14937: PUSH
14938: LD_INT 32
14940: PUSH
14941: LD_INT 33
14943: PUSH
14944: LD_INT 34
14946: PUSH
14947: LD_INT 36
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 101
14989: PUSH
14990: LD_INT 102
14992: PUSH
14993: LD_INT 103
14995: PUSH
14996: LD_INT 104
14998: PUSH
14999: LD_INT 105
15001: PUSH
15002: LD_INT 106
15004: PUSH
15005: LD_INT 107
15007: PUSH
15008: LD_INT 108
15010: PUSH
15011: LD_INT 109
15013: PUSH
15014: LD_INT 110
15016: PUSH
15017: LD_INT 111
15019: PUSH
15020: LD_INT 112
15022: PUSH
15023: LD_INT 113
15025: PUSH
15026: LD_INT 114
15028: PUSH
15029: LD_INT 116
15031: PUSH
15032: LD_INT 117
15034: PUSH
15035: LD_INT 118
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: ST_TO_ADDR
15061: GO 15460
15063: LD_INT 18
15065: DOUBLE
15066: EQUAL
15067: IFTRUE 15071
15069: GO 15219
15071: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: LD_INT 4
15082: PUSH
15083: LD_INT 5
15085: PUSH
15086: LD_INT 7
15088: PUSH
15089: LD_INT 11
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: LD_INT 15
15097: PUSH
15098: LD_INT 16
15100: PUSH
15101: LD_INT 20
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 22
15109: PUSH
15110: LD_INT 23
15112: PUSH
15113: LD_INT 25
15115: PUSH
15116: LD_INT 26
15118: PUSH
15119: LD_INT 30
15121: PUSH
15122: LD_INT 31
15124: PUSH
15125: LD_INT 32
15127: PUSH
15128: LD_INT 33
15130: PUSH
15131: LD_INT 34
15133: PUSH
15134: LD_INT 35
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 101
15165: PUSH
15166: LD_INT 102
15168: PUSH
15169: LD_INT 103
15171: PUSH
15172: LD_INT 106
15174: PUSH
15175: LD_INT 108
15177: PUSH
15178: LD_INT 112
15180: PUSH
15181: LD_INT 113
15183: PUSH
15184: LD_INT 114
15186: PUSH
15187: LD_INT 115
15189: PUSH
15190: LD_INT 116
15192: PUSH
15193: LD_INT 117
15195: PUSH
15196: LD_INT 118
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: ST_TO_ADDR
15217: GO 15460
15219: LD_INT 19
15221: DOUBLE
15222: EQUAL
15223: IFTRUE 15227
15225: GO 15459
15227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15228: LD_ADDR_VAR 0 2
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: LD_INT 2
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: LD_INT 5
15247: PUSH
15248: LD_INT 6
15250: PUSH
15251: LD_INT 7
15253: PUSH
15254: LD_INT 8
15256: PUSH
15257: LD_INT 9
15259: PUSH
15260: LD_INT 10
15262: PUSH
15263: LD_INT 11
15265: PUSH
15266: LD_INT 12
15268: PUSH
15269: LD_INT 13
15271: PUSH
15272: LD_INT 14
15274: PUSH
15275: LD_INT 15
15277: PUSH
15278: LD_INT 16
15280: PUSH
15281: LD_INT 17
15283: PUSH
15284: LD_INT 18
15286: PUSH
15287: LD_INT 19
15289: PUSH
15290: LD_INT 20
15292: PUSH
15293: LD_INT 21
15295: PUSH
15296: LD_INT 22
15298: PUSH
15299: LD_INT 23
15301: PUSH
15302: LD_INT 24
15304: PUSH
15305: LD_INT 25
15307: PUSH
15308: LD_INT 26
15310: PUSH
15311: LD_INT 27
15313: PUSH
15314: LD_INT 28
15316: PUSH
15317: LD_INT 29
15319: PUSH
15320: LD_INT 30
15322: PUSH
15323: LD_INT 31
15325: PUSH
15326: LD_INT 32
15328: PUSH
15329: LD_INT 33
15331: PUSH
15332: LD_INT 34
15334: PUSH
15335: LD_INT 35
15337: PUSH
15338: LD_INT 36
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 101
15381: PUSH
15382: LD_INT 102
15384: PUSH
15385: LD_INT 103
15387: PUSH
15388: LD_INT 104
15390: PUSH
15391: LD_INT 105
15393: PUSH
15394: LD_INT 106
15396: PUSH
15397: LD_INT 107
15399: PUSH
15400: LD_INT 108
15402: PUSH
15403: LD_INT 109
15405: PUSH
15406: LD_INT 110
15408: PUSH
15409: LD_INT 111
15411: PUSH
15412: LD_INT 112
15414: PUSH
15415: LD_INT 113
15417: PUSH
15418: LD_INT 114
15420: PUSH
15421: LD_INT 115
15423: PUSH
15424: LD_INT 116
15426: PUSH
15427: LD_INT 117
15429: PUSH
15430: LD_INT 118
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: ST_TO_ADDR
15457: GO 15460
15459: POP
// end else
15460: GO 15691
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_INT 1
15469: PUSH
15470: LD_INT 2
15472: PUSH
15473: LD_INT 3
15475: PUSH
15476: LD_INT 4
15478: PUSH
15479: LD_INT 5
15481: PUSH
15482: LD_INT 6
15484: PUSH
15485: LD_INT 7
15487: PUSH
15488: LD_INT 8
15490: PUSH
15491: LD_INT 9
15493: PUSH
15494: LD_INT 10
15496: PUSH
15497: LD_INT 11
15499: PUSH
15500: LD_INT 12
15502: PUSH
15503: LD_INT 13
15505: PUSH
15506: LD_INT 14
15508: PUSH
15509: LD_INT 15
15511: PUSH
15512: LD_INT 16
15514: PUSH
15515: LD_INT 17
15517: PUSH
15518: LD_INT 18
15520: PUSH
15521: LD_INT 19
15523: PUSH
15524: LD_INT 20
15526: PUSH
15527: LD_INT 21
15529: PUSH
15530: LD_INT 22
15532: PUSH
15533: LD_INT 23
15535: PUSH
15536: LD_INT 24
15538: PUSH
15539: LD_INT 25
15541: PUSH
15542: LD_INT 26
15544: PUSH
15545: LD_INT 27
15547: PUSH
15548: LD_INT 28
15550: PUSH
15551: LD_INT 29
15553: PUSH
15554: LD_INT 30
15556: PUSH
15557: LD_INT 31
15559: PUSH
15560: LD_INT 32
15562: PUSH
15563: LD_INT 33
15565: PUSH
15566: LD_INT 34
15568: PUSH
15569: LD_INT 35
15571: PUSH
15572: LD_INT 36
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 101
15615: PUSH
15616: LD_INT 102
15618: PUSH
15619: LD_INT 103
15621: PUSH
15622: LD_INT 104
15624: PUSH
15625: LD_INT 105
15627: PUSH
15628: LD_INT 106
15630: PUSH
15631: LD_INT 107
15633: PUSH
15634: LD_INT 108
15636: PUSH
15637: LD_INT 109
15639: PUSH
15640: LD_INT 110
15642: PUSH
15643: LD_INT 111
15645: PUSH
15646: LD_INT 112
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: LD_INT 114
15654: PUSH
15655: LD_INT 115
15657: PUSH
15658: LD_INT 116
15660: PUSH
15661: LD_INT 117
15663: PUSH
15664: LD_INT 118
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
// if result then
15691: LD_VAR 0 2
15695: IFFALSE 16481
// begin normal :=  ;
15697: LD_ADDR_VAR 0 5
15701: PUSH
15702: LD_STRING 
15704: ST_TO_ADDR
// hardcore :=  ;
15705: LD_ADDR_VAR 0 6
15709: PUSH
15710: LD_STRING 
15712: ST_TO_ADDR
// active :=  ;
15713: LD_ADDR_VAR 0 7
15717: PUSH
15718: LD_STRING 
15720: ST_TO_ADDR
// for i = 1 to normalCounter do
15721: LD_ADDR_VAR 0 8
15725: PUSH
15726: DOUBLE
15727: LD_INT 1
15729: DEC
15730: ST_TO_ADDR
15731: LD_EXP 28
15735: PUSH
15736: FOR_TO
15737: IFFALSE 15838
// begin tmp := 0 ;
15739: LD_ADDR_VAR 0 3
15743: PUSH
15744: LD_STRING 0
15746: ST_TO_ADDR
// if result [ 1 ] then
15747: LD_VAR 0 2
15751: PUSH
15752: LD_INT 1
15754: ARRAY
15755: IFFALSE 15820
// if result [ 1 ] [ 1 ] = i then
15757: LD_VAR 0 2
15761: PUSH
15762: LD_INT 1
15764: ARRAY
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PUSH
15770: LD_VAR 0 8
15774: EQUAL
15775: IFFALSE 15820
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15777: LD_ADDR_VAR 0 2
15781: PUSH
15782: LD_VAR 0 2
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: LD_VAR 0 2
15794: PUSH
15795: LD_INT 1
15797: ARRAY
15798: PPUSH
15799: LD_INT 1
15801: PPUSH
15802: CALL_OW 3
15806: PPUSH
15807: CALL_OW 1
15811: ST_TO_ADDR
// tmp := 1 ;
15812: LD_ADDR_VAR 0 3
15816: PUSH
15817: LD_STRING 1
15819: ST_TO_ADDR
// end ; normal := normal & tmp ;
15820: LD_ADDR_VAR 0 5
15824: PUSH
15825: LD_VAR 0 5
15829: PUSH
15830: LD_VAR 0 3
15834: STR
15835: ST_TO_ADDR
// end ;
15836: GO 15736
15838: POP
15839: POP
// for i = 1 to hardcoreCounter do
15840: LD_ADDR_VAR 0 8
15844: PUSH
15845: DOUBLE
15846: LD_INT 1
15848: DEC
15849: ST_TO_ADDR
15850: LD_EXP 29
15854: PUSH
15855: FOR_TO
15856: IFFALSE 15961
// begin tmp := 0 ;
15858: LD_ADDR_VAR 0 3
15862: PUSH
15863: LD_STRING 0
15865: ST_TO_ADDR
// if result [ 2 ] then
15866: LD_VAR 0 2
15870: PUSH
15871: LD_INT 2
15873: ARRAY
15874: IFFALSE 15943
// if result [ 2 ] [ 1 ] = 100 + i then
15876: LD_VAR 0 2
15880: PUSH
15881: LD_INT 2
15883: ARRAY
15884: PUSH
15885: LD_INT 1
15887: ARRAY
15888: PUSH
15889: LD_INT 100
15891: PUSH
15892: LD_VAR 0 8
15896: PLUS
15897: EQUAL
15898: IFFALSE 15943
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15900: LD_ADDR_VAR 0 2
15904: PUSH
15905: LD_VAR 0 2
15909: PPUSH
15910: LD_INT 2
15912: PPUSH
15913: LD_VAR 0 2
15917: PUSH
15918: LD_INT 2
15920: ARRAY
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 3
15929: PPUSH
15930: CALL_OW 1
15934: ST_TO_ADDR
// tmp := 1 ;
15935: LD_ADDR_VAR 0 3
15939: PUSH
15940: LD_STRING 1
15942: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15943: LD_ADDR_VAR 0 6
15947: PUSH
15948: LD_VAR 0 6
15952: PUSH
15953: LD_VAR 0 3
15957: STR
15958: ST_TO_ADDR
// end ;
15959: GO 15855
15961: POP
15962: POP
// if isGameLoad then
15963: LD_VAR 0 1
15967: IFFALSE 16442
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15969: LD_ADDR_VAR 0 4
15973: PUSH
15974: LD_EXP 32
15978: PUSH
15979: LD_EXP 31
15983: PUSH
15984: LD_EXP 33
15988: PUSH
15989: LD_EXP 30
15993: PUSH
15994: LD_EXP 34
15998: PUSH
15999: LD_EXP 35
16003: PUSH
16004: LD_EXP 36
16008: PUSH
16009: LD_EXP 37
16013: PUSH
16014: LD_EXP 38
16018: PUSH
16019: LD_EXP 39
16023: PUSH
16024: LD_EXP 40
16028: PUSH
16029: LD_EXP 41
16033: PUSH
16034: LD_EXP 42
16038: PUSH
16039: LD_EXP 43
16043: PUSH
16044: LD_EXP 51
16048: PUSH
16049: LD_EXP 52
16053: PUSH
16054: LD_EXP 53
16058: PUSH
16059: LD_EXP 54
16063: PUSH
16064: LD_EXP 56
16068: PUSH
16069: LD_EXP 57
16073: PUSH
16074: LD_EXP 58
16078: PUSH
16079: LD_EXP 61
16083: PUSH
16084: LD_EXP 63
16088: PUSH
16089: LD_EXP 64
16093: PUSH
16094: LD_EXP 65
16098: PUSH
16099: LD_EXP 67
16103: PUSH
16104: LD_EXP 68
16108: PUSH
16109: LD_EXP 71
16113: PUSH
16114: LD_EXP 72
16118: PUSH
16119: LD_EXP 73
16123: PUSH
16124: LD_EXP 74
16128: PUSH
16129: LD_EXP 75
16133: PUSH
16134: LD_EXP 76
16138: PUSH
16139: LD_EXP 77
16143: PUSH
16144: LD_EXP 78
16148: PUSH
16149: LD_EXP 79
16153: PUSH
16154: LD_EXP 44
16158: PUSH
16159: LD_EXP 45
16163: PUSH
16164: LD_EXP 48
16168: PUSH
16169: LD_EXP 49
16173: PUSH
16174: LD_EXP 50
16178: PUSH
16179: LD_EXP 46
16183: PUSH
16184: LD_EXP 47
16188: PUSH
16189: LD_EXP 55
16193: PUSH
16194: LD_EXP 59
16198: PUSH
16199: LD_EXP 60
16203: PUSH
16204: LD_EXP 62
16208: PUSH
16209: LD_EXP 66
16213: PUSH
16214: LD_EXP 69
16218: PUSH
16219: LD_EXP 70
16223: PUSH
16224: LD_EXP 80
16228: PUSH
16229: LD_EXP 81
16233: PUSH
16234: LD_EXP 82
16238: PUSH
16239: LD_EXP 83
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: ST_TO_ADDR
// tmp :=  ;
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: LD_STRING 
16307: ST_TO_ADDR
// for i = 1 to normalCounter do
16308: LD_ADDR_VAR 0 8
16312: PUSH
16313: DOUBLE
16314: LD_INT 1
16316: DEC
16317: ST_TO_ADDR
16318: LD_EXP 28
16322: PUSH
16323: FOR_TO
16324: IFFALSE 16360
// begin if flags [ i ] then
16326: LD_VAR 0 4
16330: PUSH
16331: LD_VAR 0 8
16335: ARRAY
16336: IFFALSE 16358
// tmp := tmp & i & ; ;
16338: LD_ADDR_VAR 0 3
16342: PUSH
16343: LD_VAR 0 3
16347: PUSH
16348: LD_VAR 0 8
16352: STR
16353: PUSH
16354: LD_STRING ;
16356: STR
16357: ST_TO_ADDR
// end ;
16358: GO 16323
16360: POP
16361: POP
// for i = 1 to hardcoreCounter do
16362: LD_ADDR_VAR 0 8
16366: PUSH
16367: DOUBLE
16368: LD_INT 1
16370: DEC
16371: ST_TO_ADDR
16372: LD_EXP 29
16376: PUSH
16377: FOR_TO
16378: IFFALSE 16424
// begin if flags [ normalCounter + i ] then
16380: LD_VAR 0 4
16384: PUSH
16385: LD_EXP 28
16389: PUSH
16390: LD_VAR 0 8
16394: PLUS
16395: ARRAY
16396: IFFALSE 16422
// tmp := tmp & ( 100 + i ) & ; ;
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_VAR 0 3
16407: PUSH
16408: LD_INT 100
16410: PUSH
16411: LD_VAR 0 8
16415: PLUS
16416: STR
16417: PUSH
16418: LD_STRING ;
16420: STR
16421: ST_TO_ADDR
// end ;
16422: GO 16377
16424: POP
16425: POP
// if tmp then
16426: LD_VAR 0 3
16430: IFFALSE 16442
// active := tmp ;
16432: LD_ADDR_VAR 0 7
16436: PUSH
16437: LD_VAR 0 3
16441: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16442: LD_STRING getStreamItemsFromMission("
16444: PUSH
16445: LD_VAR 0 5
16449: STR
16450: PUSH
16451: LD_STRING ","
16453: STR
16454: PUSH
16455: LD_VAR 0 6
16459: STR
16460: PUSH
16461: LD_STRING ","
16463: STR
16464: PUSH
16465: LD_VAR 0 7
16469: STR
16470: PUSH
16471: LD_STRING ")
16473: STR
16474: PPUSH
16475: CALL_OW 559
// end else
16479: GO 16488
// ToLua ( getStreamItemsFromMission("","","") ) ;
16481: LD_STRING getStreamItemsFromMission("","","")
16483: PPUSH
16484: CALL_OW 559
// end ;
16488: LD_VAR 0 2
16492: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16493: LD_EXP 27
16497: IFFALSE 16505
16499: PUSH
16500: LD_EXP 32
16504: AND
16505: IFFALSE 16629
16507: GO 16509
16509: DISABLE
16510: LD_INT 0
16512: PPUSH
16513: PPUSH
// begin enable ;
16514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_OWVAR 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: LD_INT 34
16537: PUSH
16538: LD_INT 7
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 34
16547: PUSH
16548: LD_INT 45
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 34
16557: PUSH
16558: LD_INT 28
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 34
16567: PUSH
16568: LD_INT 47
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PPUSH
16586: CALL_OW 69
16590: ST_TO_ADDR
// if not tmp then
16591: LD_VAR 0 2
16595: NOT
16596: IFFALSE 16600
// exit ;
16598: GO 16629
// for i in tmp do
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_VAR 0 2
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16627
// begin SetLives ( i , 0 ) ;
16613: LD_VAR 0 1
16617: PPUSH
16618: LD_INT 0
16620: PPUSH
16621: CALL_OW 234
// end ;
16625: GO 16610
16627: POP
16628: POP
// end ;
16629: PPOPN 2
16631: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16632: LD_EXP 27
16636: IFFALSE 16644
16638: PUSH
16639: LD_EXP 33
16643: AND
16644: IFFALSE 16728
16646: GO 16648
16648: DISABLE
16649: LD_INT 0
16651: PPUSH
16652: PPUSH
// begin enable ;
16653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16654: LD_ADDR_VAR 0 2
16658: PUSH
16659: LD_INT 22
16661: PUSH
16662: LD_OWVAR 2
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 32
16673: PUSH
16674: LD_INT 3
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PPUSH
16685: CALL_OW 69
16689: ST_TO_ADDR
// if not tmp then
16690: LD_VAR 0 2
16694: NOT
16695: IFFALSE 16699
// exit ;
16697: GO 16728
// for i in tmp do
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_VAR 0 2
16708: PUSH
16709: FOR_IN
16710: IFFALSE 16726
// begin SetLives ( i , 0 ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 0
16719: PPUSH
16720: CALL_OW 234
// end ;
16724: GO 16709
16726: POP
16727: POP
// end ;
16728: PPOPN 2
16730: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16731: LD_EXP 27
16735: IFFALSE 16743
16737: PUSH
16738: LD_EXP 30
16742: AND
16743: IFFALSE 16836
16745: GO 16747
16747: DISABLE
16748: LD_INT 0
16750: PPUSH
// begin enable ;
16751: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16752: LD_ADDR_VAR 0 1
16756: PUSH
16757: LD_INT 22
16759: PUSH
16760: LD_OWVAR 2
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 2
16771: PUSH
16772: LD_INT 25
16774: PUSH
16775: LD_INT 5
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 25
16784: PUSH
16785: LD_INT 9
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 25
16794: PUSH
16795: LD_INT 8
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 69
16816: PUSH
16817: FOR_IN
16818: IFFALSE 16834
// begin SetClass ( i , 1 ) ;
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 336
// end ;
16832: GO 16817
16834: POP
16835: POP
// end ;
16836: PPOPN 1
16838: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16839: LD_EXP 27
16843: IFFALSE 16851
16845: PUSH
16846: LD_EXP 31
16850: AND
16851: IFFALSE 16863
16853: PUSH
16854: LD_OWVAR 65
16858: PUSH
16859: LD_INT 7
16861: LESS
16862: AND
16863: IFFALSE 16877
16865: GO 16867
16867: DISABLE
// begin enable ;
16868: ENABLE
// game_speed := 7 ;
16869: LD_ADDR_OWVAR 65
16873: PUSH
16874: LD_INT 7
16876: ST_TO_ADDR
// end ;
16877: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16878: LD_EXP 27
16882: IFFALSE 16890
16884: PUSH
16885: LD_EXP 34
16889: AND
16890: IFFALSE 17092
16892: GO 16894
16894: DISABLE
16895: LD_INT 0
16897: PPUSH
16898: PPUSH
16899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16900: LD_ADDR_VAR 0 3
16904: PUSH
16905: LD_INT 81
16907: PUSH
16908: LD_OWVAR 2
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 21
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 69
16935: ST_TO_ADDR
// if not tmp then
16936: LD_VAR 0 3
16940: NOT
16941: IFFALSE 16945
// exit ;
16943: GO 17092
// if tmp > 5 then
16945: LD_VAR 0 3
16949: PUSH
16950: LD_INT 5
16952: GREATER
16953: IFFALSE 16965
// k := 5 else
16955: LD_ADDR_VAR 0 2
16959: PUSH
16960: LD_INT 5
16962: ST_TO_ADDR
16963: GO 16975
// k := tmp ;
16965: LD_ADDR_VAR 0 2
16969: PUSH
16970: LD_VAR 0 3
16974: ST_TO_ADDR
// for i := 1 to k do
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: DOUBLE
16981: LD_INT 1
16983: DEC
16984: ST_TO_ADDR
16985: LD_VAR 0 2
16989: PUSH
16990: FOR_TO
16991: IFFALSE 17090
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16993: LD_VAR 0 3
16997: PUSH
16998: LD_VAR 0 1
17002: ARRAY
17003: PPUSH
17004: LD_VAR 0 1
17008: PUSH
17009: LD_INT 4
17011: MOD
17012: PUSH
17013: LD_INT 1
17015: PLUS
17016: PPUSH
17017: CALL_OW 259
17021: PUSH
17022: LD_INT 10
17024: LESS
17025: IFFALSE 17088
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17027: LD_VAR 0 3
17031: PUSH
17032: LD_VAR 0 1
17036: ARRAY
17037: PPUSH
17038: LD_VAR 0 1
17042: PUSH
17043: LD_INT 4
17045: MOD
17046: PUSH
17047: LD_INT 1
17049: PLUS
17050: PPUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_VAR 0 1
17060: ARRAY
17061: PPUSH
17062: LD_VAR 0 1
17066: PUSH
17067: LD_INT 4
17069: MOD
17070: PUSH
17071: LD_INT 1
17073: PLUS
17074: PPUSH
17075: CALL_OW 259
17079: PUSH
17080: LD_INT 1
17082: PLUS
17083: PPUSH
17084: CALL_OW 237
17088: GO 16990
17090: POP
17091: POP
// end ;
17092: PPOPN 3
17094: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17095: LD_EXP 27
17099: IFFALSE 17107
17101: PUSH
17102: LD_EXP 35
17106: AND
17107: IFFALSE 17127
17109: GO 17111
17111: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17112: LD_INT 4
17114: PPUSH
17115: LD_OWVAR 2
17119: PPUSH
17120: LD_INT 0
17122: PPUSH
17123: CALL_OW 324
17127: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17128: LD_EXP 27
17132: IFFALSE 17140
17134: PUSH
17135: LD_EXP 64
17139: AND
17140: IFFALSE 17160
17142: GO 17144
17144: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17145: LD_INT 19
17147: PPUSH
17148: LD_OWVAR 2
17152: PPUSH
17153: LD_INT 0
17155: PPUSH
17156: CALL_OW 324
17160: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17161: LD_EXP 27
17165: IFFALSE 17173
17167: PUSH
17168: LD_EXP 36
17172: AND
17173: IFFALSE 17275
17175: GO 17177
17177: DISABLE
17178: LD_INT 0
17180: PPUSH
17181: PPUSH
// begin enable ;
17182: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17183: LD_ADDR_VAR 0 2
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_OWVAR 2
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 34
17205: PUSH
17206: LD_INT 11
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 34
17215: PUSH
17216: LD_INT 30
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 2
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17275
// for i in tmp do
17246: LD_ADDR_VAR 0 1
17250: PUSH
17251: LD_VAR 0 2
17255: PUSH
17256: FOR_IN
17257: IFFALSE 17273
// begin SetLives ( i , 0 ) ;
17259: LD_VAR 0 1
17263: PPUSH
17264: LD_INT 0
17266: PPUSH
17267: CALL_OW 234
// end ;
17271: GO 17256
17273: POP
17274: POP
// end ;
17275: PPOPN 2
17277: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17278: LD_EXP 27
17282: IFFALSE 17290
17284: PUSH
17285: LD_EXP 37
17289: AND
17290: IFFALSE 17310
17292: GO 17294
17294: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17295: LD_INT 32
17297: PPUSH
17298: LD_OWVAR 2
17302: PPUSH
17303: LD_INT 0
17305: PPUSH
17306: CALL_OW 324
17310: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17311: LD_EXP 27
17315: IFFALSE 17323
17317: PUSH
17318: LD_EXP 38
17322: AND
17323: IFFALSE 17506
17325: GO 17327
17327: DISABLE
17328: LD_INT 0
17330: PPUSH
17331: PPUSH
17332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17333: LD_ADDR_VAR 0 2
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_OWVAR 2
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 33
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PPUSH
17364: CALL_OW 69
17368: ST_TO_ADDR
// if not tmp then
17369: LD_VAR 0 2
17373: NOT
17374: IFFALSE 17378
// exit ;
17376: GO 17506
// side := 0 ;
17378: LD_ADDR_VAR 0 3
17382: PUSH
17383: LD_INT 0
17385: ST_TO_ADDR
// for i := 1 to 8 do
17386: LD_ADDR_VAR 0 1
17390: PUSH
17391: DOUBLE
17392: LD_INT 1
17394: DEC
17395: ST_TO_ADDR
17396: LD_INT 8
17398: PUSH
17399: FOR_TO
17400: IFFALSE 17450
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17402: LD_OWVAR 2
17406: PUSH
17407: LD_VAR 0 1
17411: NONEQUAL
17412: IFFALSE 17434
17414: PUSH
17415: LD_OWVAR 2
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 81
17429: PUSH
17430: LD_INT 2
17432: EQUAL
17433: AND
17434: IFFALSE 17448
// begin side := i ;
17436: LD_ADDR_VAR 0 3
17440: PUSH
17441: LD_VAR 0 1
17445: ST_TO_ADDR
// break ;
17446: GO 17450
// end ;
17448: GO 17399
17450: POP
17451: POP
// if not side then
17452: LD_VAR 0 3
17456: NOT
17457: IFFALSE 17461
// exit ;
17459: GO 17506
// for i := 1 to tmp do
17461: LD_ADDR_VAR 0 1
17465: PUSH
17466: DOUBLE
17467: LD_INT 1
17469: DEC
17470: ST_TO_ADDR
17471: LD_VAR 0 2
17475: PUSH
17476: FOR_TO
17477: IFFALSE 17504
// if Prob ( 60 ) then
17479: LD_INT 60
17481: PPUSH
17482: CALL_OW 13
17486: IFFALSE 17502
// SetSide ( i , side ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: CALL_OW 235
17502: GO 17476
17504: POP
17505: POP
// end ;
17506: PPOPN 3
17508: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17509: LD_EXP 27
17513: IFFALSE 17521
17515: PUSH
17516: LD_EXP 40
17520: AND
17521: IFFALSE 17640
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_OWVAR 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 21
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 3
17558: PUSH
17559: LD_INT 23
17561: PUSH
17562: LD_INT 0
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17638
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 257
17595: PUSH
17596: LD_INT 1
17598: PUSH
17599: LD_INT 2
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: LD_INT 4
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: IN
17614: IFFALSE 17636
// SetClass ( un , rand ( 1 , 4 ) ) ;
17616: LD_VAR 0 1
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: LD_INT 4
17626: PPUSH
17627: CALL_OW 12
17631: PPUSH
17632: CALL_OW 336
17636: GO 17583
17638: POP
17639: POP
// end ;
17640: PPOPN 1
17642: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17643: LD_EXP 27
17647: IFFALSE 17655
17649: PUSH
17650: LD_EXP 39
17654: AND
17655: IFFALSE 17734
17657: GO 17659
17659: DISABLE
17660: LD_INT 0
17662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17663: LD_ADDR_VAR 0 1
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_OWVAR 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 21
17682: PUSH
17683: LD_INT 3
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PPUSH
17694: CALL_OW 69
17698: ST_TO_ADDR
// if not tmp then
17699: LD_VAR 0 1
17703: NOT
17704: IFFALSE 17708
// exit ;
17706: GO 17734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17708: LD_VAR 0 1
17712: PUSH
17713: LD_INT 1
17715: PPUSH
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 12
17725: ARRAY
17726: PPUSH
17727: LD_INT 100
17729: PPUSH
17730: CALL_OW 234
// end ;
17734: PPOPN 1
17736: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17737: LD_EXP 27
17741: IFFALSE 17749
17743: PUSH
17744: LD_EXP 41
17748: AND
17749: IFFALSE 17847
17751: GO 17753
17753: DISABLE
17754: LD_INT 0
17756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17757: LD_ADDR_VAR 0 1
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_OWVAR 2
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 69
17792: ST_TO_ADDR
// if not tmp then
17793: LD_VAR 0 1
17797: NOT
17798: IFFALSE 17802
// exit ;
17800: GO 17847
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17802: LD_VAR 0 1
17806: PUSH
17807: LD_INT 1
17809: PPUSH
17810: LD_VAR 0 1
17814: PPUSH
17815: CALL_OW 12
17819: ARRAY
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: LD_INT 4
17826: PPUSH
17827: CALL_OW 12
17831: PPUSH
17832: LD_INT 3000
17834: PPUSH
17835: LD_INT 9000
17837: PPUSH
17838: CALL_OW 12
17842: PPUSH
17843: CALL_OW 492
// end ;
17847: PPOPN 1
17849: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17850: LD_EXP 27
17854: IFFALSE 17862
17856: PUSH
17857: LD_EXP 42
17861: AND
17862: IFFALSE 17882
17864: GO 17866
17866: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17867: LD_INT 1
17869: PPUSH
17870: LD_OWVAR 2
17874: PPUSH
17875: LD_INT 0
17877: PPUSH
17878: CALL_OW 324
17882: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17883: LD_EXP 27
17887: IFFALSE 17895
17889: PUSH
17890: LD_EXP 43
17894: AND
17895: IFFALSE 17978
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
17903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17904: LD_ADDR_VAR 0 2
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 3
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: ST_TO_ADDR
// if not tmp then
17940: LD_VAR 0 2
17944: NOT
17945: IFFALSE 17949
// exit ;
17947: GO 17978
// for i in tmp do
17949: LD_ADDR_VAR 0 1
17953: PUSH
17954: LD_VAR 0 2
17958: PUSH
17959: FOR_IN
17960: IFFALSE 17976
// SetBLevel ( i , 10 ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_INT 10
17969: PPUSH
17970: CALL_OW 241
17974: GO 17959
17976: POP
17977: POP
// end ;
17978: PPOPN 2
17980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17981: LD_EXP 27
17985: IFFALSE 17993
17987: PUSH
17988: LD_EXP 44
17992: AND
17993: IFFALSE 18104
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
18001: PPUSH
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18003: LD_ADDR_VAR 0 3
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 25
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 3
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18104
// un := tmp [ rand ( 1 , tmp ) ] ;
18048: LD_ADDR_VAR 0 2
18052: PUSH
18053: LD_VAR 0 3
18057: PUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_VAR 0 3
18065: PPUSH
18066: CALL_OW 12
18070: ARRAY
18071: ST_TO_ADDR
// if Crawls ( un ) then
18072: LD_VAR 0 2
18076: PPUSH
18077: CALL_OW 318
18081: IFFALSE 18092
// ComWalk ( un ) ;
18083: LD_VAR 0 2
18087: PPUSH
18088: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18092: LD_VAR 0 2
18096: PPUSH
18097: LD_INT 5
18099: PPUSH
18100: CALL_OW 336
// end ;
18104: PPOPN 3
18106: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18107: LD_EXP 27
18111: IFFALSE 18119
18113: PUSH
18114: LD_EXP 45
18118: AND
18119: IFFALSE 18131
18121: PUSH
18122: LD_OWVAR 67
18126: PUSH
18127: LD_INT 4
18129: LESS
18130: AND
18131: IFFALSE 18150
18133: GO 18135
18135: DISABLE
// begin Difficulty := Difficulty + 1 ;
18136: LD_ADDR_OWVAR 67
18140: PUSH
18141: LD_OWVAR 67
18145: PUSH
18146: LD_INT 1
18148: PLUS
18149: ST_TO_ADDR
// end ;
18150: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18151: LD_EXP 27
18155: IFFALSE 18163
18157: PUSH
18158: LD_EXP 46
18162: AND
18163: IFFALSE 18266
18165: GO 18167
18167: DISABLE
18168: LD_INT 0
18170: PPUSH
// begin for i := 1 to 5 do
18171: LD_ADDR_VAR 0 1
18175: PUSH
18176: DOUBLE
18177: LD_INT 1
18179: DEC
18180: ST_TO_ADDR
18181: LD_INT 5
18183: PUSH
18184: FOR_TO
18185: IFFALSE 18264
// begin uc_nation := nation_nature ;
18187: LD_ADDR_OWVAR 21
18191: PUSH
18192: LD_INT 0
18194: ST_TO_ADDR
// uc_side := 0 ;
18195: LD_ADDR_OWVAR 20
18199: PUSH
18200: LD_INT 0
18202: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18203: LD_ADDR_OWVAR 29
18207: PUSH
18208: LD_INT 12
18210: PUSH
18211: LD_INT 12
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: ST_TO_ADDR
// hc_agressivity := 20 ;
18218: LD_ADDR_OWVAR 35
18222: PUSH
18223: LD_INT 20
18225: ST_TO_ADDR
// hc_class := class_tiger ;
18226: LD_ADDR_OWVAR 28
18230: PUSH
18231: LD_INT 14
18233: ST_TO_ADDR
// hc_gallery :=  ;
18234: LD_ADDR_OWVAR 33
18238: PUSH
18239: LD_STRING 
18241: ST_TO_ADDR
// hc_name :=  ;
18242: LD_ADDR_OWVAR 26
18246: PUSH
18247: LD_STRING 
18249: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18250: CALL_OW 44
18254: PPUSH
18255: LD_INT 0
18257: PPUSH
18258: CALL_OW 51
// end ;
18262: GO 18184
18264: POP
18265: POP
// end ;
18266: PPOPN 1
18268: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18269: LD_EXP 27
18273: IFFALSE 18281
18275: PUSH
18276: LD_EXP 47
18280: AND
18281: IFFALSE 18290
18283: GO 18285
18285: DISABLE
// StreamSibBomb ;
18286: CALL 18291 0 0
18290: END
// export function StreamSibBomb ; var i , x , y ; begin
18291: LD_INT 0
18293: PPUSH
18294: PPUSH
18295: PPUSH
18296: PPUSH
// result := false ;
18297: LD_ADDR_VAR 0 1
18301: PUSH
18302: LD_INT 0
18304: ST_TO_ADDR
// for i := 1 to 16 do
18305: LD_ADDR_VAR 0 2
18309: PUSH
18310: DOUBLE
18311: LD_INT 1
18313: DEC
18314: ST_TO_ADDR
18315: LD_INT 16
18317: PUSH
18318: FOR_TO
18319: IFFALSE 18518
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18321: LD_ADDR_VAR 0 3
18325: PUSH
18326: LD_INT 10
18328: PUSH
18329: LD_INT 20
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 40
18337: PUSH
18338: LD_INT 50
18340: PUSH
18341: LD_INT 60
18343: PUSH
18344: LD_INT 70
18346: PUSH
18347: LD_INT 80
18349: PUSH
18350: LD_INT 90
18352: PUSH
18353: LD_INT 100
18355: PUSH
18356: LD_INT 110
18358: PUSH
18359: LD_INT 120
18361: PUSH
18362: LD_INT 130
18364: PUSH
18365: LD_INT 140
18367: PUSH
18368: LD_INT 150
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: PPUSH
18391: LD_INT 15
18393: PPUSH
18394: CALL_OW 12
18398: ARRAY
18399: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18400: LD_ADDR_VAR 0 4
18404: PUSH
18405: LD_INT 10
18407: PUSH
18408: LD_INT 20
18410: PUSH
18411: LD_INT 30
18413: PUSH
18414: LD_INT 40
18416: PUSH
18417: LD_INT 50
18419: PUSH
18420: LD_INT 60
18422: PUSH
18423: LD_INT 70
18425: PUSH
18426: LD_INT 80
18428: PUSH
18429: LD_INT 90
18431: PUSH
18432: LD_INT 100
18434: PUSH
18435: LD_INT 110
18437: PUSH
18438: LD_INT 120
18440: PUSH
18441: LD_INT 130
18443: PUSH
18444: LD_INT 140
18446: PUSH
18447: LD_INT 150
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PPUSH
18470: LD_INT 15
18472: PPUSH
18473: CALL_OW 12
18477: ARRAY
18478: ST_TO_ADDR
// if ValidHex ( x , y ) then
18479: LD_VAR 0 3
18483: PPUSH
18484: LD_VAR 0 4
18488: PPUSH
18489: CALL_OW 488
18493: IFFALSE 18516
// begin result := [ x , y ] ;
18495: LD_ADDR_VAR 0 1
18499: PUSH
18500: LD_VAR 0 3
18504: PUSH
18505: LD_VAR 0 4
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: ST_TO_ADDR
// break ;
18514: GO 18518
// end ; end ;
18516: GO 18318
18518: POP
18519: POP
// if result then
18520: LD_VAR 0 1
18524: IFFALSE 18584
// begin ToLua ( playSibBomb() ) ;
18526: LD_STRING playSibBomb()
18528: PPUSH
18529: CALL_OW 559
// wait ( 0 0$14 ) ;
18533: LD_INT 490
18535: PPUSH
18536: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18540: LD_VAR 0 1
18544: PUSH
18545: LD_INT 1
18547: ARRAY
18548: PPUSH
18549: LD_VAR 0 1
18553: PUSH
18554: LD_INT 2
18556: ARRAY
18557: PPUSH
18558: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18562: LD_VAR 0 1
18566: PUSH
18567: LD_INT 1
18569: ARRAY
18570: PPUSH
18571: LD_VAR 0 1
18575: PUSH
18576: LD_INT 2
18578: ARRAY
18579: PPUSH
18580: CALL_OW 429
// end ; end ;
18584: LD_VAR 0 1
18588: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18589: LD_EXP 27
18593: IFFALSE 18601
18595: PUSH
18596: LD_EXP 49
18600: AND
18601: IFFALSE 18613
18603: GO 18605
18605: DISABLE
// YouLost (  ) ;
18606: LD_STRING 
18608: PPUSH
18609: CALL_OW 104
18613: END
// every 0 0$1 trigger StreamModeActive and sFog do
18614: LD_EXP 27
18618: IFFALSE 18626
18620: PUSH
18621: LD_EXP 48
18625: AND
18626: IFFALSE 18640
18628: GO 18630
18630: DISABLE
// FogOff ( your_side ) ;
18631: LD_OWVAR 2
18635: PPUSH
18636: CALL_OW 344
18640: END
// every 0 0$1 trigger StreamModeActive and sSun do
18641: LD_EXP 27
18645: IFFALSE 18653
18647: PUSH
18648: LD_EXP 50
18652: AND
18653: IFFALSE 18681
18655: GO 18657
18657: DISABLE
// begin solar_recharge_percent := 0 ;
18658: LD_ADDR_OWVAR 79
18662: PUSH
18663: LD_INT 0
18665: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18666: LD_INT 10500
18668: PPUSH
18669: CALL_OW 67
// solar_recharge_percent := 100 ;
18673: LD_ADDR_OWVAR 79
18677: PUSH
18678: LD_INT 100
18680: ST_TO_ADDR
// end ;
18681: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18682: LD_EXP 27
18686: IFFALSE 18694
18688: PUSH
18689: LD_EXP 51
18693: AND
18694: IFFALSE 18933
18696: GO 18698
18698: DISABLE
18699: LD_INT 0
18701: PPUSH
18702: PPUSH
18703: PPUSH
// begin tmp := [ ] ;
18704: LD_ADDR_VAR 0 3
18708: PUSH
18709: EMPTY
18710: ST_TO_ADDR
// for i := 1 to 6 do
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: DOUBLE
18717: LD_INT 1
18719: DEC
18720: ST_TO_ADDR
18721: LD_INT 6
18723: PUSH
18724: FOR_TO
18725: IFFALSE 18830
// begin uc_nation := nation_nature ;
18727: LD_ADDR_OWVAR 21
18731: PUSH
18732: LD_INT 0
18734: ST_TO_ADDR
// uc_side := 0 ;
18735: LD_ADDR_OWVAR 20
18739: PUSH
18740: LD_INT 0
18742: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18743: LD_ADDR_OWVAR 29
18747: PUSH
18748: LD_INT 12
18750: PUSH
18751: LD_INT 12
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: ST_TO_ADDR
// hc_agressivity := 20 ;
18758: LD_ADDR_OWVAR 35
18762: PUSH
18763: LD_INT 20
18765: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18766: LD_ADDR_OWVAR 28
18770: PUSH
18771: LD_INT 17
18773: ST_TO_ADDR
// hc_gallery :=  ;
18774: LD_ADDR_OWVAR 33
18778: PUSH
18779: LD_STRING 
18781: ST_TO_ADDR
// hc_name :=  ;
18782: LD_ADDR_OWVAR 26
18786: PUSH
18787: LD_STRING 
18789: ST_TO_ADDR
// un := CreateHuman ;
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: CALL_OW 44
18799: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18800: LD_VAR 0 2
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL_OW 51
// tmp := tmp ^ un ;
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: LD_VAR 0 3
18821: PUSH
18822: LD_VAR 0 2
18826: ADD
18827: ST_TO_ADDR
// end ;
18828: GO 18724
18830: POP
18831: POP
// repeat wait ( 0 0$1 ) ;
18832: LD_INT 35
18834: PPUSH
18835: CALL_OW 67
// for un in tmp do
18839: LD_ADDR_VAR 0 2
18843: PUSH
18844: LD_VAR 0 3
18848: PUSH
18849: FOR_IN
18850: IFFALSE 18924
// begin if IsDead ( un ) then
18852: LD_VAR 0 2
18856: PPUSH
18857: CALL_OW 301
18861: IFFALSE 18881
// begin tmp := tmp diff un ;
18863: LD_ADDR_VAR 0 3
18867: PUSH
18868: LD_VAR 0 3
18872: PUSH
18873: LD_VAR 0 2
18877: DIFF
18878: ST_TO_ADDR
// continue ;
18879: GO 18849
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_INT 3
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PPUSH
18903: CALL_OW 69
18907: PPUSH
18908: LD_VAR 0 2
18912: PPUSH
18913: CALL_OW 74
18917: PPUSH
18918: CALL_OW 115
// end ;
18922: GO 18849
18924: POP
18925: POP
// until not tmp ;
18926: LD_VAR 0 3
18930: NOT
18931: IFFALSE 18832
// end ;
18933: PPOPN 3
18935: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18936: LD_EXP 27
18940: IFFALSE 18948
18942: PUSH
18943: LD_EXP 52
18947: AND
18948: IFFALSE 19002
18950: GO 18952
18952: DISABLE
// begin ToLua ( displayTroll(); ) ;
18953: LD_STRING displayTroll();
18955: PPUSH
18956: CALL_OW 559
// wait ( 3 3$00 ) ;
18960: LD_INT 6300
18962: PPUSH
18963: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18967: LD_STRING hideTroll();
18969: PPUSH
18970: CALL_OW 559
// wait ( 1 1$00 ) ;
18974: LD_INT 2100
18976: PPUSH
18977: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18981: LD_STRING displayTroll();
18983: PPUSH
18984: CALL_OW 559
// wait ( 1 1$00 ) ;
18988: LD_INT 2100
18990: PPUSH
18991: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18995: LD_STRING hideTroll();
18997: PPUSH
18998: CALL_OW 559
// end ;
19002: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19003: LD_EXP 27
19007: IFFALSE 19015
19009: PUSH
19010: LD_EXP 53
19014: AND
19015: IFFALSE 19078
19017: GO 19019
19019: DISABLE
19020: LD_INT 0
19022: PPUSH
// begin p := 0 ;
19023: LD_ADDR_VAR 0 1
19027: PUSH
19028: LD_INT 0
19030: ST_TO_ADDR
// repeat game_speed := 1 ;
19031: LD_ADDR_OWVAR 65
19035: PUSH
19036: LD_INT 1
19038: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19039: LD_INT 35
19041: PPUSH
19042: CALL_OW 67
// p := p + 1 ;
19046: LD_ADDR_VAR 0 1
19050: PUSH
19051: LD_VAR 0 1
19055: PUSH
19056: LD_INT 1
19058: PLUS
19059: ST_TO_ADDR
// until p >= 60 ;
19060: LD_VAR 0 1
19064: PUSH
19065: LD_INT 60
19067: GREATEREQUAL
19068: IFFALSE 19031
// game_speed := 4 ;
19070: LD_ADDR_OWVAR 65
19074: PUSH
19075: LD_INT 4
19077: ST_TO_ADDR
// end ;
19078: PPOPN 1
19080: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19081: LD_EXP 27
19085: IFFALSE 19093
19087: PUSH
19088: LD_EXP 54
19092: AND
19093: IFFALSE 19239
19095: GO 19097
19097: DISABLE
19098: LD_INT 0
19100: PPUSH
19101: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19102: LD_ADDR_VAR 0 1
19106: PUSH
19107: LD_INT 22
19109: PUSH
19110: LD_OWVAR 2
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: LD_INT 30
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 30
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PPUSH
19151: CALL_OW 69
19155: ST_TO_ADDR
// if not depot then
19156: LD_VAR 0 1
19160: NOT
19161: IFFALSE 19165
// exit ;
19163: GO 19239
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19165: LD_ADDR_VAR 0 2
19169: PUSH
19170: LD_VAR 0 1
19174: PUSH
19175: LD_INT 1
19177: PPUSH
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 12
19187: ARRAY
19188: PPUSH
19189: CALL_OW 274
19193: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19194: LD_VAR 0 2
19198: PPUSH
19199: LD_INT 1
19201: PPUSH
19202: LD_INT 0
19204: PPUSH
19205: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19209: LD_VAR 0 2
19213: PPUSH
19214: LD_INT 2
19216: PPUSH
19217: LD_INT 0
19219: PPUSH
19220: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19224: LD_VAR 0 2
19228: PPUSH
19229: LD_INT 3
19231: PPUSH
19232: LD_INT 0
19234: PPUSH
19235: CALL_OW 277
// end ;
19239: PPOPN 2
19241: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19242: LD_EXP 27
19246: IFFALSE 19254
19248: PUSH
19249: LD_EXP 55
19253: AND
19254: IFFALSE 19351
19256: GO 19258
19258: DISABLE
19259: LD_INT 0
19261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19262: LD_ADDR_VAR 0 1
19266: PUSH
19267: LD_INT 22
19269: PUSH
19270: LD_OWVAR 2
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 3
19291: PUSH
19292: LD_INT 23
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: ST_TO_ADDR
// if not tmp then
19316: LD_VAR 0 1
19320: NOT
19321: IFFALSE 19325
// exit ;
19323: GO 19351
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19325: LD_VAR 0 1
19329: PUSH
19330: LD_INT 1
19332: PPUSH
19333: LD_VAR 0 1
19337: PPUSH
19338: CALL_OW 12
19342: ARRAY
19343: PPUSH
19344: LD_INT 200
19346: PPUSH
19347: CALL_OW 234
// end ;
19351: PPOPN 1
19353: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19354: LD_EXP 27
19358: IFFALSE 19366
19360: PUSH
19361: LD_EXP 56
19365: AND
19366: IFFALSE 19445
19368: GO 19370
19370: DISABLE
19371: LD_INT 0
19373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19374: LD_ADDR_VAR 0 1
19378: PUSH
19379: LD_INT 22
19381: PUSH
19382: LD_OWVAR 2
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 69
19409: ST_TO_ADDR
// if not tmp then
19410: LD_VAR 0 1
19414: NOT
19415: IFFALSE 19419
// exit ;
19417: GO 19445
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19419: LD_VAR 0 1
19423: PUSH
19424: LD_INT 1
19426: PPUSH
19427: LD_VAR 0 1
19431: PPUSH
19432: CALL_OW 12
19436: ARRAY
19437: PPUSH
19438: LD_INT 60
19440: PPUSH
19441: CALL_OW 234
// end ;
19445: PPOPN 1
19447: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19448: LD_EXP 27
19452: IFFALSE 19460
19454: PUSH
19455: LD_EXP 57
19459: AND
19460: IFFALSE 19559
19462: GO 19464
19464: DISABLE
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
// begin enable ;
19469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_OWVAR 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 61
19489: PUSH
19490: EMPTY
19491: LIST
19492: PUSH
19493: LD_INT 33
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: ST_TO_ADDR
// if not tmp then
19513: LD_VAR 0 1
19517: NOT
19518: IFFALSE 19522
// exit ;
19520: GO 19559
// for i in tmp do
19522: LD_ADDR_VAR 0 2
19526: PUSH
19527: LD_VAR 0 1
19531: PUSH
19532: FOR_IN
19533: IFFALSE 19557
// if IsControledBy ( i ) then
19535: LD_VAR 0 2
19539: PPUSH
19540: CALL_OW 312
19544: IFFALSE 19555
// ComUnlink ( i ) ;
19546: LD_VAR 0 2
19550: PPUSH
19551: CALL_OW 136
19555: GO 19532
19557: POP
19558: POP
// end ;
19559: PPOPN 2
19561: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19562: LD_EXP 27
19566: IFFALSE 19574
19568: PUSH
19569: LD_EXP 58
19573: AND
19574: IFFALSE 19714
19576: GO 19578
19578: DISABLE
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
// begin ToLua ( displayPowell(); ) ;
19583: LD_STRING displayPowell();
19585: PPUSH
19586: CALL_OW 559
// uc_side := 0 ;
19590: LD_ADDR_OWVAR 20
19594: PUSH
19595: LD_INT 0
19597: ST_TO_ADDR
// uc_nation := 2 ;
19598: LD_ADDR_OWVAR 21
19602: PUSH
19603: LD_INT 2
19605: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19606: LD_ADDR_OWVAR 37
19610: PUSH
19611: LD_INT 14
19613: ST_TO_ADDR
// vc_engine := engine_siberite ;
19614: LD_ADDR_OWVAR 39
19618: PUSH
19619: LD_INT 3
19621: ST_TO_ADDR
// vc_control := control_apeman ;
19622: LD_ADDR_OWVAR 38
19626: PUSH
19627: LD_INT 5
19629: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19630: LD_ADDR_OWVAR 40
19634: PUSH
19635: LD_INT 29
19637: ST_TO_ADDR
// un := CreateVehicle ;
19638: LD_ADDR_VAR 0 2
19642: PUSH
19643: CALL_OW 45
19647: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19648: LD_VAR 0 2
19652: PPUSH
19653: LD_INT 1
19655: PPUSH
19656: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19660: LD_INT 35
19662: PPUSH
19663: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19667: LD_VAR 0 2
19671: PPUSH
19672: LD_INT 22
19674: PUSH
19675: LD_OWVAR 2
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PPUSH
19684: CALL_OW 69
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: CALL_OW 74
19698: PPUSH
19699: CALL_OW 115
// until IsDead ( un ) ;
19703: LD_VAR 0 2
19707: PPUSH
19708: CALL_OW 301
19712: IFFALSE 19660
// end ;
19714: PPOPN 2
19716: END
// every 0 0$1 trigger StreamModeActive and sStu do
19717: LD_EXP 27
19721: IFFALSE 19729
19723: PUSH
19724: LD_EXP 66
19728: AND
19729: IFFALSE 19745
19731: GO 19733
19733: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19734: LD_STRING displayStucuk();
19736: PPUSH
19737: CALL_OW 559
// ResetFog ;
19741: CALL_OW 335
// end ;
19745: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19746: LD_EXP 27
19750: IFFALSE 19758
19752: PUSH
19753: LD_EXP 59
19757: AND
19758: IFFALSE 19899
19760: GO 19762
19762: DISABLE
19763: LD_INT 0
19765: PPUSH
19766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19767: LD_ADDR_VAR 0 2
19771: PUSH
19772: LD_INT 22
19774: PUSH
19775: LD_OWVAR 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 21
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PPUSH
19798: CALL_OW 69
19802: ST_TO_ADDR
// if not tmp then
19803: LD_VAR 0 2
19807: NOT
19808: IFFALSE 19812
// exit ;
19810: GO 19899
// un := tmp [ rand ( 1 , tmp ) ] ;
19812: LD_ADDR_VAR 0 1
19816: PUSH
19817: LD_VAR 0 2
19821: PUSH
19822: LD_INT 1
19824: PPUSH
19825: LD_VAR 0 2
19829: PPUSH
19830: CALL_OW 12
19834: ARRAY
19835: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19836: LD_VAR 0 1
19840: PPUSH
19841: LD_INT 0
19843: PPUSH
19844: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19848: LD_VAR 0 1
19852: PPUSH
19853: LD_OWVAR 3
19857: PUSH
19858: LD_VAR 0 1
19862: DIFF
19863: PPUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 74
19873: PPUSH
19874: CALL_OW 115
// wait ( 0 0$20 ) ;
19878: LD_INT 700
19880: PPUSH
19881: CALL_OW 67
// SetSide ( un , your_side ) ;
19885: LD_VAR 0 1
19889: PPUSH
19890: LD_OWVAR 2
19894: PPUSH
19895: CALL_OW 235
// end ;
19899: PPOPN 2
19901: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19902: LD_EXP 27
19906: IFFALSE 19914
19908: PUSH
19909: LD_EXP 60
19913: AND
19914: IFFALSE 20020
19916: GO 19918
19918: DISABLE
19919: LD_INT 0
19921: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19922: LD_ADDR_VAR 0 1
19926: PUSH
19927: LD_INT 22
19929: PUSH
19930: LD_OWVAR 2
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: LD_INT 30
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 30
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PPUSH
19971: CALL_OW 69
19975: ST_TO_ADDR
// if not depot then
19976: LD_VAR 0 1
19980: NOT
19981: IFFALSE 19985
// exit ;
19983: GO 20020
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19985: LD_VAR 0 1
19989: PUSH
19990: LD_INT 1
19992: ARRAY
19993: PPUSH
19994: CALL_OW 250
19998: PPUSH
19999: LD_VAR 0 1
20003: PUSH
20004: LD_INT 1
20006: ARRAY
20007: PPUSH
20008: CALL_OW 251
20012: PPUSH
20013: LD_INT 70
20015: PPUSH
20016: CALL_OW 495
// end ;
20020: PPOPN 1
20022: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20023: LD_EXP 27
20027: IFFALSE 20035
20029: PUSH
20030: LD_EXP 61
20034: AND
20035: IFFALSE 20246
20037: GO 20039
20039: DISABLE
20040: LD_INT 0
20042: PPUSH
20043: PPUSH
20044: PPUSH
20045: PPUSH
20046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20047: LD_ADDR_VAR 0 5
20051: PUSH
20052: LD_INT 22
20054: PUSH
20055: LD_OWVAR 2
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 21
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PPUSH
20078: CALL_OW 69
20082: ST_TO_ADDR
// if not tmp then
20083: LD_VAR 0 5
20087: NOT
20088: IFFALSE 20092
// exit ;
20090: GO 20246
// for i in tmp do
20092: LD_ADDR_VAR 0 1
20096: PUSH
20097: LD_VAR 0 5
20101: PUSH
20102: FOR_IN
20103: IFFALSE 20244
// begin d := rand ( 0 , 5 ) ;
20105: LD_ADDR_VAR 0 4
20109: PUSH
20110: LD_INT 0
20112: PPUSH
20113: LD_INT 5
20115: PPUSH
20116: CALL_OW 12
20120: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20121: LD_ADDR_VAR 0 2
20125: PUSH
20126: LD_VAR 0 1
20130: PPUSH
20131: CALL_OW 250
20135: PPUSH
20136: LD_VAR 0 4
20140: PPUSH
20141: LD_INT 3
20143: PPUSH
20144: LD_INT 12
20146: PPUSH
20147: CALL_OW 12
20151: PPUSH
20152: CALL_OW 272
20156: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20157: LD_ADDR_VAR 0 3
20161: PUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 251
20171: PPUSH
20172: LD_VAR 0 4
20176: PPUSH
20177: LD_INT 3
20179: PPUSH
20180: LD_INT 12
20182: PPUSH
20183: CALL_OW 12
20187: PPUSH
20188: CALL_OW 273
20192: ST_TO_ADDR
// if ValidHex ( x , y ) then
20193: LD_VAR 0 2
20197: PPUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: CALL_OW 488
20207: IFFALSE 20242
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_VAR 0 2
20218: PPUSH
20219: LD_VAR 0 3
20223: PPUSH
20224: LD_INT 3
20226: PPUSH
20227: LD_INT 6
20229: PPUSH
20230: CALL_OW 12
20234: PPUSH
20235: LD_INT 1
20237: PPUSH
20238: CALL_OW 483
// end ;
20242: GO 20102
20244: POP
20245: POP
// end ;
20246: PPOPN 5
20248: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20249: LD_EXP 27
20253: IFFALSE 20261
20255: PUSH
20256: LD_EXP 62
20260: AND
20261: IFFALSE 20355
20263: GO 20265
20265: DISABLE
20266: LD_INT 0
20268: PPUSH
20269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20270: LD_ADDR_VAR 0 2
20274: PUSH
20275: LD_INT 22
20277: PUSH
20278: LD_OWVAR 2
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 32
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 21
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: PPUSH
20312: CALL_OW 69
20316: ST_TO_ADDR
// if not tmp then
20317: LD_VAR 0 2
20321: NOT
20322: IFFALSE 20326
// exit ;
20324: GO 20355
// for i in tmp do
20326: LD_ADDR_VAR 0 1
20330: PUSH
20331: LD_VAR 0 2
20335: PUSH
20336: FOR_IN
20337: IFFALSE 20353
// SetFuel ( i , 0 ) ;
20339: LD_VAR 0 1
20343: PPUSH
20344: LD_INT 0
20346: PPUSH
20347: CALL_OW 240
20351: GO 20336
20353: POP
20354: POP
// end ;
20355: PPOPN 2
20357: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20358: LD_EXP 27
20362: IFFALSE 20370
20364: PUSH
20365: LD_EXP 63
20369: AND
20370: IFFALSE 20436
20372: GO 20374
20374: DISABLE
20375: LD_INT 0
20377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20378: LD_ADDR_VAR 0 1
20382: PUSH
20383: LD_INT 22
20385: PUSH
20386: LD_OWVAR 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 30
20397: PUSH
20398: LD_INT 29
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PPUSH
20409: CALL_OW 69
20413: ST_TO_ADDR
// if not tmp then
20414: LD_VAR 0 1
20418: NOT
20419: IFFALSE 20423
// exit ;
20421: GO 20436
// DestroyUnit ( tmp [ 1 ] ) ;
20423: LD_VAR 0 1
20427: PUSH
20428: LD_INT 1
20430: ARRAY
20431: PPUSH
20432: CALL_OW 65
// end ;
20436: PPOPN 1
20438: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20439: LD_EXP 27
20443: IFFALSE 20451
20445: PUSH
20446: LD_EXP 65
20450: AND
20451: IFFALSE 20580
20453: GO 20455
20455: DISABLE
20456: LD_INT 0
20458: PPUSH
// begin uc_side := 0 ;
20459: LD_ADDR_OWVAR 20
20463: PUSH
20464: LD_INT 0
20466: ST_TO_ADDR
// uc_nation := nation_arabian ;
20467: LD_ADDR_OWVAR 21
20471: PUSH
20472: LD_INT 2
20474: ST_TO_ADDR
// hc_gallery :=  ;
20475: LD_ADDR_OWVAR 33
20479: PUSH
20480: LD_STRING 
20482: ST_TO_ADDR
// hc_name :=  ;
20483: LD_ADDR_OWVAR 26
20487: PUSH
20488: LD_STRING 
20490: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20491: LD_INT 1
20493: PPUSH
20494: LD_INT 11
20496: PPUSH
20497: LD_INT 10
20499: PPUSH
20500: CALL_OW 380
// un := CreateHuman ;
20504: LD_ADDR_VAR 0 1
20508: PUSH
20509: CALL_OW 44
20513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20514: LD_VAR 0 1
20518: PPUSH
20519: LD_INT 1
20521: PPUSH
20522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20526: LD_INT 35
20528: PPUSH
20529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20533: LD_VAR 0 1
20537: PPUSH
20538: LD_INT 22
20540: PUSH
20541: LD_OWVAR 2
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PPUSH
20550: CALL_OW 69
20554: PPUSH
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL_OW 74
20564: PPUSH
20565: CALL_OW 115
// until IsDead ( un ) ;
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 301
20578: IFFALSE 20526
// end ;
20580: PPOPN 1
20582: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20583: LD_EXP 27
20587: IFFALSE 20595
20589: PUSH
20590: LD_EXP 67
20594: AND
20595: IFFALSE 20607
20597: GO 20599
20599: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20600: LD_STRING earthquake(getX(game), 0, 32)
20602: PPUSH
20603: CALL_OW 559
20607: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20608: LD_EXP 27
20612: IFFALSE 20620
20614: PUSH
20615: LD_EXP 68
20619: AND
20620: IFFALSE 20711
20622: GO 20624
20624: DISABLE
20625: LD_INT 0
20627: PPUSH
// begin enable ;
20628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20629: LD_ADDR_VAR 0 1
20633: PUSH
20634: LD_INT 22
20636: PUSH
20637: LD_OWVAR 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 21
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 33
20658: PUSH
20659: LD_INT 3
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: LIST
20670: PPUSH
20671: CALL_OW 69
20675: ST_TO_ADDR
// if not tmp then
20676: LD_VAR 0 1
20680: NOT
20681: IFFALSE 20685
// exit ;
20683: GO 20711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20685: LD_VAR 0 1
20689: PUSH
20690: LD_INT 1
20692: PPUSH
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL_OW 12
20702: ARRAY
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 234
// end ;
20711: PPOPN 1
20713: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20714: LD_EXP 27
20718: IFFALSE 20726
20720: PUSH
20721: LD_EXP 69
20725: AND
20726: IFFALSE 20867
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
20735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20736: LD_ADDR_VAR 0 3
20740: PUSH
20741: LD_INT 22
20743: PUSH
20744: LD_OWVAR 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 25
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PPUSH
20767: CALL_OW 69
20771: ST_TO_ADDR
// if not tmp then
20772: LD_VAR 0 3
20776: NOT
20777: IFFALSE 20781
// exit ;
20779: GO 20867
// un := tmp [ rand ( 1 , tmp ) ] ;
20781: LD_ADDR_VAR 0 2
20785: PUSH
20786: LD_VAR 0 3
20790: PUSH
20791: LD_INT 1
20793: PPUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: CALL_OW 12
20803: ARRAY
20804: ST_TO_ADDR
// if Crawls ( un ) then
20805: LD_VAR 0 2
20809: PPUSH
20810: CALL_OW 318
20814: IFFALSE 20825
// ComWalk ( un ) ;
20816: LD_VAR 0 2
20820: PPUSH
20821: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20825: LD_VAR 0 2
20829: PPUSH
20830: LD_INT 9
20832: PPUSH
20833: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20837: LD_INT 28
20839: PPUSH
20840: LD_OWVAR 2
20844: PPUSH
20845: LD_INT 2
20847: PPUSH
20848: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20852: LD_INT 29
20854: PPUSH
20855: LD_OWVAR 2
20859: PPUSH
20860: LD_INT 2
20862: PPUSH
20863: CALL_OW 322
// end ;
20867: PPOPN 3
20869: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20870: LD_EXP 27
20874: IFFALSE 20882
20876: PUSH
20877: LD_EXP 70
20881: AND
20882: IFFALSE 20993
20884: GO 20886
20886: DISABLE
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: LD_INT 22
20899: PUSH
20900: LD_OWVAR 2
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 25
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PPUSH
20923: CALL_OW 69
20927: ST_TO_ADDR
// if not tmp then
20928: LD_VAR 0 3
20932: NOT
20933: IFFALSE 20937
// exit ;
20935: GO 20993
// un := tmp [ rand ( 1 , tmp ) ] ;
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_VAR 0 3
20946: PUSH
20947: LD_INT 1
20949: PPUSH
20950: LD_VAR 0 3
20954: PPUSH
20955: CALL_OW 12
20959: ARRAY
20960: ST_TO_ADDR
// if Crawls ( un ) then
20961: LD_VAR 0 2
20965: PPUSH
20966: CALL_OW 318
20970: IFFALSE 20981
// ComWalk ( un ) ;
20972: LD_VAR 0 2
20976: PPUSH
20977: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20981: LD_VAR 0 2
20985: PPUSH
20986: LD_INT 8
20988: PPUSH
20989: CALL_OW 336
// end ;
20993: PPOPN 3
20995: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20996: LD_EXP 27
21000: IFFALSE 21008
21002: PUSH
21003: LD_EXP 71
21007: AND
21008: IFFALSE 21152
21010: GO 21012
21012: DISABLE
21013: LD_INT 0
21015: PPUSH
21016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21017: LD_ADDR_VAR 0 2
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_OWVAR 2
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 34
21049: PUSH
21050: LD_INT 12
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 34
21059: PUSH
21060: LD_INT 51
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 34
21069: PUSH
21070: LD_INT 32
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 69
21092: ST_TO_ADDR
// if not tmp then
21093: LD_VAR 0 2
21097: NOT
21098: IFFALSE 21102
// exit ;
21100: GO 21152
// for i in tmp do
21102: LD_ADDR_VAR 0 1
21106: PUSH
21107: LD_VAR 0 2
21111: PUSH
21112: FOR_IN
21113: IFFALSE 21150
// if GetCargo ( i , mat_artifact ) = 0 then
21115: LD_VAR 0 1
21119: PPUSH
21120: LD_INT 4
21122: PPUSH
21123: CALL_OW 289
21127: PUSH
21128: LD_INT 0
21130: EQUAL
21131: IFFALSE 21148
// SetCargo ( i , mat_siberit , 100 ) ;
21133: LD_VAR 0 1
21137: PPUSH
21138: LD_INT 3
21140: PPUSH
21141: LD_INT 100
21143: PPUSH
21144: CALL_OW 290
21148: GO 21112
21150: POP
21151: POP
// end ;
21152: PPOPN 2
21154: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21155: LD_EXP 27
21159: IFFALSE 21167
21161: PUSH
21162: LD_EXP 72
21166: AND
21167: IFFALSE 21350
21169: GO 21171
21171: DISABLE
21172: LD_INT 0
21174: PPUSH
21175: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21176: LD_ADDR_VAR 0 2
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_OWVAR 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PPUSH
21193: CALL_OW 69
21197: ST_TO_ADDR
// if not tmp then
21198: LD_VAR 0 2
21202: NOT
21203: IFFALSE 21207
// exit ;
21205: GO 21350
// for i := 1 to 2 do
21207: LD_ADDR_VAR 0 1
21211: PUSH
21212: DOUBLE
21213: LD_INT 1
21215: DEC
21216: ST_TO_ADDR
21217: LD_INT 2
21219: PUSH
21220: FOR_TO
21221: IFFALSE 21348
// begin uc_side := your_side ;
21223: LD_ADDR_OWVAR 20
21227: PUSH
21228: LD_OWVAR 2
21232: ST_TO_ADDR
// uc_nation := nation_american ;
21233: LD_ADDR_OWVAR 21
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// vc_chassis := us_morphling ;
21241: LD_ADDR_OWVAR 37
21245: PUSH
21246: LD_INT 5
21248: ST_TO_ADDR
// vc_engine := engine_siberite ;
21249: LD_ADDR_OWVAR 39
21253: PUSH
21254: LD_INT 3
21256: ST_TO_ADDR
// vc_control := control_computer ;
21257: LD_ADDR_OWVAR 38
21261: PUSH
21262: LD_INT 3
21264: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21265: LD_ADDR_OWVAR 40
21269: PUSH
21270: LD_INT 10
21272: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21273: LD_VAR 0 2
21277: PUSH
21278: LD_INT 1
21280: ARRAY
21281: PPUSH
21282: CALL_OW 310
21286: NOT
21287: IFFALSE 21334
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21289: CALL_OW 45
21293: PPUSH
21294: LD_VAR 0 2
21298: PUSH
21299: LD_INT 1
21301: ARRAY
21302: PPUSH
21303: CALL_OW 250
21307: PPUSH
21308: LD_VAR 0 2
21312: PUSH
21313: LD_INT 1
21315: ARRAY
21316: PPUSH
21317: CALL_OW 251
21321: PPUSH
21322: LD_INT 12
21324: PPUSH
21325: LD_INT 1
21327: PPUSH
21328: CALL_OW 50
21332: GO 21346
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21334: CALL_OW 45
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: CALL_OW 51
// end ;
21346: GO 21220
21348: POP
21349: POP
// end ;
21350: PPOPN 2
21352: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21353: LD_EXP 27
21357: IFFALSE 21365
21359: PUSH
21360: LD_EXP 73
21364: AND
21365: IFFALSE 21587
21367: GO 21369
21369: DISABLE
21370: LD_INT 0
21372: PPUSH
21373: PPUSH
21374: PPUSH
21375: PPUSH
21376: PPUSH
21377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_OWVAR 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 21
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: LD_INT 23
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: ST_TO_ADDR
// if not tmp then
21432: LD_VAR 0 6
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 21587
// s1 := rand ( 1 , 4 ) ;
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 1
21448: PPUSH
21449: LD_INT 4
21451: PPUSH
21452: CALL_OW 12
21456: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: LD_VAR 0 6
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 2
21475: PPUSH
21476: CALL_OW 259
21480: ST_TO_ADDR
// if s1 = 1 then
21481: LD_VAR 0 2
21485: PUSH
21486: LD_INT 1
21488: EQUAL
21489: IFFALSE 21509
// s2 := rand ( 2 , 4 ) else
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_INT 2
21498: PPUSH
21499: LD_INT 4
21501: PPUSH
21502: CALL_OW 12
21506: ST_TO_ADDR
21507: GO 21517
// s2 := 1 ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21517: LD_ADDR_VAR 0 5
21521: PUSH
21522: LD_VAR 0 6
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: CALL_OW 259
21540: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21541: LD_VAR 0 6
21545: PUSH
21546: LD_INT 1
21548: ARRAY
21549: PPUSH
21550: LD_VAR 0 2
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21564: LD_VAR 0 6
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: LD_VAR 0 3
21577: PPUSH
21578: LD_VAR 0 4
21582: PPUSH
21583: CALL_OW 237
// end ;
21587: PPOPN 6
21589: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21590: LD_EXP 27
21594: IFFALSE 21602
21596: PUSH
21597: LD_EXP 74
21601: AND
21602: IFFALSE 21681
21604: GO 21606
21606: DISABLE
21607: LD_INT 0
21609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21610: LD_ADDR_VAR 0 1
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_OWVAR 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: ST_TO_ADDR
// if not tmp then
21646: LD_VAR 0 1
21650: NOT
21651: IFFALSE 21655
// exit ;
21653: GO 21681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21655: LD_VAR 0 1
21659: PUSH
21660: LD_INT 1
21662: PPUSH
21663: LD_VAR 0 1
21667: PPUSH
21668: CALL_OW 12
21672: ARRAY
21673: PPUSH
21674: LD_INT 1
21676: PPUSH
21677: CALL_OW 234
// end ;
21681: PPOPN 1
21683: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21684: LD_EXP 27
21688: IFFALSE 21696
21690: PUSH
21691: LD_EXP 75
21695: AND
21696: IFFALSE 21808
21698: GO 21700
21700: DISABLE
21701: LD_INT 0
21703: PPUSH
21704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21705: LD_ADDR_VAR 0 2
21709: PUSH
21710: LD_INT 22
21712: PUSH
21713: LD_OWVAR 2
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: LD_INT 30
21727: PUSH
21728: LD_INT 27
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 30
21737: PUSH
21738: LD_INT 26
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 30
21747: PUSH
21748: LD_INT 28
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PPUSH
21765: CALL_OW 69
21769: ST_TO_ADDR
// if not tmp then
21770: LD_VAR 0 2
21774: NOT
21775: IFFALSE 21779
// exit ;
21777: GO 21808
// for i in tmp do
21779: LD_ADDR_VAR 0 1
21783: PUSH
21784: LD_VAR 0 2
21788: PUSH
21789: FOR_IN
21790: IFFALSE 21806
// SetLives ( i , 1 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_INT 1
21799: PPUSH
21800: CALL_OW 234
21804: GO 21789
21806: POP
21807: POP
// end ;
21808: PPOPN 2
21810: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21811: LD_EXP 27
21815: IFFALSE 21823
21817: PUSH
21818: LD_EXP 76
21822: AND
21823: IFFALSE 22110
21825: GO 21827
21827: DISABLE
21828: LD_INT 0
21830: PPUSH
21831: PPUSH
21832: PPUSH
// begin i := rand ( 1 , 7 ) ;
21833: LD_ADDR_VAR 0 1
21837: PUSH
21838: LD_INT 1
21840: PPUSH
21841: LD_INT 7
21843: PPUSH
21844: CALL_OW 12
21848: ST_TO_ADDR
// case i of 1 :
21849: LD_VAR 0 1
21853: PUSH
21854: LD_INT 1
21856: DOUBLE
21857: EQUAL
21858: IFTRUE 21862
21860: GO 21872
21862: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21863: LD_STRING earthquake(getX(game), 0, 32)
21865: PPUSH
21866: CALL_OW 559
21870: GO 22110
21872: LD_INT 2
21874: DOUBLE
21875: EQUAL
21876: IFTRUE 21880
21878: GO 21894
21880: POP
// begin ToLua ( displayStucuk(); ) ;
21881: LD_STRING displayStucuk();
21883: PPUSH
21884: CALL_OW 559
// ResetFog ;
21888: CALL_OW 335
// end ; 3 :
21892: GO 22110
21894: LD_INT 3
21896: DOUBLE
21897: EQUAL
21898: IFTRUE 21902
21900: GO 22006
21902: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21903: LD_ADDR_VAR 0 2
21907: PUSH
21908: LD_INT 22
21910: PUSH
21911: LD_OWVAR 2
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 25
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PPUSH
21934: CALL_OW 69
21938: ST_TO_ADDR
// if not tmp then
21939: LD_VAR 0 2
21943: NOT
21944: IFFALSE 21948
// exit ;
21946: GO 22110
// un := tmp [ rand ( 1 , tmp ) ] ;
21948: LD_ADDR_VAR 0 3
21952: PUSH
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: PPUSH
21961: LD_VAR 0 2
21965: PPUSH
21966: CALL_OW 12
21970: ARRAY
21971: ST_TO_ADDR
// if Crawls ( un ) then
21972: LD_VAR 0 3
21976: PPUSH
21977: CALL_OW 318
21981: IFFALSE 21992
// ComWalk ( un ) ;
21983: LD_VAR 0 3
21987: PPUSH
21988: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_INT 8
21999: PPUSH
22000: CALL_OW 336
// end ; 4 :
22004: GO 22110
22006: LD_INT 4
22008: DOUBLE
22009: EQUAL
22010: IFTRUE 22014
22012: GO 22088
22014: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22015: LD_ADDR_VAR 0 2
22019: PUSH
22020: LD_INT 22
22022: PUSH
22023: LD_OWVAR 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 30
22034: PUSH
22035: LD_INT 29
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL_OW 69
22050: ST_TO_ADDR
// if not tmp then
22051: LD_VAR 0 2
22055: NOT
22056: IFFALSE 22060
// exit ;
22058: GO 22110
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22060: LD_VAR 0 2
22064: PUSH
22065: LD_INT 1
22067: ARRAY
22068: PPUSH
22069: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22073: LD_VAR 0 2
22077: PUSH
22078: LD_INT 1
22080: ARRAY
22081: PPUSH
22082: CALL_OW 65
// end ; 5 .. 7 :
22086: GO 22110
22088: LD_INT 5
22090: DOUBLE
22091: GREATEREQUAL
22092: IFFALSE 22100
22094: LD_INT 7
22096: DOUBLE
22097: LESSEQUAL
22098: IFTRUE 22102
22100: GO 22109
22102: POP
// StreamSibBomb ; end ;
22103: CALL 18291 0 0
22107: GO 22110
22109: POP
// end ;
22110: PPOPN 3
22112: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22113: LD_EXP 27
22117: IFFALSE 22125
22119: PUSH
22120: LD_EXP 77
22124: AND
22125: IFFALSE 22281
22127: GO 22129
22129: DISABLE
22130: LD_INT 0
22132: PPUSH
22133: PPUSH
22134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_INT 81
22142: PUSH
22143: LD_OWVAR 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: LD_INT 21
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 21
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PPUSH
22184: CALL_OW 69
22188: ST_TO_ADDR
// if not tmp then
22189: LD_VAR 0 2
22193: NOT
22194: IFFALSE 22198
// exit ;
22196: GO 22281
// p := 0 ;
22198: LD_ADDR_VAR 0 3
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22206: LD_INT 35
22208: PPUSH
22209: CALL_OW 67
// p := p + 1 ;
22213: LD_ADDR_VAR 0 3
22217: PUSH
22218: LD_VAR 0 3
22222: PUSH
22223: LD_INT 1
22225: PLUS
22226: ST_TO_ADDR
// for i in tmp do
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: LD_VAR 0 2
22236: PUSH
22237: FOR_IN
22238: IFFALSE 22269
// if GetLives ( i ) < 1000 then
22240: LD_VAR 0 1
22244: PPUSH
22245: CALL_OW 256
22249: PUSH
22250: LD_INT 1000
22252: LESS
22253: IFFALSE 22267
// SetLives ( i , 1000 ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_INT 1000
22262: PPUSH
22263: CALL_OW 234
22267: GO 22237
22269: POP
22270: POP
// until p > 20 ;
22271: LD_VAR 0 3
22275: PUSH
22276: LD_INT 20
22278: GREATER
22279: IFFALSE 22206
// end ;
22281: PPOPN 3
22283: END
// every 0 0$1 trigger StreamModeActive and sTime do
22284: LD_EXP 27
22288: IFFALSE 22296
22290: PUSH
22291: LD_EXP 78
22295: AND
22296: IFFALSE 22331
22298: GO 22300
22300: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22301: LD_INT 28
22303: PPUSH
22304: LD_OWVAR 2
22308: PPUSH
22309: LD_INT 2
22311: PPUSH
22312: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22316: LD_INT 30
22318: PPUSH
22319: LD_OWVAR 2
22323: PPUSH
22324: LD_INT 2
22326: PPUSH
22327: CALL_OW 322
// end ;
22331: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22332: LD_EXP 27
22336: IFFALSE 22344
22338: PUSH
22339: LD_EXP 79
22343: AND
22344: IFFALSE 22465
22346: GO 22348
22348: DISABLE
22349: LD_INT 0
22351: PPUSH
22352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 22
22360: PUSH
22361: LD_OWVAR 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: LD_INT 23
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: PPUSH
22402: CALL_OW 69
22406: ST_TO_ADDR
// if not tmp then
22407: LD_VAR 0 2
22411: NOT
22412: IFFALSE 22416
// exit ;
22414: GO 22465
// for i in tmp do
22416: LD_ADDR_VAR 0 1
22420: PUSH
22421: LD_VAR 0 2
22425: PUSH
22426: FOR_IN
22427: IFFALSE 22463
// begin if Crawls ( i ) then
22429: LD_VAR 0 1
22433: PPUSH
22434: CALL_OW 318
22438: IFFALSE 22449
// ComWalk ( i ) ;
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 138
// SetClass ( i , 2 ) ;
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 2
22456: PPUSH
22457: CALL_OW 336
// end ;
22461: GO 22426
22463: POP
22464: POP
// end ;
22465: PPOPN 2
22467: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22468: LD_EXP 27
22472: IFFALSE 22480
22474: PUSH
22475: LD_EXP 80
22479: AND
22480: IFFALSE 22770
22482: GO 22484
22484: DISABLE
22485: LD_INT 0
22487: PPUSH
22488: PPUSH
22489: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22490: LD_OWVAR 2
22494: PPUSH
22495: LD_INT 9
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: LD_INT 1
22503: PPUSH
22504: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22508: LD_INT 9
22510: PPUSH
22511: LD_OWVAR 2
22515: PPUSH
22516: CALL_OW 343
// uc_side := 9 ;
22520: LD_ADDR_OWVAR 20
22524: PUSH
22525: LD_INT 9
22527: ST_TO_ADDR
// uc_nation := 2 ;
22528: LD_ADDR_OWVAR 21
22532: PUSH
22533: LD_INT 2
22535: ST_TO_ADDR
// hc_name := Dark Warrior ;
22536: LD_ADDR_OWVAR 26
22540: PUSH
22541: LD_STRING Dark Warrior
22543: ST_TO_ADDR
// hc_gallery :=  ;
22544: LD_ADDR_OWVAR 33
22548: PUSH
22549: LD_STRING 
22551: ST_TO_ADDR
// hc_noskilllimit := true ;
22552: LD_ADDR_OWVAR 76
22556: PUSH
22557: LD_INT 1
22559: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22560: LD_ADDR_OWVAR 31
22564: PUSH
22565: LD_INT 30
22567: PUSH
22568: LD_INT 30
22570: PUSH
22571: LD_INT 30
22573: PUSH
22574: LD_INT 30
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: ST_TO_ADDR
// un := CreateHuman ;
22583: LD_ADDR_VAR 0 3
22587: PUSH
22588: CALL_OW 44
22592: ST_TO_ADDR
// hc_noskilllimit := false ;
22593: LD_ADDR_OWVAR 76
22597: PUSH
22598: LD_INT 0
22600: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22601: LD_VAR 0 3
22605: PPUSH
22606: LD_INT 1
22608: PPUSH
22609: CALL_OW 51
// ToLua ( playRanger() ) ;
22613: LD_STRING playRanger()
22615: PPUSH
22616: CALL_OW 559
// p := 0 ;
22620: LD_ADDR_VAR 0 2
22624: PUSH
22625: LD_INT 0
22627: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22628: LD_INT 35
22630: PPUSH
22631: CALL_OW 67
// p := p + 1 ;
22635: LD_ADDR_VAR 0 2
22639: PUSH
22640: LD_VAR 0 2
22644: PUSH
22645: LD_INT 1
22647: PLUS
22648: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22649: LD_VAR 0 3
22653: PPUSH
22654: CALL_OW 256
22658: PUSH
22659: LD_INT 1000
22661: LESS
22662: IFFALSE 22676
// SetLives ( un , 1000 ) ;
22664: LD_VAR 0 3
22668: PPUSH
22669: LD_INT 1000
22671: PPUSH
22672: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22676: LD_VAR 0 3
22680: PPUSH
22681: LD_INT 81
22683: PUSH
22684: LD_OWVAR 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 91
22695: PUSH
22696: LD_VAR 0 3
22700: PUSH
22701: LD_INT 30
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PPUSH
22713: CALL_OW 69
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: CALL_OW 74
22727: PPUSH
22728: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22732: LD_VAR 0 2
22736: PUSH
22737: LD_INT 80
22739: GREATER
22740: IFTRUE 22753
22742: PUSH
22743: LD_VAR 0 3
22747: PPUSH
22748: CALL_OW 301
22752: OR
22753: IFFALSE 22628
// if un then
22755: LD_VAR 0 3
22759: IFFALSE 22770
// RemoveUnit ( un ) ;
22761: LD_VAR 0 3
22765: PPUSH
22766: CALL_OW 64
// end ;
22770: PPOPN 3
22772: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22773: LD_EXP 81
22777: IFFALSE 22893
22779: GO 22781
22781: DISABLE
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 81
22794: PUSH
22795: LD_OWVAR 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 21
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22823: LD_STRING playComputer()
22825: PPUSH
22826: CALL_OW 559
// if not tmp then
22830: LD_VAR 0 2
22834: NOT
22835: IFFALSE 22839
// exit ;
22837: GO 22893
// for i in tmp do
22839: LD_ADDR_VAR 0 1
22843: PUSH
22844: LD_VAR 0 2
22848: PUSH
22849: FOR_IN
22850: IFFALSE 22891
// for j := 1 to 4 do
22852: LD_ADDR_VAR 0 3
22856: PUSH
22857: DOUBLE
22858: LD_INT 1
22860: DEC
22861: ST_TO_ADDR
22862: LD_INT 4
22864: PUSH
22865: FOR_TO
22866: IFFALSE 22887
// SetSkill ( i , j , 10 ) ;
22868: LD_VAR 0 1
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_INT 10
22880: PPUSH
22881: CALL_OW 237
22885: GO 22865
22887: POP
22888: POP
22889: GO 22849
22891: POP
22892: POP
// end ;
22893: PPOPN 3
22895: END
// every 0 0$1 trigger s30 do var i , tmp ;
22896: LD_EXP 82
22900: IFFALSE 22969
22902: GO 22904
22904: DISABLE
22905: LD_INT 0
22907: PPUSH
22908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22909: LD_ADDR_VAR 0 2
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_OWVAR 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL_OW 69
22930: ST_TO_ADDR
// if not tmp then
22931: LD_VAR 0 2
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 22969
// for i in tmp do
22940: LD_ADDR_VAR 0 1
22944: PUSH
22945: LD_VAR 0 2
22949: PUSH
22950: FOR_IN
22951: IFFALSE 22967
// SetLives ( i , 300 ) ;
22953: LD_VAR 0 1
22957: PPUSH
22958: LD_INT 300
22960: PPUSH
22961: CALL_OW 234
22965: GO 22950
22967: POP
22968: POP
// end ;
22969: PPOPN 2
22971: END
// every 0 0$1 trigger s60 do var i , tmp ;
22972: LD_EXP 83
22976: IFFALSE 23045
22978: GO 22980
22980: DISABLE
22981: LD_INT 0
22983: PPUSH
22984: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_INT 22
22992: PUSH
22993: LD_OWVAR 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PPUSH
23002: CALL_OW 69
23006: ST_TO_ADDR
// if not tmp then
23007: LD_VAR 0 2
23011: NOT
23012: IFFALSE 23016
// exit ;
23014: GO 23045
// for i in tmp do
23016: LD_ADDR_VAR 0 1
23020: PUSH
23021: LD_VAR 0 2
23025: PUSH
23026: FOR_IN
23027: IFFALSE 23043
// SetLives ( i , 600 ) ;
23029: LD_VAR 0 1
23033: PPUSH
23034: LD_INT 600
23036: PPUSH
23037: CALL_OW 234
23041: GO 23026
23043: POP
23044: POP
// end ;
23045: PPOPN 2
23047: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23048: LD_INT 0
23050: PPUSH
// case cmd of 301 :
23051: LD_VAR 0 1
23055: PUSH
23056: LD_INT 301
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23096
23064: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23065: LD_VAR 0 6
23069: PPUSH
23070: LD_VAR 0 7
23074: PPUSH
23075: LD_VAR 0 8
23079: PPUSH
23080: LD_VAR 0 4
23084: PPUSH
23085: LD_VAR 0 5
23089: PPUSH
23090: CALL 24309 0 5
23094: GO 23217
23096: LD_INT 302
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23104
23102: GO 23141
23104: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23105: LD_VAR 0 6
23109: PPUSH
23110: LD_VAR 0 7
23114: PPUSH
23115: LD_VAR 0 8
23119: PPUSH
23120: LD_VAR 0 9
23124: PPUSH
23125: LD_VAR 0 4
23129: PPUSH
23130: LD_VAR 0 5
23134: PPUSH
23135: CALL 24400 0 6
23139: GO 23217
23141: LD_INT 303
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23186
23149: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23150: LD_VAR 0 6
23154: PPUSH
23155: LD_VAR 0 7
23159: PPUSH
23160: LD_VAR 0 8
23164: PPUSH
23165: LD_VAR 0 9
23169: PPUSH
23170: LD_VAR 0 4
23174: PPUSH
23175: LD_VAR 0 5
23179: PPUSH
23180: CALL 23222 0 6
23184: GO 23217
23186: LD_INT 304
23188: DOUBLE
23189: EQUAL
23190: IFTRUE 23194
23192: GO 23216
23194: POP
// hHackTeleport ( unit , x , y ) ; end ;
23195: LD_VAR 0 2
23199: PPUSH
23200: LD_VAR 0 4
23204: PPUSH
23205: LD_VAR 0 5
23209: PPUSH
23210: CALL 24993 0 3
23214: GO 23217
23216: POP
// end ;
23217: LD_VAR 0 12
23221: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23222: LD_INT 0
23224: PPUSH
23225: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23226: LD_VAR 0 1
23230: PUSH
23231: LD_INT 1
23233: LESS
23234: IFTRUE 23246
23236: PUSH
23237: LD_VAR 0 1
23241: PUSH
23242: LD_INT 3
23244: GREATER
23245: OR
23246: IFTRUE 23264
23248: PUSH
23249: LD_VAR 0 5
23253: PPUSH
23254: LD_VAR 0 6
23258: PPUSH
23259: CALL_OW 428
23263: OR
23264: IFFALSE 23268
// exit ;
23266: GO 23996
// uc_side := your_side ;
23268: LD_ADDR_OWVAR 20
23272: PUSH
23273: LD_OWVAR 2
23277: ST_TO_ADDR
// uc_nation := nation ;
23278: LD_ADDR_OWVAR 21
23282: PUSH
23283: LD_VAR 0 1
23287: ST_TO_ADDR
// bc_level = 1 ;
23288: LD_ADDR_OWVAR 43
23292: PUSH
23293: LD_INT 1
23295: ST_TO_ADDR
// case btype of 1 :
23296: LD_VAR 0 2
23300: PUSH
23301: LD_INT 1
23303: DOUBLE
23304: EQUAL
23305: IFTRUE 23309
23307: GO 23320
23309: POP
// bc_type := b_depot ; 2 :
23310: LD_ADDR_OWVAR 42
23314: PUSH
23315: LD_INT 0
23317: ST_TO_ADDR
23318: GO 23940
23320: LD_INT 2
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23339
23328: POP
// bc_type := b_warehouse ; 3 :
23329: LD_ADDR_OWVAR 42
23333: PUSH
23334: LD_INT 1
23336: ST_TO_ADDR
23337: GO 23940
23339: LD_INT 3
23341: DOUBLE
23342: EQUAL
23343: IFTRUE 23347
23345: GO 23358
23347: POP
// bc_type := b_lab ; 4 .. 9 :
23348: LD_ADDR_OWVAR 42
23352: PUSH
23353: LD_INT 6
23355: ST_TO_ADDR
23356: GO 23940
23358: LD_INT 4
23360: DOUBLE
23361: GREATEREQUAL
23362: IFFALSE 23370
23364: LD_INT 9
23366: DOUBLE
23367: LESSEQUAL
23368: IFTRUE 23372
23370: GO 23432
23372: POP
// begin bc_type := b_lab_half ;
23373: LD_ADDR_OWVAR 42
23377: PUSH
23378: LD_INT 7
23380: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23381: LD_ADDR_OWVAR 44
23385: PUSH
23386: LD_INT 10
23388: PUSH
23389: LD_INT 11
23391: PUSH
23392: LD_INT 12
23394: PUSH
23395: LD_INT 15
23397: PUSH
23398: LD_INT 14
23400: PUSH
23401: LD_INT 13
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: PUSH
23412: LD_VAR 0 2
23416: PUSH
23417: LD_INT 3
23419: MINUS
23420: ARRAY
23421: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23422: LD_ADDR_OWVAR 45
23426: PUSH
23427: LD_INT 9
23429: ST_TO_ADDR
// end ; 10 .. 13 :
23430: GO 23940
23432: LD_INT 10
23434: DOUBLE
23435: GREATEREQUAL
23436: IFFALSE 23444
23438: LD_INT 13
23440: DOUBLE
23441: LESSEQUAL
23442: IFTRUE 23446
23444: GO 23523
23446: POP
// begin bc_type := b_lab_full ;
23447: LD_ADDR_OWVAR 42
23451: PUSH
23452: LD_INT 8
23454: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23455: LD_ADDR_OWVAR 44
23459: PUSH
23460: LD_INT 10
23462: PUSH
23463: LD_INT 12
23465: PUSH
23466: LD_INT 14
23468: PUSH
23469: LD_INT 13
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: PUSH
23478: LD_VAR 0 2
23482: PUSH
23483: LD_INT 9
23485: MINUS
23486: ARRAY
23487: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23488: LD_ADDR_OWVAR 45
23492: PUSH
23493: LD_INT 11
23495: PUSH
23496: LD_INT 15
23498: PUSH
23499: LD_INT 12
23501: PUSH
23502: LD_INT 15
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PUSH
23511: LD_VAR 0 2
23515: PUSH
23516: LD_INT 9
23518: MINUS
23519: ARRAY
23520: ST_TO_ADDR
// end ; 14 :
23521: GO 23940
23523: LD_INT 14
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 23542
23531: POP
// bc_type := b_workshop ; 15 :
23532: LD_ADDR_OWVAR 42
23536: PUSH
23537: LD_INT 2
23539: ST_TO_ADDR
23540: GO 23940
23542: LD_INT 15
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23561
23550: POP
// bc_type := b_factory ; 16 :
23551: LD_ADDR_OWVAR 42
23555: PUSH
23556: LD_INT 3
23558: ST_TO_ADDR
23559: GO 23940
23561: LD_INT 16
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23580
23569: POP
// bc_type := b_ext_gun ; 17 :
23570: LD_ADDR_OWVAR 42
23574: PUSH
23575: LD_INT 17
23577: ST_TO_ADDR
23578: GO 23940
23580: LD_INT 17
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23616
23588: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23589: LD_ADDR_OWVAR 42
23593: PUSH
23594: LD_INT 19
23596: PUSH
23597: LD_INT 23
23599: PUSH
23600: LD_INT 19
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: LD_VAR 0 1
23612: ARRAY
23613: ST_TO_ADDR
23614: GO 23940
23616: LD_INT 18
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23635
23624: POP
// bc_type := b_ext_radar ; 19 :
23625: LD_ADDR_OWVAR 42
23629: PUSH
23630: LD_INT 20
23632: ST_TO_ADDR
23633: GO 23940
23635: LD_INT 19
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23654
23643: POP
// bc_type := b_ext_radio ; 20 :
23644: LD_ADDR_OWVAR 42
23648: PUSH
23649: LD_INT 22
23651: ST_TO_ADDR
23652: GO 23940
23654: LD_INT 20
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23673
23662: POP
// bc_type := b_ext_siberium ; 21 :
23663: LD_ADDR_OWVAR 42
23667: PUSH
23668: LD_INT 21
23670: ST_TO_ADDR
23671: GO 23940
23673: LD_INT 21
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23692
23681: POP
// bc_type := b_ext_computer ; 22 :
23682: LD_ADDR_OWVAR 42
23686: PUSH
23687: LD_INT 24
23689: ST_TO_ADDR
23690: GO 23940
23692: LD_INT 22
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23711
23700: POP
// bc_type := b_ext_track ; 23 :
23701: LD_ADDR_OWVAR 42
23705: PUSH
23706: LD_INT 16
23708: ST_TO_ADDR
23709: GO 23940
23711: LD_INT 23
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23730
23719: POP
// bc_type := b_ext_laser ; 24 :
23720: LD_ADDR_OWVAR 42
23724: PUSH
23725: LD_INT 25
23727: ST_TO_ADDR
23728: GO 23940
23730: LD_INT 24
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23749
23738: POP
// bc_type := b_control_tower ; 25 :
23739: LD_ADDR_OWVAR 42
23743: PUSH
23744: LD_INT 36
23746: ST_TO_ADDR
23747: GO 23940
23749: LD_INT 25
23751: DOUBLE
23752: EQUAL
23753: IFTRUE 23757
23755: GO 23768
23757: POP
// bc_type := b_breastwork ; 26 :
23758: LD_ADDR_OWVAR 42
23762: PUSH
23763: LD_INT 31
23765: ST_TO_ADDR
23766: GO 23940
23768: LD_INT 26
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23787
23776: POP
// bc_type := b_bunker ; 27 :
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 32
23784: ST_TO_ADDR
23785: GO 23940
23787: LD_INT 27
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23806
23795: POP
// bc_type := b_turret ; 28 :
23796: LD_ADDR_OWVAR 42
23800: PUSH
23801: LD_INT 33
23803: ST_TO_ADDR
23804: GO 23940
23806: LD_INT 28
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// bc_type := b_armoury ; 29 :
23815: LD_ADDR_OWVAR 42
23819: PUSH
23820: LD_INT 4
23822: ST_TO_ADDR
23823: GO 23940
23825: LD_INT 29
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// bc_type := b_barracks ; 30 :
23834: LD_ADDR_OWVAR 42
23838: PUSH
23839: LD_INT 5
23841: ST_TO_ADDR
23842: GO 23940
23844: LD_INT 30
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23863
23852: POP
// bc_type := b_solar_power ; 31 :
23853: LD_ADDR_OWVAR 42
23857: PUSH
23858: LD_INT 27
23860: ST_TO_ADDR
23861: GO 23940
23863: LD_INT 31
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23882
23871: POP
// bc_type := b_oil_power ; 32 :
23872: LD_ADDR_OWVAR 42
23876: PUSH
23877: LD_INT 26
23879: ST_TO_ADDR
23880: GO 23940
23882: LD_INT 32
23884: DOUBLE
23885: EQUAL
23886: IFTRUE 23890
23888: GO 23901
23890: POP
// bc_type := b_siberite_power ; 33 :
23891: LD_ADDR_OWVAR 42
23895: PUSH
23896: LD_INT 28
23898: ST_TO_ADDR
23899: GO 23940
23901: LD_INT 33
23903: DOUBLE
23904: EQUAL
23905: IFTRUE 23909
23907: GO 23920
23909: POP
// bc_type := b_oil_mine ; 34 :
23910: LD_ADDR_OWVAR 42
23914: PUSH
23915: LD_INT 29
23917: ST_TO_ADDR
23918: GO 23940
23920: LD_INT 34
23922: DOUBLE
23923: EQUAL
23924: IFTRUE 23928
23926: GO 23939
23928: POP
// bc_type := b_siberite_mine ; end ;
23929: LD_ADDR_OWVAR 42
23933: PUSH
23934: LD_INT 30
23936: ST_TO_ADDR
23937: GO 23940
23939: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23940: LD_ADDR_VAR 0 8
23944: PUSH
23945: LD_VAR 0 5
23949: PPUSH
23950: LD_VAR 0 6
23954: PPUSH
23955: LD_VAR 0 3
23959: PPUSH
23960: CALL_OW 47
23964: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23965: LD_OWVAR 42
23969: PUSH
23970: LD_INT 32
23972: PUSH
23973: LD_INT 33
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: IN
23980: IFFALSE 23996
// PlaceWeaponTurret ( b , weapon ) ;
23982: LD_VAR 0 8
23986: PPUSH
23987: LD_VAR 0 4
23991: PPUSH
23992: CALL_OW 431
// end ;
23996: LD_VAR 0 7
24000: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24001: LD_INT 0
24003: PPUSH
24004: PPUSH
24005: PPUSH
24006: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24007: LD_ADDR_VAR 0 4
24011: PUSH
24012: LD_INT 22
24014: PUSH
24015: LD_OWVAR 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 30
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 30
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: ST_TO_ADDR
// if not tmp then
24061: LD_VAR 0 4
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24129
// for i in tmp do
24070: LD_ADDR_VAR 0 2
24074: PUSH
24075: LD_VAR 0 4
24079: PUSH
24080: FOR_IN
24081: IFFALSE 24127
// for j = 1 to 3 do
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: DOUBLE
24089: LD_INT 1
24091: DEC
24092: ST_TO_ADDR
24093: LD_INT 3
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24123
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24099: LD_VAR 0 2
24103: PPUSH
24104: CALL_OW 274
24108: PPUSH
24109: LD_VAR 0 3
24113: PPUSH
24114: LD_INT 99999
24116: PPUSH
24117: CALL_OW 277
24121: GO 24096
24123: POP
24124: POP
24125: GO 24080
24127: POP
24128: POP
// end ;
24129: LD_VAR 0 1
24133: RET
// export function hHackSetLevel10 ; var i , j ; begin
24134: LD_INT 0
24136: PPUSH
24137: PPUSH
24138: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_INT 21
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 69
24158: PUSH
24159: FOR_IN
24160: IFFALSE 24212
// if IsSelected ( i ) then
24162: LD_VAR 0 2
24166: PPUSH
24167: CALL_OW 306
24171: IFFALSE 24210
// begin for j := 1 to 4 do
24173: LD_ADDR_VAR 0 3
24177: PUSH
24178: DOUBLE
24179: LD_INT 1
24181: DEC
24182: ST_TO_ADDR
24183: LD_INT 4
24185: PUSH
24186: FOR_TO
24187: IFFALSE 24208
// SetSkill ( i , j , 10 ) ;
24189: LD_VAR 0 2
24193: PPUSH
24194: LD_VAR 0 3
24198: PPUSH
24199: LD_INT 10
24201: PPUSH
24202: CALL_OW 237
24206: GO 24186
24208: POP
24209: POP
// end ;
24210: GO 24159
24212: POP
24213: POP
// end ;
24214: LD_VAR 0 1
24218: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24219: LD_INT 0
24221: PPUSH
24222: PPUSH
24223: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_INT 22
24231: PUSH
24232: LD_OWVAR 2
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 21
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: PUSH
24260: FOR_IN
24261: IFFALSE 24302
// begin for j := 1 to 4 do
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: DOUBLE
24269: LD_INT 1
24271: DEC
24272: ST_TO_ADDR
24273: LD_INT 4
24275: PUSH
24276: FOR_TO
24277: IFFALSE 24298
// SetSkill ( i , j , 10 ) ;
24279: LD_VAR 0 2
24283: PPUSH
24284: LD_VAR 0 3
24288: PPUSH
24289: LD_INT 10
24291: PPUSH
24292: CALL_OW 237
24296: GO 24276
24298: POP
24299: POP
// end ;
24300: GO 24260
24302: POP
24303: POP
// end ;
24304: LD_VAR 0 1
24308: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24309: LD_INT 0
24311: PPUSH
// uc_side := your_side ;
24312: LD_ADDR_OWVAR 20
24316: PUSH
24317: LD_OWVAR 2
24321: ST_TO_ADDR
// uc_nation := nation ;
24322: LD_ADDR_OWVAR 21
24326: PUSH
24327: LD_VAR 0 1
24331: ST_TO_ADDR
// InitHc ;
24332: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24336: LD_INT 0
24338: PPUSH
24339: LD_VAR 0 2
24343: PPUSH
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24353: LD_VAR 0 4
24357: PPUSH
24358: LD_VAR 0 5
24362: PPUSH
24363: CALL_OW 428
24367: PUSH
24368: LD_INT 0
24370: EQUAL
24371: IFFALSE 24395
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24373: CALL_OW 44
24377: PPUSH
24378: LD_VAR 0 4
24382: PPUSH
24383: LD_VAR 0 5
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 48
// end ;
24395: LD_VAR 0 6
24399: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24400: LD_INT 0
24402: PPUSH
24403: PPUSH
// uc_side := your_side ;
24404: LD_ADDR_OWVAR 20
24408: PUSH
24409: LD_OWVAR 2
24413: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 3
24427: PUSH
24428: LD_INT 4
24430: PUSH
24431: LD_INT 5
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: IN
24441: IFFALSE 24453
// uc_nation := nation_american else
24443: LD_ADDR_OWVAR 21
24447: PUSH
24448: LD_INT 1
24450: ST_TO_ADDR
24451: GO 24496
// if chassis in [ 11 , 12 , 13 , 14 ] then
24453: LD_VAR 0 1
24457: PUSH
24458: LD_INT 11
24460: PUSH
24461: LD_INT 12
24463: PUSH
24464: LD_INT 13
24466: PUSH
24467: LD_INT 14
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: IN
24476: IFFALSE 24488
// uc_nation := nation_arabian else
24478: LD_ADDR_OWVAR 21
24482: PUSH
24483: LD_INT 2
24485: ST_TO_ADDR
24486: GO 24496
// uc_nation := nation_russian ;
24488: LD_ADDR_OWVAR 21
24492: PUSH
24493: LD_INT 3
24495: ST_TO_ADDR
// vc_chassis := chassis ;
24496: LD_ADDR_OWVAR 37
24500: PUSH
24501: LD_VAR 0 1
24505: ST_TO_ADDR
// vc_engine := engine ;
24506: LD_ADDR_OWVAR 39
24510: PUSH
24511: LD_VAR 0 2
24515: ST_TO_ADDR
// vc_control := control ;
24516: LD_ADDR_OWVAR 38
24520: PUSH
24521: LD_VAR 0 3
24525: ST_TO_ADDR
// vc_weapon := weapon ;
24526: LD_ADDR_OWVAR 40
24530: PUSH
24531: LD_VAR 0 4
24535: ST_TO_ADDR
// un := CreateVehicle ;
24536: LD_ADDR_VAR 0 8
24540: PUSH
24541: CALL_OW 45
24545: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24546: LD_VAR 0 8
24550: PPUSH
24551: LD_INT 0
24553: PPUSH
24554: LD_INT 5
24556: PPUSH
24557: CALL_OW 12
24561: PPUSH
24562: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24566: LD_VAR 0 8
24570: PPUSH
24571: LD_VAR 0 5
24575: PPUSH
24576: LD_VAR 0 6
24580: PPUSH
24581: LD_INT 1
24583: PPUSH
24584: CALL_OW 48
// end ;
24588: LD_VAR 0 7
24592: RET
// export hInvincible ; every 1 do
24593: GO 24595
24595: DISABLE
// hInvincible := [ ] ;
24596: LD_ADDR_EXP 84
24600: PUSH
24601: EMPTY
24602: ST_TO_ADDR
24603: END
// every 10 do var i ;
24604: GO 24606
24606: DISABLE
24607: LD_INT 0
24609: PPUSH
// begin enable ;
24610: ENABLE
// if not hInvincible then
24611: LD_EXP 84
24615: NOT
24616: IFFALSE 24620
// exit ;
24618: GO 24664
// for i in hInvincible do
24620: LD_ADDR_VAR 0 1
24624: PUSH
24625: LD_EXP 84
24629: PUSH
24630: FOR_IN
24631: IFFALSE 24662
// if GetLives ( i ) < 1000 then
24633: LD_VAR 0 1
24637: PPUSH
24638: CALL_OW 256
24642: PUSH
24643: LD_INT 1000
24645: LESS
24646: IFFALSE 24660
// SetLives ( i , 1000 ) ;
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_INT 1000
24655: PPUSH
24656: CALL_OW 234
24660: GO 24630
24662: POP
24663: POP
// end ;
24664: PPOPN 1
24666: END
// export function hHackInvincible ; var i ; begin
24667: LD_INT 0
24669: PPUSH
24670: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24671: LD_ADDR_VAR 0 2
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: LD_INT 21
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 21
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: PUSH
24709: FOR_IN
24710: IFFALSE 24771
// if IsSelected ( i ) then
24712: LD_VAR 0 2
24716: PPUSH
24717: CALL_OW 306
24721: IFFALSE 24769
// begin if i in hInvincible then
24723: LD_VAR 0 2
24727: PUSH
24728: LD_EXP 84
24732: IN
24733: IFFALSE 24753
// hInvincible := hInvincible diff i else
24735: LD_ADDR_EXP 84
24739: PUSH
24740: LD_EXP 84
24744: PUSH
24745: LD_VAR 0 2
24749: DIFF
24750: ST_TO_ADDR
24751: GO 24769
// hInvincible := hInvincible union i ;
24753: LD_ADDR_EXP 84
24757: PUSH
24758: LD_EXP 84
24762: PUSH
24763: LD_VAR 0 2
24767: UNION
24768: ST_TO_ADDR
// end ;
24769: GO 24709
24771: POP
24772: POP
// end ;
24773: LD_VAR 0 1
24777: RET
// export function hHackInvisible ; var i , j ; begin
24778: LD_INT 0
24780: PPUSH
24781: PPUSH
24782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24783: LD_ADDR_VAR 0 2
24787: PUSH
24788: LD_INT 21
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PPUSH
24798: CALL_OW 69
24802: PUSH
24803: FOR_IN
24804: IFFALSE 24828
// if IsSelected ( i ) then
24806: LD_VAR 0 2
24810: PPUSH
24811: CALL_OW 306
24815: IFFALSE 24826
// ComForceInvisible ( i ) ;
24817: LD_VAR 0 2
24821: PPUSH
24822: CALL_OW 496
24826: GO 24803
24828: POP
24829: POP
// end ;
24830: LD_VAR 0 1
24834: RET
// export function hHackChangeYourSide ; begin
24835: LD_INT 0
24837: PPUSH
// if your_side = 8 then
24838: LD_OWVAR 2
24842: PUSH
24843: LD_INT 8
24845: EQUAL
24846: IFFALSE 24858
// your_side := 0 else
24848: LD_ADDR_OWVAR 2
24852: PUSH
24853: LD_INT 0
24855: ST_TO_ADDR
24856: GO 24872
// your_side := your_side + 1 ;
24858: LD_ADDR_OWVAR 2
24862: PUSH
24863: LD_OWVAR 2
24867: PUSH
24868: LD_INT 1
24870: PLUS
24871: ST_TO_ADDR
// end ;
24872: LD_VAR 0 1
24876: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24877: LD_INT 0
24879: PPUSH
24880: PPUSH
24881: PPUSH
// for i in all_units do
24882: LD_ADDR_VAR 0 2
24886: PUSH
24887: LD_OWVAR 3
24891: PUSH
24892: FOR_IN
24893: IFFALSE 24971
// if IsSelected ( i ) then
24895: LD_VAR 0 2
24899: PPUSH
24900: CALL_OW 306
24904: IFFALSE 24969
// begin j := GetSide ( i ) ;
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: LD_VAR 0 2
24915: PPUSH
24916: CALL_OW 255
24920: ST_TO_ADDR
// if j = 8 then
24921: LD_VAR 0 3
24925: PUSH
24926: LD_INT 8
24928: EQUAL
24929: IFFALSE 24941
// j := 0 else
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_INT 0
24938: ST_TO_ADDR
24939: GO 24955
// j := j + 1 ;
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_VAR 0 3
24950: PUSH
24951: LD_INT 1
24953: PLUS
24954: ST_TO_ADDR
// SetSide ( i , j ) ;
24955: LD_VAR 0 2
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: CALL_OW 235
// end ;
24969: GO 24892
24971: POP
24972: POP
// end ;
24973: LD_VAR 0 1
24977: RET
// export function hHackFog ; begin
24978: LD_INT 0
24980: PPUSH
// FogOff ( true ) ;
24981: LD_INT 1
24983: PPUSH
24984: CALL_OW 344
// end ;
24988: LD_VAR 0 1
24992: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24993: LD_INT 0
24995: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24996: LD_VAR 0 1
25000: PPUSH
25001: LD_VAR 0 2
25005: PPUSH
25006: LD_VAR 0 3
25010: PPUSH
25011: LD_INT 1
25013: PPUSH
25014: LD_INT 1
25016: PPUSH
25017: CALL_OW 483
// CenterOnXY ( x , y ) ;
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 3
25030: PPUSH
25031: CALL_OW 84
// end ;
25035: LD_VAR 0 4
25039: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25040: LD_INT 0
25042: PPUSH
25043: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25044: LD_VAR 0 1
25048: NOT
25049: IFTRUE 25068
25051: PUSH
25052: LD_VAR 0 2
25056: PPUSH
25057: LD_VAR 0 3
25061: PPUSH
25062: CALL_OW 488
25066: NOT
25067: OR
25068: IFTRUE 25103
25070: PUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL_OW 266
25080: PUSH
25081: LD_INT 3
25083: NONEQUAL
25084: IFFALSE 25102
25086: PUSH
25087: LD_VAR 0 1
25091: PPUSH
25092: CALL_OW 247
25096: PUSH
25097: LD_INT 1
25099: EQUAL
25100: NOT
25101: AND
25102: OR
25103: IFFALSE 25107
// exit ;
25105: GO 25389
// if GetType ( factory ) = unit_human then
25107: LD_VAR 0 1
25111: PPUSH
25112: CALL_OW 247
25116: PUSH
25117: LD_INT 1
25119: EQUAL
25120: IFFALSE 25137
// factory := IsInUnit ( factory ) ;
25122: LD_ADDR_VAR 0 1
25126: PUSH
25127: LD_VAR 0 1
25131: PPUSH
25132: CALL_OW 310
25136: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 266
25146: PUSH
25147: LD_INT 3
25149: NONEQUAL
25150: IFFALSE 25154
// exit ;
25152: GO 25389
// for i := 1 to Count ( factoryWaypoints ) do
25154: LD_ADDR_VAR 0 5
25158: PUSH
25159: DOUBLE
25160: LD_INT 1
25162: DEC
25163: ST_TO_ADDR
25164: LD_EXP 85
25168: PPUSH
25169: CALL 35193 0 1
25173: PUSH
25174: FOR_TO
25175: IFFALSE 25337
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25177: LD_VAR 0 2
25181: PPUSH
25182: LD_VAR 0 3
25186: PPUSH
25187: CALL_OW 428
25191: PUSH
25192: LD_EXP 85
25196: PUSH
25197: LD_VAR 0 5
25201: ARRAY
25202: PUSH
25203: LD_INT 2
25205: ARRAY
25206: EQUAL
25207: IFFALSE 25239
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25209: LD_ADDR_EXP 85
25213: PUSH
25214: LD_EXP 85
25218: PPUSH
25219: LD_VAR 0 5
25223: PPUSH
25224: CALL_OW 3
25228: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25229: CALL 25394 0 0
// exit ;
25233: POP
25234: POP
25235: GO 25389
// end else
25237: GO 25335
// if factory = factoryWaypoints [ i ] [ 2 ] then
25239: LD_VAR 0 1
25243: PUSH
25244: LD_EXP 85
25248: PUSH
25249: LD_VAR 0 5
25253: ARRAY
25254: PUSH
25255: LD_INT 2
25257: ARRAY
25258: EQUAL
25259: IFFALSE 25335
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25261: LD_ADDR_EXP 85
25265: PUSH
25266: LD_EXP 85
25270: PPUSH
25271: LD_VAR 0 5
25275: PPUSH
25276: CALL_OW 3
25280: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25281: LD_ADDR_EXP 85
25285: PUSH
25286: LD_EXP 85
25290: PPUSH
25291: LD_VAR 0 1
25295: PPUSH
25296: CALL_OW 255
25300: PUSH
25301: LD_VAR 0 1
25305: PUSH
25306: LD_VAR 0 2
25310: PUSH
25311: LD_VAR 0 3
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: PPUSH
25322: CALL 71169 0 2
25326: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25327: CALL 25394 0 0
// exit ;
25331: POP
25332: POP
25333: GO 25389
// end ; end ;
25335: GO 25174
25337: POP
25338: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25339: LD_ADDR_EXP 85
25343: PUSH
25344: LD_EXP 85
25348: PPUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 255
25358: PUSH
25359: LD_VAR 0 1
25363: PUSH
25364: LD_VAR 0 2
25368: PUSH
25369: LD_VAR 0 3
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL 71169 0 2
25384: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25385: CALL 25394 0 0
// end ;
25389: LD_VAR 0 4
25393: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25394: LD_INT 0
25396: PPUSH
25397: PPUSH
25398: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25399: LD_STRING resetFactoryWaypoint();
25401: PPUSH
25402: CALL_OW 559
// if factoryWaypoints then
25406: LD_EXP 85
25410: IFFALSE 25531
// begin list := factoryWaypoints ;
25412: LD_ADDR_VAR 0 3
25416: PUSH
25417: LD_EXP 85
25421: ST_TO_ADDR
// for i := 1 to list do
25422: LD_ADDR_VAR 0 2
25426: PUSH
25427: DOUBLE
25428: LD_INT 1
25430: DEC
25431: ST_TO_ADDR
25432: LD_VAR 0 3
25436: PUSH
25437: FOR_TO
25438: IFFALSE 25529
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25440: LD_STRING setFactoryWaypointXY(
25442: PUSH
25443: LD_VAR 0 3
25447: PUSH
25448: LD_VAR 0 2
25452: ARRAY
25453: PUSH
25454: LD_INT 1
25456: ARRAY
25457: STR
25458: PUSH
25459: LD_STRING ,
25461: STR
25462: PUSH
25463: LD_VAR 0 3
25467: PUSH
25468: LD_VAR 0 2
25472: ARRAY
25473: PUSH
25474: LD_INT 2
25476: ARRAY
25477: STR
25478: PUSH
25479: LD_STRING ,
25481: STR
25482: PUSH
25483: LD_VAR 0 3
25487: PUSH
25488: LD_VAR 0 2
25492: ARRAY
25493: PUSH
25494: LD_INT 3
25496: ARRAY
25497: STR
25498: PUSH
25499: LD_STRING ,
25501: STR
25502: PUSH
25503: LD_VAR 0 3
25507: PUSH
25508: LD_VAR 0 2
25512: ARRAY
25513: PUSH
25514: LD_INT 4
25516: ARRAY
25517: STR
25518: PUSH
25519: LD_STRING )
25521: STR
25522: PPUSH
25523: CALL_OW 559
25527: GO 25437
25529: POP
25530: POP
// end ; end ;
25531: LD_VAR 0 1
25535: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25536: LD_INT 0
25538: PPUSH
// if HexInfo ( x , y ) = warehouse then
25539: LD_VAR 0 2
25543: PPUSH
25544: LD_VAR 0 3
25548: PPUSH
25549: CALL_OW 428
25553: PUSH
25554: LD_VAR 0 1
25558: EQUAL
25559: IFFALSE 25586
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25561: LD_ADDR_EXP 87
25565: PUSH
25566: LD_EXP 87
25570: PPUSH
25571: LD_VAR 0 1
25575: PPUSH
25576: LD_INT 0
25578: PPUSH
25579: CALL_OW 1
25583: ST_TO_ADDR
25584: GO 25637
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25586: LD_ADDR_EXP 87
25590: PUSH
25591: LD_EXP 87
25595: PPUSH
25596: LD_VAR 0 1
25600: PPUSH
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL_OW 255
25610: PUSH
25611: LD_VAR 0 1
25615: PUSH
25616: LD_VAR 0 2
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 1
25636: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25637: CALL 25646 0 0
// end ;
25641: LD_VAR 0 4
25645: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
25650: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25651: LD_STRING resetWarehouseGatheringPoints();
25653: PPUSH
25654: CALL_OW 559
// if warehouseGatheringPoints then
25658: LD_EXP 87
25662: IFFALSE 25788
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_EXP 87
25673: PPUSH
25674: CALL 75103 0 1
25678: ST_TO_ADDR
// for i := 1 to list do
25679: LD_ADDR_VAR 0 2
25683: PUSH
25684: DOUBLE
25685: LD_INT 1
25687: DEC
25688: ST_TO_ADDR
25689: LD_VAR 0 3
25693: PUSH
25694: FOR_TO
25695: IFFALSE 25786
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25697: LD_STRING setWarehouseGatheringPointXY(
25699: PUSH
25700: LD_VAR 0 3
25704: PUSH
25705: LD_VAR 0 2
25709: ARRAY
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: STR
25715: PUSH
25716: LD_STRING ,
25718: STR
25719: PUSH
25720: LD_VAR 0 3
25724: PUSH
25725: LD_VAR 0 2
25729: ARRAY
25730: PUSH
25731: LD_INT 2
25733: ARRAY
25734: STR
25735: PUSH
25736: LD_STRING ,
25738: STR
25739: PUSH
25740: LD_VAR 0 3
25744: PUSH
25745: LD_VAR 0 2
25749: ARRAY
25750: PUSH
25751: LD_INT 3
25753: ARRAY
25754: STR
25755: PUSH
25756: LD_STRING ,
25758: STR
25759: PUSH
25760: LD_VAR 0 3
25764: PUSH
25765: LD_VAR 0 2
25769: ARRAY
25770: PUSH
25771: LD_INT 4
25773: ARRAY
25774: STR
25775: PUSH
25776: LD_STRING )
25778: STR
25779: PPUSH
25780: CALL_OW 559
25784: GO 25694
25786: POP
25787: POP
// end ; end ;
25788: LD_VAR 0 1
25792: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25793: LD_EXP 87
25797: IFFALSE 26492
25799: GO 25801
25801: DISABLE
25802: LD_INT 0
25804: PPUSH
25805: PPUSH
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
// begin enable ;
25813: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25814: LD_ADDR_VAR 0 3
25818: PUSH
25819: LD_EXP 87
25823: PPUSH
25824: CALL 75103 0 1
25828: ST_TO_ADDR
// if not list then
25829: LD_VAR 0 3
25833: NOT
25834: IFFALSE 25838
// exit ;
25836: GO 26492
// for i := 1 to list do
25838: LD_ADDR_VAR 0 1
25842: PUSH
25843: DOUBLE
25844: LD_INT 1
25846: DEC
25847: ST_TO_ADDR
25848: LD_VAR 0 3
25852: PUSH
25853: FOR_TO
25854: IFFALSE 26490
// begin depot := list [ i ] [ 2 ] ;
25856: LD_ADDR_VAR 0 8
25860: PUSH
25861: LD_VAR 0 3
25865: PUSH
25866: LD_VAR 0 1
25870: ARRAY
25871: PUSH
25872: LD_INT 2
25874: ARRAY
25875: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25876: LD_ADDR_VAR 0 5
25880: PUSH
25881: LD_VAR 0 3
25885: PUSH
25886: LD_VAR 0 1
25890: ARRAY
25891: PUSH
25892: LD_INT 1
25894: ARRAY
25895: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25896: LD_VAR 0 8
25900: PPUSH
25901: CALL_OW 301
25905: IFTRUE 25924
25907: PUSH
25908: LD_VAR 0 5
25912: PUSH
25913: LD_VAR 0 8
25917: PPUSH
25918: CALL_OW 255
25922: NONEQUAL
25923: OR
25924: IFFALSE 25953
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25926: LD_ADDR_EXP 87
25930: PUSH
25931: LD_EXP 87
25935: PPUSH
25936: LD_VAR 0 8
25940: PPUSH
25941: LD_INT 0
25943: PPUSH
25944: CALL_OW 1
25948: ST_TO_ADDR
// exit ;
25949: POP
25950: POP
25951: GO 26492
// end ; x := list [ i ] [ 3 ] ;
25953: LD_ADDR_VAR 0 6
25957: PUSH
25958: LD_VAR 0 3
25962: PUSH
25963: LD_VAR 0 1
25967: ARRAY
25968: PUSH
25969: LD_INT 3
25971: ARRAY
25972: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25973: LD_ADDR_VAR 0 7
25977: PUSH
25978: LD_VAR 0 3
25982: PUSH
25983: LD_VAR 0 1
25987: ARRAY
25988: PUSH
25989: LD_INT 4
25991: ARRAY
25992: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25993: LD_ADDR_VAR 0 9
25997: PUSH
25998: LD_VAR 0 6
26002: PPUSH
26003: LD_VAR 0 7
26007: PPUSH
26008: LD_INT 16
26010: PPUSH
26011: CALL 73677 0 3
26015: ST_TO_ADDR
// if not cratesNearbyPoint then
26016: LD_VAR 0 9
26020: NOT
26021: IFFALSE 26027
// exit ;
26023: POP
26024: POP
26025: GO 26492
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26027: LD_ADDR_VAR 0 4
26031: PUSH
26032: LD_INT 22
26034: PUSH
26035: LD_VAR 0 5
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 60
26049: PUSH
26050: EMPTY
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 91
26059: PUSH
26060: LD_VAR 0 8
26064: PUSH
26065: LD_INT 6
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: LD_INT 25
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 25
26088: PUSH
26089: LD_INT 16
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: PPUSH
26107: CALL_OW 69
26111: PUSH
26112: LD_VAR 0 8
26116: PPUSH
26117: CALL_OW 313
26121: PPUSH
26122: LD_INT 3
26124: PUSH
26125: LD_INT 60
26127: PUSH
26128: EMPTY
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 25
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 25
26150: PUSH
26151: LD_INT 16
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 72
26171: UNION
26172: ST_TO_ADDR
// if tmp then
26173: LD_VAR 0 4
26177: IFFALSE 26257
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26179: LD_ADDR_VAR 0 4
26183: PUSH
26184: LD_VAR 0 4
26188: PPUSH
26189: LD_INT 3
26191: PPUSH
26192: CALL 71484 0 2
26196: ST_TO_ADDR
// for j in tmp do
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_VAR 0 4
26206: PUSH
26207: FOR_IN
26208: IFFALSE 26251
// begin if IsInUnit ( j ) then
26210: LD_VAR 0 2
26214: PPUSH
26215: CALL_OW 310
26219: IFFALSE 26230
// ComExit ( j ) ;
26221: LD_VAR 0 2
26225: PPUSH
26226: CALL 71567 0 1
// AddComCollect ( j , x , y ) ;
26230: LD_VAR 0 2
26234: PPUSH
26235: LD_VAR 0 6
26239: PPUSH
26240: LD_VAR 0 7
26244: PPUSH
26245: CALL_OW 177
// end ;
26249: GO 26207
26251: POP
26252: POP
// exit ;
26253: POP
26254: POP
26255: GO 26492
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26257: LD_ADDR_VAR 0 4
26261: PUSH
26262: LD_INT 22
26264: PUSH
26265: LD_VAR 0 5
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 91
26276: PUSH
26277: LD_VAR 0 8
26281: PUSH
26282: LD_INT 8
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 34
26295: PUSH
26296: LD_INT 12
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 34
26305: PUSH
26306: LD_INT 51
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 34
26315: PUSH
26316: LD_INT 32
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 34
26325: PUSH
26326: LD_INT 89
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: PPUSH
26345: CALL_OW 69
26349: ST_TO_ADDR
// if tmp then
26350: LD_VAR 0 4
26354: IFFALSE 26488
// begin for j in tmp do
26356: LD_ADDR_VAR 0 2
26360: PUSH
26361: LD_VAR 0 4
26365: PUSH
26366: FOR_IN
26367: IFFALSE 26486
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26369: LD_VAR 0 2
26373: PPUSH
26374: CALL_OW 262
26378: PUSH
26379: LD_INT 3
26381: EQUAL
26382: IFTRUE 26399
26384: PUSH
26385: LD_VAR 0 2
26389: PPUSH
26390: CALL_OW 261
26394: PUSH
26395: LD_INT 20
26397: GREATER
26398: OR
26399: IFFALSE 26413
26401: PUSH
26402: LD_VAR 0 2
26406: PPUSH
26407: CALL_OW 314
26411: NOT
26412: AND
26413: IFFALSE 26443
26415: PUSH
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 263
26425: PUSH
26426: LD_INT 1
26428: NONEQUAL
26429: IFTRUE 26442
26431: PUSH
26432: LD_VAR 0 2
26436: PPUSH
26437: CALL_OW 311
26441: OR
26442: AND
26443: IFFALSE 26484
// begin ComCollect ( j , x , y ) ;
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_VAR 0 6
26454: PPUSH
26455: LD_VAR 0 7
26459: PPUSH
26460: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26464: LD_VAR 0 2
26468: PPUSH
26469: LD_VAR 0 8
26473: PPUSH
26474: CALL_OW 172
// exit ;
26478: POP
26479: POP
26480: POP
26481: POP
26482: GO 26492
// end ;
26484: GO 26366
26486: POP
26487: POP
// end ; end ;
26488: GO 25853
26490: POP
26491: POP
// end ; end_of_file end_of_file
26492: PPOPN 9
26494: END
// export function SOS_UnitDestroyed ( un ) ; begin
26495: LD_INT 0
26497: PPUSH
// ComRadiation ( un ) ;
26498: LD_VAR 0 1
26502: PPUSH
26503: CALL 27665 0 1
// end ;
26507: LD_VAR 0 2
26511: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26512: LD_INT 0
26514: PPUSH
// ComRadiation ( un ) ;
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL 27665 0 1
// end ;
26524: LD_VAR 0 2
26528: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26529: LD_INT 0
26531: PPUSH
// end ;
26532: LD_VAR 0 4
26536: RET
// export function SOS_Command ( cmd ) ; begin
26537: LD_INT 0
26539: PPUSH
// end ;
26540: LD_VAR 0 2
26544: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26545: LD_INT 0
26547: PPUSH
// end ;
26548: LD_VAR 0 6
26552: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
26553: LD_INT 0
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
26559: PPUSH
// if not vehicle or not factory then
26560: LD_VAR 0 1
26564: NOT
26565: IFTRUE 26574
26567: PUSH
26568: LD_VAR 0 2
26572: NOT
26573: OR
26574: IFFALSE 26578
// exit ;
26576: GO 27240
// weapon := GetWeapon ( vehicle ) ;
26578: LD_ADDR_VAR 0 7
26582: PUSH
26583: LD_VAR 0 1
26587: PPUSH
26588: CALL_OW 264
26592: ST_TO_ADDR
// if weapon = ar_miner then
26593: LD_VAR 0 7
26597: PUSH
26598: LD_INT 81
26600: EQUAL
26601: IFFALSE 26658
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
26603: LD_ADDR_EXP 96
26607: PUSH
26608: LD_EXP 96
26612: PPUSH
26613: LD_EXP 96
26617: PUSH
26618: LD_INT 1
26620: PLUS
26621: PPUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL_OW 1
26631: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26632: LD_ADDR_EXP 97
26636: PUSH
26637: LD_EXP 97
26641: PPUSH
26642: LD_EXP 97
26646: PUSH
26647: LD_INT 1
26649: PLUS
26650: PPUSH
26651: EMPTY
26652: PPUSH
26653: CALL_OW 1
26657: ST_TO_ADDR
// end ; if not factoryWaypoints then
26658: LD_EXP 85
26662: NOT
26663: IFFALSE 26667
// exit ;
26665: GO 27240
// for i := 1 to Count ( factoryWaypoints ) do
26667: LD_ADDR_VAR 0 4
26671: PUSH
26672: DOUBLE
26673: LD_INT 1
26675: DEC
26676: ST_TO_ADDR
26677: LD_EXP 85
26681: PPUSH
26682: CALL 35193 0 1
26686: PUSH
26687: FOR_TO
26688: IFFALSE 27238
// if factoryWaypoints [ i ] [ 2 ] = factory then
26690: LD_EXP 85
26694: PUSH
26695: LD_VAR 0 4
26699: ARRAY
26700: PUSH
26701: LD_INT 2
26703: ARRAY
26704: PUSH
26705: LD_VAR 0 2
26709: EQUAL
26710: IFFALSE 27236
// begin if GetControl ( vehicle ) = control_manual then
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 263
26721: PUSH
26722: LD_INT 1
26724: EQUAL
26725: IFFALSE 27089
// begin driver := IsDrivenBy ( vehicle ) ;
26727: LD_ADDR_VAR 0 5
26731: PUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 311
26741: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
26742: LD_VAR 0 5
26746: PUSH
26747: LD_EXP 86
26751: IN
26752: IFTRUE 26766
26754: PUSH
26755: LD_VAR 0 1
26759: PUSH
26760: LD_EXP 86
26764: IN
26765: OR
26766: IFFALSE 26772
// exit ;
26768: POP
26769: POP
26770: GO 27240
// if not HasTask ( driver ) then
26772: LD_VAR 0 5
26776: PPUSH
26777: CALL_OW 314
26781: NOT
26782: IFFALSE 27087
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
26784: LD_ADDR_EXP 86
26788: PUSH
26789: LD_EXP 86
26793: PPUSH
26794: LD_VAR 0 5
26798: PPUSH
26799: CALL 71169 0 2
26803: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
26804: LD_ADDR_EXP 86
26808: PUSH
26809: LD_EXP 86
26813: PPUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL 71169 0 2
26823: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26824: LD_ADDR_VAR 0 6
26828: PUSH
26829: LD_EXP 85
26833: PUSH
26834: LD_VAR 0 4
26838: ARRAY
26839: PUSH
26840: LD_INT 3
26842: ARRAY
26843: PPUSH
26844: LD_EXP 85
26848: PUSH
26849: LD_VAR 0 4
26853: ARRAY
26854: PUSH
26855: LD_INT 4
26857: ARRAY
26858: PPUSH
26859: CALL_OW 428
26863: ST_TO_ADDR
// if hex then
26864: LD_VAR 0 6
26868: IFFALSE 26886
// ComMoveUnit ( driver , hex ) else
26870: LD_VAR 0 5
26874: PPUSH
26875: LD_VAR 0 6
26879: PPUSH
26880: CALL_OW 112
26884: GO 26970
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
26886: LD_VAR 0 1
26890: PPUSH
26891: LD_EXP 85
26895: PUSH
26896: LD_VAR 0 4
26900: ARRAY
26901: PUSH
26902: LD_INT 3
26904: ARRAY
26905: PPUSH
26906: LD_EXP 85
26910: PUSH
26911: LD_VAR 0 4
26915: ARRAY
26916: PUSH
26917: LD_INT 4
26919: ARRAY
26920: PPUSH
26921: CALL_OW 297
26925: PUSH
26926: LD_INT 0
26928: GREATER
26929: IFFALSE 26970
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26931: LD_VAR 0 5
26935: PPUSH
26936: LD_EXP 85
26940: PUSH
26941: LD_VAR 0 4
26945: ARRAY
26946: PUSH
26947: LD_INT 3
26949: ARRAY
26950: PPUSH
26951: LD_EXP 85
26955: PUSH
26956: LD_VAR 0 4
26960: ARRAY
26961: PUSH
26962: LD_INT 4
26964: ARRAY
26965: PPUSH
26966: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26970: LD_VAR 0 5
26974: PPUSH
26975: CALL_OW 181
// if Multiplayer then
26979: LD_OWVAR 4
26983: IFFALSE 27032
// begin repeat wait ( 10 ) ;
26985: LD_INT 10
26987: PPUSH
26988: CALL_OW 67
// until not IsInUnit ( driver ) ;
26992: LD_VAR 0 5
26996: PPUSH
26997: CALL_OW 310
27001: NOT
27002: IFFALSE 26985
// if not HasTask ( driver ) then
27004: LD_VAR 0 5
27008: PPUSH
27009: CALL_OW 314
27013: NOT
27014: IFFALSE 27030
// ComEnterUnit ( driver , factory ) ;
27016: LD_VAR 0 5
27020: PPUSH
27021: LD_VAR 0 2
27025: PPUSH
27026: CALL_OW 120
// end else
27030: GO 27046
// AddComEnterUnit ( driver , factory ) ;
27032: LD_VAR 0 5
27036: PPUSH
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 180
// wait ( 0 0$1 ) ;
27046: LD_INT 35
27048: PPUSH
27049: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27053: LD_ADDR_EXP 86
27057: PUSH
27058: LD_EXP 86
27062: PUSH
27063: LD_VAR 0 5
27067: DIFF
27068: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27069: LD_ADDR_EXP 86
27073: PUSH
27074: LD_EXP 86
27078: PUSH
27079: LD_VAR 0 1
27083: DIFF
27084: ST_TO_ADDR
// break ;
27085: GO 27238
// end ; end else
27087: GO 27236
// if GetControl ( vehicle ) = control_remote then
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 263
27098: PUSH
27099: LD_INT 2
27101: EQUAL
27102: IFFALSE 27188
// begin wait ( 0 0$2 ) ;
27104: LD_INT 70
27106: PPUSH
27107: CALL_OW 67
// repeat wait ( 10 ) ;
27111: LD_INT 10
27113: PPUSH
27114: CALL_OW 67
// Connect ( vehicle ) ;
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL 41471 0 1
// until IsControledBy ( vehicle ) ;
27127: LD_VAR 0 1
27131: PPUSH
27132: CALL_OW 312
27136: IFFALSE 27111
// wait ( 10 ) ;
27138: LD_INT 10
27140: PPUSH
27141: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27145: LD_VAR 0 1
27149: PPUSH
27150: LD_EXP 85
27154: PUSH
27155: LD_VAR 0 4
27159: ARRAY
27160: PUSH
27161: LD_INT 3
27163: ARRAY
27164: PPUSH
27165: LD_EXP 85
27169: PUSH
27170: LD_VAR 0 4
27174: ARRAY
27175: PUSH
27176: LD_INT 4
27178: ARRAY
27179: PPUSH
27180: CALL_OW 111
// break ;
27184: GO 27238
// end else
27186: GO 27236
// begin wait ( 0 0$3 ) ;
27188: LD_INT 105
27190: PPUSH
27191: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27195: LD_VAR 0 1
27199: PPUSH
27200: LD_EXP 85
27204: PUSH
27205: LD_VAR 0 4
27209: ARRAY
27210: PUSH
27211: LD_INT 3
27213: ARRAY
27214: PPUSH
27215: LD_EXP 85
27219: PUSH
27220: LD_VAR 0 4
27224: ARRAY
27225: PUSH
27226: LD_INT 4
27228: ARRAY
27229: PPUSH
27230: CALL_OW 111
// break ;
27234: GO 27238
// end ; end ;
27236: GO 26687
27238: POP
27239: POP
// end ;
27240: LD_VAR 0 3
27244: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27245: LD_INT 0
27247: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27248: LD_VAR 0 1
27252: PUSH
27253: LD_INT 250
27255: EQUAL
27256: IFFALSE 27273
27258: PUSH
27259: LD_VAR 0 2
27263: PPUSH
27264: CALL_OW 264
27268: PUSH
27269: LD_INT 81
27271: EQUAL
27272: AND
27273: IFFALSE 27294
// MinerPlaceMine ( unit , x , y ) ;
27275: LD_VAR 0 2
27279: PPUSH
27280: LD_VAR 0 4
27284: PPUSH
27285: LD_VAR 0 5
27289: PPUSH
27290: CALL 30640 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27294: LD_VAR 0 1
27298: PUSH
27299: LD_INT 251
27301: EQUAL
27302: IFFALSE 27319
27304: PUSH
27305: LD_VAR 0 2
27309: PPUSH
27310: CALL_OW 264
27314: PUSH
27315: LD_INT 81
27317: EQUAL
27318: AND
27319: IFFALSE 27340
// MinerDetonateMine ( unit , x , y ) ;
27321: LD_VAR 0 2
27325: PPUSH
27326: LD_VAR 0 4
27330: PPUSH
27331: LD_VAR 0 5
27335: PPUSH
27336: CALL 31047 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27340: LD_VAR 0 1
27344: PUSH
27345: LD_INT 252
27347: EQUAL
27348: IFFALSE 27365
27350: PUSH
27351: LD_VAR 0 2
27355: PPUSH
27356: CALL_OW 264
27360: PUSH
27361: LD_INT 81
27363: EQUAL
27364: AND
27365: IFFALSE 27386
// MinerCreateMinefield ( unit , x , y ) ;
27367: LD_VAR 0 2
27371: PPUSH
27372: LD_VAR 0 4
27376: PPUSH
27377: LD_VAR 0 5
27381: PPUSH
27382: CALL 31279 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27386: LD_VAR 0 1
27390: PUSH
27391: LD_INT 253
27393: EQUAL
27394: IFFALSE 27411
27396: PUSH
27397: LD_VAR 0 2
27401: PPUSH
27402: CALL_OW 257
27406: PUSH
27407: LD_INT 5
27409: EQUAL
27410: AND
27411: IFFALSE 27432
// ComBinocular ( unit , x , y ) ;
27413: LD_VAR 0 2
27417: PPUSH
27418: LD_VAR 0 4
27422: PPUSH
27423: LD_VAR 0 5
27427: PPUSH
27428: CALL 31654 0 3
// if selectedUnit then
27432: LD_VAR 0 3
27436: IFFALSE 27496
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27438: LD_VAR 0 1
27442: PUSH
27443: LD_INT 254
27445: EQUAL
27446: IFFALSE 27463
27448: PUSH
27449: LD_VAR 0 2
27453: PPUSH
27454: CALL_OW 264
27458: PUSH
27459: LD_INT 99
27461: EQUAL
27462: AND
27463: IFFALSE 27480
27465: PUSH
27466: LD_VAR 0 3
27470: PPUSH
27471: CALL_OW 263
27475: PUSH
27476: LD_INT 3
27478: EQUAL
27479: AND
27480: IFFALSE 27496
// HackDestroyVehicle ( unit , selectedUnit ) ;
27482: LD_VAR 0 2
27486: PPUSH
27487: LD_VAR 0 3
27491: PPUSH
27492: CALL 29830 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27496: LD_VAR 0 1
27500: PUSH
27501: LD_INT 255
27503: EQUAL
27504: IFFALSE 27528
27506: PUSH
27507: LD_VAR 0 2
27511: PPUSH
27512: CALL_OW 264
27516: PUSH
27517: LD_INT 14
27519: PUSH
27520: LD_INT 53
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: IN
27527: AND
27528: IFFALSE 27546
27530: PUSH
27531: LD_VAR 0 4
27535: PPUSH
27536: LD_VAR 0 5
27540: PPUSH
27541: CALL_OW 488
27545: AND
27546: IFFALSE 27570
// CutTreeXYR ( unit , x , y , 12 ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: LD_VAR 0 4
27557: PPUSH
27558: LD_VAR 0 5
27562: PPUSH
27563: LD_INT 12
27565: PPUSH
27566: CALL 27761 0 4
// if cmd = 256 then
27570: LD_VAR 0 1
27574: PUSH
27575: LD_INT 256
27577: EQUAL
27578: IFFALSE 27599
// SetFactoryWaypoint ( unit , x , y ) ;
27580: LD_VAR 0 2
27584: PPUSH
27585: LD_VAR 0 4
27589: PPUSH
27590: LD_VAR 0 5
27594: PPUSH
27595: CALL 25040 0 3
// if cmd = 257 then
27599: LD_VAR 0 1
27603: PUSH
27604: LD_INT 257
27606: EQUAL
27607: IFFALSE 27628
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27609: LD_VAR 0 2
27613: PPUSH
27614: LD_VAR 0 4
27618: PPUSH
27619: LD_VAR 0 5
27623: PPUSH
27624: CALL 25536 0 3
// if cmd = 258 then
27628: LD_VAR 0 1
27632: PUSH
27633: LD_INT 258
27635: EQUAL
27636: IFFALSE 27660
// BurnTreeXYR ( unit , x , y , 8 ) ;
27638: LD_VAR 0 2
27642: PPUSH
27643: LD_VAR 0 4
27647: PPUSH
27648: LD_VAR 0 5
27652: PPUSH
27653: LD_INT 8
27655: PPUSH
27656: CALL 28183 0 4
// end ;
27660: LD_VAR 0 6
27664: RET
// export function ComRadiation ( un ) ; var eff ; begin
27665: LD_INT 0
27667: PPUSH
27668: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
27669: LD_VAR 0 1
27673: PPUSH
27674: CALL_OW 264
27678: PUSH
27679: LD_INT 91
27681: NONEQUAL
27682: IFFALSE 27686
// exit ;
27684: GO 27756
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27686: LD_INT 68
27688: PPUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 255
27698: PPUSH
27699: CALL_OW 321
27703: PUSH
27704: LD_INT 2
27706: EQUAL
27707: IFFALSE 27719
// eff := 50 else
27709: LD_ADDR_VAR 0 3
27713: PUSH
27714: LD_INT 50
27716: ST_TO_ADDR
27717: GO 27727
// eff := 25 ;
27719: LD_ADDR_VAR 0 3
27723: PUSH
27724: LD_INT 25
27726: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27727: LD_VAR 0 1
27731: PPUSH
27732: CALL_OW 250
27736: PPUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 251
27746: PPUSH
27747: LD_VAR 0 3
27751: PPUSH
27752: CALL_OW 495
// end ;
27756: LD_VAR 0 2
27760: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27761: LD_INT 0
27763: PPUSH
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL_OW 302
27781: NOT
27782: IFTRUE 27801
27784: PUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: LD_VAR 0 3
27794: PPUSH
27795: CALL_OW 488
27799: NOT
27800: OR
27801: IFTRUE 27810
27803: PUSH
27804: LD_VAR 0 4
27808: NOT
27809: OR
27810: IFFALSE 27814
// exit ;
27812: GO 28178
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 437
27823: PPUSH
27824: CALL 35193 0 1
27828: PUSH
27829: LD_INT 10
27831: GREATER
27832: IFFALSE 27836
// exit ;
27834: GO 28178
// list := [ ] ;
27836: LD_ADDR_VAR 0 13
27840: PUSH
27841: EMPTY
27842: ST_TO_ADDR
// if x - r < 0 then
27843: LD_VAR 0 2
27847: PUSH
27848: LD_VAR 0 4
27852: MINUS
27853: PUSH
27854: LD_INT 0
27856: LESS
27857: IFFALSE 27869
// min_x := 0 else
27859: LD_ADDR_VAR 0 7
27863: PUSH
27864: LD_INT 0
27866: ST_TO_ADDR
27867: GO 27885
// min_x := x - r ;
27869: LD_ADDR_VAR 0 7
27873: PUSH
27874: LD_VAR 0 2
27878: PUSH
27879: LD_VAR 0 4
27883: MINUS
27884: ST_TO_ADDR
// if y - r < 0 then
27885: LD_VAR 0 3
27889: PUSH
27890: LD_VAR 0 4
27894: MINUS
27895: PUSH
27896: LD_INT 0
27898: LESS
27899: IFFALSE 27911
// min_y := 0 else
27901: LD_ADDR_VAR 0 8
27905: PUSH
27906: LD_INT 0
27908: ST_TO_ADDR
27909: GO 27927
// min_y := y - r ;
27911: LD_ADDR_VAR 0 8
27915: PUSH
27916: LD_VAR 0 3
27920: PUSH
27921: LD_VAR 0 4
27925: MINUS
27926: ST_TO_ADDR
// max_x := x + r ;
27927: LD_ADDR_VAR 0 9
27931: PUSH
27932: LD_VAR 0 2
27936: PUSH
27937: LD_VAR 0 4
27941: PLUS
27942: ST_TO_ADDR
// max_y := y + r ;
27943: LD_ADDR_VAR 0 10
27947: PUSH
27948: LD_VAR 0 3
27952: PUSH
27953: LD_VAR 0 4
27957: PLUS
27958: ST_TO_ADDR
// for _x = min_x to max_x do
27959: LD_ADDR_VAR 0 11
27963: PUSH
27964: DOUBLE
27965: LD_VAR 0 7
27969: DEC
27970: ST_TO_ADDR
27971: LD_VAR 0 9
27975: PUSH
27976: FOR_TO
27977: IFFALSE 28096
// for _y = min_y to max_y do
27979: LD_ADDR_VAR 0 12
27983: PUSH
27984: DOUBLE
27985: LD_VAR 0 8
27989: DEC
27990: ST_TO_ADDR
27991: LD_VAR 0 10
27995: PUSH
27996: FOR_TO
27997: IFFALSE 28092
// begin if not ValidHex ( _x , _y ) then
27999: LD_VAR 0 11
28003: PPUSH
28004: LD_VAR 0 12
28008: PPUSH
28009: CALL_OW 488
28013: NOT
28014: IFFALSE 28018
// continue ;
28016: GO 27996
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28018: LD_VAR 0 11
28022: PPUSH
28023: LD_VAR 0 12
28027: PPUSH
28028: CALL_OW 351
28032: IFFALSE 28050
28034: PUSH
28035: LD_VAR 0 11
28039: PPUSH
28040: LD_VAR 0 12
28044: PPUSH
28045: CALL_OW 554
28049: AND
28050: IFFALSE 28090
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28052: LD_ADDR_VAR 0 13
28056: PUSH
28057: LD_VAR 0 13
28061: PPUSH
28062: LD_VAR 0 13
28066: PUSH
28067: LD_INT 1
28069: PLUS
28070: PPUSH
28071: LD_VAR 0 11
28075: PUSH
28076: LD_VAR 0 12
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PPUSH
28085: CALL_OW 2
28089: ST_TO_ADDR
// end ;
28090: GO 27996
28092: POP
28093: POP
28094: GO 27976
28096: POP
28097: POP
// if not list then
28098: LD_VAR 0 13
28102: NOT
28103: IFFALSE 28107
// exit ;
28105: GO 28178
// for i in list do
28107: LD_ADDR_VAR 0 6
28111: PUSH
28112: LD_VAR 0 13
28116: PUSH
28117: FOR_IN
28118: IFFALSE 28176
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28120: LD_VAR 0 1
28124: PPUSH
28125: LD_STRING M
28127: PUSH
28128: LD_VAR 0 6
28132: PUSH
28133: LD_INT 1
28135: ARRAY
28136: PUSH
28137: LD_VAR 0 6
28141: PUSH
28142: LD_INT 2
28144: ARRAY
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: PUSH
28167: EMPTY
28168: LIST
28169: PPUSH
28170: CALL_OW 447
28174: GO 28117
28176: POP
28177: POP
// end ;
28178: LD_VAR 0 5
28182: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28183: LD_INT 0
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28195: LD_VAR 0 1
28199: PPUSH
28200: CALL_OW 302
28204: NOT
28205: IFTRUE 28224
28207: PUSH
28208: LD_VAR 0 2
28212: PPUSH
28213: LD_VAR 0 3
28217: PPUSH
28218: CALL_OW 488
28222: NOT
28223: OR
28224: IFTRUE 28233
28226: PUSH
28227: LD_VAR 0 4
28231: NOT
28232: OR
28233: IFFALSE 28237
// exit ;
28235: GO 28776
// if Count ( GetTaskList ( flame ) ) > 10 then
28237: LD_VAR 0 1
28241: PPUSH
28242: CALL_OW 437
28246: PPUSH
28247: CALL 35193 0 1
28251: PUSH
28252: LD_INT 10
28254: GREATER
28255: IFFALSE 28259
// exit ;
28257: GO 28776
// list := [ ] ;
28259: LD_ADDR_VAR 0 13
28263: PUSH
28264: EMPTY
28265: ST_TO_ADDR
// if x - r < 0 then
28266: LD_VAR 0 2
28270: PUSH
28271: LD_VAR 0 4
28275: MINUS
28276: PUSH
28277: LD_INT 0
28279: LESS
28280: IFFALSE 28292
// min_x := 0 else
28282: LD_ADDR_VAR 0 7
28286: PUSH
28287: LD_INT 0
28289: ST_TO_ADDR
28290: GO 28308
// min_x := x - r ;
28292: LD_ADDR_VAR 0 7
28296: PUSH
28297: LD_VAR 0 2
28301: PUSH
28302: LD_VAR 0 4
28306: MINUS
28307: ST_TO_ADDR
// if y - r < 0 then
28308: LD_VAR 0 3
28312: PUSH
28313: LD_VAR 0 4
28317: MINUS
28318: PUSH
28319: LD_INT 0
28321: LESS
28322: IFFALSE 28334
// min_y := 0 else
28324: LD_ADDR_VAR 0 8
28328: PUSH
28329: LD_INT 0
28331: ST_TO_ADDR
28332: GO 28350
// min_y := y - r ;
28334: LD_ADDR_VAR 0 8
28338: PUSH
28339: LD_VAR 0 3
28343: PUSH
28344: LD_VAR 0 4
28348: MINUS
28349: ST_TO_ADDR
// max_x := x + r ;
28350: LD_ADDR_VAR 0 9
28354: PUSH
28355: LD_VAR 0 2
28359: PUSH
28360: LD_VAR 0 4
28364: PLUS
28365: ST_TO_ADDR
// max_y := y + r ;
28366: LD_ADDR_VAR 0 10
28370: PUSH
28371: LD_VAR 0 3
28375: PUSH
28376: LD_VAR 0 4
28380: PLUS
28381: ST_TO_ADDR
// for _x = min_x to max_x do
28382: LD_ADDR_VAR 0 11
28386: PUSH
28387: DOUBLE
28388: LD_VAR 0 7
28392: DEC
28393: ST_TO_ADDR
28394: LD_VAR 0 9
28398: PUSH
28399: FOR_TO
28400: IFFALSE 28519
// for _y = min_y to max_y do
28402: LD_ADDR_VAR 0 12
28406: PUSH
28407: DOUBLE
28408: LD_VAR 0 8
28412: DEC
28413: ST_TO_ADDR
28414: LD_VAR 0 10
28418: PUSH
28419: FOR_TO
28420: IFFALSE 28515
// begin if not ValidHex ( _x , _y ) then
28422: LD_VAR 0 11
28426: PPUSH
28427: LD_VAR 0 12
28431: PPUSH
28432: CALL_OW 488
28436: NOT
28437: IFFALSE 28441
// continue ;
28439: GO 28419
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28441: LD_VAR 0 11
28445: PPUSH
28446: LD_VAR 0 12
28450: PPUSH
28451: CALL_OW 351
28455: IFFALSE 28473
28457: PUSH
28458: LD_VAR 0 11
28462: PPUSH
28463: LD_VAR 0 12
28467: PPUSH
28468: CALL_OW 554
28472: AND
28473: IFFALSE 28513
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28475: LD_ADDR_VAR 0 13
28479: PUSH
28480: LD_VAR 0 13
28484: PPUSH
28485: LD_VAR 0 13
28489: PUSH
28490: LD_INT 1
28492: PLUS
28493: PPUSH
28494: LD_VAR 0 11
28498: PUSH
28499: LD_VAR 0 12
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PPUSH
28508: CALL_OW 2
28512: ST_TO_ADDR
// end ;
28513: GO 28419
28515: POP
28516: POP
28517: GO 28399
28519: POP
28520: POP
// if not list then
28521: LD_VAR 0 13
28525: NOT
28526: IFFALSE 28530
// exit ;
28528: GO 28776
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28530: LD_ADDR_VAR 0 13
28534: PUSH
28535: LD_VAR 0 1
28539: PPUSH
28540: LD_VAR 0 13
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: LD_INT 1
28550: PPUSH
28551: CALL 38599 0 4
28555: ST_TO_ADDR
// ComStop ( flame ) ;
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 141
// for i in list do
28565: LD_ADDR_VAR 0 6
28569: PUSH
28570: LD_VAR 0 13
28574: PUSH
28575: FOR_IN
28576: IFFALSE 28607
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_VAR 0 6
28587: PUSH
28588: LD_INT 1
28590: ARRAY
28591: PPUSH
28592: LD_VAR 0 6
28596: PUSH
28597: LD_INT 2
28599: ARRAY
28600: PPUSH
28601: CALL_OW 176
28605: GO 28575
28607: POP
28608: POP
// repeat wait ( 0 0$1 ) ;
28609: LD_INT 35
28611: PPUSH
28612: CALL_OW 67
// task := GetTaskList ( flame ) ;
28616: LD_ADDR_VAR 0 14
28620: PUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 437
28630: ST_TO_ADDR
// if not task then
28631: LD_VAR 0 14
28635: NOT
28636: IFFALSE 28640
// exit ;
28638: GO 28776
// if task [ 1 ] [ 1 ] <> | then
28640: LD_VAR 0 14
28644: PUSH
28645: LD_INT 1
28647: ARRAY
28648: PUSH
28649: LD_INT 1
28651: ARRAY
28652: PUSH
28653: LD_STRING |
28655: NONEQUAL
28656: IFFALSE 28660
// exit ;
28658: GO 28776
// _x := task [ 1 ] [ 2 ] ;
28660: LD_ADDR_VAR 0 11
28664: PUSH
28665: LD_VAR 0 14
28669: PUSH
28670: LD_INT 1
28672: ARRAY
28673: PUSH
28674: LD_INT 2
28676: ARRAY
28677: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28678: LD_ADDR_VAR 0 12
28682: PUSH
28683: LD_VAR 0 14
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PUSH
28692: LD_INT 3
28694: ARRAY
28695: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28696: LD_VAR 0 11
28700: PPUSH
28701: LD_VAR 0 12
28705: PPUSH
28706: CALL_OW 351
28710: NOT
28711: IFTRUE 28730
28713: PUSH
28714: LD_VAR 0 11
28718: PPUSH
28719: LD_VAR 0 12
28723: PPUSH
28724: CALL_OW 554
28728: NOT
28729: OR
28730: IFFALSE 28764
// begin task := Delete ( task , 1 ) ;
28732: LD_ADDR_VAR 0 14
28736: PUSH
28737: LD_VAR 0 14
28741: PPUSH
28742: LD_INT 1
28744: PPUSH
28745: CALL_OW 3
28749: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28750: LD_VAR 0 1
28754: PPUSH
28755: LD_VAR 0 14
28759: PPUSH
28760: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 314
28773: NOT
28774: IFFALSE 28609
// end ;
28776: LD_VAR 0 5
28780: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28781: LD_EXP 89
28785: NOT
28786: IFFALSE 28836
28788: GO 28790
28790: DISABLE
// begin initHack := true ;
28791: LD_ADDR_EXP 89
28795: PUSH
28796: LD_INT 1
28798: ST_TO_ADDR
// hackTanks := [ ] ;
28799: LD_ADDR_EXP 90
28803: PUSH
28804: EMPTY
28805: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28806: LD_ADDR_EXP 91
28810: PUSH
28811: EMPTY
28812: ST_TO_ADDR
// hackLimit := 3 ;
28813: LD_ADDR_EXP 92
28817: PUSH
28818: LD_INT 3
28820: ST_TO_ADDR
// hackDist := 12 ;
28821: LD_ADDR_EXP 93
28825: PUSH
28826: LD_INT 12
28828: ST_TO_ADDR
// hackCounter := [ ] ;
28829: LD_ADDR_EXP 94
28833: PUSH
28834: EMPTY
28835: ST_TO_ADDR
// end ;
28836: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28837: LD_EXP 89
28841: IFFALSE 28859
28843: PUSH
28844: LD_INT 34
28846: PUSH
28847: LD_INT 99
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: AND
28859: IFFALSE 29112
28861: GO 28863
28863: DISABLE
28864: LD_INT 0
28866: PPUSH
28867: PPUSH
// begin enable ;
28868: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28869: LD_ADDR_VAR 0 1
28873: PUSH
28874: LD_INT 34
28876: PUSH
28877: LD_INT 99
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PPUSH
28884: CALL_OW 69
28888: PUSH
28889: FOR_IN
28890: IFFALSE 29110
// begin if not i in hackTanks then
28892: LD_VAR 0 1
28896: PUSH
28897: LD_EXP 90
28901: IN
28902: NOT
28903: IFFALSE 28986
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28905: LD_ADDR_EXP 90
28909: PUSH
28910: LD_EXP 90
28914: PPUSH
28915: LD_EXP 90
28919: PUSH
28920: LD_INT 1
28922: PLUS
28923: PPUSH
28924: LD_VAR 0 1
28928: PPUSH
28929: CALL_OW 1
28933: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28934: LD_ADDR_EXP 91
28938: PUSH
28939: LD_EXP 91
28943: PPUSH
28944: LD_EXP 91
28948: PUSH
28949: LD_INT 1
28951: PLUS
28952: PPUSH
28953: EMPTY
28954: PPUSH
28955: CALL_OW 1
28959: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28960: LD_ADDR_EXP 94
28964: PUSH
28965: LD_EXP 94
28969: PPUSH
28970: LD_EXP 94
28974: PUSH
28975: LD_INT 1
28977: PLUS
28978: PPUSH
28979: EMPTY
28980: PPUSH
28981: CALL_OW 1
28985: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28986: LD_VAR 0 1
28990: PPUSH
28991: CALL_OW 302
28995: NOT
28996: IFFALSE 29009
// begin HackUnlinkAll ( i ) ;
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL 29115 0 1
// continue ;
29007: GO 28889
// end ; HackCheckCapturedStatus ( i ) ;
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL 29560 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29018: LD_ADDR_VAR 0 2
29022: PUSH
29023: LD_INT 81
29025: PUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 255
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 33
29042: PUSH
29043: LD_INT 3
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 91
29052: PUSH
29053: LD_VAR 0 1
29057: PUSH
29058: LD_EXP 93
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 50
29070: PUSH
29071: EMPTY
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: PPUSH
29080: CALL_OW 69
29084: ST_TO_ADDR
// if not tmp then
29085: LD_VAR 0 2
29089: NOT
29090: IFFALSE 29094
// continue ;
29092: GO 28889
// HackLink ( i , tmp ) ;
29094: LD_VAR 0 1
29098: PPUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: CALL 29251 0 2
// end ;
29108: GO 28889
29110: POP
29111: POP
// end ;
29112: PPOPN 2
29114: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29115: LD_INT 0
29117: PPUSH
29118: PPUSH
29119: PPUSH
// if not hack in hackTanks then
29120: LD_VAR 0 1
29124: PUSH
29125: LD_EXP 90
29129: IN
29130: NOT
29131: IFFALSE 29135
// exit ;
29133: GO 29246
// index := GetElementIndex ( hackTanks , hack ) ;
29135: LD_ADDR_VAR 0 4
29139: PUSH
29140: LD_EXP 90
29144: PPUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL 37894 0 2
29154: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29155: LD_EXP 91
29159: PUSH
29160: LD_VAR 0 4
29164: ARRAY
29165: IFFALSE 29246
// begin for i in hackTanksCaptured [ index ] do
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_EXP 91
29176: PUSH
29177: LD_VAR 0 4
29181: ARRAY
29182: PUSH
29183: FOR_IN
29184: IFFALSE 29210
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29186: LD_VAR 0 3
29190: PUSH
29191: LD_INT 1
29193: ARRAY
29194: PPUSH
29195: LD_VAR 0 3
29199: PUSH
29200: LD_INT 2
29202: ARRAY
29203: PPUSH
29204: CALL_OW 235
29208: GO 29183
29210: POP
29211: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29212: LD_ADDR_EXP 91
29216: PUSH
29217: LD_EXP 91
29221: PPUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: EMPTY
29228: PPUSH
29229: CALL_OW 1
29233: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29234: LD_VAR 0 1
29238: PPUSH
29239: LD_INT 0
29241: PPUSH
29242: CALL_OW 505
// end ; end ;
29246: LD_VAR 0 2
29250: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
29255: PPUSH
// if not hack in hackTanks or not vehicles then
29256: LD_VAR 0 1
29260: PUSH
29261: LD_EXP 90
29265: IN
29266: NOT
29267: IFTRUE 29276
29269: PUSH
29270: LD_VAR 0 2
29274: NOT
29275: OR
29276: IFFALSE 29280
// exit ;
29278: GO 29555
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: LD_VAR 0 2
29294: PPUSH
29295: LD_INT 1
29297: PPUSH
29298: LD_INT 1
29300: PPUSH
29301: CALL 38546 0 4
29305: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29306: LD_ADDR_VAR 0 5
29310: PUSH
29311: LD_EXP 90
29315: PPUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL 37894 0 2
29325: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29326: LD_EXP 91
29330: PUSH
29331: LD_VAR 0 5
29335: ARRAY
29336: PUSH
29337: LD_EXP 92
29341: LESS
29342: IFFALSE 29531
// begin for i := 1 to vehicles do
29344: LD_ADDR_VAR 0 4
29348: PUSH
29349: DOUBLE
29350: LD_INT 1
29352: DEC
29353: ST_TO_ADDR
29354: LD_VAR 0 2
29358: PUSH
29359: FOR_TO
29360: IFFALSE 29529
// begin if hackTanksCaptured [ index ] = hackLimit then
29362: LD_EXP 91
29366: PUSH
29367: LD_VAR 0 5
29371: ARRAY
29372: PUSH
29373: LD_EXP 92
29377: EQUAL
29378: IFFALSE 29382
// break ;
29380: GO 29529
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29382: LD_ADDR_EXP 94
29386: PUSH
29387: LD_EXP 94
29391: PPUSH
29392: LD_VAR 0 5
29396: PPUSH
29397: LD_EXP 94
29401: PUSH
29402: LD_VAR 0 5
29406: ARRAY
29407: PUSH
29408: LD_INT 1
29410: PLUS
29411: PPUSH
29412: CALL_OW 1
29416: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29417: LD_ADDR_EXP 91
29421: PUSH
29422: LD_EXP 91
29426: PPUSH
29427: LD_VAR 0 5
29431: PUSH
29432: LD_EXP 91
29436: PUSH
29437: LD_VAR 0 5
29441: ARRAY
29442: PUSH
29443: LD_INT 1
29445: PLUS
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: LD_VAR 0 2
29455: PUSH
29456: LD_VAR 0 4
29460: ARRAY
29461: PUSH
29462: LD_VAR 0 2
29466: PUSH
29467: LD_VAR 0 4
29471: ARRAY
29472: PPUSH
29473: CALL_OW 255
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PPUSH
29482: CALL 38111 0 3
29486: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29487: LD_VAR 0 2
29491: PUSH
29492: LD_VAR 0 4
29496: ARRAY
29497: PPUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL_OW 255
29507: PPUSH
29508: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29512: LD_VAR 0 2
29516: PUSH
29517: LD_VAR 0 4
29521: ARRAY
29522: PPUSH
29523: CALL_OW 141
// end ;
29527: GO 29359
29529: POP
29530: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29531: LD_VAR 0 1
29535: PPUSH
29536: LD_EXP 91
29540: PUSH
29541: LD_VAR 0 5
29545: ARRAY
29546: PUSH
29547: LD_INT 0
29549: PLUS
29550: PPUSH
29551: CALL_OW 505
// end ;
29555: LD_VAR 0 3
29559: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
// if not hack in hackTanks then
29566: LD_VAR 0 1
29570: PUSH
29571: LD_EXP 90
29575: IN
29576: NOT
29577: IFFALSE 29581
// exit ;
29579: GO 29825
// index := GetElementIndex ( hackTanks , hack ) ;
29581: LD_ADDR_VAR 0 4
29585: PUSH
29586: LD_EXP 90
29590: PPUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL 37894 0 2
29600: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29601: LD_ADDR_VAR 0 3
29605: PUSH
29606: DOUBLE
29607: LD_EXP 91
29611: PUSH
29612: LD_VAR 0 4
29616: ARRAY
29617: INC
29618: ST_TO_ADDR
29619: LD_INT 1
29621: PUSH
29622: FOR_DOWNTO
29623: IFFALSE 29799
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29625: LD_ADDR_VAR 0 5
29629: PUSH
29630: LD_EXP 91
29634: PUSH
29635: LD_VAR 0 4
29639: ARRAY
29640: PUSH
29641: LD_VAR 0 3
29645: ARRAY
29646: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29647: LD_VAR 0 5
29651: PUSH
29652: LD_INT 1
29654: ARRAY
29655: PPUSH
29656: CALL_OW 302
29660: NOT
29661: IFTRUE 29689
29663: PUSH
29664: LD_VAR 0 5
29668: PUSH
29669: LD_INT 1
29671: ARRAY
29672: PPUSH
29673: CALL_OW 255
29677: PUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 255
29687: NONEQUAL
29688: OR
29689: IFFALSE 29797
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29691: LD_VAR 0 5
29695: PUSH
29696: LD_INT 1
29698: ARRAY
29699: PPUSH
29700: CALL_OW 305
29704: IFFALSE 29732
29706: PUSH
29707: LD_VAR 0 5
29711: PUSH
29712: LD_INT 1
29714: ARRAY
29715: PPUSH
29716: CALL_OW 255
29720: PUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 255
29730: EQUAL
29731: AND
29732: IFFALSE 29756
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29734: LD_VAR 0 5
29738: PUSH
29739: LD_INT 1
29741: ARRAY
29742: PPUSH
29743: LD_VAR 0 5
29747: PUSH
29748: LD_INT 2
29750: ARRAY
29751: PPUSH
29752: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29756: LD_ADDR_EXP 91
29760: PUSH
29761: LD_EXP 91
29765: PPUSH
29766: LD_VAR 0 4
29770: PPUSH
29771: LD_EXP 91
29775: PUSH
29776: LD_VAR 0 4
29780: ARRAY
29781: PPUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: CALL_OW 3
29791: PPUSH
29792: CALL_OW 1
29796: ST_TO_ADDR
// end ; end ;
29797: GO 29622
29799: POP
29800: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_EXP 91
29810: PUSH
29811: LD_VAR 0 4
29815: ARRAY
29816: PUSH
29817: LD_INT 0
29819: PLUS
29820: PPUSH
29821: CALL_OW 505
// end ;
29825: LD_VAR 0 2
29829: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29830: LD_INT 0
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
// if not hack in hackTanks then
29836: LD_VAR 0 1
29840: PUSH
29841: LD_EXP 90
29845: IN
29846: NOT
29847: IFFALSE 29851
// exit ;
29849: GO 29936
// index := GetElementIndex ( hackTanks , hack ) ;
29851: LD_ADDR_VAR 0 5
29855: PUSH
29856: LD_EXP 90
29860: PPUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL 37894 0 2
29870: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29871: LD_ADDR_VAR 0 4
29875: PUSH
29876: DOUBLE
29877: LD_INT 1
29879: DEC
29880: ST_TO_ADDR
29881: LD_EXP 91
29885: PUSH
29886: LD_VAR 0 5
29890: ARRAY
29891: PUSH
29892: FOR_TO
29893: IFFALSE 29934
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29895: LD_EXP 91
29899: PUSH
29900: LD_VAR 0 5
29904: ARRAY
29905: PUSH
29906: LD_VAR 0 4
29910: ARRAY
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PUSH
29916: LD_VAR 0 2
29920: EQUAL
29921: IFFALSE 29932
// KillUnit ( vehicle ) ;
29923: LD_VAR 0 2
29927: PPUSH
29928: CALL_OW 66
29932: GO 29892
29934: POP
29935: POP
// end ;
29936: LD_VAR 0 3
29940: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
29941: LD_EXP 95
29945: NOT
29946: IFFALSE 30079
29948: GO 29950
29950: DISABLE
29951: LD_INT 0
29953: PPUSH
// begin initMiner := true ;
29954: LD_ADDR_EXP 95
29958: PUSH
29959: LD_INT 1
29961: ST_TO_ADDR
// minersList := [ ] ;
29962: LD_ADDR_EXP 96
29966: PUSH
29967: EMPTY
29968: ST_TO_ADDR
// minerMinesList := [ ] ;
29969: LD_ADDR_EXP 97
29973: PUSH
29974: EMPTY
29975: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
29976: LD_ADDR_EXP 98
29980: PUSH
29981: LD_INT 10
29983: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29984: LD_ADDR_VAR 0 1
29988: PUSH
29989: LD_INT 34
29991: PUSH
29992: LD_INT 81
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: PUSH
30004: FOR_IN
30005: IFFALSE 30077
// begin if not i in minersList then
30007: LD_VAR 0 1
30011: PUSH
30012: LD_EXP 96
30016: IN
30017: NOT
30018: IFFALSE 30075
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30020: LD_ADDR_EXP 96
30024: PUSH
30025: LD_EXP 96
30029: PPUSH
30030: LD_EXP 96
30034: PUSH
30035: LD_INT 1
30037: PLUS
30038: PPUSH
30039: LD_VAR 0 1
30043: PPUSH
30044: CALL_OW 1
30048: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30049: LD_ADDR_EXP 97
30053: PUSH
30054: LD_EXP 97
30058: PPUSH
30059: LD_EXP 97
30063: PUSH
30064: LD_INT 1
30066: PLUS
30067: PPUSH
30068: EMPTY
30069: PPUSH
30070: CALL_OW 1
30074: ST_TO_ADDR
// end end ;
30075: GO 30004
30077: POP
30078: POP
// end ;
30079: PPOPN 1
30081: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30082: LD_EXP 95
30086: IFFALSE 30117
30088: PUSH
30089: LD_EXP 97
30093: PPUSH
30094: CALL 35193 0 1
30098: IFTRUE 30116
30100: PUSH
30101: LD_INT 34
30103: PUSH
30104: LD_INT 81
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: CALL_OW 69
30115: OR
30116: AND
30117: IFFALSE 30637
30119: GO 30121
30121: DISABLE
30122: LD_INT 0
30124: PPUSH
30125: PPUSH
30126: PPUSH
30127: PPUSH
// begin enable ;
30128: ENABLE
// for i := minerMinesList downto 1 do
30129: LD_ADDR_VAR 0 1
30133: PUSH
30134: DOUBLE
30135: LD_EXP 97
30139: INC
30140: ST_TO_ADDR
30141: LD_INT 1
30143: PUSH
30144: FOR_DOWNTO
30145: IFFALSE 30635
// begin side := GetSide ( minersList [ i ] ) ;
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_EXP 96
30156: PUSH
30157: LD_VAR 0 1
30161: ARRAY
30162: PPUSH
30163: CALL_OW 255
30167: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
30168: LD_EXP 96
30172: PUSH
30173: LD_VAR 0 1
30177: ARRAY
30178: PPUSH
30179: CALL_OW 300
30183: IFFALSE 30204
30185: PUSH
30186: LD_VAR 0 3
30190: PUSH
30191: LD_OWVAR 2
30195: PUSH
30196: LD_INT 9
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: IN
30203: AND
30204: IFFALSE 30237
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
30206: LD_EXP 96
30210: PUSH
30211: LD_VAR 0 1
30215: ARRAY
30216: PPUSH
30217: LD_EXP 97
30221: PUSH
30222: LD_VAR 0 1
30226: ARRAY
30227: PPUSH
30228: CALL 35193 0 1
30232: PPUSH
30233: CALL_OW 505
// if not minerMinesList [ i ] then
30237: LD_EXP 97
30241: PUSH
30242: LD_VAR 0 1
30246: ARRAY
30247: NOT
30248: IFFALSE 30252
// continue ;
30250: GO 30144
// for j := minerMinesList [ i ] downto 1 do
30252: LD_ADDR_VAR 0 2
30256: PUSH
30257: DOUBLE
30258: LD_EXP 97
30262: PUSH
30263: LD_VAR 0 1
30267: ARRAY
30268: INC
30269: ST_TO_ADDR
30270: LD_INT 1
30272: PUSH
30273: FOR_DOWNTO
30274: IFFALSE 30631
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
30276: LD_EXP 96
30280: PUSH
30281: LD_VAR 0 1
30285: ARRAY
30286: PPUSH
30287: CALL_OW 301
30291: IFTRUE 30311
30293: PUSH
30294: LD_EXP 96
30298: PUSH
30299: LD_VAR 0 1
30303: ARRAY
30304: PPUSH
30305: CALL_OW 305
30309: NOT
30310: OR
30311: IFFALSE 30402
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30313: LD_EXP 97
30317: PUSH
30318: LD_VAR 0 1
30322: ARRAY
30323: PUSH
30324: LD_VAR 0 2
30328: ARRAY
30329: PUSH
30330: LD_INT 1
30332: ARRAY
30333: PPUSH
30334: LD_EXP 97
30338: PUSH
30339: LD_VAR 0 1
30343: ARRAY
30344: PUSH
30345: LD_VAR 0 2
30349: ARRAY
30350: PUSH
30351: LD_INT 2
30353: ARRAY
30354: PPUSH
30355: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30359: LD_ADDR_EXP 97
30363: PUSH
30364: LD_EXP 97
30368: PPUSH
30369: LD_VAR 0 1
30373: PPUSH
30374: LD_EXP 97
30378: PUSH
30379: LD_VAR 0 1
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 2
30389: PPUSH
30390: CALL_OW 3
30394: PPUSH
30395: CALL_OW 1
30399: ST_TO_ADDR
// continue ;
30400: GO 30273
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30402: LD_ADDR_VAR 0 4
30406: PUSH
30407: LD_EXP 97
30411: PUSH
30412: LD_VAR 0 1
30416: ARRAY
30417: PUSH
30418: LD_VAR 0 2
30422: ARRAY
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PPUSH
30428: LD_EXP 97
30432: PUSH
30433: LD_VAR 0 1
30437: ARRAY
30438: PUSH
30439: LD_VAR 0 2
30443: ARRAY
30444: PUSH
30445: LD_INT 2
30447: ARRAY
30448: PPUSH
30449: CALL_OW 428
30453: ST_TO_ADDR
// if not tmp then
30454: LD_VAR 0 4
30458: NOT
30459: IFFALSE 30463
// continue ;
30461: GO 30273
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30463: LD_VAR 0 4
30467: PUSH
30468: LD_INT 81
30470: PUSH
30471: LD_VAR 0 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PPUSH
30480: CALL_OW 69
30484: IN
30485: IFFALSE 30535
30487: PUSH
30488: LD_EXP 97
30492: PUSH
30493: LD_VAR 0 1
30497: ARRAY
30498: PUSH
30499: LD_VAR 0 2
30503: ARRAY
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: LD_EXP 97
30513: PUSH
30514: LD_VAR 0 1
30518: ARRAY
30519: PUSH
30520: LD_VAR 0 2
30524: ARRAY
30525: PUSH
30526: LD_INT 2
30528: ARRAY
30529: PPUSH
30530: CALL_OW 458
30534: AND
30535: IFFALSE 30629
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30537: LD_EXP 97
30541: PUSH
30542: LD_VAR 0 1
30546: ARRAY
30547: PUSH
30548: LD_VAR 0 2
30552: ARRAY
30553: PUSH
30554: LD_INT 1
30556: ARRAY
30557: PPUSH
30558: LD_EXP 97
30562: PUSH
30563: LD_VAR 0 1
30567: ARRAY
30568: PUSH
30569: LD_VAR 0 2
30573: ARRAY
30574: PUSH
30575: LD_INT 2
30577: ARRAY
30578: PPUSH
30579: LD_VAR 0 3
30583: PPUSH
30584: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30588: LD_ADDR_EXP 97
30592: PUSH
30593: LD_EXP 97
30597: PPUSH
30598: LD_VAR 0 1
30602: PPUSH
30603: LD_EXP 97
30607: PUSH
30608: LD_VAR 0 1
30612: ARRAY
30613: PPUSH
30614: LD_VAR 0 2
30618: PPUSH
30619: CALL_OW 3
30623: PPUSH
30624: CALL_OW 1
30628: ST_TO_ADDR
// end ; end ;
30629: GO 30273
30631: POP
30632: POP
// end ;
30633: GO 30144
30635: POP
30636: POP
// end ;
30637: PPOPN 4
30639: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
30640: LD_INT 0
30642: PPUSH
30643: PPUSH
30644: PPUSH
30645: PPUSH
// result := false ;
30646: LD_ADDR_VAR 0 4
30650: PUSH
30651: LD_INT 0
30653: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30654: LD_VAR 0 1
30658: PPUSH
30659: CALL_OW 264
30663: PUSH
30664: LD_INT 81
30666: EQUAL
30667: NOT
30668: IFFALSE 30672
// exit ;
30670: GO 31042
// side := GetSide ( unit ) ;
30672: LD_ADDR_VAR 0 6
30676: PUSH
30677: LD_VAR 0 1
30681: PPUSH
30682: CALL_OW 255
30686: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
30687: LD_ADDR_VAR 0 5
30691: PUSH
30692: LD_EXP 96
30696: PPUSH
30697: LD_VAR 0 1
30701: PPUSH
30702: CALL 37894 0 2
30706: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30707: LD_EXP 97
30711: PUSH
30712: LD_VAR 0 5
30716: ARRAY
30717: PUSH
30718: LD_EXP 98
30722: GREATEREQUAL
30723: IFFALSE 30727
// exit ;
30725: GO 31042
// ComMoveXY ( unit , x , y ) ;
30727: LD_VAR 0 1
30731: PPUSH
30732: LD_VAR 0 2
30736: PPUSH
30737: LD_VAR 0 3
30741: PPUSH
30742: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30746: LD_INT 35
30748: PPUSH
30749: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 2
30762: PPUSH
30763: LD_VAR 0 3
30767: PPUSH
30768: CALL 69950 0 3
30772: NOT
30773: IFFALSE 30786
30775: PUSH
30776: LD_VAR 0 1
30780: PPUSH
30781: CALL_OW 314
30785: AND
30786: IFFALSE 30790
// exit ;
30788: GO 31042
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30790: LD_VAR 0 2
30794: PPUSH
30795: LD_VAR 0 3
30799: PPUSH
30800: CALL_OW 428
30804: PUSH
30805: LD_VAR 0 1
30809: EQUAL
30810: IFFALSE 30824
30812: PUSH
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 314
30822: NOT
30823: AND
30824: IFFALSE 30746
// if MineAtPos ( x , y ) then
30826: LD_VAR 0 2
30830: PPUSH
30831: LD_VAR 0 3
30835: PPUSH
30836: CALL_OW 458
30840: IFFALSE 30844
// exit ;
30842: GO 31042
// if your_side = side then
30844: LD_OWVAR 2
30848: PUSH
30849: LD_VAR 0 6
30853: EQUAL
30854: IFFALSE 30873
// PlaySoundXY ( x , y , PlantMine ) ;
30856: LD_VAR 0 2
30860: PPUSH
30861: LD_VAR 0 3
30865: PPUSH
30866: LD_STRING PlantMine
30868: PPUSH
30869: CALL_OW 366
// repeat wait ( 1 ) ;
30873: LD_INT 1
30875: PPUSH
30876: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
30880: LD_VAR 0 2
30884: PPUSH
30885: LD_VAR 0 3
30889: PPUSH
30890: LD_VAR 0 6
30894: PPUSH
30895: LD_INT 0
30897: PPUSH
30898: CALL_OW 454
30902: IFFALSE 30873
// if MineAtPos ( x , y ) then
30904: LD_VAR 0 2
30908: PPUSH
30909: LD_VAR 0 3
30913: PPUSH
30914: CALL_OW 458
30918: IFFALSE 31034
// begin for i in minerMinesList [ index ] do
30920: LD_ADDR_VAR 0 7
30924: PUSH
30925: LD_EXP 97
30929: PUSH
30930: LD_VAR 0 5
30934: ARRAY
30935: PUSH
30936: FOR_IN
30937: IFFALSE 30979
// if i [ 1 ] = x and i [ 2 ] = y then
30939: LD_VAR 0 7
30943: PUSH
30944: LD_INT 1
30946: ARRAY
30947: PUSH
30948: LD_VAR 0 2
30952: EQUAL
30953: IFFALSE 30971
30955: PUSH
30956: LD_VAR 0 7
30960: PUSH
30961: LD_INT 2
30963: ARRAY
30964: PUSH
30965: LD_VAR 0 3
30969: EQUAL
30970: AND
30971: IFFALSE 30977
// exit ;
30973: POP
30974: POP
30975: GO 31042
30977: GO 30936
30979: POP
30980: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30981: LD_ADDR_EXP 97
30985: PUSH
30986: LD_EXP 97
30990: PPUSH
30991: LD_VAR 0 5
30995: PUSH
30996: LD_EXP 97
31000: PUSH
31001: LD_VAR 0 5
31005: ARRAY
31006: PUSH
31007: LD_INT 1
31009: PLUS
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PPUSH
31015: LD_VAR 0 2
31019: PUSH
31020: LD_VAR 0 3
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PPUSH
31029: CALL 38111 0 3
31033: ST_TO_ADDR
// end ; result := true ;
31034: LD_ADDR_VAR 0 4
31038: PUSH
31039: LD_INT 1
31041: ST_TO_ADDR
// end ;
31042: LD_VAR 0 4
31046: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31047: LD_INT 0
31049: PPUSH
31050: PPUSH
31051: PPUSH
// if not unit in minersList then
31052: LD_VAR 0 1
31056: PUSH
31057: LD_EXP 96
31061: IN
31062: NOT
31063: IFFALSE 31067
// exit ;
31065: GO 31274
// index := GetElementIndex ( minersList , unit ) ;
31067: LD_ADDR_VAR 0 6
31071: PUSH
31072: LD_EXP 96
31076: PPUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL 37894 0 2
31086: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31087: LD_ADDR_VAR 0 5
31091: PUSH
31092: DOUBLE
31093: LD_EXP 97
31097: PUSH
31098: LD_VAR 0 6
31102: ARRAY
31103: INC
31104: ST_TO_ADDR
31105: LD_INT 1
31107: PUSH
31108: FOR_DOWNTO
31109: IFFALSE 31272
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31111: LD_EXP 97
31115: PUSH
31116: LD_VAR 0 6
31120: ARRAY
31121: PUSH
31122: LD_VAR 0 5
31126: ARRAY
31127: PUSH
31128: LD_INT 1
31130: ARRAY
31131: PPUSH
31132: LD_EXP 97
31136: PUSH
31137: LD_VAR 0 6
31141: ARRAY
31142: PUSH
31143: LD_VAR 0 5
31147: ARRAY
31148: PUSH
31149: LD_INT 2
31151: ARRAY
31152: PPUSH
31153: LD_VAR 0 2
31157: PPUSH
31158: LD_VAR 0 3
31162: PPUSH
31163: CALL_OW 298
31167: PUSH
31168: LD_INT 6
31170: LESS
31171: IFFALSE 31270
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31173: LD_EXP 97
31177: PUSH
31178: LD_VAR 0 6
31182: ARRAY
31183: PUSH
31184: LD_VAR 0 5
31188: ARRAY
31189: PUSH
31190: LD_INT 1
31192: ARRAY
31193: PPUSH
31194: LD_EXP 97
31198: PUSH
31199: LD_VAR 0 6
31203: ARRAY
31204: PUSH
31205: LD_VAR 0 5
31209: ARRAY
31210: PUSH
31211: LD_INT 2
31213: ARRAY
31214: PPUSH
31215: LD_VAR 0 1
31219: PPUSH
31220: CALL_OW 255
31224: PPUSH
31225: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31229: LD_ADDR_EXP 97
31233: PUSH
31234: LD_EXP 97
31238: PPUSH
31239: LD_VAR 0 6
31243: PPUSH
31244: LD_EXP 97
31248: PUSH
31249: LD_VAR 0 6
31253: ARRAY
31254: PPUSH
31255: LD_VAR 0 5
31259: PPUSH
31260: CALL_OW 3
31264: PPUSH
31265: CALL_OW 1
31269: ST_TO_ADDR
// end ; end ;
31270: GO 31108
31272: POP
31273: POP
// end ;
31274: LD_VAR 0 4
31278: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31279: LD_INT 0
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
31289: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31290: LD_VAR 0 1
31294: PPUSH
31295: CALL_OW 264
31299: PUSH
31300: LD_INT 81
31302: EQUAL
31303: NOT
31304: IFTRUE 31319
31306: PUSH
31307: LD_VAR 0 1
31311: PUSH
31312: LD_EXP 96
31316: IN
31317: NOT
31318: OR
31319: IFFALSE 31323
// exit ;
31321: GO 31649
// index := GetElementIndex ( minersList , unit ) ;
31323: LD_ADDR_VAR 0 6
31327: PUSH
31328: LD_EXP 96
31332: PPUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: CALL 37894 0 2
31342: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31343: LD_ADDR_VAR 0 8
31347: PUSH
31348: LD_EXP 98
31352: PUSH
31353: LD_EXP 97
31357: PUSH
31358: LD_VAR 0 6
31362: ARRAY
31363: MINUS
31364: ST_TO_ADDR
// if not minesFreeAmount then
31365: LD_VAR 0 8
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 31649
// tmp := [ ] ;
31374: LD_ADDR_VAR 0 7
31378: PUSH
31379: EMPTY
31380: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31381: LD_ADDR_VAR 0 5
31385: PUSH
31386: DOUBLE
31387: LD_INT 1
31389: DEC
31390: ST_TO_ADDR
31391: LD_VAR 0 8
31395: PUSH
31396: FOR_TO
31397: IFFALSE 31596
// begin _d := rand ( 0 , 5 ) ;
31399: LD_ADDR_VAR 0 11
31403: PUSH
31404: LD_INT 0
31406: PPUSH
31407: LD_INT 5
31409: PPUSH
31410: CALL_OW 12
31414: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31415: LD_ADDR_VAR 0 12
31419: PUSH
31420: LD_INT 2
31422: PPUSH
31423: LD_INT 6
31425: PPUSH
31426: CALL_OW 12
31430: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31431: LD_ADDR_VAR 0 9
31435: PUSH
31436: LD_VAR 0 2
31440: PPUSH
31441: LD_VAR 0 11
31445: PPUSH
31446: LD_VAR 0 12
31450: PPUSH
31451: CALL_OW 272
31455: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31456: LD_ADDR_VAR 0 10
31460: PUSH
31461: LD_VAR 0 3
31465: PPUSH
31466: LD_VAR 0 11
31470: PPUSH
31471: LD_VAR 0 12
31475: PPUSH
31476: CALL_OW 273
31480: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31481: LD_VAR 0 9
31485: PPUSH
31486: LD_VAR 0 10
31490: PPUSH
31491: CALL_OW 488
31495: IFFALSE 31519
31497: PUSH
31498: LD_VAR 0 9
31502: PUSH
31503: LD_VAR 0 10
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_VAR 0 7
31516: IN
31517: NOT
31518: AND
31519: IFFALSE 31538
31521: PUSH
31522: LD_VAR 0 9
31526: PPUSH
31527: LD_VAR 0 10
31531: PPUSH
31532: CALL_OW 458
31536: NOT
31537: AND
31538: IFFALSE 31580
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31540: LD_ADDR_VAR 0 7
31544: PUSH
31545: LD_VAR 0 7
31549: PPUSH
31550: LD_VAR 0 7
31554: PUSH
31555: LD_INT 1
31557: PLUS
31558: PPUSH
31559: LD_VAR 0 9
31563: PUSH
31564: LD_VAR 0 10
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PPUSH
31573: CALL_OW 1
31577: ST_TO_ADDR
31578: GO 31594
// i := i - 1 ;
31580: LD_ADDR_VAR 0 5
31584: PUSH
31585: LD_VAR 0 5
31589: PUSH
31590: LD_INT 1
31592: MINUS
31593: ST_TO_ADDR
// end ;
31594: GO 31396
31596: POP
31597: POP
// for i in tmp do
31598: LD_ADDR_VAR 0 5
31602: PUSH
31603: LD_VAR 0 7
31607: PUSH
31608: FOR_IN
31609: IFFALSE 31647
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31611: LD_VAR 0 1
31615: PPUSH
31616: LD_VAR 0 5
31620: PUSH
31621: LD_INT 1
31623: ARRAY
31624: PPUSH
31625: LD_VAR 0 5
31629: PUSH
31630: LD_INT 2
31632: ARRAY
31633: PPUSH
31634: CALL 30640 0 3
31638: NOT
31639: IFFALSE 31645
// exit ;
31641: POP
31642: POP
31643: GO 31649
31645: GO 31608
31647: POP
31648: POP
// end ;
31649: LD_VAR 0 4
31653: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
// if GetClass ( unit ) <> class_sniper then
31665: LD_VAR 0 1
31669: PPUSH
31670: CALL_OW 257
31674: PUSH
31675: LD_INT 5
31677: NONEQUAL
31678: IFFALSE 31682
// exit ;
31680: GO 32152
// dist := 8 ;
31682: LD_ADDR_VAR 0 5
31686: PUSH
31687: LD_INT 8
31689: ST_TO_ADDR
// viewRange := 12 ;
31690: LD_ADDR_VAR 0 8
31694: PUSH
31695: LD_INT 12
31697: ST_TO_ADDR
// side := GetSide ( unit ) ;
31698: LD_ADDR_VAR 0 6
31702: PUSH
31703: LD_VAR 0 1
31707: PPUSH
31708: CALL_OW 255
31712: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31713: LD_INT 61
31715: PPUSH
31716: LD_VAR 0 6
31720: PPUSH
31721: CALL_OW 321
31725: PUSH
31726: LD_INT 2
31728: EQUAL
31729: IFFALSE 31739
// viewRange := 16 ;
31731: LD_ADDR_VAR 0 8
31735: PUSH
31736: LD_INT 16
31738: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31739: LD_VAR 0 1
31743: PPUSH
31744: LD_VAR 0 2
31748: PPUSH
31749: LD_VAR 0 3
31753: PPUSH
31754: CALL_OW 297
31758: PUSH
31759: LD_VAR 0 5
31763: GREATER
31764: IFFALSE 31843
// begin ComMoveXY ( unit , x , y ) ;
31766: LD_VAR 0 1
31770: PPUSH
31771: LD_VAR 0 2
31775: PPUSH
31776: LD_VAR 0 3
31780: PPUSH
31781: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31785: LD_INT 35
31787: PPUSH
31788: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31792: LD_VAR 0 1
31796: PPUSH
31797: LD_VAR 0 2
31801: PPUSH
31802: LD_VAR 0 3
31806: PPUSH
31807: CALL 69950 0 3
31811: NOT
31812: IFFALSE 31816
// exit ;
31814: GO 32152
// until GetDistUnitXY ( unit , x , y ) < dist ;
31816: LD_VAR 0 1
31820: PPUSH
31821: LD_VAR 0 2
31825: PPUSH
31826: LD_VAR 0 3
31830: PPUSH
31831: CALL_OW 297
31835: PUSH
31836: LD_VAR 0 5
31840: LESS
31841: IFFALSE 31785
// end ; ComTurnXY ( unit , x , y ) ;
31843: LD_VAR 0 1
31847: PPUSH
31848: LD_VAR 0 2
31852: PPUSH
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 118
// repeat if Multiplayer then
31862: LD_OWVAR 4
31866: IFFALSE 31877
// wait ( 35 ) else
31868: LD_INT 35
31870: PPUSH
31871: CALL_OW 67
31875: GO 31884
// wait ( 5 ) ;
31877: LD_INT 5
31879: PPUSH
31880: CALL_OW 67
// _d := GetDir ( unit ) ;
31884: LD_ADDR_VAR 0 11
31888: PUSH
31889: LD_VAR 0 1
31893: PPUSH
31894: CALL_OW 254
31898: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
31899: LD_ADDR_VAR 0 7
31903: PUSH
31904: LD_VAR 0 1
31908: PPUSH
31909: CALL_OW 250
31913: PPUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL_OW 251
31923: PPUSH
31924: LD_VAR 0 2
31928: PPUSH
31929: LD_VAR 0 3
31933: PPUSH
31934: CALL 72586 0 4
31938: ST_TO_ADDR
// until dir = _d ;
31939: LD_VAR 0 7
31943: PUSH
31944: LD_VAR 0 11
31948: EQUAL
31949: IFFALSE 31862
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
31951: LD_ADDR_VAR 0 9
31955: PUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 250
31965: PPUSH
31966: LD_VAR 0 7
31970: PPUSH
31971: LD_VAR 0 5
31975: PPUSH
31976: CALL_OW 272
31980: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
31981: LD_ADDR_VAR 0 10
31985: PUSH
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 251
31995: PPUSH
31996: LD_VAR 0 7
32000: PPUSH
32001: LD_VAR 0 5
32005: PPUSH
32006: CALL_OW 273
32010: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32011: LD_VAR 0 9
32015: PPUSH
32016: LD_VAR 0 10
32020: PPUSH
32021: CALL_OW 488
32025: NOT
32026: IFFALSE 32030
// exit ;
32028: GO 32152
// ComAnimCustom ( unit , 1 ) ;
32030: LD_VAR 0 1
32034: PPUSH
32035: LD_INT 1
32037: PPUSH
32038: CALL_OW 592
// p := 0 ;
32042: LD_ADDR_VAR 0 12
32046: PUSH
32047: LD_INT 0
32049: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32050: LD_VAR 0 9
32054: PPUSH
32055: LD_VAR 0 10
32059: PPUSH
32060: LD_VAR 0 6
32064: PPUSH
32065: LD_VAR 0 8
32069: PPUSH
32070: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32074: LD_INT 35
32076: PPUSH
32077: CALL_OW 67
// p := Inc ( p ) ;
32081: LD_ADDR_VAR 0 12
32085: PUSH
32086: LD_VAR 0 12
32090: PPUSH
32091: CALL 72542 0 1
32095: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32096: LD_VAR 0 12
32100: PUSH
32101: LD_INT 3
32103: EQUAL
32104: IFTRUE 32118
32106: PUSH
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL_OW 302
32116: NOT
32117: OR
32118: IFTRUE 32131
32120: PUSH
32121: LD_VAR 0 1
32125: PPUSH
32126: CALL_OW 301
32130: OR
32131: IFFALSE 32074
// RemoveSeeing ( _x , _y , side ) ;
32133: LD_VAR 0 9
32137: PPUSH
32138: LD_VAR 0 10
32142: PPUSH
32143: LD_VAR 0 6
32147: PPUSH
32148: CALL_OW 331
// end ;
32152: LD_VAR 0 4
32156: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32157: LD_INT 0
32159: PPUSH
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
32164: PPUSH
32165: PPUSH
32166: PPUSH
32167: PPUSH
32168: PPUSH
32169: PPUSH
// if not unit then
32170: LD_VAR 0 1
32174: NOT
32175: IFFALSE 32179
// exit ;
32177: GO 32450
// side := GetSide ( unit ) ;
32179: LD_ADDR_VAR 0 3
32183: PUSH
32184: LD_VAR 0 1
32188: PPUSH
32189: CALL_OW 255
32193: ST_TO_ADDR
// x := GetX ( unit ) ;
32194: LD_ADDR_VAR 0 5
32198: PUSH
32199: LD_VAR 0 1
32203: PPUSH
32204: CALL_OW 250
32208: ST_TO_ADDR
// y := GetY ( unit ) ;
32209: LD_ADDR_VAR 0 6
32213: PUSH
32214: LD_VAR 0 1
32218: PPUSH
32219: CALL_OW 251
32223: ST_TO_ADDR
// r := 8 ;
32224: LD_ADDR_VAR 0 4
32228: PUSH
32229: LD_INT 8
32231: ST_TO_ADDR
// if x - r < 0 then
32232: LD_VAR 0 5
32236: PUSH
32237: LD_VAR 0 4
32241: MINUS
32242: PUSH
32243: LD_INT 0
32245: LESS
32246: IFFALSE 32258
// min_x := 0 else
32248: LD_ADDR_VAR 0 7
32252: PUSH
32253: LD_INT 0
32255: ST_TO_ADDR
32256: GO 32274
// min_x := x - r ;
32258: LD_ADDR_VAR 0 7
32262: PUSH
32263: LD_VAR 0 5
32267: PUSH
32268: LD_VAR 0 4
32272: MINUS
32273: ST_TO_ADDR
// if y - r < 0 then
32274: LD_VAR 0 6
32278: PUSH
32279: LD_VAR 0 4
32283: MINUS
32284: PUSH
32285: LD_INT 0
32287: LESS
32288: IFFALSE 32300
// min_y := 0 else
32290: LD_ADDR_VAR 0 8
32294: PUSH
32295: LD_INT 0
32297: ST_TO_ADDR
32298: GO 32316
// min_y := y - r ;
32300: LD_ADDR_VAR 0 8
32304: PUSH
32305: LD_VAR 0 6
32309: PUSH
32310: LD_VAR 0 4
32314: MINUS
32315: ST_TO_ADDR
// max_x := x + r ;
32316: LD_ADDR_VAR 0 9
32320: PUSH
32321: LD_VAR 0 5
32325: PUSH
32326: LD_VAR 0 4
32330: PLUS
32331: ST_TO_ADDR
// max_y := y + r ;
32332: LD_ADDR_VAR 0 10
32336: PUSH
32337: LD_VAR 0 6
32341: PUSH
32342: LD_VAR 0 4
32346: PLUS
32347: ST_TO_ADDR
// for _x = min_x to max_x do
32348: LD_ADDR_VAR 0 11
32352: PUSH
32353: DOUBLE
32354: LD_VAR 0 7
32358: DEC
32359: ST_TO_ADDR
32360: LD_VAR 0 9
32364: PUSH
32365: FOR_TO
32366: IFFALSE 32448
// for _y = min_y to max_y do
32368: LD_ADDR_VAR 0 12
32372: PUSH
32373: DOUBLE
32374: LD_VAR 0 8
32378: DEC
32379: ST_TO_ADDR
32380: LD_VAR 0 10
32384: PUSH
32385: FOR_TO
32386: IFFALSE 32444
// begin if not ValidHex ( _x , _y ) then
32388: LD_VAR 0 11
32392: PPUSH
32393: LD_VAR 0 12
32397: PPUSH
32398: CALL_OW 488
32402: NOT
32403: IFFALSE 32407
// continue ;
32405: GO 32385
// if MineAtPos ( _x , _y ) then
32407: LD_VAR 0 11
32411: PPUSH
32412: LD_VAR 0 12
32416: PPUSH
32417: CALL_OW 458
32421: IFFALSE 32442
// ViewMineAtPos ( _x , _y , side ) ;
32423: LD_VAR 0 11
32427: PPUSH
32428: LD_VAR 0 12
32432: PPUSH
32433: LD_VAR 0 3
32437: PPUSH
32438: CALL_OW 457
// end ;
32442: GO 32385
32444: POP
32445: POP
32446: GO 32365
32448: POP
32449: POP
// end ;
32450: LD_VAR 0 2
32454: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
32455: LD_INT 0
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
// if not units then
32464: LD_VAR 0 1
32468: NOT
32469: IFFALSE 32473
// exit ;
32471: GO 32937
// scaners := [ ] ;
32473: LD_ADDR_VAR 0 6
32477: PUSH
32478: EMPTY
32479: ST_TO_ADDR
// for i in units do
32480: LD_ADDR_VAR 0 3
32484: PUSH
32485: LD_VAR 0 1
32489: PUSH
32490: FOR_IN
32491: IFFALSE 32648
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
32493: LD_VAR 0 3
32497: PPUSH
32498: CALL_OW 264
32502: PUSH
32503: LD_INT 11
32505: NONEQUAL
32506: IFTRUE 32520
32508: PUSH
32509: LD_VAR 0 3
32513: PPUSH
32514: CALL_OW 302
32518: NOT
32519: OR
32520: IFTRUE 32537
32522: PUSH
32523: LD_VAR 0 3
32527: PPUSH
32528: CALL_OW 110
32532: PUSH
32533: LD_INT 502
32535: EQUAL
32536: OR
32537: IFFALSE 32541
// continue ;
32539: GO 32490
// ComStop ( i ) ;
32541: LD_VAR 0 3
32545: PPUSH
32546: CALL_OW 141
// x := GetX ( i ) ;
32550: LD_ADDR_VAR 0 4
32554: PUSH
32555: LD_VAR 0 3
32559: PPUSH
32560: CALL_OW 250
32564: ST_TO_ADDR
// y := GetY ( i ) ;
32565: LD_ADDR_VAR 0 5
32569: PUSH
32570: LD_VAR 0 3
32574: PPUSH
32575: CALL_OW 251
32579: ST_TO_ADDR
// if GetSide ( i ) = your_side then
32580: LD_VAR 0 3
32584: PPUSH
32585: CALL_OW 255
32589: PUSH
32590: LD_OWVAR 2
32594: EQUAL
32595: IFFALSE 32614
// PlaySoundXY ( x , y , mineDetector ) ;
32597: LD_VAR 0 4
32601: PPUSH
32602: LD_VAR 0 5
32606: PPUSH
32607: LD_STRING mineDetector
32609: PPUSH
32610: CALL_OW 366
// scaners := Join ( scaners , i ) ;
32614: LD_ADDR_VAR 0 6
32618: PUSH
32619: LD_VAR 0 6
32623: PPUSH
32624: LD_VAR 0 3
32628: PPUSH
32629: CALL 71169 0 2
32633: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
32634: LD_VAR 0 3
32638: PPUSH
32639: LD_INT 502
32641: PPUSH
32642: CALL_OW 109
// end ;
32646: GO 32490
32648: POP
32649: POP
// if not scaners then
32650: LD_VAR 0 6
32654: NOT
32655: IFFALSE 32659
// exit ;
32657: GO 32937
// wait ( 3 ) ;
32659: LD_INT 3
32661: PPUSH
32662: CALL_OW 67
// timer := 6 ;
32666: LD_ADDR_VAR 0 7
32670: PUSH
32671: LD_INT 6
32673: ST_TO_ADDR
// repeat for i in scaners do
32674: LD_ADDR_VAR 0 3
32678: PUSH
32679: LD_VAR 0 6
32683: PUSH
32684: FOR_IN
32685: IFFALSE 32835
// begin side := GetSide ( i ) ;
32687: LD_ADDR_VAR 0 8
32691: PUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 255
32701: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
32702: LD_VAR 0 3
32706: PPUSH
32707: CALL_OW 302
32711: NOT
32712: IFTRUE 32725
32714: PUSH
32715: LD_VAR 0 3
32719: PPUSH
32720: CALL_OW 314
32724: OR
32725: IFTRUE 32756
32727: PUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: CALL_OW 263
32737: PUSH
32738: LD_INT 1
32740: EQUAL
32741: IFFALSE 32755
32743: PUSH
32744: LD_VAR 0 3
32748: PPUSH
32749: CALL_OW 311
32753: NOT
32754: AND
32755: OR
32756: IFFALSE 32800
// begin SetUnitDisplayNumber ( i , 0 ) ;
32758: LD_VAR 0 3
32762: PPUSH
32763: LD_INT 0
32765: PPUSH
32766: CALL_OW 505
// SetTag ( i , 0 ) ;
32770: LD_VAR 0 3
32774: PPUSH
32775: LD_INT 0
32777: PPUSH
32778: CALL_OW 109
// scaners := scaners diff i ;
32782: LD_ADDR_VAR 0 6
32786: PUSH
32787: LD_VAR 0 6
32791: PUSH
32792: LD_VAR 0 3
32796: DIFF
32797: ST_TO_ADDR
// continue ;
32798: GO 32684
// end ; if side in [ your_side , 9 ] then
32800: LD_VAR 0 8
32804: PUSH
32805: LD_OWVAR 2
32809: PUSH
32810: LD_INT 9
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: IN
32817: IFFALSE 32833
// SetUnitDisplayNumber ( i , timer ) ;
32819: LD_VAR 0 3
32823: PPUSH
32824: LD_VAR 0 7
32828: PPUSH
32829: CALL_OW 505
// end ;
32833: GO 32684
32835: POP
32836: POP
// if not scaners then
32837: LD_VAR 0 6
32841: NOT
32842: IFFALSE 32846
// exit ;
32844: GO 32937
// timer := Dec ( timer ) ;
32846: LD_ADDR_VAR 0 7
32850: PUSH
32851: LD_VAR 0 7
32855: PPUSH
32856: CALL 72564 0 1
32860: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32861: LD_INT 35
32863: PPUSH
32864: CALL_OW 67
// until timer = 0 ;
32868: LD_VAR 0 7
32872: PUSH
32873: LD_INT 0
32875: EQUAL
32876: IFFALSE 32674
// if not scaners then
32878: LD_VAR 0 6
32882: NOT
32883: IFFALSE 32887
// exit ;
32885: GO 32937
// for i in scaners do
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_VAR 0 6
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32935
// begin SetUnitDisplayNumber ( i , 0 ) ;
32900: LD_VAR 0 3
32904: PPUSH
32905: LD_INT 0
32907: PPUSH
32908: CALL_OW 505
// SetTag ( i , 0 ) ;
32912: LD_VAR 0 3
32916: PPUSH
32917: LD_INT 0
32919: PPUSH
32920: CALL_OW 109
// RevealDetectorMine ( i ) ;
32924: LD_VAR 0 3
32928: PPUSH
32929: CALL 32157 0 1
// end ;
32933: GO 32897
32935: POP
32936: POP
// end ;
32937: LD_VAR 0 2
32941: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
32942: LD_INT 0
32944: PPUSH
// if p1 = mine_detector_mode then
32945: LD_VAR 0 2
32949: PUSH
32950: LD_INT 103
32952: EQUAL
32953: IFFALSE 32964
// DetectMine ( units ) ;
32955: LD_VAR 0 1
32959: PPUSH
32960: CALL 32455 0 1
// end ; end_of_file
32964: LD_VAR 0 7
32968: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32969: LD_INT 0
32971: PPUSH
32972: PPUSH
// if exist_mode then
32973: LD_VAR 0 2
32977: IFFALSE 33023
// begin unit := CreateCharacter ( prefix & ident ) ;
32979: LD_ADDR_VAR 0 5
32983: PUSH
32984: LD_VAR 0 3
32988: PUSH
32989: LD_VAR 0 1
32993: STR
32994: PPUSH
32995: CALL_OW 34
32999: ST_TO_ADDR
// if unit then
33000: LD_VAR 0 5
33004: IFFALSE 33021
// DeleteCharacters ( prefix & ident ) ;
33006: LD_VAR 0 3
33010: PUSH
33011: LD_VAR 0 1
33015: STR
33016: PPUSH
33017: CALL_OW 40
// end else
33021: GO 33038
// unit := NewCharacter ( ident ) ;
33023: LD_ADDR_VAR 0 5
33027: PUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 25
33037: ST_TO_ADDR
// result := unit ;
33038: LD_ADDR_VAR 0 4
33042: PUSH
33043: LD_VAR 0 5
33047: ST_TO_ADDR
// end ;
33048: LD_VAR 0 4
33052: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33053: LD_INT 0
33055: PPUSH
33056: PPUSH
// if exist_mode then
33057: LD_VAR 0 2
33061: IFFALSE 33086
// unit := CreateCharacter ( prefix & ident ) else
33063: LD_ADDR_VAR 0 5
33067: PUSH
33068: LD_VAR 0 3
33072: PUSH
33073: LD_VAR 0 1
33077: STR
33078: PPUSH
33079: CALL_OW 34
33083: ST_TO_ADDR
33084: GO 33101
// unit := NewCharacter ( ident ) ;
33086: LD_ADDR_VAR 0 5
33090: PUSH
33091: LD_VAR 0 1
33095: PPUSH
33096: CALL_OW 25
33100: ST_TO_ADDR
// result := unit ;
33101: LD_ADDR_VAR 0 4
33105: PUSH
33106: LD_VAR 0 5
33110: ST_TO_ADDR
// end ;
33111: LD_VAR 0 4
33115: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33116: LD_INT 0
33118: PPUSH
33119: PPUSH
// if not side or not nation then
33120: LD_VAR 0 1
33124: NOT
33125: IFTRUE 33134
33127: PUSH
33128: LD_VAR 0 2
33132: NOT
33133: OR
33134: IFFALSE 33138
// exit ;
33136: GO 33932
// case nation of nation_american :
33138: LD_VAR 0 2
33142: PUSH
33143: LD_INT 1
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33373
33151: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33152: LD_ADDR_VAR 0 4
33156: PUSH
33157: LD_INT 35
33159: PUSH
33160: LD_INT 45
33162: PUSH
33163: LD_INT 46
33165: PUSH
33166: LD_INT 47
33168: PUSH
33169: LD_INT 82
33171: PUSH
33172: LD_INT 83
33174: PUSH
33175: LD_INT 84
33177: PUSH
33178: LD_INT 85
33180: PUSH
33181: LD_INT 86
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: LD_INT 6
33192: PUSH
33193: LD_INT 15
33195: PUSH
33196: LD_INT 16
33198: PUSH
33199: LD_INT 7
33201: PUSH
33202: LD_INT 12
33204: PUSH
33205: LD_INT 13
33207: PUSH
33208: LD_INT 10
33210: PUSH
33211: LD_INT 14
33213: PUSH
33214: LD_INT 20
33216: PUSH
33217: LD_INT 21
33219: PUSH
33220: LD_INT 22
33222: PUSH
33223: LD_INT 25
33225: PUSH
33226: LD_INT 32
33228: PUSH
33229: LD_INT 27
33231: PUSH
33232: LD_INT 36
33234: PUSH
33235: LD_INT 69
33237: PUSH
33238: LD_INT 39
33240: PUSH
33241: LD_INT 34
33243: PUSH
33244: LD_INT 40
33246: PUSH
33247: LD_INT 48
33249: PUSH
33250: LD_INT 49
33252: PUSH
33253: LD_INT 50
33255: PUSH
33256: LD_INT 51
33258: PUSH
33259: LD_INT 52
33261: PUSH
33262: LD_INT 53
33264: PUSH
33265: LD_INT 54
33267: PUSH
33268: LD_INT 55
33270: PUSH
33271: LD_INT 56
33273: PUSH
33274: LD_INT 57
33276: PUSH
33277: LD_INT 58
33279: PUSH
33280: LD_INT 59
33282: PUSH
33283: LD_INT 60
33285: PUSH
33286: LD_INT 61
33288: PUSH
33289: LD_INT 62
33291: PUSH
33292: LD_INT 80
33294: PUSH
33295: LD_INT 82
33297: PUSH
33298: LD_INT 83
33300: PUSH
33301: LD_INT 84
33303: PUSH
33304: LD_INT 85
33306: PUSH
33307: LD_INT 86
33309: PUSH
33310: LD_INT 90
33312: PUSH
33313: LD_INT 93
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: ST_TO_ADDR
33371: GO 33854
33373: LD_INT 2
33375: DOUBLE
33376: EQUAL
33377: IFTRUE 33381
33379: GO 33615
33381: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33382: LD_ADDR_VAR 0 4
33386: PUSH
33387: LD_INT 35
33389: PUSH
33390: LD_INT 45
33392: PUSH
33393: LD_INT 46
33395: PUSH
33396: LD_INT 47
33398: PUSH
33399: LD_INT 82
33401: PUSH
33402: LD_INT 83
33404: PUSH
33405: LD_INT 84
33407: PUSH
33408: LD_INT 85
33410: PUSH
33411: LD_INT 87
33413: PUSH
33414: LD_INT 70
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: LD_INT 11
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: LD_INT 4
33428: PUSH
33429: LD_INT 5
33431: PUSH
33432: LD_INT 6
33434: PUSH
33435: LD_INT 15
33437: PUSH
33438: LD_INT 18
33440: PUSH
33441: LD_INT 7
33443: PUSH
33444: LD_INT 17
33446: PUSH
33447: LD_INT 8
33449: PUSH
33450: LD_INT 20
33452: PUSH
33453: LD_INT 21
33455: PUSH
33456: LD_INT 22
33458: PUSH
33459: LD_INT 72
33461: PUSH
33462: LD_INT 26
33464: PUSH
33465: LD_INT 69
33467: PUSH
33468: LD_INT 39
33470: PUSH
33471: LD_INT 40
33473: PUSH
33474: LD_INT 41
33476: PUSH
33477: LD_INT 42
33479: PUSH
33480: LD_INT 43
33482: PUSH
33483: LD_INT 48
33485: PUSH
33486: LD_INT 49
33488: PUSH
33489: LD_INT 50
33491: PUSH
33492: LD_INT 51
33494: PUSH
33495: LD_INT 52
33497: PUSH
33498: LD_INT 53
33500: PUSH
33501: LD_INT 54
33503: PUSH
33504: LD_INT 55
33506: PUSH
33507: LD_INT 56
33509: PUSH
33510: LD_INT 60
33512: PUSH
33513: LD_INT 61
33515: PUSH
33516: LD_INT 62
33518: PUSH
33519: LD_INT 66
33521: PUSH
33522: LD_INT 67
33524: PUSH
33525: LD_INT 68
33527: PUSH
33528: LD_INT 81
33530: PUSH
33531: LD_INT 82
33533: PUSH
33534: LD_INT 83
33536: PUSH
33537: LD_INT 84
33539: PUSH
33540: LD_INT 85
33542: PUSH
33543: LD_INT 87
33545: PUSH
33546: LD_INT 88
33548: PUSH
33549: LD_INT 92
33551: PUSH
33552: LD_INT 94
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
33613: GO 33854
33615: LD_INT 3
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33853
33623: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
33624: LD_ADDR_VAR 0 4
33628: PUSH
33629: LD_INT 46
33631: PUSH
33632: LD_INT 47
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: LD_INT 82
33643: PUSH
33644: LD_INT 83
33646: PUSH
33647: LD_INT 84
33649: PUSH
33650: LD_INT 85
33652: PUSH
33653: LD_INT 86
33655: PUSH
33656: LD_INT 11
33658: PUSH
33659: LD_INT 9
33661: PUSH
33662: LD_INT 20
33664: PUSH
33665: LD_INT 19
33667: PUSH
33668: LD_INT 21
33670: PUSH
33671: LD_INT 24
33673: PUSH
33674: LD_INT 22
33676: PUSH
33677: LD_INT 25
33679: PUSH
33680: LD_INT 28
33682: PUSH
33683: LD_INT 29
33685: PUSH
33686: LD_INT 30
33688: PUSH
33689: LD_INT 31
33691: PUSH
33692: LD_INT 37
33694: PUSH
33695: LD_INT 38
33697: PUSH
33698: LD_INT 32
33700: PUSH
33701: LD_INT 27
33703: PUSH
33704: LD_INT 33
33706: PUSH
33707: LD_INT 69
33709: PUSH
33710: LD_INT 39
33712: PUSH
33713: LD_INT 34
33715: PUSH
33716: LD_INT 40
33718: PUSH
33719: LD_INT 71
33721: PUSH
33722: LD_INT 23
33724: PUSH
33725: LD_INT 44
33727: PUSH
33728: LD_INT 48
33730: PUSH
33731: LD_INT 49
33733: PUSH
33734: LD_INT 50
33736: PUSH
33737: LD_INT 51
33739: PUSH
33740: LD_INT 52
33742: PUSH
33743: LD_INT 53
33745: PUSH
33746: LD_INT 54
33748: PUSH
33749: LD_INT 55
33751: PUSH
33752: LD_INT 56
33754: PUSH
33755: LD_INT 57
33757: PUSH
33758: LD_INT 58
33760: PUSH
33761: LD_INT 59
33763: PUSH
33764: LD_INT 63
33766: PUSH
33767: LD_INT 64
33769: PUSH
33770: LD_INT 65
33772: PUSH
33773: LD_INT 82
33775: PUSH
33776: LD_INT 83
33778: PUSH
33779: LD_INT 84
33781: PUSH
33782: LD_INT 85
33784: PUSH
33785: LD_INT 86
33787: PUSH
33788: LD_INT 89
33790: PUSH
33791: LD_INT 91
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
33851: GO 33854
33853: POP
// if state > - 1 and state < 3 then
33854: LD_VAR 0 3
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: GREATER
33863: IFFALSE 33875
33865: PUSH
33866: LD_VAR 0 3
33870: PUSH
33871: LD_INT 3
33873: LESS
33874: AND
33875: IFFALSE 33932
// for i in result do
33877: LD_ADDR_VAR 0 5
33881: PUSH
33882: LD_VAR 0 4
33886: PUSH
33887: FOR_IN
33888: IFFALSE 33930
// if GetTech ( i , side ) <> state then
33890: LD_VAR 0 5
33894: PPUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 321
33904: PUSH
33905: LD_VAR 0 3
33909: NONEQUAL
33910: IFFALSE 33928
// result := result diff i ;
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: LD_VAR 0 4
33921: PUSH
33922: LD_VAR 0 5
33926: DIFF
33927: ST_TO_ADDR
33928: GO 33887
33930: POP
33931: POP
// end ;
33932: LD_VAR 0 4
33936: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
33941: PPUSH
// result := true ;
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_INT 1
33949: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33950: LD_ADDR_VAR 0 5
33954: PUSH
33955: LD_VAR 0 2
33959: PPUSH
33960: CALL_OW 480
33964: ST_TO_ADDR
// if not tmp then
33965: LD_VAR 0 5
33969: NOT
33970: IFFALSE 33974
// exit ;
33972: GO 34023
// for i in tmp do
33974: LD_ADDR_VAR 0 4
33978: PUSH
33979: LD_VAR 0 5
33983: PUSH
33984: FOR_IN
33985: IFFALSE 34021
// if GetTech ( i , side ) <> state_researched then
33987: LD_VAR 0 4
33991: PPUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 321
34001: PUSH
34002: LD_INT 2
34004: NONEQUAL
34005: IFFALSE 34019
// begin result := false ;
34007: LD_ADDR_VAR 0 3
34011: PUSH
34012: LD_INT 0
34014: ST_TO_ADDR
// exit ;
34015: POP
34016: POP
34017: GO 34023
// end ;
34019: GO 33984
34021: POP
34022: POP
// end ;
34023: LD_VAR 0 3
34027: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34028: LD_INT 0
34030: PPUSH
34031: PPUSH
34032: PPUSH
34033: PPUSH
34034: PPUSH
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34043: LD_VAR 0 1
34047: NOT
34048: IFTRUE 34065
34050: PUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 257
34060: PUSH
34061: LD_INT 9
34063: NONEQUAL
34064: OR
34065: IFFALSE 34069
// exit ;
34067: GO 34648
// side := GetSide ( unit ) ;
34069: LD_ADDR_VAR 0 9
34073: PUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: CALL_OW 255
34083: ST_TO_ADDR
// tech_space := tech_spacanom ;
34084: LD_ADDR_VAR 0 12
34088: PUSH
34089: LD_INT 29
34091: ST_TO_ADDR
// tech_time := tech_taurad ;
34092: LD_ADDR_VAR 0 13
34096: PUSH
34097: LD_INT 28
34099: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34100: LD_ADDR_VAR 0 11
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 310
34114: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34115: LD_VAR 0 11
34119: PPUSH
34120: CALL_OW 247
34124: PUSH
34125: LD_INT 2
34127: EQUAL
34128: IFFALSE 34132
// exit ;
34130: GO 34648
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34132: LD_ADDR_VAR 0 8
34136: PUSH
34137: LD_INT 81
34139: PUSH
34140: LD_VAR 0 9
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 21
34154: PUSH
34155: LD_INT 3
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PPUSH
34170: CALL_OW 69
34174: ST_TO_ADDR
// if not tmp then
34175: LD_VAR 0 8
34179: NOT
34180: IFFALSE 34184
// exit ;
34182: GO 34648
// if in_unit then
34184: LD_VAR 0 11
34188: IFFALSE 34212
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34190: LD_ADDR_VAR 0 10
34194: PUSH
34195: LD_VAR 0 8
34199: PPUSH
34200: LD_VAR 0 11
34204: PPUSH
34205: CALL_OW 74
34209: ST_TO_ADDR
34210: GO 34232
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34212: LD_ADDR_VAR 0 10
34216: PUSH
34217: LD_VAR 0 8
34221: PPUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 74
34231: ST_TO_ADDR
// if not enemy then
34232: LD_VAR 0 10
34236: NOT
34237: IFFALSE 34241
// exit ;
34239: GO 34648
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34241: LD_VAR 0 11
34245: IFFALSE 34267
34247: PUSH
34248: LD_VAR 0 11
34252: PPUSH
34253: LD_VAR 0 10
34257: PPUSH
34258: CALL_OW 296
34262: PUSH
34263: LD_INT 13
34265: GREATER
34266: AND
34267: IFTRUE 34289
34269: PUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: LD_VAR 0 10
34279: PPUSH
34280: CALL_OW 296
34284: PUSH
34285: LD_INT 12
34287: GREATER
34288: OR
34289: IFFALSE 34293
// exit ;
34291: GO 34648
// missile := [ 1 ] ;
34293: LD_ADDR_VAR 0 14
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34304: LD_VAR 0 9
34308: PPUSH
34309: LD_VAR 0 12
34313: PPUSH
34314: CALL_OW 325
34318: IFFALSE 34347
// missile := Replace ( missile , missile + 1 , 2 ) ;
34320: LD_ADDR_VAR 0 14
34324: PUSH
34325: LD_VAR 0 14
34329: PPUSH
34330: LD_VAR 0 14
34334: PUSH
34335: LD_INT 1
34337: PLUS
34338: PPUSH
34339: LD_INT 2
34341: PPUSH
34342: CALL_OW 1
34346: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34347: LD_VAR 0 9
34351: PPUSH
34352: LD_VAR 0 13
34356: PPUSH
34357: CALL_OW 325
34361: IFFALSE 34385
34363: PUSH
34364: LD_VAR 0 10
34368: PPUSH
34369: CALL_OW 255
34373: PPUSH
34374: LD_VAR 0 13
34378: PPUSH
34379: CALL_OW 325
34383: NOT
34384: AND
34385: IFFALSE 34414
// missile := Replace ( missile , missile + 1 , 3 ) ;
34387: LD_ADDR_VAR 0 14
34391: PUSH
34392: LD_VAR 0 14
34396: PPUSH
34397: LD_VAR 0 14
34401: PUSH
34402: LD_INT 1
34404: PLUS
34405: PPUSH
34406: LD_INT 3
34408: PPUSH
34409: CALL_OW 1
34413: ST_TO_ADDR
// if missile < 2 then
34414: LD_VAR 0 14
34418: PUSH
34419: LD_INT 2
34421: LESS
34422: IFFALSE 34426
// exit ;
34424: GO 34648
// x := GetX ( enemy ) ;
34426: LD_ADDR_VAR 0 4
34430: PUSH
34431: LD_VAR 0 10
34435: PPUSH
34436: CALL_OW 250
34440: ST_TO_ADDR
// y := GetY ( enemy ) ;
34441: LD_ADDR_VAR 0 5
34445: PUSH
34446: LD_VAR 0 10
34450: PPUSH
34451: CALL_OW 251
34455: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34456: LD_ADDR_VAR 0 6
34460: PUSH
34461: LD_VAR 0 4
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PPUSH
34470: LD_INT 1
34472: PPUSH
34473: CALL_OW 12
34477: PLUS
34478: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34479: LD_ADDR_VAR 0 7
34483: PUSH
34484: LD_VAR 0 5
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PPUSH
34493: LD_INT 1
34495: PPUSH
34496: CALL_OW 12
34500: PLUS
34501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34502: LD_VAR 0 6
34506: PPUSH
34507: LD_VAR 0 7
34511: PPUSH
34512: CALL_OW 488
34516: NOT
34517: IFFALSE 34539
// begin _x := x ;
34519: LD_ADDR_VAR 0 6
34523: PUSH
34524: LD_VAR 0 4
34528: ST_TO_ADDR
// _y := y ;
34529: LD_ADDR_VAR 0 7
34533: PUSH
34534: LD_VAR 0 5
34538: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: LD_INT 1
34546: PPUSH
34547: LD_VAR 0 14
34551: PPUSH
34552: CALL_OW 12
34556: ST_TO_ADDR
// case i of 1 :
34557: LD_VAR 0 3
34561: PUSH
34562: LD_INT 1
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34587
34570: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34571: LD_VAR 0 1
34575: PPUSH
34576: LD_VAR 0 10
34580: PPUSH
34581: CALL_OW 115
34585: GO 34648
34587: LD_INT 2
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34617
34595: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34596: LD_VAR 0 1
34600: PPUSH
34601: LD_VAR 0 6
34605: PPUSH
34606: LD_VAR 0 7
34610: PPUSH
34611: CALL_OW 153
34615: GO 34648
34617: LD_INT 3
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34647
34625: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34626: LD_VAR 0 1
34630: PPUSH
34631: LD_VAR 0 6
34635: PPUSH
34636: LD_VAR 0 7
34640: PPUSH
34641: CALL_OW 154
34645: GO 34648
34647: POP
// end ;
34648: LD_VAR 0 2
34652: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34653: LD_INT 0
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
// if not unit or not building then
34661: LD_VAR 0 1
34665: NOT
34666: IFTRUE 34675
34668: PUSH
34669: LD_VAR 0 2
34673: NOT
34674: OR
34675: IFFALSE 34679
// exit ;
34677: GO 34837
// x := GetX ( building ) ;
34679: LD_ADDR_VAR 0 5
34683: PUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: CALL_OW 250
34693: ST_TO_ADDR
// y := GetY ( building ) ;
34694: LD_ADDR_VAR 0 6
34698: PUSH
34699: LD_VAR 0 2
34703: PPUSH
34704: CALL_OW 251
34708: ST_TO_ADDR
// for i := 0 to 5 do
34709: LD_ADDR_VAR 0 4
34713: PUSH
34714: DOUBLE
34715: LD_INT 0
34717: DEC
34718: ST_TO_ADDR
34719: LD_INT 5
34721: PUSH
34722: FOR_TO
34723: IFFALSE 34835
// begin _x := ShiftX ( x , i , 3 ) ;
34725: LD_ADDR_VAR 0 7
34729: PUSH
34730: LD_VAR 0 5
34734: PPUSH
34735: LD_VAR 0 4
34739: PPUSH
34740: LD_INT 3
34742: PPUSH
34743: CALL_OW 272
34747: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34748: LD_ADDR_VAR 0 8
34752: PUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: LD_VAR 0 4
34762: PPUSH
34763: LD_INT 3
34765: PPUSH
34766: CALL_OW 273
34770: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34771: LD_VAR 0 7
34775: PPUSH
34776: LD_VAR 0 8
34780: PPUSH
34781: CALL_OW 488
34785: NOT
34786: IFFALSE 34790
// continue ;
34788: GO 34722
// if HexInfo ( _x , _y ) = 0 then
34790: LD_VAR 0 7
34794: PPUSH
34795: LD_VAR 0 8
34799: PPUSH
34800: CALL_OW 428
34804: PUSH
34805: LD_INT 0
34807: EQUAL
34808: IFFALSE 34833
// begin ComMoveXY ( unit , _x , _y ) ;
34810: LD_VAR 0 1
34814: PPUSH
34815: LD_VAR 0 7
34819: PPUSH
34820: LD_VAR 0 8
34824: PPUSH
34825: CALL_OW 111
// exit ;
34829: POP
34830: POP
34831: GO 34837
// end ; end ;
34833: GO 34722
34835: POP
34836: POP
// end ;
34837: LD_VAR 0 3
34841: RET
// export function ScanBase ( side , base_area ) ; begin
34842: LD_INT 0
34844: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_VAR 0 2
34854: PPUSH
34855: LD_INT 81
34857: PUSH
34858: LD_VAR 0 1
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PPUSH
34867: CALL_OW 70
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 3
34876: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34877: LD_INT 0
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
// result := false ;
34883: LD_ADDR_VAR 0 2
34887: PUSH
34888: LD_INT 0
34890: ST_TO_ADDR
// side := GetSide ( unit ) ;
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 255
34905: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34906: LD_ADDR_VAR 0 4
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 248
34920: ST_TO_ADDR
// case nat of 1 :
34921: LD_VAR 0 4
34925: PUSH
34926: LD_INT 1
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34945
34934: POP
// tech := tech_lassight ; 2 :
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: LD_INT 12
34942: ST_TO_ADDR
34943: GO 34984
34945: LD_INT 2
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34953
34951: GO 34964
34953: POP
// tech := tech_mortar ; 3 :
34954: LD_ADDR_VAR 0 5
34958: PUSH
34959: LD_INT 41
34961: ST_TO_ADDR
34962: GO 34984
34964: LD_INT 3
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34972
34970: GO 34983
34972: POP
// tech := tech_bazooka ; end ;
34973: LD_ADDR_VAR 0 5
34977: PUSH
34978: LD_INT 44
34980: ST_TO_ADDR
34981: GO 34984
34983: POP
// if Researched ( side , tech ) then
34984: LD_VAR 0 3
34988: PPUSH
34989: LD_VAR 0 5
34993: PPUSH
34994: CALL_OW 325
34998: IFFALSE 35025
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35000: LD_ADDR_VAR 0 2
35004: PUSH
35005: LD_INT 5
35007: PUSH
35008: LD_INT 8
35010: PUSH
35011: LD_INT 9
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: PUSH
35019: LD_VAR 0 4
35023: ARRAY
35024: ST_TO_ADDR
// end ;
35025: LD_VAR 0 2
35029: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35030: LD_INT 0
35032: PPUSH
35033: PPUSH
35034: PPUSH
// if not mines then
35035: LD_VAR 0 2
35039: NOT
35040: IFFALSE 35044
// exit ;
35042: GO 35188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35044: LD_ADDR_VAR 0 5
35048: PUSH
35049: LD_INT 81
35051: PUSH
35052: LD_VAR 0 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: LD_INT 21
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PPUSH
35082: CALL_OW 69
35086: ST_TO_ADDR
// for i in mines do
35087: LD_ADDR_VAR 0 4
35091: PUSH
35092: LD_VAR 0 2
35096: PUSH
35097: FOR_IN
35098: IFFALSE 35186
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35100: LD_VAR 0 4
35104: PUSH
35105: LD_INT 1
35107: ARRAY
35108: PPUSH
35109: LD_VAR 0 4
35113: PUSH
35114: LD_INT 2
35116: ARRAY
35117: PPUSH
35118: CALL_OW 458
35122: NOT
35123: IFFALSE 35127
// continue ;
35125: GO 35097
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35127: LD_VAR 0 4
35131: PUSH
35132: LD_INT 1
35134: ARRAY
35135: PPUSH
35136: LD_VAR 0 4
35140: PUSH
35141: LD_INT 2
35143: ARRAY
35144: PPUSH
35145: CALL_OW 428
35149: PUSH
35150: LD_VAR 0 5
35154: IN
35155: IFFALSE 35184
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35157: LD_VAR 0 4
35161: PUSH
35162: LD_INT 1
35164: ARRAY
35165: PPUSH
35166: LD_VAR 0 4
35170: PUSH
35171: LD_INT 2
35173: ARRAY
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 456
// end ;
35184: GO 35097
35186: POP
35187: POP
// end ;
35188: LD_VAR 0 3
35192: RET
// export function Count ( array ) ; begin
35193: LD_INT 0
35195: PPUSH
// result := array + 0 ;
35196: LD_ADDR_VAR 0 2
35200: PUSH
35201: LD_VAR 0 1
35205: PUSH
35206: LD_INT 0
35208: PLUS
35209: ST_TO_ADDR
// end ;
35210: LD_VAR 0 2
35214: RET
// export function IsEmpty ( building ) ; begin
35215: LD_INT 0
35217: PPUSH
// if not building then
35218: LD_VAR 0 1
35222: NOT
35223: IFFALSE 35227
// exit ;
35225: GO 35270
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: LD_VAR 0 1
35236: PUSH
35237: LD_INT 22
35239: PUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: CALL_OW 255
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 58
35256: PUSH
35257: EMPTY
35258: LIST
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PPUSH
35264: CALL_OW 69
35268: IN
35269: ST_TO_ADDR
// end ;
35270: LD_VAR 0 2
35274: RET
// export function IsNotFull ( building ) ; var places ; begin
35275: LD_INT 0
35277: PPUSH
35278: PPUSH
// if not building then
35279: LD_VAR 0 1
35283: NOT
35284: IFFALSE 35288
// exit ;
35286: GO 35316
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35288: LD_ADDR_VAR 0 2
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: LD_INT 3
35300: PUSH
35301: LD_INT 62
35303: PUSH
35304: EMPTY
35305: LIST
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 72
35315: ST_TO_ADDR
// end ;
35316: LD_VAR 0 2
35320: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35321: LD_INT 0
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
// tmp := [ ] ;
35327: LD_ADDR_VAR 0 3
35331: PUSH
35332: EMPTY
35333: ST_TO_ADDR
// list := [ ] ;
35334: LD_ADDR_VAR 0 5
35338: PUSH
35339: EMPTY
35340: ST_TO_ADDR
// for i = 16 to 25 do
35341: LD_ADDR_VAR 0 4
35345: PUSH
35346: DOUBLE
35347: LD_INT 16
35349: DEC
35350: ST_TO_ADDR
35351: LD_INT 25
35353: PUSH
35354: FOR_TO
35355: IFFALSE 35428
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35357: LD_ADDR_VAR 0 3
35361: PUSH
35362: LD_VAR 0 3
35366: PUSH
35367: LD_INT 22
35369: PUSH
35370: LD_VAR 0 1
35374: PPUSH
35375: CALL_OW 255
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 91
35386: PUSH
35387: LD_VAR 0 1
35391: PUSH
35392: LD_INT 6
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 30
35402: PUSH
35403: LD_VAR 0 4
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: PUSH
35417: EMPTY
35418: LIST
35419: PPUSH
35420: CALL_OW 69
35424: ADD
35425: ST_TO_ADDR
35426: GO 35354
35428: POP
35429: POP
// for i = 1 to tmp do
35430: LD_ADDR_VAR 0 4
35434: PUSH
35435: DOUBLE
35436: LD_INT 1
35438: DEC
35439: ST_TO_ADDR
35440: LD_VAR 0 3
35444: PUSH
35445: FOR_TO
35446: IFFALSE 35534
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35448: LD_ADDR_VAR 0 5
35452: PUSH
35453: LD_VAR 0 5
35457: PUSH
35458: LD_VAR 0 3
35462: PUSH
35463: LD_VAR 0 4
35467: ARRAY
35468: PPUSH
35469: CALL_OW 266
35473: PUSH
35474: LD_VAR 0 3
35478: PUSH
35479: LD_VAR 0 4
35483: ARRAY
35484: PPUSH
35485: CALL_OW 250
35489: PUSH
35490: LD_VAR 0 3
35494: PUSH
35495: LD_VAR 0 4
35499: ARRAY
35500: PPUSH
35501: CALL_OW 251
35505: PUSH
35506: LD_VAR 0 3
35510: PUSH
35511: LD_VAR 0 4
35515: ARRAY
35516: PPUSH
35517: CALL_OW 254
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: PUSH
35528: EMPTY
35529: LIST
35530: ADD
35531: ST_TO_ADDR
35532: GO 35445
35534: POP
35535: POP
// result := list ;
35536: LD_ADDR_VAR 0 2
35540: PUSH
35541: LD_VAR 0 5
35545: ST_TO_ADDR
// end ;
35546: LD_VAR 0 2
35550: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35551: LD_INT 0
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
// if not factory then
35560: LD_VAR 0 1
35564: NOT
35565: IFFALSE 35569
// exit ;
35567: GO 36172
// if control = control_apeman then
35569: LD_VAR 0 4
35573: PUSH
35574: LD_INT 5
35576: EQUAL
35577: IFFALSE 35686
// begin tmp := UnitsInside ( factory ) ;
35579: LD_ADDR_VAR 0 8
35583: PUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 313
35593: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35594: LD_VAR 0 8
35598: PPUSH
35599: LD_INT 25
35601: PUSH
35602: LD_INT 12
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PPUSH
35609: CALL_OW 72
35613: NOT
35614: IFFALSE 35624
// control := control_manual ;
35616: LD_ADDR_VAR 0 4
35620: PUSH
35621: LD_INT 1
35623: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35624: LD_ADDR_VAR 0 8
35628: PUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL 35321 0 1
35638: ST_TO_ADDR
// if tmp then
35639: LD_VAR 0 8
35643: IFFALSE 35686
// begin for i in tmp do
35645: LD_ADDR_VAR 0 7
35649: PUSH
35650: LD_VAR 0 8
35654: PUSH
35655: FOR_IN
35656: IFFALSE 35684
// if i [ 1 ] = b_ext_radio then
35658: LD_VAR 0 7
35662: PUSH
35663: LD_INT 1
35665: ARRAY
35666: PUSH
35667: LD_INT 22
35669: EQUAL
35670: IFFALSE 35682
// begin control := control_remote ;
35672: LD_ADDR_VAR 0 4
35676: PUSH
35677: LD_INT 2
35679: ST_TO_ADDR
// break ;
35680: GO 35684
// end ;
35682: GO 35655
35684: POP
35685: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35686: LD_VAR 0 1
35690: PPUSH
35691: LD_VAR 0 2
35695: PPUSH
35696: LD_VAR 0 3
35700: PPUSH
35701: LD_VAR 0 4
35705: PPUSH
35706: LD_VAR 0 5
35710: PPUSH
35711: CALL_OW 448
35715: IFFALSE 35750
// begin result := [ chassis , engine , control , weapon ] ;
35717: LD_ADDR_VAR 0 6
35721: PUSH
35722: LD_VAR 0 2
35726: PUSH
35727: LD_VAR 0 3
35731: PUSH
35732: LD_VAR 0 4
35736: PUSH
35737: LD_VAR 0 5
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: ST_TO_ADDR
// exit ;
35748: GO 36172
// end ; _chassis := AvailableChassisList ( factory ) ;
35750: LD_ADDR_VAR 0 9
35754: PUSH
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL_OW 475
35764: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35765: LD_ADDR_VAR 0 11
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 476
35779: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35780: LD_ADDR_VAR 0 12
35784: PUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 477
35794: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35795: LD_ADDR_VAR 0 10
35799: PUSH
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 478
35809: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35810: LD_VAR 0 9
35814: NOT
35815: IFTRUE 35824
35817: PUSH
35818: LD_VAR 0 11
35822: NOT
35823: OR
35824: IFTRUE 35833
35826: PUSH
35827: LD_VAR 0 12
35831: NOT
35832: OR
35833: IFTRUE 35842
35835: PUSH
35836: LD_VAR 0 10
35840: NOT
35841: OR
35842: IFFALSE 35877
// begin result := [ chassis , engine , control , weapon ] ;
35844: LD_ADDR_VAR 0 6
35848: PUSH
35849: LD_VAR 0 2
35853: PUSH
35854: LD_VAR 0 3
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: LD_VAR 0 5
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// exit ;
35875: GO 36172
// end ; if not chassis in _chassis then
35877: LD_VAR 0 2
35881: PUSH
35882: LD_VAR 0 9
35886: IN
35887: NOT
35888: IFFALSE 35914
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35890: LD_ADDR_VAR 0 2
35894: PUSH
35895: LD_VAR 0 9
35899: PUSH
35900: LD_INT 1
35902: PPUSH
35903: LD_VAR 0 9
35907: PPUSH
35908: CALL_OW 12
35912: ARRAY
35913: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35914: LD_VAR 0 2
35918: PPUSH
35919: LD_VAR 0 3
35923: PPUSH
35924: CALL 36177 0 2
35928: NOT
35929: IFFALSE 35990
// repeat engine := _engine [ 1 ] ;
35931: LD_ADDR_VAR 0 3
35935: PUSH
35936: LD_VAR 0 11
35940: PUSH
35941: LD_INT 1
35943: ARRAY
35944: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35945: LD_ADDR_VAR 0 11
35949: PUSH
35950: LD_VAR 0 11
35954: PPUSH
35955: LD_INT 1
35957: PPUSH
35958: CALL_OW 3
35962: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 3
35972: PPUSH
35973: CALL 36177 0 2
35977: IFTRUE 35988
35979: PUSH
35980: LD_VAR 0 11
35984: PUSH
35985: EMPTY
35986: EQUAL
35987: OR
35988: IFFALSE 35931
// if not control in _control then
35990: LD_VAR 0 4
35994: PUSH
35995: LD_VAR 0 12
35999: IN
36000: NOT
36001: IFFALSE 36027
// control := _control [ rand ( 1 , _control ) ] ;
36003: LD_ADDR_VAR 0 4
36007: PUSH
36008: LD_VAR 0 12
36012: PUSH
36013: LD_INT 1
36015: PPUSH
36016: LD_VAR 0 12
36020: PPUSH
36021: CALL_OW 12
36025: ARRAY
36026: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36027: LD_VAR 0 2
36031: PPUSH
36032: LD_VAR 0 5
36036: PPUSH
36037: CALL 36399 0 2
36041: NOT
36042: IFFALSE 36103
// repeat weapon := _weapon [ 1 ] ;
36044: LD_ADDR_VAR 0 5
36048: PUSH
36049: LD_VAR 0 10
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36058: LD_ADDR_VAR 0 10
36062: PUSH
36063: LD_VAR 0 10
36067: PPUSH
36068: LD_INT 1
36070: PPUSH
36071: CALL_OW 3
36075: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36076: LD_VAR 0 2
36080: PPUSH
36081: LD_VAR 0 5
36085: PPUSH
36086: CALL 36399 0 2
36090: IFTRUE 36101
36092: PUSH
36093: LD_VAR 0 10
36097: PUSH
36098: EMPTY
36099: EQUAL
36100: OR
36101: IFFALSE 36044
// result := [ ] ;
36103: LD_ADDR_VAR 0 6
36107: PUSH
36108: EMPTY
36109: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36110: LD_VAR 0 1
36114: PPUSH
36115: LD_VAR 0 2
36119: PPUSH
36120: LD_VAR 0 3
36124: PPUSH
36125: LD_VAR 0 4
36129: PPUSH
36130: LD_VAR 0 5
36134: PPUSH
36135: CALL_OW 448
36139: IFFALSE 36172
// result := [ chassis , engine , control , weapon ] ;
36141: LD_ADDR_VAR 0 6
36145: PUSH
36146: LD_VAR 0 2
36150: PUSH
36151: LD_VAR 0 3
36155: PUSH
36156: LD_VAR 0 4
36160: PUSH
36161: LD_VAR 0 5
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: ST_TO_ADDR
// end ;
36172: LD_VAR 0 6
36176: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36177: LD_INT 0
36179: PPUSH
// if not chassis or not engine then
36180: LD_VAR 0 1
36184: NOT
36185: IFTRUE 36194
36187: PUSH
36188: LD_VAR 0 2
36192: NOT
36193: OR
36194: IFFALSE 36198
// exit ;
36196: GO 36394
// case engine of engine_solar :
36198: LD_VAR 0 2
36202: PUSH
36203: LD_INT 2
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36211
36209: GO 36249
36211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_INT 11
36219: PUSH
36220: LD_INT 12
36222: PUSH
36223: LD_INT 13
36225: PUSH
36226: LD_INT 14
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 3
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
36247: GO 36378
36249: LD_INT 1
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36319
36257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_INT 11
36265: PUSH
36266: LD_INT 12
36268: PUSH
36269: LD_INT 13
36271: PUSH
36272: LD_INT 14
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: LD_INT 3
36283: PUSH
36284: LD_INT 4
36286: PUSH
36287: LD_INT 5
36289: PUSH
36290: LD_INT 21
36292: PUSH
36293: LD_INT 23
36295: PUSH
36296: LD_INT 22
36298: PUSH
36299: LD_INT 24
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
36317: GO 36378
36319: LD_INT 3
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36377
36327: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_INT 13
36335: PUSH
36336: LD_INT 14
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 3
36344: PUSH
36345: LD_INT 4
36347: PUSH
36348: LD_INT 5
36350: PUSH
36351: LD_INT 21
36353: PUSH
36354: LD_INT 22
36356: PUSH
36357: LD_INT 23
36359: PUSH
36360: LD_INT 24
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
36375: GO 36378
36377: POP
// result := ( chassis in result ) ;
36378: LD_ADDR_VAR 0 3
36382: PUSH
36383: LD_VAR 0 1
36387: PUSH
36388: LD_VAR 0 3
36392: IN
36393: ST_TO_ADDR
// end ;
36394: LD_VAR 0 3
36398: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36399: LD_INT 0
36401: PPUSH
// if not chassis or not weapon then
36402: LD_VAR 0 1
36406: NOT
36407: IFTRUE 36416
36409: PUSH
36410: LD_VAR 0 2
36414: NOT
36415: OR
36416: IFFALSE 36420
// exit ;
36418: GO 37514
// case weapon of us_machine_gun :
36420: LD_VAR 0 2
36424: PUSH
36425: LD_INT 2
36427: DOUBLE
36428: EQUAL
36429: IFTRUE 36433
36431: GO 36463
36433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 4
36450: PUSH
36451: LD_INT 5
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: ST_TO_ADDR
36461: GO 37498
36463: LD_INT 3
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36471
36469: GO 36501
36471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36472: LD_ADDR_VAR 0 3
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: LD_INT 4
36488: PUSH
36489: LD_INT 5
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
36499: GO 37498
36501: LD_INT 11
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36509
36507: GO 36539
36509: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 3
36523: PUSH
36524: LD_INT 4
36526: PUSH
36527: LD_INT 5
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
36537: GO 37498
36539: LD_INT 4
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36547
36545: GO 36573
36547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: LD_INT 4
36561: PUSH
36562: LD_INT 5
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
36571: GO 37498
36573: LD_INT 5
36575: DOUBLE
36576: EQUAL
36577: IFTRUE 36581
36579: GO 36607
36581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36582: LD_ADDR_VAR 0 3
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: LD_INT 4
36595: PUSH
36596: LD_INT 5
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
36605: GO 37498
36607: LD_INT 9
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36615
36613: GO 36641
36615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: LD_INT 3
36626: PUSH
36627: LD_INT 4
36629: PUSH
36630: LD_INT 5
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
36639: GO 37498
36641: LD_INT 7
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36675
36649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36650: LD_ADDR_VAR 0 3
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 3
36660: PUSH
36661: LD_INT 4
36663: PUSH
36664: LD_INT 5
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
36673: GO 37498
36675: LD_INT 12
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36683
36681: GO 36709
36683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
36707: GO 37498
36709: LD_INT 13
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 36743
36717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 3
36728: PUSH
36729: LD_INT 4
36731: PUSH
36732: LD_INT 5
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
36741: GO 37498
36743: LD_INT 14
36745: DOUBLE
36746: EQUAL
36747: IFTRUE 36751
36749: GO 36769
36751: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36752: LD_ADDR_VAR 0 3
36756: PUSH
36757: LD_INT 4
36759: PUSH
36760: LD_INT 5
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: ST_TO_ADDR
36767: GO 37498
36769: LD_INT 6
36771: DOUBLE
36772: EQUAL
36773: IFTRUE 36777
36775: GO 36795
36777: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36778: LD_ADDR_VAR 0 3
36782: PUSH
36783: LD_INT 4
36785: PUSH
36786: LD_INT 5
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: ST_TO_ADDR
36793: GO 37498
36795: LD_INT 10
36797: DOUBLE
36798: EQUAL
36799: IFTRUE 36803
36801: GO 36821
36803: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36804: LD_ADDR_VAR 0 3
36808: PUSH
36809: LD_INT 4
36811: PUSH
36812: LD_INT 5
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: ST_TO_ADDR
36819: GO 37498
36821: LD_INT 22
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36829
36827: GO 36855
36829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 11
36837: PUSH
36838: LD_INT 12
36840: PUSH
36841: LD_INT 13
36843: PUSH
36844: LD_INT 14
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: ST_TO_ADDR
36853: GO 37498
36855: LD_INT 23
36857: DOUBLE
36858: EQUAL
36859: IFTRUE 36863
36861: GO 36889
36863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36864: LD_ADDR_VAR 0 3
36868: PUSH
36869: LD_INT 11
36871: PUSH
36872: LD_INT 12
36874: PUSH
36875: LD_INT 13
36877: PUSH
36878: LD_INT 14
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
36887: GO 37498
36889: LD_INT 24
36891: DOUBLE
36892: EQUAL
36893: IFTRUE 36897
36895: GO 36923
36897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36898: LD_ADDR_VAR 0 3
36902: PUSH
36903: LD_INT 11
36905: PUSH
36906: LD_INT 12
36908: PUSH
36909: LD_INT 13
36911: PUSH
36912: LD_INT 14
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
36921: GO 37498
36923: LD_INT 30
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 36957
36931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36932: LD_ADDR_VAR 0 3
36936: PUSH
36937: LD_INT 11
36939: PUSH
36940: LD_INT 12
36942: PUSH
36943: LD_INT 13
36945: PUSH
36946: LD_INT 14
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
36955: GO 37498
36957: LD_INT 25
36959: DOUBLE
36960: EQUAL
36961: IFTRUE 36965
36963: GO 36983
36965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: LD_INT 13
36973: PUSH
36974: LD_INT 14
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: ST_TO_ADDR
36981: GO 37498
36983: LD_INT 27
36985: DOUBLE
36986: EQUAL
36987: IFTRUE 36991
36989: GO 37009
36991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 13
36999: PUSH
37000: LD_INT 14
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: ST_TO_ADDR
37007: GO 37498
37009: LD_INT 92
37011: DOUBLE
37012: EQUAL
37013: IFTRUE 37017
37015: GO 37043
37017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37018: LD_ADDR_VAR 0 3
37022: PUSH
37023: LD_INT 11
37025: PUSH
37026: LD_INT 12
37028: PUSH
37029: LD_INT 13
37031: PUSH
37032: LD_INT 14
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
37041: GO 37498
37043: LD_INT 28
37045: DOUBLE
37046: EQUAL
37047: IFTRUE 37051
37049: GO 37069
37051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_INT 13
37059: PUSH
37060: LD_INT 14
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: ST_TO_ADDR
37067: GO 37498
37069: LD_INT 29
37071: DOUBLE
37072: EQUAL
37073: IFTRUE 37077
37075: GO 37095
37077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37078: LD_ADDR_VAR 0 3
37082: PUSH
37083: LD_INT 13
37085: PUSH
37086: LD_INT 14
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: ST_TO_ADDR
37093: GO 37498
37095: LD_INT 31
37097: DOUBLE
37098: EQUAL
37099: IFTRUE 37103
37101: GO 37121
37103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_INT 13
37111: PUSH
37112: LD_INT 14
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: ST_TO_ADDR
37119: GO 37498
37121: LD_INT 26
37123: DOUBLE
37124: EQUAL
37125: IFTRUE 37129
37127: GO 37147
37129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37130: LD_ADDR_VAR 0 3
37134: PUSH
37135: LD_INT 13
37137: PUSH
37138: LD_INT 14
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: ST_TO_ADDR
37145: GO 37498
37147: LD_INT 42
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37181
37155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: LD_INT 21
37163: PUSH
37164: LD_INT 22
37166: PUSH
37167: LD_INT 23
37169: PUSH
37170: LD_INT 24
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
37179: GO 37498
37181: LD_INT 43
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37189
37187: GO 37215
37189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37190: LD_ADDR_VAR 0 3
37194: PUSH
37195: LD_INT 21
37197: PUSH
37198: LD_INT 22
37200: PUSH
37201: LD_INT 23
37203: PUSH
37204: LD_INT 24
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
37213: GO 37498
37215: LD_INT 44
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37223
37221: GO 37249
37223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37224: LD_ADDR_VAR 0 3
37228: PUSH
37229: LD_INT 21
37231: PUSH
37232: LD_INT 22
37234: PUSH
37235: LD_INT 23
37237: PUSH
37238: LD_INT 24
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
37247: GO 37498
37249: LD_INT 45
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37283
37257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 21
37265: PUSH
37266: LD_INT 22
37268: PUSH
37269: LD_INT 23
37271: PUSH
37272: LD_INT 24
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
37281: GO 37498
37283: LD_INT 49
37285: DOUBLE
37286: EQUAL
37287: IFTRUE 37291
37289: GO 37317
37291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37292: LD_ADDR_VAR 0 3
37296: PUSH
37297: LD_INT 21
37299: PUSH
37300: LD_INT 22
37302: PUSH
37303: LD_INT 23
37305: PUSH
37306: LD_INT 24
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
37315: GO 37498
37317: LD_INT 51
37319: DOUBLE
37320: EQUAL
37321: IFTRUE 37325
37323: GO 37351
37325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37326: LD_ADDR_VAR 0 3
37330: PUSH
37331: LD_INT 21
37333: PUSH
37334: LD_INT 22
37336: PUSH
37337: LD_INT 23
37339: PUSH
37340: LD_INT 24
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
37349: GO 37498
37351: LD_INT 52
37353: DOUBLE
37354: EQUAL
37355: IFTRUE 37359
37357: GO 37385
37359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_INT 21
37367: PUSH
37368: LD_INT 22
37370: PUSH
37371: LD_INT 23
37373: PUSH
37374: LD_INT 24
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
37383: GO 37498
37385: LD_INT 53
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37411
37393: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37394: LD_ADDR_VAR 0 3
37398: PUSH
37399: LD_INT 23
37401: PUSH
37402: LD_INT 24
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: ST_TO_ADDR
37409: GO 37498
37411: LD_INT 46
37413: DOUBLE
37414: EQUAL
37415: IFTRUE 37419
37417: GO 37437
37419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37420: LD_ADDR_VAR 0 3
37424: PUSH
37425: LD_INT 23
37427: PUSH
37428: LD_INT 24
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: ST_TO_ADDR
37435: GO 37498
37437: LD_INT 47
37439: DOUBLE
37440: EQUAL
37441: IFTRUE 37445
37443: GO 37463
37445: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: LD_INT 23
37453: PUSH
37454: LD_INT 24
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: ST_TO_ADDR
37461: GO 37498
37463: LD_INT 98
37465: DOUBLE
37466: EQUAL
37467: IFTRUE 37471
37469: GO 37497
37471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: LD_INT 21
37479: PUSH
37480: LD_INT 22
37482: PUSH
37483: LD_INT 23
37485: PUSH
37486: LD_INT 24
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
37495: GO 37498
37497: POP
// result := ( chassis in result ) ;
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_VAR 0 1
37507: PUSH
37508: LD_VAR 0 3
37512: IN
37513: ST_TO_ADDR
// end ;
37514: LD_VAR 0 3
37518: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37519: LD_INT 0
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
37525: PPUSH
37526: PPUSH
37527: PPUSH
// result := array ;
37528: LD_ADDR_VAR 0 5
37532: PUSH
37533: LD_VAR 0 1
37537: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37538: LD_VAR 0 1
37542: NOT
37543: IFTRUE 37552
37545: PUSH
37546: LD_VAR 0 2
37550: NOT
37551: OR
37552: IFTRUE 37561
37554: PUSH
37555: LD_VAR 0 3
37559: NOT
37560: OR
37561: IFTRUE 37575
37563: PUSH
37564: LD_VAR 0 2
37568: PUSH
37569: LD_VAR 0 1
37573: GREATER
37574: OR
37575: IFTRUE 37589
37577: PUSH
37578: LD_VAR 0 3
37582: PUSH
37583: LD_VAR 0 1
37587: GREATER
37588: OR
37589: IFFALSE 37593
// exit ;
37591: GO 37889
// if direction then
37593: LD_VAR 0 4
37597: IFFALSE 37661
// begin d := 1 ;
37599: LD_ADDR_VAR 0 9
37603: PUSH
37604: LD_INT 1
37606: ST_TO_ADDR
// if i_from > i_to then
37607: LD_VAR 0 2
37611: PUSH
37612: LD_VAR 0 3
37616: GREATER
37617: IFFALSE 37643
// length := ( array - i_from ) + i_to else
37619: LD_ADDR_VAR 0 11
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: LD_VAR 0 2
37633: MINUS
37634: PUSH
37635: LD_VAR 0 3
37639: PLUS
37640: ST_TO_ADDR
37641: GO 37659
// length := i_to - i_from ;
37643: LD_ADDR_VAR 0 11
37647: PUSH
37648: LD_VAR 0 3
37652: PUSH
37653: LD_VAR 0 2
37657: MINUS
37658: ST_TO_ADDR
// end else
37659: GO 37722
// begin d := - 1 ;
37661: LD_ADDR_VAR 0 9
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: ST_TO_ADDR
// if i_from > i_to then
37670: LD_VAR 0 2
37674: PUSH
37675: LD_VAR 0 3
37679: GREATER
37680: IFFALSE 37700
// length := i_from - i_to else
37682: LD_ADDR_VAR 0 11
37686: PUSH
37687: LD_VAR 0 2
37691: PUSH
37692: LD_VAR 0 3
37696: MINUS
37697: ST_TO_ADDR
37698: GO 37722
// length := ( array - i_to ) + i_from ;
37700: LD_ADDR_VAR 0 11
37704: PUSH
37705: LD_VAR 0 1
37709: PUSH
37710: LD_VAR 0 3
37714: MINUS
37715: PUSH
37716: LD_VAR 0 2
37720: PLUS
37721: ST_TO_ADDR
// end ; if not length then
37722: LD_VAR 0 11
37726: NOT
37727: IFFALSE 37731
// exit ;
37729: GO 37889
// tmp := array ;
37731: LD_ADDR_VAR 0 10
37735: PUSH
37736: LD_VAR 0 1
37740: ST_TO_ADDR
// for i = 1 to length do
37741: LD_ADDR_VAR 0 6
37745: PUSH
37746: DOUBLE
37747: LD_INT 1
37749: DEC
37750: ST_TO_ADDR
37751: LD_VAR 0 11
37755: PUSH
37756: FOR_TO
37757: IFFALSE 37877
// begin for j = 1 to array do
37759: LD_ADDR_VAR 0 7
37763: PUSH
37764: DOUBLE
37765: LD_INT 1
37767: DEC
37768: ST_TO_ADDR
37769: LD_VAR 0 1
37773: PUSH
37774: FOR_TO
37775: IFFALSE 37863
// begin k := j + d ;
37777: LD_ADDR_VAR 0 8
37781: PUSH
37782: LD_VAR 0 7
37786: PUSH
37787: LD_VAR 0 9
37791: PLUS
37792: ST_TO_ADDR
// if k > array then
37793: LD_VAR 0 8
37797: PUSH
37798: LD_VAR 0 1
37802: GREATER
37803: IFFALSE 37813
// k := 1 ;
37805: LD_ADDR_VAR 0 8
37809: PUSH
37810: LD_INT 1
37812: ST_TO_ADDR
// if not k then
37813: LD_VAR 0 8
37817: NOT
37818: IFFALSE 37830
// k := array ;
37820: LD_ADDR_VAR 0 8
37824: PUSH
37825: LD_VAR 0 1
37829: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37830: LD_ADDR_VAR 0 10
37834: PUSH
37835: LD_VAR 0 10
37839: PPUSH
37840: LD_VAR 0 8
37844: PPUSH
37845: LD_VAR 0 1
37849: PUSH
37850: LD_VAR 0 7
37854: ARRAY
37855: PPUSH
37856: CALL_OW 1
37860: ST_TO_ADDR
// end ;
37861: GO 37774
37863: POP
37864: POP
// array := tmp ;
37865: LD_ADDR_VAR 0 1
37869: PUSH
37870: LD_VAR 0 10
37874: ST_TO_ADDR
// end ;
37875: GO 37756
37877: POP
37878: POP
// result := array ;
37879: LD_ADDR_VAR 0 5
37883: PUSH
37884: LD_VAR 0 1
37888: ST_TO_ADDR
// end ;
37889: LD_VAR 0 5
37893: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37894: LD_INT 0
37896: PPUSH
37897: PPUSH
// result := 0 ;
37898: LD_ADDR_VAR 0 3
37902: PUSH
37903: LD_INT 0
37905: ST_TO_ADDR
// if not array or not value in array then
37906: LD_VAR 0 1
37910: NOT
37911: IFTRUE 37926
37913: PUSH
37914: LD_VAR 0 2
37918: PUSH
37919: LD_VAR 0 1
37923: IN
37924: NOT
37925: OR
37926: IFFALSE 37930
// exit ;
37928: GO 37984
// for i = 1 to array do
37930: LD_ADDR_VAR 0 4
37934: PUSH
37935: DOUBLE
37936: LD_INT 1
37938: DEC
37939: ST_TO_ADDR
37940: LD_VAR 0 1
37944: PUSH
37945: FOR_TO
37946: IFFALSE 37982
// if value = array [ i ] then
37948: LD_VAR 0 2
37952: PUSH
37953: LD_VAR 0 1
37957: PUSH
37958: LD_VAR 0 4
37962: ARRAY
37963: EQUAL
37964: IFFALSE 37980
// begin result := i ;
37966: LD_ADDR_VAR 0 3
37970: PUSH
37971: LD_VAR 0 4
37975: ST_TO_ADDR
// exit ;
37976: POP
37977: POP
37978: GO 37984
// end ;
37980: GO 37945
37982: POP
37983: POP
// end ;
37984: LD_VAR 0 3
37988: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37989: LD_INT 0
37991: PPUSH
// vc_chassis := chassis ;
37992: LD_ADDR_OWVAR 37
37996: PUSH
37997: LD_VAR 0 1
38001: ST_TO_ADDR
// vc_engine := engine ;
38002: LD_ADDR_OWVAR 39
38006: PUSH
38007: LD_VAR 0 2
38011: ST_TO_ADDR
// vc_control := control ;
38012: LD_ADDR_OWVAR 38
38016: PUSH
38017: LD_VAR 0 3
38021: ST_TO_ADDR
// vc_weapon := weapon ;
38022: LD_ADDR_OWVAR 40
38026: PUSH
38027: LD_VAR 0 4
38031: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38032: LD_ADDR_OWVAR 41
38036: PUSH
38037: LD_VAR 0 5
38041: ST_TO_ADDR
// end ;
38042: LD_VAR 0 6
38046: RET
// export function WantPlant ( unit ) ; var task ; begin
38047: LD_INT 0
38049: PPUSH
38050: PPUSH
// result := false ;
38051: LD_ADDR_VAR 0 2
38055: PUSH
38056: LD_INT 0
38058: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38059: LD_ADDR_VAR 0 3
38063: PUSH
38064: LD_VAR 0 1
38068: PPUSH
38069: CALL_OW 437
38073: ST_TO_ADDR
// if task then
38074: LD_VAR 0 3
38078: IFFALSE 38106
// if task [ 1 ] [ 1 ] = p then
38080: LD_VAR 0 3
38084: PUSH
38085: LD_INT 1
38087: ARRAY
38088: PUSH
38089: LD_INT 1
38091: ARRAY
38092: PUSH
38093: LD_STRING p
38095: EQUAL
38096: IFFALSE 38106
// result := true ;
38098: LD_ADDR_VAR 0 2
38102: PUSH
38103: LD_INT 1
38105: ST_TO_ADDR
// end ;
38106: LD_VAR 0 2
38110: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38111: LD_INT 0
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
// if pos < 1 then
38117: LD_VAR 0 2
38121: PUSH
38122: LD_INT 1
38124: LESS
38125: IFFALSE 38129
// exit ;
38127: GO 38432
// if pos = 1 then
38129: LD_VAR 0 2
38133: PUSH
38134: LD_INT 1
38136: EQUAL
38137: IFFALSE 38170
// result := Replace ( arr , pos [ 1 ] , value ) else
38139: LD_ADDR_VAR 0 4
38143: PUSH
38144: LD_VAR 0 1
38148: PPUSH
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 1
38156: ARRAY
38157: PPUSH
38158: LD_VAR 0 3
38162: PPUSH
38163: CALL_OW 1
38167: ST_TO_ADDR
38168: GO 38432
// begin tmp := arr ;
38170: LD_ADDR_VAR 0 6
38174: PUSH
38175: LD_VAR 0 1
38179: ST_TO_ADDR
// s_arr := [ tmp ] ;
38180: LD_ADDR_VAR 0 7
38184: PUSH
38185: LD_VAR 0 6
38189: PUSH
38190: EMPTY
38191: LIST
38192: ST_TO_ADDR
// for i = 1 to pos - 1 do
38193: LD_ADDR_VAR 0 5
38197: PUSH
38198: DOUBLE
38199: LD_INT 1
38201: DEC
38202: ST_TO_ADDR
38203: LD_VAR 0 2
38207: PUSH
38208: LD_INT 1
38210: MINUS
38211: PUSH
38212: FOR_TO
38213: IFFALSE 38258
// begin tmp := tmp [ pos [ i ] ] ;
38215: LD_ADDR_VAR 0 6
38219: PUSH
38220: LD_VAR 0 6
38224: PUSH
38225: LD_VAR 0 2
38229: PUSH
38230: LD_VAR 0 5
38234: ARRAY
38235: ARRAY
38236: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38237: LD_ADDR_VAR 0 7
38241: PUSH
38242: LD_VAR 0 7
38246: PUSH
38247: LD_VAR 0 6
38251: PUSH
38252: EMPTY
38253: LIST
38254: ADD
38255: ST_TO_ADDR
// end ;
38256: GO 38212
38258: POP
38259: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38260: LD_ADDR_VAR 0 6
38264: PUSH
38265: LD_VAR 0 6
38269: PPUSH
38270: LD_VAR 0 2
38274: PUSH
38275: LD_VAR 0 2
38279: ARRAY
38280: PPUSH
38281: LD_VAR 0 3
38285: PPUSH
38286: CALL_OW 1
38290: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38291: LD_ADDR_VAR 0 7
38295: PUSH
38296: LD_VAR 0 7
38300: PPUSH
38301: LD_VAR 0 7
38305: PPUSH
38306: LD_VAR 0 6
38310: PPUSH
38311: CALL_OW 1
38315: ST_TO_ADDR
// for i = s_arr downto 2 do
38316: LD_ADDR_VAR 0 5
38320: PUSH
38321: DOUBLE
38322: LD_VAR 0 7
38326: INC
38327: ST_TO_ADDR
38328: LD_INT 2
38330: PUSH
38331: FOR_DOWNTO
38332: IFFALSE 38416
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38334: LD_ADDR_VAR 0 6
38338: PUSH
38339: LD_VAR 0 7
38343: PUSH
38344: LD_VAR 0 5
38348: PUSH
38349: LD_INT 1
38351: MINUS
38352: ARRAY
38353: PPUSH
38354: LD_VAR 0 2
38358: PUSH
38359: LD_VAR 0 5
38363: PUSH
38364: LD_INT 1
38366: MINUS
38367: ARRAY
38368: PPUSH
38369: LD_VAR 0 7
38373: PUSH
38374: LD_VAR 0 5
38378: ARRAY
38379: PPUSH
38380: CALL_OW 1
38384: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38385: LD_ADDR_VAR 0 7
38389: PUSH
38390: LD_VAR 0 7
38394: PPUSH
38395: LD_VAR 0 5
38399: PUSH
38400: LD_INT 1
38402: MINUS
38403: PPUSH
38404: LD_VAR 0 6
38408: PPUSH
38409: CALL_OW 1
38413: ST_TO_ADDR
// end ;
38414: GO 38331
38416: POP
38417: POP
// result := s_arr [ 1 ] ;
38418: LD_ADDR_VAR 0 4
38422: PUSH
38423: LD_VAR 0 7
38427: PUSH
38428: LD_INT 1
38430: ARRAY
38431: ST_TO_ADDR
// end ; end ;
38432: LD_VAR 0 4
38436: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38437: LD_INT 0
38439: PPUSH
38440: PPUSH
// if not list then
38441: LD_VAR 0 1
38445: NOT
38446: IFFALSE 38450
// exit ;
38448: GO 38541
// i := list [ pos1 ] ;
38450: LD_ADDR_VAR 0 5
38454: PUSH
38455: LD_VAR 0 1
38459: PUSH
38460: LD_VAR 0 2
38464: ARRAY
38465: ST_TO_ADDR
// if not i then
38466: LD_VAR 0 5
38470: NOT
38471: IFFALSE 38475
// exit ;
38473: GO 38541
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38475: LD_ADDR_VAR 0 1
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: LD_VAR 0 2
38489: PPUSH
38490: LD_VAR 0 1
38494: PUSH
38495: LD_VAR 0 3
38499: ARRAY
38500: PPUSH
38501: CALL_OW 1
38505: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38506: LD_ADDR_VAR 0 1
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: LD_VAR 0 3
38520: PPUSH
38521: LD_VAR 0 5
38525: PPUSH
38526: CALL_OW 1
38530: ST_TO_ADDR
// result := list ;
38531: LD_ADDR_VAR 0 4
38535: PUSH
38536: LD_VAR 0 1
38540: ST_TO_ADDR
// end ;
38541: LD_VAR 0 4
38545: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38546: LD_INT 0
38548: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38549: LD_ADDR_VAR 0 5
38553: PUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: CALL_OW 250
38563: PPUSH
38564: LD_VAR 0 1
38568: PPUSH
38569: CALL_OW 251
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: LD_VAR 0 4
38588: PPUSH
38589: CALL 38971 0 5
38593: ST_TO_ADDR
// end ;
38594: LD_VAR 0 5
38598: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
// if not list or not unit then
38605: LD_VAR 0 2
38609: NOT
38610: IFTRUE 38619
38612: PUSH
38613: LD_VAR 0 1
38617: NOT
38618: OR
38619: IFFALSE 38623
// exit ;
38621: GO 38966
// result := [ ] ;
38623: LD_ADDR_VAR 0 5
38627: PUSH
38628: EMPTY
38629: ST_TO_ADDR
// for i in list do
38630: LD_ADDR_VAR 0 6
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: FOR_IN
38641: IFFALSE 38859
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38643: LD_ADDR_VAR 0 8
38647: PUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: LD_VAR 0 6
38657: PUSH
38658: LD_INT 1
38660: ARRAY
38661: PPUSH
38662: LD_VAR 0 6
38666: PUSH
38667: LD_INT 2
38669: ARRAY
38670: PPUSH
38671: CALL_OW 297
38675: ST_TO_ADDR
// if not Count ( result ) then
38676: LD_VAR 0 5
38680: PPUSH
38681: CALL 35193 0 1
38685: NOT
38686: IFFALSE 38719
// begin result := Join ( result , [ i , tmp ] ) ;
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: LD_VAR 0 5
38697: PPUSH
38698: LD_VAR 0 6
38702: PUSH
38703: LD_VAR 0 8
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PPUSH
38712: CALL 71169 0 2
38716: ST_TO_ADDR
// continue ;
38717: GO 38640
// end ; if result [ result ] [ 2 ] <= tmp then
38719: LD_VAR 0 5
38723: PUSH
38724: LD_VAR 0 5
38728: ARRAY
38729: PUSH
38730: LD_INT 2
38732: ARRAY
38733: PUSH
38734: LD_VAR 0 8
38738: LESSEQUAL
38739: IFFALSE 38772
// result := Join ( result , [ i , tmp ] ) else
38741: LD_ADDR_VAR 0 5
38745: PUSH
38746: LD_VAR 0 5
38750: PPUSH
38751: LD_VAR 0 6
38755: PUSH
38756: LD_VAR 0 8
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PPUSH
38765: CALL 71169 0 2
38769: ST_TO_ADDR
38770: GO 38857
// begin for j := 1 to Count ( result ) do
38772: LD_ADDR_VAR 0 7
38776: PUSH
38777: DOUBLE
38778: LD_INT 1
38780: DEC
38781: ST_TO_ADDR
38782: LD_VAR 0 5
38786: PPUSH
38787: CALL 35193 0 1
38791: PUSH
38792: FOR_TO
38793: IFFALSE 38855
// begin if tmp < result [ j ] [ 2 ] then
38795: LD_VAR 0 8
38799: PUSH
38800: LD_VAR 0 5
38804: PUSH
38805: LD_VAR 0 7
38809: ARRAY
38810: PUSH
38811: LD_INT 2
38813: ARRAY
38814: LESS
38815: IFFALSE 38853
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38817: LD_ADDR_VAR 0 5
38821: PUSH
38822: LD_VAR 0 5
38826: PPUSH
38827: LD_VAR 0 7
38831: PPUSH
38832: LD_VAR 0 6
38836: PUSH
38837: LD_VAR 0 8
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PPUSH
38846: CALL_OW 2
38850: ST_TO_ADDR
// break ;
38851: GO 38855
// end ; end ;
38853: GO 38792
38855: POP
38856: POP
// end ; end ;
38857: GO 38640
38859: POP
38860: POP
// if result and not asc then
38861: LD_VAR 0 5
38865: IFFALSE 38874
38867: PUSH
38868: LD_VAR 0 3
38872: NOT
38873: AND
38874: IFFALSE 38891
// result := ReverseArray ( result ) ;
38876: LD_ADDR_VAR 0 5
38880: PUSH
38881: LD_VAR 0 5
38885: PPUSH
38886: CALL 66249 0 1
38890: ST_TO_ADDR
// tmp := [ ] ;
38891: LD_ADDR_VAR 0 8
38895: PUSH
38896: EMPTY
38897: ST_TO_ADDR
// if mode then
38898: LD_VAR 0 4
38902: IFFALSE 38966
// begin for i := 1 to result do
38904: LD_ADDR_VAR 0 6
38908: PUSH
38909: DOUBLE
38910: LD_INT 1
38912: DEC
38913: ST_TO_ADDR
38914: LD_VAR 0 5
38918: PUSH
38919: FOR_TO
38920: IFFALSE 38954
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38922: LD_ADDR_VAR 0 8
38926: PUSH
38927: LD_VAR 0 8
38931: PPUSH
38932: LD_VAR 0 5
38936: PUSH
38937: LD_VAR 0 6
38941: ARRAY
38942: PUSH
38943: LD_INT 1
38945: ARRAY
38946: PPUSH
38947: CALL 71169 0 2
38951: ST_TO_ADDR
38952: GO 38919
38954: POP
38955: POP
// result := tmp ;
38956: LD_ADDR_VAR 0 5
38960: PUSH
38961: LD_VAR 0 8
38965: ST_TO_ADDR
// end ; end ;
38966: LD_VAR 0 5
38970: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38971: LD_INT 0
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
// if not list then
38977: LD_VAR 0 3
38981: NOT
38982: IFFALSE 38986
// exit ;
38984: GO 39376
// result := [ ] ;
38986: LD_ADDR_VAR 0 6
38990: PUSH
38991: EMPTY
38992: ST_TO_ADDR
// for i in list do
38993: LD_ADDR_VAR 0 7
38997: PUSH
38998: LD_VAR 0 3
39002: PUSH
39003: FOR_IN
39004: IFFALSE 39206
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39006: LD_ADDR_VAR 0 9
39010: PUSH
39011: LD_VAR 0 7
39015: PPUSH
39016: LD_VAR 0 1
39020: PPUSH
39021: LD_VAR 0 2
39025: PPUSH
39026: CALL_OW 297
39030: ST_TO_ADDR
// if not result then
39031: LD_VAR 0 6
39035: NOT
39036: IFFALSE 39062
// result := [ [ i , tmp ] ] else
39038: LD_ADDR_VAR 0 6
39042: PUSH
39043: LD_VAR 0 7
39047: PUSH
39048: LD_VAR 0 9
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: ST_TO_ADDR
39060: GO 39204
// begin if result [ result ] [ 2 ] <= tmp then
39062: LD_VAR 0 6
39066: PUSH
39067: LD_VAR 0 6
39071: ARRAY
39072: PUSH
39073: LD_INT 2
39075: ARRAY
39076: PUSH
39077: LD_VAR 0 9
39081: LESSEQUAL
39082: IFFALSE 39124
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39084: LD_ADDR_VAR 0 6
39088: PUSH
39089: LD_VAR 0 6
39093: PPUSH
39094: LD_VAR 0 6
39098: PUSH
39099: LD_INT 1
39101: PLUS
39102: PPUSH
39103: LD_VAR 0 7
39107: PUSH
39108: LD_VAR 0 9
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PPUSH
39117: CALL_OW 2
39121: ST_TO_ADDR
39122: GO 39204
// for j := 1 to result do
39124: LD_ADDR_VAR 0 8
39128: PUSH
39129: DOUBLE
39130: LD_INT 1
39132: DEC
39133: ST_TO_ADDR
39134: LD_VAR 0 6
39138: PUSH
39139: FOR_TO
39140: IFFALSE 39202
// begin if tmp < result [ j ] [ 2 ] then
39142: LD_VAR 0 9
39146: PUSH
39147: LD_VAR 0 6
39151: PUSH
39152: LD_VAR 0 8
39156: ARRAY
39157: PUSH
39158: LD_INT 2
39160: ARRAY
39161: LESS
39162: IFFALSE 39200
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39164: LD_ADDR_VAR 0 6
39168: PUSH
39169: LD_VAR 0 6
39173: PPUSH
39174: LD_VAR 0 8
39178: PPUSH
39179: LD_VAR 0 7
39183: PUSH
39184: LD_VAR 0 9
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PPUSH
39193: CALL_OW 2
39197: ST_TO_ADDR
// break ;
39198: GO 39202
// end ; end ;
39200: GO 39139
39202: POP
39203: POP
// end ; end ;
39204: GO 39003
39206: POP
39207: POP
// if result and not asc then
39208: LD_VAR 0 6
39212: IFFALSE 39221
39214: PUSH
39215: LD_VAR 0 4
39219: NOT
39220: AND
39221: IFFALSE 39296
// begin tmp := result ;
39223: LD_ADDR_VAR 0 9
39227: PUSH
39228: LD_VAR 0 6
39232: ST_TO_ADDR
// for i = tmp downto 1 do
39233: LD_ADDR_VAR 0 7
39237: PUSH
39238: DOUBLE
39239: LD_VAR 0 9
39243: INC
39244: ST_TO_ADDR
39245: LD_INT 1
39247: PUSH
39248: FOR_DOWNTO
39249: IFFALSE 39294
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39251: LD_ADDR_VAR 0 6
39255: PUSH
39256: LD_VAR 0 6
39260: PPUSH
39261: LD_VAR 0 9
39265: PUSH
39266: LD_VAR 0 7
39270: MINUS
39271: PUSH
39272: LD_INT 1
39274: PLUS
39275: PPUSH
39276: LD_VAR 0 9
39280: PUSH
39281: LD_VAR 0 7
39285: ARRAY
39286: PPUSH
39287: CALL_OW 1
39291: ST_TO_ADDR
39292: GO 39248
39294: POP
39295: POP
// end ; tmp := [ ] ;
39296: LD_ADDR_VAR 0 9
39300: PUSH
39301: EMPTY
39302: ST_TO_ADDR
// if mode then
39303: LD_VAR 0 5
39307: IFFALSE 39376
// begin for i = 1 to result do
39309: LD_ADDR_VAR 0 7
39313: PUSH
39314: DOUBLE
39315: LD_INT 1
39317: DEC
39318: ST_TO_ADDR
39319: LD_VAR 0 6
39323: PUSH
39324: FOR_TO
39325: IFFALSE 39364
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39327: LD_ADDR_VAR 0 9
39331: PUSH
39332: LD_VAR 0 9
39336: PPUSH
39337: LD_VAR 0 7
39341: PPUSH
39342: LD_VAR 0 6
39346: PUSH
39347: LD_VAR 0 7
39351: ARRAY
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PPUSH
39357: CALL_OW 1
39361: ST_TO_ADDR
39362: GO 39324
39364: POP
39365: POP
// result := tmp ;
39366: LD_ADDR_VAR 0 6
39370: PUSH
39371: LD_VAR 0 9
39375: ST_TO_ADDR
// end ; end ;
39376: LD_VAR 0 6
39380: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39389: LD_ADDR_VAR 0 5
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// if not x or not y then
39411: LD_VAR 0 2
39415: NOT
39416: IFTRUE 39425
39418: PUSH
39419: LD_VAR 0 3
39423: NOT
39424: OR
39425: IFFALSE 39429
// exit ;
39427: GO 41085
// if not range then
39429: LD_VAR 0 4
39433: NOT
39434: IFFALSE 39444
// range := 10 ;
39436: LD_ADDR_VAR 0 4
39440: PUSH
39441: LD_INT 10
39443: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39444: LD_ADDR_VAR 0 8
39448: PUSH
39449: LD_INT 81
39451: PUSH
39452: LD_VAR 0 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 92
39463: PUSH
39464: LD_VAR 0 2
39468: PUSH
39469: LD_VAR 0 3
39473: PUSH
39474: LD_VAR 0 4
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: LD_INT 21
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: PPUSH
39507: CALL_OW 69
39511: ST_TO_ADDR
// if not tmp then
39512: LD_VAR 0 8
39516: NOT
39517: IFFALSE 39521
// exit ;
39519: GO 41085
// for i in tmp do
39521: LD_ADDR_VAR 0 6
39525: PUSH
39526: LD_VAR 0 8
39530: PUSH
39531: FOR_IN
39532: IFFALSE 41060
// begin points := [ 0 , 0 , 0 ] ;
39534: LD_ADDR_VAR 0 9
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: ST_TO_ADDR
// bpoints := 1 ;
39553: LD_ADDR_VAR 0 10
39557: PUSH
39558: LD_INT 1
39560: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39561: LD_VAR 0 6
39565: PPUSH
39566: CALL_OW 247
39570: PUSH
39571: LD_INT 1
39573: DOUBLE
39574: EQUAL
39575: IFTRUE 39579
39577: GO 40161
39579: POP
// begin if GetClass ( i ) = 1 then
39580: LD_VAR 0 6
39584: PPUSH
39585: CALL_OW 257
39589: PUSH
39590: LD_INT 1
39592: EQUAL
39593: IFFALSE 39614
// points := [ 10 , 5 , 3 ] ;
39595: LD_ADDR_VAR 0 9
39599: PUSH
39600: LD_INT 10
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39614: LD_VAR 0 6
39618: PPUSH
39619: CALL_OW 257
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 4
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: IN
39638: IFFALSE 39659
// points := [ 3 , 2 , 1 ] ;
39640: LD_ADDR_VAR 0 9
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39659: LD_VAR 0 6
39663: PPUSH
39664: CALL_OW 257
39668: PUSH
39669: LD_INT 5
39671: EQUAL
39672: IFFALSE 39693
// points := [ 130 , 5 , 2 ] ;
39674: LD_ADDR_VAR 0 9
39678: PUSH
39679: LD_INT 130
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39693: LD_VAR 0 6
39697: PPUSH
39698: CALL_OW 257
39702: PUSH
39703: LD_INT 8
39705: EQUAL
39706: IFFALSE 39727
// points := [ 35 , 35 , 30 ] ;
39708: LD_ADDR_VAR 0 9
39712: PUSH
39713: LD_INT 35
39715: PUSH
39716: LD_INT 35
39718: PUSH
39719: LD_INT 30
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39727: LD_VAR 0 6
39731: PPUSH
39732: CALL_OW 257
39736: PUSH
39737: LD_INT 9
39739: EQUAL
39740: IFFALSE 39761
// points := [ 20 , 55 , 40 ] ;
39742: LD_ADDR_VAR 0 9
39746: PUSH
39747: LD_INT 20
39749: PUSH
39750: LD_INT 55
39752: PUSH
39753: LD_INT 40
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39761: LD_VAR 0 6
39765: PPUSH
39766: CALL_OW 257
39770: PUSH
39771: LD_INT 12
39773: PUSH
39774: LD_INT 16
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: IN
39781: IFFALSE 39802
// points := [ 5 , 3 , 2 ] ;
39783: LD_ADDR_VAR 0 9
39787: PUSH
39788: LD_INT 5
39790: PUSH
39791: LD_INT 3
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39802: LD_VAR 0 6
39806: PPUSH
39807: CALL_OW 257
39811: PUSH
39812: LD_INT 17
39814: EQUAL
39815: IFFALSE 39836
// points := [ 100 , 50 , 75 ] ;
39817: LD_ADDR_VAR 0 9
39821: PUSH
39822: LD_INT 100
39824: PUSH
39825: LD_INT 50
39827: PUSH
39828: LD_INT 75
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39836: LD_VAR 0 6
39840: PPUSH
39841: CALL_OW 257
39845: PUSH
39846: LD_INT 15
39848: EQUAL
39849: IFFALSE 39870
// points := [ 10 , 5 , 3 ] ;
39851: LD_ADDR_VAR 0 9
39855: PUSH
39856: LD_INT 10
39858: PUSH
39859: LD_INT 5
39861: PUSH
39862: LD_INT 3
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39870: LD_VAR 0 6
39874: PPUSH
39875: CALL_OW 257
39879: PUSH
39880: LD_INT 14
39882: EQUAL
39883: IFFALSE 39904
// points := [ 10 , 0 , 0 ] ;
39885: LD_ADDR_VAR 0 9
39889: PUSH
39890: LD_INT 10
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39904: LD_VAR 0 6
39908: PPUSH
39909: CALL_OW 257
39913: PUSH
39914: LD_INT 11
39916: EQUAL
39917: IFFALSE 39938
// points := [ 30 , 10 , 5 ] ;
39919: LD_ADDR_VAR 0 9
39923: PUSH
39924: LD_INT 30
39926: PUSH
39927: LD_INT 10
39929: PUSH
39930: LD_INT 5
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39938: LD_VAR 0 1
39942: PPUSH
39943: LD_INT 5
39945: PPUSH
39946: CALL_OW 321
39950: PUSH
39951: LD_INT 2
39953: EQUAL
39954: IFFALSE 39971
// bpoints := bpoints * 1.8 ;
39956: LD_ADDR_VAR 0 10
39960: PUSH
39961: LD_VAR 0 10
39965: PUSH
39966: LD_REAL  1.80000000000000E+0000
39969: MUL
39970: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39971: LD_VAR 0 6
39975: PPUSH
39976: CALL_OW 257
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: LD_INT 4
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: IN
39999: IFFALSE 40019
40001: PUSH
40002: LD_VAR 0 1
40006: PPUSH
40007: LD_INT 51
40009: PPUSH
40010: CALL_OW 321
40014: PUSH
40015: LD_INT 2
40017: EQUAL
40018: AND
40019: IFFALSE 40036
// bpoints := bpoints * 1.2 ;
40021: LD_ADDR_VAR 0 10
40025: PUSH
40026: LD_VAR 0 10
40030: PUSH
40031: LD_REAL  1.20000000000000E+0000
40034: MUL
40035: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40036: LD_VAR 0 6
40040: PPUSH
40041: CALL_OW 257
40045: PUSH
40046: LD_INT 5
40048: PUSH
40049: LD_INT 7
40051: PUSH
40052: LD_INT 9
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: IN
40060: IFFALSE 40080
40062: PUSH
40063: LD_VAR 0 1
40067: PPUSH
40068: LD_INT 52
40070: PPUSH
40071: CALL_OW 321
40075: PUSH
40076: LD_INT 2
40078: EQUAL
40079: AND
40080: IFFALSE 40097
// bpoints := bpoints * 1.5 ;
40082: LD_ADDR_VAR 0 10
40086: PUSH
40087: LD_VAR 0 10
40091: PUSH
40092: LD_REAL  1.50000000000000E+0000
40095: MUL
40096: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40097: LD_VAR 0 1
40101: PPUSH
40102: LD_INT 66
40104: PPUSH
40105: CALL_OW 321
40109: PUSH
40110: LD_INT 2
40112: EQUAL
40113: IFFALSE 40130
// bpoints := bpoints * 1.1 ;
40115: LD_ADDR_VAR 0 10
40119: PUSH
40120: LD_VAR 0 10
40124: PUSH
40125: LD_REAL  1.10000000000000E+0000
40128: MUL
40129: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40130: LD_ADDR_VAR 0 10
40134: PUSH
40135: LD_VAR 0 10
40139: PUSH
40140: LD_VAR 0 6
40144: PPUSH
40145: LD_INT 1
40147: PPUSH
40148: CALL_OW 259
40152: PUSH
40153: LD_REAL  1.15000000000000E+0000
40156: MUL
40157: MUL
40158: ST_TO_ADDR
// end ; unit_vehicle :
40159: GO 40989
40161: LD_INT 2
40163: DOUBLE
40164: EQUAL
40165: IFTRUE 40169
40167: GO 40977
40169: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40170: LD_VAR 0 6
40174: PPUSH
40175: CALL_OW 264
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 42
40185: PUSH
40186: LD_INT 24
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: IN
40194: IFFALSE 40215
// points := [ 25 , 5 , 3 ] ;
40196: LD_ADDR_VAR 0 9
40200: PUSH
40201: LD_INT 25
40203: PUSH
40204: LD_INT 5
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40215: LD_VAR 0 6
40219: PPUSH
40220: CALL_OW 264
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: LD_INT 43
40230: PUSH
40231: LD_INT 25
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: IN
40239: IFFALSE 40260
// points := [ 40 , 15 , 5 ] ;
40241: LD_ADDR_VAR 0 9
40245: PUSH
40246: LD_INT 40
40248: PUSH
40249: LD_INT 15
40251: PUSH
40252: LD_INT 5
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40260: LD_VAR 0 6
40264: PPUSH
40265: CALL_OW 264
40269: PUSH
40270: LD_INT 3
40272: PUSH
40273: LD_INT 23
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: IN
40280: IFFALSE 40301
// points := [ 7 , 25 , 8 ] ;
40282: LD_ADDR_VAR 0 9
40286: PUSH
40287: LD_INT 7
40289: PUSH
40290: LD_INT 25
40292: PUSH
40293: LD_INT 8
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40301: LD_VAR 0 6
40305: PPUSH
40306: CALL_OW 264
40310: PUSH
40311: LD_INT 5
40313: PUSH
40314: LD_INT 27
40316: PUSH
40317: LD_INT 44
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: IN
40325: IFFALSE 40346
// points := [ 14 , 50 , 16 ] ;
40327: LD_ADDR_VAR 0 9
40331: PUSH
40332: LD_INT 14
40334: PUSH
40335: LD_INT 50
40337: PUSH
40338: LD_INT 16
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40346: LD_VAR 0 6
40350: PPUSH
40351: CALL_OW 264
40355: PUSH
40356: LD_INT 6
40358: PUSH
40359: LD_INT 46
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: IN
40366: IFFALSE 40387
// points := [ 32 , 120 , 70 ] ;
40368: LD_ADDR_VAR 0 9
40372: PUSH
40373: LD_INT 32
40375: PUSH
40376: LD_INT 120
40378: PUSH
40379: LD_INT 70
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40387: LD_VAR 0 6
40391: PPUSH
40392: CALL_OW 264
40396: PUSH
40397: LD_INT 7
40399: PUSH
40400: LD_INT 28
40402: PUSH
40403: LD_INT 45
40405: PUSH
40406: LD_INT 92
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: IN
40415: IFFALSE 40436
// points := [ 35 , 20 , 45 ] ;
40417: LD_ADDR_VAR 0 9
40421: PUSH
40422: LD_INT 35
40424: PUSH
40425: LD_INT 20
40427: PUSH
40428: LD_INT 45
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40436: LD_VAR 0 6
40440: PPUSH
40441: CALL_OW 264
40445: PUSH
40446: LD_INT 47
40448: PUSH
40449: EMPTY
40450: LIST
40451: IN
40452: IFFALSE 40473
// points := [ 67 , 45 , 75 ] ;
40454: LD_ADDR_VAR 0 9
40458: PUSH
40459: LD_INT 67
40461: PUSH
40462: LD_INT 45
40464: PUSH
40465: LD_INT 75
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40473: LD_VAR 0 6
40477: PPUSH
40478: CALL_OW 264
40482: PUSH
40483: LD_INT 26
40485: PUSH
40486: EMPTY
40487: LIST
40488: IN
40489: IFFALSE 40510
// points := [ 120 , 30 , 80 ] ;
40491: LD_ADDR_VAR 0 9
40495: PUSH
40496: LD_INT 120
40498: PUSH
40499: LD_INT 30
40501: PUSH
40502: LD_INT 80
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40510: LD_VAR 0 6
40514: PPUSH
40515: CALL_OW 264
40519: PUSH
40520: LD_INT 22
40522: PUSH
40523: EMPTY
40524: LIST
40525: IN
40526: IFFALSE 40547
// points := [ 40 , 1 , 1 ] ;
40528: LD_ADDR_VAR 0 9
40532: PUSH
40533: LD_INT 40
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40547: LD_VAR 0 6
40551: PPUSH
40552: CALL_OW 264
40556: PUSH
40557: LD_INT 29
40559: PUSH
40560: EMPTY
40561: LIST
40562: IN
40563: IFFALSE 40584
// points := [ 70 , 200 , 400 ] ;
40565: LD_ADDR_VAR 0 9
40569: PUSH
40570: LD_INT 70
40572: PUSH
40573: LD_INT 200
40575: PUSH
40576: LD_INT 400
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40584: LD_VAR 0 6
40588: PPUSH
40589: CALL_OW 264
40593: PUSH
40594: LD_INT 14
40596: PUSH
40597: LD_INT 53
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: IN
40604: IFFALSE 40625
// points := [ 40 , 10 , 20 ] ;
40606: LD_ADDR_VAR 0 9
40610: PUSH
40611: LD_INT 40
40613: PUSH
40614: LD_INT 10
40616: PUSH
40617: LD_INT 20
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40625: LD_VAR 0 6
40629: PPUSH
40630: CALL_OW 264
40634: PUSH
40635: LD_INT 9
40637: PUSH
40638: EMPTY
40639: LIST
40640: IN
40641: IFFALSE 40662
// points := [ 5 , 70 , 20 ] ;
40643: LD_ADDR_VAR 0 9
40647: PUSH
40648: LD_INT 5
40650: PUSH
40651: LD_INT 70
40653: PUSH
40654: LD_INT 20
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40662: LD_VAR 0 6
40666: PPUSH
40667: CALL_OW 264
40671: PUSH
40672: LD_INT 10
40674: PUSH
40675: EMPTY
40676: LIST
40677: IN
40678: IFFALSE 40699
// points := [ 35 , 110 , 70 ] ;
40680: LD_ADDR_VAR 0 9
40684: PUSH
40685: LD_INT 35
40687: PUSH
40688: LD_INT 110
40690: PUSH
40691: LD_INT 70
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40699: LD_VAR 0 6
40703: PPUSH
40704: CALL_OW 265
40708: PUSH
40709: LD_INT 25
40711: EQUAL
40712: IFFALSE 40733
// points := [ 80 , 65 , 100 ] ;
40714: LD_ADDR_VAR 0 9
40718: PUSH
40719: LD_INT 80
40721: PUSH
40722: LD_INT 65
40724: PUSH
40725: LD_INT 100
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40733: LD_VAR 0 6
40737: PPUSH
40738: CALL_OW 263
40742: PUSH
40743: LD_INT 1
40745: EQUAL
40746: IFFALSE 40781
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40748: LD_ADDR_VAR 0 10
40752: PUSH
40753: LD_VAR 0 10
40757: PUSH
40758: LD_VAR 0 6
40762: PPUSH
40763: CALL_OW 311
40767: PPUSH
40768: LD_INT 3
40770: PPUSH
40771: CALL_OW 259
40775: PUSH
40776: LD_INT 4
40778: MUL
40779: MUL
40780: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40781: LD_VAR 0 6
40785: PPUSH
40786: CALL_OW 263
40790: PUSH
40791: LD_INT 2
40793: EQUAL
40794: IFFALSE 40845
// begin j := IsControledBy ( i ) ;
40796: LD_ADDR_VAR 0 7
40800: PUSH
40801: LD_VAR 0 6
40805: PPUSH
40806: CALL_OW 312
40810: ST_TO_ADDR
// if j then
40811: LD_VAR 0 7
40815: IFFALSE 40845
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40817: LD_ADDR_VAR 0 10
40821: PUSH
40822: LD_VAR 0 10
40826: PUSH
40827: LD_VAR 0 7
40831: PPUSH
40832: LD_INT 3
40834: PPUSH
40835: CALL_OW 259
40839: PUSH
40840: LD_INT 3
40842: MUL
40843: MUL
40844: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40845: LD_VAR 0 6
40849: PPUSH
40850: CALL_OW 264
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: LD_INT 6
40860: PUSH
40861: LD_INT 46
40863: PUSH
40864: LD_INT 44
40866: PUSH
40867: LD_INT 47
40869: PUSH
40870: LD_INT 45
40872: PUSH
40873: LD_INT 28
40875: PUSH
40876: LD_INT 7
40878: PUSH
40879: LD_INT 27
40881: PUSH
40882: LD_INT 29
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: IN
40897: IFFALSE 40917
40899: PUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_INT 52
40907: PPUSH
40908: CALL_OW 321
40912: PUSH
40913: LD_INT 2
40915: EQUAL
40916: AND
40917: IFFALSE 40934
// bpoints := bpoints * 1.2 ;
40919: LD_ADDR_VAR 0 10
40923: PUSH
40924: LD_VAR 0 10
40928: PUSH
40929: LD_REAL  1.20000000000000E+0000
40932: MUL
40933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40934: LD_VAR 0 6
40938: PPUSH
40939: CALL_OW 264
40943: PUSH
40944: LD_INT 6
40946: PUSH
40947: LD_INT 46
40949: PUSH
40950: LD_INT 47
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: IN
40958: IFFALSE 40975
// bpoints := bpoints * 1.2 ;
40960: LD_ADDR_VAR 0 10
40964: PUSH
40965: LD_VAR 0 10
40969: PUSH
40970: LD_REAL  1.20000000000000E+0000
40973: MUL
40974: ST_TO_ADDR
// end ; unit_building :
40975: GO 40989
40977: LD_INT 3
40979: DOUBLE
40980: EQUAL
40981: IFTRUE 40985
40983: GO 40988
40985: POP
// ; end ;
40986: GO 40989
40988: POP
// for j = 1 to 3 do
40989: LD_ADDR_VAR 0 7
40993: PUSH
40994: DOUBLE
40995: LD_INT 1
40997: DEC
40998: ST_TO_ADDR
40999: LD_INT 3
41001: PUSH
41002: FOR_TO
41003: IFFALSE 41056
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41005: LD_ADDR_VAR 0 5
41009: PUSH
41010: LD_VAR 0 5
41014: PPUSH
41015: LD_VAR 0 7
41019: PPUSH
41020: LD_VAR 0 5
41024: PUSH
41025: LD_VAR 0 7
41029: ARRAY
41030: PUSH
41031: LD_VAR 0 9
41035: PUSH
41036: LD_VAR 0 7
41040: ARRAY
41041: PUSH
41042: LD_VAR 0 10
41046: MUL
41047: PLUS
41048: PPUSH
41049: CALL_OW 1
41053: ST_TO_ADDR
41054: GO 41002
41056: POP
41057: POP
// end ;
41058: GO 39531
41060: POP
41061: POP
// result := Replace ( result , 4 , tmp ) ;
41062: LD_ADDR_VAR 0 5
41066: PUSH
41067: LD_VAR 0 5
41071: PPUSH
41072: LD_INT 4
41074: PPUSH
41075: LD_VAR 0 8
41079: PPUSH
41080: CALL_OW 1
41084: ST_TO_ADDR
// end ;
41085: LD_VAR 0 5
41089: RET
// export function DangerAtRange ( unit , range ) ; begin
41090: LD_INT 0
41092: PPUSH
// if not unit then
41093: LD_VAR 0 1
41097: NOT
41098: IFFALSE 41102
// exit ;
41100: GO 41147
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41102: LD_ADDR_VAR 0 3
41106: PUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 255
41116: PPUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 250
41126: PPUSH
41127: LD_VAR 0 1
41131: PPUSH
41132: CALL_OW 251
41136: PPUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: CALL 39381 0 4
41146: ST_TO_ADDR
// end ;
41147: LD_VAR 0 3
41151: RET
// export function DangerInArea ( side , area ) ; begin
41152: LD_INT 0
41154: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41155: LD_ADDR_VAR 0 3
41159: PUSH
41160: LD_VAR 0 2
41164: PPUSH
41165: LD_INT 81
41167: PUSH
41168: LD_VAR 0 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 70
41181: ST_TO_ADDR
// end ;
41182: LD_VAR 0 3
41186: RET
// export function IsExtension ( b ) ; begin
41187: LD_INT 0
41189: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41190: LD_ADDR_VAR 0 2
41194: PUSH
41195: LD_VAR 0 1
41199: PUSH
41200: LD_INT 23
41202: PUSH
41203: LD_INT 20
41205: PUSH
41206: LD_INT 22
41208: PUSH
41209: LD_INT 17
41211: PUSH
41212: LD_INT 24
41214: PUSH
41215: LD_INT 21
41217: PUSH
41218: LD_INT 19
41220: PUSH
41221: LD_INT 16
41223: PUSH
41224: LD_INT 25
41226: PUSH
41227: LD_INT 18
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: IN
41242: ST_TO_ADDR
// end ;
41243: LD_VAR 0 2
41247: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41248: LD_INT 0
41250: PPUSH
41251: PPUSH
41252: PPUSH
// result := [ ] ;
41253: LD_ADDR_VAR 0 4
41257: PUSH
41258: EMPTY
41259: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41260: LD_ADDR_VAR 0 5
41264: PUSH
41265: LD_VAR 0 2
41269: PPUSH
41270: LD_INT 21
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PPUSH
41280: CALL_OW 70
41284: ST_TO_ADDR
// if not tmp then
41285: LD_VAR 0 5
41289: NOT
41290: IFFALSE 41294
// exit ;
41292: GO 41358
// if checkLink then
41294: LD_VAR 0 3
41298: IFFALSE 41348
// begin for i in tmp do
41300: LD_ADDR_VAR 0 6
41304: PUSH
41305: LD_VAR 0 5
41309: PUSH
41310: FOR_IN
41311: IFFALSE 41346
// if GetBase ( i ) <> base then
41313: LD_VAR 0 6
41317: PPUSH
41318: CALL_OW 274
41322: PUSH
41323: LD_VAR 0 1
41327: NONEQUAL
41328: IFFALSE 41344
// ComLinkToBase ( base , i ) ;
41330: LD_VAR 0 1
41334: PPUSH
41335: LD_VAR 0 6
41339: PPUSH
41340: CALL_OW 169
41344: GO 41310
41346: POP
41347: POP
// end ; result := tmp ;
41348: LD_ADDR_VAR 0 4
41352: PUSH
41353: LD_VAR 0 5
41357: ST_TO_ADDR
// end ;
41358: LD_VAR 0 4
41362: RET
// export function ComComplete ( units , b ) ; var i ; begin
41363: LD_INT 0
41365: PPUSH
41366: PPUSH
// if not units then
41367: LD_VAR 0 1
41371: NOT
41372: IFFALSE 41376
// exit ;
41374: GO 41466
// for i in units do
41376: LD_ADDR_VAR 0 4
41380: PUSH
41381: LD_VAR 0 1
41385: PUSH
41386: FOR_IN
41387: IFFALSE 41464
// if BuildingStatus ( b ) = bs_build then
41389: LD_VAR 0 2
41393: PPUSH
41394: CALL_OW 461
41398: PUSH
41399: LD_INT 1
41401: EQUAL
41402: IFFALSE 41462
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41404: LD_VAR 0 4
41408: PPUSH
41409: LD_STRING h
41411: PUSH
41412: LD_VAR 0 2
41416: PPUSH
41417: CALL_OW 250
41421: PUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: CALL_OW 251
41431: PUSH
41432: LD_VAR 0 2
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: PPUSH
41458: CALL_OW 446
41462: GO 41386
41464: POP
41465: POP
// end ;
41466: LD_VAR 0 3
41470: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41479: LD_VAR 0 1
41483: NOT
41484: IFTRUE 41501
41486: PUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL_OW 263
41496: PUSH
41497: LD_INT 2
41499: NONEQUAL
41500: OR
41501: IFFALSE 41505
// exit ;
41503: GO 41821
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41505: LD_ADDR_VAR 0 6
41509: PUSH
41510: LD_INT 22
41512: PUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: CALL_OW 255
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 30
41532: PUSH
41533: LD_INT 36
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 34
41542: PUSH
41543: LD_INT 31
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PPUSH
41559: CALL_OW 69
41563: ST_TO_ADDR
// if not tmp then
41564: LD_VAR 0 6
41568: NOT
41569: IFFALSE 41573
// exit ;
41571: GO 41821
// result := [ ] ;
41573: LD_ADDR_VAR 0 2
41577: PUSH
41578: EMPTY
41579: ST_TO_ADDR
// for i in tmp do
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_VAR 0 6
41589: PUSH
41590: FOR_IN
41591: IFFALSE 41662
// begin t := UnitsInside ( i ) ;
41593: LD_ADDR_VAR 0 4
41597: PUSH
41598: LD_VAR 0 3
41602: PPUSH
41603: CALL_OW 313
41607: ST_TO_ADDR
// if t then
41608: LD_VAR 0 4
41612: IFFALSE 41660
// for j in t do
41614: LD_ADDR_VAR 0 7
41618: PUSH
41619: LD_VAR 0 4
41623: PUSH
41624: FOR_IN
41625: IFFALSE 41658
// result := Replace ( result , result + 1 , j ) ;
41627: LD_ADDR_VAR 0 2
41631: PUSH
41632: LD_VAR 0 2
41636: PPUSH
41637: LD_VAR 0 2
41641: PUSH
41642: LD_INT 1
41644: PLUS
41645: PPUSH
41646: LD_VAR 0 7
41650: PPUSH
41651: CALL_OW 1
41655: ST_TO_ADDR
41656: GO 41624
41658: POP
41659: POP
// end ;
41660: GO 41590
41662: POP
41663: POP
// if not result then
41664: LD_VAR 0 2
41668: NOT
41669: IFFALSE 41673
// exit ;
41671: GO 41821
// mech := result [ 1 ] ;
41673: LD_ADDR_VAR 0 5
41677: PUSH
41678: LD_VAR 0 2
41682: PUSH
41683: LD_INT 1
41685: ARRAY
41686: ST_TO_ADDR
// if result > 1 then
41687: LD_VAR 0 2
41691: PUSH
41692: LD_INT 1
41694: GREATER
41695: IFFALSE 41807
// begin for i = 2 to result do
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: DOUBLE
41703: LD_INT 2
41705: DEC
41706: ST_TO_ADDR
41707: LD_VAR 0 2
41711: PUSH
41712: FOR_TO
41713: IFFALSE 41805
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41715: LD_ADDR_VAR 0 4
41719: PUSH
41720: LD_VAR 0 2
41724: PUSH
41725: LD_VAR 0 3
41729: ARRAY
41730: PPUSH
41731: LD_INT 3
41733: PPUSH
41734: CALL_OW 259
41738: PUSH
41739: LD_VAR 0 2
41743: PUSH
41744: LD_VAR 0 3
41748: ARRAY
41749: PPUSH
41750: CALL_OW 432
41754: MINUS
41755: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41756: LD_VAR 0 4
41760: PUSH
41761: LD_VAR 0 5
41765: PPUSH
41766: LD_INT 3
41768: PPUSH
41769: CALL_OW 259
41773: PUSH
41774: LD_VAR 0 5
41778: PPUSH
41779: CALL_OW 432
41783: MINUS
41784: GREATEREQUAL
41785: IFFALSE 41803
// mech := result [ i ] ;
41787: LD_ADDR_VAR 0 5
41791: PUSH
41792: LD_VAR 0 2
41796: PUSH
41797: LD_VAR 0 3
41801: ARRAY
41802: ST_TO_ADDR
// end ;
41803: GO 41712
41805: POP
41806: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41807: LD_VAR 0 1
41811: PPUSH
41812: LD_VAR 0 5
41816: PPUSH
41817: CALL_OW 135
// end ;
41821: LD_VAR 0 2
41825: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41826: LD_INT 0
41828: PPUSH
41829: PPUSH
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
// result := [ ] ;
41841: LD_ADDR_VAR 0 7
41845: PUSH
41846: EMPTY
41847: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41848: LD_VAR 0 1
41852: PPUSH
41853: CALL_OW 266
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: IN
41868: NOT
41869: IFFALSE 41873
// exit ;
41871: GO 43513
// if name then
41873: LD_VAR 0 3
41877: IFFALSE 41893
// SetBName ( base_dep , name ) ;
41879: LD_VAR 0 1
41883: PPUSH
41884: LD_VAR 0 3
41888: PPUSH
41889: CALL_OW 500
// base := GetBase ( base_dep ) ;
41893: LD_ADDR_VAR 0 15
41897: PUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 274
41907: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41908: LD_ADDR_VAR 0 16
41912: PUSH
41913: LD_VAR 0 1
41917: PPUSH
41918: CALL_OW 255
41922: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41923: LD_ADDR_VAR 0 17
41927: PUSH
41928: LD_VAR 0 1
41932: PPUSH
41933: CALL_OW 248
41937: ST_TO_ADDR
// if sources then
41938: LD_VAR 0 5
41942: IFFALSE 41989
// for i = 1 to 3 do
41944: LD_ADDR_VAR 0 8
41948: PUSH
41949: DOUBLE
41950: LD_INT 1
41952: DEC
41953: ST_TO_ADDR
41954: LD_INT 3
41956: PUSH
41957: FOR_TO
41958: IFFALSE 41987
// AddResourceType ( base , i , sources [ i ] ) ;
41960: LD_VAR 0 15
41964: PPUSH
41965: LD_VAR 0 8
41969: PPUSH
41970: LD_VAR 0 5
41974: PUSH
41975: LD_VAR 0 8
41979: ARRAY
41980: PPUSH
41981: CALL_OW 276
41985: GO 41957
41987: POP
41988: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41989: LD_ADDR_VAR 0 18
41993: PUSH
41994: LD_VAR 0 15
41998: PPUSH
41999: LD_VAR 0 2
42003: PPUSH
42004: LD_INT 1
42006: PPUSH
42007: CALL 41248 0 3
42011: ST_TO_ADDR
// InitHc ;
42012: CALL_OW 19
// InitUc ;
42016: CALL_OW 18
// uc_side := side ;
42020: LD_ADDR_OWVAR 20
42024: PUSH
42025: LD_VAR 0 16
42029: ST_TO_ADDR
// uc_nation := nation ;
42030: LD_ADDR_OWVAR 21
42034: PUSH
42035: LD_VAR 0 17
42039: ST_TO_ADDR
// if buildings then
42040: LD_VAR 0 18
42044: IFFALSE 43372
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42046: LD_ADDR_VAR 0 19
42050: PUSH
42051: LD_VAR 0 18
42055: PPUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 30
42061: PUSH
42062: LD_INT 29
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 30
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PPUSH
42084: CALL_OW 72
42088: ST_TO_ADDR
// if tmp then
42089: LD_VAR 0 19
42093: IFFALSE 42141
// for i in tmp do
42095: LD_ADDR_VAR 0 8
42099: PUSH
42100: LD_VAR 0 19
42104: PUSH
42105: FOR_IN
42106: IFFALSE 42139
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42108: LD_VAR 0 8
42112: PPUSH
42113: CALL_OW 250
42117: PPUSH
42118: LD_VAR 0 8
42122: PPUSH
42123: CALL_OW 251
42127: PPUSH
42128: LD_VAR 0 16
42132: PPUSH
42133: CALL_OW 441
42137: GO 42105
42139: POP
42140: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42141: LD_VAR 0 18
42145: PPUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 30
42151: PUSH
42152: LD_INT 32
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 30
42161: PUSH
42162: LD_INT 33
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: PPUSH
42174: CALL_OW 72
42178: IFFALSE 42266
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: LD_VAR 0 18
42189: PPUSH
42190: LD_INT 2
42192: PUSH
42193: LD_INT 30
42195: PUSH
42196: LD_INT 32
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 30
42205: PUSH
42206: LD_INT 33
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: PPUSH
42218: CALL_OW 72
42222: PUSH
42223: FOR_IN
42224: IFFALSE 42264
// begin if not GetBWeapon ( i ) then
42226: LD_VAR 0 8
42230: PPUSH
42231: CALL_OW 269
42235: NOT
42236: IFFALSE 42262
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42238: LD_VAR 0 8
42242: PPUSH
42243: LD_VAR 0 8
42247: PPUSH
42248: LD_VAR 0 2
42252: PPUSH
42253: CALL 43518 0 2
42257: PPUSH
42258: CALL_OW 431
// end ;
42262: GO 42223
42264: POP
42265: POP
// end ; for i = 1 to personel do
42266: LD_ADDR_VAR 0 8
42270: PUSH
42271: DOUBLE
42272: LD_INT 1
42274: DEC
42275: ST_TO_ADDR
42276: LD_VAR 0 6
42280: PUSH
42281: FOR_TO
42282: IFFALSE 43352
// begin if i > 4 then
42284: LD_VAR 0 8
42288: PUSH
42289: LD_INT 4
42291: GREATER
42292: IFFALSE 42296
// break ;
42294: GO 43352
// case i of 1 :
42296: LD_VAR 0 8
42300: PUSH
42301: LD_INT 1
42303: DOUBLE
42304: EQUAL
42305: IFTRUE 42309
42307: GO 42389
42309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42310: LD_ADDR_VAR 0 12
42314: PUSH
42315: LD_VAR 0 18
42319: PPUSH
42320: LD_INT 22
42322: PUSH
42323: LD_VAR 0 16
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 58
42334: PUSH
42335: EMPTY
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 30
42343: PUSH
42344: LD_INT 32
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 30
42353: PUSH
42354: LD_INT 4
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 30
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: PPUSH
42382: CALL_OW 72
42386: ST_TO_ADDR
42387: GO 42611
42389: LD_INT 2
42391: DOUBLE
42392: EQUAL
42393: IFTRUE 42397
42395: GO 42459
42397: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42398: LD_ADDR_VAR 0 12
42402: PUSH
42403: LD_VAR 0 18
42407: PPUSH
42408: LD_INT 22
42410: PUSH
42411: LD_VAR 0 16
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: LD_INT 30
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 30
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PPUSH
42452: CALL_OW 72
42456: ST_TO_ADDR
42457: GO 42611
42459: LD_INT 3
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42467
42465: GO 42529
42467: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42468: LD_ADDR_VAR 0 12
42472: PUSH
42473: LD_VAR 0 18
42477: PPUSH
42478: LD_INT 22
42480: PUSH
42481: LD_VAR 0 16
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 30
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 30
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PPUSH
42522: CALL_OW 72
42526: ST_TO_ADDR
42527: GO 42611
42529: LD_INT 4
42531: DOUBLE
42532: EQUAL
42533: IFTRUE 42537
42535: GO 42610
42537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42538: LD_ADDR_VAR 0 12
42542: PUSH
42543: LD_VAR 0 18
42547: PPUSH
42548: LD_INT 22
42550: PUSH
42551: LD_VAR 0 16
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 30
42565: PUSH
42566: LD_INT 6
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 30
42575: PUSH
42576: LD_INT 7
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 30
42585: PUSH
42586: LD_INT 8
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PPUSH
42603: CALL_OW 72
42607: ST_TO_ADDR
42608: GO 42611
42610: POP
// if i = 1 then
42611: LD_VAR 0 8
42615: PUSH
42616: LD_INT 1
42618: EQUAL
42619: IFFALSE 42730
// begin tmp := [ ] ;
42621: LD_ADDR_VAR 0 19
42625: PUSH
42626: EMPTY
42627: ST_TO_ADDR
// for j in f do
42628: LD_ADDR_VAR 0 9
42632: PUSH
42633: LD_VAR 0 12
42637: PUSH
42638: FOR_IN
42639: IFFALSE 42712
// if GetBType ( j ) = b_bunker then
42641: LD_VAR 0 9
42645: PPUSH
42646: CALL_OW 266
42650: PUSH
42651: LD_INT 32
42653: EQUAL
42654: IFFALSE 42681
// tmp := Insert ( tmp , 1 , j ) else
42656: LD_ADDR_VAR 0 19
42660: PUSH
42661: LD_VAR 0 19
42665: PPUSH
42666: LD_INT 1
42668: PPUSH
42669: LD_VAR 0 9
42673: PPUSH
42674: CALL_OW 2
42678: ST_TO_ADDR
42679: GO 42710
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42681: LD_ADDR_VAR 0 19
42685: PUSH
42686: LD_VAR 0 19
42690: PPUSH
42691: LD_VAR 0 19
42695: PUSH
42696: LD_INT 1
42698: PLUS
42699: PPUSH
42700: LD_VAR 0 9
42704: PPUSH
42705: CALL_OW 2
42709: ST_TO_ADDR
42710: GO 42638
42712: POP
42713: POP
// if tmp then
42714: LD_VAR 0 19
42718: IFFALSE 42730
// f := tmp ;
42720: LD_ADDR_VAR 0 12
42724: PUSH
42725: LD_VAR 0 19
42729: ST_TO_ADDR
// end ; x := personel [ i ] ;
42730: LD_ADDR_VAR 0 13
42734: PUSH
42735: LD_VAR 0 6
42739: PUSH
42740: LD_VAR 0 8
42744: ARRAY
42745: ST_TO_ADDR
// if x = - 1 then
42746: LD_VAR 0 13
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: EQUAL
42755: IFFALSE 42966
// begin for j in f do
42757: LD_ADDR_VAR 0 9
42761: PUSH
42762: LD_VAR 0 12
42766: PUSH
42767: FOR_IN
42768: IFFALSE 42962
// repeat InitHc ;
42770: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42774: LD_VAR 0 9
42778: PPUSH
42779: CALL_OW 266
42783: PUSH
42784: LD_INT 5
42786: EQUAL
42787: IFFALSE 42857
// begin if UnitsInside ( j ) < 3 then
42789: LD_VAR 0 9
42793: PPUSH
42794: CALL_OW 313
42798: PUSH
42799: LD_INT 3
42801: LESS
42802: IFFALSE 42838
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42804: LD_INT 0
42806: PPUSH
42807: LD_INT 5
42809: PUSH
42810: LD_INT 8
42812: PUSH
42813: LD_INT 9
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: PUSH
42821: LD_VAR 0 17
42825: ARRAY
42826: PPUSH
42827: LD_VAR 0 4
42831: PPUSH
42832: CALL_OW 380
42836: GO 42855
// PrepareHuman ( false , i , skill ) ;
42838: LD_INT 0
42840: PPUSH
42841: LD_VAR 0 8
42845: PPUSH
42846: LD_VAR 0 4
42850: PPUSH
42851: CALL_OW 380
// end else
42855: GO 42874
// PrepareHuman ( false , i , skill ) ;
42857: LD_INT 0
42859: PPUSH
42860: LD_VAR 0 8
42864: PPUSH
42865: LD_VAR 0 4
42869: PPUSH
42870: CALL_OW 380
// un := CreateHuman ;
42874: LD_ADDR_VAR 0 14
42878: PUSH
42879: CALL_OW 44
42883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42884: LD_ADDR_VAR 0 7
42888: PUSH
42889: LD_VAR 0 7
42893: PPUSH
42894: LD_INT 1
42896: PPUSH
42897: LD_VAR 0 14
42901: PPUSH
42902: CALL_OW 2
42906: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42907: LD_VAR 0 14
42911: PPUSH
42912: LD_VAR 0 9
42916: PPUSH
42917: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42921: LD_VAR 0 9
42925: PPUSH
42926: CALL_OW 313
42930: PUSH
42931: LD_INT 6
42933: EQUAL
42934: IFTRUE 42958
42936: PUSH
42937: LD_VAR 0 9
42941: PPUSH
42942: CALL_OW 266
42946: PUSH
42947: LD_INT 32
42949: PUSH
42950: LD_INT 31
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: IN
42957: OR
42958: IFFALSE 42770
42960: GO 42767
42962: POP
42963: POP
// end else
42964: GO 43350
// for j = 1 to x do
42966: LD_ADDR_VAR 0 9
42970: PUSH
42971: DOUBLE
42972: LD_INT 1
42974: DEC
42975: ST_TO_ADDR
42976: LD_VAR 0 13
42980: PUSH
42981: FOR_TO
42982: IFFALSE 43348
// begin InitHc ;
42984: CALL_OW 19
// if not f then
42988: LD_VAR 0 12
42992: NOT
42993: IFFALSE 43082
// begin PrepareHuman ( false , i , skill ) ;
42995: LD_INT 0
42997: PPUSH
42998: LD_VAR 0 8
43002: PPUSH
43003: LD_VAR 0 4
43007: PPUSH
43008: CALL_OW 380
// un := CreateHuman ;
43012: LD_ADDR_VAR 0 14
43016: PUSH
43017: CALL_OW 44
43021: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43022: LD_ADDR_VAR 0 7
43026: PUSH
43027: LD_VAR 0 7
43031: PPUSH
43032: LD_INT 1
43034: PPUSH
43035: LD_VAR 0 14
43039: PPUSH
43040: CALL_OW 2
43044: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43045: LD_VAR 0 14
43049: PPUSH
43050: LD_VAR 0 1
43054: PPUSH
43055: CALL_OW 250
43059: PPUSH
43060: LD_VAR 0 1
43064: PPUSH
43065: CALL_OW 251
43069: PPUSH
43070: LD_INT 10
43072: PPUSH
43073: LD_INT 0
43075: PPUSH
43076: CALL_OW 50
// continue ;
43080: GO 42981
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43082: LD_VAR 0 12
43086: PUSH
43087: LD_INT 1
43089: ARRAY
43090: PPUSH
43091: CALL_OW 313
43095: IFFALSE 43123
43097: PUSH
43098: LD_VAR 0 12
43102: PUSH
43103: LD_INT 1
43105: ARRAY
43106: PPUSH
43107: CALL_OW 266
43111: PUSH
43112: LD_INT 32
43114: PUSH
43115: LD_INT 31
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: IN
43122: AND
43123: IFTRUE 43144
43125: PUSH
43126: LD_VAR 0 12
43130: PUSH
43131: LD_INT 1
43133: ARRAY
43134: PPUSH
43135: CALL_OW 313
43139: PUSH
43140: LD_INT 6
43142: EQUAL
43143: OR
43144: IFFALSE 43164
// f := Delete ( f , 1 ) ;
43146: LD_ADDR_VAR 0 12
43150: PUSH
43151: LD_VAR 0 12
43155: PPUSH
43156: LD_INT 1
43158: PPUSH
43159: CALL_OW 3
43163: ST_TO_ADDR
// if not f then
43164: LD_VAR 0 12
43168: NOT
43169: IFFALSE 43187
// begin x := x + 2 ;
43171: LD_ADDR_VAR 0 13
43175: PUSH
43176: LD_VAR 0 13
43180: PUSH
43181: LD_INT 2
43183: PLUS
43184: ST_TO_ADDR
// continue ;
43185: GO 42981
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43187: LD_VAR 0 12
43191: PUSH
43192: LD_INT 1
43194: ARRAY
43195: PPUSH
43196: CALL_OW 266
43200: PUSH
43201: LD_INT 5
43203: EQUAL
43204: IFFALSE 43278
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43206: LD_VAR 0 12
43210: PUSH
43211: LD_INT 1
43213: ARRAY
43214: PPUSH
43215: CALL_OW 313
43219: PUSH
43220: LD_INT 3
43222: LESS
43223: IFFALSE 43259
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43225: LD_INT 0
43227: PPUSH
43228: LD_INT 5
43230: PUSH
43231: LD_INT 8
43233: PUSH
43234: LD_INT 9
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: PUSH
43242: LD_VAR 0 17
43246: ARRAY
43247: PPUSH
43248: LD_VAR 0 4
43252: PPUSH
43253: CALL_OW 380
43257: GO 43276
// PrepareHuman ( false , i , skill ) ;
43259: LD_INT 0
43261: PPUSH
43262: LD_VAR 0 8
43266: PPUSH
43267: LD_VAR 0 4
43271: PPUSH
43272: CALL_OW 380
// end else
43276: GO 43295
// PrepareHuman ( false , i , skill ) ;
43278: LD_INT 0
43280: PPUSH
43281: LD_VAR 0 8
43285: PPUSH
43286: LD_VAR 0 4
43290: PPUSH
43291: CALL_OW 380
// un := CreateHuman ;
43295: LD_ADDR_VAR 0 14
43299: PUSH
43300: CALL_OW 44
43304: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43305: LD_ADDR_VAR 0 7
43309: PUSH
43310: LD_VAR 0 7
43314: PPUSH
43315: LD_INT 1
43317: PPUSH
43318: LD_VAR 0 14
43322: PPUSH
43323: CALL_OW 2
43327: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43328: LD_VAR 0 14
43332: PPUSH
43333: LD_VAR 0 12
43337: PUSH
43338: LD_INT 1
43340: ARRAY
43341: PPUSH
43342: CALL_OW 52
// end ;
43346: GO 42981
43348: POP
43349: POP
// end ;
43350: GO 42281
43352: POP
43353: POP
// result := result ^ buildings ;
43354: LD_ADDR_VAR 0 7
43358: PUSH
43359: LD_VAR 0 7
43363: PUSH
43364: LD_VAR 0 18
43368: ADD
43369: ST_TO_ADDR
// end else
43370: GO 43513
// begin for i = 1 to personel do
43372: LD_ADDR_VAR 0 8
43376: PUSH
43377: DOUBLE
43378: LD_INT 1
43380: DEC
43381: ST_TO_ADDR
43382: LD_VAR 0 6
43386: PUSH
43387: FOR_TO
43388: IFFALSE 43511
// begin if i > 4 then
43390: LD_VAR 0 8
43394: PUSH
43395: LD_INT 4
43397: GREATER
43398: IFFALSE 43402
// break ;
43400: GO 43511
// x := personel [ i ] ;
43402: LD_ADDR_VAR 0 13
43406: PUSH
43407: LD_VAR 0 6
43411: PUSH
43412: LD_VAR 0 8
43416: ARRAY
43417: ST_TO_ADDR
// if x = - 1 then
43418: LD_VAR 0 13
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: EQUAL
43427: IFFALSE 43431
// continue ;
43429: GO 43387
// PrepareHuman ( false , i , skill ) ;
43431: LD_INT 0
43433: PPUSH
43434: LD_VAR 0 8
43438: PPUSH
43439: LD_VAR 0 4
43443: PPUSH
43444: CALL_OW 380
// un := CreateHuman ;
43448: LD_ADDR_VAR 0 14
43452: PUSH
43453: CALL_OW 44
43457: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43458: LD_VAR 0 14
43462: PPUSH
43463: LD_VAR 0 1
43467: PPUSH
43468: CALL_OW 250
43472: PPUSH
43473: LD_VAR 0 1
43477: PPUSH
43478: CALL_OW 251
43482: PPUSH
43483: LD_INT 10
43485: PPUSH
43486: LD_INT 0
43488: PPUSH
43489: CALL_OW 50
// result := result ^ un ;
43493: LD_ADDR_VAR 0 7
43497: PUSH
43498: LD_VAR 0 7
43502: PUSH
43503: LD_VAR 0 14
43507: ADD
43508: ST_TO_ADDR
// end ;
43509: GO 43387
43511: POP
43512: POP
// end ; end ;
43513: LD_VAR 0 7
43517: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43518: LD_INT 0
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
// result := false ;
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_INT 0
43543: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43544: LD_VAR 0 1
43548: NOT
43549: IFTRUE 43574
43551: PUSH
43552: LD_VAR 0 1
43556: PPUSH
43557: CALL_OW 266
43561: PUSH
43562: LD_INT 32
43564: PUSH
43565: LD_INT 33
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: IN
43572: NOT
43573: OR
43574: IFFALSE 43578
// exit ;
43576: GO 44713
// nat := GetNation ( tower ) ;
43578: LD_ADDR_VAR 0 12
43582: PUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL_OW 248
43592: ST_TO_ADDR
// side := GetSide ( tower ) ;
43593: LD_ADDR_VAR 0 16
43597: PUSH
43598: LD_VAR 0 1
43602: PPUSH
43603: CALL_OW 255
43607: ST_TO_ADDR
// x := GetX ( tower ) ;
43608: LD_ADDR_VAR 0 10
43612: PUSH
43613: LD_VAR 0 1
43617: PPUSH
43618: CALL_OW 250
43622: ST_TO_ADDR
// y := GetY ( tower ) ;
43623: LD_ADDR_VAR 0 11
43627: PUSH
43628: LD_VAR 0 1
43632: PPUSH
43633: CALL_OW 251
43637: ST_TO_ADDR
// if not x or not y then
43638: LD_VAR 0 10
43642: NOT
43643: IFTRUE 43652
43645: PUSH
43646: LD_VAR 0 11
43650: NOT
43651: OR
43652: IFFALSE 43656
// exit ;
43654: GO 44713
// weapon := 0 ;
43656: LD_ADDR_VAR 0 18
43660: PUSH
43661: LD_INT 0
43663: ST_TO_ADDR
// fac_list := [ ] ;
43664: LD_ADDR_VAR 0 17
43668: PUSH
43669: EMPTY
43670: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43671: LD_ADDR_VAR 0 6
43675: PUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: CALL_OW 274
43685: PPUSH
43686: LD_VAR 0 2
43690: PPUSH
43691: LD_INT 0
43693: PPUSH
43694: CALL 41248 0 3
43698: PPUSH
43699: LD_INT 30
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PPUSH
43709: CALL_OW 72
43713: ST_TO_ADDR
// if not factories then
43714: LD_VAR 0 6
43718: NOT
43719: IFFALSE 43723
// exit ;
43721: GO 44713
// for i in factories do
43723: LD_ADDR_VAR 0 8
43727: PUSH
43728: LD_VAR 0 6
43732: PUSH
43733: FOR_IN
43734: IFFALSE 43759
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43736: LD_ADDR_VAR 0 17
43740: PUSH
43741: LD_VAR 0 17
43745: PUSH
43746: LD_VAR 0 8
43750: PPUSH
43751: CALL_OW 478
43755: UNION
43756: ST_TO_ADDR
43757: GO 43733
43759: POP
43760: POP
// if not fac_list then
43761: LD_VAR 0 17
43765: NOT
43766: IFFALSE 43770
// exit ;
43768: GO 44713
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43770: LD_ADDR_VAR 0 5
43774: PUSH
43775: LD_INT 4
43777: PUSH
43778: LD_INT 5
43780: PUSH
43781: LD_INT 9
43783: PUSH
43784: LD_INT 10
43786: PUSH
43787: LD_INT 6
43789: PUSH
43790: LD_INT 7
43792: PUSH
43793: LD_INT 11
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 27
43807: PUSH
43808: LD_INT 28
43810: PUSH
43811: LD_INT 26
43813: PUSH
43814: LD_INT 30
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 43
43825: PUSH
43826: LD_INT 44
43828: PUSH
43829: LD_INT 46
43831: PUSH
43832: LD_INT 45
43834: PUSH
43835: LD_INT 47
43837: PUSH
43838: LD_INT 49
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: PUSH
43854: LD_VAR 0 12
43858: ARRAY
43859: ST_TO_ADDR
// list := list isect fac_list ;
43860: LD_ADDR_VAR 0 5
43864: PUSH
43865: LD_VAR 0 5
43869: PUSH
43870: LD_VAR 0 17
43874: ISECT
43875: ST_TO_ADDR
// if not list then
43876: LD_VAR 0 5
43880: NOT
43881: IFFALSE 43885
// exit ;
43883: GO 44713
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43885: LD_VAR 0 12
43889: PUSH
43890: LD_INT 3
43892: EQUAL
43893: IFFALSE 43905
43895: PUSH
43896: LD_INT 49
43898: PUSH
43899: LD_VAR 0 5
43903: IN
43904: AND
43905: IFFALSE 43925
43907: PUSH
43908: LD_INT 31
43910: PPUSH
43911: LD_VAR 0 16
43915: PPUSH
43916: CALL_OW 321
43920: PUSH
43921: LD_INT 2
43923: EQUAL
43924: AND
43925: IFFALSE 43985
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43927: LD_INT 22
43929: PUSH
43930: LD_VAR 0 16
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 35
43941: PUSH
43942: LD_INT 49
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 91
43951: PUSH
43952: LD_VAR 0 1
43956: PUSH
43957: LD_INT 10
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: PPUSH
43970: CALL_OW 69
43974: NOT
43975: IFFALSE 43985
// weapon := ru_time_lapser ;
43977: LD_ADDR_VAR 0 18
43981: PUSH
43982: LD_INT 49
43984: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43985: LD_VAR 0 12
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: IN
44000: IFFALSE 44024
44002: PUSH
44003: LD_INT 11
44005: PUSH
44006: LD_VAR 0 5
44010: IN
44011: IFTRUE 44023
44013: PUSH
44014: LD_INT 30
44016: PUSH
44017: LD_VAR 0 5
44021: IN
44022: OR
44023: AND
44024: IFFALSE 44044
44026: PUSH
44027: LD_INT 6
44029: PPUSH
44030: LD_VAR 0 16
44034: PPUSH
44035: CALL_OW 321
44039: PUSH
44040: LD_INT 2
44042: EQUAL
44043: AND
44044: IFFALSE 44211
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44046: LD_INT 22
44048: PUSH
44049: LD_VAR 0 16
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 35
44063: PUSH
44064: LD_INT 11
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 35
44073: PUSH
44074: LD_INT 30
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 91
44088: PUSH
44089: LD_VAR 0 1
44093: PUSH
44094: LD_INT 18
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: PPUSH
44107: CALL_OW 69
44111: NOT
44112: IFFALSE 44188
44114: PUSH
44115: LD_INT 22
44117: PUSH
44118: LD_VAR 0 16
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 30
44132: PUSH
44133: LD_INT 32
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 30
44142: PUSH
44143: LD_INT 33
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 91
44157: PUSH
44158: LD_VAR 0 1
44162: PUSH
44163: LD_INT 12
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: PPUSH
44179: CALL_OW 69
44183: PUSH
44184: LD_INT 2
44186: GREATER
44187: AND
44188: IFFALSE 44211
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44190: LD_ADDR_VAR 0 18
44194: PUSH
44195: LD_INT 11
44197: PUSH
44198: LD_INT 30
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_VAR 0 12
44209: ARRAY
44210: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44211: LD_VAR 0 18
44215: NOT
44216: IFFALSE 44236
44218: PUSH
44219: LD_INT 40
44221: PPUSH
44222: LD_VAR 0 16
44226: PPUSH
44227: CALL_OW 321
44231: PUSH
44232: LD_INT 2
44234: EQUAL
44235: AND
44236: IFFALSE 44272
44238: PUSH
44239: LD_INT 7
44241: PUSH
44242: LD_VAR 0 5
44246: IN
44247: IFTRUE 44259
44249: PUSH
44250: LD_INT 28
44252: PUSH
44253: LD_VAR 0 5
44257: IN
44258: OR
44259: IFTRUE 44271
44261: PUSH
44262: LD_INT 45
44264: PUSH
44265: LD_VAR 0 5
44269: IN
44270: OR
44271: AND
44272: IFFALSE 44526
// begin hex := GetHexInfo ( x , y ) ;
44274: LD_ADDR_VAR 0 4
44278: PUSH
44279: LD_VAR 0 10
44283: PPUSH
44284: LD_VAR 0 11
44288: PPUSH
44289: CALL_OW 546
44293: ST_TO_ADDR
// if hex [ 1 ] then
44294: LD_VAR 0 4
44298: PUSH
44299: LD_INT 1
44301: ARRAY
44302: IFFALSE 44306
// exit ;
44304: GO 44713
// height := hex [ 2 ] ;
44306: LD_ADDR_VAR 0 15
44310: PUSH
44311: LD_VAR 0 4
44315: PUSH
44316: LD_INT 2
44318: ARRAY
44319: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44320: LD_ADDR_VAR 0 14
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 3
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// for i in tmp do
44343: LD_ADDR_VAR 0 8
44347: PUSH
44348: LD_VAR 0 14
44352: PUSH
44353: FOR_IN
44354: IFFALSE 44524
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44356: LD_ADDR_VAR 0 9
44360: PUSH
44361: LD_VAR 0 10
44365: PPUSH
44366: LD_VAR 0 8
44370: PPUSH
44371: LD_INT 5
44373: PPUSH
44374: CALL_OW 272
44378: PUSH
44379: LD_VAR 0 11
44383: PPUSH
44384: LD_VAR 0 8
44388: PPUSH
44389: LD_INT 5
44391: PPUSH
44392: CALL_OW 273
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44401: LD_VAR 0 9
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: PPUSH
44410: LD_VAR 0 9
44414: PUSH
44415: LD_INT 2
44417: ARRAY
44418: PPUSH
44419: CALL_OW 488
44423: IFFALSE 44522
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44425: LD_ADDR_VAR 0 4
44429: PUSH
44430: LD_VAR 0 9
44434: PUSH
44435: LD_INT 1
44437: ARRAY
44438: PPUSH
44439: LD_VAR 0 9
44443: PUSH
44444: LD_INT 2
44446: ARRAY
44447: PPUSH
44448: CALL_OW 546
44452: ST_TO_ADDR
// if hex [ 1 ] then
44453: LD_VAR 0 4
44457: PUSH
44458: LD_INT 1
44460: ARRAY
44461: IFFALSE 44465
// continue ;
44463: GO 44353
// h := hex [ 2 ] ;
44465: LD_ADDR_VAR 0 13
44469: PUSH
44470: LD_VAR 0 4
44474: PUSH
44475: LD_INT 2
44477: ARRAY
44478: ST_TO_ADDR
// if h + 7 < height then
44479: LD_VAR 0 13
44483: PUSH
44484: LD_INT 7
44486: PLUS
44487: PUSH
44488: LD_VAR 0 15
44492: LESS
44493: IFFALSE 44522
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44495: LD_ADDR_VAR 0 18
44499: PUSH
44500: LD_INT 7
44502: PUSH
44503: LD_INT 28
44505: PUSH
44506: LD_INT 45
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: PUSH
44514: LD_VAR 0 12
44518: ARRAY
44519: ST_TO_ADDR
// break ;
44520: GO 44524
// end ; end ; end ;
44522: GO 44353
44524: POP
44525: POP
// end ; if not weapon then
44526: LD_VAR 0 18
44530: NOT
44531: IFFALSE 44591
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44533: LD_ADDR_VAR 0 5
44537: PUSH
44538: LD_VAR 0 5
44542: PUSH
44543: LD_INT 11
44545: PUSH
44546: LD_INT 30
44548: PUSH
44549: LD_INT 49
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: DIFF
44557: ST_TO_ADDR
// if not list then
44558: LD_VAR 0 5
44562: NOT
44563: IFFALSE 44567
// exit ;
44565: GO 44713
// weapon := list [ rand ( 1 , list ) ] ;
44567: LD_ADDR_VAR 0 18
44571: PUSH
44572: LD_VAR 0 5
44576: PUSH
44577: LD_INT 1
44579: PPUSH
44580: LD_VAR 0 5
44584: PPUSH
44585: CALL_OW 12
44589: ARRAY
44590: ST_TO_ADDR
// end ; if weapon then
44591: LD_VAR 0 18
44595: IFFALSE 44713
// begin tmp := CostOfWeapon ( weapon ) ;
44597: LD_ADDR_VAR 0 14
44601: PUSH
44602: LD_VAR 0 18
44606: PPUSH
44607: CALL_OW 451
44611: ST_TO_ADDR
// j := GetBase ( tower ) ;
44612: LD_ADDR_VAR 0 9
44616: PUSH
44617: LD_VAR 0 1
44621: PPUSH
44622: CALL_OW 274
44626: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44627: LD_VAR 0 9
44631: PPUSH
44632: LD_INT 1
44634: PPUSH
44635: CALL_OW 275
44639: PUSH
44640: LD_VAR 0 14
44644: PUSH
44645: LD_INT 1
44647: ARRAY
44648: GREATEREQUAL
44649: IFFALSE 44675
44651: PUSH
44652: LD_VAR 0 9
44656: PPUSH
44657: LD_INT 2
44659: PPUSH
44660: CALL_OW 275
44664: PUSH
44665: LD_VAR 0 14
44669: PUSH
44670: LD_INT 2
44672: ARRAY
44673: GREATEREQUAL
44674: AND
44675: IFFALSE 44701
44677: PUSH
44678: LD_VAR 0 9
44682: PPUSH
44683: LD_INT 3
44685: PPUSH
44686: CALL_OW 275
44690: PUSH
44691: LD_VAR 0 14
44695: PUSH
44696: LD_INT 3
44698: ARRAY
44699: GREATEREQUAL
44700: AND
44701: IFFALSE 44713
// result := weapon ;
44703: LD_ADDR_VAR 0 3
44707: PUSH
44708: LD_VAR 0 18
44712: ST_TO_ADDR
// end ; end ;
44713: LD_VAR 0 3
44717: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44718: LD_INT 0
44720: PPUSH
44721: PPUSH
// result := true ;
44722: LD_ADDR_VAR 0 3
44726: PUSH
44727: LD_INT 1
44729: ST_TO_ADDR
// if array1 = array2 then
44730: LD_VAR 0 1
44734: PUSH
44735: LD_VAR 0 2
44739: EQUAL
44740: IFFALSE 44800
// begin for i = 1 to array1 do
44742: LD_ADDR_VAR 0 4
44746: PUSH
44747: DOUBLE
44748: LD_INT 1
44750: DEC
44751: ST_TO_ADDR
44752: LD_VAR 0 1
44756: PUSH
44757: FOR_TO
44758: IFFALSE 44796
// if array1 [ i ] <> array2 [ i ] then
44760: LD_VAR 0 1
44764: PUSH
44765: LD_VAR 0 4
44769: ARRAY
44770: PUSH
44771: LD_VAR 0 2
44775: PUSH
44776: LD_VAR 0 4
44780: ARRAY
44781: NONEQUAL
44782: IFFALSE 44794
// begin result := false ;
44784: LD_ADDR_VAR 0 3
44788: PUSH
44789: LD_INT 0
44791: ST_TO_ADDR
// break ;
44792: GO 44796
// end ;
44794: GO 44757
44796: POP
44797: POP
// end else
44798: GO 44808
// result := false ;
44800: LD_ADDR_VAR 0 3
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// end ;
44808: LD_VAR 0 3
44812: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44813: LD_INT 0
44815: PPUSH
44816: PPUSH
// if not array1 or not array2 then
44817: LD_VAR 0 1
44821: NOT
44822: IFTRUE 44831
44824: PUSH
44825: LD_VAR 0 2
44829: NOT
44830: OR
44831: IFFALSE 44835
// exit ;
44833: GO 44899
// result := true ;
44835: LD_ADDR_VAR 0 3
44839: PUSH
44840: LD_INT 1
44842: ST_TO_ADDR
// for i = 1 to array1 do
44843: LD_ADDR_VAR 0 4
44847: PUSH
44848: DOUBLE
44849: LD_INT 1
44851: DEC
44852: ST_TO_ADDR
44853: LD_VAR 0 1
44857: PUSH
44858: FOR_TO
44859: IFFALSE 44897
// if array1 [ i ] <> array2 [ i ] then
44861: LD_VAR 0 1
44865: PUSH
44866: LD_VAR 0 4
44870: ARRAY
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: LD_VAR 0 4
44881: ARRAY
44882: NONEQUAL
44883: IFFALSE 44895
// begin result := false ;
44885: LD_ADDR_VAR 0 3
44889: PUSH
44890: LD_INT 0
44892: ST_TO_ADDR
// break ;
44893: GO 44897
// end ;
44895: GO 44858
44897: POP
44898: POP
// end ;
44899: LD_VAR 0 3
44903: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44904: LD_INT 0
44906: PPUSH
44907: PPUSH
44908: PPUSH
// pom := GetBase ( fac ) ;
44909: LD_ADDR_VAR 0 5
44913: PUSH
44914: LD_VAR 0 1
44918: PPUSH
44919: CALL_OW 274
44923: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44924: LD_ADDR_VAR 0 4
44928: PUSH
44929: LD_VAR 0 2
44933: PUSH
44934: LD_INT 1
44936: ARRAY
44937: PPUSH
44938: LD_VAR 0 2
44942: PUSH
44943: LD_INT 2
44945: ARRAY
44946: PPUSH
44947: LD_VAR 0 2
44951: PUSH
44952: LD_INT 3
44954: ARRAY
44955: PPUSH
44956: LD_VAR 0 2
44960: PUSH
44961: LD_INT 4
44963: ARRAY
44964: PPUSH
44965: CALL_OW 449
44969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44970: LD_ADDR_VAR 0 3
44974: PUSH
44975: LD_VAR 0 5
44979: PPUSH
44980: LD_INT 1
44982: PPUSH
44983: CALL_OW 275
44987: PUSH
44988: LD_VAR 0 4
44992: PUSH
44993: LD_INT 1
44995: ARRAY
44996: GREATEREQUAL
44997: IFFALSE 45023
44999: PUSH
45000: LD_VAR 0 5
45004: PPUSH
45005: LD_INT 2
45007: PPUSH
45008: CALL_OW 275
45012: PUSH
45013: LD_VAR 0 4
45017: PUSH
45018: LD_INT 2
45020: ARRAY
45021: GREATEREQUAL
45022: AND
45023: IFFALSE 45049
45025: PUSH
45026: LD_VAR 0 5
45030: PPUSH
45031: LD_INT 3
45033: PPUSH
45034: CALL_OW 275
45038: PUSH
45039: LD_VAR 0 4
45043: PUSH
45044: LD_INT 3
45046: ARRAY
45047: GREATEREQUAL
45048: AND
45049: ST_TO_ADDR
// end ;
45050: LD_VAR 0 3
45054: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45055: LD_INT 0
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
// pom := GetBase ( building ) ;
45061: LD_ADDR_VAR 0 3
45065: PUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 274
45075: ST_TO_ADDR
// if not pom then
45076: LD_VAR 0 3
45080: NOT
45081: IFFALSE 45085
// exit ;
45083: GO 45259
// btype := GetBType ( building ) ;
45085: LD_ADDR_VAR 0 5
45089: PUSH
45090: LD_VAR 0 1
45094: PPUSH
45095: CALL_OW 266
45099: ST_TO_ADDR
// if btype = b_armoury then
45100: LD_VAR 0 5
45104: PUSH
45105: LD_INT 4
45107: EQUAL
45108: IFFALSE 45118
// btype := b_barracks ;
45110: LD_ADDR_VAR 0 5
45114: PUSH
45115: LD_INT 5
45117: ST_TO_ADDR
// if btype = b_depot then
45118: LD_VAR 0 5
45122: PUSH
45123: LD_INT 0
45125: EQUAL
45126: IFFALSE 45136
// btype := b_warehouse ;
45128: LD_ADDR_VAR 0 5
45132: PUSH
45133: LD_INT 1
45135: ST_TO_ADDR
// if btype = b_workshop then
45136: LD_VAR 0 5
45140: PUSH
45141: LD_INT 2
45143: EQUAL
45144: IFFALSE 45154
// btype := b_factory ;
45146: LD_ADDR_VAR 0 5
45150: PUSH
45151: LD_INT 3
45153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45154: LD_ADDR_VAR 0 4
45158: PUSH
45159: LD_VAR 0 5
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 248
45173: PPUSH
45174: CALL_OW 450
45178: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45179: LD_ADDR_VAR 0 2
45183: PUSH
45184: LD_VAR 0 3
45188: PPUSH
45189: LD_INT 1
45191: PPUSH
45192: CALL_OW 275
45196: PUSH
45197: LD_VAR 0 4
45201: PUSH
45202: LD_INT 1
45204: ARRAY
45205: GREATEREQUAL
45206: IFFALSE 45232
45208: PUSH
45209: LD_VAR 0 3
45213: PPUSH
45214: LD_INT 2
45216: PPUSH
45217: CALL_OW 275
45221: PUSH
45222: LD_VAR 0 4
45226: PUSH
45227: LD_INT 2
45229: ARRAY
45230: GREATEREQUAL
45231: AND
45232: IFFALSE 45258
45234: PUSH
45235: LD_VAR 0 3
45239: PPUSH
45240: LD_INT 3
45242: PPUSH
45243: CALL_OW 275
45247: PUSH
45248: LD_VAR 0 4
45252: PUSH
45253: LD_INT 3
45255: ARRAY
45256: GREATEREQUAL
45257: AND
45258: ST_TO_ADDR
// end ;
45259: LD_VAR 0 2
45263: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45264: LD_INT 0
45266: PPUSH
45267: PPUSH
45268: PPUSH
// pom := GetBase ( building ) ;
45269: LD_ADDR_VAR 0 4
45273: PUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 274
45283: ST_TO_ADDR
// if not pom then
45284: LD_VAR 0 4
45288: NOT
45289: IFFALSE 45293
// exit ;
45291: GO 45398
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45293: LD_ADDR_VAR 0 5
45297: PUSH
45298: LD_VAR 0 2
45302: PPUSH
45303: LD_VAR 0 1
45307: PPUSH
45308: CALL_OW 248
45312: PPUSH
45313: CALL_OW 450
45317: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_VAR 0 4
45327: PPUSH
45328: LD_INT 1
45330: PPUSH
45331: CALL_OW 275
45335: PUSH
45336: LD_VAR 0 5
45340: PUSH
45341: LD_INT 1
45343: ARRAY
45344: GREATEREQUAL
45345: IFFALSE 45371
45347: PUSH
45348: LD_VAR 0 4
45352: PPUSH
45353: LD_INT 2
45355: PPUSH
45356: CALL_OW 275
45360: PUSH
45361: LD_VAR 0 5
45365: PUSH
45366: LD_INT 2
45368: ARRAY
45369: GREATEREQUAL
45370: AND
45371: IFFALSE 45397
45373: PUSH
45374: LD_VAR 0 4
45378: PPUSH
45379: LD_INT 3
45381: PPUSH
45382: CALL_OW 275
45386: PUSH
45387: LD_VAR 0 5
45391: PUSH
45392: LD_INT 3
45394: ARRAY
45395: GREATEREQUAL
45396: AND
45397: ST_TO_ADDR
// end ;
45398: LD_VAR 0 3
45402: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45403: LD_INT 0
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
// result := false ;
45416: LD_ADDR_VAR 0 8
45420: PUSH
45421: LD_INT 0
45423: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45424: LD_VAR 0 5
45428: NOT
45429: IFTRUE 45438
45431: PUSH
45432: LD_VAR 0 1
45436: NOT
45437: OR
45438: IFTRUE 45447
45440: PUSH
45441: LD_VAR 0 2
45445: NOT
45446: OR
45447: IFTRUE 45456
45449: PUSH
45450: LD_VAR 0 3
45454: NOT
45455: OR
45456: IFFALSE 45460
// exit ;
45458: GO 46286
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45460: LD_ADDR_VAR 0 14
45464: PUSH
45465: LD_VAR 0 1
45469: PPUSH
45470: LD_VAR 0 2
45474: PPUSH
45475: LD_VAR 0 3
45479: PPUSH
45480: LD_VAR 0 4
45484: PPUSH
45485: LD_VAR 0 5
45489: PUSH
45490: LD_INT 1
45492: ARRAY
45493: PPUSH
45494: CALL_OW 248
45498: PPUSH
45499: LD_INT 0
45501: PPUSH
45502: CALL 47567 0 6
45506: ST_TO_ADDR
// if not hexes then
45507: LD_VAR 0 14
45511: NOT
45512: IFFALSE 45516
// exit ;
45514: GO 46286
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45516: LD_ADDR_VAR 0 17
45520: PUSH
45521: LD_VAR 0 5
45525: PPUSH
45526: LD_INT 22
45528: PUSH
45529: LD_VAR 0 13
45533: PPUSH
45534: CALL_OW 255
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 30
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 30
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PPUSH
45575: CALL_OW 72
45579: ST_TO_ADDR
// for i = 1 to hexes do
45580: LD_ADDR_VAR 0 9
45584: PUSH
45585: DOUBLE
45586: LD_INT 1
45588: DEC
45589: ST_TO_ADDR
45590: LD_VAR 0 14
45594: PUSH
45595: FOR_TO
45596: IFFALSE 46284
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45598: LD_ADDR_VAR 0 13
45602: PUSH
45603: LD_VAR 0 14
45607: PUSH
45608: LD_VAR 0 9
45612: ARRAY
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PPUSH
45618: LD_VAR 0 14
45622: PUSH
45623: LD_VAR 0 9
45627: ARRAY
45628: PUSH
45629: LD_INT 2
45631: ARRAY
45632: PPUSH
45633: CALL_OW 428
45637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45638: LD_VAR 0 14
45642: PUSH
45643: LD_VAR 0 9
45647: ARRAY
45648: PUSH
45649: LD_INT 1
45651: ARRAY
45652: PPUSH
45653: LD_VAR 0 14
45657: PUSH
45658: LD_VAR 0 9
45662: ARRAY
45663: PUSH
45664: LD_INT 2
45666: ARRAY
45667: PPUSH
45668: CALL_OW 351
45672: IFTRUE 45711
45674: PUSH
45675: LD_VAR 0 14
45679: PUSH
45680: LD_VAR 0 9
45684: ARRAY
45685: PUSH
45686: LD_INT 1
45688: ARRAY
45689: PPUSH
45690: LD_VAR 0 14
45694: PUSH
45695: LD_VAR 0 9
45699: ARRAY
45700: PUSH
45701: LD_INT 2
45703: ARRAY
45704: PPUSH
45705: CALL_OW 488
45709: NOT
45710: OR
45711: IFTRUE 45728
45713: PUSH
45714: LD_VAR 0 13
45718: PPUSH
45719: CALL_OW 247
45723: PUSH
45724: LD_INT 3
45726: EQUAL
45727: OR
45728: IFFALSE 45734
// exit ;
45730: POP
45731: POP
45732: GO 46286
// if not tmp then
45734: LD_VAR 0 13
45738: NOT
45739: IFFALSE 45743
// continue ;
45741: GO 45595
// result := true ;
45743: LD_ADDR_VAR 0 8
45747: PUSH
45748: LD_INT 1
45750: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45751: LD_VAR 0 6
45755: IFFALSE 45772
45757: PUSH
45758: LD_VAR 0 13
45762: PPUSH
45763: CALL_OW 247
45767: PUSH
45768: LD_INT 2
45770: EQUAL
45771: AND
45772: IFFALSE 45789
45774: PUSH
45775: LD_VAR 0 13
45779: PPUSH
45780: CALL_OW 263
45784: PUSH
45785: LD_INT 1
45787: EQUAL
45788: AND
45789: IFFALSE 45953
// begin if IsDrivenBy ( tmp ) then
45791: LD_VAR 0 13
45795: PPUSH
45796: CALL_OW 311
45800: IFFALSE 45804
// continue ;
45802: GO 45595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45804: LD_VAR 0 6
45808: PPUSH
45809: LD_INT 3
45811: PUSH
45812: LD_INT 60
45814: PUSH
45815: EMPTY
45816: LIST
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: LD_INT 55
45827: PUSH
45828: EMPTY
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PPUSH
45839: CALL_OW 72
45843: IFFALSE 45951
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45845: LD_ADDR_VAR 0 18
45849: PUSH
45850: LD_VAR 0 6
45854: PPUSH
45855: LD_INT 3
45857: PUSH
45858: LD_INT 60
45860: PUSH
45861: EMPTY
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: LD_INT 55
45873: PUSH
45874: EMPTY
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PPUSH
45885: CALL_OW 72
45889: PUSH
45890: LD_INT 1
45892: ARRAY
45893: ST_TO_ADDR
// if IsInUnit ( driver ) then
45894: LD_VAR 0 18
45898: PPUSH
45899: CALL_OW 310
45903: IFFALSE 45914
// ComExit ( driver ) ;
45905: LD_VAR 0 18
45909: PPUSH
45910: CALL 71567 0 1
// AddComEnterUnit ( driver , tmp ) ;
45914: LD_VAR 0 18
45918: PPUSH
45919: LD_VAR 0 13
45923: PPUSH
45924: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45928: LD_VAR 0 18
45932: PPUSH
45933: LD_VAR 0 7
45937: PPUSH
45938: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45942: LD_VAR 0 18
45946: PPUSH
45947: CALL_OW 181
// end ; continue ;
45951: GO 45595
// end ; if not cleaners or not tmp in cleaners then
45953: LD_VAR 0 6
45957: NOT
45958: IFTRUE 45973
45960: PUSH
45961: LD_VAR 0 13
45965: PUSH
45966: LD_VAR 0 6
45970: IN
45971: NOT
45972: OR
45973: IFFALSE 46282
// begin if dep then
45975: LD_VAR 0 17
45979: IFFALSE 46115
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45981: LD_ADDR_VAR 0 16
45985: PUSH
45986: LD_VAR 0 17
45990: PUSH
45991: LD_INT 1
45993: ARRAY
45994: PPUSH
45995: CALL_OW 250
45999: PPUSH
46000: LD_VAR 0 17
46004: PUSH
46005: LD_INT 1
46007: ARRAY
46008: PPUSH
46009: CALL_OW 254
46013: PPUSH
46014: LD_INT 5
46016: PPUSH
46017: CALL_OW 272
46021: PUSH
46022: LD_VAR 0 17
46026: PUSH
46027: LD_INT 1
46029: ARRAY
46030: PPUSH
46031: CALL_OW 251
46035: PPUSH
46036: LD_VAR 0 17
46040: PUSH
46041: LD_INT 1
46043: ARRAY
46044: PPUSH
46045: CALL_OW 254
46049: PPUSH
46050: LD_INT 5
46052: PPUSH
46053: CALL_OW 273
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46062: LD_VAR 0 16
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: PPUSH
46071: LD_VAR 0 16
46075: PUSH
46076: LD_INT 2
46078: ARRAY
46079: PPUSH
46080: CALL_OW 488
46084: IFFALSE 46115
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46086: LD_VAR 0 13
46090: PPUSH
46091: LD_VAR 0 16
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PPUSH
46100: LD_VAR 0 16
46104: PUSH
46105: LD_INT 2
46107: ARRAY
46108: PPUSH
46109: CALL_OW 111
// continue ;
46113: GO 45595
// end ; end ; r := GetDir ( tmp ) ;
46115: LD_ADDR_VAR 0 15
46119: PUSH
46120: LD_VAR 0 13
46124: PPUSH
46125: CALL_OW 254
46129: ST_TO_ADDR
// if r = 5 then
46130: LD_VAR 0 15
46134: PUSH
46135: LD_INT 5
46137: EQUAL
46138: IFFALSE 46148
// r := 0 ;
46140: LD_ADDR_VAR 0 15
46144: PUSH
46145: LD_INT 0
46147: ST_TO_ADDR
// for j = r to 5 do
46148: LD_ADDR_VAR 0 10
46152: PUSH
46153: DOUBLE
46154: LD_VAR 0 15
46158: DEC
46159: ST_TO_ADDR
46160: LD_INT 5
46162: PUSH
46163: FOR_TO
46164: IFFALSE 46280
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46166: LD_ADDR_VAR 0 11
46170: PUSH
46171: LD_VAR 0 13
46175: PPUSH
46176: CALL_OW 250
46180: PPUSH
46181: LD_VAR 0 10
46185: PPUSH
46186: LD_INT 2
46188: PPUSH
46189: CALL_OW 272
46193: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46194: LD_ADDR_VAR 0 12
46198: PUSH
46199: LD_VAR 0 13
46203: PPUSH
46204: CALL_OW 251
46208: PPUSH
46209: LD_VAR 0 10
46213: PPUSH
46214: LD_INT 2
46216: PPUSH
46217: CALL_OW 273
46221: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46222: LD_VAR 0 11
46226: PPUSH
46227: LD_VAR 0 12
46231: PPUSH
46232: CALL_OW 488
46236: IFFALSE 46255
46238: PUSH
46239: LD_VAR 0 11
46243: PPUSH
46244: LD_VAR 0 12
46248: PPUSH
46249: CALL_OW 428
46253: NOT
46254: AND
46255: IFFALSE 46278
// begin ComMoveXY ( tmp , _x , _y ) ;
46257: LD_VAR 0 13
46261: PPUSH
46262: LD_VAR 0 11
46266: PPUSH
46267: LD_VAR 0 12
46271: PPUSH
46272: CALL_OW 111
// break ;
46276: GO 46280
// end ; end ;
46278: GO 46163
46280: POP
46281: POP
// end ; end ;
46282: GO 45595
46284: POP
46285: POP
// end ;
46286: LD_VAR 0 8
46290: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46291: LD_INT 0
46293: PPUSH
// result := true ;
46294: LD_ADDR_VAR 0 3
46298: PUSH
46299: LD_INT 1
46301: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46302: LD_VAR 0 2
46306: PUSH
46307: LD_INT 24
46309: DOUBLE
46310: EQUAL
46311: IFTRUE 46321
46313: LD_INT 33
46315: DOUBLE
46316: EQUAL
46317: IFTRUE 46321
46319: GO 46346
46321: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46322: LD_ADDR_VAR 0 3
46326: PUSH
46327: LD_INT 32
46329: PPUSH
46330: LD_VAR 0 1
46334: PPUSH
46335: CALL_OW 321
46339: PUSH
46340: LD_INT 2
46342: EQUAL
46343: ST_TO_ADDR
46344: GO 46662
46346: LD_INT 20
46348: DOUBLE
46349: EQUAL
46350: IFTRUE 46354
46352: GO 46379
46354: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_INT 6
46362: PPUSH
46363: LD_VAR 0 1
46367: PPUSH
46368: CALL_OW 321
46372: PUSH
46373: LD_INT 2
46375: EQUAL
46376: ST_TO_ADDR
46377: GO 46662
46379: LD_INT 22
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46393
46385: LD_INT 36
46387: DOUBLE
46388: EQUAL
46389: IFTRUE 46393
46391: GO 46418
46393: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46394: LD_ADDR_VAR 0 3
46398: PUSH
46399: LD_INT 15
46401: PPUSH
46402: LD_VAR 0 1
46406: PPUSH
46407: CALL_OW 321
46411: PUSH
46412: LD_INT 2
46414: EQUAL
46415: ST_TO_ADDR
46416: GO 46662
46418: LD_INT 30
46420: DOUBLE
46421: EQUAL
46422: IFTRUE 46426
46424: GO 46451
46426: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46427: LD_ADDR_VAR 0 3
46431: PUSH
46432: LD_INT 20
46434: PPUSH
46435: LD_VAR 0 1
46439: PPUSH
46440: CALL_OW 321
46444: PUSH
46445: LD_INT 2
46447: EQUAL
46448: ST_TO_ADDR
46449: GO 46662
46451: LD_INT 28
46453: DOUBLE
46454: EQUAL
46455: IFTRUE 46465
46457: LD_INT 21
46459: DOUBLE
46460: EQUAL
46461: IFTRUE 46465
46463: GO 46490
46465: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46466: LD_ADDR_VAR 0 3
46470: PUSH
46471: LD_INT 21
46473: PPUSH
46474: LD_VAR 0 1
46478: PPUSH
46479: CALL_OW 321
46483: PUSH
46484: LD_INT 2
46486: EQUAL
46487: ST_TO_ADDR
46488: GO 46662
46490: LD_INT 16
46492: DOUBLE
46493: EQUAL
46494: IFTRUE 46498
46496: GO 46523
46498: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: LD_INT 84
46506: PPUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: CALL_OW 321
46516: PUSH
46517: LD_INT 2
46519: EQUAL
46520: ST_TO_ADDR
46521: GO 46662
46523: LD_INT 19
46525: DOUBLE
46526: EQUAL
46527: IFTRUE 46537
46529: LD_INT 23
46531: DOUBLE
46532: EQUAL
46533: IFTRUE 46537
46535: GO 46562
46537: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46538: LD_ADDR_VAR 0 3
46542: PUSH
46543: LD_INT 83
46545: PPUSH
46546: LD_VAR 0 1
46550: PPUSH
46551: CALL_OW 321
46555: PUSH
46556: LD_INT 2
46558: EQUAL
46559: ST_TO_ADDR
46560: GO 46662
46562: LD_INT 17
46564: DOUBLE
46565: EQUAL
46566: IFTRUE 46570
46568: GO 46595
46570: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46571: LD_ADDR_VAR 0 3
46575: PUSH
46576: LD_INT 39
46578: PPUSH
46579: LD_VAR 0 1
46583: PPUSH
46584: CALL_OW 321
46588: PUSH
46589: LD_INT 2
46591: EQUAL
46592: ST_TO_ADDR
46593: GO 46662
46595: LD_INT 18
46597: DOUBLE
46598: EQUAL
46599: IFTRUE 46603
46601: GO 46628
46603: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46604: LD_ADDR_VAR 0 3
46608: PUSH
46609: LD_INT 40
46611: PPUSH
46612: LD_VAR 0 1
46616: PPUSH
46617: CALL_OW 321
46621: PUSH
46622: LD_INT 2
46624: EQUAL
46625: ST_TO_ADDR
46626: GO 46662
46628: LD_INT 27
46630: DOUBLE
46631: EQUAL
46632: IFTRUE 46636
46634: GO 46661
46636: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46637: LD_ADDR_VAR 0 3
46641: PUSH
46642: LD_INT 35
46644: PPUSH
46645: LD_VAR 0 1
46649: PPUSH
46650: CALL_OW 321
46654: PUSH
46655: LD_INT 2
46657: EQUAL
46658: ST_TO_ADDR
46659: GO 46662
46661: POP
// end ;
46662: LD_VAR 0 3
46666: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46667: LD_INT 0
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
// result := false ;
46680: LD_ADDR_VAR 0 6
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
// if btype = b_depot then
46688: LD_VAR 0 2
46692: PUSH
46693: LD_INT 0
46695: EQUAL
46696: IFFALSE 46708
// begin result := true ;
46698: LD_ADDR_VAR 0 6
46702: PUSH
46703: LD_INT 1
46705: ST_TO_ADDR
// exit ;
46706: GO 47562
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46708: LD_VAR 0 1
46712: NOT
46713: IFTRUE 46738
46715: PUSH
46716: LD_VAR 0 1
46720: PPUSH
46721: CALL_OW 266
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: IN
46736: NOT
46737: OR
46738: IFTRUE 46747
46740: PUSH
46741: LD_VAR 0 2
46745: NOT
46746: OR
46747: IFTRUE 46783
46749: PUSH
46750: LD_VAR 0 5
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: LD_INT 4
46769: PUSH
46770: LD_INT 5
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: IN
46781: NOT
46782: OR
46783: IFTRUE 46802
46785: PUSH
46786: LD_VAR 0 3
46790: PPUSH
46791: LD_VAR 0 4
46795: PPUSH
46796: CALL_OW 488
46800: NOT
46801: OR
46802: IFFALSE 46806
// exit ;
46804: GO 47562
// side := GetSide ( depot ) ;
46806: LD_ADDR_VAR 0 9
46810: PUSH
46811: LD_VAR 0 1
46815: PPUSH
46816: CALL_OW 255
46820: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46821: LD_VAR 0 9
46825: PPUSH
46826: LD_VAR 0 2
46830: PPUSH
46831: CALL 46291 0 2
46835: NOT
46836: IFFALSE 46840
// exit ;
46838: GO 47562
// pom := GetBase ( depot ) ;
46840: LD_ADDR_VAR 0 10
46844: PUSH
46845: LD_VAR 0 1
46849: PPUSH
46850: CALL_OW 274
46854: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46855: LD_ADDR_VAR 0 11
46859: PUSH
46860: LD_VAR 0 2
46864: PPUSH
46865: LD_VAR 0 1
46869: PPUSH
46870: CALL_OW 248
46874: PPUSH
46875: CALL_OW 450
46879: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46880: LD_VAR 0 10
46884: PPUSH
46885: LD_INT 1
46887: PPUSH
46888: CALL_OW 275
46892: PUSH
46893: LD_VAR 0 11
46897: PUSH
46898: LD_INT 1
46900: ARRAY
46901: GREATEREQUAL
46902: IFFALSE 46928
46904: PUSH
46905: LD_VAR 0 10
46909: PPUSH
46910: LD_INT 2
46912: PPUSH
46913: CALL_OW 275
46917: PUSH
46918: LD_VAR 0 11
46922: PUSH
46923: LD_INT 2
46925: ARRAY
46926: GREATEREQUAL
46927: AND
46928: IFFALSE 46954
46930: PUSH
46931: LD_VAR 0 10
46935: PPUSH
46936: LD_INT 3
46938: PPUSH
46939: CALL_OW 275
46943: PUSH
46944: LD_VAR 0 11
46948: PUSH
46949: LD_INT 3
46951: ARRAY
46952: GREATEREQUAL
46953: AND
46954: NOT
46955: IFFALSE 46959
// exit ;
46957: GO 47562
// if GetBType ( depot ) = b_depot then
46959: LD_VAR 0 1
46963: PPUSH
46964: CALL_OW 266
46968: PUSH
46969: LD_INT 0
46971: EQUAL
46972: IFFALSE 46984
// dist := 28 else
46974: LD_ADDR_VAR 0 14
46978: PUSH
46979: LD_INT 28
46981: ST_TO_ADDR
46982: GO 46992
// dist := 36 ;
46984: LD_ADDR_VAR 0 14
46988: PUSH
46989: LD_INT 36
46991: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46992: LD_VAR 0 1
46996: PPUSH
46997: LD_VAR 0 3
47001: PPUSH
47002: LD_VAR 0 4
47006: PPUSH
47007: CALL_OW 297
47011: PUSH
47012: LD_VAR 0 14
47016: GREATER
47017: IFFALSE 47021
// exit ;
47019: GO 47562
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47021: LD_ADDR_VAR 0 12
47025: PUSH
47026: LD_VAR 0 2
47030: PPUSH
47031: LD_VAR 0 3
47035: PPUSH
47036: LD_VAR 0 4
47040: PPUSH
47041: LD_VAR 0 5
47045: PPUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: CALL_OW 248
47055: PPUSH
47056: LD_INT 0
47058: PPUSH
47059: CALL 47567 0 6
47063: ST_TO_ADDR
// if not hexes then
47064: LD_VAR 0 12
47068: NOT
47069: IFFALSE 47073
// exit ;
47071: GO 47562
// hex := GetHexInfo ( x , y ) ;
47073: LD_ADDR_VAR 0 15
47077: PUSH
47078: LD_VAR 0 3
47082: PPUSH
47083: LD_VAR 0 4
47087: PPUSH
47088: CALL_OW 546
47092: ST_TO_ADDR
// if hex [ 1 ] then
47093: LD_VAR 0 15
47097: PUSH
47098: LD_INT 1
47100: ARRAY
47101: IFFALSE 47105
// exit ;
47103: GO 47562
// height := hex [ 2 ] ;
47105: LD_ADDR_VAR 0 13
47109: PUSH
47110: LD_VAR 0 15
47114: PUSH
47115: LD_INT 2
47117: ARRAY
47118: ST_TO_ADDR
// for i = 1 to hexes do
47119: LD_ADDR_VAR 0 7
47123: PUSH
47124: DOUBLE
47125: LD_INT 1
47127: DEC
47128: ST_TO_ADDR
47129: LD_VAR 0 12
47133: PUSH
47134: FOR_TO
47135: IFFALSE 47479
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47137: LD_VAR 0 12
47141: PUSH
47142: LD_VAR 0 7
47146: ARRAY
47147: PUSH
47148: LD_INT 1
47150: ARRAY
47151: PPUSH
47152: LD_VAR 0 12
47156: PUSH
47157: LD_VAR 0 7
47161: ARRAY
47162: PUSH
47163: LD_INT 2
47165: ARRAY
47166: PPUSH
47167: CALL_OW 488
47171: NOT
47172: IFTRUE 47214
47174: PUSH
47175: LD_VAR 0 12
47179: PUSH
47180: LD_VAR 0 7
47184: ARRAY
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: PPUSH
47190: LD_VAR 0 12
47194: PUSH
47195: LD_VAR 0 7
47199: ARRAY
47200: PUSH
47201: LD_INT 2
47203: ARRAY
47204: PPUSH
47205: CALL_OW 428
47209: PUSH
47210: LD_INT 0
47212: GREATER
47213: OR
47214: IFTRUE 47252
47216: PUSH
47217: LD_VAR 0 12
47221: PUSH
47222: LD_VAR 0 7
47226: ARRAY
47227: PUSH
47228: LD_INT 1
47230: ARRAY
47231: PPUSH
47232: LD_VAR 0 12
47236: PUSH
47237: LD_VAR 0 7
47241: ARRAY
47242: PUSH
47243: LD_INT 2
47245: ARRAY
47246: PPUSH
47247: CALL_OW 351
47251: OR
47252: IFFALSE 47258
// exit ;
47254: POP
47255: POP
47256: GO 47562
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47258: LD_ADDR_VAR 0 8
47262: PUSH
47263: LD_VAR 0 12
47267: PUSH
47268: LD_VAR 0 7
47272: ARRAY
47273: PUSH
47274: LD_INT 1
47276: ARRAY
47277: PPUSH
47278: LD_VAR 0 12
47282: PUSH
47283: LD_VAR 0 7
47287: ARRAY
47288: PUSH
47289: LD_INT 2
47291: ARRAY
47292: PPUSH
47293: CALL_OW 546
47297: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47298: LD_VAR 0 8
47302: PUSH
47303: LD_INT 1
47305: ARRAY
47306: IFTRUE 47328
47308: PUSH
47309: LD_VAR 0 8
47313: PUSH
47314: LD_INT 2
47316: ARRAY
47317: PUSH
47318: LD_VAR 0 13
47322: PUSH
47323: LD_INT 2
47325: PLUS
47326: GREATER
47327: OR
47328: IFTRUE 47350
47330: PUSH
47331: LD_VAR 0 8
47335: PUSH
47336: LD_INT 2
47338: ARRAY
47339: PUSH
47340: LD_VAR 0 13
47344: PUSH
47345: LD_INT 2
47347: MINUS
47348: LESS
47349: OR
47350: IFTRUE 47418
47352: PUSH
47353: LD_VAR 0 8
47357: PUSH
47358: LD_INT 3
47360: ARRAY
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 8
47367: PUSH
47368: LD_INT 9
47370: PUSH
47371: LD_INT 10
47373: PUSH
47374: LD_INT 11
47376: PUSH
47377: LD_INT 12
47379: PUSH
47380: LD_INT 13
47382: PUSH
47383: LD_INT 16
47385: PUSH
47386: LD_INT 17
47388: PUSH
47389: LD_INT 18
47391: PUSH
47392: LD_INT 19
47394: PUSH
47395: LD_INT 20
47397: PUSH
47398: LD_INT 21
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: IN
47416: NOT
47417: OR
47418: IFTRUE 47431
47420: PUSH
47421: LD_VAR 0 8
47425: PUSH
47426: LD_INT 5
47428: ARRAY
47429: NOT
47430: OR
47431: IFTRUE 47471
47433: PUSH
47434: LD_VAR 0 8
47438: PUSH
47439: LD_INT 6
47441: ARRAY
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 7
47451: PUSH
47452: LD_INT 9
47454: PUSH
47455: LD_INT 10
47457: PUSH
47458: LD_INT 11
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: IN
47469: NOT
47470: OR
47471: IFFALSE 47477
// exit ;
47473: POP
47474: POP
47475: GO 47562
// end ;
47477: GO 47134
47479: POP
47480: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47481: LD_VAR 0 9
47485: PPUSH
47486: LD_VAR 0 3
47490: PPUSH
47491: LD_VAR 0 4
47495: PPUSH
47496: LD_INT 20
47498: PPUSH
47499: CALL 39381 0 4
47503: PUSH
47504: LD_INT 4
47506: ARRAY
47507: IFFALSE 47511
// exit ;
47509: GO 47562
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47511: LD_VAR 0 2
47515: PUSH
47516: LD_INT 29
47518: PUSH
47519: LD_INT 30
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: IN
47526: IFFALSE 47550
47528: PUSH
47529: LD_VAR 0 3
47533: PPUSH
47534: LD_VAR 0 4
47538: PPUSH
47539: LD_VAR 0 9
47543: PPUSH
47544: CALL_OW 440
47548: NOT
47549: AND
47550: IFFALSE 47554
// exit ;
47552: GO 47562
// result := true ;
47554: LD_ADDR_VAR 0 6
47558: PUSH
47559: LD_INT 1
47561: ST_TO_ADDR
// end ;
47562: LD_VAR 0 6
47566: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47567: LD_INT 0
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
47590: PPUSH
47591: PPUSH
47592: PPUSH
47593: PPUSH
47594: PPUSH
47595: PPUSH
47596: PPUSH
47597: PPUSH
47598: PPUSH
47599: PPUSH
47600: PPUSH
47601: PPUSH
47602: PPUSH
47603: PPUSH
47604: PPUSH
47605: PPUSH
47606: PPUSH
47607: PPUSH
47608: PPUSH
47609: PPUSH
47610: PPUSH
47611: PPUSH
47612: PPUSH
47613: PPUSH
47614: PPUSH
47615: PPUSH
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
// result = [ ] ;
47627: LD_ADDR_VAR 0 7
47631: PUSH
47632: EMPTY
47633: ST_TO_ADDR
// temp_list = [ ] ;
47634: LD_ADDR_VAR 0 9
47638: PUSH
47639: EMPTY
47640: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47641: LD_VAR 0 4
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: LD_INT 4
47660: PUSH
47661: LD_INT 5
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: IN
47672: NOT
47673: IFTRUE 47716
47675: PUSH
47676: LD_VAR 0 1
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: IN
47691: IFFALSE 47715
47693: PUSH
47694: LD_VAR 0 5
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: IN
47713: NOT
47714: AND
47715: OR
47716: IFFALSE 47720
// exit ;
47718: GO 66119
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47720: LD_VAR 0 1
47724: PUSH
47725: LD_INT 6
47727: PUSH
47728: LD_INT 7
47730: PUSH
47731: LD_INT 8
47733: PUSH
47734: LD_INT 13
47736: PUSH
47737: LD_INT 12
47739: PUSH
47740: LD_INT 15
47742: PUSH
47743: LD_INT 11
47745: PUSH
47746: LD_INT 14
47748: PUSH
47749: LD_INT 10
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: IN
47763: IFFALSE 47773
// btype = b_lab ;
47765: LD_ADDR_VAR 0 1
47769: PUSH
47770: LD_INT 6
47772: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47773: LD_VAR 0 6
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: IN
47792: NOT
47793: IFTRUE 47861
47795: PUSH
47796: LD_VAR 0 1
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: LD_INT 6
47815: PUSH
47816: LD_INT 36
47818: PUSH
47819: LD_INT 4
47821: PUSH
47822: LD_INT 5
47824: PUSH
47825: LD_INT 31
47827: PUSH
47828: LD_INT 32
47830: PUSH
47831: LD_INT 33
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: IN
47847: NOT
47848: IFFALSE 47860
47850: PUSH
47851: LD_VAR 0 6
47855: PUSH
47856: LD_INT 1
47858: EQUAL
47859: AND
47860: OR
47861: IFTRUE 47893
47863: PUSH
47864: LD_VAR 0 1
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: IN
47879: NOT
47880: IFFALSE 47892
47882: PUSH
47883: LD_VAR 0 6
47887: PUSH
47888: LD_INT 2
47890: EQUAL
47891: AND
47892: OR
47893: IFFALSE 47903
// mode = 0 ;
47895: LD_ADDR_VAR 0 6
47899: PUSH
47900: LD_INT 0
47902: ST_TO_ADDR
// case mode of 0 :
47903: LD_VAR 0 6
47907: PUSH
47908: LD_INT 0
47910: DOUBLE
47911: EQUAL
47912: IFTRUE 47916
47914: GO 59369
47916: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47917: LD_ADDR_VAR 0 11
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48110: LD_ADDR_VAR 0 12
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48306: LD_ADDR_VAR 0 13
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 3
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 3
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48505: LD_ADDR_VAR 0 14
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 3
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48701: LD_ADDR_VAR 0 15
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48894: LD_ADDR_VAR 0 16
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49087: LD_ADDR_VAR 0 17
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49317: LD_ADDR_VAR 0 18
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49547: LD_ADDR_VAR 0 19
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49777: LD_ADDR_VAR 0 20
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50007: LD_ADDR_VAR 0 21
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50237: LD_ADDR_VAR 0 22
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50467: LD_ADDR_VAR 0 23
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50747: LD_ADDR_VAR 0 24
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51023: LD_ADDR_VAR 0 25
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51297: LD_ADDR_VAR 0 26
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51573: LD_ADDR_VAR 0 27
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51853: LD_ADDR_VAR 0 28
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52135: LD_ADDR_VAR 0 29
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52414: LD_ADDR_VAR 0 30
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 3
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52692: LD_ADDR_VAR 0 31
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52970: LD_ADDR_VAR 0 32
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53248: LD_ADDR_VAR 0 33
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53527: LD_ADDR_VAR 0 34
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53807: LD_ADDR_VAR 0 35
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53919: LD_ADDR_VAR 0 36
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54031: LD_ADDR_VAR 0 37
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54143: LD_ADDR_VAR 0 38
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54255: LD_ADDR_VAR 0 39
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54367: LD_ADDR_VAR 0 40
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54479: LD_ADDR_VAR 0 41
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 3
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54829: LD_ADDR_VAR 0 42
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55179: LD_ADDR_VAR 0 43
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 3
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55527: LD_ADDR_VAR 0 44
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 3
55824: NEG
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55877: LD_ADDR_VAR 0 45
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56227: LD_ADDR_VAR 0 46
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56575: LD_ADDR_VAR 0 47
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56726: LD_ADDR_VAR 0 48
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56873: LD_ADDR_VAR 0 49
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57017: LD_ADDR_VAR 0 50
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57161: LD_ADDR_VAR 0 51
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57308: LD_ADDR_VAR 0 52
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57459: LD_ADDR_VAR 0 53
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57689: LD_ADDR_VAR 0 54
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57919: LD_ADDR_VAR 0 55
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58149: LD_ADDR_VAR 0 56
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 2
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58379: LD_ADDR_VAR 0 57
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58609: LD_ADDR_VAR 0 58
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58839: LD_ADDR_VAR 0 59
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58927: LD_ADDR_VAR 0 60
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59015: LD_ADDR_VAR 0 61
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59103: LD_ADDR_VAR 0 62
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59191: LD_ADDR_VAR 0 63
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59279: LD_ADDR_VAR 0 64
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: ST_TO_ADDR
// end ; 1 :
59367: GO 65264
59369: LD_INT 1
59371: DOUBLE
59372: EQUAL
59373: IFTRUE 59377
59375: GO 62000
59377: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59378: LD_ADDR_VAR 0 11
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59422: LD_ADDR_VAR 0 12
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59463: LD_ADDR_VAR 0 13
59467: PUSH
59468: LD_INT 3
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59503: LD_ADDR_VAR 0 14
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59544: LD_ADDR_VAR 0 15
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59588: LD_ADDR_VAR 0 16
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: LIST
59633: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59634: LD_ADDR_VAR 0 17
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: LIST
59677: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59678: LD_ADDR_VAR 0 18
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59719: LD_ADDR_VAR 0 19
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59759: LD_ADDR_VAR 0 20
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59800: LD_ADDR_VAR 0 21
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59844: LD_ADDR_VAR 0 22
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59890: LD_ADDR_VAR 0 23
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: LIST
59933: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59934: LD_ADDR_VAR 0 24
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59975: LD_ADDR_VAR 0 25
59979: PUSH
59980: LD_INT 3
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 4
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60015: LD_ADDR_VAR 0 26
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 4
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60056: LD_ADDR_VAR 0 27
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 4
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60100: LD_ADDR_VAR 0 28
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 4
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60146: LD_ADDR_VAR 0 29
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 5
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 5
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 4
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 6
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 6
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60301: LD_ADDR_VAR 0 30
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 4
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 4
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 4
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 5
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 5
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 6
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 6
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60444: LD_ADDR_VAR 0 31
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 4
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 5
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 5
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 6
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 6
60551: PUSH
60552: LD_INT 6
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 5
60561: PUSH
60562: LD_INT 6
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60583: LD_ADDR_VAR 0 32
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 4
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 5
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 5
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 4
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 6
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 6
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 5
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60726: LD_ADDR_VAR 0 33
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: NEG
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 4
60778: NEG
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 4
60789: NEG
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 4
60801: NEG
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 5
60812: NEG
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 5
60823: NEG
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 5
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 6
60846: NEG
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 6
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60881: LD_ADDR_VAR 0 34
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: LD_INT 4
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 4
60936: NEG
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: LD_INT 4
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: LD_INT 5
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 5
60972: NEG
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 5
60984: NEG
60985: PUSH
60986: LD_INT 5
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: LD_INT 6
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 6
61008: NEG
61009: PUSH
61010: LD_INT 5
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 6
61020: NEG
61021: PUSH
61022: LD_INT 6
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61044: LD_ADDR_VAR 0 41
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61088: LD_ADDR_VAR 0 42
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61129: LD_ADDR_VAR 0 43
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61169: LD_ADDR_VAR 0 44
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61210: LD_ADDR_VAR 0 45
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 3
61239: NEG
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61254: LD_ADDR_VAR 0 46
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 3
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61300: LD_ADDR_VAR 0 47
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61333: LD_ADDR_VAR 0 48
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61364: LD_ADDR_VAR 0 49
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61393: LD_ADDR_VAR 0 50
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61422: LD_ADDR_VAR 0 51
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61453: LD_ADDR_VAR 0 52
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61486: LD_ADDR_VAR 0 53
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61530: LD_ADDR_VAR 0 54
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: LIST
61570: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61571: LD_ADDR_VAR 0 55
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61611: LD_ADDR_VAR 0 56
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61652: LD_ADDR_VAR 0 57
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61696: LD_ADDR_VAR 0 58
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61742: LD_ADDR_VAR 0 59
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61786: LD_ADDR_VAR 0 60
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61827: LD_ADDR_VAR 0 61
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61867: LD_ADDR_VAR 0 62
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61908: LD_ADDR_VAR 0 63
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61952: LD_ADDR_VAR 0 64
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// end ; 2 :
61998: GO 65264
62000: LD_INT 2
62002: DOUBLE
62003: EQUAL
62004: IFTRUE 62008
62006: GO 65263
62008: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62009: LD_ADDR_VAR 0 29
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 4
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 5
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 5
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 5
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 4
62139: PUSH
62140: LD_INT 4
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: LD_INT 4
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: LD_INT 3
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 4
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 4
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 5
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 5
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 2
62271: PUSH
62272: LD_INT 5
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 4
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 4
62371: NEG
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 4
62394: NEG
62395: PUSH
62396: LD_INT 4
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: LD_INT 5
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 3
62418: NEG
62419: PUSH
62420: LD_INT 4
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 4
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 5
62454: NEG
62455: PUSH
62456: LD_INT 4
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 5
62466: NEG
62467: PUSH
62468: LD_INT 5
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: LD_INT 5
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 5
62490: NEG
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62547: LD_ADDR_VAR 0 30
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: LD_INT 4
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 4
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 5
62574: PUSH
62575: LD_INT 4
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 5
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 4
62594: PUSH
62595: LD_INT 5
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: LD_INT 4
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 5
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: LD_INT 5
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 4
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 4
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 4
62737: NEG
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 4
62748: NEG
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 4
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 5
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 5
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 5
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 3
62839: NEG
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: NEG
62852: PUSH
62853: LD_INT 4
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: LD_INT 3
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 3
62887: NEG
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 4
62899: NEG
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 4
62911: NEG
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: LD_INT 4
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 4
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 5
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 4
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 4
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 5
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: LD_INT 5
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63094: LD_ADDR_VAR 0 31
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 5
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 5
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 5
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 3
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 4
63250: NEG
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 4
63273: NEG
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 4
63296: NEG
63297: PUSH
63298: LD_INT 4
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 4
63308: NEG
63309: PUSH
63310: LD_INT 5
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 3
63320: NEG
63321: PUSH
63322: LD_INT 4
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 3
63332: NEG
63333: PUSH
63334: LD_INT 3
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 4
63344: NEG
63345: PUSH
63346: LD_INT 3
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 5
63356: NEG
63357: PUSH
63358: LD_INT 4
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 5
63368: NEG
63369: PUSH
63370: LD_INT 5
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: LD_INT 5
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 5
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 3
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 4
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 3
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: LD_INT 3
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: LD_INT 4
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: LD_INT 4
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 4
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 5
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 5
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 4
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 5
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63644: LD_ADDR_VAR 0 32
63648: PUSH
63649: LD_INT 4
63651: NEG
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 4
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: NEG
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: NEG
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 4
63696: NEG
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 5
63707: NEG
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 5
63718: NEG
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 5
63730: NEG
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: NEG
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 3
63753: NEG
63754: PUSH
63755: LD_INT 3
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: LD_INT 4
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 3
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 3
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 4
63813: NEG
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 4
63825: NEG
63826: PUSH
63827: LD_INT 4
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: LD_INT 4
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 4
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: LD_INT 5
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: LD_INT 4
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: LD_INT 3
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 3
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 4
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: LD_INT 5
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: LD_INT 5
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 4
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 4
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 3
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 2
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 4
64046: PUSH
64047: LD_INT 2
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 4
64056: PUSH
64057: LD_INT 4
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: LD_INT 3
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 5
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 5
64086: PUSH
64087: LD_INT 5
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 4
64096: PUSH
64097: LD_INT 5
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 3
64106: PUSH
64107: LD_INT 4
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: LD_INT 3
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 5
64126: PUSH
64127: LD_INT 3
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: LD_INT 5
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64191: LD_ADDR_VAR 0 33
64195: PUSH
64196: LD_INT 4
64198: NEG
64199: PUSH
64200: LD_INT 4
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 4
64210: NEG
64211: PUSH
64212: LD_INT 5
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: NEG
64223: PUSH
64224: LD_INT 4
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: NEG
64235: PUSH
64236: LD_INT 3
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 4
64246: NEG
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 5
64258: NEG
64259: PUSH
64260: LD_INT 4
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 5
64270: NEG
64271: PUSH
64272: LD_INT 5
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 5
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 5
64294: NEG
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 3
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 4
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 3
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 3
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 4
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 4
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 4
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 4
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 5
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 5
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 4
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 3
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 3
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 5
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 3
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 4
64521: PUSH
64522: LD_INT 3
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 4
64531: PUSH
64532: LD_INT 4
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 3
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 4
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: LD_INT 4
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 4
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 4
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 5
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 5
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: LD_INT 4
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: LD_INT 5
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64729: LD_ADDR_VAR 0 34
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 4
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 5
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 4
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: LD_INT 5
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 3
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 5
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 4
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 4
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 2
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 4
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 5
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: LD_INT 5
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: LD_INT 5
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: LD_INT 4
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 3
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 5
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: LD_INT 5
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 4
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 3
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 4
65114: NEG
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 4
65125: NEG
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: NEG
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 3
65148: NEG
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 4
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 5
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 5
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 5
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: NEG
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// end ; end ;
65261: GO 65264
65263: POP
// case btype of b_depot , b_warehouse :
65264: LD_VAR 0 1
65268: PUSH
65269: LD_INT 0
65271: DOUBLE
65272: EQUAL
65273: IFTRUE 65283
65275: LD_INT 1
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65283
65281: GO 65484
65283: POP
// case nation of nation_american :
65284: LD_VAR 0 5
65288: PUSH
65289: LD_INT 1
65291: DOUBLE
65292: EQUAL
65293: IFTRUE 65297
65295: GO 65353
65297: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65298: LD_ADDR_VAR 0 9
65302: PUSH
65303: LD_VAR 0 11
65307: PUSH
65308: LD_VAR 0 12
65312: PUSH
65313: LD_VAR 0 13
65317: PUSH
65318: LD_VAR 0 14
65322: PUSH
65323: LD_VAR 0 15
65327: PUSH
65328: LD_VAR 0 16
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: PUSH
65341: LD_VAR 0 4
65345: PUSH
65346: LD_INT 1
65348: PLUS
65349: ARRAY
65350: ST_TO_ADDR
65351: GO 65482
65353: LD_INT 2
65355: DOUBLE
65356: EQUAL
65357: IFTRUE 65361
65359: GO 65417
65361: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65362: LD_ADDR_VAR 0 9
65366: PUSH
65367: LD_VAR 0 17
65371: PUSH
65372: LD_VAR 0 18
65376: PUSH
65377: LD_VAR 0 19
65381: PUSH
65382: LD_VAR 0 20
65386: PUSH
65387: LD_VAR 0 21
65391: PUSH
65392: LD_VAR 0 22
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: PUSH
65405: LD_VAR 0 4
65409: PUSH
65410: LD_INT 1
65412: PLUS
65413: ARRAY
65414: ST_TO_ADDR
65415: GO 65482
65417: LD_INT 3
65419: DOUBLE
65420: EQUAL
65421: IFTRUE 65425
65423: GO 65481
65425: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65426: LD_ADDR_VAR 0 9
65430: PUSH
65431: LD_VAR 0 23
65435: PUSH
65436: LD_VAR 0 24
65440: PUSH
65441: LD_VAR 0 25
65445: PUSH
65446: LD_VAR 0 26
65450: PUSH
65451: LD_VAR 0 27
65455: PUSH
65456: LD_VAR 0 28
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: PUSH
65469: LD_VAR 0 4
65473: PUSH
65474: LD_INT 1
65476: PLUS
65477: ARRAY
65478: ST_TO_ADDR
65479: GO 65482
65481: POP
65482: GO 66037
65484: LD_INT 2
65486: DOUBLE
65487: EQUAL
65488: IFTRUE 65498
65490: LD_INT 3
65492: DOUBLE
65493: EQUAL
65494: IFTRUE 65498
65496: GO 65554
65498: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65499: LD_ADDR_VAR 0 9
65503: PUSH
65504: LD_VAR 0 29
65508: PUSH
65509: LD_VAR 0 30
65513: PUSH
65514: LD_VAR 0 31
65518: PUSH
65519: LD_VAR 0 32
65523: PUSH
65524: LD_VAR 0 33
65528: PUSH
65529: LD_VAR 0 34
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: PUSH
65542: LD_VAR 0 4
65546: PUSH
65547: LD_INT 1
65549: PLUS
65550: ARRAY
65551: ST_TO_ADDR
65552: GO 66037
65554: LD_INT 16
65556: DOUBLE
65557: EQUAL
65558: IFTRUE 65616
65560: LD_INT 17
65562: DOUBLE
65563: EQUAL
65564: IFTRUE 65616
65566: LD_INT 18
65568: DOUBLE
65569: EQUAL
65570: IFTRUE 65616
65572: LD_INT 19
65574: DOUBLE
65575: EQUAL
65576: IFTRUE 65616
65578: LD_INT 22
65580: DOUBLE
65581: EQUAL
65582: IFTRUE 65616
65584: LD_INT 20
65586: DOUBLE
65587: EQUAL
65588: IFTRUE 65616
65590: LD_INT 21
65592: DOUBLE
65593: EQUAL
65594: IFTRUE 65616
65596: LD_INT 23
65598: DOUBLE
65599: EQUAL
65600: IFTRUE 65616
65602: LD_INT 24
65604: DOUBLE
65605: EQUAL
65606: IFTRUE 65616
65608: LD_INT 25
65610: DOUBLE
65611: EQUAL
65612: IFTRUE 65616
65614: GO 65672
65616: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65617: LD_ADDR_VAR 0 9
65621: PUSH
65622: LD_VAR 0 35
65626: PUSH
65627: LD_VAR 0 36
65631: PUSH
65632: LD_VAR 0 37
65636: PUSH
65637: LD_VAR 0 38
65641: PUSH
65642: LD_VAR 0 39
65646: PUSH
65647: LD_VAR 0 40
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: PUSH
65660: LD_VAR 0 4
65664: PUSH
65665: LD_INT 1
65667: PLUS
65668: ARRAY
65669: ST_TO_ADDR
65670: GO 66037
65672: LD_INT 6
65674: DOUBLE
65675: EQUAL
65676: IFTRUE 65728
65678: LD_INT 7
65680: DOUBLE
65681: EQUAL
65682: IFTRUE 65728
65684: LD_INT 8
65686: DOUBLE
65687: EQUAL
65688: IFTRUE 65728
65690: LD_INT 13
65692: DOUBLE
65693: EQUAL
65694: IFTRUE 65728
65696: LD_INT 12
65698: DOUBLE
65699: EQUAL
65700: IFTRUE 65728
65702: LD_INT 15
65704: DOUBLE
65705: EQUAL
65706: IFTRUE 65728
65708: LD_INT 11
65710: DOUBLE
65711: EQUAL
65712: IFTRUE 65728
65714: LD_INT 14
65716: DOUBLE
65717: EQUAL
65718: IFTRUE 65728
65720: LD_INT 10
65722: DOUBLE
65723: EQUAL
65724: IFTRUE 65728
65726: GO 65784
65728: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65729: LD_ADDR_VAR 0 9
65733: PUSH
65734: LD_VAR 0 41
65738: PUSH
65739: LD_VAR 0 42
65743: PUSH
65744: LD_VAR 0 43
65748: PUSH
65749: LD_VAR 0 44
65753: PUSH
65754: LD_VAR 0 45
65758: PUSH
65759: LD_VAR 0 46
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: PUSH
65772: LD_VAR 0 4
65776: PUSH
65777: LD_INT 1
65779: PLUS
65780: ARRAY
65781: ST_TO_ADDR
65782: GO 66037
65784: LD_INT 36
65786: DOUBLE
65787: EQUAL
65788: IFTRUE 65792
65790: GO 65848
65792: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65793: LD_ADDR_VAR 0 9
65797: PUSH
65798: LD_VAR 0 47
65802: PUSH
65803: LD_VAR 0 48
65807: PUSH
65808: LD_VAR 0 49
65812: PUSH
65813: LD_VAR 0 50
65817: PUSH
65818: LD_VAR 0 51
65822: PUSH
65823: LD_VAR 0 52
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: PUSH
65836: LD_VAR 0 4
65840: PUSH
65841: LD_INT 1
65843: PLUS
65844: ARRAY
65845: ST_TO_ADDR
65846: GO 66037
65848: LD_INT 4
65850: DOUBLE
65851: EQUAL
65852: IFTRUE 65874
65854: LD_INT 5
65856: DOUBLE
65857: EQUAL
65858: IFTRUE 65874
65860: LD_INT 34
65862: DOUBLE
65863: EQUAL
65864: IFTRUE 65874
65866: LD_INT 37
65868: DOUBLE
65869: EQUAL
65870: IFTRUE 65874
65872: GO 65930
65874: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65875: LD_ADDR_VAR 0 9
65879: PUSH
65880: LD_VAR 0 53
65884: PUSH
65885: LD_VAR 0 54
65889: PUSH
65890: LD_VAR 0 55
65894: PUSH
65895: LD_VAR 0 56
65899: PUSH
65900: LD_VAR 0 57
65904: PUSH
65905: LD_VAR 0 58
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: PUSH
65918: LD_VAR 0 4
65922: PUSH
65923: LD_INT 1
65925: PLUS
65926: ARRAY
65927: ST_TO_ADDR
65928: GO 66037
65930: LD_INT 31
65932: DOUBLE
65933: EQUAL
65934: IFTRUE 65980
65936: LD_INT 32
65938: DOUBLE
65939: EQUAL
65940: IFTRUE 65980
65942: LD_INT 33
65944: DOUBLE
65945: EQUAL
65946: IFTRUE 65980
65948: LD_INT 27
65950: DOUBLE
65951: EQUAL
65952: IFTRUE 65980
65954: LD_INT 26
65956: DOUBLE
65957: EQUAL
65958: IFTRUE 65980
65960: LD_INT 28
65962: DOUBLE
65963: EQUAL
65964: IFTRUE 65980
65966: LD_INT 29
65968: DOUBLE
65969: EQUAL
65970: IFTRUE 65980
65972: LD_INT 30
65974: DOUBLE
65975: EQUAL
65976: IFTRUE 65980
65978: GO 66036
65980: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65981: LD_ADDR_VAR 0 9
65985: PUSH
65986: LD_VAR 0 59
65990: PUSH
65991: LD_VAR 0 60
65995: PUSH
65996: LD_VAR 0 61
66000: PUSH
66001: LD_VAR 0 62
66005: PUSH
66006: LD_VAR 0 63
66010: PUSH
66011: LD_VAR 0 64
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: PUSH
66024: LD_VAR 0 4
66028: PUSH
66029: LD_INT 1
66031: PLUS
66032: ARRAY
66033: ST_TO_ADDR
66034: GO 66037
66036: POP
// temp_list2 = [ ] ;
66037: LD_ADDR_VAR 0 10
66041: PUSH
66042: EMPTY
66043: ST_TO_ADDR
// for i in temp_list do
66044: LD_ADDR_VAR 0 8
66048: PUSH
66049: LD_VAR 0 9
66053: PUSH
66054: FOR_IN
66055: IFFALSE 66107
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66057: LD_ADDR_VAR 0 10
66061: PUSH
66062: LD_VAR 0 10
66066: PUSH
66067: LD_VAR 0 8
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: PUSH
66076: LD_VAR 0 2
66080: PLUS
66081: PUSH
66082: LD_VAR 0 8
66086: PUSH
66087: LD_INT 2
66089: ARRAY
66090: PUSH
66091: LD_VAR 0 3
66095: PLUS
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: EMPTY
66102: LIST
66103: ADD
66104: ST_TO_ADDR
66105: GO 66054
66107: POP
66108: POP
// result = temp_list2 ;
66109: LD_ADDR_VAR 0 7
66113: PUSH
66114: LD_VAR 0 10
66118: ST_TO_ADDR
// end ;
66119: LD_VAR 0 7
66123: RET
// export function EnemyInRange ( unit , dist ) ; begin
66124: LD_INT 0
66126: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66127: LD_ADDR_VAR 0 3
66131: PUSH
66132: LD_VAR 0 1
66136: PPUSH
66137: CALL_OW 255
66141: PPUSH
66142: LD_VAR 0 1
66146: PPUSH
66147: CALL_OW 250
66151: PPUSH
66152: LD_VAR 0 1
66156: PPUSH
66157: CALL_OW 251
66161: PPUSH
66162: LD_VAR 0 2
66166: PPUSH
66167: CALL 39381 0 4
66171: PUSH
66172: LD_INT 4
66174: ARRAY
66175: ST_TO_ADDR
// end ;
66176: LD_VAR 0 3
66180: RET
// export function PlayerSeeMe ( unit ) ; begin
66181: LD_INT 0
66183: PPUSH
// result := See ( your_side , unit ) ;
66184: LD_ADDR_VAR 0 2
66188: PUSH
66189: LD_OWVAR 2
66193: PPUSH
66194: LD_VAR 0 1
66198: PPUSH
66199: CALL_OW 292
66203: ST_TO_ADDR
// end ;
66204: LD_VAR 0 2
66208: RET
// export function ReverseDir ( unit ) ; begin
66209: LD_INT 0
66211: PPUSH
// if not unit then
66212: LD_VAR 0 1
66216: NOT
66217: IFFALSE 66221
// exit ;
66219: GO 66244
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66221: LD_ADDR_VAR 0 2
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 254
66235: PUSH
66236: LD_INT 3
66238: PLUS
66239: PUSH
66240: LD_INT 6
66242: MOD
66243: ST_TO_ADDR
// end ;
66244: LD_VAR 0 2
66248: RET
// export function ReverseArray ( array ) ; var i ; begin
66249: LD_INT 0
66251: PPUSH
66252: PPUSH
// if not array then
66253: LD_VAR 0 1
66257: NOT
66258: IFFALSE 66262
// exit ;
66260: GO 66317
// result := [ ] ;
66262: LD_ADDR_VAR 0 2
66266: PUSH
66267: EMPTY
66268: ST_TO_ADDR
// for i := array downto 1 do
66269: LD_ADDR_VAR 0 3
66273: PUSH
66274: DOUBLE
66275: LD_VAR 0 1
66279: INC
66280: ST_TO_ADDR
66281: LD_INT 1
66283: PUSH
66284: FOR_DOWNTO
66285: IFFALSE 66315
// result := Join ( result , array [ i ] ) ;
66287: LD_ADDR_VAR 0 2
66291: PUSH
66292: LD_VAR 0 2
66296: PPUSH
66297: LD_VAR 0 1
66301: PUSH
66302: LD_VAR 0 3
66306: ARRAY
66307: PPUSH
66308: CALL 71169 0 2
66312: ST_TO_ADDR
66313: GO 66284
66315: POP
66316: POP
// end ;
66317: LD_VAR 0 2
66321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66322: LD_INT 0
66324: PPUSH
66325: PPUSH
66326: PPUSH
66327: PPUSH
66328: PPUSH
66329: PPUSH
// if not unit or not hexes then
66330: LD_VAR 0 1
66334: NOT
66335: IFTRUE 66344
66337: PUSH
66338: LD_VAR 0 2
66342: NOT
66343: OR
66344: IFFALSE 66348
// exit ;
66346: GO 66471
// dist := 9999 ;
66348: LD_ADDR_VAR 0 5
66352: PUSH
66353: LD_INT 9999
66355: ST_TO_ADDR
// for i = 1 to hexes do
66356: LD_ADDR_VAR 0 4
66360: PUSH
66361: DOUBLE
66362: LD_INT 1
66364: DEC
66365: ST_TO_ADDR
66366: LD_VAR 0 2
66370: PUSH
66371: FOR_TO
66372: IFFALSE 66459
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66374: LD_ADDR_VAR 0 6
66378: PUSH
66379: LD_VAR 0 1
66383: PPUSH
66384: LD_VAR 0 2
66388: PUSH
66389: LD_VAR 0 4
66393: ARRAY
66394: PUSH
66395: LD_INT 1
66397: ARRAY
66398: PPUSH
66399: LD_VAR 0 2
66403: PUSH
66404: LD_VAR 0 4
66408: ARRAY
66409: PUSH
66410: LD_INT 2
66412: ARRAY
66413: PPUSH
66414: CALL_OW 297
66418: ST_TO_ADDR
// if tdist < dist then
66419: LD_VAR 0 6
66423: PUSH
66424: LD_VAR 0 5
66428: LESS
66429: IFFALSE 66457
// begin hex := hexes [ i ] ;
66431: LD_ADDR_VAR 0 8
66435: PUSH
66436: LD_VAR 0 2
66440: PUSH
66441: LD_VAR 0 4
66445: ARRAY
66446: ST_TO_ADDR
// dist := tdist ;
66447: LD_ADDR_VAR 0 5
66451: PUSH
66452: LD_VAR 0 6
66456: ST_TO_ADDR
// end ; end ;
66457: GO 66371
66459: POP
66460: POP
// result := hex ;
66461: LD_ADDR_VAR 0 3
66465: PUSH
66466: LD_VAR 0 8
66470: ST_TO_ADDR
// end ;
66471: LD_VAR 0 3
66475: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66476: LD_INT 0
66478: PPUSH
66479: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66480: LD_VAR 0 1
66484: NOT
66485: IFTRUE 66524
66487: PUSH
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 21
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 23
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PPUSH
66517: CALL_OW 69
66521: IN
66522: NOT
66523: OR
66524: IFFALSE 66528
// exit ;
66526: GO 66575
// for i = 1 to 3 do
66528: LD_ADDR_VAR 0 3
66532: PUSH
66533: DOUBLE
66534: LD_INT 1
66536: DEC
66537: ST_TO_ADDR
66538: LD_INT 3
66540: PUSH
66541: FOR_TO
66542: IFFALSE 66573
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66544: LD_VAR 0 1
66548: PPUSH
66549: CALL_OW 250
66553: PPUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 251
66563: PPUSH
66564: LD_INT 1
66566: PPUSH
66567: CALL_OW 453
66571: GO 66541
66573: POP
66574: POP
// end ;
66575: LD_VAR 0 2
66579: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66580: LD_INT 0
66582: PPUSH
66583: PPUSH
66584: PPUSH
66585: PPUSH
66586: PPUSH
66587: PPUSH
// if not unit or not enemy_unit then
66588: LD_VAR 0 1
66592: NOT
66593: IFTRUE 66602
66595: PUSH
66596: LD_VAR 0 2
66600: NOT
66601: OR
66602: IFFALSE 66606
// exit ;
66604: GO 67087
// if GetLives ( i ) < 250 then
66606: LD_VAR 0 4
66610: PPUSH
66611: CALL_OW 256
66615: PUSH
66616: LD_INT 250
66618: LESS
66619: IFFALSE 66632
// begin ComAutodestruct ( i ) ;
66621: LD_VAR 0 4
66625: PPUSH
66626: CALL 66476 0 1
// exit ;
66630: GO 67087
// end ; x := GetX ( enemy_unit ) ;
66632: LD_ADDR_VAR 0 7
66636: PUSH
66637: LD_VAR 0 2
66641: PPUSH
66642: CALL_OW 250
66646: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66647: LD_ADDR_VAR 0 8
66651: PUSH
66652: LD_VAR 0 2
66656: PPUSH
66657: CALL_OW 251
66661: ST_TO_ADDR
// if not x or not y then
66662: LD_VAR 0 7
66666: NOT
66667: IFTRUE 66676
66669: PUSH
66670: LD_VAR 0 8
66674: NOT
66675: OR
66676: IFFALSE 66680
// exit ;
66678: GO 67087
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66680: LD_ADDR_VAR 0 6
66684: PUSH
66685: LD_VAR 0 7
66689: PPUSH
66690: LD_INT 0
66692: PPUSH
66693: LD_INT 4
66695: PPUSH
66696: CALL_OW 272
66700: PUSH
66701: LD_VAR 0 8
66705: PPUSH
66706: LD_INT 0
66708: PPUSH
66709: LD_INT 4
66711: PPUSH
66712: CALL_OW 273
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_VAR 0 7
66725: PPUSH
66726: LD_INT 1
66728: PPUSH
66729: LD_INT 4
66731: PPUSH
66732: CALL_OW 272
66736: PUSH
66737: LD_VAR 0 8
66741: PPUSH
66742: LD_INT 1
66744: PPUSH
66745: LD_INT 4
66747: PPUSH
66748: CALL_OW 273
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_VAR 0 7
66761: PPUSH
66762: LD_INT 2
66764: PPUSH
66765: LD_INT 4
66767: PPUSH
66768: CALL_OW 272
66772: PUSH
66773: LD_VAR 0 8
66777: PPUSH
66778: LD_INT 2
66780: PPUSH
66781: LD_INT 4
66783: PPUSH
66784: CALL_OW 273
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 7
66797: PPUSH
66798: LD_INT 3
66800: PPUSH
66801: LD_INT 4
66803: PPUSH
66804: CALL_OW 272
66808: PUSH
66809: LD_VAR 0 8
66813: PPUSH
66814: LD_INT 3
66816: PPUSH
66817: LD_INT 4
66819: PPUSH
66820: CALL_OW 273
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_VAR 0 7
66833: PPUSH
66834: LD_INT 4
66836: PPUSH
66837: LD_INT 4
66839: PPUSH
66840: CALL_OW 272
66844: PUSH
66845: LD_VAR 0 8
66849: PPUSH
66850: LD_INT 4
66852: PPUSH
66853: LD_INT 4
66855: PPUSH
66856: CALL_OW 273
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_VAR 0 7
66869: PPUSH
66870: LD_INT 5
66872: PPUSH
66873: LD_INT 4
66875: PPUSH
66876: CALL_OW 272
66880: PUSH
66881: LD_VAR 0 8
66885: PPUSH
66886: LD_INT 5
66888: PPUSH
66889: LD_INT 4
66891: PPUSH
66892: CALL_OW 273
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// for i = tmp downto 1 do
66909: LD_ADDR_VAR 0 4
66913: PUSH
66914: DOUBLE
66915: LD_VAR 0 6
66919: INC
66920: ST_TO_ADDR
66921: LD_INT 1
66923: PUSH
66924: FOR_DOWNTO
66925: IFFALSE 67028
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66927: LD_VAR 0 6
66931: PUSH
66932: LD_VAR 0 4
66936: ARRAY
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: PPUSH
66942: LD_VAR 0 6
66946: PUSH
66947: LD_VAR 0 4
66951: ARRAY
66952: PUSH
66953: LD_INT 2
66955: ARRAY
66956: PPUSH
66957: CALL_OW 488
66961: NOT
66962: IFTRUE 67004
66964: PUSH
66965: LD_VAR 0 6
66969: PUSH
66970: LD_VAR 0 4
66974: ARRAY
66975: PUSH
66976: LD_INT 1
66978: ARRAY
66979: PPUSH
66980: LD_VAR 0 6
66984: PUSH
66985: LD_VAR 0 4
66989: ARRAY
66990: PUSH
66991: LD_INT 2
66993: ARRAY
66994: PPUSH
66995: CALL_OW 428
66999: PUSH
67000: LD_INT 0
67002: NONEQUAL
67003: OR
67004: IFFALSE 67026
// tmp := Delete ( tmp , i ) ;
67006: LD_ADDR_VAR 0 6
67010: PUSH
67011: LD_VAR 0 6
67015: PPUSH
67016: LD_VAR 0 4
67020: PPUSH
67021: CALL_OW 3
67025: ST_TO_ADDR
67026: GO 66924
67028: POP
67029: POP
// j := GetClosestHex ( unit , tmp ) ;
67030: LD_ADDR_VAR 0 5
67034: PUSH
67035: LD_VAR 0 1
67039: PPUSH
67040: LD_VAR 0 6
67044: PPUSH
67045: CALL 66322 0 2
67049: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67050: LD_VAR 0 1
67054: PPUSH
67055: LD_VAR 0 5
67059: PUSH
67060: LD_INT 1
67062: ARRAY
67063: PPUSH
67064: LD_VAR 0 5
67068: PUSH
67069: LD_INT 2
67071: ARRAY
67072: PPUSH
67073: CALL_OW 111
// result := j ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 5
67086: ST_TO_ADDR
// end ;
67087: LD_VAR 0 3
67091: RET
// export function PrepareApemanSoldier ( ) ; begin
67092: LD_INT 0
67094: PPUSH
// uc_nation := 0 ;
67095: LD_ADDR_OWVAR 21
67099: PUSH
67100: LD_INT 0
67102: ST_TO_ADDR
// hc_sex := sex_male ;
67103: LD_ADDR_OWVAR 27
67107: PUSH
67108: LD_INT 1
67110: ST_TO_ADDR
// hc_name :=  ;
67111: LD_ADDR_OWVAR 26
67115: PUSH
67116: LD_STRING 
67118: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67119: LD_ADDR_OWVAR 28
67123: PUSH
67124: LD_INT 15
67126: ST_TO_ADDR
// hc_gallery :=  ;
67127: LD_ADDR_OWVAR 33
67131: PUSH
67132: LD_STRING 
67134: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67135: LD_ADDR_OWVAR 31
67139: PUSH
67140: LD_INT 0
67142: PPUSH
67143: LD_INT 3
67145: PPUSH
67146: CALL_OW 12
67150: PUSH
67151: LD_INT 0
67153: PPUSH
67154: LD_INT 3
67156: PPUSH
67157: CALL_OW 12
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67174: LD_ADDR_OWVAR 29
67178: PUSH
67179: LD_INT 10
67181: PUSH
67182: LD_INT 12
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: ST_TO_ADDR
// end ;
67189: LD_VAR 0 1
67193: RET
// export function PrepareApemanEngineer ( ) ; begin
67194: LD_INT 0
67196: PPUSH
// uc_nation := 0 ;
67197: LD_ADDR_OWVAR 21
67201: PUSH
67202: LD_INT 0
67204: ST_TO_ADDR
// hc_sex := sex_male ;
67205: LD_ADDR_OWVAR 27
67209: PUSH
67210: LD_INT 1
67212: ST_TO_ADDR
// hc_name :=  ;
67213: LD_ADDR_OWVAR 26
67217: PUSH
67218: LD_STRING 
67220: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67221: LD_ADDR_OWVAR 28
67225: PUSH
67226: LD_INT 16
67228: ST_TO_ADDR
// hc_gallery :=  ;
67229: LD_ADDR_OWVAR 33
67233: PUSH
67234: LD_STRING 
67236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67237: LD_ADDR_OWVAR 31
67241: PUSH
67242: LD_INT 0
67244: PPUSH
67245: LD_INT 3
67247: PPUSH
67248: CALL_OW 12
67252: PUSH
67253: LD_INT 0
67255: PPUSH
67256: LD_INT 3
67258: PPUSH
67259: CALL_OW 12
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67276: LD_ADDR_OWVAR 29
67280: PUSH
67281: LD_INT 10
67283: PUSH
67284: LD_INT 12
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// end ;
67291: LD_VAR 0 1
67295: RET
// export function PrepareApeman ( agressivity ) ; begin
67296: LD_INT 0
67298: PPUSH
// uc_side := 0 ;
67299: LD_ADDR_OWVAR 20
67303: PUSH
67304: LD_INT 0
67306: ST_TO_ADDR
// uc_nation := 0 ;
67307: LD_ADDR_OWVAR 21
67311: PUSH
67312: LD_INT 0
67314: ST_TO_ADDR
// hc_sex := sex_male ;
67315: LD_ADDR_OWVAR 27
67319: PUSH
67320: LD_INT 1
67322: ST_TO_ADDR
// hc_class := class_apeman ;
67323: LD_ADDR_OWVAR 28
67327: PUSH
67328: LD_INT 12
67330: ST_TO_ADDR
// hc_gallery :=  ;
67331: LD_ADDR_OWVAR 33
67335: PUSH
67336: LD_STRING 
67338: ST_TO_ADDR
// hc_name :=  ;
67339: LD_ADDR_OWVAR 26
67343: PUSH
67344: LD_STRING 
67346: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67347: LD_ADDR_OWVAR 29
67351: PUSH
67352: LD_INT 10
67354: PUSH
67355: LD_INT 12
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// if agressivity = 0 then
67362: LD_VAR 0 1
67366: PUSH
67367: LD_INT 0
67369: EQUAL
67370: IFFALSE 67382
// hc_agressivity := 0 else
67372: LD_ADDR_OWVAR 35
67376: PUSH
67377: LD_INT 0
67379: ST_TO_ADDR
67380: GO 67403
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67382: LD_ADDR_OWVAR 35
67386: PUSH
67387: LD_VAR 0 1
67391: NEG
67392: PPUSH
67393: LD_VAR 0 1
67397: PPUSH
67398: CALL_OW 12
67402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67403: LD_ADDR_OWVAR 31
67407: PUSH
67408: LD_INT 0
67410: PPUSH
67411: LD_INT 3
67413: PPUSH
67414: CALL_OW 12
67418: PUSH
67419: LD_INT 0
67421: PPUSH
67422: LD_INT 3
67424: PPUSH
67425: CALL_OW 12
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: ST_TO_ADDR
// end ;
67442: LD_VAR 0 2
67446: RET
// export function PrepareTiger ( agressivity ) ; begin
67447: LD_INT 0
67449: PPUSH
// uc_side := 0 ;
67450: LD_ADDR_OWVAR 20
67454: PUSH
67455: LD_INT 0
67457: ST_TO_ADDR
// uc_nation := 0 ;
67458: LD_ADDR_OWVAR 21
67462: PUSH
67463: LD_INT 0
67465: ST_TO_ADDR
// InitHc ;
67466: CALL_OW 19
// hc_class := class_tiger ;
67470: LD_ADDR_OWVAR 28
67474: PUSH
67475: LD_INT 14
67477: ST_TO_ADDR
// hc_gallery :=  ;
67478: LD_ADDR_OWVAR 33
67482: PUSH
67483: LD_STRING 
67485: ST_TO_ADDR
// hc_name :=  ;
67486: LD_ADDR_OWVAR 26
67490: PUSH
67491: LD_STRING 
67493: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67494: LD_ADDR_OWVAR 35
67498: PUSH
67499: LD_VAR 0 1
67503: NEG
67504: PPUSH
67505: LD_VAR 0 1
67509: PPUSH
67510: CALL_OW 12
67514: ST_TO_ADDR
// end ;
67515: LD_VAR 0 2
67519: RET
// export function PrepareEnchidna ( ) ; begin
67520: LD_INT 0
67522: PPUSH
// uc_side := 0 ;
67523: LD_ADDR_OWVAR 20
67527: PUSH
67528: LD_INT 0
67530: ST_TO_ADDR
// uc_nation := 0 ;
67531: LD_ADDR_OWVAR 21
67535: PUSH
67536: LD_INT 0
67538: ST_TO_ADDR
// InitHc ;
67539: CALL_OW 19
// hc_class := class_baggie ;
67543: LD_ADDR_OWVAR 28
67547: PUSH
67548: LD_INT 13
67550: ST_TO_ADDR
// hc_gallery :=  ;
67551: LD_ADDR_OWVAR 33
67555: PUSH
67556: LD_STRING 
67558: ST_TO_ADDR
// hc_name :=  ;
67559: LD_ADDR_OWVAR 26
67563: PUSH
67564: LD_STRING 
67566: ST_TO_ADDR
// end ;
67567: LD_VAR 0 1
67571: RET
// export function PrepareFrog ( ) ; begin
67572: LD_INT 0
67574: PPUSH
// uc_side := 0 ;
67575: LD_ADDR_OWVAR 20
67579: PUSH
67580: LD_INT 0
67582: ST_TO_ADDR
// uc_nation := 0 ;
67583: LD_ADDR_OWVAR 21
67587: PUSH
67588: LD_INT 0
67590: ST_TO_ADDR
// InitHc ;
67591: CALL_OW 19
// hc_class := class_frog ;
67595: LD_ADDR_OWVAR 28
67599: PUSH
67600: LD_INT 19
67602: ST_TO_ADDR
// hc_gallery :=  ;
67603: LD_ADDR_OWVAR 33
67607: PUSH
67608: LD_STRING 
67610: ST_TO_ADDR
// hc_name :=  ;
67611: LD_ADDR_OWVAR 26
67615: PUSH
67616: LD_STRING 
67618: ST_TO_ADDR
// end ;
67619: LD_VAR 0 1
67623: RET
// export function PrepareFish ( ) ; begin
67624: LD_INT 0
67626: PPUSH
// uc_side := 0 ;
67627: LD_ADDR_OWVAR 20
67631: PUSH
67632: LD_INT 0
67634: ST_TO_ADDR
// uc_nation := 0 ;
67635: LD_ADDR_OWVAR 21
67639: PUSH
67640: LD_INT 0
67642: ST_TO_ADDR
// InitHc ;
67643: CALL_OW 19
// hc_class := class_fish ;
67647: LD_ADDR_OWVAR 28
67651: PUSH
67652: LD_INT 20
67654: ST_TO_ADDR
// hc_gallery :=  ;
67655: LD_ADDR_OWVAR 33
67659: PUSH
67660: LD_STRING 
67662: ST_TO_ADDR
// hc_name :=  ;
67663: LD_ADDR_OWVAR 26
67667: PUSH
67668: LD_STRING 
67670: ST_TO_ADDR
// end ;
67671: LD_VAR 0 1
67675: RET
// export function PrepareBird ( ) ; begin
67676: LD_INT 0
67678: PPUSH
// uc_side := 0 ;
67679: LD_ADDR_OWVAR 20
67683: PUSH
67684: LD_INT 0
67686: ST_TO_ADDR
// uc_nation := 0 ;
67687: LD_ADDR_OWVAR 21
67691: PUSH
67692: LD_INT 0
67694: ST_TO_ADDR
// InitHc ;
67695: CALL_OW 19
// hc_class := class_phororhacos ;
67699: LD_ADDR_OWVAR 28
67703: PUSH
67704: LD_INT 18
67706: ST_TO_ADDR
// hc_gallery :=  ;
67707: LD_ADDR_OWVAR 33
67711: PUSH
67712: LD_STRING 
67714: ST_TO_ADDR
// hc_name :=  ;
67715: LD_ADDR_OWVAR 26
67719: PUSH
67720: LD_STRING 
67722: ST_TO_ADDR
// end ;
67723: LD_VAR 0 1
67727: RET
// export function PrepareHorse ( ) ; begin
67728: LD_INT 0
67730: PPUSH
// uc_side := 0 ;
67731: LD_ADDR_OWVAR 20
67735: PUSH
67736: LD_INT 0
67738: ST_TO_ADDR
// uc_nation := 0 ;
67739: LD_ADDR_OWVAR 21
67743: PUSH
67744: LD_INT 0
67746: ST_TO_ADDR
// InitHc ;
67747: CALL_OW 19
// hc_class := class_horse ;
67751: LD_ADDR_OWVAR 28
67755: PUSH
67756: LD_INT 21
67758: ST_TO_ADDR
// hc_gallery :=  ;
67759: LD_ADDR_OWVAR 33
67763: PUSH
67764: LD_STRING 
67766: ST_TO_ADDR
// hc_name :=  ;
67767: LD_ADDR_OWVAR 26
67771: PUSH
67772: LD_STRING 
67774: ST_TO_ADDR
// end ;
67775: LD_VAR 0 1
67779: RET
// export function PrepareMastodont ( ) ; begin
67780: LD_INT 0
67782: PPUSH
// uc_side := 0 ;
67783: LD_ADDR_OWVAR 20
67787: PUSH
67788: LD_INT 0
67790: ST_TO_ADDR
// uc_nation := 0 ;
67791: LD_ADDR_OWVAR 21
67795: PUSH
67796: LD_INT 0
67798: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67799: LD_ADDR_OWVAR 37
67803: PUSH
67804: LD_INT 31
67806: ST_TO_ADDR
// vc_control := control_rider ;
67807: LD_ADDR_OWVAR 38
67811: PUSH
67812: LD_INT 4
67814: ST_TO_ADDR
// end ;
67815: LD_VAR 0 1
67819: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67820: LD_INT 0
67822: PPUSH
67823: PPUSH
67824: PPUSH
// uc_side = 0 ;
67825: LD_ADDR_OWVAR 20
67829: PUSH
67830: LD_INT 0
67832: ST_TO_ADDR
// uc_nation = 0 ;
67833: LD_ADDR_OWVAR 21
67837: PUSH
67838: LD_INT 0
67840: ST_TO_ADDR
// InitHc_All ( ) ;
67841: CALL_OW 584
// InitVc ;
67845: CALL_OW 20
// if mastodonts then
67849: LD_VAR 0 6
67853: IFFALSE 67920
// for i = 1 to mastodonts do
67855: LD_ADDR_VAR 0 11
67859: PUSH
67860: DOUBLE
67861: LD_INT 1
67863: DEC
67864: ST_TO_ADDR
67865: LD_VAR 0 6
67869: PUSH
67870: FOR_TO
67871: IFFALSE 67918
// begin vc_chassis := 31 ;
67873: LD_ADDR_OWVAR 37
67877: PUSH
67878: LD_INT 31
67880: ST_TO_ADDR
// vc_control := control_rider ;
67881: LD_ADDR_OWVAR 38
67885: PUSH
67886: LD_INT 4
67888: ST_TO_ADDR
// animal := CreateVehicle ;
67889: LD_ADDR_VAR 0 12
67893: PUSH
67894: CALL_OW 45
67898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67899: LD_VAR 0 12
67903: PPUSH
67904: LD_VAR 0 8
67908: PPUSH
67909: LD_INT 0
67911: PPUSH
67912: CALL 70062 0 3
// end ;
67916: GO 67870
67918: POP
67919: POP
// if horses then
67920: LD_VAR 0 5
67924: IFFALSE 67991
// for i = 1 to horses do
67926: LD_ADDR_VAR 0 11
67930: PUSH
67931: DOUBLE
67932: LD_INT 1
67934: DEC
67935: ST_TO_ADDR
67936: LD_VAR 0 5
67940: PUSH
67941: FOR_TO
67942: IFFALSE 67989
// begin hc_class := 21 ;
67944: LD_ADDR_OWVAR 28
67948: PUSH
67949: LD_INT 21
67951: ST_TO_ADDR
// hc_gallery :=  ;
67952: LD_ADDR_OWVAR 33
67956: PUSH
67957: LD_STRING 
67959: ST_TO_ADDR
// animal := CreateHuman ;
67960: LD_ADDR_VAR 0 12
67964: PUSH
67965: CALL_OW 44
67969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67970: LD_VAR 0 12
67974: PPUSH
67975: LD_VAR 0 8
67979: PPUSH
67980: LD_INT 0
67982: PPUSH
67983: CALL 70062 0 3
// end ;
67987: GO 67941
67989: POP
67990: POP
// if birds then
67991: LD_VAR 0 1
67995: IFFALSE 68062
// for i = 1 to birds do
67997: LD_ADDR_VAR 0 11
68001: PUSH
68002: DOUBLE
68003: LD_INT 1
68005: DEC
68006: ST_TO_ADDR
68007: LD_VAR 0 1
68011: PUSH
68012: FOR_TO
68013: IFFALSE 68060
// begin hc_class := 18 ;
68015: LD_ADDR_OWVAR 28
68019: PUSH
68020: LD_INT 18
68022: ST_TO_ADDR
// hc_gallery =  ;
68023: LD_ADDR_OWVAR 33
68027: PUSH
68028: LD_STRING 
68030: ST_TO_ADDR
// animal := CreateHuman ;
68031: LD_ADDR_VAR 0 12
68035: PUSH
68036: CALL_OW 44
68040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68041: LD_VAR 0 12
68045: PPUSH
68046: LD_VAR 0 8
68050: PPUSH
68051: LD_INT 0
68053: PPUSH
68054: CALL 70062 0 3
// end ;
68058: GO 68012
68060: POP
68061: POP
// if tigers then
68062: LD_VAR 0 2
68066: IFFALSE 68150
// for i = 1 to tigers do
68068: LD_ADDR_VAR 0 11
68072: PUSH
68073: DOUBLE
68074: LD_INT 1
68076: DEC
68077: ST_TO_ADDR
68078: LD_VAR 0 2
68082: PUSH
68083: FOR_TO
68084: IFFALSE 68148
// begin hc_class = class_tiger ;
68086: LD_ADDR_OWVAR 28
68090: PUSH
68091: LD_INT 14
68093: ST_TO_ADDR
// hc_gallery =  ;
68094: LD_ADDR_OWVAR 33
68098: PUSH
68099: LD_STRING 
68101: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68102: LD_ADDR_OWVAR 35
68106: PUSH
68107: LD_INT 7
68109: NEG
68110: PPUSH
68111: LD_INT 7
68113: PPUSH
68114: CALL_OW 12
68118: ST_TO_ADDR
// animal := CreateHuman ;
68119: LD_ADDR_VAR 0 12
68123: PUSH
68124: CALL_OW 44
68128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68129: LD_VAR 0 12
68133: PPUSH
68134: LD_VAR 0 8
68138: PPUSH
68139: LD_INT 0
68141: PPUSH
68142: CALL 70062 0 3
// end ;
68146: GO 68083
68148: POP
68149: POP
// if apemans then
68150: LD_VAR 0 3
68154: IFFALSE 68277
// for i = 1 to apemans do
68156: LD_ADDR_VAR 0 11
68160: PUSH
68161: DOUBLE
68162: LD_INT 1
68164: DEC
68165: ST_TO_ADDR
68166: LD_VAR 0 3
68170: PUSH
68171: FOR_TO
68172: IFFALSE 68275
// begin hc_class = class_apeman ;
68174: LD_ADDR_OWVAR 28
68178: PUSH
68179: LD_INT 12
68181: ST_TO_ADDR
// hc_gallery =  ;
68182: LD_ADDR_OWVAR 33
68186: PUSH
68187: LD_STRING 
68189: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68190: LD_ADDR_OWVAR 35
68194: PUSH
68195: LD_INT 2
68197: NEG
68198: PPUSH
68199: LD_INT 2
68201: PPUSH
68202: CALL_OW 12
68206: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68207: LD_ADDR_OWVAR 31
68211: PUSH
68212: LD_INT 1
68214: PPUSH
68215: LD_INT 3
68217: PPUSH
68218: CALL_OW 12
68222: PUSH
68223: LD_INT 1
68225: PPUSH
68226: LD_INT 3
68228: PPUSH
68229: CALL_OW 12
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: ST_TO_ADDR
// animal := CreateHuman ;
68246: LD_ADDR_VAR 0 12
68250: PUSH
68251: CALL_OW 44
68255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68256: LD_VAR 0 12
68260: PPUSH
68261: LD_VAR 0 8
68265: PPUSH
68266: LD_INT 0
68268: PPUSH
68269: CALL 70062 0 3
// end ;
68273: GO 68171
68275: POP
68276: POP
// if enchidnas then
68277: LD_VAR 0 4
68281: IFFALSE 68348
// for i = 1 to enchidnas do
68283: LD_ADDR_VAR 0 11
68287: PUSH
68288: DOUBLE
68289: LD_INT 1
68291: DEC
68292: ST_TO_ADDR
68293: LD_VAR 0 4
68297: PUSH
68298: FOR_TO
68299: IFFALSE 68346
// begin hc_class = 13 ;
68301: LD_ADDR_OWVAR 28
68305: PUSH
68306: LD_INT 13
68308: ST_TO_ADDR
// hc_gallery =  ;
68309: LD_ADDR_OWVAR 33
68313: PUSH
68314: LD_STRING 
68316: ST_TO_ADDR
// animal := CreateHuman ;
68317: LD_ADDR_VAR 0 12
68321: PUSH
68322: CALL_OW 44
68326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68327: LD_VAR 0 12
68331: PPUSH
68332: LD_VAR 0 8
68336: PPUSH
68337: LD_INT 0
68339: PPUSH
68340: CALL 70062 0 3
// end ;
68344: GO 68298
68346: POP
68347: POP
// if fishes then
68348: LD_VAR 0 7
68352: IFFALSE 68419
// for i = 1 to fishes do
68354: LD_ADDR_VAR 0 11
68358: PUSH
68359: DOUBLE
68360: LD_INT 1
68362: DEC
68363: ST_TO_ADDR
68364: LD_VAR 0 7
68368: PUSH
68369: FOR_TO
68370: IFFALSE 68417
// begin hc_class = 20 ;
68372: LD_ADDR_OWVAR 28
68376: PUSH
68377: LD_INT 20
68379: ST_TO_ADDR
// hc_gallery =  ;
68380: LD_ADDR_OWVAR 33
68384: PUSH
68385: LD_STRING 
68387: ST_TO_ADDR
// animal := CreateHuman ;
68388: LD_ADDR_VAR 0 12
68392: PUSH
68393: CALL_OW 44
68397: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68398: LD_VAR 0 12
68402: PPUSH
68403: LD_VAR 0 9
68407: PPUSH
68408: LD_INT 0
68410: PPUSH
68411: CALL 70062 0 3
// end ;
68415: GO 68369
68417: POP
68418: POP
// end ;
68419: LD_VAR 0 10
68423: RET
// export function WantHeal ( sci , unit ) ; begin
68424: LD_INT 0
68426: PPUSH
// if GetTaskList ( sci ) > 0 then
68427: LD_VAR 0 1
68431: PPUSH
68432: CALL_OW 437
68436: PUSH
68437: LD_INT 0
68439: GREATER
68440: IFFALSE 68512
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68442: LD_VAR 0 1
68446: PPUSH
68447: CALL_OW 437
68451: PUSH
68452: LD_INT 1
68454: ARRAY
68455: PUSH
68456: LD_INT 1
68458: ARRAY
68459: PUSH
68460: LD_STRING l
68462: EQUAL
68463: IFFALSE 68490
68465: PUSH
68466: LD_VAR 0 1
68470: PPUSH
68471: CALL_OW 437
68475: PUSH
68476: LD_INT 1
68478: ARRAY
68479: PUSH
68480: LD_INT 4
68482: ARRAY
68483: PUSH
68484: LD_VAR 0 2
68488: EQUAL
68489: AND
68490: IFFALSE 68502
// result := true else
68492: LD_ADDR_VAR 0 3
68496: PUSH
68497: LD_INT 1
68499: ST_TO_ADDR
68500: GO 68510
// result := false ;
68502: LD_ADDR_VAR 0 3
68506: PUSH
68507: LD_INT 0
68509: ST_TO_ADDR
// end else
68510: GO 68520
// result := false ;
68512: LD_ADDR_VAR 0 3
68516: PUSH
68517: LD_INT 0
68519: ST_TO_ADDR
// end ;
68520: LD_VAR 0 3
68524: RET
// export function HealTarget ( sci ) ; begin
68525: LD_INT 0
68527: PPUSH
// if not sci then
68528: LD_VAR 0 1
68532: NOT
68533: IFFALSE 68537
// exit ;
68535: GO 68602
// result := 0 ;
68537: LD_ADDR_VAR 0 2
68541: PUSH
68542: LD_INT 0
68544: ST_TO_ADDR
// if GetTaskList ( sci ) then
68545: LD_VAR 0 1
68549: PPUSH
68550: CALL_OW 437
68554: IFFALSE 68602
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68556: LD_VAR 0 1
68560: PPUSH
68561: CALL_OW 437
68565: PUSH
68566: LD_INT 1
68568: ARRAY
68569: PUSH
68570: LD_INT 1
68572: ARRAY
68573: PUSH
68574: LD_STRING l
68576: EQUAL
68577: IFFALSE 68602
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_VAR 0 1
68588: PPUSH
68589: CALL_OW 437
68593: PUSH
68594: LD_INT 1
68596: ARRAY
68597: PUSH
68598: LD_INT 4
68600: ARRAY
68601: ST_TO_ADDR
// end ;
68602: LD_VAR 0 2
68606: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68607: LD_INT 0
68609: PPUSH
68610: PPUSH
68611: PPUSH
68612: PPUSH
// if not base_units then
68613: LD_VAR 0 1
68617: NOT
68618: IFFALSE 68622
// exit ;
68620: GO 68709
// result := false ;
68622: LD_ADDR_VAR 0 2
68626: PUSH
68627: LD_INT 0
68629: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68630: LD_ADDR_VAR 0 5
68634: PUSH
68635: LD_VAR 0 1
68639: PPUSH
68640: LD_INT 21
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PPUSH
68650: CALL_OW 72
68654: ST_TO_ADDR
// if not tmp then
68655: LD_VAR 0 5
68659: NOT
68660: IFFALSE 68664
// exit ;
68662: GO 68709
// for i in tmp do
68664: LD_ADDR_VAR 0 3
68668: PUSH
68669: LD_VAR 0 5
68673: PUSH
68674: FOR_IN
68675: IFFALSE 68707
// begin result := EnemyInRange ( i , 22 ) ;
68677: LD_ADDR_VAR 0 2
68681: PUSH
68682: LD_VAR 0 3
68686: PPUSH
68687: LD_INT 22
68689: PPUSH
68690: CALL 66124 0 2
68694: ST_TO_ADDR
// if result then
68695: LD_VAR 0 2
68699: IFFALSE 68705
// exit ;
68701: POP
68702: POP
68703: GO 68709
// end ;
68705: GO 68674
68707: POP
68708: POP
// end ;
68709: LD_VAR 0 2
68713: RET
// export function FilterByTag ( units , tag ) ; begin
68714: LD_INT 0
68716: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68717: LD_ADDR_VAR 0 3
68721: PUSH
68722: LD_VAR 0 1
68726: PPUSH
68727: LD_INT 120
68729: PUSH
68730: LD_VAR 0 2
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PPUSH
68739: CALL_OW 72
68743: ST_TO_ADDR
// end ;
68744: LD_VAR 0 3
68748: RET
// export function IsDriver ( un ) ; begin
68749: LD_INT 0
68751: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68752: LD_ADDR_VAR 0 2
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_INT 55
68764: PUSH
68765: EMPTY
68766: LIST
68767: PPUSH
68768: CALL_OW 69
68772: IN
68773: ST_TO_ADDR
// end ;
68774: LD_VAR 0 2
68778: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68779: LD_INT 0
68781: PPUSH
68782: PPUSH
// list := [ ] ;
68783: LD_ADDR_VAR 0 5
68787: PUSH
68788: EMPTY
68789: ST_TO_ADDR
// case d of 0 :
68790: LD_VAR 0 3
68794: PUSH
68795: LD_INT 0
68797: DOUBLE
68798: EQUAL
68799: IFTRUE 68803
68801: GO 68936
68803: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68804: LD_ADDR_VAR 0 5
68808: PUSH
68809: LD_VAR 0 1
68813: PUSH
68814: LD_INT 4
68816: MINUS
68817: PUSH
68818: LD_VAR 0 2
68822: PUSH
68823: LD_INT 4
68825: MINUS
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: PUSH
68835: LD_VAR 0 1
68839: PUSH
68840: LD_INT 3
68842: MINUS
68843: PUSH
68844: LD_VAR 0 2
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: PUSH
68857: LD_VAR 0 1
68861: PUSH
68862: LD_INT 4
68864: PLUS
68865: PUSH
68866: LD_VAR 0 2
68870: PUSH
68871: LD_INT 4
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: PUSH
68879: LD_VAR 0 1
68883: PUSH
68884: LD_INT 3
68886: PLUS
68887: PUSH
68888: LD_VAR 0 2
68892: PUSH
68893: LD_INT 3
68895: PLUS
68896: PUSH
68897: LD_INT 5
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: LIST
68904: PUSH
68905: LD_VAR 0 1
68909: PUSH
68910: LD_VAR 0 2
68914: PUSH
68915: LD_INT 4
68917: PLUS
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: LIST
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: ST_TO_ADDR
// end ; 1 :
68934: GO 69634
68936: LD_INT 1
68938: DOUBLE
68939: EQUAL
68940: IFTRUE 68944
68942: GO 69077
68944: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68945: LD_ADDR_VAR 0 5
68949: PUSH
68950: LD_VAR 0 1
68954: PUSH
68955: LD_VAR 0 2
68959: PUSH
68960: LD_INT 4
68962: MINUS
68963: PUSH
68964: LD_INT 3
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: PUSH
68972: LD_VAR 0 1
68976: PUSH
68977: LD_INT 3
68979: MINUS
68980: PUSH
68981: LD_VAR 0 2
68985: PUSH
68986: LD_INT 3
68988: MINUS
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: PUSH
68998: LD_VAR 0 1
69002: PUSH
69003: LD_INT 4
69005: MINUS
69006: PUSH
69007: LD_VAR 0 2
69011: PUSH
69012: LD_INT 1
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: LIST
69019: PUSH
69020: LD_VAR 0 1
69024: PUSH
69025: LD_VAR 0 2
69029: PUSH
69030: LD_INT 3
69032: PLUS
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: LIST
69041: PUSH
69042: LD_VAR 0 1
69046: PUSH
69047: LD_INT 4
69049: PLUS
69050: PUSH
69051: LD_VAR 0 2
69055: PUSH
69056: LD_INT 4
69058: PLUS
69059: PUSH
69060: LD_INT 5
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: ST_TO_ADDR
// end ; 2 :
69075: GO 69634
69077: LD_INT 2
69079: DOUBLE
69080: EQUAL
69081: IFTRUE 69085
69083: GO 69214
69085: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69086: LD_ADDR_VAR 0 5
69090: PUSH
69091: LD_VAR 0 1
69095: PUSH
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 3
69103: MINUS
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: PUSH
69113: LD_VAR 0 1
69117: PUSH
69118: LD_INT 4
69120: PLUS
69121: PUSH
69122: LD_VAR 0 2
69126: PUSH
69127: LD_INT 4
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: LIST
69134: PUSH
69135: LD_VAR 0 1
69139: PUSH
69140: LD_VAR 0 2
69144: PUSH
69145: LD_INT 4
69147: PLUS
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 1
69161: PUSH
69162: LD_INT 3
69164: MINUS
69165: PUSH
69166: LD_VAR 0 2
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: PUSH
69179: LD_VAR 0 1
69183: PUSH
69184: LD_INT 4
69186: MINUS
69187: PUSH
69188: LD_VAR 0 2
69192: PUSH
69193: LD_INT 4
69195: MINUS
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: LIST
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: ST_TO_ADDR
// end ; 3 :
69212: GO 69634
69214: LD_INT 3
69216: DOUBLE
69217: EQUAL
69218: IFTRUE 69222
69220: GO 69355
69222: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69223: LD_ADDR_VAR 0 5
69227: PUSH
69228: LD_VAR 0 1
69232: PUSH
69233: LD_INT 3
69235: PLUS
69236: PUSH
69237: LD_VAR 0 2
69241: PUSH
69242: LD_INT 4
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: LIST
69249: PUSH
69250: LD_VAR 0 1
69254: PUSH
69255: LD_INT 4
69257: PLUS
69258: PUSH
69259: LD_VAR 0 2
69263: PUSH
69264: LD_INT 4
69266: PLUS
69267: PUSH
69268: LD_INT 5
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: PUSH
69276: LD_VAR 0 1
69280: PUSH
69281: LD_INT 4
69283: MINUS
69284: PUSH
69285: LD_VAR 0 2
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: LD_VAR 0 1
69302: PUSH
69303: LD_VAR 0 2
69307: PUSH
69308: LD_INT 4
69310: MINUS
69311: PUSH
69312: LD_INT 3
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: PUSH
69320: LD_VAR 0 1
69324: PUSH
69325: LD_INT 3
69327: MINUS
69328: PUSH
69329: LD_VAR 0 2
69333: PUSH
69334: LD_INT 3
69336: MINUS
69337: PUSH
69338: LD_INT 2
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: ST_TO_ADDR
// end ; 4 :
69353: GO 69634
69355: LD_INT 4
69357: DOUBLE
69358: EQUAL
69359: IFTRUE 69363
69361: GO 69496
69363: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69364: LD_ADDR_VAR 0 5
69368: PUSH
69369: LD_VAR 0 1
69373: PUSH
69374: LD_VAR 0 2
69378: PUSH
69379: LD_INT 4
69381: PLUS
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: PUSH
69391: LD_VAR 0 1
69395: PUSH
69396: LD_INT 3
69398: PLUS
69399: PUSH
69400: LD_VAR 0 2
69404: PUSH
69405: LD_INT 3
69407: PLUS
69408: PUSH
69409: LD_INT 5
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: LIST
69416: PUSH
69417: LD_VAR 0 1
69421: PUSH
69422: LD_INT 4
69424: PLUS
69425: PUSH
69426: LD_VAR 0 2
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: PUSH
69439: LD_VAR 0 1
69443: PUSH
69444: LD_VAR 0 2
69448: PUSH
69449: LD_INT 3
69451: MINUS
69452: PUSH
69453: LD_INT 3
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: LIST
69460: PUSH
69461: LD_VAR 0 1
69465: PUSH
69466: LD_INT 4
69468: MINUS
69469: PUSH
69470: LD_VAR 0 2
69474: PUSH
69475: LD_INT 4
69477: MINUS
69478: PUSH
69479: LD_INT 2
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: ST_TO_ADDR
// end ; 5 :
69494: GO 69634
69496: LD_INT 5
69498: DOUBLE
69499: EQUAL
69500: IFTRUE 69504
69502: GO 69633
69504: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69505: LD_ADDR_VAR 0 5
69509: PUSH
69510: LD_VAR 0 1
69514: PUSH
69515: LD_INT 4
69517: MINUS
69518: PUSH
69519: LD_VAR 0 2
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: LIST
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 4
69544: MINUS
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: PUSH
69554: LD_VAR 0 1
69558: PUSH
69559: LD_INT 4
69561: PLUS
69562: PUSH
69563: LD_VAR 0 2
69567: PUSH
69568: LD_INT 4
69570: PLUS
69571: PUSH
69572: LD_INT 5
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: PUSH
69580: LD_VAR 0 1
69584: PUSH
69585: LD_INT 3
69587: PLUS
69588: PUSH
69589: LD_VAR 0 2
69593: PUSH
69594: LD_INT 4
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: PUSH
69602: LD_VAR 0 1
69606: PUSH
69607: LD_VAR 0 2
69611: PUSH
69612: LD_INT 3
69614: PLUS
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: ST_TO_ADDR
// end ; end ;
69631: GO 69634
69633: POP
// result := list ;
69634: LD_ADDR_VAR 0 4
69638: PUSH
69639: LD_VAR 0 5
69643: ST_TO_ADDR
// end ;
69644: LD_VAR 0 4
69648: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69649: LD_INT 0
69651: PPUSH
69652: PPUSH
69653: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69654: LD_VAR 0 1
69658: NOT
69659: IFTRUE 69687
69661: PUSH
69662: LD_VAR 0 2
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 4
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: IN
69685: NOT
69686: OR
69687: IFFALSE 69691
// exit ;
69689: GO 69774
// tmp := [ ] ;
69691: LD_ADDR_VAR 0 5
69695: PUSH
69696: EMPTY
69697: ST_TO_ADDR
// for i in units do
69698: LD_ADDR_VAR 0 4
69702: PUSH
69703: LD_VAR 0 1
69707: PUSH
69708: FOR_IN
69709: IFFALSE 69743
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69711: LD_ADDR_VAR 0 5
69715: PUSH
69716: LD_VAR 0 5
69720: PPUSH
69721: LD_VAR 0 4
69725: PPUSH
69726: LD_VAR 0 2
69730: PPUSH
69731: CALL_OW 259
69735: PPUSH
69736: CALL 71169 0 2
69740: ST_TO_ADDR
69741: GO 69708
69743: POP
69744: POP
// if not tmp then
69745: LD_VAR 0 5
69749: NOT
69750: IFFALSE 69754
// exit ;
69752: GO 69774
// result := SortListByListDesc ( units , tmp ) ;
69754: LD_ADDR_VAR 0 3
69758: PUSH
69759: LD_VAR 0 1
69763: PPUSH
69764: LD_VAR 0 5
69768: PPUSH
69769: CALL_OW 77
69773: ST_TO_ADDR
// end ;
69774: LD_VAR 0 3
69778: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69779: LD_INT 0
69781: PPUSH
69782: PPUSH
69783: PPUSH
// result := false ;
69784: LD_ADDR_VAR 0 3
69788: PUSH
69789: LD_INT 0
69791: ST_TO_ADDR
// if not building then
69792: LD_VAR 0 2
69796: NOT
69797: IFFALSE 69801
// exit ;
69799: GO 69945
// x := GetX ( building ) ;
69801: LD_ADDR_VAR 0 4
69805: PUSH
69806: LD_VAR 0 2
69810: PPUSH
69811: CALL_OW 250
69815: ST_TO_ADDR
// y := GetY ( building ) ;
69816: LD_ADDR_VAR 0 5
69820: PUSH
69821: LD_VAR 0 2
69825: PPUSH
69826: CALL_OW 251
69830: ST_TO_ADDR
// if not x or not y then
69831: LD_VAR 0 4
69835: NOT
69836: IFTRUE 69845
69838: PUSH
69839: LD_VAR 0 5
69843: NOT
69844: OR
69845: IFFALSE 69849
// exit ;
69847: GO 69945
// if GetTaskList ( unit ) then
69849: LD_VAR 0 1
69853: PPUSH
69854: CALL_OW 437
69858: IFFALSE 69945
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69860: LD_STRING e
69862: PUSH
69863: LD_VAR 0 1
69867: PPUSH
69868: CALL_OW 437
69872: PUSH
69873: LD_INT 1
69875: ARRAY
69876: PUSH
69877: LD_INT 1
69879: ARRAY
69880: EQUAL
69881: IFFALSE 69908
69883: PUSH
69884: LD_VAR 0 4
69888: PUSH
69889: LD_VAR 0 1
69893: PPUSH
69894: CALL_OW 437
69898: PUSH
69899: LD_INT 1
69901: ARRAY
69902: PUSH
69903: LD_INT 2
69905: ARRAY
69906: EQUAL
69907: AND
69908: IFFALSE 69935
69910: PUSH
69911: LD_VAR 0 5
69915: PUSH
69916: LD_VAR 0 1
69920: PPUSH
69921: CALL_OW 437
69925: PUSH
69926: LD_INT 1
69928: ARRAY
69929: PUSH
69930: LD_INT 3
69932: ARRAY
69933: EQUAL
69934: AND
69935: IFFALSE 69945
// result := true end ;
69937: LD_ADDR_VAR 0 3
69941: PUSH
69942: LD_INT 1
69944: ST_TO_ADDR
// end ;
69945: LD_VAR 0 3
69949: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69950: LD_INT 0
69952: PPUSH
// result := false ;
69953: LD_ADDR_VAR 0 4
69957: PUSH
69958: LD_INT 0
69960: ST_TO_ADDR
// if GetTaskList ( unit ) then
69961: LD_VAR 0 1
69965: PPUSH
69966: CALL_OW 437
69970: IFFALSE 70057
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69972: LD_STRING M
69974: PUSH
69975: LD_VAR 0 1
69979: PPUSH
69980: CALL_OW 437
69984: PUSH
69985: LD_INT 1
69987: ARRAY
69988: PUSH
69989: LD_INT 1
69991: ARRAY
69992: EQUAL
69993: IFFALSE 70020
69995: PUSH
69996: LD_VAR 0 2
70000: PUSH
70001: LD_VAR 0 1
70005: PPUSH
70006: CALL_OW 437
70010: PUSH
70011: LD_INT 1
70013: ARRAY
70014: PUSH
70015: LD_INT 2
70017: ARRAY
70018: EQUAL
70019: AND
70020: IFFALSE 70047
70022: PUSH
70023: LD_VAR 0 3
70027: PUSH
70028: LD_VAR 0 1
70032: PPUSH
70033: CALL_OW 437
70037: PUSH
70038: LD_INT 1
70040: ARRAY
70041: PUSH
70042: LD_INT 3
70044: ARRAY
70045: EQUAL
70046: AND
70047: IFFALSE 70057
// result := true ;
70049: LD_ADDR_VAR 0 4
70053: PUSH
70054: LD_INT 1
70056: ST_TO_ADDR
// end ; end ;
70057: LD_VAR 0 4
70061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70062: LD_INT 0
70064: PPUSH
70065: PPUSH
70066: PPUSH
70067: PPUSH
// if not unit or not area then
70068: LD_VAR 0 1
70072: NOT
70073: IFTRUE 70082
70075: PUSH
70076: LD_VAR 0 2
70080: NOT
70081: OR
70082: IFFALSE 70086
// exit ;
70084: GO 70262
// tmp := AreaToList ( area , i ) ;
70086: LD_ADDR_VAR 0 6
70090: PUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_VAR 0 5
70100: PPUSH
70101: CALL_OW 517
70105: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70106: LD_ADDR_VAR 0 5
70110: PUSH
70111: DOUBLE
70112: LD_INT 1
70114: DEC
70115: ST_TO_ADDR
70116: LD_VAR 0 6
70120: PUSH
70121: LD_INT 1
70123: ARRAY
70124: PUSH
70125: FOR_TO
70126: IFFALSE 70260
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70128: LD_ADDR_VAR 0 7
70132: PUSH
70133: LD_VAR 0 6
70137: PUSH
70138: LD_INT 1
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 5
70146: ARRAY
70147: PUSH
70148: LD_VAR 0 6
70152: PUSH
70153: LD_INT 2
70155: ARRAY
70156: PUSH
70157: LD_VAR 0 5
70161: ARRAY
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70167: LD_INT 92
70169: PUSH
70170: LD_VAR 0 7
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PUSH
70179: LD_VAR 0 7
70183: PUSH
70184: LD_INT 2
70186: ARRAY
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: PPUSH
70197: CALL_OW 69
70201: PUSH
70202: LD_INT 0
70204: EQUAL
70205: IFFALSE 70258
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70207: LD_VAR 0 1
70211: PPUSH
70212: LD_VAR 0 7
70216: PUSH
70217: LD_INT 1
70219: ARRAY
70220: PPUSH
70221: LD_VAR 0 7
70225: PUSH
70226: LD_INT 2
70228: ARRAY
70229: PPUSH
70230: LD_VAR 0 3
70234: PPUSH
70235: CALL_OW 48
// result := IsPlaced ( unit ) ;
70239: LD_ADDR_VAR 0 4
70243: PUSH
70244: LD_VAR 0 1
70248: PPUSH
70249: CALL_OW 305
70253: ST_TO_ADDR
// exit ;
70254: POP
70255: POP
70256: GO 70262
// end ; end ;
70258: GO 70125
70260: POP
70261: POP
// end ;
70262: LD_VAR 0 4
70266: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70267: LD_INT 0
70269: PPUSH
70270: PPUSH
70271: PPUSH
// if not side or side > 8 then
70272: LD_VAR 0 1
70276: NOT
70277: IFTRUE 70289
70279: PUSH
70280: LD_VAR 0 1
70284: PUSH
70285: LD_INT 8
70287: GREATER
70288: OR
70289: IFFALSE 70293
// exit ;
70291: GO 70480
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70293: LD_ADDR_VAR 0 4
70297: PUSH
70298: LD_INT 22
70300: PUSH
70301: LD_VAR 0 1
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 21
70312: PUSH
70313: LD_INT 3
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PPUSH
70324: CALL_OW 69
70328: ST_TO_ADDR
// if not tmp then
70329: LD_VAR 0 4
70333: NOT
70334: IFFALSE 70338
// exit ;
70336: GO 70480
// enable_addtolog := true ;
70338: LD_ADDR_OWVAR 81
70342: PUSH
70343: LD_INT 1
70345: ST_TO_ADDR
// AddToLog ( [ ) ;
70346: LD_STRING [
70348: PPUSH
70349: CALL_OW 561
// for i in tmp do
70353: LD_ADDR_VAR 0 3
70357: PUSH
70358: LD_VAR 0 4
70362: PUSH
70363: FOR_IN
70364: IFFALSE 70471
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70366: LD_STRING [
70368: PUSH
70369: LD_VAR 0 3
70373: PPUSH
70374: CALL_OW 266
70378: STR
70379: PUSH
70380: LD_STRING , 
70382: STR
70383: PUSH
70384: LD_VAR 0 3
70388: PPUSH
70389: CALL_OW 250
70393: STR
70394: PUSH
70395: LD_STRING , 
70397: STR
70398: PUSH
70399: LD_VAR 0 3
70403: PPUSH
70404: CALL_OW 251
70408: STR
70409: PUSH
70410: LD_STRING , 
70412: STR
70413: PUSH
70414: LD_VAR 0 3
70418: PPUSH
70419: CALL_OW 254
70423: STR
70424: PUSH
70425: LD_STRING , 
70427: STR
70428: PUSH
70429: LD_VAR 0 3
70433: PPUSH
70434: LD_INT 1
70436: PPUSH
70437: CALL_OW 268
70441: STR
70442: PUSH
70443: LD_STRING , 
70445: STR
70446: PUSH
70447: LD_VAR 0 3
70451: PPUSH
70452: LD_INT 2
70454: PPUSH
70455: CALL_OW 268
70459: STR
70460: PUSH
70461: LD_STRING ],
70463: STR
70464: PPUSH
70465: CALL_OW 561
// end ;
70469: GO 70363
70471: POP
70472: POP
// AddToLog ( ]; ) ;
70473: LD_STRING ];
70475: PPUSH
70476: CALL_OW 561
// end ;
70480: LD_VAR 0 2
70484: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70485: LD_INT 0
70487: PPUSH
70488: PPUSH
70489: PPUSH
70490: PPUSH
70491: PPUSH
// if not area or not rate or not max then
70492: LD_VAR 0 1
70496: NOT
70497: IFTRUE 70506
70499: PUSH
70500: LD_VAR 0 2
70504: NOT
70505: OR
70506: IFTRUE 70515
70508: PUSH
70509: LD_VAR 0 4
70513: NOT
70514: OR
70515: IFFALSE 70519
// exit ;
70517: GO 70708
// while 1 do
70519: LD_INT 1
70521: IFFALSE 70708
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70523: LD_ADDR_VAR 0 9
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: LD_INT 1
70535: PPUSH
70536: CALL_OW 287
70540: PUSH
70541: LD_INT 10
70543: MUL
70544: ST_TO_ADDR
// r := rate / 10 ;
70545: LD_ADDR_VAR 0 7
70549: PUSH
70550: LD_VAR 0 2
70554: PUSH
70555: LD_INT 10
70557: DIVREAL
70558: ST_TO_ADDR
// time := 1 1$00 ;
70559: LD_ADDR_VAR 0 8
70563: PUSH
70564: LD_INT 2100
70566: ST_TO_ADDR
// if amount < min then
70567: LD_VAR 0 9
70571: PUSH
70572: LD_VAR 0 3
70576: LESS
70577: IFFALSE 70595
// r := r * 2 else
70579: LD_ADDR_VAR 0 7
70583: PUSH
70584: LD_VAR 0 7
70588: PUSH
70589: LD_INT 2
70591: MUL
70592: ST_TO_ADDR
70593: GO 70621
// if amount > max then
70595: LD_VAR 0 9
70599: PUSH
70600: LD_VAR 0 4
70604: GREATER
70605: IFFALSE 70621
// r := r / 2 ;
70607: LD_ADDR_VAR 0 7
70611: PUSH
70612: LD_VAR 0 7
70616: PUSH
70617: LD_INT 2
70619: DIVREAL
70620: ST_TO_ADDR
// time := time / r ;
70621: LD_ADDR_VAR 0 8
70625: PUSH
70626: LD_VAR 0 8
70630: PUSH
70631: LD_VAR 0 7
70635: DIVREAL
70636: ST_TO_ADDR
// if time < 0 then
70637: LD_VAR 0 8
70641: PUSH
70642: LD_INT 0
70644: LESS
70645: IFFALSE 70662
// time := time * - 1 ;
70647: LD_ADDR_VAR 0 8
70651: PUSH
70652: LD_VAR 0 8
70656: PUSH
70657: LD_INT 1
70659: NEG
70660: MUL
70661: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70662: LD_VAR 0 8
70666: PUSH
70667: LD_INT 35
70669: PPUSH
70670: LD_INT 875
70672: PPUSH
70673: CALL_OW 12
70677: PLUS
70678: PPUSH
70679: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70683: LD_INT 1
70685: PPUSH
70686: LD_INT 5
70688: PPUSH
70689: CALL_OW 12
70693: PPUSH
70694: LD_VAR 0 1
70698: PPUSH
70699: LD_INT 1
70701: PPUSH
70702: CALL_OW 55
// end ;
70706: GO 70519
// end ;
70708: LD_VAR 0 5
70712: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70713: LD_INT 0
70715: PPUSH
70716: PPUSH
70717: PPUSH
70718: PPUSH
70719: PPUSH
70720: PPUSH
70721: PPUSH
70722: PPUSH
// if not turrets or not factories then
70723: LD_VAR 0 1
70727: NOT
70728: IFTRUE 70737
70730: PUSH
70731: LD_VAR 0 2
70735: NOT
70736: OR
70737: IFFALSE 70741
// exit ;
70739: GO 71048
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70741: LD_ADDR_VAR 0 10
70745: PUSH
70746: LD_INT 5
70748: PUSH
70749: LD_INT 6
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 2
70758: PUSH
70759: LD_INT 4
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 3
70768: PUSH
70769: LD_INT 5
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 24
70783: PUSH
70784: LD_INT 25
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 23
70793: PUSH
70794: LD_INT 27
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 42
70807: PUSH
70808: LD_INT 43
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 44
70817: PUSH
70818: LD_INT 46
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 45
70827: PUSH
70828: LD_INT 47
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: ST_TO_ADDR
// result := [ ] ;
70845: LD_ADDR_VAR 0 3
70849: PUSH
70850: EMPTY
70851: ST_TO_ADDR
// for i in turrets do
70852: LD_ADDR_VAR 0 4
70856: PUSH
70857: LD_VAR 0 1
70861: PUSH
70862: FOR_IN
70863: IFFALSE 71046
// begin nat := GetNation ( i ) ;
70865: LD_ADDR_VAR 0 7
70869: PUSH
70870: LD_VAR 0 4
70874: PPUSH
70875: CALL_OW 248
70879: ST_TO_ADDR
// weapon := 0 ;
70880: LD_ADDR_VAR 0 8
70884: PUSH
70885: LD_INT 0
70887: ST_TO_ADDR
// if not nat then
70888: LD_VAR 0 7
70892: NOT
70893: IFFALSE 70897
// continue ;
70895: GO 70862
// for j in list [ nat ] do
70897: LD_ADDR_VAR 0 5
70901: PUSH
70902: LD_VAR 0 10
70906: PUSH
70907: LD_VAR 0 7
70911: ARRAY
70912: PUSH
70913: FOR_IN
70914: IFFALSE 70955
// if GetBWeapon ( i ) = j [ 1 ] then
70916: LD_VAR 0 4
70920: PPUSH
70921: CALL_OW 269
70925: PUSH
70926: LD_VAR 0 5
70930: PUSH
70931: LD_INT 1
70933: ARRAY
70934: EQUAL
70935: IFFALSE 70953
// begin weapon := j [ 2 ] ;
70937: LD_ADDR_VAR 0 8
70941: PUSH
70942: LD_VAR 0 5
70946: PUSH
70947: LD_INT 2
70949: ARRAY
70950: ST_TO_ADDR
// break ;
70951: GO 70955
// end ;
70953: GO 70913
70955: POP
70956: POP
// if not weapon then
70957: LD_VAR 0 8
70961: NOT
70962: IFFALSE 70966
// continue ;
70964: GO 70862
// for k in factories do
70966: LD_ADDR_VAR 0 6
70970: PUSH
70971: LD_VAR 0 2
70975: PUSH
70976: FOR_IN
70977: IFFALSE 71042
// begin weapons := AvailableWeaponList ( k ) ;
70979: LD_ADDR_VAR 0 9
70983: PUSH
70984: LD_VAR 0 6
70988: PPUSH
70989: CALL_OW 478
70993: ST_TO_ADDR
// if not weapons then
70994: LD_VAR 0 9
70998: NOT
70999: IFFALSE 71003
// continue ;
71001: GO 70976
// if weapon in weapons then
71003: LD_VAR 0 8
71007: PUSH
71008: LD_VAR 0 9
71012: IN
71013: IFFALSE 71040
// begin result := [ i , weapon ] ;
71015: LD_ADDR_VAR 0 3
71019: PUSH
71020: LD_VAR 0 4
71024: PUSH
71025: LD_VAR 0 8
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: ST_TO_ADDR
// exit ;
71034: POP
71035: POP
71036: POP
71037: POP
71038: GO 71048
// end ; end ;
71040: GO 70976
71042: POP
71043: POP
// end ;
71044: GO 70862
71046: POP
71047: POP
// end ;
71048: LD_VAR 0 3
71052: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71053: LD_INT 0
71055: PPUSH
// if not side or side > 8 then
71056: LD_VAR 0 3
71060: NOT
71061: IFTRUE 71073
71063: PUSH
71064: LD_VAR 0 3
71068: PUSH
71069: LD_INT 8
71071: GREATER
71072: OR
71073: IFFALSE 71077
// exit ;
71075: GO 71136
// if not range then
71077: LD_VAR 0 4
71081: NOT
71082: IFFALSE 71093
// range := - 12 ;
71084: LD_ADDR_VAR 0 4
71088: PUSH
71089: LD_INT 12
71091: NEG
71092: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71093: LD_VAR 0 1
71097: PPUSH
71098: LD_VAR 0 2
71102: PPUSH
71103: LD_VAR 0 3
71107: PPUSH
71108: LD_VAR 0 4
71112: PPUSH
71113: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71117: LD_VAR 0 1
71121: PPUSH
71122: LD_VAR 0 2
71126: PPUSH
71127: LD_VAR 0 3
71131: PPUSH
71132: CALL_OW 331
// end ;
71136: LD_VAR 0 5
71140: RET
// export function Video ( mode ) ; begin
71141: LD_INT 0
71143: PPUSH
// ingame_video = mode ;
71144: LD_ADDR_OWVAR 52
71148: PUSH
71149: LD_VAR 0 1
71153: ST_TO_ADDR
// interface_hidden = mode ;
71154: LD_ADDR_OWVAR 54
71158: PUSH
71159: LD_VAR 0 1
71163: ST_TO_ADDR
// end ;
71164: LD_VAR 0 2
71168: RET
// export function Join ( array , element ) ; begin
71169: LD_INT 0
71171: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71172: LD_ADDR_VAR 0 3
71176: PUSH
71177: LD_VAR 0 1
71181: PPUSH
71182: LD_VAR 0 1
71186: PUSH
71187: LD_INT 1
71189: PLUS
71190: PPUSH
71191: LD_VAR 0 2
71195: PPUSH
71196: CALL_OW 1
71200: ST_TO_ADDR
// end ;
71201: LD_VAR 0 3
71205: RET
// export function JoinUnion ( array , element ) ; begin
71206: LD_INT 0
71208: PPUSH
// result := array union element ;
71209: LD_ADDR_VAR 0 3
71213: PUSH
71214: LD_VAR 0 1
71218: PUSH
71219: LD_VAR 0 2
71223: UNION
71224: ST_TO_ADDR
// end ;
71225: LD_VAR 0 3
71229: RET
// export function GetBehemoths ( side ) ; begin
71230: LD_INT 0
71232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71233: LD_ADDR_VAR 0 2
71237: PUSH
71238: LD_INT 22
71240: PUSH
71241: LD_VAR 0 1
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 31
71252: PUSH
71253: LD_INT 25
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PPUSH
71264: CALL_OW 69
71268: ST_TO_ADDR
// end ;
71269: LD_VAR 0 2
71273: RET
// export function Shuffle ( array ) ; var i , index ; begin
71274: LD_INT 0
71276: PPUSH
71277: PPUSH
71278: PPUSH
// result := [ ] ;
71279: LD_ADDR_VAR 0 2
71283: PUSH
71284: EMPTY
71285: ST_TO_ADDR
// if not array then
71286: LD_VAR 0 1
71290: NOT
71291: IFFALSE 71295
// exit ;
71293: GO 71394
// Randomize ;
71295: CALL_OW 10
// for i = array downto 1 do
71299: LD_ADDR_VAR 0 3
71303: PUSH
71304: DOUBLE
71305: LD_VAR 0 1
71309: INC
71310: ST_TO_ADDR
71311: LD_INT 1
71313: PUSH
71314: FOR_DOWNTO
71315: IFFALSE 71392
// begin index := rand ( 1 , array ) ;
71317: LD_ADDR_VAR 0 4
71321: PUSH
71322: LD_INT 1
71324: PPUSH
71325: LD_VAR 0 1
71329: PPUSH
71330: CALL_OW 12
71334: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71335: LD_ADDR_VAR 0 2
71339: PUSH
71340: LD_VAR 0 2
71344: PPUSH
71345: LD_VAR 0 2
71349: PUSH
71350: LD_INT 1
71352: PLUS
71353: PPUSH
71354: LD_VAR 0 1
71358: PUSH
71359: LD_VAR 0 4
71363: ARRAY
71364: PPUSH
71365: CALL_OW 2
71369: ST_TO_ADDR
// array := Delete ( array , index ) ;
71370: LD_ADDR_VAR 0 1
71374: PUSH
71375: LD_VAR 0 1
71379: PPUSH
71380: LD_VAR 0 4
71384: PPUSH
71385: CALL_OW 3
71389: ST_TO_ADDR
// end ;
71390: GO 71314
71392: POP
71393: POP
// end ;
71394: LD_VAR 0 2
71398: RET
// export function GetBaseMaterials ( base ) ; begin
71399: LD_INT 0
71401: PPUSH
// result := [ 0 , 0 , 0 ] ;
71402: LD_ADDR_VAR 0 2
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: LIST
71420: ST_TO_ADDR
// if not base then
71421: LD_VAR 0 1
71425: NOT
71426: IFFALSE 71430
// exit ;
71428: GO 71479
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71430: LD_ADDR_VAR 0 2
71434: PUSH
71435: LD_VAR 0 1
71439: PPUSH
71440: LD_INT 1
71442: PPUSH
71443: CALL_OW 275
71447: PUSH
71448: LD_VAR 0 1
71452: PPUSH
71453: LD_INT 2
71455: PPUSH
71456: CALL_OW 275
71460: PUSH
71461: LD_VAR 0 1
71465: PPUSH
71466: LD_INT 3
71468: PPUSH
71469: CALL_OW 275
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: LIST
71478: ST_TO_ADDR
// end ;
71479: LD_VAR 0 2
71483: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71484: LD_INT 0
71486: PPUSH
71487: PPUSH
// result := array ;
71488: LD_ADDR_VAR 0 3
71492: PUSH
71493: LD_VAR 0 1
71497: ST_TO_ADDR
// if size >= result then
71498: LD_VAR 0 2
71502: PUSH
71503: LD_VAR 0 3
71507: GREATEREQUAL
71508: IFFALSE 71512
// exit ;
71510: GO 71562
// if size then
71512: LD_VAR 0 2
71516: IFFALSE 71562
// for i := array downto size do
71518: LD_ADDR_VAR 0 4
71522: PUSH
71523: DOUBLE
71524: LD_VAR 0 1
71528: INC
71529: ST_TO_ADDR
71530: LD_VAR 0 2
71534: PUSH
71535: FOR_DOWNTO
71536: IFFALSE 71560
// result := Delete ( result , result ) ;
71538: LD_ADDR_VAR 0 3
71542: PUSH
71543: LD_VAR 0 3
71547: PPUSH
71548: LD_VAR 0 3
71552: PPUSH
71553: CALL_OW 3
71557: ST_TO_ADDR
71558: GO 71535
71560: POP
71561: POP
// end ;
71562: LD_VAR 0 3
71566: RET
// export function ComExit ( unit ) ; var tmp ; begin
71567: LD_INT 0
71569: PPUSH
71570: PPUSH
// if not IsInUnit ( unit ) then
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL_OW 310
71580: NOT
71581: IFFALSE 71585
// exit ;
71583: GO 71645
// tmp := IsInUnit ( unit ) ;
71585: LD_ADDR_VAR 0 3
71589: PUSH
71590: LD_VAR 0 1
71594: PPUSH
71595: CALL_OW 310
71599: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71600: LD_VAR 0 3
71604: PPUSH
71605: CALL_OW 247
71609: PUSH
71610: LD_INT 2
71612: EQUAL
71613: IFFALSE 71626
// ComExitVehicle ( unit ) else
71615: LD_VAR 0 1
71619: PPUSH
71620: CALL_OW 121
71624: GO 71635
// ComExitBuilding ( unit ) ;
71626: LD_VAR 0 1
71630: PPUSH
71631: CALL_OW 122
// result := tmp ;
71635: LD_ADDR_VAR 0 2
71639: PUSH
71640: LD_VAR 0 3
71644: ST_TO_ADDR
// end ;
71645: LD_VAR 0 2
71649: RET
// export function ComExitAll ( units ) ; var i ; begin
71650: LD_INT 0
71652: PPUSH
71653: PPUSH
// if not units then
71654: LD_VAR 0 1
71658: NOT
71659: IFFALSE 71663
// exit ;
71661: GO 71689
// for i in units do
71663: LD_ADDR_VAR 0 3
71667: PUSH
71668: LD_VAR 0 1
71672: PUSH
71673: FOR_IN
71674: IFFALSE 71687
// ComExit ( i ) ;
71676: LD_VAR 0 3
71680: PPUSH
71681: CALL 71567 0 1
71685: GO 71673
71687: POP
71688: POP
// end ;
71689: LD_VAR 0 2
71693: RET
// export function ResetHc ; begin
71694: LD_INT 0
71696: PPUSH
// InitHc ;
71697: CALL_OW 19
// hc_importance := 0 ;
71701: LD_ADDR_OWVAR 32
71705: PUSH
71706: LD_INT 0
71708: ST_TO_ADDR
// end ;
71709: LD_VAR 0 1
71713: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
71718: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71719: LD_ADDR_VAR 0 6
71723: PUSH
71724: LD_VAR 0 1
71728: PUSH
71729: LD_VAR 0 3
71733: PLUS
71734: PUSH
71735: LD_INT 2
71737: DIV
71738: ST_TO_ADDR
// if _x < 0 then
71739: LD_VAR 0 6
71743: PUSH
71744: LD_INT 0
71746: LESS
71747: IFFALSE 71764
// _x := _x * - 1 ;
71749: LD_ADDR_VAR 0 6
71753: PUSH
71754: LD_VAR 0 6
71758: PUSH
71759: LD_INT 1
71761: NEG
71762: MUL
71763: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71764: LD_ADDR_VAR 0 7
71768: PUSH
71769: LD_VAR 0 2
71773: PUSH
71774: LD_VAR 0 4
71778: PLUS
71779: PUSH
71780: LD_INT 2
71782: DIV
71783: ST_TO_ADDR
// if _y < 0 then
71784: LD_VAR 0 7
71788: PUSH
71789: LD_INT 0
71791: LESS
71792: IFFALSE 71809
// _y := _y * - 1 ;
71794: LD_ADDR_VAR 0 7
71798: PUSH
71799: LD_VAR 0 7
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: MUL
71808: ST_TO_ADDR
// result := [ _x , _y ] ;
71809: LD_ADDR_VAR 0 5
71813: PUSH
71814: LD_VAR 0 6
71818: PUSH
71819: LD_VAR 0 7
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: ST_TO_ADDR
// end ;
71828: LD_VAR 0 5
71832: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71833: LD_INT 0
71835: PPUSH
71836: PPUSH
71837: PPUSH
71838: PPUSH
// task := GetTaskList ( unit ) ;
71839: LD_ADDR_VAR 0 7
71843: PUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: CALL_OW 437
71853: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71854: LD_VAR 0 7
71858: NOT
71859: IFFALSE 71878
71861: PUSH
71862: LD_VAR 0 1
71866: PPUSH
71867: LD_VAR 0 2
71871: PPUSH
71872: CALL_OW 308
71876: NOT
71877: AND
71878: IFFALSE 71882
// exit ;
71880: GO 72000
// if IsInArea ( unit , area ) then
71882: LD_VAR 0 1
71886: PPUSH
71887: LD_VAR 0 2
71891: PPUSH
71892: CALL_OW 308
71896: IFFALSE 71914
// begin ComMoveToArea ( unit , goAway ) ;
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 3
71907: PPUSH
71908: CALL_OW 113
// exit ;
71912: GO 72000
// end ; if task [ 1 ] [ 1 ] <> M then
71914: LD_VAR 0 7
71918: PUSH
71919: LD_INT 1
71921: ARRAY
71922: PUSH
71923: LD_INT 1
71925: ARRAY
71926: PUSH
71927: LD_STRING M
71929: NONEQUAL
71930: IFFALSE 71934
// exit ;
71932: GO 72000
// x := task [ 1 ] [ 2 ] ;
71934: LD_ADDR_VAR 0 5
71938: PUSH
71939: LD_VAR 0 7
71943: PUSH
71944: LD_INT 1
71946: ARRAY
71947: PUSH
71948: LD_INT 2
71950: ARRAY
71951: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71952: LD_ADDR_VAR 0 6
71956: PUSH
71957: LD_VAR 0 7
71961: PUSH
71962: LD_INT 1
71964: ARRAY
71965: PUSH
71966: LD_INT 3
71968: ARRAY
71969: ST_TO_ADDR
// if InArea ( x , y , area ) then
71970: LD_VAR 0 5
71974: PPUSH
71975: LD_VAR 0 6
71979: PPUSH
71980: LD_VAR 0 2
71984: PPUSH
71985: CALL_OW 309
71989: IFFALSE 72000
// ComStop ( unit ) ;
71991: LD_VAR 0 1
71995: PPUSH
71996: CALL_OW 141
// end ;
72000: LD_VAR 0 4
72004: RET
// export function Abs ( value ) ; begin
72005: LD_INT 0
72007: PPUSH
// result := value ;
72008: LD_ADDR_VAR 0 2
72012: PUSH
72013: LD_VAR 0 1
72017: ST_TO_ADDR
// if value < 0 then
72018: LD_VAR 0 1
72022: PUSH
72023: LD_INT 0
72025: LESS
72026: IFFALSE 72043
// result := value * - 1 ;
72028: LD_ADDR_VAR 0 2
72032: PUSH
72033: LD_VAR 0 1
72037: PUSH
72038: LD_INT 1
72040: NEG
72041: MUL
72042: ST_TO_ADDR
// end ;
72043: LD_VAR 0 2
72047: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72048: LD_INT 0
72050: PPUSH
72051: PPUSH
72052: PPUSH
72053: PPUSH
72054: PPUSH
72055: PPUSH
72056: PPUSH
72057: PPUSH
// if not unit or not building then
72058: LD_VAR 0 1
72062: NOT
72063: IFTRUE 72072
72065: PUSH
72066: LD_VAR 0 2
72070: NOT
72071: OR
72072: IFFALSE 72076
// exit ;
72074: GO 72304
// x := GetX ( building ) ;
72076: LD_ADDR_VAR 0 4
72080: PUSH
72081: LD_VAR 0 2
72085: PPUSH
72086: CALL_OW 250
72090: ST_TO_ADDR
// y := GetY ( building ) ;
72091: LD_ADDR_VAR 0 6
72095: PUSH
72096: LD_VAR 0 2
72100: PPUSH
72101: CALL_OW 251
72105: ST_TO_ADDR
// d := GetDir ( building ) ;
72106: LD_ADDR_VAR 0 8
72110: PUSH
72111: LD_VAR 0 2
72115: PPUSH
72116: CALL_OW 254
72120: ST_TO_ADDR
// r := 4 ;
72121: LD_ADDR_VAR 0 9
72125: PUSH
72126: LD_INT 4
72128: ST_TO_ADDR
// for i := 1 to 5 do
72129: LD_ADDR_VAR 0 10
72133: PUSH
72134: DOUBLE
72135: LD_INT 1
72137: DEC
72138: ST_TO_ADDR
72139: LD_INT 5
72141: PUSH
72142: FOR_TO
72143: IFFALSE 72302
// begin _x := ShiftX ( x , d , r + i ) ;
72145: LD_ADDR_VAR 0 5
72149: PUSH
72150: LD_VAR 0 4
72154: PPUSH
72155: LD_VAR 0 8
72159: PPUSH
72160: LD_VAR 0 9
72164: PUSH
72165: LD_VAR 0 10
72169: PLUS
72170: PPUSH
72171: CALL_OW 272
72175: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72176: LD_ADDR_VAR 0 7
72180: PUSH
72181: LD_VAR 0 6
72185: PPUSH
72186: LD_VAR 0 8
72190: PPUSH
72191: LD_VAR 0 9
72195: PUSH
72196: LD_VAR 0 10
72200: PLUS
72201: PPUSH
72202: CALL_OW 273
72206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72207: LD_VAR 0 5
72211: PPUSH
72212: LD_VAR 0 7
72216: PPUSH
72217: CALL_OW 488
72221: IFFALSE 72256
72223: PUSH
72224: LD_VAR 0 5
72228: PPUSH
72229: LD_VAR 0 7
72233: PPUSH
72234: CALL_OW 428
72238: PPUSH
72239: CALL_OW 247
72243: PUSH
72244: LD_INT 3
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: IN
72254: NOT
72255: AND
72256: IFFALSE 72300
// begin ComMoveXY ( unit , _x , _y ) ;
72258: LD_VAR 0 1
72262: PPUSH
72263: LD_VAR 0 5
72267: PPUSH
72268: LD_VAR 0 7
72272: PPUSH
72273: CALL_OW 111
// result := [ _x , _y ] ;
72277: LD_ADDR_VAR 0 3
72281: PUSH
72282: LD_VAR 0 5
72286: PUSH
72287: LD_VAR 0 7
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: ST_TO_ADDR
// exit ;
72296: POP
72297: POP
72298: GO 72304
// end ; end ;
72300: GO 72142
72302: POP
72303: POP
// end ;
72304: LD_VAR 0 3
72308: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72309: LD_INT 0
72311: PPUSH
72312: PPUSH
72313: PPUSH
// result := 0 ;
72314: LD_ADDR_VAR 0 3
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72322: LD_VAR 0 1
72326: PUSH
72327: LD_INT 0
72329: LESS
72330: IFTRUE 72342
72332: PUSH
72333: LD_VAR 0 1
72337: PUSH
72338: LD_INT 8
72340: GREATER
72341: OR
72342: IFTRUE 72354
72344: PUSH
72345: LD_VAR 0 2
72349: PUSH
72350: LD_INT 0
72352: LESS
72353: OR
72354: IFTRUE 72366
72356: PUSH
72357: LD_VAR 0 2
72361: PUSH
72362: LD_INT 8
72364: GREATER
72365: OR
72366: IFFALSE 72370
// exit ;
72368: GO 72445
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72370: LD_ADDR_VAR 0 4
72374: PUSH
72375: LD_INT 22
72377: PUSH
72378: LD_VAR 0 2
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PPUSH
72387: CALL_OW 69
72391: PUSH
72392: FOR_IN
72393: IFFALSE 72443
// begin un := UnitShoot ( i ) ;
72395: LD_ADDR_VAR 0 5
72399: PUSH
72400: LD_VAR 0 4
72404: PPUSH
72405: CALL_OW 504
72409: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72410: LD_VAR 0 5
72414: PPUSH
72415: CALL_OW 255
72419: PUSH
72420: LD_VAR 0 1
72424: EQUAL
72425: IFFALSE 72441
// begin result := un ;
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: LD_VAR 0 5
72436: ST_TO_ADDR
// exit ;
72437: POP
72438: POP
72439: GO 72445
// end ; end ;
72441: GO 72392
72443: POP
72444: POP
// end ;
72445: LD_VAR 0 3
72449: RET
// export function GetCargoBay ( units ) ; begin
72450: LD_INT 0
72452: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72453: LD_ADDR_VAR 0 2
72457: PUSH
72458: LD_VAR 0 1
72462: PPUSH
72463: LD_INT 2
72465: PUSH
72466: LD_INT 34
72468: PUSH
72469: LD_INT 12
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 34
72478: PUSH
72479: LD_INT 51
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 34
72488: PUSH
72489: LD_INT 32
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 34
72498: PUSH
72499: LD_INT 89
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: PPUSH
72513: CALL_OW 72
72517: ST_TO_ADDR
// end ;
72518: LD_VAR 0 2
72522: RET
// export function Negate ( value ) ; begin
72523: LD_INT 0
72525: PPUSH
// result := not value ;
72526: LD_ADDR_VAR 0 2
72530: PUSH
72531: LD_VAR 0 1
72535: NOT
72536: ST_TO_ADDR
// end ;
72537: LD_VAR 0 2
72541: RET
// export function Inc ( value ) ; begin
72542: LD_INT 0
72544: PPUSH
// result := value + 1 ;
72545: LD_ADDR_VAR 0 2
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 1
72557: PLUS
72558: ST_TO_ADDR
// end ;
72559: LD_VAR 0 2
72563: RET
// export function Dec ( value ) ; begin
72564: LD_INT 0
72566: PPUSH
// result := value - 1 ;
72567: LD_ADDR_VAR 0 2
72571: PUSH
72572: LD_VAR 0 1
72576: PUSH
72577: LD_INT 1
72579: MINUS
72580: ST_TO_ADDR
// end ;
72581: LD_VAR 0 2
72585: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72586: LD_INT 0
72588: PPUSH
72589: PPUSH
72590: PPUSH
72591: PPUSH
72592: PPUSH
72593: PPUSH
72594: PPUSH
72595: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72596: LD_VAR 0 1
72600: PPUSH
72601: LD_VAR 0 2
72605: PPUSH
72606: CALL_OW 488
72610: NOT
72611: IFTRUE 72630
72613: PUSH
72614: LD_VAR 0 3
72618: PPUSH
72619: LD_VAR 0 4
72623: PPUSH
72624: CALL_OW 488
72628: NOT
72629: OR
72630: IFFALSE 72643
// begin result := - 1 ;
72632: LD_ADDR_VAR 0 5
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: ST_TO_ADDR
// exit ;
72641: GO 72878
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72643: LD_ADDR_VAR 0 12
72647: PUSH
72648: LD_VAR 0 1
72652: PPUSH
72653: LD_VAR 0 2
72657: PPUSH
72658: LD_VAR 0 3
72662: PPUSH
72663: LD_VAR 0 4
72667: PPUSH
72668: CALL 71714 0 4
72672: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72673: LD_ADDR_VAR 0 11
72677: PUSH
72678: LD_VAR 0 1
72682: PPUSH
72683: LD_VAR 0 2
72687: PPUSH
72688: LD_VAR 0 12
72692: PUSH
72693: LD_INT 1
72695: ARRAY
72696: PPUSH
72697: LD_VAR 0 12
72701: PUSH
72702: LD_INT 2
72704: ARRAY
72705: PPUSH
72706: CALL_OW 298
72710: ST_TO_ADDR
// distance := 9999 ;
72711: LD_ADDR_VAR 0 10
72715: PUSH
72716: LD_INT 9999
72718: ST_TO_ADDR
// for i := 0 to 5 do
72719: LD_ADDR_VAR 0 6
72723: PUSH
72724: DOUBLE
72725: LD_INT 0
72727: DEC
72728: ST_TO_ADDR
72729: LD_INT 5
72731: PUSH
72732: FOR_TO
72733: IFFALSE 72876
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72735: LD_ADDR_VAR 0 7
72739: PUSH
72740: LD_VAR 0 1
72744: PPUSH
72745: LD_VAR 0 6
72749: PPUSH
72750: LD_VAR 0 11
72754: PPUSH
72755: CALL_OW 272
72759: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72760: LD_ADDR_VAR 0 8
72764: PUSH
72765: LD_VAR 0 2
72769: PPUSH
72770: LD_VAR 0 6
72774: PPUSH
72775: LD_VAR 0 11
72779: PPUSH
72780: CALL_OW 273
72784: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72785: LD_VAR 0 7
72789: PPUSH
72790: LD_VAR 0 8
72794: PPUSH
72795: CALL_OW 488
72799: NOT
72800: IFFALSE 72804
// continue ;
72802: GO 72732
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72804: LD_ADDR_VAR 0 9
72808: PUSH
72809: LD_VAR 0 12
72813: PUSH
72814: LD_INT 1
72816: ARRAY
72817: PPUSH
72818: LD_VAR 0 12
72822: PUSH
72823: LD_INT 2
72825: ARRAY
72826: PPUSH
72827: LD_VAR 0 7
72831: PPUSH
72832: LD_VAR 0 8
72836: PPUSH
72837: CALL_OW 298
72841: ST_TO_ADDR
// if tmp < distance then
72842: LD_VAR 0 9
72846: PUSH
72847: LD_VAR 0 10
72851: LESS
72852: IFFALSE 72874
// begin result := i ;
72854: LD_ADDR_VAR 0 5
72858: PUSH
72859: LD_VAR 0 6
72863: ST_TO_ADDR
// distance := tmp ;
72864: LD_ADDR_VAR 0 10
72868: PUSH
72869: LD_VAR 0 9
72873: ST_TO_ADDR
// end ; end ;
72874: GO 72732
72876: POP
72877: POP
// end ;
72878: LD_VAR 0 5
72882: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72883: LD_INT 0
72885: PPUSH
72886: PPUSH
// if not driver or not IsInUnit ( driver ) then
72887: LD_VAR 0 1
72891: NOT
72892: IFTRUE 72906
72894: PUSH
72895: LD_VAR 0 1
72899: PPUSH
72900: CALL_OW 310
72904: NOT
72905: OR
72906: IFFALSE 72910
// exit ;
72908: GO 73000
// vehicle := IsInUnit ( driver ) ;
72910: LD_ADDR_VAR 0 3
72914: PUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: CALL_OW 310
72924: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72925: LD_VAR 0 1
72929: PPUSH
72930: LD_STRING \
72932: PUSH
72933: LD_INT 0
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: LD_INT 0
72941: PUSH
72942: LD_INT 0
72944: PUSH
72945: LD_INT 0
72947: PUSH
72948: LD_INT 0
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: PUSH
72960: LD_STRING E
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: LD_INT 0
72968: PUSH
72969: LD_VAR 0 3
72973: PUSH
72974: LD_INT 0
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: LD_INT 0
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PPUSH
72996: CALL_OW 446
// end ;
73000: LD_VAR 0 2
73004: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73005: LD_INT 0
73007: PPUSH
73008: PPUSH
// if not driver or not IsInUnit ( driver ) then
73009: LD_VAR 0 1
73013: NOT
73014: IFTRUE 73028
73016: PUSH
73017: LD_VAR 0 1
73021: PPUSH
73022: CALL_OW 310
73026: NOT
73027: OR
73028: IFFALSE 73032
// exit ;
73030: GO 73122
// vehicle := IsInUnit ( driver ) ;
73032: LD_ADDR_VAR 0 3
73036: PUSH
73037: LD_VAR 0 1
73041: PPUSH
73042: CALL_OW 310
73046: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73047: LD_VAR 0 1
73051: PPUSH
73052: LD_STRING \
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: LD_INT 0
73060: PUSH
73061: LD_INT 0
73063: PUSH
73064: LD_INT 0
73066: PUSH
73067: LD_INT 0
73069: PUSH
73070: LD_INT 0
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: PUSH
73082: LD_STRING E
73084: PUSH
73085: LD_INT 0
73087: PUSH
73088: LD_INT 0
73090: PUSH
73091: LD_VAR 0 3
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: LD_INT 0
73101: PUSH
73102: LD_INT 0
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PPUSH
73118: CALL_OW 447
// end ;
73122: LD_VAR 0 2
73126: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73127: LD_INT 0
73129: PPUSH
73130: PPUSH
73131: PPUSH
// tmp := [ ] ;
73132: LD_ADDR_VAR 0 5
73136: PUSH
73137: EMPTY
73138: ST_TO_ADDR
// for i in units do
73139: LD_ADDR_VAR 0 4
73143: PUSH
73144: LD_VAR 0 1
73148: PUSH
73149: FOR_IN
73150: IFFALSE 73188
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73152: LD_ADDR_VAR 0 5
73156: PUSH
73157: LD_VAR 0 5
73161: PPUSH
73162: LD_VAR 0 5
73166: PUSH
73167: LD_INT 1
73169: PLUS
73170: PPUSH
73171: LD_VAR 0 4
73175: PPUSH
73176: CALL_OW 256
73180: PPUSH
73181: CALL_OW 2
73185: ST_TO_ADDR
73186: GO 73149
73188: POP
73189: POP
// if not tmp then
73190: LD_VAR 0 5
73194: NOT
73195: IFFALSE 73199
// exit ;
73197: GO 73247
// if asc then
73199: LD_VAR 0 2
73203: IFFALSE 73227
// result := SortListByListAsc ( units , tmp ) else
73205: LD_ADDR_VAR 0 3
73209: PUSH
73210: LD_VAR 0 1
73214: PPUSH
73215: LD_VAR 0 5
73219: PPUSH
73220: CALL_OW 76
73224: ST_TO_ADDR
73225: GO 73247
// result := SortListByListDesc ( units , tmp ) ;
73227: LD_ADDR_VAR 0 3
73231: PUSH
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_VAR 0 5
73241: PPUSH
73242: CALL_OW 77
73246: ST_TO_ADDR
// end ;
73247: LD_VAR 0 3
73251: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73252: LD_INT 0
73254: PPUSH
73255: PPUSH
// task := GetTaskList ( mech ) ;
73256: LD_ADDR_VAR 0 4
73260: PUSH
73261: LD_VAR 0 1
73265: PPUSH
73266: CALL_OW 437
73270: ST_TO_ADDR
// if not task then
73271: LD_VAR 0 4
73275: NOT
73276: IFFALSE 73280
// exit ;
73278: GO 73324
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73280: LD_ADDR_VAR 0 3
73284: PUSH
73285: LD_VAR 0 4
73289: PUSH
73290: LD_INT 1
73292: ARRAY
73293: PUSH
73294: LD_INT 1
73296: ARRAY
73297: PUSH
73298: LD_STRING r
73300: EQUAL
73301: IFFALSE 73323
73303: PUSH
73304: LD_VAR 0 4
73308: PUSH
73309: LD_INT 1
73311: ARRAY
73312: PUSH
73313: LD_INT 4
73315: ARRAY
73316: PUSH
73317: LD_VAR 0 2
73321: EQUAL
73322: AND
73323: ST_TO_ADDR
// end ;
73324: LD_VAR 0 3
73328: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73329: LD_INT 0
73331: PPUSH
// SetDir ( unit , d ) ;
73332: LD_VAR 0 1
73336: PPUSH
73337: LD_VAR 0 4
73341: PPUSH
73342: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73346: LD_ADDR_VAR 0 6
73350: PUSH
73351: LD_VAR 0 1
73355: PPUSH
73356: LD_VAR 0 2
73360: PPUSH
73361: LD_VAR 0 3
73365: PPUSH
73366: LD_VAR 0 5
73370: PPUSH
73371: CALL_OW 48
73375: ST_TO_ADDR
// end ;
73376: LD_VAR 0 6
73380: RET
// export function ToNaturalNumber ( number ) ; begin
73381: LD_INT 0
73383: PPUSH
// result := number div 1 ;
73384: LD_ADDR_VAR 0 2
73388: PUSH
73389: LD_VAR 0 1
73393: PUSH
73394: LD_INT 1
73396: DIV
73397: ST_TO_ADDR
// if number < 0 then
73398: LD_VAR 0 1
73402: PUSH
73403: LD_INT 0
73405: LESS
73406: IFFALSE 73416
// result := 0 ;
73408: LD_ADDR_VAR 0 2
73412: PUSH
73413: LD_INT 0
73415: ST_TO_ADDR
// end ;
73416: LD_VAR 0 2
73420: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73421: LD_INT 0
73423: PPUSH
73424: PPUSH
73425: PPUSH
// if not buildings then
73426: LD_VAR 0 1
73430: NOT
73431: IFFALSE 73435
// exit ;
73433: GO 73550
// tmp := [ ] ;
73435: LD_ADDR_VAR 0 5
73439: PUSH
73440: EMPTY
73441: ST_TO_ADDR
// for b in buildings do
73442: LD_ADDR_VAR 0 4
73446: PUSH
73447: LD_VAR 0 1
73451: PUSH
73452: FOR_IN
73453: IFFALSE 73491
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73455: LD_ADDR_VAR 0 5
73459: PUSH
73460: LD_VAR 0 5
73464: PPUSH
73465: LD_VAR 0 5
73469: PUSH
73470: LD_INT 1
73472: PLUS
73473: PPUSH
73474: LD_VAR 0 4
73478: PPUSH
73479: CALL_OW 266
73483: PPUSH
73484: CALL_OW 1
73488: ST_TO_ADDR
73489: GO 73452
73491: POP
73492: POP
// if not tmp then
73493: LD_VAR 0 5
73497: NOT
73498: IFFALSE 73502
// exit ;
73500: GO 73550
// if asc then
73502: LD_VAR 0 2
73506: IFFALSE 73530
// result := SortListByListAsc ( buildings , tmp ) else
73508: LD_ADDR_VAR 0 3
73512: PUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_VAR 0 5
73522: PPUSH
73523: CALL_OW 76
73527: ST_TO_ADDR
73528: GO 73550
// result := SortListByListDesc ( buildings , tmp ) ;
73530: LD_ADDR_VAR 0 3
73534: PUSH
73535: LD_VAR 0 1
73539: PPUSH
73540: LD_VAR 0 5
73544: PPUSH
73545: CALL_OW 77
73549: ST_TO_ADDR
// end ;
73550: LD_VAR 0 3
73554: RET
// export function SortByClass ( units , class ) ; var un ; begin
73555: LD_INT 0
73557: PPUSH
73558: PPUSH
// if not units or not class then
73559: LD_VAR 0 1
73563: NOT
73564: IFTRUE 73573
73566: PUSH
73567: LD_VAR 0 2
73571: NOT
73572: OR
73573: IFFALSE 73577
// exit ;
73575: GO 73672
// result := [ ] ;
73577: LD_ADDR_VAR 0 3
73581: PUSH
73582: EMPTY
73583: ST_TO_ADDR
// for un in units do
73584: LD_ADDR_VAR 0 4
73588: PUSH
73589: LD_VAR 0 1
73593: PUSH
73594: FOR_IN
73595: IFFALSE 73670
// if GetClass ( un ) = class then
73597: LD_VAR 0 4
73601: PPUSH
73602: CALL_OW 257
73606: PUSH
73607: LD_VAR 0 2
73611: EQUAL
73612: IFFALSE 73639
// result := Insert ( result , 1 , un ) else
73614: LD_ADDR_VAR 0 3
73618: PUSH
73619: LD_VAR 0 3
73623: PPUSH
73624: LD_INT 1
73626: PPUSH
73627: LD_VAR 0 4
73631: PPUSH
73632: CALL_OW 2
73636: ST_TO_ADDR
73637: GO 73668
// result := Replace ( result , result + 1 , un ) ;
73639: LD_ADDR_VAR 0 3
73643: PUSH
73644: LD_VAR 0 3
73648: PPUSH
73649: LD_VAR 0 3
73653: PUSH
73654: LD_INT 1
73656: PLUS
73657: PPUSH
73658: LD_VAR 0 4
73662: PPUSH
73663: CALL_OW 1
73667: ST_TO_ADDR
73668: GO 73594
73670: POP
73671: POP
// end ;
73672: LD_VAR 0 3
73676: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73677: LD_INT 0
73679: PPUSH
73680: PPUSH
73681: PPUSH
73682: PPUSH
73683: PPUSH
73684: PPUSH
73685: PPUSH
// result := [ ] ;
73686: LD_ADDR_VAR 0 4
73690: PUSH
73691: EMPTY
73692: ST_TO_ADDR
// if x - r < 0 then
73693: LD_VAR 0 1
73697: PUSH
73698: LD_VAR 0 3
73702: MINUS
73703: PUSH
73704: LD_INT 0
73706: LESS
73707: IFFALSE 73719
// min_x := 0 else
73709: LD_ADDR_VAR 0 8
73713: PUSH
73714: LD_INT 0
73716: ST_TO_ADDR
73717: GO 73735
// min_x := x - r ;
73719: LD_ADDR_VAR 0 8
73723: PUSH
73724: LD_VAR 0 1
73728: PUSH
73729: LD_VAR 0 3
73733: MINUS
73734: ST_TO_ADDR
// if y - r < 0 then
73735: LD_VAR 0 2
73739: PUSH
73740: LD_VAR 0 3
73744: MINUS
73745: PUSH
73746: LD_INT 0
73748: LESS
73749: IFFALSE 73761
// min_y := 0 else
73751: LD_ADDR_VAR 0 7
73755: PUSH
73756: LD_INT 0
73758: ST_TO_ADDR
73759: GO 73777
// min_y := y - r ;
73761: LD_ADDR_VAR 0 7
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_VAR 0 3
73775: MINUS
73776: ST_TO_ADDR
// max_x := x + r ;
73777: LD_ADDR_VAR 0 9
73781: PUSH
73782: LD_VAR 0 1
73786: PUSH
73787: LD_VAR 0 3
73791: PLUS
73792: ST_TO_ADDR
// max_y := y + r ;
73793: LD_ADDR_VAR 0 10
73797: PUSH
73798: LD_VAR 0 2
73802: PUSH
73803: LD_VAR 0 3
73807: PLUS
73808: ST_TO_ADDR
// for _x = min_x to max_x do
73809: LD_ADDR_VAR 0 5
73813: PUSH
73814: DOUBLE
73815: LD_VAR 0 8
73819: DEC
73820: ST_TO_ADDR
73821: LD_VAR 0 9
73825: PUSH
73826: FOR_TO
73827: IFFALSE 73928
// for _y = min_y to max_y do
73829: LD_ADDR_VAR 0 6
73833: PUSH
73834: DOUBLE
73835: LD_VAR 0 7
73839: DEC
73840: ST_TO_ADDR
73841: LD_VAR 0 10
73845: PUSH
73846: FOR_TO
73847: IFFALSE 73924
// begin if not ValidHex ( _x , _y ) then
73849: LD_VAR 0 5
73853: PPUSH
73854: LD_VAR 0 6
73858: PPUSH
73859: CALL_OW 488
73863: NOT
73864: IFFALSE 73868
// continue ;
73866: GO 73846
// if GetResourceTypeXY ( _x , _y ) then
73868: LD_VAR 0 5
73872: PPUSH
73873: LD_VAR 0 6
73877: PPUSH
73878: CALL_OW 283
73882: IFFALSE 73922
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73884: LD_ADDR_VAR 0 4
73888: PUSH
73889: LD_VAR 0 4
73893: PPUSH
73894: LD_VAR 0 4
73898: PUSH
73899: LD_INT 1
73901: PLUS
73902: PPUSH
73903: LD_VAR 0 5
73907: PUSH
73908: LD_VAR 0 6
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PPUSH
73917: CALL_OW 1
73921: ST_TO_ADDR
// end ;
73922: GO 73846
73924: POP
73925: POP
73926: GO 73826
73928: POP
73929: POP
// end ;
73930: LD_VAR 0 4
73934: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
73939: PPUSH
73940: PPUSH
73941: PPUSH
73942: PPUSH
73943: PPUSH
73944: PPUSH
// if not units then
73945: LD_VAR 0 1
73949: NOT
73950: IFFALSE 73954
// exit ;
73952: GO 74486
// result := UnitFilter ( units , [ f_ok ] ) ;
73954: LD_ADDR_VAR 0 3
73958: PUSH
73959: LD_VAR 0 1
73963: PPUSH
73964: LD_INT 50
73966: PUSH
73967: EMPTY
73968: LIST
73969: PPUSH
73970: CALL_OW 72
73974: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73975: LD_ADDR_VAR 0 8
73979: PUSH
73980: LD_VAR 0 1
73984: PUSH
73985: LD_INT 1
73987: ARRAY
73988: PPUSH
73989: CALL_OW 255
73993: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73994: LD_ADDR_VAR 0 10
73998: PUSH
73999: LD_INT 29
74001: PUSH
74002: LD_INT 91
74004: PUSH
74005: LD_INT 49
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: LIST
74012: ST_TO_ADDR
// if not result then
74013: LD_VAR 0 3
74017: NOT
74018: IFFALSE 74022
// exit ;
74020: GO 74486
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74022: LD_ADDR_VAR 0 5
74026: PUSH
74027: LD_INT 81
74029: PUSH
74030: LD_VAR 0 8
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PPUSH
74039: CALL_OW 69
74043: ST_TO_ADDR
// for i in result do
74044: LD_ADDR_VAR 0 4
74048: PUSH
74049: LD_VAR 0 3
74053: PUSH
74054: FOR_IN
74055: IFFALSE 74484
// begin tag := GetTag ( i ) + 1 ;
74057: LD_ADDR_VAR 0 9
74061: PUSH
74062: LD_VAR 0 4
74066: PPUSH
74067: CALL_OW 110
74071: PUSH
74072: LD_INT 1
74074: PLUS
74075: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74076: LD_ADDR_VAR 0 7
74080: PUSH
74081: LD_VAR 0 4
74085: PPUSH
74086: CALL_OW 250
74090: PPUSH
74091: LD_VAR 0 4
74095: PPUSH
74096: CALL_OW 251
74100: PPUSH
74101: LD_INT 4
74103: PPUSH
74104: CALL 73677 0 3
74108: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74109: LD_VAR 0 4
74113: PPUSH
74114: CALL_OW 247
74118: PUSH
74119: LD_INT 2
74121: EQUAL
74122: IFFALSE 74134
74124: PUSH
74125: LD_VAR 0 7
74129: PUSH
74130: LD_INT 2
74132: GREATER
74133: AND
74134: IFFALSE 74154
74136: PUSH
74137: LD_VAR 0 4
74141: PPUSH
74142: CALL_OW 264
74146: PUSH
74147: LD_VAR 0 10
74151: IN
74152: NOT
74153: AND
74154: IFFALSE 74193
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74156: LD_VAR 0 4
74160: PPUSH
74161: LD_VAR 0 7
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: PUSH
74170: LD_INT 1
74172: ARRAY
74173: PPUSH
74174: LD_VAR 0 7
74178: PUSH
74179: LD_INT 1
74181: ARRAY
74182: PUSH
74183: LD_INT 2
74185: ARRAY
74186: PPUSH
74187: CALL_OW 116
74191: GO 74482
// if path > tag then
74193: LD_VAR 0 2
74197: PUSH
74198: LD_VAR 0 9
74202: GREATER
74203: IFFALSE 74411
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74205: LD_ADDR_VAR 0 6
74209: PUSH
74210: LD_VAR 0 5
74214: PPUSH
74215: LD_INT 91
74217: PUSH
74218: LD_VAR 0 4
74222: PUSH
74223: LD_INT 8
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: LIST
74230: PPUSH
74231: CALL_OW 72
74235: ST_TO_ADDR
// if nearEnemy then
74236: LD_VAR 0 6
74240: IFFALSE 74309
// begin if GetWeapon ( i ) = ru_time_lapser then
74242: LD_VAR 0 4
74246: PPUSH
74247: CALL_OW 264
74251: PUSH
74252: LD_INT 49
74254: EQUAL
74255: IFFALSE 74283
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74257: LD_VAR 0 4
74261: PPUSH
74262: LD_VAR 0 6
74266: PPUSH
74267: LD_VAR 0 4
74271: PPUSH
74272: CALL_OW 74
74276: PPUSH
74277: CALL_OW 112
74281: GO 74307
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74283: LD_VAR 0 4
74287: PPUSH
74288: LD_VAR 0 6
74292: PPUSH
74293: LD_VAR 0 4
74297: PPUSH
74298: CALL_OW 74
74302: PPUSH
74303: CALL 75567 0 2
// end else
74307: GO 74409
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74309: LD_VAR 0 4
74313: PPUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_VAR 0 9
74323: ARRAY
74324: PUSH
74325: LD_INT 1
74327: ARRAY
74328: PPUSH
74329: LD_VAR 0 2
74333: PUSH
74334: LD_VAR 0 9
74338: ARRAY
74339: PUSH
74340: LD_INT 2
74342: ARRAY
74343: PPUSH
74344: CALL_OW 297
74348: PUSH
74349: LD_INT 6
74351: GREATER
74352: IFFALSE 74395
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74354: LD_VAR 0 4
74358: PPUSH
74359: LD_VAR 0 2
74363: PUSH
74364: LD_VAR 0 9
74368: ARRAY
74369: PUSH
74370: LD_INT 1
74372: ARRAY
74373: PPUSH
74374: LD_VAR 0 2
74378: PUSH
74379: LD_VAR 0 9
74383: ARRAY
74384: PUSH
74385: LD_INT 2
74387: ARRAY
74388: PPUSH
74389: CALL_OW 114
74393: GO 74409
// SetTag ( i , tag ) ;
74395: LD_VAR 0 4
74399: PPUSH
74400: LD_VAR 0 9
74404: PPUSH
74405: CALL_OW 109
// end else
74409: GO 74482
// if enemy then
74411: LD_VAR 0 5
74415: IFFALSE 74482
// begin if GetWeapon ( i ) = ru_time_lapser then
74417: LD_VAR 0 4
74421: PPUSH
74422: CALL_OW 264
74426: PUSH
74427: LD_INT 49
74429: EQUAL
74430: IFFALSE 74458
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74432: LD_VAR 0 4
74436: PPUSH
74437: LD_VAR 0 5
74441: PPUSH
74442: LD_VAR 0 4
74446: PPUSH
74447: CALL_OW 74
74451: PPUSH
74452: CALL_OW 112
74456: GO 74482
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74458: LD_VAR 0 4
74462: PPUSH
74463: LD_VAR 0 5
74467: PPUSH
74468: LD_VAR 0 4
74472: PPUSH
74473: CALL_OW 74
74477: PPUSH
74478: CALL 75567 0 2
// end ; end ;
74482: GO 74054
74484: POP
74485: POP
// end ;
74486: LD_VAR 0 3
74490: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74491: LD_INT 0
74493: PPUSH
74494: PPUSH
74495: PPUSH
// if not unit or IsInUnit ( unit ) then
74496: LD_VAR 0 1
74500: NOT
74501: IFTRUE 74514
74503: PUSH
74504: LD_VAR 0 1
74508: PPUSH
74509: CALL_OW 310
74513: OR
74514: IFFALSE 74518
// exit ;
74516: GO 74609
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74518: LD_ADDR_VAR 0 4
74522: PUSH
74523: LD_VAR 0 1
74527: PPUSH
74528: CALL_OW 250
74532: PPUSH
74533: LD_VAR 0 2
74537: PPUSH
74538: LD_INT 1
74540: PPUSH
74541: CALL_OW 272
74545: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74546: LD_ADDR_VAR 0 5
74550: PUSH
74551: LD_VAR 0 1
74555: PPUSH
74556: CALL_OW 251
74560: PPUSH
74561: LD_VAR 0 2
74565: PPUSH
74566: LD_INT 1
74568: PPUSH
74569: CALL_OW 273
74573: ST_TO_ADDR
// if ValidHex ( x , y ) then
74574: LD_VAR 0 4
74578: PPUSH
74579: LD_VAR 0 5
74583: PPUSH
74584: CALL_OW 488
74588: IFFALSE 74609
// ComTurnXY ( unit , x , y ) ;
74590: LD_VAR 0 1
74594: PPUSH
74595: LD_VAR 0 4
74599: PPUSH
74600: LD_VAR 0 5
74604: PPUSH
74605: CALL_OW 118
// end ;
74609: LD_VAR 0 3
74613: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74614: LD_INT 0
74616: PPUSH
74617: PPUSH
// result := false ;
74618: LD_ADDR_VAR 0 3
74622: PUSH
74623: LD_INT 0
74625: ST_TO_ADDR
// if not units then
74626: LD_VAR 0 2
74630: NOT
74631: IFFALSE 74635
// exit ;
74633: GO 74680
// for i in units do
74635: LD_ADDR_VAR 0 4
74639: PUSH
74640: LD_VAR 0 2
74644: PUSH
74645: FOR_IN
74646: IFFALSE 74678
// if See ( side , i ) then
74648: LD_VAR 0 1
74652: PPUSH
74653: LD_VAR 0 4
74657: PPUSH
74658: CALL_OW 292
74662: IFFALSE 74676
// begin result := true ;
74664: LD_ADDR_VAR 0 3
74668: PUSH
74669: LD_INT 1
74671: ST_TO_ADDR
// exit ;
74672: POP
74673: POP
74674: GO 74680
// end ;
74676: GO 74645
74678: POP
74679: POP
// end ;
74680: LD_VAR 0 3
74684: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74685: LD_INT 0
74687: PPUSH
74688: PPUSH
74689: PPUSH
74690: PPUSH
// if not unit or not points then
74691: LD_VAR 0 1
74695: NOT
74696: IFTRUE 74705
74698: PUSH
74699: LD_VAR 0 2
74703: NOT
74704: OR
74705: IFFALSE 74709
// exit ;
74707: GO 74799
// dist := 99999 ;
74709: LD_ADDR_VAR 0 5
74713: PUSH
74714: LD_INT 99999
74716: ST_TO_ADDR
// for i in points do
74717: LD_ADDR_VAR 0 4
74721: PUSH
74722: LD_VAR 0 2
74726: PUSH
74727: FOR_IN
74728: IFFALSE 74797
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74730: LD_ADDR_VAR 0 6
74734: PUSH
74735: LD_VAR 0 1
74739: PPUSH
74740: LD_VAR 0 4
74744: PUSH
74745: LD_INT 1
74747: ARRAY
74748: PPUSH
74749: LD_VAR 0 4
74753: PUSH
74754: LD_INT 2
74756: ARRAY
74757: PPUSH
74758: CALL_OW 297
74762: ST_TO_ADDR
// if tmpDist < dist then
74763: LD_VAR 0 6
74767: PUSH
74768: LD_VAR 0 5
74772: LESS
74773: IFFALSE 74795
// begin result := i ;
74775: LD_ADDR_VAR 0 3
74779: PUSH
74780: LD_VAR 0 4
74784: ST_TO_ADDR
// dist := tmpDist ;
74785: LD_ADDR_VAR 0 5
74789: PUSH
74790: LD_VAR 0 6
74794: ST_TO_ADDR
// end ; end ;
74795: GO 74727
74797: POP
74798: POP
// end ;
74799: LD_VAR 0 3
74803: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74804: LD_INT 0
74806: PPUSH
// uc_side := side ;
74807: LD_ADDR_OWVAR 20
74811: PUSH
74812: LD_VAR 0 1
74816: ST_TO_ADDR
// uc_nation := 3 ;
74817: LD_ADDR_OWVAR 21
74821: PUSH
74822: LD_INT 3
74824: ST_TO_ADDR
// vc_chassis := 25 ;
74825: LD_ADDR_OWVAR 37
74829: PUSH
74830: LD_INT 25
74832: ST_TO_ADDR
// vc_engine := engine_siberite ;
74833: LD_ADDR_OWVAR 39
74837: PUSH
74838: LD_INT 3
74840: ST_TO_ADDR
// vc_control := control_computer ;
74841: LD_ADDR_OWVAR 38
74845: PUSH
74846: LD_INT 3
74848: ST_TO_ADDR
// vc_weapon := 59 ;
74849: LD_ADDR_OWVAR 40
74853: PUSH
74854: LD_INT 59
74856: ST_TO_ADDR
// result := CreateVehicle ;
74857: LD_ADDR_VAR 0 5
74861: PUSH
74862: CALL_OW 45
74866: ST_TO_ADDR
// SetDir ( result , d ) ;
74867: LD_VAR 0 5
74871: PPUSH
74872: LD_VAR 0 4
74876: PPUSH
74877: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74881: LD_VAR 0 5
74885: PPUSH
74886: LD_VAR 0 2
74890: PPUSH
74891: LD_VAR 0 3
74895: PPUSH
74896: LD_INT 0
74898: PPUSH
74899: CALL_OW 48
// end ;
74903: LD_VAR 0 5
74907: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74908: LD_INT 0
74910: PPUSH
74911: PPUSH
74912: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74913: LD_ADDR_VAR 0 2
74917: PUSH
74918: LD_INT 0
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: LD_INT 0
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74936: LD_VAR 0 1
74940: NOT
74941: IFTRUE 74974
74943: PUSH
74944: LD_VAR 0 1
74948: PPUSH
74949: CALL_OW 264
74953: PUSH
74954: LD_INT 12
74956: PUSH
74957: LD_INT 51
74959: PUSH
74960: LD_INT 32
74962: PUSH
74963: LD_INT 89
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: IN
74972: NOT
74973: OR
74974: IFFALSE 74978
// exit ;
74976: GO 75076
// for i := 1 to 3 do
74978: LD_ADDR_VAR 0 3
74982: PUSH
74983: DOUBLE
74984: LD_INT 1
74986: DEC
74987: ST_TO_ADDR
74988: LD_INT 3
74990: PUSH
74991: FOR_TO
74992: IFFALSE 75074
// begin tmp := GetCargo ( cargo , i ) ;
74994: LD_ADDR_VAR 0 4
74998: PUSH
74999: LD_VAR 0 1
75003: PPUSH
75004: LD_VAR 0 3
75008: PPUSH
75009: CALL_OW 289
75013: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75014: LD_ADDR_VAR 0 2
75018: PUSH
75019: LD_VAR 0 2
75023: PPUSH
75024: LD_VAR 0 3
75028: PPUSH
75029: LD_VAR 0 4
75033: PPUSH
75034: CALL_OW 1
75038: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75039: LD_ADDR_VAR 0 2
75043: PUSH
75044: LD_VAR 0 2
75048: PPUSH
75049: LD_INT 4
75051: PPUSH
75052: LD_VAR 0 2
75056: PUSH
75057: LD_INT 4
75059: ARRAY
75060: PUSH
75061: LD_VAR 0 4
75065: PLUS
75066: PPUSH
75067: CALL_OW 1
75071: ST_TO_ADDR
// end ;
75072: GO 74991
75074: POP
75075: POP
// end ;
75076: LD_VAR 0 2
75080: RET
// export function Length ( array ) ; begin
75081: LD_INT 0
75083: PPUSH
// result := array + 0 ;
75084: LD_ADDR_VAR 0 2
75088: PUSH
75089: LD_VAR 0 1
75093: PUSH
75094: LD_INT 0
75096: PLUS
75097: ST_TO_ADDR
// end ;
75098: LD_VAR 0 2
75102: RET
// export function PrepareArray ( array ) ; begin
75103: LD_INT 0
75105: PPUSH
// result := array diff 0 ;
75106: LD_ADDR_VAR 0 2
75110: PUSH
75111: LD_VAR 0 1
75115: PUSH
75116: LD_INT 0
75118: DIFF
75119: ST_TO_ADDR
// if not result [ 1 ] then
75120: LD_VAR 0 2
75124: PUSH
75125: LD_INT 1
75127: ARRAY
75128: NOT
75129: IFFALSE 75149
// result := Delete ( result , 1 ) ;
75131: LD_ADDR_VAR 0 2
75135: PUSH
75136: LD_VAR 0 2
75140: PPUSH
75141: LD_INT 1
75143: PPUSH
75144: CALL_OW 3
75148: ST_TO_ADDR
// end ;
75149: LD_VAR 0 2
75153: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75154: LD_INT 0
75156: PPUSH
75157: PPUSH
75158: PPUSH
75159: PPUSH
// sibRocketRange := 25 ;
75160: LD_ADDR_VAR 0 6
75164: PUSH
75165: LD_INT 25
75167: ST_TO_ADDR
// result := false ;
75168: LD_ADDR_VAR 0 4
75172: PUSH
75173: LD_INT 0
75175: ST_TO_ADDR
// for i := 0 to 5 do
75176: LD_ADDR_VAR 0 5
75180: PUSH
75181: DOUBLE
75182: LD_INT 0
75184: DEC
75185: ST_TO_ADDR
75186: LD_INT 5
75188: PUSH
75189: FOR_TO
75190: IFFALSE 75257
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75192: LD_VAR 0 1
75196: PPUSH
75197: LD_VAR 0 5
75201: PPUSH
75202: LD_VAR 0 6
75206: PPUSH
75207: CALL_OW 272
75211: PPUSH
75212: LD_VAR 0 2
75216: PPUSH
75217: LD_VAR 0 5
75221: PPUSH
75222: LD_VAR 0 6
75226: PPUSH
75227: CALL_OW 273
75231: PPUSH
75232: LD_VAR 0 3
75236: PPUSH
75237: CALL_OW 309
75241: IFFALSE 75255
// begin result := true ;
75243: LD_ADDR_VAR 0 4
75247: PUSH
75248: LD_INT 1
75250: ST_TO_ADDR
// exit ;
75251: POP
75252: POP
75253: GO 75259
// end ;
75255: GO 75189
75257: POP
75258: POP
// end ;
75259: LD_VAR 0 4
75263: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75264: LD_INT 0
75266: PPUSH
75267: PPUSH
75268: PPUSH
// if btype = b_depot then
75269: LD_VAR 0 2
75273: PUSH
75274: LD_INT 0
75276: EQUAL
75277: IFFALSE 75289
// begin result := true ;
75279: LD_ADDR_VAR 0 3
75283: PUSH
75284: LD_INT 1
75286: ST_TO_ADDR
// exit ;
75287: GO 75409
// end ; pom := GetBase ( depot ) ;
75289: LD_ADDR_VAR 0 4
75293: PUSH
75294: LD_VAR 0 1
75298: PPUSH
75299: CALL_OW 274
75303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75304: LD_ADDR_VAR 0 5
75308: PUSH
75309: LD_VAR 0 2
75313: PPUSH
75314: LD_VAR 0 1
75318: PPUSH
75319: CALL_OW 248
75323: PPUSH
75324: CALL_OW 450
75328: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75329: LD_ADDR_VAR 0 3
75333: PUSH
75334: LD_VAR 0 4
75338: PPUSH
75339: LD_INT 1
75341: PPUSH
75342: CALL_OW 275
75346: PUSH
75347: LD_VAR 0 5
75351: PUSH
75352: LD_INT 1
75354: ARRAY
75355: GREATEREQUAL
75356: IFFALSE 75382
75358: PUSH
75359: LD_VAR 0 4
75363: PPUSH
75364: LD_INT 2
75366: PPUSH
75367: CALL_OW 275
75371: PUSH
75372: LD_VAR 0 5
75376: PUSH
75377: LD_INT 2
75379: ARRAY
75380: GREATEREQUAL
75381: AND
75382: IFFALSE 75408
75384: PUSH
75385: LD_VAR 0 4
75389: PPUSH
75390: LD_INT 3
75392: PPUSH
75393: CALL_OW 275
75397: PUSH
75398: LD_VAR 0 5
75402: PUSH
75403: LD_INT 3
75405: ARRAY
75406: GREATEREQUAL
75407: AND
75408: ST_TO_ADDR
// end ;
75409: LD_VAR 0 3
75413: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75414: LD_INT 0
75416: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75417: LD_VAR 0 1
75421: PPUSH
75422: LD_VAR 0 2
75426: PPUSH
75427: LD_INT 0
75429: PPUSH
75430: LD_INT 0
75432: PPUSH
75433: LD_INT 1
75435: PPUSH
75436: LD_INT 0
75438: PPUSH
75439: CALL_OW 587
// end ;
75443: LD_VAR 0 3
75447: RET
// export function CenterOnNow ( unit ) ; begin
75448: LD_INT 0
75450: PPUSH
// result := IsInUnit ( unit ) ;
75451: LD_ADDR_VAR 0 2
75455: PUSH
75456: LD_VAR 0 1
75460: PPUSH
75461: CALL_OW 310
75465: ST_TO_ADDR
// if not result then
75466: LD_VAR 0 2
75470: NOT
75471: IFFALSE 75483
// result := unit ;
75473: LD_ADDR_VAR 0 2
75477: PUSH
75478: LD_VAR 0 1
75482: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75483: LD_VAR 0 1
75487: PPUSH
75488: CALL_OW 87
// end ;
75492: LD_VAR 0 2
75496: RET
// export function ComMoveHex ( unit , hex ) ; begin
75497: LD_INT 0
75499: PPUSH
// if not hex then
75500: LD_VAR 0 2
75504: NOT
75505: IFFALSE 75509
// exit ;
75507: GO 75562
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75509: LD_VAR 0 2
75513: PUSH
75514: LD_INT 1
75516: ARRAY
75517: PPUSH
75518: LD_VAR 0 2
75522: PUSH
75523: LD_INT 2
75525: ARRAY
75526: PPUSH
75527: CALL_OW 428
75531: IFFALSE 75535
// exit ;
75533: GO 75562
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75535: LD_VAR 0 1
75539: PPUSH
75540: LD_VAR 0 2
75544: PUSH
75545: LD_INT 1
75547: ARRAY
75548: PPUSH
75549: LD_VAR 0 2
75553: PUSH
75554: LD_INT 2
75556: ARRAY
75557: PPUSH
75558: CALL_OW 111
// end ;
75562: LD_VAR 0 3
75566: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75567: LD_INT 0
75569: PPUSH
75570: PPUSH
75571: PPUSH
// if not unit or not enemy then
75572: LD_VAR 0 1
75576: NOT
75577: IFTRUE 75586
75579: PUSH
75580: LD_VAR 0 2
75584: NOT
75585: OR
75586: IFFALSE 75590
// exit ;
75588: GO 75716
// x := GetX ( enemy ) ;
75590: LD_ADDR_VAR 0 4
75594: PUSH
75595: LD_VAR 0 2
75599: PPUSH
75600: CALL_OW 250
75604: ST_TO_ADDR
// y := GetY ( enemy ) ;
75605: LD_ADDR_VAR 0 5
75609: PUSH
75610: LD_VAR 0 2
75614: PPUSH
75615: CALL_OW 251
75619: ST_TO_ADDR
// if ValidHex ( x , y ) then
75620: LD_VAR 0 4
75624: PPUSH
75625: LD_VAR 0 5
75629: PPUSH
75630: CALL_OW 488
75634: IFFALSE 75716
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75636: LD_VAR 0 2
75640: PPUSH
75641: CALL_OW 247
75645: PUSH
75646: LD_INT 3
75648: PUSH
75649: LD_INT 2
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: IN
75656: IFTRUE 75679
75658: PUSH
75659: LD_VAR 0 1
75663: PPUSH
75664: CALL_OW 255
75668: PPUSH
75669: LD_VAR 0 2
75673: PPUSH
75674: CALL_OW 292
75678: OR
75679: IFFALSE 75697
// ComAttackUnit ( unit , enemy ) else
75681: LD_VAR 0 1
75685: PPUSH
75686: LD_VAR 0 2
75690: PPUSH
75691: CALL_OW 115
75695: GO 75716
// ComAgressiveMove ( unit , x , y ) ;
75697: LD_VAR 0 1
75701: PPUSH
75702: LD_VAR 0 4
75706: PPUSH
75707: LD_VAR 0 5
75711: PPUSH
75712: CALL_OW 114
// end ;
75716: LD_VAR 0 3
75720: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75721: LD_INT 0
75723: PPUSH
75724: PPUSH
75725: PPUSH
// list := AreaToList ( area , 0 ) ;
75726: LD_ADDR_VAR 0 5
75730: PUSH
75731: LD_VAR 0 1
75735: PPUSH
75736: LD_INT 0
75738: PPUSH
75739: CALL_OW 517
75743: ST_TO_ADDR
// if not list then
75744: LD_VAR 0 5
75748: NOT
75749: IFFALSE 75753
// exit ;
75751: GO 75883
// if all then
75753: LD_VAR 0 2
75757: IFFALSE 75845
// begin for i := 1 to list [ 1 ] do
75759: LD_ADDR_VAR 0 4
75763: PUSH
75764: DOUBLE
75765: LD_INT 1
75767: DEC
75768: ST_TO_ADDR
75769: LD_VAR 0 5
75773: PUSH
75774: LD_INT 1
75776: ARRAY
75777: PUSH
75778: FOR_TO
75779: IFFALSE 75841
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75781: LD_ADDR_VAR 0 3
75785: PUSH
75786: LD_VAR 0 3
75790: PPUSH
75791: LD_VAR 0 3
75795: PUSH
75796: LD_INT 1
75798: PLUS
75799: PPUSH
75800: LD_VAR 0 5
75804: PUSH
75805: LD_INT 1
75807: ARRAY
75808: PUSH
75809: LD_VAR 0 4
75813: ARRAY
75814: PUSH
75815: LD_VAR 0 5
75819: PUSH
75820: LD_INT 2
75822: ARRAY
75823: PUSH
75824: LD_VAR 0 4
75828: ARRAY
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: PPUSH
75834: CALL_OW 1
75838: ST_TO_ADDR
75839: GO 75778
75841: POP
75842: POP
// exit ;
75843: GO 75883
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75845: LD_ADDR_VAR 0 3
75849: PUSH
75850: LD_VAR 0 5
75854: PUSH
75855: LD_INT 1
75857: ARRAY
75858: PUSH
75859: LD_INT 1
75861: ARRAY
75862: PUSH
75863: LD_VAR 0 5
75867: PUSH
75868: LD_INT 2
75870: ARRAY
75871: PUSH
75872: LD_INT 1
75874: ARRAY
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: PUSH
75880: EMPTY
75881: LIST
75882: ST_TO_ADDR
// end ;
75883: LD_VAR 0 3
75887: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75888: LD_INT 0
75890: PPUSH
75891: PPUSH
// list := AreaToList ( area , 0 ) ;
75892: LD_ADDR_VAR 0 4
75896: PUSH
75897: LD_VAR 0 1
75901: PPUSH
75902: LD_INT 0
75904: PPUSH
75905: CALL_OW 517
75909: ST_TO_ADDR
// if not list then
75910: LD_VAR 0 4
75914: NOT
75915: IFFALSE 75919
// exit ;
75917: GO 75960
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75919: LD_ADDR_VAR 0 3
75923: PUSH
75924: LD_VAR 0 4
75928: PUSH
75929: LD_INT 1
75931: ARRAY
75932: PUSH
75933: LD_INT 1
75935: ARRAY
75936: PUSH
75937: LD_VAR 0 4
75941: PUSH
75942: LD_INT 2
75944: ARRAY
75945: PUSH
75946: LD_INT 1
75948: ARRAY
75949: PUSH
75950: LD_VAR 0 2
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: LIST
75959: ST_TO_ADDR
// end ;
75960: LD_VAR 0 3
75964: RET
// export function First ( array ) ; begin
75965: LD_INT 0
75967: PPUSH
// if not array then
75968: LD_VAR 0 1
75972: NOT
75973: IFFALSE 75977
// exit ;
75975: GO 75991
// result := array [ 1 ] ;
75977: LD_ADDR_VAR 0 2
75981: PUSH
75982: LD_VAR 0 1
75986: PUSH
75987: LD_INT 1
75989: ARRAY
75990: ST_TO_ADDR
// end ;
75991: LD_VAR 0 2
75995: RET
// export function Last ( array ) ; begin
75996: LD_INT 0
75998: PPUSH
// if not array then
75999: LD_VAR 0 1
76003: NOT
76004: IFFALSE 76008
// exit ;
76006: GO 76024
// result := array [ array ] ;
76008: LD_ADDR_VAR 0 2
76012: PUSH
76013: LD_VAR 0 1
76017: PUSH
76018: LD_VAR 0 1
76022: ARRAY
76023: ST_TO_ADDR
// end ;
76024: LD_VAR 0 2
76028: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76029: LD_INT 0
76031: PPUSH
76032: PPUSH
// result := [ ] ;
76033: LD_ADDR_VAR 0 5
76037: PUSH
76038: EMPTY
76039: ST_TO_ADDR
// if not array then
76040: LD_VAR 0 1
76044: NOT
76045: IFFALSE 76049
// exit ;
76047: GO 76161
// for i := 1 to array do
76049: LD_ADDR_VAR 0 6
76053: PUSH
76054: DOUBLE
76055: LD_INT 1
76057: DEC
76058: ST_TO_ADDR
76059: LD_VAR 0 1
76063: PUSH
76064: FOR_TO
76065: IFFALSE 76159
// if array [ i ] [ index ] = value then
76067: LD_VAR 0 1
76071: PUSH
76072: LD_VAR 0 6
76076: ARRAY
76077: PUSH
76078: LD_VAR 0 2
76082: ARRAY
76083: PUSH
76084: LD_VAR 0 3
76088: EQUAL
76089: IFFALSE 76157
// begin if indexColumn then
76091: LD_VAR 0 4
76095: IFFALSE 76131
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76097: LD_ADDR_VAR 0 5
76101: PUSH
76102: LD_VAR 0 5
76106: PPUSH
76107: LD_VAR 0 1
76111: PUSH
76112: LD_VAR 0 6
76116: ARRAY
76117: PUSH
76118: LD_VAR 0 4
76122: ARRAY
76123: PPUSH
76124: CALL 71169 0 2
76128: ST_TO_ADDR
76129: GO 76157
// result := Join ( result , array [ i ] ) ;
76131: LD_ADDR_VAR 0 5
76135: PUSH
76136: LD_VAR 0 5
76140: PPUSH
76141: LD_VAR 0 1
76145: PUSH
76146: LD_VAR 0 6
76150: ARRAY
76151: PPUSH
76152: CALL 71169 0 2
76156: ST_TO_ADDR
// end ;
76157: GO 76064
76159: POP
76160: POP
// end ;
76161: LD_VAR 0 5
76165: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76166: LD_INT 0
76168: PPUSH
// if not vehicles or not parkingPoint then
76169: LD_VAR 0 1
76173: NOT
76174: IFTRUE 76183
76176: PUSH
76177: LD_VAR 0 2
76181: NOT
76182: OR
76183: IFFALSE 76187
// exit ;
76185: GO 76285
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76187: LD_ADDR_VAR 0 1
76191: PUSH
76192: LD_VAR 0 1
76196: PPUSH
76197: LD_INT 50
76199: PUSH
76200: EMPTY
76201: LIST
76202: PUSH
76203: LD_INT 3
76205: PUSH
76206: LD_INT 92
76208: PUSH
76209: LD_VAR 0 2
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: PUSH
76218: LD_VAR 0 2
76222: PUSH
76223: LD_INT 2
76225: ARRAY
76226: PUSH
76227: LD_INT 8
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: PPUSH
76244: CALL_OW 72
76248: ST_TO_ADDR
// if not vehicles then
76249: LD_VAR 0 1
76253: NOT
76254: IFFALSE 76258
// exit ;
76256: GO 76285
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76258: LD_VAR 0 1
76262: PPUSH
76263: LD_VAR 0 2
76267: PUSH
76268: LD_INT 1
76270: ARRAY
76271: PPUSH
76272: LD_VAR 0 2
76276: PUSH
76277: LD_INT 2
76279: ARRAY
76280: PPUSH
76281: CALL_OW 111
// end ;
76285: LD_VAR 0 3
76289: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76290: LD_INT 0
76292: PPUSH
76293: PPUSH
76294: PPUSH
// if not side or not area then
76295: LD_VAR 0 1
76299: NOT
76300: IFTRUE 76309
76302: PUSH
76303: LD_VAR 0 2
76307: NOT
76308: OR
76309: IFFALSE 76313
// exit ;
76311: GO 76432
// tmp := AreaToList ( area , 0 ) ;
76313: LD_ADDR_VAR 0 5
76317: PUSH
76318: LD_VAR 0 2
76322: PPUSH
76323: LD_INT 0
76325: PPUSH
76326: CALL_OW 517
76330: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76331: LD_ADDR_VAR 0 4
76335: PUSH
76336: DOUBLE
76337: LD_INT 1
76339: DEC
76340: ST_TO_ADDR
76341: LD_VAR 0 5
76345: PUSH
76346: LD_INT 1
76348: ARRAY
76349: PUSH
76350: FOR_TO
76351: IFFALSE 76430
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76353: LD_VAR 0 5
76357: PUSH
76358: LD_INT 1
76360: ARRAY
76361: PUSH
76362: LD_VAR 0 4
76366: ARRAY
76367: PPUSH
76368: LD_VAR 0 5
76372: PUSH
76373: LD_INT 2
76375: ARRAY
76376: PUSH
76377: LD_VAR 0 4
76381: ARRAY
76382: PPUSH
76383: CALL_OW 351
76387: IFFALSE 76428
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76389: LD_VAR 0 5
76393: PUSH
76394: LD_INT 1
76396: ARRAY
76397: PUSH
76398: LD_VAR 0 4
76402: ARRAY
76403: PPUSH
76404: LD_VAR 0 5
76408: PUSH
76409: LD_INT 2
76411: ARRAY
76412: PUSH
76413: LD_VAR 0 4
76417: ARRAY
76418: PPUSH
76419: LD_VAR 0 1
76423: PPUSH
76424: CALL_OW 244
// end ;
76428: GO 76350
76430: POP
76431: POP
// end ;
76432: LD_VAR 0 3
76436: RET
// export function UniqueArray ( array ) ; var i ; begin
76437: LD_INT 0
76439: PPUSH
76440: PPUSH
// result := [ ] ;
76441: LD_ADDR_VAR 0 2
76445: PUSH
76446: EMPTY
76447: ST_TO_ADDR
// if not array then
76448: LD_VAR 0 1
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76518
// for i := 1 to array do
76457: LD_ADDR_VAR 0 3
76461: PUSH
76462: DOUBLE
76463: LD_INT 1
76465: DEC
76466: ST_TO_ADDR
76467: LD_VAR 0 1
76471: PUSH
76472: FOR_TO
76473: IFFALSE 76516
// if not array [ i ] in result then
76475: LD_VAR 0 1
76479: PUSH
76480: LD_VAR 0 3
76484: ARRAY
76485: PUSH
76486: LD_VAR 0 2
76490: IN
76491: NOT
76492: IFFALSE 76514
// result := Join ( result , i ) ;
76494: LD_ADDR_VAR 0 2
76498: PUSH
76499: LD_VAR 0 2
76503: PPUSH
76504: LD_VAR 0 3
76508: PPUSH
76509: CALL 71169 0 2
76513: ST_TO_ADDR
76514: GO 76472
76516: POP
76517: POP
// end ; end_of_file
76518: LD_VAR 0 2
76522: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76523: LD_VAR 0 1
76527: PUSH
76528: LD_INT 200
76530: DOUBLE
76531: GREATEREQUAL
76532: IFFALSE 76540
76534: LD_INT 299
76536: DOUBLE
76537: LESSEQUAL
76538: IFTRUE 76542
76540: GO 76574
76542: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76543: LD_VAR 0 1
76547: PPUSH
76548: LD_VAR 0 2
76552: PPUSH
76553: LD_VAR 0 3
76557: PPUSH
76558: LD_VAR 0 4
76562: PPUSH
76563: LD_VAR 0 5
76567: PPUSH
76568: CALL 27245 0 5
76572: GO 76651
76574: LD_INT 300
76576: DOUBLE
76577: GREATEREQUAL
76578: IFFALSE 76586
76580: LD_INT 399
76582: DOUBLE
76583: LESSEQUAL
76584: IFTRUE 76588
76586: GO 76650
76588: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76589: LD_VAR 0 1
76593: PPUSH
76594: LD_VAR 0 2
76598: PPUSH
76599: LD_VAR 0 3
76603: PPUSH
76604: LD_VAR 0 4
76608: PPUSH
76609: LD_VAR 0 5
76613: PPUSH
76614: LD_VAR 0 6
76618: PPUSH
76619: LD_VAR 0 7
76623: PPUSH
76624: LD_VAR 0 8
76628: PPUSH
76629: LD_VAR 0 9
76633: PPUSH
76634: LD_VAR 0 10
76638: PPUSH
76639: LD_VAR 0 11
76643: PPUSH
76644: CALL 23048 0 11
76648: GO 76651
76650: POP
// end ;
76651: PPOPN 11
76653: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76654: LD_VAR 0 1
76658: PPUSH
76659: LD_VAR 0 2
76663: PPUSH
76664: LD_VAR 0 3
76668: PPUSH
76669: LD_VAR 0 4
76673: PPUSH
76674: LD_VAR 0 5
76678: PPUSH
76679: CALL 26545 0 5
// end ; end_of_file
76683: PPOPN 5
76685: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76686: LD_VAR 0 1
76690: PPUSH
76691: LD_VAR 0 2
76695: PPUSH
76696: LD_VAR 0 3
76700: PPUSH
76701: LD_VAR 0 4
76705: PPUSH
76706: LD_VAR 0 5
76710: PPUSH
76711: LD_VAR 0 6
76715: PPUSH
76716: CALL 10588 0 6
// end ;
76720: PPOPN 6
76722: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76723: LD_INT 0
76725: PPUSH
// begin if not units then
76726: LD_VAR 0 1
76730: NOT
76731: IFFALSE 76735
// exit ;
76733: GO 76769
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
76735: LD_VAR 0 1
76739: PPUSH
76740: LD_VAR 0 2
76744: PPUSH
76745: LD_VAR 0 3
76749: PPUSH
76750: LD_VAR 0 4
76754: PPUSH
76755: LD_VAR 0 5
76759: PPUSH
76760: LD_VAR 0 6
76764: PPUSH
76765: CALL 32942 0 6
// end ;
76769: PPOPN 7
76771: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76772: CALL 10468 0 0
// end ;
76776: PPOPN 1
76778: END
