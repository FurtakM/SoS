// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8231
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8231
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8203: LD_EXP 23
8207: PPUSH
8208: LD_EXP 16
8212: PPUSH
8213: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8217: LD_EXP 24
8221: PPUSH
8222: LD_EXP 16
8226: PPUSH
8227: CALL_OW 175
// end ;
8231: PPOPN 2
8233: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8234: LD_INT 22
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 91
8246: PUSH
8247: LD_INT 8
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IFFALSE 8452
8268: GO 8270
8270: DISABLE
8271: LD_INT 0
8273: PPUSH
8274: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8275: LD_INT 280
8277: PUSH
8278: LD_INT 245
8280: PUSH
8281: LD_INT 210
8283: PUSH
8284: LD_INT 175
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_OWVAR 67
8297: ARRAY
8298: PPUSH
8299: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_INT 22
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 54
8330: PUSH
8331: EMPTY
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 2
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8452
// for i in tmp do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: LD_VAR 0 2
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8392
// begin ComExitBuilding ( i ) ;
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 142
8382: PPUSH
8383: LD_INT 71
8385: PPUSH
8386: CALL_OW 174
// end ;
8390: GO 8363
8392: POP
8393: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8394: LD_EXP 23
8398: PPUSH
8399: LD_INT 142
8401: PPUSH
8402: LD_INT 71
8404: PPUSH
8405: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8409: LD_EXP 24
8413: PPUSH
8414: LD_INT 142
8416: PPUSH
8417: LD_INT 71
8419: PPUSH
8420: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8424: LD_EXP 23
8428: PPUSH
8429: LD_EXP 16
8433: PPUSH
8434: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8438: LD_EXP 24
8442: PPUSH
8443: LD_EXP 16
8447: PPUSH
8448: CALL_OW 175
// end ;
8452: PPOPN 2
8454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8455: LD_INT 22
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 58
8477: PUSH
8478: EMPTY
8479: LIST
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 24
8486: PUSH
8487: LD_INT 1000
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 91
8500: PUSH
8501: LD_EXP 17
8505: PUSH
8506: LD_INT 8
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 69
8525: PUSH
8526: LD_EXP 17
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: IFFALSE 8650
8538: GO 8540
8540: DISABLE
// begin enable ;
8541: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8542: LD_EXP 17
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 58
8569: PUSH
8570: EMPTY
8571: LIST
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 24
8578: PUSH
8579: LD_INT 1000
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 91
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_INT 8
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 90
8636: PPUSH
8637: CALL_OW 171
// AddComHold ( Olaf ) ;
8641: LD_EXP 17
8645: PPUSH
8646: CALL_OW 200
// end ;
8650: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8651: LD_EXP 12
8655: PUSH
8656: LD_INT 2
8658: PPUSH
8659: CALL_OW 302
8663: NOT
8664: AND
8665: PUSH
8666: LD_OWVAR 67
8670: PUSH
8671: LD_INT 1
8673: EQUAL
8674: AND
8675: PUSH
8676: LD_EXP 13
8680: NOT
8681: AND
8682: IFFALSE 8699
8684: GO 8686
8686: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8687: LD_EXP 16
8691: PPUSH
8692: LD_STRING DH-prison-missing
8694: PPUSH
8695: CALL_OW 88
// end ;
8699: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8700: LD_EXP 12
8704: PUSH
8705: LD_INT 8
8707: PPUSH
8708: CALL_OW 302
8712: NOT
8713: AND
8714: PUSH
8715: LD_OWVAR 67
8719: PUSH
8720: LD_INT 1
8722: GREATER
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 3
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8788: LD_EXP 12
8792: PUSH
8793: LD_INT 10
8795: PPUSH
8796: CALL_OW 302
8800: NOT
8801: AND
8802: PUSH
8803: LD_EXP 13
8807: NOT
8808: AND
8809: IFFALSE 8826
8811: GO 8813
8813: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8814: LD_EXP 16
8818: PPUSH
8819: LD_STRING DH-prison-missing-a
8821: PPUSH
8822: CALL_OW 88
// end ;
8826: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8827: LD_EXP 13
8831: NOT
8832: PUSH
8833: LD_EXP 12
8837: AND
8838: PUSH
8839: LD_INT 2
8841: PPUSH
8842: LD_EXP 20
8846: PPUSH
8847: CALL_OW 292
8851: AND
8852: IFFALSE 8939
8854: GO 8856
8856: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8857: LD_EXP 20
8861: PPUSH
8862: LD_EXP 16
8866: PPUSH
8867: CALL_OW 119
// DialogueOn ;
8871: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8875: LD_EXP 20
8879: PPUSH
8880: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8884: LD_EXP 20
8888: PPUSH
8889: LD_STRING DK-prison-found
8891: PPUSH
8892: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8896: LD_EXP 16
8900: PPUSH
8901: LD_STRING DH-prison-found
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8912: LD_EXP 20
8916: PPUSH
8917: LD_INT 2
8919: PPUSH
8920: CALL_OW 235
// prisonFound := true ;
8924: LD_ADDR_EXP 13
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8932: LD_STRING O6_prison_out
8934: PPUSH
8935: CALL_OW 337
// end ;
8939: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8940: LD_EXP 16
8944: PPUSH
8945: CALL_OW 256
8949: PUSH
8950: LD_INT 500
8952: LESS
8953: IFFALSE 8966
8955: GO 8957
8957: DISABLE
// heikeHurt := true ;
8958: LD_ADDR_EXP 14
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
8966: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8967: LD_INT 22
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 21
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: IFFALSE 9311
8997: GO 8999
8999: DISABLE
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
// begin uc_side := 3 ;
9005: LD_ADDR_OWVAR 20
9009: PUSH
9010: LD_INT 3
9012: ST_TO_ADDR
// uc_nation := 3 ;
9013: LD_ADDR_OWVAR 21
9017: PUSH
9018: LD_INT 3
9020: ST_TO_ADDR
// tmp := [ ] ;
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: EMPTY
9027: ST_TO_ADDR
// for i := 1 to 8 do
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_INT 8
9040: PUSH
9041: FOR_TO
9042: IFFALSE 9150
// begin PrepareHuman ( false , 1 , 4 ) ;
9044: LD_INT 0
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_INT 4
9052: PPUSH
9053: CALL_OW 380
// un := CreateHuman ;
9057: LD_ADDR_VAR 0 3
9061: PUSH
9062: CALL_OW 44
9066: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 4
9074: PPUSH
9075: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_INT 158
9086: PPUSH
9087: LD_INT 80
9089: PPUSH
9090: LD_INT 0
9092: PPUSH
9093: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9097: LD_VAR 0 3
9101: PPUSH
9102: LD_INT 147
9104: PPUSH
9105: LD_INT 75
9107: PPUSH
9108: CALL_OW 111
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 2
9133: PUSH
9134: LD_INT 1
9136: PLUS
9137: PPUSH
9138: LD_VAR 0 3
9142: PPUSH
9143: CALL_OW 1
9147: ST_TO_ADDR
// end ;
9148: GO 9041
9150: POP
9151: POP
// repeat wait ( 0 0$1 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// for i in tmp do
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 2
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9291
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_INT 3
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 69
9191: PPUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 74
9201: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 428
9234: IFFALSE 9275
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_VAR 0 3
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: CALL_OW 250
9254: PPUSH
9255: LD_VAR 0 3
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: CALL_OW 251
9268: PPUSH
9269: CALL_OW 114
9273: GO 9289
// ComAttackUnit ( i , Heike ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 115
// end ;
9289: GO 9169
9291: POP
9292: POP
// until IsDead ( Heike ) or not tmp ;
9293: LD_EXP 16
9297: PPUSH
9298: CALL_OW 301
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: IFFALSE 9152
// end ;
9311: PPOPN 3
9313: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9314: LD_EXP 12
9318: PUSH
9319: LD_EXP 16
9323: PPUSH
9324: CALL_OW 302
9328: AND
9329: PUSH
9330: LD_INT 1
9332: PPUSH
9333: LD_INT 21
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 50
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 71
9368: PUSH
9369: LD_INT 0
9371: EQUAL
9372: AND
9373: IFFALSE 9724
9375: GO 9377
9377: DISABLE
9378: LD_INT 0
9380: PPUSH
// begin if not heikeHurt then
9381: LD_EXP 14
9385: NOT
9386: IFFALSE 9395
// SetAchievement ( ACH_INVINCIBLE ) ;
9388: LD_STRING ACH_INVINCIBLE
9390: PPUSH
9391: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9395: LD_STRING enableBioCharacter(BIO_GIVI)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9402: LD_STRING enableBioCharacter(BIO_MIKE)
9404: PPUSH
9405: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9409: LD_STRING enableBioCharacter(BIO_OLAF)
9411: PPUSH
9412: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 50
9443: PUSH
9444: EMPTY
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: ST_TO_ADDR
// if prisonFound then
9457: LD_EXP 13
9461: IFFALSE 9475
// AddMedal ( med1 , 1 ) else
9463: LD_STRING med1
9465: PPUSH
9466: LD_INT 1
9468: PPUSH
9469: CALL_OW 101
9473: GO 9486
// AddMedal ( med1 , - 1 ) ;
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: NEG
9481: PPUSH
9482: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9486: LD_VAR 0 1
9490: PUSH
9491: LD_INT 3
9493: LESS
9494: PUSH
9495: LD_EXP 13
9499: NOT
9500: AND
9501: PUSH
9502: LD_VAR 0 1
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: PUSH
9511: LD_EXP 13
9515: AND
9516: OR
9517: IFFALSE 9532
// AddMedal ( med2 , - 1 ) else
9519: LD_STRING med2
9521: PPUSH
9522: LD_INT 1
9524: NEG
9525: PPUSH
9526: CALL_OW 101
9530: GO 9542
// AddMedal ( med2 , 1 ) ;
9532: LD_STRING med2
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9542: LD_EXP 13
9546: PUSH
9547: LD_EXP 4
9551: AND
9552: PUSH
9553: LD_VAR 0 1
9557: PUSH
9558: LD_INT 4
9560: GREATEREQUAL
9561: AND
9562: IFFALSE 9576
// AddMedal ( med3 , 1 ) else
9564: LD_STRING med3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 101
9574: GO 9587
// AddMedal ( med3 , - 1 ) ;
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: NEG
9582: PPUSH
9583: CALL_OW 101
// GiveMedals ( MAIN ) ;
9587: LD_STRING MAIN
9589: PPUSH
9590: CALL_OW 102
// RewardPeople ( tmp ) ;
9594: LD_VAR 0 1
9598: PPUSH
9599: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9603: LD_EXP 16
9607: PPUSH
9608: LD_STRING 01_Heike
9610: PPUSH
9611: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9615: LD_EXP 18
9619: PPUSH
9620: CALL_OW 302
9624: PUSH
9625: LD_EXP 18
9629: PUSH
9630: LD_VAR 0 1
9634: IN
9635: AND
9636: IFFALSE 9650
// SaveCharacters ( Givi , 01_Givi ) ;
9638: LD_EXP 18
9642: PPUSH
9643: LD_STRING 01_Givi
9645: PPUSH
9646: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9650: LD_EXP 19
9654: PPUSH
9655: CALL_OW 302
9659: PUSH
9660: LD_EXP 19
9664: PUSH
9665: LD_VAR 0 1
9669: IN
9670: AND
9671: IFFALSE 9685
// SaveCharacters ( Mike , 01_Mike ) ;
9673: LD_EXP 19
9677: PPUSH
9678: LD_STRING 01_Mike
9680: PPUSH
9681: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9685: LD_EXP 20
9689: PPUSH
9690: CALL_OW 302
9694: PUSH
9695: LD_EXP 20
9699: PUSH
9700: LD_VAR 0 1
9704: IN
9705: AND
9706: IFFALSE 9720
// SaveCharacters ( Kamil , 01_Kamil ) ;
9708: LD_EXP 20
9712: PPUSH
9713: LD_STRING 01_Kamil
9715: PPUSH
9716: CALL_OW 38
// YouWin ;
9720: CALL_OW 103
// end ; end_of_file
9724: PPOPN 1
9726: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9727: LD_VAR 0 1
9731: PUSH
9732: LD_EXP 16
9736: EQUAL
9737: IFFALSE 9746
// YouLost ( Heike ) ;
9739: LD_STRING Heike
9741: PPUSH
9742: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9746: LD_VAR 0 1
9750: PUSH
9751: LD_INT 22
9753: PUSH
9754: LD_INT 3
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 25
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: IN
9780: IFFALSE 9886
// begin if un in russianPatrol then
9782: LD_VAR 0 1
9786: PUSH
9787: LD_EXP 21
9791: IN
9792: IFFALSE 9810
// russianPatrol := russianPatrol diff un ;
9794: LD_ADDR_EXP 21
9798: PUSH
9799: LD_EXP 21
9803: PUSH
9804: LD_VAR 0 1
9808: DIFF
9809: ST_TO_ADDR
// if un in russianForestPatrol then
9810: LD_VAR 0 1
9814: PUSH
9815: LD_EXP 22
9819: IN
9820: IFFALSE 9838
// russianForestPatrol := russianForestPatrol diff un ;
9822: LD_ADDR_EXP 22
9826: PUSH
9827: LD_EXP 22
9831: PUSH
9832: LD_VAR 0 1
9836: DIFF
9837: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9838: LD_ADDR_EXP 5
9842: PUSH
9843: LD_EXP 5
9847: PPUSH
9848: LD_EXP 5
9852: PUSH
9853: LD_INT 1
9855: PLUS
9856: PPUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 250
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 251
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 1
9885: ST_TO_ADDR
// end ; end ;
9886: PPOPN 1
9888: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9889: LD_VAR 0 1
9893: PUSH
9894: LD_EXP 16
9898: EQUAL
9899: IFFALSE 9908
// YouLost ( Heike ) ;
9901: LD_STRING Heike
9903: PPUSH
9904: CALL_OW 104
// if un = Olaf then
9908: LD_VAR 0 1
9912: PUSH
9913: LD_EXP 17
9917: EQUAL
9918: IFFALSE 9927
// YouLost ( Olaf ) ;
9920: LD_STRING Olaf
9922: PPUSH
9923: CALL_OW 104
// end ;
9927: PPOPN 1
9929: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_INT 2
9937: EQUAL
9938: PUSH
9939: LD_VAR 0 2
9943: PUSH
9944: LD_INT 5
9946: EQUAL
9947: AND
9948: IFFALSE 9957
// YouLost ( FriendlyFire ) ;
9950: LD_STRING FriendlyFire
9952: PPUSH
9953: CALL_OW 104
// end ; end_of_file
9957: PPOPN 2
9959: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9960: LD_INT 0
9962: PPUSH
// if p2 = 100 then
9963: LD_VAR 0 2
9967: PUSH
9968: LD_INT 100
9970: EQUAL
9971: IFFALSE 10920
// begin if not StreamModeActive then
9973: LD_EXP 26
9977: NOT
9978: IFFALSE 9988
// StreamModeActive := true ;
9980: LD_ADDR_EXP 26
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// if p3 = 0 then
9988: LD_VAR 0 3
9992: PUSH
9993: LD_INT 0
9995: EQUAL
9996: IFFALSE 10002
// InitStreamMode ;
9998: CALL 11080 0 0
// if p3 = 1 then
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 1
10009: EQUAL
10010: IFFALSE 10020
// sRocket := true ;
10012: LD_ADDR_EXP 31
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if p3 = 2 then
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: IFFALSE 10038
// sSpeed := true ;
10030: LD_ADDR_EXP 30
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if p3 = 3 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 3
10045: EQUAL
10046: IFFALSE 10056
// sEngine := true ;
10048: LD_ADDR_EXP 32
10052: PUSH
10053: LD_INT 1
10055: ST_TO_ADDR
// if p3 = 4 then
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 4
10063: EQUAL
10064: IFFALSE 10074
// sSpec := true ;
10066: LD_ADDR_EXP 29
10070: PUSH
10071: LD_INT 1
10073: ST_TO_ADDR
// if p3 = 5 then
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 5
10081: EQUAL
10082: IFFALSE 10092
// sLevel := true ;
10084: LD_ADDR_EXP 33
10088: PUSH
10089: LD_INT 1
10091: ST_TO_ADDR
// if p3 = 6 then
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 6
10099: EQUAL
10100: IFFALSE 10110
// sArmoury := true ;
10102: LD_ADDR_EXP 34
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// if p3 = 7 then
10110: LD_VAR 0 3
10114: PUSH
10115: LD_INT 7
10117: EQUAL
10118: IFFALSE 10128
// sRadar := true ;
10120: LD_ADDR_EXP 35
10124: PUSH
10125: LD_INT 1
10127: ST_TO_ADDR
// if p3 = 8 then
10128: LD_VAR 0 3
10132: PUSH
10133: LD_INT 8
10135: EQUAL
10136: IFFALSE 10146
// sBunker := true ;
10138: LD_ADDR_EXP 36
10142: PUSH
10143: LD_INT 1
10145: ST_TO_ADDR
// if p3 = 9 then
10146: LD_VAR 0 3
10150: PUSH
10151: LD_INT 9
10153: EQUAL
10154: IFFALSE 10164
// sHack := true ;
10156: LD_ADDR_EXP 37
10160: PUSH
10161: LD_INT 1
10163: ST_TO_ADDR
// if p3 = 10 then
10164: LD_VAR 0 3
10168: PUSH
10169: LD_INT 10
10171: EQUAL
10172: IFFALSE 10182
// sFire := true ;
10174: LD_ADDR_EXP 38
10178: PUSH
10179: LD_INT 1
10181: ST_TO_ADDR
// if p3 = 11 then
10182: LD_VAR 0 3
10186: PUSH
10187: LD_INT 11
10189: EQUAL
10190: IFFALSE 10200
// sRefresh := true ;
10192: LD_ADDR_EXP 39
10196: PUSH
10197: LD_INT 1
10199: ST_TO_ADDR
// if p3 = 12 then
10200: LD_VAR 0 3
10204: PUSH
10205: LD_INT 12
10207: EQUAL
10208: IFFALSE 10218
// sExp := true ;
10210: LD_ADDR_EXP 40
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// if p3 = 13 then
10218: LD_VAR 0 3
10222: PUSH
10223: LD_INT 13
10225: EQUAL
10226: IFFALSE 10236
// sDepot := true ;
10228: LD_ADDR_EXP 41
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// if p3 = 14 then
10236: LD_VAR 0 3
10240: PUSH
10241: LD_INT 14
10243: EQUAL
10244: IFFALSE 10254
// sFlag := true ;
10246: LD_ADDR_EXP 42
10250: PUSH
10251: LD_INT 1
10253: ST_TO_ADDR
// if p3 = 15 then
10254: LD_VAR 0 3
10258: PUSH
10259: LD_INT 15
10261: EQUAL
10262: IFFALSE 10272
// sKamikadze := true ;
10264: LD_ADDR_EXP 50
10268: PUSH
10269: LD_INT 1
10271: ST_TO_ADDR
// if p3 = 16 then
10272: LD_VAR 0 3
10276: PUSH
10277: LD_INT 16
10279: EQUAL
10280: IFFALSE 10290
// sTroll := true ;
10282: LD_ADDR_EXP 51
10286: PUSH
10287: LD_INT 1
10289: ST_TO_ADDR
// if p3 = 17 then
10290: LD_VAR 0 3
10294: PUSH
10295: LD_INT 17
10297: EQUAL
10298: IFFALSE 10308
// sSlow := true ;
10300: LD_ADDR_EXP 52
10304: PUSH
10305: LD_INT 1
10307: ST_TO_ADDR
// if p3 = 18 then
10308: LD_VAR 0 3
10312: PUSH
10313: LD_INT 18
10315: EQUAL
10316: IFFALSE 10326
// sLack := true ;
10318: LD_ADDR_EXP 53
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if p3 = 19 then
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 19
10333: EQUAL
10334: IFFALSE 10344
// sTank := true ;
10336: LD_ADDR_EXP 55
10340: PUSH
10341: LD_INT 1
10343: ST_TO_ADDR
// if p3 = 20 then
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 20
10351: EQUAL
10352: IFFALSE 10362
// sRemote := true ;
10354: LD_ADDR_EXP 56
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// if p3 = 21 then
10362: LD_VAR 0 3
10366: PUSH
10367: LD_INT 21
10369: EQUAL
10370: IFFALSE 10380
// sPowell := true ;
10372: LD_ADDR_EXP 57
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// if p3 = 22 then
10380: LD_VAR 0 3
10384: PUSH
10385: LD_INT 22
10387: EQUAL
10388: IFFALSE 10398
// sTeleport := true ;
10390: LD_ADDR_EXP 60
10394: PUSH
10395: LD_INT 1
10397: ST_TO_ADDR
// if p3 = 23 then
10398: LD_VAR 0 3
10402: PUSH
10403: LD_INT 23
10405: EQUAL
10406: IFFALSE 10416
// sOilTower := true ;
10408: LD_ADDR_EXP 62
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// if p3 = 24 then
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 24
10423: EQUAL
10424: IFFALSE 10434
// sShovel := true ;
10426: LD_ADDR_EXP 63
10430: PUSH
10431: LD_INT 1
10433: ST_TO_ADDR
// if p3 = 25 then
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 25
10441: EQUAL
10442: IFFALSE 10452
// sSheik := true ;
10444: LD_ADDR_EXP 64
10448: PUSH
10449: LD_INT 1
10451: ST_TO_ADDR
// if p3 = 26 then
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 26
10459: EQUAL
10460: IFFALSE 10470
// sEarthquake := true ;
10462: LD_ADDR_EXP 66
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// if p3 = 27 then
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 27
10477: EQUAL
10478: IFFALSE 10488
// sAI := true ;
10480: LD_ADDR_EXP 67
10484: PUSH
10485: LD_INT 1
10487: ST_TO_ADDR
// if p3 = 28 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_INT 28
10495: EQUAL
10496: IFFALSE 10506
// sCargo := true ;
10498: LD_ADDR_EXP 70
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if p3 = 29 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 29
10513: EQUAL
10514: IFFALSE 10524
// sDLaser := true ;
10516: LD_ADDR_EXP 71
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// if p3 = 30 then
10524: LD_VAR 0 3
10528: PUSH
10529: LD_INT 30
10531: EQUAL
10532: IFFALSE 10542
// sExchange := true ;
10534: LD_ADDR_EXP 72
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// if p3 = 31 then
10542: LD_VAR 0 3
10546: PUSH
10547: LD_INT 31
10549: EQUAL
10550: IFFALSE 10560
// sFac := true ;
10552: LD_ADDR_EXP 73
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
// if p3 = 32 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_INT 32
10567: EQUAL
10568: IFFALSE 10578
// sPower := true ;
10570: LD_ADDR_EXP 74
10574: PUSH
10575: LD_INT 1
10577: ST_TO_ADDR
// if p3 = 33 then
10578: LD_VAR 0 3
10582: PUSH
10583: LD_INT 33
10585: EQUAL
10586: IFFALSE 10596
// sRandom := true ;
10588: LD_ADDR_EXP 75
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// if p3 = 34 then
10596: LD_VAR 0 3
10600: PUSH
10601: LD_INT 34
10603: EQUAL
10604: IFFALSE 10614
// sShield := true ;
10606: LD_ADDR_EXP 76
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// if p3 = 35 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 35
10621: EQUAL
10622: IFFALSE 10632
// sTime := true ;
10624: LD_ADDR_EXP 77
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// if p3 = 36 then
10632: LD_VAR 0 3
10636: PUSH
10637: LD_INT 36
10639: EQUAL
10640: IFFALSE 10650
// sTools := true ;
10642: LD_ADDR_EXP 78
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// if p3 = 101 then
10650: LD_VAR 0 3
10654: PUSH
10655: LD_INT 101
10657: EQUAL
10658: IFFALSE 10668
// sSold := true ;
10660: LD_ADDR_EXP 43
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// if p3 = 102 then
10668: LD_VAR 0 3
10672: PUSH
10673: LD_INT 102
10675: EQUAL
10676: IFFALSE 10686
// sDiff := true ;
10678: LD_ADDR_EXP 44
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// if p3 = 103 then
10686: LD_VAR 0 3
10690: PUSH
10691: LD_INT 103
10693: EQUAL
10694: IFFALSE 10704
// sFog := true ;
10696: LD_ADDR_EXP 47
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// if p3 = 104 then
10704: LD_VAR 0 3
10708: PUSH
10709: LD_INT 104
10711: EQUAL
10712: IFFALSE 10722
// sReset := true ;
10714: LD_ADDR_EXP 48
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// if p3 = 105 then
10722: LD_VAR 0 3
10726: PUSH
10727: LD_INT 105
10729: EQUAL
10730: IFFALSE 10740
// sSun := true ;
10732: LD_ADDR_EXP 49
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// if p3 = 106 then
10740: LD_VAR 0 3
10744: PUSH
10745: LD_INT 106
10747: EQUAL
10748: IFFALSE 10758
// sTiger := true ;
10750: LD_ADDR_EXP 45
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// if p3 = 107 then
10758: LD_VAR 0 3
10762: PUSH
10763: LD_INT 107
10765: EQUAL
10766: IFFALSE 10776
// sBomb := true ;
10768: LD_ADDR_EXP 46
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// if p3 = 108 then
10776: LD_VAR 0 3
10780: PUSH
10781: LD_INT 108
10783: EQUAL
10784: IFFALSE 10794
// sWound := true ;
10786: LD_ADDR_EXP 54
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// if p3 = 109 then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_INT 109
10801: EQUAL
10802: IFFALSE 10812
// sBetray := true ;
10804: LD_ADDR_EXP 58
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// if p3 = 110 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_INT 110
10819: EQUAL
10820: IFFALSE 10830
// sContamin := true ;
10822: LD_ADDR_EXP 59
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// if p3 = 111 then
10830: LD_VAR 0 3
10834: PUSH
10835: LD_INT 111
10837: EQUAL
10838: IFFALSE 10848
// sOil := true ;
10840: LD_ADDR_EXP 61
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// if p3 = 112 then
10848: LD_VAR 0 3
10852: PUSH
10853: LD_INT 112
10855: EQUAL
10856: IFFALSE 10866
// sStu := true ;
10858: LD_ADDR_EXP 65
10862: PUSH
10863: LD_INT 1
10865: ST_TO_ADDR
// if p3 = 113 then
10866: LD_VAR 0 3
10870: PUSH
10871: LD_INT 113
10873: EQUAL
10874: IFFALSE 10884
// sBazooka := true ;
10876: LD_ADDR_EXP 68
10880: PUSH
10881: LD_INT 1
10883: ST_TO_ADDR
// if p3 = 114 then
10884: LD_VAR 0 3
10888: PUSH
10889: LD_INT 114
10891: EQUAL
10892: IFFALSE 10902
// sMortar := true ;
10894: LD_ADDR_EXP 69
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// if p3 = 115 then
10902: LD_VAR 0 3
10906: PUSH
10907: LD_INT 115
10909: EQUAL
10910: IFFALSE 10920
// sRanger := true ;
10912: LD_ADDR_EXP 79
10916: PUSH
10917: LD_INT 1
10919: ST_TO_ADDR
// end ; if p2 = 101 then
10920: LD_VAR 0 2
10924: PUSH
10925: LD_INT 101
10927: EQUAL
10928: IFFALSE 11056
// begin case p3 of 1 :
10930: LD_VAR 0 3
10934: PUSH
10935: LD_INT 1
10937: DOUBLE
10938: EQUAL
10939: IFTRUE 10943
10941: GO 10950
10943: POP
// hHackUnlimitedResources ; 2 :
10944: CALL 22093 0 0
10948: GO 11056
10950: LD_INT 2
10952: DOUBLE
10953: EQUAL
10954: IFTRUE 10958
10956: GO 10965
10958: POP
// hHackSetLevel10 ; 3 :
10959: CALL 22226 0 0
10963: GO 11056
10965: LD_INT 3
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10980
10973: POP
// hHackSetLevel10YourUnits ; 4 :
10974: CALL 22311 0 0
10978: GO 11056
10980: LD_INT 4
10982: DOUBLE
10983: EQUAL
10984: IFTRUE 10988
10986: GO 10995
10988: POP
// hHackInvincible ; 5 :
10989: CALL 22759 0 0
10993: GO 11056
10995: LD_INT 5
10997: DOUBLE
10998: EQUAL
10999: IFTRUE 11003
11001: GO 11010
11003: POP
// hHackInvisible ; 6 :
11004: CALL 22870 0 0
11008: GO 11056
11010: LD_INT 6
11012: DOUBLE
11013: EQUAL
11014: IFTRUE 11018
11016: GO 11025
11018: POP
// hHackChangeYourSide ; 7 :
11019: CALL 22927 0 0
11023: GO 11056
11025: LD_INT 7
11027: DOUBLE
11028: EQUAL
11029: IFTRUE 11033
11031: GO 11040
11033: POP
// hHackChangeUnitSide ; 8 :
11034: CALL 22969 0 0
11038: GO 11056
11040: LD_INT 8
11042: DOUBLE
11043: EQUAL
11044: IFTRUE 11048
11046: GO 11055
11048: POP
// hHackFog ; end ;
11049: CALL 23070 0 0
11053: GO 11056
11055: POP
// end ; end ;
11056: LD_VAR 0 7
11060: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11061: GO 11063
11063: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11064: LD_STRING initStreamRollete();
11066: PPUSH
11067: CALL_OW 559
// InitStreamMode ;
11071: CALL 11080 0 0
// DefineStreamItems ( ) ;
11075: CALL 11520 0 0
// end ;
11079: END
// function InitStreamMode ; begin
11080: LD_INT 0
11082: PPUSH
// streamModeActive := false ;
11083: LD_ADDR_EXP 26
11087: PUSH
11088: LD_INT 0
11090: ST_TO_ADDR
// normalCounter := 36 ;
11091: LD_ADDR_EXP 27
11095: PUSH
11096: LD_INT 36
11098: ST_TO_ADDR
// hardcoreCounter := 16 ;
11099: LD_ADDR_EXP 28
11103: PUSH
11104: LD_INT 16
11106: ST_TO_ADDR
// sRocket := false ;
11107: LD_ADDR_EXP 31
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// sSpeed := false ;
11115: LD_ADDR_EXP 30
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// sEngine := false ;
11123: LD_ADDR_EXP 32
11127: PUSH
11128: LD_INT 0
11130: ST_TO_ADDR
// sSpec := false ;
11131: LD_ADDR_EXP 29
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// sLevel := false ;
11139: LD_ADDR_EXP 33
11143: PUSH
11144: LD_INT 0
11146: ST_TO_ADDR
// sArmoury := false ;
11147: LD_ADDR_EXP 34
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// sRadar := false ;
11155: LD_ADDR_EXP 35
11159: PUSH
11160: LD_INT 0
11162: ST_TO_ADDR
// sBunker := false ;
11163: LD_ADDR_EXP 36
11167: PUSH
11168: LD_INT 0
11170: ST_TO_ADDR
// sHack := false ;
11171: LD_ADDR_EXP 37
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// sFire := false ;
11179: LD_ADDR_EXP 38
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// sRefresh := false ;
11187: LD_ADDR_EXP 39
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// sExp := false ;
11195: LD_ADDR_EXP 40
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// sDepot := false ;
11203: LD_ADDR_EXP 41
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// sFlag := false ;
11211: LD_ADDR_EXP 42
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// sKamikadze := false ;
11219: LD_ADDR_EXP 50
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// sTroll := false ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// sSlow := false ;
11235: LD_ADDR_EXP 52
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// sLack := false ;
11243: LD_ADDR_EXP 53
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// sTank := false ;
11251: LD_ADDR_EXP 55
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// sRemote := false ;
11259: LD_ADDR_EXP 56
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sPowell := false ;
11267: LD_ADDR_EXP 57
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// sTeleport := false ;
11275: LD_ADDR_EXP 60
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// sOilTower := false ;
11283: LD_ADDR_EXP 62
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// sShovel := false ;
11291: LD_ADDR_EXP 63
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// sSheik := false ;
11299: LD_ADDR_EXP 64
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// sEarthquake := false ;
11307: LD_ADDR_EXP 66
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// sAI := false ;
11315: LD_ADDR_EXP 67
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// sCargo := false ;
11323: LD_ADDR_EXP 70
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// sDLaser := false ;
11331: LD_ADDR_EXP 71
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// sExchange := false ;
11339: LD_ADDR_EXP 72
11343: PUSH
11344: LD_INT 0
11346: ST_TO_ADDR
// sFac := false ;
11347: LD_ADDR_EXP 73
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// sPower := false ;
11355: LD_ADDR_EXP 74
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// sRandom := false ;
11363: LD_ADDR_EXP 75
11367: PUSH
11368: LD_INT 0
11370: ST_TO_ADDR
// sShield := false ;
11371: LD_ADDR_EXP 76
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// sTime := false ;
11379: LD_ADDR_EXP 77
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// sTools := false ;
11387: LD_ADDR_EXP 78
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// sSold := false ;
11395: LD_ADDR_EXP 43
11399: PUSH
11400: LD_INT 0
11402: ST_TO_ADDR
// sDiff := false ;
11403: LD_ADDR_EXP 44
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// sFog := false ;
11411: LD_ADDR_EXP 47
11415: PUSH
11416: LD_INT 0
11418: ST_TO_ADDR
// sReset := false ;
11419: LD_ADDR_EXP 48
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// sSun := false ;
11427: LD_ADDR_EXP 49
11431: PUSH
11432: LD_INT 0
11434: ST_TO_ADDR
// sTiger := false ;
11435: LD_ADDR_EXP 45
11439: PUSH
11440: LD_INT 0
11442: ST_TO_ADDR
// sBomb := false ;
11443: LD_ADDR_EXP 46
11447: PUSH
11448: LD_INT 0
11450: ST_TO_ADDR
// sWound := false ;
11451: LD_ADDR_EXP 54
11455: PUSH
11456: LD_INT 0
11458: ST_TO_ADDR
// sBetray := false ;
11459: LD_ADDR_EXP 58
11463: PUSH
11464: LD_INT 0
11466: ST_TO_ADDR
// sContamin := false ;
11467: LD_ADDR_EXP 59
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// sOil := false ;
11475: LD_ADDR_EXP 61
11479: PUSH
11480: LD_INT 0
11482: ST_TO_ADDR
// sStu := false ;
11483: LD_ADDR_EXP 65
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// sBazooka := false ;
11491: LD_ADDR_EXP 68
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// sMortar := false ;
11499: LD_ADDR_EXP 69
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// sRanger := false ;
11507: LD_ADDR_EXP 79
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// end ;
11515: LD_VAR 0 1
11519: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11520: LD_INT 0
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
// result := [ ] ;
11527: LD_ADDR_VAR 0 1
11531: PUSH
11532: EMPTY
11533: ST_TO_ADDR
// if campaign_id = 1 then
11534: LD_OWVAR 69
11538: PUSH
11539: LD_INT 1
11541: EQUAL
11542: IFFALSE 14480
// begin case mission_number of 1 :
11544: LD_OWVAR 70
11548: PUSH
11549: LD_INT 1
11551: DOUBLE
11552: EQUAL
11553: IFTRUE 11557
11555: GO 11621
11557: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11558: LD_ADDR_VAR 0 1
11562: PUSH
11563: LD_INT 2
11565: PUSH
11566: LD_INT 4
11568: PUSH
11569: LD_INT 11
11571: PUSH
11572: LD_INT 12
11574: PUSH
11575: LD_INT 15
11577: PUSH
11578: LD_INT 16
11580: PUSH
11581: LD_INT 22
11583: PUSH
11584: LD_INT 23
11586: PUSH
11587: LD_INT 26
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 101
11603: PUSH
11604: LD_INT 102
11606: PUSH
11607: LD_INT 106
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: ST_TO_ADDR
11619: GO 14478
11621: LD_INT 2
11623: DOUBLE
11624: EQUAL
11625: IFTRUE 11629
11627: GO 11701
11629: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: LD_INT 2
11637: PUSH
11638: LD_INT 4
11640: PUSH
11641: LD_INT 11
11643: PUSH
11644: LD_INT 12
11646: PUSH
11647: LD_INT 15
11649: PUSH
11650: LD_INT 16
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_INT 23
11658: PUSH
11659: LD_INT 26
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 101
11675: PUSH
11676: LD_INT 102
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 108
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: ST_TO_ADDR
11699: GO 14478
11701: LD_INT 3
11703: DOUBLE
11704: EQUAL
11705: IFTRUE 11709
11707: GO 11785
11709: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11710: LD_ADDR_VAR 0 1
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: LD_INT 4
11720: PUSH
11721: LD_INT 5
11723: PUSH
11724: LD_INT 11
11726: PUSH
11727: LD_INT 12
11729: PUSH
11730: LD_INT 15
11732: PUSH
11733: LD_INT 16
11735: PUSH
11736: LD_INT 22
11738: PUSH
11739: LD_INT 26
11741: PUSH
11742: LD_INT 36
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 101
11759: PUSH
11760: LD_INT 102
11762: PUSH
11763: LD_INT 105
11765: PUSH
11766: LD_INT 106
11768: PUSH
11769: LD_INT 108
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: ST_TO_ADDR
11783: GO 14478
11785: LD_INT 4
11787: DOUBLE
11788: EQUAL
11789: IFTRUE 11793
11791: GO 11877
11793: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11794: LD_ADDR_VAR 0 1
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: LD_INT 4
11804: PUSH
11805: LD_INT 5
11807: PUSH
11808: LD_INT 8
11810: PUSH
11811: LD_INT 11
11813: PUSH
11814: LD_INT 12
11816: PUSH
11817: LD_INT 15
11819: PUSH
11820: LD_INT 16
11822: PUSH
11823: LD_INT 22
11825: PUSH
11826: LD_INT 23
11828: PUSH
11829: LD_INT 26
11831: PUSH
11832: LD_INT 36
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 101
11851: PUSH
11852: LD_INT 102
11854: PUSH
11855: LD_INT 105
11857: PUSH
11858: LD_INT 106
11860: PUSH
11861: LD_INT 108
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: ST_TO_ADDR
11875: GO 14478
11877: LD_INT 5
11879: DOUBLE
11880: EQUAL
11881: IFTRUE 11885
11883: GO 11985
11885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11886: LD_ADDR_VAR 0 1
11890: PUSH
11891: LD_INT 2
11893: PUSH
11894: LD_INT 4
11896: PUSH
11897: LD_INT 5
11899: PUSH
11900: LD_INT 6
11902: PUSH
11903: LD_INT 8
11905: PUSH
11906: LD_INT 11
11908: PUSH
11909: LD_INT 12
11911: PUSH
11912: LD_INT 15
11914: PUSH
11915: LD_INT 16
11917: PUSH
11918: LD_INT 22
11920: PUSH
11921: LD_INT 23
11923: PUSH
11924: LD_INT 25
11926: PUSH
11927: LD_INT 26
11929: PUSH
11930: LD_INT 36
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 101
11951: PUSH
11952: LD_INT 102
11954: PUSH
11955: LD_INT 105
11957: PUSH
11958: LD_INT 106
11960: PUSH
11961: LD_INT 108
11963: PUSH
11964: LD_INT 109
11966: PUSH
11967: LD_INT 112
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: ST_TO_ADDR
11983: GO 14478
11985: LD_INT 6
11987: DOUBLE
11988: EQUAL
11989: IFTRUE 11993
11991: GO 12113
11993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11994: LD_ADDR_VAR 0 1
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 4
12004: PUSH
12005: LD_INT 5
12007: PUSH
12008: LD_INT 6
12010: PUSH
12011: LD_INT 8
12013: PUSH
12014: LD_INT 11
12016: PUSH
12017: LD_INT 12
12019: PUSH
12020: LD_INT 15
12022: PUSH
12023: LD_INT 16
12025: PUSH
12026: LD_INT 20
12028: PUSH
12029: LD_INT 21
12031: PUSH
12032: LD_INT 22
12034: PUSH
12035: LD_INT 23
12037: PUSH
12038: LD_INT 25
12040: PUSH
12041: LD_INT 26
12043: PUSH
12044: LD_INT 30
12046: PUSH
12047: LD_INT 31
12049: PUSH
12050: LD_INT 32
12052: PUSH
12053: LD_INT 36
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 101
12079: PUSH
12080: LD_INT 102
12082: PUSH
12083: LD_INT 105
12085: PUSH
12086: LD_INT 106
12088: PUSH
12089: LD_INT 108
12091: PUSH
12092: LD_INT 109
12094: PUSH
12095: LD_INT 112
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: ST_TO_ADDR
12111: GO 14478
12113: LD_INT 7
12115: DOUBLE
12116: EQUAL
12117: IFTRUE 12121
12119: GO 12221
12121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12122: LD_ADDR_VAR 0 1
12126: PUSH
12127: LD_INT 2
12129: PUSH
12130: LD_INT 4
12132: PUSH
12133: LD_INT 5
12135: PUSH
12136: LD_INT 7
12138: PUSH
12139: LD_INT 11
12141: PUSH
12142: LD_INT 12
12144: PUSH
12145: LD_INT 15
12147: PUSH
12148: LD_INT 16
12150: PUSH
12151: LD_INT 20
12153: PUSH
12154: LD_INT 21
12156: PUSH
12157: LD_INT 22
12159: PUSH
12160: LD_INT 23
12162: PUSH
12163: LD_INT 25
12165: PUSH
12166: LD_INT 26
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 101
12187: PUSH
12188: LD_INT 102
12190: PUSH
12191: LD_INT 103
12193: PUSH
12194: LD_INT 105
12196: PUSH
12197: LD_INT 106
12199: PUSH
12200: LD_INT 108
12202: PUSH
12203: LD_INT 112
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: ST_TO_ADDR
12219: GO 14478
12221: LD_INT 8
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12357
12229: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12230: LD_ADDR_VAR 0 1
12234: PUSH
12235: LD_INT 2
12237: PUSH
12238: LD_INT 4
12240: PUSH
12241: LD_INT 5
12243: PUSH
12244: LD_INT 6
12246: PUSH
12247: LD_INT 7
12249: PUSH
12250: LD_INT 8
12252: PUSH
12253: LD_INT 11
12255: PUSH
12256: LD_INT 12
12258: PUSH
12259: LD_INT 15
12261: PUSH
12262: LD_INT 16
12264: PUSH
12265: LD_INT 20
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_INT 23
12276: PUSH
12277: LD_INT 25
12279: PUSH
12280: LD_INT 26
12282: PUSH
12283: LD_INT 30
12285: PUSH
12286: LD_INT 31
12288: PUSH
12289: LD_INT 32
12291: PUSH
12292: LD_INT 36
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 101
12319: PUSH
12320: LD_INT 102
12322: PUSH
12323: LD_INT 103
12325: PUSH
12326: LD_INT 105
12328: PUSH
12329: LD_INT 106
12331: PUSH
12332: LD_INT 108
12334: PUSH
12335: LD_INT 109
12337: PUSH
12338: LD_INT 112
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: ST_TO_ADDR
12355: GO 14478
12357: LD_INT 9
12359: DOUBLE
12360: EQUAL
12361: IFTRUE 12365
12363: GO 12501
12365: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12366: LD_ADDR_VAR 0 1
12370: PUSH
12371: LD_INT 2
12373: PUSH
12374: LD_INT 4
12376: PUSH
12377: LD_INT 5
12379: PUSH
12380: LD_INT 6
12382: PUSH
12383: LD_INT 7
12385: PUSH
12386: LD_INT 8
12388: PUSH
12389: LD_INT 11
12391: PUSH
12392: LD_INT 12
12394: PUSH
12395: LD_INT 15
12397: PUSH
12398: LD_INT 16
12400: PUSH
12401: LD_INT 20
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 22
12409: PUSH
12410: LD_INT 23
12412: PUSH
12413: LD_INT 25
12415: PUSH
12416: LD_INT 26
12418: PUSH
12419: LD_INT 28
12421: PUSH
12422: LD_INT 30
12424: PUSH
12425: LD_INT 31
12427: PUSH
12428: LD_INT 32
12430: PUSH
12431: LD_INT 36
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 101
12459: PUSH
12460: LD_INT 102
12462: PUSH
12463: LD_INT 103
12465: PUSH
12466: LD_INT 105
12468: PUSH
12469: LD_INT 106
12471: PUSH
12472: LD_INT 108
12474: PUSH
12475: LD_INT 109
12477: PUSH
12478: LD_INT 112
12480: PUSH
12481: LD_INT 114
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: ST_TO_ADDR
12499: GO 14478
12501: LD_INT 10
12503: DOUBLE
12504: EQUAL
12505: IFTRUE 12509
12507: GO 12693
12509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12510: LD_ADDR_VAR 0 1
12514: PUSH
12515: LD_INT 2
12517: PUSH
12518: LD_INT 4
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: LD_INT 6
12526: PUSH
12527: LD_INT 7
12529: PUSH
12530: LD_INT 8
12532: PUSH
12533: LD_INT 9
12535: PUSH
12536: LD_INT 10
12538: PUSH
12539: LD_INT 11
12541: PUSH
12542: LD_INT 12
12544: PUSH
12545: LD_INT 13
12547: PUSH
12548: LD_INT 14
12550: PUSH
12551: LD_INT 15
12553: PUSH
12554: LD_INT 16
12556: PUSH
12557: LD_INT 17
12559: PUSH
12560: LD_INT 18
12562: PUSH
12563: LD_INT 19
12565: PUSH
12566: LD_INT 20
12568: PUSH
12569: LD_INT 21
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_INT 23
12577: PUSH
12578: LD_INT 24
12580: PUSH
12581: LD_INT 25
12583: PUSH
12584: LD_INT 26
12586: PUSH
12587: LD_INT 28
12589: PUSH
12590: LD_INT 30
12592: PUSH
12593: LD_INT 31
12595: PUSH
12596: LD_INT 32
12598: PUSH
12599: LD_INT 36
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 101
12635: PUSH
12636: LD_INT 102
12638: PUSH
12639: LD_INT 103
12641: PUSH
12642: LD_INT 104
12644: PUSH
12645: LD_INT 105
12647: PUSH
12648: LD_INT 106
12650: PUSH
12651: LD_INT 107
12653: PUSH
12654: LD_INT 108
12656: PUSH
12657: LD_INT 109
12659: PUSH
12660: LD_INT 110
12662: PUSH
12663: LD_INT 111
12665: PUSH
12666: LD_INT 112
12668: PUSH
12669: LD_INT 114
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: ST_TO_ADDR
12691: GO 14478
12693: LD_INT 11
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12893
12701: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12702: LD_ADDR_VAR 0 1
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: LD_INT 3
12712: PUSH
12713: LD_INT 4
12715: PUSH
12716: LD_INT 5
12718: PUSH
12719: LD_INT 6
12721: PUSH
12722: LD_INT 7
12724: PUSH
12725: LD_INT 8
12727: PUSH
12728: LD_INT 9
12730: PUSH
12731: LD_INT 10
12733: PUSH
12734: LD_INT 11
12736: PUSH
12737: LD_INT 12
12739: PUSH
12740: LD_INT 13
12742: PUSH
12743: LD_INT 14
12745: PUSH
12746: LD_INT 15
12748: PUSH
12749: LD_INT 16
12751: PUSH
12752: LD_INT 17
12754: PUSH
12755: LD_INT 18
12757: PUSH
12758: LD_INT 19
12760: PUSH
12761: LD_INT 20
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 23
12772: PUSH
12773: LD_INT 24
12775: PUSH
12776: LD_INT 25
12778: PUSH
12779: LD_INT 26
12781: PUSH
12782: LD_INT 28
12784: PUSH
12785: LD_INT 30
12787: PUSH
12788: LD_INT 31
12790: PUSH
12791: LD_INT 32
12793: PUSH
12794: LD_INT 34
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 101
12835: PUSH
12836: LD_INT 102
12838: PUSH
12839: LD_INT 103
12841: PUSH
12842: LD_INT 104
12844: PUSH
12845: LD_INT 105
12847: PUSH
12848: LD_INT 106
12850: PUSH
12851: LD_INT 107
12853: PUSH
12854: LD_INT 108
12856: PUSH
12857: LD_INT 109
12859: PUSH
12860: LD_INT 110
12862: PUSH
12863: LD_INT 111
12865: PUSH
12866: LD_INT 112
12868: PUSH
12869: LD_INT 114
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: ST_TO_ADDR
12891: GO 14478
12893: LD_INT 12
12895: DOUBLE
12896: EQUAL
12897: IFTRUE 12901
12899: GO 13109
12901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12902: LD_ADDR_VAR 0 1
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: LD_INT 4
12918: PUSH
12919: LD_INT 5
12921: PUSH
12922: LD_INT 6
12924: PUSH
12925: LD_INT 7
12927: PUSH
12928: LD_INT 8
12930: PUSH
12931: LD_INT 9
12933: PUSH
12934: LD_INT 10
12936: PUSH
12937: LD_INT 11
12939: PUSH
12940: LD_INT 12
12942: PUSH
12943: LD_INT 13
12945: PUSH
12946: LD_INT 14
12948: PUSH
12949: LD_INT 15
12951: PUSH
12952: LD_INT 16
12954: PUSH
12955: LD_INT 17
12957: PUSH
12958: LD_INT 18
12960: PUSH
12961: LD_INT 19
12963: PUSH
12964: LD_INT 20
12966: PUSH
12967: LD_INT 21
12969: PUSH
12970: LD_INT 22
12972: PUSH
12973: LD_INT 23
12975: PUSH
12976: LD_INT 24
12978: PUSH
12979: LD_INT 25
12981: PUSH
12982: LD_INT 26
12984: PUSH
12985: LD_INT 27
12987: PUSH
12988: LD_INT 28
12990: PUSH
12991: LD_INT 30
12993: PUSH
12994: LD_INT 31
12996: PUSH
12997: LD_INT 32
12999: PUSH
13000: LD_INT 33
13002: PUSH
13003: LD_INT 34
13005: PUSH
13006: LD_INT 36
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 101
13047: PUSH
13048: LD_INT 102
13050: PUSH
13051: LD_INT 103
13053: PUSH
13054: LD_INT 104
13056: PUSH
13057: LD_INT 105
13059: PUSH
13060: LD_INT 106
13062: PUSH
13063: LD_INT 107
13065: PUSH
13066: LD_INT 108
13068: PUSH
13069: LD_INT 109
13071: PUSH
13072: LD_INT 110
13074: PUSH
13075: LD_INT 111
13077: PUSH
13078: LD_INT 112
13080: PUSH
13081: LD_INT 113
13083: PUSH
13084: LD_INT 114
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: ST_TO_ADDR
13107: GO 14478
13109: LD_INT 13
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13313
13117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13118: LD_ADDR_VAR 0 1
13122: PUSH
13123: LD_INT 1
13125: PUSH
13126: LD_INT 2
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: LD_INT 4
13134: PUSH
13135: LD_INT 5
13137: PUSH
13138: LD_INT 8
13140: PUSH
13141: LD_INT 9
13143: PUSH
13144: LD_INT 10
13146: PUSH
13147: LD_INT 11
13149: PUSH
13150: LD_INT 12
13152: PUSH
13153: LD_INT 14
13155: PUSH
13156: LD_INT 15
13158: PUSH
13159: LD_INT 16
13161: PUSH
13162: LD_INT 17
13164: PUSH
13165: LD_INT 18
13167: PUSH
13168: LD_INT 19
13170: PUSH
13171: LD_INT 20
13173: PUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 22
13179: PUSH
13180: LD_INT 23
13182: PUSH
13183: LD_INT 24
13185: PUSH
13186: LD_INT 25
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 27
13194: PUSH
13195: LD_INT 28
13197: PUSH
13198: LD_INT 30
13200: PUSH
13201: LD_INT 31
13203: PUSH
13204: LD_INT 32
13206: PUSH
13207: LD_INT 33
13209: PUSH
13210: LD_INT 34
13212: PUSH
13213: LD_INT 36
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 101
13251: PUSH
13252: LD_INT 102
13254: PUSH
13255: LD_INT 103
13257: PUSH
13258: LD_INT 104
13260: PUSH
13261: LD_INT 105
13263: PUSH
13264: LD_INT 106
13266: PUSH
13267: LD_INT 107
13269: PUSH
13270: LD_INT 108
13272: PUSH
13273: LD_INT 109
13275: PUSH
13276: LD_INT 110
13278: PUSH
13279: LD_INT 111
13281: PUSH
13282: LD_INT 112
13284: PUSH
13285: LD_INT 113
13287: PUSH
13288: LD_INT 114
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: ST_TO_ADDR
13311: GO 14478
13313: LD_INT 14
13315: DOUBLE
13316: EQUAL
13317: IFTRUE 13321
13319: GO 13533
13321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13322: LD_ADDR_VAR 0 1
13326: PUSH
13327: LD_INT 1
13329: PUSH
13330: LD_INT 2
13332: PUSH
13333: LD_INT 3
13335: PUSH
13336: LD_INT 4
13338: PUSH
13339: LD_INT 5
13341: PUSH
13342: LD_INT 6
13344: PUSH
13345: LD_INT 7
13347: PUSH
13348: LD_INT 8
13350: PUSH
13351: LD_INT 9
13353: PUSH
13354: LD_INT 10
13356: PUSH
13357: LD_INT 11
13359: PUSH
13360: LD_INT 12
13362: PUSH
13363: LD_INT 13
13365: PUSH
13366: LD_INT 14
13368: PUSH
13369: LD_INT 15
13371: PUSH
13372: LD_INT 16
13374: PUSH
13375: LD_INT 17
13377: PUSH
13378: LD_INT 18
13380: PUSH
13381: LD_INT 19
13383: PUSH
13384: LD_INT 20
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 23
13395: PUSH
13396: LD_INT 24
13398: PUSH
13399: LD_INT 25
13401: PUSH
13402: LD_INT 26
13404: PUSH
13405: LD_INT 27
13407: PUSH
13408: LD_INT 28
13410: PUSH
13411: LD_INT 29
13413: PUSH
13414: LD_INT 30
13416: PUSH
13417: LD_INT 31
13419: PUSH
13420: LD_INT 32
13422: PUSH
13423: LD_INT 33
13425: PUSH
13426: LD_INT 34
13428: PUSH
13429: LD_INT 36
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 103
13477: PUSH
13478: LD_INT 104
13480: PUSH
13481: LD_INT 105
13483: PUSH
13484: LD_INT 106
13486: PUSH
13487: LD_INT 107
13489: PUSH
13490: LD_INT 108
13492: PUSH
13493: LD_INT 109
13495: PUSH
13496: LD_INT 110
13498: PUSH
13499: LD_INT 111
13501: PUSH
13502: LD_INT 112
13504: PUSH
13505: LD_INT 113
13507: PUSH
13508: LD_INT 114
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: ST_TO_ADDR
13531: GO 14478
13533: LD_INT 15
13535: DOUBLE
13536: EQUAL
13537: IFTRUE 13541
13539: GO 13753
13541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13542: LD_ADDR_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: LD_INT 5
13561: PUSH
13562: LD_INT 6
13564: PUSH
13565: LD_INT 7
13567: PUSH
13568: LD_INT 8
13570: PUSH
13571: LD_INT 9
13573: PUSH
13574: LD_INT 10
13576: PUSH
13577: LD_INT 11
13579: PUSH
13580: LD_INT 12
13582: PUSH
13583: LD_INT 13
13585: PUSH
13586: LD_INT 14
13588: PUSH
13589: LD_INT 15
13591: PUSH
13592: LD_INT 16
13594: PUSH
13595: LD_INT 17
13597: PUSH
13598: LD_INT 18
13600: PUSH
13601: LD_INT 19
13603: PUSH
13604: LD_INT 20
13606: PUSH
13607: LD_INT 21
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_INT 23
13615: PUSH
13616: LD_INT 24
13618: PUSH
13619: LD_INT 25
13621: PUSH
13622: LD_INT 26
13624: PUSH
13625: LD_INT 27
13627: PUSH
13628: LD_INT 28
13630: PUSH
13631: LD_INT 29
13633: PUSH
13634: LD_INT 30
13636: PUSH
13637: LD_INT 31
13639: PUSH
13640: LD_INT 32
13642: PUSH
13643: LD_INT 33
13645: PUSH
13646: LD_INT 34
13648: PUSH
13649: LD_INT 36
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 101
13691: PUSH
13692: LD_INT 102
13694: PUSH
13695: LD_INT 103
13697: PUSH
13698: LD_INT 104
13700: PUSH
13701: LD_INT 105
13703: PUSH
13704: LD_INT 106
13706: PUSH
13707: LD_INT 107
13709: PUSH
13710: LD_INT 108
13712: PUSH
13713: LD_INT 109
13715: PUSH
13716: LD_INT 110
13718: PUSH
13719: LD_INT 111
13721: PUSH
13722: LD_INT 112
13724: PUSH
13725: LD_INT 113
13727: PUSH
13728: LD_INT 114
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: ST_TO_ADDR
13751: GO 14478
13753: LD_INT 16
13755: DOUBLE
13756: EQUAL
13757: IFTRUE 13761
13759: GO 13885
13761: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 4
13772: PUSH
13773: LD_INT 5
13775: PUSH
13776: LD_INT 7
13778: PUSH
13779: LD_INT 11
13781: PUSH
13782: LD_INT 12
13784: PUSH
13785: LD_INT 15
13787: PUSH
13788: LD_INT 16
13790: PUSH
13791: LD_INT 20
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 22
13799: PUSH
13800: LD_INT 23
13802: PUSH
13803: LD_INT 25
13805: PUSH
13806: LD_INT 26
13808: PUSH
13809: LD_INT 30
13811: PUSH
13812: LD_INT 31
13814: PUSH
13815: LD_INT 32
13817: PUSH
13818: LD_INT 33
13820: PUSH
13821: LD_INT 34
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 101
13847: PUSH
13848: LD_INT 102
13850: PUSH
13851: LD_INT 103
13853: PUSH
13854: LD_INT 106
13856: PUSH
13857: LD_INT 108
13859: PUSH
13860: LD_INT 112
13862: PUSH
13863: LD_INT 113
13865: PUSH
13866: LD_INT 114
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: ST_TO_ADDR
13883: GO 14478
13885: LD_INT 17
13887: DOUBLE
13888: EQUAL
13889: IFTRUE 13893
13891: GO 14105
13893: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: LD_INT 1
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: LD_INT 3
13907: PUSH
13908: LD_INT 4
13910: PUSH
13911: LD_INT 5
13913: PUSH
13914: LD_INT 6
13916: PUSH
13917: LD_INT 7
13919: PUSH
13920: LD_INT 8
13922: PUSH
13923: LD_INT 9
13925: PUSH
13926: LD_INT 10
13928: PUSH
13929: LD_INT 11
13931: PUSH
13932: LD_INT 12
13934: PUSH
13935: LD_INT 13
13937: PUSH
13938: LD_INT 14
13940: PUSH
13941: LD_INT 15
13943: PUSH
13944: LD_INT 16
13946: PUSH
13947: LD_INT 17
13949: PUSH
13950: LD_INT 18
13952: PUSH
13953: LD_INT 19
13955: PUSH
13956: LD_INT 20
13958: PUSH
13959: LD_INT 21
13961: PUSH
13962: LD_INT 22
13964: PUSH
13965: LD_INT 23
13967: PUSH
13968: LD_INT 24
13970: PUSH
13971: LD_INT 25
13973: PUSH
13974: LD_INT 26
13976: PUSH
13977: LD_INT 27
13979: PUSH
13980: LD_INT 28
13982: PUSH
13983: LD_INT 29
13985: PUSH
13986: LD_INT 30
13988: PUSH
13989: LD_INT 31
13991: PUSH
13992: LD_INT 32
13994: PUSH
13995: LD_INT 33
13997: PUSH
13998: LD_INT 34
14000: PUSH
14001: LD_INT 36
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 101
14043: PUSH
14044: LD_INT 102
14046: PUSH
14047: LD_INT 103
14049: PUSH
14050: LD_INT 104
14052: PUSH
14053: LD_INT 105
14055: PUSH
14056: LD_INT 106
14058: PUSH
14059: LD_INT 107
14061: PUSH
14062: LD_INT 108
14064: PUSH
14065: LD_INT 109
14067: PUSH
14068: LD_INT 110
14070: PUSH
14071: LD_INT 111
14073: PUSH
14074: LD_INT 112
14076: PUSH
14077: LD_INT 113
14079: PUSH
14080: LD_INT 114
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: ST_TO_ADDR
14103: GO 14478
14105: LD_INT 18
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14249
14113: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: LD_INT 4
14124: PUSH
14125: LD_INT 5
14127: PUSH
14128: LD_INT 7
14130: PUSH
14131: LD_INT 11
14133: PUSH
14134: LD_INT 12
14136: PUSH
14137: LD_INT 15
14139: PUSH
14140: LD_INT 16
14142: PUSH
14143: LD_INT 20
14145: PUSH
14146: LD_INT 21
14148: PUSH
14149: LD_INT 22
14151: PUSH
14152: LD_INT 23
14154: PUSH
14155: LD_INT 25
14157: PUSH
14158: LD_INT 26
14160: PUSH
14161: LD_INT 30
14163: PUSH
14164: LD_INT 31
14166: PUSH
14167: LD_INT 32
14169: PUSH
14170: LD_INT 33
14172: PUSH
14173: LD_INT 34
14175: PUSH
14176: LD_INT 35
14178: PUSH
14179: LD_INT 36
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 101
14207: PUSH
14208: LD_INT 102
14210: PUSH
14211: LD_INT 103
14213: PUSH
14214: LD_INT 106
14216: PUSH
14217: LD_INT 108
14219: PUSH
14220: LD_INT 112
14222: PUSH
14223: LD_INT 113
14225: PUSH
14226: LD_INT 114
14228: PUSH
14229: LD_INT 115
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: ST_TO_ADDR
14247: GO 14478
14249: LD_INT 19
14251: DOUBLE
14252: EQUAL
14253: IFTRUE 14257
14255: GO 14477
14257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14258: LD_ADDR_VAR 0 1
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: LD_INT 3
14271: PUSH
14272: LD_INT 4
14274: PUSH
14275: LD_INT 5
14277: PUSH
14278: LD_INT 6
14280: PUSH
14281: LD_INT 7
14283: PUSH
14284: LD_INT 8
14286: PUSH
14287: LD_INT 9
14289: PUSH
14290: LD_INT 10
14292: PUSH
14293: LD_INT 11
14295: PUSH
14296: LD_INT 12
14298: PUSH
14299: LD_INT 13
14301: PUSH
14302: LD_INT 14
14304: PUSH
14305: LD_INT 15
14307: PUSH
14308: LD_INT 16
14310: PUSH
14311: LD_INT 17
14313: PUSH
14314: LD_INT 18
14316: PUSH
14317: LD_INT 19
14319: PUSH
14320: LD_INT 20
14322: PUSH
14323: LD_INT 21
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_INT 23
14331: PUSH
14332: LD_INT 24
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 26
14340: PUSH
14341: LD_INT 27
14343: PUSH
14344: LD_INT 28
14346: PUSH
14347: LD_INT 29
14349: PUSH
14350: LD_INT 30
14352: PUSH
14353: LD_INT 31
14355: PUSH
14356: LD_INT 32
14358: PUSH
14359: LD_INT 33
14361: PUSH
14362: LD_INT 34
14364: PUSH
14365: LD_INT 35
14367: PUSH
14368: LD_INT 36
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 101
14411: PUSH
14412: LD_INT 102
14414: PUSH
14415: LD_INT 103
14417: PUSH
14418: LD_INT 104
14420: PUSH
14421: LD_INT 105
14423: PUSH
14424: LD_INT 106
14426: PUSH
14427: LD_INT 107
14429: PUSH
14430: LD_INT 108
14432: PUSH
14433: LD_INT 109
14435: PUSH
14436: LD_INT 110
14438: PUSH
14439: LD_INT 111
14441: PUSH
14442: LD_INT 112
14444: PUSH
14445: LD_INT 113
14447: PUSH
14448: LD_INT 114
14450: PUSH
14451: LD_INT 115
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: ST_TO_ADDR
14475: GO 14478
14477: POP
// end else
14478: GO 14697
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14480: LD_ADDR_VAR 0 1
14484: PUSH
14485: LD_INT 1
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: LD_INT 3
14493: PUSH
14494: LD_INT 4
14496: PUSH
14497: LD_INT 5
14499: PUSH
14500: LD_INT 6
14502: PUSH
14503: LD_INT 7
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: LD_INT 9
14511: PUSH
14512: LD_INT 10
14514: PUSH
14515: LD_INT 11
14517: PUSH
14518: LD_INT 12
14520: PUSH
14521: LD_INT 13
14523: PUSH
14524: LD_INT 14
14526: PUSH
14527: LD_INT 15
14529: PUSH
14530: LD_INT 16
14532: PUSH
14533: LD_INT 17
14535: PUSH
14536: LD_INT 18
14538: PUSH
14539: LD_INT 19
14541: PUSH
14542: LD_INT 20
14544: PUSH
14545: LD_INT 21
14547: PUSH
14548: LD_INT 22
14550: PUSH
14551: LD_INT 23
14553: PUSH
14554: LD_INT 24
14556: PUSH
14557: LD_INT 25
14559: PUSH
14560: LD_INT 26
14562: PUSH
14563: LD_INT 27
14565: PUSH
14566: LD_INT 28
14568: PUSH
14569: LD_INT 29
14571: PUSH
14572: LD_INT 30
14574: PUSH
14575: LD_INT 31
14577: PUSH
14578: LD_INT 32
14580: PUSH
14581: LD_INT 33
14583: PUSH
14584: LD_INT 34
14586: PUSH
14587: LD_INT 35
14589: PUSH
14590: LD_INT 36
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 101
14633: PUSH
14634: LD_INT 102
14636: PUSH
14637: LD_INT 103
14639: PUSH
14640: LD_INT 104
14642: PUSH
14643: LD_INT 105
14645: PUSH
14646: LD_INT 106
14648: PUSH
14649: LD_INT 107
14651: PUSH
14652: LD_INT 108
14654: PUSH
14655: LD_INT 109
14657: PUSH
14658: LD_INT 110
14660: PUSH
14661: LD_INT 111
14663: PUSH
14664: LD_INT 112
14666: PUSH
14667: LD_INT 113
14669: PUSH
14670: LD_INT 114
14672: PUSH
14673: LD_INT 115
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: ST_TO_ADDR
// if result then
14697: LD_VAR 0 1
14701: IFFALSE 14990
// begin normal :=  ;
14703: LD_ADDR_VAR 0 3
14707: PUSH
14708: LD_STRING 
14710: ST_TO_ADDR
// hardcore :=  ;
14711: LD_ADDR_VAR 0 4
14715: PUSH
14716: LD_STRING 
14718: ST_TO_ADDR
// for i = 1 to normalCounter do
14719: LD_ADDR_VAR 0 5
14723: PUSH
14724: DOUBLE
14725: LD_INT 1
14727: DEC
14728: ST_TO_ADDR
14729: LD_EXP 27
14733: PUSH
14734: FOR_TO
14735: IFFALSE 14836
// begin tmp := 0 ;
14737: LD_ADDR_VAR 0 2
14741: PUSH
14742: LD_STRING 0
14744: ST_TO_ADDR
// if result [ 1 ] then
14745: LD_VAR 0 1
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: IFFALSE 14818
// if result [ 1 ] [ 1 ] = i then
14755: LD_VAR 0 1
14759: PUSH
14760: LD_INT 1
14762: ARRAY
14763: PUSH
14764: LD_INT 1
14766: ARRAY
14767: PUSH
14768: LD_VAR 0 5
14772: EQUAL
14773: IFFALSE 14818
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_VAR 0 1
14784: PPUSH
14785: LD_INT 1
14787: PPUSH
14788: LD_VAR 0 1
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 3
14804: PPUSH
14805: CALL_OW 1
14809: ST_TO_ADDR
// tmp := 1 ;
14810: LD_ADDR_VAR 0 2
14814: PUSH
14815: LD_STRING 1
14817: ST_TO_ADDR
// end ; normal := normal & tmp ;
14818: LD_ADDR_VAR 0 3
14822: PUSH
14823: LD_VAR 0 3
14827: PUSH
14828: LD_VAR 0 2
14832: STR
14833: ST_TO_ADDR
// end ;
14834: GO 14734
14836: POP
14837: POP
// for i = 1 to hardcoreCounter do
14838: LD_ADDR_VAR 0 5
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_EXP 28
14852: PUSH
14853: FOR_TO
14854: IFFALSE 14959
// begin tmp := 0 ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_STRING 0
14863: ST_TO_ADDR
// if result [ 2 ] then
14864: LD_VAR 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: IFFALSE 14941
// if result [ 2 ] [ 1 ] = 100 + i then
14874: LD_VAR 0 1
14878: PUSH
14879: LD_INT 2
14881: ARRAY
14882: PUSH
14883: LD_INT 1
14885: ARRAY
14886: PUSH
14887: LD_INT 100
14889: PUSH
14890: LD_VAR 0 5
14894: PLUS
14895: EQUAL
14896: IFFALSE 14941
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14898: LD_ADDR_VAR 0 1
14902: PUSH
14903: LD_VAR 0 1
14907: PPUSH
14908: LD_INT 2
14910: PPUSH
14911: LD_VAR 0 1
14915: PUSH
14916: LD_INT 2
14918: ARRAY
14919: PPUSH
14920: LD_INT 1
14922: PPUSH
14923: CALL_OW 3
14927: PPUSH
14928: CALL_OW 1
14932: ST_TO_ADDR
// tmp := 1 ;
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: LD_STRING 1
14940: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14941: LD_ADDR_VAR 0 4
14945: PUSH
14946: LD_VAR 0 4
14950: PUSH
14951: LD_VAR 0 2
14955: STR
14956: ST_TO_ADDR
// end ;
14957: GO 14853
14959: POP
14960: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14961: LD_STRING getStreamItemsFromMission("
14963: PUSH
14964: LD_VAR 0 3
14968: STR
14969: PUSH
14970: LD_STRING ","
14972: STR
14973: PUSH
14974: LD_VAR 0 4
14978: STR
14979: PUSH
14980: LD_STRING ")
14982: STR
14983: PPUSH
14984: CALL_OW 559
// end else
14988: GO 14997
// ToLua ( getStreamItemsFromMission("","") ) ;
14990: LD_STRING getStreamItemsFromMission("","")
14992: PPUSH
14993: CALL_OW 559
// end ;
14997: LD_VAR 0 1
15001: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15002: LD_EXP 26
15006: PUSH
15007: LD_EXP 31
15011: AND
15012: IFFALSE 15136
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
15020: PPUSH
// begin enable ;
15021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15022: LD_ADDR_VAR 0 2
15026: PUSH
15027: LD_INT 22
15029: PUSH
15030: LD_OWVAR 2
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: LD_INT 34
15044: PUSH
15045: LD_INT 7
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 34
15054: PUSH
15055: LD_INT 45
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 34
15064: PUSH
15065: LD_INT 28
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 34
15074: PUSH
15075: LD_INT 47
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: ST_TO_ADDR
// if not tmp then
15098: LD_VAR 0 2
15102: NOT
15103: IFFALSE 15107
// exit ;
15105: GO 15136
// for i in tmp do
15107: LD_ADDR_VAR 0 1
15111: PUSH
15112: LD_VAR 0 2
15116: PUSH
15117: FOR_IN
15118: IFFALSE 15134
// begin SetLives ( i , 0 ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 0
15127: PPUSH
15128: CALL_OW 234
// end ;
15132: GO 15117
15134: POP
15135: POP
// end ;
15136: PPOPN 2
15138: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15139: LD_EXP 26
15143: PUSH
15144: LD_EXP 32
15148: AND
15149: IFFALSE 15233
15151: GO 15153
15153: DISABLE
15154: LD_INT 0
15156: PPUSH
15157: PPUSH
// begin enable ;
15158: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15159: LD_ADDR_VAR 0 2
15163: PUSH
15164: LD_INT 22
15166: PUSH
15167: LD_OWVAR 2
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 32
15178: PUSH
15179: LD_INT 3
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PPUSH
15190: CALL_OW 69
15194: ST_TO_ADDR
// if not tmp then
15195: LD_VAR 0 2
15199: NOT
15200: IFFALSE 15204
// exit ;
15202: GO 15233
// for i in tmp do
15204: LD_ADDR_VAR 0 1
15208: PUSH
15209: LD_VAR 0 2
15213: PUSH
15214: FOR_IN
15215: IFFALSE 15231
// begin SetLives ( i , 0 ) ;
15217: LD_VAR 0 1
15221: PPUSH
15222: LD_INT 0
15224: PPUSH
15225: CALL_OW 234
// end ;
15229: GO 15214
15231: POP
15232: POP
// end ;
15233: PPOPN 2
15235: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15236: LD_EXP 26
15240: PUSH
15241: LD_EXP 29
15245: AND
15246: IFFALSE 15339
15248: GO 15250
15250: DISABLE
15251: LD_INT 0
15253: PPUSH
// begin enable ;
15254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15255: LD_ADDR_VAR 0 1
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_OWVAR 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 2
15274: PUSH
15275: LD_INT 25
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 25
15287: PUSH
15288: LD_INT 9
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 25
15297: PUSH
15298: LD_INT 8
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PPUSH
15315: CALL_OW 69
15319: PUSH
15320: FOR_IN
15321: IFFALSE 15337
// begin SetClass ( i , 1 ) ;
15323: LD_VAR 0 1
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 336
// end ;
15335: GO 15320
15337: POP
15338: POP
// end ;
15339: PPOPN 1
15341: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15342: LD_EXP 26
15346: PUSH
15347: LD_EXP 30
15351: AND
15352: PUSH
15353: LD_OWVAR 65
15357: PUSH
15358: LD_INT 7
15360: LESS
15361: AND
15362: IFFALSE 15376
15364: GO 15366
15366: DISABLE
// begin enable ;
15367: ENABLE
// game_speed := 7 ;
15368: LD_ADDR_OWVAR 65
15372: PUSH
15373: LD_INT 7
15375: ST_TO_ADDR
// end ;
15376: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15377: LD_EXP 26
15381: PUSH
15382: LD_EXP 33
15386: AND
15387: IFFALSE 15589
15389: GO 15391
15391: DISABLE
15392: LD_INT 0
15394: PPUSH
15395: PPUSH
15396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15397: LD_ADDR_VAR 0 3
15401: PUSH
15402: LD_INT 81
15404: PUSH
15405: LD_OWVAR 2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 21
15416: PUSH
15417: LD_INT 1
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 69
15432: ST_TO_ADDR
// if not tmp then
15433: LD_VAR 0 3
15437: NOT
15438: IFFALSE 15442
// exit ;
15440: GO 15589
// if tmp > 5 then
15442: LD_VAR 0 3
15446: PUSH
15447: LD_INT 5
15449: GREATER
15450: IFFALSE 15462
// k := 5 else
15452: LD_ADDR_VAR 0 2
15456: PUSH
15457: LD_INT 5
15459: ST_TO_ADDR
15460: GO 15472
// k := tmp ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 3
15471: ST_TO_ADDR
// for i := 1 to k do
15472: LD_ADDR_VAR 0 1
15476: PUSH
15477: DOUBLE
15478: LD_INT 1
15480: DEC
15481: ST_TO_ADDR
15482: LD_VAR 0 2
15486: PUSH
15487: FOR_TO
15488: IFFALSE 15587
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15490: LD_VAR 0 3
15494: PUSH
15495: LD_VAR 0 1
15499: ARRAY
15500: PPUSH
15501: LD_VAR 0 1
15505: PUSH
15506: LD_INT 4
15508: MOD
15509: PUSH
15510: LD_INT 1
15512: PLUS
15513: PPUSH
15514: CALL_OW 259
15518: PUSH
15519: LD_INT 10
15521: LESS
15522: IFFALSE 15585
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15524: LD_VAR 0 3
15528: PUSH
15529: LD_VAR 0 1
15533: ARRAY
15534: PPUSH
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 4
15542: MOD
15543: PUSH
15544: LD_INT 1
15546: PLUS
15547: PPUSH
15548: LD_VAR 0 3
15552: PUSH
15553: LD_VAR 0 1
15557: ARRAY
15558: PPUSH
15559: LD_VAR 0 1
15563: PUSH
15564: LD_INT 4
15566: MOD
15567: PUSH
15568: LD_INT 1
15570: PLUS
15571: PPUSH
15572: CALL_OW 259
15576: PUSH
15577: LD_INT 1
15579: PLUS
15580: PPUSH
15581: CALL_OW 237
15585: GO 15487
15587: POP
15588: POP
// end ;
15589: PPOPN 3
15591: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15592: LD_EXP 26
15596: PUSH
15597: LD_EXP 34
15601: AND
15602: IFFALSE 15622
15604: GO 15606
15606: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15607: LD_INT 4
15609: PPUSH
15610: LD_OWVAR 2
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL_OW 324
15622: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15623: LD_EXP 26
15627: PUSH
15628: LD_EXP 63
15632: AND
15633: IFFALSE 15653
15635: GO 15637
15637: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15638: LD_INT 19
15640: PPUSH
15641: LD_OWVAR 2
15645: PPUSH
15646: LD_INT 0
15648: PPUSH
15649: CALL_OW 324
15653: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15654: LD_EXP 26
15658: PUSH
15659: LD_EXP 35
15663: AND
15664: IFFALSE 15766
15666: GO 15668
15668: DISABLE
15669: LD_INT 0
15671: PPUSH
15672: PPUSH
// begin enable ;
15673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 34
15696: PUSH
15697: LD_INT 11
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 34
15706: PUSH
15707: LD_INT 30
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 69
15727: ST_TO_ADDR
// if not tmp then
15728: LD_VAR 0 2
15732: NOT
15733: IFFALSE 15737
// exit ;
15735: GO 15766
// for i in tmp do
15737: LD_ADDR_VAR 0 1
15741: PUSH
15742: LD_VAR 0 2
15746: PUSH
15747: FOR_IN
15748: IFFALSE 15764
// begin SetLives ( i , 0 ) ;
15750: LD_VAR 0 1
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL_OW 234
// end ;
15762: GO 15747
15764: POP
15765: POP
// end ;
15766: PPOPN 2
15768: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15769: LD_EXP 26
15773: PUSH
15774: LD_EXP 36
15778: AND
15779: IFFALSE 15799
15781: GO 15783
15783: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15784: LD_INT 32
15786: PPUSH
15787: LD_OWVAR 2
15791: PPUSH
15792: LD_INT 0
15794: PPUSH
15795: CALL_OW 324
15799: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15800: LD_EXP 26
15804: PUSH
15805: LD_EXP 37
15809: AND
15810: IFFALSE 15991
15812: GO 15814
15814: DISABLE
15815: LD_INT 0
15817: PPUSH
15818: PPUSH
15819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15820: LD_ADDR_VAR 0 2
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_OWVAR 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 33
15839: PUSH
15840: LD_INT 3
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: ST_TO_ADDR
// if not tmp then
15856: LD_VAR 0 2
15860: NOT
15861: IFFALSE 15865
// exit ;
15863: GO 15991
// side := 0 ;
15865: LD_ADDR_VAR 0 3
15869: PUSH
15870: LD_INT 0
15872: ST_TO_ADDR
// for i := 1 to 8 do
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: DOUBLE
15879: LD_INT 1
15881: DEC
15882: ST_TO_ADDR
15883: LD_INT 8
15885: PUSH
15886: FOR_TO
15887: IFFALSE 15935
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15889: LD_OWVAR 2
15893: PUSH
15894: LD_VAR 0 1
15898: NONEQUAL
15899: PUSH
15900: LD_OWVAR 2
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 81
15914: PUSH
15915: LD_INT 2
15917: EQUAL
15918: AND
15919: IFFALSE 15933
// begin side := i ;
15921: LD_ADDR_VAR 0 3
15925: PUSH
15926: LD_VAR 0 1
15930: ST_TO_ADDR
// break ;
15931: GO 15935
// end ;
15933: GO 15886
15935: POP
15936: POP
// if not side then
15937: LD_VAR 0 3
15941: NOT
15942: IFFALSE 15946
// exit ;
15944: GO 15991
// for i := 1 to tmp do
15946: LD_ADDR_VAR 0 1
15950: PUSH
15951: DOUBLE
15952: LD_INT 1
15954: DEC
15955: ST_TO_ADDR
15956: LD_VAR 0 2
15960: PUSH
15961: FOR_TO
15962: IFFALSE 15989
// if Prob ( 60 ) then
15964: LD_INT 60
15966: PPUSH
15967: CALL_OW 13
15971: IFFALSE 15987
// SetSide ( i , side ) ;
15973: LD_VAR 0 1
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: CALL_OW 235
15987: GO 15961
15989: POP
15990: POP
// end ;
15991: PPOPN 3
15993: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15994: LD_EXP 26
15998: PUSH
15999: LD_EXP 39
16003: AND
16004: IFFALSE 16123
16006: GO 16008
16008: DISABLE
16009: LD_INT 0
16011: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16012: LD_ADDR_VAR 0 1
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_OWVAR 2
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 21
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: LD_INT 23
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: PUSH
16066: FOR_IN
16067: IFFALSE 16121
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 257
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: LD_INT 4
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: IN
16097: IFFALSE 16119
// SetClass ( un , rand ( 1 , 4 ) ) ;
16099: LD_VAR 0 1
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: LD_INT 4
16109: PPUSH
16110: CALL_OW 12
16114: PPUSH
16115: CALL_OW 336
16119: GO 16066
16121: POP
16122: POP
// end ;
16123: PPOPN 1
16125: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16126: LD_EXP 26
16130: PUSH
16131: LD_EXP 38
16135: AND
16136: IFFALSE 16215
16138: GO 16140
16140: DISABLE
16141: LD_INT 0
16143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16144: LD_ADDR_VAR 0 1
16148: PUSH
16149: LD_INT 22
16151: PUSH
16152: LD_OWVAR 2
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 21
16163: PUSH
16164: LD_INT 3
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PPUSH
16175: CALL_OW 69
16179: ST_TO_ADDR
// if not tmp then
16180: LD_VAR 0 1
16184: NOT
16185: IFFALSE 16189
// exit ;
16187: GO 16215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16189: LD_VAR 0 1
16193: PUSH
16194: LD_INT 1
16196: PPUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 12
16206: ARRAY
16207: PPUSH
16208: LD_INT 100
16210: PPUSH
16211: CALL_OW 234
// end ;
16215: PPOPN 1
16217: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16218: LD_EXP 26
16222: PUSH
16223: LD_EXP 40
16227: AND
16228: IFFALSE 16326
16230: GO 16232
16232: DISABLE
16233: LD_INT 0
16235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16236: LD_ADDR_VAR 0 1
16240: PUSH
16241: LD_INT 22
16243: PUSH
16244: LD_OWVAR 2
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 21
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL_OW 69
16271: ST_TO_ADDR
// if not tmp then
16272: LD_VAR 0 1
16276: NOT
16277: IFFALSE 16281
// exit ;
16279: GO 16326
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16281: LD_VAR 0 1
16285: PUSH
16286: LD_INT 1
16288: PPUSH
16289: LD_VAR 0 1
16293: PPUSH
16294: CALL_OW 12
16298: ARRAY
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: LD_INT 4
16305: PPUSH
16306: CALL_OW 12
16310: PPUSH
16311: LD_INT 3000
16313: PPUSH
16314: LD_INT 9000
16316: PPUSH
16317: CALL_OW 12
16321: PPUSH
16322: CALL_OW 492
// end ;
16326: PPOPN 1
16328: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16329: LD_EXP 26
16333: PUSH
16334: LD_EXP 41
16338: AND
16339: IFFALSE 16359
16341: GO 16343
16343: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16344: LD_INT 1
16346: PPUSH
16347: LD_OWVAR 2
16351: PPUSH
16352: LD_INT 0
16354: PPUSH
16355: CALL_OW 324
16359: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16360: LD_EXP 26
16364: PUSH
16365: LD_EXP 42
16369: AND
16370: IFFALSE 16453
16372: GO 16374
16374: DISABLE
16375: LD_INT 0
16377: PPUSH
16378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16379: LD_ADDR_VAR 0 2
16383: PUSH
16384: LD_INT 22
16386: PUSH
16387: LD_OWVAR 2
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 21
16398: PUSH
16399: LD_INT 3
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PPUSH
16410: CALL_OW 69
16414: ST_TO_ADDR
// if not tmp then
16415: LD_VAR 0 2
16419: NOT
16420: IFFALSE 16424
// exit ;
16422: GO 16453
// for i in tmp do
16424: LD_ADDR_VAR 0 1
16428: PUSH
16429: LD_VAR 0 2
16433: PUSH
16434: FOR_IN
16435: IFFALSE 16451
// SetBLevel ( i , 10 ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_INT 10
16444: PPUSH
16445: CALL_OW 241
16449: GO 16434
16451: POP
16452: POP
// end ;
16453: PPOPN 2
16455: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16456: LD_EXP 26
16460: PUSH
16461: LD_EXP 43
16465: AND
16466: IFFALSE 16577
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
16475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_INT 22
16483: PUSH
16484: LD_OWVAR 2
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 25
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 69
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 3
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 16577
// un := tmp [ rand ( 1 , tmp ) ] ;
16521: LD_ADDR_VAR 0 2
16525: PUSH
16526: LD_VAR 0 3
16530: PUSH
16531: LD_INT 1
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: CALL_OW 12
16543: ARRAY
16544: ST_TO_ADDR
// if Crawls ( un ) then
16545: LD_VAR 0 2
16549: PPUSH
16550: CALL_OW 318
16554: IFFALSE 16565
// ComWalk ( un ) ;
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16565: LD_VAR 0 2
16569: PPUSH
16570: LD_INT 5
16572: PPUSH
16573: CALL_OW 336
// end ;
16577: PPOPN 3
16579: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16580: LD_EXP 26
16584: PUSH
16585: LD_EXP 44
16589: AND
16590: PUSH
16591: LD_OWVAR 67
16595: PUSH
16596: LD_INT 3
16598: LESS
16599: AND
16600: IFFALSE 16619
16602: GO 16604
16604: DISABLE
// Difficulty := Difficulty + 1 ;
16605: LD_ADDR_OWVAR 67
16609: PUSH
16610: LD_OWVAR 67
16614: PUSH
16615: LD_INT 1
16617: PLUS
16618: ST_TO_ADDR
16619: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16620: LD_EXP 26
16624: PUSH
16625: LD_EXP 45
16629: AND
16630: IFFALSE 16733
16632: GO 16634
16634: DISABLE
16635: LD_INT 0
16637: PPUSH
// begin for i := 1 to 5 do
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: DOUBLE
16644: LD_INT 1
16646: DEC
16647: ST_TO_ADDR
16648: LD_INT 5
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16731
// begin uc_nation := nation_nature ;
16654: LD_ADDR_OWVAR 21
16658: PUSH
16659: LD_INT 0
16661: ST_TO_ADDR
// uc_side := 0 ;
16662: LD_ADDR_OWVAR 20
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16670: LD_ADDR_OWVAR 29
16674: PUSH
16675: LD_INT 12
16677: PUSH
16678: LD_INT 12
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: ST_TO_ADDR
// hc_agressivity := 20 ;
16685: LD_ADDR_OWVAR 35
16689: PUSH
16690: LD_INT 20
16692: ST_TO_ADDR
// hc_class := class_tiger ;
16693: LD_ADDR_OWVAR 28
16697: PUSH
16698: LD_INT 14
16700: ST_TO_ADDR
// hc_gallery :=  ;
16701: LD_ADDR_OWVAR 33
16705: PUSH
16706: LD_STRING 
16708: ST_TO_ADDR
// hc_name :=  ;
16709: LD_ADDR_OWVAR 26
16713: PUSH
16714: LD_STRING 
16716: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16717: CALL_OW 44
16721: PPUSH
16722: LD_INT 0
16724: PPUSH
16725: CALL_OW 51
// end ;
16729: GO 16651
16731: POP
16732: POP
// end ;
16733: PPOPN 1
16735: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16736: LD_EXP 26
16740: PUSH
16741: LD_EXP 46
16745: AND
16746: IFFALSE 16755
16748: GO 16750
16750: DISABLE
// StreamSibBomb ;
16751: CALL 16756 0 0
16755: END
// export function StreamSibBomb ; var i , x , y ; begin
16756: LD_INT 0
16758: PPUSH
16759: PPUSH
16760: PPUSH
16761: PPUSH
// result := false ;
16762: LD_ADDR_VAR 0 1
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// for i := 1 to 16 do
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: DOUBLE
16776: LD_INT 1
16778: DEC
16779: ST_TO_ADDR
16780: LD_INT 16
16782: PUSH
16783: FOR_TO
16784: IFFALSE 16983
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16786: LD_ADDR_VAR 0 3
16790: PUSH
16791: LD_INT 10
16793: PUSH
16794: LD_INT 20
16796: PUSH
16797: LD_INT 30
16799: PUSH
16800: LD_INT 40
16802: PUSH
16803: LD_INT 50
16805: PUSH
16806: LD_INT 60
16808: PUSH
16809: LD_INT 70
16811: PUSH
16812: LD_INT 80
16814: PUSH
16815: LD_INT 90
16817: PUSH
16818: LD_INT 100
16820: PUSH
16821: LD_INT 110
16823: PUSH
16824: LD_INT 120
16826: PUSH
16827: LD_INT 130
16829: PUSH
16830: LD_INT 140
16832: PUSH
16833: LD_INT 150
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: PPUSH
16856: LD_INT 15
16858: PPUSH
16859: CALL_OW 12
16863: ARRAY
16864: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16865: LD_ADDR_VAR 0 4
16869: PUSH
16870: LD_INT 10
16872: PUSH
16873: LD_INT 20
16875: PUSH
16876: LD_INT 30
16878: PUSH
16879: LD_INT 40
16881: PUSH
16882: LD_INT 50
16884: PUSH
16885: LD_INT 60
16887: PUSH
16888: LD_INT 70
16890: PUSH
16891: LD_INT 80
16893: PUSH
16894: LD_INT 90
16896: PUSH
16897: LD_INT 100
16899: PUSH
16900: LD_INT 110
16902: PUSH
16903: LD_INT 120
16905: PUSH
16906: LD_INT 130
16908: PUSH
16909: LD_INT 140
16911: PUSH
16912: LD_INT 150
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: PPUSH
16935: LD_INT 15
16937: PPUSH
16938: CALL_OW 12
16942: ARRAY
16943: ST_TO_ADDR
// if ValidHex ( x , y ) then
16944: LD_VAR 0 3
16948: PPUSH
16949: LD_VAR 0 4
16953: PPUSH
16954: CALL_OW 488
16958: IFFALSE 16981
// begin result := [ x , y ] ;
16960: LD_ADDR_VAR 0 1
16964: PUSH
16965: LD_VAR 0 3
16969: PUSH
16970: LD_VAR 0 4
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: ST_TO_ADDR
// break ;
16979: GO 16983
// end ; end ;
16981: GO 16783
16983: POP
16984: POP
// if result then
16985: LD_VAR 0 1
16989: IFFALSE 17049
// begin ToLua ( playSibBomb() ) ;
16991: LD_STRING playSibBomb()
16993: PPUSH
16994: CALL_OW 559
// wait ( 0 0$14 ) ;
16998: LD_INT 490
17000: PPUSH
17001: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17005: LD_VAR 0 1
17009: PUSH
17010: LD_INT 1
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 1
17018: PUSH
17019: LD_INT 2
17021: ARRAY
17022: PPUSH
17023: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17027: LD_VAR 0 1
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PPUSH
17036: LD_VAR 0 1
17040: PUSH
17041: LD_INT 2
17043: ARRAY
17044: PPUSH
17045: CALL_OW 429
// end ; end ;
17049: LD_VAR 0 1
17053: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17054: LD_EXP 26
17058: PUSH
17059: LD_EXP 48
17063: AND
17064: IFFALSE 17076
17066: GO 17068
17068: DISABLE
// YouLost (  ) ;
17069: LD_STRING 
17071: PPUSH
17072: CALL_OW 104
17076: END
// every 0 0$1 trigger StreamModeActive and sFog do
17077: LD_EXP 26
17081: PUSH
17082: LD_EXP 47
17086: AND
17087: IFFALSE 17101
17089: GO 17091
17091: DISABLE
// FogOff ( your_side ) ;
17092: LD_OWVAR 2
17096: PPUSH
17097: CALL_OW 344
17101: END
// every 0 0$1 trigger StreamModeActive and sSun do
17102: LD_EXP 26
17106: PUSH
17107: LD_EXP 49
17111: AND
17112: IFFALSE 17140
17114: GO 17116
17116: DISABLE
// begin solar_recharge_percent := 0 ;
17117: LD_ADDR_OWVAR 79
17121: PUSH
17122: LD_INT 0
17124: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17125: LD_INT 10500
17127: PPUSH
17128: CALL_OW 67
// solar_recharge_percent := 100 ;
17132: LD_ADDR_OWVAR 79
17136: PUSH
17137: LD_INT 100
17139: ST_TO_ADDR
// end ;
17140: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17141: LD_EXP 26
17145: PUSH
17146: LD_EXP 50
17150: AND
17151: IFFALSE 17390
17153: GO 17155
17155: DISABLE
17156: LD_INT 0
17158: PPUSH
17159: PPUSH
17160: PPUSH
// begin tmp := [ ] ;
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: EMPTY
17167: ST_TO_ADDR
// for i := 1 to 6 do
17168: LD_ADDR_VAR 0 1
17172: PUSH
17173: DOUBLE
17174: LD_INT 1
17176: DEC
17177: ST_TO_ADDR
17178: LD_INT 6
17180: PUSH
17181: FOR_TO
17182: IFFALSE 17287
// begin uc_nation := nation_nature ;
17184: LD_ADDR_OWVAR 21
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// uc_side := 0 ;
17192: LD_ADDR_OWVAR 20
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17200: LD_ADDR_OWVAR 29
17204: PUSH
17205: LD_INT 12
17207: PUSH
17208: LD_INT 12
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: ST_TO_ADDR
// hc_agressivity := 20 ;
17215: LD_ADDR_OWVAR 35
17219: PUSH
17220: LD_INT 20
17222: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17223: LD_ADDR_OWVAR 28
17227: PUSH
17228: LD_INT 17
17230: ST_TO_ADDR
// hc_gallery :=  ;
17231: LD_ADDR_OWVAR 33
17235: PUSH
17236: LD_STRING 
17238: ST_TO_ADDR
// hc_name :=  ;
17239: LD_ADDR_OWVAR 26
17243: PUSH
17244: LD_STRING 
17246: ST_TO_ADDR
// un := CreateHuman ;
17247: LD_ADDR_VAR 0 2
17251: PUSH
17252: CALL_OW 44
17256: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17257: LD_VAR 0 2
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: CALL_OW 51
// tmp := tmp ^ un ;
17269: LD_ADDR_VAR 0 3
17273: PUSH
17274: LD_VAR 0 3
17278: PUSH
17279: LD_VAR 0 2
17283: ADD
17284: ST_TO_ADDR
// end ;
17285: GO 17181
17287: POP
17288: POP
// repeat wait ( 0 0$1 ) ;
17289: LD_INT 35
17291: PPUSH
17292: CALL_OW 67
// for un in tmp do
17296: LD_ADDR_VAR 0 2
17300: PUSH
17301: LD_VAR 0 3
17305: PUSH
17306: FOR_IN
17307: IFFALSE 17381
// begin if IsDead ( un ) then
17309: LD_VAR 0 2
17313: PPUSH
17314: CALL_OW 301
17318: IFFALSE 17338
// begin tmp := tmp diff un ;
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_VAR 0 3
17329: PUSH
17330: LD_VAR 0 2
17334: DIFF
17335: ST_TO_ADDR
// continue ;
17336: GO 17306
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_INT 3
17345: PUSH
17346: LD_INT 22
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 69
17364: PPUSH
17365: LD_VAR 0 2
17369: PPUSH
17370: CALL_OW 74
17374: PPUSH
17375: CALL_OW 115
// end ;
17379: GO 17306
17381: POP
17382: POP
// until not tmp ;
17383: LD_VAR 0 3
17387: NOT
17388: IFFALSE 17289
// end ;
17390: PPOPN 3
17392: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17393: LD_EXP 26
17397: PUSH
17398: LD_EXP 51
17402: AND
17403: IFFALSE 17457
17405: GO 17407
17407: DISABLE
// begin ToLua ( displayTroll(); ) ;
17408: LD_STRING displayTroll();
17410: PPUSH
17411: CALL_OW 559
// wait ( 3 3$00 ) ;
17415: LD_INT 6300
17417: PPUSH
17418: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17422: LD_STRING hideTroll();
17424: PPUSH
17425: CALL_OW 559
// wait ( 1 1$00 ) ;
17429: LD_INT 2100
17431: PPUSH
17432: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17436: LD_STRING displayTroll();
17438: PPUSH
17439: CALL_OW 559
// wait ( 1 1$00 ) ;
17443: LD_INT 2100
17445: PPUSH
17446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17450: LD_STRING hideTroll();
17452: PPUSH
17453: CALL_OW 559
// end ;
17457: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17458: LD_EXP 26
17462: PUSH
17463: LD_EXP 52
17467: AND
17468: IFFALSE 17531
17470: GO 17472
17472: DISABLE
17473: LD_INT 0
17475: PPUSH
// begin p := 0 ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// repeat game_speed := 1 ;
17484: LD_ADDR_OWVAR 65
17488: PUSH
17489: LD_INT 1
17491: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17492: LD_INT 35
17494: PPUSH
17495: CALL_OW 67
// p := p + 1 ;
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PLUS
17512: ST_TO_ADDR
// until p >= 60 ;
17513: LD_VAR 0 1
17517: PUSH
17518: LD_INT 60
17520: GREATEREQUAL
17521: IFFALSE 17484
// game_speed := 4 ;
17523: LD_ADDR_OWVAR 65
17527: PUSH
17528: LD_INT 4
17530: ST_TO_ADDR
// end ;
17531: PPOPN 1
17533: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17534: LD_EXP 26
17538: PUSH
17539: LD_EXP 53
17543: AND
17544: IFFALSE 17690
17546: GO 17548
17548: DISABLE
17549: LD_INT 0
17551: PPUSH
17552: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17553: LD_ADDR_VAR 0 1
17557: PUSH
17558: LD_INT 22
17560: PUSH
17561: LD_OWVAR 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 30
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 30
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PPUSH
17602: CALL_OW 69
17606: ST_TO_ADDR
// if not depot then
17607: LD_VAR 0 1
17611: NOT
17612: IFFALSE 17616
// exit ;
17614: GO 17690
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17616: LD_ADDR_VAR 0 2
17620: PUSH
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 1
17628: PPUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 12
17638: ARRAY
17639: PPUSH
17640: CALL_OW 274
17644: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17645: LD_VAR 0 2
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: LD_INT 0
17655: PPUSH
17656: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17660: LD_VAR 0 2
17664: PPUSH
17665: LD_INT 2
17667: PPUSH
17668: LD_INT 0
17670: PPUSH
17671: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17675: LD_VAR 0 2
17679: PPUSH
17680: LD_INT 3
17682: PPUSH
17683: LD_INT 0
17685: PPUSH
17686: CALL_OW 277
// end ;
17690: PPOPN 2
17692: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17693: LD_EXP 26
17697: PUSH
17698: LD_EXP 54
17702: AND
17703: IFFALSE 17800
17705: GO 17707
17707: DISABLE
17708: LD_INT 0
17710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17711: LD_ADDR_VAR 0 1
17715: PUSH
17716: LD_INT 22
17718: PUSH
17719: LD_OWVAR 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 3
17740: PUSH
17741: LD_INT 23
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: ST_TO_ADDR
// if not tmp then
17765: LD_VAR 0 1
17769: NOT
17770: IFFALSE 17774
// exit ;
17772: GO 17800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 1
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 12
17791: ARRAY
17792: PPUSH
17793: LD_INT 200
17795: PPUSH
17796: CALL_OW 234
// end ;
17800: PPOPN 1
17802: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17803: LD_EXP 26
17807: PUSH
17808: LD_EXP 55
17812: AND
17813: IFFALSE 17892
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 1
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 17892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 1
17873: PPUSH
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 12
17883: ARRAY
17884: PPUSH
17885: LD_INT 60
17887: PPUSH
17888: CALL_OW 234
// end ;
17892: PPOPN 1
17894: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17895: LD_EXP 26
17899: PUSH
17900: LD_EXP 56
17904: AND
17905: IFFALSE 18004
17907: GO 17909
17909: DISABLE
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
// begin enable ;
17914: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_INT 22
17922: PUSH
17923: LD_OWVAR 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 61
17934: PUSH
17935: EMPTY
17936: LIST
17937: PUSH
17938: LD_INT 33
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// if not tmp then
17958: LD_VAR 0 1
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 18004
// for i in tmp do
17967: LD_ADDR_VAR 0 2
17971: PUSH
17972: LD_VAR 0 1
17976: PUSH
17977: FOR_IN
17978: IFFALSE 18002
// if IsControledBy ( i ) then
17980: LD_VAR 0 2
17984: PPUSH
17985: CALL_OW 312
17989: IFFALSE 18000
// ComUnlink ( i ) ;
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 136
18000: GO 17977
18002: POP
18003: POP
// end ;
18004: PPOPN 2
18006: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18007: LD_EXP 26
18011: PUSH
18012: LD_EXP 57
18016: AND
18017: IFFALSE 18157
18019: GO 18021
18021: DISABLE
18022: LD_INT 0
18024: PPUSH
18025: PPUSH
// begin ToLua ( displayPowell(); ) ;
18026: LD_STRING displayPowell();
18028: PPUSH
18029: CALL_OW 559
// uc_side := 0 ;
18033: LD_ADDR_OWVAR 20
18037: PUSH
18038: LD_INT 0
18040: ST_TO_ADDR
// uc_nation := 2 ;
18041: LD_ADDR_OWVAR 21
18045: PUSH
18046: LD_INT 2
18048: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18049: LD_ADDR_OWVAR 37
18053: PUSH
18054: LD_INT 14
18056: ST_TO_ADDR
// vc_engine := engine_siberite ;
18057: LD_ADDR_OWVAR 39
18061: PUSH
18062: LD_INT 3
18064: ST_TO_ADDR
// vc_control := control_apeman ;
18065: LD_ADDR_OWVAR 38
18069: PUSH
18070: LD_INT 5
18072: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18073: LD_ADDR_OWVAR 40
18077: PUSH
18078: LD_INT 29
18080: ST_TO_ADDR
// un := CreateVehicle ;
18081: LD_ADDR_VAR 0 2
18085: PUSH
18086: CALL_OW 45
18090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_INT 1
18098: PPUSH
18099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18103: LD_INT 35
18105: PPUSH
18106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18110: LD_VAR 0 2
18114: PPUSH
18115: LD_INT 22
18117: PUSH
18118: LD_OWVAR 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: PPUSH
18132: LD_VAR 0 2
18136: PPUSH
18137: CALL_OW 74
18141: PPUSH
18142: CALL_OW 115
// until IsDead ( un ) ;
18146: LD_VAR 0 2
18150: PPUSH
18151: CALL_OW 301
18155: IFFALSE 18103
// end ;
18157: PPOPN 2
18159: END
// every 0 0$1 trigger StreamModeActive and sStu do
18160: LD_EXP 26
18164: PUSH
18165: LD_EXP 65
18169: AND
18170: IFFALSE 18186
18172: GO 18174
18174: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18175: LD_STRING displayStucuk();
18177: PPUSH
18178: CALL_OW 559
// ResetFog ;
18182: CALL_OW 335
// end ;
18186: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18187: LD_EXP 26
18191: PUSH
18192: LD_EXP 58
18196: AND
18197: IFFALSE 18338
18199: GO 18201
18201: DISABLE
18202: LD_INT 0
18204: PPUSH
18205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18206: LD_ADDR_VAR 0 2
18210: PUSH
18211: LD_INT 22
18213: PUSH
18214: LD_OWVAR 2
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 21
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PPUSH
18237: CALL_OW 69
18241: ST_TO_ADDR
// if not tmp then
18242: LD_VAR 0 2
18246: NOT
18247: IFFALSE 18251
// exit ;
18249: GO 18338
// un := tmp [ rand ( 1 , tmp ) ] ;
18251: LD_ADDR_VAR 0 1
18255: PUSH
18256: LD_VAR 0 2
18260: PUSH
18261: LD_INT 1
18263: PPUSH
18264: LD_VAR 0 2
18268: PPUSH
18269: CALL_OW 12
18273: ARRAY
18274: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_INT 0
18282: PPUSH
18283: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_OWVAR 3
18296: PUSH
18297: LD_VAR 0 1
18301: DIFF
18302: PPUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 74
18312: PPUSH
18313: CALL_OW 115
// wait ( 0 0$20 ) ;
18317: LD_INT 700
18319: PPUSH
18320: CALL_OW 67
// SetSide ( un , your_side ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_OWVAR 2
18333: PPUSH
18334: CALL_OW 235
// end ;
18338: PPOPN 2
18340: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18341: LD_EXP 26
18345: PUSH
18346: LD_EXP 59
18350: AND
18351: IFFALSE 18457
18353: GO 18355
18355: DISABLE
18356: LD_INT 0
18358: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18359: LD_ADDR_VAR 0 1
18363: PUSH
18364: LD_INT 22
18366: PUSH
18367: LD_OWVAR 2
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 2
18378: PUSH
18379: LD_INT 30
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 30
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: ST_TO_ADDR
// if not depot then
18413: LD_VAR 0 1
18417: NOT
18418: IFFALSE 18422
// exit ;
18420: GO 18457
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18422: LD_VAR 0 1
18426: PUSH
18427: LD_INT 1
18429: ARRAY
18430: PPUSH
18431: CALL_OW 250
18435: PPUSH
18436: LD_VAR 0 1
18440: PUSH
18441: LD_INT 1
18443: ARRAY
18444: PPUSH
18445: CALL_OW 251
18449: PPUSH
18450: LD_INT 70
18452: PPUSH
18453: CALL_OW 495
// end ;
18457: PPOPN 1
18459: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18460: LD_EXP 26
18464: PUSH
18465: LD_EXP 60
18469: AND
18470: IFFALSE 18681
18472: GO 18474
18474: DISABLE
18475: LD_INT 0
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18482: LD_ADDR_VAR 0 5
18486: PUSH
18487: LD_INT 22
18489: PUSH
18490: LD_OWVAR 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 21
18501: PUSH
18502: LD_INT 1
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 69
18517: ST_TO_ADDR
// if not tmp then
18518: LD_VAR 0 5
18522: NOT
18523: IFFALSE 18527
// exit ;
18525: GO 18681
// for i in tmp do
18527: LD_ADDR_VAR 0 1
18531: PUSH
18532: LD_VAR 0 5
18536: PUSH
18537: FOR_IN
18538: IFFALSE 18679
// begin d := rand ( 0 , 5 ) ;
18540: LD_ADDR_VAR 0 4
18544: PUSH
18545: LD_INT 0
18547: PPUSH
18548: LD_INT 5
18550: PPUSH
18551: CALL_OW 12
18555: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18556: LD_ADDR_VAR 0 2
18560: PUSH
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 250
18570: PPUSH
18571: LD_VAR 0 4
18575: PPUSH
18576: LD_INT 3
18578: PPUSH
18579: LD_INT 12
18581: PPUSH
18582: CALL_OW 12
18586: PPUSH
18587: CALL_OW 272
18591: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18592: LD_ADDR_VAR 0 3
18596: PUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 251
18606: PPUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: LD_INT 3
18614: PPUSH
18615: LD_INT 12
18617: PPUSH
18618: CALL_OW 12
18622: PPUSH
18623: CALL_OW 273
18627: ST_TO_ADDR
// if ValidHex ( x , y ) then
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_VAR 0 3
18637: PPUSH
18638: CALL_OW 488
18642: IFFALSE 18677
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18644: LD_VAR 0 1
18648: PPUSH
18649: LD_VAR 0 2
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 3
18661: PPUSH
18662: LD_INT 6
18664: PPUSH
18665: CALL_OW 12
18669: PPUSH
18670: LD_INT 1
18672: PPUSH
18673: CALL_OW 483
// end ;
18677: GO 18537
18679: POP
18680: POP
// end ;
18681: PPOPN 5
18683: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18684: LD_EXP 26
18688: PUSH
18689: LD_EXP 61
18693: AND
18694: IFFALSE 18788
18696: GO 18698
18698: DISABLE
18699: LD_INT 0
18701: PPUSH
18702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18703: LD_ADDR_VAR 0 2
18707: PUSH
18708: LD_INT 22
18710: PUSH
18711: LD_OWVAR 2
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 32
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 21
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: PPUSH
18745: CALL_OW 69
18749: ST_TO_ADDR
// if not tmp then
18750: LD_VAR 0 2
18754: NOT
18755: IFFALSE 18759
// exit ;
18757: GO 18788
// for i in tmp do
18759: LD_ADDR_VAR 0 1
18763: PUSH
18764: LD_VAR 0 2
18768: PUSH
18769: FOR_IN
18770: IFFALSE 18786
// SetFuel ( i , 0 ) ;
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_INT 0
18779: PPUSH
18780: CALL_OW 240
18784: GO 18769
18786: POP
18787: POP
// end ;
18788: PPOPN 2
18790: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18791: LD_EXP 26
18795: PUSH
18796: LD_EXP 62
18800: AND
18801: IFFALSE 18867
18803: GO 18805
18805: DISABLE
18806: LD_INT 0
18808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18809: LD_ADDR_VAR 0 1
18813: PUSH
18814: LD_INT 22
18816: PUSH
18817: LD_OWVAR 2
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 30
18828: PUSH
18829: LD_INT 29
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PPUSH
18840: CALL_OW 69
18844: ST_TO_ADDR
// if not tmp then
18845: LD_VAR 0 1
18849: NOT
18850: IFFALSE 18854
// exit ;
18852: GO 18867
// DestroyUnit ( tmp [ 1 ] ) ;
18854: LD_VAR 0 1
18858: PUSH
18859: LD_INT 1
18861: ARRAY
18862: PPUSH
18863: CALL_OW 65
// end ;
18867: PPOPN 1
18869: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18870: LD_EXP 26
18874: PUSH
18875: LD_EXP 64
18879: AND
18880: IFFALSE 19009
18882: GO 18884
18884: DISABLE
18885: LD_INT 0
18887: PPUSH
// begin uc_side := 0 ;
18888: LD_ADDR_OWVAR 20
18892: PUSH
18893: LD_INT 0
18895: ST_TO_ADDR
// uc_nation := nation_arabian ;
18896: LD_ADDR_OWVAR 21
18900: PUSH
18901: LD_INT 2
18903: ST_TO_ADDR
// hc_gallery :=  ;
18904: LD_ADDR_OWVAR 33
18908: PUSH
18909: LD_STRING 
18911: ST_TO_ADDR
// hc_name :=  ;
18912: LD_ADDR_OWVAR 26
18916: PUSH
18917: LD_STRING 
18919: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18920: LD_INT 1
18922: PPUSH
18923: LD_INT 11
18925: PPUSH
18926: LD_INT 10
18928: PPUSH
18929: CALL_OW 380
// un := CreateHuman ;
18933: LD_ADDR_VAR 0 1
18937: PUSH
18938: CALL_OW 44
18942: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18943: LD_VAR 0 1
18947: PPUSH
18948: LD_INT 1
18950: PPUSH
18951: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18955: LD_INT 35
18957: PPUSH
18958: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18962: LD_VAR 0 1
18966: PPUSH
18967: LD_INT 22
18969: PUSH
18970: LD_OWVAR 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PPUSH
18979: CALL_OW 69
18983: PPUSH
18984: LD_VAR 0 1
18988: PPUSH
18989: CALL_OW 74
18993: PPUSH
18994: CALL_OW 115
// until IsDead ( un ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL_OW 301
19007: IFFALSE 18955
// end ;
19009: PPOPN 1
19011: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19012: LD_EXP 26
19016: PUSH
19017: LD_EXP 66
19021: AND
19022: IFFALSE 19034
19024: GO 19026
19026: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19027: LD_STRING earthquake(getX(game), 0, 32)
19029: PPUSH
19030: CALL_OW 559
19034: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19035: LD_EXP 26
19039: PUSH
19040: LD_EXP 67
19044: AND
19045: IFFALSE 19136
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
// begin enable ;
19053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19054: LD_ADDR_VAR 0 1
19058: PUSH
19059: LD_INT 22
19061: PUSH
19062: LD_OWVAR 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 21
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 33
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: PPUSH
19096: CALL_OW 69
19100: ST_TO_ADDR
// if not tmp then
19101: LD_VAR 0 1
19105: NOT
19106: IFFALSE 19110
// exit ;
19108: GO 19136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19110: LD_VAR 0 1
19114: PUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 12
19127: ARRAY
19128: PPUSH
19129: LD_INT 1
19131: PPUSH
19132: CALL_OW 234
// end ;
19136: PPOPN 1
19138: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19139: LD_EXP 26
19143: PUSH
19144: LD_EXP 68
19148: AND
19149: IFFALSE 19290
19151: GO 19153
19153: DISABLE
19154: LD_INT 0
19156: PPUSH
19157: PPUSH
19158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19159: LD_ADDR_VAR 0 3
19163: PUSH
19164: LD_INT 22
19166: PUSH
19167: LD_OWVAR 2
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 25
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PPUSH
19190: CALL_OW 69
19194: ST_TO_ADDR
// if not tmp then
19195: LD_VAR 0 3
19199: NOT
19200: IFFALSE 19204
// exit ;
19202: GO 19290
// un := tmp [ rand ( 1 , tmp ) ] ;
19204: LD_ADDR_VAR 0 2
19208: PUSH
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 1
19216: PPUSH
19217: LD_VAR 0 3
19221: PPUSH
19222: CALL_OW 12
19226: ARRAY
19227: ST_TO_ADDR
// if Crawls ( un ) then
19228: LD_VAR 0 2
19232: PPUSH
19233: CALL_OW 318
19237: IFFALSE 19248
// ComWalk ( un ) ;
19239: LD_VAR 0 2
19243: PPUSH
19244: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_INT 9
19255: PPUSH
19256: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19260: LD_INT 28
19262: PPUSH
19263: LD_OWVAR 2
19267: PPUSH
19268: LD_INT 2
19270: PPUSH
19271: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19275: LD_INT 29
19277: PPUSH
19278: LD_OWVAR 2
19282: PPUSH
19283: LD_INT 2
19285: PPUSH
19286: CALL_OW 322
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19293: LD_EXP 26
19297: PUSH
19298: LD_EXP 69
19302: AND
19303: IFFALSE 19414
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19313: LD_ADDR_VAR 0 3
19317: PUSH
19318: LD_INT 22
19320: PUSH
19321: LD_OWVAR 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 25
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PPUSH
19344: CALL_OW 69
19348: ST_TO_ADDR
// if not tmp then
19349: LD_VAR 0 3
19353: NOT
19354: IFFALSE 19358
// exit ;
19356: GO 19414
// un := tmp [ rand ( 1 , tmp ) ] ;
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 1
19370: PPUSH
19371: LD_VAR 0 3
19375: PPUSH
19376: CALL_OW 12
19380: ARRAY
19381: ST_TO_ADDR
// if Crawls ( un ) then
19382: LD_VAR 0 2
19386: PPUSH
19387: CALL_OW 318
19391: IFFALSE 19402
// ComWalk ( un ) ;
19393: LD_VAR 0 2
19397: PPUSH
19398: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19402: LD_VAR 0 2
19406: PPUSH
19407: LD_INT 8
19409: PPUSH
19410: CALL_OW 336
// end ;
19414: PPOPN 3
19416: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19417: LD_EXP 26
19421: PUSH
19422: LD_EXP 70
19426: AND
19427: IFFALSE 19571
19429: GO 19431
19431: DISABLE
19432: LD_INT 0
19434: PPUSH
19435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_INT 22
19443: PUSH
19444: LD_OWVAR 2
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 21
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 34
19468: PUSH
19469: LD_INT 12
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 34
19478: PUSH
19479: LD_INT 51
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 34
19488: PUSH
19489: LD_INT 32
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: LIST
19506: PPUSH
19507: CALL_OW 69
19511: ST_TO_ADDR
// if not tmp then
19512: LD_VAR 0 2
19516: NOT
19517: IFFALSE 19521
// exit ;
19519: GO 19571
// for i in tmp do
19521: LD_ADDR_VAR 0 1
19525: PUSH
19526: LD_VAR 0 2
19530: PUSH
19531: FOR_IN
19532: IFFALSE 19569
// if GetCargo ( i , mat_artifact ) = 0 then
19534: LD_VAR 0 1
19538: PPUSH
19539: LD_INT 4
19541: PPUSH
19542: CALL_OW 289
19546: PUSH
19547: LD_INT 0
19549: EQUAL
19550: IFFALSE 19567
// SetCargo ( i , mat_siberit , 100 ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_INT 3
19559: PPUSH
19560: LD_INT 100
19562: PPUSH
19563: CALL_OW 290
19567: GO 19531
19569: POP
19570: POP
// end ;
19571: PPOPN 2
19573: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19574: LD_EXP 26
19578: PUSH
19579: LD_EXP 71
19583: AND
19584: IFFALSE 19767
19586: GO 19588
19588: DISABLE
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_INT 22
19600: PUSH
19601: LD_OWVAR 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL_OW 69
19614: ST_TO_ADDR
// if not tmp then
19615: LD_VAR 0 2
19619: NOT
19620: IFFALSE 19624
// exit ;
19622: GO 19767
// for i := 1 to 2 do
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: DOUBLE
19630: LD_INT 1
19632: DEC
19633: ST_TO_ADDR
19634: LD_INT 2
19636: PUSH
19637: FOR_TO
19638: IFFALSE 19765
// begin uc_side := your_side ;
19640: LD_ADDR_OWVAR 20
19644: PUSH
19645: LD_OWVAR 2
19649: ST_TO_ADDR
// uc_nation := nation_american ;
19650: LD_ADDR_OWVAR 21
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// vc_chassis := us_morphling ;
19658: LD_ADDR_OWVAR 37
19662: PUSH
19663: LD_INT 5
19665: ST_TO_ADDR
// vc_engine := engine_siberite ;
19666: LD_ADDR_OWVAR 39
19670: PUSH
19671: LD_INT 3
19673: ST_TO_ADDR
// vc_control := control_computer ;
19674: LD_ADDR_OWVAR 38
19678: PUSH
19679: LD_INT 3
19681: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19682: LD_ADDR_OWVAR 40
19686: PUSH
19687: LD_INT 10
19689: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19690: LD_VAR 0 2
19694: PUSH
19695: LD_INT 1
19697: ARRAY
19698: PPUSH
19699: CALL_OW 310
19703: NOT
19704: IFFALSE 19751
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19706: CALL_OW 45
19710: PPUSH
19711: LD_VAR 0 2
19715: PUSH
19716: LD_INT 1
19718: ARRAY
19719: PPUSH
19720: CALL_OW 250
19724: PPUSH
19725: LD_VAR 0 2
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: PPUSH
19734: CALL_OW 251
19738: PPUSH
19739: LD_INT 12
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: CALL_OW 50
19749: GO 19763
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19751: CALL_OW 45
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: CALL_OW 51
// end ;
19763: GO 19637
19765: POP
19766: POP
// end ;
19767: PPOPN 2
19769: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19770: LD_EXP 26
19774: PUSH
19775: LD_EXP 72
19779: AND
19780: IFFALSE 20002
19782: GO 19784
19784: DISABLE
19785: LD_INT 0
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
19792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19793: LD_ADDR_VAR 0 6
19797: PUSH
19798: LD_INT 22
19800: PUSH
19801: LD_OWVAR 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 21
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 3
19822: PUSH
19823: LD_INT 23
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: ST_TO_ADDR
// if not tmp then
19847: LD_VAR 0 6
19851: NOT
19852: IFFALSE 19856
// exit ;
19854: GO 20002
// s1 := rand ( 1 , 4 ) ;
19856: LD_ADDR_VAR 0 2
19860: PUSH
19861: LD_INT 1
19863: PPUSH
19864: LD_INT 4
19866: PPUSH
19867: CALL_OW 12
19871: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19872: LD_ADDR_VAR 0 4
19876: PUSH
19877: LD_VAR 0 6
19881: PUSH
19882: LD_INT 1
19884: ARRAY
19885: PPUSH
19886: LD_VAR 0 2
19890: PPUSH
19891: CALL_OW 259
19895: ST_TO_ADDR
// if s1 = 1 then
19896: LD_VAR 0 2
19900: PUSH
19901: LD_INT 1
19903: EQUAL
19904: IFFALSE 19924
// s2 := rand ( 2 , 4 ) else
19906: LD_ADDR_VAR 0 3
19910: PUSH
19911: LD_INT 2
19913: PPUSH
19914: LD_INT 4
19916: PPUSH
19917: CALL_OW 12
19921: ST_TO_ADDR
19922: GO 19932
// s2 := 1 ;
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_VAR 0 6
19941: PUSH
19942: LD_INT 1
19944: ARRAY
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL_OW 259
19955: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19956: LD_VAR 0 6
19960: PUSH
19961: LD_INT 1
19963: ARRAY
19964: PPUSH
19965: LD_VAR 0 2
19969: PPUSH
19970: LD_VAR 0 5
19974: PPUSH
19975: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19979: LD_VAR 0 6
19983: PUSH
19984: LD_INT 1
19986: ARRAY
19987: PPUSH
19988: LD_VAR 0 3
19992: PPUSH
19993: LD_VAR 0 4
19997: PPUSH
19998: CALL_OW 237
// end ;
20002: PPOPN 6
20004: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20005: LD_EXP 26
20009: PUSH
20010: LD_EXP 73
20014: AND
20015: IFFALSE 20094
20017: GO 20019
20019: DISABLE
20020: LD_INT 0
20022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20023: LD_ADDR_VAR 0 1
20027: PUSH
20028: LD_INT 22
20030: PUSH
20031: LD_OWVAR 2
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 30
20042: PUSH
20043: LD_INT 3
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 69
20058: ST_TO_ADDR
// if not tmp then
20059: LD_VAR 0 1
20063: NOT
20064: IFFALSE 20068
// exit ;
20066: GO 20094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20068: LD_VAR 0 1
20072: PUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_VAR 0 1
20080: PPUSH
20081: CALL_OW 12
20085: ARRAY
20086: PPUSH
20087: LD_INT 1
20089: PPUSH
20090: CALL_OW 234
// end ;
20094: PPOPN 1
20096: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20097: LD_EXP 26
20101: PUSH
20102: LD_EXP 74
20106: AND
20107: IFFALSE 20219
20109: GO 20111
20111: DISABLE
20112: LD_INT 0
20114: PPUSH
20115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_INT 22
20123: PUSH
20124: LD_OWVAR 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 30
20138: PUSH
20139: LD_INT 27
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 30
20148: PUSH
20149: LD_INT 26
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 30
20158: PUSH
20159: LD_INT 28
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PPUSH
20176: CALL_OW 69
20180: ST_TO_ADDR
// if not tmp then
20181: LD_VAR 0 2
20185: NOT
20186: IFFALSE 20190
// exit ;
20188: GO 20219
// for i in tmp do
20190: LD_ADDR_VAR 0 1
20194: PUSH
20195: LD_VAR 0 2
20199: PUSH
20200: FOR_IN
20201: IFFALSE 20217
// SetLives ( i , 1 ) ;
20203: LD_VAR 0 1
20207: PPUSH
20208: LD_INT 1
20210: PPUSH
20211: CALL_OW 234
20215: GO 20200
20217: POP
20218: POP
// end ;
20219: PPOPN 2
20221: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20222: LD_EXP 26
20226: PUSH
20227: LD_EXP 75
20231: AND
20232: IFFALSE 20506
20234: GO 20236
20236: DISABLE
20237: LD_INT 0
20239: PPUSH
20240: PPUSH
20241: PPUSH
// begin i := rand ( 1 , 7 ) ;
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: LD_INT 1
20249: PPUSH
20250: LD_INT 7
20252: PPUSH
20253: CALL_OW 12
20257: ST_TO_ADDR
// case i of 1 :
20258: LD_VAR 0 1
20262: PUSH
20263: LD_INT 1
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20281
20271: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20272: LD_STRING earthquake(getX(game), 0, 32)
20274: PPUSH
20275: CALL_OW 559
20279: GO 20506
20281: LD_INT 2
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20303
20289: POP
// begin ToLua ( displayStucuk(); ) ;
20290: LD_STRING displayStucuk();
20292: PPUSH
20293: CALL_OW 559
// ResetFog ;
20297: CALL_OW 335
// end ; 3 :
20301: GO 20506
20303: LD_INT 3
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20415
20311: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20312: LD_ADDR_VAR 0 2
20316: PUSH
20317: LD_INT 22
20319: PUSH
20320: LD_OWVAR 2
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 25
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PPUSH
20343: CALL_OW 69
20347: ST_TO_ADDR
// if not tmp then
20348: LD_VAR 0 2
20352: NOT
20353: IFFALSE 20357
// exit ;
20355: GO 20506
// un := tmp [ rand ( 1 , tmp ) ] ;
20357: LD_ADDR_VAR 0 3
20361: PUSH
20362: LD_VAR 0 2
20366: PUSH
20367: LD_INT 1
20369: PPUSH
20370: LD_VAR 0 2
20374: PPUSH
20375: CALL_OW 12
20379: ARRAY
20380: ST_TO_ADDR
// if Crawls ( un ) then
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 318
20390: IFFALSE 20401
// ComWalk ( un ) ;
20392: LD_VAR 0 3
20396: PPUSH
20397: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_INT 8
20408: PPUSH
20409: CALL_OW 336
// end ; 4 :
20413: GO 20506
20415: LD_INT 4
20417: DOUBLE
20418: EQUAL
20419: IFTRUE 20423
20421: GO 20484
20423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20424: LD_ADDR_VAR 0 2
20428: PUSH
20429: LD_INT 22
20431: PUSH
20432: LD_OWVAR 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 30
20443: PUSH
20444: LD_INT 29
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: ST_TO_ADDR
// if not tmp then
20460: LD_VAR 0 2
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20506
// DestroyUnit ( tmp [ 1 ] ) ;
20469: LD_VAR 0 2
20473: PUSH
20474: LD_INT 1
20476: ARRAY
20477: PPUSH
20478: CALL_OW 65
// end ; 5 .. 7 :
20482: GO 20506
20484: LD_INT 5
20486: DOUBLE
20487: GREATEREQUAL
20488: IFFALSE 20496
20490: LD_INT 7
20492: DOUBLE
20493: LESSEQUAL
20494: IFTRUE 20498
20496: GO 20505
20498: POP
// StreamSibBomb ; end ;
20499: CALL 16756 0 0
20503: GO 20506
20505: POP
// end ;
20506: PPOPN 3
20508: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20509: LD_EXP 26
20513: PUSH
20514: LD_EXP 76
20518: AND
20519: IFFALSE 20675
20521: GO 20523
20523: DISABLE
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20529: LD_ADDR_VAR 0 2
20533: PUSH
20534: LD_INT 81
20536: PUSH
20537: LD_OWVAR 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 21
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 21
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 69
20582: ST_TO_ADDR
// if not tmp then
20583: LD_VAR 0 2
20587: NOT
20588: IFFALSE 20592
// exit ;
20590: GO 20675
// p := 0 ;
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20600: LD_INT 35
20602: PPUSH
20603: CALL_OW 67
// p := p + 1 ;
20607: LD_ADDR_VAR 0 3
20611: PUSH
20612: LD_VAR 0 3
20616: PUSH
20617: LD_INT 1
20619: PLUS
20620: ST_TO_ADDR
// for i in tmp do
20621: LD_ADDR_VAR 0 1
20625: PUSH
20626: LD_VAR 0 2
20630: PUSH
20631: FOR_IN
20632: IFFALSE 20663
// if GetLives ( i ) < 1000 then
20634: LD_VAR 0 1
20638: PPUSH
20639: CALL_OW 256
20643: PUSH
20644: LD_INT 1000
20646: LESS
20647: IFFALSE 20661
// SetLives ( i , 1000 ) ;
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 1000
20656: PPUSH
20657: CALL_OW 234
20661: GO 20631
20663: POP
20664: POP
// until p > 20 ;
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 20
20672: GREATER
20673: IFFALSE 20600
// end ;
20675: PPOPN 3
20677: END
// every 0 0$1 trigger StreamModeActive and sTime do
20678: LD_EXP 26
20682: PUSH
20683: LD_EXP 77
20687: AND
20688: IFFALSE 20723
20690: GO 20692
20692: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20693: LD_INT 28
20695: PPUSH
20696: LD_OWVAR 2
20700: PPUSH
20701: LD_INT 2
20703: PPUSH
20704: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20708: LD_INT 30
20710: PPUSH
20711: LD_OWVAR 2
20715: PPUSH
20716: LD_INT 2
20718: PPUSH
20719: CALL_OW 322
// end ;
20723: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20724: LD_EXP 26
20728: PUSH
20729: LD_EXP 78
20733: AND
20734: IFFALSE 20855
20736: GO 20738
20738: DISABLE
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_OWVAR 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 21
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 3
20772: PUSH
20773: LD_INT 23
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: PPUSH
20792: CALL_OW 69
20796: ST_TO_ADDR
// if not tmp then
20797: LD_VAR 0 2
20801: NOT
20802: IFFALSE 20806
// exit ;
20804: GO 20855
// for i in tmp do
20806: LD_ADDR_VAR 0 1
20810: PUSH
20811: LD_VAR 0 2
20815: PUSH
20816: FOR_IN
20817: IFFALSE 20853
// begin if Crawls ( i ) then
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 318
20828: IFFALSE 20839
// ComWalk ( i ) ;
20830: LD_VAR 0 1
20834: PPUSH
20835: CALL_OW 138
// SetClass ( i , 2 ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: LD_INT 2
20846: PPUSH
20847: CALL_OW 336
// end ;
20851: GO 20816
20853: POP
20854: POP
// end ;
20855: PPOPN 2
20857: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20858: LD_EXP 26
20862: PUSH
20863: LD_EXP 79
20867: AND
20868: IFFALSE 21149
20870: GO 20872
20872: DISABLE
20873: LD_INT 0
20875: PPUSH
20876: PPUSH
20877: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20878: LD_OWVAR 2
20882: PPUSH
20883: LD_INT 9
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: LD_INT 1
20891: PPUSH
20892: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20896: LD_INT 9
20898: PPUSH
20899: LD_OWVAR 2
20903: PPUSH
20904: CALL_OW 343
// uc_side := 9 ;
20908: LD_ADDR_OWVAR 20
20912: PUSH
20913: LD_INT 9
20915: ST_TO_ADDR
// uc_nation := 2 ;
20916: LD_ADDR_OWVAR 21
20920: PUSH
20921: LD_INT 2
20923: ST_TO_ADDR
// hc_name := Dark Warrior ;
20924: LD_ADDR_OWVAR 26
20928: PUSH
20929: LD_STRING Dark Warrior
20931: ST_TO_ADDR
// hc_gallery :=  ;
20932: LD_ADDR_OWVAR 33
20936: PUSH
20937: LD_STRING 
20939: ST_TO_ADDR
// hc_noskilllimit := true ;
20940: LD_ADDR_OWVAR 76
20944: PUSH
20945: LD_INT 1
20947: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20948: LD_ADDR_OWVAR 31
20952: PUSH
20953: LD_INT 30
20955: PUSH
20956: LD_INT 30
20958: PUSH
20959: LD_INT 30
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: ST_TO_ADDR
// un := CreateHuman ;
20971: LD_ADDR_VAR 0 3
20975: PUSH
20976: CALL_OW 44
20980: ST_TO_ADDR
// hc_noskilllimit := false ;
20981: LD_ADDR_OWVAR 76
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20989: LD_VAR 0 3
20993: PPUSH
20994: LD_INT 1
20996: PPUSH
20997: CALL_OW 51
// p := 0 ;
21001: LD_ADDR_VAR 0 2
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21009: LD_INT 35
21011: PPUSH
21012: CALL_OW 67
// p := p + 1 ;
21016: LD_ADDR_VAR 0 2
21020: PUSH
21021: LD_VAR 0 2
21025: PUSH
21026: LD_INT 1
21028: PLUS
21029: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21030: LD_VAR 0 3
21034: PPUSH
21035: CALL_OW 256
21039: PUSH
21040: LD_INT 1000
21042: LESS
21043: IFFALSE 21057
// SetLives ( un , 1000 ) ;
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_INT 1000
21052: PPUSH
21053: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21057: LD_VAR 0 3
21061: PPUSH
21062: LD_INT 81
21064: PUSH
21065: LD_OWVAR 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 91
21076: PUSH
21077: LD_VAR 0 3
21081: PUSH
21082: LD_INT 30
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: PPUSH
21099: LD_VAR 0 3
21103: PPUSH
21104: CALL_OW 74
21108: PPUSH
21109: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21113: LD_VAR 0 2
21117: PUSH
21118: LD_INT 60
21120: GREATER
21121: PUSH
21122: LD_VAR 0 3
21126: PPUSH
21127: CALL_OW 301
21131: OR
21132: IFFALSE 21009
// if un then
21134: LD_VAR 0 3
21138: IFFALSE 21149
// RemoveUnit ( un ) ;
21140: LD_VAR 0 3
21144: PPUSH
21145: CALL_OW 64
// end ;
21149: PPOPN 3
21151: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21152: LD_INT 0
21154: PPUSH
// case cmd of 301 :
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 301
21162: DOUBLE
21163: EQUAL
21164: IFTRUE 21168
21166: GO 21200
21168: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21169: LD_VAR 0 6
21173: PPUSH
21174: LD_VAR 0 7
21178: PPUSH
21179: LD_VAR 0 8
21183: PPUSH
21184: LD_VAR 0 4
21188: PPUSH
21189: LD_VAR 0 5
21193: PPUSH
21194: CALL 22401 0 5
21198: GO 21321
21200: LD_INT 302
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21245
21208: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21209: LD_VAR 0 6
21213: PPUSH
21214: LD_VAR 0 7
21218: PPUSH
21219: LD_VAR 0 8
21223: PPUSH
21224: LD_VAR 0 9
21228: PPUSH
21229: LD_VAR 0 4
21233: PPUSH
21234: LD_VAR 0 5
21238: PPUSH
21239: CALL 22492 0 6
21243: GO 21321
21245: LD_INT 303
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21290
21253: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21254: LD_VAR 0 6
21258: PPUSH
21259: LD_VAR 0 7
21263: PPUSH
21264: LD_VAR 0 8
21268: PPUSH
21269: LD_VAR 0 9
21273: PPUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: CALL 21326 0 6
21288: GO 21321
21290: LD_INT 304
21292: DOUBLE
21293: EQUAL
21294: IFTRUE 21298
21296: GO 21320
21298: POP
// hHackTeleport ( unit , x , y ) ; end ;
21299: LD_VAR 0 2
21303: PPUSH
21304: LD_VAR 0 4
21308: PPUSH
21309: LD_VAR 0 5
21313: PPUSH
21314: CALL 23085 0 3
21318: GO 21321
21320: POP
// end ;
21321: LD_VAR 0 12
21325: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21326: LD_INT 0
21328: PPUSH
21329: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21330: LD_VAR 0 1
21334: PUSH
21335: LD_INT 1
21337: LESS
21338: PUSH
21339: LD_VAR 0 1
21343: PUSH
21344: LD_INT 3
21346: GREATER
21347: OR
21348: PUSH
21349: LD_VAR 0 5
21353: PPUSH
21354: LD_VAR 0 6
21358: PPUSH
21359: CALL_OW 428
21363: OR
21364: IFFALSE 21368
// exit ;
21366: GO 22088
// uc_side := your_side ;
21368: LD_ADDR_OWVAR 20
21372: PUSH
21373: LD_OWVAR 2
21377: ST_TO_ADDR
// uc_nation := nation ;
21378: LD_ADDR_OWVAR 21
21382: PUSH
21383: LD_VAR 0 1
21387: ST_TO_ADDR
// bc_level = 1 ;
21388: LD_ADDR_OWVAR 43
21392: PUSH
21393: LD_INT 1
21395: ST_TO_ADDR
// case btype of 1 :
21396: LD_VAR 0 2
21400: PUSH
21401: LD_INT 1
21403: DOUBLE
21404: EQUAL
21405: IFTRUE 21409
21407: GO 21420
21409: POP
// bc_type := b_depot ; 2 :
21410: LD_ADDR_OWVAR 42
21414: PUSH
21415: LD_INT 0
21417: ST_TO_ADDR
21418: GO 22032
21420: LD_INT 2
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21439
21428: POP
// bc_type := b_warehouse ; 3 :
21429: LD_ADDR_OWVAR 42
21433: PUSH
21434: LD_INT 1
21436: ST_TO_ADDR
21437: GO 22032
21439: LD_INT 3
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21458
21447: POP
// bc_type := b_lab ; 4 .. 9 :
21448: LD_ADDR_OWVAR 42
21452: PUSH
21453: LD_INT 6
21455: ST_TO_ADDR
21456: GO 22032
21458: LD_INT 4
21460: DOUBLE
21461: GREATEREQUAL
21462: IFFALSE 21470
21464: LD_INT 9
21466: DOUBLE
21467: LESSEQUAL
21468: IFTRUE 21472
21470: GO 21524
21472: POP
// begin bc_type := b_lab_half ;
21473: LD_ADDR_OWVAR 42
21477: PUSH
21478: LD_INT 7
21480: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21481: LD_ADDR_OWVAR 44
21485: PUSH
21486: LD_INT 10
21488: PUSH
21489: LD_INT 11
21491: PUSH
21492: LD_INT 12
21494: PUSH
21495: LD_INT 15
21497: PUSH
21498: LD_INT 14
21500: PUSH
21501: LD_INT 13
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 3
21519: MINUS
21520: ARRAY
21521: ST_TO_ADDR
// end ; 10 .. 13 :
21522: GO 22032
21524: LD_INT 10
21526: DOUBLE
21527: GREATEREQUAL
21528: IFFALSE 21536
21530: LD_INT 13
21532: DOUBLE
21533: LESSEQUAL
21534: IFTRUE 21538
21536: GO 21615
21538: POP
// begin bc_type := b_lab_full ;
21539: LD_ADDR_OWVAR 42
21543: PUSH
21544: LD_INT 8
21546: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21547: LD_ADDR_OWVAR 44
21551: PUSH
21552: LD_INT 10
21554: PUSH
21555: LD_INT 12
21557: PUSH
21558: LD_INT 14
21560: PUSH
21561: LD_INT 13
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: LD_VAR 0 2
21574: PUSH
21575: LD_INT 9
21577: MINUS
21578: ARRAY
21579: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21580: LD_ADDR_OWVAR 45
21584: PUSH
21585: LD_INT 11
21587: PUSH
21588: LD_INT 15
21590: PUSH
21591: LD_INT 12
21593: PUSH
21594: LD_INT 15
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: PUSH
21603: LD_VAR 0 2
21607: PUSH
21608: LD_INT 9
21610: MINUS
21611: ARRAY
21612: ST_TO_ADDR
// end ; 14 :
21613: GO 22032
21615: LD_INT 14
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21634
21623: POP
// bc_type := b_workshop ; 15 :
21624: LD_ADDR_OWVAR 42
21628: PUSH
21629: LD_INT 2
21631: ST_TO_ADDR
21632: GO 22032
21634: LD_INT 15
21636: DOUBLE
21637: EQUAL
21638: IFTRUE 21642
21640: GO 21653
21642: POP
// bc_type := b_factory ; 16 :
21643: LD_ADDR_OWVAR 42
21647: PUSH
21648: LD_INT 3
21650: ST_TO_ADDR
21651: GO 22032
21653: LD_INT 16
21655: DOUBLE
21656: EQUAL
21657: IFTRUE 21661
21659: GO 21672
21661: POP
// bc_type := b_ext_gun ; 17 :
21662: LD_ADDR_OWVAR 42
21666: PUSH
21667: LD_INT 17
21669: ST_TO_ADDR
21670: GO 22032
21672: LD_INT 17
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21708
21680: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21681: LD_ADDR_OWVAR 42
21685: PUSH
21686: LD_INT 19
21688: PUSH
21689: LD_INT 23
21691: PUSH
21692: LD_INT 19
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: LD_VAR 0 1
21704: ARRAY
21705: ST_TO_ADDR
21706: GO 22032
21708: LD_INT 18
21710: DOUBLE
21711: EQUAL
21712: IFTRUE 21716
21714: GO 21727
21716: POP
// bc_type := b_ext_radar ; 19 :
21717: LD_ADDR_OWVAR 42
21721: PUSH
21722: LD_INT 20
21724: ST_TO_ADDR
21725: GO 22032
21727: LD_INT 19
21729: DOUBLE
21730: EQUAL
21731: IFTRUE 21735
21733: GO 21746
21735: POP
// bc_type := b_ext_radio ; 20 :
21736: LD_ADDR_OWVAR 42
21740: PUSH
21741: LD_INT 22
21743: ST_TO_ADDR
21744: GO 22032
21746: LD_INT 20
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21765
21754: POP
// bc_type := b_ext_siberium ; 21 :
21755: LD_ADDR_OWVAR 42
21759: PUSH
21760: LD_INT 21
21762: ST_TO_ADDR
21763: GO 22032
21765: LD_INT 21
21767: DOUBLE
21768: EQUAL
21769: IFTRUE 21773
21771: GO 21784
21773: POP
// bc_type := b_ext_computer ; 22 :
21774: LD_ADDR_OWVAR 42
21778: PUSH
21779: LD_INT 24
21781: ST_TO_ADDR
21782: GO 22032
21784: LD_INT 22
21786: DOUBLE
21787: EQUAL
21788: IFTRUE 21792
21790: GO 21803
21792: POP
// bc_type := b_ext_track ; 23 :
21793: LD_ADDR_OWVAR 42
21797: PUSH
21798: LD_INT 16
21800: ST_TO_ADDR
21801: GO 22032
21803: LD_INT 23
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21811
21809: GO 21822
21811: POP
// bc_type := b_ext_laser ; 24 :
21812: LD_ADDR_OWVAR 42
21816: PUSH
21817: LD_INT 25
21819: ST_TO_ADDR
21820: GO 22032
21822: LD_INT 24
21824: DOUBLE
21825: EQUAL
21826: IFTRUE 21830
21828: GO 21841
21830: POP
// bc_type := b_control_tower ; 25 :
21831: LD_ADDR_OWVAR 42
21835: PUSH
21836: LD_INT 36
21838: ST_TO_ADDR
21839: GO 22032
21841: LD_INT 25
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21860
21849: POP
// bc_type := b_breastwork ; 26 :
21850: LD_ADDR_OWVAR 42
21854: PUSH
21855: LD_INT 31
21857: ST_TO_ADDR
21858: GO 22032
21860: LD_INT 26
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 21879
21868: POP
// bc_type := b_bunker ; 27 :
21869: LD_ADDR_OWVAR 42
21873: PUSH
21874: LD_INT 32
21876: ST_TO_ADDR
21877: GO 22032
21879: LD_INT 27
21881: DOUBLE
21882: EQUAL
21883: IFTRUE 21887
21885: GO 21898
21887: POP
// bc_type := b_turret ; 28 :
21888: LD_ADDR_OWVAR 42
21892: PUSH
21893: LD_INT 33
21895: ST_TO_ADDR
21896: GO 22032
21898: LD_INT 28
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 21917
21906: POP
// bc_type := b_armoury ; 29 :
21907: LD_ADDR_OWVAR 42
21911: PUSH
21912: LD_INT 4
21914: ST_TO_ADDR
21915: GO 22032
21917: LD_INT 29
21919: DOUBLE
21920: EQUAL
21921: IFTRUE 21925
21923: GO 21936
21925: POP
// bc_type := b_barracks ; 30 :
21926: LD_ADDR_OWVAR 42
21930: PUSH
21931: LD_INT 5
21933: ST_TO_ADDR
21934: GO 22032
21936: LD_INT 30
21938: DOUBLE
21939: EQUAL
21940: IFTRUE 21944
21942: GO 21955
21944: POP
// bc_type := b_solar_power ; 31 :
21945: LD_ADDR_OWVAR 42
21949: PUSH
21950: LD_INT 27
21952: ST_TO_ADDR
21953: GO 22032
21955: LD_INT 31
21957: DOUBLE
21958: EQUAL
21959: IFTRUE 21963
21961: GO 21974
21963: POP
// bc_type := b_oil_power ; 32 :
21964: LD_ADDR_OWVAR 42
21968: PUSH
21969: LD_INT 26
21971: ST_TO_ADDR
21972: GO 22032
21974: LD_INT 32
21976: DOUBLE
21977: EQUAL
21978: IFTRUE 21982
21980: GO 21993
21982: POP
// bc_type := b_siberite_power ; 33 :
21983: LD_ADDR_OWVAR 42
21987: PUSH
21988: LD_INT 28
21990: ST_TO_ADDR
21991: GO 22032
21993: LD_INT 33
21995: DOUBLE
21996: EQUAL
21997: IFTRUE 22001
21999: GO 22012
22001: POP
// bc_type := b_oil_mine ; 34 :
22002: LD_ADDR_OWVAR 42
22006: PUSH
22007: LD_INT 29
22009: ST_TO_ADDR
22010: GO 22032
22012: LD_INT 34
22014: DOUBLE
22015: EQUAL
22016: IFTRUE 22020
22018: GO 22031
22020: POP
// bc_type := b_siberite_mine ; end ;
22021: LD_ADDR_OWVAR 42
22025: PUSH
22026: LD_INT 30
22028: ST_TO_ADDR
22029: GO 22032
22031: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22032: LD_ADDR_VAR 0 8
22036: PUSH
22037: LD_VAR 0 5
22041: PPUSH
22042: LD_VAR 0 6
22046: PPUSH
22047: LD_VAR 0 3
22051: PPUSH
22052: CALL_OW 47
22056: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22057: LD_OWVAR 42
22061: PUSH
22062: LD_INT 32
22064: PUSH
22065: LD_INT 33
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: IN
22072: IFFALSE 22088
// PlaceWeaponTurret ( b , weapon ) ;
22074: LD_VAR 0 8
22078: PPUSH
22079: LD_VAR 0 4
22083: PPUSH
22084: CALL_OW 431
// end ;
22088: LD_VAR 0 7
22092: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22093: LD_INT 0
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22099: LD_ADDR_VAR 0 4
22103: PUSH
22104: LD_INT 22
22106: PUSH
22107: LD_OWVAR 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 30
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PPUSH
22148: CALL_OW 69
22152: ST_TO_ADDR
// if not tmp then
22153: LD_VAR 0 4
22157: NOT
22158: IFFALSE 22162
// exit ;
22160: GO 22221
// for i in tmp do
22162: LD_ADDR_VAR 0 2
22166: PUSH
22167: LD_VAR 0 4
22171: PUSH
22172: FOR_IN
22173: IFFALSE 22219
// for j = 1 to 3 do
22175: LD_ADDR_VAR 0 3
22179: PUSH
22180: DOUBLE
22181: LD_INT 1
22183: DEC
22184: ST_TO_ADDR
22185: LD_INT 3
22187: PUSH
22188: FOR_TO
22189: IFFALSE 22215
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22191: LD_VAR 0 2
22195: PPUSH
22196: CALL_OW 274
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: LD_INT 99999
22208: PPUSH
22209: CALL_OW 277
22213: GO 22188
22215: POP
22216: POP
22217: GO 22172
22219: POP
22220: POP
// end ;
22221: LD_VAR 0 1
22225: RET
// export function hHackSetLevel10 ; var i , j ; begin
22226: LD_INT 0
22228: PPUSH
22229: PPUSH
22230: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22231: LD_ADDR_VAR 0 2
22235: PUSH
22236: LD_INT 21
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PPUSH
22246: CALL_OW 69
22250: PUSH
22251: FOR_IN
22252: IFFALSE 22304
// if IsSelected ( i ) then
22254: LD_VAR 0 2
22258: PPUSH
22259: CALL_OW 306
22263: IFFALSE 22302
// begin for j := 1 to 4 do
22265: LD_ADDR_VAR 0 3
22269: PUSH
22270: DOUBLE
22271: LD_INT 1
22273: DEC
22274: ST_TO_ADDR
22275: LD_INT 4
22277: PUSH
22278: FOR_TO
22279: IFFALSE 22300
// SetSkill ( i , j , 10 ) ;
22281: LD_VAR 0 2
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: LD_INT 10
22293: PPUSH
22294: CALL_OW 237
22298: GO 22278
22300: POP
22301: POP
// end ;
22302: GO 22251
22304: POP
22305: POP
// end ;
22306: LD_VAR 0 1
22310: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22311: LD_INT 0
22313: PPUSH
22314: PPUSH
22315: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22316: LD_ADDR_VAR 0 2
22320: PUSH
22321: LD_INT 22
22323: PUSH
22324: LD_OWVAR 2
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 21
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PPUSH
22347: CALL_OW 69
22351: PUSH
22352: FOR_IN
22353: IFFALSE 22394
// begin for j := 1 to 4 do
22355: LD_ADDR_VAR 0 3
22359: PUSH
22360: DOUBLE
22361: LD_INT 1
22363: DEC
22364: ST_TO_ADDR
22365: LD_INT 4
22367: PUSH
22368: FOR_TO
22369: IFFALSE 22390
// SetSkill ( i , j , 10 ) ;
22371: LD_VAR 0 2
22375: PPUSH
22376: LD_VAR 0 3
22380: PPUSH
22381: LD_INT 10
22383: PPUSH
22384: CALL_OW 237
22388: GO 22368
22390: POP
22391: POP
// end ;
22392: GO 22352
22394: POP
22395: POP
// end ;
22396: LD_VAR 0 1
22400: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22401: LD_INT 0
22403: PPUSH
// uc_side := your_side ;
22404: LD_ADDR_OWVAR 20
22408: PUSH
22409: LD_OWVAR 2
22413: ST_TO_ADDR
// uc_nation := nation ;
22414: LD_ADDR_OWVAR 21
22418: PUSH
22419: LD_VAR 0 1
22423: ST_TO_ADDR
// InitHc ;
22424: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22428: LD_INT 0
22430: PPUSH
22431: LD_VAR 0 2
22435: PPUSH
22436: LD_VAR 0 3
22440: PPUSH
22441: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22445: LD_VAR 0 4
22449: PPUSH
22450: LD_VAR 0 5
22454: PPUSH
22455: CALL_OW 428
22459: PUSH
22460: LD_INT 0
22462: EQUAL
22463: IFFALSE 22487
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22465: CALL_OW 44
22469: PPUSH
22470: LD_VAR 0 4
22474: PPUSH
22475: LD_VAR 0 5
22479: PPUSH
22480: LD_INT 1
22482: PPUSH
22483: CALL_OW 48
// end ;
22487: LD_VAR 0 6
22491: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22492: LD_INT 0
22494: PPUSH
22495: PPUSH
// uc_side := your_side ;
22496: LD_ADDR_OWVAR 20
22500: PUSH
22501: LD_OWVAR 2
22505: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22506: LD_VAR 0 1
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: LD_INT 5
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: IN
22533: IFFALSE 22545
// uc_nation := nation_american else
22535: LD_ADDR_OWVAR 21
22539: PUSH
22540: LD_INT 1
22542: ST_TO_ADDR
22543: GO 22588
// if chassis in [ 11 , 12 , 13 , 14 ] then
22545: LD_VAR 0 1
22549: PUSH
22550: LD_INT 11
22552: PUSH
22553: LD_INT 12
22555: PUSH
22556: LD_INT 13
22558: PUSH
22559: LD_INT 14
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: IN
22568: IFFALSE 22580
// uc_nation := nation_arabian else
22570: LD_ADDR_OWVAR 21
22574: PUSH
22575: LD_INT 2
22577: ST_TO_ADDR
22578: GO 22588
// uc_nation := nation_russian ;
22580: LD_ADDR_OWVAR 21
22584: PUSH
22585: LD_INT 3
22587: ST_TO_ADDR
// vc_chassis := chassis ;
22588: LD_ADDR_OWVAR 37
22592: PUSH
22593: LD_VAR 0 1
22597: ST_TO_ADDR
// vc_engine := engine ;
22598: LD_ADDR_OWVAR 39
22602: PUSH
22603: LD_VAR 0 2
22607: ST_TO_ADDR
// vc_control := control ;
22608: LD_ADDR_OWVAR 38
22612: PUSH
22613: LD_VAR 0 3
22617: ST_TO_ADDR
// vc_weapon := weapon ;
22618: LD_ADDR_OWVAR 40
22622: PUSH
22623: LD_VAR 0 4
22627: ST_TO_ADDR
// un := CreateVehicle ;
22628: LD_ADDR_VAR 0 8
22632: PUSH
22633: CALL_OW 45
22637: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22638: LD_VAR 0 8
22642: PPUSH
22643: LD_INT 0
22645: PPUSH
22646: LD_INT 5
22648: PPUSH
22649: CALL_OW 12
22653: PPUSH
22654: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22658: LD_VAR 0 8
22662: PPUSH
22663: LD_VAR 0 5
22667: PPUSH
22668: LD_VAR 0 6
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 48
// end ;
22680: LD_VAR 0 7
22684: RET
// export hInvincible ; every 1 do
22685: GO 22687
22687: DISABLE
// hInvincible := [ ] ;
22688: LD_ADDR_EXP 80
22692: PUSH
22693: EMPTY
22694: ST_TO_ADDR
22695: END
// every 10 do var i ;
22696: GO 22698
22698: DISABLE
22699: LD_INT 0
22701: PPUSH
// begin enable ;
22702: ENABLE
// if not hInvincible then
22703: LD_EXP 80
22707: NOT
22708: IFFALSE 22712
// exit ;
22710: GO 22756
// for i in hInvincible do
22712: LD_ADDR_VAR 0 1
22716: PUSH
22717: LD_EXP 80
22721: PUSH
22722: FOR_IN
22723: IFFALSE 22754
// if GetLives ( i ) < 1000 then
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 256
22734: PUSH
22735: LD_INT 1000
22737: LESS
22738: IFFALSE 22752
// SetLives ( i , 1000 ) ;
22740: LD_VAR 0 1
22744: PPUSH
22745: LD_INT 1000
22747: PPUSH
22748: CALL_OW 234
22752: GO 22722
22754: POP
22755: POP
// end ;
22756: PPOPN 1
22758: END
// export function hHackInvincible ; var i ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22763: LD_ADDR_VAR 0 2
22767: PUSH
22768: LD_INT 2
22770: PUSH
22771: LD_INT 21
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 21
22783: PUSH
22784: LD_INT 2
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 69
22800: PUSH
22801: FOR_IN
22802: IFFALSE 22863
// if IsSelected ( i ) then
22804: LD_VAR 0 2
22808: PPUSH
22809: CALL_OW 306
22813: IFFALSE 22861
// begin if i in hInvincible then
22815: LD_VAR 0 2
22819: PUSH
22820: LD_EXP 80
22824: IN
22825: IFFALSE 22845
// hInvincible := hInvincible diff i else
22827: LD_ADDR_EXP 80
22831: PUSH
22832: LD_EXP 80
22836: PUSH
22837: LD_VAR 0 2
22841: DIFF
22842: ST_TO_ADDR
22843: GO 22861
// hInvincible := hInvincible union i ;
22845: LD_ADDR_EXP 80
22849: PUSH
22850: LD_EXP 80
22854: PUSH
22855: LD_VAR 0 2
22859: UNION
22860: ST_TO_ADDR
// end ;
22861: GO 22801
22863: POP
22864: POP
// end ;
22865: LD_VAR 0 1
22869: RET
// export function hHackInvisible ; var i , j ; begin
22870: LD_INT 0
22872: PPUSH
22873: PPUSH
22874: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22875: LD_ADDR_VAR 0 2
22879: PUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22920
// if IsSelected ( i ) then
22898: LD_VAR 0 2
22902: PPUSH
22903: CALL_OW 306
22907: IFFALSE 22918
// ComForceInvisible ( i ) ;
22909: LD_VAR 0 2
22913: PPUSH
22914: CALL_OW 496
22918: GO 22895
22920: POP
22921: POP
// end ;
22922: LD_VAR 0 1
22926: RET
// export function hHackChangeYourSide ; begin
22927: LD_INT 0
22929: PPUSH
// if your_side = 8 then
22930: LD_OWVAR 2
22934: PUSH
22935: LD_INT 8
22937: EQUAL
22938: IFFALSE 22950
// your_side := 0 else
22940: LD_ADDR_OWVAR 2
22944: PUSH
22945: LD_INT 0
22947: ST_TO_ADDR
22948: GO 22964
// your_side := your_side + 1 ;
22950: LD_ADDR_OWVAR 2
22954: PUSH
22955: LD_OWVAR 2
22959: PUSH
22960: LD_INT 1
22962: PLUS
22963: ST_TO_ADDR
// end ;
22964: LD_VAR 0 1
22968: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22969: LD_INT 0
22971: PPUSH
22972: PPUSH
22973: PPUSH
// for i in all_units do
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_OWVAR 3
22983: PUSH
22984: FOR_IN
22985: IFFALSE 23063
// if IsSelected ( i ) then
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 306
22996: IFFALSE 23061
// begin j := GetSide ( i ) ;
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: CALL_OW 255
23012: ST_TO_ADDR
// if j = 8 then
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 8
23020: EQUAL
23021: IFFALSE 23033
// j := 0 else
23023: LD_ADDR_VAR 0 3
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
23031: GO 23047
// j := j + 1 ;
23033: LD_ADDR_VAR 0 3
23037: PUSH
23038: LD_VAR 0 3
23042: PUSH
23043: LD_INT 1
23045: PLUS
23046: ST_TO_ADDR
// SetSide ( i , j ) ;
23047: LD_VAR 0 2
23051: PPUSH
23052: LD_VAR 0 3
23056: PPUSH
23057: CALL_OW 235
// end ;
23061: GO 22984
23063: POP
23064: POP
// end ;
23065: LD_VAR 0 1
23069: RET
// export function hHackFog ; begin
23070: LD_INT 0
23072: PPUSH
// FogOff ( true ) ;
23073: LD_INT 1
23075: PPUSH
23076: CALL_OW 344
// end ;
23080: LD_VAR 0 1
23084: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23085: LD_INT 0
23087: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23088: LD_VAR 0 1
23092: PPUSH
23093: LD_VAR 0 2
23097: PPUSH
23098: LD_VAR 0 3
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: LD_INT 1
23108: PPUSH
23109: CALL_OW 483
// CenterOnXY ( x , y ) ;
23113: LD_VAR 0 2
23117: PPUSH
23118: LD_VAR 0 3
23122: PPUSH
23123: CALL_OW 84
// end ; end_of_file end_of_file
23127: LD_VAR 0 4
23131: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
23137: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 264
23147: PUSH
23148: LD_EXP 97
23152: EQUAL
23153: IFFALSE 23225
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23155: LD_INT 68
23157: PPUSH
23158: LD_VAR 0 1
23162: PPUSH
23163: CALL_OW 255
23167: PPUSH
23168: CALL_OW 321
23172: PUSH
23173: LD_INT 2
23175: EQUAL
23176: IFFALSE 23188
// eff := 70 else
23178: LD_ADDR_VAR 0 4
23182: PUSH
23183: LD_INT 70
23185: ST_TO_ADDR
23186: GO 23196
// eff := 30 ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_INT 30
23195: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23196: LD_VAR 0 1
23200: PPUSH
23201: CALL_OW 250
23205: PPUSH
23206: LD_VAR 0 1
23210: PPUSH
23211: CALL_OW 251
23215: PPUSH
23216: LD_VAR 0 4
23220: PPUSH
23221: CALL_OW 495
// end ; end ;
23225: LD_VAR 0 2
23229: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23230: LD_INT 0
23232: PPUSH
// end ;
23233: LD_VAR 0 4
23237: RET
// export function SOS_Command ( cmd ) ; begin
23238: LD_INT 0
23240: PPUSH
// end ;
23241: LD_VAR 0 2
23245: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23246: LD_INT 0
23248: PPUSH
// if cmd = 121 then
23249: LD_VAR 0 1
23253: PUSH
23254: LD_INT 121
23256: EQUAL
23257: IFFALSE 23259
// end ;
23259: LD_VAR 0 6
23263: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23264: LD_INT 0
23266: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23267: LD_VAR 0 1
23271: PUSH
23272: LD_INT 250
23274: EQUAL
23275: PUSH
23276: LD_VAR 0 2
23280: PPUSH
23281: CALL_OW 264
23285: PUSH
23286: LD_EXP 100
23290: EQUAL
23291: AND
23292: IFFALSE 23313
// MinerPlaceMine ( unit , x , y ) ;
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_VAR 0 4
23303: PPUSH
23304: LD_VAR 0 5
23308: PPUSH
23309: CALL 25662 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23313: LD_VAR 0 1
23317: PUSH
23318: LD_INT 251
23320: EQUAL
23321: PUSH
23322: LD_VAR 0 2
23326: PPUSH
23327: CALL_OW 264
23331: PUSH
23332: LD_EXP 100
23336: EQUAL
23337: AND
23338: IFFALSE 23359
// MinerDetonateMine ( unit , x , y ) ;
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_VAR 0 4
23349: PPUSH
23350: LD_VAR 0 5
23354: PPUSH
23355: CALL 25939 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23359: LD_VAR 0 1
23363: PUSH
23364: LD_INT 252
23366: EQUAL
23367: PUSH
23368: LD_VAR 0 2
23372: PPUSH
23373: CALL_OW 264
23377: PUSH
23378: LD_EXP 100
23382: EQUAL
23383: AND
23384: IFFALSE 23405
// MinerCreateMinefield ( unit , x , y ) ;
23386: LD_VAR 0 2
23390: PPUSH
23391: LD_VAR 0 4
23395: PPUSH
23396: LD_VAR 0 5
23400: PPUSH
23401: CALL 26356 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23405: LD_VAR 0 1
23409: PUSH
23410: LD_INT 253
23412: EQUAL
23413: PUSH
23414: LD_VAR 0 2
23418: PPUSH
23419: CALL_OW 257
23423: PUSH
23424: LD_INT 5
23426: EQUAL
23427: AND
23428: IFFALSE 23449
// ComBinocular ( unit , x , y ) ;
23430: LD_VAR 0 2
23434: PPUSH
23435: LD_VAR 0 4
23439: PPUSH
23440: LD_VAR 0 5
23444: PPUSH
23445: CALL 26727 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23449: LD_VAR 0 1
23453: PUSH
23454: LD_INT 254
23456: EQUAL
23457: PUSH
23458: LD_VAR 0 2
23462: PPUSH
23463: CALL_OW 264
23467: PUSH
23468: LD_EXP 95
23472: EQUAL
23473: AND
23474: PUSH
23475: LD_VAR 0 3
23479: PPUSH
23480: CALL_OW 263
23484: PUSH
23485: LD_INT 3
23487: EQUAL
23488: AND
23489: IFFALSE 23505
// HackDestroyVehicle ( unit , selectedUnit ) ;
23491: LD_VAR 0 2
23495: PPUSH
23496: LD_VAR 0 3
23500: PPUSH
23501: CALL 25022 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23505: LD_VAR 0 1
23509: PUSH
23510: LD_INT 255
23512: EQUAL
23513: PUSH
23514: LD_VAR 0 2
23518: PPUSH
23519: CALL_OW 264
23523: PUSH
23524: LD_INT 14
23526: PUSH
23527: LD_INT 53
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: IN
23534: AND
23535: PUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: CALL_OW 488
23550: AND
23551: IFFALSE 23575
// CutTreeXYR ( unit , x , y , 12 ) ;
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_VAR 0 4
23562: PPUSH
23563: LD_VAR 0 5
23567: PPUSH
23568: LD_INT 12
23570: PPUSH
23571: CALL 23588 0 4
// end ;
23575: LD_VAR 0 6
23579: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23580: LD_INT 0
23582: PPUSH
// end ;
23583: LD_VAR 0 4
23587: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23588: LD_INT 0
23590: PPUSH
23591: PPUSH
23592: PPUSH
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23599: LD_VAR 0 1
23603: NOT
23604: PUSH
23605: LD_VAR 0 2
23609: PPUSH
23610: LD_VAR 0 3
23614: PPUSH
23615: CALL_OW 488
23619: NOT
23620: OR
23621: PUSH
23622: LD_VAR 0 4
23626: NOT
23627: OR
23628: IFFALSE 23632
// exit ;
23630: GO 23972
// list := [ ] ;
23632: LD_ADDR_VAR 0 13
23636: PUSH
23637: EMPTY
23638: ST_TO_ADDR
// if x - r < 0 then
23639: LD_VAR 0 2
23643: PUSH
23644: LD_VAR 0 4
23648: MINUS
23649: PUSH
23650: LD_INT 0
23652: LESS
23653: IFFALSE 23665
// min_x := 0 else
23655: LD_ADDR_VAR 0 7
23659: PUSH
23660: LD_INT 0
23662: ST_TO_ADDR
23663: GO 23681
// min_x := x - r ;
23665: LD_ADDR_VAR 0 7
23669: PUSH
23670: LD_VAR 0 2
23674: PUSH
23675: LD_VAR 0 4
23679: MINUS
23680: ST_TO_ADDR
// if y - r < 0 then
23681: LD_VAR 0 3
23685: PUSH
23686: LD_VAR 0 4
23690: MINUS
23691: PUSH
23692: LD_INT 0
23694: LESS
23695: IFFALSE 23707
// min_y := 0 else
23697: LD_ADDR_VAR 0 8
23701: PUSH
23702: LD_INT 0
23704: ST_TO_ADDR
23705: GO 23723
// min_y := y - r ;
23707: LD_ADDR_VAR 0 8
23711: PUSH
23712: LD_VAR 0 3
23716: PUSH
23717: LD_VAR 0 4
23721: MINUS
23722: ST_TO_ADDR
// max_x := x + r ;
23723: LD_ADDR_VAR 0 9
23727: PUSH
23728: LD_VAR 0 2
23732: PUSH
23733: LD_VAR 0 4
23737: PLUS
23738: ST_TO_ADDR
// max_y := y + r ;
23739: LD_ADDR_VAR 0 10
23743: PUSH
23744: LD_VAR 0 3
23748: PUSH
23749: LD_VAR 0 4
23753: PLUS
23754: ST_TO_ADDR
// for _x = min_x to max_x do
23755: LD_ADDR_VAR 0 11
23759: PUSH
23760: DOUBLE
23761: LD_VAR 0 7
23765: DEC
23766: ST_TO_ADDR
23767: LD_VAR 0 9
23771: PUSH
23772: FOR_TO
23773: IFFALSE 23890
// for _y = min_y to max_y do
23775: LD_ADDR_VAR 0 12
23779: PUSH
23780: DOUBLE
23781: LD_VAR 0 8
23785: DEC
23786: ST_TO_ADDR
23787: LD_VAR 0 10
23791: PUSH
23792: FOR_TO
23793: IFFALSE 23886
// begin if not ValidHex ( _x , _y ) then
23795: LD_VAR 0 11
23799: PPUSH
23800: LD_VAR 0 12
23804: PPUSH
23805: CALL_OW 488
23809: NOT
23810: IFFALSE 23814
// continue ;
23812: GO 23792
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23814: LD_VAR 0 11
23818: PPUSH
23819: LD_VAR 0 12
23823: PPUSH
23824: CALL_OW 351
23828: PUSH
23829: LD_VAR 0 11
23833: PPUSH
23834: LD_VAR 0 12
23838: PPUSH
23839: CALL_OW 554
23843: AND
23844: IFFALSE 23884
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23846: LD_ADDR_VAR 0 13
23850: PUSH
23851: LD_VAR 0 13
23855: PPUSH
23856: LD_VAR 0 13
23860: PUSH
23861: LD_INT 1
23863: PLUS
23864: PPUSH
23865: LD_VAR 0 11
23869: PUSH
23870: LD_VAR 0 12
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PPUSH
23879: CALL_OW 2
23883: ST_TO_ADDR
// end ;
23884: GO 23792
23886: POP
23887: POP
23888: GO 23772
23890: POP
23891: POP
// if not list then
23892: LD_VAR 0 13
23896: NOT
23897: IFFALSE 23901
// exit ;
23899: GO 23972
// for i in list do
23901: LD_ADDR_VAR 0 6
23905: PUSH
23906: LD_VAR 0 13
23910: PUSH
23911: FOR_IN
23912: IFFALSE 23970
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23914: LD_VAR 0 1
23918: PPUSH
23919: LD_STRING M
23921: PUSH
23922: LD_VAR 0 6
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PUSH
23931: LD_VAR 0 6
23935: PUSH
23936: LD_INT 2
23938: ARRAY
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: PPUSH
23964: CALL_OW 447
23968: GO 23911
23970: POP
23971: POP
// end ;
23972: LD_VAR 0 5
23976: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23977: LD_EXP 83
23981: NOT
23982: IFFALSE 24032
23984: GO 23986
23986: DISABLE
// begin initHack := true ;
23987: LD_ADDR_EXP 83
23991: PUSH
23992: LD_INT 1
23994: ST_TO_ADDR
// hackTanks := [ ] ;
23995: LD_ADDR_EXP 84
23999: PUSH
24000: EMPTY
24001: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24002: LD_ADDR_EXP 85
24006: PUSH
24007: EMPTY
24008: ST_TO_ADDR
// hackLimit := 3 ;
24009: LD_ADDR_EXP 86
24013: PUSH
24014: LD_INT 3
24016: ST_TO_ADDR
// hackDist := 12 ;
24017: LD_ADDR_EXP 87
24021: PUSH
24022: LD_INT 12
24024: ST_TO_ADDR
// hackCounter := [ ] ;
24025: LD_ADDR_EXP 88
24029: PUSH
24030: EMPTY
24031: ST_TO_ADDR
// end ;
24032: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24033: LD_EXP 83
24037: PUSH
24038: LD_INT 34
24040: PUSH
24041: LD_EXP 95
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PPUSH
24050: CALL_OW 69
24054: AND
24055: IFFALSE 24310
24057: GO 24059
24059: DISABLE
24060: LD_INT 0
24062: PPUSH
24063: PPUSH
// begin enable ;
24064: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24065: LD_ADDR_VAR 0 1
24069: PUSH
24070: LD_INT 34
24072: PUSH
24073: LD_EXP 95
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 69
24086: PUSH
24087: FOR_IN
24088: IFFALSE 24308
// begin if not i in hackTanks then
24090: LD_VAR 0 1
24094: PUSH
24095: LD_EXP 84
24099: IN
24100: NOT
24101: IFFALSE 24184
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24103: LD_ADDR_EXP 84
24107: PUSH
24108: LD_EXP 84
24112: PPUSH
24113: LD_EXP 84
24117: PUSH
24118: LD_INT 1
24120: PLUS
24121: PPUSH
24122: LD_VAR 0 1
24126: PPUSH
24127: CALL_OW 1
24131: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24132: LD_ADDR_EXP 85
24136: PUSH
24137: LD_EXP 85
24141: PPUSH
24142: LD_EXP 85
24146: PUSH
24147: LD_INT 1
24149: PLUS
24150: PPUSH
24151: EMPTY
24152: PPUSH
24153: CALL_OW 1
24157: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24158: LD_ADDR_EXP 88
24162: PUSH
24163: LD_EXP 88
24167: PPUSH
24168: LD_EXP 88
24172: PUSH
24173: LD_INT 1
24175: PLUS
24176: PPUSH
24177: EMPTY
24178: PPUSH
24179: CALL_OW 1
24183: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL_OW 302
24193: NOT
24194: IFFALSE 24207
// begin HackUnlinkAll ( i ) ;
24196: LD_VAR 0 1
24200: PPUSH
24201: CALL 24313 0 1
// continue ;
24205: GO 24087
// end ; HackCheckCapturedStatus ( i ) ;
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL 24756 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24216: LD_ADDR_VAR 0 2
24220: PUSH
24221: LD_INT 81
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 255
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 33
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 91
24250: PUSH
24251: LD_VAR 0 1
24255: PUSH
24256: LD_EXP 87
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 50
24268: PUSH
24269: EMPTY
24270: LIST
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: PPUSH
24278: CALL_OW 69
24282: ST_TO_ADDR
// if not tmp then
24283: LD_VAR 0 2
24287: NOT
24288: IFFALSE 24292
// continue ;
24290: GO 24087
// HackLink ( i , tmp ) ;
24292: LD_VAR 0 1
24296: PPUSH
24297: LD_VAR 0 2
24301: PPUSH
24302: CALL 24449 0 2
// end ;
24306: GO 24087
24308: POP
24309: POP
// end ;
24310: PPOPN 2
24312: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24313: LD_INT 0
24315: PPUSH
24316: PPUSH
24317: PPUSH
// if not hack in hackTanks then
24318: LD_VAR 0 1
24322: PUSH
24323: LD_EXP 84
24327: IN
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24444
// index := GetElementIndex ( hackTanks , hack ) ;
24333: LD_ADDR_VAR 0 4
24337: PUSH
24338: LD_EXP 84
24342: PPUSH
24343: LD_VAR 0 1
24347: PPUSH
24348: CALL 32086 0 2
24352: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24353: LD_EXP 85
24357: PUSH
24358: LD_VAR 0 4
24362: ARRAY
24363: IFFALSE 24444
// begin for i in hackTanksCaptured [ index ] do
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: LD_EXP 85
24374: PUSH
24375: LD_VAR 0 4
24379: ARRAY
24380: PUSH
24381: FOR_IN
24382: IFFALSE 24408
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24384: LD_VAR 0 3
24388: PUSH
24389: LD_INT 1
24391: ARRAY
24392: PPUSH
24393: LD_VAR 0 3
24397: PUSH
24398: LD_INT 2
24400: ARRAY
24401: PPUSH
24402: CALL_OW 235
24406: GO 24381
24408: POP
24409: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24410: LD_ADDR_EXP 85
24414: PUSH
24415: LD_EXP 85
24419: PPUSH
24420: LD_VAR 0 4
24424: PPUSH
24425: EMPTY
24426: PPUSH
24427: CALL_OW 1
24431: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24432: LD_VAR 0 1
24436: PPUSH
24437: LD_INT 0
24439: PPUSH
24440: CALL_OW 505
// end ; end ;
24444: LD_VAR 0 2
24448: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24449: LD_INT 0
24451: PPUSH
24452: PPUSH
24453: PPUSH
// if not hack in hackTanks or not vehicles then
24454: LD_VAR 0 1
24458: PUSH
24459: LD_EXP 84
24463: IN
24464: NOT
24465: PUSH
24466: LD_VAR 0 2
24470: NOT
24471: OR
24472: IFFALSE 24476
// exit ;
24474: GO 24751
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24476: LD_ADDR_VAR 0 2
24480: PUSH
24481: LD_VAR 0 1
24485: PPUSH
24486: LD_VAR 0 2
24490: PPUSH
24491: LD_INT 1
24493: PPUSH
24494: LD_INT 1
24496: PPUSH
24497: CALL 32736 0 4
24501: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24502: LD_ADDR_VAR 0 5
24506: PUSH
24507: LD_EXP 84
24511: PPUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL 32086 0 2
24521: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24522: LD_EXP 85
24526: PUSH
24527: LD_VAR 0 5
24531: ARRAY
24532: PUSH
24533: LD_EXP 86
24537: LESS
24538: IFFALSE 24727
// begin for i := 1 to vehicles do
24540: LD_ADDR_VAR 0 4
24544: PUSH
24545: DOUBLE
24546: LD_INT 1
24548: DEC
24549: ST_TO_ADDR
24550: LD_VAR 0 2
24554: PUSH
24555: FOR_TO
24556: IFFALSE 24725
// begin if hackTanksCaptured [ index ] = hackLimit then
24558: LD_EXP 85
24562: PUSH
24563: LD_VAR 0 5
24567: ARRAY
24568: PUSH
24569: LD_EXP 86
24573: EQUAL
24574: IFFALSE 24578
// break ;
24576: GO 24725
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24578: LD_ADDR_EXP 88
24582: PUSH
24583: LD_EXP 88
24587: PPUSH
24588: LD_VAR 0 5
24592: PPUSH
24593: LD_EXP 88
24597: PUSH
24598: LD_VAR 0 5
24602: ARRAY
24603: PUSH
24604: LD_INT 1
24606: PLUS
24607: PPUSH
24608: CALL_OW 1
24612: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24613: LD_ADDR_EXP 85
24617: PUSH
24618: LD_EXP 85
24622: PPUSH
24623: LD_VAR 0 5
24627: PUSH
24628: LD_EXP 85
24632: PUSH
24633: LD_VAR 0 5
24637: ARRAY
24638: PUSH
24639: LD_INT 1
24641: PLUS
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PPUSH
24647: LD_VAR 0 2
24651: PUSH
24652: LD_VAR 0 4
24656: ARRAY
24657: PUSH
24658: LD_VAR 0 2
24662: PUSH
24663: LD_VAR 0 4
24667: ARRAY
24668: PPUSH
24669: CALL_OW 255
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PPUSH
24678: CALL 32301 0 3
24682: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24683: LD_VAR 0 2
24687: PUSH
24688: LD_VAR 0 4
24692: ARRAY
24693: PPUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL_OW 255
24703: PPUSH
24704: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24708: LD_VAR 0 2
24712: PUSH
24713: LD_VAR 0 4
24717: ARRAY
24718: PPUSH
24719: CALL_OW 141
// end ;
24723: GO 24555
24725: POP
24726: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24727: LD_VAR 0 1
24731: PPUSH
24732: LD_EXP 85
24736: PUSH
24737: LD_VAR 0 5
24741: ARRAY
24742: PUSH
24743: LD_INT 0
24745: PLUS
24746: PPUSH
24747: CALL_OW 505
// end ;
24751: LD_VAR 0 3
24755: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
// if not hack in hackTanks then
24762: LD_VAR 0 1
24766: PUSH
24767: LD_EXP 84
24771: IN
24772: NOT
24773: IFFALSE 24777
// exit ;
24775: GO 25017
// index := GetElementIndex ( hackTanks , hack ) ;
24777: LD_ADDR_VAR 0 4
24781: PUSH
24782: LD_EXP 84
24786: PPUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL 32086 0 2
24796: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24797: LD_ADDR_VAR 0 3
24801: PUSH
24802: DOUBLE
24803: LD_EXP 85
24807: PUSH
24808: LD_VAR 0 4
24812: ARRAY
24813: INC
24814: ST_TO_ADDR
24815: LD_INT 1
24817: PUSH
24818: FOR_DOWNTO
24819: IFFALSE 24991
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24821: LD_ADDR_VAR 0 5
24825: PUSH
24826: LD_EXP 85
24830: PUSH
24831: LD_VAR 0 4
24835: ARRAY
24836: PUSH
24837: LD_VAR 0 3
24841: ARRAY
24842: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24843: LD_VAR 0 5
24847: PUSH
24848: LD_INT 1
24850: ARRAY
24851: PPUSH
24852: CALL_OW 302
24856: NOT
24857: PUSH
24858: LD_VAR 0 5
24862: PUSH
24863: LD_INT 1
24865: ARRAY
24866: PPUSH
24867: CALL_OW 255
24871: PUSH
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL_OW 255
24881: NONEQUAL
24882: OR
24883: IFFALSE 24989
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24885: LD_VAR 0 5
24889: PUSH
24890: LD_INT 1
24892: ARRAY
24893: PPUSH
24894: CALL_OW 305
24898: PUSH
24899: LD_VAR 0 5
24903: PUSH
24904: LD_INT 1
24906: ARRAY
24907: PPUSH
24908: CALL_OW 255
24912: PUSH
24913: LD_VAR 0 1
24917: PPUSH
24918: CALL_OW 255
24922: EQUAL
24923: AND
24924: IFFALSE 24948
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24926: LD_VAR 0 5
24930: PUSH
24931: LD_INT 1
24933: ARRAY
24934: PPUSH
24935: LD_VAR 0 5
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: PPUSH
24944: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24948: LD_ADDR_EXP 85
24952: PUSH
24953: LD_EXP 85
24957: PPUSH
24958: LD_VAR 0 4
24962: PPUSH
24963: LD_EXP 85
24967: PUSH
24968: LD_VAR 0 4
24972: ARRAY
24973: PPUSH
24974: LD_VAR 0 3
24978: PPUSH
24979: CALL_OW 3
24983: PPUSH
24984: CALL_OW 1
24988: ST_TO_ADDR
// end ; end ;
24989: GO 24818
24991: POP
24992: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_EXP 85
25002: PUSH
25003: LD_VAR 0 4
25007: ARRAY
25008: PUSH
25009: LD_INT 0
25011: PLUS
25012: PPUSH
25013: CALL_OW 505
// end ;
25017: LD_VAR 0 2
25021: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
// if not hack in hackTanks then
25028: LD_VAR 0 1
25032: PUSH
25033: LD_EXP 84
25037: IN
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25128
// index := GetElementIndex ( hackTanks , hack ) ;
25043: LD_ADDR_VAR 0 5
25047: PUSH
25048: LD_EXP 84
25052: PPUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL 32086 0 2
25062: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25063: LD_ADDR_VAR 0 4
25067: PUSH
25068: DOUBLE
25069: LD_INT 1
25071: DEC
25072: ST_TO_ADDR
25073: LD_EXP 85
25077: PUSH
25078: LD_VAR 0 5
25082: ARRAY
25083: PUSH
25084: FOR_TO
25085: IFFALSE 25126
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25087: LD_EXP 85
25091: PUSH
25092: LD_VAR 0 5
25096: ARRAY
25097: PUSH
25098: LD_VAR 0 4
25102: ARRAY
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PUSH
25108: LD_VAR 0 2
25112: EQUAL
25113: IFFALSE 25124
// KillUnit ( vehicle ) ;
25115: LD_VAR 0 2
25119: PPUSH
25120: CALL_OW 66
25124: GO 25084
25126: POP
25127: POP
// end ;
25128: LD_VAR 0 3
25132: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25133: LD_EXP 89
25137: NOT
25138: IFFALSE 25173
25140: GO 25142
25142: DISABLE
// begin initMiner := true ;
25143: LD_ADDR_EXP 89
25147: PUSH
25148: LD_INT 1
25150: ST_TO_ADDR
// minersList := [ ] ;
25151: LD_ADDR_EXP 90
25155: PUSH
25156: EMPTY
25157: ST_TO_ADDR
// minerMinesList := [ ] ;
25158: LD_ADDR_EXP 91
25162: PUSH
25163: EMPTY
25164: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25165: LD_ADDR_EXP 92
25169: PUSH
25170: LD_INT 5
25172: ST_TO_ADDR
// end ;
25173: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25174: LD_EXP 89
25178: PUSH
25179: LD_INT 34
25181: PUSH
25182: LD_EXP 100
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PPUSH
25191: CALL_OW 69
25195: AND
25196: IFFALSE 25659
25198: GO 25200
25200: DISABLE
25201: LD_INT 0
25203: PPUSH
25204: PPUSH
25205: PPUSH
25206: PPUSH
// begin enable ;
25207: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25208: LD_ADDR_VAR 0 1
25212: PUSH
25213: LD_INT 34
25215: PUSH
25216: LD_EXP 100
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PPUSH
25225: CALL_OW 69
25229: PUSH
25230: FOR_IN
25231: IFFALSE 25303
// begin if not i in minersList then
25233: LD_VAR 0 1
25237: PUSH
25238: LD_EXP 90
25242: IN
25243: NOT
25244: IFFALSE 25301
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25246: LD_ADDR_EXP 90
25250: PUSH
25251: LD_EXP 90
25255: PPUSH
25256: LD_EXP 90
25260: PUSH
25261: LD_INT 1
25263: PLUS
25264: PPUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 1
25274: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25275: LD_ADDR_EXP 91
25279: PUSH
25280: LD_EXP 91
25284: PPUSH
25285: LD_EXP 91
25289: PUSH
25290: LD_INT 1
25292: PLUS
25293: PPUSH
25294: EMPTY
25295: PPUSH
25296: CALL_OW 1
25300: ST_TO_ADDR
// end end ;
25301: GO 25230
25303: POP
25304: POP
// for i := minerMinesList downto 1 do
25305: LD_ADDR_VAR 0 1
25309: PUSH
25310: DOUBLE
25311: LD_EXP 91
25315: INC
25316: ST_TO_ADDR
25317: LD_INT 1
25319: PUSH
25320: FOR_DOWNTO
25321: IFFALSE 25657
// begin if IsLive ( minersList [ i ] ) then
25323: LD_EXP 90
25327: PUSH
25328: LD_VAR 0 1
25332: ARRAY
25333: PPUSH
25334: CALL_OW 300
25338: IFFALSE 25366
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25340: LD_EXP 90
25344: PUSH
25345: LD_VAR 0 1
25349: ARRAY
25350: PPUSH
25351: LD_EXP 91
25355: PUSH
25356: LD_VAR 0 1
25360: ARRAY
25361: PPUSH
25362: CALL_OW 505
// if not minerMinesList [ i ] then
25366: LD_EXP 91
25370: PUSH
25371: LD_VAR 0 1
25375: ARRAY
25376: NOT
25377: IFFALSE 25381
// continue ;
25379: GO 25320
// for j := minerMinesList [ i ] downto 1 do
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: DOUBLE
25387: LD_EXP 91
25391: PUSH
25392: LD_VAR 0 1
25396: ARRAY
25397: INC
25398: ST_TO_ADDR
25399: LD_INT 1
25401: PUSH
25402: FOR_DOWNTO
25403: IFFALSE 25653
// begin side := GetSide ( minersList [ i ] ) ;
25405: LD_ADDR_VAR 0 3
25409: PUSH
25410: LD_EXP 90
25414: PUSH
25415: LD_VAR 0 1
25419: ARRAY
25420: PPUSH
25421: CALL_OW 255
25425: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25426: LD_ADDR_VAR 0 4
25430: PUSH
25431: LD_EXP 91
25435: PUSH
25436: LD_VAR 0 1
25440: ARRAY
25441: PUSH
25442: LD_VAR 0 2
25446: ARRAY
25447: PUSH
25448: LD_INT 1
25450: ARRAY
25451: PPUSH
25452: LD_EXP 91
25456: PUSH
25457: LD_VAR 0 1
25461: ARRAY
25462: PUSH
25463: LD_VAR 0 2
25467: ARRAY
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PPUSH
25473: CALL_OW 428
25477: ST_TO_ADDR
// if not tmp then
25478: LD_VAR 0 4
25482: NOT
25483: IFFALSE 25487
// continue ;
25485: GO 25402
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25487: LD_VAR 0 4
25491: PUSH
25492: LD_INT 81
25494: PUSH
25495: LD_VAR 0 3
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: IN
25509: PUSH
25510: LD_EXP 91
25514: PUSH
25515: LD_VAR 0 1
25519: ARRAY
25520: PUSH
25521: LD_VAR 0 2
25525: ARRAY
25526: PUSH
25527: LD_INT 1
25529: ARRAY
25530: PPUSH
25531: LD_EXP 91
25535: PUSH
25536: LD_VAR 0 1
25540: ARRAY
25541: PUSH
25542: LD_VAR 0 2
25546: ARRAY
25547: PUSH
25548: LD_INT 2
25550: ARRAY
25551: PPUSH
25552: CALL_OW 458
25556: AND
25557: IFFALSE 25651
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25559: LD_EXP 91
25563: PUSH
25564: LD_VAR 0 1
25568: ARRAY
25569: PUSH
25570: LD_VAR 0 2
25574: ARRAY
25575: PUSH
25576: LD_INT 1
25578: ARRAY
25579: PPUSH
25580: LD_EXP 91
25584: PUSH
25585: LD_VAR 0 1
25589: ARRAY
25590: PUSH
25591: LD_VAR 0 2
25595: ARRAY
25596: PUSH
25597: LD_INT 2
25599: ARRAY
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25610: LD_ADDR_EXP 91
25614: PUSH
25615: LD_EXP 91
25619: PPUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_EXP 91
25629: PUSH
25630: LD_VAR 0 1
25634: ARRAY
25635: PPUSH
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 3
25645: PPUSH
25646: CALL_OW 1
25650: ST_TO_ADDR
// end ; end ;
25651: GO 25402
25653: POP
25654: POP
// end ;
25655: GO 25320
25657: POP
25658: POP
// end ;
25659: PPOPN 4
25661: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25662: LD_INT 0
25664: PPUSH
25665: PPUSH
// result := false ;
25666: LD_ADDR_VAR 0 4
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 264
25683: PUSH
25684: LD_EXP 100
25688: EQUAL
25689: NOT
25690: IFFALSE 25694
// exit ;
25692: GO 25934
// index := GetElementIndex ( minersList , unit ) ;
25694: LD_ADDR_VAR 0 5
25698: PUSH
25699: LD_EXP 90
25703: PPUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL 32086 0 2
25713: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25714: LD_EXP 91
25718: PUSH
25719: LD_VAR 0 5
25723: ARRAY
25724: PUSH
25725: LD_EXP 92
25729: GREATEREQUAL
25730: IFFALSE 25734
// exit ;
25732: GO 25934
// ComMoveXY ( unit , x , y ) ;
25734: LD_VAR 0 1
25738: PPUSH
25739: LD_VAR 0 2
25743: PPUSH
25744: LD_VAR 0 3
25748: PPUSH
25749: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25753: LD_INT 35
25755: PPUSH
25756: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25760: LD_VAR 0 1
25764: PPUSH
25765: LD_VAR 0 2
25769: PPUSH
25770: LD_VAR 0 3
25774: PPUSH
25775: CALL 62858 0 3
25779: NOT
25780: PUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 314
25790: AND
25791: IFFALSE 25795
// exit ;
25793: GO 25934
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25795: LD_VAR 0 2
25799: PPUSH
25800: LD_VAR 0 3
25804: PPUSH
25805: CALL_OW 428
25809: PUSH
25810: LD_VAR 0 1
25814: EQUAL
25815: PUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 314
25825: NOT
25826: AND
25827: IFFALSE 25753
// PlaySoundXY ( x , y , PlantMine ) ;
25829: LD_VAR 0 2
25833: PPUSH
25834: LD_VAR 0 3
25838: PPUSH
25839: LD_STRING PlantMine
25841: PPUSH
25842: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25846: LD_VAR 0 2
25850: PPUSH
25851: LD_VAR 0 3
25855: PPUSH
25856: LD_VAR 0 1
25860: PPUSH
25861: CALL_OW 255
25865: PPUSH
25866: LD_INT 0
25868: PPUSH
25869: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25873: LD_ADDR_EXP 91
25877: PUSH
25878: LD_EXP 91
25882: PPUSH
25883: LD_VAR 0 5
25887: PUSH
25888: LD_EXP 91
25892: PUSH
25893: LD_VAR 0 5
25897: ARRAY
25898: PUSH
25899: LD_INT 1
25901: PLUS
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PPUSH
25907: LD_VAR 0 2
25911: PUSH
25912: LD_VAR 0 3
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL 32301 0 3
25925: ST_TO_ADDR
// result := true ;
25926: LD_ADDR_VAR 0 4
25930: PUSH
25931: LD_INT 1
25933: ST_TO_ADDR
// end ;
25934: LD_VAR 0 4
25938: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25939: LD_INT 0
25941: PPUSH
25942: PPUSH
25943: PPUSH
// if not unit in minersList then
25944: LD_VAR 0 1
25948: PUSH
25949: LD_EXP 90
25953: IN
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26351
// index := GetElementIndex ( minersList , unit ) ;
25959: LD_ADDR_VAR 0 6
25963: PUSH
25964: LD_EXP 90
25968: PPUSH
25969: LD_VAR 0 1
25973: PPUSH
25974: CALL 32086 0 2
25978: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25979: LD_ADDR_VAR 0 5
25983: PUSH
25984: DOUBLE
25985: LD_EXP 91
25989: PUSH
25990: LD_VAR 0 6
25994: ARRAY
25995: INC
25996: ST_TO_ADDR
25997: LD_INT 1
25999: PUSH
26000: FOR_DOWNTO
26001: IFFALSE 26162
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26003: LD_EXP 91
26007: PUSH
26008: LD_VAR 0 6
26012: ARRAY
26013: PUSH
26014: LD_VAR 0 5
26018: ARRAY
26019: PUSH
26020: LD_INT 1
26022: ARRAY
26023: PUSH
26024: LD_VAR 0 2
26028: EQUAL
26029: PUSH
26030: LD_EXP 91
26034: PUSH
26035: LD_VAR 0 6
26039: ARRAY
26040: PUSH
26041: LD_VAR 0 5
26045: ARRAY
26046: PUSH
26047: LD_INT 2
26049: ARRAY
26050: PUSH
26051: LD_VAR 0 3
26055: EQUAL
26056: AND
26057: IFFALSE 26160
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26059: LD_EXP 91
26063: PUSH
26064: LD_VAR 0 6
26068: ARRAY
26069: PUSH
26070: LD_VAR 0 5
26074: ARRAY
26075: PUSH
26076: LD_INT 1
26078: ARRAY
26079: PPUSH
26080: LD_EXP 91
26084: PUSH
26085: LD_VAR 0 6
26089: ARRAY
26090: PUSH
26091: LD_VAR 0 5
26095: ARRAY
26096: PUSH
26097: LD_INT 2
26099: ARRAY
26100: PPUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 255
26110: PPUSH
26111: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26115: LD_ADDR_EXP 91
26119: PUSH
26120: LD_EXP 91
26124: PPUSH
26125: LD_VAR 0 6
26129: PPUSH
26130: LD_EXP 91
26134: PUSH
26135: LD_VAR 0 6
26139: ARRAY
26140: PPUSH
26141: LD_VAR 0 5
26145: PPUSH
26146: CALL_OW 3
26150: PPUSH
26151: CALL_OW 1
26155: ST_TO_ADDR
// exit ;
26156: POP
26157: POP
26158: GO 26351
// end ; end ;
26160: GO 26000
26162: POP
26163: POP
// for i := minerMinesList [ index ] downto 1 do
26164: LD_ADDR_VAR 0 5
26168: PUSH
26169: DOUBLE
26170: LD_EXP 91
26174: PUSH
26175: LD_VAR 0 6
26179: ARRAY
26180: INC
26181: ST_TO_ADDR
26182: LD_INT 1
26184: PUSH
26185: FOR_DOWNTO
26186: IFFALSE 26349
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26188: LD_EXP 91
26192: PUSH
26193: LD_VAR 0 6
26197: ARRAY
26198: PUSH
26199: LD_VAR 0 5
26203: ARRAY
26204: PUSH
26205: LD_INT 1
26207: ARRAY
26208: PPUSH
26209: LD_EXP 91
26213: PUSH
26214: LD_VAR 0 6
26218: ARRAY
26219: PUSH
26220: LD_VAR 0 5
26224: ARRAY
26225: PUSH
26226: LD_INT 2
26228: ARRAY
26229: PPUSH
26230: LD_VAR 0 2
26234: PPUSH
26235: LD_VAR 0 3
26239: PPUSH
26240: CALL_OW 298
26244: PUSH
26245: LD_INT 6
26247: LESS
26248: IFFALSE 26347
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26250: LD_EXP 91
26254: PUSH
26255: LD_VAR 0 6
26259: ARRAY
26260: PUSH
26261: LD_VAR 0 5
26265: ARRAY
26266: PUSH
26267: LD_INT 1
26269: ARRAY
26270: PPUSH
26271: LD_EXP 91
26275: PUSH
26276: LD_VAR 0 6
26280: ARRAY
26281: PUSH
26282: LD_VAR 0 5
26286: ARRAY
26287: PUSH
26288: LD_INT 2
26290: ARRAY
26291: PPUSH
26292: LD_VAR 0 1
26296: PPUSH
26297: CALL_OW 255
26301: PPUSH
26302: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26306: LD_ADDR_EXP 91
26310: PUSH
26311: LD_EXP 91
26315: PPUSH
26316: LD_VAR 0 6
26320: PPUSH
26321: LD_EXP 91
26325: PUSH
26326: LD_VAR 0 6
26330: ARRAY
26331: PPUSH
26332: LD_VAR 0 5
26336: PPUSH
26337: CALL_OW 3
26341: PPUSH
26342: CALL_OW 1
26346: ST_TO_ADDR
// end ; end ;
26347: GO 26185
26349: POP
26350: POP
// end ;
26351: LD_VAR 0 4
26355: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26356: LD_INT 0
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26367: LD_VAR 0 1
26371: PPUSH
26372: CALL_OW 264
26376: PUSH
26377: LD_EXP 100
26381: EQUAL
26382: NOT
26383: PUSH
26384: LD_VAR 0 1
26388: PUSH
26389: LD_EXP 90
26393: IN
26394: NOT
26395: OR
26396: IFFALSE 26400
// exit ;
26398: GO 26722
// index := GetElementIndex ( minersList , unit ) ;
26400: LD_ADDR_VAR 0 6
26404: PUSH
26405: LD_EXP 90
26409: PPUSH
26410: LD_VAR 0 1
26414: PPUSH
26415: CALL 32086 0 2
26419: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26420: LD_ADDR_VAR 0 8
26424: PUSH
26425: LD_EXP 92
26429: PUSH
26430: LD_EXP 91
26434: PUSH
26435: LD_VAR 0 6
26439: ARRAY
26440: MINUS
26441: ST_TO_ADDR
// if not minesFreeAmount then
26442: LD_VAR 0 8
26446: NOT
26447: IFFALSE 26451
// exit ;
26449: GO 26722
// tmp := [ ] ;
26451: LD_ADDR_VAR 0 7
26455: PUSH
26456: EMPTY
26457: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26458: LD_ADDR_VAR 0 5
26462: PUSH
26463: DOUBLE
26464: LD_INT 1
26466: DEC
26467: ST_TO_ADDR
26468: LD_VAR 0 8
26472: PUSH
26473: FOR_TO
26474: IFFALSE 26669
// begin _d := rand ( 0 , 5 ) ;
26476: LD_ADDR_VAR 0 11
26480: PUSH
26481: LD_INT 0
26483: PPUSH
26484: LD_INT 5
26486: PPUSH
26487: CALL_OW 12
26491: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26492: LD_ADDR_VAR 0 12
26496: PUSH
26497: LD_INT 2
26499: PPUSH
26500: LD_INT 6
26502: PPUSH
26503: CALL_OW 12
26507: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26508: LD_ADDR_VAR 0 9
26512: PUSH
26513: LD_VAR 0 2
26517: PPUSH
26518: LD_VAR 0 11
26522: PPUSH
26523: LD_VAR 0 12
26527: PPUSH
26528: CALL_OW 272
26532: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26533: LD_ADDR_VAR 0 10
26537: PUSH
26538: LD_VAR 0 3
26542: PPUSH
26543: LD_VAR 0 11
26547: PPUSH
26548: LD_VAR 0 12
26552: PPUSH
26553: CALL_OW 273
26557: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26558: LD_VAR 0 9
26562: PPUSH
26563: LD_VAR 0 10
26567: PPUSH
26568: CALL_OW 488
26572: PUSH
26573: LD_VAR 0 9
26577: PUSH
26578: LD_VAR 0 10
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_VAR 0 7
26591: IN
26592: NOT
26593: AND
26594: PUSH
26595: LD_VAR 0 9
26599: PPUSH
26600: LD_VAR 0 10
26604: PPUSH
26605: CALL_OW 458
26609: NOT
26610: AND
26611: IFFALSE 26653
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26613: LD_ADDR_VAR 0 7
26617: PUSH
26618: LD_VAR 0 7
26622: PPUSH
26623: LD_VAR 0 7
26627: PUSH
26628: LD_INT 1
26630: PLUS
26631: PPUSH
26632: LD_VAR 0 9
26636: PUSH
26637: LD_VAR 0 10
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL_OW 1
26650: ST_TO_ADDR
26651: GO 26667
// i := i - 1 ;
26653: LD_ADDR_VAR 0 5
26657: PUSH
26658: LD_VAR 0 5
26662: PUSH
26663: LD_INT 1
26665: MINUS
26666: ST_TO_ADDR
// end ;
26667: GO 26473
26669: POP
26670: POP
// for i in tmp do
26671: LD_ADDR_VAR 0 5
26675: PUSH
26676: LD_VAR 0 7
26680: PUSH
26681: FOR_IN
26682: IFFALSE 26720
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26684: LD_VAR 0 1
26688: PPUSH
26689: LD_VAR 0 5
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: PPUSH
26698: LD_VAR 0 5
26702: PUSH
26703: LD_INT 2
26705: ARRAY
26706: PPUSH
26707: CALL 25662 0 3
26711: NOT
26712: IFFALSE 26718
// exit ;
26714: POP
26715: POP
26716: GO 26722
26718: GO 26681
26720: POP
26721: POP
// end ;
26722: LD_VAR 0 4
26726: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26727: LD_INT 0
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
// if not GetClass ( unit ) = class_sniper then
26736: LD_VAR 0 1
26740: PPUSH
26741: CALL_OW 257
26745: PUSH
26746: LD_INT 5
26748: EQUAL
26749: NOT
26750: IFFALSE 26754
// exit ;
26752: GO 27142
// dist := 8 ;
26754: LD_ADDR_VAR 0 5
26758: PUSH
26759: LD_INT 8
26761: ST_TO_ADDR
// viewRange := 12 ;
26762: LD_ADDR_VAR 0 7
26766: PUSH
26767: LD_INT 12
26769: ST_TO_ADDR
// side := GetSide ( unit ) ;
26770: LD_ADDR_VAR 0 6
26774: PUSH
26775: LD_VAR 0 1
26779: PPUSH
26780: CALL_OW 255
26784: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26785: LD_INT 61
26787: PPUSH
26788: LD_VAR 0 6
26792: PPUSH
26793: CALL_OW 321
26797: PUSH
26798: LD_INT 2
26800: EQUAL
26801: IFFALSE 26811
// viewRange := 16 ;
26803: LD_ADDR_VAR 0 7
26807: PUSH
26808: LD_INT 16
26810: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26811: LD_VAR 0 1
26815: PPUSH
26816: LD_VAR 0 2
26820: PPUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 297
26830: PUSH
26831: LD_VAR 0 5
26835: GREATER
26836: IFFALSE 26915
// begin ComMoveXY ( unit , x , y ) ;
26838: LD_VAR 0 1
26842: PPUSH
26843: LD_VAR 0 2
26847: PPUSH
26848: LD_VAR 0 3
26852: PPUSH
26853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26857: LD_INT 35
26859: PPUSH
26860: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26864: LD_VAR 0 1
26868: PPUSH
26869: LD_VAR 0 2
26873: PPUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: CALL 62858 0 3
26883: NOT
26884: IFFALSE 26888
// exit ;
26886: GO 27142
// until GetDistUnitXY ( unit , x , y ) < dist ;
26888: LD_VAR 0 1
26892: PPUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: LD_VAR 0 3
26902: PPUSH
26903: CALL_OW 297
26907: PUSH
26908: LD_VAR 0 5
26912: LESS
26913: IFFALSE 26857
// end ; ComTurnXY ( unit , x , y ) ;
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_VAR 0 2
26924: PPUSH
26925: LD_VAR 0 3
26929: PPUSH
26930: CALL_OW 118
// wait ( 5 ) ;
26934: LD_INT 5
26936: PPUSH
26937: CALL_OW 67
// _d := GetDir ( unit ) ;
26941: LD_ADDR_VAR 0 10
26945: PUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 254
26955: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26956: LD_ADDR_VAR 0 8
26960: PUSH
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 250
26970: PPUSH
26971: LD_VAR 0 10
26975: PPUSH
26976: LD_VAR 0 5
26980: PPUSH
26981: CALL_OW 272
26985: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26986: LD_ADDR_VAR 0 9
26990: PUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 251
27000: PPUSH
27001: LD_VAR 0 10
27005: PPUSH
27006: LD_VAR 0 5
27010: PPUSH
27011: CALL_OW 273
27015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27016: LD_VAR 0 8
27020: PPUSH
27021: LD_VAR 0 9
27025: PPUSH
27026: CALL_OW 488
27030: NOT
27031: IFFALSE 27035
// exit ;
27033: GO 27142
// ComAnimCustom ( unit , 1 ) ;
27035: LD_VAR 0 1
27039: PPUSH
27040: LD_INT 1
27042: PPUSH
27043: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27047: LD_VAR 0 8
27051: PPUSH
27052: LD_VAR 0 9
27056: PPUSH
27057: LD_VAR 0 6
27061: PPUSH
27062: LD_VAR 0 7
27066: PPUSH
27067: CALL_OW 330
// repeat wait ( 1 ) ;
27071: LD_INT 1
27073: PPUSH
27074: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27078: LD_VAR 0 1
27082: PPUSH
27083: CALL_OW 316
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 314
27097: OR
27098: PUSH
27099: LD_VAR 0 1
27103: PPUSH
27104: CALL_OW 302
27108: NOT
27109: OR
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 301
27120: OR
27121: IFFALSE 27071
// RemoveSeeing ( _x , _y , side ) ;
27123: LD_VAR 0 8
27127: PPUSH
27128: LD_VAR 0 9
27132: PPUSH
27133: LD_VAR 0 6
27137: PPUSH
27138: CALL_OW 331
// end ; end_of_file
27142: LD_VAR 0 4
27146: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27147: LD_INT 0
27149: PPUSH
// ar_miner := 81 ;
27150: LD_ADDR_EXP 100
27154: PUSH
27155: LD_INT 81
27157: ST_TO_ADDR
// ar_crane := 88 ;
27158: LD_ADDR_EXP 99
27162: PUSH
27163: LD_INT 88
27165: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27166: LD_ADDR_EXP 94
27170: PUSH
27171: LD_INT 89
27173: ST_TO_ADDR
// us_hack := 99 ;
27174: LD_ADDR_EXP 95
27178: PUSH
27179: LD_INT 99
27181: ST_TO_ADDR
// us_artillery := 97 ;
27182: LD_ADDR_EXP 96
27186: PUSH
27187: LD_INT 97
27189: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27190: LD_ADDR_EXP 97
27194: PUSH
27195: LD_INT 91
27197: ST_TO_ADDR
// ar_mortar := 92 ;
27198: LD_ADDR_EXP 98
27202: PUSH
27203: LD_INT 92
27205: ST_TO_ADDR
// ru_radar := 98 ;
27206: LD_ADDR_EXP 93
27210: PUSH
27211: LD_INT 98
27213: ST_TO_ADDR
// tech_Artillery := 80 ;
27214: LD_ADDR_EXP 101
27218: PUSH
27219: LD_INT 80
27221: ST_TO_ADDR
// tech_RadMat := 81 ;
27222: LD_ADDR_EXP 102
27226: PUSH
27227: LD_INT 81
27229: ST_TO_ADDR
// tech_BasicTools := 82 ;
27230: LD_ADDR_EXP 103
27234: PUSH
27235: LD_INT 82
27237: ST_TO_ADDR
// tech_Cargo := 83 ;
27238: LD_ADDR_EXP 104
27242: PUSH
27243: LD_INT 83
27245: ST_TO_ADDR
// tech_Track := 84 ;
27246: LD_ADDR_EXP 105
27250: PUSH
27251: LD_INT 84
27253: ST_TO_ADDR
// tech_Crane := 85 ;
27254: LD_ADDR_EXP 106
27258: PUSH
27259: LD_INT 85
27261: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27262: LD_ADDR_EXP 107
27266: PUSH
27267: LD_INT 86
27269: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27270: LD_ADDR_EXP 108
27274: PUSH
27275: LD_INT 87
27277: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27278: LD_ADDR_EXP 109
27282: PUSH
27283: LD_INT 88
27285: ST_TO_ADDR
// class_mastodont := 31 ;
27286: LD_ADDR_EXP 110
27290: PUSH
27291: LD_INT 31
27293: ST_TO_ADDR
// class_horse := 21 ;
27294: LD_ADDR_EXP 111
27298: PUSH
27299: LD_INT 21
27301: ST_TO_ADDR
// end ;
27302: LD_VAR 0 1
27306: RET
// every 1 do
27307: GO 27309
27309: DISABLE
// InitGlobalVariables ; end_of_file
27310: CALL 27147 0 0
27314: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27315: LD_INT 0
27317: PPUSH
27318: PPUSH
// if exist_mode then
27319: LD_VAR 0 2
27323: IFFALSE 27348
// unit := CreateCharacter ( prefix & ident ) else
27325: LD_ADDR_VAR 0 5
27329: PUSH
27330: LD_VAR 0 3
27334: PUSH
27335: LD_VAR 0 1
27339: STR
27340: PPUSH
27341: CALL_OW 34
27345: ST_TO_ADDR
27346: GO 27363
// unit := NewCharacter ( ident ) ;
27348: LD_ADDR_VAR 0 5
27352: PUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 25
27362: ST_TO_ADDR
// result := unit ;
27363: LD_ADDR_VAR 0 4
27367: PUSH
27368: LD_VAR 0 5
27372: ST_TO_ADDR
// end ;
27373: LD_VAR 0 4
27377: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27378: LD_INT 0
27380: PPUSH
27381: PPUSH
// if not side or not nation then
27382: LD_VAR 0 1
27386: NOT
27387: PUSH
27388: LD_VAR 0 2
27392: NOT
27393: OR
27394: IFFALSE 27398
// exit ;
27396: GO 28166
// case nation of nation_american :
27398: LD_VAR 0 2
27402: PUSH
27403: LD_INT 1
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27625
27411: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27412: LD_ADDR_VAR 0 4
27416: PUSH
27417: LD_INT 35
27419: PUSH
27420: LD_INT 45
27422: PUSH
27423: LD_INT 46
27425: PUSH
27426: LD_INT 47
27428: PUSH
27429: LD_INT 82
27431: PUSH
27432: LD_INT 83
27434: PUSH
27435: LD_INT 84
27437: PUSH
27438: LD_INT 85
27440: PUSH
27441: LD_INT 86
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: LD_INT 6
27452: PUSH
27453: LD_INT 15
27455: PUSH
27456: LD_INT 16
27458: PUSH
27459: LD_INT 7
27461: PUSH
27462: LD_INT 12
27464: PUSH
27465: LD_INT 13
27467: PUSH
27468: LD_INT 10
27470: PUSH
27471: LD_INT 14
27473: PUSH
27474: LD_INT 20
27476: PUSH
27477: LD_INT 21
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_INT 25
27485: PUSH
27486: LD_INT 32
27488: PUSH
27489: LD_INT 27
27491: PUSH
27492: LD_INT 36
27494: PUSH
27495: LD_INT 69
27497: PUSH
27498: LD_INT 39
27500: PUSH
27501: LD_INT 34
27503: PUSH
27504: LD_INT 40
27506: PUSH
27507: LD_INT 48
27509: PUSH
27510: LD_INT 49
27512: PUSH
27513: LD_INT 50
27515: PUSH
27516: LD_INT 51
27518: PUSH
27519: LD_INT 52
27521: PUSH
27522: LD_INT 53
27524: PUSH
27525: LD_INT 54
27527: PUSH
27528: LD_INT 55
27530: PUSH
27531: LD_INT 56
27533: PUSH
27534: LD_INT 57
27536: PUSH
27537: LD_INT 58
27539: PUSH
27540: LD_INT 59
27542: PUSH
27543: LD_INT 60
27545: PUSH
27546: LD_INT 61
27548: PUSH
27549: LD_INT 62
27551: PUSH
27552: LD_INT 80
27554: PUSH
27555: LD_INT 82
27557: PUSH
27558: LD_INT 83
27560: PUSH
27561: LD_INT 84
27563: PUSH
27564: LD_INT 85
27566: PUSH
27567: LD_INT 86
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
27623: GO 28090
27625: LD_INT 2
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27633
27631: GO 27859
27633: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: LD_INT 35
27641: PUSH
27642: LD_INT 45
27644: PUSH
27645: LD_INT 46
27647: PUSH
27648: LD_INT 47
27650: PUSH
27651: LD_INT 82
27653: PUSH
27654: LD_INT 83
27656: PUSH
27657: LD_INT 84
27659: PUSH
27660: LD_INT 85
27662: PUSH
27663: LD_INT 87
27665: PUSH
27666: LD_INT 70
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 11
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: LD_INT 4
27680: PUSH
27681: LD_INT 5
27683: PUSH
27684: LD_INT 6
27686: PUSH
27687: LD_INT 15
27689: PUSH
27690: LD_INT 18
27692: PUSH
27693: LD_INT 7
27695: PUSH
27696: LD_INT 17
27698: PUSH
27699: LD_INT 8
27701: PUSH
27702: LD_INT 20
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 22
27710: PUSH
27711: LD_INT 72
27713: PUSH
27714: LD_INT 26
27716: PUSH
27717: LD_INT 69
27719: PUSH
27720: LD_INT 39
27722: PUSH
27723: LD_INT 40
27725: PUSH
27726: LD_INT 41
27728: PUSH
27729: LD_INT 42
27731: PUSH
27732: LD_INT 43
27734: PUSH
27735: LD_INT 48
27737: PUSH
27738: LD_INT 49
27740: PUSH
27741: LD_INT 50
27743: PUSH
27744: LD_INT 51
27746: PUSH
27747: LD_INT 52
27749: PUSH
27750: LD_INT 53
27752: PUSH
27753: LD_INT 54
27755: PUSH
27756: LD_INT 55
27758: PUSH
27759: LD_INT 56
27761: PUSH
27762: LD_INT 60
27764: PUSH
27765: LD_INT 61
27767: PUSH
27768: LD_INT 62
27770: PUSH
27771: LD_INT 66
27773: PUSH
27774: LD_INT 67
27776: PUSH
27777: LD_INT 68
27779: PUSH
27780: LD_INT 81
27782: PUSH
27783: LD_INT 82
27785: PUSH
27786: LD_INT 83
27788: PUSH
27789: LD_INT 84
27791: PUSH
27792: LD_INT 85
27794: PUSH
27795: LD_INT 87
27797: PUSH
27798: LD_INT 88
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
27857: GO 28090
27859: LD_INT 3
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 28089
27867: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27868: LD_ADDR_VAR 0 4
27872: PUSH
27873: LD_INT 46
27875: PUSH
27876: LD_INT 47
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 82
27887: PUSH
27888: LD_INT 83
27890: PUSH
27891: LD_INT 84
27893: PUSH
27894: LD_INT 85
27896: PUSH
27897: LD_INT 86
27899: PUSH
27900: LD_INT 11
27902: PUSH
27903: LD_INT 9
27905: PUSH
27906: LD_INT 20
27908: PUSH
27909: LD_INT 19
27911: PUSH
27912: LD_INT 21
27914: PUSH
27915: LD_INT 24
27917: PUSH
27918: LD_INT 22
27920: PUSH
27921: LD_INT 25
27923: PUSH
27924: LD_INT 28
27926: PUSH
27927: LD_INT 29
27929: PUSH
27930: LD_INT 30
27932: PUSH
27933: LD_INT 31
27935: PUSH
27936: LD_INT 37
27938: PUSH
27939: LD_INT 38
27941: PUSH
27942: LD_INT 32
27944: PUSH
27945: LD_INT 27
27947: PUSH
27948: LD_INT 33
27950: PUSH
27951: LD_INT 69
27953: PUSH
27954: LD_INT 39
27956: PUSH
27957: LD_INT 34
27959: PUSH
27960: LD_INT 40
27962: PUSH
27963: LD_INT 71
27965: PUSH
27966: LD_INT 23
27968: PUSH
27969: LD_INT 44
27971: PUSH
27972: LD_INT 48
27974: PUSH
27975: LD_INT 49
27977: PUSH
27978: LD_INT 50
27980: PUSH
27981: LD_INT 51
27983: PUSH
27984: LD_INT 52
27986: PUSH
27987: LD_INT 53
27989: PUSH
27990: LD_INT 54
27992: PUSH
27993: LD_INT 55
27995: PUSH
27996: LD_INT 56
27998: PUSH
27999: LD_INT 57
28001: PUSH
28002: LD_INT 58
28004: PUSH
28005: LD_INT 59
28007: PUSH
28008: LD_INT 63
28010: PUSH
28011: LD_INT 64
28013: PUSH
28014: LD_INT 65
28016: PUSH
28017: LD_INT 82
28019: PUSH
28020: LD_INT 83
28022: PUSH
28023: LD_INT 84
28025: PUSH
28026: LD_INT 85
28028: PUSH
28029: LD_INT 86
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
28087: GO 28090
28089: POP
// if state > - 1 and state < 3 then
28090: LD_VAR 0 3
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: GREATER
28099: PUSH
28100: LD_VAR 0 3
28104: PUSH
28105: LD_INT 3
28107: LESS
28108: AND
28109: IFFALSE 28166
// for i in result do
28111: LD_ADDR_VAR 0 5
28115: PUSH
28116: LD_VAR 0 4
28120: PUSH
28121: FOR_IN
28122: IFFALSE 28164
// if GetTech ( i , side ) <> state then
28124: LD_VAR 0 5
28128: PPUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 321
28138: PUSH
28139: LD_VAR 0 3
28143: NONEQUAL
28144: IFFALSE 28162
// result := result diff i ;
28146: LD_ADDR_VAR 0 4
28150: PUSH
28151: LD_VAR 0 4
28155: PUSH
28156: LD_VAR 0 5
28160: DIFF
28161: ST_TO_ADDR
28162: GO 28121
28164: POP
28165: POP
// end ;
28166: LD_VAR 0 4
28170: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28171: LD_INT 0
28173: PPUSH
28174: PPUSH
28175: PPUSH
// result := true ;
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 1
28183: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28184: LD_ADDR_VAR 0 5
28188: PUSH
28189: LD_VAR 0 2
28193: PPUSH
28194: CALL_OW 480
28198: ST_TO_ADDR
// if not tmp then
28199: LD_VAR 0 5
28203: NOT
28204: IFFALSE 28208
// exit ;
28206: GO 28257
// for i in tmp do
28208: LD_ADDR_VAR 0 4
28212: PUSH
28213: LD_VAR 0 5
28217: PUSH
28218: FOR_IN
28219: IFFALSE 28255
// if GetTech ( i , side ) <> state_researched then
28221: LD_VAR 0 4
28225: PPUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 321
28235: PUSH
28236: LD_INT 2
28238: NONEQUAL
28239: IFFALSE 28253
// begin result := false ;
28241: LD_ADDR_VAR 0 3
28245: PUSH
28246: LD_INT 0
28248: ST_TO_ADDR
// exit ;
28249: POP
28250: POP
28251: GO 28257
// end ;
28253: GO 28218
28255: POP
28256: POP
// end ;
28257: LD_VAR 0 3
28261: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
28266: PPUSH
28267: PPUSH
28268: PPUSH
28269: PPUSH
28270: PPUSH
28271: PPUSH
28272: PPUSH
28273: PPUSH
28274: PPUSH
28275: PPUSH
28276: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28277: LD_VAR 0 1
28281: NOT
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL_OW 257
28292: PUSH
28293: LD_INT 9
28295: NONEQUAL
28296: OR
28297: IFFALSE 28301
// exit ;
28299: GO 28874
// side := GetSide ( unit ) ;
28301: LD_ADDR_VAR 0 9
28305: PUSH
28306: LD_VAR 0 1
28310: PPUSH
28311: CALL_OW 255
28315: ST_TO_ADDR
// tech_space := tech_spacanom ;
28316: LD_ADDR_VAR 0 12
28320: PUSH
28321: LD_INT 29
28323: ST_TO_ADDR
// tech_time := tech_taurad ;
28324: LD_ADDR_VAR 0 13
28328: PUSH
28329: LD_INT 28
28331: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28332: LD_ADDR_VAR 0 11
28336: PUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 310
28346: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28347: LD_VAR 0 11
28351: PPUSH
28352: CALL_OW 247
28356: PUSH
28357: LD_INT 2
28359: EQUAL
28360: IFFALSE 28364
// exit ;
28362: GO 28874
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28364: LD_ADDR_VAR 0 8
28368: PUSH
28369: LD_INT 81
28371: PUSH
28372: LD_VAR 0 9
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: LD_INT 21
28386: PUSH
28387: LD_INT 3
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PPUSH
28402: CALL_OW 69
28406: ST_TO_ADDR
// if not tmp then
28407: LD_VAR 0 8
28411: NOT
28412: IFFALSE 28416
// exit ;
28414: GO 28874
// if in_unit then
28416: LD_VAR 0 11
28420: IFFALSE 28444
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28422: LD_ADDR_VAR 0 10
28426: PUSH
28427: LD_VAR 0 8
28431: PPUSH
28432: LD_VAR 0 11
28436: PPUSH
28437: CALL_OW 74
28441: ST_TO_ADDR
28442: GO 28464
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28444: LD_ADDR_VAR 0 10
28448: PUSH
28449: LD_VAR 0 8
28453: PPUSH
28454: LD_VAR 0 1
28458: PPUSH
28459: CALL_OW 74
28463: ST_TO_ADDR
// if not enemy then
28464: LD_VAR 0 10
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28874
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28473: LD_VAR 0 11
28477: PUSH
28478: LD_VAR 0 11
28482: PPUSH
28483: LD_VAR 0 10
28487: PPUSH
28488: CALL_OW 296
28492: PUSH
28493: LD_INT 13
28495: GREATER
28496: AND
28497: PUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: LD_VAR 0 10
28507: PPUSH
28508: CALL_OW 296
28512: PUSH
28513: LD_INT 12
28515: GREATER
28516: OR
28517: IFFALSE 28521
// exit ;
28519: GO 28874
// missile := [ 1 ] ;
28521: LD_ADDR_VAR 0 14
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28532: LD_VAR 0 9
28536: PPUSH
28537: LD_VAR 0 12
28541: PPUSH
28542: CALL_OW 325
28546: IFFALSE 28575
// missile := Insert ( missile , missile + 1 , 2 ) ;
28548: LD_ADDR_VAR 0 14
28552: PUSH
28553: LD_VAR 0 14
28557: PPUSH
28558: LD_VAR 0 14
28562: PUSH
28563: LD_INT 1
28565: PLUS
28566: PPUSH
28567: LD_INT 2
28569: PPUSH
28570: CALL_OW 2
28574: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28575: LD_VAR 0 9
28579: PPUSH
28580: LD_VAR 0 13
28584: PPUSH
28585: CALL_OW 325
28589: PUSH
28590: LD_VAR 0 10
28594: PPUSH
28595: CALL_OW 255
28599: PPUSH
28600: LD_VAR 0 13
28604: PPUSH
28605: CALL_OW 325
28609: NOT
28610: AND
28611: IFFALSE 28640
// missile := Insert ( missile , missile + 1 , 3 ) ;
28613: LD_ADDR_VAR 0 14
28617: PUSH
28618: LD_VAR 0 14
28622: PPUSH
28623: LD_VAR 0 14
28627: PUSH
28628: LD_INT 1
28630: PLUS
28631: PPUSH
28632: LD_INT 3
28634: PPUSH
28635: CALL_OW 2
28639: ST_TO_ADDR
// if missile < 2 then
28640: LD_VAR 0 14
28644: PUSH
28645: LD_INT 2
28647: LESS
28648: IFFALSE 28652
// exit ;
28650: GO 28874
// x := GetX ( enemy ) ;
28652: LD_ADDR_VAR 0 4
28656: PUSH
28657: LD_VAR 0 10
28661: PPUSH
28662: CALL_OW 250
28666: ST_TO_ADDR
// y := GetY ( enemy ) ;
28667: LD_ADDR_VAR 0 5
28671: PUSH
28672: LD_VAR 0 10
28676: PPUSH
28677: CALL_OW 251
28681: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28682: LD_ADDR_VAR 0 6
28686: PUSH
28687: LD_VAR 0 4
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PPUSH
28696: LD_INT 1
28698: PPUSH
28699: CALL_OW 12
28703: PLUS
28704: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28705: LD_ADDR_VAR 0 7
28709: PUSH
28710: LD_VAR 0 5
28714: PUSH
28715: LD_INT 1
28717: NEG
28718: PPUSH
28719: LD_INT 1
28721: PPUSH
28722: CALL_OW 12
28726: PLUS
28727: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28728: LD_VAR 0 6
28732: PPUSH
28733: LD_VAR 0 7
28737: PPUSH
28738: CALL_OW 488
28742: NOT
28743: IFFALSE 28765
// begin _x := x ;
28745: LD_ADDR_VAR 0 6
28749: PUSH
28750: LD_VAR 0 4
28754: ST_TO_ADDR
// _y := y ;
28755: LD_ADDR_VAR 0 7
28759: PUSH
28760: LD_VAR 0 5
28764: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28765: LD_ADDR_VAR 0 3
28769: PUSH
28770: LD_INT 1
28772: PPUSH
28773: LD_VAR 0 14
28777: PPUSH
28778: CALL_OW 12
28782: ST_TO_ADDR
// case i of 1 :
28783: LD_VAR 0 3
28787: PUSH
28788: LD_INT 1
28790: DOUBLE
28791: EQUAL
28792: IFTRUE 28796
28794: GO 28813
28796: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28797: LD_VAR 0 1
28801: PPUSH
28802: LD_VAR 0 10
28806: PPUSH
28807: CALL_OW 115
28811: GO 28874
28813: LD_INT 2
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28843
28821: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_VAR 0 6
28831: PPUSH
28832: LD_VAR 0 7
28836: PPUSH
28837: CALL_OW 153
28841: GO 28874
28843: LD_INT 3
28845: DOUBLE
28846: EQUAL
28847: IFTRUE 28851
28849: GO 28873
28851: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28852: LD_VAR 0 1
28856: PPUSH
28857: LD_VAR 0 6
28861: PPUSH
28862: LD_VAR 0 7
28866: PPUSH
28867: CALL_OW 154
28871: GO 28874
28873: POP
// end ;
28874: LD_VAR 0 2
28878: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28879: LD_INT 0
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
28886: PPUSH
// if not unit or not building then
28887: LD_VAR 0 1
28891: NOT
28892: PUSH
28893: LD_VAR 0 2
28897: NOT
28898: OR
28899: IFFALSE 28903
// exit ;
28901: GO 29061
// x := GetX ( building ) ;
28903: LD_ADDR_VAR 0 5
28907: PUSH
28908: LD_VAR 0 2
28912: PPUSH
28913: CALL_OW 250
28917: ST_TO_ADDR
// y := GetY ( building ) ;
28918: LD_ADDR_VAR 0 6
28922: PUSH
28923: LD_VAR 0 2
28927: PPUSH
28928: CALL_OW 251
28932: ST_TO_ADDR
// for i = 0 to 5 do
28933: LD_ADDR_VAR 0 4
28937: PUSH
28938: DOUBLE
28939: LD_INT 0
28941: DEC
28942: ST_TO_ADDR
28943: LD_INT 5
28945: PUSH
28946: FOR_TO
28947: IFFALSE 29059
// begin _x := ShiftX ( x , i , 3 ) ;
28949: LD_ADDR_VAR 0 7
28953: PUSH
28954: LD_VAR 0 5
28958: PPUSH
28959: LD_VAR 0 4
28963: PPUSH
28964: LD_INT 3
28966: PPUSH
28967: CALL_OW 272
28971: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28972: LD_ADDR_VAR 0 8
28976: PUSH
28977: LD_VAR 0 6
28981: PPUSH
28982: LD_VAR 0 4
28986: PPUSH
28987: LD_INT 3
28989: PPUSH
28990: CALL_OW 273
28994: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28995: LD_VAR 0 7
28999: PPUSH
29000: LD_VAR 0 8
29004: PPUSH
29005: CALL_OW 488
29009: NOT
29010: IFFALSE 29014
// continue ;
29012: GO 28946
// if HexInfo ( _x , _y ) = 0 then
29014: LD_VAR 0 7
29018: PPUSH
29019: LD_VAR 0 8
29023: PPUSH
29024: CALL_OW 428
29028: PUSH
29029: LD_INT 0
29031: EQUAL
29032: IFFALSE 29057
// begin ComMoveXY ( unit , _x , _y ) ;
29034: LD_VAR 0 1
29038: PPUSH
29039: LD_VAR 0 7
29043: PPUSH
29044: LD_VAR 0 8
29048: PPUSH
29049: CALL_OW 111
// exit ;
29053: POP
29054: POP
29055: GO 29061
// end ; end ;
29057: GO 28946
29059: POP
29060: POP
// end ;
29061: LD_VAR 0 3
29065: RET
// export function ScanBase ( side , base_area ) ; begin
29066: LD_INT 0
29068: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_VAR 0 2
29078: PPUSH
29079: LD_INT 81
29081: PUSH
29082: LD_VAR 0 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 70
29095: ST_TO_ADDR
// end ;
29096: LD_VAR 0 3
29100: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
29105: PPUSH
29106: PPUSH
// result := false ;
29107: LD_ADDR_VAR 0 2
29111: PUSH
29112: LD_INT 0
29114: ST_TO_ADDR
// side := GetSide ( unit ) ;
29115: LD_ADDR_VAR 0 3
29119: PUSH
29120: LD_VAR 0 1
29124: PPUSH
29125: CALL_OW 255
29129: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29130: LD_ADDR_VAR 0 4
29134: PUSH
29135: LD_VAR 0 1
29139: PPUSH
29140: CALL_OW 248
29144: ST_TO_ADDR
// case nat of 1 :
29145: LD_VAR 0 4
29149: PUSH
29150: LD_INT 1
29152: DOUBLE
29153: EQUAL
29154: IFTRUE 29158
29156: GO 29169
29158: POP
// tech := tech_lassight ; 2 :
29159: LD_ADDR_VAR 0 5
29163: PUSH
29164: LD_INT 12
29166: ST_TO_ADDR
29167: GO 29208
29169: LD_INT 2
29171: DOUBLE
29172: EQUAL
29173: IFTRUE 29177
29175: GO 29188
29177: POP
// tech := tech_mortar ; 3 :
29178: LD_ADDR_VAR 0 5
29182: PUSH
29183: LD_INT 41
29185: ST_TO_ADDR
29186: GO 29208
29188: LD_INT 3
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29207
29196: POP
// tech := tech_bazooka ; end ;
29197: LD_ADDR_VAR 0 5
29201: PUSH
29202: LD_INT 44
29204: ST_TO_ADDR
29205: GO 29208
29207: POP
// if Researched ( side , tech ) then
29208: LD_VAR 0 3
29212: PPUSH
29213: LD_VAR 0 5
29217: PPUSH
29218: CALL_OW 325
29222: IFFALSE 29249
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29224: LD_ADDR_VAR 0 2
29228: PUSH
29229: LD_INT 5
29231: PUSH
29232: LD_INT 8
29234: PUSH
29235: LD_INT 9
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: PUSH
29243: LD_VAR 0 4
29247: ARRAY
29248: ST_TO_ADDR
// end ;
29249: LD_VAR 0 2
29253: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29254: LD_INT 0
29256: PPUSH
29257: PPUSH
29258: PPUSH
// if not mines then
29259: LD_VAR 0 2
29263: NOT
29264: IFFALSE 29268
// exit ;
29266: GO 29412
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29268: LD_ADDR_VAR 0 5
29272: PUSH
29273: LD_INT 81
29275: PUSH
29276: LD_VAR 0 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: PUSH
29288: LD_INT 21
29290: PUSH
29291: LD_INT 3
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PPUSH
29306: CALL_OW 69
29310: ST_TO_ADDR
// for i in mines do
29311: LD_ADDR_VAR 0 4
29315: PUSH
29316: LD_VAR 0 2
29320: PUSH
29321: FOR_IN
29322: IFFALSE 29410
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29324: LD_VAR 0 4
29328: PUSH
29329: LD_INT 1
29331: ARRAY
29332: PPUSH
29333: LD_VAR 0 4
29337: PUSH
29338: LD_INT 2
29340: ARRAY
29341: PPUSH
29342: CALL_OW 458
29346: NOT
29347: IFFALSE 29351
// continue ;
29349: GO 29321
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29351: LD_VAR 0 4
29355: PUSH
29356: LD_INT 1
29358: ARRAY
29359: PPUSH
29360: LD_VAR 0 4
29364: PUSH
29365: LD_INT 2
29367: ARRAY
29368: PPUSH
29369: CALL_OW 428
29373: PUSH
29374: LD_VAR 0 5
29378: IN
29379: IFFALSE 29408
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29381: LD_VAR 0 4
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: PPUSH
29390: LD_VAR 0 4
29394: PUSH
29395: LD_INT 2
29397: ARRAY
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 456
// end ;
29408: GO 29321
29410: POP
29411: POP
// end ;
29412: LD_VAR 0 3
29416: RET
// export function Count ( array ) ; var i ; begin
29417: LD_INT 0
29419: PPUSH
29420: PPUSH
// result := 0 ;
29421: LD_ADDR_VAR 0 2
29425: PUSH
29426: LD_INT 0
29428: ST_TO_ADDR
// for i in array do
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_VAR 0 1
29438: PUSH
29439: FOR_IN
29440: IFFALSE 29464
// if i then
29442: LD_VAR 0 3
29446: IFFALSE 29462
// result := result + 1 ;
29448: LD_ADDR_VAR 0 2
29452: PUSH
29453: LD_VAR 0 2
29457: PUSH
29458: LD_INT 1
29460: PLUS
29461: ST_TO_ADDR
29462: GO 29439
29464: POP
29465: POP
// end ;
29466: LD_VAR 0 2
29470: RET
// export function IsEmpty ( building ) ; begin
29471: LD_INT 0
29473: PPUSH
// if not building then
29474: LD_VAR 0 1
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 29526
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: LD_VAR 0 1
29492: PUSH
29493: LD_INT 22
29495: PUSH
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 255
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 58
29512: PUSH
29513: EMPTY
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 69
29524: IN
29525: ST_TO_ADDR
// end ;
29526: LD_VAR 0 2
29530: RET
// export function IsNotFull ( building ) ; begin
29531: LD_INT 0
29533: PPUSH
// if not building then
29534: LD_VAR 0 1
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29562
// result := UnitsInside ( building ) < 6 ;
29543: LD_ADDR_VAR 0 2
29547: PUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 313
29557: PUSH
29558: LD_INT 6
29560: LESS
29561: ST_TO_ADDR
// end ;
29562: LD_VAR 0 2
29566: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29567: LD_INT 0
29569: PPUSH
29570: PPUSH
29571: PPUSH
29572: PPUSH
// tmp := [ ] ;
29573: LD_ADDR_VAR 0 3
29577: PUSH
29578: EMPTY
29579: ST_TO_ADDR
// list := [ ] ;
29580: LD_ADDR_VAR 0 5
29584: PUSH
29585: EMPTY
29586: ST_TO_ADDR
// for i = 16 to 25 do
29587: LD_ADDR_VAR 0 4
29591: PUSH
29592: DOUBLE
29593: LD_INT 16
29595: DEC
29596: ST_TO_ADDR
29597: LD_INT 25
29599: PUSH
29600: FOR_TO
29601: IFFALSE 29674
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_VAR 0 3
29612: PUSH
29613: LD_INT 22
29615: PUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 255
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 91
29632: PUSH
29633: LD_VAR 0 1
29637: PUSH
29638: LD_INT 6
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 30
29648: PUSH
29649: LD_VAR 0 4
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: PPUSH
29666: CALL_OW 69
29670: ADD
29671: ST_TO_ADDR
29672: GO 29600
29674: POP
29675: POP
// for i = 1 to tmp do
29676: LD_ADDR_VAR 0 4
29680: PUSH
29681: DOUBLE
29682: LD_INT 1
29684: DEC
29685: ST_TO_ADDR
29686: LD_VAR 0 3
29690: PUSH
29691: FOR_TO
29692: IFFALSE 29780
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29694: LD_ADDR_VAR 0 5
29698: PUSH
29699: LD_VAR 0 5
29703: PUSH
29704: LD_VAR 0 3
29708: PUSH
29709: LD_VAR 0 4
29713: ARRAY
29714: PPUSH
29715: CALL_OW 266
29719: PUSH
29720: LD_VAR 0 3
29724: PUSH
29725: LD_VAR 0 4
29729: ARRAY
29730: PPUSH
29731: CALL_OW 250
29735: PUSH
29736: LD_VAR 0 3
29740: PUSH
29741: LD_VAR 0 4
29745: ARRAY
29746: PPUSH
29747: CALL_OW 251
29751: PUSH
29752: LD_VAR 0 3
29756: PUSH
29757: LD_VAR 0 4
29761: ARRAY
29762: PPUSH
29763: CALL_OW 254
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: ADD
29777: ST_TO_ADDR
29778: GO 29691
29780: POP
29781: POP
// result := list ;
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: LD_VAR 0 5
29791: ST_TO_ADDR
// end ;
29792: LD_VAR 0 2
29796: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29797: LD_INT 0
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
// if not factory then
29806: LD_VAR 0 1
29810: NOT
29811: IFFALSE 29815
// exit ;
29813: GO 30408
// if control = control_apeman then
29815: LD_VAR 0 4
29819: PUSH
29820: LD_INT 5
29822: EQUAL
29823: IFFALSE 29932
// begin tmp := UnitsInside ( factory ) ;
29825: LD_ADDR_VAR 0 8
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 313
29839: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29840: LD_VAR 0 8
29844: PPUSH
29845: LD_INT 25
29847: PUSH
29848: LD_INT 12
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 72
29859: NOT
29860: IFFALSE 29870
// control := control_manual ;
29862: LD_ADDR_VAR 0 4
29866: PUSH
29867: LD_INT 1
29869: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29870: LD_ADDR_VAR 0 8
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL 29567 0 1
29884: ST_TO_ADDR
// if tmp then
29885: LD_VAR 0 8
29889: IFFALSE 29932
// begin for i in tmp do
29891: LD_ADDR_VAR 0 7
29895: PUSH
29896: LD_VAR 0 8
29900: PUSH
29901: FOR_IN
29902: IFFALSE 29930
// if i [ 1 ] = b_ext_radio then
29904: LD_VAR 0 7
29908: PUSH
29909: LD_INT 1
29911: ARRAY
29912: PUSH
29913: LD_INT 22
29915: EQUAL
29916: IFFALSE 29928
// begin control := control_remote ;
29918: LD_ADDR_VAR 0 4
29922: PUSH
29923: LD_INT 2
29925: ST_TO_ADDR
// break ;
29926: GO 29930
// end ;
29928: GO 29901
29930: POP
29931: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29932: LD_VAR 0 1
29936: PPUSH
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_VAR 0 3
29946: PPUSH
29947: LD_VAR 0 4
29951: PPUSH
29952: LD_VAR 0 5
29956: PPUSH
29957: CALL_OW 448
29961: IFFALSE 29996
// begin result := [ chassis , engine , control , weapon ] ;
29963: LD_ADDR_VAR 0 6
29967: PUSH
29968: LD_VAR 0 2
29972: PUSH
29973: LD_VAR 0 3
29977: PUSH
29978: LD_VAR 0 4
29982: PUSH
29983: LD_VAR 0 5
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: ST_TO_ADDR
// exit ;
29994: GO 30408
// end ; _chassis := AvailableChassisList ( factory ) ;
29996: LD_ADDR_VAR 0 9
30000: PUSH
30001: LD_VAR 0 1
30005: PPUSH
30006: CALL_OW 475
30010: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30011: LD_ADDR_VAR 0 11
30015: PUSH
30016: LD_VAR 0 1
30020: PPUSH
30021: CALL_OW 476
30025: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30026: LD_ADDR_VAR 0 12
30030: PUSH
30031: LD_VAR 0 1
30035: PPUSH
30036: CALL_OW 477
30040: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30041: LD_ADDR_VAR 0 10
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 478
30055: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30056: LD_VAR 0 9
30060: NOT
30061: PUSH
30062: LD_VAR 0 11
30066: NOT
30067: OR
30068: PUSH
30069: LD_VAR 0 12
30073: NOT
30074: OR
30075: PUSH
30076: LD_VAR 0 10
30080: NOT
30081: OR
30082: IFFALSE 30117
// begin result := [ chassis , engine , control , weapon ] ;
30084: LD_ADDR_VAR 0 6
30088: PUSH
30089: LD_VAR 0 2
30093: PUSH
30094: LD_VAR 0 3
30098: PUSH
30099: LD_VAR 0 4
30103: PUSH
30104: LD_VAR 0 5
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// exit ;
30115: GO 30408
// end ; if not chassis in _chassis then
30117: LD_VAR 0 2
30121: PUSH
30122: LD_VAR 0 9
30126: IN
30127: NOT
30128: IFFALSE 30154
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30130: LD_ADDR_VAR 0 2
30134: PUSH
30135: LD_VAR 0 9
30139: PUSH
30140: LD_INT 1
30142: PPUSH
30143: LD_VAR 0 9
30147: PPUSH
30148: CALL_OW 12
30152: ARRAY
30153: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30154: LD_VAR 0 2
30158: PPUSH
30159: LD_VAR 0 3
30163: PPUSH
30164: CALL 30413 0 2
30168: NOT
30169: IFFALSE 30228
// repeat engine := _engine [ 1 ] ;
30171: LD_ADDR_VAR 0 3
30175: PUSH
30176: LD_VAR 0 11
30180: PUSH
30181: LD_INT 1
30183: ARRAY
30184: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30185: LD_ADDR_VAR 0 11
30189: PUSH
30190: LD_VAR 0 11
30194: PPUSH
30195: LD_INT 1
30197: PPUSH
30198: CALL_OW 3
30202: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30203: LD_VAR 0 2
30207: PPUSH
30208: LD_VAR 0 3
30212: PPUSH
30213: CALL 30413 0 2
30217: PUSH
30218: LD_VAR 0 11
30222: PUSH
30223: EMPTY
30224: EQUAL
30225: OR
30226: IFFALSE 30171
// if not control in _control then
30228: LD_VAR 0 4
30232: PUSH
30233: LD_VAR 0 12
30237: IN
30238: NOT
30239: IFFALSE 30265
// control := _control [ rand ( 1 , _control ) ] ;
30241: LD_ADDR_VAR 0 4
30245: PUSH
30246: LD_VAR 0 12
30250: PUSH
30251: LD_INT 1
30253: PPUSH
30254: LD_VAR 0 12
30258: PPUSH
30259: CALL_OW 12
30263: ARRAY
30264: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_VAR 0 5
30274: PPUSH
30275: CALL 30633 0 2
30279: NOT
30280: IFFALSE 30339
// repeat weapon := _weapon [ 1 ] ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_VAR 0 10
30291: PUSH
30292: LD_INT 1
30294: ARRAY
30295: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30296: LD_ADDR_VAR 0 10
30300: PUSH
30301: LD_VAR 0 10
30305: PPUSH
30306: LD_INT 1
30308: PPUSH
30309: CALL_OW 3
30313: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30314: LD_VAR 0 2
30318: PPUSH
30319: LD_VAR 0 5
30323: PPUSH
30324: CALL 30633 0 2
30328: PUSH
30329: LD_VAR 0 10
30333: PUSH
30334: EMPTY
30335: EQUAL
30336: OR
30337: IFFALSE 30282
// result := [ ] ;
30339: LD_ADDR_VAR 0 6
30343: PUSH
30344: EMPTY
30345: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30346: LD_VAR 0 1
30350: PPUSH
30351: LD_VAR 0 2
30355: PPUSH
30356: LD_VAR 0 3
30360: PPUSH
30361: LD_VAR 0 4
30365: PPUSH
30366: LD_VAR 0 5
30370: PPUSH
30371: CALL_OW 448
30375: IFFALSE 30408
// result := [ chassis , engine , control , weapon ] ;
30377: LD_ADDR_VAR 0 6
30381: PUSH
30382: LD_VAR 0 2
30386: PUSH
30387: LD_VAR 0 3
30391: PUSH
30392: LD_VAR 0 4
30396: PUSH
30397: LD_VAR 0 5
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: ST_TO_ADDR
// end ;
30408: LD_VAR 0 6
30412: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30413: LD_INT 0
30415: PPUSH
// if not chassis or not engine then
30416: LD_VAR 0 1
30420: NOT
30421: PUSH
30422: LD_VAR 0 2
30426: NOT
30427: OR
30428: IFFALSE 30432
// exit ;
30430: GO 30628
// case engine of engine_solar :
30432: LD_VAR 0 2
30436: PUSH
30437: LD_INT 2
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30483
30445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 11
30453: PUSH
30454: LD_INT 12
30456: PUSH
30457: LD_INT 13
30459: PUSH
30460: LD_INT 14
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: ST_TO_ADDR
30481: GO 30612
30483: LD_INT 1
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30553
30491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: LD_INT 11
30499: PUSH
30500: LD_INT 12
30502: PUSH
30503: LD_INT 13
30505: PUSH
30506: LD_INT 14
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 4
30520: PUSH
30521: LD_INT 5
30523: PUSH
30524: LD_INT 21
30526: PUSH
30527: LD_INT 23
30529: PUSH
30530: LD_INT 22
30532: PUSH
30533: LD_INT 24
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: ST_TO_ADDR
30551: GO 30612
30553: LD_INT 3
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30611
30561: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30562: LD_ADDR_VAR 0 3
30566: PUSH
30567: LD_INT 13
30569: PUSH
30570: LD_INT 14
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 4
30581: PUSH
30582: LD_INT 5
30584: PUSH
30585: LD_INT 21
30587: PUSH
30588: LD_INT 22
30590: PUSH
30591: LD_INT 23
30593: PUSH
30594: LD_INT 24
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: ST_TO_ADDR
30609: GO 30612
30611: POP
// result := ( chassis in result ) ;
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: LD_VAR 0 1
30621: PUSH
30622: LD_VAR 0 3
30626: IN
30627: ST_TO_ADDR
// end ;
30628: LD_VAR 0 3
30632: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30633: LD_INT 0
30635: PPUSH
// if not chassis or not weapon then
30636: LD_VAR 0 1
30640: NOT
30641: PUSH
30642: LD_VAR 0 2
30646: NOT
30647: OR
30648: IFFALSE 30652
// exit ;
30650: GO 31714
// case weapon of us_machine_gun :
30652: LD_VAR 0 2
30656: PUSH
30657: LD_INT 2
30659: DOUBLE
30660: EQUAL
30661: IFTRUE 30665
30663: GO 30695
30665: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: LD_INT 3
30679: PUSH
30680: LD_INT 4
30682: PUSH
30683: LD_INT 5
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
30693: GO 31698
30695: LD_INT 3
30697: DOUBLE
30698: EQUAL
30699: IFTRUE 30703
30701: GO 30733
30703: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30704: LD_ADDR_VAR 0 3
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: LD_INT 4
30720: PUSH
30721: LD_INT 5
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
30731: GO 31698
30733: LD_INT 11
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30771
30741: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: LD_INT 4
30758: PUSH
30759: LD_INT 5
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: ST_TO_ADDR
30769: GO 31698
30771: LD_INT 4
30773: DOUBLE
30774: EQUAL
30775: IFTRUE 30779
30777: GO 30805
30779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_INT 2
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: LD_INT 4
30793: PUSH
30794: LD_INT 5
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
30803: GO 31698
30805: LD_INT 5
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30839
30813: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: LD_INT 3
30824: PUSH
30825: LD_INT 4
30827: PUSH
30828: LD_INT 5
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
30837: GO 31698
30839: LD_INT 9
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30873
30847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30848: LD_ADDR_VAR 0 3
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: LD_INT 4
30861: PUSH
30862: LD_INT 5
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
30871: GO 31698
30873: LD_INT 7
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30907
30881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 4
30895: PUSH
30896: LD_INT 5
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31698
30907: LD_INT 12
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30941
30915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 4
30929: PUSH
30930: LD_INT 5
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31698
30941: LD_INT 13
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30975
30949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31698
30975: LD_INT 14
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31001
30983: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 4
30991: PUSH
30992: LD_INT 5
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: ST_TO_ADDR
30999: GO 31698
31001: LD_INT 6
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31027
31009: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 4
31017: PUSH
31018: LD_INT 5
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: ST_TO_ADDR
31025: GO 31698
31027: LD_INT 10
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31053
31035: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_INT 4
31043: PUSH
31044: LD_INT 5
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: ST_TO_ADDR
31051: GO 31698
31053: LD_INT 22
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31087
31061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: LD_INT 11
31069: PUSH
31070: LD_INT 12
31072: PUSH
31073: LD_INT 13
31075: PUSH
31076: LD_INT 14
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
31085: GO 31698
31087: LD_INT 23
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31121
31095: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 11
31103: PUSH
31104: LD_INT 12
31106: PUSH
31107: LD_INT 13
31109: PUSH
31110: LD_INT 14
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31698
31121: LD_INT 24
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 11
31137: PUSH
31138: LD_INT 12
31140: PUSH
31141: LD_INT 13
31143: PUSH
31144: LD_INT 14
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31698
31155: LD_INT 30
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 11
31171: PUSH
31172: LD_INT 12
31174: PUSH
31175: LD_INT 13
31177: PUSH
31178: LD_INT 14
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31698
31189: LD_INT 25
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31215
31197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 13
31205: PUSH
31206: LD_INT 14
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: ST_TO_ADDR
31213: GO 31698
31215: LD_INT 27
31217: DOUBLE
31218: EQUAL
31219: IFTRUE 31223
31221: GO 31241
31223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31224: LD_ADDR_VAR 0 3
31228: PUSH
31229: LD_INT 13
31231: PUSH
31232: LD_INT 14
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: ST_TO_ADDR
31239: GO 31698
31241: LD_EXP 98
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31251
31249: GO 31277
31251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31252: LD_ADDR_VAR 0 3
31256: PUSH
31257: LD_INT 11
31259: PUSH
31260: LD_INT 12
31262: PUSH
31263: LD_INT 13
31265: PUSH
31266: LD_INT 14
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
31275: GO 31698
31277: LD_INT 28
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 31303
31285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31286: LD_ADDR_VAR 0 3
31290: PUSH
31291: LD_INT 13
31293: PUSH
31294: LD_INT 14
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: ST_TO_ADDR
31301: GO 31698
31303: LD_INT 29
31305: DOUBLE
31306: EQUAL
31307: IFTRUE 31311
31309: GO 31329
31311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31312: LD_ADDR_VAR 0 3
31316: PUSH
31317: LD_INT 13
31319: PUSH
31320: LD_INT 14
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: ST_TO_ADDR
31327: GO 31698
31329: LD_INT 31
31331: DOUBLE
31332: EQUAL
31333: IFTRUE 31337
31335: GO 31355
31337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31338: LD_ADDR_VAR 0 3
31342: PUSH
31343: LD_INT 13
31345: PUSH
31346: LD_INT 14
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: ST_TO_ADDR
31353: GO 31698
31355: LD_INT 26
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31381
31363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31364: LD_ADDR_VAR 0 3
31368: PUSH
31369: LD_INT 13
31371: PUSH
31372: LD_INT 14
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: ST_TO_ADDR
31379: GO 31698
31381: LD_INT 42
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31415
31389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31390: LD_ADDR_VAR 0 3
31394: PUSH
31395: LD_INT 21
31397: PUSH
31398: LD_INT 22
31400: PUSH
31401: LD_INT 23
31403: PUSH
31404: LD_INT 24
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
31413: GO 31698
31415: LD_INT 43
31417: DOUBLE
31418: EQUAL
31419: IFTRUE 31423
31421: GO 31449
31423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: LD_INT 21
31431: PUSH
31432: LD_INT 22
31434: PUSH
31435: LD_INT 23
31437: PUSH
31438: LD_INT 24
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: ST_TO_ADDR
31447: GO 31698
31449: LD_INT 44
31451: DOUBLE
31452: EQUAL
31453: IFTRUE 31457
31455: GO 31483
31457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: LD_INT 21
31465: PUSH
31466: LD_INT 22
31468: PUSH
31469: LD_INT 23
31471: PUSH
31472: LD_INT 24
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
31481: GO 31698
31483: LD_INT 45
31485: DOUBLE
31486: EQUAL
31487: IFTRUE 31491
31489: GO 31517
31491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31492: LD_ADDR_VAR 0 3
31496: PUSH
31497: LD_INT 21
31499: PUSH
31500: LD_INT 22
31502: PUSH
31503: LD_INT 23
31505: PUSH
31506: LD_INT 24
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: ST_TO_ADDR
31515: GO 31698
31517: LD_INT 49
31519: DOUBLE
31520: EQUAL
31521: IFTRUE 31525
31523: GO 31551
31525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31526: LD_ADDR_VAR 0 3
31530: PUSH
31531: LD_INT 21
31533: PUSH
31534: LD_INT 22
31536: PUSH
31537: LD_INT 23
31539: PUSH
31540: LD_INT 24
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
31549: GO 31698
31551: LD_INT 51
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31585
31559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31560: LD_ADDR_VAR 0 3
31564: PUSH
31565: LD_INT 21
31567: PUSH
31568: LD_INT 22
31570: PUSH
31571: LD_INT 23
31573: PUSH
31574: LD_INT 24
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
31583: GO 31698
31585: LD_INT 52
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31619
31593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31594: LD_ADDR_VAR 0 3
31598: PUSH
31599: LD_INT 21
31601: PUSH
31602: LD_INT 22
31604: PUSH
31605: LD_INT 23
31607: PUSH
31608: LD_INT 24
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
31617: GO 31698
31619: LD_INT 53
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31645
31627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31628: LD_ADDR_VAR 0 3
31632: PUSH
31633: LD_INT 23
31635: PUSH
31636: LD_INT 24
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: ST_TO_ADDR
31643: GO 31698
31645: LD_INT 46
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31671
31653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31654: LD_ADDR_VAR 0 3
31658: PUSH
31659: LD_INT 23
31661: PUSH
31662: LD_INT 24
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: ST_TO_ADDR
31669: GO 31698
31671: LD_INT 47
31673: DOUBLE
31674: EQUAL
31675: IFTRUE 31679
31677: GO 31697
31679: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31680: LD_ADDR_VAR 0 3
31684: PUSH
31685: LD_INT 23
31687: PUSH
31688: LD_INT 24
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: ST_TO_ADDR
31695: GO 31698
31697: POP
// result := ( chassis in result ) ;
31698: LD_ADDR_VAR 0 3
31702: PUSH
31703: LD_VAR 0 1
31707: PUSH
31708: LD_VAR 0 3
31712: IN
31713: ST_TO_ADDR
// end ;
31714: LD_VAR 0 3
31718: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// result := array ;
31728: LD_ADDR_VAR 0 5
31732: PUSH
31733: LD_VAR 0 1
31737: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31738: LD_VAR 0 1
31742: NOT
31743: PUSH
31744: LD_VAR 0 2
31748: NOT
31749: OR
31750: PUSH
31751: LD_VAR 0 3
31755: NOT
31756: OR
31757: PUSH
31758: LD_VAR 0 2
31762: PUSH
31763: LD_VAR 0 1
31767: GREATER
31768: OR
31769: PUSH
31770: LD_VAR 0 3
31774: PUSH
31775: LD_VAR 0 1
31779: GREATER
31780: OR
31781: IFFALSE 31785
// exit ;
31783: GO 32081
// if direction then
31785: LD_VAR 0 4
31789: IFFALSE 31853
// begin d := 1 ;
31791: LD_ADDR_VAR 0 9
31795: PUSH
31796: LD_INT 1
31798: ST_TO_ADDR
// if i_from > i_to then
31799: LD_VAR 0 2
31803: PUSH
31804: LD_VAR 0 3
31808: GREATER
31809: IFFALSE 31835
// length := ( array - i_from ) + i_to else
31811: LD_ADDR_VAR 0 11
31815: PUSH
31816: LD_VAR 0 1
31820: PUSH
31821: LD_VAR 0 2
31825: MINUS
31826: PUSH
31827: LD_VAR 0 3
31831: PLUS
31832: ST_TO_ADDR
31833: GO 31851
// length := i_to - i_from ;
31835: LD_ADDR_VAR 0 11
31839: PUSH
31840: LD_VAR 0 3
31844: PUSH
31845: LD_VAR 0 2
31849: MINUS
31850: ST_TO_ADDR
// end else
31851: GO 31914
// begin d := - 1 ;
31853: LD_ADDR_VAR 0 9
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: ST_TO_ADDR
// if i_from > i_to then
31862: LD_VAR 0 2
31866: PUSH
31867: LD_VAR 0 3
31871: GREATER
31872: IFFALSE 31892
// length := i_from - i_to else
31874: LD_ADDR_VAR 0 11
31878: PUSH
31879: LD_VAR 0 2
31883: PUSH
31884: LD_VAR 0 3
31888: MINUS
31889: ST_TO_ADDR
31890: GO 31914
// length := ( array - i_to ) + i_from ;
31892: LD_ADDR_VAR 0 11
31896: PUSH
31897: LD_VAR 0 1
31901: PUSH
31902: LD_VAR 0 3
31906: MINUS
31907: PUSH
31908: LD_VAR 0 2
31912: PLUS
31913: ST_TO_ADDR
// end ; if not length then
31914: LD_VAR 0 11
31918: NOT
31919: IFFALSE 31923
// exit ;
31921: GO 32081
// tmp := array ;
31923: LD_ADDR_VAR 0 10
31927: PUSH
31928: LD_VAR 0 1
31932: ST_TO_ADDR
// for i = 1 to length do
31933: LD_ADDR_VAR 0 6
31937: PUSH
31938: DOUBLE
31939: LD_INT 1
31941: DEC
31942: ST_TO_ADDR
31943: LD_VAR 0 11
31947: PUSH
31948: FOR_TO
31949: IFFALSE 32069
// begin for j = 1 to array do
31951: LD_ADDR_VAR 0 7
31955: PUSH
31956: DOUBLE
31957: LD_INT 1
31959: DEC
31960: ST_TO_ADDR
31961: LD_VAR 0 1
31965: PUSH
31966: FOR_TO
31967: IFFALSE 32055
// begin k := j + d ;
31969: LD_ADDR_VAR 0 8
31973: PUSH
31974: LD_VAR 0 7
31978: PUSH
31979: LD_VAR 0 9
31983: PLUS
31984: ST_TO_ADDR
// if k > array then
31985: LD_VAR 0 8
31989: PUSH
31990: LD_VAR 0 1
31994: GREATER
31995: IFFALSE 32005
// k := 1 ;
31997: LD_ADDR_VAR 0 8
32001: PUSH
32002: LD_INT 1
32004: ST_TO_ADDR
// if not k then
32005: LD_VAR 0 8
32009: NOT
32010: IFFALSE 32022
// k := array ;
32012: LD_ADDR_VAR 0 8
32016: PUSH
32017: LD_VAR 0 1
32021: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32022: LD_ADDR_VAR 0 10
32026: PUSH
32027: LD_VAR 0 10
32031: PPUSH
32032: LD_VAR 0 8
32036: PPUSH
32037: LD_VAR 0 1
32041: PUSH
32042: LD_VAR 0 7
32046: ARRAY
32047: PPUSH
32048: CALL_OW 1
32052: ST_TO_ADDR
// end ;
32053: GO 31966
32055: POP
32056: POP
// array := tmp ;
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: LD_VAR 0 10
32066: ST_TO_ADDR
// end ;
32067: GO 31948
32069: POP
32070: POP
// result := array ;
32071: LD_ADDR_VAR 0 5
32075: PUSH
32076: LD_VAR 0 1
32080: ST_TO_ADDR
// end ;
32081: LD_VAR 0 5
32085: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32086: LD_INT 0
32088: PPUSH
32089: PPUSH
// result := 0 ;
32090: LD_ADDR_VAR 0 3
32094: PUSH
32095: LD_INT 0
32097: ST_TO_ADDR
// if not array or not value in array then
32098: LD_VAR 0 1
32102: NOT
32103: PUSH
32104: LD_VAR 0 2
32108: PUSH
32109: LD_VAR 0 1
32113: IN
32114: NOT
32115: OR
32116: IFFALSE 32120
// exit ;
32118: GO 32174
// for i = 1 to array do
32120: LD_ADDR_VAR 0 4
32124: PUSH
32125: DOUBLE
32126: LD_INT 1
32128: DEC
32129: ST_TO_ADDR
32130: LD_VAR 0 1
32134: PUSH
32135: FOR_TO
32136: IFFALSE 32172
// if value = array [ i ] then
32138: LD_VAR 0 2
32142: PUSH
32143: LD_VAR 0 1
32147: PUSH
32148: LD_VAR 0 4
32152: ARRAY
32153: EQUAL
32154: IFFALSE 32170
// begin result := i ;
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_VAR 0 4
32165: ST_TO_ADDR
// exit ;
32166: POP
32167: POP
32168: GO 32174
// end ;
32170: GO 32135
32172: POP
32173: POP
// end ;
32174: LD_VAR 0 3
32178: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32179: LD_INT 0
32181: PPUSH
// vc_chassis := chassis ;
32182: LD_ADDR_OWVAR 37
32186: PUSH
32187: LD_VAR 0 1
32191: ST_TO_ADDR
// vc_engine := engine ;
32192: LD_ADDR_OWVAR 39
32196: PUSH
32197: LD_VAR 0 2
32201: ST_TO_ADDR
// vc_control := control ;
32202: LD_ADDR_OWVAR 38
32206: PUSH
32207: LD_VAR 0 3
32211: ST_TO_ADDR
// vc_weapon := weapon ;
32212: LD_ADDR_OWVAR 40
32216: PUSH
32217: LD_VAR 0 4
32221: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32222: LD_ADDR_OWVAR 41
32226: PUSH
32227: LD_VAR 0 5
32231: ST_TO_ADDR
// end ;
32232: LD_VAR 0 6
32236: RET
// export function WantPlant ( unit ) ; var task ; begin
32237: LD_INT 0
32239: PPUSH
32240: PPUSH
// result := false ;
32241: LD_ADDR_VAR 0 2
32245: PUSH
32246: LD_INT 0
32248: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32249: LD_ADDR_VAR 0 3
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 437
32263: ST_TO_ADDR
// if task then
32264: LD_VAR 0 3
32268: IFFALSE 32296
// if task [ 1 ] [ 1 ] = p then
32270: LD_VAR 0 3
32274: PUSH
32275: LD_INT 1
32277: ARRAY
32278: PUSH
32279: LD_INT 1
32281: ARRAY
32282: PUSH
32283: LD_STRING p
32285: EQUAL
32286: IFFALSE 32296
// result := true ;
32288: LD_ADDR_VAR 0 2
32292: PUSH
32293: LD_INT 1
32295: ST_TO_ADDR
// end ;
32296: LD_VAR 0 2
32300: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32301: LD_INT 0
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
// if pos < 1 then
32307: LD_VAR 0 2
32311: PUSH
32312: LD_INT 1
32314: LESS
32315: IFFALSE 32319
// exit ;
32317: GO 32622
// if pos = 1 then
32319: LD_VAR 0 2
32323: PUSH
32324: LD_INT 1
32326: EQUAL
32327: IFFALSE 32360
// result := Replace ( arr , pos [ 1 ] , value ) else
32329: LD_ADDR_VAR 0 4
32333: PUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: LD_VAR 0 2
32343: PUSH
32344: LD_INT 1
32346: ARRAY
32347: PPUSH
32348: LD_VAR 0 3
32352: PPUSH
32353: CALL_OW 1
32357: ST_TO_ADDR
32358: GO 32622
// begin tmp := arr ;
32360: LD_ADDR_VAR 0 6
32364: PUSH
32365: LD_VAR 0 1
32369: ST_TO_ADDR
// s_arr := [ tmp ] ;
32370: LD_ADDR_VAR 0 7
32374: PUSH
32375: LD_VAR 0 6
32379: PUSH
32380: EMPTY
32381: LIST
32382: ST_TO_ADDR
// for i = 1 to pos - 1 do
32383: LD_ADDR_VAR 0 5
32387: PUSH
32388: DOUBLE
32389: LD_INT 1
32391: DEC
32392: ST_TO_ADDR
32393: LD_VAR 0 2
32397: PUSH
32398: LD_INT 1
32400: MINUS
32401: PUSH
32402: FOR_TO
32403: IFFALSE 32448
// begin tmp := tmp [ pos [ i ] ] ;
32405: LD_ADDR_VAR 0 6
32409: PUSH
32410: LD_VAR 0 6
32414: PUSH
32415: LD_VAR 0 2
32419: PUSH
32420: LD_VAR 0 5
32424: ARRAY
32425: ARRAY
32426: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32427: LD_ADDR_VAR 0 7
32431: PUSH
32432: LD_VAR 0 7
32436: PUSH
32437: LD_VAR 0 6
32441: PUSH
32442: EMPTY
32443: LIST
32444: ADD
32445: ST_TO_ADDR
// end ;
32446: GO 32402
32448: POP
32449: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32450: LD_ADDR_VAR 0 6
32454: PUSH
32455: LD_VAR 0 6
32459: PPUSH
32460: LD_VAR 0 2
32464: PUSH
32465: LD_VAR 0 2
32469: ARRAY
32470: PPUSH
32471: LD_VAR 0 3
32475: PPUSH
32476: CALL_OW 1
32480: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32481: LD_ADDR_VAR 0 7
32485: PUSH
32486: LD_VAR 0 7
32490: PPUSH
32491: LD_VAR 0 7
32495: PPUSH
32496: LD_VAR 0 6
32500: PPUSH
32501: CALL_OW 1
32505: ST_TO_ADDR
// for i = s_arr downto 2 do
32506: LD_ADDR_VAR 0 5
32510: PUSH
32511: DOUBLE
32512: LD_VAR 0 7
32516: INC
32517: ST_TO_ADDR
32518: LD_INT 2
32520: PUSH
32521: FOR_DOWNTO
32522: IFFALSE 32606
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32524: LD_ADDR_VAR 0 6
32528: PUSH
32529: LD_VAR 0 7
32533: PUSH
32534: LD_VAR 0 5
32538: PUSH
32539: LD_INT 1
32541: MINUS
32542: ARRAY
32543: PPUSH
32544: LD_VAR 0 2
32548: PUSH
32549: LD_VAR 0 5
32553: PUSH
32554: LD_INT 1
32556: MINUS
32557: ARRAY
32558: PPUSH
32559: LD_VAR 0 7
32563: PUSH
32564: LD_VAR 0 5
32568: ARRAY
32569: PPUSH
32570: CALL_OW 1
32574: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32575: LD_ADDR_VAR 0 7
32579: PUSH
32580: LD_VAR 0 7
32584: PPUSH
32585: LD_VAR 0 5
32589: PUSH
32590: LD_INT 1
32592: MINUS
32593: PPUSH
32594: LD_VAR 0 6
32598: PPUSH
32599: CALL_OW 1
32603: ST_TO_ADDR
// end ;
32604: GO 32521
32606: POP
32607: POP
// result := s_arr [ 1 ] ;
32608: LD_ADDR_VAR 0 4
32612: PUSH
32613: LD_VAR 0 7
32617: PUSH
32618: LD_INT 1
32620: ARRAY
32621: ST_TO_ADDR
// end ; end ;
32622: LD_VAR 0 4
32626: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32627: LD_INT 0
32629: PPUSH
32630: PPUSH
// if not list then
32631: LD_VAR 0 1
32635: NOT
32636: IFFALSE 32640
// exit ;
32638: GO 32731
// i := list [ pos1 ] ;
32640: LD_ADDR_VAR 0 5
32644: PUSH
32645: LD_VAR 0 1
32649: PUSH
32650: LD_VAR 0 2
32654: ARRAY
32655: ST_TO_ADDR
// if not i then
32656: LD_VAR 0 5
32660: NOT
32661: IFFALSE 32665
// exit ;
32663: GO 32731
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32665: LD_ADDR_VAR 0 1
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: LD_VAR 0 2
32679: PPUSH
32680: LD_VAR 0 1
32684: PUSH
32685: LD_VAR 0 3
32689: ARRAY
32690: PPUSH
32691: CALL_OW 1
32695: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32696: LD_ADDR_VAR 0 1
32700: PUSH
32701: LD_VAR 0 1
32705: PPUSH
32706: LD_VAR 0 3
32710: PPUSH
32711: LD_VAR 0 5
32715: PPUSH
32716: CALL_OW 1
32720: ST_TO_ADDR
// result := list ;
32721: LD_ADDR_VAR 0 4
32725: PUSH
32726: LD_VAR 0 1
32730: ST_TO_ADDR
// end ;
32731: LD_VAR 0 4
32735: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32736: LD_INT 0
32738: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32739: LD_ADDR_VAR 0 5
32743: PUSH
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 250
32753: PPUSH
32754: LD_VAR 0 1
32758: PPUSH
32759: CALL_OW 251
32763: PPUSH
32764: LD_VAR 0 2
32768: PPUSH
32769: LD_VAR 0 3
32773: PPUSH
32774: LD_VAR 0 4
32778: PPUSH
32779: CALL 32789 0 5
32783: ST_TO_ADDR
// end ;
32784: LD_VAR 0 5
32788: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32789: LD_INT 0
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
// if not list then
32795: LD_VAR 0 3
32799: NOT
32800: IFFALSE 32804
// exit ;
32802: GO 33192
// result := [ ] ;
32804: LD_ADDR_VAR 0 6
32808: PUSH
32809: EMPTY
32810: ST_TO_ADDR
// for i in list do
32811: LD_ADDR_VAR 0 7
32815: PUSH
32816: LD_VAR 0 3
32820: PUSH
32821: FOR_IN
32822: IFFALSE 33024
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32824: LD_ADDR_VAR 0 9
32828: PUSH
32829: LD_VAR 0 7
32833: PPUSH
32834: LD_VAR 0 1
32838: PPUSH
32839: LD_VAR 0 2
32843: PPUSH
32844: CALL_OW 297
32848: ST_TO_ADDR
// if not result then
32849: LD_VAR 0 6
32853: NOT
32854: IFFALSE 32880
// result := [ [ i , tmp ] ] else
32856: LD_ADDR_VAR 0 6
32860: PUSH
32861: LD_VAR 0 7
32865: PUSH
32866: LD_VAR 0 9
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: ST_TO_ADDR
32878: GO 33022
// begin if result [ result ] [ 2 ] < tmp then
32880: LD_VAR 0 6
32884: PUSH
32885: LD_VAR 0 6
32889: ARRAY
32890: PUSH
32891: LD_INT 2
32893: ARRAY
32894: PUSH
32895: LD_VAR 0 9
32899: LESS
32900: IFFALSE 32942
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32902: LD_ADDR_VAR 0 6
32906: PUSH
32907: LD_VAR 0 6
32911: PPUSH
32912: LD_VAR 0 6
32916: PUSH
32917: LD_INT 1
32919: PLUS
32920: PPUSH
32921: LD_VAR 0 7
32925: PUSH
32926: LD_VAR 0 9
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PPUSH
32935: CALL_OW 2
32939: ST_TO_ADDR
32940: GO 33022
// for j = 1 to result do
32942: LD_ADDR_VAR 0 8
32946: PUSH
32947: DOUBLE
32948: LD_INT 1
32950: DEC
32951: ST_TO_ADDR
32952: LD_VAR 0 6
32956: PUSH
32957: FOR_TO
32958: IFFALSE 33020
// begin if tmp < result [ j ] [ 2 ] then
32960: LD_VAR 0 9
32964: PUSH
32965: LD_VAR 0 6
32969: PUSH
32970: LD_VAR 0 8
32974: ARRAY
32975: PUSH
32976: LD_INT 2
32978: ARRAY
32979: LESS
32980: IFFALSE 33018
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32982: LD_ADDR_VAR 0 6
32986: PUSH
32987: LD_VAR 0 6
32991: PPUSH
32992: LD_VAR 0 8
32996: PPUSH
32997: LD_VAR 0 7
33001: PUSH
33002: LD_VAR 0 9
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PPUSH
33011: CALL_OW 2
33015: ST_TO_ADDR
// break ;
33016: GO 33020
// end ; end ;
33018: GO 32957
33020: POP
33021: POP
// end ; end ;
33022: GO 32821
33024: POP
33025: POP
// if result and not asc then
33026: LD_VAR 0 6
33030: PUSH
33031: LD_VAR 0 4
33035: NOT
33036: AND
33037: IFFALSE 33112
// begin tmp := result ;
33039: LD_ADDR_VAR 0 9
33043: PUSH
33044: LD_VAR 0 6
33048: ST_TO_ADDR
// for i = tmp downto 1 do
33049: LD_ADDR_VAR 0 7
33053: PUSH
33054: DOUBLE
33055: LD_VAR 0 9
33059: INC
33060: ST_TO_ADDR
33061: LD_INT 1
33063: PUSH
33064: FOR_DOWNTO
33065: IFFALSE 33110
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33067: LD_ADDR_VAR 0 6
33071: PUSH
33072: LD_VAR 0 6
33076: PPUSH
33077: LD_VAR 0 9
33081: PUSH
33082: LD_VAR 0 7
33086: MINUS
33087: PUSH
33088: LD_INT 1
33090: PLUS
33091: PPUSH
33092: LD_VAR 0 9
33096: PUSH
33097: LD_VAR 0 7
33101: ARRAY
33102: PPUSH
33103: CALL_OW 1
33107: ST_TO_ADDR
33108: GO 33064
33110: POP
33111: POP
// end ; tmp := [ ] ;
33112: LD_ADDR_VAR 0 9
33116: PUSH
33117: EMPTY
33118: ST_TO_ADDR
// if mode then
33119: LD_VAR 0 5
33123: IFFALSE 33192
// begin for i = 1 to result do
33125: LD_ADDR_VAR 0 7
33129: PUSH
33130: DOUBLE
33131: LD_INT 1
33133: DEC
33134: ST_TO_ADDR
33135: LD_VAR 0 6
33139: PUSH
33140: FOR_TO
33141: IFFALSE 33180
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33143: LD_ADDR_VAR 0 9
33147: PUSH
33148: LD_VAR 0 9
33152: PPUSH
33153: LD_VAR 0 7
33157: PPUSH
33158: LD_VAR 0 6
33162: PUSH
33163: LD_VAR 0 7
33167: ARRAY
33168: PUSH
33169: LD_INT 1
33171: ARRAY
33172: PPUSH
33173: CALL_OW 1
33177: ST_TO_ADDR
33178: GO 33140
33180: POP
33181: POP
// result := tmp ;
33182: LD_ADDR_VAR 0 6
33186: PUSH
33187: LD_VAR 0 9
33191: ST_TO_ADDR
// end ; end ;
33192: LD_VAR 0 6
33196: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33197: LD_INT 0
33199: PPUSH
33200: PPUSH
33201: PPUSH
33202: PPUSH
33203: PPUSH
33204: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33205: LD_ADDR_VAR 0 5
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: ST_TO_ADDR
// if not x or not y then
33227: LD_VAR 0 2
33231: NOT
33232: PUSH
33233: LD_VAR 0 3
33237: NOT
33238: OR
33239: IFFALSE 33243
// exit ;
33241: GO 34895
// if not range then
33243: LD_VAR 0 4
33247: NOT
33248: IFFALSE 33258
// range := 10 ;
33250: LD_ADDR_VAR 0 4
33254: PUSH
33255: LD_INT 10
33257: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33258: LD_ADDR_VAR 0 8
33262: PUSH
33263: LD_INT 81
33265: PUSH
33266: LD_VAR 0 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 92
33277: PUSH
33278: LD_VAR 0 2
33282: PUSH
33283: LD_VAR 0 3
33287: PUSH
33288: LD_VAR 0 4
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 3
33301: PUSH
33302: LD_INT 21
33304: PUSH
33305: LD_INT 3
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: PPUSH
33321: CALL_OW 69
33325: ST_TO_ADDR
// if not tmp then
33326: LD_VAR 0 8
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 34895
// for i in tmp do
33335: LD_ADDR_VAR 0 6
33339: PUSH
33340: LD_VAR 0 8
33344: PUSH
33345: FOR_IN
33346: IFFALSE 34870
// begin points := [ 0 , 0 , 0 ] ;
33348: LD_ADDR_VAR 0 9
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
// bpoints := 1 ;
33367: LD_ADDR_VAR 0 10
33371: PUSH
33372: LD_INT 1
33374: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33375: LD_VAR 0 6
33379: PPUSH
33380: CALL_OW 247
33384: PUSH
33385: LD_INT 1
33387: DOUBLE
33388: EQUAL
33389: IFTRUE 33393
33391: GO 33971
33393: POP
// begin if GetClass ( i ) = 1 then
33394: LD_VAR 0 6
33398: PPUSH
33399: CALL_OW 257
33403: PUSH
33404: LD_INT 1
33406: EQUAL
33407: IFFALSE 33428
// points := [ 10 , 5 , 3 ] ;
33409: LD_ADDR_VAR 0 9
33413: PUSH
33414: LD_INT 10
33416: PUSH
33417: LD_INT 5
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33428: LD_VAR 0 6
33432: PPUSH
33433: CALL_OW 257
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: LD_INT 4
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: IN
33452: IFFALSE 33473
// points := [ 3 , 2 , 1 ] ;
33454: LD_ADDR_VAR 0 9
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33473: LD_VAR 0 6
33477: PPUSH
33478: CALL_OW 257
33482: PUSH
33483: LD_INT 5
33485: EQUAL
33486: IFFALSE 33507
// points := [ 130 , 5 , 2 ] ;
33488: LD_ADDR_VAR 0 9
33492: PUSH
33493: LD_INT 130
33495: PUSH
33496: LD_INT 5
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33507: LD_VAR 0 6
33511: PPUSH
33512: CALL_OW 257
33516: PUSH
33517: LD_INT 8
33519: EQUAL
33520: IFFALSE 33541
// points := [ 35 , 35 , 30 ] ;
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_INT 35
33529: PUSH
33530: LD_INT 35
33532: PUSH
33533: LD_INT 30
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33541: LD_VAR 0 6
33545: PPUSH
33546: CALL_OW 257
33550: PUSH
33551: LD_INT 9
33553: EQUAL
33554: IFFALSE 33575
// points := [ 20 , 55 , 40 ] ;
33556: LD_ADDR_VAR 0 9
33560: PUSH
33561: LD_INT 20
33563: PUSH
33564: LD_INT 55
33566: PUSH
33567: LD_INT 40
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33575: LD_VAR 0 6
33579: PPUSH
33580: CALL_OW 257
33584: PUSH
33585: LD_INT 12
33587: PUSH
33588: LD_INT 16
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: IN
33595: IFFALSE 33616
// points := [ 5 , 3 , 2 ] ;
33597: LD_ADDR_VAR 0 9
33601: PUSH
33602: LD_INT 5
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33616: LD_VAR 0 6
33620: PPUSH
33621: CALL_OW 257
33625: PUSH
33626: LD_INT 17
33628: EQUAL
33629: IFFALSE 33650
// points := [ 100 , 50 , 75 ] ;
33631: LD_ADDR_VAR 0 9
33635: PUSH
33636: LD_INT 100
33638: PUSH
33639: LD_INT 50
33641: PUSH
33642: LD_INT 75
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33650: LD_VAR 0 6
33654: PPUSH
33655: CALL_OW 257
33659: PUSH
33660: LD_INT 15
33662: EQUAL
33663: IFFALSE 33684
// points := [ 10 , 5 , 3 ] ;
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_INT 10
33672: PUSH
33673: LD_INT 5
33675: PUSH
33676: LD_INT 3
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33684: LD_VAR 0 6
33688: PPUSH
33689: CALL_OW 257
33693: PUSH
33694: LD_INT 14
33696: EQUAL
33697: IFFALSE 33718
// points := [ 10 , 0 , 0 ] ;
33699: LD_ADDR_VAR 0 9
33703: PUSH
33704: LD_INT 10
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33718: LD_VAR 0 6
33722: PPUSH
33723: CALL_OW 257
33727: PUSH
33728: LD_INT 11
33730: EQUAL
33731: IFFALSE 33752
// points := [ 30 , 10 , 5 ] ;
33733: LD_ADDR_VAR 0 9
33737: PUSH
33738: LD_INT 30
33740: PUSH
33741: LD_INT 10
33743: PUSH
33744: LD_INT 5
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33752: LD_VAR 0 1
33756: PPUSH
33757: LD_INT 5
33759: PPUSH
33760: CALL_OW 321
33764: PUSH
33765: LD_INT 2
33767: EQUAL
33768: IFFALSE 33785
// bpoints := bpoints * 1.8 ;
33770: LD_ADDR_VAR 0 10
33774: PUSH
33775: LD_VAR 0 10
33779: PUSH
33780: LD_REAL  1.80000000000000E+0000
33783: MUL
33784: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33785: LD_VAR 0 6
33789: PPUSH
33790: CALL_OW 257
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: LD_INT 3
33803: PUSH
33804: LD_INT 4
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: IN
33813: PUSH
33814: LD_VAR 0 1
33818: PPUSH
33819: LD_INT 51
33821: PPUSH
33822: CALL_OW 321
33826: PUSH
33827: LD_INT 2
33829: EQUAL
33830: AND
33831: IFFALSE 33848
// bpoints := bpoints * 1.2 ;
33833: LD_ADDR_VAR 0 10
33837: PUSH
33838: LD_VAR 0 10
33842: PUSH
33843: LD_REAL  1.20000000000000E+0000
33846: MUL
33847: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33848: LD_VAR 0 6
33852: PPUSH
33853: CALL_OW 257
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: LD_INT 7
33863: PUSH
33864: LD_INT 9
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: IN
33872: PUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: LD_INT 52
33880: PPUSH
33881: CALL_OW 321
33885: PUSH
33886: LD_INT 2
33888: EQUAL
33889: AND
33890: IFFALSE 33907
// bpoints := bpoints * 1.5 ;
33892: LD_ADDR_VAR 0 10
33896: PUSH
33897: LD_VAR 0 10
33901: PUSH
33902: LD_REAL  1.50000000000000E+0000
33905: MUL
33906: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33907: LD_VAR 0 1
33911: PPUSH
33912: LD_INT 66
33914: PPUSH
33915: CALL_OW 321
33919: PUSH
33920: LD_INT 2
33922: EQUAL
33923: IFFALSE 33940
// bpoints := bpoints * 1.1 ;
33925: LD_ADDR_VAR 0 10
33929: PUSH
33930: LD_VAR 0 10
33934: PUSH
33935: LD_REAL  1.10000000000000E+0000
33938: MUL
33939: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33940: LD_ADDR_VAR 0 10
33944: PUSH
33945: LD_VAR 0 10
33949: PUSH
33950: LD_VAR 0 6
33954: PPUSH
33955: LD_INT 1
33957: PPUSH
33958: CALL_OW 259
33962: PUSH
33963: LD_REAL  1.15000000000000E+0000
33966: MUL
33967: MUL
33968: ST_TO_ADDR
// end ; unit_vehicle :
33969: GO 34799
33971: LD_INT 2
33973: DOUBLE
33974: EQUAL
33975: IFTRUE 33979
33977: GO 34787
33979: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33980: LD_VAR 0 6
33984: PPUSH
33985: CALL_OW 264
33989: PUSH
33990: LD_INT 2
33992: PUSH
33993: LD_INT 42
33995: PUSH
33996: LD_INT 24
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: IN
34004: IFFALSE 34025
// points := [ 25 , 5 , 3 ] ;
34006: LD_ADDR_VAR 0 9
34010: PUSH
34011: LD_INT 25
34013: PUSH
34014: LD_INT 5
34016: PUSH
34017: LD_INT 3
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34025: LD_VAR 0 6
34029: PPUSH
34030: CALL_OW 264
34034: PUSH
34035: LD_INT 4
34037: PUSH
34038: LD_INT 43
34040: PUSH
34041: LD_INT 25
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: IN
34049: IFFALSE 34070
// points := [ 40 , 15 , 5 ] ;
34051: LD_ADDR_VAR 0 9
34055: PUSH
34056: LD_INT 40
34058: PUSH
34059: LD_INT 15
34061: PUSH
34062: LD_INT 5
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34070: LD_VAR 0 6
34074: PPUSH
34075: CALL_OW 264
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: LD_INT 23
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: IN
34090: IFFALSE 34111
// points := [ 7 , 25 , 8 ] ;
34092: LD_ADDR_VAR 0 9
34096: PUSH
34097: LD_INT 7
34099: PUSH
34100: LD_INT 25
34102: PUSH
34103: LD_INT 8
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34111: LD_VAR 0 6
34115: PPUSH
34116: CALL_OW 264
34120: PUSH
34121: LD_INT 5
34123: PUSH
34124: LD_INT 27
34126: PUSH
34127: LD_INT 44
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: IN
34135: IFFALSE 34156
// points := [ 14 , 50 , 16 ] ;
34137: LD_ADDR_VAR 0 9
34141: PUSH
34142: LD_INT 14
34144: PUSH
34145: LD_INT 50
34147: PUSH
34148: LD_INT 16
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34156: LD_VAR 0 6
34160: PPUSH
34161: CALL_OW 264
34165: PUSH
34166: LD_INT 6
34168: PUSH
34169: LD_INT 46
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: IN
34176: IFFALSE 34197
// points := [ 32 , 120 , 70 ] ;
34178: LD_ADDR_VAR 0 9
34182: PUSH
34183: LD_INT 32
34185: PUSH
34186: LD_INT 120
34188: PUSH
34189: LD_INT 70
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34197: LD_VAR 0 6
34201: PPUSH
34202: CALL_OW 264
34206: PUSH
34207: LD_INT 7
34209: PUSH
34210: LD_INT 28
34212: PUSH
34213: LD_INT 45
34215: PUSH
34216: LD_EXP 98
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: IN
34227: IFFALSE 34248
// points := [ 35 , 20 , 45 ] ;
34229: LD_ADDR_VAR 0 9
34233: PUSH
34234: LD_INT 35
34236: PUSH
34237: LD_INT 20
34239: PUSH
34240: LD_INT 45
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34248: LD_VAR 0 6
34252: PPUSH
34253: CALL_OW 264
34257: PUSH
34258: LD_INT 47
34260: PUSH
34261: EMPTY
34262: LIST
34263: IN
34264: IFFALSE 34285
// points := [ 67 , 45 , 75 ] ;
34266: LD_ADDR_VAR 0 9
34270: PUSH
34271: LD_INT 67
34273: PUSH
34274: LD_INT 45
34276: PUSH
34277: LD_INT 75
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34285: LD_VAR 0 6
34289: PPUSH
34290: CALL_OW 264
34294: PUSH
34295: LD_INT 26
34297: PUSH
34298: EMPTY
34299: LIST
34300: IN
34301: IFFALSE 34322
// points := [ 120 , 30 , 80 ] ;
34303: LD_ADDR_VAR 0 9
34307: PUSH
34308: LD_INT 120
34310: PUSH
34311: LD_INT 30
34313: PUSH
34314: LD_INT 80
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34322: LD_VAR 0 6
34326: PPUSH
34327: CALL_OW 264
34331: PUSH
34332: LD_INT 22
34334: PUSH
34335: EMPTY
34336: LIST
34337: IN
34338: IFFALSE 34359
// points := [ 40 , 1 , 1 ] ;
34340: LD_ADDR_VAR 0 9
34344: PUSH
34345: LD_INT 40
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34359: LD_VAR 0 6
34363: PPUSH
34364: CALL_OW 264
34368: PUSH
34369: LD_INT 29
34371: PUSH
34372: EMPTY
34373: LIST
34374: IN
34375: IFFALSE 34396
// points := [ 70 , 200 , 400 ] ;
34377: LD_ADDR_VAR 0 9
34381: PUSH
34382: LD_INT 70
34384: PUSH
34385: LD_INT 200
34387: PUSH
34388: LD_INT 400
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34396: LD_VAR 0 6
34400: PPUSH
34401: CALL_OW 264
34405: PUSH
34406: LD_INT 14
34408: PUSH
34409: LD_INT 53
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: IN
34416: IFFALSE 34437
// points := [ 40 , 10 , 20 ] ;
34418: LD_ADDR_VAR 0 9
34422: PUSH
34423: LD_INT 40
34425: PUSH
34426: LD_INT 10
34428: PUSH
34429: LD_INT 20
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34437: LD_VAR 0 6
34441: PPUSH
34442: CALL_OW 264
34446: PUSH
34447: LD_INT 9
34449: PUSH
34450: EMPTY
34451: LIST
34452: IN
34453: IFFALSE 34474
// points := [ 5 , 70 , 20 ] ;
34455: LD_ADDR_VAR 0 9
34459: PUSH
34460: LD_INT 5
34462: PUSH
34463: LD_INT 70
34465: PUSH
34466: LD_INT 20
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34474: LD_VAR 0 6
34478: PPUSH
34479: CALL_OW 264
34483: PUSH
34484: LD_INT 10
34486: PUSH
34487: EMPTY
34488: LIST
34489: IN
34490: IFFALSE 34511
// points := [ 35 , 110 , 70 ] ;
34492: LD_ADDR_VAR 0 9
34496: PUSH
34497: LD_INT 35
34499: PUSH
34500: LD_INT 110
34502: PUSH
34503: LD_INT 70
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: LIST
34510: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34511: LD_VAR 0 6
34515: PPUSH
34516: CALL_OW 265
34520: PUSH
34521: LD_INT 25
34523: EQUAL
34524: IFFALSE 34545
// points := [ 80 , 65 , 100 ] ;
34526: LD_ADDR_VAR 0 9
34530: PUSH
34531: LD_INT 80
34533: PUSH
34534: LD_INT 65
34536: PUSH
34537: LD_INT 100
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34545: LD_VAR 0 6
34549: PPUSH
34550: CALL_OW 263
34554: PUSH
34555: LD_INT 1
34557: EQUAL
34558: IFFALSE 34593
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34560: LD_ADDR_VAR 0 10
34564: PUSH
34565: LD_VAR 0 10
34569: PUSH
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 311
34579: PPUSH
34580: LD_INT 3
34582: PPUSH
34583: CALL_OW 259
34587: PUSH
34588: LD_INT 4
34590: MUL
34591: MUL
34592: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34593: LD_VAR 0 6
34597: PPUSH
34598: CALL_OW 263
34602: PUSH
34603: LD_INT 2
34605: EQUAL
34606: IFFALSE 34657
// begin j := IsControledBy ( i ) ;
34608: LD_ADDR_VAR 0 7
34612: PUSH
34613: LD_VAR 0 6
34617: PPUSH
34618: CALL_OW 312
34622: ST_TO_ADDR
// if j then
34623: LD_VAR 0 7
34627: IFFALSE 34657
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34629: LD_ADDR_VAR 0 10
34633: PUSH
34634: LD_VAR 0 10
34638: PUSH
34639: LD_VAR 0 7
34643: PPUSH
34644: LD_INT 3
34646: PPUSH
34647: CALL_OW 259
34651: PUSH
34652: LD_INT 3
34654: MUL
34655: MUL
34656: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34657: LD_VAR 0 6
34661: PPUSH
34662: CALL_OW 264
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: LD_INT 6
34672: PUSH
34673: LD_INT 46
34675: PUSH
34676: LD_INT 44
34678: PUSH
34679: LD_INT 47
34681: PUSH
34682: LD_INT 45
34684: PUSH
34685: LD_INT 28
34687: PUSH
34688: LD_INT 7
34690: PUSH
34691: LD_INT 27
34693: PUSH
34694: LD_INT 29
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: IN
34709: PUSH
34710: LD_VAR 0 1
34714: PPUSH
34715: LD_INT 52
34717: PPUSH
34718: CALL_OW 321
34722: PUSH
34723: LD_INT 2
34725: EQUAL
34726: AND
34727: IFFALSE 34744
// bpoints := bpoints * 1.2 ;
34729: LD_ADDR_VAR 0 10
34733: PUSH
34734: LD_VAR 0 10
34738: PUSH
34739: LD_REAL  1.20000000000000E+0000
34742: MUL
34743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34744: LD_VAR 0 6
34748: PPUSH
34749: CALL_OW 264
34753: PUSH
34754: LD_INT 6
34756: PUSH
34757: LD_INT 46
34759: PUSH
34760: LD_INT 47
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: IN
34768: IFFALSE 34785
// bpoints := bpoints * 1.2 ;
34770: LD_ADDR_VAR 0 10
34774: PUSH
34775: LD_VAR 0 10
34779: PUSH
34780: LD_REAL  1.20000000000000E+0000
34783: MUL
34784: ST_TO_ADDR
// end ; unit_building :
34785: GO 34799
34787: LD_INT 3
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34798
34795: POP
// ; end ;
34796: GO 34799
34798: POP
// for j = 1 to 3 do
34799: LD_ADDR_VAR 0 7
34803: PUSH
34804: DOUBLE
34805: LD_INT 1
34807: DEC
34808: ST_TO_ADDR
34809: LD_INT 3
34811: PUSH
34812: FOR_TO
34813: IFFALSE 34866
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34815: LD_ADDR_VAR 0 5
34819: PUSH
34820: LD_VAR 0 5
34824: PPUSH
34825: LD_VAR 0 7
34829: PPUSH
34830: LD_VAR 0 5
34834: PUSH
34835: LD_VAR 0 7
34839: ARRAY
34840: PUSH
34841: LD_VAR 0 9
34845: PUSH
34846: LD_VAR 0 7
34850: ARRAY
34851: PUSH
34852: LD_VAR 0 10
34856: MUL
34857: PLUS
34858: PPUSH
34859: CALL_OW 1
34863: ST_TO_ADDR
34864: GO 34812
34866: POP
34867: POP
// end ;
34868: GO 33345
34870: POP
34871: POP
// result := Replace ( result , 4 , tmp ) ;
34872: LD_ADDR_VAR 0 5
34876: PUSH
34877: LD_VAR 0 5
34881: PPUSH
34882: LD_INT 4
34884: PPUSH
34885: LD_VAR 0 8
34889: PPUSH
34890: CALL_OW 1
34894: ST_TO_ADDR
// end ;
34895: LD_VAR 0 5
34899: RET
// export function DangerAtRange ( unit , range ) ; begin
34900: LD_INT 0
34902: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34903: LD_ADDR_VAR 0 3
34907: PUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL_OW 255
34917: PPUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 250
34927: PPUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 251
34937: PPUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: CALL 33197 0 4
34947: ST_TO_ADDR
// end ;
34948: LD_VAR 0 3
34952: RET
// export function DangerInArea ( side , area ) ; begin
34953: LD_INT 0
34955: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_VAR 0 2
34965: PPUSH
34966: LD_INT 81
34968: PUSH
34969: LD_VAR 0 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PPUSH
34978: CALL_OW 70
34982: ST_TO_ADDR
// end ;
34983: LD_VAR 0 3
34987: RET
// export function IsExtension ( b ) ; begin
34988: LD_INT 0
34990: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34991: LD_ADDR_VAR 0 2
34995: PUSH
34996: LD_VAR 0 1
35000: PUSH
35001: LD_INT 23
35003: PUSH
35004: LD_INT 20
35006: PUSH
35007: LD_INT 22
35009: PUSH
35010: LD_INT 17
35012: PUSH
35013: LD_INT 24
35015: PUSH
35016: LD_INT 21
35018: PUSH
35019: LD_INT 19
35021: PUSH
35022: LD_INT 16
35024: PUSH
35025: LD_INT 25
35027: PUSH
35028: LD_INT 18
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: IN
35043: ST_TO_ADDR
// end ;
35044: LD_VAR 0 2
35048: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35049: LD_INT 0
35051: PPUSH
35052: PPUSH
35053: PPUSH
// result := [ ] ;
35054: LD_ADDR_VAR 0 4
35058: PUSH
35059: EMPTY
35060: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35061: LD_ADDR_VAR 0 5
35065: PUSH
35066: LD_VAR 0 2
35070: PPUSH
35071: LD_INT 21
35073: PUSH
35074: LD_INT 3
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PPUSH
35081: CALL_OW 70
35085: ST_TO_ADDR
// if not tmp then
35086: LD_VAR 0 5
35090: NOT
35091: IFFALSE 35095
// exit ;
35093: GO 35159
// if checkLink then
35095: LD_VAR 0 3
35099: IFFALSE 35149
// begin for i in tmp do
35101: LD_ADDR_VAR 0 6
35105: PUSH
35106: LD_VAR 0 5
35110: PUSH
35111: FOR_IN
35112: IFFALSE 35147
// if GetBase ( i ) <> base then
35114: LD_VAR 0 6
35118: PPUSH
35119: CALL_OW 274
35123: PUSH
35124: LD_VAR 0 1
35128: NONEQUAL
35129: IFFALSE 35145
// ComLinkToBase ( base , i ) ;
35131: LD_VAR 0 1
35135: PPUSH
35136: LD_VAR 0 6
35140: PPUSH
35141: CALL_OW 169
35145: GO 35111
35147: POP
35148: POP
// end ; result := tmp ;
35149: LD_ADDR_VAR 0 4
35153: PUSH
35154: LD_VAR 0 5
35158: ST_TO_ADDR
// end ;
35159: LD_VAR 0 4
35163: RET
// export function ComComplete ( units , b ) ; var i ; begin
35164: LD_INT 0
35166: PPUSH
35167: PPUSH
// if not units then
35168: LD_VAR 0 1
35172: NOT
35173: IFFALSE 35177
// exit ;
35175: GO 35267
// for i in units do
35177: LD_ADDR_VAR 0 4
35181: PUSH
35182: LD_VAR 0 1
35186: PUSH
35187: FOR_IN
35188: IFFALSE 35265
// if BuildingStatus ( b ) = bs_build then
35190: LD_VAR 0 2
35194: PPUSH
35195: CALL_OW 461
35199: PUSH
35200: LD_INT 1
35202: EQUAL
35203: IFFALSE 35263
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35205: LD_VAR 0 4
35209: PPUSH
35210: LD_STRING h
35212: PUSH
35213: LD_VAR 0 2
35217: PPUSH
35218: CALL_OW 250
35222: PUSH
35223: LD_VAR 0 2
35227: PPUSH
35228: CALL_OW 251
35232: PUSH
35233: LD_VAR 0 2
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: PUSH
35256: EMPTY
35257: LIST
35258: PPUSH
35259: CALL_OW 446
35263: GO 35187
35265: POP
35266: POP
// end ;
35267: LD_VAR 0 3
35271: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35272: LD_INT 0
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35280: LD_VAR 0 1
35284: NOT
35285: PUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL_OW 263
35295: PUSH
35296: LD_INT 2
35298: NONEQUAL
35299: OR
35300: IFFALSE 35304
// exit ;
35302: GO 35620
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35304: LD_ADDR_VAR 0 6
35308: PUSH
35309: LD_INT 22
35311: PUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: CALL_OW 255
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: LD_INT 30
35331: PUSH
35332: LD_INT 36
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 34
35341: PUSH
35342: LD_INT 31
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PPUSH
35358: CALL_OW 69
35362: ST_TO_ADDR
// if not tmp then
35363: LD_VAR 0 6
35367: NOT
35368: IFFALSE 35372
// exit ;
35370: GO 35620
// result := [ ] ;
35372: LD_ADDR_VAR 0 2
35376: PUSH
35377: EMPTY
35378: ST_TO_ADDR
// for i in tmp do
35379: LD_ADDR_VAR 0 3
35383: PUSH
35384: LD_VAR 0 6
35388: PUSH
35389: FOR_IN
35390: IFFALSE 35461
// begin t := UnitsInside ( i ) ;
35392: LD_ADDR_VAR 0 4
35396: PUSH
35397: LD_VAR 0 3
35401: PPUSH
35402: CALL_OW 313
35406: ST_TO_ADDR
// if t then
35407: LD_VAR 0 4
35411: IFFALSE 35459
// for j in t do
35413: LD_ADDR_VAR 0 7
35417: PUSH
35418: LD_VAR 0 4
35422: PUSH
35423: FOR_IN
35424: IFFALSE 35457
// result := Replace ( result , result + 1 , j ) ;
35426: LD_ADDR_VAR 0 2
35430: PUSH
35431: LD_VAR 0 2
35435: PPUSH
35436: LD_VAR 0 2
35440: PUSH
35441: LD_INT 1
35443: PLUS
35444: PPUSH
35445: LD_VAR 0 7
35449: PPUSH
35450: CALL_OW 1
35454: ST_TO_ADDR
35455: GO 35423
35457: POP
35458: POP
// end ;
35459: GO 35389
35461: POP
35462: POP
// if not result then
35463: LD_VAR 0 2
35467: NOT
35468: IFFALSE 35472
// exit ;
35470: GO 35620
// mech := result [ 1 ] ;
35472: LD_ADDR_VAR 0 5
35476: PUSH
35477: LD_VAR 0 2
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: ST_TO_ADDR
// if result > 1 then
35486: LD_VAR 0 2
35490: PUSH
35491: LD_INT 1
35493: GREATER
35494: IFFALSE 35606
// begin for i = 2 to result do
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: DOUBLE
35502: LD_INT 2
35504: DEC
35505: ST_TO_ADDR
35506: LD_VAR 0 2
35510: PUSH
35511: FOR_TO
35512: IFFALSE 35604
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35514: LD_ADDR_VAR 0 4
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_VAR 0 3
35528: ARRAY
35529: PPUSH
35530: LD_INT 3
35532: PPUSH
35533: CALL_OW 259
35537: PUSH
35538: LD_VAR 0 2
35542: PUSH
35543: LD_VAR 0 3
35547: ARRAY
35548: PPUSH
35549: CALL_OW 432
35553: MINUS
35554: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35555: LD_VAR 0 4
35559: PUSH
35560: LD_VAR 0 5
35564: PPUSH
35565: LD_INT 3
35567: PPUSH
35568: CALL_OW 259
35572: PUSH
35573: LD_VAR 0 5
35577: PPUSH
35578: CALL_OW 432
35582: MINUS
35583: GREATEREQUAL
35584: IFFALSE 35602
// mech := result [ i ] ;
35586: LD_ADDR_VAR 0 5
35590: PUSH
35591: LD_VAR 0 2
35595: PUSH
35596: LD_VAR 0 3
35600: ARRAY
35601: ST_TO_ADDR
// end ;
35602: GO 35511
35604: POP
35605: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35606: LD_VAR 0 1
35610: PPUSH
35611: LD_VAR 0 5
35615: PPUSH
35616: CALL_OW 135
// end ;
35620: LD_VAR 0 2
35624: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35625: LD_INT 0
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
// result := [ ] ;
35640: LD_ADDR_VAR 0 7
35644: PUSH
35645: EMPTY
35646: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 266
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: IN
35667: NOT
35668: IFFALSE 35672
// exit ;
35670: GO 37306
// if name then
35672: LD_VAR 0 3
35676: IFFALSE 35692
// SetBName ( base_dep , name ) ;
35678: LD_VAR 0 1
35682: PPUSH
35683: LD_VAR 0 3
35687: PPUSH
35688: CALL_OW 500
// base := GetBase ( base_dep ) ;
35692: LD_ADDR_VAR 0 15
35696: PUSH
35697: LD_VAR 0 1
35701: PPUSH
35702: CALL_OW 274
35706: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35707: LD_ADDR_VAR 0 16
35711: PUSH
35712: LD_VAR 0 1
35716: PPUSH
35717: CALL_OW 255
35721: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35722: LD_ADDR_VAR 0 17
35726: PUSH
35727: LD_VAR 0 1
35731: PPUSH
35732: CALL_OW 248
35736: ST_TO_ADDR
// if sources then
35737: LD_VAR 0 5
35741: IFFALSE 35788
// for i = 1 to 3 do
35743: LD_ADDR_VAR 0 8
35747: PUSH
35748: DOUBLE
35749: LD_INT 1
35751: DEC
35752: ST_TO_ADDR
35753: LD_INT 3
35755: PUSH
35756: FOR_TO
35757: IFFALSE 35786
// AddResourceType ( base , i , sources [ i ] ) ;
35759: LD_VAR 0 15
35763: PPUSH
35764: LD_VAR 0 8
35768: PPUSH
35769: LD_VAR 0 5
35773: PUSH
35774: LD_VAR 0 8
35778: ARRAY
35779: PPUSH
35780: CALL_OW 276
35784: GO 35756
35786: POP
35787: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35788: LD_ADDR_VAR 0 18
35792: PUSH
35793: LD_VAR 0 15
35797: PPUSH
35798: LD_VAR 0 2
35802: PPUSH
35803: LD_INT 1
35805: PPUSH
35806: CALL 35049 0 3
35810: ST_TO_ADDR
// InitHc ;
35811: CALL_OW 19
// InitUc ;
35815: CALL_OW 18
// uc_side := side ;
35819: LD_ADDR_OWVAR 20
35823: PUSH
35824: LD_VAR 0 16
35828: ST_TO_ADDR
// uc_nation := nation ;
35829: LD_ADDR_OWVAR 21
35833: PUSH
35834: LD_VAR 0 17
35838: ST_TO_ADDR
// if buildings then
35839: LD_VAR 0 18
35843: IFFALSE 37165
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35845: LD_ADDR_VAR 0 19
35849: PUSH
35850: LD_VAR 0 18
35854: PPUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 30
35860: PUSH
35861: LD_INT 29
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 30
35870: PUSH
35871: LD_INT 30
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: PPUSH
35883: CALL_OW 72
35887: ST_TO_ADDR
// if tmp then
35888: LD_VAR 0 19
35892: IFFALSE 35940
// for i in tmp do
35894: LD_ADDR_VAR 0 8
35898: PUSH
35899: LD_VAR 0 19
35903: PUSH
35904: FOR_IN
35905: IFFALSE 35938
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35907: LD_VAR 0 8
35911: PPUSH
35912: CALL_OW 250
35916: PPUSH
35917: LD_VAR 0 8
35921: PPUSH
35922: CALL_OW 251
35926: PPUSH
35927: LD_VAR 0 16
35931: PPUSH
35932: CALL_OW 441
35936: GO 35904
35938: POP
35939: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35940: LD_VAR 0 18
35944: PPUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 30
35950: PUSH
35951: LD_INT 32
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 30
35960: PUSH
35961: LD_INT 33
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: PPUSH
35973: CALL_OW 72
35977: IFFALSE 36065
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35979: LD_ADDR_VAR 0 8
35983: PUSH
35984: LD_VAR 0 18
35988: PPUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 30
35994: PUSH
35995: LD_INT 32
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 30
36004: PUSH
36005: LD_INT 33
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: PPUSH
36017: CALL_OW 72
36021: PUSH
36022: FOR_IN
36023: IFFALSE 36063
// begin if not GetBWeapon ( i ) then
36025: LD_VAR 0 8
36029: PPUSH
36030: CALL_OW 269
36034: NOT
36035: IFFALSE 36061
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36037: LD_VAR 0 8
36041: PPUSH
36042: LD_VAR 0 8
36046: PPUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: CALL 37311 0 2
36056: PPUSH
36057: CALL_OW 431
// end ;
36061: GO 36022
36063: POP
36064: POP
// end ; for i = 1 to personel do
36065: LD_ADDR_VAR 0 8
36069: PUSH
36070: DOUBLE
36071: LD_INT 1
36073: DEC
36074: ST_TO_ADDR
36075: LD_VAR 0 6
36079: PUSH
36080: FOR_TO
36081: IFFALSE 37145
// begin if i > 4 then
36083: LD_VAR 0 8
36087: PUSH
36088: LD_INT 4
36090: GREATER
36091: IFFALSE 36095
// break ;
36093: GO 37145
// case i of 1 :
36095: LD_VAR 0 8
36099: PUSH
36100: LD_INT 1
36102: DOUBLE
36103: EQUAL
36104: IFTRUE 36108
36106: GO 36188
36108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36109: LD_ADDR_VAR 0 12
36113: PUSH
36114: LD_VAR 0 18
36118: PPUSH
36119: LD_INT 22
36121: PUSH
36122: LD_VAR 0 16
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 58
36133: PUSH
36134: EMPTY
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 30
36142: PUSH
36143: LD_INT 32
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 30
36152: PUSH
36153: LD_INT 4
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 30
36162: PUSH
36163: LD_INT 5
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: PPUSH
36181: CALL_OW 72
36185: ST_TO_ADDR
36186: GO 36410
36188: LD_INT 2
36190: DOUBLE
36191: EQUAL
36192: IFTRUE 36196
36194: GO 36258
36196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36197: LD_ADDR_VAR 0 12
36201: PUSH
36202: LD_VAR 0 18
36206: PPUSH
36207: LD_INT 22
36209: PUSH
36210: LD_VAR 0 16
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: LD_INT 30
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 30
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PPUSH
36251: CALL_OW 72
36255: ST_TO_ADDR
36256: GO 36410
36258: LD_INT 3
36260: DOUBLE
36261: EQUAL
36262: IFTRUE 36266
36264: GO 36328
36266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36267: LD_ADDR_VAR 0 12
36271: PUSH
36272: LD_VAR 0 18
36276: PPUSH
36277: LD_INT 22
36279: PUSH
36280: LD_VAR 0 16
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 30
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 30
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PPUSH
36321: CALL_OW 72
36325: ST_TO_ADDR
36326: GO 36410
36328: LD_INT 4
36330: DOUBLE
36331: EQUAL
36332: IFTRUE 36336
36334: GO 36409
36336: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36337: LD_ADDR_VAR 0 12
36341: PUSH
36342: LD_VAR 0 18
36346: PPUSH
36347: LD_INT 22
36349: PUSH
36350: LD_VAR 0 16
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 30
36364: PUSH
36365: LD_INT 6
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 30
36374: PUSH
36375: LD_INT 7
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 30
36384: PUSH
36385: LD_INT 8
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PPUSH
36402: CALL_OW 72
36406: ST_TO_ADDR
36407: GO 36410
36409: POP
// if i = 1 then
36410: LD_VAR 0 8
36414: PUSH
36415: LD_INT 1
36417: EQUAL
36418: IFFALSE 36529
// begin tmp := [ ] ;
36420: LD_ADDR_VAR 0 19
36424: PUSH
36425: EMPTY
36426: ST_TO_ADDR
// for j in f do
36427: LD_ADDR_VAR 0 9
36431: PUSH
36432: LD_VAR 0 12
36436: PUSH
36437: FOR_IN
36438: IFFALSE 36511
// if GetBType ( j ) = b_bunker then
36440: LD_VAR 0 9
36444: PPUSH
36445: CALL_OW 266
36449: PUSH
36450: LD_INT 32
36452: EQUAL
36453: IFFALSE 36480
// tmp := Insert ( tmp , 1 , j ) else
36455: LD_ADDR_VAR 0 19
36459: PUSH
36460: LD_VAR 0 19
36464: PPUSH
36465: LD_INT 1
36467: PPUSH
36468: LD_VAR 0 9
36472: PPUSH
36473: CALL_OW 2
36477: ST_TO_ADDR
36478: GO 36509
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36480: LD_ADDR_VAR 0 19
36484: PUSH
36485: LD_VAR 0 19
36489: PPUSH
36490: LD_VAR 0 19
36494: PUSH
36495: LD_INT 1
36497: PLUS
36498: PPUSH
36499: LD_VAR 0 9
36503: PPUSH
36504: CALL_OW 2
36508: ST_TO_ADDR
36509: GO 36437
36511: POP
36512: POP
// if tmp then
36513: LD_VAR 0 19
36517: IFFALSE 36529
// f := tmp ;
36519: LD_ADDR_VAR 0 12
36523: PUSH
36524: LD_VAR 0 19
36528: ST_TO_ADDR
// end ; x := personel [ i ] ;
36529: LD_ADDR_VAR 0 13
36533: PUSH
36534: LD_VAR 0 6
36538: PUSH
36539: LD_VAR 0 8
36543: ARRAY
36544: ST_TO_ADDR
// if x = - 1 then
36545: LD_VAR 0 13
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: EQUAL
36554: IFFALSE 36763
// begin for j in f do
36556: LD_ADDR_VAR 0 9
36560: PUSH
36561: LD_VAR 0 12
36565: PUSH
36566: FOR_IN
36567: IFFALSE 36759
// repeat InitHc ;
36569: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36573: LD_VAR 0 9
36577: PPUSH
36578: CALL_OW 266
36582: PUSH
36583: LD_INT 5
36585: EQUAL
36586: IFFALSE 36656
// begin if UnitsInside ( j ) < 3 then
36588: LD_VAR 0 9
36592: PPUSH
36593: CALL_OW 313
36597: PUSH
36598: LD_INT 3
36600: LESS
36601: IFFALSE 36637
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36603: LD_INT 0
36605: PPUSH
36606: LD_INT 5
36608: PUSH
36609: LD_INT 8
36611: PUSH
36612: LD_INT 9
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: PUSH
36620: LD_VAR 0 17
36624: ARRAY
36625: PPUSH
36626: LD_VAR 0 4
36630: PPUSH
36631: CALL_OW 380
36635: GO 36654
// PrepareHuman ( false , i , skill ) ;
36637: LD_INT 0
36639: PPUSH
36640: LD_VAR 0 8
36644: PPUSH
36645: LD_VAR 0 4
36649: PPUSH
36650: CALL_OW 380
// end else
36654: GO 36673
// PrepareHuman ( false , i , skill ) ;
36656: LD_INT 0
36658: PPUSH
36659: LD_VAR 0 8
36663: PPUSH
36664: LD_VAR 0 4
36668: PPUSH
36669: CALL_OW 380
// un := CreateHuman ;
36673: LD_ADDR_VAR 0 14
36677: PUSH
36678: CALL_OW 44
36682: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36683: LD_ADDR_VAR 0 7
36687: PUSH
36688: LD_VAR 0 7
36692: PPUSH
36693: LD_INT 1
36695: PPUSH
36696: LD_VAR 0 14
36700: PPUSH
36701: CALL_OW 2
36705: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36706: LD_VAR 0 14
36710: PPUSH
36711: LD_VAR 0 9
36715: PPUSH
36716: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36720: LD_VAR 0 9
36724: PPUSH
36725: CALL_OW 313
36729: PUSH
36730: LD_INT 6
36732: EQUAL
36733: PUSH
36734: LD_VAR 0 9
36738: PPUSH
36739: CALL_OW 266
36743: PUSH
36744: LD_INT 32
36746: PUSH
36747: LD_INT 31
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: IN
36754: OR
36755: IFFALSE 36569
36757: GO 36566
36759: POP
36760: POP
// end else
36761: GO 37143
// for j = 1 to x do
36763: LD_ADDR_VAR 0 9
36767: PUSH
36768: DOUBLE
36769: LD_INT 1
36771: DEC
36772: ST_TO_ADDR
36773: LD_VAR 0 13
36777: PUSH
36778: FOR_TO
36779: IFFALSE 37141
// begin InitHc ;
36781: CALL_OW 19
// if not f then
36785: LD_VAR 0 12
36789: NOT
36790: IFFALSE 36879
// begin PrepareHuman ( false , i , skill ) ;
36792: LD_INT 0
36794: PPUSH
36795: LD_VAR 0 8
36799: PPUSH
36800: LD_VAR 0 4
36804: PPUSH
36805: CALL_OW 380
// un := CreateHuman ;
36809: LD_ADDR_VAR 0 14
36813: PUSH
36814: CALL_OW 44
36818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36819: LD_ADDR_VAR 0 7
36823: PUSH
36824: LD_VAR 0 7
36828: PPUSH
36829: LD_INT 1
36831: PPUSH
36832: LD_VAR 0 14
36836: PPUSH
36837: CALL_OW 2
36841: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36842: LD_VAR 0 14
36846: PPUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 250
36856: PPUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 251
36866: PPUSH
36867: LD_INT 10
36869: PPUSH
36870: LD_INT 0
36872: PPUSH
36873: CALL_OW 50
// continue ;
36877: GO 36778
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36879: LD_VAR 0 12
36883: PUSH
36884: LD_INT 1
36886: ARRAY
36887: PPUSH
36888: CALL_OW 313
36892: PUSH
36893: LD_VAR 0 12
36897: PUSH
36898: LD_INT 1
36900: ARRAY
36901: PPUSH
36902: CALL_OW 266
36906: PUSH
36907: LD_INT 32
36909: PUSH
36910: LD_INT 31
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: IN
36917: AND
36918: PUSH
36919: LD_VAR 0 12
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PPUSH
36928: CALL_OW 313
36932: PUSH
36933: LD_INT 6
36935: EQUAL
36936: OR
36937: IFFALSE 36957
// f := Delete ( f , 1 ) ;
36939: LD_ADDR_VAR 0 12
36943: PUSH
36944: LD_VAR 0 12
36948: PPUSH
36949: LD_INT 1
36951: PPUSH
36952: CALL_OW 3
36956: ST_TO_ADDR
// if not f then
36957: LD_VAR 0 12
36961: NOT
36962: IFFALSE 36980
// begin x := x + 2 ;
36964: LD_ADDR_VAR 0 13
36968: PUSH
36969: LD_VAR 0 13
36973: PUSH
36974: LD_INT 2
36976: PLUS
36977: ST_TO_ADDR
// continue ;
36978: GO 36778
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36980: LD_VAR 0 12
36984: PUSH
36985: LD_INT 1
36987: ARRAY
36988: PPUSH
36989: CALL_OW 266
36993: PUSH
36994: LD_INT 5
36996: EQUAL
36997: IFFALSE 37071
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36999: LD_VAR 0 12
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: CALL_OW 313
37012: PUSH
37013: LD_INT 3
37015: LESS
37016: IFFALSE 37052
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37018: LD_INT 0
37020: PPUSH
37021: LD_INT 5
37023: PUSH
37024: LD_INT 8
37026: PUSH
37027: LD_INT 9
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: PUSH
37035: LD_VAR 0 17
37039: ARRAY
37040: PPUSH
37041: LD_VAR 0 4
37045: PPUSH
37046: CALL_OW 380
37050: GO 37069
// PrepareHuman ( false , i , skill ) ;
37052: LD_INT 0
37054: PPUSH
37055: LD_VAR 0 8
37059: PPUSH
37060: LD_VAR 0 4
37064: PPUSH
37065: CALL_OW 380
// end else
37069: GO 37088
// PrepareHuman ( false , i , skill ) ;
37071: LD_INT 0
37073: PPUSH
37074: LD_VAR 0 8
37078: PPUSH
37079: LD_VAR 0 4
37083: PPUSH
37084: CALL_OW 380
// un := CreateHuman ;
37088: LD_ADDR_VAR 0 14
37092: PUSH
37093: CALL_OW 44
37097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37098: LD_ADDR_VAR 0 7
37102: PUSH
37103: LD_VAR 0 7
37107: PPUSH
37108: LD_INT 1
37110: PPUSH
37111: LD_VAR 0 14
37115: PPUSH
37116: CALL_OW 2
37120: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37121: LD_VAR 0 14
37125: PPUSH
37126: LD_VAR 0 12
37130: PUSH
37131: LD_INT 1
37133: ARRAY
37134: PPUSH
37135: CALL_OW 52
// end ;
37139: GO 36778
37141: POP
37142: POP
// end ;
37143: GO 36080
37145: POP
37146: POP
// result := result ^ buildings ;
37147: LD_ADDR_VAR 0 7
37151: PUSH
37152: LD_VAR 0 7
37156: PUSH
37157: LD_VAR 0 18
37161: ADD
37162: ST_TO_ADDR
// end else
37163: GO 37306
// begin for i = 1 to personel do
37165: LD_ADDR_VAR 0 8
37169: PUSH
37170: DOUBLE
37171: LD_INT 1
37173: DEC
37174: ST_TO_ADDR
37175: LD_VAR 0 6
37179: PUSH
37180: FOR_TO
37181: IFFALSE 37304
// begin if i > 4 then
37183: LD_VAR 0 8
37187: PUSH
37188: LD_INT 4
37190: GREATER
37191: IFFALSE 37195
// break ;
37193: GO 37304
// x := personel [ i ] ;
37195: LD_ADDR_VAR 0 13
37199: PUSH
37200: LD_VAR 0 6
37204: PUSH
37205: LD_VAR 0 8
37209: ARRAY
37210: ST_TO_ADDR
// if x = - 1 then
37211: LD_VAR 0 13
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: EQUAL
37220: IFFALSE 37224
// continue ;
37222: GO 37180
// PrepareHuman ( false , i , skill ) ;
37224: LD_INT 0
37226: PPUSH
37227: LD_VAR 0 8
37231: PPUSH
37232: LD_VAR 0 4
37236: PPUSH
37237: CALL_OW 380
// un := CreateHuman ;
37241: LD_ADDR_VAR 0 14
37245: PUSH
37246: CALL_OW 44
37250: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37251: LD_VAR 0 14
37255: PPUSH
37256: LD_VAR 0 1
37260: PPUSH
37261: CALL_OW 250
37265: PPUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 251
37275: PPUSH
37276: LD_INT 10
37278: PPUSH
37279: LD_INT 0
37281: PPUSH
37282: CALL_OW 50
// result := result ^ un ;
37286: LD_ADDR_VAR 0 7
37290: PUSH
37291: LD_VAR 0 7
37295: PUSH
37296: LD_VAR 0 14
37300: ADD
37301: ST_TO_ADDR
// end ;
37302: GO 37180
37304: POP
37305: POP
// end ; end ;
37306: LD_VAR 0 7
37310: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37311: LD_INT 0
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
37317: PPUSH
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
// result := false ;
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37337: LD_VAR 0 1
37341: NOT
37342: PUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 266
37352: PUSH
37353: LD_INT 32
37355: PUSH
37356: LD_INT 33
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: IN
37363: NOT
37364: OR
37365: IFFALSE 37369
// exit ;
37367: GO 38478
// nat := GetNation ( tower ) ;
37369: LD_ADDR_VAR 0 12
37373: PUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: CALL_OW 248
37383: ST_TO_ADDR
// side := GetSide ( tower ) ;
37384: LD_ADDR_VAR 0 16
37388: PUSH
37389: LD_VAR 0 1
37393: PPUSH
37394: CALL_OW 255
37398: ST_TO_ADDR
// x := GetX ( tower ) ;
37399: LD_ADDR_VAR 0 10
37403: PUSH
37404: LD_VAR 0 1
37408: PPUSH
37409: CALL_OW 250
37413: ST_TO_ADDR
// y := GetY ( tower ) ;
37414: LD_ADDR_VAR 0 11
37418: PUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL_OW 251
37428: ST_TO_ADDR
// if not x or not y then
37429: LD_VAR 0 10
37433: NOT
37434: PUSH
37435: LD_VAR 0 11
37439: NOT
37440: OR
37441: IFFALSE 37445
// exit ;
37443: GO 38478
// weapon := 0 ;
37445: LD_ADDR_VAR 0 18
37449: PUSH
37450: LD_INT 0
37452: ST_TO_ADDR
// fac_list := [ ] ;
37453: LD_ADDR_VAR 0 17
37457: PUSH
37458: EMPTY
37459: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37460: LD_ADDR_VAR 0 6
37464: PUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL_OW 274
37474: PPUSH
37475: LD_VAR 0 2
37479: PPUSH
37480: LD_INT 0
37482: PPUSH
37483: CALL 35049 0 3
37487: PPUSH
37488: LD_INT 30
37490: PUSH
37491: LD_INT 3
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PPUSH
37498: CALL_OW 72
37502: ST_TO_ADDR
// if not factories then
37503: LD_VAR 0 6
37507: NOT
37508: IFFALSE 37512
// exit ;
37510: GO 38478
// for i in factories do
37512: LD_ADDR_VAR 0 8
37516: PUSH
37517: LD_VAR 0 6
37521: PUSH
37522: FOR_IN
37523: IFFALSE 37548
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37525: LD_ADDR_VAR 0 17
37529: PUSH
37530: LD_VAR 0 17
37534: PUSH
37535: LD_VAR 0 8
37539: PPUSH
37540: CALL_OW 478
37544: UNION
37545: ST_TO_ADDR
37546: GO 37522
37548: POP
37549: POP
// if not fac_list then
37550: LD_VAR 0 17
37554: NOT
37555: IFFALSE 37559
// exit ;
37557: GO 38478
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37559: LD_ADDR_VAR 0 5
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: LD_INT 5
37569: PUSH
37570: LD_INT 9
37572: PUSH
37573: LD_INT 10
37575: PUSH
37576: LD_INT 6
37578: PUSH
37579: LD_INT 7
37581: PUSH
37582: LD_INT 11
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 27
37596: PUSH
37597: LD_INT 28
37599: PUSH
37600: LD_INT 26
37602: PUSH
37603: LD_INT 30
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 43
37614: PUSH
37615: LD_INT 44
37617: PUSH
37618: LD_INT 46
37620: PUSH
37621: LD_INT 45
37623: PUSH
37624: LD_INT 47
37626: PUSH
37627: LD_INT 49
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: PUSH
37643: LD_VAR 0 12
37647: ARRAY
37648: ST_TO_ADDR
// list := list isect fac_list ;
37649: LD_ADDR_VAR 0 5
37653: PUSH
37654: LD_VAR 0 5
37658: PUSH
37659: LD_VAR 0 17
37663: ISECT
37664: ST_TO_ADDR
// if not list then
37665: LD_VAR 0 5
37669: NOT
37670: IFFALSE 37674
// exit ;
37672: GO 38478
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37674: LD_VAR 0 12
37678: PUSH
37679: LD_INT 3
37681: EQUAL
37682: PUSH
37683: LD_INT 49
37685: PUSH
37686: LD_VAR 0 5
37690: IN
37691: AND
37692: PUSH
37693: LD_INT 31
37695: PPUSH
37696: LD_VAR 0 16
37700: PPUSH
37701: CALL_OW 321
37705: PUSH
37706: LD_INT 2
37708: EQUAL
37709: AND
37710: IFFALSE 37770
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37712: LD_INT 22
37714: PUSH
37715: LD_VAR 0 16
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 35
37726: PUSH
37727: LD_INT 49
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 91
37736: PUSH
37737: LD_VAR 0 1
37741: PUSH
37742: LD_INT 10
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 69
37759: NOT
37760: IFFALSE 37770
// weapon := ru_time_lapser ;
37762: LD_ADDR_VAR 0 18
37766: PUSH
37767: LD_INT 49
37769: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37770: LD_VAR 0 12
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: IN
37785: PUSH
37786: LD_INT 11
37788: PUSH
37789: LD_VAR 0 5
37793: IN
37794: PUSH
37795: LD_INT 30
37797: PUSH
37798: LD_VAR 0 5
37802: IN
37803: OR
37804: AND
37805: PUSH
37806: LD_INT 6
37808: PPUSH
37809: LD_VAR 0 16
37813: PPUSH
37814: CALL_OW 321
37818: PUSH
37819: LD_INT 2
37821: EQUAL
37822: AND
37823: IFFALSE 37988
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37825: LD_INT 22
37827: PUSH
37828: LD_VAR 0 16
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 35
37842: PUSH
37843: LD_INT 11
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 35
37852: PUSH
37853: LD_INT 30
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 91
37867: PUSH
37868: LD_VAR 0 1
37872: PUSH
37873: LD_INT 18
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: PPUSH
37886: CALL_OW 69
37890: NOT
37891: PUSH
37892: LD_INT 22
37894: PUSH
37895: LD_VAR 0 16
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: LD_INT 30
37909: PUSH
37910: LD_INT 32
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 30
37919: PUSH
37920: LD_INT 33
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 91
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: LD_INT 12
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: PUSH
37953: EMPTY
37954: LIST
37955: PPUSH
37956: CALL_OW 69
37960: PUSH
37961: LD_INT 2
37963: GREATER
37964: AND
37965: IFFALSE 37988
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37967: LD_ADDR_VAR 0 18
37971: PUSH
37972: LD_INT 11
37974: PUSH
37975: LD_INT 30
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_VAR 0 12
37986: ARRAY
37987: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37988: LD_VAR 0 18
37992: NOT
37993: PUSH
37994: LD_INT 40
37996: PPUSH
37997: LD_VAR 0 16
38001: PPUSH
38002: CALL_OW 321
38006: PUSH
38007: LD_INT 2
38009: EQUAL
38010: AND
38011: PUSH
38012: LD_INT 7
38014: PUSH
38015: LD_VAR 0 5
38019: IN
38020: PUSH
38021: LD_INT 28
38023: PUSH
38024: LD_VAR 0 5
38028: IN
38029: OR
38030: PUSH
38031: LD_INT 45
38033: PUSH
38034: LD_VAR 0 5
38038: IN
38039: OR
38040: AND
38041: IFFALSE 38295
// begin hex := GetHexInfo ( x , y ) ;
38043: LD_ADDR_VAR 0 4
38047: PUSH
38048: LD_VAR 0 10
38052: PPUSH
38053: LD_VAR 0 11
38057: PPUSH
38058: CALL_OW 546
38062: ST_TO_ADDR
// if hex [ 1 ] then
38063: LD_VAR 0 4
38067: PUSH
38068: LD_INT 1
38070: ARRAY
38071: IFFALSE 38075
// exit ;
38073: GO 38478
// height := hex [ 2 ] ;
38075: LD_ADDR_VAR 0 15
38079: PUSH
38080: LD_VAR 0 4
38084: PUSH
38085: LD_INT 2
38087: ARRAY
38088: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38089: LD_ADDR_VAR 0 14
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: LD_INT 3
38102: PUSH
38103: LD_INT 5
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: ST_TO_ADDR
// for i in tmp do
38112: LD_ADDR_VAR 0 8
38116: PUSH
38117: LD_VAR 0 14
38121: PUSH
38122: FOR_IN
38123: IFFALSE 38293
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: LD_VAR 0 10
38134: PPUSH
38135: LD_VAR 0 8
38139: PPUSH
38140: LD_INT 5
38142: PPUSH
38143: CALL_OW 272
38147: PUSH
38148: LD_VAR 0 11
38152: PPUSH
38153: LD_VAR 0 8
38157: PPUSH
38158: LD_INT 5
38160: PPUSH
38161: CALL_OW 273
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38170: LD_VAR 0 9
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: LD_VAR 0 9
38183: PUSH
38184: LD_INT 2
38186: ARRAY
38187: PPUSH
38188: CALL_OW 488
38192: IFFALSE 38291
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38194: LD_ADDR_VAR 0 4
38198: PUSH
38199: LD_VAR 0 9
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PPUSH
38208: LD_VAR 0 9
38212: PUSH
38213: LD_INT 2
38215: ARRAY
38216: PPUSH
38217: CALL_OW 546
38221: ST_TO_ADDR
// if hex [ 1 ] then
38222: LD_VAR 0 4
38226: PUSH
38227: LD_INT 1
38229: ARRAY
38230: IFFALSE 38234
// continue ;
38232: GO 38122
// h := hex [ 2 ] ;
38234: LD_ADDR_VAR 0 13
38238: PUSH
38239: LD_VAR 0 4
38243: PUSH
38244: LD_INT 2
38246: ARRAY
38247: ST_TO_ADDR
// if h + 7 < height then
38248: LD_VAR 0 13
38252: PUSH
38253: LD_INT 7
38255: PLUS
38256: PUSH
38257: LD_VAR 0 15
38261: LESS
38262: IFFALSE 38291
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38264: LD_ADDR_VAR 0 18
38268: PUSH
38269: LD_INT 7
38271: PUSH
38272: LD_INT 28
38274: PUSH
38275: LD_INT 45
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: PUSH
38283: LD_VAR 0 12
38287: ARRAY
38288: ST_TO_ADDR
// break ;
38289: GO 38293
// end ; end ; end ;
38291: GO 38122
38293: POP
38294: POP
// end ; if not weapon then
38295: LD_VAR 0 18
38299: NOT
38300: IFFALSE 38360
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38302: LD_ADDR_VAR 0 5
38306: PUSH
38307: LD_VAR 0 5
38311: PUSH
38312: LD_INT 11
38314: PUSH
38315: LD_INT 30
38317: PUSH
38318: LD_INT 49
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: DIFF
38326: ST_TO_ADDR
// if not list then
38327: LD_VAR 0 5
38331: NOT
38332: IFFALSE 38336
// exit ;
38334: GO 38478
// weapon := list [ rand ( 1 , list ) ] ;
38336: LD_ADDR_VAR 0 18
38340: PUSH
38341: LD_VAR 0 5
38345: PUSH
38346: LD_INT 1
38348: PPUSH
38349: LD_VAR 0 5
38353: PPUSH
38354: CALL_OW 12
38358: ARRAY
38359: ST_TO_ADDR
// end ; if weapon then
38360: LD_VAR 0 18
38364: IFFALSE 38478
// begin tmp := CostOfWeapon ( weapon ) ;
38366: LD_ADDR_VAR 0 14
38370: PUSH
38371: LD_VAR 0 18
38375: PPUSH
38376: CALL_OW 451
38380: ST_TO_ADDR
// j := GetBase ( tower ) ;
38381: LD_ADDR_VAR 0 9
38385: PUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 274
38395: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38396: LD_VAR 0 9
38400: PPUSH
38401: LD_INT 1
38403: PPUSH
38404: CALL_OW 275
38408: PUSH
38409: LD_VAR 0 14
38413: PUSH
38414: LD_INT 1
38416: ARRAY
38417: GREATEREQUAL
38418: PUSH
38419: LD_VAR 0 9
38423: PPUSH
38424: LD_INT 2
38426: PPUSH
38427: CALL_OW 275
38431: PUSH
38432: LD_VAR 0 14
38436: PUSH
38437: LD_INT 2
38439: ARRAY
38440: GREATEREQUAL
38441: AND
38442: PUSH
38443: LD_VAR 0 9
38447: PPUSH
38448: LD_INT 3
38450: PPUSH
38451: CALL_OW 275
38455: PUSH
38456: LD_VAR 0 14
38460: PUSH
38461: LD_INT 3
38463: ARRAY
38464: GREATEREQUAL
38465: AND
38466: IFFALSE 38478
// result := weapon ;
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_VAR 0 18
38477: ST_TO_ADDR
// end ; end ;
38478: LD_VAR 0 3
38482: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38483: LD_INT 0
38485: PPUSH
38486: PPUSH
// result := true ;
38487: LD_ADDR_VAR 0 3
38491: PUSH
38492: LD_INT 1
38494: ST_TO_ADDR
// if array1 = array2 then
38495: LD_VAR 0 1
38499: PUSH
38500: LD_VAR 0 2
38504: EQUAL
38505: IFFALSE 38565
// begin for i = 1 to array1 do
38507: LD_ADDR_VAR 0 4
38511: PUSH
38512: DOUBLE
38513: LD_INT 1
38515: DEC
38516: ST_TO_ADDR
38517: LD_VAR 0 1
38521: PUSH
38522: FOR_TO
38523: IFFALSE 38561
// if array1 [ i ] <> array2 [ i ] then
38525: LD_VAR 0 1
38529: PUSH
38530: LD_VAR 0 4
38534: ARRAY
38535: PUSH
38536: LD_VAR 0 2
38540: PUSH
38541: LD_VAR 0 4
38545: ARRAY
38546: NONEQUAL
38547: IFFALSE 38559
// begin result := false ;
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_INT 0
38556: ST_TO_ADDR
// break ;
38557: GO 38561
// end ;
38559: GO 38522
38561: POP
38562: POP
// end else
38563: GO 38573
// result := false ;
38565: LD_ADDR_VAR 0 3
38569: PUSH
38570: LD_INT 0
38572: ST_TO_ADDR
// end ;
38573: LD_VAR 0 3
38577: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38578: LD_INT 0
38580: PPUSH
38581: PPUSH
// if not array1 or not array2 then
38582: LD_VAR 0 1
38586: NOT
38587: PUSH
38588: LD_VAR 0 2
38592: NOT
38593: OR
38594: IFFALSE 38598
// exit ;
38596: GO 38662
// result := true ;
38598: LD_ADDR_VAR 0 3
38602: PUSH
38603: LD_INT 1
38605: ST_TO_ADDR
// for i = 1 to array1 do
38606: LD_ADDR_VAR 0 4
38610: PUSH
38611: DOUBLE
38612: LD_INT 1
38614: DEC
38615: ST_TO_ADDR
38616: LD_VAR 0 1
38620: PUSH
38621: FOR_TO
38622: IFFALSE 38660
// if array1 [ i ] <> array2 [ i ] then
38624: LD_VAR 0 1
38628: PUSH
38629: LD_VAR 0 4
38633: ARRAY
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_VAR 0 4
38644: ARRAY
38645: NONEQUAL
38646: IFFALSE 38658
// begin result := false ;
38648: LD_ADDR_VAR 0 3
38652: PUSH
38653: LD_INT 0
38655: ST_TO_ADDR
// break ;
38656: GO 38660
// end ;
38658: GO 38621
38660: POP
38661: POP
// end ;
38662: LD_VAR 0 3
38666: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
// pom := GetBase ( fac ) ;
38672: LD_ADDR_VAR 0 5
38676: PUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL_OW 274
38686: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38687: LD_ADDR_VAR 0 4
38691: PUSH
38692: LD_VAR 0 2
38696: PUSH
38697: LD_INT 1
38699: ARRAY
38700: PPUSH
38701: LD_VAR 0 2
38705: PUSH
38706: LD_INT 2
38708: ARRAY
38709: PPUSH
38710: LD_VAR 0 2
38714: PUSH
38715: LD_INT 3
38717: ARRAY
38718: PPUSH
38719: LD_VAR 0 2
38723: PUSH
38724: LD_INT 4
38726: ARRAY
38727: PPUSH
38728: CALL_OW 449
38732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38733: LD_ADDR_VAR 0 3
38737: PUSH
38738: LD_VAR 0 5
38742: PPUSH
38743: LD_INT 1
38745: PPUSH
38746: CALL_OW 275
38750: PUSH
38751: LD_VAR 0 4
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: GREATEREQUAL
38760: PUSH
38761: LD_VAR 0 5
38765: PPUSH
38766: LD_INT 2
38768: PPUSH
38769: CALL_OW 275
38773: PUSH
38774: LD_VAR 0 4
38778: PUSH
38779: LD_INT 2
38781: ARRAY
38782: GREATEREQUAL
38783: AND
38784: PUSH
38785: LD_VAR 0 5
38789: PPUSH
38790: LD_INT 3
38792: PPUSH
38793: CALL_OW 275
38797: PUSH
38798: LD_VAR 0 4
38802: PUSH
38803: LD_INT 3
38805: ARRAY
38806: GREATEREQUAL
38807: AND
38808: ST_TO_ADDR
// end ;
38809: LD_VAR 0 3
38813: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38814: LD_INT 0
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
// pom := GetBase ( building ) ;
38820: LD_ADDR_VAR 0 3
38824: PUSH
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL_OW 274
38834: ST_TO_ADDR
// if not pom then
38835: LD_VAR 0 3
38839: NOT
38840: IFFALSE 38844
// exit ;
38842: GO 39014
// btype := GetBType ( building ) ;
38844: LD_ADDR_VAR 0 5
38848: PUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 266
38858: ST_TO_ADDR
// if btype = b_armoury then
38859: LD_VAR 0 5
38863: PUSH
38864: LD_INT 4
38866: EQUAL
38867: IFFALSE 38877
// btype := b_barracks ;
38869: LD_ADDR_VAR 0 5
38873: PUSH
38874: LD_INT 5
38876: ST_TO_ADDR
// if btype = b_depot then
38877: LD_VAR 0 5
38881: PUSH
38882: LD_INT 0
38884: EQUAL
38885: IFFALSE 38895
// btype := b_warehouse ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_INT 1
38894: ST_TO_ADDR
// if btype = b_workshop then
38895: LD_VAR 0 5
38899: PUSH
38900: LD_INT 2
38902: EQUAL
38903: IFFALSE 38913
// btype := b_factory ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_INT 3
38912: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38913: LD_ADDR_VAR 0 4
38917: PUSH
38918: LD_VAR 0 5
38922: PPUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 248
38932: PPUSH
38933: CALL_OW 450
38937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38938: LD_ADDR_VAR 0 2
38942: PUSH
38943: LD_VAR 0 3
38947: PPUSH
38948: LD_INT 1
38950: PPUSH
38951: CALL_OW 275
38955: PUSH
38956: LD_VAR 0 4
38960: PUSH
38961: LD_INT 1
38963: ARRAY
38964: GREATEREQUAL
38965: PUSH
38966: LD_VAR 0 3
38970: PPUSH
38971: LD_INT 2
38973: PPUSH
38974: CALL_OW 275
38978: PUSH
38979: LD_VAR 0 4
38983: PUSH
38984: LD_INT 2
38986: ARRAY
38987: GREATEREQUAL
38988: AND
38989: PUSH
38990: LD_VAR 0 3
38994: PPUSH
38995: LD_INT 3
38997: PPUSH
38998: CALL_OW 275
39002: PUSH
39003: LD_VAR 0 4
39007: PUSH
39008: LD_INT 3
39010: ARRAY
39011: GREATEREQUAL
39012: AND
39013: ST_TO_ADDR
// end ;
39014: LD_VAR 0 2
39018: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39019: LD_INT 0
39021: PPUSH
39022: PPUSH
39023: PPUSH
// pom := GetBase ( building ) ;
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: CALL_OW 274
39038: ST_TO_ADDR
// if not pom then
39039: LD_VAR 0 4
39043: NOT
39044: IFFALSE 39048
// exit ;
39046: GO 39149
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39048: LD_ADDR_VAR 0 5
39052: PUSH
39053: LD_VAR 0 2
39057: PPUSH
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL_OW 248
39067: PPUSH
39068: CALL_OW 450
39072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39073: LD_ADDR_VAR 0 3
39077: PUSH
39078: LD_VAR 0 4
39082: PPUSH
39083: LD_INT 1
39085: PPUSH
39086: CALL_OW 275
39090: PUSH
39091: LD_VAR 0 5
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: GREATEREQUAL
39100: PUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: LD_INT 2
39108: PPUSH
39109: CALL_OW 275
39113: PUSH
39114: LD_VAR 0 5
39118: PUSH
39119: LD_INT 2
39121: ARRAY
39122: GREATEREQUAL
39123: AND
39124: PUSH
39125: LD_VAR 0 4
39129: PPUSH
39130: LD_INT 3
39132: PPUSH
39133: CALL_OW 275
39137: PUSH
39138: LD_VAR 0 5
39142: PUSH
39143: LD_INT 3
39145: ARRAY
39146: GREATEREQUAL
39147: AND
39148: ST_TO_ADDR
// end ;
39149: LD_VAR 0 3
39153: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39154: LD_INT 0
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
// result := false ;
39167: LD_ADDR_VAR 0 8
39171: PUSH
39172: LD_INT 0
39174: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39175: LD_VAR 0 5
39179: NOT
39180: PUSH
39181: LD_VAR 0 1
39185: NOT
39186: OR
39187: PUSH
39188: LD_VAR 0 2
39192: NOT
39193: OR
39194: PUSH
39195: LD_VAR 0 3
39199: NOT
39200: OR
39201: IFFALSE 39205
// exit ;
39203: GO 40019
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39205: LD_ADDR_VAR 0 14
39209: PUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: LD_VAR 0 2
39219: PPUSH
39220: LD_VAR 0 3
39224: PPUSH
39225: LD_VAR 0 4
39229: PPUSH
39230: LD_VAR 0 5
39234: PUSH
39235: LD_INT 1
39237: ARRAY
39238: PPUSH
39239: CALL_OW 248
39243: PPUSH
39244: LD_INT 0
39246: PPUSH
39247: CALL 41256 0 6
39251: ST_TO_ADDR
// if not hexes then
39252: LD_VAR 0 14
39256: NOT
39257: IFFALSE 39261
// exit ;
39259: GO 40019
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39261: LD_ADDR_VAR 0 17
39265: PUSH
39266: LD_VAR 0 5
39270: PPUSH
39271: LD_INT 22
39273: PUSH
39274: LD_VAR 0 13
39278: PPUSH
39279: CALL_OW 255
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 30
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 30
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PPUSH
39320: CALL_OW 72
39324: ST_TO_ADDR
// for i = 1 to hexes do
39325: LD_ADDR_VAR 0 9
39329: PUSH
39330: DOUBLE
39331: LD_INT 1
39333: DEC
39334: ST_TO_ADDR
39335: LD_VAR 0 14
39339: PUSH
39340: FOR_TO
39341: IFFALSE 40017
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39343: LD_ADDR_VAR 0 13
39347: PUSH
39348: LD_VAR 0 14
39352: PUSH
39353: LD_VAR 0 9
39357: ARRAY
39358: PUSH
39359: LD_INT 1
39361: ARRAY
39362: PPUSH
39363: LD_VAR 0 14
39367: PUSH
39368: LD_VAR 0 9
39372: ARRAY
39373: PUSH
39374: LD_INT 2
39376: ARRAY
39377: PPUSH
39378: CALL_OW 428
39382: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39383: LD_VAR 0 14
39387: PUSH
39388: LD_VAR 0 9
39392: ARRAY
39393: PUSH
39394: LD_INT 1
39396: ARRAY
39397: PPUSH
39398: LD_VAR 0 14
39402: PUSH
39403: LD_VAR 0 9
39407: ARRAY
39408: PUSH
39409: LD_INT 2
39411: ARRAY
39412: PPUSH
39413: CALL_OW 351
39417: PUSH
39418: LD_VAR 0 14
39422: PUSH
39423: LD_VAR 0 9
39427: ARRAY
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: PPUSH
39433: LD_VAR 0 14
39437: PUSH
39438: LD_VAR 0 9
39442: ARRAY
39443: PUSH
39444: LD_INT 2
39446: ARRAY
39447: PPUSH
39448: CALL_OW 488
39452: NOT
39453: OR
39454: PUSH
39455: LD_VAR 0 13
39459: PPUSH
39460: CALL_OW 247
39464: PUSH
39465: LD_INT 3
39467: EQUAL
39468: OR
39469: IFFALSE 39475
// exit ;
39471: POP
39472: POP
39473: GO 40019
// if not tmp then
39475: LD_VAR 0 13
39479: NOT
39480: IFFALSE 39484
// continue ;
39482: GO 39340
// result := true ;
39484: LD_ADDR_VAR 0 8
39488: PUSH
39489: LD_INT 1
39491: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39492: LD_VAR 0 6
39496: PUSH
39497: LD_VAR 0 13
39501: PPUSH
39502: CALL_OW 247
39506: PUSH
39507: LD_INT 2
39509: EQUAL
39510: AND
39511: PUSH
39512: LD_VAR 0 13
39516: PPUSH
39517: CALL_OW 263
39521: PUSH
39522: LD_INT 1
39524: EQUAL
39525: AND
39526: IFFALSE 39690
// begin if IsDrivenBy ( tmp ) then
39528: LD_VAR 0 13
39532: PPUSH
39533: CALL_OW 311
39537: IFFALSE 39541
// continue ;
39539: GO 39340
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39541: LD_VAR 0 6
39545: PPUSH
39546: LD_INT 3
39548: PUSH
39549: LD_INT 60
39551: PUSH
39552: EMPTY
39553: LIST
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: LD_INT 55
39564: PUSH
39565: EMPTY
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PPUSH
39576: CALL_OW 72
39580: IFFALSE 39688
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39582: LD_ADDR_VAR 0 18
39586: PUSH
39587: LD_VAR 0 6
39591: PPUSH
39592: LD_INT 3
39594: PUSH
39595: LD_INT 60
39597: PUSH
39598: EMPTY
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 3
39607: PUSH
39608: LD_INT 55
39610: PUSH
39611: EMPTY
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PPUSH
39622: CALL_OW 72
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: ST_TO_ADDR
// if IsInUnit ( driver ) then
39631: LD_VAR 0 18
39635: PPUSH
39636: CALL_OW 310
39640: IFFALSE 39651
// ComExit ( driver ) ;
39642: LD_VAR 0 18
39646: PPUSH
39647: CALL 64440 0 1
// AddComEnterUnit ( driver , tmp ) ;
39651: LD_VAR 0 18
39655: PPUSH
39656: LD_VAR 0 13
39660: PPUSH
39661: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39665: LD_VAR 0 18
39669: PPUSH
39670: LD_VAR 0 7
39674: PPUSH
39675: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39679: LD_VAR 0 18
39683: PPUSH
39684: CALL_OW 181
// end ; continue ;
39688: GO 39340
// end ; if not cleaners or not tmp in cleaners then
39690: LD_VAR 0 6
39694: NOT
39695: PUSH
39696: LD_VAR 0 13
39700: PUSH
39701: LD_VAR 0 6
39705: IN
39706: NOT
39707: OR
39708: IFFALSE 40015
// begin if dep then
39710: LD_VAR 0 17
39714: IFFALSE 39850
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39716: LD_ADDR_VAR 0 16
39720: PUSH
39721: LD_VAR 0 17
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: PPUSH
39730: CALL_OW 250
39734: PPUSH
39735: LD_VAR 0 17
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PPUSH
39744: CALL_OW 254
39748: PPUSH
39749: LD_INT 5
39751: PPUSH
39752: CALL_OW 272
39756: PUSH
39757: LD_VAR 0 17
39761: PUSH
39762: LD_INT 1
39764: ARRAY
39765: PPUSH
39766: CALL_OW 251
39770: PPUSH
39771: LD_VAR 0 17
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: PPUSH
39780: CALL_OW 254
39784: PPUSH
39785: LD_INT 5
39787: PPUSH
39788: CALL_OW 273
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39797: LD_VAR 0 16
39801: PUSH
39802: LD_INT 1
39804: ARRAY
39805: PPUSH
39806: LD_VAR 0 16
39810: PUSH
39811: LD_INT 2
39813: ARRAY
39814: PPUSH
39815: CALL_OW 488
39819: IFFALSE 39850
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39821: LD_VAR 0 13
39825: PPUSH
39826: LD_VAR 0 16
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: PPUSH
39835: LD_VAR 0 16
39839: PUSH
39840: LD_INT 2
39842: ARRAY
39843: PPUSH
39844: CALL_OW 111
// continue ;
39848: GO 39340
// end ; end ; r := GetDir ( tmp ) ;
39850: LD_ADDR_VAR 0 15
39854: PUSH
39855: LD_VAR 0 13
39859: PPUSH
39860: CALL_OW 254
39864: ST_TO_ADDR
// if r = 5 then
39865: LD_VAR 0 15
39869: PUSH
39870: LD_INT 5
39872: EQUAL
39873: IFFALSE 39883
// r := 0 ;
39875: LD_ADDR_VAR 0 15
39879: PUSH
39880: LD_INT 0
39882: ST_TO_ADDR
// for j = r to 5 do
39883: LD_ADDR_VAR 0 10
39887: PUSH
39888: DOUBLE
39889: LD_VAR 0 15
39893: DEC
39894: ST_TO_ADDR
39895: LD_INT 5
39897: PUSH
39898: FOR_TO
39899: IFFALSE 40013
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39901: LD_ADDR_VAR 0 11
39905: PUSH
39906: LD_VAR 0 13
39910: PPUSH
39911: CALL_OW 250
39915: PPUSH
39916: LD_VAR 0 10
39920: PPUSH
39921: LD_INT 2
39923: PPUSH
39924: CALL_OW 272
39928: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39929: LD_ADDR_VAR 0 12
39933: PUSH
39934: LD_VAR 0 13
39938: PPUSH
39939: CALL_OW 251
39943: PPUSH
39944: LD_VAR 0 10
39948: PPUSH
39949: LD_INT 2
39951: PPUSH
39952: CALL_OW 273
39956: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39957: LD_VAR 0 11
39961: PPUSH
39962: LD_VAR 0 12
39966: PPUSH
39967: CALL_OW 488
39971: PUSH
39972: LD_VAR 0 11
39976: PPUSH
39977: LD_VAR 0 12
39981: PPUSH
39982: CALL_OW 428
39986: NOT
39987: AND
39988: IFFALSE 40011
// begin ComMoveXY ( tmp , _x , _y ) ;
39990: LD_VAR 0 13
39994: PPUSH
39995: LD_VAR 0 11
39999: PPUSH
40000: LD_VAR 0 12
40004: PPUSH
40005: CALL_OW 111
// break ;
40009: GO 40013
// end ; end ;
40011: GO 39898
40013: POP
40014: POP
// end ; end ;
40015: GO 39340
40017: POP
40018: POP
// end ;
40019: LD_VAR 0 8
40023: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40024: LD_INT 0
40026: PPUSH
// result := true ;
40027: LD_ADDR_VAR 0 3
40031: PUSH
40032: LD_INT 1
40034: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40035: LD_VAR 0 2
40039: PUSH
40040: LD_INT 24
40042: DOUBLE
40043: EQUAL
40044: IFTRUE 40054
40046: LD_INT 33
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40079
40054: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40055: LD_ADDR_VAR 0 3
40059: PUSH
40060: LD_INT 32
40062: PPUSH
40063: LD_VAR 0 1
40067: PPUSH
40068: CALL_OW 321
40072: PUSH
40073: LD_INT 2
40075: EQUAL
40076: ST_TO_ADDR
40077: GO 40399
40079: LD_INT 20
40081: DOUBLE
40082: EQUAL
40083: IFTRUE 40087
40085: GO 40112
40087: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40088: LD_ADDR_VAR 0 3
40092: PUSH
40093: LD_INT 6
40095: PPUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 321
40105: PUSH
40106: LD_INT 2
40108: EQUAL
40109: ST_TO_ADDR
40110: GO 40399
40112: LD_INT 22
40114: DOUBLE
40115: EQUAL
40116: IFTRUE 40126
40118: LD_INT 36
40120: DOUBLE
40121: EQUAL
40122: IFTRUE 40126
40124: GO 40151
40126: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40127: LD_ADDR_VAR 0 3
40131: PUSH
40132: LD_INT 15
40134: PPUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 321
40144: PUSH
40145: LD_INT 2
40147: EQUAL
40148: ST_TO_ADDR
40149: GO 40399
40151: LD_INT 30
40153: DOUBLE
40154: EQUAL
40155: IFTRUE 40159
40157: GO 40184
40159: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40160: LD_ADDR_VAR 0 3
40164: PUSH
40165: LD_INT 20
40167: PPUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: CALL_OW 321
40177: PUSH
40178: LD_INT 2
40180: EQUAL
40181: ST_TO_ADDR
40182: GO 40399
40184: LD_INT 28
40186: DOUBLE
40187: EQUAL
40188: IFTRUE 40198
40190: LD_INT 21
40192: DOUBLE
40193: EQUAL
40194: IFTRUE 40198
40196: GO 40223
40198: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40199: LD_ADDR_VAR 0 3
40203: PUSH
40204: LD_INT 21
40206: PPUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 321
40216: PUSH
40217: LD_INT 2
40219: EQUAL
40220: ST_TO_ADDR
40221: GO 40399
40223: LD_INT 16
40225: DOUBLE
40226: EQUAL
40227: IFTRUE 40231
40229: GO 40258
40231: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40232: LD_ADDR_VAR 0 3
40236: PUSH
40237: LD_EXP 105
40241: PPUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 321
40251: PUSH
40252: LD_INT 2
40254: EQUAL
40255: ST_TO_ADDR
40256: GO 40399
40258: LD_INT 19
40260: DOUBLE
40261: EQUAL
40262: IFTRUE 40272
40264: LD_INT 23
40266: DOUBLE
40267: EQUAL
40268: IFTRUE 40272
40270: GO 40299
40272: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40273: LD_ADDR_VAR 0 3
40277: PUSH
40278: LD_EXP 104
40282: PPUSH
40283: LD_VAR 0 1
40287: PPUSH
40288: CALL_OW 321
40292: PUSH
40293: LD_INT 2
40295: EQUAL
40296: ST_TO_ADDR
40297: GO 40399
40299: LD_INT 17
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 40332
40307: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_INT 39
40315: PPUSH
40316: LD_VAR 0 1
40320: PPUSH
40321: CALL_OW 321
40325: PUSH
40326: LD_INT 2
40328: EQUAL
40329: ST_TO_ADDR
40330: GO 40399
40332: LD_INT 18
40334: DOUBLE
40335: EQUAL
40336: IFTRUE 40340
40338: GO 40365
40340: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_INT 40
40348: PPUSH
40349: LD_VAR 0 1
40353: PPUSH
40354: CALL_OW 321
40358: PUSH
40359: LD_INT 2
40361: EQUAL
40362: ST_TO_ADDR
40363: GO 40399
40365: LD_INT 27
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40398
40373: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: LD_INT 35
40381: PPUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 321
40391: PUSH
40392: LD_INT 2
40394: EQUAL
40395: ST_TO_ADDR
40396: GO 40399
40398: POP
// end ;
40399: LD_VAR 0 3
40403: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40404: LD_INT 0
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
// result := false ;
40417: LD_ADDR_VAR 0 6
40421: PUSH
40422: LD_INT 0
40424: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40425: LD_VAR 0 1
40429: NOT
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 266
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: IN
40451: NOT
40452: OR
40453: PUSH
40454: LD_VAR 0 2
40458: NOT
40459: OR
40460: PUSH
40461: LD_VAR 0 5
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: LD_INT 4
40480: PUSH
40481: LD_INT 5
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: IN
40492: NOT
40493: OR
40494: PUSH
40495: LD_VAR 0 3
40499: PPUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: CALL_OW 488
40509: NOT
40510: OR
40511: IFFALSE 40515
// exit ;
40513: GO 41251
// side := GetSide ( depot ) ;
40515: LD_ADDR_VAR 0 9
40519: PUSH
40520: LD_VAR 0 1
40524: PPUSH
40525: CALL_OW 255
40529: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40530: LD_VAR 0 9
40534: PPUSH
40535: LD_VAR 0 2
40539: PPUSH
40540: CALL 40024 0 2
40544: NOT
40545: IFFALSE 40549
// exit ;
40547: GO 41251
// pom := GetBase ( depot ) ;
40549: LD_ADDR_VAR 0 10
40553: PUSH
40554: LD_VAR 0 1
40558: PPUSH
40559: CALL_OW 274
40563: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40564: LD_ADDR_VAR 0 11
40568: PUSH
40569: LD_VAR 0 2
40573: PPUSH
40574: LD_VAR 0 1
40578: PPUSH
40579: CALL_OW 248
40583: PPUSH
40584: CALL_OW 450
40588: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40589: LD_VAR 0 10
40593: PPUSH
40594: LD_INT 1
40596: PPUSH
40597: CALL_OW 275
40601: PUSH
40602: LD_VAR 0 11
40606: PUSH
40607: LD_INT 1
40609: ARRAY
40610: GREATEREQUAL
40611: PUSH
40612: LD_VAR 0 10
40616: PPUSH
40617: LD_INT 2
40619: PPUSH
40620: CALL_OW 275
40624: PUSH
40625: LD_VAR 0 11
40629: PUSH
40630: LD_INT 2
40632: ARRAY
40633: GREATEREQUAL
40634: AND
40635: PUSH
40636: LD_VAR 0 10
40640: PPUSH
40641: LD_INT 3
40643: PPUSH
40644: CALL_OW 275
40648: PUSH
40649: LD_VAR 0 11
40653: PUSH
40654: LD_INT 3
40656: ARRAY
40657: GREATEREQUAL
40658: AND
40659: NOT
40660: IFFALSE 40664
// exit ;
40662: GO 41251
// if GetBType ( depot ) = b_depot then
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 266
40673: PUSH
40674: LD_INT 0
40676: EQUAL
40677: IFFALSE 40689
// dist := 28 else
40679: LD_ADDR_VAR 0 14
40683: PUSH
40684: LD_INT 28
40686: ST_TO_ADDR
40687: GO 40697
// dist := 36 ;
40689: LD_ADDR_VAR 0 14
40693: PUSH
40694: LD_INT 36
40696: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40697: LD_VAR 0 1
40701: PPUSH
40702: LD_VAR 0 3
40706: PPUSH
40707: LD_VAR 0 4
40711: PPUSH
40712: CALL_OW 297
40716: PUSH
40717: LD_VAR 0 14
40721: GREATER
40722: IFFALSE 40726
// exit ;
40724: GO 41251
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40726: LD_ADDR_VAR 0 12
40730: PUSH
40731: LD_VAR 0 2
40735: PPUSH
40736: LD_VAR 0 3
40740: PPUSH
40741: LD_VAR 0 4
40745: PPUSH
40746: LD_VAR 0 5
40750: PPUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 248
40760: PPUSH
40761: LD_INT 0
40763: PPUSH
40764: CALL 41256 0 6
40768: ST_TO_ADDR
// if not hexes then
40769: LD_VAR 0 12
40773: NOT
40774: IFFALSE 40778
// exit ;
40776: GO 41251
// hex := GetHexInfo ( x , y ) ;
40778: LD_ADDR_VAR 0 15
40782: PUSH
40783: LD_VAR 0 3
40787: PPUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: CALL_OW 546
40797: ST_TO_ADDR
// if hex [ 1 ] then
40798: LD_VAR 0 15
40802: PUSH
40803: LD_INT 1
40805: ARRAY
40806: IFFALSE 40810
// exit ;
40808: GO 41251
// height := hex [ 2 ] ;
40810: LD_ADDR_VAR 0 13
40814: PUSH
40815: LD_VAR 0 15
40819: PUSH
40820: LD_INT 2
40822: ARRAY
40823: ST_TO_ADDR
// for i = 1 to hexes do
40824: LD_ADDR_VAR 0 7
40828: PUSH
40829: DOUBLE
40830: LD_INT 1
40832: DEC
40833: ST_TO_ADDR
40834: LD_VAR 0 12
40838: PUSH
40839: FOR_TO
40840: IFFALSE 41170
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40842: LD_VAR 0 12
40846: PUSH
40847: LD_VAR 0 7
40851: ARRAY
40852: PUSH
40853: LD_INT 1
40855: ARRAY
40856: PPUSH
40857: LD_VAR 0 12
40861: PUSH
40862: LD_VAR 0 7
40866: ARRAY
40867: PUSH
40868: LD_INT 2
40870: ARRAY
40871: PPUSH
40872: CALL_OW 488
40876: NOT
40877: PUSH
40878: LD_VAR 0 12
40882: PUSH
40883: LD_VAR 0 7
40887: ARRAY
40888: PUSH
40889: LD_INT 1
40891: ARRAY
40892: PPUSH
40893: LD_VAR 0 12
40897: PUSH
40898: LD_VAR 0 7
40902: ARRAY
40903: PUSH
40904: LD_INT 2
40906: ARRAY
40907: PPUSH
40908: CALL_OW 428
40912: PUSH
40913: LD_INT 0
40915: GREATER
40916: OR
40917: PUSH
40918: LD_VAR 0 12
40922: PUSH
40923: LD_VAR 0 7
40927: ARRAY
40928: PUSH
40929: LD_INT 1
40931: ARRAY
40932: PPUSH
40933: LD_VAR 0 12
40937: PUSH
40938: LD_VAR 0 7
40942: ARRAY
40943: PUSH
40944: LD_INT 2
40946: ARRAY
40947: PPUSH
40948: CALL_OW 351
40952: OR
40953: IFFALSE 40959
// exit ;
40955: POP
40956: POP
40957: GO 41251
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40959: LD_ADDR_VAR 0 8
40963: PUSH
40964: LD_VAR 0 12
40968: PUSH
40969: LD_VAR 0 7
40973: ARRAY
40974: PUSH
40975: LD_INT 1
40977: ARRAY
40978: PPUSH
40979: LD_VAR 0 12
40983: PUSH
40984: LD_VAR 0 7
40988: ARRAY
40989: PUSH
40990: LD_INT 2
40992: ARRAY
40993: PPUSH
40994: CALL_OW 546
40998: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40999: LD_VAR 0 8
41003: PUSH
41004: LD_INT 1
41006: ARRAY
41007: PUSH
41008: LD_VAR 0 8
41012: PUSH
41013: LD_INT 2
41015: ARRAY
41016: PUSH
41017: LD_VAR 0 13
41021: PUSH
41022: LD_INT 2
41024: PLUS
41025: GREATER
41026: OR
41027: PUSH
41028: LD_VAR 0 8
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: PUSH
41037: LD_VAR 0 13
41041: PUSH
41042: LD_INT 2
41044: MINUS
41045: LESS
41046: OR
41047: PUSH
41048: LD_VAR 0 8
41052: PUSH
41053: LD_INT 3
41055: ARRAY
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 8
41062: PUSH
41063: LD_INT 9
41065: PUSH
41066: LD_INT 10
41068: PUSH
41069: LD_INT 11
41071: PUSH
41072: LD_INT 12
41074: PUSH
41075: LD_INT 13
41077: PUSH
41078: LD_INT 16
41080: PUSH
41081: LD_INT 17
41083: PUSH
41084: LD_INT 18
41086: PUSH
41087: LD_INT 19
41089: PUSH
41090: LD_INT 20
41092: PUSH
41093: LD_INT 21
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: IN
41111: NOT
41112: OR
41113: PUSH
41114: LD_VAR 0 8
41118: PUSH
41119: LD_INT 5
41121: ARRAY
41122: NOT
41123: OR
41124: PUSH
41125: LD_VAR 0 8
41129: PUSH
41130: LD_INT 6
41132: ARRAY
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 7
41142: PUSH
41143: LD_INT 9
41145: PUSH
41146: LD_INT 10
41148: PUSH
41149: LD_INT 11
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: IN
41160: NOT
41161: OR
41162: IFFALSE 41168
// exit ;
41164: POP
41165: POP
41166: GO 41251
// end ;
41168: GO 40839
41170: POP
41171: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41172: LD_VAR 0 9
41176: PPUSH
41177: LD_VAR 0 3
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: LD_INT 20
41189: PPUSH
41190: CALL 33197 0 4
41194: PUSH
41195: LD_INT 4
41197: ARRAY
41198: IFFALSE 41202
// exit ;
41200: GO 41251
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41202: LD_VAR 0 2
41206: PUSH
41207: LD_INT 29
41209: PUSH
41210: LD_INT 30
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: IN
41217: PUSH
41218: LD_VAR 0 3
41222: PPUSH
41223: LD_VAR 0 4
41227: PPUSH
41228: LD_VAR 0 9
41232: PPUSH
41233: CALL_OW 440
41237: NOT
41238: AND
41239: IFFALSE 41243
// exit ;
41241: GO 41251
// result := true ;
41243: LD_ADDR_VAR 0 6
41247: PUSH
41248: LD_INT 1
41250: ST_TO_ADDR
// end ;
41251: LD_VAR 0 6
41255: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41256: LD_INT 0
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
// result = [ ] ;
41316: LD_ADDR_VAR 0 7
41320: PUSH
41321: EMPTY
41322: ST_TO_ADDR
// temp_list = [ ] ;
41323: LD_ADDR_VAR 0 9
41327: PUSH
41328: EMPTY
41329: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41330: LD_VAR 0 4
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: LD_INT 4
41349: PUSH
41350: LD_INT 5
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: IN
41361: NOT
41362: PUSH
41363: LD_VAR 0 1
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: IN
41378: PUSH
41379: LD_VAR 0 5
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 3
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: IN
41398: NOT
41399: AND
41400: OR
41401: IFFALSE 41405
// exit ;
41403: GO 59796
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41405: LD_VAR 0 1
41409: PUSH
41410: LD_INT 6
41412: PUSH
41413: LD_INT 7
41415: PUSH
41416: LD_INT 8
41418: PUSH
41419: LD_INT 13
41421: PUSH
41422: LD_INT 12
41424: PUSH
41425: LD_INT 15
41427: PUSH
41428: LD_INT 11
41430: PUSH
41431: LD_INT 14
41433: PUSH
41434: LD_INT 10
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: IN
41448: IFFALSE 41458
// btype = b_lab ;
41450: LD_ADDR_VAR 0 1
41454: PUSH
41455: LD_INT 6
41457: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41458: LD_VAR 0 6
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: IN
41477: NOT
41478: PUSH
41479: LD_VAR 0 1
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 6
41498: PUSH
41499: LD_INT 36
41501: PUSH
41502: LD_INT 4
41504: PUSH
41505: LD_INT 5
41507: PUSH
41508: LD_INT 31
41510: PUSH
41511: LD_INT 32
41513: PUSH
41514: LD_INT 33
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: IN
41530: NOT
41531: PUSH
41532: LD_VAR 0 6
41536: PUSH
41537: LD_INT 1
41539: EQUAL
41540: AND
41541: OR
41542: PUSH
41543: LD_VAR 0 1
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: IN
41558: NOT
41559: PUSH
41560: LD_VAR 0 6
41564: PUSH
41565: LD_INT 2
41567: EQUAL
41568: AND
41569: OR
41570: IFFALSE 41580
// mode = 0 ;
41572: LD_ADDR_VAR 0 6
41576: PUSH
41577: LD_INT 0
41579: ST_TO_ADDR
// case mode of 0 :
41580: LD_VAR 0 6
41584: PUSH
41585: LD_INT 0
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41593
41591: GO 53046
41593: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41594: LD_ADDR_VAR 0 11
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41787: LD_ADDR_VAR 0 12
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41983: LD_ADDR_VAR 0 13
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 3
42154: NEG
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42182: LD_ADDR_VAR 0 14
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 3
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42378: LD_ADDR_VAR 0 15
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 3
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42571: LD_ADDR_VAR 0 16
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42764: LD_ADDR_VAR 0 17
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42994: LD_ADDR_VAR 0 18
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43224: LD_ADDR_VAR 0 19
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43454: LD_ADDR_VAR 0 20
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43684: LD_ADDR_VAR 0 21
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43914: LD_ADDR_VAR 0 22
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44144: LD_ADDR_VAR 0 23
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44424: LD_ADDR_VAR 0 24
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 3
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44700: LD_ADDR_VAR 0 25
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44974: LD_ADDR_VAR 0 26
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45250: LD_ADDR_VAR 0 27
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 3
45483: NEG
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45530: LD_ADDR_VAR 0 28
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 3
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45812: LD_ADDR_VAR 0 29
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46091: LD_ADDR_VAR 0 30
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 3
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46369: LD_ADDR_VAR 0 31
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46647: LD_ADDR_VAR 0 32
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 3
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46925: LD_ADDR_VAR 0 33
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47204: LD_ADDR_VAR 0 34
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 3
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47484: LD_ADDR_VAR 0 35
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47596: LD_ADDR_VAR 0 36
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47708: LD_ADDR_VAR 0 37
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47820: LD_ADDR_VAR 0 38
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47932: LD_ADDR_VAR 0 39
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48044: LD_ADDR_VAR 0 40
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48156: LD_ADDR_VAR 0 41
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 3
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 3
48399: PUSH
48400: LD_INT 3
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 3
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: LD_INT 3
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48506: LD_ADDR_VAR 0 42
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 3
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: NEG
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48856: LD_ADDR_VAR 0 43
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 3
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 3
49152: NEG
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49204: LD_ADDR_VAR 0 44
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 3
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 3
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49554: LD_ADDR_VAR 0 45
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 3
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 3
49863: NEG
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49904: LD_ADDR_VAR 0 46
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50252: LD_ADDR_VAR 0 47
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50403: LD_ADDR_VAR 0 48
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50550: LD_ADDR_VAR 0 49
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50694: LD_ADDR_VAR 0 50
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50838: LD_ADDR_VAR 0 51
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50985: LD_ADDR_VAR 0 52
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51136: LD_ADDR_VAR 0 53
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51366: LD_ADDR_VAR 0 54
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51596: LD_ADDR_VAR 0 55
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51826: LD_ADDR_VAR 0 56
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52056: LD_ADDR_VAR 0 57
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52286: LD_ADDR_VAR 0 58
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52516: LD_ADDR_VAR 0 59
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52604: LD_ADDR_VAR 0 60
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52692: LD_ADDR_VAR 0 61
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52780: LD_ADDR_VAR 0 62
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52868: LD_ADDR_VAR 0 63
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52956: LD_ADDR_VAR 0 64
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// end ; 1 :
53044: GO 58941
53046: LD_INT 1
53048: DOUBLE
53049: EQUAL
53050: IFTRUE 53054
53052: GO 55677
53054: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53055: LD_ADDR_VAR 0 11
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 3
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53099: LD_ADDR_VAR 0 12
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53140: LD_ADDR_VAR 0 13
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53180: LD_ADDR_VAR 0 14
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53221: LD_ADDR_VAR 0 15
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53265: LD_ADDR_VAR 0 16
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53311: LD_ADDR_VAR 0 17
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 3
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53355: LD_ADDR_VAR 0 18
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53396: LD_ADDR_VAR 0 19
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53436: LD_ADDR_VAR 0 20
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53477: LD_ADDR_VAR 0 21
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53521: LD_ADDR_VAR 0 22
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 3
53552: NEG
53553: PUSH
53554: LD_INT 3
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53567: LD_ADDR_VAR 0 23
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 4
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53611: LD_ADDR_VAR 0 24
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 4
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53652: LD_ADDR_VAR 0 25
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 4
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 4
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53692: LD_ADDR_VAR 0 26
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 4
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53733: LD_ADDR_VAR 0 27
53737: PUSH
53738: LD_INT 3
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 4
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53777: LD_ADDR_VAR 0 28
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: LD_INT 4
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 4
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53823: LD_ADDR_VAR 0 29
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 3
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 4
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 4
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 5
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 5
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 4
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 6
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 6
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 5
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53978: LD_ADDR_VAR 0 30
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 4
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 4
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 4
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 5
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 5
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 5
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 6
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 6
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54121: LD_ADDR_VAR 0 31
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: LD_INT 3
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 4
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 4
54168: PUSH
54169: LD_INT 4
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: LD_INT 4
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 5
54188: PUSH
54189: LD_INT 4
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 5
54198: PUSH
54199: LD_INT 5
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 4
54208: PUSH
54209: LD_INT 5
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 6
54218: PUSH
54219: LD_INT 5
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 6
54228: PUSH
54229: LD_INT 6
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 5
54238: PUSH
54239: LD_INT 6
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54260: LD_ADDR_VAR 0 32
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 4
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 4
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 5
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 5
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 6
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 6
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 5
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54403: LD_ADDR_VAR 0 33
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 4
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 5
54489: NEG
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 5
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 6
54523: NEG
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 6
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54558: LD_ADDR_VAR 0 34
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 3
54589: NEG
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 4
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 4
54613: NEG
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: LD_INT 4
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 4
54637: NEG
54638: PUSH
54639: LD_INT 5
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 5
54649: NEG
54650: PUSH
54651: LD_INT 4
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 5
54661: NEG
54662: PUSH
54663: LD_INT 5
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 5
54673: NEG
54674: PUSH
54675: LD_INT 6
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 6
54685: NEG
54686: PUSH
54687: LD_INT 5
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 6
54697: NEG
54698: PUSH
54699: LD_INT 6
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54721: LD_ADDR_VAR 0 41
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54765: LD_ADDR_VAR 0 42
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54806: LD_ADDR_VAR 0 43
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54846: LD_ADDR_VAR 0 44
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54887: LD_ADDR_VAR 0 45
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54931: LD_ADDR_VAR 0 46
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54977: LD_ADDR_VAR 0 47
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55010: LD_ADDR_VAR 0 48
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55041: LD_ADDR_VAR 0 49
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55070: LD_ADDR_VAR 0 50
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 3
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55099: LD_ADDR_VAR 0 51
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55130: LD_ADDR_VAR 0 52
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55163: LD_ADDR_VAR 0 53
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55207: LD_ADDR_VAR 0 54
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55248: LD_ADDR_VAR 0 55
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55288: LD_ADDR_VAR 0 56
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55329: LD_ADDR_VAR 0 57
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55373: LD_ADDR_VAR 0 58
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: LD_INT 3
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55419: LD_ADDR_VAR 0 59
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55463: LD_ADDR_VAR 0 60
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55504: LD_ADDR_VAR 0 61
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55544: LD_ADDR_VAR 0 62
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55585: LD_ADDR_VAR 0 63
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55629: LD_ADDR_VAR 0 64
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// end ; 2 :
55675: GO 58941
55677: LD_INT 2
55679: DOUBLE
55680: EQUAL
55681: IFTRUE 55685
55683: GO 58940
55685: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55686: LD_ADDR_VAR 0 29
55690: PUSH
55691: LD_INT 4
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 4
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 5
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 5
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 4
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 5
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: LD_INT 3
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: LD_INT 4
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 4
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 4
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 4
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 5
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 5
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 4
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 5
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 4
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: NEG
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: LD_INT 5
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: LD_INT 3
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: LD_INT 4
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 5
56143: NEG
56144: PUSH
56145: LD_INT 5
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: LD_INT 5
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 5
56167: NEG
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56224: LD_ADDR_VAR 0 30
56228: PUSH
56229: LD_INT 4
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 4
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 5
56251: PUSH
56252: LD_INT 4
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 5
56261: PUSH
56262: LD_INT 5
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 4
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: PUSH
56312: LD_INT 5
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 4
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 4
56414: NEG
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 4
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 5
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 5
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 5
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: LD_INT 3
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: LD_INT 4
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 3
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: NEG
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 4
56588: NEG
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 4
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 4
56612: NEG
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 4
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 5
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 5
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 5
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56771: LD_ADDR_VAR 0 31
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 4
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 3
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 4
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 5
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 5
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 4
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 3
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 4
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 4
56973: NEG
56974: PUSH
56975: LD_INT 4
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 4
56985: NEG
56986: PUSH
56987: LD_INT 5
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: LD_INT 4
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: NEG
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: NEG
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 5
57033: NEG
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 5
57045: NEG
57046: PUSH
57047: LD_INT 5
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: LD_INT 5
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 5
57069: NEG
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 4
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 4
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 5
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 5
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 4
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 5
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57321: LD_ADDR_VAR 0 32
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 5
57384: NEG
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 5
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 4
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 4
57490: NEG
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 4
57502: NEG
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 4
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 5
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 4
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 4
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 5
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 4
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 4
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 4
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 4
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 5
57753: PUSH
57754: LD_INT 4
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 5
57763: PUSH
57764: LD_INT 5
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 4
57773: PUSH
57774: LD_INT 5
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 5
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: LD_INT 5
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57868: LD_ADDR_VAR 0 33
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: LD_INT 4
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: LD_INT 5
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 4
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 4
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 5
57935: NEG
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 5
57947: NEG
57948: PUSH
57949: LD_INT 5
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: LD_INT 5
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 5
57971: NEG
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 4
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 4
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 5
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 5
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 4
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 4
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 4
58208: PUSH
58209: LD_INT 4
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 4
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 5
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 5
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58406: LD_ADDR_VAR 0 34
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 4
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 5
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 4
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 3
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 5
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 4
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 4
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 5
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 5
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: LD_INT 5
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 5
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 5
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 4
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: NEG
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 4
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 5
58847: NEG
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 5
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 5
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: ST_TO_ADDR
// end ; end ;
58938: GO 58941
58940: POP
// case btype of b_depot , b_warehouse :
58941: LD_VAR 0 1
58945: PUSH
58946: LD_INT 0
58948: DOUBLE
58949: EQUAL
58950: IFTRUE 58960
58952: LD_INT 1
58954: DOUBLE
58955: EQUAL
58956: IFTRUE 58960
58958: GO 59161
58960: POP
// case nation of nation_american :
58961: LD_VAR 0 5
58965: PUSH
58966: LD_INT 1
58968: DOUBLE
58969: EQUAL
58970: IFTRUE 58974
58972: GO 59030
58974: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58975: LD_ADDR_VAR 0 9
58979: PUSH
58980: LD_VAR 0 11
58984: PUSH
58985: LD_VAR 0 12
58989: PUSH
58990: LD_VAR 0 13
58994: PUSH
58995: LD_VAR 0 14
58999: PUSH
59000: LD_VAR 0 15
59004: PUSH
59005: LD_VAR 0 16
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: PUSH
59018: LD_VAR 0 4
59022: PUSH
59023: LD_INT 1
59025: PLUS
59026: ARRAY
59027: ST_TO_ADDR
59028: GO 59159
59030: LD_INT 2
59032: DOUBLE
59033: EQUAL
59034: IFTRUE 59038
59036: GO 59094
59038: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59039: LD_ADDR_VAR 0 9
59043: PUSH
59044: LD_VAR 0 17
59048: PUSH
59049: LD_VAR 0 18
59053: PUSH
59054: LD_VAR 0 19
59058: PUSH
59059: LD_VAR 0 20
59063: PUSH
59064: LD_VAR 0 21
59068: PUSH
59069: LD_VAR 0 22
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: PUSH
59082: LD_VAR 0 4
59086: PUSH
59087: LD_INT 1
59089: PLUS
59090: ARRAY
59091: ST_TO_ADDR
59092: GO 59159
59094: LD_INT 3
59096: DOUBLE
59097: EQUAL
59098: IFTRUE 59102
59100: GO 59158
59102: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59103: LD_ADDR_VAR 0 9
59107: PUSH
59108: LD_VAR 0 23
59112: PUSH
59113: LD_VAR 0 24
59117: PUSH
59118: LD_VAR 0 25
59122: PUSH
59123: LD_VAR 0 26
59127: PUSH
59128: LD_VAR 0 27
59132: PUSH
59133: LD_VAR 0 28
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: PUSH
59146: LD_VAR 0 4
59150: PUSH
59151: LD_INT 1
59153: PLUS
59154: ARRAY
59155: ST_TO_ADDR
59156: GO 59159
59158: POP
59159: GO 59714
59161: LD_INT 2
59163: DOUBLE
59164: EQUAL
59165: IFTRUE 59175
59167: LD_INT 3
59169: DOUBLE
59170: EQUAL
59171: IFTRUE 59175
59173: GO 59231
59175: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59176: LD_ADDR_VAR 0 9
59180: PUSH
59181: LD_VAR 0 29
59185: PUSH
59186: LD_VAR 0 30
59190: PUSH
59191: LD_VAR 0 31
59195: PUSH
59196: LD_VAR 0 32
59200: PUSH
59201: LD_VAR 0 33
59205: PUSH
59206: LD_VAR 0 34
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: PUSH
59219: LD_VAR 0 4
59223: PUSH
59224: LD_INT 1
59226: PLUS
59227: ARRAY
59228: ST_TO_ADDR
59229: GO 59714
59231: LD_INT 16
59233: DOUBLE
59234: EQUAL
59235: IFTRUE 59293
59237: LD_INT 17
59239: DOUBLE
59240: EQUAL
59241: IFTRUE 59293
59243: LD_INT 18
59245: DOUBLE
59246: EQUAL
59247: IFTRUE 59293
59249: LD_INT 19
59251: DOUBLE
59252: EQUAL
59253: IFTRUE 59293
59255: LD_INT 22
59257: DOUBLE
59258: EQUAL
59259: IFTRUE 59293
59261: LD_INT 20
59263: DOUBLE
59264: EQUAL
59265: IFTRUE 59293
59267: LD_INT 21
59269: DOUBLE
59270: EQUAL
59271: IFTRUE 59293
59273: LD_INT 23
59275: DOUBLE
59276: EQUAL
59277: IFTRUE 59293
59279: LD_INT 24
59281: DOUBLE
59282: EQUAL
59283: IFTRUE 59293
59285: LD_INT 25
59287: DOUBLE
59288: EQUAL
59289: IFTRUE 59293
59291: GO 59349
59293: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59294: LD_ADDR_VAR 0 9
59298: PUSH
59299: LD_VAR 0 35
59303: PUSH
59304: LD_VAR 0 36
59308: PUSH
59309: LD_VAR 0 37
59313: PUSH
59314: LD_VAR 0 38
59318: PUSH
59319: LD_VAR 0 39
59323: PUSH
59324: LD_VAR 0 40
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: PUSH
59337: LD_VAR 0 4
59341: PUSH
59342: LD_INT 1
59344: PLUS
59345: ARRAY
59346: ST_TO_ADDR
59347: GO 59714
59349: LD_INT 6
59351: DOUBLE
59352: EQUAL
59353: IFTRUE 59405
59355: LD_INT 7
59357: DOUBLE
59358: EQUAL
59359: IFTRUE 59405
59361: LD_INT 8
59363: DOUBLE
59364: EQUAL
59365: IFTRUE 59405
59367: LD_INT 13
59369: DOUBLE
59370: EQUAL
59371: IFTRUE 59405
59373: LD_INT 12
59375: DOUBLE
59376: EQUAL
59377: IFTRUE 59405
59379: LD_INT 15
59381: DOUBLE
59382: EQUAL
59383: IFTRUE 59405
59385: LD_INT 11
59387: DOUBLE
59388: EQUAL
59389: IFTRUE 59405
59391: LD_INT 14
59393: DOUBLE
59394: EQUAL
59395: IFTRUE 59405
59397: LD_INT 10
59399: DOUBLE
59400: EQUAL
59401: IFTRUE 59405
59403: GO 59461
59405: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59406: LD_ADDR_VAR 0 9
59410: PUSH
59411: LD_VAR 0 41
59415: PUSH
59416: LD_VAR 0 42
59420: PUSH
59421: LD_VAR 0 43
59425: PUSH
59426: LD_VAR 0 44
59430: PUSH
59431: LD_VAR 0 45
59435: PUSH
59436: LD_VAR 0 46
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: PUSH
59449: LD_VAR 0 4
59453: PUSH
59454: LD_INT 1
59456: PLUS
59457: ARRAY
59458: ST_TO_ADDR
59459: GO 59714
59461: LD_INT 36
59463: DOUBLE
59464: EQUAL
59465: IFTRUE 59469
59467: GO 59525
59469: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59470: LD_ADDR_VAR 0 9
59474: PUSH
59475: LD_VAR 0 47
59479: PUSH
59480: LD_VAR 0 48
59484: PUSH
59485: LD_VAR 0 49
59489: PUSH
59490: LD_VAR 0 50
59494: PUSH
59495: LD_VAR 0 51
59499: PUSH
59500: LD_VAR 0 52
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: PUSH
59513: LD_VAR 0 4
59517: PUSH
59518: LD_INT 1
59520: PLUS
59521: ARRAY
59522: ST_TO_ADDR
59523: GO 59714
59525: LD_INT 4
59527: DOUBLE
59528: EQUAL
59529: IFTRUE 59551
59531: LD_INT 5
59533: DOUBLE
59534: EQUAL
59535: IFTRUE 59551
59537: LD_INT 34
59539: DOUBLE
59540: EQUAL
59541: IFTRUE 59551
59543: LD_INT 37
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59551
59549: GO 59607
59551: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59552: LD_ADDR_VAR 0 9
59556: PUSH
59557: LD_VAR 0 53
59561: PUSH
59562: LD_VAR 0 54
59566: PUSH
59567: LD_VAR 0 55
59571: PUSH
59572: LD_VAR 0 56
59576: PUSH
59577: LD_VAR 0 57
59581: PUSH
59582: LD_VAR 0 58
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: PUSH
59595: LD_VAR 0 4
59599: PUSH
59600: LD_INT 1
59602: PLUS
59603: ARRAY
59604: ST_TO_ADDR
59605: GO 59714
59607: LD_INT 31
59609: DOUBLE
59610: EQUAL
59611: IFTRUE 59657
59613: LD_INT 32
59615: DOUBLE
59616: EQUAL
59617: IFTRUE 59657
59619: LD_INT 33
59621: DOUBLE
59622: EQUAL
59623: IFTRUE 59657
59625: LD_INT 27
59627: DOUBLE
59628: EQUAL
59629: IFTRUE 59657
59631: LD_INT 26
59633: DOUBLE
59634: EQUAL
59635: IFTRUE 59657
59637: LD_INT 28
59639: DOUBLE
59640: EQUAL
59641: IFTRUE 59657
59643: LD_INT 29
59645: DOUBLE
59646: EQUAL
59647: IFTRUE 59657
59649: LD_INT 30
59651: DOUBLE
59652: EQUAL
59653: IFTRUE 59657
59655: GO 59713
59657: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59658: LD_ADDR_VAR 0 9
59662: PUSH
59663: LD_VAR 0 59
59667: PUSH
59668: LD_VAR 0 60
59672: PUSH
59673: LD_VAR 0 61
59677: PUSH
59678: LD_VAR 0 62
59682: PUSH
59683: LD_VAR 0 63
59687: PUSH
59688: LD_VAR 0 64
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: PUSH
59701: LD_VAR 0 4
59705: PUSH
59706: LD_INT 1
59708: PLUS
59709: ARRAY
59710: ST_TO_ADDR
59711: GO 59714
59713: POP
// temp_list2 = [ ] ;
59714: LD_ADDR_VAR 0 10
59718: PUSH
59719: EMPTY
59720: ST_TO_ADDR
// for i in temp_list do
59721: LD_ADDR_VAR 0 8
59725: PUSH
59726: LD_VAR 0 9
59730: PUSH
59731: FOR_IN
59732: IFFALSE 59784
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59734: LD_ADDR_VAR 0 10
59738: PUSH
59739: LD_VAR 0 10
59743: PUSH
59744: LD_VAR 0 8
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PUSH
59753: LD_VAR 0 2
59757: PLUS
59758: PUSH
59759: LD_VAR 0 8
59763: PUSH
59764: LD_INT 2
59766: ARRAY
59767: PUSH
59768: LD_VAR 0 3
59772: PLUS
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: EMPTY
59779: LIST
59780: ADD
59781: ST_TO_ADDR
59782: GO 59731
59784: POP
59785: POP
// result = temp_list2 ;
59786: LD_ADDR_VAR 0 7
59790: PUSH
59791: LD_VAR 0 10
59795: ST_TO_ADDR
// end ;
59796: LD_VAR 0 7
59800: RET
// export function EnemyInRange ( unit , dist ) ; begin
59801: LD_INT 0
59803: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59804: LD_ADDR_VAR 0 3
59808: PUSH
59809: LD_VAR 0 1
59813: PPUSH
59814: CALL_OW 255
59818: PPUSH
59819: LD_VAR 0 1
59823: PPUSH
59824: CALL_OW 250
59828: PPUSH
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 251
59838: PPUSH
59839: LD_VAR 0 2
59843: PPUSH
59844: CALL 33197 0 4
59848: PUSH
59849: LD_INT 4
59851: ARRAY
59852: ST_TO_ADDR
// end ;
59853: LD_VAR 0 3
59857: RET
// export function PlayerSeeMe ( unit ) ; begin
59858: LD_INT 0
59860: PPUSH
// result := See ( your_side , unit ) ;
59861: LD_ADDR_VAR 0 2
59865: PUSH
59866: LD_OWVAR 2
59870: PPUSH
59871: LD_VAR 0 1
59875: PPUSH
59876: CALL_OW 292
59880: ST_TO_ADDR
// end ;
59881: LD_VAR 0 2
59885: RET
// export function ReverseDir ( unit ) ; begin
59886: LD_INT 0
59888: PPUSH
// if not unit then
59889: LD_VAR 0 1
59893: NOT
59894: IFFALSE 59898
// exit ;
59896: GO 59921
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59898: LD_ADDR_VAR 0 2
59902: PUSH
59903: LD_VAR 0 1
59907: PPUSH
59908: CALL_OW 254
59912: PUSH
59913: LD_INT 3
59915: PLUS
59916: PUSH
59917: LD_INT 6
59919: MOD
59920: ST_TO_ADDR
// end ;
59921: LD_VAR 0 2
59925: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59926: LD_INT 0
59928: PPUSH
59929: PPUSH
59930: PPUSH
59931: PPUSH
59932: PPUSH
// if not hexes then
59933: LD_VAR 0 2
59937: NOT
59938: IFFALSE 59942
// exit ;
59940: GO 60090
// dist := 9999 ;
59942: LD_ADDR_VAR 0 5
59946: PUSH
59947: LD_INT 9999
59949: ST_TO_ADDR
// for i = 1 to hexes do
59950: LD_ADDR_VAR 0 4
59954: PUSH
59955: DOUBLE
59956: LD_INT 1
59958: DEC
59959: ST_TO_ADDR
59960: LD_VAR 0 2
59964: PUSH
59965: FOR_TO
59966: IFFALSE 60078
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59968: LD_VAR 0 1
59972: PPUSH
59973: LD_VAR 0 2
59977: PUSH
59978: LD_VAR 0 4
59982: ARRAY
59983: PUSH
59984: LD_INT 1
59986: ARRAY
59987: PPUSH
59988: LD_VAR 0 2
59992: PUSH
59993: LD_VAR 0 4
59997: ARRAY
59998: PUSH
59999: LD_INT 2
60001: ARRAY
60002: PPUSH
60003: CALL_OW 297
60007: PUSH
60008: LD_VAR 0 5
60012: LESS
60013: IFFALSE 60076
// begin hex := hexes [ i ] ;
60015: LD_ADDR_VAR 0 7
60019: PUSH
60020: LD_VAR 0 2
60024: PUSH
60025: LD_VAR 0 4
60029: ARRAY
60030: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60031: LD_ADDR_VAR 0 5
60035: PUSH
60036: LD_VAR 0 1
60040: PPUSH
60041: LD_VAR 0 2
60045: PUSH
60046: LD_VAR 0 4
60050: ARRAY
60051: PUSH
60052: LD_INT 1
60054: ARRAY
60055: PPUSH
60056: LD_VAR 0 2
60060: PUSH
60061: LD_VAR 0 4
60065: ARRAY
60066: PUSH
60067: LD_INT 2
60069: ARRAY
60070: PPUSH
60071: CALL_OW 297
60075: ST_TO_ADDR
// end ; end ;
60076: GO 59965
60078: POP
60079: POP
// result := hex ;
60080: LD_ADDR_VAR 0 3
60084: PUSH
60085: LD_VAR 0 7
60089: ST_TO_ADDR
// end ;
60090: LD_VAR 0 3
60094: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60095: LD_INT 0
60097: PPUSH
60098: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60099: LD_VAR 0 1
60103: NOT
60104: PUSH
60105: LD_VAR 0 1
60109: PUSH
60110: LD_INT 21
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 23
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PPUSH
60134: CALL_OW 69
60138: IN
60139: NOT
60140: OR
60141: IFFALSE 60145
// exit ;
60143: GO 60192
// for i = 1 to 3 do
60145: LD_ADDR_VAR 0 3
60149: PUSH
60150: DOUBLE
60151: LD_INT 1
60153: DEC
60154: ST_TO_ADDR
60155: LD_INT 3
60157: PUSH
60158: FOR_TO
60159: IFFALSE 60190
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60161: LD_VAR 0 1
60165: PPUSH
60166: CALL_OW 250
60170: PPUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: CALL_OW 251
60180: PPUSH
60181: LD_INT 1
60183: PPUSH
60184: CALL_OW 453
60188: GO 60158
60190: POP
60191: POP
// end ;
60192: LD_VAR 0 2
60196: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60197: LD_INT 0
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60205: LD_VAR 0 1
60209: NOT
60210: PUSH
60211: LD_VAR 0 2
60215: NOT
60216: OR
60217: PUSH
60218: LD_VAR 0 1
60222: PPUSH
60223: CALL_OW 314
60227: OR
60228: IFFALSE 60232
// exit ;
60230: GO 60673
// x := GetX ( enemy_unit ) ;
60232: LD_ADDR_VAR 0 7
60236: PUSH
60237: LD_VAR 0 2
60241: PPUSH
60242: CALL_OW 250
60246: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60247: LD_ADDR_VAR 0 8
60251: PUSH
60252: LD_VAR 0 2
60256: PPUSH
60257: CALL_OW 251
60261: ST_TO_ADDR
// if not x or not y then
60262: LD_VAR 0 7
60266: NOT
60267: PUSH
60268: LD_VAR 0 8
60272: NOT
60273: OR
60274: IFFALSE 60278
// exit ;
60276: GO 60673
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60278: LD_ADDR_VAR 0 6
60282: PUSH
60283: LD_VAR 0 7
60287: PPUSH
60288: LD_INT 0
60290: PPUSH
60291: LD_INT 4
60293: PPUSH
60294: CALL_OW 272
60298: PUSH
60299: LD_VAR 0 8
60303: PPUSH
60304: LD_INT 0
60306: PPUSH
60307: LD_INT 4
60309: PPUSH
60310: CALL_OW 273
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_VAR 0 7
60323: PPUSH
60324: LD_INT 1
60326: PPUSH
60327: LD_INT 4
60329: PPUSH
60330: CALL_OW 272
60334: PUSH
60335: LD_VAR 0 8
60339: PPUSH
60340: LD_INT 1
60342: PPUSH
60343: LD_INT 4
60345: PPUSH
60346: CALL_OW 273
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_VAR 0 7
60359: PPUSH
60360: LD_INT 2
60362: PPUSH
60363: LD_INT 4
60365: PPUSH
60366: CALL_OW 272
60370: PUSH
60371: LD_VAR 0 8
60375: PPUSH
60376: LD_INT 2
60378: PPUSH
60379: LD_INT 4
60381: PPUSH
60382: CALL_OW 273
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_VAR 0 7
60395: PPUSH
60396: LD_INT 3
60398: PPUSH
60399: LD_INT 4
60401: PPUSH
60402: CALL_OW 272
60406: PUSH
60407: LD_VAR 0 8
60411: PPUSH
60412: LD_INT 3
60414: PPUSH
60415: LD_INT 4
60417: PPUSH
60418: CALL_OW 273
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_VAR 0 7
60431: PPUSH
60432: LD_INT 4
60434: PPUSH
60435: LD_INT 4
60437: PPUSH
60438: CALL_OW 272
60442: PUSH
60443: LD_VAR 0 8
60447: PPUSH
60448: LD_INT 4
60450: PPUSH
60451: LD_INT 4
60453: PPUSH
60454: CALL_OW 273
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_VAR 0 7
60467: PPUSH
60468: LD_INT 5
60470: PPUSH
60471: LD_INT 4
60473: PPUSH
60474: CALL_OW 272
60478: PUSH
60479: LD_VAR 0 8
60483: PPUSH
60484: LD_INT 5
60486: PPUSH
60487: LD_INT 4
60489: PPUSH
60490: CALL_OW 273
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: ST_TO_ADDR
// for i = tmp downto 1 do
60507: LD_ADDR_VAR 0 4
60511: PUSH
60512: DOUBLE
60513: LD_VAR 0 6
60517: INC
60518: ST_TO_ADDR
60519: LD_INT 1
60521: PUSH
60522: FOR_DOWNTO
60523: IFFALSE 60624
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60525: LD_VAR 0 6
60529: PUSH
60530: LD_VAR 0 4
60534: ARRAY
60535: PUSH
60536: LD_INT 1
60538: ARRAY
60539: PPUSH
60540: LD_VAR 0 6
60544: PUSH
60545: LD_VAR 0 4
60549: ARRAY
60550: PUSH
60551: LD_INT 2
60553: ARRAY
60554: PPUSH
60555: CALL_OW 488
60559: NOT
60560: PUSH
60561: LD_VAR 0 6
60565: PUSH
60566: LD_VAR 0 4
60570: ARRAY
60571: PUSH
60572: LD_INT 1
60574: ARRAY
60575: PPUSH
60576: LD_VAR 0 6
60580: PUSH
60581: LD_VAR 0 4
60585: ARRAY
60586: PUSH
60587: LD_INT 2
60589: ARRAY
60590: PPUSH
60591: CALL_OW 428
60595: PUSH
60596: LD_INT 0
60598: NONEQUAL
60599: OR
60600: IFFALSE 60622
// tmp := Delete ( tmp , i ) ;
60602: LD_ADDR_VAR 0 6
60606: PUSH
60607: LD_VAR 0 6
60611: PPUSH
60612: LD_VAR 0 4
60616: PPUSH
60617: CALL_OW 3
60621: ST_TO_ADDR
60622: GO 60522
60624: POP
60625: POP
// j := GetClosestHex ( unit , tmp ) ;
60626: LD_ADDR_VAR 0 5
60630: PUSH
60631: LD_VAR 0 1
60635: PPUSH
60636: LD_VAR 0 6
60640: PPUSH
60641: CALL 59926 0 2
60645: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60646: LD_VAR 0 1
60650: PPUSH
60651: LD_VAR 0 5
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PPUSH
60660: LD_VAR 0 5
60664: PUSH
60665: LD_INT 2
60667: ARRAY
60668: PPUSH
60669: CALL_OW 111
// end ;
60673: LD_VAR 0 3
60677: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60678: LD_INT 0
60680: PPUSH
60681: PPUSH
60682: PPUSH
// uc_side = 0 ;
60683: LD_ADDR_OWVAR 20
60687: PUSH
60688: LD_INT 0
60690: ST_TO_ADDR
// uc_nation = 0 ;
60691: LD_ADDR_OWVAR 21
60695: PUSH
60696: LD_INT 0
60698: ST_TO_ADDR
// InitHc_All ( ) ;
60699: CALL_OW 584
// InitVc ;
60703: CALL_OW 20
// if mastodonts then
60707: LD_VAR 0 6
60711: IFFALSE 60778
// for i = 1 to mastodonts do
60713: LD_ADDR_VAR 0 11
60717: PUSH
60718: DOUBLE
60719: LD_INT 1
60721: DEC
60722: ST_TO_ADDR
60723: LD_VAR 0 6
60727: PUSH
60728: FOR_TO
60729: IFFALSE 60776
// begin vc_chassis := 31 ;
60731: LD_ADDR_OWVAR 37
60735: PUSH
60736: LD_INT 31
60738: ST_TO_ADDR
// vc_control := control_rider ;
60739: LD_ADDR_OWVAR 38
60743: PUSH
60744: LD_INT 4
60746: ST_TO_ADDR
// animal := CreateVehicle ;
60747: LD_ADDR_VAR 0 12
60751: PUSH
60752: CALL_OW 45
60756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60757: LD_VAR 0 12
60761: PPUSH
60762: LD_VAR 0 8
60766: PPUSH
60767: LD_INT 0
60769: PPUSH
60770: CALL 62966 0 3
// end ;
60774: GO 60728
60776: POP
60777: POP
// if horses then
60778: LD_VAR 0 5
60782: IFFALSE 60849
// for i = 1 to horses do
60784: LD_ADDR_VAR 0 11
60788: PUSH
60789: DOUBLE
60790: LD_INT 1
60792: DEC
60793: ST_TO_ADDR
60794: LD_VAR 0 5
60798: PUSH
60799: FOR_TO
60800: IFFALSE 60847
// begin hc_class := 21 ;
60802: LD_ADDR_OWVAR 28
60806: PUSH
60807: LD_INT 21
60809: ST_TO_ADDR
// hc_gallery :=  ;
60810: LD_ADDR_OWVAR 33
60814: PUSH
60815: LD_STRING 
60817: ST_TO_ADDR
// animal := CreateHuman ;
60818: LD_ADDR_VAR 0 12
60822: PUSH
60823: CALL_OW 44
60827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60828: LD_VAR 0 12
60832: PPUSH
60833: LD_VAR 0 8
60837: PPUSH
60838: LD_INT 0
60840: PPUSH
60841: CALL 62966 0 3
// end ;
60845: GO 60799
60847: POP
60848: POP
// if birds then
60849: LD_VAR 0 1
60853: IFFALSE 60920
// for i = 1 to birds do
60855: LD_ADDR_VAR 0 11
60859: PUSH
60860: DOUBLE
60861: LD_INT 1
60863: DEC
60864: ST_TO_ADDR
60865: LD_VAR 0 1
60869: PUSH
60870: FOR_TO
60871: IFFALSE 60918
// begin hc_class = 18 ;
60873: LD_ADDR_OWVAR 28
60877: PUSH
60878: LD_INT 18
60880: ST_TO_ADDR
// hc_gallery =  ;
60881: LD_ADDR_OWVAR 33
60885: PUSH
60886: LD_STRING 
60888: ST_TO_ADDR
// animal := CreateHuman ;
60889: LD_ADDR_VAR 0 12
60893: PUSH
60894: CALL_OW 44
60898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60899: LD_VAR 0 12
60903: PPUSH
60904: LD_VAR 0 8
60908: PPUSH
60909: LD_INT 0
60911: PPUSH
60912: CALL 62966 0 3
// end ;
60916: GO 60870
60918: POP
60919: POP
// if tigers then
60920: LD_VAR 0 2
60924: IFFALSE 61008
// for i = 1 to tigers do
60926: LD_ADDR_VAR 0 11
60930: PUSH
60931: DOUBLE
60932: LD_INT 1
60934: DEC
60935: ST_TO_ADDR
60936: LD_VAR 0 2
60940: PUSH
60941: FOR_TO
60942: IFFALSE 61006
// begin hc_class = class_tiger ;
60944: LD_ADDR_OWVAR 28
60948: PUSH
60949: LD_INT 14
60951: ST_TO_ADDR
// hc_gallery =  ;
60952: LD_ADDR_OWVAR 33
60956: PUSH
60957: LD_STRING 
60959: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60960: LD_ADDR_OWVAR 35
60964: PUSH
60965: LD_INT 7
60967: NEG
60968: PPUSH
60969: LD_INT 7
60971: PPUSH
60972: CALL_OW 12
60976: ST_TO_ADDR
// animal := CreateHuman ;
60977: LD_ADDR_VAR 0 12
60981: PUSH
60982: CALL_OW 44
60986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60987: LD_VAR 0 12
60991: PPUSH
60992: LD_VAR 0 8
60996: PPUSH
60997: LD_INT 0
60999: PPUSH
61000: CALL 62966 0 3
// end ;
61004: GO 60941
61006: POP
61007: POP
// if apemans then
61008: LD_VAR 0 3
61012: IFFALSE 61135
// for i = 1 to apemans do
61014: LD_ADDR_VAR 0 11
61018: PUSH
61019: DOUBLE
61020: LD_INT 1
61022: DEC
61023: ST_TO_ADDR
61024: LD_VAR 0 3
61028: PUSH
61029: FOR_TO
61030: IFFALSE 61133
// begin hc_class = class_apeman ;
61032: LD_ADDR_OWVAR 28
61036: PUSH
61037: LD_INT 12
61039: ST_TO_ADDR
// hc_gallery =  ;
61040: LD_ADDR_OWVAR 33
61044: PUSH
61045: LD_STRING 
61047: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61048: LD_ADDR_OWVAR 35
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PPUSH
61057: LD_INT 2
61059: PPUSH
61060: CALL_OW 12
61064: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61065: LD_ADDR_OWVAR 31
61069: PUSH
61070: LD_INT 1
61072: PPUSH
61073: LD_INT 3
61075: PPUSH
61076: CALL_OW 12
61080: PUSH
61081: LD_INT 1
61083: PPUSH
61084: LD_INT 3
61086: PPUSH
61087: CALL_OW 12
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: ST_TO_ADDR
// animal := CreateHuman ;
61104: LD_ADDR_VAR 0 12
61108: PUSH
61109: CALL_OW 44
61113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61114: LD_VAR 0 12
61118: PPUSH
61119: LD_VAR 0 8
61123: PPUSH
61124: LD_INT 0
61126: PPUSH
61127: CALL 62966 0 3
// end ;
61131: GO 61029
61133: POP
61134: POP
// if enchidnas then
61135: LD_VAR 0 4
61139: IFFALSE 61206
// for i = 1 to enchidnas do
61141: LD_ADDR_VAR 0 11
61145: PUSH
61146: DOUBLE
61147: LD_INT 1
61149: DEC
61150: ST_TO_ADDR
61151: LD_VAR 0 4
61155: PUSH
61156: FOR_TO
61157: IFFALSE 61204
// begin hc_class = 13 ;
61159: LD_ADDR_OWVAR 28
61163: PUSH
61164: LD_INT 13
61166: ST_TO_ADDR
// hc_gallery =  ;
61167: LD_ADDR_OWVAR 33
61171: PUSH
61172: LD_STRING 
61174: ST_TO_ADDR
// animal := CreateHuman ;
61175: LD_ADDR_VAR 0 12
61179: PUSH
61180: CALL_OW 44
61184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61185: LD_VAR 0 12
61189: PPUSH
61190: LD_VAR 0 8
61194: PPUSH
61195: LD_INT 0
61197: PPUSH
61198: CALL 62966 0 3
// end ;
61202: GO 61156
61204: POP
61205: POP
// if fishes then
61206: LD_VAR 0 7
61210: IFFALSE 61277
// for i = 1 to fishes do
61212: LD_ADDR_VAR 0 11
61216: PUSH
61217: DOUBLE
61218: LD_INT 1
61220: DEC
61221: ST_TO_ADDR
61222: LD_VAR 0 7
61226: PUSH
61227: FOR_TO
61228: IFFALSE 61275
// begin hc_class = 20 ;
61230: LD_ADDR_OWVAR 28
61234: PUSH
61235: LD_INT 20
61237: ST_TO_ADDR
// hc_gallery =  ;
61238: LD_ADDR_OWVAR 33
61242: PUSH
61243: LD_STRING 
61245: ST_TO_ADDR
// animal := CreateHuman ;
61246: LD_ADDR_VAR 0 12
61250: PUSH
61251: CALL_OW 44
61255: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61256: LD_VAR 0 12
61260: PPUSH
61261: LD_VAR 0 9
61265: PPUSH
61266: LD_INT 0
61268: PPUSH
61269: CALL 62966 0 3
// end ;
61273: GO 61227
61275: POP
61276: POP
// end ;
61277: LD_VAR 0 10
61281: RET
// export function WantHeal ( sci , unit ) ; begin
61282: LD_INT 0
61284: PPUSH
// if GetTaskList ( sci ) > 0 then
61285: LD_VAR 0 1
61289: PPUSH
61290: CALL_OW 437
61294: PUSH
61295: LD_INT 0
61297: GREATER
61298: IFFALSE 61368
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61300: LD_VAR 0 1
61304: PPUSH
61305: CALL_OW 437
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: PUSH
61314: LD_INT 1
61316: ARRAY
61317: PUSH
61318: LD_STRING l
61320: EQUAL
61321: PUSH
61322: LD_VAR 0 1
61326: PPUSH
61327: CALL_OW 437
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: LD_INT 4
61338: ARRAY
61339: PUSH
61340: LD_VAR 0 2
61344: EQUAL
61345: AND
61346: IFFALSE 61358
// result := true else
61348: LD_ADDR_VAR 0 3
61352: PUSH
61353: LD_INT 1
61355: ST_TO_ADDR
61356: GO 61366
// result := false ;
61358: LD_ADDR_VAR 0 3
61362: PUSH
61363: LD_INT 0
61365: ST_TO_ADDR
// end else
61366: GO 61376
// result := false ;
61368: LD_ADDR_VAR 0 3
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// end ;
61376: LD_VAR 0 3
61380: RET
// export function HealTarget ( sci ) ; begin
61381: LD_INT 0
61383: PPUSH
// if not sci then
61384: LD_VAR 0 1
61388: NOT
61389: IFFALSE 61393
// exit ;
61391: GO 61458
// result := 0 ;
61393: LD_ADDR_VAR 0 2
61397: PUSH
61398: LD_INT 0
61400: ST_TO_ADDR
// if GetTaskList ( sci ) then
61401: LD_VAR 0 1
61405: PPUSH
61406: CALL_OW 437
61410: IFFALSE 61458
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61412: LD_VAR 0 1
61416: PPUSH
61417: CALL_OW 437
61421: PUSH
61422: LD_INT 1
61424: ARRAY
61425: PUSH
61426: LD_INT 1
61428: ARRAY
61429: PUSH
61430: LD_STRING l
61432: EQUAL
61433: IFFALSE 61458
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61435: LD_ADDR_VAR 0 2
61439: PUSH
61440: LD_VAR 0 1
61444: PPUSH
61445: CALL_OW 437
61449: PUSH
61450: LD_INT 1
61452: ARRAY
61453: PUSH
61454: LD_INT 4
61456: ARRAY
61457: ST_TO_ADDR
// end ;
61458: LD_VAR 0 2
61462: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61463: LD_INT 0
61465: PPUSH
61466: PPUSH
61467: PPUSH
61468: PPUSH
// if not base_units then
61469: LD_VAR 0 1
61473: NOT
61474: IFFALSE 61478
// exit ;
61476: GO 61565
// result := false ;
61478: LD_ADDR_VAR 0 2
61482: PUSH
61483: LD_INT 0
61485: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61486: LD_ADDR_VAR 0 5
61490: PUSH
61491: LD_VAR 0 1
61495: PPUSH
61496: LD_INT 21
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PPUSH
61506: CALL_OW 72
61510: ST_TO_ADDR
// if not tmp then
61511: LD_VAR 0 5
61515: NOT
61516: IFFALSE 61520
// exit ;
61518: GO 61565
// for i in tmp do
61520: LD_ADDR_VAR 0 3
61524: PUSH
61525: LD_VAR 0 5
61529: PUSH
61530: FOR_IN
61531: IFFALSE 61563
// begin result := EnemyInRange ( i , 22 ) ;
61533: LD_ADDR_VAR 0 2
61537: PUSH
61538: LD_VAR 0 3
61542: PPUSH
61543: LD_INT 22
61545: PPUSH
61546: CALL 59801 0 2
61550: ST_TO_ADDR
// if result then
61551: LD_VAR 0 2
61555: IFFALSE 61561
// exit ;
61557: POP
61558: POP
61559: GO 61565
// end ;
61561: GO 61530
61563: POP
61564: POP
// end ;
61565: LD_VAR 0 2
61569: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61570: LD_INT 0
61572: PPUSH
61573: PPUSH
// if not units then
61574: LD_VAR 0 1
61578: NOT
61579: IFFALSE 61583
// exit ;
61581: GO 61653
// result := [ ] ;
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: EMPTY
61589: ST_TO_ADDR
// for i in units do
61590: LD_ADDR_VAR 0 4
61594: PUSH
61595: LD_VAR 0 1
61599: PUSH
61600: FOR_IN
61601: IFFALSE 61651
// if GetTag ( i ) = tag then
61603: LD_VAR 0 4
61607: PPUSH
61608: CALL_OW 110
61612: PUSH
61613: LD_VAR 0 2
61617: EQUAL
61618: IFFALSE 61649
// result := Replace ( result , result + 1 , i ) ;
61620: LD_ADDR_VAR 0 3
61624: PUSH
61625: LD_VAR 0 3
61629: PPUSH
61630: LD_VAR 0 3
61634: PUSH
61635: LD_INT 1
61637: PLUS
61638: PPUSH
61639: LD_VAR 0 4
61643: PPUSH
61644: CALL_OW 1
61648: ST_TO_ADDR
61649: GO 61600
61651: POP
61652: POP
// end ;
61653: LD_VAR 0 3
61657: RET
// export function IsDriver ( un ) ; begin
61658: LD_INT 0
61660: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61661: LD_ADDR_VAR 0 2
61665: PUSH
61666: LD_VAR 0 1
61670: PUSH
61671: LD_INT 55
61673: PUSH
61674: EMPTY
61675: LIST
61676: PPUSH
61677: CALL_OW 69
61681: IN
61682: ST_TO_ADDR
// end ;
61683: LD_VAR 0 2
61687: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61688: LD_INT 0
61690: PPUSH
61691: PPUSH
// list := [ ] ;
61692: LD_ADDR_VAR 0 5
61696: PUSH
61697: EMPTY
61698: ST_TO_ADDR
// case d of 0 :
61699: LD_VAR 0 3
61703: PUSH
61704: LD_INT 0
61706: DOUBLE
61707: EQUAL
61708: IFTRUE 61712
61710: GO 61845
61712: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61713: LD_ADDR_VAR 0 5
61717: PUSH
61718: LD_VAR 0 1
61722: PUSH
61723: LD_INT 4
61725: MINUS
61726: PUSH
61727: LD_VAR 0 2
61731: PUSH
61732: LD_INT 4
61734: MINUS
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: LD_INT 3
61751: MINUS
61752: PUSH
61753: LD_VAR 0 2
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: LIST
61765: PUSH
61766: LD_VAR 0 1
61770: PUSH
61771: LD_INT 4
61773: PLUS
61774: PUSH
61775: LD_VAR 0 2
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: PUSH
61788: LD_VAR 0 1
61792: PUSH
61793: LD_INT 3
61795: PLUS
61796: PUSH
61797: LD_VAR 0 2
61801: PUSH
61802: LD_INT 3
61804: PLUS
61805: PUSH
61806: LD_INT 5
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: PUSH
61814: LD_VAR 0 1
61818: PUSH
61819: LD_VAR 0 2
61823: PUSH
61824: LD_INT 4
61826: PLUS
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: ST_TO_ADDR
// end ; 1 :
61843: GO 62543
61845: LD_INT 1
61847: DOUBLE
61848: EQUAL
61849: IFTRUE 61853
61851: GO 61986
61853: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61854: LD_ADDR_VAR 0 5
61858: PUSH
61859: LD_VAR 0 1
61863: PUSH
61864: LD_VAR 0 2
61868: PUSH
61869: LD_INT 4
61871: MINUS
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: PUSH
61881: LD_VAR 0 1
61885: PUSH
61886: LD_INT 3
61888: MINUS
61889: PUSH
61890: LD_VAR 0 2
61894: PUSH
61895: LD_INT 3
61897: MINUS
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: PUSH
61907: LD_VAR 0 1
61911: PUSH
61912: LD_INT 4
61914: MINUS
61915: PUSH
61916: LD_VAR 0 2
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: PUSH
61929: LD_VAR 0 1
61933: PUSH
61934: LD_VAR 0 2
61938: PUSH
61939: LD_INT 3
61941: PLUS
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: PUSH
61951: LD_VAR 0 1
61955: PUSH
61956: LD_INT 4
61958: PLUS
61959: PUSH
61960: LD_VAR 0 2
61964: PUSH
61965: LD_INT 4
61967: PLUS
61968: PUSH
61969: LD_INT 5
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: ST_TO_ADDR
// end ; 2 :
61984: GO 62543
61986: LD_INT 2
61988: DOUBLE
61989: EQUAL
61990: IFTRUE 61994
61992: GO 62123
61994: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61995: LD_ADDR_VAR 0 5
61999: PUSH
62000: LD_VAR 0 1
62004: PUSH
62005: LD_VAR 0 2
62009: PUSH
62010: LD_INT 3
62012: MINUS
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: PUSH
62022: LD_VAR 0 1
62026: PUSH
62027: LD_INT 4
62029: PLUS
62030: PUSH
62031: LD_VAR 0 2
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: PUSH
62044: LD_VAR 0 1
62048: PUSH
62049: LD_VAR 0 2
62053: PUSH
62054: LD_INT 4
62056: PLUS
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: PUSH
62066: LD_VAR 0 1
62070: PUSH
62071: LD_INT 3
62073: MINUS
62074: PUSH
62075: LD_VAR 0 2
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: LD_INT 4
62095: MINUS
62096: PUSH
62097: LD_VAR 0 2
62101: PUSH
62102: LD_INT 4
62104: MINUS
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: ST_TO_ADDR
// end ; 3 :
62121: GO 62543
62123: LD_INT 3
62125: DOUBLE
62126: EQUAL
62127: IFTRUE 62131
62129: GO 62264
62131: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62132: LD_ADDR_VAR 0 5
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 3
62144: PLUS
62145: PUSH
62146: LD_VAR 0 2
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: LD_INT 4
62166: PLUS
62167: PUSH
62168: LD_VAR 0 2
62172: PUSH
62173: LD_INT 4
62175: PLUS
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: PUSH
62185: LD_VAR 0 1
62189: PUSH
62190: LD_INT 4
62192: MINUS
62193: PUSH
62194: LD_VAR 0 2
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: PUSH
62207: LD_VAR 0 1
62211: PUSH
62212: LD_VAR 0 2
62216: PUSH
62217: LD_INT 4
62219: MINUS
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: PUSH
62229: LD_VAR 0 1
62233: PUSH
62234: LD_INT 3
62236: MINUS
62237: PUSH
62238: LD_VAR 0 2
62242: PUSH
62243: LD_INT 3
62245: MINUS
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: ST_TO_ADDR
// end ; 4 :
62262: GO 62543
62264: LD_INT 4
62266: DOUBLE
62267: EQUAL
62268: IFTRUE 62272
62270: GO 62405
62272: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62273: LD_ADDR_VAR 0 5
62277: PUSH
62278: LD_VAR 0 1
62282: PUSH
62283: LD_VAR 0 2
62287: PUSH
62288: LD_INT 4
62290: PLUS
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: LIST
62299: PUSH
62300: LD_VAR 0 1
62304: PUSH
62305: LD_INT 3
62307: PLUS
62308: PUSH
62309: LD_VAR 0 2
62313: PUSH
62314: LD_INT 3
62316: PLUS
62317: PUSH
62318: LD_INT 5
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: PUSH
62326: LD_VAR 0 1
62330: PUSH
62331: LD_INT 4
62333: PLUS
62334: PUSH
62335: LD_VAR 0 2
62339: PUSH
62340: LD_INT 4
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: LIST
62347: PUSH
62348: LD_VAR 0 1
62352: PUSH
62353: LD_VAR 0 2
62357: PUSH
62358: LD_INT 3
62360: MINUS
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: PUSH
62370: LD_VAR 0 1
62374: PUSH
62375: LD_INT 4
62377: MINUS
62378: PUSH
62379: LD_VAR 0 2
62383: PUSH
62384: LD_INT 4
62386: MINUS
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// end ; 5 :
62403: GO 62543
62405: LD_INT 5
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62413
62411: GO 62542
62413: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62414: LD_ADDR_VAR 0 5
62418: PUSH
62419: LD_VAR 0 1
62423: PUSH
62424: LD_INT 4
62426: MINUS
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: PUSH
62441: LD_VAR 0 1
62445: PUSH
62446: LD_VAR 0 2
62450: PUSH
62451: LD_INT 4
62453: MINUS
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: LIST
62462: PUSH
62463: LD_VAR 0 1
62467: PUSH
62468: LD_INT 4
62470: PLUS
62471: PUSH
62472: LD_VAR 0 2
62476: PUSH
62477: LD_INT 4
62479: PLUS
62480: PUSH
62481: LD_INT 5
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: PUSH
62489: LD_VAR 0 1
62493: PUSH
62494: LD_INT 3
62496: PLUS
62497: PUSH
62498: LD_VAR 0 2
62502: PUSH
62503: LD_INT 4
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: LIST
62510: PUSH
62511: LD_VAR 0 1
62515: PUSH
62516: LD_VAR 0 2
62520: PUSH
62521: LD_INT 3
62523: PLUS
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// end ; end ;
62540: GO 62543
62542: POP
// result := list ;
62543: LD_ADDR_VAR 0 4
62547: PUSH
62548: LD_VAR 0 5
62552: ST_TO_ADDR
// end ;
62553: LD_VAR 0 4
62557: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62558: LD_INT 0
62560: PPUSH
62561: PPUSH
62562: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62563: LD_VAR 0 1
62567: NOT
62568: PUSH
62569: LD_VAR 0 2
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: LD_INT 4
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: IN
62592: NOT
62593: OR
62594: IFFALSE 62598
// exit ;
62596: GO 62690
// tmp := [ ] ;
62598: LD_ADDR_VAR 0 5
62602: PUSH
62603: EMPTY
62604: ST_TO_ADDR
// for i in units do
62605: LD_ADDR_VAR 0 4
62609: PUSH
62610: LD_VAR 0 1
62614: PUSH
62615: FOR_IN
62616: IFFALSE 62659
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62618: LD_ADDR_VAR 0 5
62622: PUSH
62623: LD_VAR 0 5
62627: PPUSH
62628: LD_VAR 0 5
62632: PUSH
62633: LD_INT 1
62635: PLUS
62636: PPUSH
62637: LD_VAR 0 4
62641: PPUSH
62642: LD_VAR 0 2
62646: PPUSH
62647: CALL_OW 259
62651: PPUSH
62652: CALL_OW 2
62656: ST_TO_ADDR
62657: GO 62615
62659: POP
62660: POP
// if not tmp then
62661: LD_VAR 0 5
62665: NOT
62666: IFFALSE 62670
// exit ;
62668: GO 62690
// result := SortListByListDesc ( units , tmp ) ;
62670: LD_ADDR_VAR 0 3
62674: PUSH
62675: LD_VAR 0 1
62679: PPUSH
62680: LD_VAR 0 5
62684: PPUSH
62685: CALL_OW 77
62689: ST_TO_ADDR
// end ;
62690: LD_VAR 0 3
62694: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62695: LD_INT 0
62697: PPUSH
62698: PPUSH
62699: PPUSH
// result := false ;
62700: LD_ADDR_VAR 0 3
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// x := GetX ( building ) ;
62708: LD_ADDR_VAR 0 4
62712: PUSH
62713: LD_VAR 0 2
62717: PPUSH
62718: CALL_OW 250
62722: ST_TO_ADDR
// y := GetY ( building ) ;
62723: LD_ADDR_VAR 0 5
62727: PUSH
62728: LD_VAR 0 2
62732: PPUSH
62733: CALL_OW 251
62737: ST_TO_ADDR
// if not building or not x or not y then
62738: LD_VAR 0 2
62742: NOT
62743: PUSH
62744: LD_VAR 0 4
62748: NOT
62749: OR
62750: PUSH
62751: LD_VAR 0 5
62755: NOT
62756: OR
62757: IFFALSE 62761
// exit ;
62759: GO 62853
// if GetTaskList ( unit ) then
62761: LD_VAR 0 1
62765: PPUSH
62766: CALL_OW 437
62770: IFFALSE 62853
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62772: LD_STRING e
62774: PUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: CALL_OW 437
62784: PUSH
62785: LD_INT 1
62787: ARRAY
62788: PUSH
62789: LD_INT 1
62791: ARRAY
62792: EQUAL
62793: PUSH
62794: LD_VAR 0 4
62798: PUSH
62799: LD_VAR 0 1
62803: PPUSH
62804: CALL_OW 437
62808: PUSH
62809: LD_INT 1
62811: ARRAY
62812: PUSH
62813: LD_INT 2
62815: ARRAY
62816: EQUAL
62817: AND
62818: PUSH
62819: LD_VAR 0 5
62823: PUSH
62824: LD_VAR 0 1
62828: PPUSH
62829: CALL_OW 437
62833: PUSH
62834: LD_INT 1
62836: ARRAY
62837: PUSH
62838: LD_INT 3
62840: ARRAY
62841: EQUAL
62842: AND
62843: IFFALSE 62853
// result := true end ;
62845: LD_ADDR_VAR 0 3
62849: PUSH
62850: LD_INT 1
62852: ST_TO_ADDR
// end ;
62853: LD_VAR 0 3
62857: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62858: LD_INT 0
62860: PPUSH
// result := false ;
62861: LD_ADDR_VAR 0 4
62865: PUSH
62866: LD_INT 0
62868: ST_TO_ADDR
// if GetTaskList ( unit ) then
62869: LD_VAR 0 1
62873: PPUSH
62874: CALL_OW 437
62878: IFFALSE 62961
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62880: LD_STRING M
62882: PUSH
62883: LD_VAR 0 1
62887: PPUSH
62888: CALL_OW 437
62892: PUSH
62893: LD_INT 1
62895: ARRAY
62896: PUSH
62897: LD_INT 1
62899: ARRAY
62900: EQUAL
62901: PUSH
62902: LD_VAR 0 2
62906: PUSH
62907: LD_VAR 0 1
62911: PPUSH
62912: CALL_OW 437
62916: PUSH
62917: LD_INT 1
62919: ARRAY
62920: PUSH
62921: LD_INT 2
62923: ARRAY
62924: EQUAL
62925: AND
62926: PUSH
62927: LD_VAR 0 3
62931: PUSH
62932: LD_VAR 0 1
62936: PPUSH
62937: CALL_OW 437
62941: PUSH
62942: LD_INT 1
62944: ARRAY
62945: PUSH
62946: LD_INT 3
62948: ARRAY
62949: EQUAL
62950: AND
62951: IFFALSE 62961
// result := true ;
62953: LD_ADDR_VAR 0 4
62957: PUSH
62958: LD_INT 1
62960: ST_TO_ADDR
// end ; end ;
62961: LD_VAR 0 4
62965: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62966: LD_INT 0
62968: PPUSH
62969: PPUSH
62970: PPUSH
62971: PPUSH
// if not unit or not area then
62972: LD_VAR 0 1
62976: NOT
62977: PUSH
62978: LD_VAR 0 2
62982: NOT
62983: OR
62984: IFFALSE 62988
// exit ;
62986: GO 63152
// tmp := AreaToList ( area , i ) ;
62988: LD_ADDR_VAR 0 6
62992: PUSH
62993: LD_VAR 0 2
62997: PPUSH
62998: LD_VAR 0 5
63002: PPUSH
63003: CALL_OW 517
63007: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63008: LD_ADDR_VAR 0 5
63012: PUSH
63013: DOUBLE
63014: LD_INT 1
63016: DEC
63017: ST_TO_ADDR
63018: LD_VAR 0 6
63022: PUSH
63023: LD_INT 1
63025: ARRAY
63026: PUSH
63027: FOR_TO
63028: IFFALSE 63150
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63030: LD_ADDR_VAR 0 7
63034: PUSH
63035: LD_VAR 0 6
63039: PUSH
63040: LD_INT 1
63042: ARRAY
63043: PUSH
63044: LD_VAR 0 5
63048: ARRAY
63049: PUSH
63050: LD_VAR 0 6
63054: PUSH
63055: LD_INT 2
63057: ARRAY
63058: PUSH
63059: LD_VAR 0 5
63063: ARRAY
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63069: LD_VAR 0 7
63073: PUSH
63074: LD_INT 1
63076: ARRAY
63077: PPUSH
63078: LD_VAR 0 7
63082: PUSH
63083: LD_INT 2
63085: ARRAY
63086: PPUSH
63087: CALL_OW 428
63091: PUSH
63092: LD_INT 0
63094: EQUAL
63095: IFFALSE 63148
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63097: LD_VAR 0 1
63101: PPUSH
63102: LD_VAR 0 7
63106: PUSH
63107: LD_INT 1
63109: ARRAY
63110: PPUSH
63111: LD_VAR 0 7
63115: PUSH
63116: LD_INT 2
63118: ARRAY
63119: PPUSH
63120: LD_VAR 0 3
63124: PPUSH
63125: CALL_OW 48
// result := IsPlaced ( unit ) ;
63129: LD_ADDR_VAR 0 4
63133: PUSH
63134: LD_VAR 0 1
63138: PPUSH
63139: CALL_OW 305
63143: ST_TO_ADDR
// exit ;
63144: POP
63145: POP
63146: GO 63152
// end ; end ;
63148: GO 63027
63150: POP
63151: POP
// end ;
63152: LD_VAR 0 4
63156: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63157: LD_INT 0
63159: PPUSH
63160: PPUSH
63161: PPUSH
// if not side or side > 8 then
63162: LD_VAR 0 1
63166: NOT
63167: PUSH
63168: LD_VAR 0 1
63172: PUSH
63173: LD_INT 8
63175: GREATER
63176: OR
63177: IFFALSE 63181
// exit ;
63179: GO 63368
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63181: LD_ADDR_VAR 0 4
63185: PUSH
63186: LD_INT 22
63188: PUSH
63189: LD_VAR 0 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 21
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PPUSH
63212: CALL_OW 69
63216: ST_TO_ADDR
// if not tmp then
63217: LD_VAR 0 4
63221: NOT
63222: IFFALSE 63226
// exit ;
63224: GO 63368
// enable_addtolog := true ;
63226: LD_ADDR_OWVAR 81
63230: PUSH
63231: LD_INT 1
63233: ST_TO_ADDR
// AddToLog ( [ ) ;
63234: LD_STRING [
63236: PPUSH
63237: CALL_OW 561
// for i in tmp do
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: LD_VAR 0 4
63250: PUSH
63251: FOR_IN
63252: IFFALSE 63359
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63254: LD_STRING [
63256: PUSH
63257: LD_VAR 0 3
63261: PPUSH
63262: CALL_OW 266
63266: STR
63267: PUSH
63268: LD_STRING , 
63270: STR
63271: PUSH
63272: LD_VAR 0 3
63276: PPUSH
63277: CALL_OW 250
63281: STR
63282: PUSH
63283: LD_STRING , 
63285: STR
63286: PUSH
63287: LD_VAR 0 3
63291: PPUSH
63292: CALL_OW 251
63296: STR
63297: PUSH
63298: LD_STRING , 
63300: STR
63301: PUSH
63302: LD_VAR 0 3
63306: PPUSH
63307: CALL_OW 254
63311: STR
63312: PUSH
63313: LD_STRING , 
63315: STR
63316: PUSH
63317: LD_VAR 0 3
63321: PPUSH
63322: LD_INT 1
63324: PPUSH
63325: CALL_OW 268
63329: STR
63330: PUSH
63331: LD_STRING , 
63333: STR
63334: PUSH
63335: LD_VAR 0 3
63339: PPUSH
63340: LD_INT 2
63342: PPUSH
63343: CALL_OW 268
63347: STR
63348: PUSH
63349: LD_STRING ],
63351: STR
63352: PPUSH
63353: CALL_OW 561
// end ;
63357: GO 63251
63359: POP
63360: POP
// AddToLog ( ]; ) ;
63361: LD_STRING ];
63363: PPUSH
63364: CALL_OW 561
// end ;
63368: LD_VAR 0 2
63372: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63373: LD_INT 0
63375: PPUSH
63376: PPUSH
63377: PPUSH
63378: PPUSH
63379: PPUSH
// if not area or not rate or not max then
63380: LD_VAR 0 1
63384: NOT
63385: PUSH
63386: LD_VAR 0 2
63390: NOT
63391: OR
63392: PUSH
63393: LD_VAR 0 4
63397: NOT
63398: OR
63399: IFFALSE 63403
// exit ;
63401: GO 63595
// while 1 do
63403: LD_INT 1
63405: IFFALSE 63595
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63407: LD_ADDR_VAR 0 9
63411: PUSH
63412: LD_VAR 0 1
63416: PPUSH
63417: LD_INT 1
63419: PPUSH
63420: CALL_OW 287
63424: PUSH
63425: LD_INT 10
63427: MUL
63428: ST_TO_ADDR
// r := rate / 10 ;
63429: LD_ADDR_VAR 0 7
63433: PUSH
63434: LD_VAR 0 2
63438: PUSH
63439: LD_INT 10
63441: DIVREAL
63442: ST_TO_ADDR
// time := 1 1$00 ;
63443: LD_ADDR_VAR 0 8
63447: PUSH
63448: LD_INT 2100
63450: ST_TO_ADDR
// if amount < min then
63451: LD_VAR 0 9
63455: PUSH
63456: LD_VAR 0 3
63460: LESS
63461: IFFALSE 63479
// r := r * 2 else
63463: LD_ADDR_VAR 0 7
63467: PUSH
63468: LD_VAR 0 7
63472: PUSH
63473: LD_INT 2
63475: MUL
63476: ST_TO_ADDR
63477: GO 63505
// if amount > max then
63479: LD_VAR 0 9
63483: PUSH
63484: LD_VAR 0 4
63488: GREATER
63489: IFFALSE 63505
// r := r / 2 ;
63491: LD_ADDR_VAR 0 7
63495: PUSH
63496: LD_VAR 0 7
63500: PUSH
63501: LD_INT 2
63503: DIVREAL
63504: ST_TO_ADDR
// time := time / r ;
63505: LD_ADDR_VAR 0 8
63509: PUSH
63510: LD_VAR 0 8
63514: PUSH
63515: LD_VAR 0 7
63519: DIVREAL
63520: ST_TO_ADDR
// if time < 0 then
63521: LD_VAR 0 8
63525: PUSH
63526: LD_INT 0
63528: LESS
63529: IFFALSE 63546
// time := time * - 1 ;
63531: LD_ADDR_VAR 0 8
63535: PUSH
63536: LD_VAR 0 8
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: MUL
63545: ST_TO_ADDR
// wait ( time ) ;
63546: LD_VAR 0 8
63550: PPUSH
63551: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63555: LD_INT 35
63557: PPUSH
63558: LD_INT 875
63560: PPUSH
63561: CALL_OW 12
63565: PPUSH
63566: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63570: LD_INT 1
63572: PPUSH
63573: LD_INT 5
63575: PPUSH
63576: CALL_OW 12
63580: PPUSH
63581: LD_VAR 0 1
63585: PPUSH
63586: LD_INT 1
63588: PPUSH
63589: CALL_OW 55
// end ;
63593: GO 63403
// end ;
63595: LD_VAR 0 5
63599: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63600: LD_INT 0
63602: PPUSH
63603: PPUSH
63604: PPUSH
63605: PPUSH
63606: PPUSH
63607: PPUSH
63608: PPUSH
63609: PPUSH
// if not turrets or not factories then
63610: LD_VAR 0 1
63614: NOT
63615: PUSH
63616: LD_VAR 0 2
63620: NOT
63621: OR
63622: IFFALSE 63626
// exit ;
63624: GO 63933
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63626: LD_ADDR_VAR 0 10
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: LD_INT 6
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 4
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 24
63668: PUSH
63669: LD_INT 25
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 23
63678: PUSH
63679: LD_INT 27
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 42
63692: PUSH
63693: LD_INT 43
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 44
63702: PUSH
63703: LD_INT 46
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 45
63712: PUSH
63713: LD_INT 47
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: ST_TO_ADDR
// result := [ ] ;
63730: LD_ADDR_VAR 0 3
63734: PUSH
63735: EMPTY
63736: ST_TO_ADDR
// for i in turrets do
63737: LD_ADDR_VAR 0 4
63741: PUSH
63742: LD_VAR 0 1
63746: PUSH
63747: FOR_IN
63748: IFFALSE 63931
// begin nat := GetNation ( i ) ;
63750: LD_ADDR_VAR 0 7
63754: PUSH
63755: LD_VAR 0 4
63759: PPUSH
63760: CALL_OW 248
63764: ST_TO_ADDR
// weapon := 0 ;
63765: LD_ADDR_VAR 0 8
63769: PUSH
63770: LD_INT 0
63772: ST_TO_ADDR
// if not nat then
63773: LD_VAR 0 7
63777: NOT
63778: IFFALSE 63782
// continue ;
63780: GO 63747
// for j in list [ nat ] do
63782: LD_ADDR_VAR 0 5
63786: PUSH
63787: LD_VAR 0 10
63791: PUSH
63792: LD_VAR 0 7
63796: ARRAY
63797: PUSH
63798: FOR_IN
63799: IFFALSE 63840
// if GetBWeapon ( i ) = j [ 1 ] then
63801: LD_VAR 0 4
63805: PPUSH
63806: CALL_OW 269
63810: PUSH
63811: LD_VAR 0 5
63815: PUSH
63816: LD_INT 1
63818: ARRAY
63819: EQUAL
63820: IFFALSE 63838
// begin weapon := j [ 2 ] ;
63822: LD_ADDR_VAR 0 8
63826: PUSH
63827: LD_VAR 0 5
63831: PUSH
63832: LD_INT 2
63834: ARRAY
63835: ST_TO_ADDR
// break ;
63836: GO 63840
// end ;
63838: GO 63798
63840: POP
63841: POP
// if not weapon then
63842: LD_VAR 0 8
63846: NOT
63847: IFFALSE 63851
// continue ;
63849: GO 63747
// for k in factories do
63851: LD_ADDR_VAR 0 6
63855: PUSH
63856: LD_VAR 0 2
63860: PUSH
63861: FOR_IN
63862: IFFALSE 63927
// begin weapons := AvailableWeaponList ( k ) ;
63864: LD_ADDR_VAR 0 9
63868: PUSH
63869: LD_VAR 0 6
63873: PPUSH
63874: CALL_OW 478
63878: ST_TO_ADDR
// if not weapons then
63879: LD_VAR 0 9
63883: NOT
63884: IFFALSE 63888
// continue ;
63886: GO 63861
// if weapon in weapons then
63888: LD_VAR 0 8
63892: PUSH
63893: LD_VAR 0 9
63897: IN
63898: IFFALSE 63925
// begin result := [ i , weapon ] ;
63900: LD_ADDR_VAR 0 3
63904: PUSH
63905: LD_VAR 0 4
63909: PUSH
63910: LD_VAR 0 8
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: ST_TO_ADDR
// exit ;
63919: POP
63920: POP
63921: POP
63922: POP
63923: GO 63933
// end ; end ;
63925: GO 63861
63927: POP
63928: POP
// end ;
63929: GO 63747
63931: POP
63932: POP
// end ;
63933: LD_VAR 0 3
63937: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63938: LD_INT 0
63940: PPUSH
// if not side or side > 8 then
63941: LD_VAR 0 3
63945: NOT
63946: PUSH
63947: LD_VAR 0 3
63951: PUSH
63952: LD_INT 8
63954: GREATER
63955: OR
63956: IFFALSE 63960
// exit ;
63958: GO 64019
// if not range then
63960: LD_VAR 0 4
63964: NOT
63965: IFFALSE 63976
// range := - 12 ;
63967: LD_ADDR_VAR 0 4
63971: PUSH
63972: LD_INT 12
63974: NEG
63975: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63976: LD_VAR 0 1
63980: PPUSH
63981: LD_VAR 0 2
63985: PPUSH
63986: LD_VAR 0 3
63990: PPUSH
63991: LD_VAR 0 4
63995: PPUSH
63996: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64000: LD_VAR 0 1
64004: PPUSH
64005: LD_VAR 0 2
64009: PPUSH
64010: LD_VAR 0 3
64014: PPUSH
64015: CALL_OW 331
// end ;
64019: LD_VAR 0 5
64023: RET
// export function Video ( mode ) ; begin
64024: LD_INT 0
64026: PPUSH
// ingame_video = mode ;
64027: LD_ADDR_OWVAR 52
64031: PUSH
64032: LD_VAR 0 1
64036: ST_TO_ADDR
// interface_hidden = mode ;
64037: LD_ADDR_OWVAR 54
64041: PUSH
64042: LD_VAR 0 1
64046: ST_TO_ADDR
// end ;
64047: LD_VAR 0 2
64051: RET
// export function Join ( array , element ) ; begin
64052: LD_INT 0
64054: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64055: LD_ADDR_VAR 0 3
64059: PUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: LD_VAR 0 1
64069: PUSH
64070: LD_INT 1
64072: PLUS
64073: PPUSH
64074: LD_VAR 0 2
64078: PPUSH
64079: CALL_OW 1
64083: ST_TO_ADDR
// end ;
64084: LD_VAR 0 3
64088: RET
// export function JoinUnion ( array , element ) ; begin
64089: LD_INT 0
64091: PPUSH
// result := array union element ;
64092: LD_ADDR_VAR 0 3
64096: PUSH
64097: LD_VAR 0 1
64101: PUSH
64102: LD_VAR 0 2
64106: UNION
64107: ST_TO_ADDR
// end ;
64108: LD_VAR 0 3
64112: RET
// export function GetBehemoths ( side ) ; begin
64113: LD_INT 0
64115: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64116: LD_ADDR_VAR 0 2
64120: PUSH
64121: LD_INT 22
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 31
64135: PUSH
64136: LD_INT 25
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PPUSH
64147: CALL_OW 69
64151: ST_TO_ADDR
// end ;
64152: LD_VAR 0 2
64156: RET
// export function Shuffle ( array ) ; var i , index ; begin
64157: LD_INT 0
64159: PPUSH
64160: PPUSH
64161: PPUSH
// result := [ ] ;
64162: LD_ADDR_VAR 0 2
64166: PUSH
64167: EMPTY
64168: ST_TO_ADDR
// if not array then
64169: LD_VAR 0 1
64173: NOT
64174: IFFALSE 64178
// exit ;
64176: GO 64277
// Randomize ;
64178: CALL_OW 10
// for i = array downto 1 do
64182: LD_ADDR_VAR 0 3
64186: PUSH
64187: DOUBLE
64188: LD_VAR 0 1
64192: INC
64193: ST_TO_ADDR
64194: LD_INT 1
64196: PUSH
64197: FOR_DOWNTO
64198: IFFALSE 64275
// begin index := rand ( 1 , array ) ;
64200: LD_ADDR_VAR 0 4
64204: PUSH
64205: LD_INT 1
64207: PPUSH
64208: LD_VAR 0 1
64212: PPUSH
64213: CALL_OW 12
64217: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64218: LD_ADDR_VAR 0 2
64222: PUSH
64223: LD_VAR 0 2
64227: PPUSH
64228: LD_VAR 0 2
64232: PUSH
64233: LD_INT 1
64235: PLUS
64236: PPUSH
64237: LD_VAR 0 1
64241: PUSH
64242: LD_VAR 0 4
64246: ARRAY
64247: PPUSH
64248: CALL_OW 2
64252: ST_TO_ADDR
// array := Delete ( array , index ) ;
64253: LD_ADDR_VAR 0 1
64257: PUSH
64258: LD_VAR 0 1
64262: PPUSH
64263: LD_VAR 0 4
64267: PPUSH
64268: CALL_OW 3
64272: ST_TO_ADDR
// end ;
64273: GO 64197
64275: POP
64276: POP
// end ;
64277: LD_VAR 0 2
64281: RET
// export function GetBaseMaterials ( base ) ; begin
64282: LD_INT 0
64284: PPUSH
// result := [ 0 , 0 , 0 ] ;
64285: LD_ADDR_VAR 0 2
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// if not base then
64304: LD_VAR 0 1
64308: NOT
64309: IFFALSE 64313
// exit ;
64311: GO 64362
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64313: LD_ADDR_VAR 0 2
64317: PUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: LD_INT 1
64325: PPUSH
64326: CALL_OW 275
64330: PUSH
64331: LD_VAR 0 1
64335: PPUSH
64336: LD_INT 2
64338: PPUSH
64339: CALL_OW 275
64343: PUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: LD_INT 3
64351: PPUSH
64352: CALL_OW 275
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// end ;
64362: LD_VAR 0 2
64366: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64367: LD_INT 0
64369: PPUSH
64370: PPUSH
// result := array ;
64371: LD_ADDR_VAR 0 3
64375: PUSH
64376: LD_VAR 0 1
64380: ST_TO_ADDR
// if size > 0 then
64381: LD_VAR 0 2
64385: PUSH
64386: LD_INT 0
64388: GREATER
64389: IFFALSE 64435
// for i := array downto size do
64391: LD_ADDR_VAR 0 4
64395: PUSH
64396: DOUBLE
64397: LD_VAR 0 1
64401: INC
64402: ST_TO_ADDR
64403: LD_VAR 0 2
64407: PUSH
64408: FOR_DOWNTO
64409: IFFALSE 64433
// result := Delete ( result , result ) ;
64411: LD_ADDR_VAR 0 3
64415: PUSH
64416: LD_VAR 0 3
64420: PPUSH
64421: LD_VAR 0 3
64425: PPUSH
64426: CALL_OW 3
64430: ST_TO_ADDR
64431: GO 64408
64433: POP
64434: POP
// end ;
64435: LD_VAR 0 3
64439: RET
// export function ComExit ( unit ) ; var tmp ; begin
64440: LD_INT 0
64442: PPUSH
64443: PPUSH
// if not IsInUnit ( unit ) then
64444: LD_VAR 0 1
64448: PPUSH
64449: CALL_OW 310
64453: NOT
64454: IFFALSE 64458
// exit ;
64456: GO 64518
// tmp := IsInUnit ( unit ) ;
64458: LD_ADDR_VAR 0 3
64462: PUSH
64463: LD_VAR 0 1
64467: PPUSH
64468: CALL_OW 310
64472: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64473: LD_VAR 0 3
64477: PPUSH
64478: CALL_OW 247
64482: PUSH
64483: LD_INT 2
64485: EQUAL
64486: IFFALSE 64499
// ComExitVehicle ( unit ) else
64488: LD_VAR 0 1
64492: PPUSH
64493: CALL_OW 121
64497: GO 64508
// ComExitBuilding ( unit ) ;
64499: LD_VAR 0 1
64503: PPUSH
64504: CALL_OW 122
// result := tmp ;
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_VAR 0 3
64517: ST_TO_ADDR
// end ;
64518: LD_VAR 0 2
64522: RET
// export function ComExitAll ( units ) ; var i ; begin
64523: LD_INT 0
64525: PPUSH
64526: PPUSH
// if not units then
64527: LD_VAR 0 1
64531: NOT
64532: IFFALSE 64536
// exit ;
64534: GO 64562
// for i in units do
64536: LD_ADDR_VAR 0 3
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: FOR_IN
64547: IFFALSE 64560
// ComExit ( i ) ;
64549: LD_VAR 0 3
64553: PPUSH
64554: CALL 64440 0 1
64558: GO 64546
64560: POP
64561: POP
// end ;
64562: LD_VAR 0 2
64566: RET
// export function ResetHc ; begin
64567: LD_INT 0
64569: PPUSH
// InitHc ;
64570: CALL_OW 19
// hc_importance := 0 ;
64574: LD_ADDR_OWVAR 32
64578: PUSH
64579: LD_INT 0
64581: ST_TO_ADDR
// end ;
64582: LD_VAR 0 1
64586: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64587: LD_INT 0
64589: PPUSH
64590: PPUSH
64591: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64592: LD_ADDR_VAR 0 6
64596: PUSH
64597: LD_VAR 0 1
64601: PUSH
64602: LD_VAR 0 3
64606: PLUS
64607: PUSH
64608: LD_INT 2
64610: DIV
64611: ST_TO_ADDR
// if _x < 0 then
64612: LD_VAR 0 6
64616: PUSH
64617: LD_INT 0
64619: LESS
64620: IFFALSE 64637
// _x := _x * - 1 ;
64622: LD_ADDR_VAR 0 6
64626: PUSH
64627: LD_VAR 0 6
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: MUL
64636: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64637: LD_ADDR_VAR 0 7
64641: PUSH
64642: LD_VAR 0 2
64646: PUSH
64647: LD_VAR 0 4
64651: PLUS
64652: PUSH
64653: LD_INT 2
64655: DIV
64656: ST_TO_ADDR
// if _y < 0 then
64657: LD_VAR 0 7
64661: PUSH
64662: LD_INT 0
64664: LESS
64665: IFFALSE 64682
// _y := _y * - 1 ;
64667: LD_ADDR_VAR 0 7
64671: PUSH
64672: LD_VAR 0 7
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: MUL
64681: ST_TO_ADDR
// result := [ _x , _y ] ;
64682: LD_ADDR_VAR 0 5
64686: PUSH
64687: LD_VAR 0 6
64691: PUSH
64692: LD_VAR 0 7
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// end ;
64701: LD_VAR 0 5
64705: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64706: LD_INT 0
64708: PPUSH
64709: PPUSH
64710: PPUSH
64711: PPUSH
// task := GetTaskList ( unit ) ;
64712: LD_ADDR_VAR 0 7
64716: PUSH
64717: LD_VAR 0 1
64721: PPUSH
64722: CALL_OW 437
64726: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64727: LD_VAR 0 7
64731: NOT
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: LD_VAR 0 2
64742: PPUSH
64743: CALL_OW 308
64747: NOT
64748: AND
64749: IFFALSE 64753
// exit ;
64751: GO 64871
// if IsInArea ( unit , area ) then
64753: LD_VAR 0 1
64757: PPUSH
64758: LD_VAR 0 2
64762: PPUSH
64763: CALL_OW 308
64767: IFFALSE 64785
// begin ComMoveToArea ( unit , goAway ) ;
64769: LD_VAR 0 1
64773: PPUSH
64774: LD_VAR 0 3
64778: PPUSH
64779: CALL_OW 113
// exit ;
64783: GO 64871
// end ; if task [ 1 ] [ 1 ] <> M then
64785: LD_VAR 0 7
64789: PUSH
64790: LD_INT 1
64792: ARRAY
64793: PUSH
64794: LD_INT 1
64796: ARRAY
64797: PUSH
64798: LD_STRING M
64800: NONEQUAL
64801: IFFALSE 64805
// exit ;
64803: GO 64871
// x := task [ 1 ] [ 2 ] ;
64805: LD_ADDR_VAR 0 5
64809: PUSH
64810: LD_VAR 0 7
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PUSH
64819: LD_INT 2
64821: ARRAY
64822: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64823: LD_ADDR_VAR 0 6
64827: PUSH
64828: LD_VAR 0 7
64832: PUSH
64833: LD_INT 1
64835: ARRAY
64836: PUSH
64837: LD_INT 3
64839: ARRAY
64840: ST_TO_ADDR
// if InArea ( x , y , area ) then
64841: LD_VAR 0 5
64845: PPUSH
64846: LD_VAR 0 6
64850: PPUSH
64851: LD_VAR 0 2
64855: PPUSH
64856: CALL_OW 309
64860: IFFALSE 64871
// ComStop ( unit ) ;
64862: LD_VAR 0 1
64866: PPUSH
64867: CALL_OW 141
// end ;
64871: LD_VAR 0 4
64875: RET
// export function Abs ( value ) ; begin
64876: LD_INT 0
64878: PPUSH
// result := value ;
64879: LD_ADDR_VAR 0 2
64883: PUSH
64884: LD_VAR 0 1
64888: ST_TO_ADDR
// if value < 0 then
64889: LD_VAR 0 1
64893: PUSH
64894: LD_INT 0
64896: LESS
64897: IFFALSE 64914
// result := value * - 1 ;
64899: LD_ADDR_VAR 0 2
64903: PUSH
64904: LD_VAR 0 1
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: MUL
64913: ST_TO_ADDR
// end ;
64914: LD_VAR 0 2
64918: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64919: LD_INT 0
64921: PPUSH
64922: PPUSH
64923: PPUSH
64924: PPUSH
64925: PPUSH
64926: PPUSH
64927: PPUSH
64928: PPUSH
// if not unit or not building then
64929: LD_VAR 0 1
64933: NOT
64934: PUSH
64935: LD_VAR 0 2
64939: NOT
64940: OR
64941: IFFALSE 64945
// exit ;
64943: GO 65171
// x := GetX ( building ) ;
64945: LD_ADDR_VAR 0 4
64949: PUSH
64950: LD_VAR 0 2
64954: PPUSH
64955: CALL_OW 250
64959: ST_TO_ADDR
// y := GetY ( building ) ;
64960: LD_ADDR_VAR 0 6
64964: PUSH
64965: LD_VAR 0 2
64969: PPUSH
64970: CALL_OW 251
64974: ST_TO_ADDR
// d := GetDir ( building ) ;
64975: LD_ADDR_VAR 0 8
64979: PUSH
64980: LD_VAR 0 2
64984: PPUSH
64985: CALL_OW 254
64989: ST_TO_ADDR
// r := 4 ;
64990: LD_ADDR_VAR 0 9
64994: PUSH
64995: LD_INT 4
64997: ST_TO_ADDR
// for i := 1 to 5 do
64998: LD_ADDR_VAR 0 10
65002: PUSH
65003: DOUBLE
65004: LD_INT 1
65006: DEC
65007: ST_TO_ADDR
65008: LD_INT 5
65010: PUSH
65011: FOR_TO
65012: IFFALSE 65169
// begin _x := ShiftX ( x , d , r + i ) ;
65014: LD_ADDR_VAR 0 5
65018: PUSH
65019: LD_VAR 0 4
65023: PPUSH
65024: LD_VAR 0 8
65028: PPUSH
65029: LD_VAR 0 9
65033: PUSH
65034: LD_VAR 0 10
65038: PLUS
65039: PPUSH
65040: CALL_OW 272
65044: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65045: LD_ADDR_VAR 0 7
65049: PUSH
65050: LD_VAR 0 6
65054: PPUSH
65055: LD_VAR 0 8
65059: PPUSH
65060: LD_VAR 0 9
65064: PUSH
65065: LD_VAR 0 10
65069: PLUS
65070: PPUSH
65071: CALL_OW 273
65075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65076: LD_VAR 0 5
65080: PPUSH
65081: LD_VAR 0 7
65085: PPUSH
65086: CALL_OW 488
65090: PUSH
65091: LD_VAR 0 5
65095: PPUSH
65096: LD_VAR 0 7
65100: PPUSH
65101: CALL_OW 428
65105: PPUSH
65106: CALL_OW 247
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: IN
65121: NOT
65122: AND
65123: IFFALSE 65167
// begin ComMoveXY ( unit , _x , _y ) ;
65125: LD_VAR 0 1
65129: PPUSH
65130: LD_VAR 0 5
65134: PPUSH
65135: LD_VAR 0 7
65139: PPUSH
65140: CALL_OW 111
// result := [ _x , _y ] ;
65144: LD_ADDR_VAR 0 3
65148: PUSH
65149: LD_VAR 0 5
65153: PUSH
65154: LD_VAR 0 7
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// exit ;
65163: POP
65164: POP
65165: GO 65171
// end ; end ;
65167: GO 65011
65169: POP
65170: POP
// end ;
65171: LD_VAR 0 3
65175: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65176: LD_INT 0
65178: PPUSH
65179: PPUSH
65180: PPUSH
// result := 0 ;
65181: LD_ADDR_VAR 0 3
65185: PUSH
65186: LD_INT 0
65188: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65189: LD_VAR 0 1
65193: PUSH
65194: LD_INT 0
65196: LESS
65197: PUSH
65198: LD_VAR 0 1
65202: PUSH
65203: LD_INT 8
65205: GREATER
65206: OR
65207: PUSH
65208: LD_VAR 0 2
65212: PUSH
65213: LD_INT 0
65215: LESS
65216: OR
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: LD_INT 8
65225: GREATER
65226: OR
65227: IFFALSE 65231
// exit ;
65229: GO 65306
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65231: LD_ADDR_VAR 0 4
65235: PUSH
65236: LD_INT 22
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PPUSH
65248: CALL_OW 69
65252: PUSH
65253: FOR_IN
65254: IFFALSE 65304
// begin un := UnitShoot ( i ) ;
65256: LD_ADDR_VAR 0 5
65260: PUSH
65261: LD_VAR 0 4
65265: PPUSH
65266: CALL_OW 504
65270: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65271: LD_VAR 0 5
65275: PPUSH
65276: CALL_OW 255
65280: PUSH
65281: LD_VAR 0 1
65285: EQUAL
65286: IFFALSE 65302
// begin result := un ;
65288: LD_ADDR_VAR 0 3
65292: PUSH
65293: LD_VAR 0 5
65297: ST_TO_ADDR
// exit ;
65298: POP
65299: POP
65300: GO 65306
// end ; end ;
65302: GO 65253
65304: POP
65305: POP
// end ;
65306: LD_VAR 0 3
65310: RET
// export function GetCargoBay ( units ) ; begin
65311: LD_INT 0
65313: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65314: LD_ADDR_VAR 0 2
65318: PUSH
65319: LD_VAR 0 1
65323: PPUSH
65324: LD_INT 2
65326: PUSH
65327: LD_INT 34
65329: PUSH
65330: LD_INT 12
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 34
65339: PUSH
65340: LD_INT 51
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 34
65349: PUSH
65350: LD_INT 32
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 34
65359: PUSH
65360: LD_EXP 94
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: PPUSH
65376: CALL_OW 72
65380: ST_TO_ADDR
// end ;
65381: LD_VAR 0 2
65385: RET
// export function Negate ( value ) ; begin
65386: LD_INT 0
65388: PPUSH
// result := not value ;
65389: LD_ADDR_VAR 0 2
65393: PUSH
65394: LD_VAR 0 1
65398: NOT
65399: ST_TO_ADDR
// end ;
65400: LD_VAR 0 2
65404: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65405: LD_INT 0
65407: PPUSH
// if x1 = x2 then
65408: LD_VAR 0 1
65412: PUSH
65413: LD_VAR 0 3
65417: EQUAL
65418: IFFALSE 65452
// begin if y1 > y2 then
65420: LD_VAR 0 2
65424: PUSH
65425: LD_VAR 0 4
65429: GREATER
65430: IFFALSE 65442
// result := 0 else
65432: LD_ADDR_VAR 0 5
65436: PUSH
65437: LD_INT 0
65439: ST_TO_ADDR
65440: GO 65450
// result := 3 ;
65442: LD_ADDR_VAR 0 5
65446: PUSH
65447: LD_INT 3
65449: ST_TO_ADDR
// exit ;
65450: GO 65538
// end ; if y1 = y2 then
65452: LD_VAR 0 2
65456: PUSH
65457: LD_VAR 0 4
65461: EQUAL
65462: IFFALSE 65496
// begin if x1 > x2 then
65464: LD_VAR 0 1
65468: PUSH
65469: LD_VAR 0 3
65473: GREATER
65474: IFFALSE 65486
// result := 1 else
65476: LD_ADDR_VAR 0 5
65480: PUSH
65481: LD_INT 1
65483: ST_TO_ADDR
65484: GO 65494
// result := 4 ;
65486: LD_ADDR_VAR 0 5
65490: PUSH
65491: LD_INT 4
65493: ST_TO_ADDR
// exit ;
65494: GO 65538
// end ; if x1 > x2 and y1 > y2 then
65496: LD_VAR 0 1
65500: PUSH
65501: LD_VAR 0 3
65505: GREATER
65506: PUSH
65507: LD_VAR 0 2
65511: PUSH
65512: LD_VAR 0 4
65516: GREATER
65517: AND
65518: IFFALSE 65530
// result := 2 else
65520: LD_ADDR_VAR 0 5
65524: PUSH
65525: LD_INT 2
65527: ST_TO_ADDR
65528: GO 65538
// result := 5 ;
65530: LD_ADDR_VAR 0 5
65534: PUSH
65535: LD_INT 5
65537: ST_TO_ADDR
// end ;
65538: LD_VAR 0 5
65542: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65543: LD_INT 0
65545: PPUSH
65546: PPUSH
// if not driver or not IsInUnit ( driver ) then
65547: LD_VAR 0 1
65551: NOT
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: CALL_OW 310
65562: NOT
65563: OR
65564: IFFALSE 65568
// exit ;
65566: GO 65658
// vehicle := IsInUnit ( driver ) ;
65568: LD_ADDR_VAR 0 3
65572: PUSH
65573: LD_VAR 0 1
65577: PPUSH
65578: CALL_OW 310
65582: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65583: LD_VAR 0 1
65587: PPUSH
65588: LD_STRING \
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: PUSH
65618: LD_STRING E
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_VAR 0 3
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PPUSH
65654: CALL_OW 446
// end ;
65658: LD_VAR 0 2
65662: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65663: LD_INT 0
65665: PPUSH
65666: PPUSH
// if not driver or not IsInUnit ( driver ) then
65667: LD_VAR 0 1
65671: NOT
65672: PUSH
65673: LD_VAR 0 1
65677: PPUSH
65678: CALL_OW 310
65682: NOT
65683: OR
65684: IFFALSE 65688
// exit ;
65686: GO 65778
// vehicle := IsInUnit ( driver ) ;
65688: LD_ADDR_VAR 0 3
65692: PUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL_OW 310
65702: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65703: LD_VAR 0 1
65707: PPUSH
65708: LD_STRING \
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: PUSH
65738: LD_STRING E
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: LD_VAR 0 3
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PPUSH
65774: CALL_OW 447
// end ;
65778: LD_VAR 0 2
65782: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65783: LD_INT 0
65785: PPUSH
65786: PPUSH
65787: PPUSH
// tmp := [ ] ;
65788: LD_ADDR_VAR 0 5
65792: PUSH
65793: EMPTY
65794: ST_TO_ADDR
// for i in units do
65795: LD_ADDR_VAR 0 4
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: FOR_IN
65806: IFFALSE 65844
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65808: LD_ADDR_VAR 0 5
65812: PUSH
65813: LD_VAR 0 5
65817: PPUSH
65818: LD_VAR 0 5
65822: PUSH
65823: LD_INT 1
65825: PLUS
65826: PPUSH
65827: LD_VAR 0 4
65831: PPUSH
65832: CALL_OW 256
65836: PPUSH
65837: CALL_OW 2
65841: ST_TO_ADDR
65842: GO 65805
65844: POP
65845: POP
// if not tmp then
65846: LD_VAR 0 5
65850: NOT
65851: IFFALSE 65855
// exit ;
65853: GO 65903
// if asc then
65855: LD_VAR 0 2
65859: IFFALSE 65883
// result := SortListByListAsc ( units , tmp ) else
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_VAR 0 1
65870: PPUSH
65871: LD_VAR 0 5
65875: PPUSH
65876: CALL_OW 76
65880: ST_TO_ADDR
65881: GO 65903
// result := SortListByListDesc ( units , tmp ) ;
65883: LD_ADDR_VAR 0 3
65887: PUSH
65888: LD_VAR 0 1
65892: PPUSH
65893: LD_VAR 0 5
65897: PPUSH
65898: CALL_OW 77
65902: ST_TO_ADDR
// end ;
65903: LD_VAR 0 3
65907: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65908: LD_INT 0
65910: PPUSH
65911: PPUSH
// task := GetTaskList ( mech ) ;
65912: LD_ADDR_VAR 0 4
65916: PUSH
65917: LD_VAR 0 1
65921: PPUSH
65922: CALL_OW 437
65926: ST_TO_ADDR
// if not task then
65927: LD_VAR 0 4
65931: NOT
65932: IFFALSE 65936
// exit ;
65934: GO 65978
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65936: LD_ADDR_VAR 0 3
65940: PUSH
65941: LD_VAR 0 4
65945: PUSH
65946: LD_INT 1
65948: ARRAY
65949: PUSH
65950: LD_INT 1
65952: ARRAY
65953: PUSH
65954: LD_STRING r
65956: EQUAL
65957: PUSH
65958: LD_VAR 0 4
65962: PUSH
65963: LD_INT 1
65965: ARRAY
65966: PUSH
65967: LD_INT 4
65969: ARRAY
65970: PUSH
65971: LD_VAR 0 2
65975: EQUAL
65976: AND
65977: ST_TO_ADDR
// end ;
65978: LD_VAR 0 3
65982: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65983: LD_INT 0
65985: PPUSH
// SetDir ( unit , d ) ;
65986: LD_VAR 0 1
65990: PPUSH
65991: LD_VAR 0 4
65995: PPUSH
65996: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66000: LD_VAR 0 1
66004: PPUSH
66005: LD_VAR 0 2
66009: PPUSH
66010: LD_VAR 0 3
66014: PPUSH
66015: LD_VAR 0 5
66019: PPUSH
66020: CALL_OW 48
// end ;
66024: LD_VAR 0 6
66028: RET
// export function ToNaturalNumber ( number ) ; begin
66029: LD_INT 0
66031: PPUSH
// result := number div 1 ;
66032: LD_ADDR_VAR 0 2
66036: PUSH
66037: LD_VAR 0 1
66041: PUSH
66042: LD_INT 1
66044: DIV
66045: ST_TO_ADDR
// if number < 0 then
66046: LD_VAR 0 1
66050: PUSH
66051: LD_INT 0
66053: LESS
66054: IFFALSE 66064
// result := 0 ;
66056: LD_ADDR_VAR 0 2
66060: PUSH
66061: LD_INT 0
66063: ST_TO_ADDR
// end ;
66064: LD_VAR 0 2
66068: RET
// export function SortByClass ( units , class ) ; var un ; begin
66069: LD_INT 0
66071: PPUSH
66072: PPUSH
// if not units or not class then
66073: LD_VAR 0 1
66077: NOT
66078: PUSH
66079: LD_VAR 0 2
66083: NOT
66084: OR
66085: IFFALSE 66089
// exit ;
66087: GO 66184
// result := [ ] ;
66089: LD_ADDR_VAR 0 3
66093: PUSH
66094: EMPTY
66095: ST_TO_ADDR
// for un in units do
66096: LD_ADDR_VAR 0 4
66100: PUSH
66101: LD_VAR 0 1
66105: PUSH
66106: FOR_IN
66107: IFFALSE 66182
// if GetClass ( un ) = class then
66109: LD_VAR 0 4
66113: PPUSH
66114: CALL_OW 257
66118: PUSH
66119: LD_VAR 0 2
66123: EQUAL
66124: IFFALSE 66151
// result := Insert ( result , 1 , un ) else
66126: LD_ADDR_VAR 0 3
66130: PUSH
66131: LD_VAR 0 3
66135: PPUSH
66136: LD_INT 1
66138: PPUSH
66139: LD_VAR 0 4
66143: PPUSH
66144: CALL_OW 2
66148: ST_TO_ADDR
66149: GO 66180
// result := Replace ( result , result + 1 , un ) ;
66151: LD_ADDR_VAR 0 3
66155: PUSH
66156: LD_VAR 0 3
66160: PPUSH
66161: LD_VAR 0 3
66165: PUSH
66166: LD_INT 1
66168: PLUS
66169: PPUSH
66170: LD_VAR 0 4
66174: PPUSH
66175: CALL_OW 1
66179: ST_TO_ADDR
66180: GO 66106
66182: POP
66183: POP
// end ;
66184: LD_VAR 0 3
66188: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66189: LD_INT 0
66191: PPUSH
66192: PPUSH
66193: PPUSH
66194: PPUSH
66195: PPUSH
66196: PPUSH
66197: PPUSH
// result := [ ] ;
66198: LD_ADDR_VAR 0 4
66202: PUSH
66203: EMPTY
66204: ST_TO_ADDR
// if x - r < 0 then
66205: LD_VAR 0 1
66209: PUSH
66210: LD_VAR 0 3
66214: MINUS
66215: PUSH
66216: LD_INT 0
66218: LESS
66219: IFFALSE 66231
// min_x := 0 else
66221: LD_ADDR_VAR 0 8
66225: PUSH
66226: LD_INT 0
66228: ST_TO_ADDR
66229: GO 66247
// min_x := x - r ;
66231: LD_ADDR_VAR 0 8
66235: PUSH
66236: LD_VAR 0 1
66240: PUSH
66241: LD_VAR 0 3
66245: MINUS
66246: ST_TO_ADDR
// if y - r < 0 then
66247: LD_VAR 0 2
66251: PUSH
66252: LD_VAR 0 3
66256: MINUS
66257: PUSH
66258: LD_INT 0
66260: LESS
66261: IFFALSE 66273
// min_y := 0 else
66263: LD_ADDR_VAR 0 7
66267: PUSH
66268: LD_INT 0
66270: ST_TO_ADDR
66271: GO 66289
// min_y := y - r ;
66273: LD_ADDR_VAR 0 7
66277: PUSH
66278: LD_VAR 0 2
66282: PUSH
66283: LD_VAR 0 3
66287: MINUS
66288: ST_TO_ADDR
// max_x := x + r ;
66289: LD_ADDR_VAR 0 9
66293: PUSH
66294: LD_VAR 0 1
66298: PUSH
66299: LD_VAR 0 3
66303: PLUS
66304: ST_TO_ADDR
// max_y := y + r ;
66305: LD_ADDR_VAR 0 10
66309: PUSH
66310: LD_VAR 0 2
66314: PUSH
66315: LD_VAR 0 3
66319: PLUS
66320: ST_TO_ADDR
// for _x = min_x to max_x do
66321: LD_ADDR_VAR 0 5
66325: PUSH
66326: DOUBLE
66327: LD_VAR 0 8
66331: DEC
66332: ST_TO_ADDR
66333: LD_VAR 0 9
66337: PUSH
66338: FOR_TO
66339: IFFALSE 66440
// for _y = min_y to max_y do
66341: LD_ADDR_VAR 0 6
66345: PUSH
66346: DOUBLE
66347: LD_VAR 0 7
66351: DEC
66352: ST_TO_ADDR
66353: LD_VAR 0 10
66357: PUSH
66358: FOR_TO
66359: IFFALSE 66436
// begin if not ValidHex ( _x , _y ) then
66361: LD_VAR 0 5
66365: PPUSH
66366: LD_VAR 0 6
66370: PPUSH
66371: CALL_OW 488
66375: NOT
66376: IFFALSE 66380
// continue ;
66378: GO 66358
// if GetResourceTypeXY ( _x , _y ) then
66380: LD_VAR 0 5
66384: PPUSH
66385: LD_VAR 0 6
66389: PPUSH
66390: CALL_OW 283
66394: IFFALSE 66434
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66396: LD_ADDR_VAR 0 4
66400: PUSH
66401: LD_VAR 0 4
66405: PPUSH
66406: LD_VAR 0 4
66410: PUSH
66411: LD_INT 1
66413: PLUS
66414: PPUSH
66415: LD_VAR 0 5
66419: PUSH
66420: LD_VAR 0 6
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PPUSH
66429: CALL_OW 1
66433: ST_TO_ADDR
// end ;
66434: GO 66358
66436: POP
66437: POP
66438: GO 66338
66440: POP
66441: POP
// end ;
66442: LD_VAR 0 4
66446: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
66447: LD_INT 0
66449: PPUSH
66450: PPUSH
66451: PPUSH
66452: PPUSH
66453: PPUSH
66454: PPUSH
// if not units then
66455: LD_VAR 0 1
66459: NOT
66460: IFFALSE 66464
// exit ;
66462: GO 66865
// result := UnitFilter ( units , [ f_ok ] ) ;
66464: LD_ADDR_VAR 0 3
66468: PUSH
66469: LD_VAR 0 1
66473: PPUSH
66474: LD_INT 50
66476: PUSH
66477: EMPTY
66478: LIST
66479: PPUSH
66480: CALL_OW 72
66484: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66485: LD_ADDR_VAR 0 7
66489: PUSH
66490: LD_VAR 0 1
66494: PUSH
66495: LD_INT 1
66497: ARRAY
66498: PPUSH
66499: CALL_OW 255
66503: ST_TO_ADDR
// if not result then
66504: LD_VAR 0 3
66508: NOT
66509: IFFALSE 66513
// exit ;
66511: GO 66865
// for i in result do
66513: LD_ADDR_VAR 0 4
66517: PUSH
66518: LD_VAR 0 3
66522: PUSH
66523: FOR_IN
66524: IFFALSE 66863
// begin tag := GetTag ( i ) + 1 ;
66526: LD_ADDR_VAR 0 8
66530: PUSH
66531: LD_VAR 0 4
66535: PPUSH
66536: CALL_OW 110
66540: PUSH
66541: LD_INT 1
66543: PLUS
66544: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66545: LD_ADDR_VAR 0 6
66549: PUSH
66550: LD_VAR 0 4
66554: PPUSH
66555: CALL_OW 250
66559: PPUSH
66560: LD_VAR 0 4
66564: PPUSH
66565: CALL_OW 251
66569: PPUSH
66570: LD_INT 6
66572: PPUSH
66573: CALL 66189 0 3
66577: ST_TO_ADDR
// if cr then
66578: LD_VAR 0 6
66582: IFFALSE 66621
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66584: LD_VAR 0 4
66588: PPUSH
66589: LD_VAR 0 6
66593: PUSH
66594: LD_INT 1
66596: ARRAY
66597: PUSH
66598: LD_INT 1
66600: ARRAY
66601: PPUSH
66602: LD_VAR 0 6
66606: PUSH
66607: LD_INT 1
66609: ARRAY
66610: PUSH
66611: LD_INT 2
66613: ARRAY
66614: PPUSH
66615: CALL_OW 116
66619: GO 66861
// if path > tag then
66621: LD_VAR 0 2
66625: PUSH
66626: LD_VAR 0 8
66630: GREATER
66631: IFFALSE 66809
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
66633: LD_ADDR_VAR 0 5
66637: PUSH
66638: LD_INT 81
66640: PUSH
66641: LD_VAR 0 7
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 91
66652: PUSH
66653: LD_VAR 0 4
66657: PUSH
66658: LD_INT 12
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PPUSH
66670: CALL_OW 69
66674: ST_TO_ADDR
// if enemy then
66675: LD_VAR 0 5
66679: IFFALSE 66707
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66681: LD_VAR 0 4
66685: PPUSH
66686: LD_VAR 0 5
66690: PPUSH
66691: LD_VAR 0 4
66695: PPUSH
66696: CALL_OW 74
66700: PPUSH
66701: CALL_OW 115
66705: GO 66807
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66707: LD_VAR 0 4
66711: PPUSH
66712: LD_VAR 0 2
66716: PUSH
66717: LD_VAR 0 8
66721: ARRAY
66722: PUSH
66723: LD_INT 1
66725: ARRAY
66726: PPUSH
66727: LD_VAR 0 2
66731: PUSH
66732: LD_VAR 0 8
66736: ARRAY
66737: PUSH
66738: LD_INT 2
66740: ARRAY
66741: PPUSH
66742: CALL_OW 297
66746: PUSH
66747: LD_INT 6
66749: GREATER
66750: IFFALSE 66793
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66752: LD_VAR 0 4
66756: PPUSH
66757: LD_VAR 0 2
66761: PUSH
66762: LD_VAR 0 8
66766: ARRAY
66767: PUSH
66768: LD_INT 1
66770: ARRAY
66771: PPUSH
66772: LD_VAR 0 2
66776: PUSH
66777: LD_VAR 0 8
66781: ARRAY
66782: PUSH
66783: LD_INT 2
66785: ARRAY
66786: PPUSH
66787: CALL_OW 114
66791: GO 66807
// SetTag ( i , tag ) ;
66793: LD_VAR 0 4
66797: PPUSH
66798: LD_VAR 0 8
66802: PPUSH
66803: CALL_OW 109
// end else
66807: GO 66861
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66809: LD_ADDR_VAR 0 5
66813: PUSH
66814: LD_INT 81
66816: PUSH
66817: LD_VAR 0 7
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PPUSH
66826: CALL_OW 69
66830: ST_TO_ADDR
// if enemy then
66831: LD_VAR 0 5
66835: IFFALSE 66861
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66837: LD_VAR 0 4
66841: PPUSH
66842: LD_VAR 0 5
66846: PPUSH
66847: LD_VAR 0 4
66851: PPUSH
66852: CALL_OW 74
66856: PPUSH
66857: CALL_OW 115
// end ; end ;
66861: GO 66523
66863: POP
66864: POP
// end ; end_of_file
66865: LD_VAR 0 3
66869: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66870: LD_VAR 0 1
66874: PUSH
66875: LD_INT 200
66877: DOUBLE
66878: GREATEREQUAL
66879: IFFALSE 66887
66881: LD_INT 299
66883: DOUBLE
66884: LESSEQUAL
66885: IFTRUE 66889
66887: GO 66921
66889: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66890: LD_VAR 0 1
66894: PPUSH
66895: LD_VAR 0 2
66899: PPUSH
66900: LD_VAR 0 3
66904: PPUSH
66905: LD_VAR 0 4
66909: PPUSH
66910: LD_VAR 0 5
66914: PPUSH
66915: CALL 23264 0 5
66919: GO 66998
66921: LD_INT 300
66923: DOUBLE
66924: GREATEREQUAL
66925: IFFALSE 66933
66927: LD_INT 399
66929: DOUBLE
66930: LESSEQUAL
66931: IFTRUE 66935
66933: GO 66997
66935: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66936: LD_VAR 0 1
66940: PPUSH
66941: LD_VAR 0 2
66945: PPUSH
66946: LD_VAR 0 3
66950: PPUSH
66951: LD_VAR 0 4
66955: PPUSH
66956: LD_VAR 0 5
66960: PPUSH
66961: LD_VAR 0 6
66965: PPUSH
66966: LD_VAR 0 7
66970: PPUSH
66971: LD_VAR 0 8
66975: PPUSH
66976: LD_VAR 0 9
66980: PPUSH
66981: LD_VAR 0 10
66985: PPUSH
66986: LD_VAR 0 11
66990: PPUSH
66991: CALL 21152 0 11
66995: GO 66998
66997: POP
// end ;
66998: PPOPN 11
67000: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67001: LD_VAR 0 1
67005: PPUSH
67006: LD_VAR 0 2
67010: PPUSH
67011: LD_VAR 0 3
67015: PPUSH
67016: LD_VAR 0 4
67020: PPUSH
67021: LD_VAR 0 5
67025: PPUSH
67026: CALL 23246 0 5
// end ; end_of_file
67030: PPOPN 5
67032: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67033: LD_VAR 0 1
67037: PPUSH
67038: LD_VAR 0 2
67042: PPUSH
67043: LD_VAR 0 3
67047: PPUSH
67048: LD_VAR 0 4
67052: PPUSH
67053: LD_VAR 0 5
67057: PPUSH
67058: LD_VAR 0 6
67062: PPUSH
67063: CALL 9960 0 6
// end ;
67067: PPOPN 6
67069: END
