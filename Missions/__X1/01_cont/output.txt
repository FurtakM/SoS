// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 9
  34: PPUSH
  35: LD_INT 8
  37: PPUSH
  38: CALL 159 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1194 0 0
// PrepareArabian ;
  50: CALL 902 0 0
// PrepareHeike ;
  54: CALL 837 0 0
// Action ;
  58: CALL 1499 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := true ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 1
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// end ;
 137: LD_VAR 0 1
 141: RET
// every 0 0$1 trigger debug do
 142: LD_EXP 2
 146: IFFALSE 158
 148: GO 150
 150: DISABLE
// FogOff ( 2 ) ; end_of_file
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 344
 158: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 159: LD_INT 0
 161: PPUSH
 162: PPUSH
 163: PPUSH
// uc_side = 0 ;
 164: LD_ADDR_OWVAR 20
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// uc_nation = 0 ;
 172: LD_ADDR_OWVAR 21
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// InitHc ;
 180: CALL_OW 19
// InitVc ;
 184: CALL_OW 20
// if mastodonts then
 188: LD_VAR 0 6
 192: IFFALSE 259
// for i = 1 to mastodonts do
 194: LD_ADDR_VAR 0 11
 198: PUSH
 199: DOUBLE
 200: LD_INT 1
 202: DEC
 203: ST_TO_ADDR
 204: LD_VAR 0 6
 208: PUSH
 209: FOR_TO
 210: IFFALSE 257
// begin vc_chassis := 31 ;
 212: LD_ADDR_OWVAR 37
 216: PUSH
 217: LD_INT 31
 219: ST_TO_ADDR
// vc_control := control_rider ;
 220: LD_ADDR_OWVAR 38
 224: PUSH
 225: LD_INT 4
 227: ST_TO_ADDR
// animal := CreateVehicle ;
 228: LD_ADDR_VAR 0 12
 232: PUSH
 233: CALL_OW 45
 237: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 238: LD_VAR 0 12
 242: PPUSH
 243: LD_VAR 0 8
 247: PPUSH
 248: LD_INT 0
 250: PPUSH
 251: CALL_OW 49
// end ;
 255: GO 209
 257: POP
 258: POP
// if horses then
 259: LD_VAR 0 5
 263: IFFALSE 330
// for i = 1 to horses do
 265: LD_ADDR_VAR 0 11
 269: PUSH
 270: DOUBLE
 271: LD_INT 1
 273: DEC
 274: ST_TO_ADDR
 275: LD_VAR 0 5
 279: PUSH
 280: FOR_TO
 281: IFFALSE 328
// begin hc_class := 21 ;
 283: LD_ADDR_OWVAR 28
 287: PUSH
 288: LD_INT 21
 290: ST_TO_ADDR
// hc_gallery :=  ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING 
 298: ST_TO_ADDR
// animal := CreateHuman ;
 299: LD_ADDR_VAR 0 12
 303: PUSH
 304: CALL_OW 44
 308: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 309: LD_VAR 0 12
 313: PPUSH
 314: LD_VAR 0 8
 318: PPUSH
 319: LD_INT 0
 321: PPUSH
 322: CALL_OW 49
// end ;
 326: GO 280
 328: POP
 329: POP
// if birds then
 330: LD_VAR 0 1
 334: IFFALSE 401
// for i = 1 to birds do
 336: LD_ADDR_VAR 0 11
 340: PUSH
 341: DOUBLE
 342: LD_INT 1
 344: DEC
 345: ST_TO_ADDR
 346: LD_VAR 0 1
 350: PUSH
 351: FOR_TO
 352: IFFALSE 399
// begin hc_class = 18 ;
 354: LD_ADDR_OWVAR 28
 358: PUSH
 359: LD_INT 18
 361: ST_TO_ADDR
// hc_gallery =  ;
 362: LD_ADDR_OWVAR 33
 366: PUSH
 367: LD_STRING 
 369: ST_TO_ADDR
// animal := CreateHuman ;
 370: LD_ADDR_VAR 0 12
 374: PUSH
 375: CALL_OW 44
 379: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 380: LD_VAR 0 12
 384: PPUSH
 385: LD_VAR 0 8
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 49
// end ;
 397: GO 351
 399: POP
 400: POP
// if tigers then
 401: LD_VAR 0 2
 405: IFFALSE 489
// for i = 1 to tigers do
 407: LD_ADDR_VAR 0 11
 411: PUSH
 412: DOUBLE
 413: LD_INT 1
 415: DEC
 416: ST_TO_ADDR
 417: LD_VAR 0 2
 421: PUSH
 422: FOR_TO
 423: IFFALSE 487
// begin hc_class = class_tiger ;
 425: LD_ADDR_OWVAR 28
 429: PUSH
 430: LD_INT 14
 432: ST_TO_ADDR
// hc_gallery =  ;
 433: LD_ADDR_OWVAR 33
 437: PUSH
 438: LD_STRING 
 440: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 441: LD_ADDR_OWVAR 35
 445: PUSH
 446: LD_INT 7
 448: NEG
 449: PPUSH
 450: LD_INT 7
 452: PPUSH
 453: CALL_OW 12
 457: ST_TO_ADDR
// animal := CreateHuman ;
 458: LD_ADDR_VAR 0 12
 462: PUSH
 463: CALL_OW 44
 467: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 468: LD_VAR 0 12
 472: PPUSH
 473: LD_VAR 0 8
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 49
// end ;
 485: GO 422
 487: POP
 488: POP
// if apemans then
 489: LD_VAR 0 3
 493: IFFALSE 616
// for i = 1 to apemans do
 495: LD_ADDR_VAR 0 11
 499: PUSH
 500: DOUBLE
 501: LD_INT 1
 503: DEC
 504: ST_TO_ADDR
 505: LD_VAR 0 3
 509: PUSH
 510: FOR_TO
 511: IFFALSE 614
// begin hc_class = class_apeman ;
 513: LD_ADDR_OWVAR 28
 517: PUSH
 518: LD_INT 12
 520: ST_TO_ADDR
// hc_gallery =  ;
 521: LD_ADDR_OWVAR 33
 525: PUSH
 526: LD_STRING 
 528: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 5
 536: NEG
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: CALL_OW 12
 545: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 546: LD_ADDR_OWVAR 31
 550: PUSH
 551: LD_INT 1
 553: PPUSH
 554: LD_INT 3
 556: PPUSH
 557: CALL_OW 12
 561: PUSH
 562: LD_INT 1
 564: PPUSH
 565: LD_INT 3
 567: PPUSH
 568: CALL_OW 12
 572: PUSH
 573: LD_INT 0
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// animal := CreateHuman ;
 585: LD_ADDR_VAR 0 12
 589: PUSH
 590: CALL_OW 44
 594: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 595: LD_VAR 0 12
 599: PPUSH
 600: LD_VAR 0 8
 604: PPUSH
 605: LD_INT 0
 607: PPUSH
 608: CALL_OW 49
// end ;
 612: GO 510
 614: POP
 615: POP
// if enchidnas then
 616: LD_VAR 0 4
 620: IFFALSE 687
// for i = 1 to enchidnas do
 622: LD_ADDR_VAR 0 11
 626: PUSH
 627: DOUBLE
 628: LD_INT 1
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 685
// begin hc_class = 13 ;
 640: LD_ADDR_OWVAR 28
 644: PUSH
 645: LD_INT 13
 647: ST_TO_ADDR
// hc_gallery =  ;
 648: LD_ADDR_OWVAR 33
 652: PUSH
 653: LD_STRING 
 655: ST_TO_ADDR
// animal := CreateHuman ;
 656: LD_ADDR_VAR 0 12
 660: PUSH
 661: CALL_OW 44
 665: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 666: LD_VAR 0 12
 670: PPUSH
 671: LD_VAR 0 8
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: CALL_OW 49
// end ;
 683: GO 637
 685: POP
 686: POP
// if fishes then
 687: LD_VAR 0 7
 691: IFFALSE 758
// for i = 1 to fishes do
 693: LD_ADDR_VAR 0 11
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_VAR 0 7
 707: PUSH
 708: FOR_TO
 709: IFFALSE 756
// begin hc_class = 20 ;
 711: LD_ADDR_OWVAR 28
 715: PUSH
 716: LD_INT 20
 718: ST_TO_ADDR
// hc_gallery =  ;
 719: LD_ADDR_OWVAR 33
 723: PUSH
 724: LD_STRING 
 726: ST_TO_ADDR
// animal := CreateHuman ;
 727: LD_ADDR_VAR 0 12
 731: PUSH
 732: CALL_OW 44
 736: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 737: LD_VAR 0 12
 741: PPUSH
 742: LD_VAR 0 9
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 49
// end ;
 754: GO 708
 756: POP
 757: POP
// end ;
 758: LD_VAR 0 10
 762: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 763: LD_INT 0
 765: PPUSH
 766: PPUSH
 767: PPUSH
// if not observer or not unit then
 768: LD_VAR 0 1
 772: NOT
 773: PUSH
 774: LD_VAR 0 2
 778: NOT
 779: OR
 780: IFFALSE 784
// exit ;
 782: GO 832
// if not See ( GetSide ( observer ) , unit ) then
 784: LD_VAR 0 1
 788: PPUSH
 789: CALL_OW 255
 793: PPUSH
 794: LD_VAR 0 2
 798: PPUSH
 799: CALL_OW 292
 803: NOT
 804: IFFALSE 808
// exit ;
 806: GO 832
// result := GetDistUnits ( observer , unit ) < 12 ;
 808: LD_ADDR_VAR 0 3
 812: PUSH
 813: LD_VAR 0 1
 817: PPUSH
 818: LD_VAR 0 2
 822: PPUSH
 823: CALL_OW 296
 827: PUSH
 828: LD_INT 12
 830: LESS
 831: ST_TO_ADDR
// end ; end_of_file
 832: LD_VAR 0 3
 836: RET
// export Heike , Olaf , Givi , Mike ; export function PrepareHeike ; begin
 837: LD_INT 0
 839: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 840: LD_INT 66
 842: PPUSH
 843: LD_INT 26
 845: PPUSH
 846: CALL_OW 86
// uc_side := 2 ;
 850: LD_ADDR_OWVAR 20
 854: PUSH
 855: LD_INT 2
 857: ST_TO_ADDR
// uc_nation := 2 ;
 858: LD_ADDR_OWVAR 21
 862: PUSH
 863: LD_INT 2
 865: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 866: LD_ADDR_EXP 10
 870: PUSH
 871: LD_STRING Heike
 873: PPUSH
 874: CALL_OW 25
 878: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 879: LD_EXP 10
 883: PPUSH
 884: LD_INT 66
 886: PPUSH
 887: LD_INT 26
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 48
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareArabian ; begin
 902: LD_INT 0
 904: PPUSH
// uc_side := 5 ;
 905: LD_ADDR_OWVAR 20
 909: PUSH
 910: LD_INT 5
 912: ST_TO_ADDR
// uc_nation := 2 ;
 913: LD_ADDR_OWVAR 21
 917: PUSH
 918: LD_INT 2
 920: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_STRING Olaf
 928: PPUSH
 929: CALL_OW 25
 933: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 934: LD_EXP 11
 938: PPUSH
 939: LD_INT 39
 941: PPUSH
 942: LD_INT 52
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 48
// Givi := NewCharacter ( Maisuradze ) ;
 952: LD_ADDR_EXP 12
 956: PUSH
 957: LD_STRING Maisuradze
 959: PPUSH
 960: CALL_OW 25
 964: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 965: LD_EXP 12
 969: PPUSH
 970: LD_INT 55
 972: PPUSH
 973: LD_INT 90
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
 983: LD_EXP 12
 987: PPUSH
 988: LD_INT 53
 990: PPUSH
 991: LD_INT 89
 993: PPUSH
 994: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
 998: LD_ADDR_EXP 13
1002: PUSH
1003: LD_STRING Mike
1005: PPUSH
1006: CALL_OW 25
1010: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1011: LD_EXP 13
1015: PPUSH
1016: LD_INT 53
1018: PPUSH
1019: LD_INT 87
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1029: LD_EXP 13
1033: PPUSH
1034: LD_INT 53
1036: PPUSH
1037: LD_INT 89
1039: PPUSH
1040: CALL_OW 118
// end ; end_of_file
1044: LD_VAR 0 1
1048: RET
// export russianPatrol , russianForces ; export function PrepareRussianPatrol ; var i , un ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
// uc_side := 3 ;
1054: LD_ADDR_OWVAR 20
1058: PUSH
1059: LD_INT 3
1061: ST_TO_ADDR
// uc_nation := 3 ;
1062: LD_ADDR_OWVAR 21
1066: PUSH
1067: LD_INT 3
1069: ST_TO_ADDR
// russianPatrol := [ ] ;
1070: LD_ADDR_EXP 14
1074: PUSH
1075: EMPTY
1076: ST_TO_ADDR
// for i = 1 to 3 do
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: DOUBLE
1083: LD_INT 1
1085: DEC
1086: ST_TO_ADDR
1087: LD_INT 3
1089: PUSH
1090: FOR_TO
1091: IFFALSE 1187
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1093: LD_INT 1
1095: PPUSH
1096: LD_INT 1
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1106: LD_ADDR_OWVAR 29
1110: PUSH
1111: LD_INT 9
1113: PUSH
1114: LD_INT 10
1116: PPUSH
1117: LD_INT 11
1119: PPUSH
1120: CALL_OW 12
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: ST_TO_ADDR
// un := CreateHuman ;
1129: LD_ADDR_VAR 0 3
1133: PUSH
1134: CALL_OW 44
1138: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1139: LD_ADDR_EXP 14
1143: PUSH
1144: LD_EXP 14
1148: PPUSH
1149: LD_VAR 0 2
1153: PPUSH
1154: LD_VAR 0 3
1158: PPUSH
1159: CALL_OW 1
1163: ST_TO_ADDR
// PlaceUnitXYR ( un , 31 , 22 , 4 , false ) ;
1164: LD_VAR 0 3
1168: PPUSH
1169: LD_INT 31
1171: PPUSH
1172: LD_INT 22
1174: PPUSH
1175: LD_INT 4
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 50
// end ;
1185: GO 1090
1187: POP
1188: POP
// end ;
1189: LD_VAR 0 1
1193: RET
// export function PrepareRussian ; var i , un ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
1198: PPUSH
// uc_side := 3 ;
1199: LD_ADDR_OWVAR 20
1203: PUSH
1204: LD_INT 3
1206: ST_TO_ADDR
// uc_nation := 3 ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_INT 3
1214: ST_TO_ADDR
// russianForces := [ ] ;
1215: LD_ADDR_EXP 15
1219: PUSH
1220: EMPTY
1221: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1222: LD_ADDR_VAR 0 2
1226: PUSH
1227: LD_INT 30
1229: PUSH
1230: LD_INT 31
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1317
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_OWVAR 67
1255: PUSH
1256: LD_INT 1
1258: MINUS
1259: PPUSH
1260: CALL_OW 380
// un := CreateHuman ;
1264: LD_ADDR_VAR 0 3
1268: PUSH
1269: CALL_OW 44
1273: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1274: LD_VAR 0 3
1278: PPUSH
1279: LD_VAR 0 2
1283: PPUSH
1284: CALL_OW 254
1288: PUSH
1289: LD_INT 3
1291: MINUS
1292: PUSH
1293: LD_INT 6
1295: MOD
1296: PPUSH
1297: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 52
// end ;
1315: GO 1242
1317: POP
1318: POP
// for i = 1 to 5 do
1319: LD_ADDR_VAR 0 2
1323: PUSH
1324: DOUBLE
1325: LD_INT 1
1327: DEC
1328: ST_TO_ADDR
1329: LD_INT 5
1331: PUSH
1332: FOR_TO
1333: IFFALSE 1419
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1335: LD_INT 0
1337: PPUSH
1338: LD_INT 1
1340: PPUSH
1341: LD_OWVAR 67
1345: PUSH
1346: LD_INT 1
1348: MINUS
1349: PPUSH
1350: CALL_OW 380
// un := CreateHuman ;
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: CALL_OW 44
1363: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1364: LD_VAR 0 3
1368: PPUSH
1369: LD_INT 11
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 49
// ComHold ( un ) ;
1379: LD_VAR 0 3
1383: PPUSH
1384: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1388: LD_ADDR_EXP 15
1392: PUSH
1393: LD_EXP 15
1397: PPUSH
1398: LD_EXP 15
1402: PUSH
1403: LD_INT 1
1405: PLUS
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// end ;
1417: GO 1332
1419: POP
1420: POP
// end ; end_of_file
1421: LD_VAR 0 1
1425: RET
// export Johnny ; export function PrepareJohnny ; begin
1426: LD_INT 0
1428: PPUSH
// uc_side := 1 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 1
1436: ST_TO_ADDR
// uc_nation := 1 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 1
1444: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
1445: LD_ADDR_EXP 16
1449: PUSH
1450: LD_STRING Harris
1452: PPUSH
1453: CALL_OW 25
1457: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
1458: LD_EXP 16
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
1470: LD_EXP 16
1474: PPUSH
1475: LD_INT 10
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 49
// ComCrawl ( Johnny ) ;
1485: LD_EXP 16
1489: PPUSH
1490: CALL_OW 137
// end ; end_of_file
1494: LD_VAR 0 1
1498: RET
// export function Action ; begin
1499: LD_INT 0
1501: PPUSH
// InGameOn ;
1502: CALL_OW 8
// wait ( 0 0$4 ) ;
1506: LD_INT 140
1508: PPUSH
1509: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
1513: LD_EXP 10
1517: PPUSH
1518: LD_STRING DH-start-1
1520: PPUSH
1521: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
1525: LD_EXP 10
1529: PPUSH
1530: LD_INT 71
1532: PPUSH
1533: LD_INT 29
1535: PPUSH
1536: CALL_OW 111
// wait ( 0 0$4 ) ;
1540: LD_INT 140
1542: PPUSH
1543: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
1547: LD_EXP 10
1551: PPUSH
1552: LD_INT 71
1554: PPUSH
1555: LD_INT 33
1557: PPUSH
1558: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
1562: LD_EXP 10
1566: PPUSH
1567: LD_INT 71
1569: PPUSH
1570: LD_INT 34
1572: PPUSH
1573: CALL_OW 178
// wait ( 0 0$4 ) ;
1577: LD_INT 140
1579: PPUSH
1580: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
1584: LD_EXP 10
1588: PPUSH
1589: LD_STRING DH-start-2
1591: PPUSH
1592: CALL_OW 88
// wait ( 0 0$4 ) ;
1596: LD_INT 140
1598: PPUSH
1599: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
1603: LD_EXP 10
1607: PPUSH
1608: LD_INT 65
1610: PPUSH
1611: LD_INT 26
1613: PPUSH
1614: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
1618: LD_EXP 10
1622: PPUSH
1623: LD_STRING DH-start-3
1625: PPUSH
1626: CALL_OW 88
// InGameOff ;
1630: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
1634: LD_STRING O1_cont
1636: PPUSH
1637: CALL_OW 337
// SaveForQuickRestart ;
1641: CALL_OW 22
// missionStarted := true ;
1645: LD_ADDR_EXP 1
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// PrepareJohnny ;
1653: CALL 1426 0 0
// end ;
1657: LD_VAR 0 1
1661: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny do
1662: LD_EXP 8
1666: NOT
1667: PUSH
1668: LD_EXP 7
1672: NOT
1673: AND
1674: PUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_EXP 16
1682: PPUSH
1683: CALL_OW 292
1687: AND
1688: PUSH
1689: LD_INT 22
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 69
1703: PPUSH
1704: LD_EXP 10
1708: PPUSH
1709: CALL_OW 74
1713: PUSH
1714: LD_EXP 16
1718: EQUAL
1719: AND
1720: IFFALSE 2625
1722: GO 1724
1724: DISABLE
// begin InGameOn ;
1725: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
1729: LD_EXP 10
1733: PPUSH
1734: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
1738: LD_EXP 16
1742: PPUSH
1743: LD_STRING DJ-ambush-1
1745: PPUSH
1746: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1750: LD_INT 10
1752: PPUSH
1753: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
1757: LD_EXP 10
1761: PPUSH
1762: LD_EXP 16
1766: PPUSH
1767: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
1771: LD_EXP 10
1775: PPUSH
1776: LD_STRING DH-ambush-1
1778: PPUSH
1779: CALL_OW 88
// wait ( 0 0$1 ) ;
1783: LD_INT 35
1785: PPUSH
1786: CALL_OW 67
// ComWalk ( Johnny ) ;
1790: LD_EXP 16
1794: PPUSH
1795: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
1799: LD_EXP 16
1803: PPUSH
1804: LD_EXP 10
1808: PPUSH
1809: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
1813: LD_INT 35
1815: PPUSH
1816: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
1820: LD_EXP 16
1824: PPUSH
1825: LD_EXP 10
1829: PPUSH
1830: CALL_OW 296
1834: PUSH
1835: LD_INT 4
1837: LESS
1838: IFFALSE 1813
// ComTurnUnit ( Johnny , Heike ) ;
1840: LD_EXP 16
1844: PPUSH
1845: LD_EXP 10
1849: PPUSH
1850: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
1854: LD_EXP 16
1858: PPUSH
1859: LD_STRING DJ-ambush-2
1861: PPUSH
1862: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
1866: LD_EXP 10
1870: PPUSH
1871: LD_STRING DH-ambush-2
1873: PPUSH
1874: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
1878: LD_EXP 16
1882: PPUSH
1883: LD_STRING DJ-ambush-3
1885: PPUSH
1886: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
1890: LD_EXP 10
1894: PPUSH
1895: LD_STRING DH-ambush-3
1897: PPUSH
1898: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
1902: LD_EXP 16
1906: PPUSH
1907: LD_STRING DJ-ambush-4
1909: PPUSH
1910: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
1914: LD_EXP 10
1918: PPUSH
1919: LD_INT 39
1921: PPUSH
1922: LD_INT 22
1924: PPUSH
1925: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
1929: LD_EXP 10
1933: PPUSH
1934: LD_STRING DH-ambush-4
1936: PPUSH
1937: CALL_OW 88
// PrepareRussianPatrol ;
1941: CALL 1049 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
1945: LD_INT 39
1947: PPUSH
1948: LD_INT 22
1950: PPUSH
1951: LD_INT 2
1953: PPUSH
1954: LD_INT 12
1956: NEG
1957: PPUSH
1958: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
1962: LD_INT 39
1964: PPUSH
1965: LD_INT 22
1967: PPUSH
1968: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
1972: LD_EXP 14
1976: PPUSH
1977: LD_INT 39
1979: PPUSH
1980: LD_INT 23
1982: PPUSH
1983: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
1987: LD_EXP 10
1991: PUSH
1992: LD_EXP 16
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: PPUSH
2001: LD_INT 39
2003: PPUSH
2004: LD_INT 7
2006: PPUSH
2007: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
2011: LD_EXP 10
2015: PUSH
2016: LD_EXP 16
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: LD_EXP 14
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
2038: LD_EXP 14
2042: PUSH
2043: LD_INT 1
2045: ARRAY
2046: PPUSH
2047: LD_STRING DR-ambush-5
2049: PPUSH
2050: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
2054: LD_EXP 14
2058: PUSH
2059: LD_INT 2
2061: ARRAY
2062: PPUSH
2063: LD_STRING DR1-ambush-5
2065: PPUSH
2066: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
2070: LD_INT 35
2072: PPUSH
2073: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 4 ;
2077: LD_EXP 10
2081: PPUSH
2082: LD_INT 39
2084: PPUSH
2085: LD_INT 7
2087: PPUSH
2088: CALL_OW 297
2092: PUSH
2093: LD_INT 4
2095: LESS
2096: IFFALSE 2070
// ComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
2098: LD_EXP 10
2102: PPUSH
2103: LD_EXP 14
2107: PUSH
2108: LD_INT 1
2110: ARRAY
2111: PPUSH
2112: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
2116: LD_EXP 16
2120: PPUSH
2121: LD_EXP 10
2125: PPUSH
2126: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
2130: LD_EXP 16
2134: PPUSH
2135: LD_STRING DJ-ambush-6
2137: PPUSH
2138: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
2142: LD_EXP 10
2146: PPUSH
2147: LD_STRING DH-ambush-6
2149: PPUSH
2150: CALL_OW 88
// InGameOff ;
2154: CALL_OW 9
// meetJohnny := true ;
2158: LD_ADDR_EXP 3
2162: PUSH
2163: LD_INT 1
2165: ST_TO_ADDR
// ComFree ( Johnny ) ;
2166: LD_EXP 16
2170: PPUSH
2171: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
2175: LD_STRING O2_ambush_cont
2177: PPUSH
2178: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
2182: LD_EXP 14
2186: PUSH
2187: LD_EXP 14
2191: ARRAY
2192: PPUSH
2193: LD_INT 29
2195: PPUSH
2196: LD_INT 15
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$2 ) ;
2203: LD_INT 70
2205: PPUSH
2206: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
2210: LD_INT 3
2212: PPUSH
2213: LD_EXP 10
2217: PPUSH
2218: CALL_OW 292
2222: NOT
2223: PUSH
2224: LD_INT 3
2226: PPUSH
2227: LD_EXP 16
2231: PPUSH
2232: CALL_OW 292
2236: NOT
2237: AND
2238: IFFALSE 2259
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
2240: LD_EXP 14
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_INT 58
2251: PPUSH
2252: LD_INT 32
2254: PPUSH
2255: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
2259: LD_INT 1750
2261: PUSH
2262: LD_INT 1400
2264: PUSH
2265: LD_INT 1225
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_OWVAR 67
2277: ARRAY
2278: PPUSH
2279: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
2283: LD_EXP 14
2287: PPUSH
2288: LD_INT 43
2290: PPUSH
2291: LD_INT 13
2293: PPUSH
2294: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2298: LD_INT 35
2300: PPUSH
2301: CALL_OW 67
// until not russianPatrol ;
2305: LD_EXP 14
2309: NOT
2310: IFFALSE 2298
// RemoveSeeing ( 39 , 22 , 2 ) ;
2312: LD_INT 39
2314: PPUSH
2315: LD_INT 22
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
2325: LD_INT 1
2327: PPUSH
2328: LD_INT 2
2330: PPUSH
2331: CALL_OW 81
2335: PUSH
2336: LD_INT 2
2338: EQUAL
2339: IFFALSE 2343
// exit ;
2341: GO 2625
// if not IsOk ( Johnny ) then
2343: LD_EXP 16
2347: PPUSH
2348: CALL_OW 302
2352: NOT
2353: IFFALSE 2364
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
2355: LD_STRING O2_ambush_out_cont
2357: PPUSH
2358: CALL_OW 337
// exit ;
2362: GO 2625
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
2364: LD_EXP 10
2368: PPUSH
2369: LD_EXP 16
2373: PPUSH
2374: CALL_OW 296
2378: PUSH
2379: LD_INT 10
2381: GREATER
2382: IFFALSE 2425
// begin ComMoveUnit ( Johnny , Heike ) ;
2384: LD_EXP 16
2388: PPUSH
2389: LD_EXP 10
2393: PPUSH
2394: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
2398: LD_INT 35
2400: PPUSH
2401: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
2405: LD_EXP 16
2409: PPUSH
2410: LD_EXP 10
2414: PPUSH
2415: CALL_OW 296
2419: PUSH
2420: LD_INT 6
2422: LESS
2423: IFFALSE 2398
// end ; CenterNowOnUnits ( Heike ) ;
2425: LD_EXP 10
2429: PPUSH
2430: CALL_OW 87
// InGameOn ;
2434: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
2438: LD_EXP 10
2442: PPUSH
2443: LD_EXP 16
2447: PPUSH
2448: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
2452: LD_EXP 16
2456: PPUSH
2457: LD_EXP 10
2461: PPUSH
2462: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
2466: LD_EXP 16
2470: PPUSH
2471: LD_STRING DJ-thanks-1
2473: PPUSH
2474: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
2478: LD_EXP 10
2482: PPUSH
2483: LD_STRING DH-thanks-1
2485: PPUSH
2486: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
2490: LD_EXP 16
2494: PPUSH
2495: LD_STRING DJ-thanks-2
2497: PPUSH
2498: CALL_OW 88
// Say ( Heike , DH-thanks-2 ) ;
2502: LD_EXP 10
2506: PPUSH
2507: LD_STRING DH-thanks-2
2509: PPUSH
2510: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
2514: LD_EXP 16
2518: PPUSH
2519: LD_INT 4
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2529: LD_INT 35
2531: PPUSH
2532: CALL_OW 67
// until not See ( 2 , Johnny ) ;
2536: LD_INT 2
2538: PPUSH
2539: LD_EXP 16
2543: PPUSH
2544: CALL_OW 292
2548: NOT
2549: IFFALSE 2529
// Say ( Heike , DH-thanks-2a ) ;
2551: LD_EXP 10
2555: PPUSH
2556: LD_STRING DH-thanks-2a
2558: PPUSH
2559: CALL_OW 88
// RemoveUnit ( Johnny ) ;
2563: LD_EXP 16
2567: PPUSH
2568: CALL_OW 64
// InGameOff ;
2572: CALL_OW 9
// johnnySaved := true ;
2576: LD_ADDR_EXP 4
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
2584: LD_EXP 10
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: LD_INT 600
2594: PPUSH
2595: CALL_OW 492
// if IsOk ( Olaf ) then
2599: LD_EXP 11
2603: PPUSH
2604: CALL_OW 302
2608: IFFALSE 2625
// ComMoveXY ( Olaf , 44 , 25 ) ;
2610: LD_EXP 11
2614: PPUSH
2615: LD_INT 44
2617: PPUSH
2618: LD_INT 25
2620: PPUSH
2621: CALL_OW 111
// end ;
2625: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
2626: LD_INT 1
2628: PPUSH
2629: LD_INT 2
2631: PPUSH
2632: CALL_OW 81
2636: PUSH
2637: LD_INT 2
2639: EQUAL
2640: PUSH
2641: LD_EXP 16
2645: PPUSH
2646: CALL_OW 302
2650: AND
2651: IFFALSE 2668
2653: GO 2655
2655: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
2656: LD_EXP 16
2660: PPUSH
2661: LD_STRING DJ-fire-1
2663: PPUSH
2664: CALL_OW 88
2668: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
2669: LD_EXP 7
2673: NOT
2674: PUSH
2675: LD_EXP 15
2679: PPUSH
2680: LD_INT 101
2682: PUSH
2683: LD_INT 2
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PPUSH
2690: CALL_OW 72
2694: AND
2695: IFFALSE 2843
2697: GO 2699
2699: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
2700: LD_EXP 10
2704: PPUSH
2705: CALL_OW 87
// DialogueOn ;
2709: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
2713: LD_EXP 10
2717: PPUSH
2718: LD_STRING DH-see-enemy-patrol-1
2720: PPUSH
2721: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
2725: LD_EXP 15
2729: PPUSH
2730: LD_INT 26
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PPUSH
2740: CALL_OW 72
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PPUSH
2749: LD_STRING DR-see-enemy-patrol-1
2751: PPUSH
2752: CALL_OW 88
// DialogueOff ;
2756: CALL_OW 7
// ComAgressiveMove ( russianForces , 72 , 21 ) ;
2760: LD_EXP 15
2764: PPUSH
2765: LD_INT 72
2767: PPUSH
2768: LD_INT 21
2770: PPUSH
2771: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2775: LD_INT 35
2777: PPUSH
2778: CALL_OW 67
// until not UnitFilter ( russianForces , [ f_not , [ f_hastask ] ] ) and not See ( 3 , Heike ) ;
2782: LD_EXP 15
2786: PPUSH
2787: LD_INT 3
2789: PUSH
2790: LD_INT 60
2792: PUSH
2793: EMPTY
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 72
2804: NOT
2805: PUSH
2806: LD_INT 3
2808: PPUSH
2809: LD_EXP 10
2813: PPUSH
2814: CALL_OW 292
2818: NOT
2819: AND
2820: IFFALSE 2775
// ComMoveToArea ( russianForces , russianEastPatrolArea ) ;
2822: LD_EXP 15
2826: PPUSH
2827: LD_INT 11
2829: PPUSH
2830: CALL_OW 113
// AddComHold ( russianForces ) ;
2834: LD_EXP 15
2838: PPUSH
2839: CALL_OW 200
// end ;
2843: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
2844: LD_EXP 1
2848: PUSH
2849: LD_EXP 8
2853: NOT
2854: AND
2855: PUSH
2856: LD_EXP 7
2860: NOT
2861: AND
2862: PUSH
2863: LD_EXP 10
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 14
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 69
2882: PPUSH
2883: LD_EXP 10
2887: PPUSH
2888: CALL_OW 74
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 6
2900: LESS
2901: AND
2902: IFFALSE 2919
2904: GO 2906
2906: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
2907: LD_EXP 10
2911: PPUSH
2912: LD_STRING DH-tiger-1
2914: PPUSH
2915: CALL_OW 88
2919: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
2920: LD_EXP 1
2924: PUSH
2925: LD_EXP 8
2929: NOT
2930: AND
2931: PUSH
2932: LD_EXP 7
2936: NOT
2937: AND
2938: PUSH
2939: LD_EXP 10
2943: PPUSH
2944: LD_INT 25
2946: PUSH
2947: LD_INT 12
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PPUSH
2954: CALL_OW 69
2958: PPUSH
2959: LD_EXP 10
2963: PPUSH
2964: CALL_OW 74
2968: PPUSH
2969: CALL_OW 296
2973: PUSH
2974: LD_INT 6
2976: LESS
2977: AND
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// Say ( Heike , DH-ape-1 ) ;
2983: LD_EXP 10
2987: PPUSH
2988: LD_STRING DH-ape-1
2990: PPUSH
2991: CALL_OW 88
2995: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
2996: LD_EXP 1
3000: PUSH
3001: LD_EXP 8
3005: NOT
3006: AND
3007: PUSH
3008: LD_EXP 7
3012: NOT
3013: AND
3014: PUSH
3015: LD_EXP 10
3019: PPUSH
3020: LD_INT 25
3022: PUSH
3023: LD_INT 18
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PPUSH
3030: CALL_OW 69
3034: PPUSH
3035: LD_EXP 10
3039: PPUSH
3040: CALL_OW 74
3044: PPUSH
3045: CALL_OW 296
3049: PUSH
3050: LD_INT 6
3052: LESS
3053: AND
3054: IFFALSE 3071
3056: GO 3058
3058: DISABLE
// Say ( Heike , DH-bird-1 ) ;
3059: LD_EXP 10
3063: PPUSH
3064: LD_STRING DH-bird-1
3066: PPUSH
3067: CALL_OW 88
3071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
3072: LD_INT 22
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 101
3084: PUSH
3085: LD_INT 3
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3113
3102: GO 3104
3104: DISABLE
// russianSpotted := true ;
3105: LD_ADDR_EXP 9
3109: PUSH
3110: LD_INT 1
3112: ST_TO_ADDR
3113: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag do var i ;
3114: LD_EXP 16
3118: PPUSH
3119: CALL_OW 305
3123: NOT
3124: PUSH
3125: LD_EXP 6
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 5
3136: AND
3137: IFFALSE 3268
3139: GO 3141
3141: DISABLE
3142: LD_INT 0
3144: PPUSH
// begin repeat wait ( 0 0$1 ) ;
3145: LD_INT 35
3147: PPUSH
3148: CALL_OW 67
// for i in dogTag do
3152: LD_ADDR_VAR 0 1
3156: PUSH
3157: LD_EXP 5
3161: PUSH
3162: FOR_IN
3163: IFFALSE 3212
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
3165: LD_EXP 10
3169: PPUSH
3170: LD_VAR 0 1
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: LD_VAR 0 1
3183: PUSH
3184: LD_INT 2
3186: ARRAY
3187: PPUSH
3188: CALL_OW 297
3192: PUSH
3193: LD_INT 3
3195: LESS
3196: IFFALSE 3210
// begin dogTagFound := i ;
3198: LD_ADDR_EXP 6
3202: PUSH
3203: LD_VAR 0 1
3207: ST_TO_ADDR
// break ;
3208: GO 3212
// end ;
3210: GO 3162
3212: POP
3213: POP
// until dogTagFound ;
3214: LD_EXP 6
3218: IFFALSE 3145
// CenterNowOnUnits ( Heike ) ;
3220: LD_EXP 10
3224: PPUSH
3225: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
3229: LD_EXP 10
3233: PPUSH
3234: LD_EXP 6
3238: PUSH
3239: LD_INT 1
3241: ARRAY
3242: PPUSH
3243: LD_EXP 6
3247: PUSH
3248: LD_INT 2
3250: ARRAY
3251: PPUSH
3252: CALL_OW 111
// Say ( Heike , DH-dogtag-found ) ;
3256: LD_EXP 10
3260: PPUSH
3261: LD_STRING DH-dogtag-found
3263: PPUSH
3264: CALL_OW 88
// end ;
3268: PPOPN 1
3270: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
3271: LD_EXP 8
3275: NOT
3276: PUSH
3277: LD_EXP 7
3281: NOT
3282: AND
3283: PUSH
3284: LD_INT 5
3286: PPUSH
3287: LD_EXP 10
3291: PPUSH
3292: CALL_OW 292
3296: AND
3297: PUSH
3298: LD_EXP 10
3302: PPUSH
3303: LD_EXP 11
3307: PPUSH
3308: CALL_OW 296
3312: PUSH
3313: LD_INT 8
3315: LESS
3316: AND
3317: IFFALSE 3663
3319: GO 3321
3321: DISABLE
// begin olafSpotted := true ;
3322: LD_ADDR_EXP 8
3326: PUSH
3327: LD_INT 1
3329: ST_TO_ADDR
// if HasTask ( Olaf ) then
3330: LD_EXP 11
3334: PPUSH
3335: CALL_OW 314
3339: IFFALSE 3350
// ComStop ( Olaf ) ;
3341: LD_EXP 11
3345: PPUSH
3346: CALL_OW 141
// InGameOn ;
3350: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
3354: LD_EXP 11
3358: PPUSH
3359: LD_EXP 10
3363: PPUSH
3364: CALL_OW 296
3368: PUSH
3369: LD_INT 8
3371: GREATER
3372: IFFALSE 3388
// ComMoveUnit ( Olaf , Heike ) ;
3374: LD_EXP 11
3378: PPUSH
3379: LD_EXP 10
3383: PPUSH
3384: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3388: LD_INT 35
3390: PPUSH
3391: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
3395: LD_EXP 11
3399: PPUSH
3400: LD_EXP 10
3404: PPUSH
3405: CALL_OW 296
3409: PUSH
3410: LD_INT 8
3412: LESSEQUAL
3413: IFFALSE 3388
// ComTurnUnit ( Heike , Olaf ) ;
3415: LD_EXP 10
3419: PPUSH
3420: LD_EXP 11
3424: PPUSH
3425: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
3429: LD_EXP 11
3433: PPUSH
3434: LD_EXP 10
3438: PPUSH
3439: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
3443: LD_EXP 11
3447: PPUSH
3448: LD_STRING DO-olaf-1
3450: PPUSH
3451: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
3455: LD_EXP 10
3459: PPUSH
3460: LD_STRING DH-olaf-1
3462: PPUSH
3463: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
3467: LD_EXP 11
3471: PPUSH
3472: LD_STRING DO-olaf-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
3479: LD_EXP 10
3483: PPUSH
3484: LD_STRING DH-olaf-2
3486: PPUSH
3487: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
3491: LD_EXP 11
3495: PPUSH
3496: LD_STRING DO-olaf-3
3498: PPUSH
3499: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
3503: LD_EXP 11
3507: PPUSH
3508: LD_STRING DO-olaf-4
3510: PPUSH
3511: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
3515: LD_EXP 10
3519: PPUSH
3520: LD_STRING DH-olaf-4
3522: PPUSH
3523: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
3527: LD_EXP 11
3531: PPUSH
3532: LD_STRING DO-olaf-5
3534: PPUSH
3535: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
3539: LD_EXP 10
3543: PPUSH
3544: LD_STRING DH-olaf-5
3546: PPUSH
3547: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
3551: LD_EXP 11
3555: PPUSH
3556: LD_STRING DO-olaf-6
3558: PPUSH
3559: CALL_OW 88
// if russianSpotted or johnnySaved then
3563: LD_EXP 9
3567: PUSH
3568: LD_EXP 4
3572: OR
3573: IFFALSE 3601
// begin Say ( Heike , DH-olaf-6a ) ;
3575: LD_EXP 10
3579: PPUSH
3580: LD_STRING DH-olaf-6a
3582: PPUSH
3583: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
3587: LD_EXP 11
3591: PPUSH
3592: LD_STRING DO-olaf-7a
3594: PPUSH
3595: CALL_OW 88
// end else
3599: GO 3625
// begin Say ( Heike , DH-olaf-6b ) ;
3601: LD_EXP 10
3605: PPUSH
3606: LD_STRING DH-olaf-6b
3608: PPUSH
3609: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
3613: LD_EXP 11
3617: PPUSH
3618: LD_STRING DO-olaf-7b
3620: PPUSH
3621: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
3625: LD_EXP 11
3629: PPUSH
3630: LD_STRING DO-olaf-8
3632: PPUSH
3633: CALL_OW 88
// InGameOff ;
3637: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
3641: LD_STRING O3_camp_cont
3643: PPUSH
3644: CALL_OW 337
// ComMoveXY ( Olaf , 51 , 85 ) ;
3648: LD_EXP 11
3652: PPUSH
3653: LD_INT 51
3655: PPUSH
3656: LD_INT 85
3658: PPUSH
3659: CALL_OW 111
// end ; end_of_file
3663: END
// on UnitDestroyed ( un ) do begin if un = Heike then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_EXP 10
3673: EQUAL
3674: IFFALSE 3683
// YouLost ( Heike ) ;
3676: LD_STRING Heike
3678: PPUSH
3679: CALL_OW 104
// if un in russianPatrol then
3683: LD_VAR 0 1
3687: PUSH
3688: LD_EXP 14
3692: IN
3693: IFFALSE 3759
// begin russianPatrol := russianPatrol diff un ;
3695: LD_ADDR_EXP 14
3699: PUSH
3700: LD_EXP 14
3704: PUSH
3705: LD_VAR 0 1
3709: DIFF
3710: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
3711: LD_ADDR_EXP 5
3715: PUSH
3716: LD_EXP 5
3720: PPUSH
3721: LD_EXP 5
3725: PUSH
3726: LD_INT 1
3728: PLUS
3729: PPUSH
3730: LD_VAR 0 1
3734: PPUSH
3735: CALL_OW 250
3739: PUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 251
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 1
3758: ST_TO_ADDR
// end ; end ;
3759: PPOPN 1
3761: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
3762: LD_VAR 0 1
3766: PUSH
3767: LD_EXP 10
3771: EQUAL
3772: IFFALSE 3781
// YouLost ( Heike ) ;
3774: LD_STRING Heike
3776: PPUSH
3777: CALL_OW 104
// end ;
3781: PPOPN 1
3783: END
