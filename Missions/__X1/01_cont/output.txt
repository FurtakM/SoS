// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5705
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// DialogueOn ;
5446: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5450: LD_EXP 17
5454: PPUSH
5455: LD_STRING DO-olaf-1
5457: PPUSH
5458: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5462: LD_EXP 16
5466: PPUSH
5467: LD_STRING DH-olaf-1
5469: PPUSH
5470: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5474: LD_EXP 17
5478: PPUSH
5479: LD_STRING DO-olaf-2
5481: PPUSH
5482: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5486: LD_EXP 16
5490: PPUSH
5491: LD_STRING DH-olaf-2
5493: PPUSH
5494: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING DO-olaf-3
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-4
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-4
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-5
5541: PPUSH
5542: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5546: LD_EXP 16
5550: PPUSH
5551: LD_STRING DH-olaf-5
5553: PPUSH
5554: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5558: LD_EXP 17
5562: PPUSH
5563: LD_STRING DO-olaf-6
5565: PPUSH
5566: CALL_OW 88
// if russianSpotted or johnnySaved then
5570: LD_EXP 9
5574: PUSH
5575: LD_EXP 4
5579: OR
5580: IFFALSE 5608
// begin Say ( Heike , DH-olaf-6a ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-6a
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-7a
5601: PPUSH
5602: CALL_OW 88
// end else
5606: GO 5632
// begin Say ( Heike , DH-olaf-6b ) ;
5608: LD_EXP 16
5612: PPUSH
5613: LD_STRING DH-olaf-6b
5615: PPUSH
5616: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING DO-olaf-7b
5627: PPUSH
5628: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-8
5639: PPUSH
5640: CALL_OW 88
// DialogueOff ;
5644: CALL_OW 7
// InGameOff ;
5648: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5652: LD_STRING O3_camp_cont
5654: PPUSH
5655: CALL_OW 337
// if not johnnySaved then
5659: LD_EXP 4
5663: NOT
5664: IFFALSE 5675
// KillUnit ( Johnny ) ;
5666: LD_EXP 25
5670: PPUSH
5671: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5675: LD_EXP 17
5679: PPUSH
5680: LD_INT 52
5682: PPUSH
5683: LD_INT 90
5685: PPUSH
5686: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 53
5697: PPUSH
5698: LD_INT 89
5700: PPUSH
5701: CALL_OW 178
// end ;
5705: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5706: LD_EXP 8
5710: NOT
5711: PUSH
5712: LD_EXP 16
5716: PPUSH
5717: LD_EXP 18
5721: PPUSH
5722: CALL_OW 296
5726: PUSH
5727: LD_INT 36
5729: LESS
5730: AND
5731: IFFALSE 5751
5733: GO 5735
5735: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5736: LD_EXP 17
5740: PPUSH
5741: LD_INT 39
5743: PPUSH
5744: LD_INT 71
5746: PPUSH
5747: CALL_OW 111
5751: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5752: LD_EXP 7
5756: NOT
5757: PUSH
5758: LD_INT 2
5760: PPUSH
5761: LD_EXP 19
5765: PPUSH
5766: CALL_OW 292
5770: PUSH
5771: LD_INT 2
5773: PPUSH
5774: LD_EXP 18
5778: PPUSH
5779: CALL_OW 292
5783: OR
5784: AND
5785: IFFALSE 7106
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
// begin if not johnnySaved then
5795: LD_EXP 4
5799: NOT
5800: IFFALSE 5811
// KillUnit ( Johnny ) ;
5802: LD_EXP 25
5806: PPUSH
5807: CALL_OW 66
// mercenariesSpotted := true ;
5811: LD_ADDR_EXP 7
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5819: LD_STRING O4_camp_cont
5821: PPUSH
5822: CALL_OW 337
// InGameOn ;
5826: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5830: LD_INT 53
5832: PPUSH
5833: LD_INT 89
5835: PPUSH
5836: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5840: LD_INT 53
5842: PPUSH
5843: LD_INT 89
5845: PPUSH
5846: LD_INT 2
5848: PPUSH
5849: LD_INT 8
5851: NEG
5852: PPUSH
5853: CALL_OW 330
// if olafSpotted then
5857: LD_EXP 8
5861: IFFALSE 5979
// begin AddComTurnUnit ( Olaf , Heike ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_EXP 16
5872: PPUSH
5873: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5877: LD_EXP 16
5881: PPUSH
5882: LD_INT 51
5884: PPUSH
5885: LD_INT 86
5887: PPUSH
5888: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_EXP 17
5901: PPUSH
5902: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5906: LD_EXP 17
5910: PPUSH
5911: LD_STRING DO-camp-1
5913: PPUSH
5914: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5918: LD_EXP 18
5922: PUSH
5923: LD_EXP 19
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PPUSH
5932: LD_EXP 16
5936: PPUSH
5937: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5941: LD_EXP 18
5945: PPUSH
5946: LD_STRING DG-camp-1
5948: PPUSH
5949: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5953: LD_EXP 16
5957: PPUSH
5958: LD_STRING DH-camp-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5965: LD_EXP 17
5969: PPUSH
5970: LD_STRING DO-camp-2
5972: PPUSH
5973: CALL_OW 88
// end else
5977: GO 6374
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5979: LD_EXP 16
5983: PPUSH
5984: LD_INT 51
5986: PPUSH
5987: LD_INT 86
5989: PPUSH
5990: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_EXP 18
6003: PPUSH
6004: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6008: LD_EXP 18
6012: PUSH
6013: LD_EXP 19
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PPUSH
6022: LD_EXP 16
6026: PPUSH
6027: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6031: LD_EXP 18
6035: PPUSH
6036: LD_STRING DG-camp-1a
6038: PPUSH
6039: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6043: LD_EXP 16
6047: PPUSH
6048: LD_STRING DH-camp-1a
6050: PPUSH
6051: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6055: LD_INT 1
6057: PPUSH
6058: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6062: LD_EXP 19
6066: PPUSH
6067: LD_EXP 17
6071: PPUSH
6072: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6076: LD_EXP 19
6080: PPUSH
6081: LD_STRING DM-camp-1a
6083: PPUSH
6084: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6088: LD_EXP 17
6092: PPUSH
6093: LD_INT 52
6095: PPUSH
6096: LD_INT 90
6098: PPUSH
6099: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6103: LD_EXP 19
6107: PPUSH
6108: LD_EXP 16
6112: PPUSH
6113: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6117: LD_EXP 18
6121: PPUSH
6122: LD_STRING DG-camp-2a
6124: PPUSH
6125: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6129: LD_EXP 16
6133: PPUSH
6134: LD_STRING DH-camp-2a
6136: PPUSH
6137: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6141: LD_EXP 19
6145: PPUSH
6146: LD_STRING DM-camp-2a
6148: PPUSH
6149: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6153: LD_INT 35
6155: PPUSH
6156: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6160: LD_EXP 17
6164: PPUSH
6165: LD_EXP 16
6169: PPUSH
6170: CALL_OW 296
6174: PUSH
6175: LD_INT 10
6177: LESS
6178: IFFALSE 6153
// AddComTurnUnit ( Olaf , Heike ) ;
6180: LD_EXP 17
6184: PPUSH
6185: LD_EXP 16
6189: PPUSH
6190: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6194: LD_EXP 19
6198: PPUSH
6199: LD_EXP 16
6203: PPUSH
6204: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6208: LD_EXP 17
6212: PPUSH
6213: LD_STRING DO-camp-2a
6215: PPUSH
6216: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6220: LD_EXP 16
6224: PPUSH
6225: LD_EXP 17
6229: PPUSH
6230: CALL_OW 119
// if russianSpotted then
6234: LD_EXP 9
6238: IFFALSE 6278
// begin Say ( Heike , DH-camp-2aa ) ;
6240: LD_EXP 16
6244: PPUSH
6245: LD_STRING DH-camp-2aa
6247: PPUSH
6248: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6252: LD_EXP 18
6256: PPUSH
6257: LD_STRING DG-camp-2aa
6259: PPUSH
6260: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6264: LD_EXP 19
6268: PPUSH
6269: LD_STRING DM-camp-2aa
6271: PPUSH
6272: CALL_OW 88
// end else
6276: GO 6302
// begin Say ( Heike , DH-camp-2ab ) ;
6278: LD_EXP 16
6282: PPUSH
6283: LD_STRING DH-camp-2ab
6285: PPUSH
6286: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6290: LD_EXP 19
6294: PPUSH
6295: LD_STRING DM-camp-2ab
6297: PPUSH
6298: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6302: LD_EXP 16
6306: PPUSH
6307: LD_STRING DH-camp-3a
6309: PPUSH
6310: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6314: LD_EXP 17
6318: PPUSH
6319: LD_STRING DO-camp-3a
6321: PPUSH
6322: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6326: LD_EXP 18
6330: PPUSH
6331: LD_STRING DG-camp-3a
6333: PPUSH
6334: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6338: LD_EXP 16
6342: PPUSH
6343: LD_STRING DH-camp-4aa
6345: PPUSH
6346: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6350: LD_EXP 19
6354: PPUSH
6355: LD_STRING DM-camp-4aa
6357: PPUSH
6358: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6362: LD_EXP 17
6366: PPUSH
6367: LD_STRING DO-camp-4a
6369: PPUSH
6370: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6374: LD_EXP 17
6378: PPUSH
6379: LD_STRING DO-camp-3
6381: PPUSH
6382: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6386: LD_EXP 17
6390: PPUSH
6391: LD_STRING DO-camp-4
6393: PPUSH
6394: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6398: LD_EXP 18
6402: PPUSH
6403: LD_EXP 17
6407: PPUSH
6408: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6412: LD_EXP 18
6416: PPUSH
6417: LD_STRING DG-camp-4
6419: PPUSH
6420: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6424: LD_EXP 16
6428: PPUSH
6429: LD_EXP 18
6433: PPUSH
6434: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6438: LD_EXP 16
6442: PPUSH
6443: LD_STRING DH-camp-4
6445: PPUSH
6446: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6450: LD_EXP 19
6454: PUSH
6455: LD_EXP 17
6459: PUSH
6460: LD_EXP 18
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: PPUSH
6470: LD_EXP 16
6474: PPUSH
6475: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6479: LD_EXP 18
6483: PPUSH
6484: LD_STRING DG-camp-5
6486: PPUSH
6487: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6491: LD_EXP 18
6495: PPUSH
6496: LD_STRING DG-camp-6
6498: PPUSH
6499: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6503: LD_EXP 16
6507: PPUSH
6508: LD_STRING DH-camp-6
6510: PPUSH
6511: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6515: LD_EXP 18
6519: PPUSH
6520: LD_STRING DG-camp-7
6522: PPUSH
6523: CALL_OW 88
// if DogTagFound then
6527: LD_EXP 6
6531: IFFALSE 6571
// begin Say ( Heike , DH-quest-1a ) ;
6533: LD_EXP 16
6537: PPUSH
6538: LD_STRING DH-quest-1a
6540: PPUSH
6541: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6545: LD_EXP 18
6549: PPUSH
6550: LD_STRING DG-quest-1a
6552: PPUSH
6553: CALL_OW 88
// mercenariesQuestDone := true ;
6557: LD_ADDR_EXP 11
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// InGameOff ;
6565: CALL_OW 9
// end else
6569: GO 6737
// begin Say ( Heike , DH-camp-7 ) ;
6571: LD_EXP 16
6575: PPUSH
6576: LD_STRING DH-camp-7
6578: PPUSH
6579: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6583: LD_EXP 16
6587: PPUSH
6588: CALL_OW 256
6592: PUSH
6593: LD_INT 1000
6595: LESS
6596: IFFALSE 6688
// begin Say ( Olaf , DO-heal-1 ) ;
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING DO-heal-1
6605: PPUSH
6606: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6610: LD_EXP 16
6614: PPUSH
6615: LD_INT 51
6617: PPUSH
6618: LD_INT 88
6620: PPUSH
6621: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6625: LD_INT 35
6627: PPUSH
6628: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6632: LD_EXP 16
6636: PPUSH
6637: LD_EXP 17
6641: PPUSH
6642: CALL_OW 296
6646: PUSH
6647: LD_INT 4
6649: LESS
6650: PUSH
6651: LD_EXP 16
6655: PPUSH
6656: LD_INT 51
6658: PPUSH
6659: LD_INT 88
6661: PPUSH
6662: CALL_OW 307
6666: OR
6667: IFFALSE 6625
// SetLives ( Heike , 1000 ) ;
6669: LD_EXP 16
6673: PPUSH
6674: LD_INT 1000
6676: PPUSH
6677: CALL_OW 234
// wait ( 0 0$2 ) ;
6681: LD_INT 70
6683: PPUSH
6684: CALL_OW 67
// end ; InGameOff ;
6688: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6692: LD_EXP 17
6696: PUSH
6697: LD_EXP 18
6701: PUSH
6702: LD_EXP 19
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: PPUSH
6712: LD_INT 53
6714: PPUSH
6715: LD_INT 89
6717: PPUSH
6718: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6722: LD_STRING O5_proof_cont
6724: PPUSH
6725: CALL_OW 337
// mercenariesQuestReady := true ;
6729: LD_ADDR_EXP 10
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6737: LD_EXP 10
6741: NOT
6742: IFFALSE 6746
// exit ;
6744: GO 7106
// wait ( 0 0$35 ) ;
6746: LD_INT 1225
6748: PPUSH
6749: CALL_OW 67
// driver := PreparePatrolTank ;
6753: LD_ADDR_VAR 0 2
6757: PUSH
6758: CALL 2814 0 0
6762: ST_TO_ADDR
// if not driver then
6763: LD_VAR 0 2
6767: NOT
6768: IFFALSE 6772
// exit ;
6770: GO 7106
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6772: LD_INT 2
6774: PPUSH
6775: LD_INT 1
6777: PPUSH
6778: LD_INT 2
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6788: LD_ADDR_VAR 0 3
6792: PUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: CALL_OW 310
6802: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_INT 500
6810: PPUSH
6811: CALL_OW 234
// SetLives ( driver , 450 ) ;
6815: LD_VAR 0 2
6819: PPUSH
6820: LD_INT 450
6822: PPUSH
6823: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6827: LD_VAR 0 2
6831: PPUSH
6832: LD_INT 59
6834: PPUSH
6835: LD_INT 60
6837: PPUSH
6838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6842: LD_INT 35
6844: PPUSH
6845: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_INT 59
6856: PPUSH
6857: LD_INT 60
6859: PPUSH
6860: CALL_OW 307
6864: IFFALSE 6842
// if not See ( 1 , Heike ) then
6866: LD_INT 1
6868: PPUSH
6869: LD_EXP 16
6873: PPUSH
6874: CALL_OW 292
6878: NOT
6879: IFFALSE 7003
// begin if Difficulty < 3 then
6881: LD_OWVAR 67
6885: PUSH
6886: LD_INT 3
6888: LESS
6889: IFFALSE 6907
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 60
6896: PPUSH
6897: LD_INT 2
6899: PPUSH
6900: LD_INT 6
6902: PPUSH
6903: CALL_OW 330
// ComExitVehicle ( driver ) ;
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL_OW 121
// wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_INT 58
6930: PPUSH
6931: LD_INT 54
6933: PPUSH
6934: CALL_OW 171
// wait ( 0 0$1 ) ;
6938: LD_INT 35
6940: PPUSH
6941: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_INT 57
6952: PPUSH
6953: LD_INT 53
6955: PPUSH
6956: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 350
6967: PPUSH
6968: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6972: LD_VAR 0 2
6976: PPUSH
6977: LD_VAR 0 3
6981: PPUSH
6982: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 107
6993: PPUSH
6994: LD_INT 118
6996: PPUSH
6997: CALL_OW 171
// end else
7001: GO 7018
// begin ComMoveXY ( driver , 107 , 118 ) ;
7003: LD_VAR 0 2
7007: PPUSH
7008: LD_INT 107
7010: PPUSH
7011: LD_INT 118
7013: PPUSH
7014: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7018: LD_INT 35
7020: PPUSH
7021: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7025: LD_VAR 0 3
7029: PPUSH
7030: LD_INT 107
7032: PPUSH
7033: LD_INT 118
7035: PPUSH
7036: CALL_OW 307
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 301
7050: OR
7051: IFFALSE 7018
// if IsDead ( driver [ 1 ] ) then
7053: LD_VAR 0 2
7057: PUSH
7058: LD_INT 1
7060: ARRAY
7061: PPUSH
7062: CALL_OW 301
7066: IFFALSE 7070
// exit ;
7068: GO 7106
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7070: LD_ADDR_VAR 0 1
7074: PUSH
7075: LD_INT 22
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7104
// RemoveUnit ( i ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL_OW 64
7102: GO 7090
7104: POP
7105: POP
// end ;
7106: PPOPN 3
7108: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7109: LD_INT 10
7111: PPUSH
7112: LD_INT 22
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 21
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 70
7140: IFFALSE 7214
7142: GO 7144
7144: DISABLE
// begin InGameOn ;
7145: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7149: LD_EXP 17
7153: PUSH
7154: LD_EXP 19
7158: PUSH
7159: LD_EXP 18
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: PPUSH
7169: LD_EXP 16
7173: PPUSH
7174: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7178: LD_EXP 19
7182: PPUSH
7183: LD_STRING DM-quest-1
7185: PPUSH
7186: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7190: LD_EXP 18
7194: PPUSH
7195: LD_STRING DG-quest-1
7197: PPUSH
7198: CALL_OW 88
// InGameOff ;
7202: CALL_OW 9
// mercenariesQuestDone := true ;
7206: LD_ADDR_EXP 11
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// end ;
7214: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7215: LD_EXP 16
7219: PPUSH
7220: LD_INT 10
7222: PPUSH
7223: CALL_OW 308
7227: PUSH
7228: LD_EXP 6
7232: AND
7233: PUSH
7234: LD_EXP 10
7238: AND
7239: PUSH
7240: LD_INT 10
7242: PPUSH
7243: LD_INT 22
7245: PUSH
7246: LD_INT 2
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 21
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 70
7271: NOT
7272: AND
7273: IFFALSE 7445
7275: GO 7277
7277: DISABLE
7278: LD_INT 0
7280: PPUSH
// begin InGameOn ;
7281: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7285: LD_EXP 17
7289: PUSH
7290: LD_EXP 19
7294: PUSH
7295: LD_EXP 18
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PPUSH
7305: LD_EXP 16
7309: PPUSH
7310: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7314: LD_EXP 16
7318: PPUSH
7319: LD_INT 54
7321: PPUSH
7322: LD_INT 86
7324: PPUSH
7325: CALL_OW 111
// p := p + 1 ;
7329: LD_ADDR_VAR 0 1
7333: PUSH
7334: LD_VAR 0 1
7338: PUSH
7339: LD_INT 1
7341: PLUS
7342: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7343: LD_INT 35
7345: PPUSH
7346: CALL_OW 67
// p := p + 1 ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_VAR 0 1
7359: PUSH
7360: LD_INT 1
7362: PLUS
7363: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7364: LD_EXP 16
7368: PPUSH
7369: LD_EXP 18
7373: PPUSH
7374: CALL_OW 296
7378: PUSH
7379: LD_INT 4
7381: LESS
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: LD_INT 5
7390: GREATER
7391: OR
7392: IFFALSE 7343
// Say ( Mike , DM-quest-1 ) ;
7394: LD_EXP 19
7398: PPUSH
7399: LD_STRING DM-quest-1
7401: PPUSH
7402: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7406: LD_EXP 18
7410: PPUSH
7411: LD_STRING DG-quest-1
7413: PPUSH
7414: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7418: LD_EXP 16
7422: PPUSH
7423: LD_INT 55
7425: PPUSH
7426: LD_INT 87
7428: PPUSH
7429: CALL_OW 111
// InGameOff ;
7433: CALL_OW 9
// mercenariesQuestDone := true ;
7437: LD_ADDR_EXP 11
7441: PUSH
7442: LD_INT 1
7444: ST_TO_ADDR
// end ;
7445: PPOPN 1
7447: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7448: LD_EXP 16
7452: PUSH
7453: LD_INT 55
7455: PUSH
7456: EMPTY
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: IN
7464: IFFALSE 7504
7466: GO 7468
7468: DISABLE
// begin if Difficulty < 3 then
7469: LD_OWVAR 67
7473: PUSH
7474: LD_INT 3
7476: LESS
7477: IFFALSE 7492
// RemoveSeeing ( 59 , 60 , 2 ) ;
7479: LD_INT 59
7481: PPUSH
7482: LD_INT 60
7484: PPUSH
7485: LD_INT 2
7487: PPUSH
7488: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7492: LD_EXP 16
7496: PPUSH
7497: LD_STRING DH-driver
7499: PPUSH
7500: CALL_OW 88
// end ;
7504: END
// every 0 0$1 trigger mercenariesQuestDone do
7505: LD_EXP 11
7509: IFFALSE 7997
7511: GO 7513
7513: DISABLE
// begin if mercenariesQuestReady then
7514: LD_EXP 10
7518: IFFALSE 7527
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7520: LD_STRING O5_proof_cont_out
7522: PPUSH
7523: CALL_OW 337
// InGameOn ;
7527: CALL_OW 8
// if IsInUnit ( Heike ) then
7531: LD_EXP 16
7535: PPUSH
7536: CALL_OW 310
7540: IFFALSE 7551
// ComExitVehicle ( Heike ) ;
7542: LD_EXP 16
7546: PPUSH
7547: CALL_OW 121
// wait ( 3 ) ;
7551: LD_INT 3
7553: PPUSH
7554: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7558: LD_EXP 16
7562: PPUSH
7563: LD_EXP 18
7567: PPUSH
7568: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7572: LD_EXP 17
7576: PUSH
7577: LD_EXP 19
7581: PUSH
7582: LD_EXP 18
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: PPUSH
7592: LD_EXP 16
7596: PPUSH
7597: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7601: LD_EXP 16
7605: PPUSH
7606: LD_STRING DH-quest-done-1
7608: PPUSH
7609: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7613: LD_EXP 19
7617: PPUSH
7618: LD_STRING DM-quest-done-1
7620: PPUSH
7621: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7625: LD_EXP 18
7629: PPUSH
7630: LD_STRING DG-quest-done-1
7632: PPUSH
7633: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7637: LD_EXP 16
7641: PPUSH
7642: LD_EXP 17
7646: PPUSH
7647: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7651: LD_EXP 16
7655: PPUSH
7656: LD_STRING DH-quest-done-2
7658: PPUSH
7659: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7663: LD_EXP 17
7667: PPUSH
7668: LD_STRING DO-quest-done-2
7670: PPUSH
7671: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7675: LD_EXP 17
7679: PPUSH
7680: LD_STRING DO-quest-done-3
7682: PPUSH
7683: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7687: LD_EXP 18
7691: PPUSH
7692: LD_INT 51
7694: PPUSH
7695: LD_INT 90
7697: PPUSH
7698: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 50
7709: PPUSH
7710: LD_INT 89
7712: PPUSH
7713: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7717: LD_EXP 16
7721: PPUSH
7722: LD_EXP 18
7726: PPUSH
7727: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7731: LD_EXP 18
7735: PPUSH
7736: LD_STRING DG-quest-done-4
7738: PPUSH
7739: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7743: LD_EXP 18
7747: PPUSH
7748: LD_EXP 16
7752: PPUSH
7753: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7757: LD_EXP 16
7761: PPUSH
7762: CALL_OW 256
7766: PUSH
7767: LD_INT 1000
7769: LESS
7770: IFFALSE 7862
// begin Say ( Olaf , DO-heal-1 ) ;
7772: LD_EXP 17
7776: PPUSH
7777: LD_STRING DO-heal-1
7779: PPUSH
7780: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7784: LD_EXP 16
7788: PPUSH
7789: LD_INT 51
7791: PPUSH
7792: LD_INT 88
7794: PPUSH
7795: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7799: LD_INT 35
7801: PPUSH
7802: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7806: LD_EXP 16
7810: PPUSH
7811: LD_EXP 17
7815: PPUSH
7816: CALL_OW 296
7820: PUSH
7821: LD_INT 4
7823: LESS
7824: PUSH
7825: LD_EXP 16
7829: PPUSH
7830: LD_INT 51
7832: PPUSH
7833: LD_INT 88
7835: PPUSH
7836: CALL_OW 307
7840: OR
7841: IFFALSE 7799
// SetLives ( Heike , 1000 ) ;
7843: LD_EXP 16
7847: PPUSH
7848: LD_INT 1000
7850: PPUSH
7851: CALL_OW 234
// wait ( 0 0$2 ) ;
7855: LD_INT 70
7857: PPUSH
7858: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7862: LD_EXP 16
7866: PPUSH
7867: LD_STRING DH-quest-done-4
7869: PPUSH
7870: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7874: LD_EXP 17
7878: PPUSH
7879: LD_STRING DO-quest-done-4
7881: PPUSH
7882: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7886: LD_EXP 16
7890: PPUSH
7891: LD_EXP 17
7895: PPUSH
7896: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7900: LD_EXP 16
7904: PPUSH
7905: LD_STRING DH-quest-done-5
7907: PPUSH
7908: CALL_OW 88
// InGameOff ;
7912: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7916: LD_STRING O6_end_cont
7918: PPUSH
7919: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7923: LD_EXP 18
7927: PPUSH
7928: LD_INT 2
7930: PPUSH
7931: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7935: LD_EXP 19
7939: PPUSH
7940: LD_INT 2
7942: PPUSH
7943: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7947: LD_INT 42
7949: PPUSH
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 2
7955: PPUSH
7956: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7960: LD_EXP 17
7964: PPUSH
7965: LD_INT 53
7967: PPUSH
7968: LD_INT 89
7970: PPUSH
7971: CALL_OW 118
// lastObjectiveActive := true ;
7975: LD_ADDR_EXP 12
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 424
// PreparePrison ;
7993: CALL 1164 0 0
// end ;
7997: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7998: LD_INT 22
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 91
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PPUSH
8026: CALL_OW 69
8030: IFFALSE 8212
8032: GO 8034
8034: DISABLE
8035: LD_INT 0
8037: PPUSH
8038: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8039: LD_INT 245
8041: PUSH
8042: LD_INT 210
8044: PUSH
8045: LD_INT 210
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PUSH
8053: LD_OWVAR 67
8057: ARRAY
8058: PPUSH
8059: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 25
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 54
8090: PUSH
8091: EMPTY
8092: LIST
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: ST_TO_ADDR
// if not tmp then
8104: LD_VAR 0 2
8108: NOT
8109: IFFALSE 8113
// exit ;
8111: GO 8212
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8152
// begin ComExitBuilding ( i ) ;
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 121
8142: PPUSH
8143: LD_INT 22
8145: PPUSH
8146: CALL_OW 174
// end ;
8150: GO 8123
8152: POP
8153: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8154: LD_EXP 23
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8169: LD_EXP 24
8173: PPUSH
8174: LD_INT 121
8176: PPUSH
8177: LD_INT 22
8179: PPUSH
8180: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8184: LD_EXP 23
8188: PPUSH
8189: LD_EXP 16
8193: PPUSH
8194: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8198: LD_EXP 24
8202: PPUSH
8203: LD_EXP 16
8207: PPUSH
8208: CALL_OW 175
// end ;
8212: PPOPN 2
8214: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8215: LD_INT 22
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 91
8227: PUSH
8228: LD_INT 8
8230: PUSH
8231: LD_INT 4
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 69
8247: IFFALSE 8429
8249: GO 8251
8251: DISABLE
8252: LD_INT 0
8254: PPUSH
8255: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8256: LD_INT 280
8258: PUSH
8259: LD_INT 245
8261: PUSH
8262: LD_INT 210
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PPUSH
8276: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8280: LD_ADDR_VAR 0 2
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_INT 3
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 54
8307: PUSH
8308: EMPTY
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 69
8320: ST_TO_ADDR
// if not tmp then
8321: LD_VAR 0 2
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8429
// for i in tmp do
8330: LD_ADDR_VAR 0 1
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: FOR_IN
8341: IFFALSE 8369
// begin ComExitBuilding ( i ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8352: LD_VAR 0 1
8356: PPUSH
8357: LD_INT 142
8359: PPUSH
8360: LD_INT 71
8362: PPUSH
8363: CALL_OW 174
// end ;
8367: GO 8340
8369: POP
8370: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8371: LD_EXP 23
8375: PPUSH
8376: LD_INT 142
8378: PPUSH
8379: LD_INT 71
8381: PPUSH
8382: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8386: LD_EXP 24
8390: PPUSH
8391: LD_INT 142
8393: PPUSH
8394: LD_INT 71
8396: PPUSH
8397: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8401: LD_EXP 23
8405: PPUSH
8406: LD_EXP 16
8410: PPUSH
8411: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8415: LD_EXP 24
8419: PPUSH
8420: LD_EXP 16
8424: PPUSH
8425: CALL_OW 175
// end ;
8429: PPOPN 2
8431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8432: LD_INT 22
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 21
8444: PUSH
8445: LD_INT 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 58
8454: PUSH
8455: EMPTY
8456: LIST
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 1000
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 91
8477: PUSH
8478: LD_EXP 17
8482: PUSH
8483: LD_INT 8
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 69
8502: PUSH
8503: LD_EXP 17
8507: PPUSH
8508: CALL_OW 302
8512: AND
8513: IFFALSE 8627
8515: GO 8517
8517: DISABLE
// begin enable ;
8518: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8519: LD_EXP 17
8523: PPUSH
8524: LD_INT 22
8526: PUSH
8527: LD_INT 2
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 58
8546: PUSH
8547: EMPTY
8548: LIST
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 24
8555: PUSH
8556: LD_INT 1000
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 91
8569: PUSH
8570: LD_EXP 17
8574: PUSH
8575: LD_INT 8
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: PUSH
8595: LD_INT 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8603: LD_EXP 17
8607: PPUSH
8608: LD_INT 52
8610: PPUSH
8611: LD_INT 90
8613: PPUSH
8614: CALL_OW 171
// AddComHold ( Olaf ) ;
8618: LD_EXP 17
8622: PPUSH
8623: CALL_OW 200
// end ;
8627: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8628: LD_EXP 12
8632: PUSH
8633: LD_INT 2
8635: PPUSH
8636: CALL_OW 302
8640: NOT
8641: AND
8642: PUSH
8643: LD_OWVAR 67
8647: PUSH
8648: LD_INT 1
8650: EQUAL
8651: AND
8652: PUSH
8653: LD_EXP 13
8657: NOT
8658: AND
8659: IFFALSE 8676
8661: GO 8663
8663: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8664: LD_EXP 16
8668: PPUSH
8669: LD_STRING DH-prison-missing
8671: PPUSH
8672: CALL_OW 88
// end ;
8676: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8677: LD_EXP 12
8681: PUSH
8682: LD_INT 8
8684: PPUSH
8685: CALL_OW 302
8689: NOT
8690: AND
8691: PUSH
8692: LD_OWVAR 67
8696: PUSH
8697: LD_INT 1
8699: GREATER
8700: AND
8701: PUSH
8702: LD_EXP 13
8706: NOT
8707: AND
8708: IFFALSE 8725
8710: GO 8712
8712: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8713: LD_EXP 16
8717: PPUSH
8718: LD_STRING DH-prison-missing
8720: PPUSH
8721: CALL_OW 88
// end ;
8725: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8726: LD_EXP 12
8730: PUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 302
8738: NOT
8739: AND
8740: PUSH
8741: LD_EXP 13
8745: NOT
8746: AND
8747: IFFALSE 8764
8749: GO 8751
8751: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8752: LD_EXP 16
8756: PPUSH
8757: LD_STRING DH-prison-missing-a
8759: PPUSH
8760: CALL_OW 88
// end ;
8764: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8765: LD_EXP 12
8769: PUSH
8770: LD_INT 10
8772: PPUSH
8773: CALL_OW 302
8777: NOT
8778: AND
8779: PUSH
8780: LD_EXP 13
8784: NOT
8785: AND
8786: IFFALSE 8803
8788: GO 8790
8790: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8791: LD_EXP 16
8795: PPUSH
8796: LD_STRING DH-prison-missing-a
8798: PPUSH
8799: CALL_OW 88
// end ;
8803: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8804: LD_EXP 13
8808: NOT
8809: PUSH
8810: LD_EXP 12
8814: AND
8815: PUSH
8816: LD_INT 2
8818: PPUSH
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 292
8828: AND
8829: IFFALSE 8916
8831: GO 8833
8833: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8834: LD_EXP 20
8838: PPUSH
8839: LD_EXP 16
8843: PPUSH
8844: CALL_OW 119
// DialogueOn ;
8848: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8852: LD_EXP 20
8856: PPUSH
8857: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8861: LD_EXP 20
8865: PPUSH
8866: LD_STRING DK-prison-found
8868: PPUSH
8869: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DH-prison-found
8880: PPUSH
8881: CALL_OW 88
// DialogueOff ;
8885: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8889: LD_EXP 20
8893: PPUSH
8894: LD_INT 2
8896: PPUSH
8897: CALL_OW 235
// prisonFound := true ;
8901: LD_ADDR_EXP 13
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8909: LD_STRING O6_prison_out
8911: PPUSH
8912: CALL_OW 337
// end ;
8916: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8917: LD_EXP 16
8921: PPUSH
8922: CALL_OW 256
8926: PUSH
8927: LD_INT 500
8929: LESS
8930: IFFALSE 8943
8932: GO 8934
8934: DISABLE
// heikeHurt := true ;
8935: LD_ADDR_EXP 14
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
8943: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8944: LD_INT 22
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 21
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: IFFALSE 9288
8974: GO 8976
8976: DISABLE
8977: LD_INT 0
8979: PPUSH
8980: PPUSH
8981: PPUSH
// begin uc_side := 3 ;
8982: LD_ADDR_OWVAR 20
8986: PUSH
8987: LD_INT 3
8989: ST_TO_ADDR
// uc_nation := 3 ;
8990: LD_ADDR_OWVAR 21
8994: PUSH
8995: LD_INT 3
8997: ST_TO_ADDR
// tmp := [ ] ;
8998: LD_ADDR_VAR 0 2
9002: PUSH
9003: EMPTY
9004: ST_TO_ADDR
// for i := 1 to 8 do
9005: LD_ADDR_VAR 0 1
9009: PUSH
9010: DOUBLE
9011: LD_INT 1
9013: DEC
9014: ST_TO_ADDR
9015: LD_INT 8
9017: PUSH
9018: FOR_TO
9019: IFFALSE 9127
// begin PrepareHuman ( false , 1 , 4 ) ;
9021: LD_INT 0
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: LD_INT 4
9029: PPUSH
9030: CALL_OW 380
// un := CreateHuman ;
9034: LD_ADDR_VAR 0 3
9038: PUSH
9039: CALL_OW 44
9043: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9044: LD_VAR 0 3
9048: PPUSH
9049: LD_INT 4
9051: PPUSH
9052: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9056: LD_VAR 0 3
9060: PPUSH
9061: LD_INT 158
9063: PPUSH
9064: LD_INT 80
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9074: LD_VAR 0 3
9078: PPUSH
9079: LD_INT 147
9081: PPUSH
9082: LD_INT 75
9084: PPUSH
9085: CALL_OW 111
// wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9096: LD_ADDR_VAR 0 2
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_VAR 0 2
9110: PUSH
9111: LD_INT 1
9113: PLUS
9114: PPUSH
9115: LD_VAR 0 3
9119: PPUSH
9120: CALL_OW 1
9124: ST_TO_ADDR
// end ;
9125: GO 9018
9127: POP
9128: POP
// repeat wait ( 0 0$1 ) ;
9129: LD_INT 35
9131: PPUSH
9132: CALL_OW 67
// for i in tmp do
9136: LD_ADDR_VAR 0 1
9140: PUSH
9141: LD_VAR 0 2
9145: PUSH
9146: FOR_IN
9147: IFFALSE 9268
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9149: LD_ADDR_VAR 0 3
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_INT 3
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PPUSH
9169: LD_VAR 0 1
9173: PPUSH
9174: CALL_OW 74
9178: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9179: LD_VAR 0 3
9183: PUSH
9184: LD_INT 1
9186: ARRAY
9187: PPUSH
9188: CALL_OW 250
9192: PPUSH
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PPUSH
9202: CALL_OW 251
9206: PPUSH
9207: CALL_OW 428
9211: IFFALSE 9252
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9213: LD_VAR 0 1
9217: PPUSH
9218: LD_VAR 0 3
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PPUSH
9227: CALL_OW 250
9231: PPUSH
9232: LD_VAR 0 3
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: PPUSH
9241: CALL_OW 251
9245: PPUSH
9246: CALL_OW 114
9250: GO 9266
// ComAttackUnit ( i , Heike ) ;
9252: LD_VAR 0 1
9256: PPUSH
9257: LD_EXP 16
9261: PPUSH
9262: CALL_OW 115
// end ;
9266: GO 9146
9268: POP
9269: POP
// until IsDead ( Heike ) or not tmp ;
9270: LD_EXP 16
9274: PPUSH
9275: CALL_OW 301
9279: PUSH
9280: LD_VAR 0 2
9284: NOT
9285: OR
9286: IFFALSE 9129
// end ;
9288: PPOPN 3
9290: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9291: LD_EXP 12
9295: PUSH
9296: LD_EXP 16
9300: PPUSH
9301: CALL_OW 302
9305: AND
9306: PUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_INT 21
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 22
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 50
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 71
9345: PUSH
9346: LD_INT 0
9348: EQUAL
9349: AND
9350: IFFALSE 9701
9352: GO 9354
9354: DISABLE
9355: LD_INT 0
9357: PPUSH
// begin if not heikeHurt then
9358: LD_EXP 14
9362: NOT
9363: IFFALSE 9372
// SetAchievement ( ACH_INVINCIBLE ) ;
9365: LD_STRING ACH_INVINCIBLE
9367: PPUSH
9368: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9372: LD_STRING enableBioCharacter(BIO_GIVI)
9374: PPUSH
9375: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9379: LD_STRING enableBioCharacter(BIO_MIKE)
9381: PPUSH
9382: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9386: LD_STRING enableBioCharacter(BIO_OLAF)
9388: PPUSH
9389: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9393: LD_ADDR_VAR 0 1
9397: PUSH
9398: LD_INT 22
9400: PUSH
9401: LD_INT 2
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 21
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 50
9420: PUSH
9421: EMPTY
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 69
9433: ST_TO_ADDR
// if prisonFound then
9434: LD_EXP 13
9438: IFFALSE 9452
// AddMedal ( med1 , 1 ) else
9440: LD_STRING med1
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: CALL_OW 101
9450: GO 9463
// AddMedal ( med1 , - 1 ) ;
9452: LD_STRING med1
9454: PPUSH
9455: LD_INT 1
9457: NEG
9458: PPUSH
9459: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9463: LD_VAR 0 1
9467: PUSH
9468: LD_INT 3
9470: LESS
9471: PUSH
9472: LD_EXP 13
9476: NOT
9477: AND
9478: PUSH
9479: LD_VAR 0 1
9483: PUSH
9484: LD_INT 4
9486: LESS
9487: PUSH
9488: LD_EXP 13
9492: AND
9493: OR
9494: IFFALSE 9509
// AddMedal ( med2 , - 1 ) else
9496: LD_STRING med2
9498: PPUSH
9499: LD_INT 1
9501: NEG
9502: PPUSH
9503: CALL_OW 101
9507: GO 9519
// AddMedal ( med2 , 1 ) ;
9509: LD_STRING med2
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9519: LD_EXP 13
9523: PUSH
9524: LD_EXP 4
9528: AND
9529: PUSH
9530: LD_VAR 0 1
9534: PUSH
9535: LD_INT 4
9537: GREATEREQUAL
9538: AND
9539: IFFALSE 9553
// AddMedal ( med3 , 1 ) else
9541: LD_STRING med3
9543: PPUSH
9544: LD_INT 1
9546: PPUSH
9547: CALL_OW 101
9551: GO 9564
// AddMedal ( med3 , - 1 ) ;
9553: LD_STRING med3
9555: PPUSH
9556: LD_INT 1
9558: NEG
9559: PPUSH
9560: CALL_OW 101
// GiveMedals ( MAIN ) ;
9564: LD_STRING MAIN
9566: PPUSH
9567: CALL_OW 102
// RewardPeople ( tmp ) ;
9571: LD_VAR 0 1
9575: PPUSH
9576: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9580: LD_EXP 16
9584: PPUSH
9585: LD_STRING 01_Heike
9587: PPUSH
9588: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9592: LD_EXP 18
9596: PPUSH
9597: CALL_OW 302
9601: PUSH
9602: LD_EXP 18
9606: PUSH
9607: LD_VAR 0 1
9611: IN
9612: AND
9613: IFFALSE 9627
// SaveCharacters ( Givi , 01_Givi ) ;
9615: LD_EXP 18
9619: PPUSH
9620: LD_STRING 01_Givi
9622: PPUSH
9623: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9627: LD_EXP 19
9631: PPUSH
9632: CALL_OW 302
9636: PUSH
9637: LD_EXP 19
9641: PUSH
9642: LD_VAR 0 1
9646: IN
9647: AND
9648: IFFALSE 9662
// SaveCharacters ( Mike , 01_Mike ) ;
9650: LD_EXP 19
9654: PPUSH
9655: LD_STRING 01_Mike
9657: PPUSH
9658: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9662: LD_EXP 20
9666: PPUSH
9667: CALL_OW 302
9671: PUSH
9672: LD_EXP 20
9676: PUSH
9677: LD_VAR 0 1
9681: IN
9682: AND
9683: IFFALSE 9697
// SaveCharacters ( Kamil , 01_Kamil ) ;
9685: LD_EXP 20
9689: PPUSH
9690: LD_STRING 01_Kamil
9692: PPUSH
9693: CALL_OW 38
// YouWin ;
9697: CALL_OW 103
// end ; end_of_file
9701: PPOPN 1
9703: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9704: LD_VAR 0 1
9708: PUSH
9709: LD_EXP 16
9713: EQUAL
9714: IFFALSE 9723
// YouLost ( Heike ) ;
9716: LD_STRING Heike
9718: PPUSH
9719: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9723: LD_VAR 0 1
9727: PUSH
9728: LD_INT 22
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 25
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 69
9756: IN
9757: IFFALSE 9863
// begin if un in russianPatrol then
9759: LD_VAR 0 1
9763: PUSH
9764: LD_EXP 21
9768: IN
9769: IFFALSE 9787
// russianPatrol := russianPatrol diff un ;
9771: LD_ADDR_EXP 21
9775: PUSH
9776: LD_EXP 21
9780: PUSH
9781: LD_VAR 0 1
9785: DIFF
9786: ST_TO_ADDR
// if un in russianForestPatrol then
9787: LD_VAR 0 1
9791: PUSH
9792: LD_EXP 22
9796: IN
9797: IFFALSE 9815
// russianForestPatrol := russianForestPatrol diff un ;
9799: LD_ADDR_EXP 22
9803: PUSH
9804: LD_EXP 22
9808: PUSH
9809: LD_VAR 0 1
9813: DIFF
9814: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9815: LD_ADDR_EXP 5
9819: PUSH
9820: LD_EXP 5
9824: PPUSH
9825: LD_EXP 5
9829: PUSH
9830: LD_INT 1
9832: PLUS
9833: PPUSH
9834: LD_VAR 0 1
9838: PPUSH
9839: CALL_OW 250
9843: PUSH
9844: LD_VAR 0 1
9848: PPUSH
9849: CALL_OW 251
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 1
9862: ST_TO_ADDR
// end ; end ;
9863: PPOPN 1
9865: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9866: LD_VAR 0 1
9870: PUSH
9871: LD_EXP 16
9875: EQUAL
9876: IFFALSE 9885
// YouLost ( Heike ) ;
9878: LD_STRING Heike
9880: PPUSH
9881: CALL_OW 104
// if un = Olaf then
9885: LD_VAR 0 1
9889: PUSH
9890: LD_EXP 17
9894: EQUAL
9895: IFFALSE 9904
// YouLost ( Olaf ) ;
9897: LD_STRING Olaf
9899: PPUSH
9900: CALL_OW 104
// end ;
9904: PPOPN 1
9906: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9907: LD_VAR 0 1
9911: PUSH
9912: LD_INT 2
9914: EQUAL
9915: PUSH
9916: LD_VAR 0 2
9920: PUSH
9921: LD_INT 5
9923: EQUAL
9924: AND
9925: IFFALSE 9934
// YouLost ( FriendlyFire ) ;
9927: LD_STRING FriendlyFire
9929: PPUSH
9930: CALL_OW 104
// end ; end_of_file
9934: PPOPN 2
9936: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9937: LD_INT 0
9939: PPUSH
// if p2 = 100 then
9940: LD_VAR 0 2
9944: PUSH
9945: LD_INT 100
9947: EQUAL
9948: IFFALSE 10897
// begin if not StreamModeActive then
9950: LD_EXP 26
9954: NOT
9955: IFFALSE 9965
// StreamModeActive := true ;
9957: LD_ADDR_EXP 26
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// if p3 = 0 then
9965: LD_VAR 0 3
9969: PUSH
9970: LD_INT 0
9972: EQUAL
9973: IFFALSE 9979
// InitStreamMode ;
9975: CALL 11057 0 0
// if p3 = 1 then
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: IFFALSE 9997
// sRocket := true ;
9989: LD_ADDR_EXP 31
9993: PUSH
9994: LD_INT 1
9996: ST_TO_ADDR
// if p3 = 2 then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 2
10004: EQUAL
10005: IFFALSE 10015
// sSpeed := true ;
10007: LD_ADDR_EXP 30
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// if p3 = 3 then
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 3
10022: EQUAL
10023: IFFALSE 10033
// sEngine := true ;
10025: LD_ADDR_EXP 32
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// if p3 = 4 then
10033: LD_VAR 0 3
10037: PUSH
10038: LD_INT 4
10040: EQUAL
10041: IFFALSE 10051
// sSpec := true ;
10043: LD_ADDR_EXP 29
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// if p3 = 5 then
10051: LD_VAR 0 3
10055: PUSH
10056: LD_INT 5
10058: EQUAL
10059: IFFALSE 10069
// sLevel := true ;
10061: LD_ADDR_EXP 33
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// if p3 = 6 then
10069: LD_VAR 0 3
10073: PUSH
10074: LD_INT 6
10076: EQUAL
10077: IFFALSE 10087
// sArmoury := true ;
10079: LD_ADDR_EXP 34
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// if p3 = 7 then
10087: LD_VAR 0 3
10091: PUSH
10092: LD_INT 7
10094: EQUAL
10095: IFFALSE 10105
// sRadar := true ;
10097: LD_ADDR_EXP 35
10101: PUSH
10102: LD_INT 1
10104: ST_TO_ADDR
// if p3 = 8 then
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 8
10112: EQUAL
10113: IFFALSE 10123
// sBunker := true ;
10115: LD_ADDR_EXP 36
10119: PUSH
10120: LD_INT 1
10122: ST_TO_ADDR
// if p3 = 9 then
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 9
10130: EQUAL
10131: IFFALSE 10141
// sHack := true ;
10133: LD_ADDR_EXP 37
10137: PUSH
10138: LD_INT 1
10140: ST_TO_ADDR
// if p3 = 10 then
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 10
10148: EQUAL
10149: IFFALSE 10159
// sFire := true ;
10151: LD_ADDR_EXP 38
10155: PUSH
10156: LD_INT 1
10158: ST_TO_ADDR
// if p3 = 11 then
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 11
10166: EQUAL
10167: IFFALSE 10177
// sRefresh := true ;
10169: LD_ADDR_EXP 39
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
// if p3 = 12 then
10177: LD_VAR 0 3
10181: PUSH
10182: LD_INT 12
10184: EQUAL
10185: IFFALSE 10195
// sExp := true ;
10187: LD_ADDR_EXP 40
10191: PUSH
10192: LD_INT 1
10194: ST_TO_ADDR
// if p3 = 13 then
10195: LD_VAR 0 3
10199: PUSH
10200: LD_INT 13
10202: EQUAL
10203: IFFALSE 10213
// sDepot := true ;
10205: LD_ADDR_EXP 41
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// if p3 = 14 then
10213: LD_VAR 0 3
10217: PUSH
10218: LD_INT 14
10220: EQUAL
10221: IFFALSE 10231
// sFlag := true ;
10223: LD_ADDR_EXP 42
10227: PUSH
10228: LD_INT 1
10230: ST_TO_ADDR
// if p3 = 15 then
10231: LD_VAR 0 3
10235: PUSH
10236: LD_INT 15
10238: EQUAL
10239: IFFALSE 10249
// sKamikadze := true ;
10241: LD_ADDR_EXP 50
10245: PUSH
10246: LD_INT 1
10248: ST_TO_ADDR
// if p3 = 16 then
10249: LD_VAR 0 3
10253: PUSH
10254: LD_INT 16
10256: EQUAL
10257: IFFALSE 10267
// sTroll := true ;
10259: LD_ADDR_EXP 51
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
// if p3 = 17 then
10267: LD_VAR 0 3
10271: PUSH
10272: LD_INT 17
10274: EQUAL
10275: IFFALSE 10285
// sSlow := true ;
10277: LD_ADDR_EXP 52
10281: PUSH
10282: LD_INT 1
10284: ST_TO_ADDR
// if p3 = 18 then
10285: LD_VAR 0 3
10289: PUSH
10290: LD_INT 18
10292: EQUAL
10293: IFFALSE 10303
// sLack := true ;
10295: LD_ADDR_EXP 53
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// if p3 = 19 then
10303: LD_VAR 0 3
10307: PUSH
10308: LD_INT 19
10310: EQUAL
10311: IFFALSE 10321
// sTank := true ;
10313: LD_ADDR_EXP 55
10317: PUSH
10318: LD_INT 1
10320: ST_TO_ADDR
// if p3 = 20 then
10321: LD_VAR 0 3
10325: PUSH
10326: LD_INT 20
10328: EQUAL
10329: IFFALSE 10339
// sRemote := true ;
10331: LD_ADDR_EXP 56
10335: PUSH
10336: LD_INT 1
10338: ST_TO_ADDR
// if p3 = 21 then
10339: LD_VAR 0 3
10343: PUSH
10344: LD_INT 21
10346: EQUAL
10347: IFFALSE 10357
// sPowell := true ;
10349: LD_ADDR_EXP 57
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// if p3 = 22 then
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 22
10364: EQUAL
10365: IFFALSE 10375
// sTeleport := true ;
10367: LD_ADDR_EXP 60
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// if p3 = 23 then
10375: LD_VAR 0 3
10379: PUSH
10380: LD_INT 23
10382: EQUAL
10383: IFFALSE 10393
// sOilTower := true ;
10385: LD_ADDR_EXP 62
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// if p3 = 24 then
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 24
10400: EQUAL
10401: IFFALSE 10411
// sShovel := true ;
10403: LD_ADDR_EXP 63
10407: PUSH
10408: LD_INT 1
10410: ST_TO_ADDR
// if p3 = 25 then
10411: LD_VAR 0 3
10415: PUSH
10416: LD_INT 25
10418: EQUAL
10419: IFFALSE 10429
// sSheik := true ;
10421: LD_ADDR_EXP 64
10425: PUSH
10426: LD_INT 1
10428: ST_TO_ADDR
// if p3 = 26 then
10429: LD_VAR 0 3
10433: PUSH
10434: LD_INT 26
10436: EQUAL
10437: IFFALSE 10447
// sEarthquake := true ;
10439: LD_ADDR_EXP 66
10443: PUSH
10444: LD_INT 1
10446: ST_TO_ADDR
// if p3 = 27 then
10447: LD_VAR 0 3
10451: PUSH
10452: LD_INT 27
10454: EQUAL
10455: IFFALSE 10465
// sAI := true ;
10457: LD_ADDR_EXP 67
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
// if p3 = 28 then
10465: LD_VAR 0 3
10469: PUSH
10470: LD_INT 28
10472: EQUAL
10473: IFFALSE 10483
// sCargo := true ;
10475: LD_ADDR_EXP 70
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// if p3 = 29 then
10483: LD_VAR 0 3
10487: PUSH
10488: LD_INT 29
10490: EQUAL
10491: IFFALSE 10501
// sDLaser := true ;
10493: LD_ADDR_EXP 71
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// if p3 = 30 then
10501: LD_VAR 0 3
10505: PUSH
10506: LD_INT 30
10508: EQUAL
10509: IFFALSE 10519
// sExchange := true ;
10511: LD_ADDR_EXP 72
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// if p3 = 31 then
10519: LD_VAR 0 3
10523: PUSH
10524: LD_INT 31
10526: EQUAL
10527: IFFALSE 10537
// sFac := true ;
10529: LD_ADDR_EXP 73
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// if p3 = 32 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_INT 32
10544: EQUAL
10545: IFFALSE 10555
// sPower := true ;
10547: LD_ADDR_EXP 74
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// if p3 = 33 then
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 33
10562: EQUAL
10563: IFFALSE 10573
// sRandom := true ;
10565: LD_ADDR_EXP 75
10569: PUSH
10570: LD_INT 1
10572: ST_TO_ADDR
// if p3 = 34 then
10573: LD_VAR 0 3
10577: PUSH
10578: LD_INT 34
10580: EQUAL
10581: IFFALSE 10591
// sShield := true ;
10583: LD_ADDR_EXP 76
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// if p3 = 35 then
10591: LD_VAR 0 3
10595: PUSH
10596: LD_INT 35
10598: EQUAL
10599: IFFALSE 10609
// sTime := true ;
10601: LD_ADDR_EXP 77
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// if p3 = 36 then
10609: LD_VAR 0 3
10613: PUSH
10614: LD_INT 36
10616: EQUAL
10617: IFFALSE 10627
// sTools := true ;
10619: LD_ADDR_EXP 78
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// if p3 = 101 then
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 101
10634: EQUAL
10635: IFFALSE 10645
// sSold := true ;
10637: LD_ADDR_EXP 43
10641: PUSH
10642: LD_INT 1
10644: ST_TO_ADDR
// if p3 = 102 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 102
10652: EQUAL
10653: IFFALSE 10663
// sDiff := true ;
10655: LD_ADDR_EXP 44
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// if p3 = 103 then
10663: LD_VAR 0 3
10667: PUSH
10668: LD_INT 103
10670: EQUAL
10671: IFFALSE 10681
// sFog := true ;
10673: LD_ADDR_EXP 47
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// if p3 = 104 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_INT 104
10688: EQUAL
10689: IFFALSE 10699
// sReset := true ;
10691: LD_ADDR_EXP 48
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// if p3 = 105 then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 105
10706: EQUAL
10707: IFFALSE 10717
// sSun := true ;
10709: LD_ADDR_EXP 49
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// if p3 = 106 then
10717: LD_VAR 0 3
10721: PUSH
10722: LD_INT 106
10724: EQUAL
10725: IFFALSE 10735
// sTiger := true ;
10727: LD_ADDR_EXP 45
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// if p3 = 107 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 107
10742: EQUAL
10743: IFFALSE 10753
// sBomb := true ;
10745: LD_ADDR_EXP 46
10749: PUSH
10750: LD_INT 1
10752: ST_TO_ADDR
// if p3 = 108 then
10753: LD_VAR 0 3
10757: PUSH
10758: LD_INT 108
10760: EQUAL
10761: IFFALSE 10771
// sWound := true ;
10763: LD_ADDR_EXP 54
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// if p3 = 109 then
10771: LD_VAR 0 3
10775: PUSH
10776: LD_INT 109
10778: EQUAL
10779: IFFALSE 10789
// sBetray := true ;
10781: LD_ADDR_EXP 58
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// if p3 = 110 then
10789: LD_VAR 0 3
10793: PUSH
10794: LD_INT 110
10796: EQUAL
10797: IFFALSE 10807
// sContamin := true ;
10799: LD_ADDR_EXP 59
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// if p3 = 111 then
10807: LD_VAR 0 3
10811: PUSH
10812: LD_INT 111
10814: EQUAL
10815: IFFALSE 10825
// sOil := true ;
10817: LD_ADDR_EXP 61
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// if p3 = 112 then
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 112
10832: EQUAL
10833: IFFALSE 10843
// sStu := true ;
10835: LD_ADDR_EXP 65
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// if p3 = 113 then
10843: LD_VAR 0 3
10847: PUSH
10848: LD_INT 113
10850: EQUAL
10851: IFFALSE 10861
// sBazooka := true ;
10853: LD_ADDR_EXP 68
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// if p3 = 114 then
10861: LD_VAR 0 3
10865: PUSH
10866: LD_INT 114
10868: EQUAL
10869: IFFALSE 10879
// sMortar := true ;
10871: LD_ADDR_EXP 69
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// if p3 = 115 then
10879: LD_VAR 0 3
10883: PUSH
10884: LD_INT 115
10886: EQUAL
10887: IFFALSE 10897
// sRanger := true ;
10889: LD_ADDR_EXP 79
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// end ; if p2 = 101 then
10897: LD_VAR 0 2
10901: PUSH
10902: LD_INT 101
10904: EQUAL
10905: IFFALSE 11033
// begin case p3 of 1 :
10907: LD_VAR 0 3
10911: PUSH
10912: LD_INT 1
10914: DOUBLE
10915: EQUAL
10916: IFTRUE 10920
10918: GO 10927
10920: POP
// hHackUnlimitedResources ; 2 :
10921: CALL 22070 0 0
10925: GO 11033
10927: LD_INT 2
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10935
10933: GO 10942
10935: POP
// hHackSetLevel10 ; 3 :
10936: CALL 22203 0 0
10940: GO 11033
10942: LD_INT 3
10944: DOUBLE
10945: EQUAL
10946: IFTRUE 10950
10948: GO 10957
10950: POP
// hHackSetLevel10YourUnits ; 4 :
10951: CALL 22288 0 0
10955: GO 11033
10957: LD_INT 4
10959: DOUBLE
10960: EQUAL
10961: IFTRUE 10965
10963: GO 10972
10965: POP
// hHackInvincible ; 5 :
10966: CALL 22736 0 0
10970: GO 11033
10972: LD_INT 5
10974: DOUBLE
10975: EQUAL
10976: IFTRUE 10980
10978: GO 10987
10980: POP
// hHackInvisible ; 6 :
10981: CALL 22847 0 0
10985: GO 11033
10987: LD_INT 6
10989: DOUBLE
10990: EQUAL
10991: IFTRUE 10995
10993: GO 11002
10995: POP
// hHackChangeYourSide ; 7 :
10996: CALL 22904 0 0
11000: GO 11033
11002: LD_INT 7
11004: DOUBLE
11005: EQUAL
11006: IFTRUE 11010
11008: GO 11017
11010: POP
// hHackChangeUnitSide ; 8 :
11011: CALL 22946 0 0
11015: GO 11033
11017: LD_INT 8
11019: DOUBLE
11020: EQUAL
11021: IFTRUE 11025
11023: GO 11032
11025: POP
// hHackFog ; end ;
11026: CALL 23047 0 0
11030: GO 11033
11032: POP
// end ; end ;
11033: LD_VAR 0 7
11037: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11038: GO 11040
11040: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11041: LD_STRING initStreamRollete();
11043: PPUSH
11044: CALL_OW 559
// InitStreamMode ;
11048: CALL 11057 0 0
// DefineStreamItems ( ) ;
11052: CALL 11497 0 0
// end ;
11056: END
// function InitStreamMode ; begin
11057: LD_INT 0
11059: PPUSH
// streamModeActive := false ;
11060: LD_ADDR_EXP 26
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// normalCounter := 36 ;
11068: LD_ADDR_EXP 27
11072: PUSH
11073: LD_INT 36
11075: ST_TO_ADDR
// hardcoreCounter := 16 ;
11076: LD_ADDR_EXP 28
11080: PUSH
11081: LD_INT 16
11083: ST_TO_ADDR
// sRocket := false ;
11084: LD_ADDR_EXP 31
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// sSpeed := false ;
11092: LD_ADDR_EXP 30
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// sEngine := false ;
11100: LD_ADDR_EXP 32
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// sSpec := false ;
11108: LD_ADDR_EXP 29
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// sLevel := false ;
11116: LD_ADDR_EXP 33
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sArmoury := false ;
11124: LD_ADDR_EXP 34
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sRadar := false ;
11132: LD_ADDR_EXP 35
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// sBunker := false ;
11140: LD_ADDR_EXP 36
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// sHack := false ;
11148: LD_ADDR_EXP 37
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// sFire := false ;
11156: LD_ADDR_EXP 38
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// sRefresh := false ;
11164: LD_ADDR_EXP 39
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// sExp := false ;
11172: LD_ADDR_EXP 40
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// sDepot := false ;
11180: LD_ADDR_EXP 41
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// sFlag := false ;
11188: LD_ADDR_EXP 42
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// sKamikadze := false ;
11196: LD_ADDR_EXP 50
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// sTroll := false ;
11204: LD_ADDR_EXP 51
11208: PUSH
11209: LD_INT 0
11211: ST_TO_ADDR
// sSlow := false ;
11212: LD_ADDR_EXP 52
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// sLack := false ;
11220: LD_ADDR_EXP 53
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// sTank := false ;
11228: LD_ADDR_EXP 55
11232: PUSH
11233: LD_INT 0
11235: ST_TO_ADDR
// sRemote := false ;
11236: LD_ADDR_EXP 56
11240: PUSH
11241: LD_INT 0
11243: ST_TO_ADDR
// sPowell := false ;
11244: LD_ADDR_EXP 57
11248: PUSH
11249: LD_INT 0
11251: ST_TO_ADDR
// sTeleport := false ;
11252: LD_ADDR_EXP 60
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// sOilTower := false ;
11260: LD_ADDR_EXP 62
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// sShovel := false ;
11268: LD_ADDR_EXP 63
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// sSheik := false ;
11276: LD_ADDR_EXP 64
11280: PUSH
11281: LD_INT 0
11283: ST_TO_ADDR
// sEarthquake := false ;
11284: LD_ADDR_EXP 66
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// sAI := false ;
11292: LD_ADDR_EXP 67
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// sCargo := false ;
11300: LD_ADDR_EXP 70
11304: PUSH
11305: LD_INT 0
11307: ST_TO_ADDR
// sDLaser := false ;
11308: LD_ADDR_EXP 71
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// sExchange := false ;
11316: LD_ADDR_EXP 72
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// sFac := false ;
11324: LD_ADDR_EXP 73
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// sPower := false ;
11332: LD_ADDR_EXP 74
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// sRandom := false ;
11340: LD_ADDR_EXP 75
11344: PUSH
11345: LD_INT 0
11347: ST_TO_ADDR
// sShield := false ;
11348: LD_ADDR_EXP 76
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// sTime := false ;
11356: LD_ADDR_EXP 77
11360: PUSH
11361: LD_INT 0
11363: ST_TO_ADDR
// sTools := false ;
11364: LD_ADDR_EXP 78
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// sSold := false ;
11372: LD_ADDR_EXP 43
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// sDiff := false ;
11380: LD_ADDR_EXP 44
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// sFog := false ;
11388: LD_ADDR_EXP 47
11392: PUSH
11393: LD_INT 0
11395: ST_TO_ADDR
// sReset := false ;
11396: LD_ADDR_EXP 48
11400: PUSH
11401: LD_INT 0
11403: ST_TO_ADDR
// sSun := false ;
11404: LD_ADDR_EXP 49
11408: PUSH
11409: LD_INT 0
11411: ST_TO_ADDR
// sTiger := false ;
11412: LD_ADDR_EXP 45
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// sBomb := false ;
11420: LD_ADDR_EXP 46
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// sWound := false ;
11428: LD_ADDR_EXP 54
11432: PUSH
11433: LD_INT 0
11435: ST_TO_ADDR
// sBetray := false ;
11436: LD_ADDR_EXP 58
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// sContamin := false ;
11444: LD_ADDR_EXP 59
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// sOil := false ;
11452: LD_ADDR_EXP 61
11456: PUSH
11457: LD_INT 0
11459: ST_TO_ADDR
// sStu := false ;
11460: LD_ADDR_EXP 65
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// sBazooka := false ;
11468: LD_ADDR_EXP 68
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// sMortar := false ;
11476: LD_ADDR_EXP 69
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// sRanger := false ;
11484: LD_ADDR_EXP 79
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// end ;
11492: LD_VAR 0 1
11496: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
11503: PPUSH
// result := [ ] ;
11504: LD_ADDR_VAR 0 1
11508: PUSH
11509: EMPTY
11510: ST_TO_ADDR
// if campaign_id = 1 then
11511: LD_OWVAR 69
11515: PUSH
11516: LD_INT 1
11518: EQUAL
11519: IFFALSE 14457
// begin case mission_number of 1 :
11521: LD_OWVAR 70
11525: PUSH
11526: LD_INT 1
11528: DOUBLE
11529: EQUAL
11530: IFTRUE 11534
11532: GO 11598
11534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11535: LD_ADDR_VAR 0 1
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: LD_INT 4
11545: PUSH
11546: LD_INT 11
11548: PUSH
11549: LD_INT 12
11551: PUSH
11552: LD_INT 15
11554: PUSH
11555: LD_INT 16
11557: PUSH
11558: LD_INT 22
11560: PUSH
11561: LD_INT 23
11563: PUSH
11564: LD_INT 26
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 101
11580: PUSH
11581: LD_INT 102
11583: PUSH
11584: LD_INT 106
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: ST_TO_ADDR
11596: GO 14455
11598: LD_INT 2
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11678
11606: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_INT 2
11614: PUSH
11615: LD_INT 4
11617: PUSH
11618: LD_INT 11
11620: PUSH
11621: LD_INT 12
11623: PUSH
11624: LD_INT 15
11626: PUSH
11627: LD_INT 16
11629: PUSH
11630: LD_INT 22
11632: PUSH
11633: LD_INT 23
11635: PUSH
11636: LD_INT 26
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 101
11652: PUSH
11653: LD_INT 102
11655: PUSH
11656: LD_INT 105
11658: PUSH
11659: LD_INT 106
11661: PUSH
11662: LD_INT 108
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 14455
11678: LD_INT 3
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11762
11686: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11687: LD_ADDR_VAR 0 1
11691: PUSH
11692: LD_INT 2
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: LD_INT 11
11703: PUSH
11704: LD_INT 12
11706: PUSH
11707: LD_INT 15
11709: PUSH
11710: LD_INT 16
11712: PUSH
11713: LD_INT 22
11715: PUSH
11716: LD_INT 26
11718: PUSH
11719: LD_INT 36
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 101
11736: PUSH
11737: LD_INT 102
11739: PUSH
11740: LD_INT 105
11742: PUSH
11743: LD_INT 106
11745: PUSH
11746: LD_INT 108
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: ST_TO_ADDR
11760: GO 14455
11762: LD_INT 4
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 11854
11770: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11771: LD_ADDR_VAR 0 1
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 4
11781: PUSH
11782: LD_INT 5
11784: PUSH
11785: LD_INT 8
11787: PUSH
11788: LD_INT 11
11790: PUSH
11791: LD_INT 12
11793: PUSH
11794: LD_INT 15
11796: PUSH
11797: LD_INT 16
11799: PUSH
11800: LD_INT 22
11802: PUSH
11803: LD_INT 23
11805: PUSH
11806: LD_INT 26
11808: PUSH
11809: LD_INT 36
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 101
11828: PUSH
11829: LD_INT 102
11831: PUSH
11832: LD_INT 105
11834: PUSH
11835: LD_INT 106
11837: PUSH
11838: LD_INT 108
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: ST_TO_ADDR
11852: GO 14455
11854: LD_INT 5
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11962
11862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11863: LD_ADDR_VAR 0 1
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 6
11879: PUSH
11880: LD_INT 8
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 15
11891: PUSH
11892: LD_INT 16
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 26
11906: PUSH
11907: LD_INT 36
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 101
11928: PUSH
11929: LD_INT 102
11931: PUSH
11932: LD_INT 105
11934: PUSH
11935: LD_INT 106
11937: PUSH
11938: LD_INT 108
11940: PUSH
11941: LD_INT 109
11943: PUSH
11944: LD_INT 112
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: ST_TO_ADDR
11960: GO 14455
11962: LD_INT 6
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 12090
11970: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11971: LD_ADDR_VAR 0 1
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 4
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: LD_INT 6
11987: PUSH
11988: LD_INT 8
11990: PUSH
11991: LD_INT 11
11993: PUSH
11994: LD_INT 12
11996: PUSH
11997: LD_INT 15
11999: PUSH
12000: LD_INT 16
12002: PUSH
12003: LD_INT 20
12005: PUSH
12006: LD_INT 21
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_INT 23
12014: PUSH
12015: LD_INT 25
12017: PUSH
12018: LD_INT 26
12020: PUSH
12021: LD_INT 30
12023: PUSH
12024: LD_INT 31
12026: PUSH
12027: LD_INT 32
12029: PUSH
12030: LD_INT 36
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 101
12056: PUSH
12057: LD_INT 102
12059: PUSH
12060: LD_INT 105
12062: PUSH
12063: LD_INT 106
12065: PUSH
12066: LD_INT 108
12068: PUSH
12069: LD_INT 109
12071: PUSH
12072: LD_INT 112
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: ST_TO_ADDR
12088: GO 14455
12090: LD_INT 7
12092: DOUBLE
12093: EQUAL
12094: IFTRUE 12098
12096: GO 12198
12098: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12099: LD_ADDR_VAR 0 1
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 4
12109: PUSH
12110: LD_INT 5
12112: PUSH
12113: LD_INT 7
12115: PUSH
12116: LD_INT 11
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: LD_INT 15
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: LD_INT 20
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 22
12136: PUSH
12137: LD_INT 23
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 26
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 101
12164: PUSH
12165: LD_INT 102
12167: PUSH
12168: LD_INT 103
12170: PUSH
12171: LD_INT 105
12173: PUSH
12174: LD_INT 106
12176: PUSH
12177: LD_INT 108
12179: PUSH
12180: LD_INT 112
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: ST_TO_ADDR
12196: GO 14455
12198: LD_INT 8
12200: DOUBLE
12201: EQUAL
12202: IFTRUE 12206
12204: GO 12334
12206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12207: LD_ADDR_VAR 0 1
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: LD_INT 4
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: LD_INT 6
12223: PUSH
12224: LD_INT 7
12226: PUSH
12227: LD_INT 8
12229: PUSH
12230: LD_INT 11
12232: PUSH
12233: LD_INT 12
12235: PUSH
12236: LD_INT 15
12238: PUSH
12239: LD_INT 16
12241: PUSH
12242: LD_INT 20
12244: PUSH
12245: LD_INT 21
12247: PUSH
12248: LD_INT 22
12250: PUSH
12251: LD_INT 23
12253: PUSH
12254: LD_INT 25
12256: PUSH
12257: LD_INT 26
12259: PUSH
12260: LD_INT 30
12262: PUSH
12263: LD_INT 31
12265: PUSH
12266: LD_INT 32
12268: PUSH
12269: LD_INT 36
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 101
12296: PUSH
12297: LD_INT 102
12299: PUSH
12300: LD_INT 103
12302: PUSH
12303: LD_INT 105
12305: PUSH
12306: LD_INT 106
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 109
12314: PUSH
12315: LD_INT 112
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: ST_TO_ADDR
12332: GO 14455
12334: LD_INT 9
12336: DOUBLE
12337: EQUAL
12338: IFTRUE 12342
12340: GO 12478
12342: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12343: LD_ADDR_VAR 0 1
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: LD_INT 4
12353: PUSH
12354: LD_INT 5
12356: PUSH
12357: LD_INT 6
12359: PUSH
12360: LD_INT 7
12362: PUSH
12363: LD_INT 8
12365: PUSH
12366: LD_INT 11
12368: PUSH
12369: LD_INT 12
12371: PUSH
12372: LD_INT 15
12374: PUSH
12375: LD_INT 16
12377: PUSH
12378: LD_INT 20
12380: PUSH
12381: LD_INT 21
12383: PUSH
12384: LD_INT 22
12386: PUSH
12387: LD_INT 23
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 28
12398: PUSH
12399: LD_INT 30
12401: PUSH
12402: LD_INT 31
12404: PUSH
12405: LD_INT 32
12407: PUSH
12408: LD_INT 36
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 101
12436: PUSH
12437: LD_INT 102
12439: PUSH
12440: LD_INT 103
12442: PUSH
12443: LD_INT 105
12445: PUSH
12446: LD_INT 106
12448: PUSH
12449: LD_INT 108
12451: PUSH
12452: LD_INT 109
12454: PUSH
12455: LD_INT 112
12457: PUSH
12458: LD_INT 114
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: ST_TO_ADDR
12476: GO 14455
12478: LD_INT 10
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12670
12486: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: LD_INT 4
12497: PUSH
12498: LD_INT 5
12500: PUSH
12501: LD_INT 6
12503: PUSH
12504: LD_INT 7
12506: PUSH
12507: LD_INT 8
12509: PUSH
12510: LD_INT 9
12512: PUSH
12513: LD_INT 10
12515: PUSH
12516: LD_INT 11
12518: PUSH
12519: LD_INT 12
12521: PUSH
12522: LD_INT 13
12524: PUSH
12525: LD_INT 14
12527: PUSH
12528: LD_INT 15
12530: PUSH
12531: LD_INT 16
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 18
12539: PUSH
12540: LD_INT 19
12542: PUSH
12543: LD_INT 20
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 22
12551: PUSH
12552: LD_INT 23
12554: PUSH
12555: LD_INT 24
12557: PUSH
12558: LD_INT 25
12560: PUSH
12561: LD_INT 26
12563: PUSH
12564: LD_INT 28
12566: PUSH
12567: LD_INT 30
12569: PUSH
12570: LD_INT 31
12572: PUSH
12573: LD_INT 32
12575: PUSH
12576: LD_INT 36
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 101
12612: PUSH
12613: LD_INT 102
12615: PUSH
12616: LD_INT 103
12618: PUSH
12619: LD_INT 104
12621: PUSH
12622: LD_INT 105
12624: PUSH
12625: LD_INT 106
12627: PUSH
12628: LD_INT 107
12630: PUSH
12631: LD_INT 108
12633: PUSH
12634: LD_INT 109
12636: PUSH
12637: LD_INT 110
12639: PUSH
12640: LD_INT 111
12642: PUSH
12643: LD_INT 112
12645: PUSH
12646: LD_INT 114
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: ST_TO_ADDR
12668: GO 14455
12670: LD_INT 11
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12870
12678: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12679: LD_ADDR_VAR 0 1
12683: PUSH
12684: LD_INT 2
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: LD_INT 4
12692: PUSH
12693: LD_INT 5
12695: PUSH
12696: LD_INT 6
12698: PUSH
12699: LD_INT 7
12701: PUSH
12702: LD_INT 8
12704: PUSH
12705: LD_INT 9
12707: PUSH
12708: LD_INT 10
12710: PUSH
12711: LD_INT 11
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: LD_INT 13
12719: PUSH
12720: LD_INT 14
12722: PUSH
12723: LD_INT 15
12725: PUSH
12726: LD_INT 16
12728: PUSH
12729: LD_INT 17
12731: PUSH
12732: LD_INT 18
12734: PUSH
12735: LD_INT 19
12737: PUSH
12738: LD_INT 20
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 23
12749: PUSH
12750: LD_INT 24
12752: PUSH
12753: LD_INT 25
12755: PUSH
12756: LD_INT 26
12758: PUSH
12759: LD_INT 28
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 31
12767: PUSH
12768: LD_INT 32
12770: PUSH
12771: LD_INT 34
12773: PUSH
12774: LD_INT 36
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 101
12812: PUSH
12813: LD_INT 102
12815: PUSH
12816: LD_INT 103
12818: PUSH
12819: LD_INT 104
12821: PUSH
12822: LD_INT 105
12824: PUSH
12825: LD_INT 106
12827: PUSH
12828: LD_INT 107
12830: PUSH
12831: LD_INT 108
12833: PUSH
12834: LD_INT 109
12836: PUSH
12837: LD_INT 110
12839: PUSH
12840: LD_INT 111
12842: PUSH
12843: LD_INT 112
12845: PUSH
12846: LD_INT 114
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: ST_TO_ADDR
12868: GO 14455
12870: LD_INT 12
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 13086
12878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12879: LD_ADDR_VAR 0 1
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 4
12895: PUSH
12896: LD_INT 5
12898: PUSH
12899: LD_INT 6
12901: PUSH
12902: LD_INT 7
12904: PUSH
12905: LD_INT 8
12907: PUSH
12908: LD_INT 9
12910: PUSH
12911: LD_INT 10
12913: PUSH
12914: LD_INT 11
12916: PUSH
12917: LD_INT 12
12919: PUSH
12920: LD_INT 13
12922: PUSH
12923: LD_INT 14
12925: PUSH
12926: LD_INT 15
12928: PUSH
12929: LD_INT 16
12931: PUSH
12932: LD_INT 17
12934: PUSH
12935: LD_INT 18
12937: PUSH
12938: LD_INT 19
12940: PUSH
12941: LD_INT 20
12943: PUSH
12944: LD_INT 21
12946: PUSH
12947: LD_INT 22
12949: PUSH
12950: LD_INT 23
12952: PUSH
12953: LD_INT 24
12955: PUSH
12956: LD_INT 25
12958: PUSH
12959: LD_INT 26
12961: PUSH
12962: LD_INT 27
12964: PUSH
12965: LD_INT 28
12967: PUSH
12968: LD_INT 30
12970: PUSH
12971: LD_INT 31
12973: PUSH
12974: LD_INT 32
12976: PUSH
12977: LD_INT 33
12979: PUSH
12980: LD_INT 34
12982: PUSH
12983: LD_INT 36
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 102
13027: PUSH
13028: LD_INT 103
13030: PUSH
13031: LD_INT 104
13033: PUSH
13034: LD_INT 105
13036: PUSH
13037: LD_INT 106
13039: PUSH
13040: LD_INT 107
13042: PUSH
13043: LD_INT 108
13045: PUSH
13046: LD_INT 109
13048: PUSH
13049: LD_INT 110
13051: PUSH
13052: LD_INT 111
13054: PUSH
13055: LD_INT 112
13057: PUSH
13058: LD_INT 113
13060: PUSH
13061: LD_INT 114
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: ST_TO_ADDR
13084: GO 14455
13086: LD_INT 13
13088: DOUBLE
13089: EQUAL
13090: IFTRUE 13094
13092: GO 13290
13094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13095: LD_ADDR_VAR 0 1
13099: PUSH
13100: LD_INT 1
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: LD_INT 8
13117: PUSH
13118: LD_INT 9
13120: PUSH
13121: LD_INT 10
13123: PUSH
13124: LD_INT 11
13126: PUSH
13127: LD_INT 12
13129: PUSH
13130: LD_INT 14
13132: PUSH
13133: LD_INT 15
13135: PUSH
13136: LD_INT 16
13138: PUSH
13139: LD_INT 17
13141: PUSH
13142: LD_INT 18
13144: PUSH
13145: LD_INT 19
13147: PUSH
13148: LD_INT 20
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_INT 23
13159: PUSH
13160: LD_INT 24
13162: PUSH
13163: LD_INT 25
13165: PUSH
13166: LD_INT 26
13168: PUSH
13169: LD_INT 27
13171: PUSH
13172: LD_INT 28
13174: PUSH
13175: LD_INT 30
13177: PUSH
13178: LD_INT 31
13180: PUSH
13181: LD_INT 32
13183: PUSH
13184: LD_INT 33
13186: PUSH
13187: LD_INT 34
13189: PUSH
13190: LD_INT 36
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 101
13228: PUSH
13229: LD_INT 102
13231: PUSH
13232: LD_INT 103
13234: PUSH
13235: LD_INT 104
13237: PUSH
13238: LD_INT 105
13240: PUSH
13241: LD_INT 106
13243: PUSH
13244: LD_INT 107
13246: PUSH
13247: LD_INT 108
13249: PUSH
13250: LD_INT 109
13252: PUSH
13253: LD_INT 110
13255: PUSH
13256: LD_INT 111
13258: PUSH
13259: LD_INT 112
13261: PUSH
13262: LD_INT 113
13264: PUSH
13265: LD_INT 114
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: ST_TO_ADDR
13288: GO 14455
13290: LD_INT 14
13292: DOUBLE
13293: EQUAL
13294: IFTRUE 13298
13296: GO 13510
13298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13299: LD_ADDR_VAR 0 1
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 3
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: LD_INT 5
13318: PUSH
13319: LD_INT 6
13321: PUSH
13322: LD_INT 7
13324: PUSH
13325: LD_INT 8
13327: PUSH
13328: LD_INT 9
13330: PUSH
13331: LD_INT 10
13333: PUSH
13334: LD_INT 11
13336: PUSH
13337: LD_INT 12
13339: PUSH
13340: LD_INT 13
13342: PUSH
13343: LD_INT 14
13345: PUSH
13346: LD_INT 15
13348: PUSH
13349: LD_INT 16
13351: PUSH
13352: LD_INT 17
13354: PUSH
13355: LD_INT 18
13357: PUSH
13358: LD_INT 19
13360: PUSH
13361: LD_INT 20
13363: PUSH
13364: LD_INT 21
13366: PUSH
13367: LD_INT 22
13369: PUSH
13370: LD_INT 23
13372: PUSH
13373: LD_INT 24
13375: PUSH
13376: LD_INT 25
13378: PUSH
13379: LD_INT 26
13381: PUSH
13382: LD_INT 27
13384: PUSH
13385: LD_INT 28
13387: PUSH
13388: LD_INT 29
13390: PUSH
13391: LD_INT 30
13393: PUSH
13394: LD_INT 31
13396: PUSH
13397: LD_INT 32
13399: PUSH
13400: LD_INT 33
13402: PUSH
13403: LD_INT 34
13405: PUSH
13406: LD_INT 36
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 101
13448: PUSH
13449: LD_INT 102
13451: PUSH
13452: LD_INT 103
13454: PUSH
13455: LD_INT 104
13457: PUSH
13458: LD_INT 105
13460: PUSH
13461: LD_INT 106
13463: PUSH
13464: LD_INT 107
13466: PUSH
13467: LD_INT 108
13469: PUSH
13470: LD_INT 109
13472: PUSH
13473: LD_INT 110
13475: PUSH
13476: LD_INT 111
13478: PUSH
13479: LD_INT 112
13481: PUSH
13482: LD_INT 113
13484: PUSH
13485: LD_INT 114
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: ST_TO_ADDR
13508: GO 14455
13510: LD_INT 15
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13518
13516: GO 13730
13518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13519: LD_ADDR_VAR 0 1
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 3
13532: PUSH
13533: LD_INT 4
13535: PUSH
13536: LD_INT 5
13538: PUSH
13539: LD_INT 6
13541: PUSH
13542: LD_INT 7
13544: PUSH
13545: LD_INT 8
13547: PUSH
13548: LD_INT 9
13550: PUSH
13551: LD_INT 10
13553: PUSH
13554: LD_INT 11
13556: PUSH
13557: LD_INT 12
13559: PUSH
13560: LD_INT 13
13562: PUSH
13563: LD_INT 14
13565: PUSH
13566: LD_INT 15
13568: PUSH
13569: LD_INT 16
13571: PUSH
13572: LD_INT 17
13574: PUSH
13575: LD_INT 18
13577: PUSH
13578: LD_INT 19
13580: PUSH
13581: LD_INT 20
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_INT 23
13592: PUSH
13593: LD_INT 24
13595: PUSH
13596: LD_INT 25
13598: PUSH
13599: LD_INT 26
13601: PUSH
13602: LD_INT 27
13604: PUSH
13605: LD_INT 28
13607: PUSH
13608: LD_INT 29
13610: PUSH
13611: LD_INT 30
13613: PUSH
13614: LD_INT 31
13616: PUSH
13617: LD_INT 32
13619: PUSH
13620: LD_INT 33
13622: PUSH
13623: LD_INT 34
13625: PUSH
13626: LD_INT 36
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 101
13668: PUSH
13669: LD_INT 102
13671: PUSH
13672: LD_INT 103
13674: PUSH
13675: LD_INT 104
13677: PUSH
13678: LD_INT 105
13680: PUSH
13681: LD_INT 106
13683: PUSH
13684: LD_INT 107
13686: PUSH
13687: LD_INT 108
13689: PUSH
13690: LD_INT 109
13692: PUSH
13693: LD_INT 110
13695: PUSH
13696: LD_INT 111
13698: PUSH
13699: LD_INT 112
13701: PUSH
13702: LD_INT 113
13704: PUSH
13705: LD_INT 114
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 14455
13730: LD_INT 16
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13862
13738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13739: LD_ADDR_VAR 0 1
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 7
13755: PUSH
13756: LD_INT 11
13758: PUSH
13759: LD_INT 12
13761: PUSH
13762: LD_INT 15
13764: PUSH
13765: LD_INT 16
13767: PUSH
13768: LD_INT 20
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_INT 23
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 26
13785: PUSH
13786: LD_INT 30
13788: PUSH
13789: LD_INT 31
13791: PUSH
13792: LD_INT 32
13794: PUSH
13795: LD_INT 33
13797: PUSH
13798: LD_INT 34
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 101
13824: PUSH
13825: LD_INT 102
13827: PUSH
13828: LD_INT 103
13830: PUSH
13831: LD_INT 106
13833: PUSH
13834: LD_INT 108
13836: PUSH
13837: LD_INT 112
13839: PUSH
13840: LD_INT 113
13842: PUSH
13843: LD_INT 114
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: ST_TO_ADDR
13860: GO 14455
13862: LD_INT 17
13864: DOUBLE
13865: EQUAL
13866: IFTRUE 13870
13868: GO 14082
13870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13871: LD_ADDR_VAR 0 1
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: LD_INT 2
13881: PUSH
13882: LD_INT 3
13884: PUSH
13885: LD_INT 4
13887: PUSH
13888: LD_INT 5
13890: PUSH
13891: LD_INT 6
13893: PUSH
13894: LD_INT 7
13896: PUSH
13897: LD_INT 8
13899: PUSH
13900: LD_INT 9
13902: PUSH
13903: LD_INT 10
13905: PUSH
13906: LD_INT 11
13908: PUSH
13909: LD_INT 12
13911: PUSH
13912: LD_INT 13
13914: PUSH
13915: LD_INT 14
13917: PUSH
13918: LD_INT 15
13920: PUSH
13921: LD_INT 16
13923: PUSH
13924: LD_INT 17
13926: PUSH
13927: LD_INT 18
13929: PUSH
13930: LD_INT 19
13932: PUSH
13933: LD_INT 20
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_INT 23
13944: PUSH
13945: LD_INT 24
13947: PUSH
13948: LD_INT 25
13950: PUSH
13951: LD_INT 26
13953: PUSH
13954: LD_INT 27
13956: PUSH
13957: LD_INT 28
13959: PUSH
13960: LD_INT 29
13962: PUSH
13963: LD_INT 30
13965: PUSH
13966: LD_INT 31
13968: PUSH
13969: LD_INT 32
13971: PUSH
13972: LD_INT 33
13974: PUSH
13975: LD_INT 34
13977: PUSH
13978: LD_INT 36
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 101
14020: PUSH
14021: LD_INT 102
14023: PUSH
14024: LD_INT 103
14026: PUSH
14027: LD_INT 104
14029: PUSH
14030: LD_INT 105
14032: PUSH
14033: LD_INT 106
14035: PUSH
14036: LD_INT 107
14038: PUSH
14039: LD_INT 108
14041: PUSH
14042: LD_INT 109
14044: PUSH
14045: LD_INT 110
14047: PUSH
14048: LD_INT 111
14050: PUSH
14051: LD_INT 112
14053: PUSH
14054: LD_INT 113
14056: PUSH
14057: LD_INT 114
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: ST_TO_ADDR
14080: GO 14455
14082: LD_INT 18
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14226
14090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14091: LD_ADDR_VAR 0 1
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 4
14101: PUSH
14102: LD_INT 5
14104: PUSH
14105: LD_INT 7
14107: PUSH
14108: LD_INT 11
14110: PUSH
14111: LD_INT 12
14113: PUSH
14114: LD_INT 15
14116: PUSH
14117: LD_INT 16
14119: PUSH
14120: LD_INT 20
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 25
14134: PUSH
14135: LD_INT 26
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 31
14143: PUSH
14144: LD_INT 32
14146: PUSH
14147: LD_INT 33
14149: PUSH
14150: LD_INT 34
14152: PUSH
14153: LD_INT 35
14155: PUSH
14156: LD_INT 36
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 101
14184: PUSH
14185: LD_INT 102
14187: PUSH
14188: LD_INT 103
14190: PUSH
14191: LD_INT 106
14193: PUSH
14194: LD_INT 108
14196: PUSH
14197: LD_INT 112
14199: PUSH
14200: LD_INT 113
14202: PUSH
14203: LD_INT 114
14205: PUSH
14206: LD_INT 115
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: ST_TO_ADDR
14224: GO 14455
14226: LD_INT 19
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14454
14234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: LD_INT 4
14251: PUSH
14252: LD_INT 5
14254: PUSH
14255: LD_INT 6
14257: PUSH
14258: LD_INT 7
14260: PUSH
14261: LD_INT 8
14263: PUSH
14264: LD_INT 9
14266: PUSH
14267: LD_INT 10
14269: PUSH
14270: LD_INT 11
14272: PUSH
14273: LD_INT 12
14275: PUSH
14276: LD_INT 13
14278: PUSH
14279: LD_INT 14
14281: PUSH
14282: LD_INT 15
14284: PUSH
14285: LD_INT 16
14287: PUSH
14288: LD_INT 17
14290: PUSH
14291: LD_INT 18
14293: PUSH
14294: LD_INT 19
14296: PUSH
14297: LD_INT 20
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 22
14305: PUSH
14306: LD_INT 23
14308: PUSH
14309: LD_INT 24
14311: PUSH
14312: LD_INT 25
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: LD_INT 27
14320: PUSH
14321: LD_INT 28
14323: PUSH
14324: LD_INT 29
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 31
14332: PUSH
14333: LD_INT 32
14335: PUSH
14336: LD_INT 33
14338: PUSH
14339: LD_INT 34
14341: PUSH
14342: LD_INT 35
14344: PUSH
14345: LD_INT 36
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 101
14388: PUSH
14389: LD_INT 102
14391: PUSH
14392: LD_INT 103
14394: PUSH
14395: LD_INT 104
14397: PUSH
14398: LD_INT 105
14400: PUSH
14401: LD_INT 106
14403: PUSH
14404: LD_INT 107
14406: PUSH
14407: LD_INT 108
14409: PUSH
14410: LD_INT 109
14412: PUSH
14413: LD_INT 110
14415: PUSH
14416: LD_INT 111
14418: PUSH
14419: LD_INT 112
14421: PUSH
14422: LD_INT 113
14424: PUSH
14425: LD_INT 114
14427: PUSH
14428: LD_INT 115
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: ST_TO_ADDR
14452: GO 14455
14454: POP
// end else
14455: GO 14674
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 1
14464: PUSH
14465: LD_INT 2
14467: PUSH
14468: LD_INT 3
14470: PUSH
14471: LD_INT 4
14473: PUSH
14474: LD_INT 5
14476: PUSH
14477: LD_INT 6
14479: PUSH
14480: LD_INT 7
14482: PUSH
14483: LD_INT 8
14485: PUSH
14486: LD_INT 9
14488: PUSH
14489: LD_INT 10
14491: PUSH
14492: LD_INT 11
14494: PUSH
14495: LD_INT 12
14497: PUSH
14498: LD_INT 13
14500: PUSH
14501: LD_INT 14
14503: PUSH
14504: LD_INT 15
14506: PUSH
14507: LD_INT 16
14509: PUSH
14510: LD_INT 17
14512: PUSH
14513: LD_INT 18
14515: PUSH
14516: LD_INT 19
14518: PUSH
14519: LD_INT 20
14521: PUSH
14522: LD_INT 21
14524: PUSH
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 24
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 26
14539: PUSH
14540: LD_INT 27
14542: PUSH
14543: LD_INT 28
14545: PUSH
14546: LD_INT 29
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 31
14554: PUSH
14555: LD_INT 32
14557: PUSH
14558: LD_INT 33
14560: PUSH
14561: LD_INT 34
14563: PUSH
14564: LD_INT 35
14566: PUSH
14567: LD_INT 36
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 101
14610: PUSH
14611: LD_INT 102
14613: PUSH
14614: LD_INT 103
14616: PUSH
14617: LD_INT 104
14619: PUSH
14620: LD_INT 105
14622: PUSH
14623: LD_INT 106
14625: PUSH
14626: LD_INT 107
14628: PUSH
14629: LD_INT 108
14631: PUSH
14632: LD_INT 109
14634: PUSH
14635: LD_INT 110
14637: PUSH
14638: LD_INT 111
14640: PUSH
14641: LD_INT 112
14643: PUSH
14644: LD_INT 113
14646: PUSH
14647: LD_INT 114
14649: PUSH
14650: LD_INT 115
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: ST_TO_ADDR
// if result then
14674: LD_VAR 0 1
14678: IFFALSE 14967
// begin normal :=  ;
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: LD_STRING 
14687: ST_TO_ADDR
// hardcore :=  ;
14688: LD_ADDR_VAR 0 4
14692: PUSH
14693: LD_STRING 
14695: ST_TO_ADDR
// for i = 1 to normalCounter do
14696: LD_ADDR_VAR 0 5
14700: PUSH
14701: DOUBLE
14702: LD_INT 1
14704: DEC
14705: ST_TO_ADDR
14706: LD_EXP 27
14710: PUSH
14711: FOR_TO
14712: IFFALSE 14813
// begin tmp := 0 ;
14714: LD_ADDR_VAR 0 2
14718: PUSH
14719: LD_STRING 0
14721: ST_TO_ADDR
// if result [ 1 ] then
14722: LD_VAR 0 1
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: IFFALSE 14795
// if result [ 1 ] [ 1 ] = i then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PUSH
14745: LD_VAR 0 5
14749: EQUAL
14750: IFFALSE 14795
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14752: LD_ADDR_VAR 0 1
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_INT 1
14764: PPUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 3
14781: PPUSH
14782: CALL_OW 1
14786: ST_TO_ADDR
// tmp := 1 ;
14787: LD_ADDR_VAR 0 2
14791: PUSH
14792: LD_STRING 1
14794: ST_TO_ADDR
// end ; normal := normal & tmp ;
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_VAR 0 3
14804: PUSH
14805: LD_VAR 0 2
14809: STR
14810: ST_TO_ADDR
// end ;
14811: GO 14711
14813: POP
14814: POP
// for i = 1 to hardcoreCounter do
14815: LD_ADDR_VAR 0 5
14819: PUSH
14820: DOUBLE
14821: LD_INT 1
14823: DEC
14824: ST_TO_ADDR
14825: LD_EXP 28
14829: PUSH
14830: FOR_TO
14831: IFFALSE 14936
// begin tmp := 0 ;
14833: LD_ADDR_VAR 0 2
14837: PUSH
14838: LD_STRING 0
14840: ST_TO_ADDR
// if result [ 2 ] then
14841: LD_VAR 0 1
14845: PUSH
14846: LD_INT 2
14848: ARRAY
14849: IFFALSE 14918
// if result [ 2 ] [ 1 ] = 100 + i then
14851: LD_VAR 0 1
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PUSH
14860: LD_INT 1
14862: ARRAY
14863: PUSH
14864: LD_INT 100
14866: PUSH
14867: LD_VAR 0 5
14871: PLUS
14872: EQUAL
14873: IFFALSE 14918
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14875: LD_ADDR_VAR 0 1
14879: PUSH
14880: LD_VAR 0 1
14884: PPUSH
14885: LD_INT 2
14887: PPUSH
14888: LD_VAR 0 1
14892: PUSH
14893: LD_INT 2
14895: ARRAY
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: CALL_OW 3
14904: PPUSH
14905: CALL_OW 1
14909: ST_TO_ADDR
// tmp := 1 ;
14910: LD_ADDR_VAR 0 2
14914: PUSH
14915: LD_STRING 1
14917: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14918: LD_ADDR_VAR 0 4
14922: PUSH
14923: LD_VAR 0 4
14927: PUSH
14928: LD_VAR 0 2
14932: STR
14933: ST_TO_ADDR
// end ;
14934: GO 14830
14936: POP
14937: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14938: LD_STRING getStreamItemsFromMission("
14940: PUSH
14941: LD_VAR 0 3
14945: STR
14946: PUSH
14947: LD_STRING ","
14949: STR
14950: PUSH
14951: LD_VAR 0 4
14955: STR
14956: PUSH
14957: LD_STRING ")
14959: STR
14960: PPUSH
14961: CALL_OW 559
// end else
14965: GO 14974
// ToLua ( getStreamItemsFromMission("","") ) ;
14967: LD_STRING getStreamItemsFromMission("","")
14969: PPUSH
14970: CALL_OW 559
// end ;
14974: LD_VAR 0 1
14978: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14979: LD_EXP 26
14983: PUSH
14984: LD_EXP 31
14988: AND
14989: IFFALSE 15113
14991: GO 14993
14993: DISABLE
14994: LD_INT 0
14996: PPUSH
14997: PPUSH
// begin enable ;
14998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14999: LD_ADDR_VAR 0 2
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 2
15018: PUSH
15019: LD_INT 34
15021: PUSH
15022: LD_INT 7
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 34
15031: PUSH
15032: LD_INT 45
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 34
15041: PUSH
15042: LD_INT 28
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 34
15051: PUSH
15052: LD_INT 47
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: ST_TO_ADDR
// if not tmp then
15075: LD_VAR 0 2
15079: NOT
15080: IFFALSE 15084
// exit ;
15082: GO 15113
// for i in tmp do
15084: LD_ADDR_VAR 0 1
15088: PUSH
15089: LD_VAR 0 2
15093: PUSH
15094: FOR_IN
15095: IFFALSE 15111
// begin SetLives ( i , 0 ) ;
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_INT 0
15104: PPUSH
15105: CALL_OW 234
// end ;
15109: GO 15094
15111: POP
15112: POP
// end ;
15113: PPOPN 2
15115: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15116: LD_EXP 26
15120: PUSH
15121: LD_EXP 32
15125: AND
15126: IFFALSE 15210
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
// begin enable ;
15135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_OWVAR 2
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 32
15155: PUSH
15156: LD_INT 3
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL_OW 69
15171: ST_TO_ADDR
// if not tmp then
15172: LD_VAR 0 2
15176: NOT
15177: IFFALSE 15181
// exit ;
15179: GO 15210
// for i in tmp do
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_VAR 0 2
15190: PUSH
15191: FOR_IN
15192: IFFALSE 15208
// begin SetLives ( i , 0 ) ;
15194: LD_VAR 0 1
15198: PPUSH
15199: LD_INT 0
15201: PPUSH
15202: CALL_OW 234
// end ;
15206: GO 15191
15208: POP
15209: POP
// end ;
15210: PPOPN 2
15212: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15213: LD_EXP 26
15217: PUSH
15218: LD_EXP 29
15222: AND
15223: IFFALSE 15316
15225: GO 15227
15227: DISABLE
15228: LD_INT 0
15230: PPUSH
// begin enable ;
15231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15232: LD_ADDR_VAR 0 1
15236: PUSH
15237: LD_INT 22
15239: PUSH
15240: LD_OWVAR 2
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 2
15251: PUSH
15252: LD_INT 25
15254: PUSH
15255: LD_INT 5
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 9
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 8
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PPUSH
15292: CALL_OW 69
15296: PUSH
15297: FOR_IN
15298: IFFALSE 15314
// begin SetClass ( i , 1 ) ;
15300: LD_VAR 0 1
15304: PPUSH
15305: LD_INT 1
15307: PPUSH
15308: CALL_OW 336
// end ;
15312: GO 15297
15314: POP
15315: POP
// end ;
15316: PPOPN 1
15318: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15319: LD_EXP 26
15323: PUSH
15324: LD_EXP 30
15328: AND
15329: PUSH
15330: LD_OWVAR 65
15334: PUSH
15335: LD_INT 7
15337: LESS
15338: AND
15339: IFFALSE 15353
15341: GO 15343
15343: DISABLE
// begin enable ;
15344: ENABLE
// game_speed := 7 ;
15345: LD_ADDR_OWVAR 65
15349: PUSH
15350: LD_INT 7
15352: ST_TO_ADDR
// end ;
15353: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15354: LD_EXP 26
15358: PUSH
15359: LD_EXP 33
15363: AND
15364: IFFALSE 15566
15366: GO 15368
15368: DISABLE
15369: LD_INT 0
15371: PPUSH
15372: PPUSH
15373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15374: LD_ADDR_VAR 0 3
15378: PUSH
15379: LD_INT 81
15381: PUSH
15382: LD_OWVAR 2
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 21
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 69
15409: ST_TO_ADDR
// if not tmp then
15410: LD_VAR 0 3
15414: NOT
15415: IFFALSE 15419
// exit ;
15417: GO 15566
// if tmp > 5 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 5
15426: GREATER
15427: IFFALSE 15439
// k := 5 else
15429: LD_ADDR_VAR 0 2
15433: PUSH
15434: LD_INT 5
15436: ST_TO_ADDR
15437: GO 15449
// k := tmp ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_VAR 0 3
15448: ST_TO_ADDR
// for i := 1 to k do
15449: LD_ADDR_VAR 0 1
15453: PUSH
15454: DOUBLE
15455: LD_INT 1
15457: DEC
15458: ST_TO_ADDR
15459: LD_VAR 0 2
15463: PUSH
15464: FOR_TO
15465: IFFALSE 15564
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_VAR 0 1
15476: ARRAY
15477: PPUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 4
15485: MOD
15486: PUSH
15487: LD_INT 1
15489: PLUS
15490: PPUSH
15491: CALL_OW 259
15495: PUSH
15496: LD_INT 10
15498: LESS
15499: IFFALSE 15562
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15501: LD_VAR 0 3
15505: PUSH
15506: LD_VAR 0 1
15510: ARRAY
15511: PPUSH
15512: LD_VAR 0 1
15516: PUSH
15517: LD_INT 4
15519: MOD
15520: PUSH
15521: LD_INT 1
15523: PLUS
15524: PPUSH
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: ARRAY
15535: PPUSH
15536: LD_VAR 0 1
15540: PUSH
15541: LD_INT 4
15543: MOD
15544: PUSH
15545: LD_INT 1
15547: PLUS
15548: PPUSH
15549: CALL_OW 259
15553: PUSH
15554: LD_INT 1
15556: PLUS
15557: PPUSH
15558: CALL_OW 237
15562: GO 15464
15564: POP
15565: POP
// end ;
15566: PPOPN 3
15568: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15569: LD_EXP 26
15573: PUSH
15574: LD_EXP 34
15578: AND
15579: IFFALSE 15599
15581: GO 15583
15583: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15584: LD_INT 4
15586: PPUSH
15587: LD_OWVAR 2
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: CALL_OW 324
15599: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15600: LD_EXP 26
15604: PUSH
15605: LD_EXP 63
15609: AND
15610: IFFALSE 15630
15612: GO 15614
15614: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15615: LD_INT 19
15617: PPUSH
15618: LD_OWVAR 2
15622: PPUSH
15623: LD_INT 0
15625: PPUSH
15626: CALL_OW 324
15630: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15631: LD_EXP 26
15635: PUSH
15636: LD_EXP 35
15640: AND
15641: IFFALSE 15743
15643: GO 15645
15645: DISABLE
15646: LD_INT 0
15648: PPUSH
15649: PPUSH
// begin enable ;
15650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15651: LD_ADDR_VAR 0 2
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_OWVAR 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 34
15673: PUSH
15674: LD_INT 11
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 34
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: ST_TO_ADDR
// if not tmp then
15705: LD_VAR 0 2
15709: NOT
15710: IFFALSE 15714
// exit ;
15712: GO 15743
// for i in tmp do
15714: LD_ADDR_VAR 0 1
15718: PUSH
15719: LD_VAR 0 2
15723: PUSH
15724: FOR_IN
15725: IFFALSE 15741
// begin SetLives ( i , 0 ) ;
15727: LD_VAR 0 1
15731: PPUSH
15732: LD_INT 0
15734: PPUSH
15735: CALL_OW 234
// end ;
15739: GO 15724
15741: POP
15742: POP
// end ;
15743: PPOPN 2
15745: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15746: LD_EXP 26
15750: PUSH
15751: LD_EXP 36
15755: AND
15756: IFFALSE 15776
15758: GO 15760
15760: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15761: LD_INT 32
15763: PPUSH
15764: LD_OWVAR 2
15768: PPUSH
15769: LD_INT 0
15771: PPUSH
15772: CALL_OW 324
15776: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15777: LD_EXP 26
15781: PUSH
15782: LD_EXP 37
15786: AND
15787: IFFALSE 15968
15789: GO 15791
15791: DISABLE
15792: LD_INT 0
15794: PPUSH
15795: PPUSH
15796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15797: LD_ADDR_VAR 0 2
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_OWVAR 2
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 33
15816: PUSH
15817: LD_INT 3
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PPUSH
15828: CALL_OW 69
15832: ST_TO_ADDR
// if not tmp then
15833: LD_VAR 0 2
15837: NOT
15838: IFFALSE 15842
// exit ;
15840: GO 15968
// side := 0 ;
15842: LD_ADDR_VAR 0 3
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// for i := 1 to 8 do
15850: LD_ADDR_VAR 0 1
15854: PUSH
15855: DOUBLE
15856: LD_INT 1
15858: DEC
15859: ST_TO_ADDR
15860: LD_INT 8
15862: PUSH
15863: FOR_TO
15864: IFFALSE 15912
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15866: LD_OWVAR 2
15870: PUSH
15871: LD_VAR 0 1
15875: NONEQUAL
15876: PUSH
15877: LD_OWVAR 2
15881: PPUSH
15882: LD_VAR 0 1
15886: PPUSH
15887: CALL_OW 81
15891: PUSH
15892: LD_INT 2
15894: EQUAL
15895: AND
15896: IFFALSE 15910
// begin side := i ;
15898: LD_ADDR_VAR 0 3
15902: PUSH
15903: LD_VAR 0 1
15907: ST_TO_ADDR
// break ;
15908: GO 15912
// end ;
15910: GO 15863
15912: POP
15913: POP
// if not side then
15914: LD_VAR 0 3
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 15968
// for i := 1 to tmp do
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: DOUBLE
15929: LD_INT 1
15931: DEC
15932: ST_TO_ADDR
15933: LD_VAR 0 2
15937: PUSH
15938: FOR_TO
15939: IFFALSE 15966
// if Prob ( 60 ) then
15941: LD_INT 60
15943: PPUSH
15944: CALL_OW 13
15948: IFFALSE 15964
// SetSide ( i , side ) ;
15950: LD_VAR 0 1
15954: PPUSH
15955: LD_VAR 0 3
15959: PPUSH
15960: CALL_OW 235
15964: GO 15938
15966: POP
15967: POP
// end ;
15968: PPOPN 3
15970: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15971: LD_EXP 26
15975: PUSH
15976: LD_EXP 39
15980: AND
15981: IFFALSE 16100
15983: GO 15985
15985: DISABLE
15986: LD_INT 0
15988: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_INT 22
15996: PUSH
15997: LD_OWVAR 2
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 21
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 3
16018: PUSH
16019: LD_INT 23
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 69
16042: PUSH
16043: FOR_IN
16044: IFFALSE 16098
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 257
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: IN
16074: IFFALSE 16096
// SetClass ( un , rand ( 1 , 4 ) ) ;
16076: LD_VAR 0 1
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: LD_INT 4
16086: PPUSH
16087: CALL_OW 12
16091: PPUSH
16092: CALL_OW 336
16096: GO 16043
16098: POP
16099: POP
// end ;
16100: PPOPN 1
16102: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16103: LD_EXP 26
16107: PUSH
16108: LD_EXP 38
16112: AND
16113: IFFALSE 16192
16115: GO 16117
16117: DISABLE
16118: LD_INT 0
16120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: LD_INT 22
16128: PUSH
16129: LD_OWVAR 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 21
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PPUSH
16152: CALL_OW 69
16156: ST_TO_ADDR
// if not tmp then
16157: LD_VAR 0 1
16161: NOT
16162: IFFALSE 16166
// exit ;
16164: GO 16192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16166: LD_VAR 0 1
16170: PUSH
16171: LD_INT 1
16173: PPUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 12
16183: ARRAY
16184: PPUSH
16185: LD_INT 100
16187: PPUSH
16188: CALL_OW 234
// end ;
16192: PPOPN 1
16194: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16195: LD_EXP 26
16199: PUSH
16200: LD_EXP 40
16204: AND
16205: IFFALSE 16303
16207: GO 16209
16209: DISABLE
16210: LD_INT 0
16212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16213: LD_ADDR_VAR 0 1
16217: PUSH
16218: LD_INT 22
16220: PUSH
16221: LD_OWVAR 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 1
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 69
16248: ST_TO_ADDR
// if not tmp then
16249: LD_VAR 0 1
16253: NOT
16254: IFFALSE 16258
// exit ;
16256: GO 16303
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16258: LD_VAR 0 1
16262: PUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 12
16275: ARRAY
16276: PPUSH
16277: LD_INT 1
16279: PPUSH
16280: LD_INT 4
16282: PPUSH
16283: CALL_OW 12
16287: PPUSH
16288: LD_INT 3000
16290: PPUSH
16291: LD_INT 9000
16293: PPUSH
16294: CALL_OW 12
16298: PPUSH
16299: CALL_OW 492
// end ;
16303: PPOPN 1
16305: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16306: LD_EXP 26
16310: PUSH
16311: LD_EXP 41
16315: AND
16316: IFFALSE 16336
16318: GO 16320
16320: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16321: LD_INT 1
16323: PPUSH
16324: LD_OWVAR 2
16328: PPUSH
16329: LD_INT 0
16331: PPUSH
16332: CALL_OW 324
16336: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16337: LD_EXP 26
16341: PUSH
16342: LD_EXP 42
16346: AND
16347: IFFALSE 16430
16349: GO 16351
16351: DISABLE
16352: LD_INT 0
16354: PPUSH
16355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 21
16375: PUSH
16376: LD_INT 3
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 69
16391: ST_TO_ADDR
// if not tmp then
16392: LD_VAR 0 2
16396: NOT
16397: IFFALSE 16401
// exit ;
16399: GO 16430
// for i in tmp do
16401: LD_ADDR_VAR 0 1
16405: PUSH
16406: LD_VAR 0 2
16410: PUSH
16411: FOR_IN
16412: IFFALSE 16428
// SetBLevel ( i , 10 ) ;
16414: LD_VAR 0 1
16418: PPUSH
16419: LD_INT 10
16421: PPUSH
16422: CALL_OW 241
16426: GO 16411
16428: POP
16429: POP
// end ;
16430: PPOPN 2
16432: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16433: LD_EXP 26
16437: PUSH
16438: LD_EXP 43
16442: AND
16443: IFFALSE 16554
16445: GO 16447
16447: DISABLE
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
16452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_OWVAR 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: ST_TO_ADDR
// if not tmp then
16489: LD_VAR 0 3
16493: NOT
16494: IFFALSE 16498
// exit ;
16496: GO 16554
// un := tmp [ rand ( 1 , tmp ) ] ;
16498: LD_ADDR_VAR 0 2
16502: PUSH
16503: LD_VAR 0 3
16507: PUSH
16508: LD_INT 1
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: CALL_OW 12
16520: ARRAY
16521: ST_TO_ADDR
// if Crawls ( un ) then
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 318
16531: IFFALSE 16542
// ComWalk ( un ) ;
16533: LD_VAR 0 2
16537: PPUSH
16538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16542: LD_VAR 0 2
16546: PPUSH
16547: LD_INT 5
16549: PPUSH
16550: CALL_OW 336
// end ;
16554: PPOPN 3
16556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16557: LD_EXP 26
16561: PUSH
16562: LD_EXP 44
16566: AND
16567: PUSH
16568: LD_OWVAR 67
16572: PUSH
16573: LD_INT 3
16575: LESS
16576: AND
16577: IFFALSE 16596
16579: GO 16581
16581: DISABLE
// Difficulty := Difficulty + 1 ;
16582: LD_ADDR_OWVAR 67
16586: PUSH
16587: LD_OWVAR 67
16591: PUSH
16592: LD_INT 1
16594: PLUS
16595: ST_TO_ADDR
16596: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16597: LD_EXP 26
16601: PUSH
16602: LD_EXP 45
16606: AND
16607: IFFALSE 16710
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
// begin for i := 1 to 5 do
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: DOUBLE
16621: LD_INT 1
16623: DEC
16624: ST_TO_ADDR
16625: LD_INT 5
16627: PUSH
16628: FOR_TO
16629: IFFALSE 16708
// begin uc_nation := nation_nature ;
16631: LD_ADDR_OWVAR 21
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// uc_side := 0 ;
16639: LD_ADDR_OWVAR 20
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16647: LD_ADDR_OWVAR 29
16651: PUSH
16652: LD_INT 12
16654: PUSH
16655: LD_INT 12
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: ST_TO_ADDR
// hc_agressivity := 20 ;
16662: LD_ADDR_OWVAR 35
16666: PUSH
16667: LD_INT 20
16669: ST_TO_ADDR
// hc_class := class_tiger ;
16670: LD_ADDR_OWVAR 28
16674: PUSH
16675: LD_INT 14
16677: ST_TO_ADDR
// hc_gallery :=  ;
16678: LD_ADDR_OWVAR 33
16682: PUSH
16683: LD_STRING 
16685: ST_TO_ADDR
// hc_name :=  ;
16686: LD_ADDR_OWVAR 26
16690: PUSH
16691: LD_STRING 
16693: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16694: CALL_OW 44
16698: PPUSH
16699: LD_INT 0
16701: PPUSH
16702: CALL_OW 51
// end ;
16706: GO 16628
16708: POP
16709: POP
// end ;
16710: PPOPN 1
16712: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16713: LD_EXP 26
16717: PUSH
16718: LD_EXP 46
16722: AND
16723: IFFALSE 16732
16725: GO 16727
16727: DISABLE
// StreamSibBomb ;
16728: CALL 16733 0 0
16732: END
// export function StreamSibBomb ; var i , x , y ; begin
16733: LD_INT 0
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
// result := false ;
16739: LD_ADDR_VAR 0 1
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
// for i := 1 to 16 do
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: DOUBLE
16753: LD_INT 1
16755: DEC
16756: ST_TO_ADDR
16757: LD_INT 16
16759: PUSH
16760: FOR_TO
16761: IFFALSE 16960
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16763: LD_ADDR_VAR 0 3
16767: PUSH
16768: LD_INT 10
16770: PUSH
16771: LD_INT 20
16773: PUSH
16774: LD_INT 30
16776: PUSH
16777: LD_INT 40
16779: PUSH
16780: LD_INT 50
16782: PUSH
16783: LD_INT 60
16785: PUSH
16786: LD_INT 70
16788: PUSH
16789: LD_INT 80
16791: PUSH
16792: LD_INT 90
16794: PUSH
16795: LD_INT 100
16797: PUSH
16798: LD_INT 110
16800: PUSH
16801: LD_INT 120
16803: PUSH
16804: LD_INT 130
16806: PUSH
16807: LD_INT 140
16809: PUSH
16810: LD_INT 150
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_INT 15
16835: PPUSH
16836: CALL_OW 12
16840: ARRAY
16841: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_INT 10
16849: PUSH
16850: LD_INT 20
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: LD_INT 40
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: LD_INT 60
16864: PUSH
16865: LD_INT 70
16867: PUSH
16868: LD_INT 80
16870: PUSH
16871: LD_INT 90
16873: PUSH
16874: LD_INT 100
16876: PUSH
16877: LD_INT 110
16879: PUSH
16880: LD_INT 120
16882: PUSH
16883: LD_INT 130
16885: PUSH
16886: LD_INT 140
16888: PUSH
16889: LD_INT 150
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: PPUSH
16912: LD_INT 15
16914: PPUSH
16915: CALL_OW 12
16919: ARRAY
16920: ST_TO_ADDR
// if ValidHex ( x , y ) then
16921: LD_VAR 0 3
16925: PPUSH
16926: LD_VAR 0 4
16930: PPUSH
16931: CALL_OW 488
16935: IFFALSE 16958
// begin result := [ x , y ] ;
16937: LD_ADDR_VAR 0 1
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 4
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: ST_TO_ADDR
// break ;
16956: GO 16960
// end ; end ;
16958: GO 16760
16960: POP
16961: POP
// if result then
16962: LD_VAR 0 1
16966: IFFALSE 17026
// begin ToLua ( playSibBomb() ) ;
16968: LD_STRING playSibBomb()
16970: PPUSH
16971: CALL_OW 559
// wait ( 0 0$14 ) ;
16975: LD_INT 490
16977: PPUSH
16978: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16982: LD_VAR 0 1
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: LD_VAR 0 1
16995: PUSH
16996: LD_INT 2
16998: ARRAY
16999: PPUSH
17000: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17004: LD_VAR 0 1
17008: PUSH
17009: LD_INT 1
17011: ARRAY
17012: PPUSH
17013: LD_VAR 0 1
17017: PUSH
17018: LD_INT 2
17020: ARRAY
17021: PPUSH
17022: CALL_OW 429
// end ; end ;
17026: LD_VAR 0 1
17030: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17031: LD_EXP 26
17035: PUSH
17036: LD_EXP 48
17040: AND
17041: IFFALSE 17053
17043: GO 17045
17045: DISABLE
// YouLost (  ) ;
17046: LD_STRING 
17048: PPUSH
17049: CALL_OW 104
17053: END
// every 0 0$1 trigger StreamModeActive and sFog do
17054: LD_EXP 26
17058: PUSH
17059: LD_EXP 47
17063: AND
17064: IFFALSE 17078
17066: GO 17068
17068: DISABLE
// FogOff ( your_side ) ;
17069: LD_OWVAR 2
17073: PPUSH
17074: CALL_OW 344
17078: END
// every 0 0$1 trigger StreamModeActive and sSun do
17079: LD_EXP 26
17083: PUSH
17084: LD_EXP 49
17088: AND
17089: IFFALSE 17117
17091: GO 17093
17093: DISABLE
// begin solar_recharge_percent := 0 ;
17094: LD_ADDR_OWVAR 79
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17102: LD_INT 10500
17104: PPUSH
17105: CALL_OW 67
// solar_recharge_percent := 100 ;
17109: LD_ADDR_OWVAR 79
17113: PUSH
17114: LD_INT 100
17116: ST_TO_ADDR
// end ;
17117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17118: LD_EXP 26
17122: PUSH
17123: LD_EXP 50
17127: AND
17128: IFFALSE 17367
17130: GO 17132
17132: DISABLE
17133: LD_INT 0
17135: PPUSH
17136: PPUSH
17137: PPUSH
// begin tmp := [ ] ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: EMPTY
17144: ST_TO_ADDR
// for i := 1 to 6 do
17145: LD_ADDR_VAR 0 1
17149: PUSH
17150: DOUBLE
17151: LD_INT 1
17153: DEC
17154: ST_TO_ADDR
17155: LD_INT 6
17157: PUSH
17158: FOR_TO
17159: IFFALSE 17264
// begin uc_nation := nation_nature ;
17161: LD_ADDR_OWVAR 21
17165: PUSH
17166: LD_INT 0
17168: ST_TO_ADDR
// uc_side := 0 ;
17169: LD_ADDR_OWVAR 20
17173: PUSH
17174: LD_INT 0
17176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17177: LD_ADDR_OWVAR 29
17181: PUSH
17182: LD_INT 12
17184: PUSH
17185: LD_INT 12
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: ST_TO_ADDR
// hc_agressivity := 20 ;
17192: LD_ADDR_OWVAR 35
17196: PUSH
17197: LD_INT 20
17199: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17200: LD_ADDR_OWVAR 28
17204: PUSH
17205: LD_INT 17
17207: ST_TO_ADDR
// hc_gallery :=  ;
17208: LD_ADDR_OWVAR 33
17212: PUSH
17213: LD_STRING 
17215: ST_TO_ADDR
// hc_name :=  ;
17216: LD_ADDR_OWVAR 26
17220: PUSH
17221: LD_STRING 
17223: ST_TO_ADDR
// un := CreateHuman ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: CALL_OW 44
17233: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: CALL_OW 51
// tmp := tmp ^ un ;
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: LD_VAR 0 3
17255: PUSH
17256: LD_VAR 0 2
17260: ADD
17261: ST_TO_ADDR
// end ;
17262: GO 17158
17264: POP
17265: POP
// repeat wait ( 0 0$1 ) ;
17266: LD_INT 35
17268: PPUSH
17269: CALL_OW 67
// for un in tmp do
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_VAR 0 3
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17358
// begin if IsDead ( un ) then
17286: LD_VAR 0 2
17290: PPUSH
17291: CALL_OW 301
17295: IFFALSE 17315
// begin tmp := tmp diff un ;
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_VAR 0 3
17306: PUSH
17307: LD_VAR 0 2
17311: DIFF
17312: ST_TO_ADDR
// continue ;
17313: GO 17283
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17315: LD_VAR 0 2
17319: PPUSH
17320: LD_INT 3
17322: PUSH
17323: LD_INT 22
17325: PUSH
17326: LD_INT 0
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 69
17341: PPUSH
17342: LD_VAR 0 2
17346: PPUSH
17347: CALL_OW 74
17351: PPUSH
17352: CALL_OW 115
// end ;
17356: GO 17283
17358: POP
17359: POP
// until not tmp ;
17360: LD_VAR 0 3
17364: NOT
17365: IFFALSE 17266
// end ;
17367: PPOPN 3
17369: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17370: LD_EXP 26
17374: PUSH
17375: LD_EXP 51
17379: AND
17380: IFFALSE 17434
17382: GO 17384
17384: DISABLE
// begin ToLua ( displayTroll(); ) ;
17385: LD_STRING displayTroll();
17387: PPUSH
17388: CALL_OW 559
// wait ( 3 3$00 ) ;
17392: LD_INT 6300
17394: PPUSH
17395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17399: LD_STRING hideTroll();
17401: PPUSH
17402: CALL_OW 559
// wait ( 1 1$00 ) ;
17406: LD_INT 2100
17408: PPUSH
17409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17413: LD_STRING displayTroll();
17415: PPUSH
17416: CALL_OW 559
// wait ( 1 1$00 ) ;
17420: LD_INT 2100
17422: PPUSH
17423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17427: LD_STRING hideTroll();
17429: PPUSH
17430: CALL_OW 559
// end ;
17434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17435: LD_EXP 26
17439: PUSH
17440: LD_EXP 52
17444: AND
17445: IFFALSE 17508
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
// begin p := 0 ;
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// repeat game_speed := 1 ;
17461: LD_ADDR_OWVAR 65
17465: PUSH
17466: LD_INT 1
17468: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17469: LD_INT 35
17471: PPUSH
17472: CALL_OW 67
// p := p + 1 ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_VAR 0 1
17485: PUSH
17486: LD_INT 1
17488: PLUS
17489: ST_TO_ADDR
// until p >= 60 ;
17490: LD_VAR 0 1
17494: PUSH
17495: LD_INT 60
17497: GREATEREQUAL
17498: IFFALSE 17461
// game_speed := 4 ;
17500: LD_ADDR_OWVAR 65
17504: PUSH
17505: LD_INT 4
17507: ST_TO_ADDR
// end ;
17508: PPOPN 1
17510: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17511: LD_EXP 26
17515: PUSH
17516: LD_EXP 53
17520: AND
17521: IFFALSE 17667
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 30
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 69
17583: ST_TO_ADDR
// if not depot then
17584: LD_VAR 0 1
17588: NOT
17589: IFFALSE 17593
// exit ;
17591: GO 17667
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 1
17605: PPUSH
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 12
17615: ARRAY
17616: PPUSH
17617: CALL_OW 274
17621: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17622: LD_VAR 0 2
17626: PPUSH
17627: LD_INT 1
17629: PPUSH
17630: LD_INT 0
17632: PPUSH
17633: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_INT 2
17644: PPUSH
17645: LD_INT 0
17647: PPUSH
17648: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17652: LD_VAR 0 2
17656: PPUSH
17657: LD_INT 3
17659: PPUSH
17660: LD_INT 0
17662: PPUSH
17663: CALL_OW 277
// end ;
17667: PPOPN 2
17669: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17670: LD_EXP 26
17674: PUSH
17675: LD_EXP 54
17679: AND
17680: IFFALSE 17777
17682: GO 17684
17684: DISABLE
17685: LD_INT 0
17687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 21
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 3
17717: PUSH
17718: LD_INT 23
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: ST_TO_ADDR
// if not tmp then
17742: LD_VAR 0 1
17746: NOT
17747: IFFALSE 17751
// exit ;
17749: GO 17777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17751: LD_VAR 0 1
17755: PUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 12
17768: ARRAY
17769: PPUSH
17770: LD_INT 200
17772: PPUSH
17773: CALL_OW 234
// end ;
17777: PPOPN 1
17779: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17780: LD_EXP 26
17784: PUSH
17785: LD_EXP 55
17789: AND
17790: IFFALSE 17869
17792: GO 17794
17794: DISABLE
17795: LD_INT 0
17797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17798: LD_ADDR_VAR 0 1
17802: PUSH
17803: LD_INT 22
17805: PUSH
17806: LD_OWVAR 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 21
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if not tmp then
17834: LD_VAR 0 1
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17843: LD_VAR 0 1
17847: PUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_VAR 0 1
17855: PPUSH
17856: CALL_OW 12
17860: ARRAY
17861: PPUSH
17862: LD_INT 60
17864: PPUSH
17865: CALL_OW 234
// end ;
17869: PPOPN 1
17871: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17872: LD_EXP 26
17876: PUSH
17877: LD_EXP 56
17881: AND
17882: IFFALSE 17981
17884: GO 17886
17886: DISABLE
17887: LD_INT 0
17889: PPUSH
17890: PPUSH
// begin enable ;
17891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17892: LD_ADDR_VAR 0 1
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 61
17911: PUSH
17912: EMPTY
17913: LIST
17914: PUSH
17915: LD_INT 33
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: ST_TO_ADDR
// if not tmp then
17935: LD_VAR 0 1
17939: NOT
17940: IFFALSE 17944
// exit ;
17942: GO 17981
// for i in tmp do
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_VAR 0 1
17953: PUSH
17954: FOR_IN
17955: IFFALSE 17979
// if IsControledBy ( i ) then
17957: LD_VAR 0 2
17961: PPUSH
17962: CALL_OW 312
17966: IFFALSE 17977
// ComUnlink ( i ) ;
17968: LD_VAR 0 2
17972: PPUSH
17973: CALL_OW 136
17977: GO 17954
17979: POP
17980: POP
// end ;
17981: PPOPN 2
17983: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17984: LD_EXP 26
17988: PUSH
17989: LD_EXP 57
17993: AND
17994: IFFALSE 18134
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
// begin ToLua ( displayPowell(); ) ;
18003: LD_STRING displayPowell();
18005: PPUSH
18006: CALL_OW 559
// uc_side := 0 ;
18010: LD_ADDR_OWVAR 20
18014: PUSH
18015: LD_INT 0
18017: ST_TO_ADDR
// uc_nation := 2 ;
18018: LD_ADDR_OWVAR 21
18022: PUSH
18023: LD_INT 2
18025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18026: LD_ADDR_OWVAR 37
18030: PUSH
18031: LD_INT 14
18033: ST_TO_ADDR
// vc_engine := engine_siberite ;
18034: LD_ADDR_OWVAR 39
18038: PUSH
18039: LD_INT 3
18041: ST_TO_ADDR
// vc_control := control_apeman ;
18042: LD_ADDR_OWVAR 38
18046: PUSH
18047: LD_INT 5
18049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18050: LD_ADDR_OWVAR 40
18054: PUSH
18055: LD_INT 29
18057: ST_TO_ADDR
// un := CreateVehicle ;
18058: LD_ADDR_VAR 0 2
18062: PUSH
18063: CALL_OW 45
18067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18068: LD_VAR 0 2
18072: PPUSH
18073: LD_INT 1
18075: PPUSH
18076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18080: LD_INT 35
18082: PPUSH
18083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18087: LD_VAR 0 2
18091: PPUSH
18092: LD_INT 22
18094: PUSH
18095: LD_OWVAR 2
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PPUSH
18104: CALL_OW 69
18108: PPUSH
18109: LD_VAR 0 2
18113: PPUSH
18114: CALL_OW 74
18118: PPUSH
18119: CALL_OW 115
// until IsDead ( un ) ;
18123: LD_VAR 0 2
18127: PPUSH
18128: CALL_OW 301
18132: IFFALSE 18080
// end ;
18134: PPOPN 2
18136: END
// every 0 0$1 trigger StreamModeActive and sStu do
18137: LD_EXP 26
18141: PUSH
18142: LD_EXP 65
18146: AND
18147: IFFALSE 18163
18149: GO 18151
18151: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18152: LD_STRING displayStucuk();
18154: PPUSH
18155: CALL_OW 559
// ResetFog ;
18159: CALL_OW 335
// end ;
18163: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18164: LD_EXP 26
18168: PUSH
18169: LD_EXP 58
18173: AND
18174: IFFALSE 18315
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_OWVAR 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 21
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PPUSH
18214: CALL_OW 69
18218: ST_TO_ADDR
// if not tmp then
18219: LD_VAR 0 2
18223: NOT
18224: IFFALSE 18228
// exit ;
18226: GO 18315
// un := tmp [ rand ( 1 , tmp ) ] ;
18228: LD_ADDR_VAR 0 1
18232: PUSH
18233: LD_VAR 0 2
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 12
18250: ARRAY
18251: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18252: LD_VAR 0 1
18256: PPUSH
18257: LD_INT 0
18259: PPUSH
18260: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18264: LD_VAR 0 1
18268: PPUSH
18269: LD_OWVAR 3
18273: PUSH
18274: LD_VAR 0 1
18278: DIFF
18279: PPUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 74
18289: PPUSH
18290: CALL_OW 115
// wait ( 0 0$20 ) ;
18294: LD_INT 700
18296: PPUSH
18297: CALL_OW 67
// SetSide ( un , your_side ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_OWVAR 2
18310: PPUSH
18311: CALL_OW 235
// end ;
18315: PPOPN 2
18317: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18318: LD_EXP 26
18322: PUSH
18323: LD_EXP 59
18327: AND
18328: IFFALSE 18434
18330: GO 18332
18332: DISABLE
18333: LD_INT 0
18335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: LD_INT 22
18343: PUSH
18344: LD_OWVAR 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 30
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 30
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PPUSH
18385: CALL_OW 69
18389: ST_TO_ADDR
// if not depot then
18390: LD_VAR 0 1
18394: NOT
18395: IFFALSE 18399
// exit ;
18397: GO 18434
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18399: LD_VAR 0 1
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: CALL_OW 250
18412: PPUSH
18413: LD_VAR 0 1
18417: PUSH
18418: LD_INT 1
18420: ARRAY
18421: PPUSH
18422: CALL_OW 251
18426: PPUSH
18427: LD_INT 70
18429: PPUSH
18430: CALL_OW 495
// end ;
18434: PPOPN 1
18436: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18437: LD_EXP 26
18441: PUSH
18442: LD_EXP 60
18446: AND
18447: IFFALSE 18658
18449: GO 18451
18451: DISABLE
18452: LD_INT 0
18454: PPUSH
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18459: LD_ADDR_VAR 0 5
18463: PUSH
18464: LD_INT 22
18466: PUSH
18467: LD_OWVAR 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 21
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 69
18494: ST_TO_ADDR
// if not tmp then
18495: LD_VAR 0 5
18499: NOT
18500: IFFALSE 18504
// exit ;
18502: GO 18658
// for i in tmp do
18504: LD_ADDR_VAR 0 1
18508: PUSH
18509: LD_VAR 0 5
18513: PUSH
18514: FOR_IN
18515: IFFALSE 18656
// begin d := rand ( 0 , 5 ) ;
18517: LD_ADDR_VAR 0 4
18521: PUSH
18522: LD_INT 0
18524: PPUSH
18525: LD_INT 5
18527: PPUSH
18528: CALL_OW 12
18532: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18533: LD_ADDR_VAR 0 2
18537: PUSH
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL_OW 250
18547: PPUSH
18548: LD_VAR 0 4
18552: PPUSH
18553: LD_INT 3
18555: PPUSH
18556: LD_INT 12
18558: PPUSH
18559: CALL_OW 12
18563: PPUSH
18564: CALL_OW 272
18568: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18569: LD_ADDR_VAR 0 3
18573: PUSH
18574: LD_VAR 0 1
18578: PPUSH
18579: CALL_OW 251
18583: PPUSH
18584: LD_VAR 0 4
18588: PPUSH
18589: LD_INT 3
18591: PPUSH
18592: LD_INT 12
18594: PPUSH
18595: CALL_OW 12
18599: PPUSH
18600: CALL_OW 273
18604: ST_TO_ADDR
// if ValidHex ( x , y ) then
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_VAR 0 3
18614: PPUSH
18615: CALL_OW 488
18619: IFFALSE 18654
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: LD_INT 3
18638: PPUSH
18639: LD_INT 6
18641: PPUSH
18642: CALL_OW 12
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 483
// end ;
18654: GO 18514
18656: POP
18657: POP
// end ;
18658: PPOPN 5
18660: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18661: LD_EXP 26
18665: PUSH
18666: LD_EXP 61
18670: AND
18671: IFFALSE 18765
18673: GO 18675
18675: DISABLE
18676: LD_INT 0
18678: PPUSH
18679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18680: LD_ADDR_VAR 0 2
18684: PUSH
18685: LD_INT 22
18687: PUSH
18688: LD_OWVAR 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 32
18699: PUSH
18700: LD_INT 1
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 21
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: PPUSH
18722: CALL_OW 69
18726: ST_TO_ADDR
// if not tmp then
18727: LD_VAR 0 2
18731: NOT
18732: IFFALSE 18736
// exit ;
18734: GO 18765
// for i in tmp do
18736: LD_ADDR_VAR 0 1
18740: PUSH
18741: LD_VAR 0 2
18745: PUSH
18746: FOR_IN
18747: IFFALSE 18763
// SetFuel ( i , 0 ) ;
18749: LD_VAR 0 1
18753: PPUSH
18754: LD_INT 0
18756: PPUSH
18757: CALL_OW 240
18761: GO 18746
18763: POP
18764: POP
// end ;
18765: PPOPN 2
18767: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18768: LD_EXP 26
18772: PUSH
18773: LD_EXP 62
18777: AND
18778: IFFALSE 18844
18780: GO 18782
18782: DISABLE
18783: LD_INT 0
18785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18786: LD_ADDR_VAR 0 1
18790: PUSH
18791: LD_INT 22
18793: PUSH
18794: LD_OWVAR 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 30
18805: PUSH
18806: LD_INT 29
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PPUSH
18817: CALL_OW 69
18821: ST_TO_ADDR
// if not tmp then
18822: LD_VAR 0 1
18826: NOT
18827: IFFALSE 18831
// exit ;
18829: GO 18844
// DestroyUnit ( tmp [ 1 ] ) ;
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 1
18838: ARRAY
18839: PPUSH
18840: CALL_OW 65
// end ;
18844: PPOPN 1
18846: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18847: LD_EXP 26
18851: PUSH
18852: LD_EXP 64
18856: AND
18857: IFFALSE 18986
18859: GO 18861
18861: DISABLE
18862: LD_INT 0
18864: PPUSH
// begin uc_side := 0 ;
18865: LD_ADDR_OWVAR 20
18869: PUSH
18870: LD_INT 0
18872: ST_TO_ADDR
// uc_nation := nation_arabian ;
18873: LD_ADDR_OWVAR 21
18877: PUSH
18878: LD_INT 2
18880: ST_TO_ADDR
// hc_gallery :=  ;
18881: LD_ADDR_OWVAR 33
18885: PUSH
18886: LD_STRING 
18888: ST_TO_ADDR
// hc_name :=  ;
18889: LD_ADDR_OWVAR 26
18893: PUSH
18894: LD_STRING 
18896: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18897: LD_INT 1
18899: PPUSH
18900: LD_INT 11
18902: PPUSH
18903: LD_INT 10
18905: PPUSH
18906: CALL_OW 380
// un := CreateHuman ;
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: CALL_OW 44
18919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18920: LD_VAR 0 1
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18932: LD_INT 35
18934: PPUSH
18935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_INT 22
18946: PUSH
18947: LD_OWVAR 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: PPUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 74
18970: PPUSH
18971: CALL_OW 115
// until IsDead ( un ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL_OW 301
18984: IFFALSE 18932
// end ;
18986: PPOPN 1
18988: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18989: LD_EXP 26
18993: PUSH
18994: LD_EXP 66
18998: AND
18999: IFFALSE 19011
19001: GO 19003
19003: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19004: LD_STRING earthquake(getX(game), 0, 32)
19006: PPUSH
19007: CALL_OW 559
19011: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19012: LD_EXP 26
19016: PUSH
19017: LD_EXP 67
19021: AND
19022: IFFALSE 19113
19024: GO 19026
19026: DISABLE
19027: LD_INT 0
19029: PPUSH
// begin enable ;
19030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19031: LD_ADDR_VAR 0 1
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_OWVAR 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 21
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 33
19060: PUSH
19061: LD_INT 3
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: LIST
19072: PPUSH
19073: CALL_OW 69
19077: ST_TO_ADDR
// if not tmp then
19078: LD_VAR 0 1
19082: NOT
19083: IFFALSE 19087
// exit ;
19085: GO 19113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19087: LD_VAR 0 1
19091: PUSH
19092: LD_INT 1
19094: PPUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL_OW 12
19104: ARRAY
19105: PPUSH
19106: LD_INT 1
19108: PPUSH
19109: CALL_OW 234
// end ;
19113: PPOPN 1
19115: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19116: LD_EXP 26
19120: PUSH
19121: LD_EXP 68
19125: AND
19126: IFFALSE 19267
19128: GO 19130
19130: DISABLE
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
19135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_OWVAR 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 25
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 69
19171: ST_TO_ADDR
// if not tmp then
19172: LD_VAR 0 3
19176: NOT
19177: IFFALSE 19181
// exit ;
19179: GO 19267
// un := tmp [ rand ( 1 , tmp ) ] ;
19181: LD_ADDR_VAR 0 2
19185: PUSH
19186: LD_VAR 0 3
19190: PUSH
19191: LD_INT 1
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: CALL_OW 12
19203: ARRAY
19204: ST_TO_ADDR
// if Crawls ( un ) then
19205: LD_VAR 0 2
19209: PPUSH
19210: CALL_OW 318
19214: IFFALSE 19225
// ComWalk ( un ) ;
19216: LD_VAR 0 2
19220: PPUSH
19221: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19225: LD_VAR 0 2
19229: PPUSH
19230: LD_INT 9
19232: PPUSH
19233: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19237: LD_INT 28
19239: PPUSH
19240: LD_OWVAR 2
19244: PPUSH
19245: LD_INT 2
19247: PPUSH
19248: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19252: LD_INT 29
19254: PPUSH
19255: LD_OWVAR 2
19259: PPUSH
19260: LD_INT 2
19262: PPUSH
19263: CALL_OW 322
// end ;
19267: PPOPN 3
19269: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19270: LD_EXP 26
19274: PUSH
19275: LD_EXP 69
19279: AND
19280: IFFALSE 19391
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
19289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19290: LD_ADDR_VAR 0 3
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_OWVAR 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 25
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 69
19325: ST_TO_ADDR
// if not tmp then
19326: LD_VAR 0 3
19330: NOT
19331: IFFALSE 19335
// exit ;
19333: GO 19391
// un := tmp [ rand ( 1 , tmp ) ] ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_VAR 0 3
19352: PPUSH
19353: CALL_OW 12
19357: ARRAY
19358: ST_TO_ADDR
// if Crawls ( un ) then
19359: LD_VAR 0 2
19363: PPUSH
19364: CALL_OW 318
19368: IFFALSE 19379
// ComWalk ( un ) ;
19370: LD_VAR 0 2
19374: PPUSH
19375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19379: LD_VAR 0 2
19383: PPUSH
19384: LD_INT 8
19386: PPUSH
19387: CALL_OW 336
// end ;
19391: PPOPN 3
19393: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19394: LD_EXP 26
19398: PUSH
19399: LD_EXP 70
19403: AND
19404: IFFALSE 19548
19406: GO 19408
19408: DISABLE
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19413: LD_ADDR_VAR 0 2
19417: PUSH
19418: LD_INT 22
19420: PUSH
19421: LD_OWVAR 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 21
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 34
19445: PUSH
19446: LD_INT 12
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 34
19455: PUSH
19456: LD_INT 51
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 34
19465: PUSH
19466: LD_INT 32
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: ST_TO_ADDR
// if not tmp then
19489: LD_VAR 0 2
19493: NOT
19494: IFFALSE 19498
// exit ;
19496: GO 19548
// for i in tmp do
19498: LD_ADDR_VAR 0 1
19502: PUSH
19503: LD_VAR 0 2
19507: PUSH
19508: FOR_IN
19509: IFFALSE 19546
// if GetCargo ( i , mat_artifact ) = 0 then
19511: LD_VAR 0 1
19515: PPUSH
19516: LD_INT 4
19518: PPUSH
19519: CALL_OW 289
19523: PUSH
19524: LD_INT 0
19526: EQUAL
19527: IFFALSE 19544
// SetCargo ( i , mat_siberit , 100 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_INT 3
19536: PPUSH
19537: LD_INT 100
19539: PPUSH
19540: CALL_OW 290
19544: GO 19508
19546: POP
19547: POP
// end ;
19548: PPOPN 2
19550: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19551: LD_EXP 26
19555: PUSH
19556: LD_EXP 71
19560: AND
19561: IFFALSE 19744
19563: GO 19565
19565: DISABLE
19566: LD_INT 0
19568: PPUSH
19569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_OWVAR 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// if not tmp then
19592: LD_VAR 0 2
19596: NOT
19597: IFFALSE 19601
// exit ;
19599: GO 19744
// for i := 1 to 2 do
19601: LD_ADDR_VAR 0 1
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_INT 2
19613: PUSH
19614: FOR_TO
19615: IFFALSE 19742
// begin uc_side := your_side ;
19617: LD_ADDR_OWVAR 20
19621: PUSH
19622: LD_OWVAR 2
19626: ST_TO_ADDR
// uc_nation := nation_american ;
19627: LD_ADDR_OWVAR 21
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// vc_chassis := us_morphling ;
19635: LD_ADDR_OWVAR 37
19639: PUSH
19640: LD_INT 5
19642: ST_TO_ADDR
// vc_engine := engine_siberite ;
19643: LD_ADDR_OWVAR 39
19647: PUSH
19648: LD_INT 3
19650: ST_TO_ADDR
// vc_control := control_computer ;
19651: LD_ADDR_OWVAR 38
19655: PUSH
19656: LD_INT 3
19658: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19659: LD_ADDR_OWVAR 40
19663: PUSH
19664: LD_INT 10
19666: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19667: LD_VAR 0 2
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: CALL_OW 310
19680: NOT
19681: IFFALSE 19728
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19683: CALL_OW 45
19687: PPUSH
19688: LD_VAR 0 2
19692: PUSH
19693: LD_INT 1
19695: ARRAY
19696: PPUSH
19697: CALL_OW 250
19701: PPUSH
19702: LD_VAR 0 2
19706: PUSH
19707: LD_INT 1
19709: ARRAY
19710: PPUSH
19711: CALL_OW 251
19715: PPUSH
19716: LD_INT 12
19718: PPUSH
19719: LD_INT 1
19721: PPUSH
19722: CALL_OW 50
19726: GO 19740
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19728: CALL_OW 45
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 51
// end ;
19740: GO 19614
19742: POP
19743: POP
// end ;
19744: PPOPN 2
19746: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19747: LD_EXP 26
19751: PUSH
19752: LD_EXP 72
19756: AND
19757: IFFALSE 19979
19759: GO 19761
19761: DISABLE
19762: LD_INT 0
19764: PPUSH
19765: PPUSH
19766: PPUSH
19767: PPUSH
19768: PPUSH
19769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19770: LD_ADDR_VAR 0 6
19774: PUSH
19775: LD_INT 22
19777: PUSH
19778: LD_OWVAR 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 21
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 3
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: ST_TO_ADDR
// if not tmp then
19824: LD_VAR 0 6
19828: NOT
19829: IFFALSE 19833
// exit ;
19831: GO 19979
// s1 := rand ( 1 , 4 ) ;
19833: LD_ADDR_VAR 0 2
19837: PUSH
19838: LD_INT 1
19840: PPUSH
19841: LD_INT 4
19843: PPUSH
19844: CALL_OW 12
19848: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19849: LD_ADDR_VAR 0 4
19853: PUSH
19854: LD_VAR 0 6
19858: PUSH
19859: LD_INT 1
19861: ARRAY
19862: PPUSH
19863: LD_VAR 0 2
19867: PPUSH
19868: CALL_OW 259
19872: ST_TO_ADDR
// if s1 = 1 then
19873: LD_VAR 0 2
19877: PUSH
19878: LD_INT 1
19880: EQUAL
19881: IFFALSE 19901
// s2 := rand ( 2 , 4 ) else
19883: LD_ADDR_VAR 0 3
19887: PUSH
19888: LD_INT 2
19890: PPUSH
19891: LD_INT 4
19893: PPUSH
19894: CALL_OW 12
19898: ST_TO_ADDR
19899: GO 19909
// s2 := 1 ;
19901: LD_ADDR_VAR 0 3
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19909: LD_ADDR_VAR 0 5
19913: PUSH
19914: LD_VAR 0 6
19918: PUSH
19919: LD_INT 1
19921: ARRAY
19922: PPUSH
19923: LD_VAR 0 3
19927: PPUSH
19928: CALL_OW 259
19932: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19933: LD_VAR 0 6
19937: PUSH
19938: LD_INT 1
19940: ARRAY
19941: PPUSH
19942: LD_VAR 0 2
19946: PPUSH
19947: LD_VAR 0 5
19951: PPUSH
19952: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19956: LD_VAR 0 6
19960: PUSH
19961: LD_INT 1
19963: ARRAY
19964: PPUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: LD_VAR 0 4
19974: PPUSH
19975: CALL_OW 237
// end ;
19979: PPOPN 6
19981: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19982: LD_EXP 26
19986: PUSH
19987: LD_EXP 73
19991: AND
19992: IFFALSE 20071
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20000: LD_ADDR_VAR 0 1
20004: PUSH
20005: LD_INT 22
20007: PUSH
20008: LD_OWVAR 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 30
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 69
20035: ST_TO_ADDR
// if not tmp then
20036: LD_VAR 0 1
20040: NOT
20041: IFFALSE 20045
// exit ;
20043: GO 20071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20045: LD_VAR 0 1
20049: PUSH
20050: LD_INT 1
20052: PPUSH
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 12
20062: ARRAY
20063: PPUSH
20064: LD_INT 1
20066: PPUSH
20067: CALL_OW 234
// end ;
20071: PPOPN 1
20073: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20074: LD_EXP 26
20078: PUSH
20079: LD_EXP 74
20083: AND
20084: IFFALSE 20196
20086: GO 20088
20088: DISABLE
20089: LD_INT 0
20091: PPUSH
20092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20093: LD_ADDR_VAR 0 2
20097: PUSH
20098: LD_INT 22
20100: PUSH
20101: LD_OWVAR 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: LD_INT 30
20115: PUSH
20116: LD_INT 27
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 30
20125: PUSH
20126: LD_INT 26
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 30
20135: PUSH
20136: LD_INT 28
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 69
20157: ST_TO_ADDR
// if not tmp then
20158: LD_VAR 0 2
20162: NOT
20163: IFFALSE 20167
// exit ;
20165: GO 20196
// for i in tmp do
20167: LD_ADDR_VAR 0 1
20171: PUSH
20172: LD_VAR 0 2
20176: PUSH
20177: FOR_IN
20178: IFFALSE 20194
// SetLives ( i , 1 ) ;
20180: LD_VAR 0 1
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: CALL_OW 234
20192: GO 20177
20194: POP
20195: POP
// end ;
20196: PPOPN 2
20198: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20199: LD_EXP 26
20203: PUSH
20204: LD_EXP 75
20208: AND
20209: IFFALSE 20483
20211: GO 20213
20213: DISABLE
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
// begin i := rand ( 1 , 7 ) ;
20219: LD_ADDR_VAR 0 1
20223: PUSH
20224: LD_INT 1
20226: PPUSH
20227: LD_INT 7
20229: PPUSH
20230: CALL_OW 12
20234: ST_TO_ADDR
// case i of 1 :
20235: LD_VAR 0 1
20239: PUSH
20240: LD_INT 1
20242: DOUBLE
20243: EQUAL
20244: IFTRUE 20248
20246: GO 20258
20248: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20249: LD_STRING earthquake(getX(game), 0, 32)
20251: PPUSH
20252: CALL_OW 559
20256: GO 20483
20258: LD_INT 2
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20280
20266: POP
// begin ToLua ( displayStucuk(); ) ;
20267: LD_STRING displayStucuk();
20269: PPUSH
20270: CALL_OW 559
// ResetFog ;
20274: CALL_OW 335
// end ; 3 :
20278: GO 20483
20280: LD_INT 3
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20392
20288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: LD_INT 22
20296: PUSH
20297: LD_OWVAR 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 25
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 69
20324: ST_TO_ADDR
// if not tmp then
20325: LD_VAR 0 2
20329: NOT
20330: IFFALSE 20334
// exit ;
20332: GO 20483
// un := tmp [ rand ( 1 , tmp ) ] ;
20334: LD_ADDR_VAR 0 3
20338: PUSH
20339: LD_VAR 0 2
20343: PUSH
20344: LD_INT 1
20346: PPUSH
20347: LD_VAR 0 2
20351: PPUSH
20352: CALL_OW 12
20356: ARRAY
20357: ST_TO_ADDR
// if Crawls ( un ) then
20358: LD_VAR 0 3
20362: PPUSH
20363: CALL_OW 318
20367: IFFALSE 20378
// ComWalk ( un ) ;
20369: LD_VAR 0 3
20373: PPUSH
20374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20378: LD_VAR 0 3
20382: PPUSH
20383: LD_INT 8
20385: PPUSH
20386: CALL_OW 336
// end ; 4 :
20390: GO 20483
20392: LD_INT 4
20394: DOUBLE
20395: EQUAL
20396: IFTRUE 20400
20398: GO 20461
20400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20401: LD_ADDR_VAR 0 2
20405: PUSH
20406: LD_INT 22
20408: PUSH
20409: LD_OWVAR 2
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 30
20420: PUSH
20421: LD_INT 29
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 69
20436: ST_TO_ADDR
// if not tmp then
20437: LD_VAR 0 2
20441: NOT
20442: IFFALSE 20446
// exit ;
20444: GO 20483
// DestroyUnit ( tmp [ 1 ] ) ;
20446: LD_VAR 0 2
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: CALL_OW 65
// end ; 5 .. 7 :
20459: GO 20483
20461: LD_INT 5
20463: DOUBLE
20464: GREATEREQUAL
20465: IFFALSE 20473
20467: LD_INT 7
20469: DOUBLE
20470: LESSEQUAL
20471: IFTRUE 20475
20473: GO 20482
20475: POP
// StreamSibBomb ; end ;
20476: CALL 16733 0 0
20480: GO 20483
20482: POP
// end ;
20483: PPOPN 3
20485: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20486: LD_EXP 26
20490: PUSH
20491: LD_EXP 76
20495: AND
20496: IFFALSE 20652
20498: GO 20500
20500: DISABLE
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
20505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: LD_INT 81
20513: PUSH
20514: LD_OWVAR 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 21
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: ST_TO_ADDR
// if not tmp then
20560: LD_VAR 0 2
20564: NOT
20565: IFFALSE 20569
// exit ;
20567: GO 20652
// p := 0 ;
20569: LD_ADDR_VAR 0 3
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20577: LD_INT 35
20579: PPUSH
20580: CALL_OW 67
// p := p + 1 ;
20584: LD_ADDR_VAR 0 3
20588: PUSH
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 1
20596: PLUS
20597: ST_TO_ADDR
// for i in tmp do
20598: LD_ADDR_VAR 0 1
20602: PUSH
20603: LD_VAR 0 2
20607: PUSH
20608: FOR_IN
20609: IFFALSE 20640
// if GetLives ( i ) < 1000 then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 256
20620: PUSH
20621: LD_INT 1000
20623: LESS
20624: IFFALSE 20638
// SetLives ( i , 1000 ) ;
20626: LD_VAR 0 1
20630: PPUSH
20631: LD_INT 1000
20633: PPUSH
20634: CALL_OW 234
20638: GO 20608
20640: POP
20641: POP
// until p > 20 ;
20642: LD_VAR 0 3
20646: PUSH
20647: LD_INT 20
20649: GREATER
20650: IFFALSE 20577
// end ;
20652: PPOPN 3
20654: END
// every 0 0$1 trigger StreamModeActive and sTime do
20655: LD_EXP 26
20659: PUSH
20660: LD_EXP 77
20664: AND
20665: IFFALSE 20700
20667: GO 20669
20669: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20670: LD_INT 28
20672: PPUSH
20673: LD_OWVAR 2
20677: PPUSH
20678: LD_INT 2
20680: PPUSH
20681: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20685: LD_INT 30
20687: PPUSH
20688: LD_OWVAR 2
20692: PPUSH
20693: LD_INT 2
20695: PPUSH
20696: CALL_OW 322
// end ;
20700: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20701: LD_EXP 26
20705: PUSH
20706: LD_EXP 78
20710: AND
20711: IFFALSE 20832
20713: GO 20715
20715: DISABLE
20716: LD_INT 0
20718: PPUSH
20719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20720: LD_ADDR_VAR 0 2
20724: PUSH
20725: LD_INT 22
20727: PUSH
20728: LD_OWVAR 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 3
20749: PUSH
20750: LD_INT 23
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 69
20773: ST_TO_ADDR
// if not tmp then
20774: LD_VAR 0 2
20778: NOT
20779: IFFALSE 20783
// exit ;
20781: GO 20832
// for i in tmp do
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_VAR 0 2
20792: PUSH
20793: FOR_IN
20794: IFFALSE 20830
// begin if Crawls ( i ) then
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 318
20805: IFFALSE 20816
// ComWalk ( i ) ;
20807: LD_VAR 0 1
20811: PPUSH
20812: CALL_OW 138
// SetClass ( i , 2 ) ;
20816: LD_VAR 0 1
20820: PPUSH
20821: LD_INT 2
20823: PPUSH
20824: CALL_OW 336
// end ;
20828: GO 20793
20830: POP
20831: POP
// end ;
20832: PPOPN 2
20834: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20835: LD_EXP 26
20839: PUSH
20840: LD_EXP 79
20844: AND
20845: IFFALSE 21126
20847: GO 20849
20849: DISABLE
20850: LD_INT 0
20852: PPUSH
20853: PPUSH
20854: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20855: LD_OWVAR 2
20859: PPUSH
20860: LD_INT 9
20862: PPUSH
20863: LD_INT 1
20865: PPUSH
20866: LD_INT 1
20868: PPUSH
20869: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20873: LD_INT 9
20875: PPUSH
20876: LD_OWVAR 2
20880: PPUSH
20881: CALL_OW 343
// uc_side := 9 ;
20885: LD_ADDR_OWVAR 20
20889: PUSH
20890: LD_INT 9
20892: ST_TO_ADDR
// uc_nation := 2 ;
20893: LD_ADDR_OWVAR 21
20897: PUSH
20898: LD_INT 2
20900: ST_TO_ADDR
// hc_name := Dark Warrior ;
20901: LD_ADDR_OWVAR 26
20905: PUSH
20906: LD_STRING Dark Warrior
20908: ST_TO_ADDR
// hc_gallery :=  ;
20909: LD_ADDR_OWVAR 33
20913: PUSH
20914: LD_STRING 
20916: ST_TO_ADDR
// hc_noskilllimit := true ;
20917: LD_ADDR_OWVAR 76
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20925: LD_ADDR_OWVAR 31
20929: PUSH
20930: LD_INT 30
20932: PUSH
20933: LD_INT 30
20935: PUSH
20936: LD_INT 30
20938: PUSH
20939: LD_INT 30
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: ST_TO_ADDR
// un := CreateHuman ;
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: CALL_OW 44
20957: ST_TO_ADDR
// hc_noskilllimit := false ;
20958: LD_ADDR_OWVAR 76
20962: PUSH
20963: LD_INT 0
20965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20966: LD_VAR 0 3
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 51
// p := 0 ;
20978: LD_ADDR_VAR 0 2
20982: PUSH
20983: LD_INT 0
20985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20986: LD_INT 35
20988: PPUSH
20989: CALL_OW 67
// p := p + 1 ;
20993: LD_ADDR_VAR 0 2
20997: PUSH
20998: LD_VAR 0 2
21002: PUSH
21003: LD_INT 1
21005: PLUS
21006: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21007: LD_VAR 0 3
21011: PPUSH
21012: CALL_OW 256
21016: PUSH
21017: LD_INT 1000
21019: LESS
21020: IFFALSE 21034
// SetLives ( un , 1000 ) ;
21022: LD_VAR 0 3
21026: PPUSH
21027: LD_INT 1000
21029: PPUSH
21030: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21034: LD_VAR 0 3
21038: PPUSH
21039: LD_INT 81
21041: PUSH
21042: LD_OWVAR 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 91
21053: PUSH
21054: LD_VAR 0 3
21058: PUSH
21059: LD_INT 30
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PPUSH
21071: CALL_OW 69
21075: PPUSH
21076: LD_VAR 0 3
21080: PPUSH
21081: CALL_OW 74
21085: PPUSH
21086: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21090: LD_VAR 0 2
21094: PUSH
21095: LD_INT 60
21097: GREATER
21098: PUSH
21099: LD_VAR 0 3
21103: PPUSH
21104: CALL_OW 301
21108: OR
21109: IFFALSE 20986
// if un then
21111: LD_VAR 0 3
21115: IFFALSE 21126
// RemoveUnit ( un ) ;
21117: LD_VAR 0 3
21121: PPUSH
21122: CALL_OW 64
// end ;
21126: PPOPN 3
21128: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21129: LD_INT 0
21131: PPUSH
// case cmd of 301 :
21132: LD_VAR 0 1
21136: PUSH
21137: LD_INT 301
21139: DOUBLE
21140: EQUAL
21141: IFTRUE 21145
21143: GO 21177
21145: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21146: LD_VAR 0 6
21150: PPUSH
21151: LD_VAR 0 7
21155: PPUSH
21156: LD_VAR 0 8
21160: PPUSH
21161: LD_VAR 0 4
21165: PPUSH
21166: LD_VAR 0 5
21170: PPUSH
21171: CALL 22378 0 5
21175: GO 21298
21177: LD_INT 302
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21222
21185: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21186: LD_VAR 0 6
21190: PPUSH
21191: LD_VAR 0 7
21195: PPUSH
21196: LD_VAR 0 8
21200: PPUSH
21201: LD_VAR 0 9
21205: PPUSH
21206: LD_VAR 0 4
21210: PPUSH
21211: LD_VAR 0 5
21215: PPUSH
21216: CALL 22469 0 6
21220: GO 21298
21222: LD_INT 303
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21267
21230: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21231: LD_VAR 0 6
21235: PPUSH
21236: LD_VAR 0 7
21240: PPUSH
21241: LD_VAR 0 8
21245: PPUSH
21246: LD_VAR 0 9
21250: PPUSH
21251: LD_VAR 0 4
21255: PPUSH
21256: LD_VAR 0 5
21260: PPUSH
21261: CALL 21303 0 6
21265: GO 21298
21267: LD_INT 304
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21297
21275: POP
// hHackTeleport ( unit , x , y ) ; end ;
21276: LD_VAR 0 2
21280: PPUSH
21281: LD_VAR 0 4
21285: PPUSH
21286: LD_VAR 0 5
21290: PPUSH
21291: CALL 23062 0 3
21295: GO 21298
21297: POP
// end ;
21298: LD_VAR 0 12
21302: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21303: LD_INT 0
21305: PPUSH
21306: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21307: LD_VAR 0 1
21311: PUSH
21312: LD_INT 1
21314: LESS
21315: PUSH
21316: LD_VAR 0 1
21320: PUSH
21321: LD_INT 3
21323: GREATER
21324: OR
21325: PUSH
21326: LD_VAR 0 5
21330: PPUSH
21331: LD_VAR 0 6
21335: PPUSH
21336: CALL_OW 428
21340: OR
21341: IFFALSE 21345
// exit ;
21343: GO 22065
// uc_side := your_side ;
21345: LD_ADDR_OWVAR 20
21349: PUSH
21350: LD_OWVAR 2
21354: ST_TO_ADDR
// uc_nation := nation ;
21355: LD_ADDR_OWVAR 21
21359: PUSH
21360: LD_VAR 0 1
21364: ST_TO_ADDR
// bc_level = 1 ;
21365: LD_ADDR_OWVAR 43
21369: PUSH
21370: LD_INT 1
21372: ST_TO_ADDR
// case btype of 1 :
21373: LD_VAR 0 2
21377: PUSH
21378: LD_INT 1
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21397
21386: POP
// bc_type := b_depot ; 2 :
21387: LD_ADDR_OWVAR 42
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
21395: GO 22009
21397: LD_INT 2
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21416
21405: POP
// bc_type := b_warehouse ; 3 :
21406: LD_ADDR_OWVAR 42
21410: PUSH
21411: LD_INT 1
21413: ST_TO_ADDR
21414: GO 22009
21416: LD_INT 3
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21435
21424: POP
// bc_type := b_lab ; 4 .. 9 :
21425: LD_ADDR_OWVAR 42
21429: PUSH
21430: LD_INT 6
21432: ST_TO_ADDR
21433: GO 22009
21435: LD_INT 4
21437: DOUBLE
21438: GREATEREQUAL
21439: IFFALSE 21447
21441: LD_INT 9
21443: DOUBLE
21444: LESSEQUAL
21445: IFTRUE 21449
21447: GO 21501
21449: POP
// begin bc_type := b_lab_half ;
21450: LD_ADDR_OWVAR 42
21454: PUSH
21455: LD_INT 7
21457: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21458: LD_ADDR_OWVAR 44
21462: PUSH
21463: LD_INT 10
21465: PUSH
21466: LD_INT 11
21468: PUSH
21469: LD_INT 12
21471: PUSH
21472: LD_INT 15
21474: PUSH
21475: LD_INT 14
21477: PUSH
21478: LD_INT 13
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: PUSH
21489: LD_VAR 0 2
21493: PUSH
21494: LD_INT 3
21496: MINUS
21497: ARRAY
21498: ST_TO_ADDR
// end ; 10 .. 13 :
21499: GO 22009
21501: LD_INT 10
21503: DOUBLE
21504: GREATEREQUAL
21505: IFFALSE 21513
21507: LD_INT 13
21509: DOUBLE
21510: LESSEQUAL
21511: IFTRUE 21515
21513: GO 21592
21515: POP
// begin bc_type := b_lab_full ;
21516: LD_ADDR_OWVAR 42
21520: PUSH
21521: LD_INT 8
21523: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21524: LD_ADDR_OWVAR 44
21528: PUSH
21529: LD_INT 10
21531: PUSH
21532: LD_INT 12
21534: PUSH
21535: LD_INT 14
21537: PUSH
21538: LD_INT 13
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: PUSH
21547: LD_VAR 0 2
21551: PUSH
21552: LD_INT 9
21554: MINUS
21555: ARRAY
21556: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21557: LD_ADDR_OWVAR 45
21561: PUSH
21562: LD_INT 11
21564: PUSH
21565: LD_INT 15
21567: PUSH
21568: LD_INT 12
21570: PUSH
21571: LD_INT 15
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: LD_VAR 0 2
21584: PUSH
21585: LD_INT 9
21587: MINUS
21588: ARRAY
21589: ST_TO_ADDR
// end ; 14 :
21590: GO 22009
21592: LD_INT 14
21594: DOUBLE
21595: EQUAL
21596: IFTRUE 21600
21598: GO 21611
21600: POP
// bc_type := b_workshop ; 15 :
21601: LD_ADDR_OWVAR 42
21605: PUSH
21606: LD_INT 2
21608: ST_TO_ADDR
21609: GO 22009
21611: LD_INT 15
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21630
21619: POP
// bc_type := b_factory ; 16 :
21620: LD_ADDR_OWVAR 42
21624: PUSH
21625: LD_INT 3
21627: ST_TO_ADDR
21628: GO 22009
21630: LD_INT 16
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21649
21638: POP
// bc_type := b_ext_gun ; 17 :
21639: LD_ADDR_OWVAR 42
21643: PUSH
21644: LD_INT 17
21646: ST_TO_ADDR
21647: GO 22009
21649: LD_INT 17
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21685
21657: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21658: LD_ADDR_OWVAR 42
21662: PUSH
21663: LD_INT 19
21665: PUSH
21666: LD_INT 23
21668: PUSH
21669: LD_INT 19
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: LD_VAR 0 1
21681: ARRAY
21682: ST_TO_ADDR
21683: GO 22009
21685: LD_INT 18
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21704
21693: POP
// bc_type := b_ext_radar ; 19 :
21694: LD_ADDR_OWVAR 42
21698: PUSH
21699: LD_INT 20
21701: ST_TO_ADDR
21702: GO 22009
21704: LD_INT 19
21706: DOUBLE
21707: EQUAL
21708: IFTRUE 21712
21710: GO 21723
21712: POP
// bc_type := b_ext_radio ; 20 :
21713: LD_ADDR_OWVAR 42
21717: PUSH
21718: LD_INT 22
21720: ST_TO_ADDR
21721: GO 22009
21723: LD_INT 20
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21742
21731: POP
// bc_type := b_ext_siberium ; 21 :
21732: LD_ADDR_OWVAR 42
21736: PUSH
21737: LD_INT 21
21739: ST_TO_ADDR
21740: GO 22009
21742: LD_INT 21
21744: DOUBLE
21745: EQUAL
21746: IFTRUE 21750
21748: GO 21761
21750: POP
// bc_type := b_ext_computer ; 22 :
21751: LD_ADDR_OWVAR 42
21755: PUSH
21756: LD_INT 24
21758: ST_TO_ADDR
21759: GO 22009
21761: LD_INT 22
21763: DOUBLE
21764: EQUAL
21765: IFTRUE 21769
21767: GO 21780
21769: POP
// bc_type := b_ext_track ; 23 :
21770: LD_ADDR_OWVAR 42
21774: PUSH
21775: LD_INT 16
21777: ST_TO_ADDR
21778: GO 22009
21780: LD_INT 23
21782: DOUBLE
21783: EQUAL
21784: IFTRUE 21788
21786: GO 21799
21788: POP
// bc_type := b_ext_laser ; 24 :
21789: LD_ADDR_OWVAR 42
21793: PUSH
21794: LD_INT 25
21796: ST_TO_ADDR
21797: GO 22009
21799: LD_INT 24
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21818
21807: POP
// bc_type := b_control_tower ; 25 :
21808: LD_ADDR_OWVAR 42
21812: PUSH
21813: LD_INT 36
21815: ST_TO_ADDR
21816: GO 22009
21818: LD_INT 25
21820: DOUBLE
21821: EQUAL
21822: IFTRUE 21826
21824: GO 21837
21826: POP
// bc_type := b_breastwork ; 26 :
21827: LD_ADDR_OWVAR 42
21831: PUSH
21832: LD_INT 31
21834: ST_TO_ADDR
21835: GO 22009
21837: LD_INT 26
21839: DOUBLE
21840: EQUAL
21841: IFTRUE 21845
21843: GO 21856
21845: POP
// bc_type := b_bunker ; 27 :
21846: LD_ADDR_OWVAR 42
21850: PUSH
21851: LD_INT 32
21853: ST_TO_ADDR
21854: GO 22009
21856: LD_INT 27
21858: DOUBLE
21859: EQUAL
21860: IFTRUE 21864
21862: GO 21875
21864: POP
// bc_type := b_turret ; 28 :
21865: LD_ADDR_OWVAR 42
21869: PUSH
21870: LD_INT 33
21872: ST_TO_ADDR
21873: GO 22009
21875: LD_INT 28
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21883
21881: GO 21894
21883: POP
// bc_type := b_armoury ; 29 :
21884: LD_ADDR_OWVAR 42
21888: PUSH
21889: LD_INT 4
21891: ST_TO_ADDR
21892: GO 22009
21894: LD_INT 29
21896: DOUBLE
21897: EQUAL
21898: IFTRUE 21902
21900: GO 21913
21902: POP
// bc_type := b_barracks ; 30 :
21903: LD_ADDR_OWVAR 42
21907: PUSH
21908: LD_INT 5
21910: ST_TO_ADDR
21911: GO 22009
21913: LD_INT 30
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21932
21921: POP
// bc_type := b_solar_power ; 31 :
21922: LD_ADDR_OWVAR 42
21926: PUSH
21927: LD_INT 27
21929: ST_TO_ADDR
21930: GO 22009
21932: LD_INT 31
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 21951
21940: POP
// bc_type := b_oil_power ; 32 :
21941: LD_ADDR_OWVAR 42
21945: PUSH
21946: LD_INT 26
21948: ST_TO_ADDR
21949: GO 22009
21951: LD_INT 32
21953: DOUBLE
21954: EQUAL
21955: IFTRUE 21959
21957: GO 21970
21959: POP
// bc_type := b_siberite_power ; 33 :
21960: LD_ADDR_OWVAR 42
21964: PUSH
21965: LD_INT 28
21967: ST_TO_ADDR
21968: GO 22009
21970: LD_INT 33
21972: DOUBLE
21973: EQUAL
21974: IFTRUE 21978
21976: GO 21989
21978: POP
// bc_type := b_oil_mine ; 34 :
21979: LD_ADDR_OWVAR 42
21983: PUSH
21984: LD_INT 29
21986: ST_TO_ADDR
21987: GO 22009
21989: LD_INT 34
21991: DOUBLE
21992: EQUAL
21993: IFTRUE 21997
21995: GO 22008
21997: POP
// bc_type := b_siberite_mine ; end ;
21998: LD_ADDR_OWVAR 42
22002: PUSH
22003: LD_INT 30
22005: ST_TO_ADDR
22006: GO 22009
22008: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22009: LD_ADDR_VAR 0 8
22013: PUSH
22014: LD_VAR 0 5
22018: PPUSH
22019: LD_VAR 0 6
22023: PPUSH
22024: LD_VAR 0 3
22028: PPUSH
22029: CALL_OW 47
22033: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22034: LD_OWVAR 42
22038: PUSH
22039: LD_INT 32
22041: PUSH
22042: LD_INT 33
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: IN
22049: IFFALSE 22065
// PlaceWeaponTurret ( b , weapon ) ;
22051: LD_VAR 0 8
22055: PPUSH
22056: LD_VAR 0 4
22060: PPUSH
22061: CALL_OW 431
// end ;
22065: LD_VAR 0 7
22069: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22076: LD_ADDR_VAR 0 4
22080: PUSH
22081: LD_INT 22
22083: PUSH
22084: LD_OWVAR 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 30
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 30
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PPUSH
22125: CALL_OW 69
22129: ST_TO_ADDR
// if not tmp then
22130: LD_VAR 0 4
22134: NOT
22135: IFFALSE 22139
// exit ;
22137: GO 22198
// for i in tmp do
22139: LD_ADDR_VAR 0 2
22143: PUSH
22144: LD_VAR 0 4
22148: PUSH
22149: FOR_IN
22150: IFFALSE 22196
// for j = 1 to 3 do
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: DOUBLE
22158: LD_INT 1
22160: DEC
22161: ST_TO_ADDR
22162: LD_INT 3
22164: PUSH
22165: FOR_TO
22166: IFFALSE 22192
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22168: LD_VAR 0 2
22172: PPUSH
22173: CALL_OW 274
22177: PPUSH
22178: LD_VAR 0 3
22182: PPUSH
22183: LD_INT 99999
22185: PPUSH
22186: CALL_OW 277
22190: GO 22165
22192: POP
22193: POP
22194: GO 22149
22196: POP
22197: POP
// end ;
22198: LD_VAR 0 1
22202: RET
// export function hHackSetLevel10 ; var i , j ; begin
22203: LD_INT 0
22205: PPUSH
22206: PPUSH
22207: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_INT 21
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PPUSH
22223: CALL_OW 69
22227: PUSH
22228: FOR_IN
22229: IFFALSE 22281
// if IsSelected ( i ) then
22231: LD_VAR 0 2
22235: PPUSH
22236: CALL_OW 306
22240: IFFALSE 22279
// begin for j := 1 to 4 do
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: DOUBLE
22248: LD_INT 1
22250: DEC
22251: ST_TO_ADDR
22252: LD_INT 4
22254: PUSH
22255: FOR_TO
22256: IFFALSE 22277
// SetSkill ( i , j , 10 ) ;
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: LD_INT 10
22270: PPUSH
22271: CALL_OW 237
22275: GO 22255
22277: POP
22278: POP
// end ;
22279: GO 22228
22281: POP
22282: POP
// end ;
22283: LD_VAR 0 1
22287: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
22292: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22293: LD_ADDR_VAR 0 2
22297: PUSH
22298: LD_INT 22
22300: PUSH
22301: LD_OWVAR 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 21
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PPUSH
22324: CALL_OW 69
22328: PUSH
22329: FOR_IN
22330: IFFALSE 22371
// begin for j := 1 to 4 do
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: DOUBLE
22338: LD_INT 1
22340: DEC
22341: ST_TO_ADDR
22342: LD_INT 4
22344: PUSH
22345: FOR_TO
22346: IFFALSE 22367
// SetSkill ( i , j , 10 ) ;
22348: LD_VAR 0 2
22352: PPUSH
22353: LD_VAR 0 3
22357: PPUSH
22358: LD_INT 10
22360: PPUSH
22361: CALL_OW 237
22365: GO 22345
22367: POP
22368: POP
// end ;
22369: GO 22329
22371: POP
22372: POP
// end ;
22373: LD_VAR 0 1
22377: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22378: LD_INT 0
22380: PPUSH
// uc_side := your_side ;
22381: LD_ADDR_OWVAR 20
22385: PUSH
22386: LD_OWVAR 2
22390: ST_TO_ADDR
// uc_nation := nation ;
22391: LD_ADDR_OWVAR 21
22395: PUSH
22396: LD_VAR 0 1
22400: ST_TO_ADDR
// InitHc ;
22401: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22405: LD_INT 0
22407: PPUSH
22408: LD_VAR 0 2
22412: PPUSH
22413: LD_VAR 0 3
22417: PPUSH
22418: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22422: LD_VAR 0 4
22426: PPUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: CALL_OW 428
22436: PUSH
22437: LD_INT 0
22439: EQUAL
22440: IFFALSE 22464
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22442: CALL_OW 44
22446: PPUSH
22447: LD_VAR 0 4
22451: PPUSH
22452: LD_VAR 0 5
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL_OW 48
// end ;
22464: LD_VAR 0 6
22468: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22469: LD_INT 0
22471: PPUSH
22472: PPUSH
// uc_side := your_side ;
22473: LD_ADDR_OWVAR 20
22477: PUSH
22478: LD_OWVAR 2
22482: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22483: LD_VAR 0 1
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 3
22496: PUSH
22497: LD_INT 4
22499: PUSH
22500: LD_INT 5
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: IN
22510: IFFALSE 22522
// uc_nation := nation_american else
22512: LD_ADDR_OWVAR 21
22516: PUSH
22517: LD_INT 1
22519: ST_TO_ADDR
22520: GO 22565
// if chassis in [ 11 , 12 , 13 , 14 ] then
22522: LD_VAR 0 1
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 13
22535: PUSH
22536: LD_INT 14
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: IN
22545: IFFALSE 22557
// uc_nation := nation_arabian else
22547: LD_ADDR_OWVAR 21
22551: PUSH
22552: LD_INT 2
22554: ST_TO_ADDR
22555: GO 22565
// uc_nation := nation_russian ;
22557: LD_ADDR_OWVAR 21
22561: PUSH
22562: LD_INT 3
22564: ST_TO_ADDR
// vc_chassis := chassis ;
22565: LD_ADDR_OWVAR 37
22569: PUSH
22570: LD_VAR 0 1
22574: ST_TO_ADDR
// vc_engine := engine ;
22575: LD_ADDR_OWVAR 39
22579: PUSH
22580: LD_VAR 0 2
22584: ST_TO_ADDR
// vc_control := control ;
22585: LD_ADDR_OWVAR 38
22589: PUSH
22590: LD_VAR 0 3
22594: ST_TO_ADDR
// vc_weapon := weapon ;
22595: LD_ADDR_OWVAR 40
22599: PUSH
22600: LD_VAR 0 4
22604: ST_TO_ADDR
// un := CreateVehicle ;
22605: LD_ADDR_VAR 0 8
22609: PUSH
22610: CALL_OW 45
22614: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22615: LD_VAR 0 8
22619: PPUSH
22620: LD_INT 0
22622: PPUSH
22623: LD_INT 5
22625: PPUSH
22626: CALL_OW 12
22630: PPUSH
22631: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22635: LD_VAR 0 8
22639: PPUSH
22640: LD_VAR 0 5
22644: PPUSH
22645: LD_VAR 0 6
22649: PPUSH
22650: LD_INT 1
22652: PPUSH
22653: CALL_OW 48
// end ;
22657: LD_VAR 0 7
22661: RET
// export hInvincible ; every 1 do
22662: GO 22664
22664: DISABLE
// hInvincible := [ ] ;
22665: LD_ADDR_EXP 80
22669: PUSH
22670: EMPTY
22671: ST_TO_ADDR
22672: END
// every 10 do var i ;
22673: GO 22675
22675: DISABLE
22676: LD_INT 0
22678: PPUSH
// begin enable ;
22679: ENABLE
// if not hInvincible then
22680: LD_EXP 80
22684: NOT
22685: IFFALSE 22689
// exit ;
22687: GO 22733
// for i in hInvincible do
22689: LD_ADDR_VAR 0 1
22693: PUSH
22694: LD_EXP 80
22698: PUSH
22699: FOR_IN
22700: IFFALSE 22731
// if GetLives ( i ) < 1000 then
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 256
22711: PUSH
22712: LD_INT 1000
22714: LESS
22715: IFFALSE 22729
// SetLives ( i , 1000 ) ;
22717: LD_VAR 0 1
22721: PPUSH
22722: LD_INT 1000
22724: PPUSH
22725: CALL_OW 234
22729: GO 22699
22731: POP
22732: POP
// end ;
22733: PPOPN 1
22735: END
// export function hHackInvincible ; var i ; begin
22736: LD_INT 0
22738: PPUSH
22739: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 21
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 21
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: PPUSH
22773: CALL_OW 69
22777: PUSH
22778: FOR_IN
22779: IFFALSE 22840
// if IsSelected ( i ) then
22781: LD_VAR 0 2
22785: PPUSH
22786: CALL_OW 306
22790: IFFALSE 22838
// begin if i in hInvincible then
22792: LD_VAR 0 2
22796: PUSH
22797: LD_EXP 80
22801: IN
22802: IFFALSE 22822
// hInvincible := hInvincible diff i else
22804: LD_ADDR_EXP 80
22808: PUSH
22809: LD_EXP 80
22813: PUSH
22814: LD_VAR 0 2
22818: DIFF
22819: ST_TO_ADDR
22820: GO 22838
// hInvincible := hInvincible union i ;
22822: LD_ADDR_EXP 80
22826: PUSH
22827: LD_EXP 80
22831: PUSH
22832: LD_VAR 0 2
22836: UNION
22837: ST_TO_ADDR
// end ;
22838: GO 22778
22840: POP
22841: POP
// end ;
22842: LD_VAR 0 1
22846: RET
// export function hHackInvisible ; var i , j ; begin
22847: LD_INT 0
22849: PPUSH
22850: PPUSH
22851: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22852: LD_ADDR_VAR 0 2
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PPUSH
22867: CALL_OW 69
22871: PUSH
22872: FOR_IN
22873: IFFALSE 22897
// if IsSelected ( i ) then
22875: LD_VAR 0 2
22879: PPUSH
22880: CALL_OW 306
22884: IFFALSE 22895
// ComForceInvisible ( i ) ;
22886: LD_VAR 0 2
22890: PPUSH
22891: CALL_OW 496
22895: GO 22872
22897: POP
22898: POP
// end ;
22899: LD_VAR 0 1
22903: RET
// export function hHackChangeYourSide ; begin
22904: LD_INT 0
22906: PPUSH
// if your_side = 8 then
22907: LD_OWVAR 2
22911: PUSH
22912: LD_INT 8
22914: EQUAL
22915: IFFALSE 22927
// your_side := 0 else
22917: LD_ADDR_OWVAR 2
22921: PUSH
22922: LD_INT 0
22924: ST_TO_ADDR
22925: GO 22941
// your_side := your_side + 1 ;
22927: LD_ADDR_OWVAR 2
22931: PUSH
22932: LD_OWVAR 2
22936: PUSH
22937: LD_INT 1
22939: PLUS
22940: ST_TO_ADDR
// end ;
22941: LD_VAR 0 1
22945: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22946: LD_INT 0
22948: PPUSH
22949: PPUSH
22950: PPUSH
// for i in all_units do
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: LD_OWVAR 3
22960: PUSH
22961: FOR_IN
22962: IFFALSE 23040
// if IsSelected ( i ) then
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 306
22973: IFFALSE 23038
// begin j := GetSide ( i ) ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 255
22989: ST_TO_ADDR
// if j = 8 then
22990: LD_VAR 0 3
22994: PUSH
22995: LD_INT 8
22997: EQUAL
22998: IFFALSE 23010
// j := 0 else
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_INT 0
23007: ST_TO_ADDR
23008: GO 23024
// j := j + 1 ;
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_VAR 0 3
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: ST_TO_ADDR
// SetSide ( i , j ) ;
23024: LD_VAR 0 2
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: CALL_OW 235
// end ;
23038: GO 22961
23040: POP
23041: POP
// end ;
23042: LD_VAR 0 1
23046: RET
// export function hHackFog ; begin
23047: LD_INT 0
23049: PPUSH
// FogOff ( true ) ;
23050: LD_INT 1
23052: PPUSH
23053: CALL_OW 344
// end ;
23057: LD_VAR 0 1
23061: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23062: LD_INT 0
23064: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23065: LD_VAR 0 1
23069: PPUSH
23070: LD_VAR 0 2
23074: PPUSH
23075: LD_VAR 0 3
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 483
// CenterOnXY ( x , y ) ;
23090: LD_VAR 0 2
23094: PPUSH
23095: LD_VAR 0 3
23099: PPUSH
23100: CALL_OW 84
// end ; end_of_file end_of_file
23104: LD_VAR 0 4
23108: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23109: LD_INT 0
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 264
23124: PUSH
23125: LD_EXP 97
23129: EQUAL
23130: IFFALSE 23202
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23132: LD_INT 68
23134: PPUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 255
23144: PPUSH
23145: CALL_OW 321
23149: PUSH
23150: LD_INT 2
23152: EQUAL
23153: IFFALSE 23165
// eff := 70 else
23155: LD_ADDR_VAR 0 4
23159: PUSH
23160: LD_INT 70
23162: ST_TO_ADDR
23163: GO 23173
// eff := 30 ;
23165: LD_ADDR_VAR 0 4
23169: PUSH
23170: LD_INT 30
23172: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: LD_VAR 0 4
23197: PPUSH
23198: CALL_OW 495
// end ; end ;
23202: LD_VAR 0 2
23206: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23207: LD_INT 0
23209: PPUSH
// end ;
23210: LD_VAR 0 4
23214: RET
// export function SOS_Command ( cmd ) ; begin
23215: LD_INT 0
23217: PPUSH
// end ;
23218: LD_VAR 0 2
23222: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23223: LD_INT 0
23225: PPUSH
// if cmd = 121 then
23226: LD_VAR 0 1
23230: PUSH
23231: LD_INT 121
23233: EQUAL
23234: IFFALSE 23236
// end ;
23236: LD_VAR 0 6
23240: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23241: LD_INT 0
23243: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23244: LD_VAR 0 1
23248: PUSH
23249: LD_INT 250
23251: EQUAL
23252: PUSH
23253: LD_VAR 0 2
23257: PPUSH
23258: CALL_OW 264
23262: PUSH
23263: LD_EXP 100
23267: EQUAL
23268: AND
23269: IFFALSE 23290
// MinerPlaceMine ( unit , x , y ) ;
23271: LD_VAR 0 2
23275: PPUSH
23276: LD_VAR 0 4
23280: PPUSH
23281: LD_VAR 0 5
23285: PPUSH
23286: CALL 25639 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23290: LD_VAR 0 1
23294: PUSH
23295: LD_INT 251
23297: EQUAL
23298: PUSH
23299: LD_VAR 0 2
23303: PPUSH
23304: CALL_OW 264
23308: PUSH
23309: LD_EXP 100
23313: EQUAL
23314: AND
23315: IFFALSE 23336
// MinerDetonateMine ( unit , x , y ) ;
23317: LD_VAR 0 2
23321: PPUSH
23322: LD_VAR 0 4
23326: PPUSH
23327: LD_VAR 0 5
23331: PPUSH
23332: CALL 25916 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23336: LD_VAR 0 1
23340: PUSH
23341: LD_INT 252
23343: EQUAL
23344: PUSH
23345: LD_VAR 0 2
23349: PPUSH
23350: CALL_OW 264
23354: PUSH
23355: LD_EXP 100
23359: EQUAL
23360: AND
23361: IFFALSE 23382
// MinerCreateMinefield ( unit , x , y ) ;
23363: LD_VAR 0 2
23367: PPUSH
23368: LD_VAR 0 4
23372: PPUSH
23373: LD_VAR 0 5
23377: PPUSH
23378: CALL 26333 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23382: LD_VAR 0 1
23386: PUSH
23387: LD_INT 253
23389: EQUAL
23390: PUSH
23391: LD_VAR 0 2
23395: PPUSH
23396: CALL_OW 257
23400: PUSH
23401: LD_INT 5
23403: EQUAL
23404: AND
23405: IFFALSE 23426
// ComBinocular ( unit , x , y ) ;
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_VAR 0 4
23416: PPUSH
23417: LD_VAR 0 5
23421: PPUSH
23422: CALL 26704 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23426: LD_VAR 0 1
23430: PUSH
23431: LD_INT 254
23433: EQUAL
23434: PUSH
23435: LD_VAR 0 2
23439: PPUSH
23440: CALL_OW 264
23444: PUSH
23445: LD_EXP 95
23449: EQUAL
23450: AND
23451: PUSH
23452: LD_VAR 0 3
23456: PPUSH
23457: CALL_OW 263
23461: PUSH
23462: LD_INT 3
23464: EQUAL
23465: AND
23466: IFFALSE 23482
// HackDestroyVehicle ( unit , selectedUnit ) ;
23468: LD_VAR 0 2
23472: PPUSH
23473: LD_VAR 0 3
23477: PPUSH
23478: CALL 24999 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23482: LD_VAR 0 1
23486: PUSH
23487: LD_INT 255
23489: EQUAL
23490: PUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 264
23500: PUSH
23501: LD_INT 14
23503: PUSH
23504: LD_INT 53
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: IN
23511: AND
23512: PUSH
23513: LD_VAR 0 4
23517: PPUSH
23518: LD_VAR 0 5
23522: PPUSH
23523: CALL_OW 488
23527: AND
23528: IFFALSE 23552
// CutTreeXYR ( unit , x , y , 12 ) ;
23530: LD_VAR 0 2
23534: PPUSH
23535: LD_VAR 0 4
23539: PPUSH
23540: LD_VAR 0 5
23544: PPUSH
23545: LD_INT 12
23547: PPUSH
23548: CALL 23565 0 4
// end ;
23552: LD_VAR 0 6
23556: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23557: LD_INT 0
23559: PPUSH
// end ;
23560: LD_VAR 0 4
23564: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23565: LD_INT 0
23567: PPUSH
23568: PPUSH
23569: PPUSH
23570: PPUSH
23571: PPUSH
23572: PPUSH
23573: PPUSH
23574: PPUSH
23575: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23576: LD_VAR 0 1
23580: NOT
23581: PUSH
23582: LD_VAR 0 2
23586: PPUSH
23587: LD_VAR 0 3
23591: PPUSH
23592: CALL_OW 488
23596: NOT
23597: OR
23598: PUSH
23599: LD_VAR 0 4
23603: NOT
23604: OR
23605: IFFALSE 23609
// exit ;
23607: GO 23949
// list := [ ] ;
23609: LD_ADDR_VAR 0 13
23613: PUSH
23614: EMPTY
23615: ST_TO_ADDR
// if x - r < 0 then
23616: LD_VAR 0 2
23620: PUSH
23621: LD_VAR 0 4
23625: MINUS
23626: PUSH
23627: LD_INT 0
23629: LESS
23630: IFFALSE 23642
// min_x := 0 else
23632: LD_ADDR_VAR 0 7
23636: PUSH
23637: LD_INT 0
23639: ST_TO_ADDR
23640: GO 23658
// min_x := x - r ;
23642: LD_ADDR_VAR 0 7
23646: PUSH
23647: LD_VAR 0 2
23651: PUSH
23652: LD_VAR 0 4
23656: MINUS
23657: ST_TO_ADDR
// if y - r < 0 then
23658: LD_VAR 0 3
23662: PUSH
23663: LD_VAR 0 4
23667: MINUS
23668: PUSH
23669: LD_INT 0
23671: LESS
23672: IFFALSE 23684
// min_y := 0 else
23674: LD_ADDR_VAR 0 8
23678: PUSH
23679: LD_INT 0
23681: ST_TO_ADDR
23682: GO 23700
// min_y := y - r ;
23684: LD_ADDR_VAR 0 8
23688: PUSH
23689: LD_VAR 0 3
23693: PUSH
23694: LD_VAR 0 4
23698: MINUS
23699: ST_TO_ADDR
// max_x := x + r ;
23700: LD_ADDR_VAR 0 9
23704: PUSH
23705: LD_VAR 0 2
23709: PUSH
23710: LD_VAR 0 4
23714: PLUS
23715: ST_TO_ADDR
// max_y := y + r ;
23716: LD_ADDR_VAR 0 10
23720: PUSH
23721: LD_VAR 0 3
23725: PUSH
23726: LD_VAR 0 4
23730: PLUS
23731: ST_TO_ADDR
// for _x = min_x to max_x do
23732: LD_ADDR_VAR 0 11
23736: PUSH
23737: DOUBLE
23738: LD_VAR 0 7
23742: DEC
23743: ST_TO_ADDR
23744: LD_VAR 0 9
23748: PUSH
23749: FOR_TO
23750: IFFALSE 23867
// for _y = min_y to max_y do
23752: LD_ADDR_VAR 0 12
23756: PUSH
23757: DOUBLE
23758: LD_VAR 0 8
23762: DEC
23763: ST_TO_ADDR
23764: LD_VAR 0 10
23768: PUSH
23769: FOR_TO
23770: IFFALSE 23863
// begin if not ValidHex ( _x , _y ) then
23772: LD_VAR 0 11
23776: PPUSH
23777: LD_VAR 0 12
23781: PPUSH
23782: CALL_OW 488
23786: NOT
23787: IFFALSE 23791
// continue ;
23789: GO 23769
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23791: LD_VAR 0 11
23795: PPUSH
23796: LD_VAR 0 12
23800: PPUSH
23801: CALL_OW 351
23805: PUSH
23806: LD_VAR 0 11
23810: PPUSH
23811: LD_VAR 0 12
23815: PPUSH
23816: CALL_OW 554
23820: AND
23821: IFFALSE 23861
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23823: LD_ADDR_VAR 0 13
23827: PUSH
23828: LD_VAR 0 13
23832: PPUSH
23833: LD_VAR 0 13
23837: PUSH
23838: LD_INT 1
23840: PLUS
23841: PPUSH
23842: LD_VAR 0 11
23846: PUSH
23847: LD_VAR 0 12
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 2
23860: ST_TO_ADDR
// end ;
23861: GO 23769
23863: POP
23864: POP
23865: GO 23749
23867: POP
23868: POP
// if not list then
23869: LD_VAR 0 13
23873: NOT
23874: IFFALSE 23878
// exit ;
23876: GO 23949
// for i in list do
23878: LD_ADDR_VAR 0 6
23882: PUSH
23883: LD_VAR 0 13
23887: PUSH
23888: FOR_IN
23889: IFFALSE 23947
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23891: LD_VAR 0 1
23895: PPUSH
23896: LD_STRING M
23898: PUSH
23899: LD_VAR 0 6
23903: PUSH
23904: LD_INT 1
23906: ARRAY
23907: PUSH
23908: LD_VAR 0 6
23912: PUSH
23913: LD_INT 2
23915: ARRAY
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: PUSH
23938: EMPTY
23939: LIST
23940: PPUSH
23941: CALL_OW 447
23945: GO 23888
23947: POP
23948: POP
// end ;
23949: LD_VAR 0 5
23953: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23954: LD_EXP 83
23958: NOT
23959: IFFALSE 24009
23961: GO 23963
23963: DISABLE
// begin initHack := true ;
23964: LD_ADDR_EXP 83
23968: PUSH
23969: LD_INT 1
23971: ST_TO_ADDR
// hackTanks := [ ] ;
23972: LD_ADDR_EXP 84
23976: PUSH
23977: EMPTY
23978: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23979: LD_ADDR_EXP 85
23983: PUSH
23984: EMPTY
23985: ST_TO_ADDR
// hackLimit := 3 ;
23986: LD_ADDR_EXP 86
23990: PUSH
23991: LD_INT 3
23993: ST_TO_ADDR
// hackDist := 12 ;
23994: LD_ADDR_EXP 87
23998: PUSH
23999: LD_INT 12
24001: ST_TO_ADDR
// hackCounter := [ ] ;
24002: LD_ADDR_EXP 88
24006: PUSH
24007: EMPTY
24008: ST_TO_ADDR
// end ;
24009: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24010: LD_EXP 83
24014: PUSH
24015: LD_INT 34
24017: PUSH
24018: LD_EXP 95
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 69
24031: AND
24032: IFFALSE 24287
24034: GO 24036
24036: DISABLE
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
// begin enable ;
24041: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24042: LD_ADDR_VAR 0 1
24046: PUSH
24047: LD_INT 34
24049: PUSH
24050: LD_EXP 95
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: PUSH
24064: FOR_IN
24065: IFFALSE 24285
// begin if not i in hackTanks then
24067: LD_VAR 0 1
24071: PUSH
24072: LD_EXP 84
24076: IN
24077: NOT
24078: IFFALSE 24161
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24080: LD_ADDR_EXP 84
24084: PUSH
24085: LD_EXP 84
24089: PPUSH
24090: LD_EXP 84
24094: PUSH
24095: LD_INT 1
24097: PLUS
24098: PPUSH
24099: LD_VAR 0 1
24103: PPUSH
24104: CALL_OW 1
24108: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24109: LD_ADDR_EXP 85
24113: PUSH
24114: LD_EXP 85
24118: PPUSH
24119: LD_EXP 85
24123: PUSH
24124: LD_INT 1
24126: PLUS
24127: PPUSH
24128: EMPTY
24129: PPUSH
24130: CALL_OW 1
24134: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24135: LD_ADDR_EXP 88
24139: PUSH
24140: LD_EXP 88
24144: PPUSH
24145: LD_EXP 88
24149: PUSH
24150: LD_INT 1
24152: PLUS
24153: PPUSH
24154: EMPTY
24155: PPUSH
24156: CALL_OW 1
24160: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24161: LD_VAR 0 1
24165: PPUSH
24166: CALL_OW 302
24170: NOT
24171: IFFALSE 24184
// begin HackUnlinkAll ( i ) ;
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL 24290 0 1
// continue ;
24182: GO 24064
// end ; HackCheckCapturedStatus ( i ) ;
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL 24733 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24193: LD_ADDR_VAR 0 2
24197: PUSH
24198: LD_INT 81
24200: PUSH
24201: LD_VAR 0 1
24205: PPUSH
24206: CALL_OW 255
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 33
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 91
24227: PUSH
24228: LD_VAR 0 1
24232: PUSH
24233: LD_EXP 87
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 50
24245: PUSH
24246: EMPTY
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: ST_TO_ADDR
// if not tmp then
24260: LD_VAR 0 2
24264: NOT
24265: IFFALSE 24269
// continue ;
24267: GO 24064
// HackLink ( i , tmp ) ;
24269: LD_VAR 0 1
24273: PPUSH
24274: LD_VAR 0 2
24278: PPUSH
24279: CALL 24426 0 2
// end ;
24283: GO 24064
24285: POP
24286: POP
// end ;
24287: PPOPN 2
24289: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24290: LD_INT 0
24292: PPUSH
24293: PPUSH
24294: PPUSH
// if not hack in hackTanks then
24295: LD_VAR 0 1
24299: PUSH
24300: LD_EXP 84
24304: IN
24305: NOT
24306: IFFALSE 24310
// exit ;
24308: GO 24421
// index := GetElementIndex ( hackTanks , hack ) ;
24310: LD_ADDR_VAR 0 4
24314: PUSH
24315: LD_EXP 84
24319: PPUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL 32063 0 2
24329: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24330: LD_EXP 85
24334: PUSH
24335: LD_VAR 0 4
24339: ARRAY
24340: IFFALSE 24421
// begin for i in hackTanksCaptured [ index ] do
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_EXP 85
24351: PUSH
24352: LD_VAR 0 4
24356: ARRAY
24357: PUSH
24358: FOR_IN
24359: IFFALSE 24385
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24361: LD_VAR 0 3
24365: PUSH
24366: LD_INT 1
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 3
24374: PUSH
24375: LD_INT 2
24377: ARRAY
24378: PPUSH
24379: CALL_OW 235
24383: GO 24358
24385: POP
24386: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24387: LD_ADDR_EXP 85
24391: PUSH
24392: LD_EXP 85
24396: PPUSH
24397: LD_VAR 0 4
24401: PPUSH
24402: EMPTY
24403: PPUSH
24404: CALL_OW 1
24408: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_INT 0
24416: PPUSH
24417: CALL_OW 505
// end ; end ;
24421: LD_VAR 0 2
24425: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24426: LD_INT 0
24428: PPUSH
24429: PPUSH
24430: PPUSH
// if not hack in hackTanks or not vehicles then
24431: LD_VAR 0 1
24435: PUSH
24436: LD_EXP 84
24440: IN
24441: NOT
24442: PUSH
24443: LD_VAR 0 2
24447: NOT
24448: OR
24449: IFFALSE 24453
// exit ;
24451: GO 24728
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24453: LD_ADDR_VAR 0 2
24457: PUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_INT 1
24470: PPUSH
24471: LD_INT 1
24473: PPUSH
24474: CALL 32713 0 4
24478: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24479: LD_ADDR_VAR 0 5
24483: PUSH
24484: LD_EXP 84
24488: PPUSH
24489: LD_VAR 0 1
24493: PPUSH
24494: CALL 32063 0 2
24498: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24499: LD_EXP 85
24503: PUSH
24504: LD_VAR 0 5
24508: ARRAY
24509: PUSH
24510: LD_EXP 86
24514: LESS
24515: IFFALSE 24704
// begin for i := 1 to vehicles do
24517: LD_ADDR_VAR 0 4
24521: PUSH
24522: DOUBLE
24523: LD_INT 1
24525: DEC
24526: ST_TO_ADDR
24527: LD_VAR 0 2
24531: PUSH
24532: FOR_TO
24533: IFFALSE 24702
// begin if hackTanksCaptured [ index ] = hackLimit then
24535: LD_EXP 85
24539: PUSH
24540: LD_VAR 0 5
24544: ARRAY
24545: PUSH
24546: LD_EXP 86
24550: EQUAL
24551: IFFALSE 24555
// break ;
24553: GO 24702
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24555: LD_ADDR_EXP 88
24559: PUSH
24560: LD_EXP 88
24564: PPUSH
24565: LD_VAR 0 5
24569: PPUSH
24570: LD_EXP 88
24574: PUSH
24575: LD_VAR 0 5
24579: ARRAY
24580: PUSH
24581: LD_INT 1
24583: PLUS
24584: PPUSH
24585: CALL_OW 1
24589: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24590: LD_ADDR_EXP 85
24594: PUSH
24595: LD_EXP 85
24599: PPUSH
24600: LD_VAR 0 5
24604: PUSH
24605: LD_EXP 85
24609: PUSH
24610: LD_VAR 0 5
24614: ARRAY
24615: PUSH
24616: LD_INT 1
24618: PLUS
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PPUSH
24624: LD_VAR 0 2
24628: PUSH
24629: LD_VAR 0 4
24633: ARRAY
24634: PUSH
24635: LD_VAR 0 2
24639: PUSH
24640: LD_VAR 0 4
24644: ARRAY
24645: PPUSH
24646: CALL_OW 255
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL 32278 0 3
24659: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24660: LD_VAR 0 2
24664: PUSH
24665: LD_VAR 0 4
24669: ARRAY
24670: PPUSH
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 255
24680: PPUSH
24681: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24685: LD_VAR 0 2
24689: PUSH
24690: LD_VAR 0 4
24694: ARRAY
24695: PPUSH
24696: CALL_OW 141
// end ;
24700: GO 24532
24702: POP
24703: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24704: LD_VAR 0 1
24708: PPUSH
24709: LD_EXP 85
24713: PUSH
24714: LD_VAR 0 5
24718: ARRAY
24719: PUSH
24720: LD_INT 0
24722: PLUS
24723: PPUSH
24724: CALL_OW 505
// end ;
24728: LD_VAR 0 3
24732: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
// if not hack in hackTanks then
24739: LD_VAR 0 1
24743: PUSH
24744: LD_EXP 84
24748: IN
24749: NOT
24750: IFFALSE 24754
// exit ;
24752: GO 24994
// index := GetElementIndex ( hackTanks , hack ) ;
24754: LD_ADDR_VAR 0 4
24758: PUSH
24759: LD_EXP 84
24763: PPUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL 32063 0 2
24773: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: DOUBLE
24780: LD_EXP 85
24784: PUSH
24785: LD_VAR 0 4
24789: ARRAY
24790: INC
24791: ST_TO_ADDR
24792: LD_INT 1
24794: PUSH
24795: FOR_DOWNTO
24796: IFFALSE 24968
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24798: LD_ADDR_VAR 0 5
24802: PUSH
24803: LD_EXP 85
24807: PUSH
24808: LD_VAR 0 4
24812: ARRAY
24813: PUSH
24814: LD_VAR 0 3
24818: ARRAY
24819: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24820: LD_VAR 0 5
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: CALL_OW 302
24833: NOT
24834: PUSH
24835: LD_VAR 0 5
24839: PUSH
24840: LD_INT 1
24842: ARRAY
24843: PPUSH
24844: CALL_OW 255
24848: PUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 255
24858: NONEQUAL
24859: OR
24860: IFFALSE 24966
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24862: LD_VAR 0 5
24866: PUSH
24867: LD_INT 1
24869: ARRAY
24870: PPUSH
24871: CALL_OW 305
24875: PUSH
24876: LD_VAR 0 5
24880: PUSH
24881: LD_INT 1
24883: ARRAY
24884: PPUSH
24885: CALL_OW 255
24889: PUSH
24890: LD_VAR 0 1
24894: PPUSH
24895: CALL_OW 255
24899: EQUAL
24900: AND
24901: IFFALSE 24925
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24903: LD_VAR 0 5
24907: PUSH
24908: LD_INT 1
24910: ARRAY
24911: PPUSH
24912: LD_VAR 0 5
24916: PUSH
24917: LD_INT 2
24919: ARRAY
24920: PPUSH
24921: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24925: LD_ADDR_EXP 85
24929: PUSH
24930: LD_EXP 85
24934: PPUSH
24935: LD_VAR 0 4
24939: PPUSH
24940: LD_EXP 85
24944: PUSH
24945: LD_VAR 0 4
24949: ARRAY
24950: PPUSH
24951: LD_VAR 0 3
24955: PPUSH
24956: CALL_OW 3
24960: PPUSH
24961: CALL_OW 1
24965: ST_TO_ADDR
// end ; end ;
24966: GO 24795
24968: POP
24969: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24970: LD_VAR 0 1
24974: PPUSH
24975: LD_EXP 85
24979: PUSH
24980: LD_VAR 0 4
24984: ARRAY
24985: PUSH
24986: LD_INT 0
24988: PLUS
24989: PPUSH
24990: CALL_OW 505
// end ;
24994: LD_VAR 0 2
24998: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24999: LD_INT 0
25001: PPUSH
25002: PPUSH
25003: PPUSH
25004: PPUSH
// if not hack in hackTanks then
25005: LD_VAR 0 1
25009: PUSH
25010: LD_EXP 84
25014: IN
25015: NOT
25016: IFFALSE 25020
// exit ;
25018: GO 25105
// index := GetElementIndex ( hackTanks , hack ) ;
25020: LD_ADDR_VAR 0 5
25024: PUSH
25025: LD_EXP 84
25029: PPUSH
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL 32063 0 2
25039: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25040: LD_ADDR_VAR 0 4
25044: PUSH
25045: DOUBLE
25046: LD_INT 1
25048: DEC
25049: ST_TO_ADDR
25050: LD_EXP 85
25054: PUSH
25055: LD_VAR 0 5
25059: ARRAY
25060: PUSH
25061: FOR_TO
25062: IFFALSE 25103
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25064: LD_EXP 85
25068: PUSH
25069: LD_VAR 0 5
25073: ARRAY
25074: PUSH
25075: LD_VAR 0 4
25079: ARRAY
25080: PUSH
25081: LD_INT 1
25083: ARRAY
25084: PUSH
25085: LD_VAR 0 2
25089: EQUAL
25090: IFFALSE 25101
// KillUnit ( vehicle ) ;
25092: LD_VAR 0 2
25096: PPUSH
25097: CALL_OW 66
25101: GO 25061
25103: POP
25104: POP
// end ;
25105: LD_VAR 0 3
25109: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25110: LD_EXP 89
25114: NOT
25115: IFFALSE 25150
25117: GO 25119
25119: DISABLE
// begin initMiner := true ;
25120: LD_ADDR_EXP 89
25124: PUSH
25125: LD_INT 1
25127: ST_TO_ADDR
// minersList := [ ] ;
25128: LD_ADDR_EXP 90
25132: PUSH
25133: EMPTY
25134: ST_TO_ADDR
// minerMinesList := [ ] ;
25135: LD_ADDR_EXP 91
25139: PUSH
25140: EMPTY
25141: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25142: LD_ADDR_EXP 92
25146: PUSH
25147: LD_INT 5
25149: ST_TO_ADDR
// end ;
25150: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25151: LD_EXP 89
25155: PUSH
25156: LD_INT 34
25158: PUSH
25159: LD_EXP 100
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PPUSH
25168: CALL_OW 69
25172: AND
25173: IFFALSE 25636
25175: GO 25177
25177: DISABLE
25178: LD_INT 0
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
// begin enable ;
25184: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25185: LD_ADDR_VAR 0 1
25189: PUSH
25190: LD_INT 34
25192: PUSH
25193: LD_EXP 100
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25280
// begin if not i in minersList then
25210: LD_VAR 0 1
25214: PUSH
25215: LD_EXP 90
25219: IN
25220: NOT
25221: IFFALSE 25278
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25223: LD_ADDR_EXP 90
25227: PUSH
25228: LD_EXP 90
25232: PPUSH
25233: LD_EXP 90
25237: PUSH
25238: LD_INT 1
25240: PLUS
25241: PPUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 1
25251: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25252: LD_ADDR_EXP 91
25256: PUSH
25257: LD_EXP 91
25261: PPUSH
25262: LD_EXP 91
25266: PUSH
25267: LD_INT 1
25269: PLUS
25270: PPUSH
25271: EMPTY
25272: PPUSH
25273: CALL_OW 1
25277: ST_TO_ADDR
// end end ;
25278: GO 25207
25280: POP
25281: POP
// for i := minerMinesList downto 1 do
25282: LD_ADDR_VAR 0 1
25286: PUSH
25287: DOUBLE
25288: LD_EXP 91
25292: INC
25293: ST_TO_ADDR
25294: LD_INT 1
25296: PUSH
25297: FOR_DOWNTO
25298: IFFALSE 25634
// begin if IsLive ( minersList [ i ] ) then
25300: LD_EXP 90
25304: PUSH
25305: LD_VAR 0 1
25309: ARRAY
25310: PPUSH
25311: CALL_OW 300
25315: IFFALSE 25343
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25317: LD_EXP 90
25321: PUSH
25322: LD_VAR 0 1
25326: ARRAY
25327: PPUSH
25328: LD_EXP 91
25332: PUSH
25333: LD_VAR 0 1
25337: ARRAY
25338: PPUSH
25339: CALL_OW 505
// if not minerMinesList [ i ] then
25343: LD_EXP 91
25347: PUSH
25348: LD_VAR 0 1
25352: ARRAY
25353: NOT
25354: IFFALSE 25358
// continue ;
25356: GO 25297
// for j := minerMinesList [ i ] downto 1 do
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: DOUBLE
25364: LD_EXP 91
25368: PUSH
25369: LD_VAR 0 1
25373: ARRAY
25374: INC
25375: ST_TO_ADDR
25376: LD_INT 1
25378: PUSH
25379: FOR_DOWNTO
25380: IFFALSE 25630
// begin side := GetSide ( minersList [ i ] ) ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_EXP 90
25391: PUSH
25392: LD_VAR 0 1
25396: ARRAY
25397: PPUSH
25398: CALL_OW 255
25402: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25403: LD_ADDR_VAR 0 4
25407: PUSH
25408: LD_EXP 91
25412: PUSH
25413: LD_VAR 0 1
25417: ARRAY
25418: PUSH
25419: LD_VAR 0 2
25423: ARRAY
25424: PUSH
25425: LD_INT 1
25427: ARRAY
25428: PPUSH
25429: LD_EXP 91
25433: PUSH
25434: LD_VAR 0 1
25438: ARRAY
25439: PUSH
25440: LD_VAR 0 2
25444: ARRAY
25445: PUSH
25446: LD_INT 2
25448: ARRAY
25449: PPUSH
25450: CALL_OW 428
25454: ST_TO_ADDR
// if not tmp then
25455: LD_VAR 0 4
25459: NOT
25460: IFFALSE 25464
// continue ;
25462: GO 25379
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25464: LD_VAR 0 4
25468: PUSH
25469: LD_INT 81
25471: PUSH
25472: LD_VAR 0 3
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PPUSH
25481: CALL_OW 69
25485: IN
25486: PUSH
25487: LD_EXP 91
25491: PUSH
25492: LD_VAR 0 1
25496: ARRAY
25497: PUSH
25498: LD_VAR 0 2
25502: ARRAY
25503: PUSH
25504: LD_INT 1
25506: ARRAY
25507: PPUSH
25508: LD_EXP 91
25512: PUSH
25513: LD_VAR 0 1
25517: ARRAY
25518: PUSH
25519: LD_VAR 0 2
25523: ARRAY
25524: PUSH
25525: LD_INT 2
25527: ARRAY
25528: PPUSH
25529: CALL_OW 458
25533: AND
25534: IFFALSE 25628
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25536: LD_EXP 91
25540: PUSH
25541: LD_VAR 0 1
25545: ARRAY
25546: PUSH
25547: LD_VAR 0 2
25551: ARRAY
25552: PUSH
25553: LD_INT 1
25555: ARRAY
25556: PPUSH
25557: LD_EXP 91
25561: PUSH
25562: LD_VAR 0 1
25566: ARRAY
25567: PUSH
25568: LD_VAR 0 2
25572: ARRAY
25573: PUSH
25574: LD_INT 2
25576: ARRAY
25577: PPUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25587: LD_ADDR_EXP 91
25591: PUSH
25592: LD_EXP 91
25596: PPUSH
25597: LD_VAR 0 1
25601: PPUSH
25602: LD_EXP 91
25606: PUSH
25607: LD_VAR 0 1
25611: ARRAY
25612: PPUSH
25613: LD_VAR 0 2
25617: PPUSH
25618: CALL_OW 3
25622: PPUSH
25623: CALL_OW 1
25627: ST_TO_ADDR
// end ; end ;
25628: GO 25379
25630: POP
25631: POP
// end ;
25632: GO 25297
25634: POP
25635: POP
// end ;
25636: PPOPN 4
25638: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
// result := false ;
25643: LD_ADDR_VAR 0 4
25647: PUSH
25648: LD_INT 0
25650: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 264
25660: PUSH
25661: LD_EXP 100
25665: EQUAL
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25911
// index := GetElementIndex ( minersList , unit ) ;
25671: LD_ADDR_VAR 0 5
25675: PUSH
25676: LD_EXP 90
25680: PPUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL 32063 0 2
25690: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25691: LD_EXP 91
25695: PUSH
25696: LD_VAR 0 5
25700: ARRAY
25701: PUSH
25702: LD_EXP 92
25706: GREATEREQUAL
25707: IFFALSE 25711
// exit ;
25709: GO 25911
// ComMoveXY ( unit , x , y ) ;
25711: LD_VAR 0 1
25715: PPUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25730: LD_INT 35
25732: PPUSH
25733: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25737: LD_VAR 0 1
25741: PPUSH
25742: LD_VAR 0 2
25746: PPUSH
25747: LD_VAR 0 3
25751: PPUSH
25752: CALL 62836 0 3
25756: NOT
25757: PUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 314
25767: AND
25768: IFFALSE 25772
// exit ;
25770: GO 25911
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25772: LD_VAR 0 2
25776: PPUSH
25777: LD_VAR 0 3
25781: PPUSH
25782: CALL_OW 428
25786: PUSH
25787: LD_VAR 0 1
25791: EQUAL
25792: PUSH
25793: LD_VAR 0 1
25797: PPUSH
25798: CALL_OW 314
25802: NOT
25803: AND
25804: IFFALSE 25730
// PlaySoundXY ( x , y , PlantMine ) ;
25806: LD_VAR 0 2
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: LD_STRING PlantMine
25818: PPUSH
25819: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: CALL_OW 255
25842: PPUSH
25843: LD_INT 0
25845: PPUSH
25846: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25850: LD_ADDR_EXP 91
25854: PUSH
25855: LD_EXP 91
25859: PPUSH
25860: LD_VAR 0 5
25864: PUSH
25865: LD_EXP 91
25869: PUSH
25870: LD_VAR 0 5
25874: ARRAY
25875: PUSH
25876: LD_INT 1
25878: PLUS
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PPUSH
25884: LD_VAR 0 2
25888: PUSH
25889: LD_VAR 0 3
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PPUSH
25898: CALL 32278 0 3
25902: ST_TO_ADDR
// result := true ;
25903: LD_ADDR_VAR 0 4
25907: PUSH
25908: LD_INT 1
25910: ST_TO_ADDR
// end ;
25911: LD_VAR 0 4
25915: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
// if not unit in minersList then
25921: LD_VAR 0 1
25925: PUSH
25926: LD_EXP 90
25930: IN
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 26328
// index := GetElementIndex ( minersList , unit ) ;
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_EXP 90
25945: PPUSH
25946: LD_VAR 0 1
25950: PPUSH
25951: CALL 32063 0 2
25955: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25956: LD_ADDR_VAR 0 5
25960: PUSH
25961: DOUBLE
25962: LD_EXP 91
25966: PUSH
25967: LD_VAR 0 6
25971: ARRAY
25972: INC
25973: ST_TO_ADDR
25974: LD_INT 1
25976: PUSH
25977: FOR_DOWNTO
25978: IFFALSE 26139
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25980: LD_EXP 91
25984: PUSH
25985: LD_VAR 0 6
25989: ARRAY
25990: PUSH
25991: LD_VAR 0 5
25995: ARRAY
25996: PUSH
25997: LD_INT 1
25999: ARRAY
26000: PUSH
26001: LD_VAR 0 2
26005: EQUAL
26006: PUSH
26007: LD_EXP 91
26011: PUSH
26012: LD_VAR 0 6
26016: ARRAY
26017: PUSH
26018: LD_VAR 0 5
26022: ARRAY
26023: PUSH
26024: LD_INT 2
26026: ARRAY
26027: PUSH
26028: LD_VAR 0 3
26032: EQUAL
26033: AND
26034: IFFALSE 26137
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26036: LD_EXP 91
26040: PUSH
26041: LD_VAR 0 6
26045: ARRAY
26046: PUSH
26047: LD_VAR 0 5
26051: ARRAY
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: LD_EXP 91
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 2
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL_OW 255
26087: PPUSH
26088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26092: LD_ADDR_EXP 91
26096: PUSH
26097: LD_EXP 91
26101: PPUSH
26102: LD_VAR 0 6
26106: PPUSH
26107: LD_EXP 91
26111: PUSH
26112: LD_VAR 0 6
26116: ARRAY
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: CALL_OW 3
26127: PPUSH
26128: CALL_OW 1
26132: ST_TO_ADDR
// exit ;
26133: POP
26134: POP
26135: GO 26328
// end ; end ;
26137: GO 25977
26139: POP
26140: POP
// for i := minerMinesList [ index ] downto 1 do
26141: LD_ADDR_VAR 0 5
26145: PUSH
26146: DOUBLE
26147: LD_EXP 91
26151: PUSH
26152: LD_VAR 0 6
26156: ARRAY
26157: INC
26158: ST_TO_ADDR
26159: LD_INT 1
26161: PUSH
26162: FOR_DOWNTO
26163: IFFALSE 26326
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26165: LD_EXP 91
26169: PUSH
26170: LD_VAR 0 6
26174: ARRAY
26175: PUSH
26176: LD_VAR 0 5
26180: ARRAY
26181: PUSH
26182: LD_INT 1
26184: ARRAY
26185: PPUSH
26186: LD_EXP 91
26190: PUSH
26191: LD_VAR 0 6
26195: ARRAY
26196: PUSH
26197: LD_VAR 0 5
26201: ARRAY
26202: PUSH
26203: LD_INT 2
26205: ARRAY
26206: PPUSH
26207: LD_VAR 0 2
26211: PPUSH
26212: LD_VAR 0 3
26216: PPUSH
26217: CALL_OW 298
26221: PUSH
26222: LD_INT 6
26224: LESS
26225: IFFALSE 26324
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26227: LD_EXP 91
26231: PUSH
26232: LD_VAR 0 6
26236: ARRAY
26237: PUSH
26238: LD_VAR 0 5
26242: ARRAY
26243: PUSH
26244: LD_INT 1
26246: ARRAY
26247: PPUSH
26248: LD_EXP 91
26252: PUSH
26253: LD_VAR 0 6
26257: ARRAY
26258: PUSH
26259: LD_VAR 0 5
26263: ARRAY
26264: PUSH
26265: LD_INT 2
26267: ARRAY
26268: PPUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 255
26278: PPUSH
26279: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26283: LD_ADDR_EXP 91
26287: PUSH
26288: LD_EXP 91
26292: PPUSH
26293: LD_VAR 0 6
26297: PPUSH
26298: LD_EXP 91
26302: PUSH
26303: LD_VAR 0 6
26307: ARRAY
26308: PPUSH
26309: LD_VAR 0 5
26313: PPUSH
26314: CALL_OW 3
26318: PPUSH
26319: CALL_OW 1
26323: ST_TO_ADDR
// end ; end ;
26324: GO 26162
26326: POP
26327: POP
// end ;
26328: LD_VAR 0 4
26332: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26333: LD_INT 0
26335: PPUSH
26336: PPUSH
26337: PPUSH
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL_OW 264
26353: PUSH
26354: LD_EXP 100
26358: EQUAL
26359: NOT
26360: PUSH
26361: LD_VAR 0 1
26365: PUSH
26366: LD_EXP 90
26370: IN
26371: NOT
26372: OR
26373: IFFALSE 26377
// exit ;
26375: GO 26699
// index := GetElementIndex ( minersList , unit ) ;
26377: LD_ADDR_VAR 0 6
26381: PUSH
26382: LD_EXP 90
26386: PPUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL 32063 0 2
26396: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26397: LD_ADDR_VAR 0 8
26401: PUSH
26402: LD_EXP 92
26406: PUSH
26407: LD_EXP 91
26411: PUSH
26412: LD_VAR 0 6
26416: ARRAY
26417: MINUS
26418: ST_TO_ADDR
// if not minesFreeAmount then
26419: LD_VAR 0 8
26423: NOT
26424: IFFALSE 26428
// exit ;
26426: GO 26699
// tmp := [ ] ;
26428: LD_ADDR_VAR 0 7
26432: PUSH
26433: EMPTY
26434: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26435: LD_ADDR_VAR 0 5
26439: PUSH
26440: DOUBLE
26441: LD_INT 1
26443: DEC
26444: ST_TO_ADDR
26445: LD_VAR 0 8
26449: PUSH
26450: FOR_TO
26451: IFFALSE 26646
// begin _d := rand ( 0 , 5 ) ;
26453: LD_ADDR_VAR 0 11
26457: PUSH
26458: LD_INT 0
26460: PPUSH
26461: LD_INT 5
26463: PPUSH
26464: CALL_OW 12
26468: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26469: LD_ADDR_VAR 0 12
26473: PUSH
26474: LD_INT 2
26476: PPUSH
26477: LD_INT 6
26479: PPUSH
26480: CALL_OW 12
26484: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26485: LD_ADDR_VAR 0 9
26489: PUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 11
26499: PPUSH
26500: LD_VAR 0 12
26504: PPUSH
26505: CALL_OW 272
26509: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26510: LD_ADDR_VAR 0 10
26514: PUSH
26515: LD_VAR 0 3
26519: PPUSH
26520: LD_VAR 0 11
26524: PPUSH
26525: LD_VAR 0 12
26529: PPUSH
26530: CALL_OW 273
26534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26535: LD_VAR 0 9
26539: PPUSH
26540: LD_VAR 0 10
26544: PPUSH
26545: CALL_OW 488
26549: PUSH
26550: LD_VAR 0 9
26554: PUSH
26555: LD_VAR 0 10
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_VAR 0 7
26568: IN
26569: NOT
26570: AND
26571: PUSH
26572: LD_VAR 0 9
26576: PPUSH
26577: LD_VAR 0 10
26581: PPUSH
26582: CALL_OW 458
26586: NOT
26587: AND
26588: IFFALSE 26630
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26590: LD_ADDR_VAR 0 7
26594: PUSH
26595: LD_VAR 0 7
26599: PPUSH
26600: LD_VAR 0 7
26604: PUSH
26605: LD_INT 1
26607: PLUS
26608: PPUSH
26609: LD_VAR 0 9
26613: PUSH
26614: LD_VAR 0 10
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PPUSH
26623: CALL_OW 1
26627: ST_TO_ADDR
26628: GO 26644
// i := i - 1 ;
26630: LD_ADDR_VAR 0 5
26634: PUSH
26635: LD_VAR 0 5
26639: PUSH
26640: LD_INT 1
26642: MINUS
26643: ST_TO_ADDR
// end ;
26644: GO 26450
26646: POP
26647: POP
// for i in tmp do
26648: LD_ADDR_VAR 0 5
26652: PUSH
26653: LD_VAR 0 7
26657: PUSH
26658: FOR_IN
26659: IFFALSE 26697
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26661: LD_VAR 0 1
26665: PPUSH
26666: LD_VAR 0 5
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: LD_VAR 0 5
26679: PUSH
26680: LD_INT 2
26682: ARRAY
26683: PPUSH
26684: CALL 25639 0 3
26688: NOT
26689: IFFALSE 26695
// exit ;
26691: POP
26692: POP
26693: GO 26699
26695: GO 26658
26697: POP
26698: POP
// end ;
26699: LD_VAR 0 4
26703: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
// if not GetClass ( unit ) = class_sniper then
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 257
26722: PUSH
26723: LD_INT 5
26725: EQUAL
26726: NOT
26727: IFFALSE 26731
// exit ;
26729: GO 27119
// dist := 8 ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_INT 8
26738: ST_TO_ADDR
// viewRange := 12 ;
26739: LD_ADDR_VAR 0 7
26743: PUSH
26744: LD_INT 12
26746: ST_TO_ADDR
// side := GetSide ( unit ) ;
26747: LD_ADDR_VAR 0 6
26751: PUSH
26752: LD_VAR 0 1
26756: PPUSH
26757: CALL_OW 255
26761: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26762: LD_INT 61
26764: PPUSH
26765: LD_VAR 0 6
26769: PPUSH
26770: CALL_OW 321
26774: PUSH
26775: LD_INT 2
26777: EQUAL
26778: IFFALSE 26788
// viewRange := 16 ;
26780: LD_ADDR_VAR 0 7
26784: PUSH
26785: LD_INT 16
26787: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26788: LD_VAR 0 1
26792: PPUSH
26793: LD_VAR 0 2
26797: PPUSH
26798: LD_VAR 0 3
26802: PPUSH
26803: CALL_OW 297
26807: PUSH
26808: LD_VAR 0 5
26812: GREATER
26813: IFFALSE 26892
// begin ComMoveXY ( unit , x , y ) ;
26815: LD_VAR 0 1
26819: PPUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26834: LD_INT 35
26836: PPUSH
26837: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26841: LD_VAR 0 1
26845: PPUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: CALL 62836 0 3
26860: NOT
26861: IFFALSE 26865
// exit ;
26863: GO 27119
// until GetDistUnitXY ( unit , x , y ) < dist ;
26865: LD_VAR 0 1
26869: PPUSH
26870: LD_VAR 0 2
26874: PPUSH
26875: LD_VAR 0 3
26879: PPUSH
26880: CALL_OW 297
26884: PUSH
26885: LD_VAR 0 5
26889: LESS
26890: IFFALSE 26834
// end ; ComTurnXY ( unit , x , y ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_VAR 0 2
26901: PPUSH
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 118
// wait ( 5 ) ;
26911: LD_INT 5
26913: PPUSH
26914: CALL_OW 67
// _d := GetDir ( unit ) ;
26918: LD_ADDR_VAR 0 10
26922: PUSH
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 254
26932: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26933: LD_ADDR_VAR 0 8
26937: PUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 250
26947: PPUSH
26948: LD_VAR 0 10
26952: PPUSH
26953: LD_VAR 0 5
26957: PPUSH
26958: CALL_OW 272
26962: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26963: LD_ADDR_VAR 0 9
26967: PUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 251
26977: PPUSH
26978: LD_VAR 0 10
26982: PPUSH
26983: LD_VAR 0 5
26987: PPUSH
26988: CALL_OW 273
26992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26993: LD_VAR 0 8
26997: PPUSH
26998: LD_VAR 0 9
27002: PPUSH
27003: CALL_OW 488
27007: NOT
27008: IFFALSE 27012
// exit ;
27010: GO 27119
// ComAnimCustom ( unit , 1 ) ;
27012: LD_VAR 0 1
27016: PPUSH
27017: LD_INT 1
27019: PPUSH
27020: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27024: LD_VAR 0 8
27028: PPUSH
27029: LD_VAR 0 9
27033: PPUSH
27034: LD_VAR 0 6
27038: PPUSH
27039: LD_VAR 0 7
27043: PPUSH
27044: CALL_OW 330
// repeat wait ( 1 ) ;
27048: LD_INT 1
27050: PPUSH
27051: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27055: LD_VAR 0 1
27059: PPUSH
27060: CALL_OW 316
27064: PUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 314
27074: OR
27075: PUSH
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 302
27085: NOT
27086: OR
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 301
27097: OR
27098: IFFALSE 27048
// RemoveSeeing ( _x , _y , side ) ;
27100: LD_VAR 0 8
27104: PPUSH
27105: LD_VAR 0 9
27109: PPUSH
27110: LD_VAR 0 6
27114: PPUSH
27115: CALL_OW 331
// end ; end_of_file
27119: LD_VAR 0 4
27123: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27124: LD_INT 0
27126: PPUSH
// ar_miner := 81 ;
27127: LD_ADDR_EXP 100
27131: PUSH
27132: LD_INT 81
27134: ST_TO_ADDR
// ar_crane := 88 ;
27135: LD_ADDR_EXP 99
27139: PUSH
27140: LD_INT 88
27142: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27143: LD_ADDR_EXP 94
27147: PUSH
27148: LD_INT 89
27150: ST_TO_ADDR
// us_hack := 99 ;
27151: LD_ADDR_EXP 95
27155: PUSH
27156: LD_INT 99
27158: ST_TO_ADDR
// us_artillery := 97 ;
27159: LD_ADDR_EXP 96
27163: PUSH
27164: LD_INT 97
27166: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27167: LD_ADDR_EXP 97
27171: PUSH
27172: LD_INT 91
27174: ST_TO_ADDR
// ar_mortar := 92 ;
27175: LD_ADDR_EXP 98
27179: PUSH
27180: LD_INT 92
27182: ST_TO_ADDR
// ru_radar := 98 ;
27183: LD_ADDR_EXP 93
27187: PUSH
27188: LD_INT 98
27190: ST_TO_ADDR
// tech_Artillery := 80 ;
27191: LD_ADDR_EXP 101
27195: PUSH
27196: LD_INT 80
27198: ST_TO_ADDR
// tech_RadMat := 81 ;
27199: LD_ADDR_EXP 102
27203: PUSH
27204: LD_INT 81
27206: ST_TO_ADDR
// tech_BasicTools := 82 ;
27207: LD_ADDR_EXP 103
27211: PUSH
27212: LD_INT 82
27214: ST_TO_ADDR
// tech_Cargo := 83 ;
27215: LD_ADDR_EXP 104
27219: PUSH
27220: LD_INT 83
27222: ST_TO_ADDR
// tech_Track := 84 ;
27223: LD_ADDR_EXP 105
27227: PUSH
27228: LD_INT 84
27230: ST_TO_ADDR
// tech_Crane := 85 ;
27231: LD_ADDR_EXP 106
27235: PUSH
27236: LD_INT 85
27238: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27239: LD_ADDR_EXP 107
27243: PUSH
27244: LD_INT 86
27246: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27247: LD_ADDR_EXP 108
27251: PUSH
27252: LD_INT 87
27254: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27255: LD_ADDR_EXP 109
27259: PUSH
27260: LD_INT 88
27262: ST_TO_ADDR
// class_mastodont := 31 ;
27263: LD_ADDR_EXP 110
27267: PUSH
27268: LD_INT 31
27270: ST_TO_ADDR
// class_horse := 21 ;
27271: LD_ADDR_EXP 111
27275: PUSH
27276: LD_INT 21
27278: ST_TO_ADDR
// end ;
27279: LD_VAR 0 1
27283: RET
// every 1 do
27284: GO 27286
27286: DISABLE
// InitGlobalVariables ; end_of_file
27287: CALL 27124 0 0
27291: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27292: LD_INT 0
27294: PPUSH
27295: PPUSH
// if exist_mode then
27296: LD_VAR 0 2
27300: IFFALSE 27325
// unit := CreateCharacter ( prefix & ident ) else
27302: LD_ADDR_VAR 0 5
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: LD_VAR 0 1
27316: STR
27317: PPUSH
27318: CALL_OW 34
27322: ST_TO_ADDR
27323: GO 27340
// unit := NewCharacter ( ident ) ;
27325: LD_ADDR_VAR 0 5
27329: PUSH
27330: LD_VAR 0 1
27334: PPUSH
27335: CALL_OW 25
27339: ST_TO_ADDR
// result := unit ;
27340: LD_ADDR_VAR 0 4
27344: PUSH
27345: LD_VAR 0 5
27349: ST_TO_ADDR
// end ;
27350: LD_VAR 0 4
27354: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
// if not side or not nation then
27359: LD_VAR 0 1
27363: NOT
27364: PUSH
27365: LD_VAR 0 2
27369: NOT
27370: OR
27371: IFFALSE 27375
// exit ;
27373: GO 28143
// case nation of nation_american :
27375: LD_VAR 0 2
27379: PUSH
27380: LD_INT 1
27382: DOUBLE
27383: EQUAL
27384: IFTRUE 27388
27386: GO 27602
27388: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27389: LD_ADDR_VAR 0 4
27393: PUSH
27394: LD_INT 35
27396: PUSH
27397: LD_INT 45
27399: PUSH
27400: LD_INT 46
27402: PUSH
27403: LD_INT 47
27405: PUSH
27406: LD_INT 82
27408: PUSH
27409: LD_INT 83
27411: PUSH
27412: LD_INT 84
27414: PUSH
27415: LD_INT 85
27417: PUSH
27418: LD_INT 86
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 6
27429: PUSH
27430: LD_INT 15
27432: PUSH
27433: LD_INT 16
27435: PUSH
27436: LD_INT 7
27438: PUSH
27439: LD_INT 12
27441: PUSH
27442: LD_INT 13
27444: PUSH
27445: LD_INT 10
27447: PUSH
27448: LD_INT 14
27450: PUSH
27451: LD_INT 20
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 22
27459: PUSH
27460: LD_INT 25
27462: PUSH
27463: LD_INT 32
27465: PUSH
27466: LD_INT 27
27468: PUSH
27469: LD_INT 36
27471: PUSH
27472: LD_INT 69
27474: PUSH
27475: LD_INT 39
27477: PUSH
27478: LD_INT 34
27480: PUSH
27481: LD_INT 40
27483: PUSH
27484: LD_INT 48
27486: PUSH
27487: LD_INT 49
27489: PUSH
27490: LD_INT 50
27492: PUSH
27493: LD_INT 51
27495: PUSH
27496: LD_INT 52
27498: PUSH
27499: LD_INT 53
27501: PUSH
27502: LD_INT 54
27504: PUSH
27505: LD_INT 55
27507: PUSH
27508: LD_INT 56
27510: PUSH
27511: LD_INT 57
27513: PUSH
27514: LD_INT 58
27516: PUSH
27517: LD_INT 59
27519: PUSH
27520: LD_INT 60
27522: PUSH
27523: LD_INT 61
27525: PUSH
27526: LD_INT 62
27528: PUSH
27529: LD_INT 80
27531: PUSH
27532: LD_INT 82
27534: PUSH
27535: LD_INT 83
27537: PUSH
27538: LD_INT 84
27540: PUSH
27541: LD_INT 85
27543: PUSH
27544: LD_INT 86
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
27600: GO 28067
27602: LD_INT 2
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27836
27610: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27611: LD_ADDR_VAR 0 4
27615: PUSH
27616: LD_INT 35
27618: PUSH
27619: LD_INT 45
27621: PUSH
27622: LD_INT 46
27624: PUSH
27625: LD_INT 47
27627: PUSH
27628: LD_INT 82
27630: PUSH
27631: LD_INT 83
27633: PUSH
27634: LD_INT 84
27636: PUSH
27637: LD_INT 85
27639: PUSH
27640: LD_INT 87
27642: PUSH
27643: LD_INT 70
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 11
27651: PUSH
27652: LD_INT 3
27654: PUSH
27655: LD_INT 4
27657: PUSH
27658: LD_INT 5
27660: PUSH
27661: LD_INT 6
27663: PUSH
27664: LD_INT 15
27666: PUSH
27667: LD_INT 18
27669: PUSH
27670: LD_INT 7
27672: PUSH
27673: LD_INT 17
27675: PUSH
27676: LD_INT 8
27678: PUSH
27679: LD_INT 20
27681: PUSH
27682: LD_INT 21
27684: PUSH
27685: LD_INT 22
27687: PUSH
27688: LD_INT 72
27690: PUSH
27691: LD_INT 26
27693: PUSH
27694: LD_INT 69
27696: PUSH
27697: LD_INT 39
27699: PUSH
27700: LD_INT 40
27702: PUSH
27703: LD_INT 41
27705: PUSH
27706: LD_INT 42
27708: PUSH
27709: LD_INT 43
27711: PUSH
27712: LD_INT 48
27714: PUSH
27715: LD_INT 49
27717: PUSH
27718: LD_INT 50
27720: PUSH
27721: LD_INT 51
27723: PUSH
27724: LD_INT 52
27726: PUSH
27727: LD_INT 53
27729: PUSH
27730: LD_INT 54
27732: PUSH
27733: LD_INT 55
27735: PUSH
27736: LD_INT 56
27738: PUSH
27739: LD_INT 60
27741: PUSH
27742: LD_INT 61
27744: PUSH
27745: LD_INT 62
27747: PUSH
27748: LD_INT 66
27750: PUSH
27751: LD_INT 67
27753: PUSH
27754: LD_INT 68
27756: PUSH
27757: LD_INT 81
27759: PUSH
27760: LD_INT 82
27762: PUSH
27763: LD_INT 83
27765: PUSH
27766: LD_INT 84
27768: PUSH
27769: LD_INT 85
27771: PUSH
27772: LD_INT 87
27774: PUSH
27775: LD_INT 88
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
27834: GO 28067
27836: LD_INT 3
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 28066
27844: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27845: LD_ADDR_VAR 0 4
27849: PUSH
27850: LD_INT 46
27852: PUSH
27853: LD_INT 47
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 82
27864: PUSH
27865: LD_INT 83
27867: PUSH
27868: LD_INT 84
27870: PUSH
27871: LD_INT 85
27873: PUSH
27874: LD_INT 86
27876: PUSH
27877: LD_INT 11
27879: PUSH
27880: LD_INT 9
27882: PUSH
27883: LD_INT 20
27885: PUSH
27886: LD_INT 19
27888: PUSH
27889: LD_INT 21
27891: PUSH
27892: LD_INT 24
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_INT 25
27900: PUSH
27901: LD_INT 28
27903: PUSH
27904: LD_INT 29
27906: PUSH
27907: LD_INT 30
27909: PUSH
27910: LD_INT 31
27912: PUSH
27913: LD_INT 37
27915: PUSH
27916: LD_INT 38
27918: PUSH
27919: LD_INT 32
27921: PUSH
27922: LD_INT 27
27924: PUSH
27925: LD_INT 33
27927: PUSH
27928: LD_INT 69
27930: PUSH
27931: LD_INT 39
27933: PUSH
27934: LD_INT 34
27936: PUSH
27937: LD_INT 40
27939: PUSH
27940: LD_INT 71
27942: PUSH
27943: LD_INT 23
27945: PUSH
27946: LD_INT 44
27948: PUSH
27949: LD_INT 48
27951: PUSH
27952: LD_INT 49
27954: PUSH
27955: LD_INT 50
27957: PUSH
27958: LD_INT 51
27960: PUSH
27961: LD_INT 52
27963: PUSH
27964: LD_INT 53
27966: PUSH
27967: LD_INT 54
27969: PUSH
27970: LD_INT 55
27972: PUSH
27973: LD_INT 56
27975: PUSH
27976: LD_INT 57
27978: PUSH
27979: LD_INT 58
27981: PUSH
27982: LD_INT 59
27984: PUSH
27985: LD_INT 63
27987: PUSH
27988: LD_INT 64
27990: PUSH
27991: LD_INT 65
27993: PUSH
27994: LD_INT 82
27996: PUSH
27997: LD_INT 83
27999: PUSH
28000: LD_INT 84
28002: PUSH
28003: LD_INT 85
28005: PUSH
28006: LD_INT 86
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
28064: GO 28067
28066: POP
// if state > - 1 and state < 3 then
28067: LD_VAR 0 3
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: GREATER
28076: PUSH
28077: LD_VAR 0 3
28081: PUSH
28082: LD_INT 3
28084: LESS
28085: AND
28086: IFFALSE 28143
// for i in result do
28088: LD_ADDR_VAR 0 5
28092: PUSH
28093: LD_VAR 0 4
28097: PUSH
28098: FOR_IN
28099: IFFALSE 28141
// if GetTech ( i , side ) <> state then
28101: LD_VAR 0 5
28105: PPUSH
28106: LD_VAR 0 1
28110: PPUSH
28111: CALL_OW 321
28115: PUSH
28116: LD_VAR 0 3
28120: NONEQUAL
28121: IFFALSE 28139
// result := result diff i ;
28123: LD_ADDR_VAR 0 4
28127: PUSH
28128: LD_VAR 0 4
28132: PUSH
28133: LD_VAR 0 5
28137: DIFF
28138: ST_TO_ADDR
28139: GO 28098
28141: POP
28142: POP
// end ;
28143: LD_VAR 0 4
28147: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28148: LD_INT 0
28150: PPUSH
28151: PPUSH
28152: PPUSH
// result := true ;
28153: LD_ADDR_VAR 0 3
28157: PUSH
28158: LD_INT 1
28160: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28161: LD_ADDR_VAR 0 5
28165: PUSH
28166: LD_VAR 0 2
28170: PPUSH
28171: CALL_OW 480
28175: ST_TO_ADDR
// if not tmp then
28176: LD_VAR 0 5
28180: NOT
28181: IFFALSE 28185
// exit ;
28183: GO 28234
// for i in tmp do
28185: LD_ADDR_VAR 0 4
28189: PUSH
28190: LD_VAR 0 5
28194: PUSH
28195: FOR_IN
28196: IFFALSE 28232
// if GetTech ( i , side ) <> state_researched then
28198: LD_VAR 0 4
28202: PPUSH
28203: LD_VAR 0 1
28207: PPUSH
28208: CALL_OW 321
28212: PUSH
28213: LD_INT 2
28215: NONEQUAL
28216: IFFALSE 28230
// begin result := false ;
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_INT 0
28225: ST_TO_ADDR
// exit ;
28226: POP
28227: POP
28228: GO 28234
// end ;
28230: GO 28195
28232: POP
28233: POP
// end ;
28234: LD_VAR 0 3
28238: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
28243: PPUSH
28244: PPUSH
28245: PPUSH
28246: PPUSH
28247: PPUSH
28248: PPUSH
28249: PPUSH
28250: PPUSH
28251: PPUSH
28252: PPUSH
28253: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28254: LD_VAR 0 1
28258: NOT
28259: PUSH
28260: LD_VAR 0 1
28264: PPUSH
28265: CALL_OW 257
28269: PUSH
28270: LD_INT 9
28272: NONEQUAL
28273: OR
28274: IFFALSE 28278
// exit ;
28276: GO 28851
// side := GetSide ( unit ) ;
28278: LD_ADDR_VAR 0 9
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL_OW 255
28292: ST_TO_ADDR
// tech_space := tech_spacanom ;
28293: LD_ADDR_VAR 0 12
28297: PUSH
28298: LD_INT 29
28300: ST_TO_ADDR
// tech_time := tech_taurad ;
28301: LD_ADDR_VAR 0 13
28305: PUSH
28306: LD_INT 28
28308: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28309: LD_ADDR_VAR 0 11
28313: PUSH
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 310
28323: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28324: LD_VAR 0 11
28328: PPUSH
28329: CALL_OW 247
28333: PUSH
28334: LD_INT 2
28336: EQUAL
28337: IFFALSE 28341
// exit ;
28339: GO 28851
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28341: LD_ADDR_VAR 0 8
28345: PUSH
28346: LD_INT 81
28348: PUSH
28349: LD_VAR 0 9
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 3
28360: PUSH
28361: LD_INT 21
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 69
28383: ST_TO_ADDR
// if not tmp then
28384: LD_VAR 0 8
28388: NOT
28389: IFFALSE 28393
// exit ;
28391: GO 28851
// if in_unit then
28393: LD_VAR 0 11
28397: IFFALSE 28421
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28399: LD_ADDR_VAR 0 10
28403: PUSH
28404: LD_VAR 0 8
28408: PPUSH
28409: LD_VAR 0 11
28413: PPUSH
28414: CALL_OW 74
28418: ST_TO_ADDR
28419: GO 28441
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28421: LD_ADDR_VAR 0 10
28425: PUSH
28426: LD_VAR 0 8
28430: PPUSH
28431: LD_VAR 0 1
28435: PPUSH
28436: CALL_OW 74
28440: ST_TO_ADDR
// if not enemy then
28441: LD_VAR 0 10
28445: NOT
28446: IFFALSE 28450
// exit ;
28448: GO 28851
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28450: LD_VAR 0 11
28454: PUSH
28455: LD_VAR 0 11
28459: PPUSH
28460: LD_VAR 0 10
28464: PPUSH
28465: CALL_OW 296
28469: PUSH
28470: LD_INT 13
28472: GREATER
28473: AND
28474: PUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 10
28484: PPUSH
28485: CALL_OW 296
28489: PUSH
28490: LD_INT 12
28492: GREATER
28493: OR
28494: IFFALSE 28498
// exit ;
28496: GO 28851
// missile := [ 1 ] ;
28498: LD_ADDR_VAR 0 14
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28509: LD_VAR 0 9
28513: PPUSH
28514: LD_VAR 0 12
28518: PPUSH
28519: CALL_OW 325
28523: IFFALSE 28552
// missile := Insert ( missile , missile + 1 , 2 ) ;
28525: LD_ADDR_VAR 0 14
28529: PUSH
28530: LD_VAR 0 14
28534: PPUSH
28535: LD_VAR 0 14
28539: PUSH
28540: LD_INT 1
28542: PLUS
28543: PPUSH
28544: LD_INT 2
28546: PPUSH
28547: CALL_OW 2
28551: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28552: LD_VAR 0 9
28556: PPUSH
28557: LD_VAR 0 13
28561: PPUSH
28562: CALL_OW 325
28566: PUSH
28567: LD_VAR 0 10
28571: PPUSH
28572: CALL_OW 255
28576: PPUSH
28577: LD_VAR 0 13
28581: PPUSH
28582: CALL_OW 325
28586: NOT
28587: AND
28588: IFFALSE 28617
// missile := Insert ( missile , missile + 1 , 3 ) ;
28590: LD_ADDR_VAR 0 14
28594: PUSH
28595: LD_VAR 0 14
28599: PPUSH
28600: LD_VAR 0 14
28604: PUSH
28605: LD_INT 1
28607: PLUS
28608: PPUSH
28609: LD_INT 3
28611: PPUSH
28612: CALL_OW 2
28616: ST_TO_ADDR
// if missile < 2 then
28617: LD_VAR 0 14
28621: PUSH
28622: LD_INT 2
28624: LESS
28625: IFFALSE 28629
// exit ;
28627: GO 28851
// x := GetX ( enemy ) ;
28629: LD_ADDR_VAR 0 4
28633: PUSH
28634: LD_VAR 0 10
28638: PPUSH
28639: CALL_OW 250
28643: ST_TO_ADDR
// y := GetY ( enemy ) ;
28644: LD_ADDR_VAR 0 5
28648: PUSH
28649: LD_VAR 0 10
28653: PPUSH
28654: CALL_OW 251
28658: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28659: LD_ADDR_VAR 0 6
28663: PUSH
28664: LD_VAR 0 4
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PPUSH
28673: LD_INT 1
28675: PPUSH
28676: CALL_OW 12
28680: PLUS
28681: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28682: LD_ADDR_VAR 0 7
28686: PUSH
28687: LD_VAR 0 5
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PPUSH
28696: LD_INT 1
28698: PPUSH
28699: CALL_OW 12
28703: PLUS
28704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28705: LD_VAR 0 6
28709: PPUSH
28710: LD_VAR 0 7
28714: PPUSH
28715: CALL_OW 488
28719: NOT
28720: IFFALSE 28742
// begin _x := x ;
28722: LD_ADDR_VAR 0 6
28726: PUSH
28727: LD_VAR 0 4
28731: ST_TO_ADDR
// _y := y ;
28732: LD_ADDR_VAR 0 7
28736: PUSH
28737: LD_VAR 0 5
28741: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: LD_INT 1
28749: PPUSH
28750: LD_VAR 0 14
28754: PPUSH
28755: CALL_OW 12
28759: ST_TO_ADDR
// case i of 1 :
28760: LD_VAR 0 3
28764: PUSH
28765: LD_INT 1
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28790
28773: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28774: LD_VAR 0 1
28778: PPUSH
28779: LD_VAR 0 10
28783: PPUSH
28784: CALL_OW 115
28788: GO 28851
28790: LD_INT 2
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28798
28796: GO 28820
28798: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28799: LD_VAR 0 1
28803: PPUSH
28804: LD_VAR 0 6
28808: PPUSH
28809: LD_VAR 0 7
28813: PPUSH
28814: CALL_OW 153
28818: GO 28851
28820: LD_INT 3
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28828
28826: GO 28850
28828: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28829: LD_VAR 0 1
28833: PPUSH
28834: LD_VAR 0 6
28838: PPUSH
28839: LD_VAR 0 7
28843: PPUSH
28844: CALL_OW 154
28848: GO 28851
28850: POP
// end ;
28851: LD_VAR 0 2
28855: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28856: LD_INT 0
28858: PPUSH
28859: PPUSH
28860: PPUSH
28861: PPUSH
28862: PPUSH
28863: PPUSH
// if not unit or not building then
28864: LD_VAR 0 1
28868: NOT
28869: PUSH
28870: LD_VAR 0 2
28874: NOT
28875: OR
28876: IFFALSE 28880
// exit ;
28878: GO 29038
// x := GetX ( building ) ;
28880: LD_ADDR_VAR 0 5
28884: PUSH
28885: LD_VAR 0 2
28889: PPUSH
28890: CALL_OW 250
28894: ST_TO_ADDR
// y := GetY ( building ) ;
28895: LD_ADDR_VAR 0 6
28899: PUSH
28900: LD_VAR 0 2
28904: PPUSH
28905: CALL_OW 251
28909: ST_TO_ADDR
// for i = 0 to 5 do
28910: LD_ADDR_VAR 0 4
28914: PUSH
28915: DOUBLE
28916: LD_INT 0
28918: DEC
28919: ST_TO_ADDR
28920: LD_INT 5
28922: PUSH
28923: FOR_TO
28924: IFFALSE 29036
// begin _x := ShiftX ( x , i , 3 ) ;
28926: LD_ADDR_VAR 0 7
28930: PUSH
28931: LD_VAR 0 5
28935: PPUSH
28936: LD_VAR 0 4
28940: PPUSH
28941: LD_INT 3
28943: PPUSH
28944: CALL_OW 272
28948: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28949: LD_ADDR_VAR 0 8
28953: PUSH
28954: LD_VAR 0 6
28958: PPUSH
28959: LD_VAR 0 4
28963: PPUSH
28964: LD_INT 3
28966: PPUSH
28967: CALL_OW 273
28971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28972: LD_VAR 0 7
28976: PPUSH
28977: LD_VAR 0 8
28981: PPUSH
28982: CALL_OW 488
28986: NOT
28987: IFFALSE 28991
// continue ;
28989: GO 28923
// if HexInfo ( _x , _y ) = 0 then
28991: LD_VAR 0 7
28995: PPUSH
28996: LD_VAR 0 8
29000: PPUSH
29001: CALL_OW 428
29005: PUSH
29006: LD_INT 0
29008: EQUAL
29009: IFFALSE 29034
// begin ComMoveXY ( unit , _x , _y ) ;
29011: LD_VAR 0 1
29015: PPUSH
29016: LD_VAR 0 7
29020: PPUSH
29021: LD_VAR 0 8
29025: PPUSH
29026: CALL_OW 111
// exit ;
29030: POP
29031: POP
29032: GO 29038
// end ; end ;
29034: GO 28923
29036: POP
29037: POP
// end ;
29038: LD_VAR 0 3
29042: RET
// export function ScanBase ( side , base_area ) ; begin
29043: LD_INT 0
29045: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: LD_VAR 0 2
29055: PPUSH
29056: LD_INT 81
29058: PUSH
29059: LD_VAR 0 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PPUSH
29068: CALL_OW 70
29072: ST_TO_ADDR
// end ;
29073: LD_VAR 0 3
29077: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29078: LD_INT 0
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
// result := false ;
29084: LD_ADDR_VAR 0 2
29088: PUSH
29089: LD_INT 0
29091: ST_TO_ADDR
// side := GetSide ( unit ) ;
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 255
29106: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29107: LD_ADDR_VAR 0 4
29111: PUSH
29112: LD_VAR 0 1
29116: PPUSH
29117: CALL_OW 248
29121: ST_TO_ADDR
// case nat of 1 :
29122: LD_VAR 0 4
29126: PUSH
29127: LD_INT 1
29129: DOUBLE
29130: EQUAL
29131: IFTRUE 29135
29133: GO 29146
29135: POP
// tech := tech_lassight ; 2 :
29136: LD_ADDR_VAR 0 5
29140: PUSH
29141: LD_INT 12
29143: ST_TO_ADDR
29144: GO 29185
29146: LD_INT 2
29148: DOUBLE
29149: EQUAL
29150: IFTRUE 29154
29152: GO 29165
29154: POP
// tech := tech_mortar ; 3 :
29155: LD_ADDR_VAR 0 5
29159: PUSH
29160: LD_INT 41
29162: ST_TO_ADDR
29163: GO 29185
29165: LD_INT 3
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29184
29173: POP
// tech := tech_bazooka ; end ;
29174: LD_ADDR_VAR 0 5
29178: PUSH
29179: LD_INT 44
29181: ST_TO_ADDR
29182: GO 29185
29184: POP
// if Researched ( side , tech ) then
29185: LD_VAR 0 3
29189: PPUSH
29190: LD_VAR 0 5
29194: PPUSH
29195: CALL_OW 325
29199: IFFALSE 29226
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29201: LD_ADDR_VAR 0 2
29205: PUSH
29206: LD_INT 5
29208: PUSH
29209: LD_INT 8
29211: PUSH
29212: LD_INT 9
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: LD_VAR 0 4
29224: ARRAY
29225: ST_TO_ADDR
// end ;
29226: LD_VAR 0 2
29230: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29231: LD_INT 0
29233: PPUSH
29234: PPUSH
29235: PPUSH
// if not mines then
29236: LD_VAR 0 2
29240: NOT
29241: IFFALSE 29245
// exit ;
29243: GO 29389
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29245: LD_ADDR_VAR 0 5
29249: PUSH
29250: LD_INT 81
29252: PUSH
29253: LD_VAR 0 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 3
29264: PUSH
29265: LD_INT 21
29267: PUSH
29268: LD_INT 3
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PPUSH
29283: CALL_OW 69
29287: ST_TO_ADDR
// for i in mines do
29288: LD_ADDR_VAR 0 4
29292: PUSH
29293: LD_VAR 0 2
29297: PUSH
29298: FOR_IN
29299: IFFALSE 29387
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29301: LD_VAR 0 4
29305: PUSH
29306: LD_INT 1
29308: ARRAY
29309: PPUSH
29310: LD_VAR 0 4
29314: PUSH
29315: LD_INT 2
29317: ARRAY
29318: PPUSH
29319: CALL_OW 458
29323: NOT
29324: IFFALSE 29328
// continue ;
29326: GO 29298
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29328: LD_VAR 0 4
29332: PUSH
29333: LD_INT 1
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 4
29341: PUSH
29342: LD_INT 2
29344: ARRAY
29345: PPUSH
29346: CALL_OW 428
29350: PUSH
29351: LD_VAR 0 5
29355: IN
29356: IFFALSE 29385
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29358: LD_VAR 0 4
29362: PUSH
29363: LD_INT 1
29365: ARRAY
29366: PPUSH
29367: LD_VAR 0 4
29371: PUSH
29372: LD_INT 2
29374: ARRAY
29375: PPUSH
29376: LD_VAR 0 1
29380: PPUSH
29381: CALL_OW 456
// end ;
29385: GO 29298
29387: POP
29388: POP
// end ;
29389: LD_VAR 0 3
29393: RET
// export function Count ( array ) ; var i ; begin
29394: LD_INT 0
29396: PPUSH
29397: PPUSH
// result := 0 ;
29398: LD_ADDR_VAR 0 2
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
// for i in array do
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_VAR 0 1
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29441
// if i then
29419: LD_VAR 0 3
29423: IFFALSE 29439
// result := result + 1 ;
29425: LD_ADDR_VAR 0 2
29429: PUSH
29430: LD_VAR 0 2
29434: PUSH
29435: LD_INT 1
29437: PLUS
29438: ST_TO_ADDR
29439: GO 29416
29441: POP
29442: POP
// end ;
29443: LD_VAR 0 2
29447: RET
// export function IsEmpty ( building ) ; begin
29448: LD_INT 0
29450: PPUSH
// if not building then
29451: LD_VAR 0 1
29455: NOT
29456: IFFALSE 29460
// exit ;
29458: GO 29503
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29460: LD_ADDR_VAR 0 2
29464: PUSH
29465: LD_VAR 0 1
29469: PUSH
29470: LD_INT 22
29472: PUSH
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 255
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 58
29489: PUSH
29490: EMPTY
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PPUSH
29497: CALL_OW 69
29501: IN
29502: ST_TO_ADDR
// end ;
29503: LD_VAR 0 2
29507: RET
// export function IsNotFull ( building ) ; begin
29508: LD_INT 0
29510: PPUSH
// if not building then
29511: LD_VAR 0 1
29515: NOT
29516: IFFALSE 29520
// exit ;
29518: GO 29539
// result := UnitsInside ( building ) < 6 ;
29520: LD_ADDR_VAR 0 2
29524: PUSH
29525: LD_VAR 0 1
29529: PPUSH
29530: CALL_OW 313
29534: PUSH
29535: LD_INT 6
29537: LESS
29538: ST_TO_ADDR
// end ;
29539: LD_VAR 0 2
29543: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29544: LD_INT 0
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
// tmp := [ ] ;
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: EMPTY
29556: ST_TO_ADDR
// list := [ ] ;
29557: LD_ADDR_VAR 0 5
29561: PUSH
29562: EMPTY
29563: ST_TO_ADDR
// for i = 16 to 25 do
29564: LD_ADDR_VAR 0 4
29568: PUSH
29569: DOUBLE
29570: LD_INT 16
29572: DEC
29573: ST_TO_ADDR
29574: LD_INT 25
29576: PUSH
29577: FOR_TO
29578: IFFALSE 29651
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_VAR 0 3
29589: PUSH
29590: LD_INT 22
29592: PUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 255
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 91
29609: PUSH
29610: LD_VAR 0 1
29614: PUSH
29615: LD_INT 6
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 30
29625: PUSH
29626: LD_VAR 0 4
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: PPUSH
29643: CALL_OW 69
29647: ADD
29648: ST_TO_ADDR
29649: GO 29577
29651: POP
29652: POP
// for i = 1 to tmp do
29653: LD_ADDR_VAR 0 4
29657: PUSH
29658: DOUBLE
29659: LD_INT 1
29661: DEC
29662: ST_TO_ADDR
29663: LD_VAR 0 3
29667: PUSH
29668: FOR_TO
29669: IFFALSE 29757
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29671: LD_ADDR_VAR 0 5
29675: PUSH
29676: LD_VAR 0 5
29680: PUSH
29681: LD_VAR 0 3
29685: PUSH
29686: LD_VAR 0 4
29690: ARRAY
29691: PPUSH
29692: CALL_OW 266
29696: PUSH
29697: LD_VAR 0 3
29701: PUSH
29702: LD_VAR 0 4
29706: ARRAY
29707: PPUSH
29708: CALL_OW 250
29712: PUSH
29713: LD_VAR 0 3
29717: PUSH
29718: LD_VAR 0 4
29722: ARRAY
29723: PPUSH
29724: CALL_OW 251
29728: PUSH
29729: LD_VAR 0 3
29733: PUSH
29734: LD_VAR 0 4
29738: ARRAY
29739: PPUSH
29740: CALL_OW 254
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: ADD
29754: ST_TO_ADDR
29755: GO 29668
29757: POP
29758: POP
// result := list ;
29759: LD_ADDR_VAR 0 2
29763: PUSH
29764: LD_VAR 0 5
29768: ST_TO_ADDR
// end ;
29769: LD_VAR 0 2
29773: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29774: LD_INT 0
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
// if not factory then
29783: LD_VAR 0 1
29787: NOT
29788: IFFALSE 29792
// exit ;
29790: GO 30385
// if control = control_apeman then
29792: LD_VAR 0 4
29796: PUSH
29797: LD_INT 5
29799: EQUAL
29800: IFFALSE 29909
// begin tmp := UnitsInside ( factory ) ;
29802: LD_ADDR_VAR 0 8
29806: PUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 313
29816: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29817: LD_VAR 0 8
29821: PPUSH
29822: LD_INT 25
29824: PUSH
29825: LD_INT 12
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 72
29836: NOT
29837: IFFALSE 29847
// control := control_manual ;
29839: LD_ADDR_VAR 0 4
29843: PUSH
29844: LD_INT 1
29846: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29847: LD_ADDR_VAR 0 8
29851: PUSH
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL 29544 0 1
29861: ST_TO_ADDR
// if tmp then
29862: LD_VAR 0 8
29866: IFFALSE 29909
// begin for i in tmp do
29868: LD_ADDR_VAR 0 7
29872: PUSH
29873: LD_VAR 0 8
29877: PUSH
29878: FOR_IN
29879: IFFALSE 29907
// if i [ 1 ] = b_ext_radio then
29881: LD_VAR 0 7
29885: PUSH
29886: LD_INT 1
29888: ARRAY
29889: PUSH
29890: LD_INT 22
29892: EQUAL
29893: IFFALSE 29905
// begin control := control_remote ;
29895: LD_ADDR_VAR 0 4
29899: PUSH
29900: LD_INT 2
29902: ST_TO_ADDR
// break ;
29903: GO 29907
// end ;
29905: GO 29878
29907: POP
29908: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29909: LD_VAR 0 1
29913: PPUSH
29914: LD_VAR 0 2
29918: PPUSH
29919: LD_VAR 0 3
29923: PPUSH
29924: LD_VAR 0 4
29928: PPUSH
29929: LD_VAR 0 5
29933: PPUSH
29934: CALL_OW 448
29938: IFFALSE 29973
// begin result := [ chassis , engine , control , weapon ] ;
29940: LD_ADDR_VAR 0 6
29944: PUSH
29945: LD_VAR 0 2
29949: PUSH
29950: LD_VAR 0 3
29954: PUSH
29955: LD_VAR 0 4
29959: PUSH
29960: LD_VAR 0 5
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// exit ;
29971: GO 30385
// end ; _chassis := AvailableChassisList ( factory ) ;
29973: LD_ADDR_VAR 0 9
29977: PUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL_OW 475
29987: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29988: LD_ADDR_VAR 0 11
29992: PUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 476
30002: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30003: LD_ADDR_VAR 0 12
30007: PUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: CALL_OW 477
30017: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30018: LD_ADDR_VAR 0 10
30022: PUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 478
30032: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30033: LD_VAR 0 9
30037: NOT
30038: PUSH
30039: LD_VAR 0 11
30043: NOT
30044: OR
30045: PUSH
30046: LD_VAR 0 12
30050: NOT
30051: OR
30052: PUSH
30053: LD_VAR 0 10
30057: NOT
30058: OR
30059: IFFALSE 30094
// begin result := [ chassis , engine , control , weapon ] ;
30061: LD_ADDR_VAR 0 6
30065: PUSH
30066: LD_VAR 0 2
30070: PUSH
30071: LD_VAR 0 3
30075: PUSH
30076: LD_VAR 0 4
30080: PUSH
30081: LD_VAR 0 5
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// exit ;
30092: GO 30385
// end ; if not chassis in _chassis then
30094: LD_VAR 0 2
30098: PUSH
30099: LD_VAR 0 9
30103: IN
30104: NOT
30105: IFFALSE 30131
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30107: LD_ADDR_VAR 0 2
30111: PUSH
30112: LD_VAR 0 9
30116: PUSH
30117: LD_INT 1
30119: PPUSH
30120: LD_VAR 0 9
30124: PPUSH
30125: CALL_OW 12
30129: ARRAY
30130: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30131: LD_VAR 0 2
30135: PPUSH
30136: LD_VAR 0 3
30140: PPUSH
30141: CALL 30390 0 2
30145: NOT
30146: IFFALSE 30205
// repeat engine := _engine [ 1 ] ;
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_VAR 0 11
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30162: LD_ADDR_VAR 0 11
30166: PUSH
30167: LD_VAR 0 11
30171: PPUSH
30172: LD_INT 1
30174: PPUSH
30175: CALL_OW 3
30179: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30180: LD_VAR 0 2
30184: PPUSH
30185: LD_VAR 0 3
30189: PPUSH
30190: CALL 30390 0 2
30194: PUSH
30195: LD_VAR 0 11
30199: PUSH
30200: EMPTY
30201: EQUAL
30202: OR
30203: IFFALSE 30148
// if not control in _control then
30205: LD_VAR 0 4
30209: PUSH
30210: LD_VAR 0 12
30214: IN
30215: NOT
30216: IFFALSE 30242
// control := _control [ rand ( 1 , _control ) ] ;
30218: LD_ADDR_VAR 0 4
30222: PUSH
30223: LD_VAR 0 12
30227: PUSH
30228: LD_INT 1
30230: PPUSH
30231: LD_VAR 0 12
30235: PPUSH
30236: CALL_OW 12
30240: ARRAY
30241: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30242: LD_VAR 0 2
30246: PPUSH
30247: LD_VAR 0 5
30251: PPUSH
30252: CALL 30610 0 2
30256: NOT
30257: IFFALSE 30316
// repeat weapon := _weapon [ 1 ] ;
30259: LD_ADDR_VAR 0 5
30263: PUSH
30264: LD_VAR 0 10
30268: PUSH
30269: LD_INT 1
30271: ARRAY
30272: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30273: LD_ADDR_VAR 0 10
30277: PUSH
30278: LD_VAR 0 10
30282: PPUSH
30283: LD_INT 1
30285: PPUSH
30286: CALL_OW 3
30290: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30291: LD_VAR 0 2
30295: PPUSH
30296: LD_VAR 0 5
30300: PPUSH
30301: CALL 30610 0 2
30305: PUSH
30306: LD_VAR 0 10
30310: PUSH
30311: EMPTY
30312: EQUAL
30313: OR
30314: IFFALSE 30259
// result := [ ] ;
30316: LD_ADDR_VAR 0 6
30320: PUSH
30321: EMPTY
30322: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30323: LD_VAR 0 1
30327: PPUSH
30328: LD_VAR 0 2
30332: PPUSH
30333: LD_VAR 0 3
30337: PPUSH
30338: LD_VAR 0 4
30342: PPUSH
30343: LD_VAR 0 5
30347: PPUSH
30348: CALL_OW 448
30352: IFFALSE 30385
// result := [ chassis , engine , control , weapon ] ;
30354: LD_ADDR_VAR 0 6
30358: PUSH
30359: LD_VAR 0 2
30363: PUSH
30364: LD_VAR 0 3
30368: PUSH
30369: LD_VAR 0 4
30373: PUSH
30374: LD_VAR 0 5
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// end ;
30385: LD_VAR 0 6
30389: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30390: LD_INT 0
30392: PPUSH
// if not chassis or not engine then
30393: LD_VAR 0 1
30397: NOT
30398: PUSH
30399: LD_VAR 0 2
30403: NOT
30404: OR
30405: IFFALSE 30409
// exit ;
30407: GO 30605
// case engine of engine_solar :
30409: LD_VAR 0 2
30413: PUSH
30414: LD_INT 2
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30460
30422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 11
30430: PUSH
30431: LD_INT 12
30433: PUSH
30434: LD_INT 13
30436: PUSH
30437: LD_INT 14
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: ST_TO_ADDR
30458: GO 30589
30460: LD_INT 1
30462: DOUBLE
30463: EQUAL
30464: IFTRUE 30468
30466: GO 30530
30468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: LD_INT 11
30476: PUSH
30477: LD_INT 12
30479: PUSH
30480: LD_INT 13
30482: PUSH
30483: LD_INT 14
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: LD_INT 4
30497: PUSH
30498: LD_INT 5
30500: PUSH
30501: LD_INT 21
30503: PUSH
30504: LD_INT 23
30506: PUSH
30507: LD_INT 22
30509: PUSH
30510: LD_INT 24
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
30528: GO 30589
30530: LD_INT 3
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30588
30538: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30539: LD_ADDR_VAR 0 3
30543: PUSH
30544: LD_INT 13
30546: PUSH
30547: LD_INT 14
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: LD_INT 4
30558: PUSH
30559: LD_INT 5
30561: PUSH
30562: LD_INT 21
30564: PUSH
30565: LD_INT 22
30567: PUSH
30568: LD_INT 23
30570: PUSH
30571: LD_INT 24
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
30586: GO 30589
30588: POP
// result := ( chassis in result ) ;
30589: LD_ADDR_VAR 0 3
30593: PUSH
30594: LD_VAR 0 1
30598: PUSH
30599: LD_VAR 0 3
30603: IN
30604: ST_TO_ADDR
// end ;
30605: LD_VAR 0 3
30609: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30610: LD_INT 0
30612: PPUSH
// if not chassis or not weapon then
30613: LD_VAR 0 1
30617: NOT
30618: PUSH
30619: LD_VAR 0 2
30623: NOT
30624: OR
30625: IFFALSE 30629
// exit ;
30627: GO 31691
// case weapon of us_machine_gun :
30629: LD_VAR 0 2
30633: PUSH
30634: LD_INT 2
30636: DOUBLE
30637: EQUAL
30638: IFTRUE 30642
30640: GO 30672
30642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30643: LD_ADDR_VAR 0 3
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: LD_INT 4
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: ST_TO_ADDR
30670: GO 31675
30672: LD_INT 3
30674: DOUBLE
30675: EQUAL
30676: IFTRUE 30680
30678: GO 30710
30680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30681: LD_ADDR_VAR 0 3
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: LD_INT 3
30694: PUSH
30695: LD_INT 4
30697: PUSH
30698: LD_INT 5
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: ST_TO_ADDR
30708: GO 31675
30710: LD_INT 11
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30748
30718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: LD_INT 4
30735: PUSH
30736: LD_INT 5
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: ST_TO_ADDR
30746: GO 31675
30748: LD_INT 4
30750: DOUBLE
30751: EQUAL
30752: IFTRUE 30756
30754: GO 30782
30756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30757: LD_ADDR_VAR 0 3
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: LD_INT 4
30770: PUSH
30771: LD_INT 5
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
30780: GO 31675
30782: LD_INT 5
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 30816
30790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: LD_INT 4
30804: PUSH
30805: LD_INT 5
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: ST_TO_ADDR
30814: GO 31675
30816: LD_INT 9
30818: DOUBLE
30819: EQUAL
30820: IFTRUE 30824
30822: GO 30850
30824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30825: LD_ADDR_VAR 0 3
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: LD_INT 5
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
30848: GO 31675
30850: LD_INT 7
30852: DOUBLE
30853: EQUAL
30854: IFTRUE 30858
30856: GO 30884
30858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30859: LD_ADDR_VAR 0 3
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 3
30869: PUSH
30870: LD_INT 4
30872: PUSH
30873: LD_INT 5
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: ST_TO_ADDR
30882: GO 31675
30884: LD_INT 12
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30918
30892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 4
30906: PUSH
30907: LD_INT 5
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
30916: GO 31675
30918: LD_INT 13
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30952
30926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: LD_INT 4
30940: PUSH
30941: LD_INT 5
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31675
30952: LD_INT 14
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30978
30960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 4
30968: PUSH
30969: LD_INT 5
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31675
30978: LD_INT 6
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31004
30986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 4
30994: PUSH
30995: LD_INT 5
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31675
31004: LD_INT 10
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31030
31012: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 4
31020: PUSH
31021: LD_INT 5
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: ST_TO_ADDR
31028: GO 31675
31030: LD_INT 22
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31064
31038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_INT 11
31046: PUSH
31047: LD_INT 12
31049: PUSH
31050: LD_INT 13
31052: PUSH
31053: LD_INT 14
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
31062: GO 31675
31064: LD_INT 23
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31098
31072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31073: LD_ADDR_VAR 0 3
31077: PUSH
31078: LD_INT 11
31080: PUSH
31081: LD_INT 12
31083: PUSH
31084: LD_INT 13
31086: PUSH
31087: LD_INT 14
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: ST_TO_ADDR
31096: GO 31675
31098: LD_INT 24
31100: DOUBLE
31101: EQUAL
31102: IFTRUE 31106
31104: GO 31132
31106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31107: LD_ADDR_VAR 0 3
31111: PUSH
31112: LD_INT 11
31114: PUSH
31115: LD_INT 12
31117: PUSH
31118: LD_INT 13
31120: PUSH
31121: LD_INT 14
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
31130: GO 31675
31132: LD_INT 30
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31166
31140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_INT 11
31148: PUSH
31149: LD_INT 12
31151: PUSH
31152: LD_INT 13
31154: PUSH
31155: LD_INT 14
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
31164: GO 31675
31166: LD_INT 25
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31192
31174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 13
31182: PUSH
31183: LD_INT 14
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: ST_TO_ADDR
31190: GO 31675
31192: LD_INT 27
31194: DOUBLE
31195: EQUAL
31196: IFTRUE 31200
31198: GO 31218
31200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_INT 13
31208: PUSH
31209: LD_INT 14
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: ST_TO_ADDR
31216: GO 31675
31218: LD_EXP 98
31222: DOUBLE
31223: EQUAL
31224: IFTRUE 31228
31226: GO 31254
31228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_INT 11
31236: PUSH
31237: LD_INT 12
31239: PUSH
31240: LD_INT 13
31242: PUSH
31243: LD_INT 14
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
31252: GO 31675
31254: LD_INT 28
31256: DOUBLE
31257: EQUAL
31258: IFTRUE 31262
31260: GO 31280
31262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_INT 13
31270: PUSH
31271: LD_INT 14
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: ST_TO_ADDR
31278: GO 31675
31280: LD_INT 29
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31306
31288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_INT 13
31296: PUSH
31297: LD_INT 14
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: ST_TO_ADDR
31304: GO 31675
31306: LD_INT 31
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31314
31312: GO 31332
31314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31315: LD_ADDR_VAR 0 3
31319: PUSH
31320: LD_INT 13
31322: PUSH
31323: LD_INT 14
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: ST_TO_ADDR
31330: GO 31675
31332: LD_INT 26
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31358
31340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31341: LD_ADDR_VAR 0 3
31345: PUSH
31346: LD_INT 13
31348: PUSH
31349: LD_INT 14
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: ST_TO_ADDR
31356: GO 31675
31358: LD_INT 42
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31392
31366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31367: LD_ADDR_VAR 0 3
31371: PUSH
31372: LD_INT 21
31374: PUSH
31375: LD_INT 22
31377: PUSH
31378: LD_INT 23
31380: PUSH
31381: LD_INT 24
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: ST_TO_ADDR
31390: GO 31675
31392: LD_INT 43
31394: DOUBLE
31395: EQUAL
31396: IFTRUE 31400
31398: GO 31426
31400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31401: LD_ADDR_VAR 0 3
31405: PUSH
31406: LD_INT 21
31408: PUSH
31409: LD_INT 22
31411: PUSH
31412: LD_INT 23
31414: PUSH
31415: LD_INT 24
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: ST_TO_ADDR
31424: GO 31675
31426: LD_INT 44
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31460
31434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31435: LD_ADDR_VAR 0 3
31439: PUSH
31440: LD_INT 21
31442: PUSH
31443: LD_INT 22
31445: PUSH
31446: LD_INT 23
31448: PUSH
31449: LD_INT 24
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
31458: GO 31675
31460: LD_INT 45
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31494
31468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_INT 21
31476: PUSH
31477: LD_INT 22
31479: PUSH
31480: LD_INT 23
31482: PUSH
31483: LD_INT 24
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
31492: GO 31675
31494: LD_INT 49
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31528
31502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31503: LD_ADDR_VAR 0 3
31507: PUSH
31508: LD_INT 21
31510: PUSH
31511: LD_INT 22
31513: PUSH
31514: LD_INT 23
31516: PUSH
31517: LD_INT 24
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
31526: GO 31675
31528: LD_INT 51
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31562
31536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_INT 21
31544: PUSH
31545: LD_INT 22
31547: PUSH
31548: LD_INT 23
31550: PUSH
31551: LD_INT 24
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
31560: GO 31675
31562: LD_INT 52
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31570
31568: GO 31596
31570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: LD_INT 21
31578: PUSH
31579: LD_INT 22
31581: PUSH
31582: LD_INT 23
31584: PUSH
31585: LD_INT 24
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
31594: GO 31675
31596: LD_INT 53
31598: DOUBLE
31599: EQUAL
31600: IFTRUE 31604
31602: GO 31622
31604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31605: LD_ADDR_VAR 0 3
31609: PUSH
31610: LD_INT 23
31612: PUSH
31613: LD_INT 24
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: ST_TO_ADDR
31620: GO 31675
31622: LD_INT 46
31624: DOUBLE
31625: EQUAL
31626: IFTRUE 31630
31628: GO 31648
31630: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31631: LD_ADDR_VAR 0 3
31635: PUSH
31636: LD_INT 23
31638: PUSH
31639: LD_INT 24
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: ST_TO_ADDR
31646: GO 31675
31648: LD_INT 47
31650: DOUBLE
31651: EQUAL
31652: IFTRUE 31656
31654: GO 31674
31656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_INT 23
31664: PUSH
31665: LD_INT 24
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: ST_TO_ADDR
31672: GO 31675
31674: POP
// result := ( chassis in result ) ;
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_VAR 0 1
31684: PUSH
31685: LD_VAR 0 3
31689: IN
31690: ST_TO_ADDR
// end ;
31691: LD_VAR 0 3
31695: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31696: LD_INT 0
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
// result := array ;
31705: LD_ADDR_VAR 0 5
31709: PUSH
31710: LD_VAR 0 1
31714: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31715: LD_VAR 0 1
31719: NOT
31720: PUSH
31721: LD_VAR 0 2
31725: NOT
31726: OR
31727: PUSH
31728: LD_VAR 0 3
31732: NOT
31733: OR
31734: PUSH
31735: LD_VAR 0 2
31739: PUSH
31740: LD_VAR 0 1
31744: GREATER
31745: OR
31746: PUSH
31747: LD_VAR 0 3
31751: PUSH
31752: LD_VAR 0 1
31756: GREATER
31757: OR
31758: IFFALSE 31762
// exit ;
31760: GO 32058
// if direction then
31762: LD_VAR 0 4
31766: IFFALSE 31830
// begin d := 1 ;
31768: LD_ADDR_VAR 0 9
31772: PUSH
31773: LD_INT 1
31775: ST_TO_ADDR
// if i_from > i_to then
31776: LD_VAR 0 2
31780: PUSH
31781: LD_VAR 0 3
31785: GREATER
31786: IFFALSE 31812
// length := ( array - i_from ) + i_to else
31788: LD_ADDR_VAR 0 11
31792: PUSH
31793: LD_VAR 0 1
31797: PUSH
31798: LD_VAR 0 2
31802: MINUS
31803: PUSH
31804: LD_VAR 0 3
31808: PLUS
31809: ST_TO_ADDR
31810: GO 31828
// length := i_to - i_from ;
31812: LD_ADDR_VAR 0 11
31816: PUSH
31817: LD_VAR 0 3
31821: PUSH
31822: LD_VAR 0 2
31826: MINUS
31827: ST_TO_ADDR
// end else
31828: GO 31891
// begin d := - 1 ;
31830: LD_ADDR_VAR 0 9
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: ST_TO_ADDR
// if i_from > i_to then
31839: LD_VAR 0 2
31843: PUSH
31844: LD_VAR 0 3
31848: GREATER
31849: IFFALSE 31869
// length := i_from - i_to else
31851: LD_ADDR_VAR 0 11
31855: PUSH
31856: LD_VAR 0 2
31860: PUSH
31861: LD_VAR 0 3
31865: MINUS
31866: ST_TO_ADDR
31867: GO 31891
// length := ( array - i_to ) + i_from ;
31869: LD_ADDR_VAR 0 11
31873: PUSH
31874: LD_VAR 0 1
31878: PUSH
31879: LD_VAR 0 3
31883: MINUS
31884: PUSH
31885: LD_VAR 0 2
31889: PLUS
31890: ST_TO_ADDR
// end ; if not length then
31891: LD_VAR 0 11
31895: NOT
31896: IFFALSE 31900
// exit ;
31898: GO 32058
// tmp := array ;
31900: LD_ADDR_VAR 0 10
31904: PUSH
31905: LD_VAR 0 1
31909: ST_TO_ADDR
// for i = 1 to length do
31910: LD_ADDR_VAR 0 6
31914: PUSH
31915: DOUBLE
31916: LD_INT 1
31918: DEC
31919: ST_TO_ADDR
31920: LD_VAR 0 11
31924: PUSH
31925: FOR_TO
31926: IFFALSE 32046
// begin for j = 1 to array do
31928: LD_ADDR_VAR 0 7
31932: PUSH
31933: DOUBLE
31934: LD_INT 1
31936: DEC
31937: ST_TO_ADDR
31938: LD_VAR 0 1
31942: PUSH
31943: FOR_TO
31944: IFFALSE 32032
// begin k := j + d ;
31946: LD_ADDR_VAR 0 8
31950: PUSH
31951: LD_VAR 0 7
31955: PUSH
31956: LD_VAR 0 9
31960: PLUS
31961: ST_TO_ADDR
// if k > array then
31962: LD_VAR 0 8
31966: PUSH
31967: LD_VAR 0 1
31971: GREATER
31972: IFFALSE 31982
// k := 1 ;
31974: LD_ADDR_VAR 0 8
31978: PUSH
31979: LD_INT 1
31981: ST_TO_ADDR
// if not k then
31982: LD_VAR 0 8
31986: NOT
31987: IFFALSE 31999
// k := array ;
31989: LD_ADDR_VAR 0 8
31993: PUSH
31994: LD_VAR 0 1
31998: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31999: LD_ADDR_VAR 0 10
32003: PUSH
32004: LD_VAR 0 10
32008: PPUSH
32009: LD_VAR 0 8
32013: PPUSH
32014: LD_VAR 0 1
32018: PUSH
32019: LD_VAR 0 7
32023: ARRAY
32024: PPUSH
32025: CALL_OW 1
32029: ST_TO_ADDR
// end ;
32030: GO 31943
32032: POP
32033: POP
// array := tmp ;
32034: LD_ADDR_VAR 0 1
32038: PUSH
32039: LD_VAR 0 10
32043: ST_TO_ADDR
// end ;
32044: GO 31925
32046: POP
32047: POP
// result := array ;
32048: LD_ADDR_VAR 0 5
32052: PUSH
32053: LD_VAR 0 1
32057: ST_TO_ADDR
// end ;
32058: LD_VAR 0 5
32062: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
// result := 0 ;
32067: LD_ADDR_VAR 0 3
32071: PUSH
32072: LD_INT 0
32074: ST_TO_ADDR
// if not array or not value in array then
32075: LD_VAR 0 1
32079: NOT
32080: PUSH
32081: LD_VAR 0 2
32085: PUSH
32086: LD_VAR 0 1
32090: IN
32091: NOT
32092: OR
32093: IFFALSE 32097
// exit ;
32095: GO 32151
// for i = 1 to array do
32097: LD_ADDR_VAR 0 4
32101: PUSH
32102: DOUBLE
32103: LD_INT 1
32105: DEC
32106: ST_TO_ADDR
32107: LD_VAR 0 1
32111: PUSH
32112: FOR_TO
32113: IFFALSE 32149
// if value = array [ i ] then
32115: LD_VAR 0 2
32119: PUSH
32120: LD_VAR 0 1
32124: PUSH
32125: LD_VAR 0 4
32129: ARRAY
32130: EQUAL
32131: IFFALSE 32147
// begin result := i ;
32133: LD_ADDR_VAR 0 3
32137: PUSH
32138: LD_VAR 0 4
32142: ST_TO_ADDR
// exit ;
32143: POP
32144: POP
32145: GO 32151
// end ;
32147: GO 32112
32149: POP
32150: POP
// end ;
32151: LD_VAR 0 3
32155: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32156: LD_INT 0
32158: PPUSH
// vc_chassis := chassis ;
32159: LD_ADDR_OWVAR 37
32163: PUSH
32164: LD_VAR 0 1
32168: ST_TO_ADDR
// vc_engine := engine ;
32169: LD_ADDR_OWVAR 39
32173: PUSH
32174: LD_VAR 0 2
32178: ST_TO_ADDR
// vc_control := control ;
32179: LD_ADDR_OWVAR 38
32183: PUSH
32184: LD_VAR 0 3
32188: ST_TO_ADDR
// vc_weapon := weapon ;
32189: LD_ADDR_OWVAR 40
32193: PUSH
32194: LD_VAR 0 4
32198: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32199: LD_ADDR_OWVAR 41
32203: PUSH
32204: LD_VAR 0 5
32208: ST_TO_ADDR
// end ;
32209: LD_VAR 0 6
32213: RET
// export function WantPlant ( unit ) ; var task ; begin
32214: LD_INT 0
32216: PPUSH
32217: PPUSH
// result := false ;
32218: LD_ADDR_VAR 0 2
32222: PUSH
32223: LD_INT 0
32225: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32226: LD_ADDR_VAR 0 3
32230: PUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: CALL_OW 437
32240: ST_TO_ADDR
// if task then
32241: LD_VAR 0 3
32245: IFFALSE 32273
// if task [ 1 ] [ 1 ] = p then
32247: LD_VAR 0 3
32251: PUSH
32252: LD_INT 1
32254: ARRAY
32255: PUSH
32256: LD_INT 1
32258: ARRAY
32259: PUSH
32260: LD_STRING p
32262: EQUAL
32263: IFFALSE 32273
// result := true ;
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_INT 1
32272: ST_TO_ADDR
// end ;
32273: LD_VAR 0 2
32277: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32278: LD_INT 0
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
// if pos < 1 then
32284: LD_VAR 0 2
32288: PUSH
32289: LD_INT 1
32291: LESS
32292: IFFALSE 32296
// exit ;
32294: GO 32599
// if pos = 1 then
32296: LD_VAR 0 2
32300: PUSH
32301: LD_INT 1
32303: EQUAL
32304: IFFALSE 32337
// result := Replace ( arr , pos [ 1 ] , value ) else
32306: LD_ADDR_VAR 0 4
32310: PUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: LD_VAR 0 2
32320: PUSH
32321: LD_INT 1
32323: ARRAY
32324: PPUSH
32325: LD_VAR 0 3
32329: PPUSH
32330: CALL_OW 1
32334: ST_TO_ADDR
32335: GO 32599
// begin tmp := arr ;
32337: LD_ADDR_VAR 0 6
32341: PUSH
32342: LD_VAR 0 1
32346: ST_TO_ADDR
// s_arr := [ tmp ] ;
32347: LD_ADDR_VAR 0 7
32351: PUSH
32352: LD_VAR 0 6
32356: PUSH
32357: EMPTY
32358: LIST
32359: ST_TO_ADDR
// for i = 1 to pos - 1 do
32360: LD_ADDR_VAR 0 5
32364: PUSH
32365: DOUBLE
32366: LD_INT 1
32368: DEC
32369: ST_TO_ADDR
32370: LD_VAR 0 2
32374: PUSH
32375: LD_INT 1
32377: MINUS
32378: PUSH
32379: FOR_TO
32380: IFFALSE 32425
// begin tmp := tmp [ pos [ i ] ] ;
32382: LD_ADDR_VAR 0 6
32386: PUSH
32387: LD_VAR 0 6
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_VAR 0 5
32401: ARRAY
32402: ARRAY
32403: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32404: LD_ADDR_VAR 0 7
32408: PUSH
32409: LD_VAR 0 7
32413: PUSH
32414: LD_VAR 0 6
32418: PUSH
32419: EMPTY
32420: LIST
32421: ADD
32422: ST_TO_ADDR
// end ;
32423: GO 32379
32425: POP
32426: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32427: LD_ADDR_VAR 0 6
32431: PUSH
32432: LD_VAR 0 6
32436: PPUSH
32437: LD_VAR 0 2
32441: PUSH
32442: LD_VAR 0 2
32446: ARRAY
32447: PPUSH
32448: LD_VAR 0 3
32452: PPUSH
32453: CALL_OW 1
32457: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32458: LD_ADDR_VAR 0 7
32462: PUSH
32463: LD_VAR 0 7
32467: PPUSH
32468: LD_VAR 0 7
32472: PPUSH
32473: LD_VAR 0 6
32477: PPUSH
32478: CALL_OW 1
32482: ST_TO_ADDR
// for i = s_arr downto 2 do
32483: LD_ADDR_VAR 0 5
32487: PUSH
32488: DOUBLE
32489: LD_VAR 0 7
32493: INC
32494: ST_TO_ADDR
32495: LD_INT 2
32497: PUSH
32498: FOR_DOWNTO
32499: IFFALSE 32583
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32501: LD_ADDR_VAR 0 6
32505: PUSH
32506: LD_VAR 0 7
32510: PUSH
32511: LD_VAR 0 5
32515: PUSH
32516: LD_INT 1
32518: MINUS
32519: ARRAY
32520: PPUSH
32521: LD_VAR 0 2
32525: PUSH
32526: LD_VAR 0 5
32530: PUSH
32531: LD_INT 1
32533: MINUS
32534: ARRAY
32535: PPUSH
32536: LD_VAR 0 7
32540: PUSH
32541: LD_VAR 0 5
32545: ARRAY
32546: PPUSH
32547: CALL_OW 1
32551: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32552: LD_ADDR_VAR 0 7
32556: PUSH
32557: LD_VAR 0 7
32561: PPUSH
32562: LD_VAR 0 5
32566: PUSH
32567: LD_INT 1
32569: MINUS
32570: PPUSH
32571: LD_VAR 0 6
32575: PPUSH
32576: CALL_OW 1
32580: ST_TO_ADDR
// end ;
32581: GO 32498
32583: POP
32584: POP
// result := s_arr [ 1 ] ;
32585: LD_ADDR_VAR 0 4
32589: PUSH
32590: LD_VAR 0 7
32594: PUSH
32595: LD_INT 1
32597: ARRAY
32598: ST_TO_ADDR
// end ; end ;
32599: LD_VAR 0 4
32603: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
// if not list then
32608: LD_VAR 0 1
32612: NOT
32613: IFFALSE 32617
// exit ;
32615: GO 32708
// i := list [ pos1 ] ;
32617: LD_ADDR_VAR 0 5
32621: PUSH
32622: LD_VAR 0 1
32626: PUSH
32627: LD_VAR 0 2
32631: ARRAY
32632: ST_TO_ADDR
// if not i then
32633: LD_VAR 0 5
32637: NOT
32638: IFFALSE 32642
// exit ;
32640: GO 32708
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32642: LD_ADDR_VAR 0 1
32646: PUSH
32647: LD_VAR 0 1
32651: PPUSH
32652: LD_VAR 0 2
32656: PPUSH
32657: LD_VAR 0 1
32661: PUSH
32662: LD_VAR 0 3
32666: ARRAY
32667: PPUSH
32668: CALL_OW 1
32672: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32673: LD_ADDR_VAR 0 1
32677: PUSH
32678: LD_VAR 0 1
32682: PPUSH
32683: LD_VAR 0 3
32687: PPUSH
32688: LD_VAR 0 5
32692: PPUSH
32693: CALL_OW 1
32697: ST_TO_ADDR
// result := list ;
32698: LD_ADDR_VAR 0 4
32702: PUSH
32703: LD_VAR 0 1
32707: ST_TO_ADDR
// end ;
32708: LD_VAR 0 4
32712: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32713: LD_INT 0
32715: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32716: LD_ADDR_VAR 0 5
32720: PUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 250
32730: PPUSH
32731: LD_VAR 0 1
32735: PPUSH
32736: CALL_OW 251
32740: PPUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: LD_VAR 0 4
32755: PPUSH
32756: CALL 32766 0 5
32760: ST_TO_ADDR
// end ;
32761: LD_VAR 0 5
32765: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32766: LD_INT 0
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
// if not list then
32772: LD_VAR 0 3
32776: NOT
32777: IFFALSE 32781
// exit ;
32779: GO 33169
// result := [ ] ;
32781: LD_ADDR_VAR 0 6
32785: PUSH
32786: EMPTY
32787: ST_TO_ADDR
// for i in list do
32788: LD_ADDR_VAR 0 7
32792: PUSH
32793: LD_VAR 0 3
32797: PUSH
32798: FOR_IN
32799: IFFALSE 33001
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32801: LD_ADDR_VAR 0 9
32805: PUSH
32806: LD_VAR 0 7
32810: PPUSH
32811: LD_VAR 0 1
32815: PPUSH
32816: LD_VAR 0 2
32820: PPUSH
32821: CALL_OW 297
32825: ST_TO_ADDR
// if not result then
32826: LD_VAR 0 6
32830: NOT
32831: IFFALSE 32857
// result := [ [ i , tmp ] ] else
32833: LD_ADDR_VAR 0 6
32837: PUSH
32838: LD_VAR 0 7
32842: PUSH
32843: LD_VAR 0 9
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: EMPTY
32853: LIST
32854: ST_TO_ADDR
32855: GO 32999
// begin if result [ result ] [ 2 ] < tmp then
32857: LD_VAR 0 6
32861: PUSH
32862: LD_VAR 0 6
32866: ARRAY
32867: PUSH
32868: LD_INT 2
32870: ARRAY
32871: PUSH
32872: LD_VAR 0 9
32876: LESS
32877: IFFALSE 32919
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32879: LD_ADDR_VAR 0 6
32883: PUSH
32884: LD_VAR 0 6
32888: PPUSH
32889: LD_VAR 0 6
32893: PUSH
32894: LD_INT 1
32896: PLUS
32897: PPUSH
32898: LD_VAR 0 7
32902: PUSH
32903: LD_VAR 0 9
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PPUSH
32912: CALL_OW 2
32916: ST_TO_ADDR
32917: GO 32999
// for j = 1 to result do
32919: LD_ADDR_VAR 0 8
32923: PUSH
32924: DOUBLE
32925: LD_INT 1
32927: DEC
32928: ST_TO_ADDR
32929: LD_VAR 0 6
32933: PUSH
32934: FOR_TO
32935: IFFALSE 32997
// begin if tmp < result [ j ] [ 2 ] then
32937: LD_VAR 0 9
32941: PUSH
32942: LD_VAR 0 6
32946: PUSH
32947: LD_VAR 0 8
32951: ARRAY
32952: PUSH
32953: LD_INT 2
32955: ARRAY
32956: LESS
32957: IFFALSE 32995
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32959: LD_ADDR_VAR 0 6
32963: PUSH
32964: LD_VAR 0 6
32968: PPUSH
32969: LD_VAR 0 8
32973: PPUSH
32974: LD_VAR 0 7
32978: PUSH
32979: LD_VAR 0 9
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PPUSH
32988: CALL_OW 2
32992: ST_TO_ADDR
// break ;
32993: GO 32997
// end ; end ;
32995: GO 32934
32997: POP
32998: POP
// end ; end ;
32999: GO 32798
33001: POP
33002: POP
// if result and not asc then
33003: LD_VAR 0 6
33007: PUSH
33008: LD_VAR 0 4
33012: NOT
33013: AND
33014: IFFALSE 33089
// begin tmp := result ;
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_VAR 0 6
33025: ST_TO_ADDR
// for i = tmp downto 1 do
33026: LD_ADDR_VAR 0 7
33030: PUSH
33031: DOUBLE
33032: LD_VAR 0 9
33036: INC
33037: ST_TO_ADDR
33038: LD_INT 1
33040: PUSH
33041: FOR_DOWNTO
33042: IFFALSE 33087
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33044: LD_ADDR_VAR 0 6
33048: PUSH
33049: LD_VAR 0 6
33053: PPUSH
33054: LD_VAR 0 9
33058: PUSH
33059: LD_VAR 0 7
33063: MINUS
33064: PUSH
33065: LD_INT 1
33067: PLUS
33068: PPUSH
33069: LD_VAR 0 9
33073: PUSH
33074: LD_VAR 0 7
33078: ARRAY
33079: PPUSH
33080: CALL_OW 1
33084: ST_TO_ADDR
33085: GO 33041
33087: POP
33088: POP
// end ; tmp := [ ] ;
33089: LD_ADDR_VAR 0 9
33093: PUSH
33094: EMPTY
33095: ST_TO_ADDR
// if mode then
33096: LD_VAR 0 5
33100: IFFALSE 33169
// begin for i = 1 to result do
33102: LD_ADDR_VAR 0 7
33106: PUSH
33107: DOUBLE
33108: LD_INT 1
33110: DEC
33111: ST_TO_ADDR
33112: LD_VAR 0 6
33116: PUSH
33117: FOR_TO
33118: IFFALSE 33157
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33120: LD_ADDR_VAR 0 9
33124: PUSH
33125: LD_VAR 0 9
33129: PPUSH
33130: LD_VAR 0 7
33134: PPUSH
33135: LD_VAR 0 6
33139: PUSH
33140: LD_VAR 0 7
33144: ARRAY
33145: PUSH
33146: LD_INT 1
33148: ARRAY
33149: PPUSH
33150: CALL_OW 1
33154: ST_TO_ADDR
33155: GO 33117
33157: POP
33158: POP
// result := tmp ;
33159: LD_ADDR_VAR 0 6
33163: PUSH
33164: LD_VAR 0 9
33168: ST_TO_ADDR
// end ; end ;
33169: LD_VAR 0 6
33173: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33174: LD_INT 0
33176: PPUSH
33177: PPUSH
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33182: LD_ADDR_VAR 0 5
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: ST_TO_ADDR
// if not x or not y then
33204: LD_VAR 0 2
33208: NOT
33209: PUSH
33210: LD_VAR 0 3
33214: NOT
33215: OR
33216: IFFALSE 33220
// exit ;
33218: GO 34872
// if not range then
33220: LD_VAR 0 4
33224: NOT
33225: IFFALSE 33235
// range := 10 ;
33227: LD_ADDR_VAR 0 4
33231: PUSH
33232: LD_INT 10
33234: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33235: LD_ADDR_VAR 0 8
33239: PUSH
33240: LD_INT 81
33242: PUSH
33243: LD_VAR 0 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 92
33254: PUSH
33255: LD_VAR 0 2
33259: PUSH
33260: LD_VAR 0 3
33264: PUSH
33265: LD_VAR 0 4
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: LD_INT 21
33281: PUSH
33282: LD_INT 3
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: PPUSH
33298: CALL_OW 69
33302: ST_TO_ADDR
// if not tmp then
33303: LD_VAR 0 8
33307: NOT
33308: IFFALSE 33312
// exit ;
33310: GO 34872
// for i in tmp do
33312: LD_ADDR_VAR 0 6
33316: PUSH
33317: LD_VAR 0 8
33321: PUSH
33322: FOR_IN
33323: IFFALSE 34847
// begin points := [ 0 , 0 , 0 ] ;
33325: LD_ADDR_VAR 0 9
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: ST_TO_ADDR
// bpoints := 1 ;
33344: LD_ADDR_VAR 0 10
33348: PUSH
33349: LD_INT 1
33351: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33352: LD_VAR 0 6
33356: PPUSH
33357: CALL_OW 247
33361: PUSH
33362: LD_INT 1
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33948
33370: POP
// begin if GetClass ( i ) = 1 then
33371: LD_VAR 0 6
33375: PPUSH
33376: CALL_OW 257
33380: PUSH
33381: LD_INT 1
33383: EQUAL
33384: IFFALSE 33405
// points := [ 10 , 5 , 3 ] ;
33386: LD_ADDR_VAR 0 9
33390: PUSH
33391: LD_INT 10
33393: PUSH
33394: LD_INT 5
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33405: LD_VAR 0 6
33409: PPUSH
33410: CALL_OW 257
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: LD_INT 4
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: IN
33429: IFFALSE 33450
// points := [ 3 , 2 , 1 ] ;
33431: LD_ADDR_VAR 0 9
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33450: LD_VAR 0 6
33454: PPUSH
33455: CALL_OW 257
33459: PUSH
33460: LD_INT 5
33462: EQUAL
33463: IFFALSE 33484
// points := [ 130 , 5 , 2 ] ;
33465: LD_ADDR_VAR 0 9
33469: PUSH
33470: LD_INT 130
33472: PUSH
33473: LD_INT 5
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33484: LD_VAR 0 6
33488: PPUSH
33489: CALL_OW 257
33493: PUSH
33494: LD_INT 8
33496: EQUAL
33497: IFFALSE 33518
// points := [ 35 , 35 , 30 ] ;
33499: LD_ADDR_VAR 0 9
33503: PUSH
33504: LD_INT 35
33506: PUSH
33507: LD_INT 35
33509: PUSH
33510: LD_INT 30
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33518: LD_VAR 0 6
33522: PPUSH
33523: CALL_OW 257
33527: PUSH
33528: LD_INT 9
33530: EQUAL
33531: IFFALSE 33552
// points := [ 20 , 55 , 40 ] ;
33533: LD_ADDR_VAR 0 9
33537: PUSH
33538: LD_INT 20
33540: PUSH
33541: LD_INT 55
33543: PUSH
33544: LD_INT 40
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33552: LD_VAR 0 6
33556: PPUSH
33557: CALL_OW 257
33561: PUSH
33562: LD_INT 12
33564: PUSH
33565: LD_INT 16
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: IN
33572: IFFALSE 33593
// points := [ 5 , 3 , 2 ] ;
33574: LD_ADDR_VAR 0 9
33578: PUSH
33579: LD_INT 5
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33593: LD_VAR 0 6
33597: PPUSH
33598: CALL_OW 257
33602: PUSH
33603: LD_INT 17
33605: EQUAL
33606: IFFALSE 33627
// points := [ 100 , 50 , 75 ] ;
33608: LD_ADDR_VAR 0 9
33612: PUSH
33613: LD_INT 100
33615: PUSH
33616: LD_INT 50
33618: PUSH
33619: LD_INT 75
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33627: LD_VAR 0 6
33631: PPUSH
33632: CALL_OW 257
33636: PUSH
33637: LD_INT 15
33639: EQUAL
33640: IFFALSE 33661
// points := [ 10 , 5 , 3 ] ;
33642: LD_ADDR_VAR 0 9
33646: PUSH
33647: LD_INT 10
33649: PUSH
33650: LD_INT 5
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33661: LD_VAR 0 6
33665: PPUSH
33666: CALL_OW 257
33670: PUSH
33671: LD_INT 14
33673: EQUAL
33674: IFFALSE 33695
// points := [ 10 , 0 , 0 ] ;
33676: LD_ADDR_VAR 0 9
33680: PUSH
33681: LD_INT 10
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33695: LD_VAR 0 6
33699: PPUSH
33700: CALL_OW 257
33704: PUSH
33705: LD_INT 11
33707: EQUAL
33708: IFFALSE 33729
// points := [ 30 , 10 , 5 ] ;
33710: LD_ADDR_VAR 0 9
33714: PUSH
33715: LD_INT 30
33717: PUSH
33718: LD_INT 10
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_INT 5
33736: PPUSH
33737: CALL_OW 321
33741: PUSH
33742: LD_INT 2
33744: EQUAL
33745: IFFALSE 33762
// bpoints := bpoints * 1.8 ;
33747: LD_ADDR_VAR 0 10
33751: PUSH
33752: LD_VAR 0 10
33756: PUSH
33757: LD_REAL  1.80000000000000E+0000
33760: MUL
33761: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33762: LD_VAR 0 6
33766: PPUSH
33767: CALL_OW 257
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: LD_INT 2
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: LD_INT 4
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: IN
33790: PUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: LD_INT 51
33798: PPUSH
33799: CALL_OW 321
33803: PUSH
33804: LD_INT 2
33806: EQUAL
33807: AND
33808: IFFALSE 33825
// bpoints := bpoints * 1.2 ;
33810: LD_ADDR_VAR 0 10
33814: PUSH
33815: LD_VAR 0 10
33819: PUSH
33820: LD_REAL  1.20000000000000E+0000
33823: MUL
33824: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33825: LD_VAR 0 6
33829: PPUSH
33830: CALL_OW 257
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: LD_INT 7
33840: PUSH
33841: LD_INT 9
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: IN
33849: PUSH
33850: LD_VAR 0 1
33854: PPUSH
33855: LD_INT 52
33857: PPUSH
33858: CALL_OW 321
33862: PUSH
33863: LD_INT 2
33865: EQUAL
33866: AND
33867: IFFALSE 33884
// bpoints := bpoints * 1.5 ;
33869: LD_ADDR_VAR 0 10
33873: PUSH
33874: LD_VAR 0 10
33878: PUSH
33879: LD_REAL  1.50000000000000E+0000
33882: MUL
33883: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33884: LD_VAR 0 1
33888: PPUSH
33889: LD_INT 66
33891: PPUSH
33892: CALL_OW 321
33896: PUSH
33897: LD_INT 2
33899: EQUAL
33900: IFFALSE 33917
// bpoints := bpoints * 1.1 ;
33902: LD_ADDR_VAR 0 10
33906: PUSH
33907: LD_VAR 0 10
33911: PUSH
33912: LD_REAL  1.10000000000000E+0000
33915: MUL
33916: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33917: LD_ADDR_VAR 0 10
33921: PUSH
33922: LD_VAR 0 10
33926: PUSH
33927: LD_VAR 0 6
33931: PPUSH
33932: LD_INT 1
33934: PPUSH
33935: CALL_OW 259
33939: PUSH
33940: LD_REAL  1.15000000000000E+0000
33943: MUL
33944: MUL
33945: ST_TO_ADDR
// end ; unit_vehicle :
33946: GO 34776
33948: LD_INT 2
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 34764
33956: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33957: LD_VAR 0 6
33961: PPUSH
33962: CALL_OW 264
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: LD_INT 42
33972: PUSH
33973: LD_INT 24
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: IN
33981: IFFALSE 34002
// points := [ 25 , 5 , 3 ] ;
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_INT 25
33990: PUSH
33991: LD_INT 5
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34002: LD_VAR 0 6
34006: PPUSH
34007: CALL_OW 264
34011: PUSH
34012: LD_INT 4
34014: PUSH
34015: LD_INT 43
34017: PUSH
34018: LD_INT 25
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: IN
34026: IFFALSE 34047
// points := [ 40 , 15 , 5 ] ;
34028: LD_ADDR_VAR 0 9
34032: PUSH
34033: LD_INT 40
34035: PUSH
34036: LD_INT 15
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34047: LD_VAR 0 6
34051: PPUSH
34052: CALL_OW 264
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 23
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: IN
34067: IFFALSE 34088
// points := [ 7 , 25 , 8 ] ;
34069: LD_ADDR_VAR 0 9
34073: PUSH
34074: LD_INT 7
34076: PUSH
34077: LD_INT 25
34079: PUSH
34080: LD_INT 8
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34088: LD_VAR 0 6
34092: PPUSH
34093: CALL_OW 264
34097: PUSH
34098: LD_INT 5
34100: PUSH
34101: LD_INT 27
34103: PUSH
34104: LD_INT 44
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: IN
34112: IFFALSE 34133
// points := [ 14 , 50 , 16 ] ;
34114: LD_ADDR_VAR 0 9
34118: PUSH
34119: LD_INT 14
34121: PUSH
34122: LD_INT 50
34124: PUSH
34125: LD_INT 16
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34133: LD_VAR 0 6
34137: PPUSH
34138: CALL_OW 264
34142: PUSH
34143: LD_INT 6
34145: PUSH
34146: LD_INT 46
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: IN
34153: IFFALSE 34174
// points := [ 32 , 120 , 70 ] ;
34155: LD_ADDR_VAR 0 9
34159: PUSH
34160: LD_INT 32
34162: PUSH
34163: LD_INT 120
34165: PUSH
34166: LD_INT 70
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34174: LD_VAR 0 6
34178: PPUSH
34179: CALL_OW 264
34183: PUSH
34184: LD_INT 7
34186: PUSH
34187: LD_INT 28
34189: PUSH
34190: LD_INT 45
34192: PUSH
34193: LD_EXP 98
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: IN
34204: IFFALSE 34225
// points := [ 35 , 20 , 45 ] ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_INT 35
34213: PUSH
34214: LD_INT 20
34216: PUSH
34217: LD_INT 45
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 264
34234: PUSH
34235: LD_INT 47
34237: PUSH
34238: EMPTY
34239: LIST
34240: IN
34241: IFFALSE 34262
// points := [ 67 , 45 , 75 ] ;
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_INT 67
34250: PUSH
34251: LD_INT 45
34253: PUSH
34254: LD_INT 75
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34262: LD_VAR 0 6
34266: PPUSH
34267: CALL_OW 264
34271: PUSH
34272: LD_INT 26
34274: PUSH
34275: EMPTY
34276: LIST
34277: IN
34278: IFFALSE 34299
// points := [ 120 , 30 , 80 ] ;
34280: LD_ADDR_VAR 0 9
34284: PUSH
34285: LD_INT 120
34287: PUSH
34288: LD_INT 30
34290: PUSH
34291: LD_INT 80
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34299: LD_VAR 0 6
34303: PPUSH
34304: CALL_OW 264
34308: PUSH
34309: LD_INT 22
34311: PUSH
34312: EMPTY
34313: LIST
34314: IN
34315: IFFALSE 34336
// points := [ 40 , 1 , 1 ] ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_INT 40
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34336: LD_VAR 0 6
34340: PPUSH
34341: CALL_OW 264
34345: PUSH
34346: LD_INT 29
34348: PUSH
34349: EMPTY
34350: LIST
34351: IN
34352: IFFALSE 34373
// points := [ 70 , 200 , 400 ] ;
34354: LD_ADDR_VAR 0 9
34358: PUSH
34359: LD_INT 70
34361: PUSH
34362: LD_INT 200
34364: PUSH
34365: LD_INT 400
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34373: LD_VAR 0 6
34377: PPUSH
34378: CALL_OW 264
34382: PUSH
34383: LD_INT 14
34385: PUSH
34386: LD_INT 53
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 40 , 10 , 20 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 40
34402: PUSH
34403: LD_INT 10
34405: PUSH
34406: LD_INT 20
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 264
34423: PUSH
34424: LD_INT 9
34426: PUSH
34427: EMPTY
34428: LIST
34429: IN
34430: IFFALSE 34451
// points := [ 5 , 70 , 20 ] ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: LD_INT 70
34442: PUSH
34443: LD_INT 20
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 264
34460: PUSH
34461: LD_INT 10
34463: PUSH
34464: EMPTY
34465: LIST
34466: IN
34467: IFFALSE 34488
// points := [ 35 , 110 , 70 ] ;
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_INT 35
34476: PUSH
34477: LD_INT 110
34479: PUSH
34480: LD_INT 70
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34488: LD_VAR 0 6
34492: PPUSH
34493: CALL_OW 265
34497: PUSH
34498: LD_INT 25
34500: EQUAL
34501: IFFALSE 34522
// points := [ 80 , 65 , 100 ] ;
34503: LD_ADDR_VAR 0 9
34507: PUSH
34508: LD_INT 80
34510: PUSH
34511: LD_INT 65
34513: PUSH
34514: LD_INT 100
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 263
34531: PUSH
34532: LD_INT 1
34534: EQUAL
34535: IFFALSE 34570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34537: LD_ADDR_VAR 0 10
34541: PUSH
34542: LD_VAR 0 10
34546: PUSH
34547: LD_VAR 0 6
34551: PPUSH
34552: CALL_OW 311
34556: PPUSH
34557: LD_INT 3
34559: PPUSH
34560: CALL_OW 259
34564: PUSH
34565: LD_INT 4
34567: MUL
34568: MUL
34569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 263
34579: PUSH
34580: LD_INT 2
34582: EQUAL
34583: IFFALSE 34634
// begin j := IsControledBy ( i ) ;
34585: LD_ADDR_VAR 0 7
34589: PUSH
34590: LD_VAR 0 6
34594: PPUSH
34595: CALL_OW 312
34599: ST_TO_ADDR
// if j then
34600: LD_VAR 0 7
34604: IFFALSE 34634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34606: LD_ADDR_VAR 0 10
34610: PUSH
34611: LD_VAR 0 10
34615: PUSH
34616: LD_VAR 0 7
34620: PPUSH
34621: LD_INT 3
34623: PPUSH
34624: CALL_OW 259
34628: PUSH
34629: LD_INT 3
34631: MUL
34632: MUL
34633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 264
34643: PUSH
34644: LD_INT 5
34646: PUSH
34647: LD_INT 6
34649: PUSH
34650: LD_INT 46
34652: PUSH
34653: LD_INT 44
34655: PUSH
34656: LD_INT 47
34658: PUSH
34659: LD_INT 45
34661: PUSH
34662: LD_INT 28
34664: PUSH
34665: LD_INT 7
34667: PUSH
34668: LD_INT 27
34670: PUSH
34671: LD_INT 29
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: IN
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: LD_INT 52
34694: PPUSH
34695: CALL_OW 321
34699: PUSH
34700: LD_INT 2
34702: EQUAL
34703: AND
34704: IFFALSE 34721
// bpoints := bpoints * 1.2 ;
34706: LD_ADDR_VAR 0 10
34710: PUSH
34711: LD_VAR 0 10
34715: PUSH
34716: LD_REAL  1.20000000000000E+0000
34719: MUL
34720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_INT 6
34733: PUSH
34734: LD_INT 46
34736: PUSH
34737: LD_INT 47
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: IN
34745: IFFALSE 34762
// bpoints := bpoints * 1.2 ;
34747: LD_ADDR_VAR 0 10
34751: PUSH
34752: LD_VAR 0 10
34756: PUSH
34757: LD_REAL  1.20000000000000E+0000
34760: MUL
34761: ST_TO_ADDR
// end ; unit_building :
34762: GO 34776
34764: LD_INT 3
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34775
34772: POP
// ; end ;
34773: GO 34776
34775: POP
// for j = 1 to 3 do
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_INT 3
34788: PUSH
34789: FOR_TO
34790: IFFALSE 34843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34792: LD_ADDR_VAR 0 5
34796: PUSH
34797: LD_VAR 0 5
34801: PPUSH
34802: LD_VAR 0 7
34806: PPUSH
34807: LD_VAR 0 5
34811: PUSH
34812: LD_VAR 0 7
34816: ARRAY
34817: PUSH
34818: LD_VAR 0 9
34822: PUSH
34823: LD_VAR 0 7
34827: ARRAY
34828: PUSH
34829: LD_VAR 0 10
34833: MUL
34834: PLUS
34835: PPUSH
34836: CALL_OW 1
34840: ST_TO_ADDR
34841: GO 34789
34843: POP
34844: POP
// end ;
34845: GO 33322
34847: POP
34848: POP
// result := Replace ( result , 4 , tmp ) ;
34849: LD_ADDR_VAR 0 5
34853: PUSH
34854: LD_VAR 0 5
34858: PPUSH
34859: LD_INT 4
34861: PPUSH
34862: LD_VAR 0 8
34866: PPUSH
34867: CALL_OW 1
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 5
34876: RET
// export function DangerAtRange ( unit , range ) ; begin
34877: LD_INT 0
34879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 1
34889: PPUSH
34890: CALL_OW 255
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 250
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 251
34914: PPUSH
34915: LD_VAR 0 2
34919: PPUSH
34920: CALL 33174 0 4
34924: ST_TO_ADDR
// end ;
34925: LD_VAR 0 3
34929: RET
// export function DangerInArea ( side , area ) ; begin
34930: LD_INT 0
34932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: LD_INT 81
34945: PUSH
34946: LD_VAR 0 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PPUSH
34955: CALL_OW 70
34959: ST_TO_ADDR
// end ;
34960: LD_VAR 0 3
34964: RET
// export function IsExtension ( b ) ; begin
34965: LD_INT 0
34967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 23
34980: PUSH
34981: LD_INT 20
34983: PUSH
34984: LD_INT 22
34986: PUSH
34987: LD_INT 17
34989: PUSH
34990: LD_INT 24
34992: PUSH
34993: LD_INT 21
34995: PUSH
34996: LD_INT 19
34998: PUSH
34999: LD_INT 16
35001: PUSH
35002: LD_INT 25
35004: PUSH
35005: LD_INT 18
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: IN
35020: ST_TO_ADDR
// end ;
35021: LD_VAR 0 2
35025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
35030: PPUSH
// result := [ ] ;
35031: LD_ADDR_VAR 0 4
35035: PUSH
35036: EMPTY
35037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: LD_INT 21
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PPUSH
35058: CALL_OW 70
35062: ST_TO_ADDR
// if not tmp then
35063: LD_VAR 0 5
35067: NOT
35068: IFFALSE 35072
// exit ;
35070: GO 35136
// if checkLink then
35072: LD_VAR 0 3
35076: IFFALSE 35126
// begin for i in tmp do
35078: LD_ADDR_VAR 0 6
35082: PUSH
35083: LD_VAR 0 5
35087: PUSH
35088: FOR_IN
35089: IFFALSE 35124
// if GetBase ( i ) <> base then
35091: LD_VAR 0 6
35095: PPUSH
35096: CALL_OW 274
35100: PUSH
35101: LD_VAR 0 1
35105: NONEQUAL
35106: IFFALSE 35122
// ComLinkToBase ( base , i ) ;
35108: LD_VAR 0 1
35112: PPUSH
35113: LD_VAR 0 6
35117: PPUSH
35118: CALL_OW 169
35122: GO 35088
35124: POP
35125: POP
// end ; result := tmp ;
35126: LD_ADDR_VAR 0 4
35130: PUSH
35131: LD_VAR 0 5
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 4
35140: RET
// export function ComComplete ( units , b ) ; var i ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
// if not units then
35145: LD_VAR 0 1
35149: NOT
35150: IFFALSE 35154
// exit ;
35152: GO 35244
// for i in units do
35154: LD_ADDR_VAR 0 4
35158: PUSH
35159: LD_VAR 0 1
35163: PUSH
35164: FOR_IN
35165: IFFALSE 35242
// if BuildingStatus ( b ) = bs_build then
35167: LD_VAR 0 2
35171: PPUSH
35172: CALL_OW 461
35176: PUSH
35177: LD_INT 1
35179: EQUAL
35180: IFFALSE 35240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35182: LD_VAR 0 4
35186: PPUSH
35187: LD_STRING h
35189: PUSH
35190: LD_VAR 0 2
35194: PPUSH
35195: CALL_OW 250
35199: PUSH
35200: LD_VAR 0 2
35204: PPUSH
35205: CALL_OW 251
35209: PUSH
35210: LD_VAR 0 2
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: PPUSH
35236: CALL_OW 446
35240: GO 35164
35242: POP
35243: POP
// end ;
35244: LD_VAR 0 3
35248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35249: LD_INT 0
35251: PPUSH
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35257: LD_VAR 0 1
35261: NOT
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 263
35272: PUSH
35273: LD_INT 2
35275: EQUAL
35276: NOT
35277: OR
35278: IFFALSE 35282
// exit ;
35280: GO 35598
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: LD_INT 22
35289: PUSH
35290: LD_VAR 0 1
35294: PPUSH
35295: CALL_OW 255
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: LD_INT 30
35309: PUSH
35310: LD_INT 36
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 34
35319: PUSH
35320: LD_INT 31
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PPUSH
35336: CALL_OW 69
35340: ST_TO_ADDR
// if not tmp then
35341: LD_VAR 0 6
35345: NOT
35346: IFFALSE 35350
// exit ;
35348: GO 35598
// result := [ ] ;
35350: LD_ADDR_VAR 0 2
35354: PUSH
35355: EMPTY
35356: ST_TO_ADDR
// for i in tmp do
35357: LD_ADDR_VAR 0 3
35361: PUSH
35362: LD_VAR 0 6
35366: PUSH
35367: FOR_IN
35368: IFFALSE 35439
// begin t := UnitsInside ( i ) ;
35370: LD_ADDR_VAR 0 4
35374: PUSH
35375: LD_VAR 0 3
35379: PPUSH
35380: CALL_OW 313
35384: ST_TO_ADDR
// if t then
35385: LD_VAR 0 4
35389: IFFALSE 35437
// for j in t do
35391: LD_ADDR_VAR 0 7
35395: PUSH
35396: LD_VAR 0 4
35400: PUSH
35401: FOR_IN
35402: IFFALSE 35435
// result := Insert ( result , result + 1 , j ) ;
35404: LD_ADDR_VAR 0 2
35408: PUSH
35409: LD_VAR 0 2
35413: PPUSH
35414: LD_VAR 0 2
35418: PUSH
35419: LD_INT 1
35421: PLUS
35422: PPUSH
35423: LD_VAR 0 7
35427: PPUSH
35428: CALL_OW 2
35432: ST_TO_ADDR
35433: GO 35401
35435: POP
35436: POP
// end ;
35437: GO 35367
35439: POP
35440: POP
// if not result then
35441: LD_VAR 0 2
35445: NOT
35446: IFFALSE 35450
// exit ;
35448: GO 35598
// mech := result [ 1 ] ;
35450: LD_ADDR_VAR 0 5
35454: PUSH
35455: LD_VAR 0 2
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: ST_TO_ADDR
// if result > 1 then
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 1
35471: GREATER
35472: IFFALSE 35584
// for i = 2 to result do
35474: LD_ADDR_VAR 0 3
35478: PUSH
35479: DOUBLE
35480: LD_INT 2
35482: DEC
35483: ST_TO_ADDR
35484: LD_VAR 0 2
35488: PUSH
35489: FOR_TO
35490: IFFALSE 35582
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35492: LD_ADDR_VAR 0 4
35496: PUSH
35497: LD_VAR 0 2
35501: PUSH
35502: LD_VAR 0 3
35506: ARRAY
35507: PPUSH
35508: LD_INT 3
35510: PPUSH
35511: CALL_OW 259
35515: PUSH
35516: LD_VAR 0 2
35520: PUSH
35521: LD_VAR 0 3
35525: ARRAY
35526: PPUSH
35527: CALL_OW 432
35531: MINUS
35532: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35533: LD_VAR 0 4
35537: PUSH
35538: LD_VAR 0 5
35542: PPUSH
35543: LD_INT 3
35545: PPUSH
35546: CALL_OW 259
35550: PUSH
35551: LD_VAR 0 5
35555: PPUSH
35556: CALL_OW 432
35560: MINUS
35561: GREATEREQUAL
35562: IFFALSE 35580
// mech := result [ i ] ;
35564: LD_ADDR_VAR 0 5
35568: PUSH
35569: LD_VAR 0 2
35573: PUSH
35574: LD_VAR 0 3
35578: ARRAY
35579: ST_TO_ADDR
// end ;
35580: GO 35489
35582: POP
35583: POP
// ComLinkTo ( vehicle , mech ) ;
35584: LD_VAR 0 1
35588: PPUSH
35589: LD_VAR 0 5
35593: PPUSH
35594: CALL_OW 135
// end ;
35598: LD_VAR 0 2
35602: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35603: LD_INT 0
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
35617: PPUSH
// result := [ ] ;
35618: LD_ADDR_VAR 0 7
35622: PUSH
35623: EMPTY
35624: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35625: LD_VAR 0 1
35629: PPUSH
35630: CALL_OW 266
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: IN
35645: NOT
35646: IFFALSE 35650
// exit ;
35648: GO 37284
// if name then
35650: LD_VAR 0 3
35654: IFFALSE 35670
// SetBName ( base_dep , name ) ;
35656: LD_VAR 0 1
35660: PPUSH
35661: LD_VAR 0 3
35665: PPUSH
35666: CALL_OW 500
// base := GetBase ( base_dep ) ;
35670: LD_ADDR_VAR 0 15
35674: PUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: CALL_OW 274
35684: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35685: LD_ADDR_VAR 0 16
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 255
35699: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35700: LD_ADDR_VAR 0 17
35704: PUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 248
35714: ST_TO_ADDR
// if sources then
35715: LD_VAR 0 5
35719: IFFALSE 35766
// for i = 1 to 3 do
35721: LD_ADDR_VAR 0 8
35725: PUSH
35726: DOUBLE
35727: LD_INT 1
35729: DEC
35730: ST_TO_ADDR
35731: LD_INT 3
35733: PUSH
35734: FOR_TO
35735: IFFALSE 35764
// AddResourceType ( base , i , sources [ i ] ) ;
35737: LD_VAR 0 15
35741: PPUSH
35742: LD_VAR 0 8
35746: PPUSH
35747: LD_VAR 0 5
35751: PUSH
35752: LD_VAR 0 8
35756: ARRAY
35757: PPUSH
35758: CALL_OW 276
35762: GO 35734
35764: POP
35765: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35766: LD_ADDR_VAR 0 18
35770: PUSH
35771: LD_VAR 0 15
35775: PPUSH
35776: LD_VAR 0 2
35780: PPUSH
35781: LD_INT 1
35783: PPUSH
35784: CALL 35026 0 3
35788: ST_TO_ADDR
// InitHc ;
35789: CALL_OW 19
// InitUc ;
35793: CALL_OW 18
// uc_side := side ;
35797: LD_ADDR_OWVAR 20
35801: PUSH
35802: LD_VAR 0 16
35806: ST_TO_ADDR
// uc_nation := nation ;
35807: LD_ADDR_OWVAR 21
35811: PUSH
35812: LD_VAR 0 17
35816: ST_TO_ADDR
// if buildings then
35817: LD_VAR 0 18
35821: IFFALSE 37143
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35823: LD_ADDR_VAR 0 19
35827: PUSH
35828: LD_VAR 0 18
35832: PPUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 30
35838: PUSH
35839: LD_INT 29
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 30
35848: PUSH
35849: LD_INT 30
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: PPUSH
35861: CALL_OW 72
35865: ST_TO_ADDR
// if tmp then
35866: LD_VAR 0 19
35870: IFFALSE 35918
// for i in tmp do
35872: LD_ADDR_VAR 0 8
35876: PUSH
35877: LD_VAR 0 19
35881: PUSH
35882: FOR_IN
35883: IFFALSE 35916
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35885: LD_VAR 0 8
35889: PPUSH
35890: CALL_OW 250
35894: PPUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: CALL_OW 251
35904: PPUSH
35905: LD_VAR 0 16
35909: PPUSH
35910: CALL_OW 441
35914: GO 35882
35916: POP
35917: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35918: LD_VAR 0 18
35922: PPUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 30
35928: PUSH
35929: LD_INT 32
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 30
35938: PUSH
35939: LD_INT 33
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: PPUSH
35951: CALL_OW 72
35955: IFFALSE 36043
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35957: LD_ADDR_VAR 0 8
35961: PUSH
35962: LD_VAR 0 18
35966: PPUSH
35967: LD_INT 2
35969: PUSH
35970: LD_INT 30
35972: PUSH
35973: LD_INT 32
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 30
35982: PUSH
35983: LD_INT 33
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: PPUSH
35995: CALL_OW 72
35999: PUSH
36000: FOR_IN
36001: IFFALSE 36041
// begin if not GetBWeapon ( i ) then
36003: LD_VAR 0 8
36007: PPUSH
36008: CALL_OW 269
36012: NOT
36013: IFFALSE 36039
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36015: LD_VAR 0 8
36019: PPUSH
36020: LD_VAR 0 8
36024: PPUSH
36025: LD_VAR 0 2
36029: PPUSH
36030: CALL 37289 0 2
36034: PPUSH
36035: CALL_OW 431
// end ;
36039: GO 36000
36041: POP
36042: POP
// end ; for i = 1 to personel do
36043: LD_ADDR_VAR 0 8
36047: PUSH
36048: DOUBLE
36049: LD_INT 1
36051: DEC
36052: ST_TO_ADDR
36053: LD_VAR 0 6
36057: PUSH
36058: FOR_TO
36059: IFFALSE 37123
// begin if i > 4 then
36061: LD_VAR 0 8
36065: PUSH
36066: LD_INT 4
36068: GREATER
36069: IFFALSE 36073
// break ;
36071: GO 37123
// case i of 1 :
36073: LD_VAR 0 8
36077: PUSH
36078: LD_INT 1
36080: DOUBLE
36081: EQUAL
36082: IFTRUE 36086
36084: GO 36166
36086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36087: LD_ADDR_VAR 0 12
36091: PUSH
36092: LD_VAR 0 18
36096: PPUSH
36097: LD_INT 22
36099: PUSH
36100: LD_VAR 0 16
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 58
36111: PUSH
36112: EMPTY
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 30
36120: PUSH
36121: LD_INT 32
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 30
36130: PUSH
36131: LD_INT 4
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 30
36140: PUSH
36141: LD_INT 5
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: PPUSH
36159: CALL_OW 72
36163: ST_TO_ADDR
36164: GO 36388
36166: LD_INT 2
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 36236
36174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36175: LD_ADDR_VAR 0 12
36179: PUSH
36180: LD_VAR 0 18
36184: PPUSH
36185: LD_INT 22
36187: PUSH
36188: LD_VAR 0 16
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: LD_INT 30
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 30
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PPUSH
36229: CALL_OW 72
36233: ST_TO_ADDR
36234: GO 36388
36236: LD_INT 3
36238: DOUBLE
36239: EQUAL
36240: IFTRUE 36244
36242: GO 36306
36244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36245: LD_ADDR_VAR 0 12
36249: PUSH
36250: LD_VAR 0 18
36254: PPUSH
36255: LD_INT 22
36257: PUSH
36258: LD_VAR 0 16
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: LD_INT 30
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 30
36282: PUSH
36283: LD_INT 3
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PPUSH
36299: CALL_OW 72
36303: ST_TO_ADDR
36304: GO 36388
36306: LD_INT 4
36308: DOUBLE
36309: EQUAL
36310: IFTRUE 36314
36312: GO 36387
36314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36315: LD_ADDR_VAR 0 12
36319: PUSH
36320: LD_VAR 0 18
36324: PPUSH
36325: LD_INT 22
36327: PUSH
36328: LD_VAR 0 16
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 30
36342: PUSH
36343: LD_INT 6
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 30
36352: PUSH
36353: LD_INT 7
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 30
36362: PUSH
36363: LD_INT 8
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PPUSH
36380: CALL_OW 72
36384: ST_TO_ADDR
36385: GO 36388
36387: POP
// if i = 1 then
36388: LD_VAR 0 8
36392: PUSH
36393: LD_INT 1
36395: EQUAL
36396: IFFALSE 36507
// begin tmp := [ ] ;
36398: LD_ADDR_VAR 0 19
36402: PUSH
36403: EMPTY
36404: ST_TO_ADDR
// for j in f do
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: LD_VAR 0 12
36414: PUSH
36415: FOR_IN
36416: IFFALSE 36489
// if GetBType ( j ) = b_bunker then
36418: LD_VAR 0 9
36422: PPUSH
36423: CALL_OW 266
36427: PUSH
36428: LD_INT 32
36430: EQUAL
36431: IFFALSE 36458
// tmp := Insert ( tmp , 1 , j ) else
36433: LD_ADDR_VAR 0 19
36437: PUSH
36438: LD_VAR 0 19
36442: PPUSH
36443: LD_INT 1
36445: PPUSH
36446: LD_VAR 0 9
36450: PPUSH
36451: CALL_OW 2
36455: ST_TO_ADDR
36456: GO 36487
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36458: LD_ADDR_VAR 0 19
36462: PUSH
36463: LD_VAR 0 19
36467: PPUSH
36468: LD_VAR 0 19
36472: PUSH
36473: LD_INT 1
36475: PLUS
36476: PPUSH
36477: LD_VAR 0 9
36481: PPUSH
36482: CALL_OW 2
36486: ST_TO_ADDR
36487: GO 36415
36489: POP
36490: POP
// if tmp then
36491: LD_VAR 0 19
36495: IFFALSE 36507
// f := tmp ;
36497: LD_ADDR_VAR 0 12
36501: PUSH
36502: LD_VAR 0 19
36506: ST_TO_ADDR
// end ; x := personel [ i ] ;
36507: LD_ADDR_VAR 0 13
36511: PUSH
36512: LD_VAR 0 6
36516: PUSH
36517: LD_VAR 0 8
36521: ARRAY
36522: ST_TO_ADDR
// if x = - 1 then
36523: LD_VAR 0 13
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: EQUAL
36532: IFFALSE 36741
// begin for j in f do
36534: LD_ADDR_VAR 0 9
36538: PUSH
36539: LD_VAR 0 12
36543: PUSH
36544: FOR_IN
36545: IFFALSE 36737
// repeat InitHc ;
36547: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36551: LD_VAR 0 9
36555: PPUSH
36556: CALL_OW 266
36560: PUSH
36561: LD_INT 5
36563: EQUAL
36564: IFFALSE 36634
// begin if UnitsInside ( j ) < 3 then
36566: LD_VAR 0 9
36570: PPUSH
36571: CALL_OW 313
36575: PUSH
36576: LD_INT 3
36578: LESS
36579: IFFALSE 36615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36581: LD_INT 0
36583: PPUSH
36584: LD_INT 5
36586: PUSH
36587: LD_INT 8
36589: PUSH
36590: LD_INT 9
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: PUSH
36598: LD_VAR 0 17
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 4
36608: PPUSH
36609: CALL_OW 380
36613: GO 36632
// PrepareHuman ( false , i , skill ) ;
36615: LD_INT 0
36617: PPUSH
36618: LD_VAR 0 8
36622: PPUSH
36623: LD_VAR 0 4
36627: PPUSH
36628: CALL_OW 380
// end else
36632: GO 36651
// PrepareHuman ( false , i , skill ) ;
36634: LD_INT 0
36636: PPUSH
36637: LD_VAR 0 8
36641: PPUSH
36642: LD_VAR 0 4
36646: PPUSH
36647: CALL_OW 380
// un := CreateHuman ;
36651: LD_ADDR_VAR 0 14
36655: PUSH
36656: CALL_OW 44
36660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36661: LD_ADDR_VAR 0 7
36665: PUSH
36666: LD_VAR 0 7
36670: PPUSH
36671: LD_INT 1
36673: PPUSH
36674: LD_VAR 0 14
36678: PPUSH
36679: CALL_OW 2
36683: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36684: LD_VAR 0 14
36688: PPUSH
36689: LD_VAR 0 9
36693: PPUSH
36694: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36698: LD_VAR 0 9
36702: PPUSH
36703: CALL_OW 313
36707: PUSH
36708: LD_INT 6
36710: EQUAL
36711: PUSH
36712: LD_VAR 0 9
36716: PPUSH
36717: CALL_OW 266
36721: PUSH
36722: LD_INT 32
36724: PUSH
36725: LD_INT 31
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: IN
36732: OR
36733: IFFALSE 36547
36735: GO 36544
36737: POP
36738: POP
// end else
36739: GO 37121
// for j = 1 to x do
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: DOUBLE
36747: LD_INT 1
36749: DEC
36750: ST_TO_ADDR
36751: LD_VAR 0 13
36755: PUSH
36756: FOR_TO
36757: IFFALSE 37119
// begin InitHc ;
36759: CALL_OW 19
// if not f then
36763: LD_VAR 0 12
36767: NOT
36768: IFFALSE 36857
// begin PrepareHuman ( false , i , skill ) ;
36770: LD_INT 0
36772: PPUSH
36773: LD_VAR 0 8
36777: PPUSH
36778: LD_VAR 0 4
36782: PPUSH
36783: CALL_OW 380
// un := CreateHuman ;
36787: LD_ADDR_VAR 0 14
36791: PUSH
36792: CALL_OW 44
36796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36797: LD_ADDR_VAR 0 7
36801: PUSH
36802: LD_VAR 0 7
36806: PPUSH
36807: LD_INT 1
36809: PPUSH
36810: LD_VAR 0 14
36814: PPUSH
36815: CALL_OW 2
36819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36820: LD_VAR 0 14
36824: PPUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: CALL_OW 250
36834: PPUSH
36835: LD_VAR 0 1
36839: PPUSH
36840: CALL_OW 251
36844: PPUSH
36845: LD_INT 10
36847: PPUSH
36848: LD_INT 0
36850: PPUSH
36851: CALL_OW 50
// continue ;
36855: GO 36756
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36857: LD_VAR 0 12
36861: PUSH
36862: LD_INT 1
36864: ARRAY
36865: PPUSH
36866: CALL_OW 313
36870: PUSH
36871: LD_VAR 0 12
36875: PUSH
36876: LD_INT 1
36878: ARRAY
36879: PPUSH
36880: CALL_OW 266
36884: PUSH
36885: LD_INT 32
36887: PUSH
36888: LD_INT 31
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: IN
36895: AND
36896: PUSH
36897: LD_VAR 0 12
36901: PUSH
36902: LD_INT 1
36904: ARRAY
36905: PPUSH
36906: CALL_OW 313
36910: PUSH
36911: LD_INT 6
36913: EQUAL
36914: OR
36915: IFFALSE 36935
// f := Delete ( f , 1 ) ;
36917: LD_ADDR_VAR 0 12
36921: PUSH
36922: LD_VAR 0 12
36926: PPUSH
36927: LD_INT 1
36929: PPUSH
36930: CALL_OW 3
36934: ST_TO_ADDR
// if not f then
36935: LD_VAR 0 12
36939: NOT
36940: IFFALSE 36958
// begin x := x + 2 ;
36942: LD_ADDR_VAR 0 13
36946: PUSH
36947: LD_VAR 0 13
36951: PUSH
36952: LD_INT 2
36954: PLUS
36955: ST_TO_ADDR
// continue ;
36956: GO 36756
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36958: LD_VAR 0 12
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PPUSH
36967: CALL_OW 266
36971: PUSH
36972: LD_INT 5
36974: EQUAL
36975: IFFALSE 37049
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36977: LD_VAR 0 12
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: PPUSH
36986: CALL_OW 313
36990: PUSH
36991: LD_INT 3
36993: LESS
36994: IFFALSE 37030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36996: LD_INT 0
36998: PPUSH
36999: LD_INT 5
37001: PUSH
37002: LD_INT 8
37004: PUSH
37005: LD_INT 9
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PUSH
37013: LD_VAR 0 17
37017: ARRAY
37018: PPUSH
37019: LD_VAR 0 4
37023: PPUSH
37024: CALL_OW 380
37028: GO 37047
// PrepareHuman ( false , i , skill ) ;
37030: LD_INT 0
37032: PPUSH
37033: LD_VAR 0 8
37037: PPUSH
37038: LD_VAR 0 4
37042: PPUSH
37043: CALL_OW 380
// end else
37047: GO 37066
// PrepareHuman ( false , i , skill ) ;
37049: LD_INT 0
37051: PPUSH
37052: LD_VAR 0 8
37056: PPUSH
37057: LD_VAR 0 4
37061: PPUSH
37062: CALL_OW 380
// un := CreateHuman ;
37066: LD_ADDR_VAR 0 14
37070: PUSH
37071: CALL_OW 44
37075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37076: LD_ADDR_VAR 0 7
37080: PUSH
37081: LD_VAR 0 7
37085: PPUSH
37086: LD_INT 1
37088: PPUSH
37089: LD_VAR 0 14
37093: PPUSH
37094: CALL_OW 2
37098: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37099: LD_VAR 0 14
37103: PPUSH
37104: LD_VAR 0 12
37108: PUSH
37109: LD_INT 1
37111: ARRAY
37112: PPUSH
37113: CALL_OW 52
// end ;
37117: GO 36756
37119: POP
37120: POP
// end ;
37121: GO 36058
37123: POP
37124: POP
// result := result ^ buildings ;
37125: LD_ADDR_VAR 0 7
37129: PUSH
37130: LD_VAR 0 7
37134: PUSH
37135: LD_VAR 0 18
37139: ADD
37140: ST_TO_ADDR
// end else
37141: GO 37284
// begin for i = 1 to personel do
37143: LD_ADDR_VAR 0 8
37147: PUSH
37148: DOUBLE
37149: LD_INT 1
37151: DEC
37152: ST_TO_ADDR
37153: LD_VAR 0 6
37157: PUSH
37158: FOR_TO
37159: IFFALSE 37282
// begin if i > 4 then
37161: LD_VAR 0 8
37165: PUSH
37166: LD_INT 4
37168: GREATER
37169: IFFALSE 37173
// break ;
37171: GO 37282
// x := personel [ i ] ;
37173: LD_ADDR_VAR 0 13
37177: PUSH
37178: LD_VAR 0 6
37182: PUSH
37183: LD_VAR 0 8
37187: ARRAY
37188: ST_TO_ADDR
// if x = - 1 then
37189: LD_VAR 0 13
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: EQUAL
37198: IFFALSE 37202
// continue ;
37200: GO 37158
// PrepareHuman ( false , i , skill ) ;
37202: LD_INT 0
37204: PPUSH
37205: LD_VAR 0 8
37209: PPUSH
37210: LD_VAR 0 4
37214: PPUSH
37215: CALL_OW 380
// un := CreateHuman ;
37219: LD_ADDR_VAR 0 14
37223: PUSH
37224: CALL_OW 44
37228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37229: LD_VAR 0 14
37233: PPUSH
37234: LD_VAR 0 1
37238: PPUSH
37239: CALL_OW 250
37243: PPUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 251
37253: PPUSH
37254: LD_INT 10
37256: PPUSH
37257: LD_INT 0
37259: PPUSH
37260: CALL_OW 50
// result := result ^ un ;
37264: LD_ADDR_VAR 0 7
37268: PUSH
37269: LD_VAR 0 7
37273: PUSH
37274: LD_VAR 0 14
37278: ADD
37279: ST_TO_ADDR
// end ;
37280: GO 37158
37282: POP
37283: POP
// end ; end ;
37284: LD_VAR 0 7
37288: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
// result := false ;
37307: LD_ADDR_VAR 0 3
37311: PUSH
37312: LD_INT 0
37314: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37315: LD_VAR 0 1
37319: NOT
37320: PUSH
37321: LD_VAR 0 1
37325: PPUSH
37326: CALL_OW 266
37330: PUSH
37331: LD_INT 32
37333: PUSH
37334: LD_INT 33
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: IN
37341: NOT
37342: OR
37343: IFFALSE 37347
// exit ;
37345: GO 38456
// nat := GetNation ( tower ) ;
37347: LD_ADDR_VAR 0 12
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 248
37361: ST_TO_ADDR
// side := GetSide ( tower ) ;
37362: LD_ADDR_VAR 0 16
37366: PUSH
37367: LD_VAR 0 1
37371: PPUSH
37372: CALL_OW 255
37376: ST_TO_ADDR
// x := GetX ( tower ) ;
37377: LD_ADDR_VAR 0 10
37381: PUSH
37382: LD_VAR 0 1
37386: PPUSH
37387: CALL_OW 250
37391: ST_TO_ADDR
// y := GetY ( tower ) ;
37392: LD_ADDR_VAR 0 11
37396: PUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 251
37406: ST_TO_ADDR
// if not x or not y then
37407: LD_VAR 0 10
37411: NOT
37412: PUSH
37413: LD_VAR 0 11
37417: NOT
37418: OR
37419: IFFALSE 37423
// exit ;
37421: GO 38456
// weapon := 0 ;
37423: LD_ADDR_VAR 0 18
37427: PUSH
37428: LD_INT 0
37430: ST_TO_ADDR
// fac_list := [ ] ;
37431: LD_ADDR_VAR 0 17
37435: PUSH
37436: EMPTY
37437: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37438: LD_ADDR_VAR 0 6
37442: PUSH
37443: LD_VAR 0 1
37447: PPUSH
37448: CALL_OW 274
37452: PPUSH
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_INT 0
37460: PPUSH
37461: CALL 35026 0 3
37465: PPUSH
37466: LD_INT 30
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PPUSH
37476: CALL_OW 72
37480: ST_TO_ADDR
// if not factories then
37481: LD_VAR 0 6
37485: NOT
37486: IFFALSE 37490
// exit ;
37488: GO 38456
// for i in factories do
37490: LD_ADDR_VAR 0 8
37494: PUSH
37495: LD_VAR 0 6
37499: PUSH
37500: FOR_IN
37501: IFFALSE 37526
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37503: LD_ADDR_VAR 0 17
37507: PUSH
37508: LD_VAR 0 17
37512: PUSH
37513: LD_VAR 0 8
37517: PPUSH
37518: CALL_OW 478
37522: UNION
37523: ST_TO_ADDR
37524: GO 37500
37526: POP
37527: POP
// if not fac_list then
37528: LD_VAR 0 17
37532: NOT
37533: IFFALSE 37537
// exit ;
37535: GO 38456
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37537: LD_ADDR_VAR 0 5
37541: PUSH
37542: LD_INT 4
37544: PUSH
37545: LD_INT 5
37547: PUSH
37548: LD_INT 9
37550: PUSH
37551: LD_INT 10
37553: PUSH
37554: LD_INT 6
37556: PUSH
37557: LD_INT 7
37559: PUSH
37560: LD_INT 11
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 27
37574: PUSH
37575: LD_INT 28
37577: PUSH
37578: LD_INT 26
37580: PUSH
37581: LD_INT 30
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 43
37592: PUSH
37593: LD_INT 44
37595: PUSH
37596: LD_INT 46
37598: PUSH
37599: LD_INT 45
37601: PUSH
37602: LD_INT 47
37604: PUSH
37605: LD_INT 49
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: LD_VAR 0 12
37625: ARRAY
37626: ST_TO_ADDR
// list := list isect fac_list ;
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: LD_VAR 0 5
37636: PUSH
37637: LD_VAR 0 17
37641: ISECT
37642: ST_TO_ADDR
// if not list then
37643: LD_VAR 0 5
37647: NOT
37648: IFFALSE 37652
// exit ;
37650: GO 38456
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37652: LD_VAR 0 12
37656: PUSH
37657: LD_INT 3
37659: EQUAL
37660: PUSH
37661: LD_INT 49
37663: PUSH
37664: LD_VAR 0 5
37668: IN
37669: AND
37670: PUSH
37671: LD_INT 31
37673: PPUSH
37674: LD_VAR 0 16
37678: PPUSH
37679: CALL_OW 321
37683: PUSH
37684: LD_INT 2
37686: EQUAL
37687: AND
37688: IFFALSE 37748
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37690: LD_INT 22
37692: PUSH
37693: LD_VAR 0 16
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 35
37704: PUSH
37705: LD_INT 49
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 91
37714: PUSH
37715: LD_VAR 0 1
37719: PUSH
37720: LD_INT 10
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: PPUSH
37733: CALL_OW 69
37737: NOT
37738: IFFALSE 37748
// weapon := ru_time_lapser ;
37740: LD_ADDR_VAR 0 18
37744: PUSH
37745: LD_INT 49
37747: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37748: LD_VAR 0 12
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: IN
37763: PUSH
37764: LD_INT 11
37766: PUSH
37767: LD_VAR 0 5
37771: IN
37772: PUSH
37773: LD_INT 30
37775: PUSH
37776: LD_VAR 0 5
37780: IN
37781: OR
37782: AND
37783: PUSH
37784: LD_INT 6
37786: PPUSH
37787: LD_VAR 0 16
37791: PPUSH
37792: CALL_OW 321
37796: PUSH
37797: LD_INT 2
37799: EQUAL
37800: AND
37801: IFFALSE 37966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37803: LD_INT 22
37805: PUSH
37806: LD_VAR 0 16
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 35
37820: PUSH
37821: LD_INT 11
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 35
37830: PUSH
37831: LD_INT 30
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 91
37845: PUSH
37846: LD_VAR 0 1
37850: PUSH
37851: LD_INT 18
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: PPUSH
37864: CALL_OW 69
37868: NOT
37869: PUSH
37870: LD_INT 22
37872: PUSH
37873: LD_VAR 0 16
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 30
37887: PUSH
37888: LD_INT 32
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 30
37897: PUSH
37898: LD_INT 33
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 91
37912: PUSH
37913: LD_VAR 0 1
37917: PUSH
37918: LD_INT 12
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: PPUSH
37934: CALL_OW 69
37938: PUSH
37939: LD_INT 2
37941: GREATER
37942: AND
37943: IFFALSE 37966
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37945: LD_ADDR_VAR 0 18
37949: PUSH
37950: LD_INT 11
37952: PUSH
37953: LD_INT 30
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_VAR 0 12
37964: ARRAY
37965: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37966: LD_VAR 0 18
37970: NOT
37971: PUSH
37972: LD_INT 40
37974: PPUSH
37975: LD_VAR 0 16
37979: PPUSH
37980: CALL_OW 321
37984: PUSH
37985: LD_INT 2
37987: EQUAL
37988: AND
37989: PUSH
37990: LD_INT 7
37992: PUSH
37993: LD_VAR 0 5
37997: IN
37998: PUSH
37999: LD_INT 28
38001: PUSH
38002: LD_VAR 0 5
38006: IN
38007: OR
38008: PUSH
38009: LD_INT 45
38011: PUSH
38012: LD_VAR 0 5
38016: IN
38017: OR
38018: AND
38019: IFFALSE 38273
// begin hex := GetHexInfo ( x , y ) ;
38021: LD_ADDR_VAR 0 4
38025: PUSH
38026: LD_VAR 0 10
38030: PPUSH
38031: LD_VAR 0 11
38035: PPUSH
38036: CALL_OW 546
38040: ST_TO_ADDR
// if hex [ 1 ] then
38041: LD_VAR 0 4
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: IFFALSE 38053
// exit ;
38051: GO 38456
// height := hex [ 2 ] ;
38053: LD_ADDR_VAR 0 15
38057: PUSH
38058: LD_VAR 0 4
38062: PUSH
38063: LD_INT 2
38065: ARRAY
38066: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38067: LD_ADDR_VAR 0 14
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 3
38080: PUSH
38081: LD_INT 5
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: ST_TO_ADDR
// for i in tmp do
38090: LD_ADDR_VAR 0 8
38094: PUSH
38095: LD_VAR 0 14
38099: PUSH
38100: FOR_IN
38101: IFFALSE 38271
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38103: LD_ADDR_VAR 0 9
38107: PUSH
38108: LD_VAR 0 10
38112: PPUSH
38113: LD_VAR 0 8
38117: PPUSH
38118: LD_INT 5
38120: PPUSH
38121: CALL_OW 272
38125: PUSH
38126: LD_VAR 0 11
38130: PPUSH
38131: LD_VAR 0 8
38135: PPUSH
38136: LD_INT 5
38138: PPUSH
38139: CALL_OW 273
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38148: LD_VAR 0 9
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: PPUSH
38157: LD_VAR 0 9
38161: PUSH
38162: LD_INT 2
38164: ARRAY
38165: PPUSH
38166: CALL_OW 488
38170: IFFALSE 38269
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38172: LD_ADDR_VAR 0 4
38176: PUSH
38177: LD_VAR 0 9
38181: PUSH
38182: LD_INT 1
38184: ARRAY
38185: PPUSH
38186: LD_VAR 0 9
38190: PUSH
38191: LD_INT 2
38193: ARRAY
38194: PPUSH
38195: CALL_OW 546
38199: ST_TO_ADDR
// if hex [ 1 ] then
38200: LD_VAR 0 4
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: IFFALSE 38212
// continue ;
38210: GO 38100
// h := hex [ 2 ] ;
38212: LD_ADDR_VAR 0 13
38216: PUSH
38217: LD_VAR 0 4
38221: PUSH
38222: LD_INT 2
38224: ARRAY
38225: ST_TO_ADDR
// if h + 7 < height then
38226: LD_VAR 0 13
38230: PUSH
38231: LD_INT 7
38233: PLUS
38234: PUSH
38235: LD_VAR 0 15
38239: LESS
38240: IFFALSE 38269
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38242: LD_ADDR_VAR 0 18
38246: PUSH
38247: LD_INT 7
38249: PUSH
38250: LD_INT 28
38252: PUSH
38253: LD_INT 45
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: PUSH
38261: LD_VAR 0 12
38265: ARRAY
38266: ST_TO_ADDR
// break ;
38267: GO 38271
// end ; end ; end ;
38269: GO 38100
38271: POP
38272: POP
// end ; if not weapon then
38273: LD_VAR 0 18
38277: NOT
38278: IFFALSE 38338
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38280: LD_ADDR_VAR 0 5
38284: PUSH
38285: LD_VAR 0 5
38289: PUSH
38290: LD_INT 11
38292: PUSH
38293: LD_INT 30
38295: PUSH
38296: LD_INT 49
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: DIFF
38304: ST_TO_ADDR
// if not list then
38305: LD_VAR 0 5
38309: NOT
38310: IFFALSE 38314
// exit ;
38312: GO 38456
// weapon := list [ rand ( 1 , list ) ] ;
38314: LD_ADDR_VAR 0 18
38318: PUSH
38319: LD_VAR 0 5
38323: PUSH
38324: LD_INT 1
38326: PPUSH
38327: LD_VAR 0 5
38331: PPUSH
38332: CALL_OW 12
38336: ARRAY
38337: ST_TO_ADDR
// end ; if weapon then
38338: LD_VAR 0 18
38342: IFFALSE 38456
// begin tmp := CostOfWeapon ( weapon ) ;
38344: LD_ADDR_VAR 0 14
38348: PUSH
38349: LD_VAR 0 18
38353: PPUSH
38354: CALL_OW 451
38358: ST_TO_ADDR
// j := GetBase ( tower ) ;
38359: LD_ADDR_VAR 0 9
38363: PUSH
38364: LD_VAR 0 1
38368: PPUSH
38369: CALL_OW 274
38373: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38374: LD_VAR 0 9
38378: PPUSH
38379: LD_INT 1
38381: PPUSH
38382: CALL_OW 275
38386: PUSH
38387: LD_VAR 0 14
38391: PUSH
38392: LD_INT 1
38394: ARRAY
38395: GREATEREQUAL
38396: PUSH
38397: LD_VAR 0 9
38401: PPUSH
38402: LD_INT 2
38404: PPUSH
38405: CALL_OW 275
38409: PUSH
38410: LD_VAR 0 14
38414: PUSH
38415: LD_INT 2
38417: ARRAY
38418: GREATEREQUAL
38419: AND
38420: PUSH
38421: LD_VAR 0 9
38425: PPUSH
38426: LD_INT 3
38428: PPUSH
38429: CALL_OW 275
38433: PUSH
38434: LD_VAR 0 14
38438: PUSH
38439: LD_INT 3
38441: ARRAY
38442: GREATEREQUAL
38443: AND
38444: IFFALSE 38456
// result := weapon ;
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_VAR 0 18
38455: ST_TO_ADDR
// end ; end ;
38456: LD_VAR 0 3
38460: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38461: LD_INT 0
38463: PPUSH
38464: PPUSH
// result := true ;
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_INT 1
38472: ST_TO_ADDR
// if array1 = array2 then
38473: LD_VAR 0 1
38477: PUSH
38478: LD_VAR 0 2
38482: EQUAL
38483: IFFALSE 38543
// begin for i = 1 to array1 do
38485: LD_ADDR_VAR 0 4
38489: PUSH
38490: DOUBLE
38491: LD_INT 1
38493: DEC
38494: ST_TO_ADDR
38495: LD_VAR 0 1
38499: PUSH
38500: FOR_TO
38501: IFFALSE 38539
// if array1 [ i ] <> array2 [ i ] then
38503: LD_VAR 0 1
38507: PUSH
38508: LD_VAR 0 4
38512: ARRAY
38513: PUSH
38514: LD_VAR 0 2
38518: PUSH
38519: LD_VAR 0 4
38523: ARRAY
38524: NONEQUAL
38525: IFFALSE 38537
// begin result := false ;
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_INT 0
38534: ST_TO_ADDR
// break ;
38535: GO 38539
// end ;
38537: GO 38500
38539: POP
38540: POP
// end else
38541: GO 38551
// result := false ;
38543: LD_ADDR_VAR 0 3
38547: PUSH
38548: LD_INT 0
38550: ST_TO_ADDR
// end ;
38551: LD_VAR 0 3
38555: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38556: LD_INT 0
38558: PPUSH
38559: PPUSH
// if not array1 or not array2 then
38560: LD_VAR 0 1
38564: NOT
38565: PUSH
38566: LD_VAR 0 2
38570: NOT
38571: OR
38572: IFFALSE 38576
// exit ;
38574: GO 38640
// result := true ;
38576: LD_ADDR_VAR 0 3
38580: PUSH
38581: LD_INT 1
38583: ST_TO_ADDR
// for i = 1 to array1 do
38584: LD_ADDR_VAR 0 4
38588: PUSH
38589: DOUBLE
38590: LD_INT 1
38592: DEC
38593: ST_TO_ADDR
38594: LD_VAR 0 1
38598: PUSH
38599: FOR_TO
38600: IFFALSE 38638
// if array1 [ i ] <> array2 [ i ] then
38602: LD_VAR 0 1
38606: PUSH
38607: LD_VAR 0 4
38611: ARRAY
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_VAR 0 4
38622: ARRAY
38623: NONEQUAL
38624: IFFALSE 38636
// begin result := false ;
38626: LD_ADDR_VAR 0 3
38630: PUSH
38631: LD_INT 0
38633: ST_TO_ADDR
// break ;
38634: GO 38638
// end ;
38636: GO 38599
38638: POP
38639: POP
// end ;
38640: LD_VAR 0 3
38644: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38645: LD_INT 0
38647: PPUSH
38648: PPUSH
38649: PPUSH
// pom := GetBase ( fac ) ;
38650: LD_ADDR_VAR 0 5
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 274
38664: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38665: LD_ADDR_VAR 0 4
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 1
38677: ARRAY
38678: PPUSH
38679: LD_VAR 0 2
38683: PUSH
38684: LD_INT 2
38686: ARRAY
38687: PPUSH
38688: LD_VAR 0 2
38692: PUSH
38693: LD_INT 3
38695: ARRAY
38696: PPUSH
38697: LD_VAR 0 2
38701: PUSH
38702: LD_INT 4
38704: ARRAY
38705: PPUSH
38706: CALL_OW 449
38710: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38711: LD_ADDR_VAR 0 3
38715: PUSH
38716: LD_VAR 0 5
38720: PPUSH
38721: LD_INT 1
38723: PPUSH
38724: CALL_OW 275
38728: PUSH
38729: LD_VAR 0 4
38733: PUSH
38734: LD_INT 1
38736: ARRAY
38737: GREATEREQUAL
38738: PUSH
38739: LD_VAR 0 5
38743: PPUSH
38744: LD_INT 2
38746: PPUSH
38747: CALL_OW 275
38751: PUSH
38752: LD_VAR 0 4
38756: PUSH
38757: LD_INT 2
38759: ARRAY
38760: GREATEREQUAL
38761: AND
38762: PUSH
38763: LD_VAR 0 5
38767: PPUSH
38768: LD_INT 3
38770: PPUSH
38771: CALL_OW 275
38775: PUSH
38776: LD_VAR 0 4
38780: PUSH
38781: LD_INT 3
38783: ARRAY
38784: GREATEREQUAL
38785: AND
38786: ST_TO_ADDR
// end ;
38787: LD_VAR 0 3
38791: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38792: LD_INT 0
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
// pom := GetBase ( building ) ;
38798: LD_ADDR_VAR 0 3
38802: PUSH
38803: LD_VAR 0 1
38807: PPUSH
38808: CALL_OW 274
38812: ST_TO_ADDR
// if not pom then
38813: LD_VAR 0 3
38817: NOT
38818: IFFALSE 38822
// exit ;
38820: GO 38992
// btype := GetBType ( building ) ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 266
38836: ST_TO_ADDR
// if btype = b_armoury then
38837: LD_VAR 0 5
38841: PUSH
38842: LD_INT 4
38844: EQUAL
38845: IFFALSE 38855
// btype := b_barracks ;
38847: LD_ADDR_VAR 0 5
38851: PUSH
38852: LD_INT 5
38854: ST_TO_ADDR
// if btype = b_depot then
38855: LD_VAR 0 5
38859: PUSH
38860: LD_INT 0
38862: EQUAL
38863: IFFALSE 38873
// btype := b_warehouse ;
38865: LD_ADDR_VAR 0 5
38869: PUSH
38870: LD_INT 1
38872: ST_TO_ADDR
// if btype = b_workshop then
38873: LD_VAR 0 5
38877: PUSH
38878: LD_INT 2
38880: EQUAL
38881: IFFALSE 38891
// btype := b_factory ;
38883: LD_ADDR_VAR 0 5
38887: PUSH
38888: LD_INT 3
38890: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38891: LD_ADDR_VAR 0 4
38895: PUSH
38896: LD_VAR 0 5
38900: PPUSH
38901: LD_VAR 0 1
38905: PPUSH
38906: CALL_OW 248
38910: PPUSH
38911: CALL_OW 450
38915: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38916: LD_ADDR_VAR 0 2
38920: PUSH
38921: LD_VAR 0 3
38925: PPUSH
38926: LD_INT 1
38928: PPUSH
38929: CALL_OW 275
38933: PUSH
38934: LD_VAR 0 4
38938: PUSH
38939: LD_INT 1
38941: ARRAY
38942: GREATEREQUAL
38943: PUSH
38944: LD_VAR 0 3
38948: PPUSH
38949: LD_INT 2
38951: PPUSH
38952: CALL_OW 275
38956: PUSH
38957: LD_VAR 0 4
38961: PUSH
38962: LD_INT 2
38964: ARRAY
38965: GREATEREQUAL
38966: AND
38967: PUSH
38968: LD_VAR 0 3
38972: PPUSH
38973: LD_INT 3
38975: PPUSH
38976: CALL_OW 275
38980: PUSH
38981: LD_VAR 0 4
38985: PUSH
38986: LD_INT 3
38988: ARRAY
38989: GREATEREQUAL
38990: AND
38991: ST_TO_ADDR
// end ;
38992: LD_VAR 0 2
38996: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38997: LD_INT 0
38999: PPUSH
39000: PPUSH
39001: PPUSH
// pom := GetBase ( building ) ;
39002: LD_ADDR_VAR 0 4
39006: PUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 274
39016: ST_TO_ADDR
// if not pom then
39017: LD_VAR 0 4
39021: NOT
39022: IFFALSE 39026
// exit ;
39024: GO 39127
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39026: LD_ADDR_VAR 0 5
39030: PUSH
39031: LD_VAR 0 2
39035: PPUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL_OW 248
39045: PPUSH
39046: CALL_OW 450
39050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39051: LD_ADDR_VAR 0 3
39055: PUSH
39056: LD_VAR 0 4
39060: PPUSH
39061: LD_INT 1
39063: PPUSH
39064: CALL_OW 275
39068: PUSH
39069: LD_VAR 0 5
39073: PUSH
39074: LD_INT 1
39076: ARRAY
39077: GREATEREQUAL
39078: PUSH
39079: LD_VAR 0 4
39083: PPUSH
39084: LD_INT 2
39086: PPUSH
39087: CALL_OW 275
39091: PUSH
39092: LD_VAR 0 5
39096: PUSH
39097: LD_INT 2
39099: ARRAY
39100: GREATEREQUAL
39101: AND
39102: PUSH
39103: LD_VAR 0 4
39107: PPUSH
39108: LD_INT 3
39110: PPUSH
39111: CALL_OW 275
39115: PUSH
39116: LD_VAR 0 5
39120: PUSH
39121: LD_INT 3
39123: ARRAY
39124: GREATEREQUAL
39125: AND
39126: ST_TO_ADDR
// end ;
39127: LD_VAR 0 3
39131: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39132: LD_INT 0
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
// result := false ;
39145: LD_ADDR_VAR 0 8
39149: PUSH
39150: LD_INT 0
39152: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39153: LD_VAR 0 5
39157: NOT
39158: PUSH
39159: LD_VAR 0 1
39163: NOT
39164: OR
39165: PUSH
39166: LD_VAR 0 2
39170: NOT
39171: OR
39172: PUSH
39173: LD_VAR 0 3
39177: NOT
39178: OR
39179: IFFALSE 39183
// exit ;
39181: GO 39997
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39183: LD_ADDR_VAR 0 14
39187: PUSH
39188: LD_VAR 0 1
39192: PPUSH
39193: LD_VAR 0 2
39197: PPUSH
39198: LD_VAR 0 3
39202: PPUSH
39203: LD_VAR 0 4
39207: PPUSH
39208: LD_VAR 0 5
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PPUSH
39217: CALL_OW 248
39221: PPUSH
39222: LD_INT 0
39224: PPUSH
39225: CALL 41234 0 6
39229: ST_TO_ADDR
// if not hexes then
39230: LD_VAR 0 14
39234: NOT
39235: IFFALSE 39239
// exit ;
39237: GO 39997
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39239: LD_ADDR_VAR 0 17
39243: PUSH
39244: LD_VAR 0 5
39248: PPUSH
39249: LD_INT 22
39251: PUSH
39252: LD_VAR 0 13
39256: PPUSH
39257: CALL_OW 255
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 30
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 30
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: LIST
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PPUSH
39298: CALL_OW 72
39302: ST_TO_ADDR
// for i = 1 to hexes do
39303: LD_ADDR_VAR 0 9
39307: PUSH
39308: DOUBLE
39309: LD_INT 1
39311: DEC
39312: ST_TO_ADDR
39313: LD_VAR 0 14
39317: PUSH
39318: FOR_TO
39319: IFFALSE 39995
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39321: LD_ADDR_VAR 0 13
39325: PUSH
39326: LD_VAR 0 14
39330: PUSH
39331: LD_VAR 0 9
39335: ARRAY
39336: PUSH
39337: LD_INT 1
39339: ARRAY
39340: PPUSH
39341: LD_VAR 0 14
39345: PUSH
39346: LD_VAR 0 9
39350: ARRAY
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: PPUSH
39356: CALL_OW 428
39360: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39361: LD_VAR 0 14
39365: PUSH
39366: LD_VAR 0 9
39370: ARRAY
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: LD_VAR 0 14
39380: PUSH
39381: LD_VAR 0 9
39385: ARRAY
39386: PUSH
39387: LD_INT 2
39389: ARRAY
39390: PPUSH
39391: CALL_OW 351
39395: PUSH
39396: LD_VAR 0 14
39400: PUSH
39401: LD_VAR 0 9
39405: ARRAY
39406: PUSH
39407: LD_INT 1
39409: ARRAY
39410: PPUSH
39411: LD_VAR 0 14
39415: PUSH
39416: LD_VAR 0 9
39420: ARRAY
39421: PUSH
39422: LD_INT 2
39424: ARRAY
39425: PPUSH
39426: CALL_OW 488
39430: NOT
39431: OR
39432: PUSH
39433: LD_VAR 0 13
39437: PPUSH
39438: CALL_OW 247
39442: PUSH
39443: LD_INT 3
39445: EQUAL
39446: OR
39447: IFFALSE 39453
// exit ;
39449: POP
39450: POP
39451: GO 39997
// if not tmp then
39453: LD_VAR 0 13
39457: NOT
39458: IFFALSE 39462
// continue ;
39460: GO 39318
// result := true ;
39462: LD_ADDR_VAR 0 8
39466: PUSH
39467: LD_INT 1
39469: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39470: LD_VAR 0 6
39474: PUSH
39475: LD_VAR 0 13
39479: PPUSH
39480: CALL_OW 247
39484: PUSH
39485: LD_INT 2
39487: EQUAL
39488: AND
39489: PUSH
39490: LD_VAR 0 13
39494: PPUSH
39495: CALL_OW 263
39499: PUSH
39500: LD_INT 1
39502: EQUAL
39503: AND
39504: IFFALSE 39668
// begin if IsDrivenBy ( tmp ) then
39506: LD_VAR 0 13
39510: PPUSH
39511: CALL_OW 311
39515: IFFALSE 39519
// continue ;
39517: GO 39318
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39519: LD_VAR 0 6
39523: PPUSH
39524: LD_INT 3
39526: PUSH
39527: LD_INT 60
39529: PUSH
39530: EMPTY
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: LD_INT 55
39542: PUSH
39543: EMPTY
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PPUSH
39554: CALL_OW 72
39558: IFFALSE 39666
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39560: LD_ADDR_VAR 0 18
39564: PUSH
39565: LD_VAR 0 6
39569: PPUSH
39570: LD_INT 3
39572: PUSH
39573: LD_INT 60
39575: PUSH
39576: EMPTY
39577: LIST
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: LD_INT 55
39588: PUSH
39589: EMPTY
39590: LIST
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PPUSH
39600: CALL_OW 72
39604: PUSH
39605: LD_INT 1
39607: ARRAY
39608: ST_TO_ADDR
// if IsInUnit ( driver ) then
39609: LD_VAR 0 18
39613: PPUSH
39614: CALL_OW 310
39618: IFFALSE 39629
// ComExit ( driver ) ;
39620: LD_VAR 0 18
39624: PPUSH
39625: CALL 64418 0 1
// AddComEnterUnit ( driver , tmp ) ;
39629: LD_VAR 0 18
39633: PPUSH
39634: LD_VAR 0 13
39638: PPUSH
39639: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39643: LD_VAR 0 18
39647: PPUSH
39648: LD_VAR 0 7
39652: PPUSH
39653: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39657: LD_VAR 0 18
39661: PPUSH
39662: CALL_OW 181
// end ; continue ;
39666: GO 39318
// end ; if not cleaners or not tmp in cleaners then
39668: LD_VAR 0 6
39672: NOT
39673: PUSH
39674: LD_VAR 0 13
39678: PUSH
39679: LD_VAR 0 6
39683: IN
39684: NOT
39685: OR
39686: IFFALSE 39993
// begin if dep then
39688: LD_VAR 0 17
39692: IFFALSE 39828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39694: LD_ADDR_VAR 0 16
39698: PUSH
39699: LD_VAR 0 17
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: PPUSH
39708: CALL_OW 250
39712: PPUSH
39713: LD_VAR 0 17
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PPUSH
39722: CALL_OW 254
39726: PPUSH
39727: LD_INT 5
39729: PPUSH
39730: CALL_OW 272
39734: PUSH
39735: LD_VAR 0 17
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PPUSH
39744: CALL_OW 251
39748: PPUSH
39749: LD_VAR 0 17
39753: PUSH
39754: LD_INT 1
39756: ARRAY
39757: PPUSH
39758: CALL_OW 254
39762: PPUSH
39763: LD_INT 5
39765: PPUSH
39766: CALL_OW 273
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39775: LD_VAR 0 16
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PPUSH
39784: LD_VAR 0 16
39788: PUSH
39789: LD_INT 2
39791: ARRAY
39792: PPUSH
39793: CALL_OW 488
39797: IFFALSE 39828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39799: LD_VAR 0 13
39803: PPUSH
39804: LD_VAR 0 16
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: PPUSH
39813: LD_VAR 0 16
39817: PUSH
39818: LD_INT 2
39820: ARRAY
39821: PPUSH
39822: CALL_OW 111
// continue ;
39826: GO 39318
// end ; end ; r := GetDir ( tmp ) ;
39828: LD_ADDR_VAR 0 15
39832: PUSH
39833: LD_VAR 0 13
39837: PPUSH
39838: CALL_OW 254
39842: ST_TO_ADDR
// if r = 5 then
39843: LD_VAR 0 15
39847: PUSH
39848: LD_INT 5
39850: EQUAL
39851: IFFALSE 39861
// r := 0 ;
39853: LD_ADDR_VAR 0 15
39857: PUSH
39858: LD_INT 0
39860: ST_TO_ADDR
// for j = r to 5 do
39861: LD_ADDR_VAR 0 10
39865: PUSH
39866: DOUBLE
39867: LD_VAR 0 15
39871: DEC
39872: ST_TO_ADDR
39873: LD_INT 5
39875: PUSH
39876: FOR_TO
39877: IFFALSE 39991
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39879: LD_ADDR_VAR 0 11
39883: PUSH
39884: LD_VAR 0 13
39888: PPUSH
39889: CALL_OW 250
39893: PPUSH
39894: LD_VAR 0 10
39898: PPUSH
39899: LD_INT 2
39901: PPUSH
39902: CALL_OW 272
39906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39907: LD_ADDR_VAR 0 12
39911: PUSH
39912: LD_VAR 0 13
39916: PPUSH
39917: CALL_OW 251
39921: PPUSH
39922: LD_VAR 0 10
39926: PPUSH
39927: LD_INT 2
39929: PPUSH
39930: CALL_OW 273
39934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39935: LD_VAR 0 11
39939: PPUSH
39940: LD_VAR 0 12
39944: PPUSH
39945: CALL_OW 488
39949: PUSH
39950: LD_VAR 0 11
39954: PPUSH
39955: LD_VAR 0 12
39959: PPUSH
39960: CALL_OW 428
39964: NOT
39965: AND
39966: IFFALSE 39989
// begin ComMoveXY ( tmp , _x , _y ) ;
39968: LD_VAR 0 13
39972: PPUSH
39973: LD_VAR 0 11
39977: PPUSH
39978: LD_VAR 0 12
39982: PPUSH
39983: CALL_OW 111
// break ;
39987: GO 39991
// end ; end ;
39989: GO 39876
39991: POP
39992: POP
// end ; end ;
39993: GO 39318
39995: POP
39996: POP
// end ;
39997: LD_VAR 0 8
40001: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40002: LD_INT 0
40004: PPUSH
// result := true ;
40005: LD_ADDR_VAR 0 3
40009: PUSH
40010: LD_INT 1
40012: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40013: LD_VAR 0 2
40017: PUSH
40018: LD_INT 24
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40032
40024: LD_INT 33
40026: DOUBLE
40027: EQUAL
40028: IFTRUE 40032
40030: GO 40057
40032: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_INT 32
40040: PPUSH
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 321
40050: PUSH
40051: LD_INT 2
40053: EQUAL
40054: ST_TO_ADDR
40055: GO 40377
40057: LD_INT 20
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40065
40063: GO 40090
40065: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40066: LD_ADDR_VAR 0 3
40070: PUSH
40071: LD_INT 6
40073: PPUSH
40074: LD_VAR 0 1
40078: PPUSH
40079: CALL_OW 321
40083: PUSH
40084: LD_INT 2
40086: EQUAL
40087: ST_TO_ADDR
40088: GO 40377
40090: LD_INT 22
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40104
40096: LD_INT 36
40098: DOUBLE
40099: EQUAL
40100: IFTRUE 40104
40102: GO 40129
40104: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40105: LD_ADDR_VAR 0 3
40109: PUSH
40110: LD_INT 15
40112: PPUSH
40113: LD_VAR 0 1
40117: PPUSH
40118: CALL_OW 321
40122: PUSH
40123: LD_INT 2
40125: EQUAL
40126: ST_TO_ADDR
40127: GO 40377
40129: LD_INT 30
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 40162
40137: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_INT 20
40145: PPUSH
40146: LD_VAR 0 1
40150: PPUSH
40151: CALL_OW 321
40155: PUSH
40156: LD_INT 2
40158: EQUAL
40159: ST_TO_ADDR
40160: GO 40377
40162: LD_INT 28
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40176
40168: LD_INT 21
40170: DOUBLE
40171: EQUAL
40172: IFTRUE 40176
40174: GO 40201
40176: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40177: LD_ADDR_VAR 0 3
40181: PUSH
40182: LD_INT 21
40184: PPUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 321
40194: PUSH
40195: LD_INT 2
40197: EQUAL
40198: ST_TO_ADDR
40199: GO 40377
40201: LD_INT 16
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40209
40207: GO 40236
40209: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40210: LD_ADDR_VAR 0 3
40214: PUSH
40215: LD_EXP 105
40219: PPUSH
40220: LD_VAR 0 1
40224: PPUSH
40225: CALL_OW 321
40229: PUSH
40230: LD_INT 2
40232: EQUAL
40233: ST_TO_ADDR
40234: GO 40377
40236: LD_INT 19
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40250
40242: LD_INT 23
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40250
40248: GO 40277
40250: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_EXP 104
40260: PPUSH
40261: LD_VAR 0 1
40265: PPUSH
40266: CALL_OW 321
40270: PUSH
40271: LD_INT 2
40273: EQUAL
40274: ST_TO_ADDR
40275: GO 40377
40277: LD_INT 17
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40310
40285: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 39
40293: PPUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 321
40303: PUSH
40304: LD_INT 2
40306: EQUAL
40307: ST_TO_ADDR
40308: GO 40377
40310: LD_INT 18
40312: DOUBLE
40313: EQUAL
40314: IFTRUE 40318
40316: GO 40343
40318: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40319: LD_ADDR_VAR 0 3
40323: PUSH
40324: LD_INT 40
40326: PPUSH
40327: LD_VAR 0 1
40331: PPUSH
40332: CALL_OW 321
40336: PUSH
40337: LD_INT 2
40339: EQUAL
40340: ST_TO_ADDR
40341: GO 40377
40343: LD_INT 27
40345: DOUBLE
40346: EQUAL
40347: IFTRUE 40351
40349: GO 40376
40351: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40352: LD_ADDR_VAR 0 3
40356: PUSH
40357: LD_INT 35
40359: PPUSH
40360: LD_VAR 0 1
40364: PPUSH
40365: CALL_OW 321
40369: PUSH
40370: LD_INT 2
40372: EQUAL
40373: ST_TO_ADDR
40374: GO 40377
40376: POP
// end ;
40377: LD_VAR 0 3
40381: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40382: LD_INT 0
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
// result := false ;
40395: LD_ADDR_VAR 0 6
40399: PUSH
40400: LD_INT 0
40402: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40403: LD_VAR 0 1
40407: NOT
40408: PUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 266
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: IN
40429: NOT
40430: OR
40431: PUSH
40432: LD_VAR 0 2
40436: NOT
40437: OR
40438: PUSH
40439: LD_VAR 0 5
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: LD_INT 4
40458: PUSH
40459: LD_INT 5
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: IN
40470: NOT
40471: OR
40472: PUSH
40473: LD_VAR 0 3
40477: PPUSH
40478: LD_VAR 0 4
40482: PPUSH
40483: CALL_OW 488
40487: NOT
40488: OR
40489: IFFALSE 40493
// exit ;
40491: GO 41229
// side := GetSide ( depot ) ;
40493: LD_ADDR_VAR 0 9
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 255
40507: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40508: LD_VAR 0 9
40512: PPUSH
40513: LD_VAR 0 2
40517: PPUSH
40518: CALL 40002 0 2
40522: NOT
40523: IFFALSE 40527
// exit ;
40525: GO 41229
// pom := GetBase ( depot ) ;
40527: LD_ADDR_VAR 0 10
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 274
40541: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40542: LD_ADDR_VAR 0 11
40546: PUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: LD_VAR 0 1
40556: PPUSH
40557: CALL_OW 248
40561: PPUSH
40562: CALL_OW 450
40566: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40567: LD_VAR 0 10
40571: PPUSH
40572: LD_INT 1
40574: PPUSH
40575: CALL_OW 275
40579: PUSH
40580: LD_VAR 0 11
40584: PUSH
40585: LD_INT 1
40587: ARRAY
40588: GREATEREQUAL
40589: PUSH
40590: LD_VAR 0 10
40594: PPUSH
40595: LD_INT 2
40597: PPUSH
40598: CALL_OW 275
40602: PUSH
40603: LD_VAR 0 11
40607: PUSH
40608: LD_INT 2
40610: ARRAY
40611: GREATEREQUAL
40612: AND
40613: PUSH
40614: LD_VAR 0 10
40618: PPUSH
40619: LD_INT 3
40621: PPUSH
40622: CALL_OW 275
40626: PUSH
40627: LD_VAR 0 11
40631: PUSH
40632: LD_INT 3
40634: ARRAY
40635: GREATEREQUAL
40636: AND
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 41229
// if GetBType ( depot ) = b_depot then
40642: LD_VAR 0 1
40646: PPUSH
40647: CALL_OW 266
40651: PUSH
40652: LD_INT 0
40654: EQUAL
40655: IFFALSE 40667
// dist := 28 else
40657: LD_ADDR_VAR 0 14
40661: PUSH
40662: LD_INT 28
40664: ST_TO_ADDR
40665: GO 40675
// dist := 36 ;
40667: LD_ADDR_VAR 0 14
40671: PUSH
40672: LD_INT 36
40674: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40675: LD_VAR 0 1
40679: PPUSH
40680: LD_VAR 0 3
40684: PPUSH
40685: LD_VAR 0 4
40689: PPUSH
40690: CALL_OW 297
40694: PUSH
40695: LD_VAR 0 14
40699: GREATER
40700: IFFALSE 40704
// exit ;
40702: GO 41229
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40704: LD_ADDR_VAR 0 12
40708: PUSH
40709: LD_VAR 0 2
40713: PPUSH
40714: LD_VAR 0 3
40718: PPUSH
40719: LD_VAR 0 4
40723: PPUSH
40724: LD_VAR 0 5
40728: PPUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: CALL_OW 248
40738: PPUSH
40739: LD_INT 0
40741: PPUSH
40742: CALL 41234 0 6
40746: ST_TO_ADDR
// if not hexes then
40747: LD_VAR 0 12
40751: NOT
40752: IFFALSE 40756
// exit ;
40754: GO 41229
// hex := GetHexInfo ( x , y ) ;
40756: LD_ADDR_VAR 0 15
40760: PUSH
40761: LD_VAR 0 3
40765: PPUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 546
40775: ST_TO_ADDR
// if hex [ 1 ] then
40776: LD_VAR 0 15
40780: PUSH
40781: LD_INT 1
40783: ARRAY
40784: IFFALSE 40788
// exit ;
40786: GO 41229
// height := hex [ 2 ] ;
40788: LD_ADDR_VAR 0 13
40792: PUSH
40793: LD_VAR 0 15
40797: PUSH
40798: LD_INT 2
40800: ARRAY
40801: ST_TO_ADDR
// for i = 1 to hexes do
40802: LD_ADDR_VAR 0 7
40806: PUSH
40807: DOUBLE
40808: LD_INT 1
40810: DEC
40811: ST_TO_ADDR
40812: LD_VAR 0 12
40816: PUSH
40817: FOR_TO
40818: IFFALSE 41148
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40820: LD_VAR 0 12
40824: PUSH
40825: LD_VAR 0 7
40829: ARRAY
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: PPUSH
40835: LD_VAR 0 12
40839: PUSH
40840: LD_VAR 0 7
40844: ARRAY
40845: PUSH
40846: LD_INT 2
40848: ARRAY
40849: PPUSH
40850: CALL_OW 488
40854: NOT
40855: PUSH
40856: LD_VAR 0 12
40860: PUSH
40861: LD_VAR 0 7
40865: ARRAY
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PPUSH
40871: LD_VAR 0 12
40875: PUSH
40876: LD_VAR 0 7
40880: ARRAY
40881: PUSH
40882: LD_INT 2
40884: ARRAY
40885: PPUSH
40886: CALL_OW 428
40890: PUSH
40891: LD_INT 0
40893: GREATER
40894: OR
40895: PUSH
40896: LD_VAR 0 12
40900: PUSH
40901: LD_VAR 0 7
40905: ARRAY
40906: PUSH
40907: LD_INT 1
40909: ARRAY
40910: PPUSH
40911: LD_VAR 0 12
40915: PUSH
40916: LD_VAR 0 7
40920: ARRAY
40921: PUSH
40922: LD_INT 2
40924: ARRAY
40925: PPUSH
40926: CALL_OW 351
40930: OR
40931: IFFALSE 40937
// exit ;
40933: POP
40934: POP
40935: GO 41229
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40937: LD_ADDR_VAR 0 8
40941: PUSH
40942: LD_VAR 0 12
40946: PUSH
40947: LD_VAR 0 7
40951: ARRAY
40952: PUSH
40953: LD_INT 1
40955: ARRAY
40956: PPUSH
40957: LD_VAR 0 12
40961: PUSH
40962: LD_VAR 0 7
40966: ARRAY
40967: PUSH
40968: LD_INT 2
40970: ARRAY
40971: PPUSH
40972: CALL_OW 546
40976: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40977: LD_VAR 0 8
40981: PUSH
40982: LD_INT 1
40984: ARRAY
40985: PUSH
40986: LD_VAR 0 8
40990: PUSH
40991: LD_INT 2
40993: ARRAY
40994: PUSH
40995: LD_VAR 0 13
40999: PUSH
41000: LD_INT 2
41002: PLUS
41003: GREATER
41004: OR
41005: PUSH
41006: LD_VAR 0 8
41010: PUSH
41011: LD_INT 2
41013: ARRAY
41014: PUSH
41015: LD_VAR 0 13
41019: PUSH
41020: LD_INT 2
41022: MINUS
41023: LESS
41024: OR
41025: PUSH
41026: LD_VAR 0 8
41030: PUSH
41031: LD_INT 3
41033: ARRAY
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 8
41040: PUSH
41041: LD_INT 9
41043: PUSH
41044: LD_INT 10
41046: PUSH
41047: LD_INT 11
41049: PUSH
41050: LD_INT 12
41052: PUSH
41053: LD_INT 13
41055: PUSH
41056: LD_INT 16
41058: PUSH
41059: LD_INT 17
41061: PUSH
41062: LD_INT 18
41064: PUSH
41065: LD_INT 19
41067: PUSH
41068: LD_INT 20
41070: PUSH
41071: LD_INT 21
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: IN
41089: NOT
41090: OR
41091: PUSH
41092: LD_VAR 0 8
41096: PUSH
41097: LD_INT 5
41099: ARRAY
41100: NOT
41101: OR
41102: PUSH
41103: LD_VAR 0 8
41107: PUSH
41108: LD_INT 6
41110: ARRAY
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 7
41120: PUSH
41121: LD_INT 9
41123: PUSH
41124: LD_INT 10
41126: PUSH
41127: LD_INT 11
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: IN
41138: NOT
41139: OR
41140: IFFALSE 41146
// exit ;
41142: POP
41143: POP
41144: GO 41229
// end ;
41146: GO 40817
41148: POP
41149: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41150: LD_VAR 0 9
41154: PPUSH
41155: LD_VAR 0 3
41159: PPUSH
41160: LD_VAR 0 4
41164: PPUSH
41165: LD_INT 20
41167: PPUSH
41168: CALL 33174 0 4
41172: PUSH
41173: LD_INT 4
41175: ARRAY
41176: IFFALSE 41180
// exit ;
41178: GO 41229
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41180: LD_VAR 0 2
41184: PUSH
41185: LD_INT 29
41187: PUSH
41188: LD_INT 30
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: IN
41195: PUSH
41196: LD_VAR 0 3
41200: PPUSH
41201: LD_VAR 0 4
41205: PPUSH
41206: LD_VAR 0 9
41210: PPUSH
41211: CALL_OW 440
41215: NOT
41216: AND
41217: IFFALSE 41221
// exit ;
41219: GO 41229
// result := true ;
41221: LD_ADDR_VAR 0 6
41225: PUSH
41226: LD_INT 1
41228: ST_TO_ADDR
// end ;
41229: LD_VAR 0 6
41233: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41234: LD_INT 0
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
// result = [ ] ;
41294: LD_ADDR_VAR 0 7
41298: PUSH
41299: EMPTY
41300: ST_TO_ADDR
// temp_list = [ ] ;
41301: LD_ADDR_VAR 0 9
41305: PUSH
41306: EMPTY
41307: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41308: LD_VAR 0 4
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: LD_INT 4
41327: PUSH
41328: LD_INT 5
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: IN
41339: NOT
41340: PUSH
41341: LD_VAR 0 1
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: IN
41356: PUSH
41357: LD_VAR 0 5
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 3
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: IN
41376: NOT
41377: AND
41378: OR
41379: IFFALSE 41383
// exit ;
41381: GO 59774
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41383: LD_VAR 0 1
41387: PUSH
41388: LD_INT 6
41390: PUSH
41391: LD_INT 7
41393: PUSH
41394: LD_INT 8
41396: PUSH
41397: LD_INT 13
41399: PUSH
41400: LD_INT 12
41402: PUSH
41403: LD_INT 15
41405: PUSH
41406: LD_INT 11
41408: PUSH
41409: LD_INT 14
41411: PUSH
41412: LD_INT 10
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: IN
41426: IFFALSE 41436
// btype = b_lab ;
41428: LD_ADDR_VAR 0 1
41432: PUSH
41433: LD_INT 6
41435: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41436: LD_VAR 0 6
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: IN
41455: NOT
41456: PUSH
41457: LD_VAR 0 1
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: LD_INT 6
41476: PUSH
41477: LD_INT 36
41479: PUSH
41480: LD_INT 4
41482: PUSH
41483: LD_INT 5
41485: PUSH
41486: LD_INT 31
41488: PUSH
41489: LD_INT 32
41491: PUSH
41492: LD_INT 33
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: IN
41508: NOT
41509: PUSH
41510: LD_VAR 0 6
41514: PUSH
41515: LD_INT 1
41517: EQUAL
41518: AND
41519: OR
41520: PUSH
41521: LD_VAR 0 1
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 3
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: IN
41536: NOT
41537: PUSH
41538: LD_VAR 0 6
41542: PUSH
41543: LD_INT 2
41545: EQUAL
41546: AND
41547: OR
41548: IFFALSE 41558
// mode = 0 ;
41550: LD_ADDR_VAR 0 6
41554: PUSH
41555: LD_INT 0
41557: ST_TO_ADDR
// case mode of 0 :
41558: LD_VAR 0 6
41562: PUSH
41563: LD_INT 0
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41571
41569: GO 53024
41571: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41572: LD_ADDR_VAR 0 11
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41765: LD_ADDR_VAR 0 12
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 3
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41961: LD_ADDR_VAR 0 13
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: NEG
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: NEG
42133: PUSH
42134: LD_INT 3
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42160: LD_ADDR_VAR 0 14
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42356: LD_ADDR_VAR 0 15
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 3
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42549: LD_ADDR_VAR 0 16
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 3
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42742: LD_ADDR_VAR 0 17
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42972: LD_ADDR_VAR 0 18
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43202: LD_ADDR_VAR 0 19
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43432: LD_ADDR_VAR 0 20
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43662: LD_ADDR_VAR 0 21
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43892: LD_ADDR_VAR 0 22
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44122: LD_ADDR_VAR 0 23
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 3
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44402: LD_ADDR_VAR 0 24
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44678: LD_ADDR_VAR 0 25
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44952: LD_ADDR_VAR 0 26
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 3
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45228: LD_ADDR_VAR 0 27
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 3
45461: NEG
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 3
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45508: LD_ADDR_VAR 0 28
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 3
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45790: LD_ADDR_VAR 0 29
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46069: LD_ADDR_VAR 0 30
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 3
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 3
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46347: LD_ADDR_VAR 0 31
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 3
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46625: LD_ADDR_VAR 0 32
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 3
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 3
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46903: LD_ADDR_VAR 0 33
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47182: LD_ADDR_VAR 0 34
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47462: LD_ADDR_VAR 0 35
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47574: LD_ADDR_VAR 0 36
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47686: LD_ADDR_VAR 0 37
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47798: LD_ADDR_VAR 0 38
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47910: LD_ADDR_VAR 0 39
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48022: LD_ADDR_VAR 0 40
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48134: LD_ADDR_VAR 0 41
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: LD_INT 3
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48484: LD_ADDR_VAR 0 42
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 3
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: LD_INT 3
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48834: LD_ADDR_VAR 0 43
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49182: LD_ADDR_VAR 0 44
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 3
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: NEG
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: NEG
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49532: LD_ADDR_VAR 0 45
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 3
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49882: LD_ADDR_VAR 0 46
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50230: LD_ADDR_VAR 0 47
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50381: LD_ADDR_VAR 0 48
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50528: LD_ADDR_VAR 0 49
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50672: LD_ADDR_VAR 0 50
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50816: LD_ADDR_VAR 0 51
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50963: LD_ADDR_VAR 0 52
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51114: LD_ADDR_VAR 0 53
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51344: LD_ADDR_VAR 0 54
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51574: LD_ADDR_VAR 0 55
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51804: LD_ADDR_VAR 0 56
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52034: LD_ADDR_VAR 0 57
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52264: LD_ADDR_VAR 0 58
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52494: LD_ADDR_VAR 0 59
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52582: LD_ADDR_VAR 0 60
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52670: LD_ADDR_VAR 0 61
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52758: LD_ADDR_VAR 0 62
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52846: LD_ADDR_VAR 0 63
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52934: LD_ADDR_VAR 0 64
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// end ; 1 :
53022: GO 58919
53024: LD_INT 1
53026: DOUBLE
53027: EQUAL
53028: IFTRUE 53032
53030: GO 55655
53032: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53033: LD_ADDR_VAR 0 11
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53077: LD_ADDR_VAR 0 12
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53118: LD_ADDR_VAR 0 13
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53158: LD_ADDR_VAR 0 14
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53199: LD_ADDR_VAR 0 15
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53243: LD_ADDR_VAR 0 16
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 3
53274: NEG
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53289: LD_ADDR_VAR 0 17
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53333: LD_ADDR_VAR 0 18
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53374: LD_ADDR_VAR 0 19
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53414: LD_ADDR_VAR 0 20
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53455: LD_ADDR_VAR 0 21
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53499: LD_ADDR_VAR 0 22
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53545: LD_ADDR_VAR 0 23
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 4
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 3
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53589: LD_ADDR_VAR 0 24
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53630: LD_ADDR_VAR 0 25
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 4
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53670: LD_ADDR_VAR 0 26
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53711: LD_ADDR_VAR 0 27
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53755: LD_ADDR_VAR 0 28
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: LD_INT 4
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53801: LD_ADDR_VAR 0 29
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 4
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 4
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 5
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 5
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 4
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 6
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 6
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 5
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53956: LD_ADDR_VAR 0 30
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 4
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 4
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 5
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 5
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 5
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 6
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 6
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54099: LD_ADDR_VAR 0 31
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 4
54146: PUSH
54147: LD_INT 4
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 5
54166: PUSH
54167: LD_INT 4
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 5
54176: PUSH
54177: LD_INT 5
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 4
54186: PUSH
54187: LD_INT 5
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 6
54196: PUSH
54197: LD_INT 5
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 6
54206: PUSH
54207: LD_INT 6
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 5
54216: PUSH
54217: LD_INT 6
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54238: LD_ADDR_VAR 0 32
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 4
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 5
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 6
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 6
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 5
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54381: LD_ADDR_VAR 0 33
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 4
54433: NEG
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 4
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 5
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 5
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 5
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 6
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 6
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54536: LD_ADDR_VAR 0 34
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 3
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: LD_INT 3
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 4
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 4
54591: NEG
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 4
54603: NEG
54604: PUSH
54605: LD_INT 4
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 4
54615: NEG
54616: PUSH
54617: LD_INT 5
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 5
54627: NEG
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 5
54639: NEG
54640: PUSH
54641: LD_INT 5
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 5
54651: NEG
54652: PUSH
54653: LD_INT 6
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 6
54663: NEG
54664: PUSH
54665: LD_INT 5
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 6
54675: NEG
54676: PUSH
54677: LD_INT 6
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54699: LD_ADDR_VAR 0 41
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 3
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54743: LD_ADDR_VAR 0 42
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54784: LD_ADDR_VAR 0 43
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54824: LD_ADDR_VAR 0 44
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54865: LD_ADDR_VAR 0 45
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54909: LD_ADDR_VAR 0 46
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54955: LD_ADDR_VAR 0 47
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54988: LD_ADDR_VAR 0 48
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55019: LD_ADDR_VAR 0 49
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55048: LD_ADDR_VAR 0 50
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55077: LD_ADDR_VAR 0 51
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55108: LD_ADDR_VAR 0 52
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 53
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 3
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55185: LD_ADDR_VAR 0 54
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55226: LD_ADDR_VAR 0 55
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55266: LD_ADDR_VAR 0 56
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55307: LD_ADDR_VAR 0 57
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55351: LD_ADDR_VAR 0 58
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55397: LD_ADDR_VAR 0 59
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55441: LD_ADDR_VAR 0 60
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55482: LD_ADDR_VAR 0 61
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55522: LD_ADDR_VAR 0 62
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55563: LD_ADDR_VAR 0 63
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55607: LD_ADDR_VAR 0 64
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// end ; 2 :
55653: GO 58919
55655: LD_INT 2
55657: DOUBLE
55658: EQUAL
55659: IFTRUE 55663
55661: GO 58918
55663: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55664: LD_ADDR_VAR 0 29
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 4
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 5
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 4
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 5
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 4
55794: PUSH
55795: LD_INT 4
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: LD_INT 4
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 4
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 4
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 4
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 5
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 5
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 5
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 3
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 4
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 4
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 4
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 4
56049: NEG
56050: PUSH
56051: LD_INT 4
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 4
56061: NEG
56062: PUSH
56063: LD_INT 5
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: LD_INT 4
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 3
56085: NEG
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 4
56097: NEG
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 5
56109: NEG
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 5
56121: NEG
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: LD_INT 5
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 5
56145: NEG
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56202: LD_ADDR_VAR 0 30
56206: PUSH
56207: LD_INT 4
56209: PUSH
56210: LD_INT 4
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 4
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 5
56229: PUSH
56230: LD_INT 4
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 5
56239: PUSH
56240: LD_INT 5
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 4
56249: PUSH
56250: LD_INT 5
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: LD_INT 3
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 5
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 5
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 4
56392: NEG
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 5
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 5
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 5
56471: NEG
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 4
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 4
56554: NEG
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 4
56566: NEG
56567: PUSH
56568: LD_INT 4
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 4
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 4
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 5
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 4
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 5
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 3
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 5
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56749: LD_ADDR_VAR 0 31
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 4
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 4
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 5
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 5
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 4
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 4
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 4
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 4
56951: NEG
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 4
56963: NEG
56964: PUSH
56965: LD_INT 5
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 5
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 5
57023: NEG
57024: PUSH
57025: LD_INT 5
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 5
57047: NEG
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 4
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 4
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 5
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 5
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 4
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 5
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57299: LD_ADDR_VAR 0 32
57303: PUSH
57304: LD_INT 4
57306: NEG
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 4
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 4
57351: NEG
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 5
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 5
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 5
57385: NEG
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 4
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 4
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 4
57480: NEG
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 4
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 4
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 5
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 4
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 5
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 5
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 5
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 5
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57846: LD_ADDR_VAR 0 33
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 4
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 4
57865: NEG
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: NEG
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 5
57913: NEG
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 5
57925: NEG
57926: PUSH
57927: LD_INT 5
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: LD_INT 5
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 5
57949: NEG
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 4
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 5
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 4
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 4
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 5
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 5
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58384: LD_ADDR_VAR 0 34
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 5
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 4
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 3
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 4
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 5
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 5
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: PUSH
58587: LD_INT 4
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 5
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 5
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 4
58626: PUSH
58627: LD_INT 5
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: LD_INT 4
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: LD_INT 3
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 5
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 5
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 3
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 4
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 4
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 4
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 5
58825: NEG
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 5
58836: NEG
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 5
58848: NEG
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: ST_TO_ADDR
// end ; end ;
58916: GO 58919
58918: POP
// case btype of b_depot , b_warehouse :
58919: LD_VAR 0 1
58923: PUSH
58924: LD_INT 0
58926: DOUBLE
58927: EQUAL
58928: IFTRUE 58938
58930: LD_INT 1
58932: DOUBLE
58933: EQUAL
58934: IFTRUE 58938
58936: GO 59139
58938: POP
// case nation of nation_american :
58939: LD_VAR 0 5
58943: PUSH
58944: LD_INT 1
58946: DOUBLE
58947: EQUAL
58948: IFTRUE 58952
58950: GO 59008
58952: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58953: LD_ADDR_VAR 0 9
58957: PUSH
58958: LD_VAR 0 11
58962: PUSH
58963: LD_VAR 0 12
58967: PUSH
58968: LD_VAR 0 13
58972: PUSH
58973: LD_VAR 0 14
58977: PUSH
58978: LD_VAR 0 15
58982: PUSH
58983: LD_VAR 0 16
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: PUSH
58996: LD_VAR 0 4
59000: PUSH
59001: LD_INT 1
59003: PLUS
59004: ARRAY
59005: ST_TO_ADDR
59006: GO 59137
59008: LD_INT 2
59010: DOUBLE
59011: EQUAL
59012: IFTRUE 59016
59014: GO 59072
59016: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59017: LD_ADDR_VAR 0 9
59021: PUSH
59022: LD_VAR 0 17
59026: PUSH
59027: LD_VAR 0 18
59031: PUSH
59032: LD_VAR 0 19
59036: PUSH
59037: LD_VAR 0 20
59041: PUSH
59042: LD_VAR 0 21
59046: PUSH
59047: LD_VAR 0 22
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: LD_VAR 0 4
59064: PUSH
59065: LD_INT 1
59067: PLUS
59068: ARRAY
59069: ST_TO_ADDR
59070: GO 59137
59072: LD_INT 3
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59080
59078: GO 59136
59080: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59081: LD_ADDR_VAR 0 9
59085: PUSH
59086: LD_VAR 0 23
59090: PUSH
59091: LD_VAR 0 24
59095: PUSH
59096: LD_VAR 0 25
59100: PUSH
59101: LD_VAR 0 26
59105: PUSH
59106: LD_VAR 0 27
59110: PUSH
59111: LD_VAR 0 28
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: PUSH
59124: LD_VAR 0 4
59128: PUSH
59129: LD_INT 1
59131: PLUS
59132: ARRAY
59133: ST_TO_ADDR
59134: GO 59137
59136: POP
59137: GO 59692
59139: LD_INT 2
59141: DOUBLE
59142: EQUAL
59143: IFTRUE 59153
59145: LD_INT 3
59147: DOUBLE
59148: EQUAL
59149: IFTRUE 59153
59151: GO 59209
59153: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59154: LD_ADDR_VAR 0 9
59158: PUSH
59159: LD_VAR 0 29
59163: PUSH
59164: LD_VAR 0 30
59168: PUSH
59169: LD_VAR 0 31
59173: PUSH
59174: LD_VAR 0 32
59178: PUSH
59179: LD_VAR 0 33
59183: PUSH
59184: LD_VAR 0 34
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: PUSH
59197: LD_VAR 0 4
59201: PUSH
59202: LD_INT 1
59204: PLUS
59205: ARRAY
59206: ST_TO_ADDR
59207: GO 59692
59209: LD_INT 16
59211: DOUBLE
59212: EQUAL
59213: IFTRUE 59271
59215: LD_INT 17
59217: DOUBLE
59218: EQUAL
59219: IFTRUE 59271
59221: LD_INT 18
59223: DOUBLE
59224: EQUAL
59225: IFTRUE 59271
59227: LD_INT 19
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59271
59233: LD_INT 22
59235: DOUBLE
59236: EQUAL
59237: IFTRUE 59271
59239: LD_INT 20
59241: DOUBLE
59242: EQUAL
59243: IFTRUE 59271
59245: LD_INT 21
59247: DOUBLE
59248: EQUAL
59249: IFTRUE 59271
59251: LD_INT 23
59253: DOUBLE
59254: EQUAL
59255: IFTRUE 59271
59257: LD_INT 24
59259: DOUBLE
59260: EQUAL
59261: IFTRUE 59271
59263: LD_INT 25
59265: DOUBLE
59266: EQUAL
59267: IFTRUE 59271
59269: GO 59327
59271: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59272: LD_ADDR_VAR 0 9
59276: PUSH
59277: LD_VAR 0 35
59281: PUSH
59282: LD_VAR 0 36
59286: PUSH
59287: LD_VAR 0 37
59291: PUSH
59292: LD_VAR 0 38
59296: PUSH
59297: LD_VAR 0 39
59301: PUSH
59302: LD_VAR 0 40
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: PUSH
59315: LD_VAR 0 4
59319: PUSH
59320: LD_INT 1
59322: PLUS
59323: ARRAY
59324: ST_TO_ADDR
59325: GO 59692
59327: LD_INT 6
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59383
59333: LD_INT 7
59335: DOUBLE
59336: EQUAL
59337: IFTRUE 59383
59339: LD_INT 8
59341: DOUBLE
59342: EQUAL
59343: IFTRUE 59383
59345: LD_INT 13
59347: DOUBLE
59348: EQUAL
59349: IFTRUE 59383
59351: LD_INT 12
59353: DOUBLE
59354: EQUAL
59355: IFTRUE 59383
59357: LD_INT 15
59359: DOUBLE
59360: EQUAL
59361: IFTRUE 59383
59363: LD_INT 11
59365: DOUBLE
59366: EQUAL
59367: IFTRUE 59383
59369: LD_INT 14
59371: DOUBLE
59372: EQUAL
59373: IFTRUE 59383
59375: LD_INT 10
59377: DOUBLE
59378: EQUAL
59379: IFTRUE 59383
59381: GO 59439
59383: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59384: LD_ADDR_VAR 0 9
59388: PUSH
59389: LD_VAR 0 41
59393: PUSH
59394: LD_VAR 0 42
59398: PUSH
59399: LD_VAR 0 43
59403: PUSH
59404: LD_VAR 0 44
59408: PUSH
59409: LD_VAR 0 45
59413: PUSH
59414: LD_VAR 0 46
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: PUSH
59427: LD_VAR 0 4
59431: PUSH
59432: LD_INT 1
59434: PLUS
59435: ARRAY
59436: ST_TO_ADDR
59437: GO 59692
59439: LD_INT 36
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59447
59445: GO 59503
59447: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59448: LD_ADDR_VAR 0 9
59452: PUSH
59453: LD_VAR 0 47
59457: PUSH
59458: LD_VAR 0 48
59462: PUSH
59463: LD_VAR 0 49
59467: PUSH
59468: LD_VAR 0 50
59472: PUSH
59473: LD_VAR 0 51
59477: PUSH
59478: LD_VAR 0 52
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: PUSH
59491: LD_VAR 0 4
59495: PUSH
59496: LD_INT 1
59498: PLUS
59499: ARRAY
59500: ST_TO_ADDR
59501: GO 59692
59503: LD_INT 4
59505: DOUBLE
59506: EQUAL
59507: IFTRUE 59529
59509: LD_INT 5
59511: DOUBLE
59512: EQUAL
59513: IFTRUE 59529
59515: LD_INT 34
59517: DOUBLE
59518: EQUAL
59519: IFTRUE 59529
59521: LD_INT 37
59523: DOUBLE
59524: EQUAL
59525: IFTRUE 59529
59527: GO 59585
59529: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59530: LD_ADDR_VAR 0 9
59534: PUSH
59535: LD_VAR 0 53
59539: PUSH
59540: LD_VAR 0 54
59544: PUSH
59545: LD_VAR 0 55
59549: PUSH
59550: LD_VAR 0 56
59554: PUSH
59555: LD_VAR 0 57
59559: PUSH
59560: LD_VAR 0 58
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: PUSH
59573: LD_VAR 0 4
59577: PUSH
59578: LD_INT 1
59580: PLUS
59581: ARRAY
59582: ST_TO_ADDR
59583: GO 59692
59585: LD_INT 31
59587: DOUBLE
59588: EQUAL
59589: IFTRUE 59635
59591: LD_INT 32
59593: DOUBLE
59594: EQUAL
59595: IFTRUE 59635
59597: LD_INT 33
59599: DOUBLE
59600: EQUAL
59601: IFTRUE 59635
59603: LD_INT 27
59605: DOUBLE
59606: EQUAL
59607: IFTRUE 59635
59609: LD_INT 26
59611: DOUBLE
59612: EQUAL
59613: IFTRUE 59635
59615: LD_INT 28
59617: DOUBLE
59618: EQUAL
59619: IFTRUE 59635
59621: LD_INT 29
59623: DOUBLE
59624: EQUAL
59625: IFTRUE 59635
59627: LD_INT 30
59629: DOUBLE
59630: EQUAL
59631: IFTRUE 59635
59633: GO 59691
59635: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59636: LD_ADDR_VAR 0 9
59640: PUSH
59641: LD_VAR 0 59
59645: PUSH
59646: LD_VAR 0 60
59650: PUSH
59651: LD_VAR 0 61
59655: PUSH
59656: LD_VAR 0 62
59660: PUSH
59661: LD_VAR 0 63
59665: PUSH
59666: LD_VAR 0 64
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: PUSH
59679: LD_VAR 0 4
59683: PUSH
59684: LD_INT 1
59686: PLUS
59687: ARRAY
59688: ST_TO_ADDR
59689: GO 59692
59691: POP
// temp_list2 = [ ] ;
59692: LD_ADDR_VAR 0 10
59696: PUSH
59697: EMPTY
59698: ST_TO_ADDR
// for i in temp_list do
59699: LD_ADDR_VAR 0 8
59703: PUSH
59704: LD_VAR 0 9
59708: PUSH
59709: FOR_IN
59710: IFFALSE 59762
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59712: LD_ADDR_VAR 0 10
59716: PUSH
59717: LD_VAR 0 10
59721: PUSH
59722: LD_VAR 0 8
59726: PUSH
59727: LD_INT 1
59729: ARRAY
59730: PUSH
59731: LD_VAR 0 2
59735: PLUS
59736: PUSH
59737: LD_VAR 0 8
59741: PUSH
59742: LD_INT 2
59744: ARRAY
59745: PUSH
59746: LD_VAR 0 3
59750: PLUS
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: ADD
59759: ST_TO_ADDR
59760: GO 59709
59762: POP
59763: POP
// result = temp_list2 ;
59764: LD_ADDR_VAR 0 7
59768: PUSH
59769: LD_VAR 0 10
59773: ST_TO_ADDR
// end ;
59774: LD_VAR 0 7
59778: RET
// export function EnemyInRange ( unit , dist ) ; begin
59779: LD_INT 0
59781: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59782: LD_ADDR_VAR 0 3
59786: PUSH
59787: LD_VAR 0 1
59791: PPUSH
59792: CALL_OW 255
59796: PPUSH
59797: LD_VAR 0 1
59801: PPUSH
59802: CALL_OW 250
59806: PPUSH
59807: LD_VAR 0 1
59811: PPUSH
59812: CALL_OW 251
59816: PPUSH
59817: LD_VAR 0 2
59821: PPUSH
59822: CALL 33174 0 4
59826: PUSH
59827: LD_INT 4
59829: ARRAY
59830: ST_TO_ADDR
// end ;
59831: LD_VAR 0 3
59835: RET
// export function PlayerSeeMe ( unit ) ; begin
59836: LD_INT 0
59838: PPUSH
// result := See ( your_side , unit ) ;
59839: LD_ADDR_VAR 0 2
59843: PUSH
59844: LD_OWVAR 2
59848: PPUSH
59849: LD_VAR 0 1
59853: PPUSH
59854: CALL_OW 292
59858: ST_TO_ADDR
// end ;
59859: LD_VAR 0 2
59863: RET
// export function ReverseDir ( unit ) ; begin
59864: LD_INT 0
59866: PPUSH
// if not unit then
59867: LD_VAR 0 1
59871: NOT
59872: IFFALSE 59876
// exit ;
59874: GO 59899
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59876: LD_ADDR_VAR 0 2
59880: PUSH
59881: LD_VAR 0 1
59885: PPUSH
59886: CALL_OW 254
59890: PUSH
59891: LD_INT 3
59893: PLUS
59894: PUSH
59895: LD_INT 6
59897: MOD
59898: ST_TO_ADDR
// end ;
59899: LD_VAR 0 2
59903: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59904: LD_INT 0
59906: PPUSH
59907: PPUSH
59908: PPUSH
59909: PPUSH
59910: PPUSH
// if not hexes then
59911: LD_VAR 0 2
59915: NOT
59916: IFFALSE 59920
// exit ;
59918: GO 60068
// dist := 9999 ;
59920: LD_ADDR_VAR 0 5
59924: PUSH
59925: LD_INT 9999
59927: ST_TO_ADDR
// for i = 1 to hexes do
59928: LD_ADDR_VAR 0 4
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_VAR 0 2
59942: PUSH
59943: FOR_TO
59944: IFFALSE 60056
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59946: LD_VAR 0 1
59950: PPUSH
59951: LD_VAR 0 2
59955: PUSH
59956: LD_VAR 0 4
59960: ARRAY
59961: PUSH
59962: LD_INT 1
59964: ARRAY
59965: PPUSH
59966: LD_VAR 0 2
59970: PUSH
59971: LD_VAR 0 4
59975: ARRAY
59976: PUSH
59977: LD_INT 2
59979: ARRAY
59980: PPUSH
59981: CALL_OW 297
59985: PUSH
59986: LD_VAR 0 5
59990: LESS
59991: IFFALSE 60054
// begin hex := hexes [ i ] ;
59993: LD_ADDR_VAR 0 7
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_VAR 0 4
60007: ARRAY
60008: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60009: LD_ADDR_VAR 0 5
60013: PUSH
60014: LD_VAR 0 1
60018: PPUSH
60019: LD_VAR 0 2
60023: PUSH
60024: LD_VAR 0 4
60028: ARRAY
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_VAR 0 4
60043: ARRAY
60044: PUSH
60045: LD_INT 2
60047: ARRAY
60048: PPUSH
60049: CALL_OW 297
60053: ST_TO_ADDR
// end ; end ;
60054: GO 59943
60056: POP
60057: POP
// result := hex ;
60058: LD_ADDR_VAR 0 3
60062: PUSH
60063: LD_VAR 0 7
60067: ST_TO_ADDR
// end ;
60068: LD_VAR 0 3
60072: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60073: LD_INT 0
60075: PPUSH
60076: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60077: LD_VAR 0 1
60081: NOT
60082: PUSH
60083: LD_VAR 0 1
60087: PUSH
60088: LD_INT 21
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 23
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PPUSH
60112: CALL_OW 69
60116: IN
60117: NOT
60118: OR
60119: IFFALSE 60123
// exit ;
60121: GO 60170
// for i = 1 to 3 do
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: DOUBLE
60129: LD_INT 1
60131: DEC
60132: ST_TO_ADDR
60133: LD_INT 3
60135: PUSH
60136: FOR_TO
60137: IFFALSE 60168
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60139: LD_VAR 0 1
60143: PPUSH
60144: CALL_OW 250
60148: PPUSH
60149: LD_VAR 0 1
60153: PPUSH
60154: CALL_OW 251
60158: PPUSH
60159: LD_INT 1
60161: PPUSH
60162: CALL_OW 453
60166: GO 60136
60168: POP
60169: POP
// end ;
60170: LD_VAR 0 2
60174: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60175: LD_INT 0
60177: PPUSH
60178: PPUSH
60179: PPUSH
60180: PPUSH
60181: PPUSH
60182: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60183: LD_VAR 0 1
60187: NOT
60188: PUSH
60189: LD_VAR 0 2
60193: NOT
60194: OR
60195: PUSH
60196: LD_VAR 0 1
60200: PPUSH
60201: CALL_OW 314
60205: OR
60206: IFFALSE 60210
// exit ;
60208: GO 60651
// x := GetX ( enemy_unit ) ;
60210: LD_ADDR_VAR 0 7
60214: PUSH
60215: LD_VAR 0 2
60219: PPUSH
60220: CALL_OW 250
60224: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60225: LD_ADDR_VAR 0 8
60229: PUSH
60230: LD_VAR 0 2
60234: PPUSH
60235: CALL_OW 251
60239: ST_TO_ADDR
// if not x or not y then
60240: LD_VAR 0 7
60244: NOT
60245: PUSH
60246: LD_VAR 0 8
60250: NOT
60251: OR
60252: IFFALSE 60256
// exit ;
60254: GO 60651
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60256: LD_ADDR_VAR 0 6
60260: PUSH
60261: LD_VAR 0 7
60265: PPUSH
60266: LD_INT 0
60268: PPUSH
60269: LD_INT 4
60271: PPUSH
60272: CALL_OW 272
60276: PUSH
60277: LD_VAR 0 8
60281: PPUSH
60282: LD_INT 0
60284: PPUSH
60285: LD_INT 4
60287: PPUSH
60288: CALL_OW 273
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_VAR 0 7
60301: PPUSH
60302: LD_INT 1
60304: PPUSH
60305: LD_INT 4
60307: PPUSH
60308: CALL_OW 272
60312: PUSH
60313: LD_VAR 0 8
60317: PPUSH
60318: LD_INT 1
60320: PPUSH
60321: LD_INT 4
60323: PPUSH
60324: CALL_OW 273
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 7
60337: PPUSH
60338: LD_INT 2
60340: PPUSH
60341: LD_INT 4
60343: PPUSH
60344: CALL_OW 272
60348: PUSH
60349: LD_VAR 0 8
60353: PPUSH
60354: LD_INT 2
60356: PPUSH
60357: LD_INT 4
60359: PPUSH
60360: CALL_OW 273
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 7
60373: PPUSH
60374: LD_INT 3
60376: PPUSH
60377: LD_INT 4
60379: PPUSH
60380: CALL_OW 272
60384: PUSH
60385: LD_VAR 0 8
60389: PPUSH
60390: LD_INT 3
60392: PPUSH
60393: LD_INT 4
60395: PPUSH
60396: CALL_OW 273
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_VAR 0 7
60409: PPUSH
60410: LD_INT 4
60412: PPUSH
60413: LD_INT 4
60415: PPUSH
60416: CALL_OW 272
60420: PUSH
60421: LD_VAR 0 8
60425: PPUSH
60426: LD_INT 4
60428: PPUSH
60429: LD_INT 4
60431: PPUSH
60432: CALL_OW 273
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_VAR 0 7
60445: PPUSH
60446: LD_INT 5
60448: PPUSH
60449: LD_INT 4
60451: PPUSH
60452: CALL_OW 272
60456: PUSH
60457: LD_VAR 0 8
60461: PPUSH
60462: LD_INT 5
60464: PPUSH
60465: LD_INT 4
60467: PPUSH
60468: CALL_OW 273
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// for i = tmp downto 1 do
60485: LD_ADDR_VAR 0 4
60489: PUSH
60490: DOUBLE
60491: LD_VAR 0 6
60495: INC
60496: ST_TO_ADDR
60497: LD_INT 1
60499: PUSH
60500: FOR_DOWNTO
60501: IFFALSE 60602
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60503: LD_VAR 0 6
60507: PUSH
60508: LD_VAR 0 4
60512: ARRAY
60513: PUSH
60514: LD_INT 1
60516: ARRAY
60517: PPUSH
60518: LD_VAR 0 6
60522: PUSH
60523: LD_VAR 0 4
60527: ARRAY
60528: PUSH
60529: LD_INT 2
60531: ARRAY
60532: PPUSH
60533: CALL_OW 488
60537: NOT
60538: PUSH
60539: LD_VAR 0 6
60543: PUSH
60544: LD_VAR 0 4
60548: ARRAY
60549: PUSH
60550: LD_INT 1
60552: ARRAY
60553: PPUSH
60554: LD_VAR 0 6
60558: PUSH
60559: LD_VAR 0 4
60563: ARRAY
60564: PUSH
60565: LD_INT 2
60567: ARRAY
60568: PPUSH
60569: CALL_OW 428
60573: PUSH
60574: LD_INT 0
60576: NONEQUAL
60577: OR
60578: IFFALSE 60600
// tmp := Delete ( tmp , i ) ;
60580: LD_ADDR_VAR 0 6
60584: PUSH
60585: LD_VAR 0 6
60589: PPUSH
60590: LD_VAR 0 4
60594: PPUSH
60595: CALL_OW 3
60599: ST_TO_ADDR
60600: GO 60500
60602: POP
60603: POP
// j := GetClosestHex ( unit , tmp ) ;
60604: LD_ADDR_VAR 0 5
60608: PUSH
60609: LD_VAR 0 1
60613: PPUSH
60614: LD_VAR 0 6
60618: PPUSH
60619: CALL 59904 0 2
60623: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60624: LD_VAR 0 1
60628: PPUSH
60629: LD_VAR 0 5
60633: PUSH
60634: LD_INT 1
60636: ARRAY
60637: PPUSH
60638: LD_VAR 0 5
60642: PUSH
60643: LD_INT 2
60645: ARRAY
60646: PPUSH
60647: CALL_OW 111
// end ;
60651: LD_VAR 0 3
60655: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60656: LD_INT 0
60658: PPUSH
60659: PPUSH
60660: PPUSH
// uc_side = 0 ;
60661: LD_ADDR_OWVAR 20
60665: PUSH
60666: LD_INT 0
60668: ST_TO_ADDR
// uc_nation = 0 ;
60669: LD_ADDR_OWVAR 21
60673: PUSH
60674: LD_INT 0
60676: ST_TO_ADDR
// InitHc_All ( ) ;
60677: CALL_OW 584
// InitVc ;
60681: CALL_OW 20
// if mastodonts then
60685: LD_VAR 0 6
60689: IFFALSE 60756
// for i = 1 to mastodonts do
60691: LD_ADDR_VAR 0 11
60695: PUSH
60696: DOUBLE
60697: LD_INT 1
60699: DEC
60700: ST_TO_ADDR
60701: LD_VAR 0 6
60705: PUSH
60706: FOR_TO
60707: IFFALSE 60754
// begin vc_chassis := 31 ;
60709: LD_ADDR_OWVAR 37
60713: PUSH
60714: LD_INT 31
60716: ST_TO_ADDR
// vc_control := control_rider ;
60717: LD_ADDR_OWVAR 38
60721: PUSH
60722: LD_INT 4
60724: ST_TO_ADDR
// animal := CreateVehicle ;
60725: LD_ADDR_VAR 0 12
60729: PUSH
60730: CALL_OW 45
60734: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60735: LD_VAR 0 12
60739: PPUSH
60740: LD_VAR 0 8
60744: PPUSH
60745: LD_INT 0
60747: PPUSH
60748: CALL 62944 0 3
// end ;
60752: GO 60706
60754: POP
60755: POP
// if horses then
60756: LD_VAR 0 5
60760: IFFALSE 60827
// for i = 1 to horses do
60762: LD_ADDR_VAR 0 11
60766: PUSH
60767: DOUBLE
60768: LD_INT 1
60770: DEC
60771: ST_TO_ADDR
60772: LD_VAR 0 5
60776: PUSH
60777: FOR_TO
60778: IFFALSE 60825
// begin hc_class := 21 ;
60780: LD_ADDR_OWVAR 28
60784: PUSH
60785: LD_INT 21
60787: ST_TO_ADDR
// hc_gallery :=  ;
60788: LD_ADDR_OWVAR 33
60792: PUSH
60793: LD_STRING 
60795: ST_TO_ADDR
// animal := CreateHuman ;
60796: LD_ADDR_VAR 0 12
60800: PUSH
60801: CALL_OW 44
60805: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60806: LD_VAR 0 12
60810: PPUSH
60811: LD_VAR 0 8
60815: PPUSH
60816: LD_INT 0
60818: PPUSH
60819: CALL 62944 0 3
// end ;
60823: GO 60777
60825: POP
60826: POP
// if birds then
60827: LD_VAR 0 1
60831: IFFALSE 60898
// for i = 1 to birds do
60833: LD_ADDR_VAR 0 11
60837: PUSH
60838: DOUBLE
60839: LD_INT 1
60841: DEC
60842: ST_TO_ADDR
60843: LD_VAR 0 1
60847: PUSH
60848: FOR_TO
60849: IFFALSE 60896
// begin hc_class = 18 ;
60851: LD_ADDR_OWVAR 28
60855: PUSH
60856: LD_INT 18
60858: ST_TO_ADDR
// hc_gallery =  ;
60859: LD_ADDR_OWVAR 33
60863: PUSH
60864: LD_STRING 
60866: ST_TO_ADDR
// animal := CreateHuman ;
60867: LD_ADDR_VAR 0 12
60871: PUSH
60872: CALL_OW 44
60876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60877: LD_VAR 0 12
60881: PPUSH
60882: LD_VAR 0 8
60886: PPUSH
60887: LD_INT 0
60889: PPUSH
60890: CALL 62944 0 3
// end ;
60894: GO 60848
60896: POP
60897: POP
// if tigers then
60898: LD_VAR 0 2
60902: IFFALSE 60986
// for i = 1 to tigers do
60904: LD_ADDR_VAR 0 11
60908: PUSH
60909: DOUBLE
60910: LD_INT 1
60912: DEC
60913: ST_TO_ADDR
60914: LD_VAR 0 2
60918: PUSH
60919: FOR_TO
60920: IFFALSE 60984
// begin hc_class = class_tiger ;
60922: LD_ADDR_OWVAR 28
60926: PUSH
60927: LD_INT 14
60929: ST_TO_ADDR
// hc_gallery =  ;
60930: LD_ADDR_OWVAR 33
60934: PUSH
60935: LD_STRING 
60937: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60938: LD_ADDR_OWVAR 35
60942: PUSH
60943: LD_INT 7
60945: NEG
60946: PPUSH
60947: LD_INT 7
60949: PPUSH
60950: CALL_OW 12
60954: ST_TO_ADDR
// animal := CreateHuman ;
60955: LD_ADDR_VAR 0 12
60959: PUSH
60960: CALL_OW 44
60964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60965: LD_VAR 0 12
60969: PPUSH
60970: LD_VAR 0 8
60974: PPUSH
60975: LD_INT 0
60977: PPUSH
60978: CALL 62944 0 3
// end ;
60982: GO 60919
60984: POP
60985: POP
// if apemans then
60986: LD_VAR 0 3
60990: IFFALSE 61113
// for i = 1 to apemans do
60992: LD_ADDR_VAR 0 11
60996: PUSH
60997: DOUBLE
60998: LD_INT 1
61000: DEC
61001: ST_TO_ADDR
61002: LD_VAR 0 3
61006: PUSH
61007: FOR_TO
61008: IFFALSE 61111
// begin hc_class = class_apeman ;
61010: LD_ADDR_OWVAR 28
61014: PUSH
61015: LD_INT 12
61017: ST_TO_ADDR
// hc_gallery =  ;
61018: LD_ADDR_OWVAR 33
61022: PUSH
61023: LD_STRING 
61025: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61026: LD_ADDR_OWVAR 35
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PPUSH
61035: LD_INT 2
61037: PPUSH
61038: CALL_OW 12
61042: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61043: LD_ADDR_OWVAR 31
61047: PUSH
61048: LD_INT 1
61050: PPUSH
61051: LD_INT 3
61053: PPUSH
61054: CALL_OW 12
61058: PUSH
61059: LD_INT 1
61061: PPUSH
61062: LD_INT 3
61064: PPUSH
61065: CALL_OW 12
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: ST_TO_ADDR
// animal := CreateHuman ;
61082: LD_ADDR_VAR 0 12
61086: PUSH
61087: CALL_OW 44
61091: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61092: LD_VAR 0 12
61096: PPUSH
61097: LD_VAR 0 8
61101: PPUSH
61102: LD_INT 0
61104: PPUSH
61105: CALL 62944 0 3
// end ;
61109: GO 61007
61111: POP
61112: POP
// if enchidnas then
61113: LD_VAR 0 4
61117: IFFALSE 61184
// for i = 1 to enchidnas do
61119: LD_ADDR_VAR 0 11
61123: PUSH
61124: DOUBLE
61125: LD_INT 1
61127: DEC
61128: ST_TO_ADDR
61129: LD_VAR 0 4
61133: PUSH
61134: FOR_TO
61135: IFFALSE 61182
// begin hc_class = 13 ;
61137: LD_ADDR_OWVAR 28
61141: PUSH
61142: LD_INT 13
61144: ST_TO_ADDR
// hc_gallery =  ;
61145: LD_ADDR_OWVAR 33
61149: PUSH
61150: LD_STRING 
61152: ST_TO_ADDR
// animal := CreateHuman ;
61153: LD_ADDR_VAR 0 12
61157: PUSH
61158: CALL_OW 44
61162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61163: LD_VAR 0 12
61167: PPUSH
61168: LD_VAR 0 8
61172: PPUSH
61173: LD_INT 0
61175: PPUSH
61176: CALL 62944 0 3
// end ;
61180: GO 61134
61182: POP
61183: POP
// if fishes then
61184: LD_VAR 0 7
61188: IFFALSE 61255
// for i = 1 to fishes do
61190: LD_ADDR_VAR 0 11
61194: PUSH
61195: DOUBLE
61196: LD_INT 1
61198: DEC
61199: ST_TO_ADDR
61200: LD_VAR 0 7
61204: PUSH
61205: FOR_TO
61206: IFFALSE 61253
// begin hc_class = 20 ;
61208: LD_ADDR_OWVAR 28
61212: PUSH
61213: LD_INT 20
61215: ST_TO_ADDR
// hc_gallery =  ;
61216: LD_ADDR_OWVAR 33
61220: PUSH
61221: LD_STRING 
61223: ST_TO_ADDR
// animal := CreateHuman ;
61224: LD_ADDR_VAR 0 12
61228: PUSH
61229: CALL_OW 44
61233: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61234: LD_VAR 0 12
61238: PPUSH
61239: LD_VAR 0 9
61243: PPUSH
61244: LD_INT 0
61246: PPUSH
61247: CALL 62944 0 3
// end ;
61251: GO 61205
61253: POP
61254: POP
// end ;
61255: LD_VAR 0 10
61259: RET
// export function WantHeal ( sci , unit ) ; begin
61260: LD_INT 0
61262: PPUSH
// if GetTaskList ( sci ) > 0 then
61263: LD_VAR 0 1
61267: PPUSH
61268: CALL_OW 437
61272: PUSH
61273: LD_INT 0
61275: GREATER
61276: IFFALSE 61346
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61278: LD_VAR 0 1
61282: PPUSH
61283: CALL_OW 437
61287: PUSH
61288: LD_INT 1
61290: ARRAY
61291: PUSH
61292: LD_INT 1
61294: ARRAY
61295: PUSH
61296: LD_STRING l
61298: EQUAL
61299: PUSH
61300: LD_VAR 0 1
61304: PPUSH
61305: CALL_OW 437
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: PUSH
61314: LD_INT 4
61316: ARRAY
61317: PUSH
61318: LD_VAR 0 2
61322: EQUAL
61323: AND
61324: IFFALSE 61336
// result := true else
61326: LD_ADDR_VAR 0 3
61330: PUSH
61331: LD_INT 1
61333: ST_TO_ADDR
61334: GO 61344
// result := false ;
61336: LD_ADDR_VAR 0 3
61340: PUSH
61341: LD_INT 0
61343: ST_TO_ADDR
// end else
61344: GO 61354
// result := false ;
61346: LD_ADDR_VAR 0 3
61350: PUSH
61351: LD_INT 0
61353: ST_TO_ADDR
// end ;
61354: LD_VAR 0 3
61358: RET
// export function HealTarget ( sci ) ; begin
61359: LD_INT 0
61361: PPUSH
// if not sci then
61362: LD_VAR 0 1
61366: NOT
61367: IFFALSE 61371
// exit ;
61369: GO 61436
// result := 0 ;
61371: LD_ADDR_VAR 0 2
61375: PUSH
61376: LD_INT 0
61378: ST_TO_ADDR
// if GetTaskList ( sci ) then
61379: LD_VAR 0 1
61383: PPUSH
61384: CALL_OW 437
61388: IFFALSE 61436
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61390: LD_VAR 0 1
61394: PPUSH
61395: CALL_OW 437
61399: PUSH
61400: LD_INT 1
61402: ARRAY
61403: PUSH
61404: LD_INT 1
61406: ARRAY
61407: PUSH
61408: LD_STRING l
61410: EQUAL
61411: IFFALSE 61436
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61413: LD_ADDR_VAR 0 2
61417: PUSH
61418: LD_VAR 0 1
61422: PPUSH
61423: CALL_OW 437
61427: PUSH
61428: LD_INT 1
61430: ARRAY
61431: PUSH
61432: LD_INT 4
61434: ARRAY
61435: ST_TO_ADDR
// end ;
61436: LD_VAR 0 2
61440: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61441: LD_INT 0
61443: PPUSH
61444: PPUSH
61445: PPUSH
61446: PPUSH
// if not base_units then
61447: LD_VAR 0 1
61451: NOT
61452: IFFALSE 61456
// exit ;
61454: GO 61543
// result := false ;
61456: LD_ADDR_VAR 0 2
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61464: LD_ADDR_VAR 0 5
61468: PUSH
61469: LD_VAR 0 1
61473: PPUSH
61474: LD_INT 21
61476: PUSH
61477: LD_INT 3
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PPUSH
61484: CALL_OW 72
61488: ST_TO_ADDR
// if not tmp then
61489: LD_VAR 0 5
61493: NOT
61494: IFFALSE 61498
// exit ;
61496: GO 61543
// for i in tmp do
61498: LD_ADDR_VAR 0 3
61502: PUSH
61503: LD_VAR 0 5
61507: PUSH
61508: FOR_IN
61509: IFFALSE 61541
// begin result := EnemyInRange ( i , 22 ) ;
61511: LD_ADDR_VAR 0 2
61515: PUSH
61516: LD_VAR 0 3
61520: PPUSH
61521: LD_INT 22
61523: PPUSH
61524: CALL 59779 0 2
61528: ST_TO_ADDR
// if result then
61529: LD_VAR 0 2
61533: IFFALSE 61539
// exit ;
61535: POP
61536: POP
61537: GO 61543
// end ;
61539: GO 61508
61541: POP
61542: POP
// end ;
61543: LD_VAR 0 2
61547: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
// if not units then
61552: LD_VAR 0 1
61556: NOT
61557: IFFALSE 61561
// exit ;
61559: GO 61631
// result := [ ] ;
61561: LD_ADDR_VAR 0 3
61565: PUSH
61566: EMPTY
61567: ST_TO_ADDR
// for i in units do
61568: LD_ADDR_VAR 0 4
61572: PUSH
61573: LD_VAR 0 1
61577: PUSH
61578: FOR_IN
61579: IFFALSE 61629
// if GetTag ( i ) = tag then
61581: LD_VAR 0 4
61585: PPUSH
61586: CALL_OW 110
61590: PUSH
61591: LD_VAR 0 2
61595: EQUAL
61596: IFFALSE 61627
// result := Insert ( result , result + 1 , i ) ;
61598: LD_ADDR_VAR 0 3
61602: PUSH
61603: LD_VAR 0 3
61607: PPUSH
61608: LD_VAR 0 3
61612: PUSH
61613: LD_INT 1
61615: PLUS
61616: PPUSH
61617: LD_VAR 0 4
61621: PPUSH
61622: CALL_OW 2
61626: ST_TO_ADDR
61627: GO 61578
61629: POP
61630: POP
// end ;
61631: LD_VAR 0 3
61635: RET
// export function IsDriver ( un ) ; begin
61636: LD_INT 0
61638: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61639: LD_ADDR_VAR 0 2
61643: PUSH
61644: LD_VAR 0 1
61648: PUSH
61649: LD_INT 55
61651: PUSH
61652: EMPTY
61653: LIST
61654: PPUSH
61655: CALL_OW 69
61659: IN
61660: ST_TO_ADDR
// end ;
61661: LD_VAR 0 2
61665: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61666: LD_INT 0
61668: PPUSH
61669: PPUSH
// list := [ ] ;
61670: LD_ADDR_VAR 0 5
61674: PUSH
61675: EMPTY
61676: ST_TO_ADDR
// case d of 0 :
61677: LD_VAR 0 3
61681: PUSH
61682: LD_INT 0
61684: DOUBLE
61685: EQUAL
61686: IFTRUE 61690
61688: GO 61823
61690: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61691: LD_ADDR_VAR 0 5
61695: PUSH
61696: LD_VAR 0 1
61700: PUSH
61701: LD_INT 4
61703: MINUS
61704: PUSH
61705: LD_VAR 0 2
61709: PUSH
61710: LD_INT 4
61712: MINUS
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: PUSH
61722: LD_VAR 0 1
61726: PUSH
61727: LD_INT 3
61729: MINUS
61730: PUSH
61731: LD_VAR 0 2
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: LD_INT 4
61751: PLUS
61752: PUSH
61753: LD_VAR 0 2
61757: PUSH
61758: LD_INT 4
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: LIST
61765: PUSH
61766: LD_VAR 0 1
61770: PUSH
61771: LD_INT 3
61773: PLUS
61774: PUSH
61775: LD_VAR 0 2
61779: PUSH
61780: LD_INT 3
61782: PLUS
61783: PUSH
61784: LD_INT 5
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: PUSH
61792: LD_VAR 0 1
61796: PUSH
61797: LD_VAR 0 2
61801: PUSH
61802: LD_INT 4
61804: PLUS
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// end ; 1 :
61821: GO 62521
61823: LD_INT 1
61825: DOUBLE
61826: EQUAL
61827: IFTRUE 61831
61829: GO 61964
61831: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61832: LD_ADDR_VAR 0 5
61836: PUSH
61837: LD_VAR 0 1
61841: PUSH
61842: LD_VAR 0 2
61846: PUSH
61847: LD_INT 4
61849: MINUS
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: LIST
61858: PUSH
61859: LD_VAR 0 1
61863: PUSH
61864: LD_INT 3
61866: MINUS
61867: PUSH
61868: LD_VAR 0 2
61872: PUSH
61873: LD_INT 3
61875: MINUS
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: PUSH
61885: LD_VAR 0 1
61889: PUSH
61890: LD_INT 4
61892: MINUS
61893: PUSH
61894: LD_VAR 0 2
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: PUSH
61907: LD_VAR 0 1
61911: PUSH
61912: LD_VAR 0 2
61916: PUSH
61917: LD_INT 3
61919: PLUS
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: PUSH
61929: LD_VAR 0 1
61933: PUSH
61934: LD_INT 4
61936: PLUS
61937: PUSH
61938: LD_VAR 0 2
61942: PUSH
61943: LD_INT 4
61945: PLUS
61946: PUSH
61947: LD_INT 5
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: ST_TO_ADDR
// end ; 2 :
61962: GO 62521
61964: LD_INT 2
61966: DOUBLE
61967: EQUAL
61968: IFTRUE 61972
61970: GO 62101
61972: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61973: LD_ADDR_VAR 0 5
61977: PUSH
61978: LD_VAR 0 1
61982: PUSH
61983: LD_VAR 0 2
61987: PUSH
61988: LD_INT 3
61990: MINUS
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: PUSH
62000: LD_VAR 0 1
62004: PUSH
62005: LD_INT 4
62007: PLUS
62008: PUSH
62009: LD_VAR 0 2
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: PUSH
62022: LD_VAR 0 1
62026: PUSH
62027: LD_VAR 0 2
62031: PUSH
62032: LD_INT 4
62034: PLUS
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: PUSH
62044: LD_VAR 0 1
62048: PUSH
62049: LD_INT 3
62051: MINUS
62052: PUSH
62053: LD_VAR 0 2
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: PUSH
62066: LD_VAR 0 1
62070: PUSH
62071: LD_INT 4
62073: MINUS
62074: PUSH
62075: LD_VAR 0 2
62079: PUSH
62080: LD_INT 4
62082: MINUS
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: ST_TO_ADDR
// end ; 3 :
62099: GO 62521
62101: LD_INT 3
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62109
62107: GO 62242
62109: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62110: LD_ADDR_VAR 0 5
62114: PUSH
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 3
62122: PLUS
62123: PUSH
62124: LD_VAR 0 2
62128: PUSH
62129: LD_INT 4
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 4
62144: PLUS
62145: PUSH
62146: LD_VAR 0 2
62150: PUSH
62151: LD_INT 4
62153: PLUS
62154: PUSH
62155: LD_INT 5
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: LD_VAR 0 1
62167: PUSH
62168: LD_INT 4
62170: MINUS
62171: PUSH
62172: LD_VAR 0 2
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: PUSH
62185: LD_VAR 0 1
62189: PUSH
62190: LD_VAR 0 2
62194: PUSH
62195: LD_INT 4
62197: MINUS
62198: PUSH
62199: LD_INT 3
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: PUSH
62207: LD_VAR 0 1
62211: PUSH
62212: LD_INT 3
62214: MINUS
62215: PUSH
62216: LD_VAR 0 2
62220: PUSH
62221: LD_INT 3
62223: MINUS
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: ST_TO_ADDR
// end ; 4 :
62240: GO 62521
62242: LD_INT 4
62244: DOUBLE
62245: EQUAL
62246: IFTRUE 62250
62248: GO 62383
62250: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62251: LD_ADDR_VAR 0 5
62255: PUSH
62256: LD_VAR 0 1
62260: PUSH
62261: LD_VAR 0 2
62265: PUSH
62266: LD_INT 4
62268: PLUS
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: PUSH
62278: LD_VAR 0 1
62282: PUSH
62283: LD_INT 3
62285: PLUS
62286: PUSH
62287: LD_VAR 0 2
62291: PUSH
62292: LD_INT 3
62294: PLUS
62295: PUSH
62296: LD_INT 5
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: LIST
62303: PUSH
62304: LD_VAR 0 1
62308: PUSH
62309: LD_INT 4
62311: PLUS
62312: PUSH
62313: LD_VAR 0 2
62317: PUSH
62318: LD_INT 4
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: PUSH
62326: LD_VAR 0 1
62330: PUSH
62331: LD_VAR 0 2
62335: PUSH
62336: LD_INT 3
62338: MINUS
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: LIST
62347: PUSH
62348: LD_VAR 0 1
62352: PUSH
62353: LD_INT 4
62355: MINUS
62356: PUSH
62357: LD_VAR 0 2
62361: PUSH
62362: LD_INT 4
62364: MINUS
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// end ; 5 :
62381: GO 62521
62383: LD_INT 5
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62391
62389: GO 62520
62391: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62392: LD_ADDR_VAR 0 5
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: LD_INT 4
62404: MINUS
62405: PUSH
62406: LD_VAR 0 2
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 1
62423: PUSH
62424: LD_VAR 0 2
62428: PUSH
62429: LD_INT 4
62431: MINUS
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: PUSH
62441: LD_VAR 0 1
62445: PUSH
62446: LD_INT 4
62448: PLUS
62449: PUSH
62450: LD_VAR 0 2
62454: PUSH
62455: LD_INT 4
62457: PLUS
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: LIST
62466: PUSH
62467: LD_VAR 0 1
62471: PUSH
62472: LD_INT 3
62474: PLUS
62475: PUSH
62476: LD_VAR 0 2
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: PUSH
62489: LD_VAR 0 1
62493: PUSH
62494: LD_VAR 0 2
62498: PUSH
62499: LD_INT 3
62501: PLUS
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: ST_TO_ADDR
// end ; end ;
62518: GO 62521
62520: POP
// result := list ;
62521: LD_ADDR_VAR 0 4
62525: PUSH
62526: LD_VAR 0 5
62530: ST_TO_ADDR
// end ;
62531: LD_VAR 0 4
62535: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62536: LD_INT 0
62538: PPUSH
62539: PPUSH
62540: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62541: LD_VAR 0 1
62545: NOT
62546: PUSH
62547: LD_VAR 0 2
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: LD_INT 4
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: IN
62570: NOT
62571: OR
62572: IFFALSE 62576
// exit ;
62574: GO 62668
// tmp := [ ] ;
62576: LD_ADDR_VAR 0 5
62580: PUSH
62581: EMPTY
62582: ST_TO_ADDR
// for i in units do
62583: LD_ADDR_VAR 0 4
62587: PUSH
62588: LD_VAR 0 1
62592: PUSH
62593: FOR_IN
62594: IFFALSE 62637
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62596: LD_ADDR_VAR 0 5
62600: PUSH
62601: LD_VAR 0 5
62605: PPUSH
62606: LD_VAR 0 5
62610: PUSH
62611: LD_INT 1
62613: PLUS
62614: PPUSH
62615: LD_VAR 0 4
62619: PPUSH
62620: LD_VAR 0 2
62624: PPUSH
62625: CALL_OW 259
62629: PPUSH
62630: CALL_OW 2
62634: ST_TO_ADDR
62635: GO 62593
62637: POP
62638: POP
// if not tmp then
62639: LD_VAR 0 5
62643: NOT
62644: IFFALSE 62648
// exit ;
62646: GO 62668
// result := SortListByListDesc ( units , tmp ) ;
62648: LD_ADDR_VAR 0 3
62652: PUSH
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_VAR 0 5
62662: PPUSH
62663: CALL_OW 77
62667: ST_TO_ADDR
// end ;
62668: LD_VAR 0 3
62672: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62673: LD_INT 0
62675: PPUSH
62676: PPUSH
62677: PPUSH
// result := false ;
62678: LD_ADDR_VAR 0 3
62682: PUSH
62683: LD_INT 0
62685: ST_TO_ADDR
// x := GetX ( building ) ;
62686: LD_ADDR_VAR 0 4
62690: PUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: CALL_OW 250
62700: ST_TO_ADDR
// y := GetY ( building ) ;
62701: LD_ADDR_VAR 0 5
62705: PUSH
62706: LD_VAR 0 2
62710: PPUSH
62711: CALL_OW 251
62715: ST_TO_ADDR
// if not building or not x or not y then
62716: LD_VAR 0 2
62720: NOT
62721: PUSH
62722: LD_VAR 0 4
62726: NOT
62727: OR
62728: PUSH
62729: LD_VAR 0 5
62733: NOT
62734: OR
62735: IFFALSE 62739
// exit ;
62737: GO 62831
// if GetTaskList ( unit ) then
62739: LD_VAR 0 1
62743: PPUSH
62744: CALL_OW 437
62748: IFFALSE 62831
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62750: LD_STRING e
62752: PUSH
62753: LD_VAR 0 1
62757: PPUSH
62758: CALL_OW 437
62762: PUSH
62763: LD_INT 1
62765: ARRAY
62766: PUSH
62767: LD_INT 1
62769: ARRAY
62770: EQUAL
62771: PUSH
62772: LD_VAR 0 4
62776: PUSH
62777: LD_VAR 0 1
62781: PPUSH
62782: CALL_OW 437
62786: PUSH
62787: LD_INT 1
62789: ARRAY
62790: PUSH
62791: LD_INT 2
62793: ARRAY
62794: EQUAL
62795: AND
62796: PUSH
62797: LD_VAR 0 5
62801: PUSH
62802: LD_VAR 0 1
62806: PPUSH
62807: CALL_OW 437
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_INT 3
62818: ARRAY
62819: EQUAL
62820: AND
62821: IFFALSE 62831
// result := true end ;
62823: LD_ADDR_VAR 0 3
62827: PUSH
62828: LD_INT 1
62830: ST_TO_ADDR
// end ;
62831: LD_VAR 0 3
62835: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62836: LD_INT 0
62838: PPUSH
// result := false ;
62839: LD_ADDR_VAR 0 4
62843: PUSH
62844: LD_INT 0
62846: ST_TO_ADDR
// if GetTaskList ( unit ) then
62847: LD_VAR 0 1
62851: PPUSH
62852: CALL_OW 437
62856: IFFALSE 62939
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62858: LD_STRING M
62860: PUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 437
62870: PUSH
62871: LD_INT 1
62873: ARRAY
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: EQUAL
62879: PUSH
62880: LD_VAR 0 2
62884: PUSH
62885: LD_VAR 0 1
62889: PPUSH
62890: CALL_OW 437
62894: PUSH
62895: LD_INT 1
62897: ARRAY
62898: PUSH
62899: LD_INT 2
62901: ARRAY
62902: EQUAL
62903: AND
62904: PUSH
62905: LD_VAR 0 3
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 437
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: PUSH
62924: LD_INT 3
62926: ARRAY
62927: EQUAL
62928: AND
62929: IFFALSE 62939
// result := true ;
62931: LD_ADDR_VAR 0 4
62935: PUSH
62936: LD_INT 1
62938: ST_TO_ADDR
// end ; end ;
62939: LD_VAR 0 4
62943: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62944: LD_INT 0
62946: PPUSH
62947: PPUSH
62948: PPUSH
62949: PPUSH
// if not unit or not area then
62950: LD_VAR 0 1
62954: NOT
62955: PUSH
62956: LD_VAR 0 2
62960: NOT
62961: OR
62962: IFFALSE 62966
// exit ;
62964: GO 63130
// tmp := AreaToList ( area , i ) ;
62966: LD_ADDR_VAR 0 6
62970: PUSH
62971: LD_VAR 0 2
62975: PPUSH
62976: LD_VAR 0 5
62980: PPUSH
62981: CALL_OW 517
62985: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62986: LD_ADDR_VAR 0 5
62990: PUSH
62991: DOUBLE
62992: LD_INT 1
62994: DEC
62995: ST_TO_ADDR
62996: LD_VAR 0 6
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PUSH
63005: FOR_TO
63006: IFFALSE 63128
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63008: LD_ADDR_VAR 0 7
63012: PUSH
63013: LD_VAR 0 6
63017: PUSH
63018: LD_INT 1
63020: ARRAY
63021: PUSH
63022: LD_VAR 0 5
63026: ARRAY
63027: PUSH
63028: LD_VAR 0 6
63032: PUSH
63033: LD_INT 2
63035: ARRAY
63036: PUSH
63037: LD_VAR 0 5
63041: ARRAY
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63047: LD_VAR 0 7
63051: PUSH
63052: LD_INT 1
63054: ARRAY
63055: PPUSH
63056: LD_VAR 0 7
63060: PUSH
63061: LD_INT 2
63063: ARRAY
63064: PPUSH
63065: CALL_OW 428
63069: PUSH
63070: LD_INT 0
63072: EQUAL
63073: IFFALSE 63126
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_VAR 0 7
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PPUSH
63089: LD_VAR 0 7
63093: PUSH
63094: LD_INT 2
63096: ARRAY
63097: PPUSH
63098: LD_VAR 0 3
63102: PPUSH
63103: CALL_OW 48
// result := IsPlaced ( unit ) ;
63107: LD_ADDR_VAR 0 4
63111: PUSH
63112: LD_VAR 0 1
63116: PPUSH
63117: CALL_OW 305
63121: ST_TO_ADDR
// exit ;
63122: POP
63123: POP
63124: GO 63130
// end ; end ;
63126: GO 63005
63128: POP
63129: POP
// end ;
63130: LD_VAR 0 4
63134: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63135: LD_INT 0
63137: PPUSH
63138: PPUSH
63139: PPUSH
// if not side or side > 8 then
63140: LD_VAR 0 1
63144: NOT
63145: PUSH
63146: LD_VAR 0 1
63150: PUSH
63151: LD_INT 8
63153: GREATER
63154: OR
63155: IFFALSE 63159
// exit ;
63157: GO 63346
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63159: LD_ADDR_VAR 0 4
63163: PUSH
63164: LD_INT 22
63166: PUSH
63167: LD_VAR 0 1
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 21
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PPUSH
63190: CALL_OW 69
63194: ST_TO_ADDR
// if not tmp then
63195: LD_VAR 0 4
63199: NOT
63200: IFFALSE 63204
// exit ;
63202: GO 63346
// enable_addtolog := true ;
63204: LD_ADDR_OWVAR 81
63208: PUSH
63209: LD_INT 1
63211: ST_TO_ADDR
// AddToLog ( [ ) ;
63212: LD_STRING [
63214: PPUSH
63215: CALL_OW 561
// for i in tmp do
63219: LD_ADDR_VAR 0 3
63223: PUSH
63224: LD_VAR 0 4
63228: PUSH
63229: FOR_IN
63230: IFFALSE 63337
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63232: LD_STRING [
63234: PUSH
63235: LD_VAR 0 3
63239: PPUSH
63240: CALL_OW 266
63244: STR
63245: PUSH
63246: LD_STRING , 
63248: STR
63249: PUSH
63250: LD_VAR 0 3
63254: PPUSH
63255: CALL_OW 250
63259: STR
63260: PUSH
63261: LD_STRING , 
63263: STR
63264: PUSH
63265: LD_VAR 0 3
63269: PPUSH
63270: CALL_OW 251
63274: STR
63275: PUSH
63276: LD_STRING , 
63278: STR
63279: PUSH
63280: LD_VAR 0 3
63284: PPUSH
63285: CALL_OW 254
63289: STR
63290: PUSH
63291: LD_STRING , 
63293: STR
63294: PUSH
63295: LD_VAR 0 3
63299: PPUSH
63300: LD_INT 1
63302: PPUSH
63303: CALL_OW 268
63307: STR
63308: PUSH
63309: LD_STRING , 
63311: STR
63312: PUSH
63313: LD_VAR 0 3
63317: PPUSH
63318: LD_INT 2
63320: PPUSH
63321: CALL_OW 268
63325: STR
63326: PUSH
63327: LD_STRING ],
63329: STR
63330: PPUSH
63331: CALL_OW 561
// end ;
63335: GO 63229
63337: POP
63338: POP
// AddToLog ( ]; ) ;
63339: LD_STRING ];
63341: PPUSH
63342: CALL_OW 561
// end ;
63346: LD_VAR 0 2
63350: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63351: LD_INT 0
63353: PPUSH
63354: PPUSH
63355: PPUSH
63356: PPUSH
63357: PPUSH
// if not area or not rate or not max then
63358: LD_VAR 0 1
63362: NOT
63363: PUSH
63364: LD_VAR 0 2
63368: NOT
63369: OR
63370: PUSH
63371: LD_VAR 0 4
63375: NOT
63376: OR
63377: IFFALSE 63381
// exit ;
63379: GO 63573
// while 1 do
63381: LD_INT 1
63383: IFFALSE 63573
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63385: LD_ADDR_VAR 0 9
63389: PUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_INT 1
63397: PPUSH
63398: CALL_OW 287
63402: PUSH
63403: LD_INT 10
63405: MUL
63406: ST_TO_ADDR
// r := rate / 10 ;
63407: LD_ADDR_VAR 0 7
63411: PUSH
63412: LD_VAR 0 2
63416: PUSH
63417: LD_INT 10
63419: DIVREAL
63420: ST_TO_ADDR
// time := 1 1$00 ;
63421: LD_ADDR_VAR 0 8
63425: PUSH
63426: LD_INT 2100
63428: ST_TO_ADDR
// if amount < min then
63429: LD_VAR 0 9
63433: PUSH
63434: LD_VAR 0 3
63438: LESS
63439: IFFALSE 63457
// r := r * 2 else
63441: LD_ADDR_VAR 0 7
63445: PUSH
63446: LD_VAR 0 7
63450: PUSH
63451: LD_INT 2
63453: MUL
63454: ST_TO_ADDR
63455: GO 63483
// if amount > max then
63457: LD_VAR 0 9
63461: PUSH
63462: LD_VAR 0 4
63466: GREATER
63467: IFFALSE 63483
// r := r / 2 ;
63469: LD_ADDR_VAR 0 7
63473: PUSH
63474: LD_VAR 0 7
63478: PUSH
63479: LD_INT 2
63481: DIVREAL
63482: ST_TO_ADDR
// time := time / r ;
63483: LD_ADDR_VAR 0 8
63487: PUSH
63488: LD_VAR 0 8
63492: PUSH
63493: LD_VAR 0 7
63497: DIVREAL
63498: ST_TO_ADDR
// if time < 0 then
63499: LD_VAR 0 8
63503: PUSH
63504: LD_INT 0
63506: LESS
63507: IFFALSE 63524
// time := time * - 1 ;
63509: LD_ADDR_VAR 0 8
63513: PUSH
63514: LD_VAR 0 8
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: MUL
63523: ST_TO_ADDR
// wait ( time ) ;
63524: LD_VAR 0 8
63528: PPUSH
63529: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63533: LD_INT 35
63535: PPUSH
63536: LD_INT 875
63538: PPUSH
63539: CALL_OW 12
63543: PPUSH
63544: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63548: LD_INT 1
63550: PPUSH
63551: LD_INT 5
63553: PPUSH
63554: CALL_OW 12
63558: PPUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: LD_INT 1
63566: PPUSH
63567: CALL_OW 55
// end ;
63571: GO 63381
// end ;
63573: LD_VAR 0 5
63577: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
63582: PPUSH
63583: PPUSH
63584: PPUSH
63585: PPUSH
63586: PPUSH
63587: PPUSH
// if not turrets or not factories then
63588: LD_VAR 0 1
63592: NOT
63593: PUSH
63594: LD_VAR 0 2
63598: NOT
63599: OR
63600: IFFALSE 63604
// exit ;
63602: GO 63911
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63604: LD_ADDR_VAR 0 10
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: LD_INT 6
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: LD_INT 4
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 3
63631: PUSH
63632: LD_INT 5
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 24
63646: PUSH
63647: LD_INT 25
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 23
63656: PUSH
63657: LD_INT 27
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 42
63670: PUSH
63671: LD_INT 43
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 44
63680: PUSH
63681: LD_INT 46
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 45
63690: PUSH
63691: LD_INT 47
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: ST_TO_ADDR
// result := [ ] ;
63708: LD_ADDR_VAR 0 3
63712: PUSH
63713: EMPTY
63714: ST_TO_ADDR
// for i in turrets do
63715: LD_ADDR_VAR 0 4
63719: PUSH
63720: LD_VAR 0 1
63724: PUSH
63725: FOR_IN
63726: IFFALSE 63909
// begin nat := GetNation ( i ) ;
63728: LD_ADDR_VAR 0 7
63732: PUSH
63733: LD_VAR 0 4
63737: PPUSH
63738: CALL_OW 248
63742: ST_TO_ADDR
// weapon := 0 ;
63743: LD_ADDR_VAR 0 8
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// if not nat then
63751: LD_VAR 0 7
63755: NOT
63756: IFFALSE 63760
// continue ;
63758: GO 63725
// for j in list [ nat ] do
63760: LD_ADDR_VAR 0 5
63764: PUSH
63765: LD_VAR 0 10
63769: PUSH
63770: LD_VAR 0 7
63774: ARRAY
63775: PUSH
63776: FOR_IN
63777: IFFALSE 63818
// if GetBWeapon ( i ) = j [ 1 ] then
63779: LD_VAR 0 4
63783: PPUSH
63784: CALL_OW 269
63788: PUSH
63789: LD_VAR 0 5
63793: PUSH
63794: LD_INT 1
63796: ARRAY
63797: EQUAL
63798: IFFALSE 63816
// begin weapon := j [ 2 ] ;
63800: LD_ADDR_VAR 0 8
63804: PUSH
63805: LD_VAR 0 5
63809: PUSH
63810: LD_INT 2
63812: ARRAY
63813: ST_TO_ADDR
// break ;
63814: GO 63818
// end ;
63816: GO 63776
63818: POP
63819: POP
// if not weapon then
63820: LD_VAR 0 8
63824: NOT
63825: IFFALSE 63829
// continue ;
63827: GO 63725
// for k in factories do
63829: LD_ADDR_VAR 0 6
63833: PUSH
63834: LD_VAR 0 2
63838: PUSH
63839: FOR_IN
63840: IFFALSE 63905
// begin weapons := AvailableWeaponList ( k ) ;
63842: LD_ADDR_VAR 0 9
63846: PUSH
63847: LD_VAR 0 6
63851: PPUSH
63852: CALL_OW 478
63856: ST_TO_ADDR
// if not weapons then
63857: LD_VAR 0 9
63861: NOT
63862: IFFALSE 63866
// continue ;
63864: GO 63839
// if weapon in weapons then
63866: LD_VAR 0 8
63870: PUSH
63871: LD_VAR 0 9
63875: IN
63876: IFFALSE 63903
// begin result := [ i , weapon ] ;
63878: LD_ADDR_VAR 0 3
63882: PUSH
63883: LD_VAR 0 4
63887: PUSH
63888: LD_VAR 0 8
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// exit ;
63897: POP
63898: POP
63899: POP
63900: POP
63901: GO 63911
// end ; end ;
63903: GO 63839
63905: POP
63906: POP
// end ;
63907: GO 63725
63909: POP
63910: POP
// end ;
63911: LD_VAR 0 3
63915: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63916: LD_INT 0
63918: PPUSH
// if not side or side > 8 then
63919: LD_VAR 0 3
63923: NOT
63924: PUSH
63925: LD_VAR 0 3
63929: PUSH
63930: LD_INT 8
63932: GREATER
63933: OR
63934: IFFALSE 63938
// exit ;
63936: GO 63997
// if not range then
63938: LD_VAR 0 4
63942: NOT
63943: IFFALSE 63954
// range := - 12 ;
63945: LD_ADDR_VAR 0 4
63949: PUSH
63950: LD_INT 12
63952: NEG
63953: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63954: LD_VAR 0 1
63958: PPUSH
63959: LD_VAR 0 2
63963: PPUSH
63964: LD_VAR 0 3
63968: PPUSH
63969: LD_VAR 0 4
63973: PPUSH
63974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63978: LD_VAR 0 1
63982: PPUSH
63983: LD_VAR 0 2
63987: PPUSH
63988: LD_VAR 0 3
63992: PPUSH
63993: CALL_OW 331
// end ;
63997: LD_VAR 0 5
64001: RET
// export function Video ( mode ) ; begin
64002: LD_INT 0
64004: PPUSH
// ingame_video = mode ;
64005: LD_ADDR_OWVAR 52
64009: PUSH
64010: LD_VAR 0 1
64014: ST_TO_ADDR
// interface_hidden = mode ;
64015: LD_ADDR_OWVAR 54
64019: PUSH
64020: LD_VAR 0 1
64024: ST_TO_ADDR
// end ;
64025: LD_VAR 0 2
64029: RET
// export function Join ( array , element ) ; begin
64030: LD_INT 0
64032: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64033: LD_ADDR_VAR 0 3
64037: PUSH
64038: LD_VAR 0 1
64042: PPUSH
64043: LD_VAR 0 1
64047: PUSH
64048: LD_INT 1
64050: PLUS
64051: PPUSH
64052: LD_VAR 0 2
64056: PPUSH
64057: CALL_OW 1
64061: ST_TO_ADDR
// end ;
64062: LD_VAR 0 3
64066: RET
// export function JoinUnion ( array , element ) ; begin
64067: LD_INT 0
64069: PPUSH
// result := array union element ;
64070: LD_ADDR_VAR 0 3
64074: PUSH
64075: LD_VAR 0 1
64079: PUSH
64080: LD_VAR 0 2
64084: UNION
64085: ST_TO_ADDR
// end ;
64086: LD_VAR 0 3
64090: RET
// export function GetBehemoths ( side ) ; begin
64091: LD_INT 0
64093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64094: LD_ADDR_VAR 0 2
64098: PUSH
64099: LD_INT 22
64101: PUSH
64102: LD_VAR 0 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 31
64113: PUSH
64114: LD_INT 25
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PPUSH
64125: CALL_OW 69
64129: ST_TO_ADDR
// end ;
64130: LD_VAR 0 2
64134: RET
// export function Shuffle ( array ) ; var i , index ; begin
64135: LD_INT 0
64137: PPUSH
64138: PPUSH
64139: PPUSH
// result := [ ] ;
64140: LD_ADDR_VAR 0 2
64144: PUSH
64145: EMPTY
64146: ST_TO_ADDR
// if not array then
64147: LD_VAR 0 1
64151: NOT
64152: IFFALSE 64156
// exit ;
64154: GO 64255
// Randomize ;
64156: CALL_OW 10
// for i = array downto 1 do
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: DOUBLE
64166: LD_VAR 0 1
64170: INC
64171: ST_TO_ADDR
64172: LD_INT 1
64174: PUSH
64175: FOR_DOWNTO
64176: IFFALSE 64253
// begin index := rand ( 1 , array ) ;
64178: LD_ADDR_VAR 0 4
64182: PUSH
64183: LD_INT 1
64185: PPUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 12
64195: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64196: LD_ADDR_VAR 0 2
64200: PUSH
64201: LD_VAR 0 2
64205: PPUSH
64206: LD_VAR 0 2
64210: PUSH
64211: LD_INT 1
64213: PLUS
64214: PPUSH
64215: LD_VAR 0 1
64219: PUSH
64220: LD_VAR 0 4
64224: ARRAY
64225: PPUSH
64226: CALL_OW 2
64230: ST_TO_ADDR
// array := Delete ( array , index ) ;
64231: LD_ADDR_VAR 0 1
64235: PUSH
64236: LD_VAR 0 1
64240: PPUSH
64241: LD_VAR 0 4
64245: PPUSH
64246: CALL_OW 3
64250: ST_TO_ADDR
// end ;
64251: GO 64175
64253: POP
64254: POP
// end ;
64255: LD_VAR 0 2
64259: RET
// export function GetBaseMaterials ( base ) ; begin
64260: LD_INT 0
64262: PPUSH
// result := [ 0 , 0 , 0 ] ;
64263: LD_ADDR_VAR 0 2
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: ST_TO_ADDR
// if not base then
64282: LD_VAR 0 1
64286: NOT
64287: IFFALSE 64291
// exit ;
64289: GO 64340
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: LD_VAR 0 1
64300: PPUSH
64301: LD_INT 1
64303: PPUSH
64304: CALL_OW 275
64308: PUSH
64309: LD_VAR 0 1
64313: PPUSH
64314: LD_INT 2
64316: PPUSH
64317: CALL_OW 275
64321: PUSH
64322: LD_VAR 0 1
64326: PPUSH
64327: LD_INT 3
64329: PPUSH
64330: CALL_OW 275
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// end ;
64340: LD_VAR 0 2
64344: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
// result := array ;
64349: LD_ADDR_VAR 0 3
64353: PUSH
64354: LD_VAR 0 1
64358: ST_TO_ADDR
// if size > 0 then
64359: LD_VAR 0 2
64363: PUSH
64364: LD_INT 0
64366: GREATER
64367: IFFALSE 64413
// for i := array downto size do
64369: LD_ADDR_VAR 0 4
64373: PUSH
64374: DOUBLE
64375: LD_VAR 0 1
64379: INC
64380: ST_TO_ADDR
64381: LD_VAR 0 2
64385: PUSH
64386: FOR_DOWNTO
64387: IFFALSE 64411
// result := Delete ( result , result ) ;
64389: LD_ADDR_VAR 0 3
64393: PUSH
64394: LD_VAR 0 3
64398: PPUSH
64399: LD_VAR 0 3
64403: PPUSH
64404: CALL_OW 3
64408: ST_TO_ADDR
64409: GO 64386
64411: POP
64412: POP
// end ;
64413: LD_VAR 0 3
64417: RET
// export function ComExit ( unit ) ; var tmp ; begin
64418: LD_INT 0
64420: PPUSH
64421: PPUSH
// if not IsInUnit ( unit ) then
64422: LD_VAR 0 1
64426: PPUSH
64427: CALL_OW 310
64431: NOT
64432: IFFALSE 64436
// exit ;
64434: GO 64496
// tmp := IsInUnit ( unit ) ;
64436: LD_ADDR_VAR 0 3
64440: PUSH
64441: LD_VAR 0 1
64445: PPUSH
64446: CALL_OW 310
64450: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64451: LD_VAR 0 3
64455: PPUSH
64456: CALL_OW 247
64460: PUSH
64461: LD_INT 2
64463: EQUAL
64464: IFFALSE 64477
// ComExitVehicle ( unit ) else
64466: LD_VAR 0 1
64470: PPUSH
64471: CALL_OW 121
64475: GO 64486
// ComExitBuilding ( unit ) ;
64477: LD_VAR 0 1
64481: PPUSH
64482: CALL_OW 122
// result := tmp ;
64486: LD_ADDR_VAR 0 2
64490: PUSH
64491: LD_VAR 0 3
64495: ST_TO_ADDR
// end ;
64496: LD_VAR 0 2
64500: RET
// export function ComExitAll ( units ) ; var i ; begin
64501: LD_INT 0
64503: PPUSH
64504: PPUSH
// if not units then
64505: LD_VAR 0 1
64509: NOT
64510: IFFALSE 64514
// exit ;
64512: GO 64540
// for i in units do
64514: LD_ADDR_VAR 0 3
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: FOR_IN
64525: IFFALSE 64538
// ComExit ( i ) ;
64527: LD_VAR 0 3
64531: PPUSH
64532: CALL 64418 0 1
64536: GO 64524
64538: POP
64539: POP
// end ;
64540: LD_VAR 0 2
64544: RET
// export function ResetHc ; begin
64545: LD_INT 0
64547: PPUSH
// InitHc ;
64548: CALL_OW 19
// hc_importance := 0 ;
64552: LD_ADDR_OWVAR 32
64556: PUSH
64557: LD_INT 0
64559: ST_TO_ADDR
// end ;
64560: LD_VAR 0 1
64564: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64565: LD_INT 0
64567: PPUSH
64568: PPUSH
64569: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64570: LD_ADDR_VAR 0 6
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: LD_VAR 0 3
64584: PLUS
64585: PUSH
64586: LD_INT 2
64588: DIV
64589: ST_TO_ADDR
// if _x < 0 then
64590: LD_VAR 0 6
64594: PUSH
64595: LD_INT 0
64597: LESS
64598: IFFALSE 64615
// _x := _x * - 1 ;
64600: LD_ADDR_VAR 0 6
64604: PUSH
64605: LD_VAR 0 6
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: MUL
64614: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64615: LD_ADDR_VAR 0 7
64619: PUSH
64620: LD_VAR 0 2
64624: PUSH
64625: LD_VAR 0 4
64629: PLUS
64630: PUSH
64631: LD_INT 2
64633: DIV
64634: ST_TO_ADDR
// if _y < 0 then
64635: LD_VAR 0 7
64639: PUSH
64640: LD_INT 0
64642: LESS
64643: IFFALSE 64660
// _y := _y * - 1 ;
64645: LD_ADDR_VAR 0 7
64649: PUSH
64650: LD_VAR 0 7
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: MUL
64659: ST_TO_ADDR
// result := [ _x , _y ] ;
64660: LD_ADDR_VAR 0 5
64664: PUSH
64665: LD_VAR 0 6
64669: PUSH
64670: LD_VAR 0 7
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// end ;
64679: LD_VAR 0 5
64683: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64684: LD_INT 0
64686: PPUSH
64687: PPUSH
64688: PPUSH
64689: PPUSH
// task := GetTaskList ( unit ) ;
64690: LD_ADDR_VAR 0 7
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 437
64704: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64705: LD_VAR 0 7
64709: NOT
64710: PUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: LD_VAR 0 2
64720: PPUSH
64721: CALL_OW 308
64725: NOT
64726: AND
64727: IFFALSE 64731
// exit ;
64729: GO 64849
// if IsInArea ( unit , area ) then
64731: LD_VAR 0 1
64735: PPUSH
64736: LD_VAR 0 2
64740: PPUSH
64741: CALL_OW 308
64745: IFFALSE 64763
// begin ComMoveToArea ( unit , goAway ) ;
64747: LD_VAR 0 1
64751: PPUSH
64752: LD_VAR 0 3
64756: PPUSH
64757: CALL_OW 113
// exit ;
64761: GO 64849
// end ; if task [ 1 ] [ 1 ] <> M then
64763: LD_VAR 0 7
64767: PUSH
64768: LD_INT 1
64770: ARRAY
64771: PUSH
64772: LD_INT 1
64774: ARRAY
64775: PUSH
64776: LD_STRING M
64778: NONEQUAL
64779: IFFALSE 64783
// exit ;
64781: GO 64849
// x := task [ 1 ] [ 2 ] ;
64783: LD_ADDR_VAR 0 5
64787: PUSH
64788: LD_VAR 0 7
64792: PUSH
64793: LD_INT 1
64795: ARRAY
64796: PUSH
64797: LD_INT 2
64799: ARRAY
64800: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64801: LD_ADDR_VAR 0 6
64805: PUSH
64806: LD_VAR 0 7
64810: PUSH
64811: LD_INT 1
64813: ARRAY
64814: PUSH
64815: LD_INT 3
64817: ARRAY
64818: ST_TO_ADDR
// if InArea ( x , y , area ) then
64819: LD_VAR 0 5
64823: PPUSH
64824: LD_VAR 0 6
64828: PPUSH
64829: LD_VAR 0 2
64833: PPUSH
64834: CALL_OW 309
64838: IFFALSE 64849
// ComStop ( unit ) ;
64840: LD_VAR 0 1
64844: PPUSH
64845: CALL_OW 141
// end ;
64849: LD_VAR 0 4
64853: RET
// export function Abs ( value ) ; begin
64854: LD_INT 0
64856: PPUSH
// result := value ;
64857: LD_ADDR_VAR 0 2
64861: PUSH
64862: LD_VAR 0 1
64866: ST_TO_ADDR
// if value < 0 then
64867: LD_VAR 0 1
64871: PUSH
64872: LD_INT 0
64874: LESS
64875: IFFALSE 64892
// result := value * - 1 ;
64877: LD_ADDR_VAR 0 2
64881: PUSH
64882: LD_VAR 0 1
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: MUL
64891: ST_TO_ADDR
// end ;
64892: LD_VAR 0 2
64896: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64897: LD_INT 0
64899: PPUSH
64900: PPUSH
64901: PPUSH
64902: PPUSH
64903: PPUSH
64904: PPUSH
64905: PPUSH
64906: PPUSH
// if not unit or not building then
64907: LD_VAR 0 1
64911: NOT
64912: PUSH
64913: LD_VAR 0 2
64917: NOT
64918: OR
64919: IFFALSE 64923
// exit ;
64921: GO 65149
// x := GetX ( building ) ;
64923: LD_ADDR_VAR 0 4
64927: PUSH
64928: LD_VAR 0 2
64932: PPUSH
64933: CALL_OW 250
64937: ST_TO_ADDR
// y := GetY ( building ) ;
64938: LD_ADDR_VAR 0 6
64942: PUSH
64943: LD_VAR 0 2
64947: PPUSH
64948: CALL_OW 251
64952: ST_TO_ADDR
// d := GetDir ( building ) ;
64953: LD_ADDR_VAR 0 8
64957: PUSH
64958: LD_VAR 0 2
64962: PPUSH
64963: CALL_OW 254
64967: ST_TO_ADDR
// r := 4 ;
64968: LD_ADDR_VAR 0 9
64972: PUSH
64973: LD_INT 4
64975: ST_TO_ADDR
// for i := 1 to 5 do
64976: LD_ADDR_VAR 0 10
64980: PUSH
64981: DOUBLE
64982: LD_INT 1
64984: DEC
64985: ST_TO_ADDR
64986: LD_INT 5
64988: PUSH
64989: FOR_TO
64990: IFFALSE 65147
// begin _x := ShiftX ( x , d , r + i ) ;
64992: LD_ADDR_VAR 0 5
64996: PUSH
64997: LD_VAR 0 4
65001: PPUSH
65002: LD_VAR 0 8
65006: PPUSH
65007: LD_VAR 0 9
65011: PUSH
65012: LD_VAR 0 10
65016: PLUS
65017: PPUSH
65018: CALL_OW 272
65022: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65023: LD_ADDR_VAR 0 7
65027: PUSH
65028: LD_VAR 0 6
65032: PPUSH
65033: LD_VAR 0 8
65037: PPUSH
65038: LD_VAR 0 9
65042: PUSH
65043: LD_VAR 0 10
65047: PLUS
65048: PPUSH
65049: CALL_OW 273
65053: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65054: LD_VAR 0 5
65058: PPUSH
65059: LD_VAR 0 7
65063: PPUSH
65064: CALL_OW 488
65068: PUSH
65069: LD_VAR 0 5
65073: PPUSH
65074: LD_VAR 0 7
65078: PPUSH
65079: CALL_OW 428
65083: PPUSH
65084: CALL_OW 247
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: IN
65099: NOT
65100: AND
65101: IFFALSE 65145
// begin ComMoveXY ( unit , _x , _y ) ;
65103: LD_VAR 0 1
65107: PPUSH
65108: LD_VAR 0 5
65112: PPUSH
65113: LD_VAR 0 7
65117: PPUSH
65118: CALL_OW 111
// result := [ _x , _y ] ;
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_VAR 0 5
65131: PUSH
65132: LD_VAR 0 7
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// exit ;
65141: POP
65142: POP
65143: GO 65149
// end ; end ;
65145: GO 64989
65147: POP
65148: POP
// end ;
65149: LD_VAR 0 3
65153: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65154: LD_INT 0
65156: PPUSH
65157: PPUSH
65158: PPUSH
// result := 0 ;
65159: LD_ADDR_VAR 0 3
65163: PUSH
65164: LD_INT 0
65166: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65167: LD_VAR 0 1
65171: PUSH
65172: LD_INT 0
65174: LESS
65175: PUSH
65176: LD_VAR 0 1
65180: PUSH
65181: LD_INT 8
65183: GREATER
65184: OR
65185: PUSH
65186: LD_VAR 0 2
65190: PUSH
65191: LD_INT 0
65193: LESS
65194: OR
65195: PUSH
65196: LD_VAR 0 2
65200: PUSH
65201: LD_INT 8
65203: GREATER
65204: OR
65205: IFFALSE 65209
// exit ;
65207: GO 65284
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65209: LD_ADDR_VAR 0 4
65213: PUSH
65214: LD_INT 22
65216: PUSH
65217: LD_VAR 0 2
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PPUSH
65226: CALL_OW 69
65230: PUSH
65231: FOR_IN
65232: IFFALSE 65282
// begin un := UnitShoot ( i ) ;
65234: LD_ADDR_VAR 0 5
65238: PUSH
65239: LD_VAR 0 4
65243: PPUSH
65244: CALL_OW 504
65248: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65249: LD_VAR 0 5
65253: PPUSH
65254: CALL_OW 255
65258: PUSH
65259: LD_VAR 0 1
65263: EQUAL
65264: IFFALSE 65280
// begin result := un ;
65266: LD_ADDR_VAR 0 3
65270: PUSH
65271: LD_VAR 0 5
65275: ST_TO_ADDR
// exit ;
65276: POP
65277: POP
65278: GO 65284
// end ; end ;
65280: GO 65231
65282: POP
65283: POP
// end ;
65284: LD_VAR 0 3
65288: RET
// export function GetCargoBay ( units ) ; begin
65289: LD_INT 0
65291: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65292: LD_ADDR_VAR 0 2
65296: PUSH
65297: LD_VAR 0 1
65301: PPUSH
65302: LD_INT 2
65304: PUSH
65305: LD_INT 34
65307: PUSH
65308: LD_INT 12
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 34
65317: PUSH
65318: LD_INT 51
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 34
65327: PUSH
65328: LD_INT 32
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 34
65337: PUSH
65338: LD_EXP 94
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: PPUSH
65354: CALL_OW 72
65358: ST_TO_ADDR
// end ;
65359: LD_VAR 0 2
65363: RET
// export function Negate ( value ) ; begin
65364: LD_INT 0
65366: PPUSH
// result := not value ;
65367: LD_ADDR_VAR 0 2
65371: PUSH
65372: LD_VAR 0 1
65376: NOT
65377: ST_TO_ADDR
// end ;
65378: LD_VAR 0 2
65382: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65383: LD_INT 0
65385: PPUSH
// if x1 = x2 then
65386: LD_VAR 0 1
65390: PUSH
65391: LD_VAR 0 3
65395: EQUAL
65396: IFFALSE 65430
// begin if y1 > y2 then
65398: LD_VAR 0 2
65402: PUSH
65403: LD_VAR 0 4
65407: GREATER
65408: IFFALSE 65420
// result := 0 else
65410: LD_ADDR_VAR 0 5
65414: PUSH
65415: LD_INT 0
65417: ST_TO_ADDR
65418: GO 65428
// result := 3 ;
65420: LD_ADDR_VAR 0 5
65424: PUSH
65425: LD_INT 3
65427: ST_TO_ADDR
// exit ;
65428: GO 65516
// end ; if y1 = y2 then
65430: LD_VAR 0 2
65434: PUSH
65435: LD_VAR 0 4
65439: EQUAL
65440: IFFALSE 65474
// begin if x1 > x2 then
65442: LD_VAR 0 1
65446: PUSH
65447: LD_VAR 0 3
65451: GREATER
65452: IFFALSE 65464
// result := 1 else
65454: LD_ADDR_VAR 0 5
65458: PUSH
65459: LD_INT 1
65461: ST_TO_ADDR
65462: GO 65472
// result := 4 ;
65464: LD_ADDR_VAR 0 5
65468: PUSH
65469: LD_INT 4
65471: ST_TO_ADDR
// exit ;
65472: GO 65516
// end ; if x1 > x2 and y1 > y2 then
65474: LD_VAR 0 1
65478: PUSH
65479: LD_VAR 0 3
65483: GREATER
65484: PUSH
65485: LD_VAR 0 2
65489: PUSH
65490: LD_VAR 0 4
65494: GREATER
65495: AND
65496: IFFALSE 65508
// result := 2 else
65498: LD_ADDR_VAR 0 5
65502: PUSH
65503: LD_INT 2
65505: ST_TO_ADDR
65506: GO 65516
// result := 5 ;
65508: LD_ADDR_VAR 0 5
65512: PUSH
65513: LD_INT 5
65515: ST_TO_ADDR
// end ;
65516: LD_VAR 0 5
65520: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65521: LD_INT 0
65523: PPUSH
65524: PPUSH
// if not driver or not IsInUnit ( driver ) then
65525: LD_VAR 0 1
65529: NOT
65530: PUSH
65531: LD_VAR 0 1
65535: PPUSH
65536: CALL_OW 310
65540: NOT
65541: OR
65542: IFFALSE 65546
// exit ;
65544: GO 65636
// vehicle := IsInUnit ( driver ) ;
65546: LD_ADDR_VAR 0 3
65550: PUSH
65551: LD_VAR 0 1
65555: PPUSH
65556: CALL_OW 310
65560: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65561: LD_VAR 0 1
65565: PPUSH
65566: LD_STRING \
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: PUSH
65596: LD_STRING E
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_VAR 0 3
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PPUSH
65632: CALL_OW 446
// end ;
65636: LD_VAR 0 2
65640: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65641: LD_INT 0
65643: PPUSH
65644: PPUSH
// if not driver or not IsInUnit ( driver ) then
65645: LD_VAR 0 1
65649: NOT
65650: PUSH
65651: LD_VAR 0 1
65655: PPUSH
65656: CALL_OW 310
65660: NOT
65661: OR
65662: IFFALSE 65666
// exit ;
65664: GO 65756
// vehicle := IsInUnit ( driver ) ;
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_VAR 0 1
65675: PPUSH
65676: CALL_OW 310
65680: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65681: LD_VAR 0 1
65685: PPUSH
65686: LD_STRING \
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: PUSH
65716: LD_STRING E
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_VAR 0 3
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PPUSH
65752: CALL_OW 447
// end ;
65756: LD_VAR 0 2
65760: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65761: LD_INT 0
65763: PPUSH
65764: PPUSH
65765: PPUSH
// tmp := [ ] ;
65766: LD_ADDR_VAR 0 5
65770: PUSH
65771: EMPTY
65772: ST_TO_ADDR
// for i in units do
65773: LD_ADDR_VAR 0 4
65777: PUSH
65778: LD_VAR 0 1
65782: PUSH
65783: FOR_IN
65784: IFFALSE 65822
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65786: LD_ADDR_VAR 0 5
65790: PUSH
65791: LD_VAR 0 5
65795: PPUSH
65796: LD_VAR 0 5
65800: PUSH
65801: LD_INT 1
65803: PLUS
65804: PPUSH
65805: LD_VAR 0 4
65809: PPUSH
65810: CALL_OW 256
65814: PPUSH
65815: CALL_OW 2
65819: ST_TO_ADDR
65820: GO 65783
65822: POP
65823: POP
// if not tmp then
65824: LD_VAR 0 5
65828: NOT
65829: IFFALSE 65833
// exit ;
65831: GO 65881
// if asc then
65833: LD_VAR 0 2
65837: IFFALSE 65861
// result := SortListByListAsc ( units , tmp ) else
65839: LD_ADDR_VAR 0 3
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: LD_VAR 0 5
65853: PPUSH
65854: CALL_OW 76
65858: ST_TO_ADDR
65859: GO 65881
// result := SortListByListDesc ( units , tmp ) ;
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_VAR 0 1
65870: PPUSH
65871: LD_VAR 0 5
65875: PPUSH
65876: CALL_OW 77
65880: ST_TO_ADDR
// end ;
65881: LD_VAR 0 3
65885: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65886: LD_INT 0
65888: PPUSH
65889: PPUSH
// task := GetTaskList ( mech ) ;
65890: LD_ADDR_VAR 0 4
65894: PUSH
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 437
65904: ST_TO_ADDR
// if not task then
65905: LD_VAR 0 4
65909: NOT
65910: IFFALSE 65914
// exit ;
65912: GO 65956
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65914: LD_ADDR_VAR 0 3
65918: PUSH
65919: LD_VAR 0 4
65923: PUSH
65924: LD_INT 1
65926: ARRAY
65927: PUSH
65928: LD_INT 1
65930: ARRAY
65931: PUSH
65932: LD_STRING r
65934: EQUAL
65935: PUSH
65936: LD_VAR 0 4
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: PUSH
65945: LD_INT 4
65947: ARRAY
65948: PUSH
65949: LD_VAR 0 2
65953: EQUAL
65954: AND
65955: ST_TO_ADDR
// end ;
65956: LD_VAR 0 3
65960: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65961: LD_INT 0
65963: PPUSH
// SetDir ( unit , d ) ;
65964: LD_VAR 0 1
65968: PPUSH
65969: LD_VAR 0 4
65973: PPUSH
65974: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65978: LD_VAR 0 1
65982: PPUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: LD_VAR 0 3
65992: PPUSH
65993: LD_VAR 0 5
65997: PPUSH
65998: CALL_OW 48
// end ;
66002: LD_VAR 0 6
66006: RET
// export function ToNaturalNumber ( number ) ; begin
66007: LD_INT 0
66009: PPUSH
// result := number div 1 ;
66010: LD_ADDR_VAR 0 2
66014: PUSH
66015: LD_VAR 0 1
66019: PUSH
66020: LD_INT 1
66022: DIV
66023: ST_TO_ADDR
// if number < 0 then
66024: LD_VAR 0 1
66028: PUSH
66029: LD_INT 0
66031: LESS
66032: IFFALSE 66042
// result := 0 ;
66034: LD_ADDR_VAR 0 2
66038: PUSH
66039: LD_INT 0
66041: ST_TO_ADDR
// end ; end_of_file
66042: LD_VAR 0 2
66046: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66047: LD_VAR 0 1
66051: PUSH
66052: LD_INT 200
66054: DOUBLE
66055: GREATEREQUAL
66056: IFFALSE 66064
66058: LD_INT 299
66060: DOUBLE
66061: LESSEQUAL
66062: IFTRUE 66066
66064: GO 66098
66066: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66067: LD_VAR 0 1
66071: PPUSH
66072: LD_VAR 0 2
66076: PPUSH
66077: LD_VAR 0 3
66081: PPUSH
66082: LD_VAR 0 4
66086: PPUSH
66087: LD_VAR 0 5
66091: PPUSH
66092: CALL 23241 0 5
66096: GO 66175
66098: LD_INT 300
66100: DOUBLE
66101: GREATEREQUAL
66102: IFFALSE 66110
66104: LD_INT 399
66106: DOUBLE
66107: LESSEQUAL
66108: IFTRUE 66112
66110: GO 66174
66112: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66113: LD_VAR 0 1
66117: PPUSH
66118: LD_VAR 0 2
66122: PPUSH
66123: LD_VAR 0 3
66127: PPUSH
66128: LD_VAR 0 4
66132: PPUSH
66133: LD_VAR 0 5
66137: PPUSH
66138: LD_VAR 0 6
66142: PPUSH
66143: LD_VAR 0 7
66147: PPUSH
66148: LD_VAR 0 8
66152: PPUSH
66153: LD_VAR 0 9
66157: PPUSH
66158: LD_VAR 0 10
66162: PPUSH
66163: LD_VAR 0 11
66167: PPUSH
66168: CALL 21129 0 11
66172: GO 66175
66174: POP
// end ;
66175: PPOPN 11
66177: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66178: LD_VAR 0 1
66182: PPUSH
66183: LD_VAR 0 2
66187: PPUSH
66188: LD_VAR 0 3
66192: PPUSH
66193: LD_VAR 0 4
66197: PPUSH
66198: LD_VAR 0 5
66202: PPUSH
66203: CALL 23223 0 5
// end ; end_of_file
66207: PPOPN 5
66209: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66210: LD_VAR 0 1
66214: PPUSH
66215: LD_VAR 0 2
66219: PPUSH
66220: LD_VAR 0 3
66224: PPUSH
66225: LD_VAR 0 4
66229: PPUSH
66230: LD_VAR 0 5
66234: PPUSH
66235: LD_VAR 0 6
66239: PPUSH
66240: CALL 9937 0 6
// end ;
66244: PPOPN 6
66246: END
