// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2626 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = 20 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Givi
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
// uc_side := 3 ;
1370: LD_ADDR_OWVAR 20
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// uc_nation := 3 ;
1378: LD_ADDR_OWVAR 21
1382: PUSH
1383: LD_INT 3
1385: ST_TO_ADDR
// russianForces := [ ] ;
1386: LD_ADDR_EXP 21
1390: PUSH
1391: EMPTY
1392: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1393: LD_ADDR_EXP 20
1397: PUSH
1398: EMPTY
1399: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1400: LD_ADDR_VAR 0 4
1404: PUSH
1405: LD_INT 11
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 517
1415: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: LD_INT 21
1423: PUSH
1424: LD_INT 0
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 69
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1481
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 274
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_INT 200
1454: PPUSH
1455: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: CALL_OW 274
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 10
1474: PPUSH
1475: CALL_OW 277
// end ;
1479: GO 1436
1481: POP
1482: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1483: LD_ADDR_VAR 0 2
1487: PUSH
1488: LD_INT 30
1490: PUSH
1491: LD_INT 31
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PPUSH
1498: CALL_OW 69
1502: PUSH
1503: FOR_IN
1504: IFFALSE 1578
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1506: LD_INT 0
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: LD_OWVAR 67
1516: PUSH
1517: LD_INT 1
1519: MINUS
1520: PPUSH
1521: CALL_OW 380
// un := CreateHuman ;
1525: LD_ADDR_VAR 0 3
1529: PUSH
1530: CALL_OW 44
1534: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1535: LD_VAR 0 3
1539: PPUSH
1540: LD_VAR 0 2
1544: PPUSH
1545: CALL_OW 254
1549: PUSH
1550: LD_INT 3
1552: MINUS
1553: PUSH
1554: LD_INT 6
1556: MOD
1557: PPUSH
1558: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1562: LD_VAR 0 3
1566: PPUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 52
// end ;
1576: GO 1503
1578: POP
1579: POP
// for i = 1 to 5 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 5
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1676
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1596: LD_INT 0
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_OWVAR 67
1606: PPUSH
1607: CALL_OW 380
// un := CreateHuman ;
1611: LD_ADDR_VAR 0 3
1615: PUSH
1616: CALL_OW 44
1620: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1621: LD_VAR 0 3
1625: PPUSH
1626: LD_INT 9
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: CALL_OW 49
// ComHold ( un ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1645: LD_ADDR_EXP 21
1649: PUSH
1650: LD_EXP 21
1654: PPUSH
1655: LD_EXP 21
1659: PUSH
1660: LD_INT 1
1662: PLUS
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: CALL_OW 1
1673: ST_TO_ADDR
// end ;
1674: GO 1593
1676: POP
1677: POP
// for i := 1 to Difficulty + 1 do
1678: LD_ADDR_VAR 0 2
1682: PUSH
1683: DOUBLE
1684: LD_INT 1
1686: DEC
1687: ST_TO_ADDR
1688: LD_OWVAR 67
1692: PUSH
1693: LD_INT 1
1695: PLUS
1696: PUSH
1697: FOR_TO
1698: IFFALSE 1798
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 1
1705: PPUSH
1706: LD_OWVAR 67
1710: PPUSH
1711: CALL_OW 380
// un := CreateHuman ;
1715: LD_ADDR_VAR 0 3
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 1
1737: ARRAY
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PUSH
1750: LD_INT 2
1752: ARRAY
1753: PUSH
1754: LD_VAR 0 2
1758: ARRAY
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1767: LD_ADDR_EXP 20
1771: PUSH
1772: LD_EXP 20
1776: PPUSH
1777: LD_EXP 20
1781: PUSH
1782: LD_INT 1
1784: PLUS
1785: PPUSH
1786: LD_VAR 0 3
1790: PPUSH
1791: CALL_OW 1
1795: ST_TO_ADDR
// end ;
1796: GO 1697
1798: POP
1799: POP
// vc_chassis := ru_medium_wheeled ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 21
1807: ST_TO_ADDR
// vc_engine := engine_combustion ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control := control_manual ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 42
1831: ST_TO_ADDR
// russianTank := CreateVehicle ;
1832: LD_ADDR_EXP 22
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1842: LD_EXP 22
1846: PPUSH
1847: LD_INT 121
1849: PPUSH
1850: LD_INT 25
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1860: LD_INT 0
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: LD_OWVAR 67
1870: PPUSH
1871: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1875: CALL_OW 44
1879: PPUSH
1880: LD_EXP 22
1884: PPUSH
1885: CALL_OW 52
// end ;
1889: LD_VAR 0 1
1893: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y ;
1894: LD_EXP 20
1898: IFFALSE 2105
1900: GO 1902
1902: DISABLE
1903: LD_INT 0
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// begin enable ;
1910: ENABLE
// for i in russianForestPatrol do
1911: LD_ADDR_VAR 0 1
1915: PUSH
1916: LD_EXP 20
1920: PUSH
1921: FOR_IN
1922: IFFALSE 2103
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
1924: LD_VAR 0 1
1928: PPUSH
1929: LD_INT 53
1931: PPUSH
1932: LD_INT 89
1934: PPUSH
1935: CALL_OW 297
1939: PUSH
1940: LD_INT 30
1942: LESS
1943: IFFALSE 1962
// begin ComMoveXY ( i , 114 , 80 ) ;
1945: LD_VAR 0 1
1949: PPUSH
1950: LD_INT 114
1952: PPUSH
1953: LD_INT 80
1955: PPUSH
1956: CALL_OW 111
// continue ;
1960: GO 1921
// end ; if not HasTask ( i ) then
1962: LD_VAR 0 1
1966: PPUSH
1967: CALL_OW 314
1971: NOT
1972: IFFALSE 2101
// begin d := rand ( 0 , 5 ) ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 5
1984: PPUSH
1985: CALL_OW 12
1989: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
1990: LD_ADDR_VAR 0 3
1994: PUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 12
2005: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: CALL_OW 250
2020: PPUSH
2021: LD_VAR 0 2
2025: PPUSH
2026: LD_VAR 0 3
2030: PPUSH
2031: CALL_OW 272
2035: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2036: LD_ADDR_VAR 0 5
2040: PUSH
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 251
2050: PPUSH
2051: LD_VAR 0 2
2055: PPUSH
2056: LD_VAR 0 3
2060: PPUSH
2061: CALL_OW 273
2065: ST_TO_ADDR
// if ValidHex ( x , y ) then
2066: LD_VAR 0 4
2070: PPUSH
2071: LD_VAR 0 5
2075: PPUSH
2076: CALL_OW 488
2080: IFFALSE 2101
// ComAgressiveMove ( i , x , y ) ;
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: LD_VAR 0 5
2096: PPUSH
2097: CALL_OW 114
// end ; end ;
2101: GO 1921
2103: POP
2104: POP
// end ;
2105: PPOPN 5
2107: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2108: LD_EXP 22
2112: PPUSH
2113: CALL_OW 302
2117: PUSH
2118: LD_EXP 22
2122: PPUSH
2123: CALL_OW 255
2127: PUSH
2128: LD_INT 3
2130: EQUAL
2131: AND
2132: IFFALSE 2399
2134: GO 2136
2136: DISABLE
// begin enable ;
2137: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2138: LD_EXP 22
2142: PPUSH
2143: LD_INT 124
2145: PPUSH
2146: LD_INT 25
2148: PPUSH
2149: CALL_OW 307
2153: IFFALSE 2167
// SetFuel ( russianTank , 100 ) ;
2155: LD_EXP 22
2159: PPUSH
2160: LD_INT 100
2162: PPUSH
2163: CALL_OW 240
// if HasTask ( russianTank ) then
2167: LD_EXP 22
2171: PPUSH
2172: CALL_OW 314
2176: IFFALSE 2180
// exit ;
2178: GO 2399
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2180: LD_EXP 22
2184: PPUSH
2185: LD_INT 121
2187: PPUSH
2188: LD_INT 25
2190: PPUSH
2191: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2195: LD_EXP 22
2199: PPUSH
2200: LD_INT 122
2202: PPUSH
2203: LD_INT 48
2205: PPUSH
2206: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2210: LD_EXP 22
2214: PPUSH
2215: LD_INT 70
2217: PPUSH
2218: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2222: LD_EXP 22
2226: PPUSH
2227: LD_INT 107
2229: PPUSH
2230: LD_INT 57
2232: PPUSH
2233: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2237: LD_EXP 22
2241: PPUSH
2242: LD_INT 70
2244: PPUSH
2245: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2249: LD_EXP 22
2253: PPUSH
2254: LD_INT 100
2256: PPUSH
2257: LD_INT 61
2259: PPUSH
2260: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2264: LD_EXP 22
2268: PPUSH
2269: LD_INT 105
2271: PPUSH
2272: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2276: LD_EXP 22
2280: PPUSH
2281: LD_INT 78
2283: PPUSH
2284: LD_INT 64
2286: PPUSH
2287: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2291: LD_EXP 22
2295: PPUSH
2296: LD_INT 140
2298: PPUSH
2299: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2303: LD_EXP 22
2307: PPUSH
2308: LD_INT 100
2310: PPUSH
2311: LD_INT 61
2313: PPUSH
2314: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2318: LD_EXP 22
2322: PPUSH
2323: LD_INT 105
2325: PPUSH
2326: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2330: LD_EXP 22
2334: PPUSH
2335: LD_INT 107
2337: PPUSH
2338: LD_INT 57
2340: PPUSH
2341: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2345: LD_EXP 22
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2357: LD_EXP 22
2361: PPUSH
2362: LD_INT 122
2364: PPUSH
2365: LD_INT 48
2367: PPUSH
2368: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2372: LD_EXP 22
2376: PPUSH
2377: LD_INT 70
2379: PPUSH
2380: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2384: LD_EXP 22
2388: PPUSH
2389: LD_INT 124
2391: PPUSH
2392: LD_INT 25
2394: PPUSH
2395: CALL_OW 171
// end ; end_of_file
2399: END
// export Johnny ; export function PrepareJohnny ; begin
2400: LD_INT 0
2402: PPUSH
// uc_side := 1 ;
2403: LD_ADDR_OWVAR 20
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// uc_nation := 1 ;
2411: LD_ADDR_OWVAR 21
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2419: LD_ADDR_EXP 23
2423: PUSH
2424: LD_STRING Harris
2426: PPUSH
2427: CALL_OW 25
2431: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2432: LD_EXP 23
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2444: LD_EXP 23
2448: PPUSH
2449: LD_INT 8
2451: PPUSH
2452: LD_INT 0
2454: PPUSH
2455: CALL_OW 49
// ComCrawl ( Johnny ) ;
2459: LD_EXP 23
2463: PPUSH
2464: CALL_OW 137
// end ;
2468: LD_VAR 0 1
2472: RET
// export function PreparePatrolTank ; var veh , un ; begin
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
// uc_side := 1 ;
2478: LD_ADDR_OWVAR 20
2482: PUSH
2483: LD_INT 1
2485: ST_TO_ADDR
// uc_nation := 1 ;
2486: LD_ADDR_OWVAR 21
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2494: LD_INT 1
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 380
// un := CreateHuman ;
2507: LD_ADDR_VAR 0 3
2511: PUSH
2512: CALL_OW 44
2516: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2517: LD_ADDR_OWVAR 37
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// vc_engine := engine_combustion ;
2525: LD_ADDR_OWVAR 39
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_control := control_manual ;
2533: LD_ADDR_OWVAR 38
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 2
2548: ST_TO_ADDR
// vc_fuel_battery := 22 ;
2549: LD_ADDR_OWVAR 41
2553: PUSH
2554: LD_INT 22
2556: ST_TO_ADDR
// veh := CreateVehicle ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: CALL_OW 45
2566: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2567: LD_VAR 0 2
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 31
2586: PPUSH
2587: LD_INT 58
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// result := un ;
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: LD_VAR 0 3
2620: ST_TO_ADDR
// end ; end_of_file
2621: LD_VAR 0 1
2625: RET
// export function Action ; begin
2626: LD_INT 0
2628: PPUSH
// InGameOn ;
2629: CALL_OW 8
// wait ( 0 0$4 ) ;
2633: LD_INT 140
2635: PPUSH
2636: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2640: LD_EXP 14
2644: PPUSH
2645: LD_STRING DH-start-1
2647: PPUSH
2648: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2652: LD_EXP 14
2656: PPUSH
2657: LD_INT 71
2659: PPUSH
2660: LD_INT 29
2662: PPUSH
2663: CALL_OW 111
// wait ( 0 0$4 ) ;
2667: LD_INT 140
2669: PPUSH
2670: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2674: LD_EXP 14
2678: PPUSH
2679: LD_INT 71
2681: PPUSH
2682: LD_INT 33
2684: PPUSH
2685: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2689: LD_EXP 14
2693: PPUSH
2694: LD_INT 71
2696: PPUSH
2697: LD_INT 34
2699: PPUSH
2700: CALL_OW 178
// wait ( 0 0$4 ) ;
2704: LD_INT 140
2706: PPUSH
2707: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2711: LD_EXP 14
2715: PPUSH
2716: LD_STRING DH-start-2
2718: PPUSH
2719: CALL_OW 88
// wait ( 0 0$4 ) ;
2723: LD_INT 140
2725: PPUSH
2726: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
2730: LD_EXP 14
2734: PPUSH
2735: LD_INT 65
2737: PPUSH
2738: LD_INT 26
2740: PPUSH
2741: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
2745: LD_EXP 14
2749: PPUSH
2750: LD_STRING DH-start-3
2752: PPUSH
2753: CALL_OW 88
// InGameOff ;
2757: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
2761: LD_STRING O1_cont
2763: PPUSH
2764: CALL_OW 337
// SaveForQuickRestart ;
2768: CALL_OW 22
// missionStarted := true ;
2772: LD_ADDR_EXP 1
2776: PUSH
2777: LD_INT 1
2779: ST_TO_ADDR
// PrepareJohnny ;
2780: CALL 2400 0 0
// end ;
2784: LD_VAR 0 1
2788: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny do
2789: LD_EXP 8
2793: NOT
2794: PUSH
2795: LD_EXP 7
2799: NOT
2800: AND
2801: PUSH
2802: LD_INT 2
2804: PPUSH
2805: LD_EXP 23
2809: PPUSH
2810: CALL_OW 292
2814: AND
2815: PUSH
2816: LD_INT 22
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PPUSH
2831: LD_EXP 14
2835: PPUSH
2836: CALL_OW 74
2840: PUSH
2841: LD_EXP 23
2845: EQUAL
2846: AND
2847: IFFALSE 3759
2849: GO 2851
2851: DISABLE
// begin InGameOn ;
2852: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
2856: LD_EXP 14
2860: PPUSH
2861: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
2865: LD_EXP 23
2869: PPUSH
2870: LD_STRING DJ-ambush-1
2872: PPUSH
2873: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2877: LD_INT 10
2879: PPUSH
2880: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
2884: LD_EXP 14
2888: PPUSH
2889: LD_EXP 23
2893: PPUSH
2894: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
2898: LD_EXP 14
2902: PPUSH
2903: LD_STRING DH-ambush-1
2905: PPUSH
2906: CALL_OW 88
// wait ( 0 0$1 ) ;
2910: LD_INT 35
2912: PPUSH
2913: CALL_OW 67
// ComWalk ( Johnny ) ;
2917: LD_EXP 23
2921: PPUSH
2922: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
2926: LD_EXP 23
2930: PPUSH
2931: LD_EXP 14
2935: PPUSH
2936: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2940: LD_INT 35
2942: PPUSH
2943: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
2947: LD_EXP 23
2951: PPUSH
2952: LD_EXP 14
2956: PPUSH
2957: CALL_OW 296
2961: PUSH
2962: LD_INT 4
2964: LESS
2965: IFFALSE 2940
// ComTurnUnit ( Johnny , Heike ) ;
2967: LD_EXP 23
2971: PPUSH
2972: LD_EXP 14
2976: PPUSH
2977: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
2981: LD_EXP 23
2985: PPUSH
2986: LD_STRING DJ-ambush-2
2988: PPUSH
2989: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
2993: LD_EXP 14
2997: PPUSH
2998: LD_STRING DH-ambush-2
3000: PPUSH
3001: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3005: LD_EXP 23
3009: PPUSH
3010: LD_STRING DJ-ambush-3
3012: PPUSH
3013: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3017: LD_EXP 14
3021: PPUSH
3022: LD_STRING DH-ambush-3
3024: PPUSH
3025: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3029: LD_EXP 23
3033: PPUSH
3034: LD_STRING DJ-ambush-4
3036: PPUSH
3037: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3041: LD_EXP 14
3045: PPUSH
3046: LD_INT 39
3048: PPUSH
3049: LD_INT 22
3051: PPUSH
3052: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3056: LD_EXP 14
3060: PPUSH
3061: LD_STRING DH-ambush-4
3063: PPUSH
3064: CALL_OW 88
// PrepareRussianPatrol ;
3068: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3072: LD_INT 39
3074: PPUSH
3075: LD_INT 22
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: LD_INT 12
3083: NEG
3084: PPUSH
3085: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3099: LD_EXP 19
3103: PPUSH
3104: LD_INT 39
3106: PPUSH
3107: LD_INT 23
3109: PPUSH
3110: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3114: LD_EXP 14
3118: PUSH
3119: LD_EXP 23
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PPUSH
3128: LD_INT 39
3130: PPUSH
3131: LD_INT 7
3133: PPUSH
3134: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3138: LD_EXP 14
3142: PUSH
3143: LD_EXP 23
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: LD_EXP 19
3156: PUSH
3157: LD_INT 1
3159: ARRAY
3160: PPUSH
3161: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3165: LD_EXP 19
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_STRING DR-ambush-5
3176: PPUSH
3177: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3181: LD_EXP 19
3185: PUSH
3186: LD_INT 2
3188: ARRAY
3189: PPUSH
3190: LD_STRING DR1-ambush-5
3192: PPUSH
3193: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3197: LD_INT 35
3199: PPUSH
3200: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3204: LD_EXP 14
3208: PPUSH
3209: LD_INT 39
3211: PPUSH
3212: LD_INT 7
3214: PPUSH
3215: CALL_OW 297
3219: PUSH
3220: LD_INT 6
3222: LESS
3223: IFFALSE 3197
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3225: LD_EXP 14
3229: PPUSH
3230: LD_EXP 19
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3243: LD_EXP 23
3247: PPUSH
3248: LD_EXP 14
3252: PPUSH
3253: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3257: LD_EXP 23
3261: PPUSH
3262: LD_STRING DJ-ambush-6
3264: PPUSH
3265: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3269: LD_EXP 14
3273: PPUSH
3274: LD_STRING DH-ambush-6
3276: PPUSH
3277: CALL_OW 88
// InGameOff ;
3281: CALL_OW 9
// meetJohnny := true ;
3285: LD_ADDR_EXP 3
3289: PUSH
3290: LD_INT 1
3292: ST_TO_ADDR
// ComFree ( Johnny ) ;
3293: LD_EXP 23
3297: PPUSH
3298: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3302: LD_STRING O2_ambush_cont
3304: PPUSH
3305: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3309: LD_EXP 19
3313: PUSH
3314: LD_EXP 19
3318: ARRAY
3319: PPUSH
3320: LD_INT 29
3322: PPUSH
3323: LD_INT 15
3325: PPUSH
3326: CALL_OW 111
// wait ( 0 0$2 ) ;
3330: LD_INT 70
3332: PPUSH
3333: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3337: LD_INT 3
3339: PPUSH
3340: LD_EXP 14
3344: PPUSH
3345: CALL_OW 292
3349: NOT
3350: PUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_EXP 23
3358: PPUSH
3359: CALL_OW 292
3363: NOT
3364: AND
3365: IFFALSE 3386
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3367: LD_EXP 19
3371: PUSH
3372: LD_INT 1
3374: ARRAY
3375: PPUSH
3376: LD_INT 58
3378: PPUSH
3379: LD_INT 32
3381: PPUSH
3382: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3386: LD_INT 1750
3388: PUSH
3389: LD_INT 1400
3391: PUSH
3392: LD_INT 1225
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: LD_OWVAR 67
3404: ARRAY
3405: PPUSH
3406: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3410: LD_EXP 19
3414: PPUSH
3415: LD_INT 43
3417: PPUSH
3418: LD_INT 13
3420: PPUSH
3421: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3425: LD_INT 35
3427: PPUSH
3428: CALL_OW 67
// until not russianPatrol ;
3432: LD_EXP 19
3436: NOT
3437: IFFALSE 3425
// RemoveSeeing ( 39 , 22 , 2 ) ;
3439: LD_INT 39
3441: PPUSH
3442: LD_INT 22
3444: PPUSH
3445: LD_INT 2
3447: PPUSH
3448: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 81
3462: PUSH
3463: LD_INT 2
3465: EQUAL
3466: IFFALSE 3470
// exit ;
3468: GO 3759
// if not IsOk ( Johnny ) then
3470: LD_EXP 23
3474: PPUSH
3475: CALL_OW 302
3479: NOT
3480: IFFALSE 3491
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3482: LD_STRING O2_ambush_out_cont
3484: PPUSH
3485: CALL_OW 337
// exit ;
3489: GO 3759
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3491: LD_EXP 14
3495: PPUSH
3496: LD_EXP 23
3500: PPUSH
3501: CALL_OW 296
3505: PUSH
3506: LD_INT 10
3508: GREATER
3509: IFFALSE 3552
// begin ComMoveUnit ( Johnny , Heike ) ;
3511: LD_EXP 23
3515: PPUSH
3516: LD_EXP 14
3520: PPUSH
3521: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3532: LD_EXP 23
3536: PPUSH
3537: LD_EXP 14
3541: PPUSH
3542: CALL_OW 296
3546: PUSH
3547: LD_INT 6
3549: LESS
3550: IFFALSE 3525
// end ; CenterNowOnUnits ( Heike ) ;
3552: LD_EXP 14
3556: PPUSH
3557: CALL_OW 87
// InGameOn ;
3561: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3565: LD_EXP 14
3569: PPUSH
3570: LD_EXP 23
3574: PPUSH
3575: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3579: LD_EXP 23
3583: PPUSH
3584: LD_EXP 14
3588: PPUSH
3589: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3593: LD_EXP 23
3597: PPUSH
3598: LD_STRING DJ-thanks-1
3600: PPUSH
3601: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3605: LD_EXP 14
3609: PPUSH
3610: LD_STRING DH-thanks-1
3612: PPUSH
3613: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3617: LD_EXP 23
3621: PPUSH
3622: LD_STRING DJ-thanks-2
3624: PPUSH
3625: CALL_OW 88
// Say ( Heike , DH-thanks-2 ) ;
3629: LD_EXP 14
3633: PPUSH
3634: LD_STRING DH-thanks-2
3636: PPUSH
3637: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3641: LD_EXP 23
3645: PPUSH
3646: LD_INT 4
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3656: LD_INT 35
3658: PPUSH
3659: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3663: LD_INT 2
3665: PPUSH
3666: LD_EXP 23
3670: PPUSH
3671: CALL_OW 292
3675: NOT
3676: IFFALSE 3656
// Say ( Heike , DH-thanks-2a ) ;
3678: LD_EXP 14
3682: PPUSH
3683: LD_STRING DH-thanks-2a
3685: PPUSH
3686: CALL_OW 88
// RemoveUnit ( Johnny ) ;
3690: LD_EXP 23
3694: PPUSH
3695: CALL_OW 64
// InGameOff ;
3699: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3703: LD_STRING O2_ambush_out_cont
3705: PPUSH
3706: CALL_OW 337
// johnnySaved := true ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_INT 1
3717: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
3718: LD_EXP 14
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_INT 600
3728: PPUSH
3729: CALL_OW 492
// if IsOk ( Olaf ) then
3733: LD_EXP 15
3737: PPUSH
3738: CALL_OW 302
3742: IFFALSE 3759
// ComMoveXY ( Olaf , 44 , 25 ) ;
3744: LD_EXP 15
3748: PPUSH
3749: LD_INT 44
3751: PPUSH
3752: LD_INT 25
3754: PPUSH
3755: CALL_OW 111
// end ;
3759: END
// every 0 0$1 trigger russianPatrol do var i ;
3760: LD_EXP 19
3764: IFFALSE 3832
3766: GO 3768
3768: DISABLE
3769: LD_INT 0
3771: PPUSH
// begin enable ;
3772: ENABLE
// for i in russianPatrol do
3773: LD_ADDR_VAR 0 1
3777: PUSH
3778: LD_EXP 19
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3830
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 256
3795: PUSH
3796: LD_INT 1000
3798: LESS
3799: PUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL_OW 314
3809: NOT
3810: AND
3811: IFFALSE 3828
// ComAgressiveMove ( i , 42 , 12 ) ;
3813: LD_VAR 0 1
3817: PPUSH
3818: LD_INT 42
3820: PPUSH
3821: LD_INT 12
3823: PPUSH
3824: CALL_OW 114
3828: GO 3783
3830: POP
3831: POP
// end ;
3832: PPOPN 1
3834: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 81
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: PUSH
3850: LD_EXP 23
3854: PPUSH
3855: CALL_OW 302
3859: AND
3860: IFFALSE 3877
3862: GO 3864
3864: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
3865: LD_EXP 23
3869: PPUSH
3870: LD_STRING DJ-fire-1
3872: PPUSH
3873: CALL_OW 88
3877: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
3878: LD_EXP 7
3882: NOT
3883: PUSH
3884: LD_EXP 21
3888: PPUSH
3889: LD_INT 101
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 72
3903: AND
3904: IFFALSE 4012
3906: GO 3908
3908: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
3909: LD_EXP 14
3913: PPUSH
3914: CALL_OW 87
// DialogueOn ;
3918: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
3922: LD_EXP 14
3926: PPUSH
3927: LD_STRING DH-see-enemy-patrol-1
3929: PPUSH
3930: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
3934: LD_EXP 21
3938: PPUSH
3939: LD_INT 26
3941: PUSH
3942: LD_INT 1
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 72
3953: PUSH
3954: LD_INT 1
3956: ARRAY
3957: PPUSH
3958: LD_STRING DR-see-enemy-patrol-1
3960: PPUSH
3961: CALL_OW 88
// DialogueOff ;
3965: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
3969: LD_EXP 21
3973: PPUSH
3974: LD_INT 66
3976: PPUSH
3977: LD_INT 22
3979: PPUSH
3980: CALL_OW 114
// wait ( 0 0$10 ) ;
3984: LD_INT 350
3986: PPUSH
3987: CALL_OW 67
// ComMoveToArea ( russianForces , russianEastPatrolArea ) ;
3991: LD_EXP 21
3995: PPUSH
3996: LD_INT 9
3998: PPUSH
3999: CALL_OW 113
// AddComHold ( russianForces ) ;
4003: LD_EXP 21
4007: PPUSH
4008: CALL_OW 200
// end ;
4012: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4013: LD_EXP 1
4017: PUSH
4018: LD_EXP 8
4022: NOT
4023: AND
4024: PUSH
4025: LD_EXP 7
4029: NOT
4030: AND
4031: PUSH
4032: LD_EXP 14
4036: PPUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 14
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PPUSH
4047: CALL_OW 69
4051: PPUSH
4052: LD_EXP 14
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 296
4066: PUSH
4067: LD_INT 6
4069: LESS
4070: AND
4071: IFFALSE 4088
4073: GO 4075
4075: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4076: LD_EXP 14
4080: PPUSH
4081: LD_STRING DH-tiger-1
4083: PPUSH
4084: CALL_OW 88
4088: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4089: LD_EXP 1
4093: PUSH
4094: LD_EXP 8
4098: NOT
4099: AND
4100: PUSH
4101: LD_EXP 7
4105: NOT
4106: AND
4107: PUSH
4108: LD_EXP 14
4112: PPUSH
4113: LD_INT 25
4115: PUSH
4116: LD_INT 12
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PPUSH
4123: CALL_OW 69
4127: PPUSH
4128: LD_EXP 14
4132: PPUSH
4133: CALL_OW 74
4137: PPUSH
4138: CALL_OW 296
4142: PUSH
4143: LD_INT 6
4145: LESS
4146: AND
4147: IFFALSE 4164
4149: GO 4151
4151: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4152: LD_EXP 14
4156: PPUSH
4157: LD_STRING DH-ape-1
4159: PPUSH
4160: CALL_OW 88
4164: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4165: LD_EXP 1
4169: PUSH
4170: LD_EXP 8
4174: NOT
4175: AND
4176: PUSH
4177: LD_EXP 7
4181: NOT
4182: AND
4183: PUSH
4184: LD_EXP 14
4188: PPUSH
4189: LD_INT 25
4191: PUSH
4192: LD_INT 18
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: PPUSH
4204: LD_EXP 14
4208: PPUSH
4209: CALL_OW 74
4213: PPUSH
4214: CALL_OW 296
4218: PUSH
4219: LD_INT 6
4221: LESS
4222: AND
4223: IFFALSE 4240
4225: GO 4227
4227: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4228: LD_EXP 14
4232: PPUSH
4233: LD_STRING DH-bird-1
4235: PPUSH
4236: CALL_OW 88
4240: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4241: LD_INT 22
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: LD_INT 101
4253: PUSH
4254: LD_INT 3
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 69
4269: IFFALSE 4282
4271: GO 4273
4273: DISABLE
// russianSpotted := true ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: LD_INT 1
4281: ST_TO_ADDR
4282: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4283: LD_EXP 14
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 69
4316: PPUSH
4317: LD_EXP 14
4321: PPUSH
4322: CALL_OW 74
4326: PPUSH
4327: CALL_OW 296
4331: PUSH
4332: LD_INT 8
4334: LESS
4335: IFFALSE 4352
4337: GO 4339
4339: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4340: LD_EXP 14
4344: PPUSH
4345: LD_STRING DH-enemy-base
4347: PPUSH
4348: CALL_OW 88
4352: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not mercenariesQuestDone do var i ;
4353: LD_EXP 23
4357: PPUSH
4358: CALL_OW 305
4362: NOT
4363: PUSH
4364: LD_EXP 6
4368: NOT
4369: AND
4370: PUSH
4371: LD_EXP 5
4375: AND
4376: PUSH
4377: LD_EXP 11
4381: NOT
4382: AND
4383: IFFALSE 4534
4385: GO 4387
4387: DISABLE
4388: LD_INT 0
4390: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// for i in dogTag do
4398: LD_ADDR_VAR 0 1
4402: PUSH
4403: LD_EXP 5
4407: PUSH
4408: FOR_IN
4409: IFFALSE 4458
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
4411: LD_EXP 14
4415: PPUSH
4416: LD_VAR 0 1
4420: PUSH
4421: LD_INT 1
4423: ARRAY
4424: PPUSH
4425: LD_VAR 0 1
4429: PUSH
4430: LD_INT 2
4432: ARRAY
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 3
4441: LESS
4442: IFFALSE 4456
// begin dogTagFound := i ;
4444: LD_ADDR_EXP 6
4448: PUSH
4449: LD_VAR 0 1
4453: ST_TO_ADDR
// break ;
4454: GO 4458
// end ;
4456: GO 4408
4458: POP
4459: POP
// until dogTagFound ;
4460: LD_EXP 6
4464: IFFALSE 4391
// CenterNowOnUnits ( Heike ) ;
4466: LD_EXP 14
4470: PPUSH
4471: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
4475: LD_EXP 14
4479: PPUSH
4480: LD_EXP 6
4484: PUSH
4485: LD_INT 1
4487: ARRAY
4488: PPUSH
4489: LD_EXP 6
4493: PUSH
4494: LD_INT 2
4496: ARRAY
4497: PPUSH
4498: CALL_OW 111
// if mercenariesQuestReady then
4502: LD_EXP 10
4506: IFFALSE 4522
// Say ( Heike , DH-dogtag-found-quest ) else
4508: LD_EXP 14
4512: PPUSH
4513: LD_STRING DH-dogtag-found-quest
4515: PPUSH
4516: CALL_OW 88
4520: GO 4534
// Say ( Heike , DH-dogtag-found ) ;
4522: LD_EXP 14
4526: PPUSH
4527: LD_STRING DH-dogtag-found
4529: PPUSH
4530: CALL_OW 88
// end ;
4534: PPOPN 1
4536: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
4537: LD_EXP 8
4541: NOT
4542: PUSH
4543: LD_EXP 7
4547: NOT
4548: AND
4549: PUSH
4550: LD_INT 5
4552: PPUSH
4553: LD_EXP 14
4557: PPUSH
4558: CALL_OW 292
4562: AND
4563: PUSH
4564: LD_EXP 14
4568: PPUSH
4569: LD_EXP 15
4573: PPUSH
4574: CALL_OW 296
4578: PUSH
4579: LD_INT 8
4581: LESS
4582: AND
4583: IFFALSE 4944
4585: GO 4587
4587: DISABLE
// begin olafSpotted := true ;
4588: LD_ADDR_EXP 8
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// if HasTask ( Olaf ) then
4596: LD_EXP 15
4600: PPUSH
4601: CALL_OW 314
4605: IFFALSE 4616
// ComStop ( Olaf ) ;
4607: LD_EXP 15
4611: PPUSH
4612: CALL_OW 141
// InGameOn ;
4616: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
4620: LD_EXP 15
4624: PPUSH
4625: LD_EXP 14
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 8
4637: GREATER
4638: IFFALSE 4654
// ComMoveUnit ( Olaf , Heike ) ;
4640: LD_EXP 15
4644: PPUSH
4645: LD_EXP 14
4649: PPUSH
4650: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
4654: LD_INT 35
4656: PPUSH
4657: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
4661: LD_EXP 15
4665: PPUSH
4666: LD_EXP 14
4670: PPUSH
4671: CALL_OW 296
4675: PUSH
4676: LD_INT 8
4678: LESSEQUAL
4679: IFFALSE 4654
// ComTurnUnit ( Heike , Olaf ) ;
4681: LD_EXP 14
4685: PPUSH
4686: LD_EXP 15
4690: PPUSH
4691: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
4695: LD_EXP 15
4699: PPUSH
4700: LD_EXP 14
4704: PPUSH
4705: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
4709: LD_EXP 15
4713: PPUSH
4714: LD_STRING DO-olaf-1
4716: PPUSH
4717: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
4721: LD_EXP 14
4725: PPUSH
4726: LD_STRING DH-olaf-1
4728: PPUSH
4729: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
4733: LD_EXP 15
4737: PPUSH
4738: LD_STRING DO-olaf-2
4740: PPUSH
4741: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
4745: LD_EXP 14
4749: PPUSH
4750: LD_STRING DH-olaf-2
4752: PPUSH
4753: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
4757: LD_EXP 15
4761: PPUSH
4762: LD_STRING DO-olaf-3
4764: PPUSH
4765: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
4769: LD_EXP 15
4773: PPUSH
4774: LD_STRING DO-olaf-4
4776: PPUSH
4777: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
4781: LD_EXP 14
4785: PPUSH
4786: LD_STRING DH-olaf-4
4788: PPUSH
4789: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
4793: LD_EXP 15
4797: PPUSH
4798: LD_STRING DO-olaf-5
4800: PPUSH
4801: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
4805: LD_EXP 14
4809: PPUSH
4810: LD_STRING DH-olaf-5
4812: PPUSH
4813: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
4817: LD_EXP 15
4821: PPUSH
4822: LD_STRING DO-olaf-6
4824: PPUSH
4825: CALL_OW 88
// if russianSpotted or johnnySaved then
4829: LD_EXP 9
4833: PUSH
4834: LD_EXP 4
4838: OR
4839: IFFALSE 4867
// begin Say ( Heike , DH-olaf-6a ) ;
4841: LD_EXP 14
4845: PPUSH
4846: LD_STRING DH-olaf-6a
4848: PPUSH
4849: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
4853: LD_EXP 15
4857: PPUSH
4858: LD_STRING DO-olaf-7a
4860: PPUSH
4861: CALL_OW 88
// end else
4865: GO 4891
// begin Say ( Heike , DH-olaf-6b ) ;
4867: LD_EXP 14
4871: PPUSH
4872: LD_STRING DH-olaf-6b
4874: PPUSH
4875: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
4879: LD_EXP 15
4883: PPUSH
4884: LD_STRING DO-olaf-7b
4886: PPUSH
4887: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
4891: LD_EXP 15
4895: PPUSH
4896: LD_STRING DO-olaf-8
4898: PPUSH
4899: CALL_OW 88
// InGameOff ;
4903: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
4907: LD_STRING O3_camp_cont
4909: PPUSH
4910: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
4914: LD_EXP 15
4918: PPUSH
4919: LD_INT 52
4921: PPUSH
4922: LD_INT 90
4924: PPUSH
4925: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
4929: LD_EXP 15
4933: PPUSH
4934: LD_INT 53
4936: PPUSH
4937: LD_INT 89
4939: PPUSH
4940: CALL_OW 178
// end ;
4944: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
4945: LD_EXP 8
4949: NOT
4950: PUSH
4951: LD_EXP 14
4955: PPUSH
4956: LD_EXP 16
4960: PPUSH
4961: CALL_OW 296
4965: PUSH
4966: LD_INT 36
4968: LESS
4969: AND
4970: IFFALSE 4990
4972: GO 4974
4974: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
4975: LD_EXP 15
4979: PPUSH
4980: LD_INT 39
4982: PPUSH
4983: LD_INT 71
4985: PPUSH
4986: CALL_OW 111
4990: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
4991: LD_EXP 7
4995: NOT
4996: PUSH
4997: LD_INT 2
4999: PPUSH
5000: LD_EXP 17
5004: PPUSH
5005: CALL_OW 292
5009: PUSH
5010: LD_INT 2
5012: PPUSH
5013: LD_EXP 16
5017: PPUSH
5018: CALL_OW 292
5022: OR
5023: AND
5024: IFFALSE 6349
5026: GO 5028
5028: DISABLE
5029: LD_INT 0
5031: PPUSH
5032: PPUSH
5033: PPUSH
// begin if IsLive ( Johnny ) then
5034: LD_EXP 23
5038: PPUSH
5039: CALL_OW 300
5043: IFFALSE 5054
// KillUnit ( Johnny ) ;
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 66
// mercenariesSpotted := true ;
5054: LD_ADDR_EXP 7
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5062: LD_STRING O4_camp_cont
5064: PPUSH
5065: CALL_OW 337
// InGameOn ;
5069: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5073: LD_INT 53
5075: PPUSH
5076: LD_INT 89
5078: PPUSH
5079: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5083: LD_INT 53
5085: PPUSH
5086: LD_INT 89
5088: PPUSH
5089: LD_INT 2
5091: PPUSH
5092: LD_INT 8
5094: NEG
5095: PPUSH
5096: CALL_OW 330
// if olafSpotted then
5100: LD_EXP 8
5104: IFFALSE 5222
// begin AddComTurnUnit ( Olaf , Heike ) ;
5106: LD_EXP 15
5110: PPUSH
5111: LD_EXP 14
5115: PPUSH
5116: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5120: LD_EXP 14
5124: PPUSH
5125: LD_INT 51
5127: PPUSH
5128: LD_INT 86
5130: PPUSH
5131: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5135: LD_EXP 14
5139: PPUSH
5140: LD_EXP 15
5144: PPUSH
5145: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5149: LD_EXP 15
5153: PPUSH
5154: LD_STRING DO-camp-1
5156: PPUSH
5157: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5161: LD_EXP 16
5165: PUSH
5166: LD_EXP 17
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: LD_EXP 14
5179: PPUSH
5180: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5184: LD_EXP 16
5188: PPUSH
5189: LD_STRING DG-camp-1
5191: PPUSH
5192: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5196: LD_EXP 14
5200: PPUSH
5201: LD_STRING DH-camp-1
5203: PPUSH
5204: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5208: LD_EXP 15
5212: PPUSH
5213: LD_STRING DO-camp-2
5215: PPUSH
5216: CALL_OW 88
// end else
5220: GO 5617
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5222: LD_EXP 14
5226: PPUSH
5227: LD_INT 51
5229: PPUSH
5230: LD_INT 86
5232: PPUSH
5233: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5237: LD_EXP 14
5241: PPUSH
5242: LD_EXP 16
5246: PPUSH
5247: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5251: LD_EXP 16
5255: PUSH
5256: LD_EXP 17
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: LD_EXP 14
5269: PPUSH
5270: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DG-camp-1a
5281: PPUSH
5282: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5286: LD_EXP 14
5290: PPUSH
5291: LD_STRING DH-camp-1a
5293: PPUSH
5294: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5305: LD_EXP 17
5309: PPUSH
5310: LD_EXP 15
5314: PPUSH
5315: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5319: LD_EXP 17
5323: PPUSH
5324: LD_STRING DM-camp-1a
5326: PPUSH
5327: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5331: LD_EXP 15
5335: PPUSH
5336: LD_INT 52
5338: PPUSH
5339: LD_INT 90
5341: PPUSH
5342: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5346: LD_EXP 17
5350: PPUSH
5351: LD_EXP 14
5355: PPUSH
5356: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5360: LD_EXP 16
5364: PPUSH
5365: LD_STRING DG-camp-2a
5367: PPUSH
5368: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5372: LD_EXP 14
5376: PPUSH
5377: LD_STRING DH-camp-2a
5379: PPUSH
5380: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
5384: LD_EXP 17
5388: PPUSH
5389: LD_STRING DM-camp-2a
5391: PPUSH
5392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5396: LD_INT 35
5398: PPUSH
5399: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
5403: LD_EXP 15
5407: PPUSH
5408: LD_EXP 14
5412: PPUSH
5413: CALL_OW 296
5417: PUSH
5418: LD_INT 10
5420: LESS
5421: IFFALSE 5396
// AddComTurnUnit ( Olaf , Heike ) ;
5423: LD_EXP 15
5427: PPUSH
5428: LD_EXP 14
5432: PPUSH
5433: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
5437: LD_EXP 17
5441: PPUSH
5442: LD_EXP 14
5446: PPUSH
5447: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
5451: LD_EXP 15
5455: PPUSH
5456: LD_STRING DO-camp-2a
5458: PPUSH
5459: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
5463: LD_EXP 14
5467: PPUSH
5468: LD_EXP 15
5472: PPUSH
5473: CALL_OW 119
// if russianSpotted then
5477: LD_EXP 9
5481: IFFALSE 5521
// begin Say ( Heike , DH-camp-2aa ) ;
5483: LD_EXP 14
5487: PPUSH
5488: LD_STRING DH-camp-2aa
5490: PPUSH
5491: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
5495: LD_EXP 16
5499: PPUSH
5500: LD_STRING DG-camp-2aa
5502: PPUSH
5503: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
5507: LD_EXP 17
5511: PPUSH
5512: LD_STRING DM-camp-2aa
5514: PPUSH
5515: CALL_OW 88
// end else
5519: GO 5545
// begin Say ( Heike , DH-camp-2ab ) ;
5521: LD_EXP 14
5525: PPUSH
5526: LD_STRING DH-camp-2ab
5528: PPUSH
5529: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
5533: LD_EXP 17
5537: PPUSH
5538: LD_STRING DM-camp-2ab
5540: PPUSH
5541: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
5545: LD_EXP 14
5549: PPUSH
5550: LD_STRING DH-camp-3a
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
5557: LD_EXP 15
5561: PPUSH
5562: LD_STRING DO-camp-3a
5564: PPUSH
5565: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DG-camp-3a
5576: PPUSH
5577: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
5581: LD_EXP 14
5585: PPUSH
5586: LD_STRING DH-camp-4aa
5588: PPUSH
5589: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
5593: LD_EXP 17
5597: PPUSH
5598: LD_STRING DM-camp-4aa
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
5605: LD_EXP 15
5609: PPUSH
5610: LD_STRING DO-camp-4a
5612: PPUSH
5613: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
5617: LD_EXP 15
5621: PPUSH
5622: LD_STRING DO-camp-3
5624: PPUSH
5625: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
5629: LD_EXP 15
5633: PPUSH
5634: LD_STRING DO-camp-4
5636: PPUSH
5637: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
5641: LD_EXP 16
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DG-camp-4
5662: PPUSH
5663: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
5667: LD_EXP 14
5671: PPUSH
5672: LD_EXP 16
5676: PPUSH
5677: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
5681: LD_EXP 14
5685: PPUSH
5686: LD_STRING DH-camp-4
5688: PPUSH
5689: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
5693: LD_EXP 17
5697: PUSH
5698: LD_EXP 15
5702: PUSH
5703: LD_EXP 16
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: PPUSH
5713: LD_EXP 14
5717: PPUSH
5718: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
5722: LD_EXP 16
5726: PPUSH
5727: LD_STRING DG-camp-5
5729: PPUSH
5730: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
5734: LD_EXP 16
5738: PPUSH
5739: LD_STRING DG-camp-6
5741: PPUSH
5742: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
5746: LD_EXP 14
5750: PPUSH
5751: LD_STRING DH-camp-6
5753: PPUSH
5754: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
5758: LD_EXP 16
5762: PPUSH
5763: LD_STRING DG-camp-7
5765: PPUSH
5766: CALL_OW 88
// if DogTagFound then
5770: LD_EXP 6
5774: IFFALSE 5814
// begin Say ( Heike , DH-quest-1a ) ;
5776: LD_EXP 14
5780: PPUSH
5781: LD_STRING DH-quest-1a
5783: PPUSH
5784: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
5788: LD_EXP 16
5792: PPUSH
5793: LD_STRING DG-quest-1a
5795: PPUSH
5796: CALL_OW 88
// mercenariesQuestDone := true ;
5800: LD_ADDR_EXP 11
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// InGameOff ;
5808: CALL_OW 9
// end else
5812: GO 5980
// begin Say ( Heike , DH-camp-7 ) ;
5814: LD_EXP 14
5818: PPUSH
5819: LD_STRING DH-camp-7
5821: PPUSH
5822: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
5826: LD_EXP 14
5830: PPUSH
5831: CALL_OW 256
5835: PUSH
5836: LD_INT 1000
5838: LESS
5839: IFFALSE 5931
// begin Say ( Olaf , DO-heal-1 ) ;
5841: LD_EXP 15
5845: PPUSH
5846: LD_STRING DO-heal-1
5848: PPUSH
5849: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
5853: LD_EXP 14
5857: PPUSH
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 88
5863: PPUSH
5864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5868: LD_INT 35
5870: PPUSH
5871: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
5875: LD_EXP 14
5879: PPUSH
5880: LD_EXP 15
5884: PPUSH
5885: CALL_OW 296
5889: PUSH
5890: LD_INT 4
5892: LESS
5893: PUSH
5894: LD_EXP 14
5898: PPUSH
5899: LD_INT 51
5901: PPUSH
5902: LD_INT 88
5904: PPUSH
5905: CALL_OW 307
5909: OR
5910: IFFALSE 5868
// SetLives ( Heike , 1000 ) ;
5912: LD_EXP 14
5916: PPUSH
5917: LD_INT 1000
5919: PPUSH
5920: CALL_OW 234
// wait ( 0 0$2 ) ;
5924: LD_INT 70
5926: PPUSH
5927: CALL_OW 67
// end ; InGameOff ;
5931: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
5935: LD_EXP 15
5939: PUSH
5940: LD_EXP 16
5944: PUSH
5945: LD_EXP 17
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: LD_INT 53
5957: PPUSH
5958: LD_INT 89
5960: PPUSH
5961: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
5965: LD_STRING O5_proof_cont
5967: PPUSH
5968: CALL_OW 337
// mercenariesQuestReady := true ;
5972: LD_ADDR_EXP 10
5976: PUSH
5977: LD_INT 1
5979: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
5980: LD_EXP 10
5984: NOT
5985: IFFALSE 5989
// exit ;
5987: GO 6349
// wait ( 0 0$35 ) ;
5989: LD_INT 1225
5991: PPUSH
5992: CALL_OW 67
// driver := PreparePatrolTank ;
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: CALL 2473 0 0
6005: ST_TO_ADDR
// if not driver then
6006: LD_VAR 0 2
6010: NOT
6011: IFFALSE 6015
// exit ;
6013: GO 6349
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6015: LD_INT 2
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: LD_INT 2
6023: PPUSH
6024: LD_INT 1
6026: PPUSH
6027: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: CALL_OW 310
6045: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_INT 500
6053: PPUSH
6054: CALL_OW 234
// SetLives ( driver , 450 ) ;
6058: LD_VAR 0 2
6062: PPUSH
6063: LD_INT 450
6065: PPUSH
6066: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6070: LD_VAR 0 2
6074: PPUSH
6075: LD_INT 59
6077: PPUSH
6078: LD_INT 60
6080: PPUSH
6081: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6085: LD_INT 35
6087: PPUSH
6088: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6092: LD_VAR 0 3
6096: PPUSH
6097: LD_INT 59
6099: PPUSH
6100: LD_INT 60
6102: PPUSH
6103: CALL_OW 307
6107: IFFALSE 6085
// if not See ( 1 , Heike ) then
6109: LD_INT 1
6111: PPUSH
6112: LD_EXP 14
6116: PPUSH
6117: CALL_OW 292
6121: NOT
6122: IFFALSE 6246
// begin if Difficulty < 3 then
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 3
6131: LESS
6132: IFFALSE 6150
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6134: LD_INT 59
6136: PPUSH
6137: LD_INT 60
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: LD_INT 6
6145: PPUSH
6146: CALL_OW 330
// ComExitVehicle ( driver ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: CALL_OW 121
// wait ( 0 0$1 ) ;
6159: LD_INT 35
6161: PPUSH
6162: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6166: LD_VAR 0 2
6170: PPUSH
6171: LD_INT 58
6173: PPUSH
6174: LD_INT 54
6176: PPUSH
6177: CALL_OW 171
// wait ( 0 0$1 ) ;
6181: LD_INT 35
6183: PPUSH
6184: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6188: LD_VAR 0 2
6192: PPUSH
6193: LD_INT 57
6195: PPUSH
6196: LD_INT 53
6198: PPUSH
6199: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6203: LD_VAR 0 2
6207: PPUSH
6208: LD_INT 350
6210: PPUSH
6211: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_VAR 0 3
6224: PPUSH
6225: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6229: LD_VAR 0 2
6233: PPUSH
6234: LD_INT 107
6236: PPUSH
6237: LD_INT 118
6239: PPUSH
6240: CALL_OW 171
// end else
6244: GO 6261
// begin ComMoveXY ( driver , 107 , 118 ) ;
6246: LD_VAR 0 2
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 118
6256: PPUSH
6257: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6268: LD_VAR 0 3
6272: PPUSH
6273: LD_INT 107
6275: PPUSH
6276: LD_INT 118
6278: PPUSH
6279: CALL_OW 307
6283: PUSH
6284: LD_VAR 0 2
6288: PPUSH
6289: CALL_OW 301
6293: OR
6294: IFFALSE 6261
// if IsDead ( driver [ 1 ] ) then
6296: LD_VAR 0 2
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: CALL_OW 301
6309: IFFALSE 6313
// exit ;
6311: GO 6349
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6313: LD_ADDR_VAR 0 1
6317: PUSH
6318: LD_INT 22
6320: PUSH
6321: LD_INT 1
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6347
// RemoveUnit ( i ) ;
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 64
6345: GO 6333
6347: POP
6348: POP
// end ;
6349: PPOPN 3
6351: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6352: LD_INT 10
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 70
6383: IFFALSE 6457
6385: GO 6387
6387: DISABLE
// begin InGameOn ;
6388: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6392: LD_EXP 15
6396: PUSH
6397: LD_EXP 17
6401: PUSH
6402: LD_EXP 16
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PPUSH
6412: LD_EXP 14
6416: PPUSH
6417: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DM-quest-1
6428: PPUSH
6429: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
6433: LD_EXP 16
6437: PPUSH
6438: LD_STRING DG-quest-1
6440: PPUSH
6441: CALL_OW 88
// InGameOff ;
6445: CALL_OW 9
// mercenariesQuestDone := true ;
6449: LD_ADDR_EXP 11
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// end ;
6457: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady do var p ;
6458: LD_EXP 14
6462: PPUSH
6463: LD_INT 10
6465: PPUSH
6466: CALL_OW 308
6470: PUSH
6471: LD_EXP 6
6475: AND
6476: PUSH
6477: LD_EXP 10
6481: AND
6482: IFFALSE 6654
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
// begin InGameOn ;
6490: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6494: LD_EXP 15
6498: PUSH
6499: LD_EXP 17
6503: PUSH
6504: LD_EXP 16
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: LD_EXP 14
6518: PPUSH
6519: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
6523: LD_EXP 14
6527: PPUSH
6528: LD_INT 54
6530: PPUSH
6531: LD_INT 86
6533: PPUSH
6534: CALL_OW 111
// p := p + 1 ;
6538: LD_ADDR_VAR 0 1
6542: PUSH
6543: LD_VAR 0 1
6547: PUSH
6548: LD_INT 1
6550: PLUS
6551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6552: LD_INT 35
6554: PPUSH
6555: CALL_OW 67
// p := p + 1 ;
6559: LD_ADDR_VAR 0 1
6563: PUSH
6564: LD_VAR 0 1
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
6573: LD_EXP 14
6577: PPUSH
6578: LD_EXP 16
6582: PPUSH
6583: CALL_OW 296
6587: PUSH
6588: LD_INT 4
6590: LESS
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: LD_INT 5
6599: GREATER
6600: OR
6601: IFFALSE 6552
// Say ( Mike , DM-quest-1 ) ;
6603: LD_EXP 17
6607: PPUSH
6608: LD_STRING DM-quest-1
6610: PPUSH
6611: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
6615: LD_EXP 16
6619: PPUSH
6620: LD_STRING DG-quest-1
6622: PPUSH
6623: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
6627: LD_EXP 14
6631: PPUSH
6632: LD_INT 55
6634: PPUSH
6635: LD_INT 87
6637: PPUSH
6638: CALL_OW 111
// InGameOff ;
6642: CALL_OW 9
// mercenariesQuestDone := true ;
6646: LD_ADDR_EXP 11
6650: PUSH
6651: LD_INT 1
6653: ST_TO_ADDR
// end ;
6654: PPOPN 1
6656: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
6657: LD_EXP 14
6661: PUSH
6662: LD_INT 55
6664: PUSH
6665: EMPTY
6666: LIST
6667: PPUSH
6668: CALL_OW 69
6672: IN
6673: IFFALSE 6713
6675: GO 6677
6677: DISABLE
// begin if Difficulty < 3 then
6678: LD_OWVAR 67
6682: PUSH
6683: LD_INT 3
6685: LESS
6686: IFFALSE 6701
// RemoveSeeing ( 59 , 60 , 2 ) ;
6688: LD_INT 59
6690: PPUSH
6691: LD_INT 60
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: CALL_OW 331
// Say ( Heike , DH-driver ) ;
6701: LD_EXP 14
6705: PPUSH
6706: LD_STRING DH-driver
6708: PPUSH
6709: CALL_OW 88
// end ;
6713: END
// every 0 0$1 trigger mercenariesQuestDone do
6714: LD_EXP 11
6718: IFFALSE 7089
6720: GO 6722
6722: DISABLE
// begin if mercenariesQuestReady then
6723: LD_EXP 10
6727: IFFALSE 6736
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
6729: LD_STRING O5_proof_cont_out
6731: PPUSH
6732: CALL_OW 337
// InGameOn ;
6736: CALL_OW 8
// if IsInUnit ( Heike ) then
6740: LD_EXP 14
6744: PPUSH
6745: CALL_OW 310
6749: IFFALSE 6760
// ComExitVehicle ( Heike ) ;
6751: LD_EXP 14
6755: PPUSH
6756: CALL_OW 121
// wait ( 3 ) ;
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
6767: LD_EXP 14
6771: PPUSH
6772: LD_EXP 16
6776: PPUSH
6777: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6781: LD_EXP 15
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 16
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PPUSH
6801: LD_EXP 14
6805: PPUSH
6806: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
6810: LD_EXP 14
6814: PPUSH
6815: LD_STRING DH-quest-done-1
6817: PPUSH
6818: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
6822: LD_EXP 17
6826: PPUSH
6827: LD_STRING DM-quest-done-1
6829: PPUSH
6830: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6834: LD_EXP 14
6838: PPUSH
6839: LD_EXP 15
6843: PPUSH
6844: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
6848: LD_EXP 14
6852: PPUSH
6853: LD_STRING DH-quest-done-2
6855: PPUSH
6856: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
6860: LD_EXP 15
6864: PPUSH
6865: LD_STRING DO-quest-done-2
6867: PPUSH
6868: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
6872: LD_EXP 15
6876: PPUSH
6877: LD_STRING DO-quest-done-3
6879: PPUSH
6880: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
6884: LD_EXP 16
6888: PPUSH
6889: LD_INT 51
6891: PPUSH
6892: LD_INT 90
6894: PPUSH
6895: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
6899: LD_EXP 16
6903: PPUSH
6904: LD_INT 50
6906: PPUSH
6907: LD_INT 89
6909: PPUSH
6910: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
6914: LD_EXP 14
6918: PPUSH
6919: LD_EXP 16
6923: PPUSH
6924: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
6928: LD_EXP 16
6932: PPUSH
6933: LD_STRING DG-quest-done-4
6935: PPUSH
6936: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
6940: LD_EXP 16
6944: PPUSH
6945: LD_EXP 14
6949: PPUSH
6950: CALL_OW 119
// Say ( Heike , DH-quest-done-4 ) ;
6954: LD_EXP 14
6958: PPUSH
6959: LD_STRING DH-quest-done-4
6961: PPUSH
6962: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
6966: LD_EXP 15
6970: PPUSH
6971: LD_STRING DO-quest-done-4
6973: PPUSH
6974: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6978: LD_EXP 14
6982: PPUSH
6983: LD_EXP 15
6987: PPUSH
6988: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
6992: LD_EXP 14
6996: PPUSH
6997: LD_STRING DH-quest-done-5
6999: PPUSH
7000: CALL_OW 88
// InGameOff ;
7004: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7008: LD_STRING O6_end_cont
7010: PPUSH
7011: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7015: LD_EXP 16
7019: PPUSH
7020: LD_INT 2
7022: PPUSH
7023: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7027: LD_EXP 17
7031: PPUSH
7032: LD_INT 2
7034: PPUSH
7035: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7039: LD_INT 42
7041: PPUSH
7042: LD_INT 2
7044: PPUSH
7045: LD_INT 2
7047: PPUSH
7048: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7052: LD_EXP 15
7056: PPUSH
7057: LD_INT 53
7059: PPUSH
7060: LD_INT 89
7062: PPUSH
7063: CALL_OW 118
// lastObjectiveActive := true ;
7067: LD_ADDR_EXP 12
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7075: LD_INT 1
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: CALL_OW 424
// PreparePrison ;
7085: CALL 1081 0 0
// end ;
7089: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 7 ] ] ) do var i , tmp ;
7090: LD_INT 22
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 91
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 7
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 69
7122: IFFALSE 7266
7124: GO 7126
7126: DISABLE
7127: LD_INT 0
7129: PPUSH
7130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 54
7158: PUSH
7159: EMPTY
7160: LIST
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: PPUSH
7167: CALL_OW 69
7171: ST_TO_ADDR
// if not tmp then
7172: LD_VAR 0 2
7176: NOT
7177: IFFALSE 7181
// exit ;
7179: GO 7266
// for i in tmp do
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_VAR 0 2
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7220
// begin ComExitBuilding ( i ) ;
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 121
7210: PPUSH
7211: LD_INT 22
7213: PPUSH
7214: CALL_OW 174
// end ;
7218: GO 7191
7220: POP
7221: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
7222: LD_EXP 21
7226: PPUSH
7227: LD_INT 121
7229: PPUSH
7230: LD_INT 22
7232: PPUSH
7233: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
7237: LD_EXP 22
7241: PPUSH
7242: LD_INT 121
7244: PPUSH
7245: LD_INT 22
7247: PPUSH
7248: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7252: LD_EXP 22
7256: PPUSH
7257: LD_EXP 14
7261: PPUSH
7262: CALL_OW 175
// end ;
7266: PPOPN 2
7268: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 7 ] ] ) do var i , tmp ;
7269: LD_INT 22
7271: PUSH
7272: LD_INT 2
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 91
7281: PUSH
7282: LD_INT 8
7284: PUSH
7285: LD_INT 7
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: IFFALSE 7445
7303: GO 7305
7305: DISABLE
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_INT 22
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 25
7327: PUSH
7328: LD_INT 1
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 54
7337: PUSH
7338: EMPTY
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 69
7350: ST_TO_ADDR
// if not tmp then
7351: LD_VAR 0 2
7355: NOT
7356: IFFALSE 7360
// exit ;
7358: GO 7445
// for i in tmp do
7360: LD_ADDR_VAR 0 1
7364: PUSH
7365: LD_VAR 0 2
7369: PUSH
7370: FOR_IN
7371: IFFALSE 7399
// begin ComExitBuilding ( i ) ;
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
7382: LD_VAR 0 1
7386: PPUSH
7387: LD_INT 142
7389: PPUSH
7390: LD_INT 71
7392: PPUSH
7393: CALL_OW 174
// end ;
7397: GO 7370
7399: POP
7400: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
7401: LD_EXP 21
7405: PPUSH
7406: LD_INT 142
7408: PPUSH
7409: LD_INT 71
7411: PPUSH
7412: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
7416: LD_EXP 22
7420: PPUSH
7421: LD_INT 142
7423: PPUSH
7424: LD_INT 71
7426: PPUSH
7427: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7431: LD_EXP 22
7435: PPUSH
7436: LD_EXP 14
7440: PPUSH
7441: CALL_OW 175
// end ;
7445: PPOPN 2
7447: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
7448: LD_EXP 12
7452: PUSH
7453: LD_INT 2
7455: PPUSH
7456: CALL_OW 302
7460: NOT
7461: AND
7462: PUSH
7463: LD_OWVAR 67
7467: PUSH
7468: LD_INT 1
7470: EQUAL
7471: AND
7472: PUSH
7473: LD_EXP 13
7477: NOT
7478: AND
7479: IFFALSE 7496
7481: GO 7483
7483: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
7484: LD_EXP 14
7488: PPUSH
7489: LD_STRING DH-prison-missing
7491: PPUSH
7492: CALL_OW 88
// end ;
7496: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
7497: LD_EXP 12
7501: PUSH
7502: LD_INT 8
7504: PPUSH
7505: CALL_OW 302
7509: NOT
7510: AND
7511: PUSH
7512: LD_OWVAR 67
7516: PUSH
7517: LD_INT 1
7519: GREATER
7520: AND
7521: PUSH
7522: LD_EXP 13
7526: NOT
7527: AND
7528: IFFALSE 7545
7530: GO 7532
7532: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
7533: LD_EXP 14
7537: PPUSH
7538: LD_STRING DH-prison-missing
7540: PPUSH
7541: CALL_OW 88
// end ;
7545: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
7546: LD_EXP 12
7550: PUSH
7551: LD_INT 3
7553: PPUSH
7554: CALL_OW 302
7558: NOT
7559: AND
7560: PUSH
7561: LD_EXP 13
7565: NOT
7566: AND
7567: IFFALSE 7584
7569: GO 7571
7571: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
7572: LD_EXP 14
7576: PPUSH
7577: LD_STRING DH-prison-missing-a
7579: PPUSH
7580: CALL_OW 88
// end ;
7584: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
7585: LD_EXP 12
7589: PUSH
7590: LD_INT 10
7592: PPUSH
7593: CALL_OW 302
7597: NOT
7598: AND
7599: PUSH
7600: LD_EXP 13
7604: NOT
7605: AND
7606: IFFALSE 7623
7608: GO 7610
7610: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DH-prison-missing-a
7618: PPUSH
7619: CALL_OW 88
// end ;
7623: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
7624: LD_EXP 13
7628: NOT
7629: PUSH
7630: LD_EXP 12
7634: AND
7635: PUSH
7636: LD_INT 2
7638: PPUSH
7639: LD_EXP 18
7643: PPUSH
7644: CALL_OW 292
7648: AND
7649: IFFALSE 7736
7651: GO 7653
7653: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
7654: LD_EXP 18
7658: PPUSH
7659: LD_EXP 14
7663: PPUSH
7664: CALL_OW 119
// DialogueOn ;
7668: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
7672: LD_EXP 18
7676: PPUSH
7677: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
7681: LD_EXP 18
7685: PPUSH
7686: LD_STRING DK-prison-found
7688: PPUSH
7689: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
7693: LD_EXP 14
7697: PPUSH
7698: LD_STRING DH-prison-found
7700: PPUSH
7701: CALL_OW 88
// DialogueOff ;
7705: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
7709: LD_EXP 18
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: CALL_OW 235
// prisonFound := true ;
7721: LD_ADDR_EXP 13
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
7729: LD_STRING O6_prison_out
7731: PPUSH
7732: CALL_OW 337
// end ;
7736: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) = 0 do var tmp ;
7737: LD_EXP 12
7741: PUSH
7742: LD_EXP 14
7746: PPUSH
7747: CALL_OW 302
7751: AND
7752: PUSH
7753: LD_INT 1
7755: PPUSH
7756: LD_INT 21
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 2
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PPUSH
7780: CALL_OW 71
7784: PUSH
7785: LD_INT 0
7787: EQUAL
7788: AND
7789: IFFALSE 8098
7791: GO 7793
7793: DISABLE
7794: LD_INT 0
7796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
7797: LD_ADDR_VAR 0 1
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 21
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 69
7830: ST_TO_ADDR
// if prisonFound then
7831: LD_EXP 13
7835: IFFALSE 7849
// AddMedal ( med1 , 1 ) else
7837: LD_STRING med1
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: CALL_OW 101
7847: GO 7860
// AddMedal ( med1 , - 1 ) ;
7849: LD_STRING med1
7851: PPUSH
7852: LD_INT 1
7854: NEG
7855: PPUSH
7856: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
7860: LD_VAR 0 1
7864: PUSH
7865: LD_INT 3
7867: LESS
7868: PUSH
7869: LD_EXP 13
7873: NOT
7874: AND
7875: PUSH
7876: LD_VAR 0 1
7880: PUSH
7881: LD_INT 4
7883: LESS
7884: PUSH
7885: LD_EXP 13
7889: AND
7890: OR
7891: IFFALSE 7906
// AddMedal ( med2 , - 1 ) else
7893: LD_STRING med2
7895: PPUSH
7896: LD_INT 1
7898: NEG
7899: PPUSH
7900: CALL_OW 101
7904: GO 7916
// AddMedal ( med2 , 1 ) ;
7906: LD_STRING med2
7908: PPUSH
7909: LD_INT 1
7911: PPUSH
7912: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
7916: LD_EXP 13
7920: PUSH
7921: LD_EXP 4
7925: AND
7926: PUSH
7927: LD_VAR 0 1
7931: PUSH
7932: LD_INT 4
7934: GREATEREQUAL
7935: AND
7936: IFFALSE 7950
// AddMedal ( med3 , 1 ) else
7938: LD_STRING med3
7940: PPUSH
7941: LD_INT 1
7943: PPUSH
7944: CALL_OW 101
7948: GO 7961
// AddMedal ( med3 , - 1 ) ;
7950: LD_STRING med3
7952: PPUSH
7953: LD_INT 1
7955: NEG
7956: PPUSH
7957: CALL_OW 101
// GiveMedals ( MAIN ) ;
7961: LD_STRING MAIN
7963: PPUSH
7964: CALL_OW 102
// RewardPeople ( tmp ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
7977: LD_EXP 14
7981: PPUSH
7982: LD_STRING 01_Heike
7984: PPUSH
7985: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
7989: LD_EXP 16
7993: PPUSH
7994: CALL_OW 302
7998: PUSH
7999: LD_EXP 16
8003: PUSH
8004: LD_VAR 0 1
8008: IN
8009: AND
8010: IFFALSE 8024
// SaveCharacters ( Givi , 01_Givi ) ;
8012: LD_EXP 16
8016: PPUSH
8017: LD_STRING 01_Givi
8019: PPUSH
8020: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
8024: LD_EXP 17
8028: PPUSH
8029: CALL_OW 302
8033: PUSH
8034: LD_EXP 17
8038: PUSH
8039: LD_VAR 0 1
8043: IN
8044: AND
8045: IFFALSE 8059
// SaveCharacters ( Mike , 01_Mike ) ;
8047: LD_EXP 17
8051: PPUSH
8052: LD_STRING 01_Mike
8054: PPUSH
8055: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
8059: LD_EXP 18
8063: PPUSH
8064: CALL_OW 302
8068: PUSH
8069: LD_EXP 18
8073: PUSH
8074: LD_VAR 0 1
8078: IN
8079: AND
8080: IFFALSE 8094
// SaveCharacters ( Kamil , 01_Kamil ) ;
8082: LD_EXP 18
8086: PPUSH
8087: LD_STRING 01_Kamil
8089: PPUSH
8090: CALL_OW 38
// YouWin ;
8094: CALL_OW 103
// end ; end_of_file
8098: PPOPN 1
8100: END
// on UnitDestroyed ( un ) do begin if un = Heike then
8101: LD_VAR 0 1
8105: PUSH
8106: LD_EXP 14
8110: EQUAL
8111: IFFALSE 8120
// YouLost ( Heike ) ;
8113: LD_STRING Heike
8115: PPUSH
8116: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
8120: LD_VAR 0 1
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_INT 3
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 25
8137: PUSH
8138: LD_INT 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PPUSH
8149: CALL_OW 69
8153: IN
8154: IFFALSE 8260
// begin if un in russianPatrol then
8156: LD_VAR 0 1
8160: PUSH
8161: LD_EXP 19
8165: IN
8166: IFFALSE 8184
// russianPatrol := russianPatrol diff un ;
8168: LD_ADDR_EXP 19
8172: PUSH
8173: LD_EXP 19
8177: PUSH
8178: LD_VAR 0 1
8182: DIFF
8183: ST_TO_ADDR
// if un in russianForestPatrol then
8184: LD_VAR 0 1
8188: PUSH
8189: LD_EXP 20
8193: IN
8194: IFFALSE 8212
// russianForestPatrol := russianForestPatrol diff un ;
8196: LD_ADDR_EXP 20
8200: PUSH
8201: LD_EXP 20
8205: PUSH
8206: LD_VAR 0 1
8210: DIFF
8211: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
8212: LD_ADDR_EXP 5
8216: PUSH
8217: LD_EXP 5
8221: PPUSH
8222: LD_EXP 5
8226: PUSH
8227: LD_INT 1
8229: PLUS
8230: PPUSH
8231: LD_VAR 0 1
8235: PPUSH
8236: CALL_OW 250
8240: PUSH
8241: LD_VAR 0 1
8245: PPUSH
8246: CALL_OW 251
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 1
8259: ST_TO_ADDR
// end ; end ;
8260: PPOPN 1
8262: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
8263: LD_VAR 0 1
8267: PUSH
8268: LD_EXP 14
8272: EQUAL
8273: IFFALSE 8282
// YouLost ( Heike ) ;
8275: LD_STRING Heike
8277: PPUSH
8278: CALL_OW 104
// end ;
8282: PPOPN 1
8284: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
8285: LD_VAR 0 1
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: IN
8300: PUSH
8301: LD_VAR 0 2
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: LD_INT 2
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: IN
8316: AND
8317: IFFALSE 8326
// YouLost ( FriendlyFire ) ;
8319: LD_STRING FriendlyFire
8321: PPUSH
8322: CALL_OW 104
// end ; end_of_file
8326: PPOPN 2
8328: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8329: GO 8331
8331: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8332: LD_STRING initStreamRollete();
8334: PPUSH
8335: CALL_OW 559
// InitStreamMode ;
8339: CALL 8348 0 0
// DefineStreamItems ( ) ;
8343: CALL 8788 0 0
// end ;
8347: END
// function InitStreamMode ; begin
8348: LD_INT 0
8350: PPUSH
// streamModeActive := false ;
8351: LD_ADDR_EXP 24
8355: PUSH
8356: LD_INT 0
8358: ST_TO_ADDR
// normalCounter := 36 ;
8359: LD_ADDR_EXP 25
8363: PUSH
8364: LD_INT 36
8366: ST_TO_ADDR
// hardcoreCounter := 16 ;
8367: LD_ADDR_EXP 26
8371: PUSH
8372: LD_INT 16
8374: ST_TO_ADDR
// sRocket := false ;
8375: LD_ADDR_EXP 29
8379: PUSH
8380: LD_INT 0
8382: ST_TO_ADDR
// sSpeed := false ;
8383: LD_ADDR_EXP 28
8387: PUSH
8388: LD_INT 0
8390: ST_TO_ADDR
// sEngine := false ;
8391: LD_ADDR_EXP 30
8395: PUSH
8396: LD_INT 0
8398: ST_TO_ADDR
// sSpec := false ;
8399: LD_ADDR_EXP 27
8403: PUSH
8404: LD_INT 0
8406: ST_TO_ADDR
// sLevel := false ;
8407: LD_ADDR_EXP 31
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// sArmoury := false ;
8415: LD_ADDR_EXP 32
8419: PUSH
8420: LD_INT 0
8422: ST_TO_ADDR
// sRadar := false ;
8423: LD_ADDR_EXP 33
8427: PUSH
8428: LD_INT 0
8430: ST_TO_ADDR
// sBunker := false ;
8431: LD_ADDR_EXP 34
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// sHack := false ;
8439: LD_ADDR_EXP 35
8443: PUSH
8444: LD_INT 0
8446: ST_TO_ADDR
// sFire := false ;
8447: LD_ADDR_EXP 36
8451: PUSH
8452: LD_INT 0
8454: ST_TO_ADDR
// sRefresh := false ;
8455: LD_ADDR_EXP 37
8459: PUSH
8460: LD_INT 0
8462: ST_TO_ADDR
// sExp := false ;
8463: LD_ADDR_EXP 38
8467: PUSH
8468: LD_INT 0
8470: ST_TO_ADDR
// sDepot := false ;
8471: LD_ADDR_EXP 39
8475: PUSH
8476: LD_INT 0
8478: ST_TO_ADDR
// sFlag := false ;
8479: LD_ADDR_EXP 40
8483: PUSH
8484: LD_INT 0
8486: ST_TO_ADDR
// sKamikadze := false ;
8487: LD_ADDR_EXP 48
8491: PUSH
8492: LD_INT 0
8494: ST_TO_ADDR
// sTroll := false ;
8495: LD_ADDR_EXP 49
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// sSlow := false ;
8503: LD_ADDR_EXP 50
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// sLack := false ;
8511: LD_ADDR_EXP 51
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// sTank := false ;
8519: LD_ADDR_EXP 53
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// sRemote := false ;
8527: LD_ADDR_EXP 54
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// sPowell := false ;
8535: LD_ADDR_EXP 55
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// sTeleport := false ;
8543: LD_ADDR_EXP 58
8547: PUSH
8548: LD_INT 0
8550: ST_TO_ADDR
// sOilTower := false ;
8551: LD_ADDR_EXP 60
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// sShovel := false ;
8559: LD_ADDR_EXP 61
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// sSheik := false ;
8567: LD_ADDR_EXP 62
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// sEarthquake := false ;
8575: LD_ADDR_EXP 64
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// sAI := false ;
8583: LD_ADDR_EXP 65
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// sCargo := false ;
8591: LD_ADDR_EXP 68
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// sDLaser := false ;
8599: LD_ADDR_EXP 69
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// sExchange := false ;
8607: LD_ADDR_EXP 70
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// sFac := false ;
8615: LD_ADDR_EXP 71
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// sPower := false ;
8623: LD_ADDR_EXP 72
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// sRandom := false ;
8631: LD_ADDR_EXP 73
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// sShield := false ;
8639: LD_ADDR_EXP 74
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// sTime := false ;
8647: LD_ADDR_EXP 75
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// sTools := false ;
8655: LD_ADDR_EXP 76
8659: PUSH
8660: LD_INT 0
8662: ST_TO_ADDR
// sSold := false ;
8663: LD_ADDR_EXP 41
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// sDiff := false ;
8671: LD_ADDR_EXP 42
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// sFog := false ;
8679: LD_ADDR_EXP 45
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// sReset := false ;
8687: LD_ADDR_EXP 46
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// sSun := false ;
8695: LD_ADDR_EXP 47
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// sTiger := false ;
8703: LD_ADDR_EXP 43
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// sBomb := false ;
8711: LD_ADDR_EXP 44
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// sWound := false ;
8719: LD_ADDR_EXP 52
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// sBetray := false ;
8727: LD_ADDR_EXP 56
8731: PUSH
8732: LD_INT 0
8734: ST_TO_ADDR
// sContamin := false ;
8735: LD_ADDR_EXP 57
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// sOil := false ;
8743: LD_ADDR_EXP 59
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// sStu := false ;
8751: LD_ADDR_EXP 63
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// sBazooka := false ;
8759: LD_ADDR_EXP 66
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// sMortar := false ;
8767: LD_ADDR_EXP 67
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sRanger := false ;
8775: LD_ADDR_EXP 77
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// end ;
8783: LD_VAR 0 1
8787: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8788: LD_INT 0
8790: PPUSH
8791: PPUSH
8792: PPUSH
8793: PPUSH
8794: PPUSH
// result := [ ] ;
8795: LD_ADDR_VAR 0 1
8799: PUSH
8800: EMPTY
8801: ST_TO_ADDR
// if campaign_id = 1 then
8802: LD_OWVAR 69
8806: PUSH
8807: LD_INT 1
8809: EQUAL
8810: IFFALSE 11748
// begin case mission_number of 1 :
8812: LD_OWVAR 70
8816: PUSH
8817: LD_INT 1
8819: DOUBLE
8820: EQUAL
8821: IFTRUE 8825
8823: GO 8889
8825: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8826: LD_ADDR_VAR 0 1
8830: PUSH
8831: LD_INT 2
8833: PUSH
8834: LD_INT 4
8836: PUSH
8837: LD_INT 11
8839: PUSH
8840: LD_INT 12
8842: PUSH
8843: LD_INT 15
8845: PUSH
8846: LD_INT 16
8848: PUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 23
8854: PUSH
8855: LD_INT 26
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 101
8871: PUSH
8872: LD_INT 102
8874: PUSH
8875: LD_INT 106
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: ST_TO_ADDR
8887: GO 11746
8889: LD_INT 2
8891: DOUBLE
8892: EQUAL
8893: IFTRUE 8897
8895: GO 8969
8897: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_INT 2
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: LD_INT 11
8911: PUSH
8912: LD_INT 12
8914: PUSH
8915: LD_INT 15
8917: PUSH
8918: LD_INT 16
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_INT 23
8926: PUSH
8927: LD_INT 26
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 101
8943: PUSH
8944: LD_INT 102
8946: PUSH
8947: LD_INT 105
8949: PUSH
8950: LD_INT 106
8952: PUSH
8953: LD_INT 108
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: ST_TO_ADDR
8967: GO 11746
8969: LD_INT 3
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 9053
8977: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8978: LD_ADDR_VAR 0 1
8982: PUSH
8983: LD_INT 2
8985: PUSH
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 11
8994: PUSH
8995: LD_INT 12
8997: PUSH
8998: LD_INT 15
9000: PUSH
9001: LD_INT 16
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_INT 26
9009: PUSH
9010: LD_INT 36
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 101
9027: PUSH
9028: LD_INT 102
9030: PUSH
9031: LD_INT 105
9033: PUSH
9034: LD_INT 106
9036: PUSH
9037: LD_INT 108
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: ST_TO_ADDR
9051: GO 11746
9053: LD_INT 4
9055: DOUBLE
9056: EQUAL
9057: IFTRUE 9061
9059: GO 9145
9061: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_INT 2
9069: PUSH
9070: LD_INT 4
9072: PUSH
9073: LD_INT 5
9075: PUSH
9076: LD_INT 8
9078: PUSH
9079: LD_INT 11
9081: PUSH
9082: LD_INT 12
9084: PUSH
9085: LD_INT 15
9087: PUSH
9088: LD_INT 16
9090: PUSH
9091: LD_INT 22
9093: PUSH
9094: LD_INT 23
9096: PUSH
9097: LD_INT 26
9099: PUSH
9100: LD_INT 36
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 101
9119: PUSH
9120: LD_INT 102
9122: PUSH
9123: LD_INT 105
9125: PUSH
9126: LD_INT 106
9128: PUSH
9129: LD_INT 108
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: ST_TO_ADDR
9143: GO 11746
9145: LD_INT 5
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9253
9153: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9154: LD_ADDR_VAR 0 1
9158: PUSH
9159: LD_INT 2
9161: PUSH
9162: LD_INT 4
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: LD_INT 6
9170: PUSH
9171: LD_INT 8
9173: PUSH
9174: LD_INT 11
9176: PUSH
9177: LD_INT 12
9179: PUSH
9180: LD_INT 15
9182: PUSH
9183: LD_INT 16
9185: PUSH
9186: LD_INT 22
9188: PUSH
9189: LD_INT 23
9191: PUSH
9192: LD_INT 25
9194: PUSH
9195: LD_INT 26
9197: PUSH
9198: LD_INT 36
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 101
9219: PUSH
9220: LD_INT 102
9222: PUSH
9223: LD_INT 105
9225: PUSH
9226: LD_INT 106
9228: PUSH
9229: LD_INT 108
9231: PUSH
9232: LD_INT 109
9234: PUSH
9235: LD_INT 112
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: ST_TO_ADDR
9251: GO 11746
9253: LD_INT 6
9255: DOUBLE
9256: EQUAL
9257: IFTRUE 9261
9259: GO 9381
9261: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9262: LD_ADDR_VAR 0 1
9266: PUSH
9267: LD_INT 2
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 8
9281: PUSH
9282: LD_INT 11
9284: PUSH
9285: LD_INT 12
9287: PUSH
9288: LD_INT 15
9290: PUSH
9291: LD_INT 16
9293: PUSH
9294: LD_INT 20
9296: PUSH
9297: LD_INT 21
9299: PUSH
9300: LD_INT 22
9302: PUSH
9303: LD_INT 23
9305: PUSH
9306: LD_INT 25
9308: PUSH
9309: LD_INT 26
9311: PUSH
9312: LD_INT 30
9314: PUSH
9315: LD_INT 31
9317: PUSH
9318: LD_INT 32
9320: PUSH
9321: LD_INT 36
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 101
9347: PUSH
9348: LD_INT 102
9350: PUSH
9351: LD_INT 105
9353: PUSH
9354: LD_INT 106
9356: PUSH
9357: LD_INT 108
9359: PUSH
9360: LD_INT 109
9362: PUSH
9363: LD_INT 112
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: ST_TO_ADDR
9379: GO 11746
9381: LD_INT 7
9383: DOUBLE
9384: EQUAL
9385: IFTRUE 9389
9387: GO 9489
9389: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9390: LD_ADDR_VAR 0 1
9394: PUSH
9395: LD_INT 2
9397: PUSH
9398: LD_INT 4
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: LD_INT 7
9406: PUSH
9407: LD_INT 11
9409: PUSH
9410: LD_INT 12
9412: PUSH
9413: LD_INT 15
9415: PUSH
9416: LD_INT 16
9418: PUSH
9419: LD_INT 20
9421: PUSH
9422: LD_INT 21
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_INT 23
9430: PUSH
9431: LD_INT 25
9433: PUSH
9434: LD_INT 26
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 101
9455: PUSH
9456: LD_INT 102
9458: PUSH
9459: LD_INT 103
9461: PUSH
9462: LD_INT 105
9464: PUSH
9465: LD_INT 106
9467: PUSH
9468: LD_INT 108
9470: PUSH
9471: LD_INT 112
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: ST_TO_ADDR
9487: GO 11746
9489: LD_INT 8
9491: DOUBLE
9492: EQUAL
9493: IFTRUE 9497
9495: GO 9625
9497: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9498: LD_ADDR_VAR 0 1
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: LD_INT 4
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: LD_INT 6
9514: PUSH
9515: LD_INT 7
9517: PUSH
9518: LD_INT 8
9520: PUSH
9521: LD_INT 11
9523: PUSH
9524: LD_INT 12
9526: PUSH
9527: LD_INT 15
9529: PUSH
9530: LD_INT 16
9532: PUSH
9533: LD_INT 20
9535: PUSH
9536: LD_INT 21
9538: PUSH
9539: LD_INT 22
9541: PUSH
9542: LD_INT 23
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 26
9550: PUSH
9551: LD_INT 30
9553: PUSH
9554: LD_INT 31
9556: PUSH
9557: LD_INT 32
9559: PUSH
9560: LD_INT 36
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 101
9587: PUSH
9588: LD_INT 102
9590: PUSH
9591: LD_INT 103
9593: PUSH
9594: LD_INT 105
9596: PUSH
9597: LD_INT 106
9599: PUSH
9600: LD_INT 108
9602: PUSH
9603: LD_INT 109
9605: PUSH
9606: LD_INT 112
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: ST_TO_ADDR
9623: GO 11746
9625: LD_INT 9
9627: DOUBLE
9628: EQUAL
9629: IFTRUE 9633
9631: GO 9769
9633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9634: LD_ADDR_VAR 0 1
9638: PUSH
9639: LD_INT 2
9641: PUSH
9642: LD_INT 4
9644: PUSH
9645: LD_INT 5
9647: PUSH
9648: LD_INT 6
9650: PUSH
9651: LD_INT 7
9653: PUSH
9654: LD_INT 8
9656: PUSH
9657: LD_INT 11
9659: PUSH
9660: LD_INT 12
9662: PUSH
9663: LD_INT 15
9665: PUSH
9666: LD_INT 16
9668: PUSH
9669: LD_INT 20
9671: PUSH
9672: LD_INT 21
9674: PUSH
9675: LD_INT 22
9677: PUSH
9678: LD_INT 23
9680: PUSH
9681: LD_INT 25
9683: PUSH
9684: LD_INT 26
9686: PUSH
9687: LD_INT 28
9689: PUSH
9690: LD_INT 30
9692: PUSH
9693: LD_INT 31
9695: PUSH
9696: LD_INT 32
9698: PUSH
9699: LD_INT 36
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 101
9727: PUSH
9728: LD_INT 102
9730: PUSH
9731: LD_INT 103
9733: PUSH
9734: LD_INT 105
9736: PUSH
9737: LD_INT 106
9739: PUSH
9740: LD_INT 108
9742: PUSH
9743: LD_INT 109
9745: PUSH
9746: LD_INT 112
9748: PUSH
9749: LD_INT 114
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: ST_TO_ADDR
9767: GO 11746
9769: LD_INT 10
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9961
9777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9778: LD_ADDR_VAR 0 1
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: LD_INT 4
9788: PUSH
9789: LD_INT 5
9791: PUSH
9792: LD_INT 6
9794: PUSH
9795: LD_INT 7
9797: PUSH
9798: LD_INT 8
9800: PUSH
9801: LD_INT 9
9803: PUSH
9804: LD_INT 10
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: LD_INT 12
9812: PUSH
9813: LD_INT 13
9815: PUSH
9816: LD_INT 14
9818: PUSH
9819: LD_INT 15
9821: PUSH
9822: LD_INT 16
9824: PUSH
9825: LD_INT 17
9827: PUSH
9828: LD_INT 18
9830: PUSH
9831: LD_INT 19
9833: PUSH
9834: LD_INT 20
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 22
9842: PUSH
9843: LD_INT 23
9845: PUSH
9846: LD_INT 24
9848: PUSH
9849: LD_INT 25
9851: PUSH
9852: LD_INT 26
9854: PUSH
9855: LD_INT 28
9857: PUSH
9858: LD_INT 30
9860: PUSH
9861: LD_INT 31
9863: PUSH
9864: LD_INT 32
9866: PUSH
9867: LD_INT 36
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 101
9903: PUSH
9904: LD_INT 102
9906: PUSH
9907: LD_INT 103
9909: PUSH
9910: LD_INT 104
9912: PUSH
9913: LD_INT 105
9915: PUSH
9916: LD_INT 106
9918: PUSH
9919: LD_INT 107
9921: PUSH
9922: LD_INT 108
9924: PUSH
9925: LD_INT 109
9927: PUSH
9928: LD_INT 110
9930: PUSH
9931: LD_INT 111
9933: PUSH
9934: LD_INT 112
9936: PUSH
9937: LD_INT 114
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: ST_TO_ADDR
9959: GO 11746
9961: LD_INT 11
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9969
9967: GO 10161
9969: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9970: LD_ADDR_VAR 0 1
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 6
9989: PUSH
9990: LD_INT 7
9992: PUSH
9993: LD_INT 8
9995: PUSH
9996: LD_INT 9
9998: PUSH
9999: LD_INT 10
10001: PUSH
10002: LD_INT 11
10004: PUSH
10005: LD_INT 12
10007: PUSH
10008: LD_INT 13
10010: PUSH
10011: LD_INT 14
10013: PUSH
10014: LD_INT 15
10016: PUSH
10017: LD_INT 16
10019: PUSH
10020: LD_INT 17
10022: PUSH
10023: LD_INT 18
10025: PUSH
10026: LD_INT 19
10028: PUSH
10029: LD_INT 20
10031: PUSH
10032: LD_INT 21
10034: PUSH
10035: LD_INT 22
10037: PUSH
10038: LD_INT 23
10040: PUSH
10041: LD_INT 24
10043: PUSH
10044: LD_INT 25
10046: PUSH
10047: LD_INT 26
10049: PUSH
10050: LD_INT 28
10052: PUSH
10053: LD_INT 30
10055: PUSH
10056: LD_INT 31
10058: PUSH
10059: LD_INT 32
10061: PUSH
10062: LD_INT 34
10064: PUSH
10065: LD_INT 36
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 101
10103: PUSH
10104: LD_INT 102
10106: PUSH
10107: LD_INT 103
10109: PUSH
10110: LD_INT 104
10112: PUSH
10113: LD_INT 105
10115: PUSH
10116: LD_INT 106
10118: PUSH
10119: LD_INT 107
10121: PUSH
10122: LD_INT 108
10124: PUSH
10125: LD_INT 109
10127: PUSH
10128: LD_INT 110
10130: PUSH
10131: LD_INT 111
10133: PUSH
10134: LD_INT 112
10136: PUSH
10137: LD_INT 114
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: ST_TO_ADDR
10159: GO 11746
10161: LD_INT 12
10163: DOUBLE
10164: EQUAL
10165: IFTRUE 10169
10167: GO 10377
10169: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10170: LD_ADDR_VAR 0 1
10174: PUSH
10175: LD_INT 1
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: LD_INT 4
10186: PUSH
10187: LD_INT 5
10189: PUSH
10190: LD_INT 6
10192: PUSH
10193: LD_INT 7
10195: PUSH
10196: LD_INT 8
10198: PUSH
10199: LD_INT 9
10201: PUSH
10202: LD_INT 10
10204: PUSH
10205: LD_INT 11
10207: PUSH
10208: LD_INT 12
10210: PUSH
10211: LD_INT 13
10213: PUSH
10214: LD_INT 14
10216: PUSH
10217: LD_INT 15
10219: PUSH
10220: LD_INT 16
10222: PUSH
10223: LD_INT 17
10225: PUSH
10226: LD_INT 18
10228: PUSH
10229: LD_INT 19
10231: PUSH
10232: LD_INT 20
10234: PUSH
10235: LD_INT 21
10237: PUSH
10238: LD_INT 22
10240: PUSH
10241: LD_INT 23
10243: PUSH
10244: LD_INT 24
10246: PUSH
10247: LD_INT 25
10249: PUSH
10250: LD_INT 26
10252: PUSH
10253: LD_INT 27
10255: PUSH
10256: LD_INT 28
10258: PUSH
10259: LD_INT 30
10261: PUSH
10262: LD_INT 31
10264: PUSH
10265: LD_INT 32
10267: PUSH
10268: LD_INT 33
10270: PUSH
10271: LD_INT 34
10273: PUSH
10274: LD_INT 36
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 101
10315: PUSH
10316: LD_INT 102
10318: PUSH
10319: LD_INT 103
10321: PUSH
10322: LD_INT 104
10324: PUSH
10325: LD_INT 105
10327: PUSH
10328: LD_INT 106
10330: PUSH
10331: LD_INT 107
10333: PUSH
10334: LD_INT 108
10336: PUSH
10337: LD_INT 109
10339: PUSH
10340: LD_INT 110
10342: PUSH
10343: LD_INT 111
10345: PUSH
10346: LD_INT 112
10348: PUSH
10349: LD_INT 113
10351: PUSH
10352: LD_INT 114
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: ST_TO_ADDR
10375: GO 11746
10377: LD_INT 13
10379: DOUBLE
10380: EQUAL
10381: IFTRUE 10385
10383: GO 10581
10385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10386: LD_ADDR_VAR 0 1
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: LD_INT 2
10396: PUSH
10397: LD_INT 3
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: LD_INT 9
10411: PUSH
10412: LD_INT 10
10414: PUSH
10415: LD_INT 11
10417: PUSH
10418: LD_INT 12
10420: PUSH
10421: LD_INT 14
10423: PUSH
10424: LD_INT 15
10426: PUSH
10427: LD_INT 16
10429: PUSH
10430: LD_INT 17
10432: PUSH
10433: LD_INT 18
10435: PUSH
10436: LD_INT 19
10438: PUSH
10439: LD_INT 20
10441: PUSH
10442: LD_INT 21
10444: PUSH
10445: LD_INT 22
10447: PUSH
10448: LD_INT 23
10450: PUSH
10451: LD_INT 24
10453: PUSH
10454: LD_INT 25
10456: PUSH
10457: LD_INT 26
10459: PUSH
10460: LD_INT 27
10462: PUSH
10463: LD_INT 28
10465: PUSH
10466: LD_INT 30
10468: PUSH
10469: LD_INT 31
10471: PUSH
10472: LD_INT 32
10474: PUSH
10475: LD_INT 33
10477: PUSH
10478: LD_INT 34
10480: PUSH
10481: LD_INT 36
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 101
10519: PUSH
10520: LD_INT 102
10522: PUSH
10523: LD_INT 103
10525: PUSH
10526: LD_INT 104
10528: PUSH
10529: LD_INT 105
10531: PUSH
10532: LD_INT 106
10534: PUSH
10535: LD_INT 107
10537: PUSH
10538: LD_INT 108
10540: PUSH
10541: LD_INT 109
10543: PUSH
10544: LD_INT 110
10546: PUSH
10547: LD_INT 111
10549: PUSH
10550: LD_INT 112
10552: PUSH
10553: LD_INT 113
10555: PUSH
10556: LD_INT 114
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: ST_TO_ADDR
10579: GO 11746
10581: LD_INT 14
10583: DOUBLE
10584: EQUAL
10585: IFTRUE 10589
10587: GO 10801
10589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10590: LD_ADDR_VAR 0 1
10594: PUSH
10595: LD_INT 1
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: LD_INT 3
10603: PUSH
10604: LD_INT 4
10606: PUSH
10607: LD_INT 5
10609: PUSH
10610: LD_INT 6
10612: PUSH
10613: LD_INT 7
10615: PUSH
10616: LD_INT 8
10618: PUSH
10619: LD_INT 9
10621: PUSH
10622: LD_INT 10
10624: PUSH
10625: LD_INT 11
10627: PUSH
10628: LD_INT 12
10630: PUSH
10631: LD_INT 13
10633: PUSH
10634: LD_INT 14
10636: PUSH
10637: LD_INT 15
10639: PUSH
10640: LD_INT 16
10642: PUSH
10643: LD_INT 17
10645: PUSH
10646: LD_INT 18
10648: PUSH
10649: LD_INT 19
10651: PUSH
10652: LD_INT 20
10654: PUSH
10655: LD_INT 21
10657: PUSH
10658: LD_INT 22
10660: PUSH
10661: LD_INT 23
10663: PUSH
10664: LD_INT 24
10666: PUSH
10667: LD_INT 25
10669: PUSH
10670: LD_INT 26
10672: PUSH
10673: LD_INT 27
10675: PUSH
10676: LD_INT 28
10678: PUSH
10679: LD_INT 29
10681: PUSH
10682: LD_INT 30
10684: PUSH
10685: LD_INT 31
10687: PUSH
10688: LD_INT 32
10690: PUSH
10691: LD_INT 33
10693: PUSH
10694: LD_INT 34
10696: PUSH
10697: LD_INT 36
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 101
10739: PUSH
10740: LD_INT 102
10742: PUSH
10743: LD_INT 103
10745: PUSH
10746: LD_INT 104
10748: PUSH
10749: LD_INT 105
10751: PUSH
10752: LD_INT 106
10754: PUSH
10755: LD_INT 107
10757: PUSH
10758: LD_INT 108
10760: PUSH
10761: LD_INT 109
10763: PUSH
10764: LD_INT 110
10766: PUSH
10767: LD_INT 111
10769: PUSH
10770: LD_INT 112
10772: PUSH
10773: LD_INT 113
10775: PUSH
10776: LD_INT 114
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: ST_TO_ADDR
10799: GO 11746
10801: LD_INT 15
10803: DOUBLE
10804: EQUAL
10805: IFTRUE 10809
10807: GO 11021
10809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10810: LD_ADDR_VAR 0 1
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: LD_INT 3
10823: PUSH
10824: LD_INT 4
10826: PUSH
10827: LD_INT 5
10829: PUSH
10830: LD_INT 6
10832: PUSH
10833: LD_INT 7
10835: PUSH
10836: LD_INT 8
10838: PUSH
10839: LD_INT 9
10841: PUSH
10842: LD_INT 10
10844: PUSH
10845: LD_INT 11
10847: PUSH
10848: LD_INT 12
10850: PUSH
10851: LD_INT 13
10853: PUSH
10854: LD_INT 14
10856: PUSH
10857: LD_INT 15
10859: PUSH
10860: LD_INT 16
10862: PUSH
10863: LD_INT 17
10865: PUSH
10866: LD_INT 18
10868: PUSH
10869: LD_INT 19
10871: PUSH
10872: LD_INT 20
10874: PUSH
10875: LD_INT 21
10877: PUSH
10878: LD_INT 22
10880: PUSH
10881: LD_INT 23
10883: PUSH
10884: LD_INT 24
10886: PUSH
10887: LD_INT 25
10889: PUSH
10890: LD_INT 26
10892: PUSH
10893: LD_INT 27
10895: PUSH
10896: LD_INT 28
10898: PUSH
10899: LD_INT 29
10901: PUSH
10902: LD_INT 30
10904: PUSH
10905: LD_INT 31
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: LD_INT 33
10913: PUSH
10914: LD_INT 34
10916: PUSH
10917: LD_INT 36
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 101
10959: PUSH
10960: LD_INT 102
10962: PUSH
10963: LD_INT 103
10965: PUSH
10966: LD_INT 104
10968: PUSH
10969: LD_INT 105
10971: PUSH
10972: LD_INT 106
10974: PUSH
10975: LD_INT 107
10977: PUSH
10978: LD_INT 108
10980: PUSH
10981: LD_INT 109
10983: PUSH
10984: LD_INT 110
10986: PUSH
10987: LD_INT 111
10989: PUSH
10990: LD_INT 112
10992: PUSH
10993: LD_INT 113
10995: PUSH
10996: LD_INT 114
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: ST_TO_ADDR
11019: GO 11746
11021: LD_INT 16
11023: DOUBLE
11024: EQUAL
11025: IFTRUE 11029
11027: GO 11153
11029: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11030: LD_ADDR_VAR 0 1
11034: PUSH
11035: LD_INT 2
11037: PUSH
11038: LD_INT 4
11040: PUSH
11041: LD_INT 5
11043: PUSH
11044: LD_INT 7
11046: PUSH
11047: LD_INT 11
11049: PUSH
11050: LD_INT 12
11052: PUSH
11053: LD_INT 15
11055: PUSH
11056: LD_INT 16
11058: PUSH
11059: LD_INT 20
11061: PUSH
11062: LD_INT 21
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 26
11076: PUSH
11077: LD_INT 30
11079: PUSH
11080: LD_INT 31
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 33
11088: PUSH
11089: LD_INT 34
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 101
11115: PUSH
11116: LD_INT 102
11118: PUSH
11119: LD_INT 103
11121: PUSH
11122: LD_INT 106
11124: PUSH
11125: LD_INT 108
11127: PUSH
11128: LD_INT 112
11130: PUSH
11131: LD_INT 113
11133: PUSH
11134: LD_INT 114
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: ST_TO_ADDR
11151: GO 11746
11153: LD_INT 17
11155: DOUBLE
11156: EQUAL
11157: IFTRUE 11161
11159: GO 11373
11161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11162: LD_ADDR_VAR 0 1
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: LD_INT 4
11178: PUSH
11179: LD_INT 5
11181: PUSH
11182: LD_INT 6
11184: PUSH
11185: LD_INT 7
11187: PUSH
11188: LD_INT 8
11190: PUSH
11191: LD_INT 9
11193: PUSH
11194: LD_INT 10
11196: PUSH
11197: LD_INT 11
11199: PUSH
11200: LD_INT 12
11202: PUSH
11203: LD_INT 13
11205: PUSH
11206: LD_INT 14
11208: PUSH
11209: LD_INT 15
11211: PUSH
11212: LD_INT 16
11214: PUSH
11215: LD_INT 17
11217: PUSH
11218: LD_INT 18
11220: PUSH
11221: LD_INT 19
11223: PUSH
11224: LD_INT 20
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 22
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 24
11238: PUSH
11239: LD_INT 25
11241: PUSH
11242: LD_INT 26
11244: PUSH
11245: LD_INT 27
11247: PUSH
11248: LD_INT 28
11250: PUSH
11251: LD_INT 29
11253: PUSH
11254: LD_INT 30
11256: PUSH
11257: LD_INT 31
11259: PUSH
11260: LD_INT 32
11262: PUSH
11263: LD_INT 33
11265: PUSH
11266: LD_INT 34
11268: PUSH
11269: LD_INT 36
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 101
11311: PUSH
11312: LD_INT 102
11314: PUSH
11315: LD_INT 103
11317: PUSH
11318: LD_INT 104
11320: PUSH
11321: LD_INT 105
11323: PUSH
11324: LD_INT 106
11326: PUSH
11327: LD_INT 107
11329: PUSH
11330: LD_INT 108
11332: PUSH
11333: LD_INT 109
11335: PUSH
11336: LD_INT 110
11338: PUSH
11339: LD_INT 111
11341: PUSH
11342: LD_INT 112
11344: PUSH
11345: LD_INT 113
11347: PUSH
11348: LD_INT 114
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: ST_TO_ADDR
11371: GO 11746
11373: LD_INT 18
11375: DOUBLE
11376: EQUAL
11377: IFTRUE 11381
11379: GO 11517
11381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11382: LD_ADDR_VAR 0 1
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: LD_INT 5
11395: PUSH
11396: LD_INT 7
11398: PUSH
11399: LD_INT 11
11401: PUSH
11402: LD_INT 12
11404: PUSH
11405: LD_INT 15
11407: PUSH
11408: LD_INT 16
11410: PUSH
11411: LD_INT 20
11413: PUSH
11414: LD_INT 21
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 23
11422: PUSH
11423: LD_INT 25
11425: PUSH
11426: LD_INT 26
11428: PUSH
11429: LD_INT 30
11431: PUSH
11432: LD_INT 31
11434: PUSH
11435: LD_INT 32
11437: PUSH
11438: LD_INT 33
11440: PUSH
11441: LD_INT 34
11443: PUSH
11444: LD_INT 35
11446: PUSH
11447: LD_INT 36
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 101
11475: PUSH
11476: LD_INT 102
11478: PUSH
11479: LD_INT 103
11481: PUSH
11482: LD_INT 106
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 112
11490: PUSH
11491: LD_INT 113
11493: PUSH
11494: LD_INT 114
11496: PUSH
11497: LD_INT 115
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: ST_TO_ADDR
11515: GO 11746
11517: LD_INT 19
11519: DOUBLE
11520: EQUAL
11521: IFTRUE 11525
11523: GO 11745
11525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11526: LD_ADDR_VAR 0 1
11530: PUSH
11531: LD_INT 1
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 4
11542: PUSH
11543: LD_INT 5
11545: PUSH
11546: LD_INT 6
11548: PUSH
11549: LD_INT 7
11551: PUSH
11552: LD_INT 8
11554: PUSH
11555: LD_INT 9
11557: PUSH
11558: LD_INT 10
11560: PUSH
11561: LD_INT 11
11563: PUSH
11564: LD_INT 12
11566: PUSH
11567: LD_INT 13
11569: PUSH
11570: LD_INT 14
11572: PUSH
11573: LD_INT 15
11575: PUSH
11576: LD_INT 16
11578: PUSH
11579: LD_INT 17
11581: PUSH
11582: LD_INT 18
11584: PUSH
11585: LD_INT 19
11587: PUSH
11588: LD_INT 20
11590: PUSH
11591: LD_INT 21
11593: PUSH
11594: LD_INT 22
11596: PUSH
11597: LD_INT 23
11599: PUSH
11600: LD_INT 24
11602: PUSH
11603: LD_INT 25
11605: PUSH
11606: LD_INT 26
11608: PUSH
11609: LD_INT 27
11611: PUSH
11612: LD_INT 28
11614: PUSH
11615: LD_INT 29
11617: PUSH
11618: LD_INT 30
11620: PUSH
11621: LD_INT 31
11623: PUSH
11624: LD_INT 32
11626: PUSH
11627: LD_INT 33
11629: PUSH
11630: LD_INT 34
11632: PUSH
11633: LD_INT 35
11635: PUSH
11636: LD_INT 36
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 101
11679: PUSH
11680: LD_INT 102
11682: PUSH
11683: LD_INT 103
11685: PUSH
11686: LD_INT 104
11688: PUSH
11689: LD_INT 105
11691: PUSH
11692: LD_INT 106
11694: PUSH
11695: LD_INT 107
11697: PUSH
11698: LD_INT 108
11700: PUSH
11701: LD_INT 109
11703: PUSH
11704: LD_INT 110
11706: PUSH
11707: LD_INT 111
11709: PUSH
11710: LD_INT 112
11712: PUSH
11713: LD_INT 113
11715: PUSH
11716: LD_INT 114
11718: PUSH
11719: LD_INT 115
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: ST_TO_ADDR
11743: GO 11746
11745: POP
// end else
11746: GO 11783
// if campaign_id = 5 then
11748: LD_OWVAR 69
11752: PUSH
11753: LD_INT 5
11755: EQUAL
11756: IFFALSE 11783
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
11758: LD_ADDR_VAR 0 1
11762: PUSH
11763: LD_INT 1
11765: PUSH
11766: LD_INT 2
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 100
11775: PUSH
11776: EMPTY
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: ST_TO_ADDR
// end ; if result then
11783: LD_VAR 0 1
11787: IFFALSE 12076
// begin normal :=  ;
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_STRING 
11796: ST_TO_ADDR
// hardcore :=  ;
11797: LD_ADDR_VAR 0 4
11801: PUSH
11802: LD_STRING 
11804: ST_TO_ADDR
// for i = 1 to normalCounter do
11805: LD_ADDR_VAR 0 5
11809: PUSH
11810: DOUBLE
11811: LD_INT 1
11813: DEC
11814: ST_TO_ADDR
11815: LD_EXP 25
11819: PUSH
11820: FOR_TO
11821: IFFALSE 11922
// begin tmp := 0 ;
11823: LD_ADDR_VAR 0 2
11827: PUSH
11828: LD_STRING 0
11830: ST_TO_ADDR
// if result [ 1 ] then
11831: LD_VAR 0 1
11835: PUSH
11836: LD_INT 1
11838: ARRAY
11839: IFFALSE 11904
// if result [ 1 ] [ 1 ] = i then
11841: LD_VAR 0 1
11845: PUSH
11846: LD_INT 1
11848: ARRAY
11849: PUSH
11850: LD_INT 1
11852: ARRAY
11853: PUSH
11854: LD_VAR 0 5
11858: EQUAL
11859: IFFALSE 11904
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11861: LD_ADDR_VAR 0 1
11865: PUSH
11866: LD_VAR 0 1
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: LD_VAR 0 1
11878: PUSH
11879: LD_INT 1
11881: ARRAY
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 3
11890: PPUSH
11891: CALL_OW 1
11895: ST_TO_ADDR
// tmp := 1 ;
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: LD_STRING 1
11903: ST_TO_ADDR
// end ; normal := normal & tmp ;
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_VAR 0 3
11913: PUSH
11914: LD_VAR 0 2
11918: STR
11919: ST_TO_ADDR
// end ;
11920: GO 11820
11922: POP
11923: POP
// for i = 1 to hardcoreCounter do
11924: LD_ADDR_VAR 0 5
11928: PUSH
11929: DOUBLE
11930: LD_INT 1
11932: DEC
11933: ST_TO_ADDR
11934: LD_EXP 26
11938: PUSH
11939: FOR_TO
11940: IFFALSE 12045
// begin tmp := 0 ;
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: LD_STRING 0
11949: ST_TO_ADDR
// if result [ 2 ] then
11950: LD_VAR 0 1
11954: PUSH
11955: LD_INT 2
11957: ARRAY
11958: IFFALSE 12027
// if result [ 2 ] [ 1 ] = 100 + i then
11960: LD_VAR 0 1
11964: PUSH
11965: LD_INT 2
11967: ARRAY
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PUSH
11973: LD_INT 100
11975: PUSH
11976: LD_VAR 0 5
11980: PLUS
11981: EQUAL
11982: IFFALSE 12027
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11984: LD_ADDR_VAR 0 1
11988: PUSH
11989: LD_VAR 0 1
11993: PPUSH
11994: LD_INT 2
11996: PPUSH
11997: LD_VAR 0 1
12001: PUSH
12002: LD_INT 2
12004: ARRAY
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 3
12013: PPUSH
12014: CALL_OW 1
12018: ST_TO_ADDR
// tmp := 1 ;
12019: LD_ADDR_VAR 0 2
12023: PUSH
12024: LD_STRING 1
12026: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12027: LD_ADDR_VAR 0 4
12031: PUSH
12032: LD_VAR 0 4
12036: PUSH
12037: LD_VAR 0 2
12041: STR
12042: ST_TO_ADDR
// end ;
12043: GO 11939
12045: POP
12046: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12047: LD_STRING getStreamItemsFromMission("
12049: PUSH
12050: LD_VAR 0 3
12054: STR
12055: PUSH
12056: LD_STRING ","
12058: STR
12059: PUSH
12060: LD_VAR 0 4
12064: STR
12065: PUSH
12066: LD_STRING ")
12068: STR
12069: PPUSH
12070: CALL_OW 559
// end else
12074: GO 12083
// ToLua ( getStreamItemsFromMission("","") ) ;
12076: LD_STRING getStreamItemsFromMission("","")
12078: PPUSH
12079: CALL_OW 559
// end ;
12083: LD_VAR 0 1
12087: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12088: LD_VAR 0 2
12092: PUSH
12093: LD_INT 100
12095: EQUAL
12096: IFFALSE 13045
// begin if not StreamModeActive then
12098: LD_EXP 24
12102: NOT
12103: IFFALSE 12113
// StreamModeActive := true ;
12105: LD_ADDR_EXP 24
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// if p3 = 0 then
12113: LD_VAR 0 3
12117: PUSH
12118: LD_INT 0
12120: EQUAL
12121: IFFALSE 12127
// InitStreamMode ;
12123: CALL 8348 0 0
// if p3 = 1 then
12127: LD_VAR 0 3
12131: PUSH
12132: LD_INT 1
12134: EQUAL
12135: IFFALSE 12145
// sRocket := true ;
12137: LD_ADDR_EXP 29
12141: PUSH
12142: LD_INT 1
12144: ST_TO_ADDR
// if p3 = 2 then
12145: LD_VAR 0 3
12149: PUSH
12150: LD_INT 2
12152: EQUAL
12153: IFFALSE 12163
// sSpeed := true ;
12155: LD_ADDR_EXP 28
12159: PUSH
12160: LD_INT 1
12162: ST_TO_ADDR
// if p3 = 3 then
12163: LD_VAR 0 3
12167: PUSH
12168: LD_INT 3
12170: EQUAL
12171: IFFALSE 12181
// sEngine := true ;
12173: LD_ADDR_EXP 30
12177: PUSH
12178: LD_INT 1
12180: ST_TO_ADDR
// if p3 = 4 then
12181: LD_VAR 0 3
12185: PUSH
12186: LD_INT 4
12188: EQUAL
12189: IFFALSE 12199
// sSpec := true ;
12191: LD_ADDR_EXP 27
12195: PUSH
12196: LD_INT 1
12198: ST_TO_ADDR
// if p3 = 5 then
12199: LD_VAR 0 3
12203: PUSH
12204: LD_INT 5
12206: EQUAL
12207: IFFALSE 12217
// sLevel := true ;
12209: LD_ADDR_EXP 31
12213: PUSH
12214: LD_INT 1
12216: ST_TO_ADDR
// if p3 = 6 then
12217: LD_VAR 0 3
12221: PUSH
12222: LD_INT 6
12224: EQUAL
12225: IFFALSE 12235
// sArmoury := true ;
12227: LD_ADDR_EXP 32
12231: PUSH
12232: LD_INT 1
12234: ST_TO_ADDR
// if p3 = 7 then
12235: LD_VAR 0 3
12239: PUSH
12240: LD_INT 7
12242: EQUAL
12243: IFFALSE 12253
// sRadar := true ;
12245: LD_ADDR_EXP 33
12249: PUSH
12250: LD_INT 1
12252: ST_TO_ADDR
// if p3 = 8 then
12253: LD_VAR 0 3
12257: PUSH
12258: LD_INT 8
12260: EQUAL
12261: IFFALSE 12271
// sBunker := true ;
12263: LD_ADDR_EXP 34
12267: PUSH
12268: LD_INT 1
12270: ST_TO_ADDR
// if p3 = 9 then
12271: LD_VAR 0 3
12275: PUSH
12276: LD_INT 9
12278: EQUAL
12279: IFFALSE 12289
// sHack := true ;
12281: LD_ADDR_EXP 35
12285: PUSH
12286: LD_INT 1
12288: ST_TO_ADDR
// if p3 = 10 then
12289: LD_VAR 0 3
12293: PUSH
12294: LD_INT 10
12296: EQUAL
12297: IFFALSE 12307
// sFire := true ;
12299: LD_ADDR_EXP 36
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// if p3 = 11 then
12307: LD_VAR 0 3
12311: PUSH
12312: LD_INT 11
12314: EQUAL
12315: IFFALSE 12325
// sRefresh := true ;
12317: LD_ADDR_EXP 37
12321: PUSH
12322: LD_INT 1
12324: ST_TO_ADDR
// if p3 = 12 then
12325: LD_VAR 0 3
12329: PUSH
12330: LD_INT 12
12332: EQUAL
12333: IFFALSE 12343
// sExp := true ;
12335: LD_ADDR_EXP 38
12339: PUSH
12340: LD_INT 1
12342: ST_TO_ADDR
// if p3 = 13 then
12343: LD_VAR 0 3
12347: PUSH
12348: LD_INT 13
12350: EQUAL
12351: IFFALSE 12361
// sDepot := true ;
12353: LD_ADDR_EXP 39
12357: PUSH
12358: LD_INT 1
12360: ST_TO_ADDR
// if p3 = 14 then
12361: LD_VAR 0 3
12365: PUSH
12366: LD_INT 14
12368: EQUAL
12369: IFFALSE 12379
// sFlag := true ;
12371: LD_ADDR_EXP 40
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// if p3 = 15 then
12379: LD_VAR 0 3
12383: PUSH
12384: LD_INT 15
12386: EQUAL
12387: IFFALSE 12397
// sKamikadze := true ;
12389: LD_ADDR_EXP 48
12393: PUSH
12394: LD_INT 1
12396: ST_TO_ADDR
// if p3 = 16 then
12397: LD_VAR 0 3
12401: PUSH
12402: LD_INT 16
12404: EQUAL
12405: IFFALSE 12415
// sTroll := true ;
12407: LD_ADDR_EXP 49
12411: PUSH
12412: LD_INT 1
12414: ST_TO_ADDR
// if p3 = 17 then
12415: LD_VAR 0 3
12419: PUSH
12420: LD_INT 17
12422: EQUAL
12423: IFFALSE 12433
// sSlow := true ;
12425: LD_ADDR_EXP 50
12429: PUSH
12430: LD_INT 1
12432: ST_TO_ADDR
// if p3 = 18 then
12433: LD_VAR 0 3
12437: PUSH
12438: LD_INT 18
12440: EQUAL
12441: IFFALSE 12451
// sLack := true ;
12443: LD_ADDR_EXP 51
12447: PUSH
12448: LD_INT 1
12450: ST_TO_ADDR
// if p3 = 19 then
12451: LD_VAR 0 3
12455: PUSH
12456: LD_INT 19
12458: EQUAL
12459: IFFALSE 12469
// sTank := true ;
12461: LD_ADDR_EXP 53
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if p3 = 20 then
12469: LD_VAR 0 3
12473: PUSH
12474: LD_INT 20
12476: EQUAL
12477: IFFALSE 12487
// sRemote := true ;
12479: LD_ADDR_EXP 54
12483: PUSH
12484: LD_INT 1
12486: ST_TO_ADDR
// if p3 = 21 then
12487: LD_VAR 0 3
12491: PUSH
12492: LD_INT 21
12494: EQUAL
12495: IFFALSE 12505
// sPowell := true ;
12497: LD_ADDR_EXP 55
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
// if p3 = 22 then
12505: LD_VAR 0 3
12509: PUSH
12510: LD_INT 22
12512: EQUAL
12513: IFFALSE 12523
// sTeleport := true ;
12515: LD_ADDR_EXP 58
12519: PUSH
12520: LD_INT 1
12522: ST_TO_ADDR
// if p3 = 23 then
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 23
12530: EQUAL
12531: IFFALSE 12541
// sOilTower := true ;
12533: LD_ADDR_EXP 60
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
// if p3 = 24 then
12541: LD_VAR 0 3
12545: PUSH
12546: LD_INT 24
12548: EQUAL
12549: IFFALSE 12559
// sShovel := true ;
12551: LD_ADDR_EXP 61
12555: PUSH
12556: LD_INT 1
12558: ST_TO_ADDR
// if p3 = 25 then
12559: LD_VAR 0 3
12563: PUSH
12564: LD_INT 25
12566: EQUAL
12567: IFFALSE 12577
// sSheik := true ;
12569: LD_ADDR_EXP 62
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// if p3 = 26 then
12577: LD_VAR 0 3
12581: PUSH
12582: LD_INT 26
12584: EQUAL
12585: IFFALSE 12595
// sEarthquake := true ;
12587: LD_ADDR_EXP 64
12591: PUSH
12592: LD_INT 1
12594: ST_TO_ADDR
// if p3 = 27 then
12595: LD_VAR 0 3
12599: PUSH
12600: LD_INT 27
12602: EQUAL
12603: IFFALSE 12613
// sAI := true ;
12605: LD_ADDR_EXP 65
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// if p3 = 28 then
12613: LD_VAR 0 3
12617: PUSH
12618: LD_INT 28
12620: EQUAL
12621: IFFALSE 12631
// sCargo := true ;
12623: LD_ADDR_EXP 68
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// if p3 = 29 then
12631: LD_VAR 0 3
12635: PUSH
12636: LD_INT 29
12638: EQUAL
12639: IFFALSE 12649
// sDLaser := true ;
12641: LD_ADDR_EXP 69
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// if p3 = 30 then
12649: LD_VAR 0 3
12653: PUSH
12654: LD_INT 30
12656: EQUAL
12657: IFFALSE 12667
// sExchange := true ;
12659: LD_ADDR_EXP 70
12663: PUSH
12664: LD_INT 1
12666: ST_TO_ADDR
// if p3 = 31 then
12667: LD_VAR 0 3
12671: PUSH
12672: LD_INT 31
12674: EQUAL
12675: IFFALSE 12685
// sFac := true ;
12677: LD_ADDR_EXP 71
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// if p3 = 32 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_INT 32
12692: EQUAL
12693: IFFALSE 12703
// sPower := true ;
12695: LD_ADDR_EXP 72
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// if p3 = 33 then
12703: LD_VAR 0 3
12707: PUSH
12708: LD_INT 33
12710: EQUAL
12711: IFFALSE 12721
// sRandom := true ;
12713: LD_ADDR_EXP 73
12717: PUSH
12718: LD_INT 1
12720: ST_TO_ADDR
// if p3 = 34 then
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 34
12728: EQUAL
12729: IFFALSE 12739
// sShield := true ;
12731: LD_ADDR_EXP 74
12735: PUSH
12736: LD_INT 1
12738: ST_TO_ADDR
// if p3 = 35 then
12739: LD_VAR 0 3
12743: PUSH
12744: LD_INT 35
12746: EQUAL
12747: IFFALSE 12757
// sTime := true ;
12749: LD_ADDR_EXP 75
12753: PUSH
12754: LD_INT 1
12756: ST_TO_ADDR
// if p3 = 36 then
12757: LD_VAR 0 3
12761: PUSH
12762: LD_INT 36
12764: EQUAL
12765: IFFALSE 12775
// sTools := true ;
12767: LD_ADDR_EXP 76
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// if p3 = 101 then
12775: LD_VAR 0 3
12779: PUSH
12780: LD_INT 101
12782: EQUAL
12783: IFFALSE 12793
// sSold := true ;
12785: LD_ADDR_EXP 41
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// if p3 = 102 then
12793: LD_VAR 0 3
12797: PUSH
12798: LD_INT 102
12800: EQUAL
12801: IFFALSE 12811
// sDiff := true ;
12803: LD_ADDR_EXP 42
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// if p3 = 103 then
12811: LD_VAR 0 3
12815: PUSH
12816: LD_INT 103
12818: EQUAL
12819: IFFALSE 12829
// sFog := true ;
12821: LD_ADDR_EXP 45
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// if p3 = 104 then
12829: LD_VAR 0 3
12833: PUSH
12834: LD_INT 104
12836: EQUAL
12837: IFFALSE 12847
// sReset := true ;
12839: LD_ADDR_EXP 46
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// if p3 = 105 then
12847: LD_VAR 0 3
12851: PUSH
12852: LD_INT 105
12854: EQUAL
12855: IFFALSE 12865
// sSun := true ;
12857: LD_ADDR_EXP 47
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// if p3 = 106 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 106
12872: EQUAL
12873: IFFALSE 12883
// sTiger := true ;
12875: LD_ADDR_EXP 43
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// if p3 = 107 then
12883: LD_VAR 0 3
12887: PUSH
12888: LD_INT 107
12890: EQUAL
12891: IFFALSE 12901
// sBomb := true ;
12893: LD_ADDR_EXP 44
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// if p3 = 108 then
12901: LD_VAR 0 3
12905: PUSH
12906: LD_INT 108
12908: EQUAL
12909: IFFALSE 12919
// sWound := true ;
12911: LD_ADDR_EXP 52
12915: PUSH
12916: LD_INT 1
12918: ST_TO_ADDR
// if p3 = 109 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_INT 109
12926: EQUAL
12927: IFFALSE 12937
// sBetray := true ;
12929: LD_ADDR_EXP 56
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// if p3 = 110 then
12937: LD_VAR 0 3
12941: PUSH
12942: LD_INT 110
12944: EQUAL
12945: IFFALSE 12955
// sContamin := true ;
12947: LD_ADDR_EXP 57
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// if p3 = 111 then
12955: LD_VAR 0 3
12959: PUSH
12960: LD_INT 111
12962: EQUAL
12963: IFFALSE 12973
// sOil := true ;
12965: LD_ADDR_EXP 59
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// if p3 = 112 then
12973: LD_VAR 0 3
12977: PUSH
12978: LD_INT 112
12980: EQUAL
12981: IFFALSE 12991
// sStu := true ;
12983: LD_ADDR_EXP 63
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// if p3 = 113 then
12991: LD_VAR 0 3
12995: PUSH
12996: LD_INT 113
12998: EQUAL
12999: IFFALSE 13009
// sBazooka := true ;
13001: LD_ADDR_EXP 66
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// if p3 = 114 then
13009: LD_VAR 0 3
13013: PUSH
13014: LD_INT 114
13016: EQUAL
13017: IFFALSE 13027
// sMortar := true ;
13019: LD_ADDR_EXP 67
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// if p3 = 115 then
13027: LD_VAR 0 3
13031: PUSH
13032: LD_INT 115
13034: EQUAL
13035: IFFALSE 13045
// sRanger := true ;
13037: LD_ADDR_EXP 77
13041: PUSH
13042: LD_INT 1
13044: ST_TO_ADDR
// end ; end ;
13045: PPOPN 6
13047: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13048: LD_EXP 24
13052: PUSH
13053: LD_EXP 29
13057: AND
13058: IFFALSE 13182
13060: GO 13062
13062: DISABLE
13063: LD_INT 0
13065: PPUSH
13066: PPUSH
// begin enable ;
13067: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_OWVAR 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 2
13087: PUSH
13088: LD_INT 34
13090: PUSH
13091: LD_INT 7
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 34
13100: PUSH
13101: LD_INT 45
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 34
13110: PUSH
13111: LD_INT 28
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 34
13120: PUSH
13121: LD_INT 47
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: ST_TO_ADDR
// if not tmp then
13144: LD_VAR 0 2
13148: NOT
13149: IFFALSE 13153
// exit ;
13151: GO 13182
// for i in tmp do
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_VAR 0 2
13162: PUSH
13163: FOR_IN
13164: IFFALSE 13180
// begin SetLives ( i , 0 ) ;
13166: LD_VAR 0 1
13170: PPUSH
13171: LD_INT 0
13173: PPUSH
13174: CALL_OW 234
// end ;
13178: GO 13163
13180: POP
13181: POP
// end ;
13182: PPOPN 2
13184: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13185: LD_EXP 24
13189: PUSH
13190: LD_EXP 30
13194: AND
13195: IFFALSE 13279
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
// begin enable ;
13204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13205: LD_ADDR_VAR 0 2
13209: PUSH
13210: LD_INT 22
13212: PUSH
13213: LD_OWVAR 2
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 32
13224: PUSH
13225: LD_INT 3
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 69
13240: ST_TO_ADDR
// if not tmp then
13241: LD_VAR 0 2
13245: NOT
13246: IFFALSE 13250
// exit ;
13248: GO 13279
// for i in tmp do
13250: LD_ADDR_VAR 0 1
13254: PUSH
13255: LD_VAR 0 2
13259: PUSH
13260: FOR_IN
13261: IFFALSE 13277
// begin SetLives ( i , 0 ) ;
13263: LD_VAR 0 1
13267: PPUSH
13268: LD_INT 0
13270: PPUSH
13271: CALL_OW 234
// end ;
13275: GO 13260
13277: POP
13278: POP
// end ;
13279: PPOPN 2
13281: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13282: LD_EXP 24
13286: PUSH
13287: LD_EXP 27
13291: AND
13292: IFFALSE 13385
13294: GO 13296
13296: DISABLE
13297: LD_INT 0
13299: PPUSH
// begin enable ;
13300: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13301: LD_ADDR_VAR 0 1
13305: PUSH
13306: LD_INT 22
13308: PUSH
13309: LD_OWVAR 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 2
13320: PUSH
13321: LD_INT 25
13323: PUSH
13324: LD_INT 5
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 25
13333: PUSH
13334: LD_INT 9
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 8
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: PUSH
13366: FOR_IN
13367: IFFALSE 13383
// begin SetClass ( i , 1 ) ;
13369: LD_VAR 0 1
13373: PPUSH
13374: LD_INT 1
13376: PPUSH
13377: CALL_OW 336
// end ;
13381: GO 13366
13383: POP
13384: POP
// end ;
13385: PPOPN 1
13387: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13388: LD_EXP 24
13392: PUSH
13393: LD_EXP 28
13397: AND
13398: PUSH
13399: LD_OWVAR 65
13403: PUSH
13404: LD_INT 7
13406: LESS
13407: AND
13408: IFFALSE 13422
13410: GO 13412
13412: DISABLE
// begin enable ;
13413: ENABLE
// game_speed := 7 ;
13414: LD_ADDR_OWVAR 65
13418: PUSH
13419: LD_INT 7
13421: ST_TO_ADDR
// end ;
13422: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13423: LD_EXP 24
13427: PUSH
13428: LD_EXP 31
13432: AND
13433: IFFALSE 13635
13435: GO 13437
13437: DISABLE
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
13442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_INT 81
13450: PUSH
13451: LD_OWVAR 2
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 21
13462: PUSH
13463: LD_INT 1
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PPUSH
13474: CALL_OW 69
13478: ST_TO_ADDR
// if not tmp then
13479: LD_VAR 0 3
13483: NOT
13484: IFFALSE 13488
// exit ;
13486: GO 13635
// if tmp > 5 then
13488: LD_VAR 0 3
13492: PUSH
13493: LD_INT 5
13495: GREATER
13496: IFFALSE 13508
// k := 5 else
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 5
13505: ST_TO_ADDR
13506: GO 13518
// k := tmp ;
13508: LD_ADDR_VAR 0 2
13512: PUSH
13513: LD_VAR 0 3
13517: ST_TO_ADDR
// for i := 1 to k do
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: DOUBLE
13524: LD_INT 1
13526: DEC
13527: ST_TO_ADDR
13528: LD_VAR 0 2
13532: PUSH
13533: FOR_TO
13534: IFFALSE 13633
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13536: LD_VAR 0 3
13540: PUSH
13541: LD_VAR 0 1
13545: ARRAY
13546: PPUSH
13547: LD_VAR 0 1
13551: PUSH
13552: LD_INT 4
13554: MOD
13555: PUSH
13556: LD_INT 1
13558: PLUS
13559: PPUSH
13560: CALL_OW 259
13564: PUSH
13565: LD_INT 10
13567: LESS
13568: IFFALSE 13631
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13570: LD_VAR 0 3
13574: PUSH
13575: LD_VAR 0 1
13579: ARRAY
13580: PPUSH
13581: LD_VAR 0 1
13585: PUSH
13586: LD_INT 4
13588: MOD
13589: PUSH
13590: LD_INT 1
13592: PLUS
13593: PPUSH
13594: LD_VAR 0 3
13598: PUSH
13599: LD_VAR 0 1
13603: ARRAY
13604: PPUSH
13605: LD_VAR 0 1
13609: PUSH
13610: LD_INT 4
13612: MOD
13613: PUSH
13614: LD_INT 1
13616: PLUS
13617: PPUSH
13618: CALL_OW 259
13622: PUSH
13623: LD_INT 1
13625: PLUS
13626: PPUSH
13627: CALL_OW 237
13631: GO 13533
13633: POP
13634: POP
// end ;
13635: PPOPN 3
13637: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13638: LD_EXP 24
13642: PUSH
13643: LD_EXP 32
13647: AND
13648: IFFALSE 13668
13650: GO 13652
13652: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13653: LD_INT 4
13655: PPUSH
13656: LD_OWVAR 2
13660: PPUSH
13661: LD_INT 0
13663: PPUSH
13664: CALL_OW 324
13668: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13669: LD_EXP 24
13673: PUSH
13674: LD_EXP 61
13678: AND
13679: IFFALSE 13699
13681: GO 13683
13683: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13684: LD_INT 19
13686: PPUSH
13687: LD_OWVAR 2
13691: PPUSH
13692: LD_INT 0
13694: PPUSH
13695: CALL_OW 324
13699: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13700: LD_EXP 24
13704: PUSH
13705: LD_EXP 33
13709: AND
13710: IFFALSE 13812
13712: GO 13714
13714: DISABLE
13715: LD_INT 0
13717: PPUSH
13718: PPUSH
// begin enable ;
13719: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13720: LD_ADDR_VAR 0 2
13724: PUSH
13725: LD_INT 22
13727: PUSH
13728: LD_OWVAR 2
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 2
13739: PUSH
13740: LD_INT 34
13742: PUSH
13743: LD_INT 11
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 34
13752: PUSH
13753: LD_INT 30
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: ST_TO_ADDR
// if not tmp then
13774: LD_VAR 0 2
13778: NOT
13779: IFFALSE 13783
// exit ;
13781: GO 13812
// for i in tmp do
13783: LD_ADDR_VAR 0 1
13787: PUSH
13788: LD_VAR 0 2
13792: PUSH
13793: FOR_IN
13794: IFFALSE 13810
// begin SetLives ( i , 0 ) ;
13796: LD_VAR 0 1
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 234
// end ;
13808: GO 13793
13810: POP
13811: POP
// end ;
13812: PPOPN 2
13814: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13815: LD_EXP 24
13819: PUSH
13820: LD_EXP 34
13824: AND
13825: IFFALSE 13845
13827: GO 13829
13829: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13830: LD_INT 32
13832: PPUSH
13833: LD_OWVAR 2
13837: PPUSH
13838: LD_INT 0
13840: PPUSH
13841: CALL_OW 324
13845: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13846: LD_EXP 24
13850: PUSH
13851: LD_EXP 35
13855: AND
13856: IFFALSE 14037
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13866: LD_ADDR_VAR 0 2
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_OWVAR 2
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 33
13885: PUSH
13886: LD_INT 3
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PPUSH
13897: CALL_OW 69
13901: ST_TO_ADDR
// if not tmp then
13902: LD_VAR 0 2
13906: NOT
13907: IFFALSE 13911
// exit ;
13909: GO 14037
// side := 0 ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// for i := 1 to 8 do
13919: LD_ADDR_VAR 0 1
13923: PUSH
13924: DOUBLE
13925: LD_INT 1
13927: DEC
13928: ST_TO_ADDR
13929: LD_INT 8
13931: PUSH
13932: FOR_TO
13933: IFFALSE 13981
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13935: LD_OWVAR 2
13939: PUSH
13940: LD_VAR 0 1
13944: NONEQUAL
13945: PUSH
13946: LD_OWVAR 2
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 81
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: AND
13965: IFFALSE 13979
// begin side := i ;
13967: LD_ADDR_VAR 0 3
13971: PUSH
13972: LD_VAR 0 1
13976: ST_TO_ADDR
// break ;
13977: GO 13981
// end ;
13979: GO 13932
13981: POP
13982: POP
// if not side then
13983: LD_VAR 0 3
13987: NOT
13988: IFFALSE 13992
// exit ;
13990: GO 14037
// for i := 1 to tmp do
13992: LD_ADDR_VAR 0 1
13996: PUSH
13997: DOUBLE
13998: LD_INT 1
14000: DEC
14001: ST_TO_ADDR
14002: LD_VAR 0 2
14006: PUSH
14007: FOR_TO
14008: IFFALSE 14035
// if Prob ( 60 ) then
14010: LD_INT 60
14012: PPUSH
14013: CALL_OW 13
14017: IFFALSE 14033
// SetSide ( i , side ) ;
14019: LD_VAR 0 1
14023: PPUSH
14024: LD_VAR 0 3
14028: PPUSH
14029: CALL_OW 235
14033: GO 14007
14035: POP
14036: POP
// end ;
14037: PPOPN 3
14039: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14040: LD_EXP 24
14044: PUSH
14045: LD_EXP 37
14049: AND
14050: IFFALSE 14169
14052: GO 14054
14054: DISABLE
14055: LD_INT 0
14057: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14058: LD_ADDR_VAR 0 1
14062: PUSH
14063: LD_INT 22
14065: PUSH
14066: LD_OWVAR 2
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 21
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 3
14087: PUSH
14088: LD_INT 23
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 69
14111: PUSH
14112: FOR_IN
14113: IFFALSE 14167
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL_OW 257
14124: PUSH
14125: LD_INT 1
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 3
14133: PUSH
14134: LD_INT 4
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: IN
14143: IFFALSE 14165
// SetClass ( un , rand ( 1 , 4 ) ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_INT 4
14155: PPUSH
14156: CALL_OW 12
14160: PPUSH
14161: CALL_OW 336
14165: GO 14112
14167: POP
14168: POP
// end ;
14169: PPOPN 1
14171: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14172: LD_EXP 24
14176: PUSH
14177: LD_EXP 36
14181: AND
14182: IFFALSE 14261
14184: GO 14186
14186: DISABLE
14187: LD_INT 0
14189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_OWVAR 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 69
14225: ST_TO_ADDR
// if not tmp then
14226: LD_VAR 0 1
14230: NOT
14231: IFFALSE 14235
// exit ;
14233: GO 14261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14235: LD_VAR 0 1
14239: PUSH
14240: LD_INT 1
14242: PPUSH
14243: LD_VAR 0 1
14247: PPUSH
14248: CALL_OW 12
14252: ARRAY
14253: PPUSH
14254: LD_INT 100
14256: PPUSH
14257: CALL_OW 234
// end ;
14261: PPOPN 1
14263: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14264: LD_EXP 24
14268: PUSH
14269: LD_EXP 38
14273: AND
14274: IFFALSE 14372
14276: GO 14278
14278: DISABLE
14279: LD_INT 0
14281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14282: LD_ADDR_VAR 0 1
14286: PUSH
14287: LD_INT 22
14289: PUSH
14290: LD_OWVAR 2
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 21
14301: PUSH
14302: LD_INT 1
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 69
14317: ST_TO_ADDR
// if not tmp then
14318: LD_VAR 0 1
14322: NOT
14323: IFFALSE 14327
// exit ;
14325: GO 14372
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14327: LD_VAR 0 1
14331: PUSH
14332: LD_INT 1
14334: PPUSH
14335: LD_VAR 0 1
14339: PPUSH
14340: CALL_OW 12
14344: ARRAY
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: LD_INT 4
14351: PPUSH
14352: CALL_OW 12
14356: PPUSH
14357: LD_INT 3000
14359: PPUSH
14360: LD_INT 9000
14362: PPUSH
14363: CALL_OW 12
14367: PPUSH
14368: CALL_OW 492
// end ;
14372: PPOPN 1
14374: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14375: LD_EXP 24
14379: PUSH
14380: LD_EXP 39
14384: AND
14385: IFFALSE 14405
14387: GO 14389
14389: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14390: LD_INT 1
14392: PPUSH
14393: LD_OWVAR 2
14397: PPUSH
14398: LD_INT 0
14400: PPUSH
14401: CALL_OW 324
14405: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14406: LD_EXP 24
14410: PUSH
14411: LD_EXP 40
14415: AND
14416: IFFALSE 14499
14418: GO 14420
14420: DISABLE
14421: LD_INT 0
14423: PPUSH
14424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14425: LD_ADDR_VAR 0 2
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_OWVAR 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 69
14460: ST_TO_ADDR
// if not tmp then
14461: LD_VAR 0 2
14465: NOT
14466: IFFALSE 14470
// exit ;
14468: GO 14499
// for i in tmp do
14470: LD_ADDR_VAR 0 1
14474: PUSH
14475: LD_VAR 0 2
14479: PUSH
14480: FOR_IN
14481: IFFALSE 14497
// SetBLevel ( i , 10 ) ;
14483: LD_VAR 0 1
14487: PPUSH
14488: LD_INT 10
14490: PPUSH
14491: CALL_OW 241
14495: GO 14480
14497: POP
14498: POP
// end ;
14499: PPOPN 2
14501: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14502: LD_EXP 24
14506: PUSH
14507: LD_EXP 41
14511: AND
14512: IFFALSE 14623
14514: GO 14516
14516: DISABLE
14517: LD_INT 0
14519: PPUSH
14520: PPUSH
14521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14522: LD_ADDR_VAR 0 3
14526: PUSH
14527: LD_INT 22
14529: PUSH
14530: LD_OWVAR 2
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 25
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PPUSH
14553: CALL_OW 69
14557: ST_TO_ADDR
// if not tmp then
14558: LD_VAR 0 3
14562: NOT
14563: IFFALSE 14567
// exit ;
14565: GO 14623
// un := tmp [ rand ( 1 , tmp ) ] ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_VAR 0 3
14576: PUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_VAR 0 3
14584: PPUSH
14585: CALL_OW 12
14589: ARRAY
14590: ST_TO_ADDR
// if Crawls ( un ) then
14591: LD_VAR 0 2
14595: PPUSH
14596: CALL_OW 318
14600: IFFALSE 14611
// ComWalk ( un ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14611: LD_VAR 0 2
14615: PPUSH
14616: LD_INT 5
14618: PPUSH
14619: CALL_OW 336
// end ;
14623: PPOPN 3
14625: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14626: LD_EXP 24
14630: PUSH
14631: LD_EXP 42
14635: AND
14636: PUSH
14637: LD_OWVAR 67
14641: PUSH
14642: LD_INT 3
14644: LESS
14645: AND
14646: IFFALSE 14665
14648: GO 14650
14650: DISABLE
// Difficulty := Difficulty + 1 ;
14651: LD_ADDR_OWVAR 67
14655: PUSH
14656: LD_OWVAR 67
14660: PUSH
14661: LD_INT 1
14663: PLUS
14664: ST_TO_ADDR
14665: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14666: LD_EXP 24
14670: PUSH
14671: LD_EXP 43
14675: AND
14676: IFFALSE 14779
14678: GO 14680
14680: DISABLE
14681: LD_INT 0
14683: PPUSH
// begin for i := 1 to 5 do
14684: LD_ADDR_VAR 0 1
14688: PUSH
14689: DOUBLE
14690: LD_INT 1
14692: DEC
14693: ST_TO_ADDR
14694: LD_INT 5
14696: PUSH
14697: FOR_TO
14698: IFFALSE 14777
// begin uc_nation := nation_nature ;
14700: LD_ADDR_OWVAR 21
14704: PUSH
14705: LD_INT 0
14707: ST_TO_ADDR
// uc_side := 0 ;
14708: LD_ADDR_OWVAR 20
14712: PUSH
14713: LD_INT 0
14715: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14716: LD_ADDR_OWVAR 29
14720: PUSH
14721: LD_INT 12
14723: PUSH
14724: LD_INT 12
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: ST_TO_ADDR
// hc_agressivity := 20 ;
14731: LD_ADDR_OWVAR 35
14735: PUSH
14736: LD_INT 20
14738: ST_TO_ADDR
// hc_class := class_tiger ;
14739: LD_ADDR_OWVAR 28
14743: PUSH
14744: LD_INT 14
14746: ST_TO_ADDR
// hc_gallery :=  ;
14747: LD_ADDR_OWVAR 33
14751: PUSH
14752: LD_STRING 
14754: ST_TO_ADDR
// hc_name :=  ;
14755: LD_ADDR_OWVAR 26
14759: PUSH
14760: LD_STRING 
14762: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14763: CALL_OW 44
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: CALL_OW 51
// end ;
14775: GO 14697
14777: POP
14778: POP
// end ;
14779: PPOPN 1
14781: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14782: LD_EXP 24
14786: PUSH
14787: LD_EXP 44
14791: AND
14792: IFFALSE 14801
14794: GO 14796
14796: DISABLE
// StreamSibBomb ;
14797: CALL 14802 0 0
14801: END
// export function StreamSibBomb ; var i , x , y ; begin
14802: LD_INT 0
14804: PPUSH
14805: PPUSH
14806: PPUSH
14807: PPUSH
// result := false ;
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_INT 0
14815: ST_TO_ADDR
// for i := 1 to 16 do
14816: LD_ADDR_VAR 0 2
14820: PUSH
14821: DOUBLE
14822: LD_INT 1
14824: DEC
14825: ST_TO_ADDR
14826: LD_INT 16
14828: PUSH
14829: FOR_TO
14830: IFFALSE 15029
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14832: LD_ADDR_VAR 0 3
14836: PUSH
14837: LD_INT 10
14839: PUSH
14840: LD_INT 20
14842: PUSH
14843: LD_INT 30
14845: PUSH
14846: LD_INT 40
14848: PUSH
14849: LD_INT 50
14851: PUSH
14852: LD_INT 60
14854: PUSH
14855: LD_INT 70
14857: PUSH
14858: LD_INT 80
14860: PUSH
14861: LD_INT 90
14863: PUSH
14864: LD_INT 100
14866: PUSH
14867: LD_INT 110
14869: PUSH
14870: LD_INT 120
14872: PUSH
14873: LD_INT 130
14875: PUSH
14876: LD_INT 140
14878: PUSH
14879: LD_INT 150
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 1
14901: PPUSH
14902: LD_INT 15
14904: PPUSH
14905: CALL_OW 12
14909: ARRAY
14910: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14911: LD_ADDR_VAR 0 4
14915: PUSH
14916: LD_INT 10
14918: PUSH
14919: LD_INT 20
14921: PUSH
14922: LD_INT 30
14924: PUSH
14925: LD_INT 40
14927: PUSH
14928: LD_INT 50
14930: PUSH
14931: LD_INT 60
14933: PUSH
14934: LD_INT 70
14936: PUSH
14937: LD_INT 80
14939: PUSH
14940: LD_INT 90
14942: PUSH
14943: LD_INT 100
14945: PUSH
14946: LD_INT 110
14948: PUSH
14949: LD_INT 120
14951: PUSH
14952: LD_INT 130
14954: PUSH
14955: LD_INT 140
14957: PUSH
14958: LD_INT 150
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_INT 15
14983: PPUSH
14984: CALL_OW 12
14988: ARRAY
14989: ST_TO_ADDR
// if ValidHex ( x , y ) then
14990: LD_VAR 0 3
14994: PPUSH
14995: LD_VAR 0 4
14999: PPUSH
15000: CALL_OW 488
15004: IFFALSE 15027
// begin result := [ x , y ] ;
15006: LD_ADDR_VAR 0 1
15010: PUSH
15011: LD_VAR 0 3
15015: PUSH
15016: LD_VAR 0 4
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: ST_TO_ADDR
// break ;
15025: GO 15029
// end ; end ;
15027: GO 14829
15029: POP
15030: POP
// if result then
15031: LD_VAR 0 1
15035: IFFALSE 15095
// begin ToLua ( playSibBomb() ) ;
15037: LD_STRING playSibBomb()
15039: PPUSH
15040: CALL_OW 559
// wait ( 0 0$14 ) ;
15044: LD_INT 490
15046: PPUSH
15047: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15051: LD_VAR 0 1
15055: PUSH
15056: LD_INT 1
15058: ARRAY
15059: PPUSH
15060: LD_VAR 0 1
15064: PUSH
15065: LD_INT 2
15067: ARRAY
15068: PPUSH
15069: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15073: LD_VAR 0 1
15077: PUSH
15078: LD_INT 1
15080: ARRAY
15081: PPUSH
15082: LD_VAR 0 1
15086: PUSH
15087: LD_INT 2
15089: ARRAY
15090: PPUSH
15091: CALL_OW 429
// end ; end ;
15095: LD_VAR 0 1
15099: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15100: LD_EXP 24
15104: PUSH
15105: LD_EXP 46
15109: AND
15110: IFFALSE 15122
15112: GO 15114
15114: DISABLE
// YouLost (  ) ;
15115: LD_STRING 
15117: PPUSH
15118: CALL_OW 104
15122: END
// every 0 0$1 trigger StreamModeActive and sFog do
15123: LD_EXP 24
15127: PUSH
15128: LD_EXP 45
15132: AND
15133: IFFALSE 15147
15135: GO 15137
15137: DISABLE
// FogOff ( your_side ) ;
15138: LD_OWVAR 2
15142: PPUSH
15143: CALL_OW 344
15147: END
// every 0 0$1 trigger StreamModeActive and sSun do
15148: LD_EXP 24
15152: PUSH
15153: LD_EXP 47
15157: AND
15158: IFFALSE 15186
15160: GO 15162
15162: DISABLE
// begin solar_recharge_percent := 0 ;
15163: LD_ADDR_OWVAR 79
15167: PUSH
15168: LD_INT 0
15170: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15171: LD_INT 10500
15173: PPUSH
15174: CALL_OW 67
// solar_recharge_percent := 100 ;
15178: LD_ADDR_OWVAR 79
15182: PUSH
15183: LD_INT 100
15185: ST_TO_ADDR
// end ;
15186: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15187: LD_EXP 24
15191: PUSH
15192: LD_EXP 48
15196: AND
15197: IFFALSE 15436
15199: GO 15201
15201: DISABLE
15202: LD_INT 0
15204: PPUSH
15205: PPUSH
15206: PPUSH
// begin tmp := [ ] ;
15207: LD_ADDR_VAR 0 3
15211: PUSH
15212: EMPTY
15213: ST_TO_ADDR
// for i := 1 to 6 do
15214: LD_ADDR_VAR 0 1
15218: PUSH
15219: DOUBLE
15220: LD_INT 1
15222: DEC
15223: ST_TO_ADDR
15224: LD_INT 6
15226: PUSH
15227: FOR_TO
15228: IFFALSE 15333
// begin uc_nation := nation_nature ;
15230: LD_ADDR_OWVAR 21
15234: PUSH
15235: LD_INT 0
15237: ST_TO_ADDR
// uc_side := 0 ;
15238: LD_ADDR_OWVAR 20
15242: PUSH
15243: LD_INT 0
15245: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15246: LD_ADDR_OWVAR 29
15250: PUSH
15251: LD_INT 12
15253: PUSH
15254: LD_INT 12
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: ST_TO_ADDR
// hc_agressivity := 20 ;
15261: LD_ADDR_OWVAR 35
15265: PUSH
15266: LD_INT 20
15268: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15269: LD_ADDR_OWVAR 28
15273: PUSH
15274: LD_INT 17
15276: ST_TO_ADDR
// hc_gallery :=  ;
15277: LD_ADDR_OWVAR 33
15281: PUSH
15282: LD_STRING 
15284: ST_TO_ADDR
// hc_name :=  ;
15285: LD_ADDR_OWVAR 26
15289: PUSH
15290: LD_STRING 
15292: ST_TO_ADDR
// un := CreateHuman ;
15293: LD_ADDR_VAR 0 2
15297: PUSH
15298: CALL_OW 44
15302: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15303: LD_VAR 0 2
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 51
// tmp := tmp ^ un ;
15315: LD_ADDR_VAR 0 3
15319: PUSH
15320: LD_VAR 0 3
15324: PUSH
15325: LD_VAR 0 2
15329: ADD
15330: ST_TO_ADDR
// end ;
15331: GO 15227
15333: POP
15334: POP
// repeat wait ( 0 0$1 ) ;
15335: LD_INT 35
15337: PPUSH
15338: CALL_OW 67
// for un in tmp do
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_VAR 0 3
15351: PUSH
15352: FOR_IN
15353: IFFALSE 15427
// begin if IsDead ( un ) then
15355: LD_VAR 0 2
15359: PPUSH
15360: CALL_OW 301
15364: IFFALSE 15384
// begin tmp := tmp diff un ;
15366: LD_ADDR_VAR 0 3
15370: PUSH
15371: LD_VAR 0 3
15375: PUSH
15376: LD_VAR 0 2
15380: DIFF
15381: ST_TO_ADDR
// continue ;
15382: GO 15352
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15384: LD_VAR 0 2
15388: PPUSH
15389: LD_INT 3
15391: PUSH
15392: LD_INT 22
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 69
15410: PPUSH
15411: LD_VAR 0 2
15415: PPUSH
15416: CALL_OW 74
15420: PPUSH
15421: CALL_OW 115
// end ;
15425: GO 15352
15427: POP
15428: POP
// until not tmp ;
15429: LD_VAR 0 3
15433: NOT
15434: IFFALSE 15335
// end ;
15436: PPOPN 3
15438: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15439: LD_EXP 24
15443: PUSH
15444: LD_EXP 49
15448: AND
15449: IFFALSE 15503
15451: GO 15453
15453: DISABLE
// begin ToLua ( displayTroll(); ) ;
15454: LD_STRING displayTroll();
15456: PPUSH
15457: CALL_OW 559
// wait ( 3 3$00 ) ;
15461: LD_INT 6300
15463: PPUSH
15464: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15468: LD_STRING hideTroll();
15470: PPUSH
15471: CALL_OW 559
// wait ( 1 1$00 ) ;
15475: LD_INT 2100
15477: PPUSH
15478: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15482: LD_STRING displayTroll();
15484: PPUSH
15485: CALL_OW 559
// wait ( 1 1$00 ) ;
15489: LD_INT 2100
15491: PPUSH
15492: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15496: LD_STRING hideTroll();
15498: PPUSH
15499: CALL_OW 559
// end ;
15503: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15504: LD_EXP 24
15508: PUSH
15509: LD_EXP 50
15513: AND
15514: IFFALSE 15577
15516: GO 15518
15518: DISABLE
15519: LD_INT 0
15521: PPUSH
// begin p := 0 ;
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_INT 0
15529: ST_TO_ADDR
// repeat game_speed := 1 ;
15530: LD_ADDR_OWVAR 65
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15538: LD_INT 35
15540: PPUSH
15541: CALL_OW 67
// p := p + 1 ;
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_VAR 0 1
15554: PUSH
15555: LD_INT 1
15557: PLUS
15558: ST_TO_ADDR
// until p >= 60 ;
15559: LD_VAR 0 1
15563: PUSH
15564: LD_INT 60
15566: GREATEREQUAL
15567: IFFALSE 15530
// game_speed := 4 ;
15569: LD_ADDR_OWVAR 65
15573: PUSH
15574: LD_INT 4
15576: ST_TO_ADDR
// end ;
15577: PPOPN 1
15579: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15580: LD_EXP 24
15584: PUSH
15585: LD_EXP 51
15589: AND
15590: IFFALSE 15736
15592: GO 15594
15594: DISABLE
15595: LD_INT 0
15597: PPUSH
15598: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15599: LD_ADDR_VAR 0 1
15603: PUSH
15604: LD_INT 22
15606: PUSH
15607: LD_OWVAR 2
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 0
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 30
15631: PUSH
15632: LD_INT 1
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PPUSH
15648: CALL_OW 69
15652: ST_TO_ADDR
// if not depot then
15653: LD_VAR 0 1
15657: NOT
15658: IFFALSE 15662
// exit ;
15660: GO 15736
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15662: LD_ADDR_VAR 0 2
15666: PUSH
15667: LD_VAR 0 1
15671: PUSH
15672: LD_INT 1
15674: PPUSH
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 12
15684: ARRAY
15685: PPUSH
15686: CALL_OW 274
15690: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15691: LD_VAR 0 2
15695: PPUSH
15696: LD_INT 1
15698: PPUSH
15699: LD_INT 0
15701: PPUSH
15702: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: LD_INT 2
15713: PPUSH
15714: LD_INT 0
15716: PPUSH
15717: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 0
15731: PPUSH
15732: CALL_OW 277
// end ;
15736: PPOPN 2
15738: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15739: LD_EXP 24
15743: PUSH
15744: LD_EXP 52
15748: AND
15749: IFFALSE 15846
15751: GO 15753
15753: DISABLE
15754: LD_INT 0
15756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15757: LD_ADDR_VAR 0 1
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_OWVAR 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 21
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 3
15786: PUSH
15787: LD_INT 23
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not tmp then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15846
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: PPUSH
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 12
15837: ARRAY
15838: PPUSH
15839: LD_INT 200
15841: PPUSH
15842: CALL_OW 234
// end ;
15846: PPOPN 1
15848: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15849: LD_EXP 24
15853: PUSH
15854: LD_EXP 53
15858: AND
15859: IFFALSE 15938
15861: GO 15863
15863: DISABLE
15864: LD_INT 0
15866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15867: LD_ADDR_VAR 0 1
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_OWVAR 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 21
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: ST_TO_ADDR
// if not tmp then
15903: LD_VAR 0 1
15907: NOT
15908: IFFALSE 15912
// exit ;
15910: GO 15938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15912: LD_VAR 0 1
15916: PUSH
15917: LD_INT 1
15919: PPUSH
15920: LD_VAR 0 1
15924: PPUSH
15925: CALL_OW 12
15929: ARRAY
15930: PPUSH
15931: LD_INT 60
15933: PPUSH
15934: CALL_OW 234
// end ;
15938: PPOPN 1
15940: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15941: LD_EXP 24
15945: PUSH
15946: LD_EXP 54
15950: AND
15951: IFFALSE 16050
15953: GO 15955
15955: DISABLE
15956: LD_INT 0
15958: PPUSH
15959: PPUSH
// begin enable ;
15960: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15961: LD_ADDR_VAR 0 1
15965: PUSH
15966: LD_INT 22
15968: PUSH
15969: LD_OWVAR 2
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 61
15980: PUSH
15981: EMPTY
15982: LIST
15983: PUSH
15984: LD_INT 33
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: PPUSH
15999: CALL_OW 69
16003: ST_TO_ADDR
// if not tmp then
16004: LD_VAR 0 1
16008: NOT
16009: IFFALSE 16013
// exit ;
16011: GO 16050
// for i in tmp do
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: LD_VAR 0 1
16022: PUSH
16023: FOR_IN
16024: IFFALSE 16048
// if IsControledBy ( i ) then
16026: LD_VAR 0 2
16030: PPUSH
16031: CALL_OW 312
16035: IFFALSE 16046
// ComUnlink ( i ) ;
16037: LD_VAR 0 2
16041: PPUSH
16042: CALL_OW 136
16046: GO 16023
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16053: LD_EXP 24
16057: PUSH
16058: LD_EXP 55
16062: AND
16063: IFFALSE 16203
16065: GO 16067
16067: DISABLE
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
// begin ToLua ( displayPowell(); ) ;
16072: LD_STRING displayPowell();
16074: PPUSH
16075: CALL_OW 559
// uc_side := 0 ;
16079: LD_ADDR_OWVAR 20
16083: PUSH
16084: LD_INT 0
16086: ST_TO_ADDR
// uc_nation := 2 ;
16087: LD_ADDR_OWVAR 21
16091: PUSH
16092: LD_INT 2
16094: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16095: LD_ADDR_OWVAR 37
16099: PUSH
16100: LD_INT 14
16102: ST_TO_ADDR
// vc_engine := engine_siberite ;
16103: LD_ADDR_OWVAR 39
16107: PUSH
16108: LD_INT 3
16110: ST_TO_ADDR
// vc_control := control_apeman ;
16111: LD_ADDR_OWVAR 38
16115: PUSH
16116: LD_INT 5
16118: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16119: LD_ADDR_OWVAR 40
16123: PUSH
16124: LD_INT 29
16126: ST_TO_ADDR
// un := CreateVehicle ;
16127: LD_ADDR_VAR 0 2
16131: PUSH
16132: CALL_OW 45
16136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16137: LD_VAR 0 2
16141: PPUSH
16142: LD_INT 1
16144: PPUSH
16145: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16149: LD_INT 35
16151: PPUSH
16152: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16156: LD_VAR 0 2
16160: PPUSH
16161: LD_INT 22
16163: PUSH
16164: LD_OWVAR 2
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PPUSH
16173: CALL_OW 69
16177: PPUSH
16178: LD_VAR 0 2
16182: PPUSH
16183: CALL_OW 74
16187: PPUSH
16188: CALL_OW 115
// until IsDead ( un ) ;
16192: LD_VAR 0 2
16196: PPUSH
16197: CALL_OW 301
16201: IFFALSE 16149
// end ;
16203: PPOPN 2
16205: END
// every 0 0$1 trigger StreamModeActive and sStu do
16206: LD_EXP 24
16210: PUSH
16211: LD_EXP 63
16215: AND
16216: IFFALSE 16232
16218: GO 16220
16220: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16221: LD_STRING displayStucuk();
16223: PPUSH
16224: CALL_OW 559
// ResetFog ;
16228: CALL_OW 335
// end ;
16232: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16233: LD_EXP 24
16237: PUSH
16238: LD_EXP 56
16242: AND
16243: IFFALSE 16384
16245: GO 16247
16247: DISABLE
16248: LD_INT 0
16250: PPUSH
16251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16252: LD_ADDR_VAR 0 2
16256: PUSH
16257: LD_INT 22
16259: PUSH
16260: LD_OWVAR 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PPUSH
16283: CALL_OW 69
16287: ST_TO_ADDR
// if not tmp then
16288: LD_VAR 0 2
16292: NOT
16293: IFFALSE 16297
// exit ;
16295: GO 16384
// un := tmp [ rand ( 1 , tmp ) ] ;
16297: LD_ADDR_VAR 0 1
16301: PUSH
16302: LD_VAR 0 2
16306: PUSH
16307: LD_INT 1
16309: PPUSH
16310: LD_VAR 0 2
16314: PPUSH
16315: CALL_OW 12
16319: ARRAY
16320: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: LD_INT 0
16328: PPUSH
16329: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_OWVAR 3
16342: PUSH
16343: LD_VAR 0 1
16347: DIFF
16348: PPUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 74
16358: PPUSH
16359: CALL_OW 115
// wait ( 0 0$20 ) ;
16363: LD_INT 700
16365: PPUSH
16366: CALL_OW 67
// SetSide ( un , your_side ) ;
16370: LD_VAR 0 1
16374: PPUSH
16375: LD_OWVAR 2
16379: PPUSH
16380: CALL_OW 235
// end ;
16384: PPOPN 2
16386: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16387: LD_EXP 24
16391: PUSH
16392: LD_EXP 57
16396: AND
16397: IFFALSE 16503
16399: GO 16401
16401: DISABLE
16402: LD_INT 0
16404: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_OWVAR 2
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: LD_INT 30
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PPUSH
16454: CALL_OW 69
16458: ST_TO_ADDR
// if not depot then
16459: LD_VAR 0 1
16463: NOT
16464: IFFALSE 16468
// exit ;
16466: GO 16503
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16468: LD_VAR 0 1
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: PPUSH
16477: CALL_OW 250
16481: PPUSH
16482: LD_VAR 0 1
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: CALL_OW 251
16495: PPUSH
16496: LD_INT 70
16498: PPUSH
16499: CALL_OW 495
// end ;
16503: PPOPN 1
16505: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16506: LD_EXP 24
16510: PUSH
16511: LD_EXP 58
16515: AND
16516: IFFALSE 16727
16518: GO 16520
16520: DISABLE
16521: LD_INT 0
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16528: LD_ADDR_VAR 0 5
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_OWVAR 2
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 21
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 69
16563: ST_TO_ADDR
// if not tmp then
16564: LD_VAR 0 5
16568: NOT
16569: IFFALSE 16573
// exit ;
16571: GO 16727
// for i in tmp do
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: LD_VAR 0 5
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16725
// begin d := rand ( 0 , 5 ) ;
16586: LD_ADDR_VAR 0 4
16590: PUSH
16591: LD_INT 0
16593: PPUSH
16594: LD_INT 5
16596: PPUSH
16597: CALL_OW 12
16601: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16602: LD_ADDR_VAR 0 2
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 250
16616: PPUSH
16617: LD_VAR 0 4
16621: PPUSH
16622: LD_INT 3
16624: PPUSH
16625: LD_INT 12
16627: PPUSH
16628: CALL_OW 12
16632: PPUSH
16633: CALL_OW 272
16637: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_VAR 0 1
16647: PPUSH
16648: CALL_OW 251
16652: PPUSH
16653: LD_VAR 0 4
16657: PPUSH
16658: LD_INT 3
16660: PPUSH
16661: LD_INT 12
16663: PPUSH
16664: CALL_OW 12
16668: PPUSH
16669: CALL_OW 273
16673: ST_TO_ADDR
// if ValidHex ( x , y ) then
16674: LD_VAR 0 2
16678: PPUSH
16679: LD_VAR 0 3
16683: PPUSH
16684: CALL_OW 488
16688: IFFALSE 16723
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: LD_INT 3
16707: PPUSH
16708: LD_INT 6
16710: PPUSH
16711: CALL_OW 12
16715: PPUSH
16716: LD_INT 1
16718: PPUSH
16719: CALL_OW 483
// end ;
16723: GO 16583
16725: POP
16726: POP
// end ;
16727: PPOPN 5
16729: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16730: LD_EXP 24
16734: PUSH
16735: LD_EXP 59
16739: AND
16740: IFFALSE 16834
16742: GO 16744
16744: DISABLE
16745: LD_INT 0
16747: PPUSH
16748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16749: LD_ADDR_VAR 0 2
16753: PUSH
16754: LD_INT 22
16756: PUSH
16757: LD_OWVAR 2
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 32
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 21
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: PPUSH
16791: CALL_OW 69
16795: ST_TO_ADDR
// if not tmp then
16796: LD_VAR 0 2
16800: NOT
16801: IFFALSE 16805
// exit ;
16803: GO 16834
// for i in tmp do
16805: LD_ADDR_VAR 0 1
16809: PUSH
16810: LD_VAR 0 2
16814: PUSH
16815: FOR_IN
16816: IFFALSE 16832
// SetFuel ( i , 0 ) ;
16818: LD_VAR 0 1
16822: PPUSH
16823: LD_INT 0
16825: PPUSH
16826: CALL_OW 240
16830: GO 16815
16832: POP
16833: POP
// end ;
16834: PPOPN 2
16836: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16837: LD_EXP 24
16841: PUSH
16842: LD_EXP 60
16846: AND
16847: IFFALSE 16913
16849: GO 16851
16851: DISABLE
16852: LD_INT 0
16854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_INT 22
16862: PUSH
16863: LD_OWVAR 2
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 30
16874: PUSH
16875: LD_INT 29
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PPUSH
16886: CALL_OW 69
16890: ST_TO_ADDR
// if not tmp then
16891: LD_VAR 0 1
16895: NOT
16896: IFFALSE 16900
// exit ;
16898: GO 16913
// DestroyUnit ( tmp [ 1 ] ) ;
16900: LD_VAR 0 1
16904: PUSH
16905: LD_INT 1
16907: ARRAY
16908: PPUSH
16909: CALL_OW 65
// end ;
16913: PPOPN 1
16915: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16916: LD_EXP 24
16920: PUSH
16921: LD_EXP 62
16925: AND
16926: IFFALSE 17055
16928: GO 16930
16930: DISABLE
16931: LD_INT 0
16933: PPUSH
// begin uc_side := 0 ;
16934: LD_ADDR_OWVAR 20
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// uc_nation := nation_arabian ;
16942: LD_ADDR_OWVAR 21
16946: PUSH
16947: LD_INT 2
16949: ST_TO_ADDR
// hc_gallery :=  ;
16950: LD_ADDR_OWVAR 33
16954: PUSH
16955: LD_STRING 
16957: ST_TO_ADDR
// hc_name :=  ;
16958: LD_ADDR_OWVAR 26
16962: PUSH
16963: LD_STRING 
16965: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16966: LD_INT 1
16968: PPUSH
16969: LD_INT 11
16971: PPUSH
16972: LD_INT 10
16974: PPUSH
16975: CALL_OW 380
// un := CreateHuman ;
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: CALL_OW 44
16988: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17001: LD_INT 35
17003: PPUSH
17004: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_INT 22
17015: PUSH
17016: LD_OWVAR 2
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PPUSH
17025: CALL_OW 69
17029: PPUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: CALL_OW 74
17039: PPUSH
17040: CALL_OW 115
// until IsDead ( un ) ;
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 301
17053: IFFALSE 17001
// end ;
17055: PPOPN 1
17057: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17058: LD_EXP 24
17062: PUSH
17063: LD_EXP 64
17067: AND
17068: IFFALSE 17080
17070: GO 17072
17072: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17073: LD_STRING earthquake(getX(game), 0, 32)
17075: PPUSH
17076: CALL_OW 559
17080: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17081: LD_EXP 24
17085: PUSH
17086: LD_EXP 65
17090: AND
17091: IFFALSE 17182
17093: GO 17095
17095: DISABLE
17096: LD_INT 0
17098: PPUSH
// begin enable ;
17099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17100: LD_ADDR_VAR 0 1
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_OWVAR 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 21
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 33
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: ST_TO_ADDR
// if not tmp then
17147: LD_VAR 0 1
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17156: LD_VAR 0 1
17160: PUSH
17161: LD_INT 1
17163: PPUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 12
17173: ARRAY
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 234
// end ;
17182: PPOPN 1
17184: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17185: LD_EXP 24
17189: PUSH
17190: LD_EXP 66
17194: AND
17195: IFFALSE 17336
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17205: LD_ADDR_VAR 0 3
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 25
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 3
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17336
// un := tmp [ rand ( 1 , tmp ) ] ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_INT 1
17262: PPUSH
17263: LD_VAR 0 3
17267: PPUSH
17268: CALL_OW 12
17272: ARRAY
17273: ST_TO_ADDR
// if Crawls ( un ) then
17274: LD_VAR 0 2
17278: PPUSH
17279: CALL_OW 318
17283: IFFALSE 17294
// ComWalk ( un ) ;
17285: LD_VAR 0 2
17289: PPUSH
17290: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17294: LD_VAR 0 2
17298: PPUSH
17299: LD_INT 9
17301: PPUSH
17302: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17306: LD_INT 28
17308: PPUSH
17309: LD_OWVAR 2
17313: PPUSH
17314: LD_INT 2
17316: PPUSH
17317: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17321: LD_INT 29
17323: PPUSH
17324: LD_OWVAR 2
17328: PPUSH
17329: LD_INT 2
17331: PPUSH
17332: CALL_OW 322
// end ;
17336: PPOPN 3
17338: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17339: LD_EXP 24
17343: PUSH
17344: LD_EXP 67
17348: AND
17349: IFFALSE 17460
17351: GO 17353
17353: DISABLE
17354: LD_INT 0
17356: PPUSH
17357: PPUSH
17358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17359: LD_ADDR_VAR 0 3
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_OWVAR 2
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 25
17378: PUSH
17379: LD_INT 1
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 69
17394: ST_TO_ADDR
// if not tmp then
17395: LD_VAR 0 3
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17460
// un := tmp [ rand ( 1 , tmp ) ] ;
17404: LD_ADDR_VAR 0 2
17408: PUSH
17409: LD_VAR 0 3
17413: PUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: ST_TO_ADDR
// if Crawls ( un ) then
17428: LD_VAR 0 2
17432: PPUSH
17433: CALL_OW 318
17437: IFFALSE 17448
// ComWalk ( un ) ;
17439: LD_VAR 0 2
17443: PPUSH
17444: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_INT 8
17455: PPUSH
17456: CALL_OW 336
// end ;
17460: PPOPN 3
17462: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17463: LD_EXP 24
17467: PUSH
17468: LD_EXP 68
17472: AND
17473: IFFALSE 17617
17475: GO 17477
17477: DISABLE
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17482: LD_ADDR_VAR 0 2
17486: PUSH
17487: LD_INT 22
17489: PUSH
17490: LD_OWVAR 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 21
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 34
17514: PUSH
17515: LD_INT 12
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 34
17524: PUSH
17525: LD_INT 51
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 34
17534: PUSH
17535: LD_INT 32
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: ST_TO_ADDR
// if not tmp then
17558: LD_VAR 0 2
17562: NOT
17563: IFFALSE 17567
// exit ;
17565: GO 17617
// for i in tmp do
17567: LD_ADDR_VAR 0 1
17571: PUSH
17572: LD_VAR 0 2
17576: PUSH
17577: FOR_IN
17578: IFFALSE 17615
// if GetCargo ( i , mat_artifact ) = 0 then
17580: LD_VAR 0 1
17584: PPUSH
17585: LD_INT 4
17587: PPUSH
17588: CALL_OW 289
17592: PUSH
17593: LD_INT 0
17595: EQUAL
17596: IFFALSE 17613
// SetCargo ( i , mat_siberit , 100 ) ;
17598: LD_VAR 0 1
17602: PPUSH
17603: LD_INT 3
17605: PPUSH
17606: LD_INT 100
17608: PPUSH
17609: CALL_OW 290
17613: GO 17577
17615: POP
17616: POP
// end ;
17617: PPOPN 2
17619: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17620: LD_EXP 24
17624: PUSH
17625: LD_EXP 69
17629: AND
17630: IFFALSE 17783
17632: GO 17634
17634: DISABLE
17635: LD_INT 0
17637: PPUSH
17638: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17639: LD_ADDR_VAR 0 2
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_OWVAR 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: ST_TO_ADDR
// if not tmp then
17661: LD_VAR 0 2
17665: NOT
17666: IFFALSE 17670
// exit ;
17668: GO 17783
// for i := 1 to 2 do
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: DOUBLE
17676: LD_INT 1
17678: DEC
17679: ST_TO_ADDR
17680: LD_INT 2
17682: PUSH
17683: FOR_TO
17684: IFFALSE 17781
// begin uc_side := your_side ;
17686: LD_ADDR_OWVAR 20
17690: PUSH
17691: LD_OWVAR 2
17695: ST_TO_ADDR
// uc_nation := nation_american ;
17696: LD_ADDR_OWVAR 21
17700: PUSH
17701: LD_INT 1
17703: ST_TO_ADDR
// vc_chassis := us_morphling ;
17704: LD_ADDR_OWVAR 37
17708: PUSH
17709: LD_INT 5
17711: ST_TO_ADDR
// vc_engine := engine_siberite ;
17712: LD_ADDR_OWVAR 39
17716: PUSH
17717: LD_INT 3
17719: ST_TO_ADDR
// vc_control := control_computer ;
17720: LD_ADDR_OWVAR 38
17724: PUSH
17725: LD_INT 3
17727: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17728: LD_ADDR_OWVAR 40
17732: PUSH
17733: LD_INT 10
17735: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
17736: CALL_OW 45
17740: PPUSH
17741: LD_VAR 0 2
17745: PUSH
17746: LD_INT 1
17748: ARRAY
17749: PPUSH
17750: CALL_OW 250
17754: PPUSH
17755: LD_VAR 0 2
17759: PUSH
17760: LD_INT 1
17762: ARRAY
17763: PPUSH
17764: CALL_OW 251
17768: PPUSH
17769: LD_INT 12
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: CALL_OW 50
// end ;
17779: GO 17683
17781: POP
17782: POP
// end ;
17783: PPOPN 2
17785: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17786: LD_EXP 24
17790: PUSH
17791: LD_EXP 70
17795: AND
17796: IFFALSE 18018
17798: GO 17800
17800: DISABLE
17801: LD_INT 0
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17809: LD_ADDR_VAR 0 6
17813: PUSH
17814: LD_INT 22
17816: PUSH
17817: LD_OWVAR 2
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 21
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: LD_INT 23
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: ST_TO_ADDR
// if not tmp then
17863: LD_VAR 0 6
17867: NOT
17868: IFFALSE 17872
// exit ;
17870: GO 18018
// s1 := rand ( 1 , 4 ) ;
17872: LD_ADDR_VAR 0 2
17876: PUSH
17877: LD_INT 1
17879: PPUSH
17880: LD_INT 4
17882: PPUSH
17883: CALL_OW 12
17887: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_VAR 0 6
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: PPUSH
17902: LD_VAR 0 2
17906: PPUSH
17907: CALL_OW 259
17911: ST_TO_ADDR
// if s1 = 1 then
17912: LD_VAR 0 2
17916: PUSH
17917: LD_INT 1
17919: EQUAL
17920: IFFALSE 17940
// s2 := rand ( 2 , 4 ) else
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 2
17929: PPUSH
17930: LD_INT 4
17932: PPUSH
17933: CALL_OW 12
17937: ST_TO_ADDR
17938: GO 17948
// s2 := 1 ;
17940: LD_ADDR_VAR 0 3
17944: PUSH
17945: LD_INT 1
17947: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17948: LD_ADDR_VAR 0 5
17952: PUSH
17953: LD_VAR 0 6
17957: PUSH
17958: LD_INT 1
17960: ARRAY
17961: PPUSH
17962: LD_VAR 0 3
17966: PPUSH
17967: CALL_OW 259
17971: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17972: LD_VAR 0 6
17976: PUSH
17977: LD_INT 1
17979: ARRAY
17980: PPUSH
17981: LD_VAR 0 2
17985: PPUSH
17986: LD_VAR 0 5
17990: PPUSH
17991: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17995: LD_VAR 0 6
17999: PUSH
18000: LD_INT 1
18002: ARRAY
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_VAR 0 4
18013: PPUSH
18014: CALL_OW 237
// end ;
18018: PPOPN 6
18020: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18021: LD_EXP 24
18025: PUSH
18026: LD_EXP 71
18030: AND
18031: IFFALSE 18110
18033: GO 18035
18035: DISABLE
18036: LD_INT 0
18038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_OWVAR 2
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 30
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: ST_TO_ADDR
// if not tmp then
18075: LD_VAR 0 1
18079: NOT
18080: IFFALSE 18084
// exit ;
18082: GO 18110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18084: LD_VAR 0 1
18088: PUSH
18089: LD_INT 1
18091: PPUSH
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 12
18101: ARRAY
18102: PPUSH
18103: LD_INT 1
18105: PPUSH
18106: CALL_OW 234
// end ;
18110: PPOPN 1
18112: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18113: LD_EXP 24
18117: PUSH
18118: LD_EXP 72
18122: AND
18123: IFFALSE 18235
18125: GO 18127
18127: DISABLE
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18132: LD_ADDR_VAR 0 2
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_OWVAR 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 30
18154: PUSH
18155: LD_INT 27
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 30
18164: PUSH
18165: LD_INT 26
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 30
18174: PUSH
18175: LD_INT 28
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PPUSH
18192: CALL_OW 69
18196: ST_TO_ADDR
// if not tmp then
18197: LD_VAR 0 2
18201: NOT
18202: IFFALSE 18206
// exit ;
18204: GO 18235
// for i in tmp do
18206: LD_ADDR_VAR 0 1
18210: PUSH
18211: LD_VAR 0 2
18215: PUSH
18216: FOR_IN
18217: IFFALSE 18233
// SetLives ( i , 1 ) ;
18219: LD_VAR 0 1
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 234
18231: GO 18216
18233: POP
18234: POP
// end ;
18235: PPOPN 2
18237: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18238: LD_EXP 24
18242: PUSH
18243: LD_EXP 73
18247: AND
18248: IFFALSE 18522
18250: GO 18252
18252: DISABLE
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
18257: PPUSH
// begin i := rand ( 1 , 7 ) ;
18258: LD_ADDR_VAR 0 1
18262: PUSH
18263: LD_INT 1
18265: PPUSH
18266: LD_INT 7
18268: PPUSH
18269: CALL_OW 12
18273: ST_TO_ADDR
// case i of 1 :
18274: LD_VAR 0 1
18278: PUSH
18279: LD_INT 1
18281: DOUBLE
18282: EQUAL
18283: IFTRUE 18287
18285: GO 18297
18287: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18288: LD_STRING earthquake(getX(game), 0, 32)
18290: PPUSH
18291: CALL_OW 559
18295: GO 18522
18297: LD_INT 2
18299: DOUBLE
18300: EQUAL
18301: IFTRUE 18305
18303: GO 18319
18305: POP
// begin ToLua ( displayStucuk(); ) ;
18306: LD_STRING displayStucuk();
18308: PPUSH
18309: CALL_OW 559
// ResetFog ;
18313: CALL_OW 335
// end ; 3 :
18317: GO 18522
18319: LD_INT 3
18321: DOUBLE
18322: EQUAL
18323: IFTRUE 18327
18325: GO 18431
18327: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18328: LD_ADDR_VAR 0 2
18332: PUSH
18333: LD_INT 22
18335: PUSH
18336: LD_OWVAR 2
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 25
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: ST_TO_ADDR
// if not tmp then
18364: LD_VAR 0 2
18368: NOT
18369: IFFALSE 18373
// exit ;
18371: GO 18522
// un := tmp [ rand ( 1 , tmp ) ] ;
18373: LD_ADDR_VAR 0 3
18377: PUSH
18378: LD_VAR 0 2
18382: PUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_VAR 0 2
18390: PPUSH
18391: CALL_OW 12
18395: ARRAY
18396: ST_TO_ADDR
// if Crawls ( un ) then
18397: LD_VAR 0 3
18401: PPUSH
18402: CALL_OW 318
18406: IFFALSE 18417
// ComWalk ( un ) ;
18408: LD_VAR 0 3
18412: PPUSH
18413: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18417: LD_VAR 0 3
18421: PPUSH
18422: LD_INT 8
18424: PPUSH
18425: CALL_OW 336
// end ; 4 :
18429: GO 18522
18431: LD_INT 4
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18500
18439: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 30
18459: PUSH
18460: LD_INT 29
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PPUSH
18471: CALL_OW 69
18475: ST_TO_ADDR
// if not tmp then
18476: LD_VAR 0 2
18480: NOT
18481: IFFALSE 18485
// exit ;
18483: GO 18522
// DestroyUnit ( tmp [ 1 ] ) ;
18485: LD_VAR 0 2
18489: PUSH
18490: LD_INT 1
18492: ARRAY
18493: PPUSH
18494: CALL_OW 65
// end ; 5 .. 7 :
18498: GO 18522
18500: LD_INT 5
18502: DOUBLE
18503: GREATEREQUAL
18504: IFFALSE 18512
18506: LD_INT 7
18508: DOUBLE
18509: LESSEQUAL
18510: IFTRUE 18514
18512: GO 18521
18514: POP
// StreamSibBomb ; end ;
18515: CALL 14802 0 0
18519: GO 18522
18521: POP
// end ;
18522: PPOPN 3
18524: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18525: LD_EXP 24
18529: PUSH
18530: LD_EXP 74
18534: AND
18535: IFFALSE 18691
18537: GO 18539
18539: DISABLE
18540: LD_INT 0
18542: PPUSH
18543: PPUSH
18544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 81
18552: PUSH
18553: LD_OWVAR 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 21
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 21
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 69
18598: ST_TO_ADDR
// if not tmp then
18599: LD_VAR 0 2
18603: NOT
18604: IFFALSE 18608
// exit ;
18606: GO 18691
// p := 0 ;
18608: LD_ADDR_VAR 0 3
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18616: LD_INT 35
18618: PPUSH
18619: CALL_OW 67
// p := p + 1 ;
18623: LD_ADDR_VAR 0 3
18627: PUSH
18628: LD_VAR 0 3
18632: PUSH
18633: LD_INT 1
18635: PLUS
18636: ST_TO_ADDR
// for i in tmp do
18637: LD_ADDR_VAR 0 1
18641: PUSH
18642: LD_VAR 0 2
18646: PUSH
18647: FOR_IN
18648: IFFALSE 18679
// if GetLives ( i ) < 1000 then
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 256
18659: PUSH
18660: LD_INT 1000
18662: LESS
18663: IFFALSE 18677
// SetLives ( i , 1000 ) ;
18665: LD_VAR 0 1
18669: PPUSH
18670: LD_INT 1000
18672: PPUSH
18673: CALL_OW 234
18677: GO 18647
18679: POP
18680: POP
// until p > 20 ;
18681: LD_VAR 0 3
18685: PUSH
18686: LD_INT 20
18688: GREATER
18689: IFFALSE 18616
// end ;
18691: PPOPN 3
18693: END
// every 0 0$1 trigger StreamModeActive and sTime do
18694: LD_EXP 24
18698: PUSH
18699: LD_EXP 75
18703: AND
18704: IFFALSE 18739
18706: GO 18708
18708: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18709: LD_INT 28
18711: PPUSH
18712: LD_OWVAR 2
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18724: LD_INT 30
18726: PPUSH
18727: LD_OWVAR 2
18731: PPUSH
18732: LD_INT 2
18734: PPUSH
18735: CALL_OW 322
// end ;
18739: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18740: LD_EXP 24
18744: PUSH
18745: LD_EXP 76
18749: AND
18750: IFFALSE 18871
18752: GO 18754
18754: DISABLE
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: LD_INT 22
18766: PUSH
18767: LD_OWVAR 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 21
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 3
18788: PUSH
18789: LD_INT 23
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: ST_TO_ADDR
// if not tmp then
18813: LD_VAR 0 2
18817: NOT
18818: IFFALSE 18822
// exit ;
18820: GO 18871
// for i in tmp do
18822: LD_ADDR_VAR 0 1
18826: PUSH
18827: LD_VAR 0 2
18831: PUSH
18832: FOR_IN
18833: IFFALSE 18869
// begin if Crawls ( i ) then
18835: LD_VAR 0 1
18839: PPUSH
18840: CALL_OW 318
18844: IFFALSE 18855
// ComWalk ( i ) ;
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 138
// SetClass ( i , 2 ) ;
18855: LD_VAR 0 1
18859: PPUSH
18860: LD_INT 2
18862: PPUSH
18863: CALL_OW 336
// end ;
18867: GO 18832
18869: POP
18870: POP
// end ;
18871: PPOPN 2
18873: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18874: LD_EXP 24
18878: PUSH
18879: LD_EXP 77
18883: AND
18884: IFFALSE 19165
18886: GO 18888
18888: DISABLE
18889: LD_INT 0
18891: PPUSH
18892: PPUSH
18893: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18894: LD_OWVAR 2
18898: PPUSH
18899: LD_INT 9
18901: PPUSH
18902: LD_INT 1
18904: PPUSH
18905: LD_INT 1
18907: PPUSH
18908: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18912: LD_INT 9
18914: PPUSH
18915: LD_OWVAR 2
18919: PPUSH
18920: CALL_OW 343
// uc_side := 9 ;
18924: LD_ADDR_OWVAR 20
18928: PUSH
18929: LD_INT 9
18931: ST_TO_ADDR
// uc_nation := 2 ;
18932: LD_ADDR_OWVAR 21
18936: PUSH
18937: LD_INT 2
18939: ST_TO_ADDR
// hc_name := Dark Warrior ;
18940: LD_ADDR_OWVAR 26
18944: PUSH
18945: LD_STRING Dark Warrior
18947: ST_TO_ADDR
// hc_gallery :=  ;
18948: LD_ADDR_OWVAR 33
18952: PUSH
18953: LD_STRING 
18955: ST_TO_ADDR
// hc_noskilllimit := true ;
18956: LD_ADDR_OWVAR 76
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18964: LD_ADDR_OWVAR 31
18968: PUSH
18969: LD_INT 30
18971: PUSH
18972: LD_INT 30
18974: PUSH
18975: LD_INT 30
18977: PUSH
18978: LD_INT 30
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: ST_TO_ADDR
// un := CreateHuman ;
18987: LD_ADDR_VAR 0 3
18991: PUSH
18992: CALL_OW 44
18996: ST_TO_ADDR
// hc_noskilllimit := false ;
18997: LD_ADDR_OWVAR 76
19001: PUSH
19002: LD_INT 0
19004: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19005: LD_VAR 0 3
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: CALL_OW 51
// p := 0 ;
19017: LD_ADDR_VAR 0 2
19021: PUSH
19022: LD_INT 0
19024: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19025: LD_INT 35
19027: PPUSH
19028: CALL_OW 67
// p := p + 1 ;
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: LD_VAR 0 2
19041: PUSH
19042: LD_INT 1
19044: PLUS
19045: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19046: LD_VAR 0 3
19050: PPUSH
19051: CALL_OW 256
19055: PUSH
19056: LD_INT 1000
19058: LESS
19059: IFFALSE 19073
// SetLives ( un , 1000 ) ;
19061: LD_VAR 0 3
19065: PPUSH
19066: LD_INT 1000
19068: PPUSH
19069: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 81
19080: PUSH
19081: LD_OWVAR 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 91
19092: PUSH
19093: LD_VAR 0 3
19097: PUSH
19098: LD_INT 30
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PPUSH
19110: CALL_OW 69
19114: PPUSH
19115: LD_VAR 0 3
19119: PPUSH
19120: CALL_OW 74
19124: PPUSH
19125: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19129: LD_VAR 0 2
19133: PUSH
19134: LD_INT 60
19136: GREATER
19137: PUSH
19138: LD_VAR 0 3
19142: PPUSH
19143: CALL_OW 301
19147: OR
19148: IFFALSE 19025
// if un then
19150: LD_VAR 0 3
19154: IFFALSE 19165
// RemoveUnit ( un ) ;
19156: LD_VAR 0 3
19160: PPUSH
19161: CALL_OW 64
// end ; end_of_file end_of_file
19165: PPOPN 3
19167: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19168: LD_INT 0
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19174: LD_VAR 0 1
19178: PPUSH
19179: CALL_OW 264
19183: PUSH
19184: LD_EXP 82
19188: EQUAL
19189: IFFALSE 19261
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19191: LD_INT 68
19193: PPUSH
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 255
19203: PPUSH
19204: CALL_OW 321
19208: PUSH
19209: LD_INT 2
19211: EQUAL
19212: IFFALSE 19224
// eff := 70 else
19214: LD_ADDR_VAR 0 4
19218: PUSH
19219: LD_INT 70
19221: ST_TO_ADDR
19222: GO 19232
// eff := 30 ;
19224: LD_ADDR_VAR 0 4
19228: PUSH
19229: LD_INT 30
19231: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19232: LD_VAR 0 1
19236: PPUSH
19237: CALL_OW 250
19241: PPUSH
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 251
19251: PPUSH
19252: LD_VAR 0 4
19256: PPUSH
19257: CALL_OW 495
// end ; end ;
19261: LD_VAR 0 2
19265: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19266: LD_INT 0
19268: PPUSH
// end ;
19269: LD_VAR 0 4
19273: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19274: LD_INT 0
19276: PPUSH
19277: PPUSH
19278: PPUSH
19279: PPUSH
19280: PPUSH
19281: PPUSH
// if cmd = 124 then
19282: LD_VAR 0 1
19286: PUSH
19287: LD_INT 124
19289: EQUAL
19290: IFFALSE 19496
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19292: LD_ADDR_VAR 0 5
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 34
19302: PUSH
19303: LD_INT 53
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 34
19312: PUSH
19313: LD_INT 14
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PPUSH
19325: CALL_OW 69
19329: ST_TO_ADDR
// if not tmp then
19330: LD_VAR 0 5
19334: NOT
19335: IFFALSE 19339
// exit ;
19337: GO 19496
// for i in tmp do
19339: LD_ADDR_VAR 0 3
19343: PUSH
19344: LD_VAR 0 5
19348: PUSH
19349: FOR_IN
19350: IFFALSE 19494
// begin taskList := GetTaskList ( i ) ;
19352: LD_ADDR_VAR 0 6
19356: PUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: CALL_OW 437
19366: ST_TO_ADDR
// if not taskList then
19367: LD_VAR 0 6
19371: NOT
19372: IFFALSE 19376
// continue ;
19374: GO 19349
// for j = 1 to taskList do
19376: LD_ADDR_VAR 0 4
19380: PUSH
19381: DOUBLE
19382: LD_INT 1
19384: DEC
19385: ST_TO_ADDR
19386: LD_VAR 0 6
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19490
// if taskList [ j ] [ 1 ] = | then
19394: LD_VAR 0 6
19398: PUSH
19399: LD_VAR 0 4
19403: ARRAY
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PUSH
19409: LD_STRING |
19411: EQUAL
19412: IFFALSE 19488
// begin _taskList := Delete ( taskList , 1 ) ;
19414: LD_ADDR_VAR 0 7
19418: PUSH
19419: LD_VAR 0 6
19423: PPUSH
19424: LD_INT 1
19426: PPUSH
19427: CALL_OW 3
19431: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
19432: LD_VAR 0 3
19436: PPUSH
19437: LD_VAR 0 7
19441: PPUSH
19442: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
19446: LD_VAR 0 3
19450: PPUSH
19451: LD_VAR 0 6
19455: PUSH
19456: LD_VAR 0 4
19460: ARRAY
19461: PUSH
19462: LD_INT 2
19464: ARRAY
19465: PPUSH
19466: LD_VAR 0 6
19470: PUSH
19471: LD_VAR 0 4
19475: ARRAY
19476: PUSH
19477: LD_INT 3
19479: ARRAY
19480: PPUSH
19481: LD_INT 8
19483: PPUSH
19484: CALL 19501 0 4
// end ;
19488: GO 19391
19490: POP
19491: POP
// end ;
19492: GO 19349
19494: POP
19495: POP
// end ; end ;
19496: LD_VAR 0 2
19500: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
19505: PPUSH
19506: PPUSH
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
19511: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19512: LD_VAR 0 1
19516: NOT
19517: PUSH
19518: LD_VAR 0 2
19522: PPUSH
19523: LD_VAR 0 3
19527: PPUSH
19528: CALL_OW 488
19532: NOT
19533: OR
19534: PUSH
19535: LD_VAR 0 4
19539: NOT
19540: OR
19541: IFFALSE 19545
// exit ;
19543: GO 19885
// list := [ ] ;
19545: LD_ADDR_VAR 0 13
19549: PUSH
19550: EMPTY
19551: ST_TO_ADDR
// if x - r < 0 then
19552: LD_VAR 0 2
19556: PUSH
19557: LD_VAR 0 4
19561: MINUS
19562: PUSH
19563: LD_INT 0
19565: LESS
19566: IFFALSE 19578
// min_x := 0 else
19568: LD_ADDR_VAR 0 7
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
19576: GO 19594
// min_x := x - r ;
19578: LD_ADDR_VAR 0 7
19582: PUSH
19583: LD_VAR 0 2
19587: PUSH
19588: LD_VAR 0 4
19592: MINUS
19593: ST_TO_ADDR
// if y - r < 0 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_VAR 0 4
19603: MINUS
19604: PUSH
19605: LD_INT 0
19607: LESS
19608: IFFALSE 19620
// min_y := 0 else
19610: LD_ADDR_VAR 0 8
19614: PUSH
19615: LD_INT 0
19617: ST_TO_ADDR
19618: GO 19636
// min_y := y - r ;
19620: LD_ADDR_VAR 0 8
19624: PUSH
19625: LD_VAR 0 3
19629: PUSH
19630: LD_VAR 0 4
19634: MINUS
19635: ST_TO_ADDR
// max_x := x + r ;
19636: LD_ADDR_VAR 0 9
19640: PUSH
19641: LD_VAR 0 2
19645: PUSH
19646: LD_VAR 0 4
19650: PLUS
19651: ST_TO_ADDR
// max_y := y + r ;
19652: LD_ADDR_VAR 0 10
19656: PUSH
19657: LD_VAR 0 3
19661: PUSH
19662: LD_VAR 0 4
19666: PLUS
19667: ST_TO_ADDR
// for _x = min_x to max_x do
19668: LD_ADDR_VAR 0 11
19672: PUSH
19673: DOUBLE
19674: LD_VAR 0 7
19678: DEC
19679: ST_TO_ADDR
19680: LD_VAR 0 9
19684: PUSH
19685: FOR_TO
19686: IFFALSE 19803
// for _y = min_y to max_y do
19688: LD_ADDR_VAR 0 12
19692: PUSH
19693: DOUBLE
19694: LD_VAR 0 8
19698: DEC
19699: ST_TO_ADDR
19700: LD_VAR 0 10
19704: PUSH
19705: FOR_TO
19706: IFFALSE 19799
// begin if not ValidHex ( _x , _y ) then
19708: LD_VAR 0 11
19712: PPUSH
19713: LD_VAR 0 12
19717: PPUSH
19718: CALL_OW 488
19722: NOT
19723: IFFALSE 19727
// continue ;
19725: GO 19705
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19727: LD_VAR 0 11
19731: PPUSH
19732: LD_VAR 0 12
19736: PPUSH
19737: CALL_OW 351
19741: PUSH
19742: LD_VAR 0 11
19746: PPUSH
19747: LD_VAR 0 12
19751: PPUSH
19752: CALL_OW 554
19756: AND
19757: IFFALSE 19797
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19759: LD_ADDR_VAR 0 13
19763: PUSH
19764: LD_VAR 0 13
19768: PPUSH
19769: LD_VAR 0 13
19773: PUSH
19774: LD_INT 1
19776: PLUS
19777: PPUSH
19778: LD_VAR 0 11
19782: PUSH
19783: LD_VAR 0 12
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 2
19796: ST_TO_ADDR
// end ;
19797: GO 19705
19799: POP
19800: POP
19801: GO 19685
19803: POP
19804: POP
// if not list then
19805: LD_VAR 0 13
19809: NOT
19810: IFFALSE 19814
// exit ;
19812: GO 19885
// for i in list do
19814: LD_ADDR_VAR 0 6
19818: PUSH
19819: LD_VAR 0 13
19823: PUSH
19824: FOR_IN
19825: IFFALSE 19883
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19827: LD_VAR 0 1
19831: PPUSH
19832: LD_STRING M
19834: PUSH
19835: LD_VAR 0 6
19839: PUSH
19840: LD_INT 1
19842: ARRAY
19843: PUSH
19844: LD_VAR 0 6
19848: PUSH
19849: LD_INT 2
19851: ARRAY
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: LD_INT 0
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: PPUSH
19877: CALL_OW 447
19881: GO 19824
19883: POP
19884: POP
// end ; end_of_file
19885: LD_VAR 0 5
19889: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19890: GO 19892
19892: DISABLE
// begin ru_radar := 98 ;
19893: LD_ADDR_EXP 78
19897: PUSH
19898: LD_INT 98
19900: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19901: LD_ADDR_EXP 79
19905: PUSH
19906: LD_INT 89
19908: ST_TO_ADDR
// us_hack := 99 ;
19909: LD_ADDR_EXP 80
19913: PUSH
19914: LD_INT 99
19916: ST_TO_ADDR
// us_artillery := 97 ;
19917: LD_ADDR_EXP 81
19921: PUSH
19922: LD_INT 97
19924: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19925: LD_ADDR_EXP 82
19929: PUSH
19930: LD_INT 91
19932: ST_TO_ADDR
// end ;
19933: END
