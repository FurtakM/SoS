// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5318
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5318
// Say ( Heike , DH-dogtag-found ) ;
5306: LD_EXP 16
5310: PPUSH
5311: LD_STRING DH-dogtag-found
5313: PPUSH
5314: CALL_OW 88
// end ;
5318: PPOPN 1
5320: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5321: LD_EXP 8
5325: NOT
5326: PUSH
5327: LD_EXP 7
5331: NOT
5332: AND
5333: PUSH
5334: LD_INT 5
5336: PPUSH
5337: LD_EXP 16
5341: PPUSH
5342: CALL_OW 292
5346: AND
5347: PUSH
5348: LD_EXP 16
5352: PPUSH
5353: LD_EXP 17
5357: PPUSH
5358: CALL_OW 296
5362: PUSH
5363: LD_INT 8
5365: LESS
5366: AND
5367: IFFALSE 5752
5369: GO 5371
5371: DISABLE
// begin olafSpotted := true ;
5372: LD_ADDR_EXP 8
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if HasTask ( Olaf ) then
5380: LD_EXP 17
5384: PPUSH
5385: CALL_OW 314
5389: IFFALSE 5400
// ComStop ( Olaf ) ;
5391: LD_EXP 17
5395: PPUSH
5396: CALL_OW 141
// InGameOn ;
5400: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5404: LD_EXP 17
5408: PPUSH
5409: LD_EXP 16
5413: PPUSH
5414: CALL_OW 296
5418: PUSH
5419: LD_INT 8
5421: GREATER
5422: IFFALSE 5438
// ComMoveUnit ( Olaf , Heike ) ;
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5438: LD_INT 35
5440: PPUSH
5441: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5445: LD_EXP 17
5449: PPUSH
5450: LD_EXP 16
5454: PPUSH
5455: CALL_OW 296
5459: PUSH
5460: LD_INT 8
5462: LESSEQUAL
5463: IFFALSE 5438
// ComTurnUnit ( Heike , Olaf ) ;
5465: LD_EXP 16
5469: PPUSH
5470: LD_EXP 17
5474: PPUSH
5475: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5479: LD_EXP 17
5483: PPUSH
5484: LD_EXP 16
5488: PPUSH
5489: CALL_OW 119
// DialogueOn ;
5493: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5497: LD_EXP 17
5501: PPUSH
5502: LD_STRING DO-olaf-1
5504: PPUSH
5505: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5509: LD_EXP 16
5513: PPUSH
5514: LD_STRING DH-olaf-1
5516: PPUSH
5517: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5521: LD_EXP 17
5525: PPUSH
5526: LD_STRING DO-olaf-2
5528: PPUSH
5529: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5533: LD_EXP 16
5537: PPUSH
5538: LD_STRING DH-olaf-2
5540: PPUSH
5541: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_STRING DO-olaf-3
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5557: LD_EXP 17
5561: PPUSH
5562: LD_STRING DO-olaf-4
5564: PPUSH
5565: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DH-olaf-4
5576: PPUSH
5577: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5581: LD_EXP 17
5585: PPUSH
5586: LD_STRING DO-olaf-5
5588: PPUSH
5589: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5593: LD_EXP 16
5597: PPUSH
5598: LD_STRING DH-olaf-5
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5605: LD_EXP 17
5609: PPUSH
5610: LD_STRING DO-olaf-6
5612: PPUSH
5613: CALL_OW 88
// if russianSpotted or johnnySaved then
5617: LD_EXP 9
5621: PUSH
5622: LD_EXP 4
5626: OR
5627: IFFALSE 5655
// begin Say ( Heike , DH-olaf-6a ) ;
5629: LD_EXP 16
5633: PPUSH
5634: LD_STRING DH-olaf-6a
5636: PPUSH
5637: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5641: LD_EXP 17
5645: PPUSH
5646: LD_STRING DO-olaf-7a
5648: PPUSH
5649: CALL_OW 88
// end else
5653: GO 5679
// begin Say ( Heike , DH-olaf-6b ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DH-olaf-6b
5662: PPUSH
5663: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5667: LD_EXP 17
5671: PPUSH
5672: LD_STRING DO-olaf-7b
5674: PPUSH
5675: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5679: LD_EXP 17
5683: PPUSH
5684: LD_STRING DO-olaf-8
5686: PPUSH
5687: CALL_OW 88
// DialogueOff ;
5691: CALL_OW 7
// InGameOff ;
5695: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5699: LD_STRING O3_camp_cont
5701: PPUSH
5702: CALL_OW 337
// if not johnnySaved then
5706: LD_EXP 4
5710: NOT
5711: IFFALSE 5722
// KillUnit ( Johnny ) ;
5713: LD_EXP 25
5717: PPUSH
5718: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_INT 52
5729: PPUSH
5730: LD_INT 90
5732: PPUSH
5733: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5737: LD_EXP 17
5741: PPUSH
5742: LD_INT 53
5744: PPUSH
5745: LD_INT 89
5747: PPUSH
5748: CALL_OW 178
// end ;
5752: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5753: LD_EXP 8
5757: NOT
5758: PUSH
5759: LD_EXP 16
5763: PPUSH
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 296
5773: PUSH
5774: LD_INT 36
5776: LESS
5777: AND
5778: IFFALSE 5798
5780: GO 5782
5782: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5783: LD_EXP 17
5787: PPUSH
5788: LD_INT 39
5790: PPUSH
5791: LD_INT 71
5793: PPUSH
5794: CALL_OW 111
5798: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5799: LD_EXP 7
5803: NOT
5804: PUSH
5805: LD_INT 2
5807: PPUSH
5808: LD_EXP 19
5812: PPUSH
5813: CALL_OW 292
5817: PUSH
5818: LD_INT 2
5820: PPUSH
5821: LD_EXP 18
5825: PPUSH
5826: CALL_OW 292
5830: OR
5831: AND
5832: IFFALSE 7153
5834: GO 5836
5836: DISABLE
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin if not johnnySaved then
5842: LD_EXP 4
5846: NOT
5847: IFFALSE 5858
// KillUnit ( Johnny ) ;
5849: LD_EXP 25
5853: PPUSH
5854: CALL_OW 66
// mercenariesSpotted := true ;
5858: LD_ADDR_EXP 7
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5866: LD_STRING O4_camp_cont
5868: PPUSH
5869: CALL_OW 337
// InGameOn ;
5873: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5877: LD_INT 53
5879: PPUSH
5880: LD_INT 89
5882: PPUSH
5883: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5887: LD_INT 53
5889: PPUSH
5890: LD_INT 89
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_INT 8
5898: NEG
5899: PPUSH
5900: CALL_OW 330
// if olafSpotted then
5904: LD_EXP 8
5908: IFFALSE 6026
// begin AddComTurnUnit ( Olaf , Heike ) ;
5910: LD_EXP 17
5914: PPUSH
5915: LD_EXP 16
5919: PPUSH
5920: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5924: LD_EXP 16
5928: PPUSH
5929: LD_INT 51
5931: PPUSH
5932: LD_INT 86
5934: PPUSH
5935: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5939: LD_EXP 16
5943: PPUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5953: LD_EXP 17
5957: PPUSH
5958: LD_STRING DO-camp-1
5960: PPUSH
5961: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5965: LD_EXP 18
5969: PUSH
5970: LD_EXP 19
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PPUSH
5979: LD_EXP 16
5983: PPUSH
5984: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5988: LD_EXP 18
5992: PPUSH
5993: LD_STRING DG-camp-1
5995: PPUSH
5996: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6000: LD_EXP 16
6004: PPUSH
6005: LD_STRING DH-camp-1
6007: PPUSH
6008: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6012: LD_EXP 17
6016: PPUSH
6017: LD_STRING DO-camp-2
6019: PPUSH
6020: CALL_OW 88
// end else
6024: GO 6421
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: LD_INT 51
6033: PPUSH
6034: LD_INT 86
6036: PPUSH
6037: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6041: LD_EXP 16
6045: PPUSH
6046: LD_EXP 18
6050: PPUSH
6051: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6055: LD_EXP 18
6059: PUSH
6060: LD_EXP 19
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: LD_EXP 16
6073: PPUSH
6074: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6078: LD_EXP 18
6082: PPUSH
6083: LD_STRING DG-camp-1a
6085: PPUSH
6086: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6090: LD_EXP 16
6094: PPUSH
6095: LD_STRING DH-camp-1a
6097: PPUSH
6098: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6109: LD_EXP 19
6113: PPUSH
6114: LD_EXP 17
6118: PPUSH
6119: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6123: LD_EXP 19
6127: PPUSH
6128: LD_STRING DM-camp-1a
6130: PPUSH
6131: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6135: LD_EXP 17
6139: PPUSH
6140: LD_INT 52
6142: PPUSH
6143: LD_INT 90
6145: PPUSH
6146: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_EXP 16
6159: PPUSH
6160: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6164: LD_EXP 18
6168: PPUSH
6169: LD_STRING DG-camp-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6176: LD_EXP 16
6180: PPUSH
6181: LD_STRING DH-camp-2a
6183: PPUSH
6184: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6188: LD_EXP 19
6192: PPUSH
6193: LD_STRING DM-camp-2a
6195: PPUSH
6196: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6207: LD_EXP 17
6211: PPUSH
6212: LD_EXP 16
6216: PPUSH
6217: CALL_OW 296
6221: PUSH
6222: LD_INT 10
6224: LESS
6225: IFFALSE 6200
// AddComTurnUnit ( Olaf , Heike ) ;
6227: LD_EXP 17
6231: PPUSH
6232: LD_EXP 16
6236: PPUSH
6237: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6241: LD_EXP 19
6245: PPUSH
6246: LD_EXP 16
6250: PPUSH
6251: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6255: LD_EXP 17
6259: PPUSH
6260: LD_STRING DO-camp-2a
6262: PPUSH
6263: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6267: LD_EXP 16
6271: PPUSH
6272: LD_EXP 17
6276: PPUSH
6277: CALL_OW 119
// if russianSpotted then
6281: LD_EXP 9
6285: IFFALSE 6325
// begin Say ( Heike , DH-camp-2aa ) ;
6287: LD_EXP 16
6291: PPUSH
6292: LD_STRING DH-camp-2aa
6294: PPUSH
6295: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6299: LD_EXP 18
6303: PPUSH
6304: LD_STRING DG-camp-2aa
6306: PPUSH
6307: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6311: LD_EXP 19
6315: PPUSH
6316: LD_STRING DM-camp-2aa
6318: PPUSH
6319: CALL_OW 88
// end else
6323: GO 6349
// begin Say ( Heike , DH-camp-2ab ) ;
6325: LD_EXP 16
6329: PPUSH
6330: LD_STRING DH-camp-2ab
6332: PPUSH
6333: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6337: LD_EXP 19
6341: PPUSH
6342: LD_STRING DM-camp-2ab
6344: PPUSH
6345: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6349: LD_EXP 16
6353: PPUSH
6354: LD_STRING DH-camp-3a
6356: PPUSH
6357: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6361: LD_EXP 17
6365: PPUSH
6366: LD_STRING DO-camp-3a
6368: PPUSH
6369: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6373: LD_EXP 18
6377: PPUSH
6378: LD_STRING DG-camp-3a
6380: PPUSH
6381: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6385: LD_EXP 16
6389: PPUSH
6390: LD_STRING DH-camp-4aa
6392: PPUSH
6393: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6397: LD_EXP 19
6401: PPUSH
6402: LD_STRING DM-camp-4aa
6404: PPUSH
6405: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6409: LD_EXP 17
6413: PPUSH
6414: LD_STRING DO-camp-4a
6416: PPUSH
6417: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DO-camp-3
6428: PPUSH
6429: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6433: LD_EXP 17
6437: PPUSH
6438: LD_STRING DO-camp-4
6440: PPUSH
6441: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6445: LD_EXP 18
6449: PPUSH
6450: LD_EXP 17
6454: PPUSH
6455: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6459: LD_EXP 18
6463: PPUSH
6464: LD_STRING DG-camp-4
6466: PPUSH
6467: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6471: LD_EXP 16
6475: PPUSH
6476: LD_EXP 18
6480: PPUSH
6481: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6485: LD_EXP 16
6489: PPUSH
6490: LD_STRING DH-camp-4
6492: PPUSH
6493: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6497: LD_EXP 19
6501: PUSH
6502: LD_EXP 17
6506: PUSH
6507: LD_EXP 18
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: PPUSH
6517: LD_EXP 16
6521: PPUSH
6522: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6526: LD_EXP 18
6530: PPUSH
6531: LD_STRING DG-camp-5
6533: PPUSH
6534: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6538: LD_EXP 18
6542: PPUSH
6543: LD_STRING DG-camp-6
6545: PPUSH
6546: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6550: LD_EXP 16
6554: PPUSH
6555: LD_STRING DH-camp-6
6557: PPUSH
6558: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6562: LD_EXP 18
6566: PPUSH
6567: LD_STRING DG-camp-7
6569: PPUSH
6570: CALL_OW 88
// if DogTagFound then
6574: LD_EXP 6
6578: IFFALSE 6618
// begin Say ( Heike , DH-quest-1a ) ;
6580: LD_EXP 16
6584: PPUSH
6585: LD_STRING DH-quest-1a
6587: PPUSH
6588: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6592: LD_EXP 18
6596: PPUSH
6597: LD_STRING DG-quest-1a
6599: PPUSH
6600: CALL_OW 88
// mercenariesQuestDone := true ;
6604: LD_ADDR_EXP 11
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// InGameOff ;
6612: CALL_OW 9
// end else
6616: GO 6784
// begin Say ( Heike , DH-camp-7 ) ;
6618: LD_EXP 16
6622: PPUSH
6623: LD_STRING DH-camp-7
6625: PPUSH
6626: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6630: LD_EXP 16
6634: PPUSH
6635: CALL_OW 256
6639: PUSH
6640: LD_INT 1000
6642: LESS
6643: IFFALSE 6735
// begin Say ( Olaf , DO-heal-1 ) ;
6645: LD_EXP 17
6649: PPUSH
6650: LD_STRING DO-heal-1
6652: PPUSH
6653: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6657: LD_EXP 16
6661: PPUSH
6662: LD_INT 51
6664: PPUSH
6665: LD_INT 88
6667: PPUSH
6668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6672: LD_INT 35
6674: PPUSH
6675: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6679: LD_EXP 16
6683: PPUSH
6684: LD_EXP 17
6688: PPUSH
6689: CALL_OW 296
6693: PUSH
6694: LD_INT 4
6696: LESS
6697: PUSH
6698: LD_EXP 16
6702: PPUSH
6703: LD_INT 51
6705: PPUSH
6706: LD_INT 88
6708: PPUSH
6709: CALL_OW 307
6713: OR
6714: IFFALSE 6672
// SetLives ( Heike , 1000 ) ;
6716: LD_EXP 16
6720: PPUSH
6721: LD_INT 1000
6723: PPUSH
6724: CALL_OW 234
// wait ( 0 0$2 ) ;
6728: LD_INT 70
6730: PPUSH
6731: CALL_OW 67
// end ; InGameOff ;
6735: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6739: LD_EXP 17
6743: PUSH
6744: LD_EXP 18
6748: PUSH
6749: LD_EXP 19
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PPUSH
6759: LD_INT 53
6761: PPUSH
6762: LD_INT 89
6764: PPUSH
6765: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6769: LD_STRING O5_proof_cont
6771: PPUSH
6772: CALL_OW 337
// mercenariesQuestReady := true ;
6776: LD_ADDR_EXP 10
6780: PUSH
6781: LD_INT 1
6783: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6784: LD_EXP 10
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7153
// wait ( 0 0$35 ) ;
6793: LD_INT 1225
6795: PPUSH
6796: CALL_OW 67
// driver := PreparePatrolTank ;
6800: LD_ADDR_VAR 0 2
6804: PUSH
6805: CALL 2821 0 0
6809: ST_TO_ADDR
// if not driver then
6810: LD_VAR 0 2
6814: NOT
6815: IFFALSE 6819
// exit ;
6817: GO 7153
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6819: LD_INT 2
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 2
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_VAR 0 2
6844: PPUSH
6845: CALL_OW 310
6849: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6850: LD_VAR 0 3
6854: PPUSH
6855: LD_INT 500
6857: PPUSH
6858: CALL_OW 234
// SetLives ( driver , 450 ) ;
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_INT 450
6869: PPUSH
6870: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6874: LD_VAR 0 2
6878: PPUSH
6879: LD_INT 59
6881: PPUSH
6882: LD_INT 60
6884: PPUSH
6885: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6889: LD_INT 35
6891: PPUSH
6892: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6896: LD_VAR 0 3
6900: PPUSH
6901: LD_INT 59
6903: PPUSH
6904: LD_INT 60
6906: PPUSH
6907: CALL_OW 307
6911: IFFALSE 6889
// if not See ( 1 , Heike ) then
6913: LD_INT 1
6915: PPUSH
6916: LD_EXP 16
6920: PPUSH
6921: CALL_OW 292
6925: NOT
6926: IFFALSE 7050
// begin if Difficulty < 3 then
6928: LD_OWVAR 67
6932: PUSH
6933: LD_INT 3
6935: LESS
6936: IFFALSE 6954
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6938: LD_INT 59
6940: PPUSH
6941: LD_INT 60
6943: PPUSH
6944: LD_INT 2
6946: PPUSH
6947: LD_INT 6
6949: PPUSH
6950: CALL_OW 330
// ComExitVehicle ( driver ) ;
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 121
// wait ( 0 0$1 ) ;
6963: LD_INT 35
6965: PPUSH
6966: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 58
6977: PPUSH
6978: LD_INT 54
6980: PPUSH
6981: CALL_OW 171
// wait ( 0 0$1 ) ;
6985: LD_INT 35
6987: PPUSH
6988: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6992: LD_VAR 0 2
6996: PPUSH
6997: LD_INT 57
6999: PPUSH
7000: LD_INT 53
7002: PPUSH
7003: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 350
7014: PPUSH
7015: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 107
7040: PPUSH
7041: LD_INT 118
7043: PPUSH
7044: CALL_OW 171
// end else
7048: GO 7065
// begin ComMoveXY ( driver , 107 , 118 ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: LD_INT 107
7057: PPUSH
7058: LD_INT 118
7060: PPUSH
7061: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7072: LD_VAR 0 3
7076: PPUSH
7077: LD_INT 107
7079: PPUSH
7080: LD_INT 118
7082: PPUSH
7083: CALL_OW 307
7087: PUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 301
7097: OR
7098: IFFALSE 7065
// if IsDead ( driver [ 1 ] ) then
7100: LD_VAR 0 2
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: CALL_OW 301
7113: IFFALSE 7117
// exit ;
7115: GO 7153
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 1
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: FOR_IN
7138: IFFALSE 7151
// RemoveUnit ( i ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 64
7149: GO 7137
7151: POP
7152: POP
// end ;
7153: PPOPN 3
7155: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7156: LD_INT 10
7158: PPUSH
7159: LD_INT 22
7161: PUSH
7162: LD_INT 2
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 2
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 70
7187: IFFALSE 7261
7189: GO 7191
7191: DISABLE
// begin InGameOn ;
7192: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7196: LD_EXP 17
7200: PUSH
7201: LD_EXP 19
7205: PUSH
7206: LD_EXP 18
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: PPUSH
7216: LD_EXP 16
7220: PPUSH
7221: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7225: LD_EXP 19
7229: PPUSH
7230: LD_STRING DM-quest-1
7232: PPUSH
7233: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7237: LD_EXP 18
7241: PPUSH
7242: LD_STRING DG-quest-1
7244: PPUSH
7245: CALL_OW 88
// InGameOff ;
7249: CALL_OW 9
// mercenariesQuestDone := true ;
7253: LD_ADDR_EXP 11
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// end ;
7261: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7262: LD_EXP 16
7266: PPUSH
7267: LD_INT 10
7269: PPUSH
7270: CALL_OW 308
7274: PUSH
7275: LD_EXP 6
7279: AND
7280: PUSH
7281: LD_EXP 10
7285: AND
7286: PUSH
7287: LD_INT 10
7289: PPUSH
7290: LD_INT 22
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 21
7302: PUSH
7303: LD_INT 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 70
7318: NOT
7319: AND
7320: IFFALSE 7492
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
// begin InGameOn ;
7328: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7332: LD_EXP 17
7336: PUSH
7337: LD_EXP 19
7341: PUSH
7342: LD_EXP 18
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PPUSH
7352: LD_EXP 16
7356: PPUSH
7357: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7361: LD_EXP 16
7365: PPUSH
7366: LD_INT 54
7368: PPUSH
7369: LD_INT 86
7371: PPUSH
7372: CALL_OW 111
// p := p + 1 ;
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PLUS
7389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7390: LD_INT 35
7392: PPUSH
7393: CALL_OW 67
// p := p + 1 ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_VAR 0 1
7406: PUSH
7407: LD_INT 1
7409: PLUS
7410: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7411: LD_EXP 16
7415: PPUSH
7416: LD_EXP 18
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 4
7428: LESS
7429: PUSH
7430: LD_VAR 0 1
7434: PUSH
7435: LD_INT 5
7437: GREATER
7438: OR
7439: IFFALSE 7390
// Say ( Mike , DM-quest-1 ) ;
7441: LD_EXP 19
7445: PPUSH
7446: LD_STRING DM-quest-1
7448: PPUSH
7449: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7453: LD_EXP 18
7457: PPUSH
7458: LD_STRING DG-quest-1
7460: PPUSH
7461: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7465: LD_EXP 16
7469: PPUSH
7470: LD_INT 55
7472: PPUSH
7473: LD_INT 87
7475: PPUSH
7476: CALL_OW 111
// InGameOff ;
7480: CALL_OW 9
// mercenariesQuestDone := true ;
7484: LD_ADDR_EXP 11
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// end ;
7492: PPOPN 1
7494: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7495: LD_EXP 16
7499: PUSH
7500: LD_INT 55
7502: PUSH
7503: EMPTY
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: IN
7511: IFFALSE 7551
7513: GO 7515
7515: DISABLE
// begin if Difficulty < 3 then
7516: LD_OWVAR 67
7520: PUSH
7521: LD_INT 3
7523: LESS
7524: IFFALSE 7539
// RemoveSeeing ( 59 , 60 , 2 ) ;
7526: LD_INT 59
7528: PPUSH
7529: LD_INT 60
7531: PPUSH
7532: LD_INT 2
7534: PPUSH
7535: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7539: LD_EXP 16
7543: PPUSH
7544: LD_STRING DH-driver
7546: PPUSH
7547: CALL_OW 88
// end ;
7551: END
// every 0 0$1 trigger mercenariesQuestDone do
7552: LD_EXP 11
7556: IFFALSE 8044
7558: GO 7560
7560: DISABLE
// begin if mercenariesQuestReady then
7561: LD_EXP 10
7565: IFFALSE 7574
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7567: LD_STRING O5_proof_cont_out
7569: PPUSH
7570: CALL_OW 337
// InGameOn ;
7574: CALL_OW 8
// if IsInUnit ( Heike ) then
7578: LD_EXP 16
7582: PPUSH
7583: CALL_OW 310
7587: IFFALSE 7598
// ComExitVehicle ( Heike ) ;
7589: LD_EXP 16
7593: PPUSH
7594: CALL_OW 121
// wait ( 3 ) ;
7598: LD_INT 3
7600: PPUSH
7601: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7605: LD_EXP 16
7609: PPUSH
7610: LD_EXP 18
7614: PPUSH
7615: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7619: LD_EXP 17
7623: PUSH
7624: LD_EXP 19
7628: PUSH
7629: LD_EXP 18
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: LD_EXP 16
7643: PPUSH
7644: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7648: LD_EXP 16
7652: PPUSH
7653: LD_STRING DH-quest-done-1
7655: PPUSH
7656: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7660: LD_EXP 19
7664: PPUSH
7665: LD_STRING DM-quest-done-1
7667: PPUSH
7668: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7672: LD_EXP 18
7676: PPUSH
7677: LD_STRING DG-quest-done-1
7679: PPUSH
7680: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7684: LD_EXP 16
7688: PPUSH
7689: LD_EXP 17
7693: PPUSH
7694: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7698: LD_EXP 16
7702: PPUSH
7703: LD_STRING DH-quest-done-2
7705: PPUSH
7706: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7710: LD_EXP 17
7714: PPUSH
7715: LD_STRING DO-quest-done-2
7717: PPUSH
7718: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7722: LD_EXP 17
7726: PPUSH
7727: LD_STRING DO-quest-done-3
7729: PPUSH
7730: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7734: LD_EXP 18
7738: PPUSH
7739: LD_INT 51
7741: PPUSH
7742: LD_INT 90
7744: PPUSH
7745: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7749: LD_EXP 18
7753: PPUSH
7754: LD_INT 50
7756: PPUSH
7757: LD_INT 89
7759: PPUSH
7760: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7764: LD_EXP 16
7768: PPUSH
7769: LD_EXP 18
7773: PPUSH
7774: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7778: LD_EXP 18
7782: PPUSH
7783: LD_STRING DG-quest-done-4
7785: PPUSH
7786: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7790: LD_EXP 18
7794: PPUSH
7795: LD_EXP 16
7799: PPUSH
7800: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7804: LD_EXP 16
7808: PPUSH
7809: CALL_OW 256
7813: PUSH
7814: LD_INT 1000
7816: LESS
7817: IFFALSE 7909
// begin Say ( Olaf , DO-heal-1 ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING DO-heal-1
7826: PPUSH
7827: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7831: LD_EXP 16
7835: PPUSH
7836: LD_INT 51
7838: PPUSH
7839: LD_INT 88
7841: PPUSH
7842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7846: LD_INT 35
7848: PPUSH
7849: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7853: LD_EXP 16
7857: PPUSH
7858: LD_EXP 17
7862: PPUSH
7863: CALL_OW 296
7867: PUSH
7868: LD_INT 4
7870: LESS
7871: PUSH
7872: LD_EXP 16
7876: PPUSH
7877: LD_INT 51
7879: PPUSH
7880: LD_INT 88
7882: PPUSH
7883: CALL_OW 307
7887: OR
7888: IFFALSE 7846
// SetLives ( Heike , 1000 ) ;
7890: LD_EXP 16
7894: PPUSH
7895: LD_INT 1000
7897: PPUSH
7898: CALL_OW 234
// wait ( 0 0$2 ) ;
7902: LD_INT 70
7904: PPUSH
7905: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7909: LD_EXP 16
7913: PPUSH
7914: LD_STRING DH-quest-done-4
7916: PPUSH
7917: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7921: LD_EXP 17
7925: PPUSH
7926: LD_STRING DO-quest-done-4
7928: PPUSH
7929: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7933: LD_EXP 16
7937: PPUSH
7938: LD_EXP 17
7942: PPUSH
7943: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7947: LD_EXP 16
7951: PPUSH
7952: LD_STRING DH-quest-done-5
7954: PPUSH
7955: CALL_OW 88
// InGameOff ;
7959: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7963: LD_STRING O6_end_cont
7965: PPUSH
7966: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7970: LD_EXP 18
7974: PPUSH
7975: LD_INT 2
7977: PPUSH
7978: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7982: LD_EXP 19
7986: PPUSH
7987: LD_INT 2
7989: PPUSH
7990: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7994: LD_INT 42
7996: PPUSH
7997: LD_INT 2
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8007: LD_EXP 17
8011: PPUSH
8012: LD_INT 53
8014: PPUSH
8015: LD_INT 89
8017: PPUSH
8018: CALL_OW 118
// lastObjectiveActive := true ;
8022: LD_ADDR_EXP 12
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8030: LD_INT 1
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL_OW 424
// PreparePrison ;
8040: CALL 1164 0 0
// end ;
8044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8045: LD_INT 22
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 91
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 4
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 69
8077: IFFALSE 8235
8079: GO 8081
8081: DISABLE
8082: LD_INT 0
8084: PPUSH
8085: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8086: LD_INT 245
8088: PUSH
8089: LD_INT 210
8091: PUSH
8092: LD_INT 210
8094: PUSH
8095: LD_INT 175
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_OWVAR 67
8108: ARRAY
8109: PPUSH
8110: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: EMPTY
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: ST_TO_ADDR
// if not tmp then
8155: LD_VAR 0 2
8159: NOT
8160: IFFALSE 8164
// exit ;
8162: GO 8235
// for i in tmp do
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: FOR_IN
8175: IFFALSE 8203
// begin ComExitBuilding ( i ) ;
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8186: LD_VAR 0 1
8190: PPUSH
8191: LD_INT 121
8193: PPUSH
8194: LD_INT 22
8196: PPUSH
8197: CALL_OW 174
// end ;
8201: GO 8174
8203: POP
8204: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8205: LD_EXP 23
8209: PPUSH
8210: LD_INT 121
8212: PPUSH
8213: LD_INT 22
8215: PPUSH
8216: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8220: LD_EXP 24
8224: PPUSH
8225: LD_INT 121
8227: PPUSH
8228: LD_INT 22
8230: PPUSH
8231: CALL_OW 114
// end ;
8235: PPOPN 2
8237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8238: LD_INT 22
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 91
8250: PUSH
8251: LD_INT 8
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PPUSH
8266: CALL_OW 69
8270: IFFALSE 8428
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8279: LD_INT 315
8281: PUSH
8282: LD_INT 280
8284: PUSH
8285: LD_INT 245
8287: PUSH
8288: LD_INT 210
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: PUSH
8297: LD_OWVAR 67
8301: ARRAY
8302: PPUSH
8303: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_INT 22
8314: PUSH
8315: LD_INT 3
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 25
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 54
8334: PUSH
8335: EMPTY
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// if not tmp then
8348: LD_VAR 0 2
8352: NOT
8353: IFFALSE 8357
// exit ;
8355: GO 8428
// for i in tmp do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: LD_VAR 0 2
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8396
// begin ComExitBuilding ( i ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_INT 142
8386: PPUSH
8387: LD_INT 71
8389: PPUSH
8390: CALL_OW 174
// end ;
8394: GO 8367
8396: POP
8397: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8398: LD_EXP 23
8402: PPUSH
8403: LD_INT 142
8405: PPUSH
8406: LD_INT 71
8408: PPUSH
8409: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8413: LD_EXP 24
8417: PPUSH
8418: LD_INT 142
8420: PPUSH
8421: LD_INT 71
8423: PPUSH
8424: CALL_OW 114
// end ;
8428: PPOPN 2
8430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8431: LD_INT 22
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 58
8453: PUSH
8454: EMPTY
8455: LIST
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 24
8462: PUSH
8463: LD_INT 1000
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 91
8476: PUSH
8477: LD_EXP 17
8481: PUSH
8482: LD_INT 8
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 69
8501: PUSH
8502: LD_EXP 17
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: IFFALSE 8626
8514: GO 8516
8516: DISABLE
// begin enable ;
8517: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8518: LD_EXP 17
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 58
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 1000
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 91
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_INT 8
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 69
8593: PUSH
8594: LD_INT 1
8596: ARRAY
8597: PPUSH
8598: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8602: LD_EXP 17
8606: PPUSH
8607: LD_INT 52
8609: PPUSH
8610: LD_INT 90
8612: PPUSH
8613: CALL_OW 171
// AddComHold ( Olaf ) ;
8617: LD_EXP 17
8621: PPUSH
8622: CALL_OW 200
// end ;
8626: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8627: LD_EXP 12
8631: PUSH
8632: LD_INT 2
8634: PPUSH
8635: CALL_OW 302
8639: NOT
8640: AND
8641: PUSH
8642: LD_OWVAR 67
8646: PUSH
8647: LD_INT 1
8649: EQUAL
8650: AND
8651: PUSH
8652: LD_EXP 13
8656: NOT
8657: AND
8658: IFFALSE 8675
8660: GO 8662
8662: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8663: LD_EXP 16
8667: PPUSH
8668: LD_STRING DH-prison-missing
8670: PPUSH
8671: CALL_OW 88
// end ;
8675: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8676: LD_EXP 12
8680: PUSH
8681: LD_INT 8
8683: PPUSH
8684: CALL_OW 302
8688: NOT
8689: AND
8690: PUSH
8691: LD_OWVAR 67
8695: PUSH
8696: LD_INT 1
8698: GREATER
8699: AND
8700: PUSH
8701: LD_EXP 13
8705: NOT
8706: AND
8707: IFFALSE 8724
8709: GO 8711
8711: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8712: LD_EXP 16
8716: PPUSH
8717: LD_STRING DH-prison-missing
8719: PPUSH
8720: CALL_OW 88
// end ;
8724: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8725: LD_EXP 12
8729: PUSH
8730: LD_INT 3
8732: PPUSH
8733: CALL_OW 302
8737: NOT
8738: AND
8739: PUSH
8740: LD_EXP 13
8744: NOT
8745: AND
8746: IFFALSE 8763
8748: GO 8750
8750: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8751: LD_EXP 16
8755: PPUSH
8756: LD_STRING DH-prison-missing-a
8758: PPUSH
8759: CALL_OW 88
// end ;
8763: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8764: LD_EXP 12
8768: PUSH
8769: LD_INT 10
8771: PPUSH
8772: CALL_OW 302
8776: NOT
8777: AND
8778: PUSH
8779: LD_EXP 13
8783: NOT
8784: AND
8785: IFFALSE 8802
8787: GO 8789
8789: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8790: LD_EXP 16
8794: PPUSH
8795: LD_STRING DH-prison-missing-a
8797: PPUSH
8798: CALL_OW 88
// end ;
8802: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8803: LD_EXP 13
8807: NOT
8808: PUSH
8809: LD_EXP 12
8813: AND
8814: PUSH
8815: LD_INT 2
8817: PPUSH
8818: LD_EXP 20
8822: PPUSH
8823: CALL_OW 292
8827: AND
8828: IFFALSE 8915
8830: GO 8832
8832: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8833: LD_EXP 20
8837: PPUSH
8838: LD_EXP 16
8842: PPUSH
8843: CALL_OW 119
// DialogueOn ;
8847: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8851: LD_EXP 20
8855: PPUSH
8856: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_STRING DK-prison-found
8867: PPUSH
8868: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8872: LD_EXP 16
8876: PPUSH
8877: LD_STRING DH-prison-found
8879: PPUSH
8880: CALL_OW 88
// DialogueOff ;
8884: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8888: LD_EXP 20
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: CALL_OW 235
// prisonFound := true ;
8900: LD_ADDR_EXP 13
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8908: LD_STRING O6_prison_out
8910: PPUSH
8911: CALL_OW 337
// end ;
8915: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8916: LD_EXP 16
8920: PPUSH
8921: CALL_OW 256
8925: PUSH
8926: LD_INT 500
8928: LESS
8929: IFFALSE 8942
8931: GO 8933
8933: DISABLE
// heikeHurt := true ;
8934: LD_ADDR_EXP 14
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
8942: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8943: LD_INT 22
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: IFFALSE 9287
8973: GO 8975
8975: DISABLE
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
8980: PPUSH
// begin uc_side := 3 ;
8981: LD_ADDR_OWVAR 20
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// uc_nation := 3 ;
8989: LD_ADDR_OWVAR 21
8993: PUSH
8994: LD_INT 3
8996: ST_TO_ADDR
// tmp := [ ] ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// for i := 1 to 5 do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_INT 5
9016: PUSH
9017: FOR_TO
9018: IFFALSE 9126
// begin PrepareHuman ( false , 1 , 4 ) ;
9020: LD_INT 0
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: LD_INT 4
9028: PPUSH
9029: CALL_OW 380
// un := CreateHuman ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: CALL_OW 44
9042: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9043: LD_VAR 0 3
9047: PPUSH
9048: LD_INT 4
9050: PPUSH
9051: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9055: LD_VAR 0 3
9059: PPUSH
9060: LD_INT 158
9062: PPUSH
9063: LD_INT 80
9065: PPUSH
9066: LD_INT 0
9068: PPUSH
9069: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9073: LD_VAR 0 3
9077: PPUSH
9078: LD_INT 147
9080: PPUSH
9081: LD_INT 75
9083: PPUSH
9084: CALL_OW 111
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 2
9109: PUSH
9110: LD_INT 1
9112: PLUS
9113: PPUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: CALL_OW 1
9123: ST_TO_ADDR
// end ;
9124: GO 9017
9126: POP
9127: POP
// repeat wait ( 0 0$1 ) ;
9128: LD_INT 35
9130: PPUSH
9131: CALL_OW 67
// for i in tmp do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: LD_VAR 0 2
9144: PUSH
9145: FOR_IN
9146: IFFALSE 9267
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9178: LD_VAR 0 3
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: CALL_OW 250
9191: PPUSH
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 1
9199: ARRAY
9200: PPUSH
9201: CALL_OW 251
9205: PPUSH
9206: CALL_OW 428
9210: IFFALSE 9251
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 1
9224: ARRAY
9225: PPUSH
9226: CALL_OW 250
9230: PPUSH
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 1
9238: ARRAY
9239: PPUSH
9240: CALL_OW 251
9244: PPUSH
9245: CALL_OW 114
9249: GO 9265
// ComAttackUnit ( i , Heike ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_EXP 16
9260: PPUSH
9261: CALL_OW 115
// end ;
9265: GO 9145
9267: POP
9268: POP
// until IsDead ( Heike ) or not tmp ;
9269: LD_EXP 16
9273: PPUSH
9274: CALL_OW 301
9278: PUSH
9279: LD_VAR 0 2
9283: NOT
9284: OR
9285: IFFALSE 9128
// end ;
9287: PPOPN 3
9289: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9290: LD_EXP 12
9294: PUSH
9295: LD_EXP 16
9299: PPUSH
9300: CALL_OW 302
9304: AND
9305: PUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 21
9311: PUSH
9312: LD_INT 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 22
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 50
9331: PUSH
9332: EMPTY
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: PPUSH
9340: CALL_OW 71
9344: PUSH
9345: LD_INT 0
9347: EQUAL
9348: AND
9349: IFFALSE 9748
9351: GO 9353
9353: DISABLE
9354: LD_INT 0
9356: PPUSH
// begin if not heikeHurt then
9357: LD_EXP 14
9361: NOT
9362: IFFALSE 9371
// SetAchievement ( ACH_INVINCIBLE ) ;
9364: LD_STRING ACH_INVINCIBLE
9366: PPUSH
9367: CALL_OW 543
// if tick <= 6 6$00 then
9371: LD_OWVAR 1
9375: PUSH
9376: LD_INT 12600
9378: LESSEQUAL
9379: IFFALSE 9388
// SetAchievement ( ACH_HSPEED_1 ) ;
9381: LD_STRING ACH_HSPEED_1
9383: PPUSH
9384: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9388: LD_STRING enableBioCharacter(BIO_GIVI)
9390: PPUSH
9391: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9395: LD_STRING enableBioCharacter(BIO_MIKE)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9402: LD_STRING enableBioCharacter(BIO_OLAF)
9404: PPUSH
9405: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 1
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 50
9436: PUSH
9437: EMPTY
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: PPUSH
9445: CALL_OW 69
9449: ST_TO_ADDR
// if Kamil in tmp then
9450: LD_EXP 20
9454: PUSH
9455: LD_VAR 0 1
9459: IN
9460: IFFALSE 9469
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9462: LD_STRING enableBioCharacter(BIO_KAMI)
9464: PPUSH
9465: CALL_OW 559
// if prisonFound then
9469: LD_EXP 13
9473: IFFALSE 9487
// AddMedal ( med1 , 1 ) else
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 101
9485: GO 9498
// AddMedal ( med1 , - 1 ) ;
9487: LD_STRING med1
9489: PPUSH
9490: LD_INT 1
9492: NEG
9493: PPUSH
9494: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9498: LD_VAR 0 1
9502: PUSH
9503: LD_INT 3
9505: LESS
9506: PUSH
9507: LD_EXP 13
9511: NOT
9512: AND
9513: PUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 4
9521: LESS
9522: PUSH
9523: LD_EXP 13
9527: AND
9528: OR
9529: IFFALSE 9544
// AddMedal ( med2 , - 1 ) else
9531: LD_STRING med2
9533: PPUSH
9534: LD_INT 1
9536: NEG
9537: PPUSH
9538: CALL_OW 101
9542: GO 9554
// AddMedal ( med2 , 1 ) ;
9544: LD_STRING med2
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9554: LD_EXP 13
9558: PUSH
9559: LD_EXP 4
9563: AND
9564: PUSH
9565: LD_VAR 0 1
9569: PUSH
9570: LD_INT 4
9572: GREATEREQUAL
9573: AND
9574: IFFALSE 9588
// AddMedal ( med3 , 1 ) else
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 101
9586: GO 9599
// AddMedal ( med3 , - 1 ) ;
9588: LD_STRING med3
9590: PPUSH
9591: LD_INT 1
9593: NEG
9594: PPUSH
9595: CALL_OW 101
// GiveMedals ( MAIN ) ;
9599: LD_STRING MAIN
9601: PPUSH
9602: CALL_OW 102
// RewardPeople ( tmp ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9615: LD_EXP 4
9619: PPUSH
9620: LD_STRING 01_JohnnySaved
9622: PPUSH
9623: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9627: LD_EXP 16
9631: PPUSH
9632: LD_STRING 01_Heike
9634: PPUSH
9635: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9639: LD_EXP 18
9643: PPUSH
9644: CALL_OW 302
9648: PUSH
9649: LD_EXP 18
9653: PUSH
9654: LD_VAR 0 1
9658: IN
9659: AND
9660: IFFALSE 9674
// SaveCharacters ( Givi , 01_Givi ) ;
9662: LD_EXP 18
9666: PPUSH
9667: LD_STRING 01_Givi
9669: PPUSH
9670: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9674: LD_EXP 19
9678: PPUSH
9679: CALL_OW 302
9683: PUSH
9684: LD_EXP 19
9688: PUSH
9689: LD_VAR 0 1
9693: IN
9694: AND
9695: IFFALSE 9709
// SaveCharacters ( Mike , 01_Mike ) ;
9697: LD_EXP 19
9701: PPUSH
9702: LD_STRING 01_Mike
9704: PPUSH
9705: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9709: LD_EXP 20
9713: PPUSH
9714: CALL_OW 302
9718: PUSH
9719: LD_EXP 20
9723: PUSH
9724: LD_VAR 0 1
9728: IN
9729: AND
9730: IFFALSE 9744
// SaveCharacters ( Kamil , 01_Kamil ) ;
9732: LD_EXP 20
9736: PPUSH
9737: LD_STRING 01_Kamil
9739: PPUSH
9740: CALL_OW 38
// YouWin ;
9744: CALL_OW 103
// end ; end_of_file
9748: PPOPN 1
9750: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9751: LD_VAR 0 1
9755: PUSH
9756: LD_EXP 16
9760: EQUAL
9761: IFFALSE 9770
// YouLost ( Heike ) ;
9763: LD_STRING Heike
9765: PPUSH
9766: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9770: LD_VAR 0 1
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 3
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 25
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: IN
9804: IFFALSE 9910
// begin if un in russianPatrol then
9806: LD_VAR 0 1
9810: PUSH
9811: LD_EXP 21
9815: IN
9816: IFFALSE 9834
// russianPatrol := russianPatrol diff un ;
9818: LD_ADDR_EXP 21
9822: PUSH
9823: LD_EXP 21
9827: PUSH
9828: LD_VAR 0 1
9832: DIFF
9833: ST_TO_ADDR
// if un in russianForestPatrol then
9834: LD_VAR 0 1
9838: PUSH
9839: LD_EXP 22
9843: IN
9844: IFFALSE 9862
// russianForestPatrol := russianForestPatrol diff un ;
9846: LD_ADDR_EXP 22
9850: PUSH
9851: LD_EXP 22
9855: PUSH
9856: LD_VAR 0 1
9860: DIFF
9861: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9862: LD_ADDR_EXP 5
9866: PUSH
9867: LD_EXP 5
9871: PPUSH
9872: LD_EXP 5
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: CALL_OW 250
9890: PUSH
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 251
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 1
9909: ST_TO_ADDR
// end ; end ;
9910: PPOPN 1
9912: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9913: LD_VAR 0 1
9917: PUSH
9918: LD_EXP 16
9922: EQUAL
9923: IFFALSE 9932
// YouLost ( Heike ) ;
9925: LD_STRING Heike
9927: PPUSH
9928: CALL_OW 104
// if un = Olaf then
9932: LD_VAR 0 1
9936: PUSH
9937: LD_EXP 17
9941: EQUAL
9942: IFFALSE 9951
// YouLost ( Olaf ) ;
9944: LD_STRING Olaf
9946: PPUSH
9947: CALL_OW 104
// end ;
9951: PPOPN 1
9953: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_INT 2
9961: EQUAL
9962: PUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_INT 5
9970: EQUAL
9971: AND
9972: IFFALSE 9981
// YouLost ( FriendlyFire ) ;
9974: LD_STRING FriendlyFire
9976: PPUSH
9977: CALL_OW 104
// end ; end_of_file
9981: PPOPN 2
9983: END
// export globalGameSaveCounter ; every 0 0$1 do
9984: GO 9986
9986: DISABLE
// begin enable ;
9987: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9988: LD_STRING updateTimer(
9990: PUSH
9991: LD_OWVAR 1
9995: STR
9996: PUSH
9997: LD_STRING );
9999: STR
10000: PPUSH
10001: CALL_OW 559
// end ;
10005: END
// every 0 0$1 do
10006: GO 10008
10008: DISABLE
// begin globalGameSaveCounter := 0 ;
10009: LD_ADDR_EXP 26
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10017: LD_STRING setGameSaveCounter(0)
10019: PPUSH
10020: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10024: LD_STRING initStreamRollete();
10026: PPUSH
10027: CALL_OW 559
// InitStreamMode ;
10031: CALL 11357 0 0
// DefineStreamItems ( false ) ;
10035: LD_INT 0
10037: PPUSH
10038: CALL 11821 0 1
// end ;
10042: END
// export function SOS_MapStart ( ) ; begin
10043: LD_INT 0
10045: PPUSH
// if streamModeActive then
10046: LD_EXP 27
10050: IFFALSE 10059
// DefineStreamItems ( true ) ;
10052: LD_INT 1
10054: PPUSH
10055: CALL 11821 0 1
// UpdateLuaVariables ( ) ;
10059: CALL 10076 0 0
// UpdateFactoryWaypoints ( ) ;
10063: CALL 24682 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10067: CALL 24939 0 0
// end ;
10071: LD_VAR 0 1
10075: RET
// function UpdateLuaVariables ( ) ; begin
10076: LD_INT 0
10078: PPUSH
// if globalGameSaveCounter then
10079: LD_EXP 26
10083: IFFALSE 10117
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10085: LD_ADDR_EXP 26
10089: PUSH
10090: LD_EXP 26
10094: PPUSH
10095: CALL 68896 0 1
10099: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10100: LD_STRING setGameSaveCounter(
10102: PUSH
10103: LD_EXP 26
10107: STR
10108: PUSH
10109: LD_STRING )
10111: STR
10112: PPUSH
10113: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10117: LD_STRING setGameDifficulty(
10119: PUSH
10120: LD_OWVAR 67
10124: STR
10125: PUSH
10126: LD_STRING )
10128: STR
10129: PPUSH
10130: CALL_OW 559
// end ;
10134: LD_VAR 0 1
10138: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10139: LD_INT 0
10141: PPUSH
// if p2 = stream_mode then
10142: LD_VAR 0 2
10146: PUSH
10147: LD_INT 100
10149: EQUAL
10150: IFFALSE 11153
// begin if not StreamModeActive then
10152: LD_EXP 27
10156: NOT
10157: IFFALSE 10167
// StreamModeActive := true ;
10159: LD_ADDR_EXP 27
10163: PUSH
10164: LD_INT 1
10166: ST_TO_ADDR
// if p3 = 0 then
10167: LD_VAR 0 3
10171: PUSH
10172: LD_INT 0
10174: EQUAL
10175: IFFALSE 10181
// InitStreamMode ;
10177: CALL 11357 0 0
// if p3 = 1 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 1
10188: EQUAL
10189: IFFALSE 10199
// sRocket := true ;
10191: LD_ADDR_EXP 32
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 2 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 2
10206: EQUAL
10207: IFFALSE 10217
// sSpeed := true ;
10209: LD_ADDR_EXP 31
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 3 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 3
10224: EQUAL
10225: IFFALSE 10235
// sEngine := true ;
10227: LD_ADDR_EXP 33
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 4 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 4
10242: EQUAL
10243: IFFALSE 10253
// sSpec := true ;
10245: LD_ADDR_EXP 30
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 5 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 5
10260: EQUAL
10261: IFFALSE 10271
// sLevel := true ;
10263: LD_ADDR_EXP 34
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 6 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 6
10278: EQUAL
10279: IFFALSE 10289
// sArmoury := true ;
10281: LD_ADDR_EXP 35
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 7 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 7
10296: EQUAL
10297: IFFALSE 10307
// sRadar := true ;
10299: LD_ADDR_EXP 36
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 8 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 8
10314: EQUAL
10315: IFFALSE 10325
// sBunker := true ;
10317: LD_ADDR_EXP 37
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 9 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 9
10332: EQUAL
10333: IFFALSE 10343
// sHack := true ;
10335: LD_ADDR_EXP 38
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 10 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 10
10350: EQUAL
10351: IFFALSE 10361
// sFire := true ;
10353: LD_ADDR_EXP 39
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 11 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 11
10368: EQUAL
10369: IFFALSE 10379
// sRefresh := true ;
10371: LD_ADDR_EXP 40
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 12 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 12
10386: EQUAL
10387: IFFALSE 10397
// sExp := true ;
10389: LD_ADDR_EXP 41
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 13 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 13
10404: EQUAL
10405: IFFALSE 10415
// sDepot := true ;
10407: LD_ADDR_EXP 42
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 14 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 14
10422: EQUAL
10423: IFFALSE 10433
// sFlag := true ;
10425: LD_ADDR_EXP 43
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 15 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 15
10440: EQUAL
10441: IFFALSE 10451
// sKamikadze := true ;
10443: LD_ADDR_EXP 51
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 16 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 16
10458: EQUAL
10459: IFFALSE 10469
// sTroll := true ;
10461: LD_ADDR_EXP 52
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 17 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 17
10476: EQUAL
10477: IFFALSE 10487
// sSlow := true ;
10479: LD_ADDR_EXP 53
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 18 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 18
10494: EQUAL
10495: IFFALSE 10505
// sLack := true ;
10497: LD_ADDR_EXP 54
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 19 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 19
10512: EQUAL
10513: IFFALSE 10523
// sTank := true ;
10515: LD_ADDR_EXP 56
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 20 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 20
10530: EQUAL
10531: IFFALSE 10541
// sRemote := true ;
10533: LD_ADDR_EXP 57
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 21 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 21
10548: EQUAL
10549: IFFALSE 10559
// sPowell := true ;
10551: LD_ADDR_EXP 58
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 22 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 22
10566: EQUAL
10567: IFFALSE 10577
// sTeleport := true ;
10569: LD_ADDR_EXP 61
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 23 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 23
10584: EQUAL
10585: IFFALSE 10595
// sOilTower := true ;
10587: LD_ADDR_EXP 63
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 24 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 24
10602: EQUAL
10603: IFFALSE 10613
// sShovel := true ;
10605: LD_ADDR_EXP 64
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 25 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 25
10620: EQUAL
10621: IFFALSE 10631
// sSheik := true ;
10623: LD_ADDR_EXP 65
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 26 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 26
10638: EQUAL
10639: IFFALSE 10649
// sEarthquake := true ;
10641: LD_ADDR_EXP 67
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 27 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 27
10656: EQUAL
10657: IFFALSE 10667
// sAI := true ;
10659: LD_ADDR_EXP 68
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 28 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 28
10674: EQUAL
10675: IFFALSE 10685
// sCargo := true ;
10677: LD_ADDR_EXP 71
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 29 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 29
10692: EQUAL
10693: IFFALSE 10703
// sDLaser := true ;
10695: LD_ADDR_EXP 72
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 30 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 30
10710: EQUAL
10711: IFFALSE 10721
// sExchange := true ;
10713: LD_ADDR_EXP 73
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 31 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 31
10728: EQUAL
10729: IFFALSE 10739
// sFac := true ;
10731: LD_ADDR_EXP 74
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 32 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 32
10746: EQUAL
10747: IFFALSE 10757
// sPower := true ;
10749: LD_ADDR_EXP 75
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 33 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 33
10764: EQUAL
10765: IFFALSE 10775
// sRandom := true ;
10767: LD_ADDR_EXP 76
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 34 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 34
10782: EQUAL
10783: IFFALSE 10793
// sShield := true ;
10785: LD_ADDR_EXP 77
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 35 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 35
10800: EQUAL
10801: IFFALSE 10811
// sTime := true ;
10803: LD_ADDR_EXP 78
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 36 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 36
10818: EQUAL
10819: IFFALSE 10829
// sTools := true ;
10821: LD_ADDR_EXP 79
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 101 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 101
10836: EQUAL
10837: IFFALSE 10847
// sSold := true ;
10839: LD_ADDR_EXP 44
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 102 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 102
10854: EQUAL
10855: IFFALSE 10865
// sDiff := true ;
10857: LD_ADDR_EXP 45
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 103 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 103
10872: EQUAL
10873: IFFALSE 10883
// sFog := true ;
10875: LD_ADDR_EXP 48
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// if p3 = 104 then
10883: LD_VAR 0 3
10887: PUSH
10888: LD_INT 104
10890: EQUAL
10891: IFFALSE 10901
// sReset := true ;
10893: LD_ADDR_EXP 49
10897: PUSH
10898: LD_INT 1
10900: ST_TO_ADDR
// if p3 = 105 then
10901: LD_VAR 0 3
10905: PUSH
10906: LD_INT 105
10908: EQUAL
10909: IFFALSE 10919
// sSun := true ;
10911: LD_ADDR_EXP 50
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if p3 = 106 then
10919: LD_VAR 0 3
10923: PUSH
10924: LD_INT 106
10926: EQUAL
10927: IFFALSE 10937
// sTiger := true ;
10929: LD_ADDR_EXP 46
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// if p3 = 107 then
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 107
10944: EQUAL
10945: IFFALSE 10955
// sBomb := true ;
10947: LD_ADDR_EXP 47
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if p3 = 108 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 108
10962: EQUAL
10963: IFFALSE 10973
// sWound := true ;
10965: LD_ADDR_EXP 55
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if p3 = 109 then
10973: LD_VAR 0 3
10977: PUSH
10978: LD_INT 109
10980: EQUAL
10981: IFFALSE 10991
// sBetray := true ;
10983: LD_ADDR_EXP 59
10987: PUSH
10988: LD_INT 1
10990: ST_TO_ADDR
// if p3 = 110 then
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 110
10998: EQUAL
10999: IFFALSE 11009
// sContamin := true ;
11001: LD_ADDR_EXP 60
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// if p3 = 111 then
11009: LD_VAR 0 3
11013: PUSH
11014: LD_INT 111
11016: EQUAL
11017: IFFALSE 11027
// sOil := true ;
11019: LD_ADDR_EXP 62
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// if p3 = 112 then
11027: LD_VAR 0 3
11031: PUSH
11032: LD_INT 112
11034: EQUAL
11035: IFFALSE 11045
// sStu := true ;
11037: LD_ADDR_EXP 66
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// if p3 = 113 then
11045: LD_VAR 0 3
11049: PUSH
11050: LD_INT 113
11052: EQUAL
11053: IFFALSE 11063
// sBazooka := true ;
11055: LD_ADDR_EXP 69
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if p3 = 114 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 114
11070: EQUAL
11071: IFFALSE 11081
// sMortar := true ;
11073: LD_ADDR_EXP 70
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// if p3 = 115 then
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 115
11088: EQUAL
11089: IFFALSE 11099
// sRanger := true ;
11091: LD_ADDR_EXP 80
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// if p3 = 116 then
11099: LD_VAR 0 3
11103: PUSH
11104: LD_INT 116
11106: EQUAL
11107: IFFALSE 11117
// sComputer := true ;
11109: LD_ADDR_EXP 81
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// if p3 = 117 then
11117: LD_VAR 0 3
11121: PUSH
11122: LD_INT 117
11124: EQUAL
11125: IFFALSE 11135
// s30 := true ;
11127: LD_ADDR_EXP 82
11131: PUSH
11132: LD_INT 1
11134: ST_TO_ADDR
// if p3 = 118 then
11135: LD_VAR 0 3
11139: PUSH
11140: LD_INT 118
11142: EQUAL
11143: IFFALSE 11153
// s60 := true ;
11145: LD_ADDR_EXP 83
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// end ; if p2 = hack_mode then
11153: LD_VAR 0 2
11157: PUSH
11158: LD_INT 101
11160: EQUAL
11161: IFFALSE 11289
// begin case p3 of 1 :
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 1
11170: DOUBLE
11171: EQUAL
11172: IFTRUE 11176
11174: GO 11183
11176: POP
// hHackUnlimitedResources ; 2 :
11177: CALL 23428 0 0
11181: GO 11289
11183: LD_INT 2
11185: DOUBLE
11186: EQUAL
11187: IFTRUE 11191
11189: GO 11198
11191: POP
// hHackSetLevel10 ; 3 :
11192: CALL 23561 0 0
11196: GO 11289
11198: LD_INT 3
11200: DOUBLE
11201: EQUAL
11202: IFTRUE 11206
11204: GO 11213
11206: POP
// hHackSetLevel10YourUnits ; 4 :
11207: CALL 23646 0 0
11211: GO 11289
11213: LD_INT 4
11215: DOUBLE
11216: EQUAL
11217: IFTRUE 11221
11219: GO 11228
11221: POP
// hHackInvincible ; 5 :
11222: CALL 24094 0 0
11226: GO 11289
11228: LD_INT 5
11230: DOUBLE
11231: EQUAL
11232: IFTRUE 11236
11234: GO 11243
11236: POP
// hHackInvisible ; 6 :
11237: CALL 24205 0 0
11241: GO 11289
11243: LD_INT 6
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11258
11251: POP
// hHackChangeYourSide ; 7 :
11252: CALL 24262 0 0
11256: GO 11289
11258: LD_INT 7
11260: DOUBLE
11261: EQUAL
11262: IFTRUE 11266
11264: GO 11273
11266: POP
// hHackChangeUnitSide ; 8 :
11267: CALL 24304 0 0
11271: GO 11289
11273: LD_INT 8
11275: DOUBLE
11276: EQUAL
11277: IFTRUE 11281
11279: GO 11288
11281: POP
// hHackFog ; end ;
11282: CALL 24405 0 0
11286: GO 11289
11288: POP
// end ; if p2 = game_save_mode then
11289: LD_VAR 0 2
11293: PUSH
11294: LD_INT 102
11296: EQUAL
11297: IFFALSE 11352
// begin if p3 = 1 then
11299: LD_VAR 0 3
11303: PUSH
11304: LD_INT 1
11306: EQUAL
11307: IFFALSE 11319
// globalGameSaveCounter := p4 ;
11309: LD_ADDR_EXP 26
11313: PUSH
11314: LD_VAR 0 4
11318: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 2
11326: EQUAL
11327: PUSH
11328: LD_EXP 26
11332: AND
11333: IFFALSE 11352
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11335: LD_STRING setGameSaveCounter(
11337: PUSH
11338: LD_EXP 26
11342: STR
11343: PUSH
11344: LD_STRING )
11346: STR
11347: PPUSH
11348: CALL_OW 559
// end ; end ;
11352: LD_VAR 0 7
11356: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11357: LD_INT 0
11359: PPUSH
// streamModeActive := false ;
11360: LD_ADDR_EXP 27
11364: PUSH
11365: LD_INT 0
11367: ST_TO_ADDR
// normalCounter := 36 ;
11368: LD_ADDR_EXP 28
11372: PUSH
11373: LD_INT 36
11375: ST_TO_ADDR
// hardcoreCounter := 18 ;
11376: LD_ADDR_EXP 29
11380: PUSH
11381: LD_INT 18
11383: ST_TO_ADDR
// sRocket := false ;
11384: LD_ADDR_EXP 32
11388: PUSH
11389: LD_INT 0
11391: ST_TO_ADDR
// sSpeed := false ;
11392: LD_ADDR_EXP 31
11396: PUSH
11397: LD_INT 0
11399: ST_TO_ADDR
// sEngine := false ;
11400: LD_ADDR_EXP 33
11404: PUSH
11405: LD_INT 0
11407: ST_TO_ADDR
// sSpec := false ;
11408: LD_ADDR_EXP 30
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// sLevel := false ;
11416: LD_ADDR_EXP 34
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// sArmoury := false ;
11424: LD_ADDR_EXP 35
11428: PUSH
11429: LD_INT 0
11431: ST_TO_ADDR
// sRadar := false ;
11432: LD_ADDR_EXP 36
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// sBunker := false ;
11440: LD_ADDR_EXP 37
11444: PUSH
11445: LD_INT 0
11447: ST_TO_ADDR
// sHack := false ;
11448: LD_ADDR_EXP 38
11452: PUSH
11453: LD_INT 0
11455: ST_TO_ADDR
// sFire := false ;
11456: LD_ADDR_EXP 39
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// sRefresh := false ;
11464: LD_ADDR_EXP 40
11468: PUSH
11469: LD_INT 0
11471: ST_TO_ADDR
// sExp := false ;
11472: LD_ADDR_EXP 41
11476: PUSH
11477: LD_INT 0
11479: ST_TO_ADDR
// sDepot := false ;
11480: LD_ADDR_EXP 42
11484: PUSH
11485: LD_INT 0
11487: ST_TO_ADDR
// sFlag := false ;
11488: LD_ADDR_EXP 43
11492: PUSH
11493: LD_INT 0
11495: ST_TO_ADDR
// sKamikadze := false ;
11496: LD_ADDR_EXP 51
11500: PUSH
11501: LD_INT 0
11503: ST_TO_ADDR
// sTroll := false ;
11504: LD_ADDR_EXP 52
11508: PUSH
11509: LD_INT 0
11511: ST_TO_ADDR
// sSlow := false ;
11512: LD_ADDR_EXP 53
11516: PUSH
11517: LD_INT 0
11519: ST_TO_ADDR
// sLack := false ;
11520: LD_ADDR_EXP 54
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// sTank := false ;
11528: LD_ADDR_EXP 56
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// sRemote := false ;
11536: LD_ADDR_EXP 57
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// sPowell := false ;
11544: LD_ADDR_EXP 58
11548: PUSH
11549: LD_INT 0
11551: ST_TO_ADDR
// sTeleport := false ;
11552: LD_ADDR_EXP 61
11556: PUSH
11557: LD_INT 0
11559: ST_TO_ADDR
// sOilTower := false ;
11560: LD_ADDR_EXP 63
11564: PUSH
11565: LD_INT 0
11567: ST_TO_ADDR
// sShovel := false ;
11568: LD_ADDR_EXP 64
11572: PUSH
11573: LD_INT 0
11575: ST_TO_ADDR
// sSheik := false ;
11576: LD_ADDR_EXP 65
11580: PUSH
11581: LD_INT 0
11583: ST_TO_ADDR
// sEarthquake := false ;
11584: LD_ADDR_EXP 67
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// sAI := false ;
11592: LD_ADDR_EXP 68
11596: PUSH
11597: LD_INT 0
11599: ST_TO_ADDR
// sCargo := false ;
11600: LD_ADDR_EXP 71
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// sDLaser := false ;
11608: LD_ADDR_EXP 72
11612: PUSH
11613: LD_INT 0
11615: ST_TO_ADDR
// sExchange := false ;
11616: LD_ADDR_EXP 73
11620: PUSH
11621: LD_INT 0
11623: ST_TO_ADDR
// sFac := false ;
11624: LD_ADDR_EXP 74
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// sPower := false ;
11632: LD_ADDR_EXP 75
11636: PUSH
11637: LD_INT 0
11639: ST_TO_ADDR
// sRandom := false ;
11640: LD_ADDR_EXP 76
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// sShield := false ;
11648: LD_ADDR_EXP 77
11652: PUSH
11653: LD_INT 0
11655: ST_TO_ADDR
// sTime := false ;
11656: LD_ADDR_EXP 78
11660: PUSH
11661: LD_INT 0
11663: ST_TO_ADDR
// sTools := false ;
11664: LD_ADDR_EXP 79
11668: PUSH
11669: LD_INT 0
11671: ST_TO_ADDR
// sSold := false ;
11672: LD_ADDR_EXP 44
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// sDiff := false ;
11680: LD_ADDR_EXP 45
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// sFog := false ;
11688: LD_ADDR_EXP 48
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// sReset := false ;
11696: LD_ADDR_EXP 49
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// sSun := false ;
11704: LD_ADDR_EXP 50
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// sTiger := false ;
11712: LD_ADDR_EXP 46
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// sBomb := false ;
11720: LD_ADDR_EXP 47
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sWound := false ;
11728: LD_ADDR_EXP 55
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// sBetray := false ;
11736: LD_ADDR_EXP 59
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// sContamin := false ;
11744: LD_ADDR_EXP 60
11748: PUSH
11749: LD_INT 0
11751: ST_TO_ADDR
// sOil := false ;
11752: LD_ADDR_EXP 62
11756: PUSH
11757: LD_INT 0
11759: ST_TO_ADDR
// sStu := false ;
11760: LD_ADDR_EXP 66
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// sBazooka := false ;
11768: LD_ADDR_EXP 69
11772: PUSH
11773: LD_INT 0
11775: ST_TO_ADDR
// sMortar := false ;
11776: LD_ADDR_EXP 70
11780: PUSH
11781: LD_INT 0
11783: ST_TO_ADDR
// sRanger := false ;
11784: LD_ADDR_EXP 80
11788: PUSH
11789: LD_INT 0
11791: ST_TO_ADDR
// sComputer := false ;
11792: LD_ADDR_EXP 81
11796: PUSH
11797: LD_INT 0
11799: ST_TO_ADDR
// s30 := false ;
11800: LD_ADDR_EXP 82
11804: PUSH
11805: LD_INT 0
11807: ST_TO_ADDR
// s60 := false ;
11808: LD_ADDR_EXP 83
11812: PUSH
11813: LD_INT 0
11815: ST_TO_ADDR
// end ;
11816: LD_VAR 0 1
11820: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
// result := [ ] ;
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: EMPTY
11836: ST_TO_ADDR
// if campaign_id = 1 then
11837: LD_OWVAR 69
11841: PUSH
11842: LD_INT 1
11844: EQUAL
11845: IFFALSE 15011
// begin case mission_number of 1 :
11847: LD_OWVAR 70
11851: PUSH
11852: LD_INT 1
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11936
11860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 11
11874: PUSH
11875: LD_INT 12
11877: PUSH
11878: LD_INT 15
11880: PUSH
11881: LD_INT 16
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 23
11889: PUSH
11890: LD_INT 26
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 106
11912: PUSH
11913: LD_INT 116
11915: PUSH
11916: LD_INT 117
11918: PUSH
11919: LD_INT 118
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: ST_TO_ADDR
11934: GO 15009
11936: LD_INT 2
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12028
11944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: LD_INT 11
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 16
11967: PUSH
11968: LD_INT 22
11970: PUSH
11971: LD_INT 23
11973: PUSH
11974: LD_INT 26
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 101
11990: PUSH
11991: LD_INT 102
11993: PUSH
11994: LD_INT 105
11996: PUSH
11997: LD_INT 106
11999: PUSH
12000: LD_INT 108
12002: PUSH
12003: LD_INT 116
12005: PUSH
12006: LD_INT 117
12008: PUSH
12009: LD_INT 118
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: ST_TO_ADDR
12026: GO 15009
12028: LD_INT 3
12030: DOUBLE
12031: EQUAL
12032: IFTRUE 12036
12034: GO 12124
12036: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 4
12047: PUSH
12048: LD_INT 5
12050: PUSH
12051: LD_INT 11
12053: PUSH
12054: LD_INT 12
12056: PUSH
12057: LD_INT 15
12059: PUSH
12060: LD_INT 16
12062: PUSH
12063: LD_INT 22
12065: PUSH
12066: LD_INT 26
12068: PUSH
12069: LD_INT 36
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 101
12086: PUSH
12087: LD_INT 102
12089: PUSH
12090: LD_INT 105
12092: PUSH
12093: LD_INT 106
12095: PUSH
12096: LD_INT 108
12098: PUSH
12099: LD_INT 116
12101: PUSH
12102: LD_INT 117
12104: PUSH
12105: LD_INT 118
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: ST_TO_ADDR
12122: GO 15009
12124: LD_INT 4
12126: DOUBLE
12127: EQUAL
12128: IFTRUE 12132
12130: GO 12228
12132: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: LD_INT 5
12146: PUSH
12147: LD_INT 8
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 15
12158: PUSH
12159: LD_INT 16
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: LD_INT 36
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 101
12190: PUSH
12191: LD_INT 102
12193: PUSH
12194: LD_INT 105
12196: PUSH
12197: LD_INT 106
12199: PUSH
12200: LD_INT 108
12202: PUSH
12203: LD_INT 116
12205: PUSH
12206: LD_INT 117
12208: PUSH
12209: LD_INT 118
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: ST_TO_ADDR
12226: GO 15009
12228: LD_INT 5
12230: DOUBLE
12231: EQUAL
12232: IFTRUE 12236
12234: GO 12348
12236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 4
12247: PUSH
12248: LD_INT 5
12250: PUSH
12251: LD_INT 6
12253: PUSH
12254: LD_INT 8
12256: PUSH
12257: LD_INT 11
12259: PUSH
12260: LD_INT 12
12262: PUSH
12263: LD_INT 15
12265: PUSH
12266: LD_INT 16
12268: PUSH
12269: LD_INT 22
12271: PUSH
12272: LD_INT 23
12274: PUSH
12275: LD_INT 25
12277: PUSH
12278: LD_INT 26
12280: PUSH
12281: LD_INT 36
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 101
12302: PUSH
12303: LD_INT 102
12305: PUSH
12306: LD_INT 105
12308: PUSH
12309: LD_INT 106
12311: PUSH
12312: LD_INT 108
12314: PUSH
12315: LD_INT 109
12317: PUSH
12318: LD_INT 112
12320: PUSH
12321: LD_INT 116
12323: PUSH
12324: LD_INT 117
12326: PUSH
12327: LD_INT 118
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
12346: GO 15009
12348: LD_INT 6
12350: DOUBLE
12351: EQUAL
12352: IFTRUE 12356
12354: GO 12488
12356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12357: LD_ADDR_VAR 0 2
12361: PUSH
12362: LD_INT 2
12364: PUSH
12365: LD_INT 4
12367: PUSH
12368: LD_INT 5
12370: PUSH
12371: LD_INT 6
12373: PUSH
12374: LD_INT 8
12376: PUSH
12377: LD_INT 11
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: LD_INT 15
12385: PUSH
12386: LD_INT 16
12388: PUSH
12389: LD_INT 20
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: LD_INT 36
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 101
12442: PUSH
12443: LD_INT 102
12445: PUSH
12446: LD_INT 105
12448: PUSH
12449: LD_INT 106
12451: PUSH
12452: LD_INT 108
12454: PUSH
12455: LD_INT 109
12457: PUSH
12458: LD_INT 112
12460: PUSH
12461: LD_INT 116
12463: PUSH
12464: LD_INT 117
12466: PUSH
12467: LD_INT 118
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: ST_TO_ADDR
12486: GO 15009
12488: LD_INT 7
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12608
12496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_INT 2
12504: PUSH
12505: LD_INT 4
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: LD_INT 7
12513: PUSH
12514: LD_INT 11
12516: PUSH
12517: LD_INT 12
12519: PUSH
12520: LD_INT 15
12522: PUSH
12523: LD_INT 16
12525: PUSH
12526: LD_INT 20
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 26
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 105
12571: PUSH
12572: LD_INT 106
12574: PUSH
12575: LD_INT 108
12577: PUSH
12578: LD_INT 112
12580: PUSH
12581: LD_INT 116
12583: PUSH
12584: LD_INT 117
12586: PUSH
12587: LD_INT 118
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: ST_TO_ADDR
12606: GO 15009
12608: LD_INT 8
12610: DOUBLE
12611: EQUAL
12612: IFTRUE 12616
12614: GO 12756
12616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: LD_INT 6
12633: PUSH
12634: LD_INT 7
12636: PUSH
12637: LD_INT 8
12639: PUSH
12640: LD_INT 11
12642: PUSH
12643: LD_INT 12
12645: PUSH
12646: LD_INT 15
12648: PUSH
12649: LD_INT 16
12651: PUSH
12652: LD_INT 20
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 23
12663: PUSH
12664: LD_INT 25
12666: PUSH
12667: LD_INT 26
12669: PUSH
12670: LD_INT 30
12672: PUSH
12673: LD_INT 31
12675: PUSH
12676: LD_INT 32
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 101
12706: PUSH
12707: LD_INT 102
12709: PUSH
12710: LD_INT 103
12712: PUSH
12713: LD_INT 105
12715: PUSH
12716: LD_INT 106
12718: PUSH
12719: LD_INT 108
12721: PUSH
12722: LD_INT 109
12724: PUSH
12725: LD_INT 112
12727: PUSH
12728: LD_INT 116
12730: PUSH
12731: LD_INT 117
12733: PUSH
12734: LD_INT 118
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: ST_TO_ADDR
12754: GO 15009
12756: LD_INT 9
12758: DOUBLE
12759: EQUAL
12760: IFTRUE 12764
12762: GO 12912
12764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12765: LD_ADDR_VAR 0 2
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: LD_INT 4
12775: PUSH
12776: LD_INT 5
12778: PUSH
12779: LD_INT 6
12781: PUSH
12782: LD_INT 7
12784: PUSH
12785: LD_INT 8
12787: PUSH
12788: LD_INT 11
12790: PUSH
12791: LD_INT 12
12793: PUSH
12794: LD_INT 15
12796: PUSH
12797: LD_INT 16
12799: PUSH
12800: LD_INT 20
12802: PUSH
12803: LD_INT 21
12805: PUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 23
12811: PUSH
12812: LD_INT 25
12814: PUSH
12815: LD_INT 26
12817: PUSH
12818: LD_INT 28
12820: PUSH
12821: LD_INT 30
12823: PUSH
12824: LD_INT 31
12826: PUSH
12827: LD_INT 32
12829: PUSH
12830: LD_INT 36
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 101
12858: PUSH
12859: LD_INT 102
12861: PUSH
12862: LD_INT 103
12864: PUSH
12865: LD_INT 105
12867: PUSH
12868: LD_INT 106
12870: PUSH
12871: LD_INT 108
12873: PUSH
12874: LD_INT 109
12876: PUSH
12877: LD_INT 112
12879: PUSH
12880: LD_INT 114
12882: PUSH
12883: LD_INT 116
12885: PUSH
12886: LD_INT 117
12888: PUSH
12889: LD_INT 118
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: ST_TO_ADDR
12910: GO 15009
12912: LD_INT 10
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 13116
12920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12921: LD_ADDR_VAR 0 2
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: LD_INT 4
12931: PUSH
12932: LD_INT 5
12934: PUSH
12935: LD_INT 6
12937: PUSH
12938: LD_INT 7
12940: PUSH
12941: LD_INT 8
12943: PUSH
12944: LD_INT 9
12946: PUSH
12947: LD_INT 10
12949: PUSH
12950: LD_INT 11
12952: PUSH
12953: LD_INT 12
12955: PUSH
12956: LD_INT 13
12958: PUSH
12959: LD_INT 14
12961: PUSH
12962: LD_INT 15
12964: PUSH
12965: LD_INT 16
12967: PUSH
12968: LD_INT 17
12970: PUSH
12971: LD_INT 18
12973: PUSH
12974: LD_INT 19
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_INT 23
12988: PUSH
12989: LD_INT 24
12991: PUSH
12992: LD_INT 25
12994: PUSH
12995: LD_INT 26
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 31
13006: PUSH
13007: LD_INT 32
13009: PUSH
13010: LD_INT 36
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 101
13046: PUSH
13047: LD_INT 102
13049: PUSH
13050: LD_INT 103
13052: PUSH
13053: LD_INT 104
13055: PUSH
13056: LD_INT 105
13058: PUSH
13059: LD_INT 106
13061: PUSH
13062: LD_INT 107
13064: PUSH
13065: LD_INT 108
13067: PUSH
13068: LD_INT 109
13070: PUSH
13071: LD_INT 110
13073: PUSH
13074: LD_INT 111
13076: PUSH
13077: LD_INT 112
13079: PUSH
13080: LD_INT 114
13082: PUSH
13083: LD_INT 116
13085: PUSH
13086: LD_INT 117
13088: PUSH
13089: LD_INT 118
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 15009
13116: LD_INT 11
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13328
13124: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 3
13135: PUSH
13136: LD_INT 4
13138: PUSH
13139: LD_INT 5
13141: PUSH
13142: LD_INT 6
13144: PUSH
13145: LD_INT 7
13147: PUSH
13148: LD_INT 8
13150: PUSH
13151: LD_INT 9
13153: PUSH
13154: LD_INT 10
13156: PUSH
13157: LD_INT 11
13159: PUSH
13160: LD_INT 12
13162: PUSH
13163: LD_INT 13
13165: PUSH
13166: LD_INT 14
13168: PUSH
13169: LD_INT 15
13171: PUSH
13172: LD_INT 16
13174: PUSH
13175: LD_INT 17
13177: PUSH
13178: LD_INT 18
13180: PUSH
13181: LD_INT 19
13183: PUSH
13184: LD_INT 20
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 22
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 24
13198: PUSH
13199: LD_INT 25
13201: PUSH
13202: LD_INT 26
13204: PUSH
13205: LD_INT 28
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 31
13213: PUSH
13214: LD_INT 32
13216: PUSH
13217: LD_INT 34
13219: PUSH
13220: LD_INT 36
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 101
13258: PUSH
13259: LD_INT 102
13261: PUSH
13262: LD_INT 103
13264: PUSH
13265: LD_INT 104
13267: PUSH
13268: LD_INT 105
13270: PUSH
13271: LD_INT 106
13273: PUSH
13274: LD_INT 107
13276: PUSH
13277: LD_INT 108
13279: PUSH
13280: LD_INT 109
13282: PUSH
13283: LD_INT 110
13285: PUSH
13286: LD_INT 111
13288: PUSH
13289: LD_INT 112
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 116
13297: PUSH
13298: LD_INT 117
13300: PUSH
13301: LD_INT 118
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
13326: GO 15009
13328: LD_INT 12
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13556
13336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13337: LD_ADDR_VAR 0 2
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 3
13350: PUSH
13351: LD_INT 4
13353: PUSH
13354: LD_INT 5
13356: PUSH
13357: LD_INT 6
13359: PUSH
13360: LD_INT 7
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: LD_INT 9
13368: PUSH
13369: LD_INT 10
13371: PUSH
13372: LD_INT 11
13374: PUSH
13375: LD_INT 12
13377: PUSH
13378: LD_INT 13
13380: PUSH
13381: LD_INT 14
13383: PUSH
13384: LD_INT 15
13386: PUSH
13387: LD_INT 16
13389: PUSH
13390: LD_INT 17
13392: PUSH
13393: LD_INT 18
13395: PUSH
13396: LD_INT 19
13398: PUSH
13399: LD_INT 20
13401: PUSH
13402: LD_INT 21
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 23
13410: PUSH
13411: LD_INT 24
13413: PUSH
13414: LD_INT 25
13416: PUSH
13417: LD_INT 26
13419: PUSH
13420: LD_INT 27
13422: PUSH
13423: LD_INT 28
13425: PUSH
13426: LD_INT 30
13428: PUSH
13429: LD_INT 31
13431: PUSH
13432: LD_INT 32
13434: PUSH
13435: LD_INT 33
13437: PUSH
13438: LD_INT 34
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 101
13482: PUSH
13483: LD_INT 102
13485: PUSH
13486: LD_INT 103
13488: PUSH
13489: LD_INT 104
13491: PUSH
13492: LD_INT 105
13494: PUSH
13495: LD_INT 106
13497: PUSH
13498: LD_INT 107
13500: PUSH
13501: LD_INT 108
13503: PUSH
13504: LD_INT 109
13506: PUSH
13507: LD_INT 110
13509: PUSH
13510: LD_INT 111
13512: PUSH
13513: LD_INT 112
13515: PUSH
13516: LD_INT 113
13518: PUSH
13519: LD_INT 114
13521: PUSH
13522: LD_INT 116
13524: PUSH
13525: LD_INT 117
13527: PUSH
13528: LD_INT 118
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 15009
13556: LD_INT 13
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13772
13564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: LD_INT 4
13581: PUSH
13582: LD_INT 5
13584: PUSH
13585: LD_INT 8
13587: PUSH
13588: LD_INT 9
13590: PUSH
13591: LD_INT 10
13593: PUSH
13594: LD_INT 11
13596: PUSH
13597: LD_INT 12
13599: PUSH
13600: LD_INT 14
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: LD_INT 16
13608: PUSH
13609: LD_INT 17
13611: PUSH
13612: LD_INT 18
13614: PUSH
13615: LD_INT 19
13617: PUSH
13618: LD_INT 20
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 23
13629: PUSH
13630: LD_INT 24
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 27
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 30
13647: PUSH
13648: LD_INT 31
13650: PUSH
13651: LD_INT 32
13653: PUSH
13654: LD_INT 33
13656: PUSH
13657: LD_INT 34
13659: PUSH
13660: LD_INT 36
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 101
13698: PUSH
13699: LD_INT 102
13701: PUSH
13702: LD_INT 103
13704: PUSH
13705: LD_INT 104
13707: PUSH
13708: LD_INT 105
13710: PUSH
13711: LD_INT 106
13713: PUSH
13714: LD_INT 107
13716: PUSH
13717: LD_INT 108
13719: PUSH
13720: LD_INT 109
13722: PUSH
13723: LD_INT 110
13725: PUSH
13726: LD_INT 111
13728: PUSH
13729: LD_INT 112
13731: PUSH
13732: LD_INT 113
13734: PUSH
13735: LD_INT 114
13737: PUSH
13738: LD_INT 116
13740: PUSH
13741: LD_INT 117
13743: PUSH
13744: LD_INT 118
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: ST_TO_ADDR
13770: GO 15009
13772: LD_INT 14
13774: DOUBLE
13775: EQUAL
13776: IFTRUE 13780
13778: GO 14004
13780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13781: LD_ADDR_VAR 0 2
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: LD_INT 2
13791: PUSH
13792: LD_INT 3
13794: PUSH
13795: LD_INT 4
13797: PUSH
13798: LD_INT 5
13800: PUSH
13801: LD_INT 6
13803: PUSH
13804: LD_INT 7
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: LD_INT 9
13812: PUSH
13813: LD_INT 10
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_INT 12
13821: PUSH
13822: LD_INT 13
13824: PUSH
13825: LD_INT 14
13827: PUSH
13828: LD_INT 15
13830: PUSH
13831: LD_INT 16
13833: PUSH
13834: LD_INT 17
13836: PUSH
13837: LD_INT 18
13839: PUSH
13840: LD_INT 19
13842: PUSH
13843: LD_INT 20
13845: PUSH
13846: LD_INT 21
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_INT 23
13854: PUSH
13855: LD_INT 24
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 26
13863: PUSH
13864: LD_INT 27
13866: PUSH
13867: LD_INT 28
13869: PUSH
13870: LD_INT 29
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: LD_INT 31
13878: PUSH
13879: LD_INT 32
13881: PUSH
13882: LD_INT 33
13884: PUSH
13885: LD_INT 34
13887: PUSH
13888: LD_INT 36
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 101
13930: PUSH
13931: LD_INT 102
13933: PUSH
13934: LD_INT 103
13936: PUSH
13937: LD_INT 104
13939: PUSH
13940: LD_INT 105
13942: PUSH
13943: LD_INT 106
13945: PUSH
13946: LD_INT 107
13948: PUSH
13949: LD_INT 108
13951: PUSH
13952: LD_INT 109
13954: PUSH
13955: LD_INT 110
13957: PUSH
13958: LD_INT 111
13960: PUSH
13961: LD_INT 112
13963: PUSH
13964: LD_INT 113
13966: PUSH
13967: LD_INT 114
13969: PUSH
13970: LD_INT 116
13972: PUSH
13973: LD_INT 117
13975: PUSH
13976: LD_INT 118
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 15009
14004: LD_INT 15
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14236
14012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 6
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: LD_INT 9
14044: PUSH
14045: LD_INT 10
14047: PUSH
14048: LD_INT 11
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 15
14062: PUSH
14063: LD_INT 16
14065: PUSH
14066: LD_INT 17
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: LD_INT 19
14074: PUSH
14075: LD_INT 20
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 23
14086: PUSH
14087: LD_INT 24
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 27
14098: PUSH
14099: LD_INT 28
14101: PUSH
14102: LD_INT 29
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 33
14116: PUSH
14117: LD_INT 34
14119: PUSH
14120: LD_INT 36
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 101
14162: PUSH
14163: LD_INT 102
14165: PUSH
14166: LD_INT 103
14168: PUSH
14169: LD_INT 104
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 107
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: LD_INT 109
14186: PUSH
14187: LD_INT 110
14189: PUSH
14190: LD_INT 111
14192: PUSH
14193: LD_INT 112
14195: PUSH
14196: LD_INT 113
14198: PUSH
14199: LD_INT 114
14201: PUSH
14202: LD_INT 116
14204: PUSH
14205: LD_INT 117
14207: PUSH
14208: LD_INT 118
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 15009
14236: LD_INT 16
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14380
14244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 4
14255: PUSH
14256: LD_INT 5
14258: PUSH
14259: LD_INT 7
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 15
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 23
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 26
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 101
14330: PUSH
14331: LD_INT 102
14333: PUSH
14334: LD_INT 103
14336: PUSH
14337: LD_INT 106
14339: PUSH
14340: LD_INT 108
14342: PUSH
14343: LD_INT 112
14345: PUSH
14346: LD_INT 113
14348: PUSH
14349: LD_INT 114
14351: PUSH
14352: LD_INT 116
14354: PUSH
14355: LD_INT 117
14357: PUSH
14358: LD_INT 118
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: ST_TO_ADDR
14378: GO 15009
14380: LD_INT 17
14382: DOUBLE
14383: EQUAL
14384: IFTRUE 14388
14386: GO 14612
14388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: LD_INT 5
14408: PUSH
14409: LD_INT 6
14411: PUSH
14412: LD_INT 7
14414: PUSH
14415: LD_INT 8
14417: PUSH
14418: LD_INT 9
14420: PUSH
14421: LD_INT 10
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: LD_INT 13
14432: PUSH
14433: LD_INT 14
14435: PUSH
14436: LD_INT 15
14438: PUSH
14439: LD_INT 16
14441: PUSH
14442: LD_INT 17
14444: PUSH
14445: LD_INT 18
14447: PUSH
14448: LD_INT 19
14450: PUSH
14451: LD_INT 20
14453: PUSH
14454: LD_INT 21
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_INT 23
14462: PUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 25
14468: PUSH
14469: LD_INT 26
14471: PUSH
14472: LD_INT 27
14474: PUSH
14475: LD_INT 28
14477: PUSH
14478: LD_INT 29
14480: PUSH
14481: LD_INT 30
14483: PUSH
14484: LD_INT 31
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: LD_INT 33
14492: PUSH
14493: LD_INT 34
14495: PUSH
14496: LD_INT 36
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 101
14538: PUSH
14539: LD_INT 102
14541: PUSH
14542: LD_INT 103
14544: PUSH
14545: LD_INT 104
14547: PUSH
14548: LD_INT 105
14550: PUSH
14551: LD_INT 106
14553: PUSH
14554: LD_INT 107
14556: PUSH
14557: LD_INT 108
14559: PUSH
14560: LD_INT 109
14562: PUSH
14563: LD_INT 110
14565: PUSH
14566: LD_INT 111
14568: PUSH
14569: LD_INT 112
14571: PUSH
14572: LD_INT 113
14574: PUSH
14575: LD_INT 114
14577: PUSH
14578: LD_INT 116
14580: PUSH
14581: LD_INT 117
14583: PUSH
14584: LD_INT 118
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: ST_TO_ADDR
14610: GO 15009
14612: LD_INT 18
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14768
14620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: LD_INT 4
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 7
14637: PUSH
14638: LD_INT 11
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: LD_INT 15
14646: PUSH
14647: LD_INT 16
14649: PUSH
14650: LD_INT 20
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_INT 23
14661: PUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 26
14667: PUSH
14668: LD_INT 30
14670: PUSH
14671: LD_INT 31
14673: PUSH
14674: LD_INT 32
14676: PUSH
14677: LD_INT 33
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 35
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 101
14714: PUSH
14715: LD_INT 102
14717: PUSH
14718: LD_INT 103
14720: PUSH
14721: LD_INT 106
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 112
14729: PUSH
14730: LD_INT 113
14732: PUSH
14733: LD_INT 114
14735: PUSH
14736: LD_INT 115
14738: PUSH
14739: LD_INT 116
14741: PUSH
14742: LD_INT 117
14744: PUSH
14745: LD_INT 118
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: ST_TO_ADDR
14766: GO 15009
14768: LD_INT 19
14770: DOUBLE
14771: EQUAL
14772: IFTRUE 14776
14774: GO 15008
14776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14777: LD_ADDR_VAR 0 2
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: LD_INT 5
14796: PUSH
14797: LD_INT 6
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: LD_INT 8
14805: PUSH
14806: LD_INT 9
14808: PUSH
14809: LD_INT 10
14811: PUSH
14812: LD_INT 11
14814: PUSH
14815: LD_INT 12
14817: PUSH
14818: LD_INT 13
14820: PUSH
14821: LD_INT 14
14823: PUSH
14824: LD_INT 15
14826: PUSH
14827: LD_INT 16
14829: PUSH
14830: LD_INT 17
14832: PUSH
14833: LD_INT 18
14835: PUSH
14836: LD_INT 19
14838: PUSH
14839: LD_INT 20
14841: PUSH
14842: LD_INT 21
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 23
14850: PUSH
14851: LD_INT 24
14853: PUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 28
14865: PUSH
14866: LD_INT 29
14868: PUSH
14869: LD_INT 30
14871: PUSH
14872: LD_INT 31
14874: PUSH
14875: LD_INT 32
14877: PUSH
14878: LD_INT 33
14880: PUSH
14881: LD_INT 34
14883: PUSH
14884: LD_INT 35
14886: PUSH
14887: LD_INT 36
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 101
14930: PUSH
14931: LD_INT 102
14933: PUSH
14934: LD_INT 103
14936: PUSH
14937: LD_INT 104
14939: PUSH
14940: LD_INT 105
14942: PUSH
14943: LD_INT 106
14945: PUSH
14946: LD_INT 107
14948: PUSH
14949: LD_INT 108
14951: PUSH
14952: LD_INT 109
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 111
14960: PUSH
14961: LD_INT 112
14963: PUSH
14964: LD_INT 113
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: LD_INT 115
14972: PUSH
14973: LD_INT 116
14975: PUSH
14976: LD_INT 117
14978: PUSH
14979: LD_INT 118
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 15009
15008: POP
// end else
15009: GO 15240
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: LD_INT 3
15024: PUSH
15025: LD_INT 4
15027: PUSH
15028: LD_INT 5
15030: PUSH
15031: LD_INT 6
15033: PUSH
15034: LD_INT 7
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: LD_INT 9
15042: PUSH
15043: LD_INT 10
15045: PUSH
15046: LD_INT 11
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 13
15054: PUSH
15055: LD_INT 14
15057: PUSH
15058: LD_INT 15
15060: PUSH
15061: LD_INT 16
15063: PUSH
15064: LD_INT 17
15066: PUSH
15067: LD_INT 18
15069: PUSH
15070: LD_INT 19
15072: PUSH
15073: LD_INT 20
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_INT 23
15084: PUSH
15085: LD_INT 24
15087: PUSH
15088: LD_INT 25
15090: PUSH
15091: LD_INT 26
15093: PUSH
15094: LD_INT 27
15096: PUSH
15097: LD_INT 28
15099: PUSH
15100: LD_INT 29
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 31
15108: PUSH
15109: LD_INT 32
15111: PUSH
15112: LD_INT 33
15114: PUSH
15115: LD_INT 34
15117: PUSH
15118: LD_INT 35
15120: PUSH
15121: LD_INT 36
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 101
15164: PUSH
15165: LD_INT 102
15167: PUSH
15168: LD_INT 103
15170: PUSH
15171: LD_INT 104
15173: PUSH
15174: LD_INT 105
15176: PUSH
15177: LD_INT 106
15179: PUSH
15180: LD_INT 107
15182: PUSH
15183: LD_INT 108
15185: PUSH
15186: LD_INT 109
15188: PUSH
15189: LD_INT 110
15191: PUSH
15192: LD_INT 111
15194: PUSH
15195: LD_INT 112
15197: PUSH
15198: LD_INT 113
15200: PUSH
15201: LD_INT 114
15203: PUSH
15204: LD_INT 115
15206: PUSH
15207: LD_INT 116
15209: PUSH
15210: LD_INT 117
15212: PUSH
15213: LD_INT 118
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ST_TO_ADDR
// if result then
15240: LD_VAR 0 2
15244: IFFALSE 16030
// begin normal :=  ;
15246: LD_ADDR_VAR 0 5
15250: PUSH
15251: LD_STRING 
15253: ST_TO_ADDR
// hardcore :=  ;
15254: LD_ADDR_VAR 0 6
15258: PUSH
15259: LD_STRING 
15261: ST_TO_ADDR
// active :=  ;
15262: LD_ADDR_VAR 0 7
15266: PUSH
15267: LD_STRING 
15269: ST_TO_ADDR
// for i = 1 to normalCounter do
15270: LD_ADDR_VAR 0 8
15274: PUSH
15275: DOUBLE
15276: LD_INT 1
15278: DEC
15279: ST_TO_ADDR
15280: LD_EXP 28
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15387
// begin tmp := 0 ;
15288: LD_ADDR_VAR 0 3
15292: PUSH
15293: LD_STRING 0
15295: ST_TO_ADDR
// if result [ 1 ] then
15296: LD_VAR 0 2
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: IFFALSE 15369
// if result [ 1 ] [ 1 ] = i then
15306: LD_VAR 0 2
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PUSH
15319: LD_VAR 0 8
15323: EQUAL
15324: IFFALSE 15369
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: LD_VAR 0 2
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 3
15355: PPUSH
15356: CALL_OW 1
15360: ST_TO_ADDR
// tmp := 1 ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_STRING 1
15368: ST_TO_ADDR
// end ; normal := normal & tmp ;
15369: LD_ADDR_VAR 0 5
15373: PUSH
15374: LD_VAR 0 5
15378: PUSH
15379: LD_VAR 0 3
15383: STR
15384: ST_TO_ADDR
// end ;
15385: GO 15285
15387: POP
15388: POP
// for i = 1 to hardcoreCounter do
15389: LD_ADDR_VAR 0 8
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_EXP 29
15403: PUSH
15404: FOR_TO
15405: IFFALSE 15510
// begin tmp := 0 ;
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_STRING 0
15414: ST_TO_ADDR
// if result [ 2 ] then
15415: LD_VAR 0 2
15419: PUSH
15420: LD_INT 2
15422: ARRAY
15423: IFFALSE 15492
// if result [ 2 ] [ 1 ] = 100 + i then
15425: LD_VAR 0 2
15429: PUSH
15430: LD_INT 2
15432: ARRAY
15433: PUSH
15434: LD_INT 1
15436: ARRAY
15437: PUSH
15438: LD_INT 100
15440: PUSH
15441: LD_VAR 0 8
15445: PLUS
15446: EQUAL
15447: IFFALSE 15492
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_INT 2
15461: PPUSH
15462: LD_VAR 0 2
15466: PUSH
15467: LD_INT 2
15469: ARRAY
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 3
15478: PPUSH
15479: CALL_OW 1
15483: ST_TO_ADDR
// tmp := 1 ;
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_STRING 1
15491: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15492: LD_ADDR_VAR 0 6
15496: PUSH
15497: LD_VAR 0 6
15501: PUSH
15502: LD_VAR 0 3
15506: STR
15507: ST_TO_ADDR
// end ;
15508: GO 15404
15510: POP
15511: POP
// if isGameLoad then
15512: LD_VAR 0 1
15516: IFFALSE 15991
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15518: LD_ADDR_VAR 0 4
15522: PUSH
15523: LD_EXP 32
15527: PUSH
15528: LD_EXP 31
15532: PUSH
15533: LD_EXP 33
15537: PUSH
15538: LD_EXP 30
15542: PUSH
15543: LD_EXP 34
15547: PUSH
15548: LD_EXP 35
15552: PUSH
15553: LD_EXP 36
15557: PUSH
15558: LD_EXP 37
15562: PUSH
15563: LD_EXP 38
15567: PUSH
15568: LD_EXP 39
15572: PUSH
15573: LD_EXP 40
15577: PUSH
15578: LD_EXP 41
15582: PUSH
15583: LD_EXP 42
15587: PUSH
15588: LD_EXP 43
15592: PUSH
15593: LD_EXP 51
15597: PUSH
15598: LD_EXP 52
15602: PUSH
15603: LD_EXP 53
15607: PUSH
15608: LD_EXP 54
15612: PUSH
15613: LD_EXP 56
15617: PUSH
15618: LD_EXP 57
15622: PUSH
15623: LD_EXP 58
15627: PUSH
15628: LD_EXP 61
15632: PUSH
15633: LD_EXP 63
15637: PUSH
15638: LD_EXP 64
15642: PUSH
15643: LD_EXP 65
15647: PUSH
15648: LD_EXP 67
15652: PUSH
15653: LD_EXP 68
15657: PUSH
15658: LD_EXP 71
15662: PUSH
15663: LD_EXP 72
15667: PUSH
15668: LD_EXP 73
15672: PUSH
15673: LD_EXP 74
15677: PUSH
15678: LD_EXP 75
15682: PUSH
15683: LD_EXP 76
15687: PUSH
15688: LD_EXP 77
15692: PUSH
15693: LD_EXP 78
15697: PUSH
15698: LD_EXP 79
15702: PUSH
15703: LD_EXP 44
15707: PUSH
15708: LD_EXP 45
15712: PUSH
15713: LD_EXP 48
15717: PUSH
15718: LD_EXP 49
15722: PUSH
15723: LD_EXP 50
15727: PUSH
15728: LD_EXP 46
15732: PUSH
15733: LD_EXP 47
15737: PUSH
15738: LD_EXP 55
15742: PUSH
15743: LD_EXP 59
15747: PUSH
15748: LD_EXP 60
15752: PUSH
15753: LD_EXP 62
15757: PUSH
15758: LD_EXP 66
15762: PUSH
15763: LD_EXP 69
15767: PUSH
15768: LD_EXP 70
15772: PUSH
15773: LD_EXP 80
15777: PUSH
15778: LD_EXP 81
15782: PUSH
15783: LD_EXP 82
15787: PUSH
15788: LD_EXP 83
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// tmp :=  ;
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// for i = 1 to normalCounter do
15857: LD_ADDR_VAR 0 8
15861: PUSH
15862: DOUBLE
15863: LD_INT 1
15865: DEC
15866: ST_TO_ADDR
15867: LD_EXP 28
15871: PUSH
15872: FOR_TO
15873: IFFALSE 15909
// begin if flags [ i ] then
15875: LD_VAR 0 4
15879: PUSH
15880: LD_VAR 0 8
15884: ARRAY
15885: IFFALSE 15907
// tmp := tmp & i & ; ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: LD_VAR 0 3
15896: PUSH
15897: LD_VAR 0 8
15901: STR
15902: PUSH
15903: LD_STRING ;
15905: STR
15906: ST_TO_ADDR
// end ;
15907: GO 15872
15909: POP
15910: POP
// for i = 1 to hardcoreCounter do
15911: LD_ADDR_VAR 0 8
15915: PUSH
15916: DOUBLE
15917: LD_INT 1
15919: DEC
15920: ST_TO_ADDR
15921: LD_EXP 29
15925: PUSH
15926: FOR_TO
15927: IFFALSE 15973
// begin if flags [ normalCounter + i ] then
15929: LD_VAR 0 4
15933: PUSH
15934: LD_EXP 28
15938: PUSH
15939: LD_VAR 0 8
15943: PLUS
15944: ARRAY
15945: IFFALSE 15971
// tmp := tmp & ( 100 + i ) & ; ;
15947: LD_ADDR_VAR 0 3
15951: PUSH
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 100
15959: PUSH
15960: LD_VAR 0 8
15964: PLUS
15965: STR
15966: PUSH
15967: LD_STRING ;
15969: STR
15970: ST_TO_ADDR
// end ;
15971: GO 15926
15973: POP
15974: POP
// if tmp then
15975: LD_VAR 0 3
15979: IFFALSE 15991
// active := tmp ;
15981: LD_ADDR_VAR 0 7
15985: PUSH
15986: LD_VAR 0 3
15990: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15991: LD_STRING getStreamItemsFromMission("
15993: PUSH
15994: LD_VAR 0 5
15998: STR
15999: PUSH
16000: LD_STRING ","
16002: STR
16003: PUSH
16004: LD_VAR 0 6
16008: STR
16009: PUSH
16010: LD_STRING ","
16012: STR
16013: PUSH
16014: LD_VAR 0 7
16018: STR
16019: PUSH
16020: LD_STRING ")
16022: STR
16023: PPUSH
16024: CALL_OW 559
// end else
16028: GO 16037
// ToLua ( getStreamItemsFromMission("","","") ) ;
16030: LD_STRING getStreamItemsFromMission("","","")
16032: PPUSH
16033: CALL_OW 559
// end ;
16037: LD_VAR 0 2
16041: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16042: LD_EXP 27
16046: PUSH
16047: LD_EXP 32
16051: AND
16052: IFFALSE 16176
16054: GO 16056
16056: DISABLE
16057: LD_INT 0
16059: PPUSH
16060: PPUSH
// begin enable ;
16061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_OWVAR 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 7
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 34
16094: PUSH
16095: LD_INT 45
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 34
16104: PUSH
16105: LD_INT 28
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 34
16114: PUSH
16115: LD_INT 47
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PPUSH
16133: CALL_OW 69
16137: ST_TO_ADDR
// if not tmp then
16138: LD_VAR 0 2
16142: NOT
16143: IFFALSE 16147
// exit ;
16145: GO 16176
// for i in tmp do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16174
// begin SetLives ( i , 0 ) ;
16160: LD_VAR 0 1
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 234
// end ;
16172: GO 16157
16174: POP
16175: POP
// end ;
16176: PPOPN 2
16178: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16179: LD_EXP 27
16183: PUSH
16184: LD_EXP 33
16188: AND
16189: IFFALSE 16273
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 32
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: CALL_OW 69
16234: ST_TO_ADDR
// if not tmp then
16235: LD_VAR 0 2
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16273
// for i in tmp do
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 2
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16271
// begin SetLives ( i , 0 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 0
16264: PPUSH
16265: CALL_OW 234
// end ;
16269: GO 16254
16271: POP
16272: POP
// end ;
16273: PPOPN 2
16275: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16276: LD_EXP 27
16280: PUSH
16281: LD_EXP 30
16285: AND
16286: IFFALSE 16379
16288: GO 16290
16290: DISABLE
16291: LD_INT 0
16293: PPUSH
// begin enable ;
16294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16295: LD_ADDR_VAR 0 1
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_OWVAR 2
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 2
16314: PUSH
16315: LD_INT 25
16317: PUSH
16318: LD_INT 5
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 25
16327: PUSH
16328: LD_INT 9
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 25
16337: PUSH
16338: LD_INT 8
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PPUSH
16355: CALL_OW 69
16359: PUSH
16360: FOR_IN
16361: IFFALSE 16377
// begin SetClass ( i , 1 ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 336
// end ;
16375: GO 16360
16377: POP
16378: POP
// end ;
16379: PPOPN 1
16381: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16382: LD_EXP 27
16386: PUSH
16387: LD_EXP 31
16391: AND
16392: PUSH
16393: LD_OWVAR 65
16397: PUSH
16398: LD_INT 7
16400: LESS
16401: AND
16402: IFFALSE 16416
16404: GO 16406
16406: DISABLE
// begin enable ;
16407: ENABLE
// game_speed := 7 ;
16408: LD_ADDR_OWVAR 65
16412: PUSH
16413: LD_INT 7
16415: ST_TO_ADDR
// end ;
16416: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16417: LD_EXP 27
16421: PUSH
16422: LD_EXP 34
16426: AND
16427: IFFALSE 16629
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
16435: PPUSH
16436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_INT 81
16444: PUSH
16445: LD_OWVAR 2
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 21
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// if not tmp then
16473: LD_VAR 0 3
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16629
// if tmp > 5 then
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 5
16489: GREATER
16490: IFFALSE 16502
// k := 5 else
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: LD_INT 5
16499: ST_TO_ADDR
16500: GO 16512
// k := tmp ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_VAR 0 3
16511: ST_TO_ADDR
// for i := 1 to k do
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_VAR 0 2
16526: PUSH
16527: FOR_TO
16528: IFFALSE 16627
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_VAR 0 1
16539: ARRAY
16540: PPUSH
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 4
16548: MOD
16549: PUSH
16550: LD_INT 1
16552: PLUS
16553: PPUSH
16554: CALL_OW 259
16558: PUSH
16559: LD_INT 10
16561: LESS
16562: IFFALSE 16625
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16564: LD_VAR 0 3
16568: PUSH
16569: LD_VAR 0 1
16573: ARRAY
16574: PPUSH
16575: LD_VAR 0 1
16579: PUSH
16580: LD_INT 4
16582: MOD
16583: PUSH
16584: LD_INT 1
16586: PLUS
16587: PPUSH
16588: LD_VAR 0 3
16592: PUSH
16593: LD_VAR 0 1
16597: ARRAY
16598: PPUSH
16599: LD_VAR 0 1
16603: PUSH
16604: LD_INT 4
16606: MOD
16607: PUSH
16608: LD_INT 1
16610: PLUS
16611: PPUSH
16612: CALL_OW 259
16616: PUSH
16617: LD_INT 1
16619: PLUS
16620: PPUSH
16621: CALL_OW 237
16625: GO 16527
16627: POP
16628: POP
// end ;
16629: PPOPN 3
16631: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16632: LD_EXP 27
16636: PUSH
16637: LD_EXP 35
16641: AND
16642: IFFALSE 16662
16644: GO 16646
16646: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16647: LD_INT 4
16649: PPUSH
16650: LD_OWVAR 2
16654: PPUSH
16655: LD_INT 0
16657: PPUSH
16658: CALL_OW 324
16662: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16663: LD_EXP 27
16667: PUSH
16668: LD_EXP 64
16672: AND
16673: IFFALSE 16693
16675: GO 16677
16677: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16678: LD_INT 19
16680: PPUSH
16681: LD_OWVAR 2
16685: PPUSH
16686: LD_INT 0
16688: PPUSH
16689: CALL_OW 324
16693: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16694: LD_EXP 27
16698: PUSH
16699: LD_EXP 36
16703: AND
16704: IFFALSE 16806
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
// begin enable ;
16713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_INT 22
16721: PUSH
16722: LD_OWVAR 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 34
16736: PUSH
16737: LD_INT 11
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 34
16746: PUSH
16747: LD_INT 30
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PPUSH
16763: CALL_OW 69
16767: ST_TO_ADDR
// if not tmp then
16768: LD_VAR 0 2
16772: NOT
16773: IFFALSE 16777
// exit ;
16775: GO 16806
// for i in tmp do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_VAR 0 2
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16804
// begin SetLives ( i , 0 ) ;
16790: LD_VAR 0 1
16794: PPUSH
16795: LD_INT 0
16797: PPUSH
16798: CALL_OW 234
// end ;
16802: GO 16787
16804: POP
16805: POP
// end ;
16806: PPOPN 2
16808: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16809: LD_EXP 27
16813: PUSH
16814: LD_EXP 37
16818: AND
16819: IFFALSE 16839
16821: GO 16823
16823: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16824: LD_INT 32
16826: PPUSH
16827: LD_OWVAR 2
16831: PPUSH
16832: LD_INT 0
16834: PPUSH
16835: CALL_OW 324
16839: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16840: LD_EXP 27
16844: PUSH
16845: LD_EXP 38
16849: AND
16850: IFFALSE 17031
16852: GO 16854
16854: DISABLE
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 33
16879: PUSH
16880: LD_INT 3
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 2
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 17031
// side := 0 ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// for i := 1 to 8 do
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: DOUBLE
16919: LD_INT 1
16921: DEC
16922: ST_TO_ADDR
16923: LD_INT 8
16925: PUSH
16926: FOR_TO
16927: IFFALSE 16975
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16929: LD_OWVAR 2
16933: PUSH
16934: LD_VAR 0 1
16938: NONEQUAL
16939: PUSH
16940: LD_OWVAR 2
16944: PPUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 81
16954: PUSH
16955: LD_INT 2
16957: EQUAL
16958: AND
16959: IFFALSE 16973
// begin side := i ;
16961: LD_ADDR_VAR 0 3
16965: PUSH
16966: LD_VAR 0 1
16970: ST_TO_ADDR
// break ;
16971: GO 16975
// end ;
16973: GO 16926
16975: POP
16976: POP
// if not side then
16977: LD_VAR 0 3
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 17031
// for i := 1 to tmp do
16986: LD_ADDR_VAR 0 1
16990: PUSH
16991: DOUBLE
16992: LD_INT 1
16994: DEC
16995: ST_TO_ADDR
16996: LD_VAR 0 2
17000: PUSH
17001: FOR_TO
17002: IFFALSE 17029
// if Prob ( 60 ) then
17004: LD_INT 60
17006: PPUSH
17007: CALL_OW 13
17011: IFFALSE 17027
// SetSide ( i , side ) ;
17013: LD_VAR 0 1
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: CALL_OW 235
17027: GO 17001
17029: POP
17030: POP
// end ;
17031: PPOPN 3
17033: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17034: LD_EXP 27
17038: PUSH
17039: LD_EXP 40
17043: AND
17044: IFFALSE 17163
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_OWVAR 2
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 21
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 23
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: PUSH
17106: FOR_IN
17107: IFFALSE 17161
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 257
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: LD_INT 4
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: IN
17137: IFFALSE 17159
// SetClass ( un , rand ( 1 , 4 ) ) ;
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: LD_INT 4
17149: PPUSH
17150: CALL_OW 12
17154: PPUSH
17155: CALL_OW 336
17159: GO 17106
17161: POP
17162: POP
// end ;
17163: PPOPN 1
17165: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17166: LD_EXP 27
17170: PUSH
17171: LD_EXP 39
17175: AND
17176: IFFALSE 17255
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_OWVAR 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 21
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: ST_TO_ADDR
// if not tmp then
17220: LD_VAR 0 1
17224: NOT
17225: IFFALSE 17229
// exit ;
17227: GO 17255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17229: LD_VAR 0 1
17233: PUSH
17234: LD_INT 1
17236: PPUSH
17237: LD_VAR 0 1
17241: PPUSH
17242: CALL_OW 12
17246: ARRAY
17247: PPUSH
17248: LD_INT 100
17250: PPUSH
17251: CALL_OW 234
// end ;
17255: PPOPN 1
17257: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17258: LD_EXP 27
17262: PUSH
17263: LD_EXP 41
17267: AND
17268: IFFALSE 17366
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17276: LD_ADDR_VAR 0 1
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_OWVAR 2
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 21
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PPUSH
17307: CALL_OW 69
17311: ST_TO_ADDR
// if not tmp then
17312: LD_VAR 0 1
17316: NOT
17317: IFFALSE 17321
// exit ;
17319: GO 17366
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 1
17328: PPUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 12
17338: ARRAY
17339: PPUSH
17340: LD_INT 1
17342: PPUSH
17343: LD_INT 4
17345: PPUSH
17346: CALL_OW 12
17350: PPUSH
17351: LD_INT 3000
17353: PPUSH
17354: LD_INT 9000
17356: PPUSH
17357: CALL_OW 12
17361: PPUSH
17362: CALL_OW 492
// end ;
17366: PPOPN 1
17368: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17369: LD_EXP 27
17373: PUSH
17374: LD_EXP 42
17378: AND
17379: IFFALSE 17399
17381: GO 17383
17383: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17384: LD_INT 1
17386: PPUSH
17387: LD_OWVAR 2
17391: PPUSH
17392: LD_INT 0
17394: PPUSH
17395: CALL_OW 324
17399: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17400: LD_EXP 27
17404: PUSH
17405: LD_EXP 43
17409: AND
17410: IFFALSE 17493
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17419: LD_ADDR_VAR 0 2
17423: PUSH
17424: LD_INT 22
17426: PUSH
17427: LD_OWVAR 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 21
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PPUSH
17450: CALL_OW 69
17454: ST_TO_ADDR
// if not tmp then
17455: LD_VAR 0 2
17459: NOT
17460: IFFALSE 17464
// exit ;
17462: GO 17493
// for i in tmp do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_VAR 0 2
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17491
// SetBLevel ( i , 10 ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_INT 10
17484: PPUSH
17485: CALL_OW 241
17489: GO 17474
17491: POP
17492: POP
// end ;
17493: PPOPN 2
17495: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17496: LD_EXP 27
17500: PUSH
17501: LD_EXP 44
17505: AND
17506: IFFALSE 17617
17508: GO 17510
17510: DISABLE
17511: LD_INT 0
17513: PPUSH
17514: PPUSH
17515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17516: LD_ADDR_VAR 0 3
17520: PUSH
17521: LD_INT 22
17523: PUSH
17524: LD_OWVAR 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PPUSH
17547: CALL_OW 69
17551: ST_TO_ADDR
// if not tmp then
17552: LD_VAR 0 3
17556: NOT
17557: IFFALSE 17561
// exit ;
17559: GO 17617
// un := tmp [ rand ( 1 , tmp ) ] ;
17561: LD_ADDR_VAR 0 2
17565: PUSH
17566: LD_VAR 0 3
17570: PUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_VAR 0 3
17578: PPUSH
17579: CALL_OW 12
17583: ARRAY
17584: ST_TO_ADDR
// if Crawls ( un ) then
17585: LD_VAR 0 2
17589: PPUSH
17590: CALL_OW 318
17594: IFFALSE 17605
// ComWalk ( un ) ;
17596: LD_VAR 0 2
17600: PPUSH
17601: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17605: LD_VAR 0 2
17609: PPUSH
17610: LD_INT 5
17612: PPUSH
17613: CALL_OW 336
// end ;
17617: PPOPN 3
17619: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17620: LD_EXP 27
17624: PUSH
17625: LD_EXP 45
17629: AND
17630: PUSH
17631: LD_OWVAR 67
17635: PUSH
17636: LD_INT 4
17638: LESS
17639: AND
17640: IFFALSE 17659
17642: GO 17644
17644: DISABLE
// begin Difficulty := Difficulty + 1 ;
17645: LD_ADDR_OWVAR 67
17649: PUSH
17650: LD_OWVAR 67
17654: PUSH
17655: LD_INT 1
17657: PLUS
17658: ST_TO_ADDR
// end ;
17659: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17660: LD_EXP 27
17664: PUSH
17665: LD_EXP 46
17669: AND
17670: IFFALSE 17773
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
// begin for i := 1 to 5 do
17678: LD_ADDR_VAR 0 1
17682: PUSH
17683: DOUBLE
17684: LD_INT 1
17686: DEC
17687: ST_TO_ADDR
17688: LD_INT 5
17690: PUSH
17691: FOR_TO
17692: IFFALSE 17771
// begin uc_nation := nation_nature ;
17694: LD_ADDR_OWVAR 21
17698: PUSH
17699: LD_INT 0
17701: ST_TO_ADDR
// uc_side := 0 ;
17702: LD_ADDR_OWVAR 20
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17710: LD_ADDR_OWVAR 29
17714: PUSH
17715: LD_INT 12
17717: PUSH
17718: LD_INT 12
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// hc_agressivity := 20 ;
17725: LD_ADDR_OWVAR 35
17729: PUSH
17730: LD_INT 20
17732: ST_TO_ADDR
// hc_class := class_tiger ;
17733: LD_ADDR_OWVAR 28
17737: PUSH
17738: LD_INT 14
17740: ST_TO_ADDR
// hc_gallery :=  ;
17741: LD_ADDR_OWVAR 33
17745: PUSH
17746: LD_STRING 
17748: ST_TO_ADDR
// hc_name :=  ;
17749: LD_ADDR_OWVAR 26
17753: PUSH
17754: LD_STRING 
17756: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17757: CALL_OW 44
17761: PPUSH
17762: LD_INT 0
17764: PPUSH
17765: CALL_OW 51
// end ;
17769: GO 17691
17771: POP
17772: POP
// end ;
17773: PPOPN 1
17775: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17776: LD_EXP 27
17780: PUSH
17781: LD_EXP 47
17785: AND
17786: IFFALSE 17795
17788: GO 17790
17790: DISABLE
// StreamSibBomb ;
17791: CALL 17796 0 0
17795: END
// export function StreamSibBomb ; var i , x , y ; begin
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
// result := false ;
17802: LD_ADDR_VAR 0 1
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// for i := 1 to 16 do
17810: LD_ADDR_VAR 0 2
17814: PUSH
17815: DOUBLE
17816: LD_INT 1
17818: DEC
17819: ST_TO_ADDR
17820: LD_INT 16
17822: PUSH
17823: FOR_TO
17824: IFFALSE 18023
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17826: LD_ADDR_VAR 0 3
17830: PUSH
17831: LD_INT 10
17833: PUSH
17834: LD_INT 20
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 40
17842: PUSH
17843: LD_INT 50
17845: PUSH
17846: LD_INT 60
17848: PUSH
17849: LD_INT 70
17851: PUSH
17852: LD_INT 80
17854: PUSH
17855: LD_INT 90
17857: PUSH
17858: LD_INT 100
17860: PUSH
17861: LD_INT 110
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 130
17869: PUSH
17870: LD_INT 140
17872: PUSH
17873: LD_INT 150
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 15
17898: PPUSH
17899: CALL_OW 12
17903: ARRAY
17904: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_INT 10
17912: PUSH
17913: LD_INT 20
17915: PUSH
17916: LD_INT 30
17918: PUSH
17919: LD_INT 40
17921: PUSH
17922: LD_INT 50
17924: PUSH
17925: LD_INT 60
17927: PUSH
17928: LD_INT 70
17930: PUSH
17931: LD_INT 80
17933: PUSH
17934: LD_INT 90
17936: PUSH
17937: LD_INT 100
17939: PUSH
17940: LD_INT 110
17942: PUSH
17943: LD_INT 120
17945: PUSH
17946: LD_INT 130
17948: PUSH
17949: LD_INT 140
17951: PUSH
17952: LD_INT 150
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_INT 15
17977: PPUSH
17978: CALL_OW 12
17982: ARRAY
17983: ST_TO_ADDR
// if ValidHex ( x , y ) then
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_VAR 0 4
17993: PPUSH
17994: CALL_OW 488
17998: IFFALSE 18021
// begin result := [ x , y ] ;
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_VAR 0 3
18009: PUSH
18010: LD_VAR 0 4
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: ST_TO_ADDR
// break ;
18019: GO 18023
// end ; end ;
18021: GO 17823
18023: POP
18024: POP
// if result then
18025: LD_VAR 0 1
18029: IFFALSE 18089
// begin ToLua ( playSibBomb() ) ;
18031: LD_STRING playSibBomb()
18033: PPUSH
18034: CALL_OW 559
// wait ( 0 0$14 ) ;
18038: LD_INT 490
18040: PPUSH
18041: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 1
18052: ARRAY
18053: PPUSH
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 2
18061: ARRAY
18062: PPUSH
18063: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18067: LD_VAR 0 1
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PPUSH
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 2
18083: ARRAY
18084: PPUSH
18085: CALL_OW 429
// end ; end ;
18089: LD_VAR 0 1
18093: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18094: LD_EXP 27
18098: PUSH
18099: LD_EXP 49
18103: AND
18104: IFFALSE 18116
18106: GO 18108
18108: DISABLE
// YouLost (  ) ;
18109: LD_STRING 
18111: PPUSH
18112: CALL_OW 104
18116: END
// every 0 0$1 trigger StreamModeActive and sFog do
18117: LD_EXP 27
18121: PUSH
18122: LD_EXP 48
18126: AND
18127: IFFALSE 18141
18129: GO 18131
18131: DISABLE
// FogOff ( your_side ) ;
18132: LD_OWVAR 2
18136: PPUSH
18137: CALL_OW 344
18141: END
// every 0 0$1 trigger StreamModeActive and sSun do
18142: LD_EXP 27
18146: PUSH
18147: LD_EXP 50
18151: AND
18152: IFFALSE 18180
18154: GO 18156
18156: DISABLE
// begin solar_recharge_percent := 0 ;
18157: LD_ADDR_OWVAR 79
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18165: LD_INT 10500
18167: PPUSH
18168: CALL_OW 67
// solar_recharge_percent := 100 ;
18172: LD_ADDR_OWVAR 79
18176: PUSH
18177: LD_INT 100
18179: ST_TO_ADDR
// end ;
18180: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18181: LD_EXP 27
18185: PUSH
18186: LD_EXP 51
18190: AND
18191: IFFALSE 18430
18193: GO 18195
18195: DISABLE
18196: LD_INT 0
18198: PPUSH
18199: PPUSH
18200: PPUSH
// begin tmp := [ ] ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// for i := 1 to 6 do
18208: LD_ADDR_VAR 0 1
18212: PUSH
18213: DOUBLE
18214: LD_INT 1
18216: DEC
18217: ST_TO_ADDR
18218: LD_INT 6
18220: PUSH
18221: FOR_TO
18222: IFFALSE 18327
// begin uc_nation := nation_nature ;
18224: LD_ADDR_OWVAR 21
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// uc_side := 0 ;
18232: LD_ADDR_OWVAR 20
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18240: LD_ADDR_OWVAR 29
18244: PUSH
18245: LD_INT 12
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: ST_TO_ADDR
// hc_agressivity := 20 ;
18255: LD_ADDR_OWVAR 35
18259: PUSH
18260: LD_INT 20
18262: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18263: LD_ADDR_OWVAR 28
18267: PUSH
18268: LD_INT 17
18270: ST_TO_ADDR
// hc_gallery :=  ;
18271: LD_ADDR_OWVAR 33
18275: PUSH
18276: LD_STRING 
18278: ST_TO_ADDR
// hc_name :=  ;
18279: LD_ADDR_OWVAR 26
18283: PUSH
18284: LD_STRING 
18286: ST_TO_ADDR
// un := CreateHuman ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: CALL_OW 44
18296: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 51
// tmp := tmp ^ un ;
18309: LD_ADDR_VAR 0 3
18313: PUSH
18314: LD_VAR 0 3
18318: PUSH
18319: LD_VAR 0 2
18323: ADD
18324: ST_TO_ADDR
// end ;
18325: GO 18221
18327: POP
18328: POP
// repeat wait ( 0 0$1 ) ;
18329: LD_INT 35
18331: PPUSH
18332: CALL_OW 67
// for un in tmp do
18336: LD_ADDR_VAR 0 2
18340: PUSH
18341: LD_VAR 0 3
18345: PUSH
18346: FOR_IN
18347: IFFALSE 18421
// begin if IsDead ( un ) then
18349: LD_VAR 0 2
18353: PPUSH
18354: CALL_OW 301
18358: IFFALSE 18378
// begin tmp := tmp diff un ;
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: LD_VAR 0 3
18369: PUSH
18370: LD_VAR 0 2
18374: DIFF
18375: ST_TO_ADDR
// continue ;
18376: GO 18346
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18378: LD_VAR 0 2
18382: PPUSH
18383: LD_INT 3
18385: PUSH
18386: LD_INT 22
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PPUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: CALL_OW 74
18414: PPUSH
18415: CALL_OW 115
// end ;
18419: GO 18346
18421: POP
18422: POP
// until not tmp ;
18423: LD_VAR 0 3
18427: NOT
18428: IFFALSE 18329
// end ;
18430: PPOPN 3
18432: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18433: LD_EXP 27
18437: PUSH
18438: LD_EXP 52
18442: AND
18443: IFFALSE 18497
18445: GO 18447
18447: DISABLE
// begin ToLua ( displayTroll(); ) ;
18448: LD_STRING displayTroll();
18450: PPUSH
18451: CALL_OW 559
// wait ( 3 3$00 ) ;
18455: LD_INT 6300
18457: PPUSH
18458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18462: LD_STRING hideTroll();
18464: PPUSH
18465: CALL_OW 559
// wait ( 1 1$00 ) ;
18469: LD_INT 2100
18471: PPUSH
18472: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18476: LD_STRING displayTroll();
18478: PPUSH
18479: CALL_OW 559
// wait ( 1 1$00 ) ;
18483: LD_INT 2100
18485: PPUSH
18486: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18490: LD_STRING hideTroll();
18492: PPUSH
18493: CALL_OW 559
// end ;
18497: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18498: LD_EXP 27
18502: PUSH
18503: LD_EXP 53
18507: AND
18508: IFFALSE 18571
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
// begin p := 0 ;
18516: LD_ADDR_VAR 0 1
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// repeat game_speed := 1 ;
18524: LD_ADDR_OWVAR 65
18528: PUSH
18529: LD_INT 1
18531: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18532: LD_INT 35
18534: PPUSH
18535: CALL_OW 67
// p := p + 1 ;
18539: LD_ADDR_VAR 0 1
18543: PUSH
18544: LD_VAR 0 1
18548: PUSH
18549: LD_INT 1
18551: PLUS
18552: ST_TO_ADDR
// until p >= 60 ;
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 60
18560: GREATEREQUAL
18561: IFFALSE 18524
// game_speed := 4 ;
18563: LD_ADDR_OWVAR 65
18567: PUSH
18568: LD_INT 4
18570: ST_TO_ADDR
// end ;
18571: PPOPN 1
18573: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18574: LD_EXP 27
18578: PUSH
18579: LD_EXP 54
18583: AND
18584: IFFALSE 18730
18586: GO 18588
18588: DISABLE
18589: LD_INT 0
18591: PPUSH
18592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_OWVAR 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 30
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 30
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PPUSH
18642: CALL_OW 69
18646: ST_TO_ADDR
// if not depot then
18647: LD_VAR 0 1
18651: NOT
18652: IFFALSE 18656
// exit ;
18654: GO 18730
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_VAR 0 1
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 12
18678: ARRAY
18679: PPUSH
18680: CALL_OW 274
18684: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: LD_INT 0
18695: PPUSH
18696: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_INT 2
18707: PPUSH
18708: LD_INT 0
18710: PPUSH
18711: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_INT 3
18722: PPUSH
18723: LD_INT 0
18725: PPUSH
18726: CALL_OW 277
// end ;
18730: PPOPN 2
18732: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18733: LD_EXP 27
18737: PUSH
18738: LD_EXP 55
18742: AND
18743: IFFALSE 18840
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 21
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: LD_INT 23
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 69
18804: ST_TO_ADDR
// if not tmp then
18805: LD_VAR 0 1
18809: NOT
18810: IFFALSE 18814
// exit ;
18812: GO 18840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18814: LD_VAR 0 1
18818: PUSH
18819: LD_INT 1
18821: PPUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 12
18831: ARRAY
18832: PPUSH
18833: LD_INT 200
18835: PPUSH
18836: CALL_OW 234
// end ;
18840: PPOPN 1
18842: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18843: LD_EXP 27
18847: PUSH
18848: LD_EXP 56
18852: AND
18853: IFFALSE 18932
18855: GO 18857
18857: DISABLE
18858: LD_INT 0
18860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18861: LD_ADDR_VAR 0 1
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 21
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 69
18896: ST_TO_ADDR
// if not tmp then
18897: LD_VAR 0 1
18901: NOT
18902: IFFALSE 18906
// exit ;
18904: GO 18932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18906: LD_VAR 0 1
18910: PUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 12
18923: ARRAY
18924: PPUSH
18925: LD_INT 60
18927: PPUSH
18928: CALL_OW 234
// end ;
18932: PPOPN 1
18934: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18935: LD_EXP 27
18939: PUSH
18940: LD_EXP 57
18944: AND
18945: IFFALSE 19044
18947: GO 18949
18949: DISABLE
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
// begin enable ;
18954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18955: LD_ADDR_VAR 0 1
18959: PUSH
18960: LD_INT 22
18962: PUSH
18963: LD_OWVAR 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 61
18974: PUSH
18975: EMPTY
18976: LIST
18977: PUSH
18978: LD_INT 33
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: ST_TO_ADDR
// if not tmp then
18998: LD_VAR 0 1
19002: NOT
19003: IFFALSE 19007
// exit ;
19005: GO 19044
// for i in tmp do
19007: LD_ADDR_VAR 0 2
19011: PUSH
19012: LD_VAR 0 1
19016: PUSH
19017: FOR_IN
19018: IFFALSE 19042
// if IsControledBy ( i ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 312
19029: IFFALSE 19040
// ComUnlink ( i ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 136
19040: GO 19017
19042: POP
19043: POP
// end ;
19044: PPOPN 2
19046: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19047: LD_EXP 27
19051: PUSH
19052: LD_EXP 58
19056: AND
19057: IFFALSE 19197
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
// begin ToLua ( displayPowell(); ) ;
19066: LD_STRING displayPowell();
19068: PPUSH
19069: CALL_OW 559
// uc_side := 0 ;
19073: LD_ADDR_OWVAR 20
19077: PUSH
19078: LD_INT 0
19080: ST_TO_ADDR
// uc_nation := 2 ;
19081: LD_ADDR_OWVAR 21
19085: PUSH
19086: LD_INT 2
19088: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19089: LD_ADDR_OWVAR 37
19093: PUSH
19094: LD_INT 14
19096: ST_TO_ADDR
// vc_engine := engine_siberite ;
19097: LD_ADDR_OWVAR 39
19101: PUSH
19102: LD_INT 3
19104: ST_TO_ADDR
// vc_control := control_apeman ;
19105: LD_ADDR_OWVAR 38
19109: PUSH
19110: LD_INT 5
19112: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19113: LD_ADDR_OWVAR 40
19117: PUSH
19118: LD_INT 29
19120: ST_TO_ADDR
// un := CreateVehicle ;
19121: LD_ADDR_VAR 0 2
19125: PUSH
19126: CALL_OW 45
19130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19131: LD_VAR 0 2
19135: PPUSH
19136: LD_INT 1
19138: PPUSH
19139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19143: LD_INT 35
19145: PPUSH
19146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19150: LD_VAR 0 2
19154: PPUSH
19155: LD_INT 22
19157: PUSH
19158: LD_OWVAR 2
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 69
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: CALL_OW 74
19181: PPUSH
19182: CALL_OW 115
// until IsDead ( un ) ;
19186: LD_VAR 0 2
19190: PPUSH
19191: CALL_OW 301
19195: IFFALSE 19143
// end ;
19197: PPOPN 2
19199: END
// every 0 0$1 trigger StreamModeActive and sStu do
19200: LD_EXP 27
19204: PUSH
19205: LD_EXP 66
19209: AND
19210: IFFALSE 19226
19212: GO 19214
19214: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19215: LD_STRING displayStucuk();
19217: PPUSH
19218: CALL_OW 559
// ResetFog ;
19222: CALL_OW 335
// end ;
19226: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19227: LD_EXP 27
19231: PUSH
19232: LD_EXP 59
19236: AND
19237: IFFALSE 19378
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19246: LD_ADDR_VAR 0 2
19250: PUSH
19251: LD_INT 22
19253: PUSH
19254: LD_OWVAR 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: ST_TO_ADDR
// if not tmp then
19282: LD_VAR 0 2
19286: NOT
19287: IFFALSE 19291
// exit ;
19289: GO 19378
// un := tmp [ rand ( 1 , tmp ) ] ;
19291: LD_ADDR_VAR 0 1
19295: PUSH
19296: LD_VAR 0 2
19300: PUSH
19301: LD_INT 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: CALL_OW 12
19313: ARRAY
19314: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19327: LD_VAR 0 1
19331: PPUSH
19332: LD_OWVAR 3
19336: PUSH
19337: LD_VAR 0 1
19341: DIFF
19342: PPUSH
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL_OW 74
19352: PPUSH
19353: CALL_OW 115
// wait ( 0 0$20 ) ;
19357: LD_INT 700
19359: PPUSH
19360: CALL_OW 67
// SetSide ( un , your_side ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_OWVAR 2
19373: PPUSH
19374: CALL_OW 235
// end ;
19378: PPOPN 2
19380: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19381: LD_EXP 27
19385: PUSH
19386: LD_EXP 60
19390: AND
19391: IFFALSE 19497
19393: GO 19395
19395: DISABLE
19396: LD_INT 0
19398: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19399: LD_ADDR_VAR 0 1
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_OWVAR 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 30
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 30
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// if not depot then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 19497
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19462: LD_VAR 0 1
19466: PUSH
19467: LD_INT 1
19469: ARRAY
19470: PPUSH
19471: CALL_OW 250
19475: PPUSH
19476: LD_VAR 0 1
19480: PUSH
19481: LD_INT 1
19483: ARRAY
19484: PPUSH
19485: CALL_OW 251
19489: PPUSH
19490: LD_INT 70
19492: PPUSH
19493: CALL_OW 495
// end ;
19497: PPOPN 1
19499: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19500: LD_EXP 27
19504: PUSH
19505: LD_EXP 61
19509: AND
19510: IFFALSE 19721
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19522: LD_ADDR_VAR 0 5
19526: PUSH
19527: LD_INT 22
19529: PUSH
19530: LD_OWVAR 2
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 21
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// if not tmp then
19558: LD_VAR 0 5
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19721
// for i in tmp do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: LD_VAR 0 5
19576: PUSH
19577: FOR_IN
19578: IFFALSE 19719
// begin d := rand ( 0 , 5 ) ;
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: LD_INT 0
19587: PPUSH
19588: LD_INT 5
19590: PPUSH
19591: CALL_OW 12
19595: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 250
19610: PPUSH
19611: LD_VAR 0 4
19615: PPUSH
19616: LD_INT 3
19618: PPUSH
19619: LD_INT 12
19621: PPUSH
19622: CALL_OW 12
19626: PPUSH
19627: CALL_OW 272
19631: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19632: LD_ADDR_VAR 0 3
19636: PUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL_OW 251
19646: PPUSH
19647: LD_VAR 0 4
19651: PPUSH
19652: LD_INT 3
19654: PPUSH
19655: LD_INT 12
19657: PPUSH
19658: CALL_OW 12
19662: PPUSH
19663: CALL_OW 273
19667: ST_TO_ADDR
// if ValidHex ( x , y ) then
19668: LD_VAR 0 2
19672: PPUSH
19673: LD_VAR 0 3
19677: PPUSH
19678: CALL_OW 488
19682: IFFALSE 19717
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_INT 3
19701: PPUSH
19702: LD_INT 6
19704: PPUSH
19705: CALL_OW 12
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 483
// end ;
19717: GO 19577
19719: POP
19720: POP
// end ;
19721: PPOPN 5
19723: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19724: LD_EXP 27
19728: PUSH
19729: LD_EXP 62
19733: AND
19734: IFFALSE 19828
19736: GO 19738
19738: DISABLE
19739: LD_INT 0
19741: PPUSH
19742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19743: LD_ADDR_VAR 0 2
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_OWVAR 2
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 32
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 2
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19828
// for i in tmp do
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_VAR 0 2
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19826
// SetFuel ( i , 0 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 240
19824: GO 19809
19826: POP
19827: POP
// end ;
19828: PPOPN 2
19830: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19831: LD_EXP 27
19835: PUSH
19836: LD_EXP 63
19840: AND
19841: IFFALSE 19907
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_OWVAR 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 30
19868: PUSH
19869: LD_INT 29
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 1
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 19907
// DestroyUnit ( tmp [ 1 ] ) ;
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: ARRAY
19902: PPUSH
19903: CALL_OW 65
// end ;
19907: PPOPN 1
19909: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19910: LD_EXP 27
19914: PUSH
19915: LD_EXP 65
19919: AND
19920: IFFALSE 20049
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
// begin uc_side := 0 ;
19928: LD_ADDR_OWVAR 20
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// uc_nation := nation_arabian ;
19936: LD_ADDR_OWVAR 21
19940: PUSH
19941: LD_INT 2
19943: ST_TO_ADDR
// hc_gallery :=  ;
19944: LD_ADDR_OWVAR 33
19948: PUSH
19949: LD_STRING 
19951: ST_TO_ADDR
// hc_name :=  ;
19952: LD_ADDR_OWVAR 26
19956: PUSH
19957: LD_STRING 
19959: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19960: LD_INT 1
19962: PPUSH
19963: LD_INT 11
19965: PPUSH
19966: LD_INT 10
19968: PPUSH
19969: CALL_OW 380
// un := CreateHuman ;
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: CALL_OW 44
19982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19983: LD_VAR 0 1
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 22
20009: PUSH
20010: LD_OWVAR 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PPUSH
20019: CALL_OW 69
20023: PPUSH
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 74
20033: PPUSH
20034: CALL_OW 115
// until IsDead ( un ) ;
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 301
20047: IFFALSE 19995
// end ;
20049: PPOPN 1
20051: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20052: LD_EXP 27
20056: PUSH
20057: LD_EXP 67
20061: AND
20062: IFFALSE 20074
20064: GO 20066
20066: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20067: LD_STRING earthquake(getX(game), 0, 32)
20069: PPUSH
20070: CALL_OW 559
20074: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20075: LD_EXP 27
20079: PUSH
20080: LD_EXP 68
20084: AND
20085: IFFALSE 20176
20087: GO 20089
20089: DISABLE
20090: LD_INT 0
20092: PPUSH
// begin enable ;
20093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20094: LD_ADDR_VAR 0 1
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_OWVAR 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 21
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 33
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: ST_TO_ADDR
// if not tmp then
20141: LD_VAR 0 1
20145: NOT
20146: IFFALSE 20150
// exit ;
20148: GO 20176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20150: LD_VAR 0 1
20154: PUSH
20155: LD_INT 1
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 234
// end ;
20176: PPOPN 1
20178: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20179: LD_EXP 27
20183: PUSH
20184: LD_EXP 69
20188: AND
20189: IFFALSE 20330
20191: GO 20193
20193: DISABLE
20194: LD_INT 0
20196: PPUSH
20197: PPUSH
20198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 22
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 25
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PPUSH
20230: CALL_OW 69
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 3
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20330
// un := tmp [ rand ( 1 , tmp ) ] ;
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 1
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: CALL_OW 12
20266: ARRAY
20267: ST_TO_ADDR
// if Crawls ( un ) then
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 318
20277: IFFALSE 20288
// ComWalk ( un ) ;
20279: LD_VAR 0 2
20283: PPUSH
20284: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20288: LD_VAR 0 2
20292: PPUSH
20293: LD_INT 9
20295: PPUSH
20296: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20300: LD_INT 28
20302: PPUSH
20303: LD_OWVAR 2
20307: PPUSH
20308: LD_INT 2
20310: PPUSH
20311: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20315: LD_INT 29
20317: PPUSH
20318: LD_OWVAR 2
20322: PPUSH
20323: LD_INT 2
20325: PPUSH
20326: CALL_OW 322
// end ;
20330: PPOPN 3
20332: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20333: LD_EXP 27
20337: PUSH
20338: LD_EXP 70
20342: AND
20343: IFFALSE 20454
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 3
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20454
// un := tmp [ rand ( 1 , tmp ) ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// if Crawls ( un ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 318
20431: IFFALSE 20442
// ComWalk ( un ) ;
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_INT 8
20449: PPUSH
20450: CALL_OW 336
// end ;
20454: PPOPN 3
20456: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20457: LD_EXP 27
20461: PUSH
20462: LD_EXP 71
20466: AND
20467: IFFALSE 20611
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20476: LD_ADDR_VAR 0 2
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_OWVAR 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 21
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 34
20508: PUSH
20509: LD_INT 12
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 34
20518: PUSH
20519: LD_INT 51
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 34
20528: PUSH
20529: LD_INT 32
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: PPUSH
20547: CALL_OW 69
20551: ST_TO_ADDR
// if not tmp then
20552: LD_VAR 0 2
20556: NOT
20557: IFFALSE 20561
// exit ;
20559: GO 20611
// for i in tmp do
20561: LD_ADDR_VAR 0 1
20565: PUSH
20566: LD_VAR 0 2
20570: PUSH
20571: FOR_IN
20572: IFFALSE 20609
// if GetCargo ( i , mat_artifact ) = 0 then
20574: LD_VAR 0 1
20578: PPUSH
20579: LD_INT 4
20581: PPUSH
20582: CALL_OW 289
20586: PUSH
20587: LD_INT 0
20589: EQUAL
20590: IFFALSE 20607
// SetCargo ( i , mat_siberit , 100 ) ;
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_INT 3
20599: PPUSH
20600: LD_INT 100
20602: PPUSH
20603: CALL_OW 290
20607: GO 20571
20609: POP
20610: POP
// end ;
20611: PPOPN 2
20613: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20614: LD_EXP 27
20618: PUSH
20619: LD_EXP 72
20623: AND
20624: IFFALSE 20807
20626: GO 20628
20628: DISABLE
20629: LD_INT 0
20631: PPUSH
20632: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 22
20640: PUSH
20641: LD_OWVAR 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: CALL_OW 69
20654: ST_TO_ADDR
// if not tmp then
20655: LD_VAR 0 2
20659: NOT
20660: IFFALSE 20664
// exit ;
20662: GO 20807
// for i := 1 to 2 do
20664: LD_ADDR_VAR 0 1
20668: PUSH
20669: DOUBLE
20670: LD_INT 1
20672: DEC
20673: ST_TO_ADDR
20674: LD_INT 2
20676: PUSH
20677: FOR_TO
20678: IFFALSE 20805
// begin uc_side := your_side ;
20680: LD_ADDR_OWVAR 20
20684: PUSH
20685: LD_OWVAR 2
20689: ST_TO_ADDR
// uc_nation := nation_american ;
20690: LD_ADDR_OWVAR 21
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// vc_chassis := us_morphling ;
20698: LD_ADDR_OWVAR 37
20702: PUSH
20703: LD_INT 5
20705: ST_TO_ADDR
// vc_engine := engine_siberite ;
20706: LD_ADDR_OWVAR 39
20710: PUSH
20711: LD_INT 3
20713: ST_TO_ADDR
// vc_control := control_computer ;
20714: LD_ADDR_OWVAR 38
20718: PUSH
20719: LD_INT 3
20721: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20722: LD_ADDR_OWVAR 40
20726: PUSH
20727: LD_INT 10
20729: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20730: LD_VAR 0 2
20734: PUSH
20735: LD_INT 1
20737: ARRAY
20738: PPUSH
20739: CALL_OW 310
20743: NOT
20744: IFFALSE 20791
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20746: CALL_OW 45
20750: PPUSH
20751: LD_VAR 0 2
20755: PUSH
20756: LD_INT 1
20758: ARRAY
20759: PPUSH
20760: CALL_OW 250
20764: PPUSH
20765: LD_VAR 0 2
20769: PUSH
20770: LD_INT 1
20772: ARRAY
20773: PPUSH
20774: CALL_OW 251
20778: PPUSH
20779: LD_INT 12
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 50
20789: GO 20803
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20791: CALL_OW 45
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 51
// end ;
20803: GO 20677
20805: POP
20806: POP
// end ;
20807: PPOPN 2
20809: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20810: LD_EXP 27
20814: PUSH
20815: LD_EXP 73
20819: AND
20820: IFFALSE 21042
20822: GO 20824
20824: DISABLE
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20833: LD_ADDR_VAR 0 6
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_OWVAR 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 3
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: ST_TO_ADDR
// if not tmp then
20887: LD_VAR 0 6
20891: NOT
20892: IFFALSE 20896
// exit ;
20894: GO 21042
// s1 := rand ( 1 , 4 ) ;
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_INT 1
20903: PPUSH
20904: LD_INT 4
20906: PPUSH
20907: CALL_OW 12
20911: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20912: LD_ADDR_VAR 0 4
20916: PUSH
20917: LD_VAR 0 6
20921: PUSH
20922: LD_INT 1
20924: ARRAY
20925: PPUSH
20926: LD_VAR 0 2
20930: PPUSH
20931: CALL_OW 259
20935: ST_TO_ADDR
// if s1 = 1 then
20936: LD_VAR 0 2
20940: PUSH
20941: LD_INT 1
20943: EQUAL
20944: IFFALSE 20964
// s2 := rand ( 2 , 4 ) else
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 2
20953: PPUSH
20954: LD_INT 4
20956: PPUSH
20957: CALL_OW 12
20961: ST_TO_ADDR
20962: GO 20972
// s2 := 1 ;
20964: LD_ADDR_VAR 0 3
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20972: LD_ADDR_VAR 0 5
20976: PUSH
20977: LD_VAR 0 6
20981: PUSH
20982: LD_INT 1
20984: ARRAY
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: CALL_OW 259
20995: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20996: LD_VAR 0 6
21000: PUSH
21001: LD_INT 1
21003: ARRAY
21004: PPUSH
21005: LD_VAR 0 2
21009: PPUSH
21010: LD_VAR 0 5
21014: PPUSH
21015: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21019: LD_VAR 0 6
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 3
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: CALL_OW 237
// end ;
21042: PPOPN 6
21044: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21045: LD_EXP 27
21049: PUSH
21050: LD_EXP 74
21054: AND
21055: IFFALSE 21134
21057: GO 21059
21059: DISABLE
21060: LD_INT 0
21062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_OWVAR 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 30
21082: PUSH
21083: LD_INT 3
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: ST_TO_ADDR
// if not tmp then
21099: LD_VAR 0 1
21103: NOT
21104: IFFALSE 21108
// exit ;
21106: GO 21134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21108: LD_VAR 0 1
21112: PUSH
21113: LD_INT 1
21115: PPUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 12
21125: ARRAY
21126: PPUSH
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 234
// end ;
21134: PPOPN 1
21136: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21137: LD_EXP 27
21141: PUSH
21142: LD_EXP 75
21146: AND
21147: IFFALSE 21259
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_OWVAR 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 30
21178: PUSH
21179: LD_INT 27
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 30
21188: PUSH
21189: LD_INT 26
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 28
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 2
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21259
// for i in tmp do
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: LD_VAR 0 2
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21257
// SetLives ( i , 1 ) ;
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 234
21255: GO 21240
21257: POP
21258: POP
// end ;
21259: PPOPN 2
21261: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21262: LD_EXP 27
21266: PUSH
21267: LD_EXP 76
21271: AND
21272: IFFALSE 21559
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
// begin i := rand ( 1 , 7 ) ;
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: LD_INT 1
21289: PPUSH
21290: LD_INT 7
21292: PPUSH
21293: CALL_OW 12
21297: ST_TO_ADDR
// case i of 1 :
21298: LD_VAR 0 1
21302: PUSH
21303: LD_INT 1
21305: DOUBLE
21306: EQUAL
21307: IFTRUE 21311
21309: GO 21321
21311: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21312: LD_STRING earthquake(getX(game), 0, 32)
21314: PPUSH
21315: CALL_OW 559
21319: GO 21559
21321: LD_INT 2
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21343
21329: POP
// begin ToLua ( displayStucuk(); ) ;
21330: LD_STRING displayStucuk();
21332: PPUSH
21333: CALL_OW 559
// ResetFog ;
21337: CALL_OW 335
// end ; 3 :
21341: GO 21559
21343: LD_INT 3
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21455
21351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_OWVAR 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 25
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 69
21387: ST_TO_ADDR
// if not tmp then
21388: LD_VAR 0 2
21392: NOT
21393: IFFALSE 21397
// exit ;
21395: GO 21559
// un := tmp [ rand ( 1 , tmp ) ] ;
21397: LD_ADDR_VAR 0 3
21401: PUSH
21402: LD_VAR 0 2
21406: PUSH
21407: LD_INT 1
21409: PPUSH
21410: LD_VAR 0 2
21414: PPUSH
21415: CALL_OW 12
21419: ARRAY
21420: ST_TO_ADDR
// if Crawls ( un ) then
21421: LD_VAR 0 3
21425: PPUSH
21426: CALL_OW 318
21430: IFFALSE 21441
// ComWalk ( un ) ;
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21441: LD_VAR 0 3
21445: PPUSH
21446: LD_INT 8
21448: PPUSH
21449: CALL_OW 336
// end ; 4 :
21453: GO 21559
21455: LD_INT 4
21457: DOUBLE
21458: EQUAL
21459: IFTRUE 21463
21461: GO 21537
21463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_INT 22
21471: PUSH
21472: LD_OWVAR 2
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 30
21483: PUSH
21484: LD_INT 29
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: ST_TO_ADDR
// if not tmp then
21500: LD_VAR 0 2
21504: NOT
21505: IFFALSE 21509
// exit ;
21507: GO 21559
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21509: LD_VAR 0 2
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21522: LD_VAR 0 2
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: CALL_OW 65
// end ; 5 .. 7 :
21535: GO 21559
21537: LD_INT 5
21539: DOUBLE
21540: GREATEREQUAL
21541: IFFALSE 21549
21543: LD_INT 7
21545: DOUBLE
21546: LESSEQUAL
21547: IFTRUE 21551
21549: GO 21558
21551: POP
// StreamSibBomb ; end ;
21552: CALL 17796 0 0
21556: GO 21559
21558: POP
// end ;
21559: PPOPN 3
21561: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21562: LD_EXP 27
21566: PUSH
21567: LD_EXP 77
21571: AND
21572: IFFALSE 21728
21574: GO 21576
21576: DISABLE
21577: LD_INT 0
21579: PPUSH
21580: PPUSH
21581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21582: LD_ADDR_VAR 0 2
21586: PUSH
21587: LD_INT 81
21589: PUSH
21590: LD_OWVAR 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 69
21635: ST_TO_ADDR
// if not tmp then
21636: LD_VAR 0 2
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 21728
// p := 0 ;
21645: LD_ADDR_VAR 0 3
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21653: LD_INT 35
21655: PPUSH
21656: CALL_OW 67
// p := p + 1 ;
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 1
21672: PLUS
21673: ST_TO_ADDR
// for i in tmp do
21674: LD_ADDR_VAR 0 1
21678: PUSH
21679: LD_VAR 0 2
21683: PUSH
21684: FOR_IN
21685: IFFALSE 21716
// if GetLives ( i ) < 1000 then
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 256
21696: PUSH
21697: LD_INT 1000
21699: LESS
21700: IFFALSE 21714
// SetLives ( i , 1000 ) ;
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_INT 1000
21709: PPUSH
21710: CALL_OW 234
21714: GO 21684
21716: POP
21717: POP
// until p > 20 ;
21718: LD_VAR 0 3
21722: PUSH
21723: LD_INT 20
21725: GREATER
21726: IFFALSE 21653
// end ;
21728: PPOPN 3
21730: END
// every 0 0$1 trigger StreamModeActive and sTime do
21731: LD_EXP 27
21735: PUSH
21736: LD_EXP 78
21740: AND
21741: IFFALSE 21776
21743: GO 21745
21745: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21746: LD_INT 28
21748: PPUSH
21749: LD_OWVAR 2
21753: PPUSH
21754: LD_INT 2
21756: PPUSH
21757: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21761: LD_INT 30
21763: PPUSH
21764: LD_OWVAR 2
21768: PPUSH
21769: LD_INT 2
21771: PPUSH
21772: CALL_OW 322
// end ;
21776: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21777: LD_EXP 27
21781: PUSH
21782: LD_EXP 79
21786: AND
21787: IFFALSE 21908
21789: GO 21791
21791: DISABLE
21792: LD_INT 0
21794: PPUSH
21795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_OWVAR 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 21
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: LD_INT 23
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: PPUSH
21845: CALL_OW 69
21849: ST_TO_ADDR
// if not tmp then
21850: LD_VAR 0 2
21854: NOT
21855: IFFALSE 21859
// exit ;
21857: GO 21908
// for i in tmp do
21859: LD_ADDR_VAR 0 1
21863: PUSH
21864: LD_VAR 0 2
21868: PUSH
21869: FOR_IN
21870: IFFALSE 21906
// begin if Crawls ( i ) then
21872: LD_VAR 0 1
21876: PPUSH
21877: CALL_OW 318
21881: IFFALSE 21892
// ComWalk ( i ) ;
21883: LD_VAR 0 1
21887: PPUSH
21888: CALL_OW 138
// SetClass ( i , 2 ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 2
21899: PPUSH
21900: CALL_OW 336
// end ;
21904: GO 21869
21906: POP
21907: POP
// end ;
21908: PPOPN 2
21910: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21911: LD_EXP 27
21915: PUSH
21916: LD_EXP 80
21920: AND
21921: IFFALSE 22209
21923: GO 21925
21925: DISABLE
21926: LD_INT 0
21928: PPUSH
21929: PPUSH
21930: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21931: LD_OWVAR 2
21935: PPUSH
21936: LD_INT 9
21938: PPUSH
21939: LD_INT 1
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21949: LD_INT 9
21951: PPUSH
21952: LD_OWVAR 2
21956: PPUSH
21957: CALL_OW 343
// uc_side := 9 ;
21961: LD_ADDR_OWVAR 20
21965: PUSH
21966: LD_INT 9
21968: ST_TO_ADDR
// uc_nation := 2 ;
21969: LD_ADDR_OWVAR 21
21973: PUSH
21974: LD_INT 2
21976: ST_TO_ADDR
// hc_name := Dark Warrior ;
21977: LD_ADDR_OWVAR 26
21981: PUSH
21982: LD_STRING Dark Warrior
21984: ST_TO_ADDR
// hc_gallery :=  ;
21985: LD_ADDR_OWVAR 33
21989: PUSH
21990: LD_STRING 
21992: ST_TO_ADDR
// hc_noskilllimit := true ;
21993: LD_ADDR_OWVAR 76
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22001: LD_ADDR_OWVAR 31
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 30
22014: PUSH
22015: LD_INT 30
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: ST_TO_ADDR
// un := CreateHuman ;
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: CALL_OW 44
22033: ST_TO_ADDR
// hc_noskilllimit := false ;
22034: LD_ADDR_OWVAR 76
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22042: LD_VAR 0 3
22046: PPUSH
22047: LD_INT 1
22049: PPUSH
22050: CALL_OW 51
// ToLua ( playRanger() ) ;
22054: LD_STRING playRanger()
22056: PPUSH
22057: CALL_OW 559
// p := 0 ;
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22069: LD_INT 35
22071: PPUSH
22072: CALL_OW 67
// p := p + 1 ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_VAR 0 2
22085: PUSH
22086: LD_INT 1
22088: PLUS
22089: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22090: LD_VAR 0 3
22094: PPUSH
22095: CALL_OW 256
22099: PUSH
22100: LD_INT 1000
22102: LESS
22103: IFFALSE 22117
// SetLives ( un , 1000 ) ;
22105: LD_VAR 0 3
22109: PPUSH
22110: LD_INT 1000
22112: PPUSH
22113: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22117: LD_VAR 0 3
22121: PPUSH
22122: LD_INT 81
22124: PUSH
22125: LD_OWVAR 2
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 91
22136: PUSH
22137: LD_VAR 0 3
22141: PUSH
22142: LD_INT 30
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: PPUSH
22159: LD_VAR 0 3
22163: PPUSH
22164: CALL_OW 74
22168: PPUSH
22169: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22173: LD_VAR 0 2
22177: PUSH
22178: LD_INT 80
22180: GREATER
22181: PUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: CALL_OW 301
22191: OR
22192: IFFALSE 22069
// if un then
22194: LD_VAR 0 3
22198: IFFALSE 22209
// RemoveUnit ( un ) ;
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 64
// end ;
22209: PPOPN 3
22211: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22212: LD_EXP 81
22216: IFFALSE 22332
22218: GO 22220
22220: DISABLE
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
22225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 81
22233: PUSH
22234: LD_OWVAR 2
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 21
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 69
22261: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22262: LD_STRING playComputer()
22264: PPUSH
22265: CALL_OW 559
// if not tmp then
22269: LD_VAR 0 2
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22332
// for i in tmp do
22278: LD_ADDR_VAR 0 1
22282: PUSH
22283: LD_VAR 0 2
22287: PUSH
22288: FOR_IN
22289: IFFALSE 22330
// for j := 1 to 4 do
22291: LD_ADDR_VAR 0 3
22295: PUSH
22296: DOUBLE
22297: LD_INT 1
22299: DEC
22300: ST_TO_ADDR
22301: LD_INT 4
22303: PUSH
22304: FOR_TO
22305: IFFALSE 22326
// SetSkill ( i , j , 10 ) ;
22307: LD_VAR 0 1
22311: PPUSH
22312: LD_VAR 0 3
22316: PPUSH
22317: LD_INT 10
22319: PPUSH
22320: CALL_OW 237
22324: GO 22304
22326: POP
22327: POP
22328: GO 22288
22330: POP
22331: POP
// end ;
22332: PPOPN 3
22334: END
// every 0 0$1 trigger s30 do var i , tmp ;
22335: LD_EXP 82
22339: IFFALSE 22408
22341: GO 22343
22343: DISABLE
22344: LD_INT 0
22346: PPUSH
22347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_INT 22
22355: PUSH
22356: LD_OWVAR 2
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PPUSH
22365: CALL_OW 69
22369: ST_TO_ADDR
// if not tmp then
22370: LD_VAR 0 2
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22408
// for i in tmp do
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: LD_VAR 0 2
22388: PUSH
22389: FOR_IN
22390: IFFALSE 22406
// SetLives ( i , 300 ) ;
22392: LD_VAR 0 1
22396: PPUSH
22397: LD_INT 300
22399: PPUSH
22400: CALL_OW 234
22404: GO 22389
22406: POP
22407: POP
// end ;
22408: PPOPN 2
22410: END
// every 0 0$1 trigger s60 do var i , tmp ;
22411: LD_EXP 83
22415: IFFALSE 22484
22417: GO 22419
22419: DISABLE
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: LD_INT 22
22431: PUSH
22432: LD_OWVAR 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 69
22445: ST_TO_ADDR
// if not tmp then
22446: LD_VAR 0 2
22450: NOT
22451: IFFALSE 22455
// exit ;
22453: GO 22484
// for i in tmp do
22455: LD_ADDR_VAR 0 1
22459: PUSH
22460: LD_VAR 0 2
22464: PUSH
22465: FOR_IN
22466: IFFALSE 22482
// SetLives ( i , 600 ) ;
22468: LD_VAR 0 1
22472: PPUSH
22473: LD_INT 600
22475: PPUSH
22476: CALL_OW 234
22480: GO 22465
22482: POP
22483: POP
// end ;
22484: PPOPN 2
22486: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22487: LD_INT 0
22489: PPUSH
// case cmd of 301 :
22490: LD_VAR 0 1
22494: PUSH
22495: LD_INT 301
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22535
22503: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22504: LD_VAR 0 6
22508: PPUSH
22509: LD_VAR 0 7
22513: PPUSH
22514: LD_VAR 0 8
22518: PPUSH
22519: LD_VAR 0 4
22523: PPUSH
22524: LD_VAR 0 5
22528: PPUSH
22529: CALL 23736 0 5
22533: GO 22656
22535: LD_INT 302
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22580
22543: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22544: LD_VAR 0 6
22548: PPUSH
22549: LD_VAR 0 7
22553: PPUSH
22554: LD_VAR 0 8
22558: PPUSH
22559: LD_VAR 0 9
22563: PPUSH
22564: LD_VAR 0 4
22568: PPUSH
22569: LD_VAR 0 5
22573: PPUSH
22574: CALL 23827 0 6
22578: GO 22656
22580: LD_INT 303
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22625
22588: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22589: LD_VAR 0 6
22593: PPUSH
22594: LD_VAR 0 7
22598: PPUSH
22599: LD_VAR 0 8
22603: PPUSH
22604: LD_VAR 0 9
22608: PPUSH
22609: LD_VAR 0 4
22613: PPUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: CALL 22661 0 6
22623: GO 22656
22625: LD_INT 304
22627: DOUBLE
22628: EQUAL
22629: IFTRUE 22633
22631: GO 22655
22633: POP
// hHackTeleport ( unit , x , y ) ; end ;
22634: LD_VAR 0 2
22638: PPUSH
22639: LD_VAR 0 4
22643: PPUSH
22644: LD_VAR 0 5
22648: PPUSH
22649: CALL 24420 0 3
22653: GO 22656
22655: POP
// end ;
22656: LD_VAR 0 12
22660: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22665: LD_VAR 0 1
22669: PUSH
22670: LD_INT 1
22672: LESS
22673: PUSH
22674: LD_VAR 0 1
22678: PUSH
22679: LD_INT 3
22681: GREATER
22682: OR
22683: PUSH
22684: LD_VAR 0 5
22688: PPUSH
22689: LD_VAR 0 6
22693: PPUSH
22694: CALL_OW 428
22698: OR
22699: IFFALSE 22703
// exit ;
22701: GO 23423
// uc_side := your_side ;
22703: LD_ADDR_OWVAR 20
22707: PUSH
22708: LD_OWVAR 2
22712: ST_TO_ADDR
// uc_nation := nation ;
22713: LD_ADDR_OWVAR 21
22717: PUSH
22718: LD_VAR 0 1
22722: ST_TO_ADDR
// bc_level = 1 ;
22723: LD_ADDR_OWVAR 43
22727: PUSH
22728: LD_INT 1
22730: ST_TO_ADDR
// case btype of 1 :
22731: LD_VAR 0 2
22735: PUSH
22736: LD_INT 1
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22755
22744: POP
// bc_type := b_depot ; 2 :
22745: LD_ADDR_OWVAR 42
22749: PUSH
22750: LD_INT 0
22752: ST_TO_ADDR
22753: GO 23367
22755: LD_INT 2
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22774
22763: POP
// bc_type := b_warehouse ; 3 :
22764: LD_ADDR_OWVAR 42
22768: PUSH
22769: LD_INT 1
22771: ST_TO_ADDR
22772: GO 23367
22774: LD_INT 3
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 22793
22782: POP
// bc_type := b_lab ; 4 .. 9 :
22783: LD_ADDR_OWVAR 42
22787: PUSH
22788: LD_INT 6
22790: ST_TO_ADDR
22791: GO 23367
22793: LD_INT 4
22795: DOUBLE
22796: GREATEREQUAL
22797: IFFALSE 22805
22799: LD_INT 9
22801: DOUBLE
22802: LESSEQUAL
22803: IFTRUE 22807
22805: GO 22859
22807: POP
// begin bc_type := b_lab_half ;
22808: LD_ADDR_OWVAR 42
22812: PUSH
22813: LD_INT 7
22815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22816: LD_ADDR_OWVAR 44
22820: PUSH
22821: LD_INT 10
22823: PUSH
22824: LD_INT 11
22826: PUSH
22827: LD_INT 12
22829: PUSH
22830: LD_INT 15
22832: PUSH
22833: LD_INT 14
22835: PUSH
22836: LD_INT 13
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PUSH
22847: LD_VAR 0 2
22851: PUSH
22852: LD_INT 3
22854: MINUS
22855: ARRAY
22856: ST_TO_ADDR
// end ; 10 .. 13 :
22857: GO 23367
22859: LD_INT 10
22861: DOUBLE
22862: GREATEREQUAL
22863: IFFALSE 22871
22865: LD_INT 13
22867: DOUBLE
22868: LESSEQUAL
22869: IFTRUE 22873
22871: GO 22950
22873: POP
// begin bc_type := b_lab_full ;
22874: LD_ADDR_OWVAR 42
22878: PUSH
22879: LD_INT 8
22881: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22882: LD_ADDR_OWVAR 44
22886: PUSH
22887: LD_INT 10
22889: PUSH
22890: LD_INT 12
22892: PUSH
22893: LD_INT 14
22895: PUSH
22896: LD_INT 13
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: PUSH
22905: LD_VAR 0 2
22909: PUSH
22910: LD_INT 9
22912: MINUS
22913: ARRAY
22914: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22915: LD_ADDR_OWVAR 45
22919: PUSH
22920: LD_INT 11
22922: PUSH
22923: LD_INT 15
22925: PUSH
22926: LD_INT 12
22928: PUSH
22929: LD_INT 15
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: PUSH
22938: LD_VAR 0 2
22942: PUSH
22943: LD_INT 9
22945: MINUS
22946: ARRAY
22947: ST_TO_ADDR
// end ; 14 :
22948: GO 23367
22950: LD_INT 14
22952: DOUBLE
22953: EQUAL
22954: IFTRUE 22958
22956: GO 22969
22958: POP
// bc_type := b_workshop ; 15 :
22959: LD_ADDR_OWVAR 42
22963: PUSH
22964: LD_INT 2
22966: ST_TO_ADDR
22967: GO 23367
22969: LD_INT 15
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 22988
22977: POP
// bc_type := b_factory ; 16 :
22978: LD_ADDR_OWVAR 42
22982: PUSH
22983: LD_INT 3
22985: ST_TO_ADDR
22986: GO 23367
22988: LD_INT 16
22990: DOUBLE
22991: EQUAL
22992: IFTRUE 22996
22994: GO 23007
22996: POP
// bc_type := b_ext_gun ; 17 :
22997: LD_ADDR_OWVAR 42
23001: PUSH
23002: LD_INT 17
23004: ST_TO_ADDR
23005: GO 23367
23007: LD_INT 17
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23043
23015: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23016: LD_ADDR_OWVAR 42
23020: PUSH
23021: LD_INT 19
23023: PUSH
23024: LD_INT 23
23026: PUSH
23027: LD_INT 19
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: PUSH
23035: LD_VAR 0 1
23039: ARRAY
23040: ST_TO_ADDR
23041: GO 23367
23043: LD_INT 18
23045: DOUBLE
23046: EQUAL
23047: IFTRUE 23051
23049: GO 23062
23051: POP
// bc_type := b_ext_radar ; 19 :
23052: LD_ADDR_OWVAR 42
23056: PUSH
23057: LD_INT 20
23059: ST_TO_ADDR
23060: GO 23367
23062: LD_INT 19
23064: DOUBLE
23065: EQUAL
23066: IFTRUE 23070
23068: GO 23081
23070: POP
// bc_type := b_ext_radio ; 20 :
23071: LD_ADDR_OWVAR 42
23075: PUSH
23076: LD_INT 22
23078: ST_TO_ADDR
23079: GO 23367
23081: LD_INT 20
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23100
23089: POP
// bc_type := b_ext_siberium ; 21 :
23090: LD_ADDR_OWVAR 42
23094: PUSH
23095: LD_INT 21
23097: ST_TO_ADDR
23098: GO 23367
23100: LD_INT 21
23102: DOUBLE
23103: EQUAL
23104: IFTRUE 23108
23106: GO 23119
23108: POP
// bc_type := b_ext_computer ; 22 :
23109: LD_ADDR_OWVAR 42
23113: PUSH
23114: LD_INT 24
23116: ST_TO_ADDR
23117: GO 23367
23119: LD_INT 22
23121: DOUBLE
23122: EQUAL
23123: IFTRUE 23127
23125: GO 23138
23127: POP
// bc_type := b_ext_track ; 23 :
23128: LD_ADDR_OWVAR 42
23132: PUSH
23133: LD_INT 16
23135: ST_TO_ADDR
23136: GO 23367
23138: LD_INT 23
23140: DOUBLE
23141: EQUAL
23142: IFTRUE 23146
23144: GO 23157
23146: POP
// bc_type := b_ext_laser ; 24 :
23147: LD_ADDR_OWVAR 42
23151: PUSH
23152: LD_INT 25
23154: ST_TO_ADDR
23155: GO 23367
23157: LD_INT 24
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23176
23165: POP
// bc_type := b_control_tower ; 25 :
23166: LD_ADDR_OWVAR 42
23170: PUSH
23171: LD_INT 36
23173: ST_TO_ADDR
23174: GO 23367
23176: LD_INT 25
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23195
23184: POP
// bc_type := b_breastwork ; 26 :
23185: LD_ADDR_OWVAR 42
23189: PUSH
23190: LD_INT 31
23192: ST_TO_ADDR
23193: GO 23367
23195: LD_INT 26
23197: DOUBLE
23198: EQUAL
23199: IFTRUE 23203
23201: GO 23214
23203: POP
// bc_type := b_bunker ; 27 :
23204: LD_ADDR_OWVAR 42
23208: PUSH
23209: LD_INT 32
23211: ST_TO_ADDR
23212: GO 23367
23214: LD_INT 27
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23233
23222: POP
// bc_type := b_turret ; 28 :
23223: LD_ADDR_OWVAR 42
23227: PUSH
23228: LD_INT 33
23230: ST_TO_ADDR
23231: GO 23367
23233: LD_INT 28
23235: DOUBLE
23236: EQUAL
23237: IFTRUE 23241
23239: GO 23252
23241: POP
// bc_type := b_armoury ; 29 :
23242: LD_ADDR_OWVAR 42
23246: PUSH
23247: LD_INT 4
23249: ST_TO_ADDR
23250: GO 23367
23252: LD_INT 29
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 23271
23260: POP
// bc_type := b_barracks ; 30 :
23261: LD_ADDR_OWVAR 42
23265: PUSH
23266: LD_INT 5
23268: ST_TO_ADDR
23269: GO 23367
23271: LD_INT 30
23273: DOUBLE
23274: EQUAL
23275: IFTRUE 23279
23277: GO 23290
23279: POP
// bc_type := b_solar_power ; 31 :
23280: LD_ADDR_OWVAR 42
23284: PUSH
23285: LD_INT 27
23287: ST_TO_ADDR
23288: GO 23367
23290: LD_INT 31
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23309
23298: POP
// bc_type := b_oil_power ; 32 :
23299: LD_ADDR_OWVAR 42
23303: PUSH
23304: LD_INT 26
23306: ST_TO_ADDR
23307: GO 23367
23309: LD_INT 32
23311: DOUBLE
23312: EQUAL
23313: IFTRUE 23317
23315: GO 23328
23317: POP
// bc_type := b_siberite_power ; 33 :
23318: LD_ADDR_OWVAR 42
23322: PUSH
23323: LD_INT 28
23325: ST_TO_ADDR
23326: GO 23367
23328: LD_INT 33
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23347
23336: POP
// bc_type := b_oil_mine ; 34 :
23337: LD_ADDR_OWVAR 42
23341: PUSH
23342: LD_INT 29
23344: ST_TO_ADDR
23345: GO 23367
23347: LD_INT 34
23349: DOUBLE
23350: EQUAL
23351: IFTRUE 23355
23353: GO 23366
23355: POP
// bc_type := b_siberite_mine ; end ;
23356: LD_ADDR_OWVAR 42
23360: PUSH
23361: LD_INT 30
23363: ST_TO_ADDR
23364: GO 23367
23366: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23367: LD_ADDR_VAR 0 8
23371: PUSH
23372: LD_VAR 0 5
23376: PPUSH
23377: LD_VAR 0 6
23381: PPUSH
23382: LD_VAR 0 3
23386: PPUSH
23387: CALL_OW 47
23391: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23392: LD_OWVAR 42
23396: PUSH
23397: LD_INT 32
23399: PUSH
23400: LD_INT 33
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: IN
23407: IFFALSE 23423
// PlaceWeaponTurret ( b , weapon ) ;
23409: LD_VAR 0 8
23413: PPUSH
23414: LD_VAR 0 4
23418: PPUSH
23419: CALL_OW 431
// end ;
23423: LD_VAR 0 7
23427: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23428: LD_INT 0
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23434: LD_ADDR_VAR 0 4
23438: PUSH
23439: LD_INT 22
23441: PUSH
23442: LD_OWVAR 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 30
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL_OW 69
23487: ST_TO_ADDR
// if not tmp then
23488: LD_VAR 0 4
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23556
// for i in tmp do
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_VAR 0 4
23506: PUSH
23507: FOR_IN
23508: IFFALSE 23554
// for j = 1 to 3 do
23510: LD_ADDR_VAR 0 3
23514: PUSH
23515: DOUBLE
23516: LD_INT 1
23518: DEC
23519: ST_TO_ADDR
23520: LD_INT 3
23522: PUSH
23523: FOR_TO
23524: IFFALSE 23550
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23526: LD_VAR 0 2
23530: PPUSH
23531: CALL_OW 274
23535: PPUSH
23536: LD_VAR 0 3
23540: PPUSH
23541: LD_INT 99999
23543: PPUSH
23544: CALL_OW 277
23548: GO 23523
23550: POP
23551: POP
23552: GO 23507
23554: POP
23555: POP
// end ;
23556: LD_VAR 0 1
23560: RET
// export function hHackSetLevel10 ; var i , j ; begin
23561: LD_INT 0
23563: PPUSH
23564: PPUSH
23565: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23566: LD_ADDR_VAR 0 2
23570: PUSH
23571: LD_INT 21
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: PUSH
23586: FOR_IN
23587: IFFALSE 23639
// if IsSelected ( i ) then
23589: LD_VAR 0 2
23593: PPUSH
23594: CALL_OW 306
23598: IFFALSE 23637
// begin for j := 1 to 4 do
23600: LD_ADDR_VAR 0 3
23604: PUSH
23605: DOUBLE
23606: LD_INT 1
23608: DEC
23609: ST_TO_ADDR
23610: LD_INT 4
23612: PUSH
23613: FOR_TO
23614: IFFALSE 23635
// SetSkill ( i , j , 10 ) ;
23616: LD_VAR 0 2
23620: PPUSH
23621: LD_VAR 0 3
23625: PPUSH
23626: LD_INT 10
23628: PPUSH
23629: CALL_OW 237
23633: GO 23613
23635: POP
23636: POP
// end ;
23637: GO 23586
23639: POP
23640: POP
// end ;
23641: LD_VAR 0 1
23645: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23646: LD_INT 0
23648: PPUSH
23649: PPUSH
23650: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23651: LD_ADDR_VAR 0 2
23655: PUSH
23656: LD_INT 22
23658: PUSH
23659: LD_OWVAR 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 21
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 69
23686: PUSH
23687: FOR_IN
23688: IFFALSE 23729
// begin for j := 1 to 4 do
23690: LD_ADDR_VAR 0 3
23694: PUSH
23695: DOUBLE
23696: LD_INT 1
23698: DEC
23699: ST_TO_ADDR
23700: LD_INT 4
23702: PUSH
23703: FOR_TO
23704: IFFALSE 23725
// SetSkill ( i , j , 10 ) ;
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 10
23718: PPUSH
23719: CALL_OW 237
23723: GO 23703
23725: POP
23726: POP
// end ;
23727: GO 23687
23729: POP
23730: POP
// end ;
23731: LD_VAR 0 1
23735: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23736: LD_INT 0
23738: PPUSH
// uc_side := your_side ;
23739: LD_ADDR_OWVAR 20
23743: PUSH
23744: LD_OWVAR 2
23748: ST_TO_ADDR
// uc_nation := nation ;
23749: LD_ADDR_OWVAR 21
23753: PUSH
23754: LD_VAR 0 1
23758: ST_TO_ADDR
// InitHc ;
23759: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23763: LD_INT 0
23765: PPUSH
23766: LD_VAR 0 2
23770: PPUSH
23771: LD_VAR 0 3
23775: PPUSH
23776: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23780: LD_VAR 0 4
23784: PPUSH
23785: LD_VAR 0 5
23789: PPUSH
23790: CALL_OW 428
23794: PUSH
23795: LD_INT 0
23797: EQUAL
23798: IFFALSE 23822
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23800: CALL_OW 44
23804: PPUSH
23805: LD_VAR 0 4
23809: PPUSH
23810: LD_VAR 0 5
23814: PPUSH
23815: LD_INT 1
23817: PPUSH
23818: CALL_OW 48
// end ;
23822: LD_VAR 0 6
23826: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23827: LD_INT 0
23829: PPUSH
23830: PPUSH
// uc_side := your_side ;
23831: LD_ADDR_OWVAR 20
23835: PUSH
23836: LD_OWVAR 2
23840: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23841: LD_VAR 0 1
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: LD_INT 4
23857: PUSH
23858: LD_INT 5
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: IN
23868: IFFALSE 23880
// uc_nation := nation_american else
23870: LD_ADDR_OWVAR 21
23874: PUSH
23875: LD_INT 1
23877: ST_TO_ADDR
23878: GO 23923
// if chassis in [ 11 , 12 , 13 , 14 ] then
23880: LD_VAR 0 1
23884: PUSH
23885: LD_INT 11
23887: PUSH
23888: LD_INT 12
23890: PUSH
23891: LD_INT 13
23893: PUSH
23894: LD_INT 14
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: IN
23903: IFFALSE 23915
// uc_nation := nation_arabian else
23905: LD_ADDR_OWVAR 21
23909: PUSH
23910: LD_INT 2
23912: ST_TO_ADDR
23913: GO 23923
// uc_nation := nation_russian ;
23915: LD_ADDR_OWVAR 21
23919: PUSH
23920: LD_INT 3
23922: ST_TO_ADDR
// vc_chassis := chassis ;
23923: LD_ADDR_OWVAR 37
23927: PUSH
23928: LD_VAR 0 1
23932: ST_TO_ADDR
// vc_engine := engine ;
23933: LD_ADDR_OWVAR 39
23937: PUSH
23938: LD_VAR 0 2
23942: ST_TO_ADDR
// vc_control := control ;
23943: LD_ADDR_OWVAR 38
23947: PUSH
23948: LD_VAR 0 3
23952: ST_TO_ADDR
// vc_weapon := weapon ;
23953: LD_ADDR_OWVAR 40
23957: PUSH
23958: LD_VAR 0 4
23962: ST_TO_ADDR
// un := CreateVehicle ;
23963: LD_ADDR_VAR 0 8
23967: PUSH
23968: CALL_OW 45
23972: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23973: LD_VAR 0 8
23977: PPUSH
23978: LD_INT 0
23980: PPUSH
23981: LD_INT 5
23983: PPUSH
23984: CALL_OW 12
23988: PPUSH
23989: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23993: LD_VAR 0 8
23997: PPUSH
23998: LD_VAR 0 5
24002: PPUSH
24003: LD_VAR 0 6
24007: PPUSH
24008: LD_INT 1
24010: PPUSH
24011: CALL_OW 48
// end ;
24015: LD_VAR 0 7
24019: RET
// export hInvincible ; every 1 do
24020: GO 24022
24022: DISABLE
// hInvincible := [ ] ;
24023: LD_ADDR_EXP 84
24027: PUSH
24028: EMPTY
24029: ST_TO_ADDR
24030: END
// every 10 do var i ;
24031: GO 24033
24033: DISABLE
24034: LD_INT 0
24036: PPUSH
// begin enable ;
24037: ENABLE
// if not hInvincible then
24038: LD_EXP 84
24042: NOT
24043: IFFALSE 24047
// exit ;
24045: GO 24091
// for i in hInvincible do
24047: LD_ADDR_VAR 0 1
24051: PUSH
24052: LD_EXP 84
24056: PUSH
24057: FOR_IN
24058: IFFALSE 24089
// if GetLives ( i ) < 1000 then
24060: LD_VAR 0 1
24064: PPUSH
24065: CALL_OW 256
24069: PUSH
24070: LD_INT 1000
24072: LESS
24073: IFFALSE 24087
// SetLives ( i , 1000 ) ;
24075: LD_VAR 0 1
24079: PPUSH
24080: LD_INT 1000
24082: PPUSH
24083: CALL_OW 234
24087: GO 24057
24089: POP
24090: POP
// end ;
24091: PPOPN 1
24093: END
// export function hHackInvincible ; var i ; begin
24094: LD_INT 0
24096: PPUSH
24097: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: LD_INT 21
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 21
24118: PUSH
24119: LD_INT 2
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: PPUSH
24131: CALL_OW 69
24135: PUSH
24136: FOR_IN
24137: IFFALSE 24198
// if IsSelected ( i ) then
24139: LD_VAR 0 2
24143: PPUSH
24144: CALL_OW 306
24148: IFFALSE 24196
// begin if i in hInvincible then
24150: LD_VAR 0 2
24154: PUSH
24155: LD_EXP 84
24159: IN
24160: IFFALSE 24180
// hInvincible := hInvincible diff i else
24162: LD_ADDR_EXP 84
24166: PUSH
24167: LD_EXP 84
24171: PUSH
24172: LD_VAR 0 2
24176: DIFF
24177: ST_TO_ADDR
24178: GO 24196
// hInvincible := hInvincible union i ;
24180: LD_ADDR_EXP 84
24184: PUSH
24185: LD_EXP 84
24189: PUSH
24190: LD_VAR 0 2
24194: UNION
24195: ST_TO_ADDR
// end ;
24196: GO 24136
24198: POP
24199: POP
// end ;
24200: LD_VAR 0 1
24204: RET
// export function hHackInvisible ; var i , j ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24210: LD_ADDR_VAR 0 2
24214: PUSH
24215: LD_INT 21
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PPUSH
24225: CALL_OW 69
24229: PUSH
24230: FOR_IN
24231: IFFALSE 24255
// if IsSelected ( i ) then
24233: LD_VAR 0 2
24237: PPUSH
24238: CALL_OW 306
24242: IFFALSE 24253
// ComForceInvisible ( i ) ;
24244: LD_VAR 0 2
24248: PPUSH
24249: CALL_OW 496
24253: GO 24230
24255: POP
24256: POP
// end ;
24257: LD_VAR 0 1
24261: RET
// export function hHackChangeYourSide ; begin
24262: LD_INT 0
24264: PPUSH
// if your_side = 8 then
24265: LD_OWVAR 2
24269: PUSH
24270: LD_INT 8
24272: EQUAL
24273: IFFALSE 24285
// your_side := 0 else
24275: LD_ADDR_OWVAR 2
24279: PUSH
24280: LD_INT 0
24282: ST_TO_ADDR
24283: GO 24299
// your_side := your_side + 1 ;
24285: LD_ADDR_OWVAR 2
24289: PUSH
24290: LD_OWVAR 2
24294: PUSH
24295: LD_INT 1
24297: PLUS
24298: ST_TO_ADDR
// end ;
24299: LD_VAR 0 1
24303: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24304: LD_INT 0
24306: PPUSH
24307: PPUSH
24308: PPUSH
// for i in all_units do
24309: LD_ADDR_VAR 0 2
24313: PUSH
24314: LD_OWVAR 3
24318: PUSH
24319: FOR_IN
24320: IFFALSE 24398
// if IsSelected ( i ) then
24322: LD_VAR 0 2
24326: PPUSH
24327: CALL_OW 306
24331: IFFALSE 24396
// begin j := GetSide ( i ) ;
24333: LD_ADDR_VAR 0 3
24337: PUSH
24338: LD_VAR 0 2
24342: PPUSH
24343: CALL_OW 255
24347: ST_TO_ADDR
// if j = 8 then
24348: LD_VAR 0 3
24352: PUSH
24353: LD_INT 8
24355: EQUAL
24356: IFFALSE 24368
// j := 0 else
24358: LD_ADDR_VAR 0 3
24362: PUSH
24363: LD_INT 0
24365: ST_TO_ADDR
24366: GO 24382
// j := j + 1 ;
24368: LD_ADDR_VAR 0 3
24372: PUSH
24373: LD_VAR 0 3
24377: PUSH
24378: LD_INT 1
24380: PLUS
24381: ST_TO_ADDR
// SetSide ( i , j ) ;
24382: LD_VAR 0 2
24386: PPUSH
24387: LD_VAR 0 3
24391: PPUSH
24392: CALL_OW 235
// end ;
24396: GO 24319
24398: POP
24399: POP
// end ;
24400: LD_VAR 0 1
24404: RET
// export function hHackFog ; begin
24405: LD_INT 0
24407: PPUSH
// FogOff ( true ) ;
24408: LD_INT 1
24410: PPUSH
24411: CALL_OW 344
// end ;
24415: LD_VAR 0 1
24419: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24420: LD_INT 0
24422: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24423: LD_VAR 0 1
24427: PPUSH
24428: LD_VAR 0 2
24432: PPUSH
24433: LD_VAR 0 3
24437: PPUSH
24438: LD_INT 1
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: CALL_OW 483
// CenterOnXY ( x , y ) ;
24448: LD_VAR 0 2
24452: PPUSH
24453: LD_VAR 0 3
24457: PPUSH
24458: CALL_OW 84
// end ;
24462: LD_VAR 0 4
24466: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24471: LD_VAR 0 1
24475: NOT
24476: PUSH
24477: LD_VAR 0 2
24481: PPUSH
24482: LD_VAR 0 3
24486: PPUSH
24487: CALL_OW 488
24491: NOT
24492: OR
24493: PUSH
24494: LD_VAR 0 1
24498: PPUSH
24499: CALL_OW 266
24503: PUSH
24504: LD_INT 3
24506: NONEQUAL
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 247
24517: PUSH
24518: LD_INT 1
24520: EQUAL
24521: NOT
24522: AND
24523: OR
24524: IFFALSE 24528
// exit ;
24526: GO 24677
// if GetType ( factory ) = unit_human then
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 247
24537: PUSH
24538: LD_INT 1
24540: EQUAL
24541: IFFALSE 24558
// factory := IsInUnit ( factory ) ;
24543: LD_ADDR_VAR 0 1
24547: PUSH
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL_OW 310
24557: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24558: LD_VAR 0 1
24562: PPUSH
24563: CALL_OW 266
24567: PUSH
24568: LD_INT 3
24570: NONEQUAL
24571: IFFALSE 24575
// exit ;
24573: GO 24677
// if HexInfo ( x , y ) = factory then
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: CALL_OW 428
24589: PUSH
24590: LD_VAR 0 1
24594: EQUAL
24595: IFFALSE 24622
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24597: LD_ADDR_EXP 85
24601: PUSH
24602: LD_EXP 85
24606: PPUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: LD_INT 0
24614: PPUSH
24615: CALL_OW 1
24619: ST_TO_ADDR
24620: GO 24673
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24622: LD_ADDR_EXP 85
24626: PUSH
24627: LD_EXP 85
24631: PPUSH
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 255
24646: PUSH
24647: LD_VAR 0 1
24651: PUSH
24652: LD_VAR 0 2
24656: PUSH
24657: LD_VAR 0 3
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: PPUSH
24668: CALL_OW 1
24672: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24673: CALL 24682 0 0
// end ;
24677: LD_VAR 0 4
24681: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24682: LD_INT 0
24684: PPUSH
24685: PPUSH
24686: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24687: LD_STRING resetFactoryWaypoint();
24689: PPUSH
24690: CALL_OW 559
// if factoryWaypoints then
24694: LD_EXP 85
24698: IFFALSE 24824
// begin list := PrepareArray ( factoryWaypoints ) ;
24700: LD_ADDR_VAR 0 3
24704: PUSH
24705: LD_EXP 85
24709: PPUSH
24710: CALL 71293 0 1
24714: ST_TO_ADDR
// for i := 1 to list do
24715: LD_ADDR_VAR 0 2
24719: PUSH
24720: DOUBLE
24721: LD_INT 1
24723: DEC
24724: ST_TO_ADDR
24725: LD_VAR 0 3
24729: PUSH
24730: FOR_TO
24731: IFFALSE 24822
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24733: LD_STRING setFactoryWaypointXY(
24735: PUSH
24736: LD_VAR 0 3
24740: PUSH
24741: LD_VAR 0 2
24745: ARRAY
24746: PUSH
24747: LD_INT 1
24749: ARRAY
24750: STR
24751: PUSH
24752: LD_STRING ,
24754: STR
24755: PUSH
24756: LD_VAR 0 3
24760: PUSH
24761: LD_VAR 0 2
24765: ARRAY
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: STR
24771: PUSH
24772: LD_STRING ,
24774: STR
24775: PUSH
24776: LD_VAR 0 3
24780: PUSH
24781: LD_VAR 0 2
24785: ARRAY
24786: PUSH
24787: LD_INT 3
24789: ARRAY
24790: STR
24791: PUSH
24792: LD_STRING ,
24794: STR
24795: PUSH
24796: LD_VAR 0 3
24800: PUSH
24801: LD_VAR 0 2
24805: ARRAY
24806: PUSH
24807: LD_INT 4
24809: ARRAY
24810: STR
24811: PUSH
24812: LD_STRING )
24814: STR
24815: PPUSH
24816: CALL_OW 559
24820: GO 24730
24822: POP
24823: POP
// end ; end ;
24824: LD_VAR 0 1
24828: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24829: LD_INT 0
24831: PPUSH
// if HexInfo ( x , y ) = warehouse then
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: CALL_OW 428
24846: PUSH
24847: LD_VAR 0 1
24851: EQUAL
24852: IFFALSE 24879
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24854: LD_ADDR_EXP 86
24858: PUSH
24859: LD_EXP 86
24863: PPUSH
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_INT 0
24871: PPUSH
24872: CALL_OW 1
24876: ST_TO_ADDR
24877: GO 24930
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24879: LD_ADDR_EXP 86
24883: PUSH
24884: LD_EXP 86
24888: PPUSH
24889: LD_VAR 0 1
24893: PPUSH
24894: LD_VAR 0 1
24898: PPUSH
24899: CALL_OW 255
24903: PUSH
24904: LD_VAR 0 1
24908: PUSH
24909: LD_VAR 0 2
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: PPUSH
24925: CALL_OW 1
24929: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24930: CALL 24939 0 0
// end ;
24934: LD_VAR 0 4
24938: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24939: LD_INT 0
24941: PPUSH
24942: PPUSH
24943: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24944: LD_STRING resetWarehouseGatheringPoints();
24946: PPUSH
24947: CALL_OW 559
// if warehouseGatheringPoints then
24951: LD_EXP 86
24955: IFFALSE 25081
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24957: LD_ADDR_VAR 0 3
24961: PUSH
24962: LD_EXP 86
24966: PPUSH
24967: CALL 71293 0 1
24971: ST_TO_ADDR
// for i := 1 to list do
24972: LD_ADDR_VAR 0 2
24976: PUSH
24977: DOUBLE
24978: LD_INT 1
24980: DEC
24981: ST_TO_ADDR
24982: LD_VAR 0 3
24986: PUSH
24987: FOR_TO
24988: IFFALSE 25079
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24990: LD_STRING setWarehouseGatheringPointXY(
24992: PUSH
24993: LD_VAR 0 3
24997: PUSH
24998: LD_VAR 0 2
25002: ARRAY
25003: PUSH
25004: LD_INT 1
25006: ARRAY
25007: STR
25008: PUSH
25009: LD_STRING ,
25011: STR
25012: PUSH
25013: LD_VAR 0 3
25017: PUSH
25018: LD_VAR 0 2
25022: ARRAY
25023: PUSH
25024: LD_INT 2
25026: ARRAY
25027: STR
25028: PUSH
25029: LD_STRING ,
25031: STR
25032: PUSH
25033: LD_VAR 0 3
25037: PUSH
25038: LD_VAR 0 2
25042: ARRAY
25043: PUSH
25044: LD_INT 3
25046: ARRAY
25047: STR
25048: PUSH
25049: LD_STRING ,
25051: STR
25052: PUSH
25053: LD_VAR 0 3
25057: PUSH
25058: LD_VAR 0 2
25062: ARRAY
25063: PUSH
25064: LD_INT 4
25066: ARRAY
25067: STR
25068: PUSH
25069: LD_STRING )
25071: STR
25072: PPUSH
25073: CALL_OW 559
25077: GO 24987
25079: POP
25080: POP
// end ; end ;
25081: LD_VAR 0 1
25085: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25086: LD_EXP 86
25090: IFFALSE 25775
25092: GO 25094
25094: DISABLE
25095: LD_INT 0
25097: PPUSH
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
// begin enable ;
25106: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_EXP 86
25116: PPUSH
25117: CALL 71293 0 1
25121: ST_TO_ADDR
// if not list then
25122: LD_VAR 0 3
25126: NOT
25127: IFFALSE 25131
// exit ;
25129: GO 25775
// for i := 1 to list do
25131: LD_ADDR_VAR 0 1
25135: PUSH
25136: DOUBLE
25137: LD_INT 1
25139: DEC
25140: ST_TO_ADDR
25141: LD_VAR 0 3
25145: PUSH
25146: FOR_TO
25147: IFFALSE 25773
// begin depot := list [ i ] [ 2 ] ;
25149: LD_ADDR_VAR 0 8
25153: PUSH
25154: LD_VAR 0 3
25158: PUSH
25159: LD_VAR 0 1
25163: ARRAY
25164: PUSH
25165: LD_INT 2
25167: ARRAY
25168: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25169: LD_ADDR_VAR 0 5
25173: PUSH
25174: LD_VAR 0 3
25178: PUSH
25179: LD_VAR 0 1
25183: ARRAY
25184: PUSH
25185: LD_INT 1
25187: ARRAY
25188: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25189: LD_VAR 0 8
25193: PPUSH
25194: CALL_OW 301
25198: PUSH
25199: LD_VAR 0 5
25203: PUSH
25204: LD_VAR 0 8
25208: PPUSH
25209: CALL_OW 255
25213: NONEQUAL
25214: OR
25215: IFFALSE 25244
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25217: LD_ADDR_EXP 86
25221: PUSH
25222: LD_EXP 86
25226: PPUSH
25227: LD_VAR 0 8
25231: PPUSH
25232: LD_INT 0
25234: PPUSH
25235: CALL_OW 1
25239: ST_TO_ADDR
// exit ;
25240: POP
25241: POP
25242: GO 25775
// end ; x := list [ i ] [ 3 ] ;
25244: LD_ADDR_VAR 0 6
25248: PUSH
25249: LD_VAR 0 3
25253: PUSH
25254: LD_VAR 0 1
25258: ARRAY
25259: PUSH
25260: LD_INT 3
25262: ARRAY
25263: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25264: LD_ADDR_VAR 0 7
25268: PUSH
25269: LD_VAR 0 3
25273: PUSH
25274: LD_VAR 0 1
25278: ARRAY
25279: PUSH
25280: LD_INT 4
25282: ARRAY
25283: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25284: LD_ADDR_VAR 0 9
25288: PUSH
25289: LD_VAR 0 6
25293: PPUSH
25294: LD_VAR 0 7
25298: PPUSH
25299: LD_INT 16
25301: PPUSH
25302: CALL 69881 0 3
25306: ST_TO_ADDR
// if not cratesNearbyPoint then
25307: LD_VAR 0 9
25311: NOT
25312: IFFALSE 25318
// exit ;
25314: POP
25315: POP
25316: GO 25775
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25318: LD_ADDR_VAR 0 4
25322: PUSH
25323: LD_INT 22
25325: PUSH
25326: LD_VAR 0 5
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 60
25340: PUSH
25341: EMPTY
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 91
25350: PUSH
25351: LD_VAR 0 8
25355: PUSH
25356: LD_INT 6
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: LD_INT 25
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 25
25379: PUSH
25380: LD_INT 16
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: PPUSH
25398: CALL_OW 69
25402: PUSH
25403: LD_VAR 0 8
25407: PPUSH
25408: CALL_OW 313
25412: PPUSH
25413: LD_INT 3
25415: PUSH
25416: LD_INT 60
25418: PUSH
25419: EMPTY
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 2
25428: PUSH
25429: LD_INT 25
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 25
25441: PUSH
25442: LD_INT 16
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PPUSH
25458: CALL_OW 72
25462: UNION
25463: ST_TO_ADDR
// if tmp then
25464: LD_VAR 0 4
25468: IFFALSE 25548
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25470: LD_ADDR_VAR 0 4
25474: PUSH
25475: LD_VAR 0 4
25479: PPUSH
25480: LD_INT 3
25482: PPUSH
25483: CALL 67850 0 2
25487: ST_TO_ADDR
// for j in tmp do
25488: LD_ADDR_VAR 0 2
25492: PUSH
25493: LD_VAR 0 4
25497: PUSH
25498: FOR_IN
25499: IFFALSE 25542
// begin if IsInUnit ( j ) then
25501: LD_VAR 0 2
25505: PPUSH
25506: CALL_OW 310
25510: IFFALSE 25521
// ComExit ( j ) ;
25512: LD_VAR 0 2
25516: PPUSH
25517: CALL 67933 0 1
// AddComCollect ( j , x , y ) ;
25521: LD_VAR 0 2
25525: PPUSH
25526: LD_VAR 0 6
25530: PPUSH
25531: LD_VAR 0 7
25535: PPUSH
25536: CALL_OW 177
// end ;
25540: GO 25498
25542: POP
25543: POP
// exit ;
25544: POP
25545: POP
25546: GO 25775
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25548: LD_ADDR_VAR 0 4
25552: PUSH
25553: LD_INT 22
25555: PUSH
25556: LD_VAR 0 5
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 91
25567: PUSH
25568: LD_VAR 0 8
25572: PUSH
25573: LD_INT 8
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 34
25586: PUSH
25587: LD_INT 12
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 34
25596: PUSH
25597: LD_INT 51
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 34
25606: PUSH
25607: LD_INT 32
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 34
25616: PUSH
25617: LD_INT 89
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: ST_TO_ADDR
// if tmp then
25641: LD_VAR 0 4
25645: IFFALSE 25771
// begin for j in tmp do
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: LD_VAR 0 4
25656: PUSH
25657: FOR_IN
25658: IFFALSE 25769
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25660: LD_VAR 0 2
25664: PPUSH
25665: CALL_OW 262
25669: PUSH
25670: LD_INT 3
25672: EQUAL
25673: PUSH
25674: LD_VAR 0 2
25678: PPUSH
25679: CALL_OW 261
25683: PUSH
25684: LD_INT 20
25686: GREATER
25687: OR
25688: PUSH
25689: LD_VAR 0 2
25693: PPUSH
25694: CALL_OW 314
25698: NOT
25699: AND
25700: PUSH
25701: LD_VAR 0 2
25705: PPUSH
25706: CALL_OW 263
25710: PUSH
25711: LD_INT 1
25713: NONEQUAL
25714: PUSH
25715: LD_VAR 0 2
25719: PPUSH
25720: CALL_OW 311
25724: OR
25725: AND
25726: IFFALSE 25767
// begin ComCollect ( j , x , y ) ;
25728: LD_VAR 0 2
25732: PPUSH
25733: LD_VAR 0 6
25737: PPUSH
25738: LD_VAR 0 7
25742: PPUSH
25743: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25747: LD_VAR 0 2
25751: PPUSH
25752: LD_VAR 0 8
25756: PPUSH
25757: CALL_OW 172
// exit ;
25761: POP
25762: POP
25763: POP
25764: POP
25765: GO 25775
// end ;
25767: GO 25657
25769: POP
25770: POP
// end ; end ;
25771: GO 25146
25773: POP
25774: POP
// end ; end_of_file end_of_file
25775: PPOPN 9
25777: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25778: LD_INT 0
25780: PPUSH
25781: PPUSH
25782: PPUSH
25783: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 264
25793: PUSH
25794: LD_INT 91
25796: EQUAL
25797: IFFALSE 25869
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25799: LD_INT 68
25801: PPUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL_OW 255
25811: PPUSH
25812: CALL_OW 321
25816: PUSH
25817: LD_INT 2
25819: EQUAL
25820: IFFALSE 25832
// eff := 70 else
25822: LD_ADDR_VAR 0 4
25826: PUSH
25827: LD_INT 70
25829: ST_TO_ADDR
25830: GO 25840
// eff := 30 ;
25832: LD_ADDR_VAR 0 4
25836: PUSH
25837: LD_INT 30
25839: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25840: LD_VAR 0 1
25844: PPUSH
25845: CALL_OW 250
25849: PPUSH
25850: LD_VAR 0 1
25854: PPUSH
25855: CALL_OW 251
25859: PPUSH
25860: LD_VAR 0 4
25864: PPUSH
25865: CALL_OW 495
// end ; end ;
25869: LD_VAR 0 2
25873: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25874: LD_INT 0
25876: PPUSH
// end ;
25877: LD_VAR 0 4
25881: RET
// export function SOS_Command ( cmd ) ; begin
25882: LD_INT 0
25884: PPUSH
// end ;
25885: LD_VAR 0 2
25889: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25890: LD_INT 0
25892: PPUSH
// end ;
25893: LD_VAR 0 6
25897: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
// if not vehicle or not factory then
25902: LD_VAR 0 1
25906: NOT
25907: PUSH
25908: LD_VAR 0 2
25912: NOT
25913: OR
25914: IFFALSE 25918
// exit ;
25916: GO 26149
// if factoryWaypoints >= factory then
25918: LD_EXP 85
25922: PUSH
25923: LD_VAR 0 2
25927: GREATEREQUAL
25928: IFFALSE 26149
// if factoryWaypoints [ factory ] then
25930: LD_EXP 85
25934: PUSH
25935: LD_VAR 0 2
25939: ARRAY
25940: IFFALSE 26149
// begin if GetControl ( vehicle ) = control_manual then
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 263
25951: PUSH
25952: LD_INT 1
25954: EQUAL
25955: IFFALSE 26036
// begin driver := IsDrivenBy ( vehicle ) ;
25957: LD_ADDR_VAR 0 4
25961: PUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 311
25971: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25972: LD_VAR 0 4
25976: PPUSH
25977: LD_EXP 85
25981: PUSH
25982: LD_VAR 0 2
25986: ARRAY
25987: PUSH
25988: LD_INT 3
25990: ARRAY
25991: PPUSH
25992: LD_EXP 85
25996: PUSH
25997: LD_VAR 0 2
26001: ARRAY
26002: PUSH
26003: LD_INT 4
26005: ARRAY
26006: PPUSH
26007: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26011: LD_VAR 0 4
26015: PPUSH
26016: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26020: LD_VAR 0 4
26024: PPUSH
26025: LD_VAR 0 2
26029: PPUSH
26030: CALL_OW 180
// end else
26034: GO 26149
// if GetControl ( vehicle ) = control_remote then
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 263
26045: PUSH
26046: LD_INT 2
26048: EQUAL
26049: IFFALSE 26110
// begin wait ( 0 0$2 ) ;
26051: LD_INT 70
26053: PPUSH
26054: CALL_OW 67
// if Connect ( vehicle ) then
26058: LD_VAR 0 1
26062: PPUSH
26063: CALL 38173 0 1
26067: IFFALSE 26108
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26069: LD_VAR 0 1
26073: PPUSH
26074: LD_EXP 85
26078: PUSH
26079: LD_VAR 0 2
26083: ARRAY
26084: PUSH
26085: LD_INT 3
26087: ARRAY
26088: PPUSH
26089: LD_EXP 85
26093: PUSH
26094: LD_VAR 0 2
26098: ARRAY
26099: PUSH
26100: LD_INT 4
26102: ARRAY
26103: PPUSH
26104: CALL_OW 171
// end else
26108: GO 26149
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26110: LD_VAR 0 1
26114: PPUSH
26115: LD_EXP 85
26119: PUSH
26120: LD_VAR 0 2
26124: ARRAY
26125: PUSH
26126: LD_INT 3
26128: ARRAY
26129: PPUSH
26130: LD_EXP 85
26134: PUSH
26135: LD_VAR 0 2
26139: ARRAY
26140: PUSH
26141: LD_INT 4
26143: ARRAY
26144: PPUSH
26145: CALL_OW 171
// end ; end ;
26149: LD_VAR 0 3
26153: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26154: LD_INT 0
26156: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26157: LD_VAR 0 1
26161: PUSH
26162: LD_INT 250
26164: EQUAL
26165: PUSH
26166: LD_VAR 0 2
26170: PPUSH
26171: CALL_OW 264
26175: PUSH
26176: LD_INT 81
26178: EQUAL
26179: AND
26180: IFFALSE 26201
// MinerPlaceMine ( unit , x , y ) ;
26182: LD_VAR 0 2
26186: PPUSH
26187: LD_VAR 0 4
26191: PPUSH
26192: LD_VAR 0 5
26196: PPUSH
26197: CALL 28586 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26201: LD_VAR 0 1
26205: PUSH
26206: LD_INT 251
26208: EQUAL
26209: PUSH
26210: LD_VAR 0 2
26214: PPUSH
26215: CALL_OW 264
26219: PUSH
26220: LD_INT 81
26222: EQUAL
26223: AND
26224: IFFALSE 26245
// MinerDetonateMine ( unit , x , y ) ;
26226: LD_VAR 0 2
26230: PPUSH
26231: LD_VAR 0 4
26235: PPUSH
26236: LD_VAR 0 5
26240: PPUSH
26241: CALL 28861 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26245: LD_VAR 0 1
26249: PUSH
26250: LD_INT 252
26252: EQUAL
26253: PUSH
26254: LD_VAR 0 2
26258: PPUSH
26259: CALL_OW 264
26263: PUSH
26264: LD_INT 81
26266: EQUAL
26267: AND
26268: IFFALSE 26289
// MinerCreateMinefield ( unit , x , y ) ;
26270: LD_VAR 0 2
26274: PPUSH
26275: LD_VAR 0 4
26279: PPUSH
26280: LD_VAR 0 5
26284: PPUSH
26285: CALL 29278 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26289: LD_VAR 0 1
26293: PUSH
26294: LD_INT 253
26296: EQUAL
26297: PUSH
26298: LD_VAR 0 2
26302: PPUSH
26303: CALL_OW 257
26307: PUSH
26308: LD_INT 5
26310: EQUAL
26311: AND
26312: IFFALSE 26333
// ComBinocular ( unit , x , y ) ;
26314: LD_VAR 0 2
26318: PPUSH
26319: LD_VAR 0 4
26323: PPUSH
26324: LD_VAR 0 5
26328: PPUSH
26329: CALL 29647 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26333: LD_VAR 0 1
26337: PUSH
26338: LD_INT 254
26340: EQUAL
26341: PUSH
26342: LD_VAR 0 2
26346: PPUSH
26347: CALL_OW 264
26351: PUSH
26352: LD_INT 99
26354: EQUAL
26355: AND
26356: PUSH
26357: LD_VAR 0 3
26361: PPUSH
26362: CALL_OW 263
26366: PUSH
26367: LD_INT 3
26369: EQUAL
26370: AND
26371: IFFALSE 26387
// HackDestroyVehicle ( unit , selectedUnit ) ;
26373: LD_VAR 0 2
26377: PPUSH
26378: LD_VAR 0 3
26382: PPUSH
26383: CALL 27950 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26387: LD_VAR 0 1
26391: PUSH
26392: LD_INT 255
26394: EQUAL
26395: PUSH
26396: LD_VAR 0 2
26400: PPUSH
26401: CALL_OW 264
26405: PUSH
26406: LD_INT 14
26408: PUSH
26409: LD_INT 53
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: IN
26416: AND
26417: PUSH
26418: LD_VAR 0 4
26422: PPUSH
26423: LD_VAR 0 5
26427: PPUSH
26428: CALL_OW 488
26432: AND
26433: IFFALSE 26457
// CutTreeXYR ( unit , x , y , 12 ) ;
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_VAR 0 4
26444: PPUSH
26445: LD_VAR 0 5
26449: PPUSH
26450: LD_INT 12
26452: PPUSH
26453: CALL 26520 0 4
// if cmd = 256 then
26457: LD_VAR 0 1
26461: PUSH
26462: LD_INT 256
26464: EQUAL
26465: IFFALSE 26486
// SetFactoryWaypoint ( unit , x , y ) ;
26467: LD_VAR 0 2
26471: PPUSH
26472: LD_VAR 0 4
26476: PPUSH
26477: LD_VAR 0 5
26481: PPUSH
26482: CALL 24467 0 3
// if cmd = 257 then
26486: LD_VAR 0 1
26490: PUSH
26491: LD_INT 257
26493: EQUAL
26494: IFFALSE 26515
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26496: LD_VAR 0 2
26500: PPUSH
26501: LD_VAR 0 4
26505: PPUSH
26506: LD_VAR 0 5
26510: PPUSH
26511: CALL 24829 0 3
// end ;
26515: LD_VAR 0 6
26519: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26520: LD_INT 0
26522: PPUSH
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
26527: PPUSH
26528: PPUSH
26529: PPUSH
26530: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26531: LD_VAR 0 1
26535: NOT
26536: PUSH
26537: LD_VAR 0 2
26541: PPUSH
26542: LD_VAR 0 3
26546: PPUSH
26547: CALL_OW 488
26551: NOT
26552: OR
26553: PUSH
26554: LD_VAR 0 4
26558: NOT
26559: OR
26560: IFFALSE 26564
// exit ;
26562: GO 26904
// list := [ ] ;
26564: LD_ADDR_VAR 0 13
26568: PUSH
26569: EMPTY
26570: ST_TO_ADDR
// if x - r < 0 then
26571: LD_VAR 0 2
26575: PUSH
26576: LD_VAR 0 4
26580: MINUS
26581: PUSH
26582: LD_INT 0
26584: LESS
26585: IFFALSE 26597
// min_x := 0 else
26587: LD_ADDR_VAR 0 7
26591: PUSH
26592: LD_INT 0
26594: ST_TO_ADDR
26595: GO 26613
// min_x := x - r ;
26597: LD_ADDR_VAR 0 7
26601: PUSH
26602: LD_VAR 0 2
26606: PUSH
26607: LD_VAR 0 4
26611: MINUS
26612: ST_TO_ADDR
// if y - r < 0 then
26613: LD_VAR 0 3
26617: PUSH
26618: LD_VAR 0 4
26622: MINUS
26623: PUSH
26624: LD_INT 0
26626: LESS
26627: IFFALSE 26639
// min_y := 0 else
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: LD_INT 0
26636: ST_TO_ADDR
26637: GO 26655
// min_y := y - r ;
26639: LD_ADDR_VAR 0 8
26643: PUSH
26644: LD_VAR 0 3
26648: PUSH
26649: LD_VAR 0 4
26653: MINUS
26654: ST_TO_ADDR
// max_x := x + r ;
26655: LD_ADDR_VAR 0 9
26659: PUSH
26660: LD_VAR 0 2
26664: PUSH
26665: LD_VAR 0 4
26669: PLUS
26670: ST_TO_ADDR
// max_y := y + r ;
26671: LD_ADDR_VAR 0 10
26675: PUSH
26676: LD_VAR 0 3
26680: PUSH
26681: LD_VAR 0 4
26685: PLUS
26686: ST_TO_ADDR
// for _x = min_x to max_x do
26687: LD_ADDR_VAR 0 11
26691: PUSH
26692: DOUBLE
26693: LD_VAR 0 7
26697: DEC
26698: ST_TO_ADDR
26699: LD_VAR 0 9
26703: PUSH
26704: FOR_TO
26705: IFFALSE 26822
// for _y = min_y to max_y do
26707: LD_ADDR_VAR 0 12
26711: PUSH
26712: DOUBLE
26713: LD_VAR 0 8
26717: DEC
26718: ST_TO_ADDR
26719: LD_VAR 0 10
26723: PUSH
26724: FOR_TO
26725: IFFALSE 26818
// begin if not ValidHex ( _x , _y ) then
26727: LD_VAR 0 11
26731: PPUSH
26732: LD_VAR 0 12
26736: PPUSH
26737: CALL_OW 488
26741: NOT
26742: IFFALSE 26746
// continue ;
26744: GO 26724
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26746: LD_VAR 0 11
26750: PPUSH
26751: LD_VAR 0 12
26755: PPUSH
26756: CALL_OW 351
26760: PUSH
26761: LD_VAR 0 11
26765: PPUSH
26766: LD_VAR 0 12
26770: PPUSH
26771: CALL_OW 554
26775: AND
26776: IFFALSE 26816
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26778: LD_ADDR_VAR 0 13
26782: PUSH
26783: LD_VAR 0 13
26787: PPUSH
26788: LD_VAR 0 13
26792: PUSH
26793: LD_INT 1
26795: PLUS
26796: PPUSH
26797: LD_VAR 0 11
26801: PUSH
26802: LD_VAR 0 12
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PPUSH
26811: CALL_OW 2
26815: ST_TO_ADDR
// end ;
26816: GO 26724
26818: POP
26819: POP
26820: GO 26704
26822: POP
26823: POP
// if not list then
26824: LD_VAR 0 13
26828: NOT
26829: IFFALSE 26833
// exit ;
26831: GO 26904
// for i in list do
26833: LD_ADDR_VAR 0 6
26837: PUSH
26838: LD_VAR 0 13
26842: PUSH
26843: FOR_IN
26844: IFFALSE 26902
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26846: LD_VAR 0 1
26850: PPUSH
26851: LD_STRING M
26853: PUSH
26854: LD_VAR 0 6
26858: PUSH
26859: LD_INT 1
26861: ARRAY
26862: PUSH
26863: LD_VAR 0 6
26867: PUSH
26868: LD_INT 2
26870: ARRAY
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: PUSH
26893: EMPTY
26894: LIST
26895: PPUSH
26896: CALL_OW 447
26900: GO 26843
26902: POP
26903: POP
// end ;
26904: LD_VAR 0 5
26908: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26909: LD_EXP 88
26913: NOT
26914: IFFALSE 26964
26916: GO 26918
26918: DISABLE
// begin initHack := true ;
26919: LD_ADDR_EXP 88
26923: PUSH
26924: LD_INT 1
26926: ST_TO_ADDR
// hackTanks := [ ] ;
26927: LD_ADDR_EXP 89
26931: PUSH
26932: EMPTY
26933: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26934: LD_ADDR_EXP 90
26938: PUSH
26939: EMPTY
26940: ST_TO_ADDR
// hackLimit := 3 ;
26941: LD_ADDR_EXP 91
26945: PUSH
26946: LD_INT 3
26948: ST_TO_ADDR
// hackDist := 12 ;
26949: LD_ADDR_EXP 92
26953: PUSH
26954: LD_INT 12
26956: ST_TO_ADDR
// hackCounter := [ ] ;
26957: LD_ADDR_EXP 93
26961: PUSH
26962: EMPTY
26963: ST_TO_ADDR
// end ;
26964: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26965: LD_EXP 88
26969: PUSH
26970: LD_INT 34
26972: PUSH
26973: LD_INT 99
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PPUSH
26980: CALL_OW 69
26984: AND
26985: IFFALSE 27238
26987: GO 26989
26989: DISABLE
26990: LD_INT 0
26992: PPUSH
26993: PPUSH
// begin enable ;
26994: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26995: LD_ADDR_VAR 0 1
26999: PUSH
27000: LD_INT 34
27002: PUSH
27003: LD_INT 99
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 69
27014: PUSH
27015: FOR_IN
27016: IFFALSE 27236
// begin if not i in hackTanks then
27018: LD_VAR 0 1
27022: PUSH
27023: LD_EXP 89
27027: IN
27028: NOT
27029: IFFALSE 27112
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27031: LD_ADDR_EXP 89
27035: PUSH
27036: LD_EXP 89
27040: PPUSH
27041: LD_EXP 89
27045: PUSH
27046: LD_INT 1
27048: PLUS
27049: PPUSH
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 1
27059: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27060: LD_ADDR_EXP 90
27064: PUSH
27065: LD_EXP 90
27069: PPUSH
27070: LD_EXP 90
27074: PUSH
27075: LD_INT 1
27077: PLUS
27078: PPUSH
27079: EMPTY
27080: PPUSH
27081: CALL_OW 1
27085: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27086: LD_ADDR_EXP 93
27090: PUSH
27091: LD_EXP 93
27095: PPUSH
27096: LD_EXP 93
27100: PUSH
27101: LD_INT 1
27103: PLUS
27104: PPUSH
27105: EMPTY
27106: PPUSH
27107: CALL_OW 1
27111: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27112: LD_VAR 0 1
27116: PPUSH
27117: CALL_OW 302
27121: NOT
27122: IFFALSE 27135
// begin HackUnlinkAll ( i ) ;
27124: LD_VAR 0 1
27128: PPUSH
27129: CALL 27241 0 1
// continue ;
27133: GO 27015
// end ; HackCheckCapturedStatus ( i ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL 27684 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27144: LD_ADDR_VAR 0 2
27148: PUSH
27149: LD_INT 81
27151: PUSH
27152: LD_VAR 0 1
27156: PPUSH
27157: CALL_OW 255
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 33
27168: PUSH
27169: LD_INT 3
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 91
27178: PUSH
27179: LD_VAR 0 1
27183: PUSH
27184: LD_EXP 92
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 50
27196: PUSH
27197: EMPTY
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: PPUSH
27206: CALL_OW 69
27210: ST_TO_ADDR
// if not tmp then
27211: LD_VAR 0 2
27215: NOT
27216: IFFALSE 27220
// continue ;
27218: GO 27015
// HackLink ( i , tmp ) ;
27220: LD_VAR 0 1
27224: PPUSH
27225: LD_VAR 0 2
27229: PPUSH
27230: CALL 27377 0 2
// end ;
27234: GO 27015
27236: POP
27237: POP
// end ;
27238: PPOPN 2
27240: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
27245: PPUSH
// if not hack in hackTanks then
27246: LD_VAR 0 1
27250: PUSH
27251: LD_EXP 89
27255: IN
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27372
// index := GetElementIndex ( hackTanks , hack ) ;
27261: LD_ADDR_VAR 0 4
27265: PUSH
27266: LD_EXP 89
27270: PPUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL 34989 0 2
27280: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27281: LD_EXP 90
27285: PUSH
27286: LD_VAR 0 4
27290: ARRAY
27291: IFFALSE 27372
// begin for i in hackTanksCaptured [ index ] do
27293: LD_ADDR_VAR 0 3
27297: PUSH
27298: LD_EXP 90
27302: PUSH
27303: LD_VAR 0 4
27307: ARRAY
27308: PUSH
27309: FOR_IN
27310: IFFALSE 27336
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27312: LD_VAR 0 3
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PPUSH
27321: LD_VAR 0 3
27325: PUSH
27326: LD_INT 2
27328: ARRAY
27329: PPUSH
27330: CALL_OW 235
27334: GO 27309
27336: POP
27337: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27338: LD_ADDR_EXP 90
27342: PUSH
27343: LD_EXP 90
27347: PPUSH
27348: LD_VAR 0 4
27352: PPUSH
27353: EMPTY
27354: PPUSH
27355: CALL_OW 1
27359: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27360: LD_VAR 0 1
27364: PPUSH
27365: LD_INT 0
27367: PPUSH
27368: CALL_OW 505
// end ; end ;
27372: LD_VAR 0 2
27376: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27377: LD_INT 0
27379: PPUSH
27380: PPUSH
27381: PPUSH
// if not hack in hackTanks or not vehicles then
27382: LD_VAR 0 1
27386: PUSH
27387: LD_EXP 89
27391: IN
27392: NOT
27393: PUSH
27394: LD_VAR 0 2
27398: NOT
27399: OR
27400: IFFALSE 27404
// exit ;
27402: GO 27679
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27404: LD_ADDR_VAR 0 2
27408: PUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_INT 1
27421: PPUSH
27422: LD_INT 1
27424: PPUSH
27425: CALL 35639 0 4
27429: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27430: LD_ADDR_VAR 0 5
27434: PUSH
27435: LD_EXP 89
27439: PPUSH
27440: LD_VAR 0 1
27444: PPUSH
27445: CALL 34989 0 2
27449: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27450: LD_EXP 90
27454: PUSH
27455: LD_VAR 0 5
27459: ARRAY
27460: PUSH
27461: LD_EXP 91
27465: LESS
27466: IFFALSE 27655
// begin for i := 1 to vehicles do
27468: LD_ADDR_VAR 0 4
27472: PUSH
27473: DOUBLE
27474: LD_INT 1
27476: DEC
27477: ST_TO_ADDR
27478: LD_VAR 0 2
27482: PUSH
27483: FOR_TO
27484: IFFALSE 27653
// begin if hackTanksCaptured [ index ] = hackLimit then
27486: LD_EXP 90
27490: PUSH
27491: LD_VAR 0 5
27495: ARRAY
27496: PUSH
27497: LD_EXP 91
27501: EQUAL
27502: IFFALSE 27506
// break ;
27504: GO 27653
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27506: LD_ADDR_EXP 93
27510: PUSH
27511: LD_EXP 93
27515: PPUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: LD_EXP 93
27525: PUSH
27526: LD_VAR 0 5
27530: ARRAY
27531: PUSH
27532: LD_INT 1
27534: PLUS
27535: PPUSH
27536: CALL_OW 1
27540: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27541: LD_ADDR_EXP 90
27545: PUSH
27546: LD_EXP 90
27550: PPUSH
27551: LD_VAR 0 5
27555: PUSH
27556: LD_EXP 90
27560: PUSH
27561: LD_VAR 0 5
27565: ARRAY
27566: PUSH
27567: LD_INT 1
27569: PLUS
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: LD_VAR 0 2
27579: PUSH
27580: LD_VAR 0 4
27584: ARRAY
27585: PUSH
27586: LD_VAR 0 2
27590: PUSH
27591: LD_VAR 0 4
27595: ARRAY
27596: PPUSH
27597: CALL_OW 255
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PPUSH
27606: CALL 35204 0 3
27610: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27611: LD_VAR 0 2
27615: PUSH
27616: LD_VAR 0 4
27620: ARRAY
27621: PPUSH
27622: LD_VAR 0 1
27626: PPUSH
27627: CALL_OW 255
27631: PPUSH
27632: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27636: LD_VAR 0 2
27640: PUSH
27641: LD_VAR 0 4
27645: ARRAY
27646: PPUSH
27647: CALL_OW 141
// end ;
27651: GO 27483
27653: POP
27654: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27655: LD_VAR 0 1
27659: PPUSH
27660: LD_EXP 90
27664: PUSH
27665: LD_VAR 0 5
27669: ARRAY
27670: PUSH
27671: LD_INT 0
27673: PLUS
27674: PPUSH
27675: CALL_OW 505
// end ;
27679: LD_VAR 0 3
27683: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27684: LD_INT 0
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
// if not hack in hackTanks then
27690: LD_VAR 0 1
27694: PUSH
27695: LD_EXP 89
27699: IN
27700: NOT
27701: IFFALSE 27705
// exit ;
27703: GO 27945
// index := GetElementIndex ( hackTanks , hack ) ;
27705: LD_ADDR_VAR 0 4
27709: PUSH
27710: LD_EXP 89
27714: PPUSH
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL 34989 0 2
27724: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27725: LD_ADDR_VAR 0 3
27729: PUSH
27730: DOUBLE
27731: LD_EXP 90
27735: PUSH
27736: LD_VAR 0 4
27740: ARRAY
27741: INC
27742: ST_TO_ADDR
27743: LD_INT 1
27745: PUSH
27746: FOR_DOWNTO
27747: IFFALSE 27919
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27749: LD_ADDR_VAR 0 5
27753: PUSH
27754: LD_EXP 90
27758: PUSH
27759: LD_VAR 0 4
27763: ARRAY
27764: PUSH
27765: LD_VAR 0 3
27769: ARRAY
27770: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27771: LD_VAR 0 5
27775: PUSH
27776: LD_INT 1
27778: ARRAY
27779: PPUSH
27780: CALL_OW 302
27784: NOT
27785: PUSH
27786: LD_VAR 0 5
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PPUSH
27795: CALL_OW 255
27799: PUSH
27800: LD_VAR 0 1
27804: PPUSH
27805: CALL_OW 255
27809: NONEQUAL
27810: OR
27811: IFFALSE 27917
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27813: LD_VAR 0 5
27817: PUSH
27818: LD_INT 1
27820: ARRAY
27821: PPUSH
27822: CALL_OW 305
27826: PUSH
27827: LD_VAR 0 5
27831: PUSH
27832: LD_INT 1
27834: ARRAY
27835: PPUSH
27836: CALL_OW 255
27840: PUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 255
27850: EQUAL
27851: AND
27852: IFFALSE 27876
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27854: LD_VAR 0 5
27858: PUSH
27859: LD_INT 1
27861: ARRAY
27862: PPUSH
27863: LD_VAR 0 5
27867: PUSH
27868: LD_INT 2
27870: ARRAY
27871: PPUSH
27872: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27876: LD_ADDR_EXP 90
27880: PUSH
27881: LD_EXP 90
27885: PPUSH
27886: LD_VAR 0 4
27890: PPUSH
27891: LD_EXP 90
27895: PUSH
27896: LD_VAR 0 4
27900: ARRAY
27901: PPUSH
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 3
27911: PPUSH
27912: CALL_OW 1
27916: ST_TO_ADDR
// end ; end ;
27917: GO 27746
27919: POP
27920: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27921: LD_VAR 0 1
27925: PPUSH
27926: LD_EXP 90
27930: PUSH
27931: LD_VAR 0 4
27935: ARRAY
27936: PUSH
27937: LD_INT 0
27939: PLUS
27940: PPUSH
27941: CALL_OW 505
// end ;
27945: LD_VAR 0 2
27949: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27950: LD_INT 0
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
// if not hack in hackTanks then
27956: LD_VAR 0 1
27960: PUSH
27961: LD_EXP 89
27965: IN
27966: NOT
27967: IFFALSE 27971
// exit ;
27969: GO 28056
// index := GetElementIndex ( hackTanks , hack ) ;
27971: LD_ADDR_VAR 0 5
27975: PUSH
27976: LD_EXP 89
27980: PPUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL 34989 0 2
27990: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27991: LD_ADDR_VAR 0 4
27995: PUSH
27996: DOUBLE
27997: LD_INT 1
27999: DEC
28000: ST_TO_ADDR
28001: LD_EXP 90
28005: PUSH
28006: LD_VAR 0 5
28010: ARRAY
28011: PUSH
28012: FOR_TO
28013: IFFALSE 28054
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28015: LD_EXP 90
28019: PUSH
28020: LD_VAR 0 5
28024: ARRAY
28025: PUSH
28026: LD_VAR 0 4
28030: ARRAY
28031: PUSH
28032: LD_INT 1
28034: ARRAY
28035: PUSH
28036: LD_VAR 0 2
28040: EQUAL
28041: IFFALSE 28052
// KillUnit ( vehicle ) ;
28043: LD_VAR 0 2
28047: PPUSH
28048: CALL_OW 66
28052: GO 28012
28054: POP
28055: POP
// end ;
28056: LD_VAR 0 3
28060: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28061: LD_EXP 94
28065: NOT
28066: IFFALSE 28101
28068: GO 28070
28070: DISABLE
// begin initMiner := true ;
28071: LD_ADDR_EXP 94
28075: PUSH
28076: LD_INT 1
28078: ST_TO_ADDR
// minersList := [ ] ;
28079: LD_ADDR_EXP 95
28083: PUSH
28084: EMPTY
28085: ST_TO_ADDR
// minerMinesList := [ ] ;
28086: LD_ADDR_EXP 96
28090: PUSH
28091: EMPTY
28092: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28093: LD_ADDR_EXP 97
28097: PUSH
28098: LD_INT 5
28100: ST_TO_ADDR
// end ;
28101: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28102: LD_EXP 94
28106: PUSH
28107: LD_INT 34
28109: PUSH
28110: LD_INT 81
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 69
28121: AND
28122: IFFALSE 28583
28124: GO 28126
28126: DISABLE
28127: LD_INT 0
28129: PPUSH
28130: PPUSH
28131: PPUSH
28132: PPUSH
// begin enable ;
28133: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28134: LD_ADDR_VAR 0 1
28138: PUSH
28139: LD_INT 34
28141: PUSH
28142: LD_INT 81
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PPUSH
28149: CALL_OW 69
28153: PUSH
28154: FOR_IN
28155: IFFALSE 28227
// begin if not i in minersList then
28157: LD_VAR 0 1
28161: PUSH
28162: LD_EXP 95
28166: IN
28167: NOT
28168: IFFALSE 28225
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28170: LD_ADDR_EXP 95
28174: PUSH
28175: LD_EXP 95
28179: PPUSH
28180: LD_EXP 95
28184: PUSH
28185: LD_INT 1
28187: PLUS
28188: PPUSH
28189: LD_VAR 0 1
28193: PPUSH
28194: CALL_OW 1
28198: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28199: LD_ADDR_EXP 96
28203: PUSH
28204: LD_EXP 96
28208: PPUSH
28209: LD_EXP 96
28213: PUSH
28214: LD_INT 1
28216: PLUS
28217: PPUSH
28218: EMPTY
28219: PPUSH
28220: CALL_OW 1
28224: ST_TO_ADDR
// end end ;
28225: GO 28154
28227: POP
28228: POP
// for i := minerMinesList downto 1 do
28229: LD_ADDR_VAR 0 1
28233: PUSH
28234: DOUBLE
28235: LD_EXP 96
28239: INC
28240: ST_TO_ADDR
28241: LD_INT 1
28243: PUSH
28244: FOR_DOWNTO
28245: IFFALSE 28581
// begin if IsLive ( minersList [ i ] ) then
28247: LD_EXP 95
28251: PUSH
28252: LD_VAR 0 1
28256: ARRAY
28257: PPUSH
28258: CALL_OW 300
28262: IFFALSE 28290
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28264: LD_EXP 95
28268: PUSH
28269: LD_VAR 0 1
28273: ARRAY
28274: PPUSH
28275: LD_EXP 96
28279: PUSH
28280: LD_VAR 0 1
28284: ARRAY
28285: PPUSH
28286: CALL_OW 505
// if not minerMinesList [ i ] then
28290: LD_EXP 96
28294: PUSH
28295: LD_VAR 0 1
28299: ARRAY
28300: NOT
28301: IFFALSE 28305
// continue ;
28303: GO 28244
// for j := minerMinesList [ i ] downto 1 do
28305: LD_ADDR_VAR 0 2
28309: PUSH
28310: DOUBLE
28311: LD_EXP 96
28315: PUSH
28316: LD_VAR 0 1
28320: ARRAY
28321: INC
28322: ST_TO_ADDR
28323: LD_INT 1
28325: PUSH
28326: FOR_DOWNTO
28327: IFFALSE 28577
// begin side := GetSide ( minersList [ i ] ) ;
28329: LD_ADDR_VAR 0 3
28333: PUSH
28334: LD_EXP 95
28338: PUSH
28339: LD_VAR 0 1
28343: ARRAY
28344: PPUSH
28345: CALL_OW 255
28349: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28350: LD_ADDR_VAR 0 4
28354: PUSH
28355: LD_EXP 96
28359: PUSH
28360: LD_VAR 0 1
28364: ARRAY
28365: PUSH
28366: LD_VAR 0 2
28370: ARRAY
28371: PUSH
28372: LD_INT 1
28374: ARRAY
28375: PPUSH
28376: LD_EXP 96
28380: PUSH
28381: LD_VAR 0 1
28385: ARRAY
28386: PUSH
28387: LD_VAR 0 2
28391: ARRAY
28392: PUSH
28393: LD_INT 2
28395: ARRAY
28396: PPUSH
28397: CALL_OW 428
28401: ST_TO_ADDR
// if not tmp then
28402: LD_VAR 0 4
28406: NOT
28407: IFFALSE 28411
// continue ;
28409: GO 28326
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28411: LD_VAR 0 4
28415: PUSH
28416: LD_INT 81
28418: PUSH
28419: LD_VAR 0 3
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PPUSH
28428: CALL_OW 69
28432: IN
28433: PUSH
28434: LD_EXP 96
28438: PUSH
28439: LD_VAR 0 1
28443: ARRAY
28444: PUSH
28445: LD_VAR 0 2
28449: ARRAY
28450: PUSH
28451: LD_INT 1
28453: ARRAY
28454: PPUSH
28455: LD_EXP 96
28459: PUSH
28460: LD_VAR 0 1
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 2
28470: ARRAY
28471: PUSH
28472: LD_INT 2
28474: ARRAY
28475: PPUSH
28476: CALL_OW 458
28480: AND
28481: IFFALSE 28575
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28483: LD_EXP 96
28487: PUSH
28488: LD_VAR 0 1
28492: ARRAY
28493: PUSH
28494: LD_VAR 0 2
28498: ARRAY
28499: PUSH
28500: LD_INT 1
28502: ARRAY
28503: PPUSH
28504: LD_EXP 96
28508: PUSH
28509: LD_VAR 0 1
28513: ARRAY
28514: PUSH
28515: LD_VAR 0 2
28519: ARRAY
28520: PUSH
28521: LD_INT 2
28523: ARRAY
28524: PPUSH
28525: LD_VAR 0 3
28529: PPUSH
28530: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28534: LD_ADDR_EXP 96
28538: PUSH
28539: LD_EXP 96
28543: PPUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_EXP 96
28553: PUSH
28554: LD_VAR 0 1
28558: ARRAY
28559: PPUSH
28560: LD_VAR 0 2
28564: PPUSH
28565: CALL_OW 3
28569: PPUSH
28570: CALL_OW 1
28574: ST_TO_ADDR
// end ; end ;
28575: GO 28326
28577: POP
28578: POP
// end ;
28579: GO 28244
28581: POP
28582: POP
// end ;
28583: PPOPN 4
28585: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28586: LD_INT 0
28588: PPUSH
28589: PPUSH
// result := false ;
28590: LD_ADDR_VAR 0 4
28594: PUSH
28595: LD_INT 0
28597: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 264
28607: PUSH
28608: LD_INT 81
28610: EQUAL
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28856
// index := GetElementIndex ( minersList , unit ) ;
28616: LD_ADDR_VAR 0 5
28620: PUSH
28621: LD_EXP 95
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL 34989 0 2
28635: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28636: LD_EXP 96
28640: PUSH
28641: LD_VAR 0 5
28645: ARRAY
28646: PUSH
28647: LD_EXP 97
28651: GREATEREQUAL
28652: IFFALSE 28656
// exit ;
28654: GO 28856
// ComMoveXY ( unit , x , y ) ;
28656: LD_VAR 0 1
28660: PPUSH
28661: LD_VAR 0 2
28665: PPUSH
28666: LD_VAR 0 3
28670: PPUSH
28671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28675: LD_INT 35
28677: PPUSH
28678: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28682: LD_VAR 0 1
28686: PPUSH
28687: LD_VAR 0 2
28691: PPUSH
28692: LD_VAR 0 3
28696: PPUSH
28697: CALL 66344 0 3
28701: NOT
28702: PUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 314
28712: AND
28713: IFFALSE 28717
// exit ;
28715: GO 28856
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28717: LD_VAR 0 2
28721: PPUSH
28722: LD_VAR 0 3
28726: PPUSH
28727: CALL_OW 428
28731: PUSH
28732: LD_VAR 0 1
28736: EQUAL
28737: PUSH
28738: LD_VAR 0 1
28742: PPUSH
28743: CALL_OW 314
28747: NOT
28748: AND
28749: IFFALSE 28675
// PlaySoundXY ( x , y , PlantMine ) ;
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_VAR 0 3
28760: PPUSH
28761: LD_STRING PlantMine
28763: PPUSH
28764: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28768: LD_VAR 0 2
28772: PPUSH
28773: LD_VAR 0 3
28777: PPUSH
28778: LD_VAR 0 1
28782: PPUSH
28783: CALL_OW 255
28787: PPUSH
28788: LD_INT 0
28790: PPUSH
28791: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28795: LD_ADDR_EXP 96
28799: PUSH
28800: LD_EXP 96
28804: PPUSH
28805: LD_VAR 0 5
28809: PUSH
28810: LD_EXP 96
28814: PUSH
28815: LD_VAR 0 5
28819: ARRAY
28820: PUSH
28821: LD_INT 1
28823: PLUS
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PPUSH
28829: LD_VAR 0 2
28833: PUSH
28834: LD_VAR 0 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PPUSH
28843: CALL 35204 0 3
28847: ST_TO_ADDR
// result := true ;
28848: LD_ADDR_VAR 0 4
28852: PUSH
28853: LD_INT 1
28855: ST_TO_ADDR
// end ;
28856: LD_VAR 0 4
28860: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28861: LD_INT 0
28863: PPUSH
28864: PPUSH
28865: PPUSH
// if not unit in minersList then
28866: LD_VAR 0 1
28870: PUSH
28871: LD_EXP 95
28875: IN
28876: NOT
28877: IFFALSE 28881
// exit ;
28879: GO 29273
// index := GetElementIndex ( minersList , unit ) ;
28881: LD_ADDR_VAR 0 6
28885: PUSH
28886: LD_EXP 95
28890: PPUSH
28891: LD_VAR 0 1
28895: PPUSH
28896: CALL 34989 0 2
28900: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28901: LD_ADDR_VAR 0 5
28905: PUSH
28906: DOUBLE
28907: LD_EXP 96
28911: PUSH
28912: LD_VAR 0 6
28916: ARRAY
28917: INC
28918: ST_TO_ADDR
28919: LD_INT 1
28921: PUSH
28922: FOR_DOWNTO
28923: IFFALSE 29084
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28925: LD_EXP 96
28929: PUSH
28930: LD_VAR 0 6
28934: ARRAY
28935: PUSH
28936: LD_VAR 0 5
28940: ARRAY
28941: PUSH
28942: LD_INT 1
28944: ARRAY
28945: PUSH
28946: LD_VAR 0 2
28950: EQUAL
28951: PUSH
28952: LD_EXP 96
28956: PUSH
28957: LD_VAR 0 6
28961: ARRAY
28962: PUSH
28963: LD_VAR 0 5
28967: ARRAY
28968: PUSH
28969: LD_INT 2
28971: ARRAY
28972: PUSH
28973: LD_VAR 0 3
28977: EQUAL
28978: AND
28979: IFFALSE 29082
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28981: LD_EXP 96
28985: PUSH
28986: LD_VAR 0 6
28990: ARRAY
28991: PUSH
28992: LD_VAR 0 5
28996: ARRAY
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: PPUSH
29002: LD_EXP 96
29006: PUSH
29007: LD_VAR 0 6
29011: ARRAY
29012: PUSH
29013: LD_VAR 0 5
29017: ARRAY
29018: PUSH
29019: LD_INT 2
29021: ARRAY
29022: PPUSH
29023: LD_VAR 0 1
29027: PPUSH
29028: CALL_OW 255
29032: PPUSH
29033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29037: LD_ADDR_EXP 96
29041: PUSH
29042: LD_EXP 96
29046: PPUSH
29047: LD_VAR 0 6
29051: PPUSH
29052: LD_EXP 96
29056: PUSH
29057: LD_VAR 0 6
29061: ARRAY
29062: PPUSH
29063: LD_VAR 0 5
29067: PPUSH
29068: CALL_OW 3
29072: PPUSH
29073: CALL_OW 1
29077: ST_TO_ADDR
// exit ;
29078: POP
29079: POP
29080: GO 29273
// end ; end ;
29082: GO 28922
29084: POP
29085: POP
// for i := minerMinesList [ index ] downto 1 do
29086: LD_ADDR_VAR 0 5
29090: PUSH
29091: DOUBLE
29092: LD_EXP 96
29096: PUSH
29097: LD_VAR 0 6
29101: ARRAY
29102: INC
29103: ST_TO_ADDR
29104: LD_INT 1
29106: PUSH
29107: FOR_DOWNTO
29108: IFFALSE 29271
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29110: LD_EXP 96
29114: PUSH
29115: LD_VAR 0 6
29119: ARRAY
29120: PUSH
29121: LD_VAR 0 5
29125: ARRAY
29126: PUSH
29127: LD_INT 1
29129: ARRAY
29130: PPUSH
29131: LD_EXP 96
29135: PUSH
29136: LD_VAR 0 6
29140: ARRAY
29141: PUSH
29142: LD_VAR 0 5
29146: ARRAY
29147: PUSH
29148: LD_INT 2
29150: ARRAY
29151: PPUSH
29152: LD_VAR 0 2
29156: PPUSH
29157: LD_VAR 0 3
29161: PPUSH
29162: CALL_OW 298
29166: PUSH
29167: LD_INT 6
29169: LESS
29170: IFFALSE 29269
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29172: LD_EXP 96
29176: PUSH
29177: LD_VAR 0 6
29181: ARRAY
29182: PUSH
29183: LD_VAR 0 5
29187: ARRAY
29188: PUSH
29189: LD_INT 1
29191: ARRAY
29192: PPUSH
29193: LD_EXP 96
29197: PUSH
29198: LD_VAR 0 6
29202: ARRAY
29203: PUSH
29204: LD_VAR 0 5
29208: ARRAY
29209: PUSH
29210: LD_INT 2
29212: ARRAY
29213: PPUSH
29214: LD_VAR 0 1
29218: PPUSH
29219: CALL_OW 255
29223: PPUSH
29224: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29228: LD_ADDR_EXP 96
29232: PUSH
29233: LD_EXP 96
29237: PPUSH
29238: LD_VAR 0 6
29242: PPUSH
29243: LD_EXP 96
29247: PUSH
29248: LD_VAR 0 6
29252: ARRAY
29253: PPUSH
29254: LD_VAR 0 5
29258: PPUSH
29259: CALL_OW 3
29263: PPUSH
29264: CALL_OW 1
29268: ST_TO_ADDR
// end ; end ;
29269: GO 29107
29271: POP
29272: POP
// end ;
29273: LD_VAR 0 4
29277: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29289: LD_VAR 0 1
29293: PPUSH
29294: CALL_OW 264
29298: PUSH
29299: LD_INT 81
29301: EQUAL
29302: NOT
29303: PUSH
29304: LD_VAR 0 1
29308: PUSH
29309: LD_EXP 95
29313: IN
29314: NOT
29315: OR
29316: IFFALSE 29320
// exit ;
29318: GO 29642
// index := GetElementIndex ( minersList , unit ) ;
29320: LD_ADDR_VAR 0 6
29324: PUSH
29325: LD_EXP 95
29329: PPUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL 34989 0 2
29339: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29340: LD_ADDR_VAR 0 8
29344: PUSH
29345: LD_EXP 97
29349: PUSH
29350: LD_EXP 96
29354: PUSH
29355: LD_VAR 0 6
29359: ARRAY
29360: MINUS
29361: ST_TO_ADDR
// if not minesFreeAmount then
29362: LD_VAR 0 8
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29642
// tmp := [ ] ;
29371: LD_ADDR_VAR 0 7
29375: PUSH
29376: EMPTY
29377: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29378: LD_ADDR_VAR 0 5
29382: PUSH
29383: DOUBLE
29384: LD_INT 1
29386: DEC
29387: ST_TO_ADDR
29388: LD_VAR 0 8
29392: PUSH
29393: FOR_TO
29394: IFFALSE 29589
// begin _d := rand ( 0 , 5 ) ;
29396: LD_ADDR_VAR 0 11
29400: PUSH
29401: LD_INT 0
29403: PPUSH
29404: LD_INT 5
29406: PPUSH
29407: CALL_OW 12
29411: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29412: LD_ADDR_VAR 0 12
29416: PUSH
29417: LD_INT 2
29419: PPUSH
29420: LD_INT 6
29422: PPUSH
29423: CALL_OW 12
29427: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29428: LD_ADDR_VAR 0 9
29432: PUSH
29433: LD_VAR 0 2
29437: PPUSH
29438: LD_VAR 0 11
29442: PPUSH
29443: LD_VAR 0 12
29447: PPUSH
29448: CALL_OW 272
29452: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29453: LD_ADDR_VAR 0 10
29457: PUSH
29458: LD_VAR 0 3
29462: PPUSH
29463: LD_VAR 0 11
29467: PPUSH
29468: LD_VAR 0 12
29472: PPUSH
29473: CALL_OW 273
29477: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29478: LD_VAR 0 9
29482: PPUSH
29483: LD_VAR 0 10
29487: PPUSH
29488: CALL_OW 488
29492: PUSH
29493: LD_VAR 0 9
29497: PUSH
29498: LD_VAR 0 10
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_VAR 0 7
29511: IN
29512: NOT
29513: AND
29514: PUSH
29515: LD_VAR 0 9
29519: PPUSH
29520: LD_VAR 0 10
29524: PPUSH
29525: CALL_OW 458
29529: NOT
29530: AND
29531: IFFALSE 29573
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29533: LD_ADDR_VAR 0 7
29537: PUSH
29538: LD_VAR 0 7
29542: PPUSH
29543: LD_VAR 0 7
29547: PUSH
29548: LD_INT 1
29550: PLUS
29551: PPUSH
29552: LD_VAR 0 9
29556: PUSH
29557: LD_VAR 0 10
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PPUSH
29566: CALL_OW 1
29570: ST_TO_ADDR
29571: GO 29587
// i := i - 1 ;
29573: LD_ADDR_VAR 0 5
29577: PUSH
29578: LD_VAR 0 5
29582: PUSH
29583: LD_INT 1
29585: MINUS
29586: ST_TO_ADDR
// end ;
29587: GO 29393
29589: POP
29590: POP
// for i in tmp do
29591: LD_ADDR_VAR 0 5
29595: PUSH
29596: LD_VAR 0 7
29600: PUSH
29601: FOR_IN
29602: IFFALSE 29640
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29604: LD_VAR 0 1
29608: PPUSH
29609: LD_VAR 0 5
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: LD_VAR 0 5
29622: PUSH
29623: LD_INT 2
29625: ARRAY
29626: PPUSH
29627: CALL 28586 0 3
29631: NOT
29632: IFFALSE 29638
// exit ;
29634: POP
29635: POP
29636: GO 29642
29638: GO 29601
29640: POP
29641: POP
// end ;
29642: LD_VAR 0 4
29646: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29647: LD_INT 0
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
29655: PPUSH
// if not GetClass ( unit ) = class_sniper then
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 257
29665: PUSH
29666: LD_INT 5
29668: EQUAL
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 30062
// dist := 8 ;
29674: LD_ADDR_VAR 0 5
29678: PUSH
29679: LD_INT 8
29681: ST_TO_ADDR
// viewRange := 12 ;
29682: LD_ADDR_VAR 0 7
29686: PUSH
29687: LD_INT 12
29689: ST_TO_ADDR
// side := GetSide ( unit ) ;
29690: LD_ADDR_VAR 0 6
29694: PUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 255
29704: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29705: LD_INT 61
29707: PPUSH
29708: LD_VAR 0 6
29712: PPUSH
29713: CALL_OW 321
29717: PUSH
29718: LD_INT 2
29720: EQUAL
29721: IFFALSE 29731
// viewRange := 16 ;
29723: LD_ADDR_VAR 0 7
29727: PUSH
29728: LD_INT 16
29730: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29731: LD_VAR 0 1
29735: PPUSH
29736: LD_VAR 0 2
29740: PPUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 297
29750: PUSH
29751: LD_VAR 0 5
29755: GREATER
29756: IFFALSE 29835
// begin ComMoveXY ( unit , x , y ) ;
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_VAR 0 2
29767: PPUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29777: LD_INT 35
29779: PPUSH
29780: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29784: LD_VAR 0 1
29788: PPUSH
29789: LD_VAR 0 2
29793: PPUSH
29794: LD_VAR 0 3
29798: PPUSH
29799: CALL 66344 0 3
29803: NOT
29804: IFFALSE 29808
// exit ;
29806: GO 30062
// until GetDistUnitXY ( unit , x , y ) < dist ;
29808: LD_VAR 0 1
29812: PPUSH
29813: LD_VAR 0 2
29817: PPUSH
29818: LD_VAR 0 3
29822: PPUSH
29823: CALL_OW 297
29827: PUSH
29828: LD_VAR 0 5
29832: LESS
29833: IFFALSE 29777
// end ; ComTurnXY ( unit , x , y ) ;
29835: LD_VAR 0 1
29839: PPUSH
29840: LD_VAR 0 2
29844: PPUSH
29845: LD_VAR 0 3
29849: PPUSH
29850: CALL_OW 118
// wait ( 5 ) ;
29854: LD_INT 5
29856: PPUSH
29857: CALL_OW 67
// _d := GetDir ( unit ) ;
29861: LD_ADDR_VAR 0 10
29865: PUSH
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 254
29875: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29876: LD_ADDR_VAR 0 8
29880: PUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL_OW 250
29890: PPUSH
29891: LD_VAR 0 10
29895: PPUSH
29896: LD_VAR 0 5
29900: PPUSH
29901: CALL_OW 272
29905: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29906: LD_ADDR_VAR 0 9
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 251
29920: PPUSH
29921: LD_VAR 0 10
29925: PPUSH
29926: LD_VAR 0 5
29930: PPUSH
29931: CALL_OW 273
29935: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29936: LD_VAR 0 8
29940: PPUSH
29941: LD_VAR 0 9
29945: PPUSH
29946: CALL_OW 488
29950: NOT
29951: IFFALSE 29955
// exit ;
29953: GO 30062
// ComAnimCustom ( unit , 1 ) ;
29955: LD_VAR 0 1
29959: PPUSH
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29967: LD_VAR 0 8
29971: PPUSH
29972: LD_VAR 0 9
29976: PPUSH
29977: LD_VAR 0 6
29981: PPUSH
29982: LD_VAR 0 7
29986: PPUSH
29987: CALL_OW 330
// repeat wait ( 1 ) ;
29991: LD_INT 1
29993: PPUSH
29994: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29998: LD_VAR 0 1
30002: PPUSH
30003: CALL_OW 316
30007: PUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: CALL_OW 314
30017: OR
30018: PUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: CALL_OW 302
30028: NOT
30029: OR
30030: PUSH
30031: LD_VAR 0 1
30035: PPUSH
30036: CALL_OW 301
30040: OR
30041: IFFALSE 29991
// RemoveSeeing ( _x , _y , side ) ;
30043: LD_VAR 0 8
30047: PPUSH
30048: LD_VAR 0 9
30052: PPUSH
30053: LD_VAR 0 6
30057: PPUSH
30058: CALL_OW 331
// end ; end_of_file
30062: LD_VAR 0 4
30066: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30067: LD_INT 0
30069: PPUSH
30070: PPUSH
// if exist_mode then
30071: LD_VAR 0 2
30075: IFFALSE 30100
// unit := CreateCharacter ( prefix & ident ) else
30077: LD_ADDR_VAR 0 5
30081: PUSH
30082: LD_VAR 0 3
30086: PUSH
30087: LD_VAR 0 1
30091: STR
30092: PPUSH
30093: CALL_OW 34
30097: ST_TO_ADDR
30098: GO 30115
// unit := NewCharacter ( ident ) ;
30100: LD_ADDR_VAR 0 5
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 25
30114: ST_TO_ADDR
// result := unit ;
30115: LD_ADDR_VAR 0 4
30119: PUSH
30120: LD_VAR 0 5
30124: ST_TO_ADDR
// end ;
30125: LD_VAR 0 4
30129: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30130: LD_INT 0
30132: PPUSH
30133: PPUSH
// if not side or not nation then
30134: LD_VAR 0 1
30138: NOT
30139: PUSH
30140: LD_VAR 0 2
30144: NOT
30145: OR
30146: IFFALSE 30150
// exit ;
30148: GO 30918
// case nation of nation_american :
30150: LD_VAR 0 2
30154: PUSH
30155: LD_INT 1
30157: DOUBLE
30158: EQUAL
30159: IFTRUE 30163
30161: GO 30377
30163: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30164: LD_ADDR_VAR 0 4
30168: PUSH
30169: LD_INT 35
30171: PUSH
30172: LD_INT 45
30174: PUSH
30175: LD_INT 46
30177: PUSH
30178: LD_INT 47
30180: PUSH
30181: LD_INT 82
30183: PUSH
30184: LD_INT 83
30186: PUSH
30187: LD_INT 84
30189: PUSH
30190: LD_INT 85
30192: PUSH
30193: LD_INT 86
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 2
30201: PUSH
30202: LD_INT 6
30204: PUSH
30205: LD_INT 15
30207: PUSH
30208: LD_INT 16
30210: PUSH
30211: LD_INT 7
30213: PUSH
30214: LD_INT 12
30216: PUSH
30217: LD_INT 13
30219: PUSH
30220: LD_INT 10
30222: PUSH
30223: LD_INT 14
30225: PUSH
30226: LD_INT 20
30228: PUSH
30229: LD_INT 21
30231: PUSH
30232: LD_INT 22
30234: PUSH
30235: LD_INT 25
30237: PUSH
30238: LD_INT 32
30240: PUSH
30241: LD_INT 27
30243: PUSH
30244: LD_INT 36
30246: PUSH
30247: LD_INT 69
30249: PUSH
30250: LD_INT 39
30252: PUSH
30253: LD_INT 34
30255: PUSH
30256: LD_INT 40
30258: PUSH
30259: LD_INT 48
30261: PUSH
30262: LD_INT 49
30264: PUSH
30265: LD_INT 50
30267: PUSH
30268: LD_INT 51
30270: PUSH
30271: LD_INT 52
30273: PUSH
30274: LD_INT 53
30276: PUSH
30277: LD_INT 54
30279: PUSH
30280: LD_INT 55
30282: PUSH
30283: LD_INT 56
30285: PUSH
30286: LD_INT 57
30288: PUSH
30289: LD_INT 58
30291: PUSH
30292: LD_INT 59
30294: PUSH
30295: LD_INT 60
30297: PUSH
30298: LD_INT 61
30300: PUSH
30301: LD_INT 62
30303: PUSH
30304: LD_INT 80
30306: PUSH
30307: LD_INT 82
30309: PUSH
30310: LD_INT 83
30312: PUSH
30313: LD_INT 84
30315: PUSH
30316: LD_INT 85
30318: PUSH
30319: LD_INT 86
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: ST_TO_ADDR
30375: GO 30842
30377: LD_INT 2
30379: DOUBLE
30380: EQUAL
30381: IFTRUE 30385
30383: GO 30611
30385: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30386: LD_ADDR_VAR 0 4
30390: PUSH
30391: LD_INT 35
30393: PUSH
30394: LD_INT 45
30396: PUSH
30397: LD_INT 46
30399: PUSH
30400: LD_INT 47
30402: PUSH
30403: LD_INT 82
30405: PUSH
30406: LD_INT 83
30408: PUSH
30409: LD_INT 84
30411: PUSH
30412: LD_INT 85
30414: PUSH
30415: LD_INT 87
30417: PUSH
30418: LD_INT 70
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 11
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 4
30432: PUSH
30433: LD_INT 5
30435: PUSH
30436: LD_INT 6
30438: PUSH
30439: LD_INT 15
30441: PUSH
30442: LD_INT 18
30444: PUSH
30445: LD_INT 7
30447: PUSH
30448: LD_INT 17
30450: PUSH
30451: LD_INT 8
30453: PUSH
30454: LD_INT 20
30456: PUSH
30457: LD_INT 21
30459: PUSH
30460: LD_INT 22
30462: PUSH
30463: LD_INT 72
30465: PUSH
30466: LD_INT 26
30468: PUSH
30469: LD_INT 69
30471: PUSH
30472: LD_INT 39
30474: PUSH
30475: LD_INT 40
30477: PUSH
30478: LD_INT 41
30480: PUSH
30481: LD_INT 42
30483: PUSH
30484: LD_INT 43
30486: PUSH
30487: LD_INT 48
30489: PUSH
30490: LD_INT 49
30492: PUSH
30493: LD_INT 50
30495: PUSH
30496: LD_INT 51
30498: PUSH
30499: LD_INT 52
30501: PUSH
30502: LD_INT 53
30504: PUSH
30505: LD_INT 54
30507: PUSH
30508: LD_INT 55
30510: PUSH
30511: LD_INT 56
30513: PUSH
30514: LD_INT 60
30516: PUSH
30517: LD_INT 61
30519: PUSH
30520: LD_INT 62
30522: PUSH
30523: LD_INT 66
30525: PUSH
30526: LD_INT 67
30528: PUSH
30529: LD_INT 68
30531: PUSH
30532: LD_INT 81
30534: PUSH
30535: LD_INT 82
30537: PUSH
30538: LD_INT 83
30540: PUSH
30541: LD_INT 84
30543: PUSH
30544: LD_INT 85
30546: PUSH
30547: LD_INT 87
30549: PUSH
30550: LD_INT 88
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: ST_TO_ADDR
30609: GO 30842
30611: LD_INT 3
30613: DOUBLE
30614: EQUAL
30615: IFTRUE 30619
30617: GO 30841
30619: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30620: LD_ADDR_VAR 0 4
30624: PUSH
30625: LD_INT 46
30627: PUSH
30628: LD_INT 47
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 82
30639: PUSH
30640: LD_INT 83
30642: PUSH
30643: LD_INT 84
30645: PUSH
30646: LD_INT 85
30648: PUSH
30649: LD_INT 86
30651: PUSH
30652: LD_INT 11
30654: PUSH
30655: LD_INT 9
30657: PUSH
30658: LD_INT 20
30660: PUSH
30661: LD_INT 19
30663: PUSH
30664: LD_INT 21
30666: PUSH
30667: LD_INT 24
30669: PUSH
30670: LD_INT 22
30672: PUSH
30673: LD_INT 25
30675: PUSH
30676: LD_INT 28
30678: PUSH
30679: LD_INT 29
30681: PUSH
30682: LD_INT 30
30684: PUSH
30685: LD_INT 31
30687: PUSH
30688: LD_INT 37
30690: PUSH
30691: LD_INT 38
30693: PUSH
30694: LD_INT 32
30696: PUSH
30697: LD_INT 27
30699: PUSH
30700: LD_INT 33
30702: PUSH
30703: LD_INT 69
30705: PUSH
30706: LD_INT 39
30708: PUSH
30709: LD_INT 34
30711: PUSH
30712: LD_INT 40
30714: PUSH
30715: LD_INT 71
30717: PUSH
30718: LD_INT 23
30720: PUSH
30721: LD_INT 44
30723: PUSH
30724: LD_INT 48
30726: PUSH
30727: LD_INT 49
30729: PUSH
30730: LD_INT 50
30732: PUSH
30733: LD_INT 51
30735: PUSH
30736: LD_INT 52
30738: PUSH
30739: LD_INT 53
30741: PUSH
30742: LD_INT 54
30744: PUSH
30745: LD_INT 55
30747: PUSH
30748: LD_INT 56
30750: PUSH
30751: LD_INT 57
30753: PUSH
30754: LD_INT 58
30756: PUSH
30757: LD_INT 59
30759: PUSH
30760: LD_INT 63
30762: PUSH
30763: LD_INT 64
30765: PUSH
30766: LD_INT 65
30768: PUSH
30769: LD_INT 82
30771: PUSH
30772: LD_INT 83
30774: PUSH
30775: LD_INT 84
30777: PUSH
30778: LD_INT 85
30780: PUSH
30781: LD_INT 86
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
30839: GO 30842
30841: POP
// if state > - 1 and state < 3 then
30842: LD_VAR 0 3
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: GREATER
30851: PUSH
30852: LD_VAR 0 3
30856: PUSH
30857: LD_INT 3
30859: LESS
30860: AND
30861: IFFALSE 30918
// for i in result do
30863: LD_ADDR_VAR 0 5
30867: PUSH
30868: LD_VAR 0 4
30872: PUSH
30873: FOR_IN
30874: IFFALSE 30916
// if GetTech ( i , side ) <> state then
30876: LD_VAR 0 5
30880: PPUSH
30881: LD_VAR 0 1
30885: PPUSH
30886: CALL_OW 321
30890: PUSH
30891: LD_VAR 0 3
30895: NONEQUAL
30896: IFFALSE 30914
// result := result diff i ;
30898: LD_ADDR_VAR 0 4
30902: PUSH
30903: LD_VAR 0 4
30907: PUSH
30908: LD_VAR 0 5
30912: DIFF
30913: ST_TO_ADDR
30914: GO 30873
30916: POP
30917: POP
// end ;
30918: LD_VAR 0 4
30922: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
30927: PPUSH
// result := true ;
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: LD_INT 1
30935: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30936: LD_ADDR_VAR 0 5
30940: PUSH
30941: LD_VAR 0 2
30945: PPUSH
30946: CALL_OW 480
30950: ST_TO_ADDR
// if not tmp then
30951: LD_VAR 0 5
30955: NOT
30956: IFFALSE 30960
// exit ;
30958: GO 31009
// for i in tmp do
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_VAR 0 5
30969: PUSH
30970: FOR_IN
30971: IFFALSE 31007
// if GetTech ( i , side ) <> state_researched then
30973: LD_VAR 0 4
30977: PPUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 321
30987: PUSH
30988: LD_INT 2
30990: NONEQUAL
30991: IFFALSE 31005
// begin result := false ;
30993: LD_ADDR_VAR 0 3
30997: PUSH
30998: LD_INT 0
31000: ST_TO_ADDR
// exit ;
31001: POP
31002: POP
31003: GO 31009
// end ;
31005: GO 30970
31007: POP
31008: POP
// end ;
31009: LD_VAR 0 3
31013: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31014: LD_INT 0
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
31020: PPUSH
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31029: LD_VAR 0 1
31033: NOT
31034: PUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 257
31044: PUSH
31045: LD_INT 9
31047: NONEQUAL
31048: OR
31049: IFFALSE 31053
// exit ;
31051: GO 31626
// side := GetSide ( unit ) ;
31053: LD_ADDR_VAR 0 9
31057: PUSH
31058: LD_VAR 0 1
31062: PPUSH
31063: CALL_OW 255
31067: ST_TO_ADDR
// tech_space := tech_spacanom ;
31068: LD_ADDR_VAR 0 12
31072: PUSH
31073: LD_INT 29
31075: ST_TO_ADDR
// tech_time := tech_taurad ;
31076: LD_ADDR_VAR 0 13
31080: PUSH
31081: LD_INT 28
31083: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31084: LD_ADDR_VAR 0 11
31088: PUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 310
31098: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31099: LD_VAR 0 11
31103: PPUSH
31104: CALL_OW 247
31108: PUSH
31109: LD_INT 2
31111: EQUAL
31112: IFFALSE 31116
// exit ;
31114: GO 31626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31116: LD_ADDR_VAR 0 8
31120: PUSH
31121: LD_INT 81
31123: PUSH
31124: LD_VAR 0 9
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 21
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PPUSH
31154: CALL_OW 69
31158: ST_TO_ADDR
// if not tmp then
31159: LD_VAR 0 8
31163: NOT
31164: IFFALSE 31168
// exit ;
31166: GO 31626
// if in_unit then
31168: LD_VAR 0 11
31172: IFFALSE 31196
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31174: LD_ADDR_VAR 0 10
31178: PUSH
31179: LD_VAR 0 8
31183: PPUSH
31184: LD_VAR 0 11
31188: PPUSH
31189: CALL_OW 74
31193: ST_TO_ADDR
31194: GO 31216
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31196: LD_ADDR_VAR 0 10
31200: PUSH
31201: LD_VAR 0 8
31205: PPUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: CALL_OW 74
31215: ST_TO_ADDR
// if not enemy then
31216: LD_VAR 0 10
31220: NOT
31221: IFFALSE 31225
// exit ;
31223: GO 31626
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31225: LD_VAR 0 11
31229: PUSH
31230: LD_VAR 0 11
31234: PPUSH
31235: LD_VAR 0 10
31239: PPUSH
31240: CALL_OW 296
31244: PUSH
31245: LD_INT 13
31247: GREATER
31248: AND
31249: PUSH
31250: LD_VAR 0 1
31254: PPUSH
31255: LD_VAR 0 10
31259: PPUSH
31260: CALL_OW 296
31264: PUSH
31265: LD_INT 12
31267: GREATER
31268: OR
31269: IFFALSE 31273
// exit ;
31271: GO 31626
// missile := [ 1 ] ;
31273: LD_ADDR_VAR 0 14
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31284: LD_VAR 0 9
31288: PPUSH
31289: LD_VAR 0 12
31293: PPUSH
31294: CALL_OW 325
31298: IFFALSE 31327
// missile := Replace ( missile , missile + 1 , 2 ) ;
31300: LD_ADDR_VAR 0 14
31304: PUSH
31305: LD_VAR 0 14
31309: PPUSH
31310: LD_VAR 0 14
31314: PUSH
31315: LD_INT 1
31317: PLUS
31318: PPUSH
31319: LD_INT 2
31321: PPUSH
31322: CALL_OW 1
31326: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31327: LD_VAR 0 9
31331: PPUSH
31332: LD_VAR 0 13
31336: PPUSH
31337: CALL_OW 325
31341: PUSH
31342: LD_VAR 0 10
31346: PPUSH
31347: CALL_OW 255
31351: PPUSH
31352: LD_VAR 0 13
31356: PPUSH
31357: CALL_OW 325
31361: NOT
31362: AND
31363: IFFALSE 31392
// missile := Replace ( missile , missile + 1 , 3 ) ;
31365: LD_ADDR_VAR 0 14
31369: PUSH
31370: LD_VAR 0 14
31374: PPUSH
31375: LD_VAR 0 14
31379: PUSH
31380: LD_INT 1
31382: PLUS
31383: PPUSH
31384: LD_INT 3
31386: PPUSH
31387: CALL_OW 1
31391: ST_TO_ADDR
// if missile < 2 then
31392: LD_VAR 0 14
31396: PUSH
31397: LD_INT 2
31399: LESS
31400: IFFALSE 31404
// exit ;
31402: GO 31626
// x := GetX ( enemy ) ;
31404: LD_ADDR_VAR 0 4
31408: PUSH
31409: LD_VAR 0 10
31413: PPUSH
31414: CALL_OW 250
31418: ST_TO_ADDR
// y := GetY ( enemy ) ;
31419: LD_ADDR_VAR 0 5
31423: PUSH
31424: LD_VAR 0 10
31428: PPUSH
31429: CALL_OW 251
31433: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31434: LD_ADDR_VAR 0 6
31438: PUSH
31439: LD_VAR 0 4
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PPUSH
31448: LD_INT 1
31450: PPUSH
31451: CALL_OW 12
31455: PLUS
31456: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31457: LD_ADDR_VAR 0 7
31461: PUSH
31462: LD_VAR 0 5
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PPUSH
31471: LD_INT 1
31473: PPUSH
31474: CALL_OW 12
31478: PLUS
31479: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31480: LD_VAR 0 6
31484: PPUSH
31485: LD_VAR 0 7
31489: PPUSH
31490: CALL_OW 488
31494: NOT
31495: IFFALSE 31517
// begin _x := x ;
31497: LD_ADDR_VAR 0 6
31501: PUSH
31502: LD_VAR 0 4
31506: ST_TO_ADDR
// _y := y ;
31507: LD_ADDR_VAR 0 7
31511: PUSH
31512: LD_VAR 0 5
31516: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31517: LD_ADDR_VAR 0 3
31521: PUSH
31522: LD_INT 1
31524: PPUSH
31525: LD_VAR 0 14
31529: PPUSH
31530: CALL_OW 12
31534: ST_TO_ADDR
// case i of 1 :
31535: LD_VAR 0 3
31539: PUSH
31540: LD_INT 1
31542: DOUBLE
31543: EQUAL
31544: IFTRUE 31548
31546: GO 31565
31548: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31549: LD_VAR 0 1
31553: PPUSH
31554: LD_VAR 0 10
31558: PPUSH
31559: CALL_OW 115
31563: GO 31626
31565: LD_INT 2
31567: DOUBLE
31568: EQUAL
31569: IFTRUE 31573
31571: GO 31595
31573: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31574: LD_VAR 0 1
31578: PPUSH
31579: LD_VAR 0 6
31583: PPUSH
31584: LD_VAR 0 7
31588: PPUSH
31589: CALL_OW 153
31593: GO 31626
31595: LD_INT 3
31597: DOUBLE
31598: EQUAL
31599: IFTRUE 31603
31601: GO 31625
31603: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31604: LD_VAR 0 1
31608: PPUSH
31609: LD_VAR 0 6
31613: PPUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: CALL_OW 154
31623: GO 31626
31625: POP
// end ;
31626: LD_VAR 0 2
31630: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
31637: PPUSH
31638: PPUSH
// if not unit or not building then
31639: LD_VAR 0 1
31643: NOT
31644: PUSH
31645: LD_VAR 0 2
31649: NOT
31650: OR
31651: IFFALSE 31655
// exit ;
31653: GO 31813
// x := GetX ( building ) ;
31655: LD_ADDR_VAR 0 5
31659: PUSH
31660: LD_VAR 0 2
31664: PPUSH
31665: CALL_OW 250
31669: ST_TO_ADDR
// y := GetY ( building ) ;
31670: LD_ADDR_VAR 0 6
31674: PUSH
31675: LD_VAR 0 2
31679: PPUSH
31680: CALL_OW 251
31684: ST_TO_ADDR
// for i = 0 to 5 do
31685: LD_ADDR_VAR 0 4
31689: PUSH
31690: DOUBLE
31691: LD_INT 0
31693: DEC
31694: ST_TO_ADDR
31695: LD_INT 5
31697: PUSH
31698: FOR_TO
31699: IFFALSE 31811
// begin _x := ShiftX ( x , i , 3 ) ;
31701: LD_ADDR_VAR 0 7
31705: PUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: LD_VAR 0 4
31715: PPUSH
31716: LD_INT 3
31718: PPUSH
31719: CALL_OW 272
31723: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31724: LD_ADDR_VAR 0 8
31728: PUSH
31729: LD_VAR 0 6
31733: PPUSH
31734: LD_VAR 0 4
31738: PPUSH
31739: LD_INT 3
31741: PPUSH
31742: CALL_OW 273
31746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31747: LD_VAR 0 7
31751: PPUSH
31752: LD_VAR 0 8
31756: PPUSH
31757: CALL_OW 488
31761: NOT
31762: IFFALSE 31766
// continue ;
31764: GO 31698
// if HexInfo ( _x , _y ) = 0 then
31766: LD_VAR 0 7
31770: PPUSH
31771: LD_VAR 0 8
31775: PPUSH
31776: CALL_OW 428
31780: PUSH
31781: LD_INT 0
31783: EQUAL
31784: IFFALSE 31809
// begin ComMoveXY ( unit , _x , _y ) ;
31786: LD_VAR 0 1
31790: PPUSH
31791: LD_VAR 0 7
31795: PPUSH
31796: LD_VAR 0 8
31800: PPUSH
31801: CALL_OW 111
// exit ;
31805: POP
31806: POP
31807: GO 31813
// end ; end ;
31809: GO 31698
31811: POP
31812: POP
// end ;
31813: LD_VAR 0 3
31817: RET
// export function ScanBase ( side , base_area ) ; begin
31818: LD_INT 0
31820: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31821: LD_ADDR_VAR 0 3
31825: PUSH
31826: LD_VAR 0 2
31830: PPUSH
31831: LD_INT 81
31833: PUSH
31834: LD_VAR 0 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PPUSH
31843: CALL_OW 70
31847: ST_TO_ADDR
// end ;
31848: LD_VAR 0 3
31852: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
31857: PPUSH
31858: PPUSH
// result := false ;
31859: LD_ADDR_VAR 0 2
31863: PUSH
31864: LD_INT 0
31866: ST_TO_ADDR
// side := GetSide ( unit ) ;
31867: LD_ADDR_VAR 0 3
31871: PUSH
31872: LD_VAR 0 1
31876: PPUSH
31877: CALL_OW 255
31881: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31882: LD_ADDR_VAR 0 4
31886: PUSH
31887: LD_VAR 0 1
31891: PPUSH
31892: CALL_OW 248
31896: ST_TO_ADDR
// case nat of 1 :
31897: LD_VAR 0 4
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// tech := tech_lassight ; 2 :
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: LD_INT 12
31918: ST_TO_ADDR
31919: GO 31960
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31940
31929: POP
// tech := tech_mortar ; 3 :
31930: LD_ADDR_VAR 0 5
31934: PUSH
31935: LD_INT 41
31937: ST_TO_ADDR
31938: GO 31960
31940: LD_INT 3
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31959
31948: POP
// tech := tech_bazooka ; end ;
31949: LD_ADDR_VAR 0 5
31953: PUSH
31954: LD_INT 44
31956: ST_TO_ADDR
31957: GO 31960
31959: POP
// if Researched ( side , tech ) then
31960: LD_VAR 0 3
31964: PPUSH
31965: LD_VAR 0 5
31969: PPUSH
31970: CALL_OW 325
31974: IFFALSE 32001
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31976: LD_ADDR_VAR 0 2
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: LD_INT 8
31986: PUSH
31987: LD_INT 9
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: PUSH
31995: LD_VAR 0 4
31999: ARRAY
32000: ST_TO_ADDR
// end ;
32001: LD_VAR 0 2
32005: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32006: LD_INT 0
32008: PPUSH
32009: PPUSH
32010: PPUSH
// if not mines then
32011: LD_VAR 0 2
32015: NOT
32016: IFFALSE 32020
// exit ;
32018: GO 32164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32020: LD_ADDR_VAR 0 5
32024: PUSH
32025: LD_INT 81
32027: PUSH
32028: LD_VAR 0 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: LD_INT 21
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PPUSH
32058: CALL_OW 69
32062: ST_TO_ADDR
// for i in mines do
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: LD_VAR 0 2
32072: PUSH
32073: FOR_IN
32074: IFFALSE 32162
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32076: LD_VAR 0 4
32080: PUSH
32081: LD_INT 1
32083: ARRAY
32084: PPUSH
32085: LD_VAR 0 4
32089: PUSH
32090: LD_INT 2
32092: ARRAY
32093: PPUSH
32094: CALL_OW 458
32098: NOT
32099: IFFALSE 32103
// continue ;
32101: GO 32073
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32103: LD_VAR 0 4
32107: PUSH
32108: LD_INT 1
32110: ARRAY
32111: PPUSH
32112: LD_VAR 0 4
32116: PUSH
32117: LD_INT 2
32119: ARRAY
32120: PPUSH
32121: CALL_OW 428
32125: PUSH
32126: LD_VAR 0 5
32130: IN
32131: IFFALSE 32160
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32133: LD_VAR 0 4
32137: PUSH
32138: LD_INT 1
32140: ARRAY
32141: PPUSH
32142: LD_VAR 0 4
32146: PUSH
32147: LD_INT 2
32149: ARRAY
32150: PPUSH
32151: LD_VAR 0 1
32155: PPUSH
32156: CALL_OW 456
// end ;
32160: GO 32073
32162: POP
32163: POP
// end ;
32164: LD_VAR 0 3
32168: RET
// export function Count ( array ) ; var i ; begin
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
// result := 0 ;
32173: LD_ADDR_VAR 0 2
32177: PUSH
32178: LD_INT 0
32180: ST_TO_ADDR
// for i in array do
32181: LD_ADDR_VAR 0 3
32185: PUSH
32186: LD_VAR 0 1
32190: PUSH
32191: FOR_IN
32192: IFFALSE 32216
// if i then
32194: LD_VAR 0 3
32198: IFFALSE 32214
// result := result + 1 ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_VAR 0 2
32209: PUSH
32210: LD_INT 1
32212: PLUS
32213: ST_TO_ADDR
32214: GO 32191
32216: POP
32217: POP
// end ;
32218: LD_VAR 0 2
32222: RET
// export function IsEmpty ( building ) ; begin
32223: LD_INT 0
32225: PPUSH
// if not building then
32226: LD_VAR 0 1
32230: NOT
32231: IFFALSE 32235
// exit ;
32233: GO 32278
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32235: LD_ADDR_VAR 0 2
32239: PUSH
32240: LD_VAR 0 1
32244: PUSH
32245: LD_INT 22
32247: PUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 255
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 58
32264: PUSH
32265: EMPTY
32266: LIST
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PPUSH
32272: CALL_OW 69
32276: IN
32277: ST_TO_ADDR
// end ;
32278: LD_VAR 0 2
32282: RET
// export function IsNotFull ( building ) ; var places ; begin
32283: LD_INT 0
32285: PPUSH
32286: PPUSH
// if not building then
32287: LD_VAR 0 1
32291: NOT
32292: IFFALSE 32296
// exit ;
32294: GO 32467
// result := false ;
32296: LD_ADDR_VAR 0 2
32300: PUSH
32301: LD_INT 0
32303: ST_TO_ADDR
// places := 0 ;
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: LD_INT 0
32311: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32312: LD_VAR 0 1
32316: PPUSH
32317: CALL_OW 266
32321: PUSH
32322: LD_INT 0
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32384
32328: LD_INT 1
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32384
32334: LD_INT 6
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32384
32340: LD_INT 7
32342: DOUBLE
32343: EQUAL
32344: IFTRUE 32384
32346: LD_INT 8
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32384
32352: LD_INT 4
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32384
32358: LD_INT 5
32360: DOUBLE
32361: EQUAL
32362: IFTRUE 32384
32364: LD_INT 2
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32384
32370: LD_INT 3
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32384
32376: LD_INT 35
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32395
32384: POP
// places := 6 ; b_bunker , b_breastwork :
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 6
32392: ST_TO_ADDR
32393: GO 32440
32395: LD_INT 32
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32409
32401: LD_INT 31
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32420
32409: POP
// places := 1 ; b_control_tower :
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: LD_INT 1
32417: ST_TO_ADDR
32418: GO 32440
32420: LD_INT 36
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32428
32426: GO 32439
32428: POP
// places := 3 ; end ;
32429: LD_ADDR_VAR 0 3
32433: PUSH
32434: LD_INT 3
32436: ST_TO_ADDR
32437: GO 32440
32439: POP
// if places then
32440: LD_VAR 0 3
32444: IFFALSE 32467
// result := UnitsInside ( building ) < places ;
32446: LD_ADDR_VAR 0 2
32450: PUSH
32451: LD_VAR 0 1
32455: PPUSH
32456: CALL_OW 313
32460: PUSH
32461: LD_VAR 0 3
32465: LESS
32466: ST_TO_ADDR
// end ;
32467: LD_VAR 0 2
32471: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32472: LD_INT 0
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
// tmp := [ ] ;
32478: LD_ADDR_VAR 0 3
32482: PUSH
32483: EMPTY
32484: ST_TO_ADDR
// list := [ ] ;
32485: LD_ADDR_VAR 0 5
32489: PUSH
32490: EMPTY
32491: ST_TO_ADDR
// for i = 16 to 25 do
32492: LD_ADDR_VAR 0 4
32496: PUSH
32497: DOUBLE
32498: LD_INT 16
32500: DEC
32501: ST_TO_ADDR
32502: LD_INT 25
32504: PUSH
32505: FOR_TO
32506: IFFALSE 32579
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32508: LD_ADDR_VAR 0 3
32512: PUSH
32513: LD_VAR 0 3
32517: PUSH
32518: LD_INT 22
32520: PUSH
32521: LD_VAR 0 1
32525: PPUSH
32526: CALL_OW 255
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 91
32537: PUSH
32538: LD_VAR 0 1
32542: PUSH
32543: LD_INT 6
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 30
32553: PUSH
32554: LD_VAR 0 4
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: PPUSH
32571: CALL_OW 69
32575: ADD
32576: ST_TO_ADDR
32577: GO 32505
32579: POP
32580: POP
// for i = 1 to tmp do
32581: LD_ADDR_VAR 0 4
32585: PUSH
32586: DOUBLE
32587: LD_INT 1
32589: DEC
32590: ST_TO_ADDR
32591: LD_VAR 0 3
32595: PUSH
32596: FOR_TO
32597: IFFALSE 32685
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_VAR 0 5
32608: PUSH
32609: LD_VAR 0 3
32613: PUSH
32614: LD_VAR 0 4
32618: ARRAY
32619: PPUSH
32620: CALL_OW 266
32624: PUSH
32625: LD_VAR 0 3
32629: PUSH
32630: LD_VAR 0 4
32634: ARRAY
32635: PPUSH
32636: CALL_OW 250
32640: PUSH
32641: LD_VAR 0 3
32645: PUSH
32646: LD_VAR 0 4
32650: ARRAY
32651: PPUSH
32652: CALL_OW 251
32656: PUSH
32657: LD_VAR 0 3
32661: PUSH
32662: LD_VAR 0 4
32666: ARRAY
32667: PPUSH
32668: CALL_OW 254
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: ADD
32682: ST_TO_ADDR
32683: GO 32596
32685: POP
32686: POP
// result := list ;
32687: LD_ADDR_VAR 0 2
32691: PUSH
32692: LD_VAR 0 5
32696: ST_TO_ADDR
// end ;
32697: LD_VAR 0 2
32701: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32702: LD_INT 0
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
32708: PPUSH
32709: PPUSH
32710: PPUSH
// if not factory then
32711: LD_VAR 0 1
32715: NOT
32716: IFFALSE 32720
// exit ;
32718: GO 33313
// if control = control_apeman then
32720: LD_VAR 0 4
32724: PUSH
32725: LD_INT 5
32727: EQUAL
32728: IFFALSE 32837
// begin tmp := UnitsInside ( factory ) ;
32730: LD_ADDR_VAR 0 8
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 313
32744: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32745: LD_VAR 0 8
32749: PPUSH
32750: LD_INT 25
32752: PUSH
32753: LD_INT 12
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PPUSH
32760: CALL_OW 72
32764: NOT
32765: IFFALSE 32775
// control := control_manual ;
32767: LD_ADDR_VAR 0 4
32771: PUSH
32772: LD_INT 1
32774: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32775: LD_ADDR_VAR 0 8
32779: PUSH
32780: LD_VAR 0 1
32784: PPUSH
32785: CALL 32472 0 1
32789: ST_TO_ADDR
// if tmp then
32790: LD_VAR 0 8
32794: IFFALSE 32837
// begin for i in tmp do
32796: LD_ADDR_VAR 0 7
32800: PUSH
32801: LD_VAR 0 8
32805: PUSH
32806: FOR_IN
32807: IFFALSE 32835
// if i [ 1 ] = b_ext_radio then
32809: LD_VAR 0 7
32813: PUSH
32814: LD_INT 1
32816: ARRAY
32817: PUSH
32818: LD_INT 22
32820: EQUAL
32821: IFFALSE 32833
// begin control := control_remote ;
32823: LD_ADDR_VAR 0 4
32827: PUSH
32828: LD_INT 2
32830: ST_TO_ADDR
// break ;
32831: GO 32835
// end ;
32833: GO 32806
32835: POP
32836: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32837: LD_VAR 0 1
32841: PPUSH
32842: LD_VAR 0 2
32846: PPUSH
32847: LD_VAR 0 3
32851: PPUSH
32852: LD_VAR 0 4
32856: PPUSH
32857: LD_VAR 0 5
32861: PPUSH
32862: CALL_OW 448
32866: IFFALSE 32901
// begin result := [ chassis , engine , control , weapon ] ;
32868: LD_ADDR_VAR 0 6
32872: PUSH
32873: LD_VAR 0 2
32877: PUSH
32878: LD_VAR 0 3
32882: PUSH
32883: LD_VAR 0 4
32887: PUSH
32888: LD_VAR 0 5
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
// exit ;
32899: GO 33313
// end ; _chassis := AvailableChassisList ( factory ) ;
32901: LD_ADDR_VAR 0 9
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 475
32915: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32916: LD_ADDR_VAR 0 11
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 476
32930: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32931: LD_ADDR_VAR 0 12
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 477
32945: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32946: LD_ADDR_VAR 0 10
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 478
32960: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32961: LD_VAR 0 9
32965: NOT
32966: PUSH
32967: LD_VAR 0 11
32971: NOT
32972: OR
32973: PUSH
32974: LD_VAR 0 12
32978: NOT
32979: OR
32980: PUSH
32981: LD_VAR 0 10
32985: NOT
32986: OR
32987: IFFALSE 33022
// begin result := [ chassis , engine , control , weapon ] ;
32989: LD_ADDR_VAR 0 6
32993: PUSH
32994: LD_VAR 0 2
32998: PUSH
32999: LD_VAR 0 3
33003: PUSH
33004: LD_VAR 0 4
33008: PUSH
33009: LD_VAR 0 5
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: ST_TO_ADDR
// exit ;
33020: GO 33313
// end ; if not chassis in _chassis then
33022: LD_VAR 0 2
33026: PUSH
33027: LD_VAR 0 9
33031: IN
33032: NOT
33033: IFFALSE 33059
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33035: LD_ADDR_VAR 0 2
33039: PUSH
33040: LD_VAR 0 9
33044: PUSH
33045: LD_INT 1
33047: PPUSH
33048: LD_VAR 0 9
33052: PPUSH
33053: CALL_OW 12
33057: ARRAY
33058: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33059: LD_VAR 0 2
33063: PPUSH
33064: LD_VAR 0 3
33068: PPUSH
33069: CALL 33318 0 2
33073: NOT
33074: IFFALSE 33133
// repeat engine := _engine [ 1 ] ;
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_VAR 0 11
33085: PUSH
33086: LD_INT 1
33088: ARRAY
33089: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33090: LD_ADDR_VAR 0 11
33094: PUSH
33095: LD_VAR 0 11
33099: PPUSH
33100: LD_INT 1
33102: PPUSH
33103: CALL_OW 3
33107: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33108: LD_VAR 0 2
33112: PPUSH
33113: LD_VAR 0 3
33117: PPUSH
33118: CALL 33318 0 2
33122: PUSH
33123: LD_VAR 0 11
33127: PUSH
33128: EMPTY
33129: EQUAL
33130: OR
33131: IFFALSE 33076
// if not control in _control then
33133: LD_VAR 0 4
33137: PUSH
33138: LD_VAR 0 12
33142: IN
33143: NOT
33144: IFFALSE 33170
// control := _control [ rand ( 1 , _control ) ] ;
33146: LD_ADDR_VAR 0 4
33150: PUSH
33151: LD_VAR 0 12
33155: PUSH
33156: LD_INT 1
33158: PPUSH
33159: LD_VAR 0 12
33163: PPUSH
33164: CALL_OW 12
33168: ARRAY
33169: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33170: LD_VAR 0 2
33174: PPUSH
33175: LD_VAR 0 5
33179: PPUSH
33180: CALL 33538 0 2
33184: NOT
33185: IFFALSE 33244
// repeat weapon := _weapon [ 1 ] ;
33187: LD_ADDR_VAR 0 5
33191: PUSH
33192: LD_VAR 0 10
33196: PUSH
33197: LD_INT 1
33199: ARRAY
33200: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33201: LD_ADDR_VAR 0 10
33205: PUSH
33206: LD_VAR 0 10
33210: PPUSH
33211: LD_INT 1
33213: PPUSH
33214: CALL_OW 3
33218: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33219: LD_VAR 0 2
33223: PPUSH
33224: LD_VAR 0 5
33228: PPUSH
33229: CALL 33538 0 2
33233: PUSH
33234: LD_VAR 0 10
33238: PUSH
33239: EMPTY
33240: EQUAL
33241: OR
33242: IFFALSE 33187
// result := [ ] ;
33244: LD_ADDR_VAR 0 6
33248: PUSH
33249: EMPTY
33250: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33251: LD_VAR 0 1
33255: PPUSH
33256: LD_VAR 0 2
33260: PPUSH
33261: LD_VAR 0 3
33265: PPUSH
33266: LD_VAR 0 4
33270: PPUSH
33271: LD_VAR 0 5
33275: PPUSH
33276: CALL_OW 448
33280: IFFALSE 33313
// result := [ chassis , engine , control , weapon ] ;
33282: LD_ADDR_VAR 0 6
33286: PUSH
33287: LD_VAR 0 2
33291: PUSH
33292: LD_VAR 0 3
33296: PUSH
33297: LD_VAR 0 4
33301: PUSH
33302: LD_VAR 0 5
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
// end ;
33313: LD_VAR 0 6
33317: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33318: LD_INT 0
33320: PPUSH
// if not chassis or not engine then
33321: LD_VAR 0 1
33325: NOT
33326: PUSH
33327: LD_VAR 0 2
33331: NOT
33332: OR
33333: IFFALSE 33337
// exit ;
33335: GO 33533
// case engine of engine_solar :
33337: LD_VAR 0 2
33341: PUSH
33342: LD_INT 2
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33388
33350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_INT 11
33358: PUSH
33359: LD_INT 12
33361: PUSH
33362: LD_INT 13
33364: PUSH
33365: LD_INT 14
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: ST_TO_ADDR
33386: GO 33517
33388: LD_INT 1
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33396
33394: GO 33458
33396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33397: LD_ADDR_VAR 0 3
33401: PUSH
33402: LD_INT 11
33404: PUSH
33405: LD_INT 12
33407: PUSH
33408: LD_INT 13
33410: PUSH
33411: LD_INT 14
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: LD_INT 4
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: LD_INT 21
33431: PUSH
33432: LD_INT 23
33434: PUSH
33435: LD_INT 22
33437: PUSH
33438: LD_INT 24
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: ST_TO_ADDR
33456: GO 33517
33458: LD_INT 3
33460: DOUBLE
33461: EQUAL
33462: IFTRUE 33466
33464: GO 33516
33466: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_INT 13
33474: PUSH
33475: LD_INT 14
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 4
33486: PUSH
33487: LD_INT 5
33489: PUSH
33490: LD_INT 21
33492: PUSH
33493: LD_INT 22
33495: PUSH
33496: LD_INT 23
33498: PUSH
33499: LD_INT 24
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
33514: GO 33517
33516: POP
// result := ( chassis in result ) ;
33517: LD_ADDR_VAR 0 3
33521: PUSH
33522: LD_VAR 0 1
33526: PUSH
33527: LD_VAR 0 3
33531: IN
33532: ST_TO_ADDR
// end ;
33533: LD_VAR 0 3
33537: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33538: LD_INT 0
33540: PPUSH
// if not chassis or not weapon then
33541: LD_VAR 0 1
33545: NOT
33546: PUSH
33547: LD_VAR 0 2
33551: NOT
33552: OR
33553: IFFALSE 33557
// exit ;
33555: GO 34617
// case weapon of us_machine_gun :
33557: LD_VAR 0 2
33561: PUSH
33562: LD_INT 2
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33570
33568: GO 33600
33570: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33571: LD_ADDR_VAR 0 3
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
33598: GO 34601
33600: LD_INT 3
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33608
33606: GO 33638
33608: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33609: LD_ADDR_VAR 0 3
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 3
33622: PUSH
33623: LD_INT 4
33625: PUSH
33626: LD_INT 5
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 34601
33638: LD_INT 11
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33676
33646: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 34601
33676: LD_INT 4
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: LD_INT 4
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34601
33710: LD_INT 5
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: LD_INT 3
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 5
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 34601
33744: LD_INT 9
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33778
33752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: LD_INT 4
33766: PUSH
33767: LD_INT 5
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
33776: GO 34601
33778: LD_INT 7
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33812
33786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: LD_INT 4
33800: PUSH
33801: LD_INT 5
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 34601
33812: LD_INT 12
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33846
33820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
33844: GO 34601
33846: LD_INT 13
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33854
33852: GO 33880
33854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: LD_INT 4
33868: PUSH
33869: LD_INT 5
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
33878: GO 34601
33880: LD_INT 14
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 33906
33888: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33889: LD_ADDR_VAR 0 3
33893: PUSH
33894: LD_INT 4
33896: PUSH
33897: LD_INT 5
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: ST_TO_ADDR
33904: GO 34601
33906: LD_INT 6
33908: DOUBLE
33909: EQUAL
33910: IFTRUE 33914
33912: GO 33932
33914: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_INT 4
33922: PUSH
33923: LD_INT 5
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: ST_TO_ADDR
33930: GO 34601
33932: LD_INT 10
33934: DOUBLE
33935: EQUAL
33936: IFTRUE 33940
33938: GO 33958
33940: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33941: LD_ADDR_VAR 0 3
33945: PUSH
33946: LD_INT 4
33948: PUSH
33949: LD_INT 5
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: ST_TO_ADDR
33956: GO 34601
33958: LD_INT 22
33960: DOUBLE
33961: EQUAL
33962: IFTRUE 33966
33964: GO 33992
33966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33967: LD_ADDR_VAR 0 3
33971: PUSH
33972: LD_INT 11
33974: PUSH
33975: LD_INT 12
33977: PUSH
33978: LD_INT 13
33980: PUSH
33981: LD_INT 14
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
33990: GO 34601
33992: LD_INT 23
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34026
34000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_INT 11
34008: PUSH
34009: LD_INT 12
34011: PUSH
34012: LD_INT 13
34014: PUSH
34015: LD_INT 14
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
34024: GO 34601
34026: LD_INT 24
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34060
34034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34035: LD_ADDR_VAR 0 3
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: LD_INT 12
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34601
34060: LD_INT 30
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34094
34068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 11
34076: PUSH
34077: LD_INT 12
34079: PUSH
34080: LD_INT 13
34082: PUSH
34083: LD_INT 14
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
34092: GO 34601
34094: LD_INT 25
34096: DOUBLE
34097: EQUAL
34098: IFTRUE 34102
34100: GO 34120
34102: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34103: LD_ADDR_VAR 0 3
34107: PUSH
34108: LD_INT 13
34110: PUSH
34111: LD_INT 14
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: ST_TO_ADDR
34118: GO 34601
34120: LD_INT 27
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34128
34126: GO 34146
34128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_INT 13
34136: PUSH
34137: LD_INT 14
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: ST_TO_ADDR
34144: GO 34601
34146: LD_INT 92
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34180
34154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 11
34162: PUSH
34163: LD_INT 12
34165: PUSH
34166: LD_INT 13
34168: PUSH
34169: LD_INT 14
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
34178: GO 34601
34180: LD_INT 28
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34206
34188: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34189: LD_ADDR_VAR 0 3
34193: PUSH
34194: LD_INT 13
34196: PUSH
34197: LD_INT 14
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: ST_TO_ADDR
34204: GO 34601
34206: LD_INT 29
34208: DOUBLE
34209: EQUAL
34210: IFTRUE 34214
34212: GO 34232
34214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34215: LD_ADDR_VAR 0 3
34219: PUSH
34220: LD_INT 13
34222: PUSH
34223: LD_INT 14
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: ST_TO_ADDR
34230: GO 34601
34232: LD_INT 31
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34258
34240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_INT 13
34248: PUSH
34249: LD_INT 14
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: ST_TO_ADDR
34256: GO 34601
34258: LD_INT 26
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34284
34266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34267: LD_ADDR_VAR 0 3
34271: PUSH
34272: LD_INT 13
34274: PUSH
34275: LD_INT 14
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: ST_TO_ADDR
34282: GO 34601
34284: LD_INT 42
34286: DOUBLE
34287: EQUAL
34288: IFTRUE 34292
34290: GO 34318
34292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34293: LD_ADDR_VAR 0 3
34297: PUSH
34298: LD_INT 21
34300: PUSH
34301: LD_INT 22
34303: PUSH
34304: LD_INT 23
34306: PUSH
34307: LD_INT 24
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
34316: GO 34601
34318: LD_INT 43
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34326
34324: GO 34352
34326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34327: LD_ADDR_VAR 0 3
34331: PUSH
34332: LD_INT 21
34334: PUSH
34335: LD_INT 22
34337: PUSH
34338: LD_INT 23
34340: PUSH
34341: LD_INT 24
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: ST_TO_ADDR
34350: GO 34601
34352: LD_INT 44
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34386
34360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_INT 21
34368: PUSH
34369: LD_INT 22
34371: PUSH
34372: LD_INT 23
34374: PUSH
34375: LD_INT 24
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: ST_TO_ADDR
34384: GO 34601
34386: LD_INT 45
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34394
34392: GO 34420
34394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_INT 21
34402: PUSH
34403: LD_INT 22
34405: PUSH
34406: LD_INT 23
34408: PUSH
34409: LD_INT 24
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: ST_TO_ADDR
34418: GO 34601
34420: LD_INT 49
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34454
34428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_INT 21
34436: PUSH
34437: LD_INT 22
34439: PUSH
34440: LD_INT 23
34442: PUSH
34443: LD_INT 24
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
34452: GO 34601
34454: LD_INT 51
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34488
34462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 21
34470: PUSH
34471: LD_INT 22
34473: PUSH
34474: LD_INT 23
34476: PUSH
34477: LD_INT 24
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
34486: GO 34601
34488: LD_INT 52
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34522
34496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 21
34504: PUSH
34505: LD_INT 22
34507: PUSH
34508: LD_INT 23
34510: PUSH
34511: LD_INT 24
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
34520: GO 34601
34522: LD_INT 53
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34530
34528: GO 34548
34530: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34531: LD_ADDR_VAR 0 3
34535: PUSH
34536: LD_INT 23
34538: PUSH
34539: LD_INT 24
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: ST_TO_ADDR
34546: GO 34601
34548: LD_INT 46
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 34574
34556: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_INT 23
34564: PUSH
34565: LD_INT 24
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: ST_TO_ADDR
34572: GO 34601
34574: LD_INT 47
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34582
34580: GO 34600
34582: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: LD_INT 23
34590: PUSH
34591: LD_INT 24
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: ST_TO_ADDR
34598: GO 34601
34600: POP
// result := ( chassis in result ) ;
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_VAR 0 1
34610: PUSH
34611: LD_VAR 0 3
34615: IN
34616: ST_TO_ADDR
// end ;
34617: LD_VAR 0 3
34621: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34622: LD_INT 0
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
// result := array ;
34631: LD_ADDR_VAR 0 5
34635: PUSH
34636: LD_VAR 0 1
34640: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34641: LD_VAR 0 1
34645: NOT
34646: PUSH
34647: LD_VAR 0 2
34651: NOT
34652: OR
34653: PUSH
34654: LD_VAR 0 3
34658: NOT
34659: OR
34660: PUSH
34661: LD_VAR 0 2
34665: PUSH
34666: LD_VAR 0 1
34670: GREATER
34671: OR
34672: PUSH
34673: LD_VAR 0 3
34677: PUSH
34678: LD_VAR 0 1
34682: GREATER
34683: OR
34684: IFFALSE 34688
// exit ;
34686: GO 34984
// if direction then
34688: LD_VAR 0 4
34692: IFFALSE 34756
// begin d := 1 ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: LD_INT 1
34701: ST_TO_ADDR
// if i_from > i_to then
34702: LD_VAR 0 2
34706: PUSH
34707: LD_VAR 0 3
34711: GREATER
34712: IFFALSE 34738
// length := ( array - i_from ) + i_to else
34714: LD_ADDR_VAR 0 11
34718: PUSH
34719: LD_VAR 0 1
34723: PUSH
34724: LD_VAR 0 2
34728: MINUS
34729: PUSH
34730: LD_VAR 0 3
34734: PLUS
34735: ST_TO_ADDR
34736: GO 34754
// length := i_to - i_from ;
34738: LD_ADDR_VAR 0 11
34742: PUSH
34743: LD_VAR 0 3
34747: PUSH
34748: LD_VAR 0 2
34752: MINUS
34753: ST_TO_ADDR
// end else
34754: GO 34817
// begin d := - 1 ;
34756: LD_ADDR_VAR 0 9
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: ST_TO_ADDR
// if i_from > i_to then
34765: LD_VAR 0 2
34769: PUSH
34770: LD_VAR 0 3
34774: GREATER
34775: IFFALSE 34795
// length := i_from - i_to else
34777: LD_ADDR_VAR 0 11
34781: PUSH
34782: LD_VAR 0 2
34786: PUSH
34787: LD_VAR 0 3
34791: MINUS
34792: ST_TO_ADDR
34793: GO 34817
// length := ( array - i_to ) + i_from ;
34795: LD_ADDR_VAR 0 11
34799: PUSH
34800: LD_VAR 0 1
34804: PUSH
34805: LD_VAR 0 3
34809: MINUS
34810: PUSH
34811: LD_VAR 0 2
34815: PLUS
34816: ST_TO_ADDR
// end ; if not length then
34817: LD_VAR 0 11
34821: NOT
34822: IFFALSE 34826
// exit ;
34824: GO 34984
// tmp := array ;
34826: LD_ADDR_VAR 0 10
34830: PUSH
34831: LD_VAR 0 1
34835: ST_TO_ADDR
// for i = 1 to length do
34836: LD_ADDR_VAR 0 6
34840: PUSH
34841: DOUBLE
34842: LD_INT 1
34844: DEC
34845: ST_TO_ADDR
34846: LD_VAR 0 11
34850: PUSH
34851: FOR_TO
34852: IFFALSE 34972
// begin for j = 1 to array do
34854: LD_ADDR_VAR 0 7
34858: PUSH
34859: DOUBLE
34860: LD_INT 1
34862: DEC
34863: ST_TO_ADDR
34864: LD_VAR 0 1
34868: PUSH
34869: FOR_TO
34870: IFFALSE 34958
// begin k := j + d ;
34872: LD_ADDR_VAR 0 8
34876: PUSH
34877: LD_VAR 0 7
34881: PUSH
34882: LD_VAR 0 9
34886: PLUS
34887: ST_TO_ADDR
// if k > array then
34888: LD_VAR 0 8
34892: PUSH
34893: LD_VAR 0 1
34897: GREATER
34898: IFFALSE 34908
// k := 1 ;
34900: LD_ADDR_VAR 0 8
34904: PUSH
34905: LD_INT 1
34907: ST_TO_ADDR
// if not k then
34908: LD_VAR 0 8
34912: NOT
34913: IFFALSE 34925
// k := array ;
34915: LD_ADDR_VAR 0 8
34919: PUSH
34920: LD_VAR 0 1
34924: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34925: LD_ADDR_VAR 0 10
34929: PUSH
34930: LD_VAR 0 10
34934: PPUSH
34935: LD_VAR 0 8
34939: PPUSH
34940: LD_VAR 0 1
34944: PUSH
34945: LD_VAR 0 7
34949: ARRAY
34950: PPUSH
34951: CALL_OW 1
34955: ST_TO_ADDR
// end ;
34956: GO 34869
34958: POP
34959: POP
// array := tmp ;
34960: LD_ADDR_VAR 0 1
34964: PUSH
34965: LD_VAR 0 10
34969: ST_TO_ADDR
// end ;
34970: GO 34851
34972: POP
34973: POP
// result := array ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_VAR 0 1
34983: ST_TO_ADDR
// end ;
34984: LD_VAR 0 5
34988: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34989: LD_INT 0
34991: PPUSH
34992: PPUSH
// result := 0 ;
34993: LD_ADDR_VAR 0 3
34997: PUSH
34998: LD_INT 0
35000: ST_TO_ADDR
// if not array or not value in array then
35001: LD_VAR 0 1
35005: NOT
35006: PUSH
35007: LD_VAR 0 2
35011: PUSH
35012: LD_VAR 0 1
35016: IN
35017: NOT
35018: OR
35019: IFFALSE 35023
// exit ;
35021: GO 35077
// for i = 1 to array do
35023: LD_ADDR_VAR 0 4
35027: PUSH
35028: DOUBLE
35029: LD_INT 1
35031: DEC
35032: ST_TO_ADDR
35033: LD_VAR 0 1
35037: PUSH
35038: FOR_TO
35039: IFFALSE 35075
// if value = array [ i ] then
35041: LD_VAR 0 2
35045: PUSH
35046: LD_VAR 0 1
35050: PUSH
35051: LD_VAR 0 4
35055: ARRAY
35056: EQUAL
35057: IFFALSE 35073
// begin result := i ;
35059: LD_ADDR_VAR 0 3
35063: PUSH
35064: LD_VAR 0 4
35068: ST_TO_ADDR
// exit ;
35069: POP
35070: POP
35071: GO 35077
// end ;
35073: GO 35038
35075: POP
35076: POP
// end ;
35077: LD_VAR 0 3
35081: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35082: LD_INT 0
35084: PPUSH
// vc_chassis := chassis ;
35085: LD_ADDR_OWVAR 37
35089: PUSH
35090: LD_VAR 0 1
35094: ST_TO_ADDR
// vc_engine := engine ;
35095: LD_ADDR_OWVAR 39
35099: PUSH
35100: LD_VAR 0 2
35104: ST_TO_ADDR
// vc_control := control ;
35105: LD_ADDR_OWVAR 38
35109: PUSH
35110: LD_VAR 0 3
35114: ST_TO_ADDR
// vc_weapon := weapon ;
35115: LD_ADDR_OWVAR 40
35119: PUSH
35120: LD_VAR 0 4
35124: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35125: LD_ADDR_OWVAR 41
35129: PUSH
35130: LD_VAR 0 5
35134: ST_TO_ADDR
// end ;
35135: LD_VAR 0 6
35139: RET
// export function WantPlant ( unit ) ; var task ; begin
35140: LD_INT 0
35142: PPUSH
35143: PPUSH
// result := false ;
35144: LD_ADDR_VAR 0 2
35148: PUSH
35149: LD_INT 0
35151: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_VAR 0 1
35161: PPUSH
35162: CALL_OW 437
35166: ST_TO_ADDR
// if task then
35167: LD_VAR 0 3
35171: IFFALSE 35199
// if task [ 1 ] [ 1 ] = p then
35173: LD_VAR 0 3
35177: PUSH
35178: LD_INT 1
35180: ARRAY
35181: PUSH
35182: LD_INT 1
35184: ARRAY
35185: PUSH
35186: LD_STRING p
35188: EQUAL
35189: IFFALSE 35199
// result := true ;
35191: LD_ADDR_VAR 0 2
35195: PUSH
35196: LD_INT 1
35198: ST_TO_ADDR
// end ;
35199: LD_VAR 0 2
35203: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35204: LD_INT 0
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
// if pos < 1 then
35210: LD_VAR 0 2
35214: PUSH
35215: LD_INT 1
35217: LESS
35218: IFFALSE 35222
// exit ;
35220: GO 35525
// if pos = 1 then
35222: LD_VAR 0 2
35226: PUSH
35227: LD_INT 1
35229: EQUAL
35230: IFFALSE 35263
// result := Replace ( arr , pos [ 1 ] , value ) else
35232: LD_ADDR_VAR 0 4
35236: PUSH
35237: LD_VAR 0 1
35241: PPUSH
35242: LD_VAR 0 2
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: PPUSH
35251: LD_VAR 0 3
35255: PPUSH
35256: CALL_OW 1
35260: ST_TO_ADDR
35261: GO 35525
// begin tmp := arr ;
35263: LD_ADDR_VAR 0 6
35267: PUSH
35268: LD_VAR 0 1
35272: ST_TO_ADDR
// s_arr := [ tmp ] ;
35273: LD_ADDR_VAR 0 7
35277: PUSH
35278: LD_VAR 0 6
35282: PUSH
35283: EMPTY
35284: LIST
35285: ST_TO_ADDR
// for i = 1 to pos - 1 do
35286: LD_ADDR_VAR 0 5
35290: PUSH
35291: DOUBLE
35292: LD_INT 1
35294: DEC
35295: ST_TO_ADDR
35296: LD_VAR 0 2
35300: PUSH
35301: LD_INT 1
35303: MINUS
35304: PUSH
35305: FOR_TO
35306: IFFALSE 35351
// begin tmp := tmp [ pos [ i ] ] ;
35308: LD_ADDR_VAR 0 6
35312: PUSH
35313: LD_VAR 0 6
35317: PUSH
35318: LD_VAR 0 2
35322: PUSH
35323: LD_VAR 0 5
35327: ARRAY
35328: ARRAY
35329: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35330: LD_ADDR_VAR 0 7
35334: PUSH
35335: LD_VAR 0 7
35339: PUSH
35340: LD_VAR 0 6
35344: PUSH
35345: EMPTY
35346: LIST
35347: ADD
35348: ST_TO_ADDR
// end ;
35349: GO 35305
35351: POP
35352: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35353: LD_ADDR_VAR 0 6
35357: PUSH
35358: LD_VAR 0 6
35362: PPUSH
35363: LD_VAR 0 2
35367: PUSH
35368: LD_VAR 0 2
35372: ARRAY
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 1
35383: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35384: LD_ADDR_VAR 0 7
35388: PUSH
35389: LD_VAR 0 7
35393: PPUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: LD_VAR 0 6
35403: PPUSH
35404: CALL_OW 1
35408: ST_TO_ADDR
// for i = s_arr downto 2 do
35409: LD_ADDR_VAR 0 5
35413: PUSH
35414: DOUBLE
35415: LD_VAR 0 7
35419: INC
35420: ST_TO_ADDR
35421: LD_INT 2
35423: PUSH
35424: FOR_DOWNTO
35425: IFFALSE 35509
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35427: LD_ADDR_VAR 0 6
35431: PUSH
35432: LD_VAR 0 7
35436: PUSH
35437: LD_VAR 0 5
35441: PUSH
35442: LD_INT 1
35444: MINUS
35445: ARRAY
35446: PPUSH
35447: LD_VAR 0 2
35451: PUSH
35452: LD_VAR 0 5
35456: PUSH
35457: LD_INT 1
35459: MINUS
35460: ARRAY
35461: PPUSH
35462: LD_VAR 0 7
35466: PUSH
35467: LD_VAR 0 5
35471: ARRAY
35472: PPUSH
35473: CALL_OW 1
35477: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35478: LD_ADDR_VAR 0 7
35482: PUSH
35483: LD_VAR 0 7
35487: PPUSH
35488: LD_VAR 0 5
35492: PUSH
35493: LD_INT 1
35495: MINUS
35496: PPUSH
35497: LD_VAR 0 6
35501: PPUSH
35502: CALL_OW 1
35506: ST_TO_ADDR
// end ;
35507: GO 35424
35509: POP
35510: POP
// result := s_arr [ 1 ] ;
35511: LD_ADDR_VAR 0 4
35515: PUSH
35516: LD_VAR 0 7
35520: PUSH
35521: LD_INT 1
35523: ARRAY
35524: ST_TO_ADDR
// end ; end ;
35525: LD_VAR 0 4
35529: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35530: LD_INT 0
35532: PPUSH
35533: PPUSH
// if not list then
35534: LD_VAR 0 1
35538: NOT
35539: IFFALSE 35543
// exit ;
35541: GO 35634
// i := list [ pos1 ] ;
35543: LD_ADDR_VAR 0 5
35547: PUSH
35548: LD_VAR 0 1
35552: PUSH
35553: LD_VAR 0 2
35557: ARRAY
35558: ST_TO_ADDR
// if not i then
35559: LD_VAR 0 5
35563: NOT
35564: IFFALSE 35568
// exit ;
35566: GO 35634
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35568: LD_ADDR_VAR 0 1
35572: PUSH
35573: LD_VAR 0 1
35577: PPUSH
35578: LD_VAR 0 2
35582: PPUSH
35583: LD_VAR 0 1
35587: PUSH
35588: LD_VAR 0 3
35592: ARRAY
35593: PPUSH
35594: CALL_OW 1
35598: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35599: LD_ADDR_VAR 0 1
35603: PUSH
35604: LD_VAR 0 1
35608: PPUSH
35609: LD_VAR 0 3
35613: PPUSH
35614: LD_VAR 0 5
35618: PPUSH
35619: CALL_OW 1
35623: ST_TO_ADDR
// result := list ;
35624: LD_ADDR_VAR 0 4
35628: PUSH
35629: LD_VAR 0 1
35633: ST_TO_ADDR
// end ;
35634: LD_VAR 0 4
35638: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35639: LD_INT 0
35641: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35642: LD_ADDR_VAR 0 5
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 250
35656: PPUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 251
35666: PPUSH
35667: LD_VAR 0 2
35671: PPUSH
35672: LD_VAR 0 3
35676: PPUSH
35677: LD_VAR 0 4
35681: PPUSH
35682: CALL 35692 0 5
35686: ST_TO_ADDR
// end ;
35687: LD_VAR 0 5
35691: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35692: LD_INT 0
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
// if not list then
35698: LD_VAR 0 3
35702: NOT
35703: IFFALSE 35707
// exit ;
35705: GO 36095
// result := [ ] ;
35707: LD_ADDR_VAR 0 6
35711: PUSH
35712: EMPTY
35713: ST_TO_ADDR
// for i in list do
35714: LD_ADDR_VAR 0 7
35718: PUSH
35719: LD_VAR 0 3
35723: PUSH
35724: FOR_IN
35725: IFFALSE 35927
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35727: LD_ADDR_VAR 0 9
35731: PUSH
35732: LD_VAR 0 7
35736: PPUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: LD_VAR 0 2
35746: PPUSH
35747: CALL_OW 297
35751: ST_TO_ADDR
// if not result then
35752: LD_VAR 0 6
35756: NOT
35757: IFFALSE 35783
// result := [ [ i , tmp ] ] else
35759: LD_ADDR_VAR 0 6
35763: PUSH
35764: LD_VAR 0 7
35768: PUSH
35769: LD_VAR 0 9
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: ST_TO_ADDR
35781: GO 35925
// begin if result [ result ] [ 2 ] < tmp then
35783: LD_VAR 0 6
35787: PUSH
35788: LD_VAR 0 6
35792: ARRAY
35793: PUSH
35794: LD_INT 2
35796: ARRAY
35797: PUSH
35798: LD_VAR 0 9
35802: LESS
35803: IFFALSE 35845
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35805: LD_ADDR_VAR 0 6
35809: PUSH
35810: LD_VAR 0 6
35814: PPUSH
35815: LD_VAR 0 6
35819: PUSH
35820: LD_INT 1
35822: PLUS
35823: PPUSH
35824: LD_VAR 0 7
35828: PUSH
35829: LD_VAR 0 9
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PPUSH
35838: CALL_OW 2
35842: ST_TO_ADDR
35843: GO 35925
// for j = 1 to result do
35845: LD_ADDR_VAR 0 8
35849: PUSH
35850: DOUBLE
35851: LD_INT 1
35853: DEC
35854: ST_TO_ADDR
35855: LD_VAR 0 6
35859: PUSH
35860: FOR_TO
35861: IFFALSE 35923
// begin if tmp < result [ j ] [ 2 ] then
35863: LD_VAR 0 9
35867: PUSH
35868: LD_VAR 0 6
35872: PUSH
35873: LD_VAR 0 8
35877: ARRAY
35878: PUSH
35879: LD_INT 2
35881: ARRAY
35882: LESS
35883: IFFALSE 35921
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35885: LD_ADDR_VAR 0 6
35889: PUSH
35890: LD_VAR 0 6
35894: PPUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: LD_VAR 0 7
35904: PUSH
35905: LD_VAR 0 9
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PPUSH
35914: CALL_OW 2
35918: ST_TO_ADDR
// break ;
35919: GO 35923
// end ; end ;
35921: GO 35860
35923: POP
35924: POP
// end ; end ;
35925: GO 35724
35927: POP
35928: POP
// if result and not asc then
35929: LD_VAR 0 6
35933: PUSH
35934: LD_VAR 0 4
35938: NOT
35939: AND
35940: IFFALSE 36015
// begin tmp := result ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_VAR 0 6
35951: ST_TO_ADDR
// for i = tmp downto 1 do
35952: LD_ADDR_VAR 0 7
35956: PUSH
35957: DOUBLE
35958: LD_VAR 0 9
35962: INC
35963: ST_TO_ADDR
35964: LD_INT 1
35966: PUSH
35967: FOR_DOWNTO
35968: IFFALSE 36013
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35970: LD_ADDR_VAR 0 6
35974: PUSH
35975: LD_VAR 0 6
35979: PPUSH
35980: LD_VAR 0 9
35984: PUSH
35985: LD_VAR 0 7
35989: MINUS
35990: PUSH
35991: LD_INT 1
35993: PLUS
35994: PPUSH
35995: LD_VAR 0 9
35999: PUSH
36000: LD_VAR 0 7
36004: ARRAY
36005: PPUSH
36006: CALL_OW 1
36010: ST_TO_ADDR
36011: GO 35967
36013: POP
36014: POP
// end ; tmp := [ ] ;
36015: LD_ADDR_VAR 0 9
36019: PUSH
36020: EMPTY
36021: ST_TO_ADDR
// if mode then
36022: LD_VAR 0 5
36026: IFFALSE 36095
// begin for i = 1 to result do
36028: LD_ADDR_VAR 0 7
36032: PUSH
36033: DOUBLE
36034: LD_INT 1
36036: DEC
36037: ST_TO_ADDR
36038: LD_VAR 0 6
36042: PUSH
36043: FOR_TO
36044: IFFALSE 36083
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36046: LD_ADDR_VAR 0 9
36050: PUSH
36051: LD_VAR 0 9
36055: PPUSH
36056: LD_VAR 0 7
36060: PPUSH
36061: LD_VAR 0 6
36065: PUSH
36066: LD_VAR 0 7
36070: ARRAY
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: PPUSH
36076: CALL_OW 1
36080: ST_TO_ADDR
36081: GO 36043
36083: POP
36084: POP
// result := tmp ;
36085: LD_ADDR_VAR 0 6
36089: PUSH
36090: LD_VAR 0 9
36094: ST_TO_ADDR
// end ; end ;
36095: LD_VAR 0 6
36099: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36108: LD_ADDR_VAR 0 5
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: EMPTY
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: ST_TO_ADDR
// if not x or not y then
36130: LD_VAR 0 2
36134: NOT
36135: PUSH
36136: LD_VAR 0 3
36140: NOT
36141: OR
36142: IFFALSE 36146
// exit ;
36144: GO 37796
// if not range then
36146: LD_VAR 0 4
36150: NOT
36151: IFFALSE 36161
// range := 10 ;
36153: LD_ADDR_VAR 0 4
36157: PUSH
36158: LD_INT 10
36160: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36161: LD_ADDR_VAR 0 8
36165: PUSH
36166: LD_INT 81
36168: PUSH
36169: LD_VAR 0 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 92
36180: PUSH
36181: LD_VAR 0 2
36185: PUSH
36186: LD_VAR 0 3
36190: PUSH
36191: LD_VAR 0 4
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 3
36204: PUSH
36205: LD_INT 21
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL_OW 69
36228: ST_TO_ADDR
// if not tmp then
36229: LD_VAR 0 8
36233: NOT
36234: IFFALSE 36238
// exit ;
36236: GO 37796
// for i in tmp do
36238: LD_ADDR_VAR 0 6
36242: PUSH
36243: LD_VAR 0 8
36247: PUSH
36248: FOR_IN
36249: IFFALSE 37771
// begin points := [ 0 , 0 , 0 ] ;
36251: LD_ADDR_VAR 0 9
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: ST_TO_ADDR
// bpoints := 1 ;
36270: LD_ADDR_VAR 0 10
36274: PUSH
36275: LD_INT 1
36277: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36278: LD_VAR 0 6
36282: PPUSH
36283: CALL_OW 247
36287: PUSH
36288: LD_INT 1
36290: DOUBLE
36291: EQUAL
36292: IFTRUE 36296
36294: GO 36874
36296: POP
// begin if GetClass ( i ) = 1 then
36297: LD_VAR 0 6
36301: PPUSH
36302: CALL_OW 257
36306: PUSH
36307: LD_INT 1
36309: EQUAL
36310: IFFALSE 36331
// points := [ 10 , 5 , 3 ] ;
36312: LD_ADDR_VAR 0 9
36316: PUSH
36317: LD_INT 10
36319: PUSH
36320: LD_INT 5
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36331: LD_VAR 0 6
36335: PPUSH
36336: CALL_OW 257
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: LD_INT 4
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: IN
36355: IFFALSE 36376
// points := [ 3 , 2 , 1 ] ;
36357: LD_ADDR_VAR 0 9
36361: PUSH
36362: LD_INT 3
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36376: LD_VAR 0 6
36380: PPUSH
36381: CALL_OW 257
36385: PUSH
36386: LD_INT 5
36388: EQUAL
36389: IFFALSE 36410
// points := [ 130 , 5 , 2 ] ;
36391: LD_ADDR_VAR 0 9
36395: PUSH
36396: LD_INT 130
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36410: LD_VAR 0 6
36414: PPUSH
36415: CALL_OW 257
36419: PUSH
36420: LD_INT 8
36422: EQUAL
36423: IFFALSE 36444
// points := [ 35 , 35 , 30 ] ;
36425: LD_ADDR_VAR 0 9
36429: PUSH
36430: LD_INT 35
36432: PUSH
36433: LD_INT 35
36435: PUSH
36436: LD_INT 30
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36444: LD_VAR 0 6
36448: PPUSH
36449: CALL_OW 257
36453: PUSH
36454: LD_INT 9
36456: EQUAL
36457: IFFALSE 36478
// points := [ 20 , 55 , 40 ] ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_INT 20
36466: PUSH
36467: LD_INT 55
36469: PUSH
36470: LD_INT 40
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36478: LD_VAR 0 6
36482: PPUSH
36483: CALL_OW 257
36487: PUSH
36488: LD_INT 12
36490: PUSH
36491: LD_INT 16
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: IN
36498: IFFALSE 36519
// points := [ 5 , 3 , 2 ] ;
36500: LD_ADDR_VAR 0 9
36504: PUSH
36505: LD_INT 5
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36519: LD_VAR 0 6
36523: PPUSH
36524: CALL_OW 257
36528: PUSH
36529: LD_INT 17
36531: EQUAL
36532: IFFALSE 36553
// points := [ 100 , 50 , 75 ] ;
36534: LD_ADDR_VAR 0 9
36538: PUSH
36539: LD_INT 100
36541: PUSH
36542: LD_INT 50
36544: PUSH
36545: LD_INT 75
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: LIST
36552: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36553: LD_VAR 0 6
36557: PPUSH
36558: CALL_OW 257
36562: PUSH
36563: LD_INT 15
36565: EQUAL
36566: IFFALSE 36587
// points := [ 10 , 5 , 3 ] ;
36568: LD_ADDR_VAR 0 9
36572: PUSH
36573: LD_INT 10
36575: PUSH
36576: LD_INT 5
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36587: LD_VAR 0 6
36591: PPUSH
36592: CALL_OW 257
36596: PUSH
36597: LD_INT 14
36599: EQUAL
36600: IFFALSE 36621
// points := [ 10 , 0 , 0 ] ;
36602: LD_ADDR_VAR 0 9
36606: PUSH
36607: LD_INT 10
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36621: LD_VAR 0 6
36625: PPUSH
36626: CALL_OW 257
36630: PUSH
36631: LD_INT 11
36633: EQUAL
36634: IFFALSE 36655
// points := [ 30 , 10 , 5 ] ;
36636: LD_ADDR_VAR 0 9
36640: PUSH
36641: LD_INT 30
36643: PUSH
36644: LD_INT 10
36646: PUSH
36647: LD_INT 5
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36655: LD_VAR 0 1
36659: PPUSH
36660: LD_INT 5
36662: PPUSH
36663: CALL_OW 321
36667: PUSH
36668: LD_INT 2
36670: EQUAL
36671: IFFALSE 36688
// bpoints := bpoints * 1.8 ;
36673: LD_ADDR_VAR 0 10
36677: PUSH
36678: LD_VAR 0 10
36682: PUSH
36683: LD_REAL  1.80000000000000E+0000
36686: MUL
36687: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36688: LD_VAR 0 6
36692: PPUSH
36693: CALL_OW 257
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: LD_INT 4
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: IN
36716: PUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: LD_INT 51
36724: PPUSH
36725: CALL_OW 321
36729: PUSH
36730: LD_INT 2
36732: EQUAL
36733: AND
36734: IFFALSE 36751
// bpoints := bpoints * 1.2 ;
36736: LD_ADDR_VAR 0 10
36740: PUSH
36741: LD_VAR 0 10
36745: PUSH
36746: LD_REAL  1.20000000000000E+0000
36749: MUL
36750: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36751: LD_VAR 0 6
36755: PPUSH
36756: CALL_OW 257
36760: PUSH
36761: LD_INT 5
36763: PUSH
36764: LD_INT 7
36766: PUSH
36767: LD_INT 9
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: IN
36775: PUSH
36776: LD_VAR 0 1
36780: PPUSH
36781: LD_INT 52
36783: PPUSH
36784: CALL_OW 321
36788: PUSH
36789: LD_INT 2
36791: EQUAL
36792: AND
36793: IFFALSE 36810
// bpoints := bpoints * 1.5 ;
36795: LD_ADDR_VAR 0 10
36799: PUSH
36800: LD_VAR 0 10
36804: PUSH
36805: LD_REAL  1.50000000000000E+0000
36808: MUL
36809: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36810: LD_VAR 0 1
36814: PPUSH
36815: LD_INT 66
36817: PPUSH
36818: CALL_OW 321
36822: PUSH
36823: LD_INT 2
36825: EQUAL
36826: IFFALSE 36843
// bpoints := bpoints * 1.1 ;
36828: LD_ADDR_VAR 0 10
36832: PUSH
36833: LD_VAR 0 10
36837: PUSH
36838: LD_REAL  1.10000000000000E+0000
36841: MUL
36842: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36843: LD_ADDR_VAR 0 10
36847: PUSH
36848: LD_VAR 0 10
36852: PUSH
36853: LD_VAR 0 6
36857: PPUSH
36858: LD_INT 1
36860: PPUSH
36861: CALL_OW 259
36865: PUSH
36866: LD_REAL  1.15000000000000E+0000
36869: MUL
36870: MUL
36871: ST_TO_ADDR
// end ; unit_vehicle :
36872: GO 37700
36874: LD_INT 2
36876: DOUBLE
36877: EQUAL
36878: IFTRUE 36882
36880: GO 37688
36882: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36883: LD_VAR 0 6
36887: PPUSH
36888: CALL_OW 264
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 42
36898: PUSH
36899: LD_INT 24
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: IN
36907: IFFALSE 36928
// points := [ 25 , 5 , 3 ] ;
36909: LD_ADDR_VAR 0 9
36913: PUSH
36914: LD_INT 25
36916: PUSH
36917: LD_INT 5
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36928: LD_VAR 0 6
36932: PPUSH
36933: CALL_OW 264
36937: PUSH
36938: LD_INT 4
36940: PUSH
36941: LD_INT 43
36943: PUSH
36944: LD_INT 25
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: IN
36952: IFFALSE 36973
// points := [ 40 , 15 , 5 ] ;
36954: LD_ADDR_VAR 0 9
36958: PUSH
36959: LD_INT 40
36961: PUSH
36962: LD_INT 15
36964: PUSH
36965: LD_INT 5
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36973: LD_VAR 0 6
36977: PPUSH
36978: CALL_OW 264
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: LD_INT 23
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: IN
36993: IFFALSE 37014
// points := [ 7 , 25 , 8 ] ;
36995: LD_ADDR_VAR 0 9
36999: PUSH
37000: LD_INT 7
37002: PUSH
37003: LD_INT 25
37005: PUSH
37006: LD_INT 8
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37014: LD_VAR 0 6
37018: PPUSH
37019: CALL_OW 264
37023: PUSH
37024: LD_INT 5
37026: PUSH
37027: LD_INT 27
37029: PUSH
37030: LD_INT 44
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: IN
37038: IFFALSE 37059
// points := [ 14 , 50 , 16 ] ;
37040: LD_ADDR_VAR 0 9
37044: PUSH
37045: LD_INT 14
37047: PUSH
37048: LD_INT 50
37050: PUSH
37051: LD_INT 16
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37059: LD_VAR 0 6
37063: PPUSH
37064: CALL_OW 264
37068: PUSH
37069: LD_INT 6
37071: PUSH
37072: LD_INT 46
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: IN
37079: IFFALSE 37100
// points := [ 32 , 120 , 70 ] ;
37081: LD_ADDR_VAR 0 9
37085: PUSH
37086: LD_INT 32
37088: PUSH
37089: LD_INT 120
37091: PUSH
37092: LD_INT 70
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37100: LD_VAR 0 6
37104: PPUSH
37105: CALL_OW 264
37109: PUSH
37110: LD_INT 7
37112: PUSH
37113: LD_INT 28
37115: PUSH
37116: LD_INT 45
37118: PUSH
37119: LD_INT 92
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: IN
37128: IFFALSE 37149
// points := [ 35 , 20 , 45 ] ;
37130: LD_ADDR_VAR 0 9
37134: PUSH
37135: LD_INT 35
37137: PUSH
37138: LD_INT 20
37140: PUSH
37141: LD_INT 45
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37149: LD_VAR 0 6
37153: PPUSH
37154: CALL_OW 264
37158: PUSH
37159: LD_INT 47
37161: PUSH
37162: EMPTY
37163: LIST
37164: IN
37165: IFFALSE 37186
// points := [ 67 , 45 , 75 ] ;
37167: LD_ADDR_VAR 0 9
37171: PUSH
37172: LD_INT 67
37174: PUSH
37175: LD_INT 45
37177: PUSH
37178: LD_INT 75
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37186: LD_VAR 0 6
37190: PPUSH
37191: CALL_OW 264
37195: PUSH
37196: LD_INT 26
37198: PUSH
37199: EMPTY
37200: LIST
37201: IN
37202: IFFALSE 37223
// points := [ 120 , 30 , 80 ] ;
37204: LD_ADDR_VAR 0 9
37208: PUSH
37209: LD_INT 120
37211: PUSH
37212: LD_INT 30
37214: PUSH
37215: LD_INT 80
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37223: LD_VAR 0 6
37227: PPUSH
37228: CALL_OW 264
37232: PUSH
37233: LD_INT 22
37235: PUSH
37236: EMPTY
37237: LIST
37238: IN
37239: IFFALSE 37260
// points := [ 40 , 1 , 1 ] ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_INT 40
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37260: LD_VAR 0 6
37264: PPUSH
37265: CALL_OW 264
37269: PUSH
37270: LD_INT 29
37272: PUSH
37273: EMPTY
37274: LIST
37275: IN
37276: IFFALSE 37297
// points := [ 70 , 200 , 400 ] ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: LD_INT 70
37285: PUSH
37286: LD_INT 200
37288: PUSH
37289: LD_INT 400
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37297: LD_VAR 0 6
37301: PPUSH
37302: CALL_OW 264
37306: PUSH
37307: LD_INT 14
37309: PUSH
37310: LD_INT 53
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: IN
37317: IFFALSE 37338
// points := [ 40 , 10 , 20 ] ;
37319: LD_ADDR_VAR 0 9
37323: PUSH
37324: LD_INT 40
37326: PUSH
37327: LD_INT 10
37329: PUSH
37330: LD_INT 20
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37338: LD_VAR 0 6
37342: PPUSH
37343: CALL_OW 264
37347: PUSH
37348: LD_INT 9
37350: PUSH
37351: EMPTY
37352: LIST
37353: IN
37354: IFFALSE 37375
// points := [ 5 , 70 , 20 ] ;
37356: LD_ADDR_VAR 0 9
37360: PUSH
37361: LD_INT 5
37363: PUSH
37364: LD_INT 70
37366: PUSH
37367: LD_INT 20
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37375: LD_VAR 0 6
37379: PPUSH
37380: CALL_OW 264
37384: PUSH
37385: LD_INT 10
37387: PUSH
37388: EMPTY
37389: LIST
37390: IN
37391: IFFALSE 37412
// points := [ 35 , 110 , 70 ] ;
37393: LD_ADDR_VAR 0 9
37397: PUSH
37398: LD_INT 35
37400: PUSH
37401: LD_INT 110
37403: PUSH
37404: LD_INT 70
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37412: LD_VAR 0 6
37416: PPUSH
37417: CALL_OW 265
37421: PUSH
37422: LD_INT 25
37424: EQUAL
37425: IFFALSE 37446
// points := [ 80 , 65 , 100 ] ;
37427: LD_ADDR_VAR 0 9
37431: PUSH
37432: LD_INT 80
37434: PUSH
37435: LD_INT 65
37437: PUSH
37438: LD_INT 100
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37446: LD_VAR 0 6
37450: PPUSH
37451: CALL_OW 263
37455: PUSH
37456: LD_INT 1
37458: EQUAL
37459: IFFALSE 37494
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37461: LD_ADDR_VAR 0 10
37465: PUSH
37466: LD_VAR 0 10
37470: PUSH
37471: LD_VAR 0 6
37475: PPUSH
37476: CALL_OW 311
37480: PPUSH
37481: LD_INT 3
37483: PPUSH
37484: CALL_OW 259
37488: PUSH
37489: LD_INT 4
37491: MUL
37492: MUL
37493: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37494: LD_VAR 0 6
37498: PPUSH
37499: CALL_OW 263
37503: PUSH
37504: LD_INT 2
37506: EQUAL
37507: IFFALSE 37558
// begin j := IsControledBy ( i ) ;
37509: LD_ADDR_VAR 0 7
37513: PUSH
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 312
37523: ST_TO_ADDR
// if j then
37524: LD_VAR 0 7
37528: IFFALSE 37558
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37530: LD_ADDR_VAR 0 10
37534: PUSH
37535: LD_VAR 0 10
37539: PUSH
37540: LD_VAR 0 7
37544: PPUSH
37545: LD_INT 3
37547: PPUSH
37548: CALL_OW 259
37552: PUSH
37553: LD_INT 3
37555: MUL
37556: MUL
37557: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37558: LD_VAR 0 6
37562: PPUSH
37563: CALL_OW 264
37567: PUSH
37568: LD_INT 5
37570: PUSH
37571: LD_INT 6
37573: PUSH
37574: LD_INT 46
37576: PUSH
37577: LD_INT 44
37579: PUSH
37580: LD_INT 47
37582: PUSH
37583: LD_INT 45
37585: PUSH
37586: LD_INT 28
37588: PUSH
37589: LD_INT 7
37591: PUSH
37592: LD_INT 27
37594: PUSH
37595: LD_INT 29
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: IN
37610: PUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: LD_INT 52
37618: PPUSH
37619: CALL_OW 321
37623: PUSH
37624: LD_INT 2
37626: EQUAL
37627: AND
37628: IFFALSE 37645
// bpoints := bpoints * 1.2 ;
37630: LD_ADDR_VAR 0 10
37634: PUSH
37635: LD_VAR 0 10
37639: PUSH
37640: LD_REAL  1.20000000000000E+0000
37643: MUL
37644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37645: LD_VAR 0 6
37649: PPUSH
37650: CALL_OW 264
37654: PUSH
37655: LD_INT 6
37657: PUSH
37658: LD_INT 46
37660: PUSH
37661: LD_INT 47
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: IN
37669: IFFALSE 37686
// bpoints := bpoints * 1.2 ;
37671: LD_ADDR_VAR 0 10
37675: PUSH
37676: LD_VAR 0 10
37680: PUSH
37681: LD_REAL  1.20000000000000E+0000
37684: MUL
37685: ST_TO_ADDR
// end ; unit_building :
37686: GO 37700
37688: LD_INT 3
37690: DOUBLE
37691: EQUAL
37692: IFTRUE 37696
37694: GO 37699
37696: POP
// ; end ;
37697: GO 37700
37699: POP
// for j = 1 to 3 do
37700: LD_ADDR_VAR 0 7
37704: PUSH
37705: DOUBLE
37706: LD_INT 1
37708: DEC
37709: ST_TO_ADDR
37710: LD_INT 3
37712: PUSH
37713: FOR_TO
37714: IFFALSE 37767
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37716: LD_ADDR_VAR 0 5
37720: PUSH
37721: LD_VAR 0 5
37725: PPUSH
37726: LD_VAR 0 7
37730: PPUSH
37731: LD_VAR 0 5
37735: PUSH
37736: LD_VAR 0 7
37740: ARRAY
37741: PUSH
37742: LD_VAR 0 9
37746: PUSH
37747: LD_VAR 0 7
37751: ARRAY
37752: PUSH
37753: LD_VAR 0 10
37757: MUL
37758: PLUS
37759: PPUSH
37760: CALL_OW 1
37764: ST_TO_ADDR
37765: GO 37713
37767: POP
37768: POP
// end ;
37769: GO 36248
37771: POP
37772: POP
// result := Replace ( result , 4 , tmp ) ;
37773: LD_ADDR_VAR 0 5
37777: PUSH
37778: LD_VAR 0 5
37782: PPUSH
37783: LD_INT 4
37785: PPUSH
37786: LD_VAR 0 8
37790: PPUSH
37791: CALL_OW 1
37795: ST_TO_ADDR
// end ;
37796: LD_VAR 0 5
37800: RET
// export function DangerAtRange ( unit , range ) ; begin
37801: LD_INT 0
37803: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37804: LD_ADDR_VAR 0 3
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 255
37818: PPUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 250
37828: PPUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 251
37838: PPUSH
37839: LD_VAR 0 2
37843: PPUSH
37844: CALL 36100 0 4
37848: ST_TO_ADDR
// end ;
37849: LD_VAR 0 3
37853: RET
// export function DangerInArea ( side , area ) ; begin
37854: LD_INT 0
37856: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_VAR 0 2
37866: PPUSH
37867: LD_INT 81
37869: PUSH
37870: LD_VAR 0 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PPUSH
37879: CALL_OW 70
37883: ST_TO_ADDR
// end ;
37884: LD_VAR 0 3
37888: RET
// export function IsExtension ( b ) ; begin
37889: LD_INT 0
37891: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37892: LD_ADDR_VAR 0 2
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: LD_INT 23
37904: PUSH
37905: LD_INT 20
37907: PUSH
37908: LD_INT 22
37910: PUSH
37911: LD_INT 17
37913: PUSH
37914: LD_INT 24
37916: PUSH
37917: LD_INT 21
37919: PUSH
37920: LD_INT 19
37922: PUSH
37923: LD_INT 16
37925: PUSH
37926: LD_INT 25
37928: PUSH
37929: LD_INT 18
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: IN
37944: ST_TO_ADDR
// end ;
37945: LD_VAR 0 2
37949: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
37954: PPUSH
// result := [ ] ;
37955: LD_ADDR_VAR 0 4
37959: PUSH
37960: EMPTY
37961: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37962: LD_ADDR_VAR 0 5
37966: PUSH
37967: LD_VAR 0 2
37971: PPUSH
37972: LD_INT 21
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PPUSH
37982: CALL_OW 70
37986: ST_TO_ADDR
// if not tmp then
37987: LD_VAR 0 5
37991: NOT
37992: IFFALSE 37996
// exit ;
37994: GO 38060
// if checkLink then
37996: LD_VAR 0 3
38000: IFFALSE 38050
// begin for i in tmp do
38002: LD_ADDR_VAR 0 6
38006: PUSH
38007: LD_VAR 0 5
38011: PUSH
38012: FOR_IN
38013: IFFALSE 38048
// if GetBase ( i ) <> base then
38015: LD_VAR 0 6
38019: PPUSH
38020: CALL_OW 274
38024: PUSH
38025: LD_VAR 0 1
38029: NONEQUAL
38030: IFFALSE 38046
// ComLinkToBase ( base , i ) ;
38032: LD_VAR 0 1
38036: PPUSH
38037: LD_VAR 0 6
38041: PPUSH
38042: CALL_OW 169
38046: GO 38012
38048: POP
38049: POP
// end ; result := tmp ;
38050: LD_ADDR_VAR 0 4
38054: PUSH
38055: LD_VAR 0 5
38059: ST_TO_ADDR
// end ;
38060: LD_VAR 0 4
38064: RET
// export function ComComplete ( units , b ) ; var i ; begin
38065: LD_INT 0
38067: PPUSH
38068: PPUSH
// if not units then
38069: LD_VAR 0 1
38073: NOT
38074: IFFALSE 38078
// exit ;
38076: GO 38168
// for i in units do
38078: LD_ADDR_VAR 0 4
38082: PUSH
38083: LD_VAR 0 1
38087: PUSH
38088: FOR_IN
38089: IFFALSE 38166
// if BuildingStatus ( b ) = bs_build then
38091: LD_VAR 0 2
38095: PPUSH
38096: CALL_OW 461
38100: PUSH
38101: LD_INT 1
38103: EQUAL
38104: IFFALSE 38164
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38106: LD_VAR 0 4
38110: PPUSH
38111: LD_STRING h
38113: PUSH
38114: LD_VAR 0 2
38118: PPUSH
38119: CALL_OW 250
38123: PUSH
38124: LD_VAR 0 2
38128: PPUSH
38129: CALL_OW 251
38133: PUSH
38134: LD_VAR 0 2
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: PPUSH
38160: CALL_OW 446
38164: GO 38088
38166: POP
38167: POP
// end ;
38168: LD_VAR 0 3
38172: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38173: LD_INT 0
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38181: LD_VAR 0 1
38185: NOT
38186: PUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 263
38196: PUSH
38197: LD_INT 2
38199: NONEQUAL
38200: OR
38201: IFFALSE 38205
// exit ;
38203: GO 38521
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38205: LD_ADDR_VAR 0 6
38209: PUSH
38210: LD_INT 22
38212: PUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 255
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: LD_INT 30
38232: PUSH
38233: LD_INT 36
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 34
38242: PUSH
38243: LD_INT 31
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PPUSH
38259: CALL_OW 69
38263: ST_TO_ADDR
// if not tmp then
38264: LD_VAR 0 6
38268: NOT
38269: IFFALSE 38273
// exit ;
38271: GO 38521
// result := [ ] ;
38273: LD_ADDR_VAR 0 2
38277: PUSH
38278: EMPTY
38279: ST_TO_ADDR
// for i in tmp do
38280: LD_ADDR_VAR 0 3
38284: PUSH
38285: LD_VAR 0 6
38289: PUSH
38290: FOR_IN
38291: IFFALSE 38362
// begin t := UnitsInside ( i ) ;
38293: LD_ADDR_VAR 0 4
38297: PUSH
38298: LD_VAR 0 3
38302: PPUSH
38303: CALL_OW 313
38307: ST_TO_ADDR
// if t then
38308: LD_VAR 0 4
38312: IFFALSE 38360
// for j in t do
38314: LD_ADDR_VAR 0 7
38318: PUSH
38319: LD_VAR 0 4
38323: PUSH
38324: FOR_IN
38325: IFFALSE 38358
// result := Replace ( result , result + 1 , j ) ;
38327: LD_ADDR_VAR 0 2
38331: PUSH
38332: LD_VAR 0 2
38336: PPUSH
38337: LD_VAR 0 2
38341: PUSH
38342: LD_INT 1
38344: PLUS
38345: PPUSH
38346: LD_VAR 0 7
38350: PPUSH
38351: CALL_OW 1
38355: ST_TO_ADDR
38356: GO 38324
38358: POP
38359: POP
// end ;
38360: GO 38290
38362: POP
38363: POP
// if not result then
38364: LD_VAR 0 2
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38521
// mech := result [ 1 ] ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_VAR 0 2
38382: PUSH
38383: LD_INT 1
38385: ARRAY
38386: ST_TO_ADDR
// if result > 1 then
38387: LD_VAR 0 2
38391: PUSH
38392: LD_INT 1
38394: GREATER
38395: IFFALSE 38507
// begin for i = 2 to result do
38397: LD_ADDR_VAR 0 3
38401: PUSH
38402: DOUBLE
38403: LD_INT 2
38405: DEC
38406: ST_TO_ADDR
38407: LD_VAR 0 2
38411: PUSH
38412: FOR_TO
38413: IFFALSE 38505
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38415: LD_ADDR_VAR 0 4
38419: PUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_VAR 0 3
38429: ARRAY
38430: PPUSH
38431: LD_INT 3
38433: PPUSH
38434: CALL_OW 259
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_VAR 0 3
38448: ARRAY
38449: PPUSH
38450: CALL_OW 432
38454: MINUS
38455: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38456: LD_VAR 0 4
38460: PUSH
38461: LD_VAR 0 5
38465: PPUSH
38466: LD_INT 3
38468: PPUSH
38469: CALL_OW 259
38473: PUSH
38474: LD_VAR 0 5
38478: PPUSH
38479: CALL_OW 432
38483: MINUS
38484: GREATEREQUAL
38485: IFFALSE 38503
// mech := result [ i ] ;
38487: LD_ADDR_VAR 0 5
38491: PUSH
38492: LD_VAR 0 2
38496: PUSH
38497: LD_VAR 0 3
38501: ARRAY
38502: ST_TO_ADDR
// end ;
38503: GO 38412
38505: POP
38506: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38507: LD_VAR 0 1
38511: PPUSH
38512: LD_VAR 0 5
38516: PPUSH
38517: CALL_OW 135
// end ;
38521: LD_VAR 0 2
38525: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38526: LD_INT 0
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
// result := [ ] ;
38541: LD_ADDR_VAR 0 7
38545: PUSH
38546: EMPTY
38547: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38548: LD_VAR 0 1
38552: PPUSH
38553: CALL_OW 266
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: IN
38568: NOT
38569: IFFALSE 38573
// exit ;
38571: GO 40207
// if name then
38573: LD_VAR 0 3
38577: IFFALSE 38593
// SetBName ( base_dep , name ) ;
38579: LD_VAR 0 1
38583: PPUSH
38584: LD_VAR 0 3
38588: PPUSH
38589: CALL_OW 500
// base := GetBase ( base_dep ) ;
38593: LD_ADDR_VAR 0 15
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 274
38607: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38608: LD_ADDR_VAR 0 16
38612: PUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 255
38622: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38623: LD_ADDR_VAR 0 17
38627: PUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 248
38637: ST_TO_ADDR
// if sources then
38638: LD_VAR 0 5
38642: IFFALSE 38689
// for i = 1 to 3 do
38644: LD_ADDR_VAR 0 8
38648: PUSH
38649: DOUBLE
38650: LD_INT 1
38652: DEC
38653: ST_TO_ADDR
38654: LD_INT 3
38656: PUSH
38657: FOR_TO
38658: IFFALSE 38687
// AddResourceType ( base , i , sources [ i ] ) ;
38660: LD_VAR 0 15
38664: PPUSH
38665: LD_VAR 0 8
38669: PPUSH
38670: LD_VAR 0 5
38674: PUSH
38675: LD_VAR 0 8
38679: ARRAY
38680: PPUSH
38681: CALL_OW 276
38685: GO 38657
38687: POP
38688: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38689: LD_ADDR_VAR 0 18
38693: PUSH
38694: LD_VAR 0 15
38698: PPUSH
38699: LD_VAR 0 2
38703: PPUSH
38704: LD_INT 1
38706: PPUSH
38707: CALL 37950 0 3
38711: ST_TO_ADDR
// InitHc ;
38712: CALL_OW 19
// InitUc ;
38716: CALL_OW 18
// uc_side := side ;
38720: LD_ADDR_OWVAR 20
38724: PUSH
38725: LD_VAR 0 16
38729: ST_TO_ADDR
// uc_nation := nation ;
38730: LD_ADDR_OWVAR 21
38734: PUSH
38735: LD_VAR 0 17
38739: ST_TO_ADDR
// if buildings then
38740: LD_VAR 0 18
38744: IFFALSE 40066
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38746: LD_ADDR_VAR 0 19
38750: PUSH
38751: LD_VAR 0 18
38755: PPUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 30
38761: PUSH
38762: LD_INT 29
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 30
38771: PUSH
38772: LD_INT 30
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: PPUSH
38784: CALL_OW 72
38788: ST_TO_ADDR
// if tmp then
38789: LD_VAR 0 19
38793: IFFALSE 38841
// for i in tmp do
38795: LD_ADDR_VAR 0 8
38799: PUSH
38800: LD_VAR 0 19
38804: PUSH
38805: FOR_IN
38806: IFFALSE 38839
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38808: LD_VAR 0 8
38812: PPUSH
38813: CALL_OW 250
38817: PPUSH
38818: LD_VAR 0 8
38822: PPUSH
38823: CALL_OW 251
38827: PPUSH
38828: LD_VAR 0 16
38832: PPUSH
38833: CALL_OW 441
38837: GO 38805
38839: POP
38840: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38841: LD_VAR 0 18
38845: PPUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 30
38851: PUSH
38852: LD_INT 32
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 30
38861: PUSH
38862: LD_INT 33
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PPUSH
38874: CALL_OW 72
38878: IFFALSE 38966
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38880: LD_ADDR_VAR 0 8
38884: PUSH
38885: LD_VAR 0 18
38889: PPUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 30
38895: PUSH
38896: LD_INT 32
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 30
38905: PUSH
38906: LD_INT 33
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: PPUSH
38918: CALL_OW 72
38922: PUSH
38923: FOR_IN
38924: IFFALSE 38964
// begin if not GetBWeapon ( i ) then
38926: LD_VAR 0 8
38930: PPUSH
38931: CALL_OW 269
38935: NOT
38936: IFFALSE 38962
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38938: LD_VAR 0 8
38942: PPUSH
38943: LD_VAR 0 8
38947: PPUSH
38948: LD_VAR 0 2
38952: PPUSH
38953: CALL 40212 0 2
38957: PPUSH
38958: CALL_OW 431
// end ;
38962: GO 38923
38964: POP
38965: POP
// end ; for i = 1 to personel do
38966: LD_ADDR_VAR 0 8
38970: PUSH
38971: DOUBLE
38972: LD_INT 1
38974: DEC
38975: ST_TO_ADDR
38976: LD_VAR 0 6
38980: PUSH
38981: FOR_TO
38982: IFFALSE 40046
// begin if i > 4 then
38984: LD_VAR 0 8
38988: PUSH
38989: LD_INT 4
38991: GREATER
38992: IFFALSE 38996
// break ;
38994: GO 40046
// case i of 1 :
38996: LD_VAR 0 8
39000: PUSH
39001: LD_INT 1
39003: DOUBLE
39004: EQUAL
39005: IFTRUE 39009
39007: GO 39089
39009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39010: LD_ADDR_VAR 0 12
39014: PUSH
39015: LD_VAR 0 18
39019: PPUSH
39020: LD_INT 22
39022: PUSH
39023: LD_VAR 0 16
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 58
39034: PUSH
39035: EMPTY
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 30
39043: PUSH
39044: LD_INT 32
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 30
39053: PUSH
39054: LD_INT 4
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 30
39063: PUSH
39064: LD_INT 5
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: PPUSH
39082: CALL_OW 72
39086: ST_TO_ADDR
39087: GO 39311
39089: LD_INT 2
39091: DOUBLE
39092: EQUAL
39093: IFTRUE 39097
39095: GO 39159
39097: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39098: LD_ADDR_VAR 0 12
39102: PUSH
39103: LD_VAR 0 18
39107: PPUSH
39108: LD_INT 22
39110: PUSH
39111: LD_VAR 0 16
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 30
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 30
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PPUSH
39152: CALL_OW 72
39156: ST_TO_ADDR
39157: GO 39311
39159: LD_INT 3
39161: DOUBLE
39162: EQUAL
39163: IFTRUE 39167
39165: GO 39229
39167: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39168: LD_ADDR_VAR 0 12
39172: PUSH
39173: LD_VAR 0 18
39177: PPUSH
39178: LD_INT 22
39180: PUSH
39181: LD_VAR 0 16
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 30
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 30
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PPUSH
39222: CALL_OW 72
39226: ST_TO_ADDR
39227: GO 39311
39229: LD_INT 4
39231: DOUBLE
39232: EQUAL
39233: IFTRUE 39237
39235: GO 39310
39237: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39238: LD_ADDR_VAR 0 12
39242: PUSH
39243: LD_VAR 0 18
39247: PPUSH
39248: LD_INT 22
39250: PUSH
39251: LD_VAR 0 16
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 30
39265: PUSH
39266: LD_INT 6
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 30
39275: PUSH
39276: LD_INT 7
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 30
39285: PUSH
39286: LD_INT 8
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PPUSH
39303: CALL_OW 72
39307: ST_TO_ADDR
39308: GO 39311
39310: POP
// if i = 1 then
39311: LD_VAR 0 8
39315: PUSH
39316: LD_INT 1
39318: EQUAL
39319: IFFALSE 39430
// begin tmp := [ ] ;
39321: LD_ADDR_VAR 0 19
39325: PUSH
39326: EMPTY
39327: ST_TO_ADDR
// for j in f do
39328: LD_ADDR_VAR 0 9
39332: PUSH
39333: LD_VAR 0 12
39337: PUSH
39338: FOR_IN
39339: IFFALSE 39412
// if GetBType ( j ) = b_bunker then
39341: LD_VAR 0 9
39345: PPUSH
39346: CALL_OW 266
39350: PUSH
39351: LD_INT 32
39353: EQUAL
39354: IFFALSE 39381
// tmp := Insert ( tmp , 1 , j ) else
39356: LD_ADDR_VAR 0 19
39360: PUSH
39361: LD_VAR 0 19
39365: PPUSH
39366: LD_INT 1
39368: PPUSH
39369: LD_VAR 0 9
39373: PPUSH
39374: CALL_OW 2
39378: ST_TO_ADDR
39379: GO 39410
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39381: LD_ADDR_VAR 0 19
39385: PUSH
39386: LD_VAR 0 19
39390: PPUSH
39391: LD_VAR 0 19
39395: PUSH
39396: LD_INT 1
39398: PLUS
39399: PPUSH
39400: LD_VAR 0 9
39404: PPUSH
39405: CALL_OW 2
39409: ST_TO_ADDR
39410: GO 39338
39412: POP
39413: POP
// if tmp then
39414: LD_VAR 0 19
39418: IFFALSE 39430
// f := tmp ;
39420: LD_ADDR_VAR 0 12
39424: PUSH
39425: LD_VAR 0 19
39429: ST_TO_ADDR
// end ; x := personel [ i ] ;
39430: LD_ADDR_VAR 0 13
39434: PUSH
39435: LD_VAR 0 6
39439: PUSH
39440: LD_VAR 0 8
39444: ARRAY
39445: ST_TO_ADDR
// if x = - 1 then
39446: LD_VAR 0 13
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: EQUAL
39455: IFFALSE 39664
// begin for j in f do
39457: LD_ADDR_VAR 0 9
39461: PUSH
39462: LD_VAR 0 12
39466: PUSH
39467: FOR_IN
39468: IFFALSE 39660
// repeat InitHc ;
39470: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39474: LD_VAR 0 9
39478: PPUSH
39479: CALL_OW 266
39483: PUSH
39484: LD_INT 5
39486: EQUAL
39487: IFFALSE 39557
// begin if UnitsInside ( j ) < 3 then
39489: LD_VAR 0 9
39493: PPUSH
39494: CALL_OW 313
39498: PUSH
39499: LD_INT 3
39501: LESS
39502: IFFALSE 39538
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39504: LD_INT 0
39506: PPUSH
39507: LD_INT 5
39509: PUSH
39510: LD_INT 8
39512: PUSH
39513: LD_INT 9
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: PUSH
39521: LD_VAR 0 17
39525: ARRAY
39526: PPUSH
39527: LD_VAR 0 4
39531: PPUSH
39532: CALL_OW 380
39536: GO 39555
// PrepareHuman ( false , i , skill ) ;
39538: LD_INT 0
39540: PPUSH
39541: LD_VAR 0 8
39545: PPUSH
39546: LD_VAR 0 4
39550: PPUSH
39551: CALL_OW 380
// end else
39555: GO 39574
// PrepareHuman ( false , i , skill ) ;
39557: LD_INT 0
39559: PPUSH
39560: LD_VAR 0 8
39564: PPUSH
39565: LD_VAR 0 4
39569: PPUSH
39570: CALL_OW 380
// un := CreateHuman ;
39574: LD_ADDR_VAR 0 14
39578: PUSH
39579: CALL_OW 44
39583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39584: LD_ADDR_VAR 0 7
39588: PUSH
39589: LD_VAR 0 7
39593: PPUSH
39594: LD_INT 1
39596: PPUSH
39597: LD_VAR 0 14
39601: PPUSH
39602: CALL_OW 2
39606: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39607: LD_VAR 0 14
39611: PPUSH
39612: LD_VAR 0 9
39616: PPUSH
39617: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39621: LD_VAR 0 9
39625: PPUSH
39626: CALL_OW 313
39630: PUSH
39631: LD_INT 6
39633: EQUAL
39634: PUSH
39635: LD_VAR 0 9
39639: PPUSH
39640: CALL_OW 266
39644: PUSH
39645: LD_INT 32
39647: PUSH
39648: LD_INT 31
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: IN
39655: OR
39656: IFFALSE 39470
39658: GO 39467
39660: POP
39661: POP
// end else
39662: GO 40044
// for j = 1 to x do
39664: LD_ADDR_VAR 0 9
39668: PUSH
39669: DOUBLE
39670: LD_INT 1
39672: DEC
39673: ST_TO_ADDR
39674: LD_VAR 0 13
39678: PUSH
39679: FOR_TO
39680: IFFALSE 40042
// begin InitHc ;
39682: CALL_OW 19
// if not f then
39686: LD_VAR 0 12
39690: NOT
39691: IFFALSE 39780
// begin PrepareHuman ( false , i , skill ) ;
39693: LD_INT 0
39695: PPUSH
39696: LD_VAR 0 8
39700: PPUSH
39701: LD_VAR 0 4
39705: PPUSH
39706: CALL_OW 380
// un := CreateHuman ;
39710: LD_ADDR_VAR 0 14
39714: PUSH
39715: CALL_OW 44
39719: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39720: LD_ADDR_VAR 0 7
39724: PUSH
39725: LD_VAR 0 7
39729: PPUSH
39730: LD_INT 1
39732: PPUSH
39733: LD_VAR 0 14
39737: PPUSH
39738: CALL_OW 2
39742: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39743: LD_VAR 0 14
39747: PPUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 250
39757: PPUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 251
39767: PPUSH
39768: LD_INT 10
39770: PPUSH
39771: LD_INT 0
39773: PPUSH
39774: CALL_OW 50
// continue ;
39778: GO 39679
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39780: LD_VAR 0 12
39784: PUSH
39785: LD_INT 1
39787: ARRAY
39788: PPUSH
39789: CALL_OW 313
39793: PUSH
39794: LD_VAR 0 12
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: CALL_OW 266
39807: PUSH
39808: LD_INT 32
39810: PUSH
39811: LD_INT 31
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: IN
39818: AND
39819: PUSH
39820: LD_VAR 0 12
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: PPUSH
39829: CALL_OW 313
39833: PUSH
39834: LD_INT 6
39836: EQUAL
39837: OR
39838: IFFALSE 39858
// f := Delete ( f , 1 ) ;
39840: LD_ADDR_VAR 0 12
39844: PUSH
39845: LD_VAR 0 12
39849: PPUSH
39850: LD_INT 1
39852: PPUSH
39853: CALL_OW 3
39857: ST_TO_ADDR
// if not f then
39858: LD_VAR 0 12
39862: NOT
39863: IFFALSE 39881
// begin x := x + 2 ;
39865: LD_ADDR_VAR 0 13
39869: PUSH
39870: LD_VAR 0 13
39874: PUSH
39875: LD_INT 2
39877: PLUS
39878: ST_TO_ADDR
// continue ;
39879: GO 39679
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39881: LD_VAR 0 12
39885: PUSH
39886: LD_INT 1
39888: ARRAY
39889: PPUSH
39890: CALL_OW 266
39894: PUSH
39895: LD_INT 5
39897: EQUAL
39898: IFFALSE 39972
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39900: LD_VAR 0 12
39904: PUSH
39905: LD_INT 1
39907: ARRAY
39908: PPUSH
39909: CALL_OW 313
39913: PUSH
39914: LD_INT 3
39916: LESS
39917: IFFALSE 39953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39919: LD_INT 0
39921: PPUSH
39922: LD_INT 5
39924: PUSH
39925: LD_INT 8
39927: PUSH
39928: LD_INT 9
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: PUSH
39936: LD_VAR 0 17
39940: ARRAY
39941: PPUSH
39942: LD_VAR 0 4
39946: PPUSH
39947: CALL_OW 380
39951: GO 39970
// PrepareHuman ( false , i , skill ) ;
39953: LD_INT 0
39955: PPUSH
39956: LD_VAR 0 8
39960: PPUSH
39961: LD_VAR 0 4
39965: PPUSH
39966: CALL_OW 380
// end else
39970: GO 39989
// PrepareHuman ( false , i , skill ) ;
39972: LD_INT 0
39974: PPUSH
39975: LD_VAR 0 8
39979: PPUSH
39980: LD_VAR 0 4
39984: PPUSH
39985: CALL_OW 380
// un := CreateHuman ;
39989: LD_ADDR_VAR 0 14
39993: PUSH
39994: CALL_OW 44
39998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39999: LD_ADDR_VAR 0 7
40003: PUSH
40004: LD_VAR 0 7
40008: PPUSH
40009: LD_INT 1
40011: PPUSH
40012: LD_VAR 0 14
40016: PPUSH
40017: CALL_OW 2
40021: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40022: LD_VAR 0 14
40026: PPUSH
40027: LD_VAR 0 12
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: CALL_OW 52
// end ;
40040: GO 39679
40042: POP
40043: POP
// end ;
40044: GO 38981
40046: POP
40047: POP
// result := result ^ buildings ;
40048: LD_ADDR_VAR 0 7
40052: PUSH
40053: LD_VAR 0 7
40057: PUSH
40058: LD_VAR 0 18
40062: ADD
40063: ST_TO_ADDR
// end else
40064: GO 40207
// begin for i = 1 to personel do
40066: LD_ADDR_VAR 0 8
40070: PUSH
40071: DOUBLE
40072: LD_INT 1
40074: DEC
40075: ST_TO_ADDR
40076: LD_VAR 0 6
40080: PUSH
40081: FOR_TO
40082: IFFALSE 40205
// begin if i > 4 then
40084: LD_VAR 0 8
40088: PUSH
40089: LD_INT 4
40091: GREATER
40092: IFFALSE 40096
// break ;
40094: GO 40205
// x := personel [ i ] ;
40096: LD_ADDR_VAR 0 13
40100: PUSH
40101: LD_VAR 0 6
40105: PUSH
40106: LD_VAR 0 8
40110: ARRAY
40111: ST_TO_ADDR
// if x = - 1 then
40112: LD_VAR 0 13
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: EQUAL
40121: IFFALSE 40125
// continue ;
40123: GO 40081
// PrepareHuman ( false , i , skill ) ;
40125: LD_INT 0
40127: PPUSH
40128: LD_VAR 0 8
40132: PPUSH
40133: LD_VAR 0 4
40137: PPUSH
40138: CALL_OW 380
// un := CreateHuman ;
40142: LD_ADDR_VAR 0 14
40146: PUSH
40147: CALL_OW 44
40151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40152: LD_VAR 0 14
40156: PPUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 250
40166: PPUSH
40167: LD_VAR 0 1
40171: PPUSH
40172: CALL_OW 251
40176: PPUSH
40177: LD_INT 10
40179: PPUSH
40180: LD_INT 0
40182: PPUSH
40183: CALL_OW 50
// result := result ^ un ;
40187: LD_ADDR_VAR 0 7
40191: PUSH
40192: LD_VAR 0 7
40196: PUSH
40197: LD_VAR 0 14
40201: ADD
40202: ST_TO_ADDR
// end ;
40203: GO 40081
40205: POP
40206: POP
// end ; end ;
40207: LD_VAR 0 7
40211: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40212: LD_INT 0
40214: PPUSH
40215: PPUSH
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
// result := false ;
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_INT 0
40237: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40238: LD_VAR 0 1
40242: NOT
40243: PUSH
40244: LD_VAR 0 1
40248: PPUSH
40249: CALL_OW 266
40253: PUSH
40254: LD_INT 32
40256: PUSH
40257: LD_INT 33
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: IN
40264: NOT
40265: OR
40266: IFFALSE 40270
// exit ;
40268: GO 41379
// nat := GetNation ( tower ) ;
40270: LD_ADDR_VAR 0 12
40274: PUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 248
40284: ST_TO_ADDR
// side := GetSide ( tower ) ;
40285: LD_ADDR_VAR 0 16
40289: PUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 255
40299: ST_TO_ADDR
// x := GetX ( tower ) ;
40300: LD_ADDR_VAR 0 10
40304: PUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: CALL_OW 250
40314: ST_TO_ADDR
// y := GetY ( tower ) ;
40315: LD_ADDR_VAR 0 11
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL_OW 251
40329: ST_TO_ADDR
// if not x or not y then
40330: LD_VAR 0 10
40334: NOT
40335: PUSH
40336: LD_VAR 0 11
40340: NOT
40341: OR
40342: IFFALSE 40346
// exit ;
40344: GO 41379
// weapon := 0 ;
40346: LD_ADDR_VAR 0 18
40350: PUSH
40351: LD_INT 0
40353: ST_TO_ADDR
// fac_list := [ ] ;
40354: LD_ADDR_VAR 0 17
40358: PUSH
40359: EMPTY
40360: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40361: LD_ADDR_VAR 0 6
40365: PUSH
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 274
40375: PPUSH
40376: LD_VAR 0 2
40380: PPUSH
40381: LD_INT 0
40383: PPUSH
40384: CALL 37950 0 3
40388: PPUSH
40389: LD_INT 30
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PPUSH
40399: CALL_OW 72
40403: ST_TO_ADDR
// if not factories then
40404: LD_VAR 0 6
40408: NOT
40409: IFFALSE 40413
// exit ;
40411: GO 41379
// for i in factories do
40413: LD_ADDR_VAR 0 8
40417: PUSH
40418: LD_VAR 0 6
40422: PUSH
40423: FOR_IN
40424: IFFALSE 40449
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40426: LD_ADDR_VAR 0 17
40430: PUSH
40431: LD_VAR 0 17
40435: PUSH
40436: LD_VAR 0 8
40440: PPUSH
40441: CALL_OW 478
40445: UNION
40446: ST_TO_ADDR
40447: GO 40423
40449: POP
40450: POP
// if not fac_list then
40451: LD_VAR 0 17
40455: NOT
40456: IFFALSE 40460
// exit ;
40458: GO 41379
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40460: LD_ADDR_VAR 0 5
40464: PUSH
40465: LD_INT 4
40467: PUSH
40468: LD_INT 5
40470: PUSH
40471: LD_INT 9
40473: PUSH
40474: LD_INT 10
40476: PUSH
40477: LD_INT 6
40479: PUSH
40480: LD_INT 7
40482: PUSH
40483: LD_INT 11
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 27
40497: PUSH
40498: LD_INT 28
40500: PUSH
40501: LD_INT 26
40503: PUSH
40504: LD_INT 30
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 43
40515: PUSH
40516: LD_INT 44
40518: PUSH
40519: LD_INT 46
40521: PUSH
40522: LD_INT 45
40524: PUSH
40525: LD_INT 47
40527: PUSH
40528: LD_INT 49
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: LD_VAR 0 12
40548: ARRAY
40549: ST_TO_ADDR
// list := list isect fac_list ;
40550: LD_ADDR_VAR 0 5
40554: PUSH
40555: LD_VAR 0 5
40559: PUSH
40560: LD_VAR 0 17
40564: ISECT
40565: ST_TO_ADDR
// if not list then
40566: LD_VAR 0 5
40570: NOT
40571: IFFALSE 40575
// exit ;
40573: GO 41379
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40575: LD_VAR 0 12
40579: PUSH
40580: LD_INT 3
40582: EQUAL
40583: PUSH
40584: LD_INT 49
40586: PUSH
40587: LD_VAR 0 5
40591: IN
40592: AND
40593: PUSH
40594: LD_INT 31
40596: PPUSH
40597: LD_VAR 0 16
40601: PPUSH
40602: CALL_OW 321
40606: PUSH
40607: LD_INT 2
40609: EQUAL
40610: AND
40611: IFFALSE 40671
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40613: LD_INT 22
40615: PUSH
40616: LD_VAR 0 16
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 35
40627: PUSH
40628: LD_INT 49
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 91
40637: PUSH
40638: LD_VAR 0 1
40642: PUSH
40643: LD_INT 10
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: LIST
40655: PPUSH
40656: CALL_OW 69
40660: NOT
40661: IFFALSE 40671
// weapon := ru_time_lapser ;
40663: LD_ADDR_VAR 0 18
40667: PUSH
40668: LD_INT 49
40670: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40671: LD_VAR 0 12
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: IN
40686: PUSH
40687: LD_INT 11
40689: PUSH
40690: LD_VAR 0 5
40694: IN
40695: PUSH
40696: LD_INT 30
40698: PUSH
40699: LD_VAR 0 5
40703: IN
40704: OR
40705: AND
40706: PUSH
40707: LD_INT 6
40709: PPUSH
40710: LD_VAR 0 16
40714: PPUSH
40715: CALL_OW 321
40719: PUSH
40720: LD_INT 2
40722: EQUAL
40723: AND
40724: IFFALSE 40889
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40726: LD_INT 22
40728: PUSH
40729: LD_VAR 0 16
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 35
40743: PUSH
40744: LD_INT 11
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 35
40753: PUSH
40754: LD_INT 30
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 91
40768: PUSH
40769: LD_VAR 0 1
40773: PUSH
40774: LD_INT 18
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 69
40791: NOT
40792: PUSH
40793: LD_INT 22
40795: PUSH
40796: LD_VAR 0 16
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 30
40810: PUSH
40811: LD_INT 32
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 30
40820: PUSH
40821: LD_INT 33
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 91
40835: PUSH
40836: LD_VAR 0 1
40840: PUSH
40841: LD_INT 12
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: PPUSH
40857: CALL_OW 69
40861: PUSH
40862: LD_INT 2
40864: GREATER
40865: AND
40866: IFFALSE 40889
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40868: LD_ADDR_VAR 0 18
40872: PUSH
40873: LD_INT 11
40875: PUSH
40876: LD_INT 30
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_VAR 0 12
40887: ARRAY
40888: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40889: LD_VAR 0 18
40893: NOT
40894: PUSH
40895: LD_INT 40
40897: PPUSH
40898: LD_VAR 0 16
40902: PPUSH
40903: CALL_OW 321
40907: PUSH
40908: LD_INT 2
40910: EQUAL
40911: AND
40912: PUSH
40913: LD_INT 7
40915: PUSH
40916: LD_VAR 0 5
40920: IN
40921: PUSH
40922: LD_INT 28
40924: PUSH
40925: LD_VAR 0 5
40929: IN
40930: OR
40931: PUSH
40932: LD_INT 45
40934: PUSH
40935: LD_VAR 0 5
40939: IN
40940: OR
40941: AND
40942: IFFALSE 41196
// begin hex := GetHexInfo ( x , y ) ;
40944: LD_ADDR_VAR 0 4
40948: PUSH
40949: LD_VAR 0 10
40953: PPUSH
40954: LD_VAR 0 11
40958: PPUSH
40959: CALL_OW 546
40963: ST_TO_ADDR
// if hex [ 1 ] then
40964: LD_VAR 0 4
40968: PUSH
40969: LD_INT 1
40971: ARRAY
40972: IFFALSE 40976
// exit ;
40974: GO 41379
// height := hex [ 2 ] ;
40976: LD_ADDR_VAR 0 15
40980: PUSH
40981: LD_VAR 0 4
40985: PUSH
40986: LD_INT 2
40988: ARRAY
40989: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40990: LD_ADDR_VAR 0 14
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: LD_INT 5
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: ST_TO_ADDR
// for i in tmp do
41013: LD_ADDR_VAR 0 8
41017: PUSH
41018: LD_VAR 0 14
41022: PUSH
41023: FOR_IN
41024: IFFALSE 41194
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41026: LD_ADDR_VAR 0 9
41030: PUSH
41031: LD_VAR 0 10
41035: PPUSH
41036: LD_VAR 0 8
41040: PPUSH
41041: LD_INT 5
41043: PPUSH
41044: CALL_OW 272
41048: PUSH
41049: LD_VAR 0 11
41053: PPUSH
41054: LD_VAR 0 8
41058: PPUSH
41059: LD_INT 5
41061: PPUSH
41062: CALL_OW 273
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41071: LD_VAR 0 9
41075: PUSH
41076: LD_INT 1
41078: ARRAY
41079: PPUSH
41080: LD_VAR 0 9
41084: PUSH
41085: LD_INT 2
41087: ARRAY
41088: PPUSH
41089: CALL_OW 488
41093: IFFALSE 41192
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41095: LD_ADDR_VAR 0 4
41099: PUSH
41100: LD_VAR 0 9
41104: PUSH
41105: LD_INT 1
41107: ARRAY
41108: PPUSH
41109: LD_VAR 0 9
41113: PUSH
41114: LD_INT 2
41116: ARRAY
41117: PPUSH
41118: CALL_OW 546
41122: ST_TO_ADDR
// if hex [ 1 ] then
41123: LD_VAR 0 4
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: IFFALSE 41135
// continue ;
41133: GO 41023
// h := hex [ 2 ] ;
41135: LD_ADDR_VAR 0 13
41139: PUSH
41140: LD_VAR 0 4
41144: PUSH
41145: LD_INT 2
41147: ARRAY
41148: ST_TO_ADDR
// if h + 7 < height then
41149: LD_VAR 0 13
41153: PUSH
41154: LD_INT 7
41156: PLUS
41157: PUSH
41158: LD_VAR 0 15
41162: LESS
41163: IFFALSE 41192
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41165: LD_ADDR_VAR 0 18
41169: PUSH
41170: LD_INT 7
41172: PUSH
41173: LD_INT 28
41175: PUSH
41176: LD_INT 45
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: PUSH
41184: LD_VAR 0 12
41188: ARRAY
41189: ST_TO_ADDR
// break ;
41190: GO 41194
// end ; end ; end ;
41192: GO 41023
41194: POP
41195: POP
// end ; if not weapon then
41196: LD_VAR 0 18
41200: NOT
41201: IFFALSE 41261
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41203: LD_ADDR_VAR 0 5
41207: PUSH
41208: LD_VAR 0 5
41212: PUSH
41213: LD_INT 11
41215: PUSH
41216: LD_INT 30
41218: PUSH
41219: LD_INT 49
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: LIST
41226: DIFF
41227: ST_TO_ADDR
// if not list then
41228: LD_VAR 0 5
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41379
// weapon := list [ rand ( 1 , list ) ] ;
41237: LD_ADDR_VAR 0 18
41241: PUSH
41242: LD_VAR 0 5
41246: PUSH
41247: LD_INT 1
41249: PPUSH
41250: LD_VAR 0 5
41254: PPUSH
41255: CALL_OW 12
41259: ARRAY
41260: ST_TO_ADDR
// end ; if weapon then
41261: LD_VAR 0 18
41265: IFFALSE 41379
// begin tmp := CostOfWeapon ( weapon ) ;
41267: LD_ADDR_VAR 0 14
41271: PUSH
41272: LD_VAR 0 18
41276: PPUSH
41277: CALL_OW 451
41281: ST_TO_ADDR
// j := GetBase ( tower ) ;
41282: LD_ADDR_VAR 0 9
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 274
41296: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41297: LD_VAR 0 9
41301: PPUSH
41302: LD_INT 1
41304: PPUSH
41305: CALL_OW 275
41309: PUSH
41310: LD_VAR 0 14
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: GREATEREQUAL
41319: PUSH
41320: LD_VAR 0 9
41324: PPUSH
41325: LD_INT 2
41327: PPUSH
41328: CALL_OW 275
41332: PUSH
41333: LD_VAR 0 14
41337: PUSH
41338: LD_INT 2
41340: ARRAY
41341: GREATEREQUAL
41342: AND
41343: PUSH
41344: LD_VAR 0 9
41348: PPUSH
41349: LD_INT 3
41351: PPUSH
41352: CALL_OW 275
41356: PUSH
41357: LD_VAR 0 14
41361: PUSH
41362: LD_INT 3
41364: ARRAY
41365: GREATEREQUAL
41366: AND
41367: IFFALSE 41379
// result := weapon ;
41369: LD_ADDR_VAR 0 3
41373: PUSH
41374: LD_VAR 0 18
41378: ST_TO_ADDR
// end ; end ;
41379: LD_VAR 0 3
41383: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
// result := true ;
41388: LD_ADDR_VAR 0 3
41392: PUSH
41393: LD_INT 1
41395: ST_TO_ADDR
// if array1 = array2 then
41396: LD_VAR 0 1
41400: PUSH
41401: LD_VAR 0 2
41405: EQUAL
41406: IFFALSE 41466
// begin for i = 1 to array1 do
41408: LD_ADDR_VAR 0 4
41412: PUSH
41413: DOUBLE
41414: LD_INT 1
41416: DEC
41417: ST_TO_ADDR
41418: LD_VAR 0 1
41422: PUSH
41423: FOR_TO
41424: IFFALSE 41462
// if array1 [ i ] <> array2 [ i ] then
41426: LD_VAR 0 1
41430: PUSH
41431: LD_VAR 0 4
41435: ARRAY
41436: PUSH
41437: LD_VAR 0 2
41441: PUSH
41442: LD_VAR 0 4
41446: ARRAY
41447: NONEQUAL
41448: IFFALSE 41460
// begin result := false ;
41450: LD_ADDR_VAR 0 3
41454: PUSH
41455: LD_INT 0
41457: ST_TO_ADDR
// break ;
41458: GO 41462
// end ;
41460: GO 41423
41462: POP
41463: POP
// end else
41464: GO 41474
// result := false ;
41466: LD_ADDR_VAR 0 3
41470: PUSH
41471: LD_INT 0
41473: ST_TO_ADDR
// end ;
41474: LD_VAR 0 3
41478: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41479: LD_INT 0
41481: PPUSH
41482: PPUSH
// if not array1 or not array2 then
41483: LD_VAR 0 1
41487: NOT
41488: PUSH
41489: LD_VAR 0 2
41493: NOT
41494: OR
41495: IFFALSE 41499
// exit ;
41497: GO 41563
// result := true ;
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: LD_INT 1
41506: ST_TO_ADDR
// for i = 1 to array1 do
41507: LD_ADDR_VAR 0 4
41511: PUSH
41512: DOUBLE
41513: LD_INT 1
41515: DEC
41516: ST_TO_ADDR
41517: LD_VAR 0 1
41521: PUSH
41522: FOR_TO
41523: IFFALSE 41561
// if array1 [ i ] <> array2 [ i ] then
41525: LD_VAR 0 1
41529: PUSH
41530: LD_VAR 0 4
41534: ARRAY
41535: PUSH
41536: LD_VAR 0 2
41540: PUSH
41541: LD_VAR 0 4
41545: ARRAY
41546: NONEQUAL
41547: IFFALSE 41559
// begin result := false ;
41549: LD_ADDR_VAR 0 3
41553: PUSH
41554: LD_INT 0
41556: ST_TO_ADDR
// break ;
41557: GO 41561
// end ;
41559: GO 41522
41561: POP
41562: POP
// end ;
41563: LD_VAR 0 3
41567: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41568: LD_INT 0
41570: PPUSH
41571: PPUSH
41572: PPUSH
// pom := GetBase ( fac ) ;
41573: LD_ADDR_VAR 0 5
41577: PUSH
41578: LD_VAR 0 1
41582: PPUSH
41583: CALL_OW 274
41587: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41588: LD_ADDR_VAR 0 4
41592: PUSH
41593: LD_VAR 0 2
41597: PUSH
41598: LD_INT 1
41600: ARRAY
41601: PPUSH
41602: LD_VAR 0 2
41606: PUSH
41607: LD_INT 2
41609: ARRAY
41610: PPUSH
41611: LD_VAR 0 2
41615: PUSH
41616: LD_INT 3
41618: ARRAY
41619: PPUSH
41620: LD_VAR 0 2
41624: PUSH
41625: LD_INT 4
41627: ARRAY
41628: PPUSH
41629: CALL_OW 449
41633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: LD_INT 1
41646: PPUSH
41647: CALL_OW 275
41651: PUSH
41652: LD_VAR 0 4
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: GREATEREQUAL
41661: PUSH
41662: LD_VAR 0 5
41666: PPUSH
41667: LD_INT 2
41669: PPUSH
41670: CALL_OW 275
41674: PUSH
41675: LD_VAR 0 4
41679: PUSH
41680: LD_INT 2
41682: ARRAY
41683: GREATEREQUAL
41684: AND
41685: PUSH
41686: LD_VAR 0 5
41690: PPUSH
41691: LD_INT 3
41693: PPUSH
41694: CALL_OW 275
41698: PUSH
41699: LD_VAR 0 4
41703: PUSH
41704: LD_INT 3
41706: ARRAY
41707: GREATEREQUAL
41708: AND
41709: ST_TO_ADDR
// end ;
41710: LD_VAR 0 3
41714: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41715: LD_INT 0
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
// pom := GetBase ( building ) ;
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 274
41735: ST_TO_ADDR
// if not pom then
41736: LD_VAR 0 3
41740: NOT
41741: IFFALSE 41745
// exit ;
41743: GO 41915
// btype := GetBType ( building ) ;
41745: LD_ADDR_VAR 0 5
41749: PUSH
41750: LD_VAR 0 1
41754: PPUSH
41755: CALL_OW 266
41759: ST_TO_ADDR
// if btype = b_armoury then
41760: LD_VAR 0 5
41764: PUSH
41765: LD_INT 4
41767: EQUAL
41768: IFFALSE 41778
// btype := b_barracks ;
41770: LD_ADDR_VAR 0 5
41774: PUSH
41775: LD_INT 5
41777: ST_TO_ADDR
// if btype = b_depot then
41778: LD_VAR 0 5
41782: PUSH
41783: LD_INT 0
41785: EQUAL
41786: IFFALSE 41796
// btype := b_warehouse ;
41788: LD_ADDR_VAR 0 5
41792: PUSH
41793: LD_INT 1
41795: ST_TO_ADDR
// if btype = b_workshop then
41796: LD_VAR 0 5
41800: PUSH
41801: LD_INT 2
41803: EQUAL
41804: IFFALSE 41814
// btype := b_factory ;
41806: LD_ADDR_VAR 0 5
41810: PUSH
41811: LD_INT 3
41813: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41814: LD_ADDR_VAR 0 4
41818: PUSH
41819: LD_VAR 0 5
41823: PPUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 248
41833: PPUSH
41834: CALL_OW 450
41838: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41839: LD_ADDR_VAR 0 2
41843: PUSH
41844: LD_VAR 0 3
41848: PPUSH
41849: LD_INT 1
41851: PPUSH
41852: CALL_OW 275
41856: PUSH
41857: LD_VAR 0 4
41861: PUSH
41862: LD_INT 1
41864: ARRAY
41865: GREATEREQUAL
41866: PUSH
41867: LD_VAR 0 3
41871: PPUSH
41872: LD_INT 2
41874: PPUSH
41875: CALL_OW 275
41879: PUSH
41880: LD_VAR 0 4
41884: PUSH
41885: LD_INT 2
41887: ARRAY
41888: GREATEREQUAL
41889: AND
41890: PUSH
41891: LD_VAR 0 3
41895: PPUSH
41896: LD_INT 3
41898: PPUSH
41899: CALL_OW 275
41903: PUSH
41904: LD_VAR 0 4
41908: PUSH
41909: LD_INT 3
41911: ARRAY
41912: GREATEREQUAL
41913: AND
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 2
41919: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41920: LD_INT 0
41922: PPUSH
41923: PPUSH
41924: PPUSH
// pom := GetBase ( building ) ;
41925: LD_ADDR_VAR 0 4
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 274
41939: ST_TO_ADDR
// if not pom then
41940: LD_VAR 0 4
41944: NOT
41945: IFFALSE 41949
// exit ;
41947: GO 42050
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41949: LD_ADDR_VAR 0 5
41953: PUSH
41954: LD_VAR 0 2
41958: PPUSH
41959: LD_VAR 0 1
41963: PPUSH
41964: CALL_OW 248
41968: PPUSH
41969: CALL_OW 450
41973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41974: LD_ADDR_VAR 0 3
41978: PUSH
41979: LD_VAR 0 4
41983: PPUSH
41984: LD_INT 1
41986: PPUSH
41987: CALL_OW 275
41991: PUSH
41992: LD_VAR 0 5
41996: PUSH
41997: LD_INT 1
41999: ARRAY
42000: GREATEREQUAL
42001: PUSH
42002: LD_VAR 0 4
42006: PPUSH
42007: LD_INT 2
42009: PPUSH
42010: CALL_OW 275
42014: PUSH
42015: LD_VAR 0 5
42019: PUSH
42020: LD_INT 2
42022: ARRAY
42023: GREATEREQUAL
42024: AND
42025: PUSH
42026: LD_VAR 0 4
42030: PPUSH
42031: LD_INT 3
42033: PPUSH
42034: CALL_OW 275
42038: PUSH
42039: LD_VAR 0 5
42043: PUSH
42044: LD_INT 3
42046: ARRAY
42047: GREATEREQUAL
42048: AND
42049: ST_TO_ADDR
// end ;
42050: LD_VAR 0 3
42054: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42055: LD_INT 0
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
// result := false ;
42068: LD_ADDR_VAR 0 8
42072: PUSH
42073: LD_INT 0
42075: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42076: LD_VAR 0 5
42080: NOT
42081: PUSH
42082: LD_VAR 0 1
42086: NOT
42087: OR
42088: PUSH
42089: LD_VAR 0 2
42093: NOT
42094: OR
42095: PUSH
42096: LD_VAR 0 3
42100: NOT
42101: OR
42102: IFFALSE 42106
// exit ;
42104: GO 42920
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42106: LD_ADDR_VAR 0 14
42110: PUSH
42111: LD_VAR 0 1
42115: PPUSH
42116: LD_VAR 0 2
42120: PPUSH
42121: LD_VAR 0 3
42125: PPUSH
42126: LD_VAR 0 4
42130: PPUSH
42131: LD_VAR 0 5
42135: PUSH
42136: LD_INT 1
42138: ARRAY
42139: PPUSH
42140: CALL_OW 248
42144: PPUSH
42145: LD_INT 0
42147: PPUSH
42148: CALL 44153 0 6
42152: ST_TO_ADDR
// if not hexes then
42153: LD_VAR 0 14
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42920
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42162: LD_ADDR_VAR 0 17
42166: PUSH
42167: LD_VAR 0 5
42171: PPUSH
42172: LD_INT 22
42174: PUSH
42175: LD_VAR 0 13
42179: PPUSH
42180: CALL_OW 255
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 30
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 30
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PPUSH
42221: CALL_OW 72
42225: ST_TO_ADDR
// for i = 1 to hexes do
42226: LD_ADDR_VAR 0 9
42230: PUSH
42231: DOUBLE
42232: LD_INT 1
42234: DEC
42235: ST_TO_ADDR
42236: LD_VAR 0 14
42240: PUSH
42241: FOR_TO
42242: IFFALSE 42918
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42244: LD_ADDR_VAR 0 13
42248: PUSH
42249: LD_VAR 0 14
42253: PUSH
42254: LD_VAR 0 9
42258: ARRAY
42259: PUSH
42260: LD_INT 1
42262: ARRAY
42263: PPUSH
42264: LD_VAR 0 14
42268: PUSH
42269: LD_VAR 0 9
42273: ARRAY
42274: PUSH
42275: LD_INT 2
42277: ARRAY
42278: PPUSH
42279: CALL_OW 428
42283: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42284: LD_VAR 0 14
42288: PUSH
42289: LD_VAR 0 9
42293: ARRAY
42294: PUSH
42295: LD_INT 1
42297: ARRAY
42298: PPUSH
42299: LD_VAR 0 14
42303: PUSH
42304: LD_VAR 0 9
42308: ARRAY
42309: PUSH
42310: LD_INT 2
42312: ARRAY
42313: PPUSH
42314: CALL_OW 351
42318: PUSH
42319: LD_VAR 0 14
42323: PUSH
42324: LD_VAR 0 9
42328: ARRAY
42329: PUSH
42330: LD_INT 1
42332: ARRAY
42333: PPUSH
42334: LD_VAR 0 14
42338: PUSH
42339: LD_VAR 0 9
42343: ARRAY
42344: PUSH
42345: LD_INT 2
42347: ARRAY
42348: PPUSH
42349: CALL_OW 488
42353: NOT
42354: OR
42355: PUSH
42356: LD_VAR 0 13
42360: PPUSH
42361: CALL_OW 247
42365: PUSH
42366: LD_INT 3
42368: EQUAL
42369: OR
42370: IFFALSE 42376
// exit ;
42372: POP
42373: POP
42374: GO 42920
// if not tmp then
42376: LD_VAR 0 13
42380: NOT
42381: IFFALSE 42385
// continue ;
42383: GO 42241
// result := true ;
42385: LD_ADDR_VAR 0 8
42389: PUSH
42390: LD_INT 1
42392: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42393: LD_VAR 0 6
42397: PUSH
42398: LD_VAR 0 13
42402: PPUSH
42403: CALL_OW 247
42407: PUSH
42408: LD_INT 2
42410: EQUAL
42411: AND
42412: PUSH
42413: LD_VAR 0 13
42417: PPUSH
42418: CALL_OW 263
42422: PUSH
42423: LD_INT 1
42425: EQUAL
42426: AND
42427: IFFALSE 42591
// begin if IsDrivenBy ( tmp ) then
42429: LD_VAR 0 13
42433: PPUSH
42434: CALL_OW 311
42438: IFFALSE 42442
// continue ;
42440: GO 42241
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42442: LD_VAR 0 6
42446: PPUSH
42447: LD_INT 3
42449: PUSH
42450: LD_INT 60
42452: PUSH
42453: EMPTY
42454: LIST
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: LD_INT 55
42465: PUSH
42466: EMPTY
42467: LIST
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PPUSH
42477: CALL_OW 72
42481: IFFALSE 42589
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42483: LD_ADDR_VAR 0 18
42487: PUSH
42488: LD_VAR 0 6
42492: PPUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 60
42498: PUSH
42499: EMPTY
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 55
42511: PUSH
42512: EMPTY
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PPUSH
42523: CALL_OW 72
42527: PUSH
42528: LD_INT 1
42530: ARRAY
42531: ST_TO_ADDR
// if IsInUnit ( driver ) then
42532: LD_VAR 0 18
42536: PPUSH
42537: CALL_OW 310
42541: IFFALSE 42552
// ComExit ( driver ) ;
42543: LD_VAR 0 18
42547: PPUSH
42548: CALL 67933 0 1
// AddComEnterUnit ( driver , tmp ) ;
42552: LD_VAR 0 18
42556: PPUSH
42557: LD_VAR 0 13
42561: PPUSH
42562: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42566: LD_VAR 0 18
42570: PPUSH
42571: LD_VAR 0 7
42575: PPUSH
42576: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42580: LD_VAR 0 18
42584: PPUSH
42585: CALL_OW 181
// end ; continue ;
42589: GO 42241
// end ; if not cleaners or not tmp in cleaners then
42591: LD_VAR 0 6
42595: NOT
42596: PUSH
42597: LD_VAR 0 13
42601: PUSH
42602: LD_VAR 0 6
42606: IN
42607: NOT
42608: OR
42609: IFFALSE 42916
// begin if dep then
42611: LD_VAR 0 17
42615: IFFALSE 42751
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42617: LD_ADDR_VAR 0 16
42621: PUSH
42622: LD_VAR 0 17
42626: PUSH
42627: LD_INT 1
42629: ARRAY
42630: PPUSH
42631: CALL_OW 250
42635: PPUSH
42636: LD_VAR 0 17
42640: PUSH
42641: LD_INT 1
42643: ARRAY
42644: PPUSH
42645: CALL_OW 254
42649: PPUSH
42650: LD_INT 5
42652: PPUSH
42653: CALL_OW 272
42657: PUSH
42658: LD_VAR 0 17
42662: PUSH
42663: LD_INT 1
42665: ARRAY
42666: PPUSH
42667: CALL_OW 251
42671: PPUSH
42672: LD_VAR 0 17
42676: PUSH
42677: LD_INT 1
42679: ARRAY
42680: PPUSH
42681: CALL_OW 254
42685: PPUSH
42686: LD_INT 5
42688: PPUSH
42689: CALL_OW 273
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42698: LD_VAR 0 16
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: PPUSH
42707: LD_VAR 0 16
42711: PUSH
42712: LD_INT 2
42714: ARRAY
42715: PPUSH
42716: CALL_OW 488
42720: IFFALSE 42751
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42722: LD_VAR 0 13
42726: PPUSH
42727: LD_VAR 0 16
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PPUSH
42736: LD_VAR 0 16
42740: PUSH
42741: LD_INT 2
42743: ARRAY
42744: PPUSH
42745: CALL_OW 111
// continue ;
42749: GO 42241
// end ; end ; r := GetDir ( tmp ) ;
42751: LD_ADDR_VAR 0 15
42755: PUSH
42756: LD_VAR 0 13
42760: PPUSH
42761: CALL_OW 254
42765: ST_TO_ADDR
// if r = 5 then
42766: LD_VAR 0 15
42770: PUSH
42771: LD_INT 5
42773: EQUAL
42774: IFFALSE 42784
// r := 0 ;
42776: LD_ADDR_VAR 0 15
42780: PUSH
42781: LD_INT 0
42783: ST_TO_ADDR
// for j = r to 5 do
42784: LD_ADDR_VAR 0 10
42788: PUSH
42789: DOUBLE
42790: LD_VAR 0 15
42794: DEC
42795: ST_TO_ADDR
42796: LD_INT 5
42798: PUSH
42799: FOR_TO
42800: IFFALSE 42914
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42802: LD_ADDR_VAR 0 11
42806: PUSH
42807: LD_VAR 0 13
42811: PPUSH
42812: CALL_OW 250
42816: PPUSH
42817: LD_VAR 0 10
42821: PPUSH
42822: LD_INT 2
42824: PPUSH
42825: CALL_OW 272
42829: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42830: LD_ADDR_VAR 0 12
42834: PUSH
42835: LD_VAR 0 13
42839: PPUSH
42840: CALL_OW 251
42844: PPUSH
42845: LD_VAR 0 10
42849: PPUSH
42850: LD_INT 2
42852: PPUSH
42853: CALL_OW 273
42857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42858: LD_VAR 0 11
42862: PPUSH
42863: LD_VAR 0 12
42867: PPUSH
42868: CALL_OW 488
42872: PUSH
42873: LD_VAR 0 11
42877: PPUSH
42878: LD_VAR 0 12
42882: PPUSH
42883: CALL_OW 428
42887: NOT
42888: AND
42889: IFFALSE 42912
// begin ComMoveXY ( tmp , _x , _y ) ;
42891: LD_VAR 0 13
42895: PPUSH
42896: LD_VAR 0 11
42900: PPUSH
42901: LD_VAR 0 12
42905: PPUSH
42906: CALL_OW 111
// break ;
42910: GO 42914
// end ; end ;
42912: GO 42799
42914: POP
42915: POP
// end ; end ;
42916: GO 42241
42918: POP
42919: POP
// end ;
42920: LD_VAR 0 8
42924: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42925: LD_INT 0
42927: PPUSH
// result := true ;
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_INT 1
42935: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42936: LD_VAR 0 2
42940: PUSH
42941: LD_INT 24
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42955
42947: LD_INT 33
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 42980
42955: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42956: LD_ADDR_VAR 0 3
42960: PUSH
42961: LD_INT 32
42963: PPUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 321
42973: PUSH
42974: LD_INT 2
42976: EQUAL
42977: ST_TO_ADDR
42978: GO 43296
42980: LD_INT 20
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 43013
42988: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 6
42996: PPUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 321
43006: PUSH
43007: LD_INT 2
43009: EQUAL
43010: ST_TO_ADDR
43011: GO 43296
43013: LD_INT 22
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43027
43019: LD_INT 36
43021: DOUBLE
43022: EQUAL
43023: IFTRUE 43027
43025: GO 43052
43027: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43028: LD_ADDR_VAR 0 3
43032: PUSH
43033: LD_INT 15
43035: PPUSH
43036: LD_VAR 0 1
43040: PPUSH
43041: CALL_OW 321
43045: PUSH
43046: LD_INT 2
43048: EQUAL
43049: ST_TO_ADDR
43050: GO 43296
43052: LD_INT 30
43054: DOUBLE
43055: EQUAL
43056: IFTRUE 43060
43058: GO 43085
43060: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43061: LD_ADDR_VAR 0 3
43065: PUSH
43066: LD_INT 20
43068: PPUSH
43069: LD_VAR 0 1
43073: PPUSH
43074: CALL_OW 321
43078: PUSH
43079: LD_INT 2
43081: EQUAL
43082: ST_TO_ADDR
43083: GO 43296
43085: LD_INT 28
43087: DOUBLE
43088: EQUAL
43089: IFTRUE 43099
43091: LD_INT 21
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43124
43099: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_INT 21
43107: PPUSH
43108: LD_VAR 0 1
43112: PPUSH
43113: CALL_OW 321
43117: PUSH
43118: LD_INT 2
43120: EQUAL
43121: ST_TO_ADDR
43122: GO 43296
43124: LD_INT 16
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43132
43130: GO 43157
43132: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43133: LD_ADDR_VAR 0 3
43137: PUSH
43138: LD_INT 84
43140: PPUSH
43141: LD_VAR 0 1
43145: PPUSH
43146: CALL_OW 321
43150: PUSH
43151: LD_INT 2
43153: EQUAL
43154: ST_TO_ADDR
43155: GO 43296
43157: LD_INT 19
43159: DOUBLE
43160: EQUAL
43161: IFTRUE 43171
43163: LD_INT 23
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43196
43171: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 83
43179: PPUSH
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 321
43189: PUSH
43190: LD_INT 2
43192: EQUAL
43193: ST_TO_ADDR
43194: GO 43296
43196: LD_INT 17
43198: DOUBLE
43199: EQUAL
43200: IFTRUE 43204
43202: GO 43229
43204: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_INT 39
43212: PPUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 321
43222: PUSH
43223: LD_INT 2
43225: EQUAL
43226: ST_TO_ADDR
43227: GO 43296
43229: LD_INT 18
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43262
43237: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_INT 40
43245: PPUSH
43246: LD_VAR 0 1
43250: PPUSH
43251: CALL_OW 321
43255: PUSH
43256: LD_INT 2
43258: EQUAL
43259: ST_TO_ADDR
43260: GO 43296
43262: LD_INT 27
43264: DOUBLE
43265: EQUAL
43266: IFTRUE 43270
43268: GO 43295
43270: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_INT 35
43278: PPUSH
43279: LD_VAR 0 1
43283: PPUSH
43284: CALL_OW 321
43288: PUSH
43289: LD_INT 2
43291: EQUAL
43292: ST_TO_ADDR
43293: GO 43296
43295: POP
// end ;
43296: LD_VAR 0 3
43300: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43301: LD_INT 0
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
// result := false ;
43314: LD_ADDR_VAR 0 6
43318: PUSH
43319: LD_INT 0
43321: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43322: LD_VAR 0 1
43326: NOT
43327: PUSH
43328: LD_VAR 0 1
43332: PPUSH
43333: CALL_OW 266
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: IN
43348: NOT
43349: OR
43350: PUSH
43351: LD_VAR 0 2
43355: NOT
43356: OR
43357: PUSH
43358: LD_VAR 0 5
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 4
43377: PUSH
43378: LD_INT 5
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: IN
43389: NOT
43390: OR
43391: PUSH
43392: LD_VAR 0 3
43396: PPUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: CALL_OW 488
43406: NOT
43407: OR
43408: IFFALSE 43412
// exit ;
43410: GO 44148
// side := GetSide ( depot ) ;
43412: LD_ADDR_VAR 0 9
43416: PUSH
43417: LD_VAR 0 1
43421: PPUSH
43422: CALL_OW 255
43426: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43427: LD_VAR 0 9
43431: PPUSH
43432: LD_VAR 0 2
43436: PPUSH
43437: CALL 42925 0 2
43441: NOT
43442: IFFALSE 43446
// exit ;
43444: GO 44148
// pom := GetBase ( depot ) ;
43446: LD_ADDR_VAR 0 10
43450: PUSH
43451: LD_VAR 0 1
43455: PPUSH
43456: CALL_OW 274
43460: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43461: LD_ADDR_VAR 0 11
43465: PUSH
43466: LD_VAR 0 2
43470: PPUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 248
43480: PPUSH
43481: CALL_OW 450
43485: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43486: LD_VAR 0 10
43490: PPUSH
43491: LD_INT 1
43493: PPUSH
43494: CALL_OW 275
43498: PUSH
43499: LD_VAR 0 11
43503: PUSH
43504: LD_INT 1
43506: ARRAY
43507: GREATEREQUAL
43508: PUSH
43509: LD_VAR 0 10
43513: PPUSH
43514: LD_INT 2
43516: PPUSH
43517: CALL_OW 275
43521: PUSH
43522: LD_VAR 0 11
43526: PUSH
43527: LD_INT 2
43529: ARRAY
43530: GREATEREQUAL
43531: AND
43532: PUSH
43533: LD_VAR 0 10
43537: PPUSH
43538: LD_INT 3
43540: PPUSH
43541: CALL_OW 275
43545: PUSH
43546: LD_VAR 0 11
43550: PUSH
43551: LD_INT 3
43553: ARRAY
43554: GREATEREQUAL
43555: AND
43556: NOT
43557: IFFALSE 43561
// exit ;
43559: GO 44148
// if GetBType ( depot ) = b_depot then
43561: LD_VAR 0 1
43565: PPUSH
43566: CALL_OW 266
43570: PUSH
43571: LD_INT 0
43573: EQUAL
43574: IFFALSE 43586
// dist := 28 else
43576: LD_ADDR_VAR 0 14
43580: PUSH
43581: LD_INT 28
43583: ST_TO_ADDR
43584: GO 43594
// dist := 36 ;
43586: LD_ADDR_VAR 0 14
43590: PUSH
43591: LD_INT 36
43593: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43594: LD_VAR 0 1
43598: PPUSH
43599: LD_VAR 0 3
43603: PPUSH
43604: LD_VAR 0 4
43608: PPUSH
43609: CALL_OW 297
43613: PUSH
43614: LD_VAR 0 14
43618: GREATER
43619: IFFALSE 43623
// exit ;
43621: GO 44148
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43623: LD_ADDR_VAR 0 12
43627: PUSH
43628: LD_VAR 0 2
43632: PPUSH
43633: LD_VAR 0 3
43637: PPUSH
43638: LD_VAR 0 4
43642: PPUSH
43643: LD_VAR 0 5
43647: PPUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 248
43657: PPUSH
43658: LD_INT 0
43660: PPUSH
43661: CALL 44153 0 6
43665: ST_TO_ADDR
// if not hexes then
43666: LD_VAR 0 12
43670: NOT
43671: IFFALSE 43675
// exit ;
43673: GO 44148
// hex := GetHexInfo ( x , y ) ;
43675: LD_ADDR_VAR 0 15
43679: PUSH
43680: LD_VAR 0 3
43684: PPUSH
43685: LD_VAR 0 4
43689: PPUSH
43690: CALL_OW 546
43694: ST_TO_ADDR
// if hex [ 1 ] then
43695: LD_VAR 0 15
43699: PUSH
43700: LD_INT 1
43702: ARRAY
43703: IFFALSE 43707
// exit ;
43705: GO 44148
// height := hex [ 2 ] ;
43707: LD_ADDR_VAR 0 13
43711: PUSH
43712: LD_VAR 0 15
43716: PUSH
43717: LD_INT 2
43719: ARRAY
43720: ST_TO_ADDR
// for i = 1 to hexes do
43721: LD_ADDR_VAR 0 7
43725: PUSH
43726: DOUBLE
43727: LD_INT 1
43729: DEC
43730: ST_TO_ADDR
43731: LD_VAR 0 12
43735: PUSH
43736: FOR_TO
43737: IFFALSE 44067
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43739: LD_VAR 0 12
43743: PUSH
43744: LD_VAR 0 7
43748: ARRAY
43749: PUSH
43750: LD_INT 1
43752: ARRAY
43753: PPUSH
43754: LD_VAR 0 12
43758: PUSH
43759: LD_VAR 0 7
43763: ARRAY
43764: PUSH
43765: LD_INT 2
43767: ARRAY
43768: PPUSH
43769: CALL_OW 488
43773: NOT
43774: PUSH
43775: LD_VAR 0 12
43779: PUSH
43780: LD_VAR 0 7
43784: ARRAY
43785: PUSH
43786: LD_INT 1
43788: ARRAY
43789: PPUSH
43790: LD_VAR 0 12
43794: PUSH
43795: LD_VAR 0 7
43799: ARRAY
43800: PUSH
43801: LD_INT 2
43803: ARRAY
43804: PPUSH
43805: CALL_OW 428
43809: PUSH
43810: LD_INT 0
43812: GREATER
43813: OR
43814: PUSH
43815: LD_VAR 0 12
43819: PUSH
43820: LD_VAR 0 7
43824: ARRAY
43825: PUSH
43826: LD_INT 1
43828: ARRAY
43829: PPUSH
43830: LD_VAR 0 12
43834: PUSH
43835: LD_VAR 0 7
43839: ARRAY
43840: PUSH
43841: LD_INT 2
43843: ARRAY
43844: PPUSH
43845: CALL_OW 351
43849: OR
43850: IFFALSE 43856
// exit ;
43852: POP
43853: POP
43854: GO 44148
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43856: LD_ADDR_VAR 0 8
43860: PUSH
43861: LD_VAR 0 12
43865: PUSH
43866: LD_VAR 0 7
43870: ARRAY
43871: PUSH
43872: LD_INT 1
43874: ARRAY
43875: PPUSH
43876: LD_VAR 0 12
43880: PUSH
43881: LD_VAR 0 7
43885: ARRAY
43886: PUSH
43887: LD_INT 2
43889: ARRAY
43890: PPUSH
43891: CALL_OW 546
43895: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43896: LD_VAR 0 8
43900: PUSH
43901: LD_INT 1
43903: ARRAY
43904: PUSH
43905: LD_VAR 0 8
43909: PUSH
43910: LD_INT 2
43912: ARRAY
43913: PUSH
43914: LD_VAR 0 13
43918: PUSH
43919: LD_INT 2
43921: PLUS
43922: GREATER
43923: OR
43924: PUSH
43925: LD_VAR 0 8
43929: PUSH
43930: LD_INT 2
43932: ARRAY
43933: PUSH
43934: LD_VAR 0 13
43938: PUSH
43939: LD_INT 2
43941: MINUS
43942: LESS
43943: OR
43944: PUSH
43945: LD_VAR 0 8
43949: PUSH
43950: LD_INT 3
43952: ARRAY
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 8
43959: PUSH
43960: LD_INT 9
43962: PUSH
43963: LD_INT 10
43965: PUSH
43966: LD_INT 11
43968: PUSH
43969: LD_INT 12
43971: PUSH
43972: LD_INT 13
43974: PUSH
43975: LD_INT 16
43977: PUSH
43978: LD_INT 17
43980: PUSH
43981: LD_INT 18
43983: PUSH
43984: LD_INT 19
43986: PUSH
43987: LD_INT 20
43989: PUSH
43990: LD_INT 21
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: IN
44008: NOT
44009: OR
44010: PUSH
44011: LD_VAR 0 8
44015: PUSH
44016: LD_INT 5
44018: ARRAY
44019: NOT
44020: OR
44021: PUSH
44022: LD_VAR 0 8
44026: PUSH
44027: LD_INT 6
44029: ARRAY
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 7
44039: PUSH
44040: LD_INT 9
44042: PUSH
44043: LD_INT 10
44045: PUSH
44046: LD_INT 11
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: IN
44057: NOT
44058: OR
44059: IFFALSE 44065
// exit ;
44061: POP
44062: POP
44063: GO 44148
// end ;
44065: GO 43736
44067: POP
44068: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44069: LD_VAR 0 9
44073: PPUSH
44074: LD_VAR 0 3
44078: PPUSH
44079: LD_VAR 0 4
44083: PPUSH
44084: LD_INT 20
44086: PPUSH
44087: CALL 36100 0 4
44091: PUSH
44092: LD_INT 4
44094: ARRAY
44095: IFFALSE 44099
// exit ;
44097: GO 44148
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44099: LD_VAR 0 2
44103: PUSH
44104: LD_INT 29
44106: PUSH
44107: LD_INT 30
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: IN
44114: PUSH
44115: LD_VAR 0 3
44119: PPUSH
44120: LD_VAR 0 4
44124: PPUSH
44125: LD_VAR 0 9
44129: PPUSH
44130: CALL_OW 440
44134: NOT
44135: AND
44136: IFFALSE 44140
// exit ;
44138: GO 44148
// result := true ;
44140: LD_ADDR_VAR 0 6
44144: PUSH
44145: LD_INT 1
44147: ST_TO_ADDR
// end ;
44148: LD_VAR 0 6
44152: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44153: LD_INT 0
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
// result = [ ] ;
44213: LD_ADDR_VAR 0 7
44217: PUSH
44218: EMPTY
44219: ST_TO_ADDR
// temp_list = [ ] ;
44220: LD_ADDR_VAR 0 9
44224: PUSH
44225: EMPTY
44226: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44227: LD_VAR 0 4
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: LD_INT 4
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: IN
44258: NOT
44259: PUSH
44260: LD_VAR 0 1
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: IN
44275: PUSH
44276: LD_VAR 0 5
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: IN
44295: NOT
44296: AND
44297: OR
44298: IFFALSE 44302
// exit ;
44300: GO 62693
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44302: LD_VAR 0 1
44306: PUSH
44307: LD_INT 6
44309: PUSH
44310: LD_INT 7
44312: PUSH
44313: LD_INT 8
44315: PUSH
44316: LD_INT 13
44318: PUSH
44319: LD_INT 12
44321: PUSH
44322: LD_INT 15
44324: PUSH
44325: LD_INT 11
44327: PUSH
44328: LD_INT 14
44330: PUSH
44331: LD_INT 10
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: IN
44345: IFFALSE 44355
// btype = b_lab ;
44347: LD_ADDR_VAR 0 1
44351: PUSH
44352: LD_INT 6
44354: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44355: LD_VAR 0 6
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: IN
44374: NOT
44375: PUSH
44376: LD_VAR 0 1
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: LD_INT 6
44395: PUSH
44396: LD_INT 36
44398: PUSH
44399: LD_INT 4
44401: PUSH
44402: LD_INT 5
44404: PUSH
44405: LD_INT 31
44407: PUSH
44408: LD_INT 32
44410: PUSH
44411: LD_INT 33
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: IN
44427: NOT
44428: PUSH
44429: LD_VAR 0 6
44433: PUSH
44434: LD_INT 1
44436: EQUAL
44437: AND
44438: OR
44439: PUSH
44440: LD_VAR 0 1
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: IN
44455: NOT
44456: PUSH
44457: LD_VAR 0 6
44461: PUSH
44462: LD_INT 2
44464: EQUAL
44465: AND
44466: OR
44467: IFFALSE 44477
// mode = 0 ;
44469: LD_ADDR_VAR 0 6
44473: PUSH
44474: LD_INT 0
44476: ST_TO_ADDR
// case mode of 0 :
44477: LD_VAR 0 6
44481: PUSH
44482: LD_INT 0
44484: DOUBLE
44485: EQUAL
44486: IFTRUE 44490
44488: GO 55943
44490: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44491: LD_ADDR_VAR 0 11
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44684: LD_ADDR_VAR 0 12
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44880: LD_ADDR_VAR 0 13
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: NEG
45052: PUSH
45053: LD_INT 3
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45079: LD_ADDR_VAR 0 14
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45275: LD_ADDR_VAR 0 15
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45468: LD_ADDR_VAR 0 16
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 3
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45661: LD_ADDR_VAR 0 17
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45891: LD_ADDR_VAR 0 18
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46121: LD_ADDR_VAR 0 19
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46351: LD_ADDR_VAR 0 20
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46581: LD_ADDR_VAR 0 21
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46811: LD_ADDR_VAR 0 22
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47041: LD_ADDR_VAR 0 23
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47321: LD_ADDR_VAR 0 24
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47597: LD_ADDR_VAR 0 25
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47871: LD_ADDR_VAR 0 26
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48147: LD_ADDR_VAR 0 27
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48427: LD_ADDR_VAR 0 28
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 3
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48709: LD_ADDR_VAR 0 29
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48988: LD_ADDR_VAR 0 30
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49266: LD_ADDR_VAR 0 31
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49544: LD_ADDR_VAR 0 32
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 3
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49822: LD_ADDR_VAR 0 33
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 3
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50101: LD_ADDR_VAR 0 34
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 3
50346: NEG
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50381: LD_ADDR_VAR 0 35
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50493: LD_ADDR_VAR 0 36
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50605: LD_ADDR_VAR 0 37
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50717: LD_ADDR_VAR 0 38
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50829: LD_ADDR_VAR 0 39
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50941: LD_ADDR_VAR 0 40
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51053: LD_ADDR_VAR 0 41
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51403: LD_ADDR_VAR 0 42
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 3
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: LD_INT 3
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51753: LD_ADDR_VAR 0 43
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 3
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52101: LD_ADDR_VAR 0 44
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: NEG
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: NEG
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52451: LD_ADDR_VAR 0 45
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: NEG
52761: PUSH
52762: LD_INT 3
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52801: LD_ADDR_VAR 0 46
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53149: LD_ADDR_VAR 0 47
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53300: LD_ADDR_VAR 0 48
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53447: LD_ADDR_VAR 0 49
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53591: LD_ADDR_VAR 0 50
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53735: LD_ADDR_VAR 0 51
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53882: LD_ADDR_VAR 0 52
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54033: LD_ADDR_VAR 0 53
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54263: LD_ADDR_VAR 0 54
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54493: LD_ADDR_VAR 0 55
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54723: LD_ADDR_VAR 0 56
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54953: LD_ADDR_VAR 0 57
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55183: LD_ADDR_VAR 0 58
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55413: LD_ADDR_VAR 0 59
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55501: LD_ADDR_VAR 0 60
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55589: LD_ADDR_VAR 0 61
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55677: LD_ADDR_VAR 0 62
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55765: LD_ADDR_VAR 0 63
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55853: LD_ADDR_VAR 0 64
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: ST_TO_ADDR
// end ; 1 :
55941: GO 61838
55943: LD_INT 1
55945: DOUBLE
55946: EQUAL
55947: IFTRUE 55951
55949: GO 58574
55951: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55952: LD_ADDR_VAR 0 11
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55996: LD_ADDR_VAR 0 12
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56037: LD_ADDR_VAR 0 13
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: LIST
56076: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56077: LD_ADDR_VAR 0 14
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56118: LD_ADDR_VAR 0 15
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56162: LD_ADDR_VAR 0 16
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56208: LD_ADDR_VAR 0 17
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56252: LD_ADDR_VAR 0 18
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56293: LD_ADDR_VAR 0 19
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56333: LD_ADDR_VAR 0 20
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56374: LD_ADDR_VAR 0 21
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56418: LD_ADDR_VAR 0 22
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 3
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: LD_INT 3
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56464: LD_ADDR_VAR 0 23
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 4
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56508: LD_ADDR_VAR 0 24
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56549: LD_ADDR_VAR 0 25
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: PUSH
56577: LD_INT 4
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56589: LD_ADDR_VAR 0 26
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 4
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56630: LD_ADDR_VAR 0 27
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 4
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56674: LD_ADDR_VAR 0 28
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 4
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 4
56705: NEG
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56720: LD_ADDR_VAR 0 29
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 5
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 5
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 4
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 6
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 6
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 5
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56875: LD_ADDR_VAR 0 30
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 4
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 4
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 5
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 5
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 5
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 6
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 6
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57018: LD_ADDR_VAR 0 31
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 4
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 4
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 5
57085: PUSH
57086: LD_INT 4
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 5
57095: PUSH
57096: LD_INT 5
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 4
57105: PUSH
57106: LD_INT 5
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 6
57115: PUSH
57116: LD_INT 5
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 6
57125: PUSH
57126: LD_INT 6
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 5
57135: PUSH
57136: LD_INT 6
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57157: LD_ADDR_VAR 0 32
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 4
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 6
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 6
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 5
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57300: LD_ADDR_VAR 0 33
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 4
57352: NEG
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 5
57386: NEG
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 5
57397: NEG
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 5
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 6
57420: NEG
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 6
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57455: LD_ADDR_VAR 0 34
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: LD_INT 4
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: NEG
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 4
57522: NEG
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 4
57534: NEG
57535: PUSH
57536: LD_INT 5
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 5
57546: NEG
57547: PUSH
57548: LD_INT 4
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: LD_INT 5
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 5
57570: NEG
57571: PUSH
57572: LD_INT 6
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 6
57582: NEG
57583: PUSH
57584: LD_INT 5
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 6
57594: NEG
57595: PUSH
57596: LD_INT 6
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57618: LD_ADDR_VAR 0 41
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57662: LD_ADDR_VAR 0 42
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57703: LD_ADDR_VAR 0 43
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57743: LD_ADDR_VAR 0 44
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57784: LD_ADDR_VAR 0 45
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57828: LD_ADDR_VAR 0 46
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57874: LD_ADDR_VAR 0 47
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57907: LD_ADDR_VAR 0 48
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57938: LD_ADDR_VAR 0 49
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57967: LD_ADDR_VAR 0 50
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 3
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57996: LD_ADDR_VAR 0 51
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58027: LD_ADDR_VAR 0 52
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58060: LD_ADDR_VAR 0 53
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58104: LD_ADDR_VAR 0 54
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58145: LD_ADDR_VAR 0 55
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58185: LD_ADDR_VAR 0 56
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58226: LD_ADDR_VAR 0 57
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58270: LD_ADDR_VAR 0 58
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58316: LD_ADDR_VAR 0 59
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58360: LD_ADDR_VAR 0 60
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58401: LD_ADDR_VAR 0 61
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58441: LD_ADDR_VAR 0 62
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58482: LD_ADDR_VAR 0 63
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58526: LD_ADDR_VAR 0 64
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// end ; 2 :
58572: GO 61838
58574: LD_INT 2
58576: DOUBLE
58577: EQUAL
58578: IFTRUE 58582
58580: GO 61837
58582: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58583: LD_ADDR_VAR 0 29
58587: PUSH
58588: LD_INT 4
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 4
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 5
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 5
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: LD_INT 3
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: LD_INT 4
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 4
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 4
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 4
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 5
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 5
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 4
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 4
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 5
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: LD_INT 4
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 3
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 4
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 5
59028: NEG
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: NEG
59041: PUSH
59042: LD_INT 5
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: LD_INT 5
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59121: LD_ADDR_VAR 0 30
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 4
59138: PUSH
59139: LD_INT 3
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 5
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: PUSH
59159: LD_INT 5
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: LD_INT 5
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: LD_INT 4
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 5
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: LD_INT 5
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 4
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 4
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 3
59334: NEG
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 5
59367: NEG
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 5
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 5
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: NEG
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: LD_INT 4
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: LD_INT 4
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 4
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 4
59509: NEG
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 5
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 4
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 4
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 5
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: LD_INT 5
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59668: LD_ADDR_VAR 0 31
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 5
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 5
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 4
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: LD_INT 4
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 5
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: LD_INT 4
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 3
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 4
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 5
59930: NEG
59931: PUSH
59932: LD_INT 4
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 5
59942: NEG
59943: PUSH
59944: LD_INT 5
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 5
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 5
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 4
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 4
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 4
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 4
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 5
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 5
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 4
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60218: LD_ADDR_VAR 0 32
60222: PUSH
60223: LD_INT 4
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 4
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 5
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 4
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 4
60387: NEG
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 4
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 4
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 5
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 4
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 4
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 5
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: LD_INT 5
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 4
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 4
60630: PUSH
60631: LD_INT 4
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 4
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 5
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 5
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: PUSH
60671: LD_INT 5
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 4
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 5
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: LD_INT 5
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60765: LD_ADDR_VAR 0 33
60769: PUSH
60770: LD_INT 4
60772: NEG
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: LD_INT 5
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 4
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: NEG
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 5
60832: NEG
60833: PUSH
60834: LD_INT 4
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 5
60844: NEG
60845: PUSH
60846: LD_INT 5
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: LD_INT 5
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 5
60868: NEG
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 4
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 5
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 5
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 5
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 3
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 4
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 4
61105: PUSH
61106: LD_INT 4
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: LD_INT 3
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 4
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 4
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 3
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 4
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 5
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: LD_INT 5
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61303: LD_ADDR_VAR 0 34
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 4
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 5
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 4
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 5
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 5
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 4
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 4
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 4
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 5
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 5
61535: PUSH
61536: LD_INT 5
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 4
61545: PUSH
61546: LD_INT 5
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 4
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: LD_INT 5
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 4
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: LD_INT 4
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 4
61688: NEG
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 4
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 5
61744: NEG
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 5
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 5
61767: NEG
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: ST_TO_ADDR
// end ; end ;
61835: GO 61838
61837: POP
// case btype of b_depot , b_warehouse :
61838: LD_VAR 0 1
61842: PUSH
61843: LD_INT 0
61845: DOUBLE
61846: EQUAL
61847: IFTRUE 61857
61849: LD_INT 1
61851: DOUBLE
61852: EQUAL
61853: IFTRUE 61857
61855: GO 62058
61857: POP
// case nation of nation_american :
61858: LD_VAR 0 5
61862: PUSH
61863: LD_INT 1
61865: DOUBLE
61866: EQUAL
61867: IFTRUE 61871
61869: GO 61927
61871: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61872: LD_ADDR_VAR 0 9
61876: PUSH
61877: LD_VAR 0 11
61881: PUSH
61882: LD_VAR 0 12
61886: PUSH
61887: LD_VAR 0 13
61891: PUSH
61892: LD_VAR 0 14
61896: PUSH
61897: LD_VAR 0 15
61901: PUSH
61902: LD_VAR 0 16
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: PUSH
61915: LD_VAR 0 4
61919: PUSH
61920: LD_INT 1
61922: PLUS
61923: ARRAY
61924: ST_TO_ADDR
61925: GO 62056
61927: LD_INT 2
61929: DOUBLE
61930: EQUAL
61931: IFTRUE 61935
61933: GO 61991
61935: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61936: LD_ADDR_VAR 0 9
61940: PUSH
61941: LD_VAR 0 17
61945: PUSH
61946: LD_VAR 0 18
61950: PUSH
61951: LD_VAR 0 19
61955: PUSH
61956: LD_VAR 0 20
61960: PUSH
61961: LD_VAR 0 21
61965: PUSH
61966: LD_VAR 0 22
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: LD_VAR 0 4
61983: PUSH
61984: LD_INT 1
61986: PLUS
61987: ARRAY
61988: ST_TO_ADDR
61989: GO 62056
61991: LD_INT 3
61993: DOUBLE
61994: EQUAL
61995: IFTRUE 61999
61997: GO 62055
61999: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62000: LD_ADDR_VAR 0 9
62004: PUSH
62005: LD_VAR 0 23
62009: PUSH
62010: LD_VAR 0 24
62014: PUSH
62015: LD_VAR 0 25
62019: PUSH
62020: LD_VAR 0 26
62024: PUSH
62025: LD_VAR 0 27
62029: PUSH
62030: LD_VAR 0 28
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: PUSH
62043: LD_VAR 0 4
62047: PUSH
62048: LD_INT 1
62050: PLUS
62051: ARRAY
62052: ST_TO_ADDR
62053: GO 62056
62055: POP
62056: GO 62611
62058: LD_INT 2
62060: DOUBLE
62061: EQUAL
62062: IFTRUE 62072
62064: LD_INT 3
62066: DOUBLE
62067: EQUAL
62068: IFTRUE 62072
62070: GO 62128
62072: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62073: LD_ADDR_VAR 0 9
62077: PUSH
62078: LD_VAR 0 29
62082: PUSH
62083: LD_VAR 0 30
62087: PUSH
62088: LD_VAR 0 31
62092: PUSH
62093: LD_VAR 0 32
62097: PUSH
62098: LD_VAR 0 33
62102: PUSH
62103: LD_VAR 0 34
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 4
62120: PUSH
62121: LD_INT 1
62123: PLUS
62124: ARRAY
62125: ST_TO_ADDR
62126: GO 62611
62128: LD_INT 16
62130: DOUBLE
62131: EQUAL
62132: IFTRUE 62190
62134: LD_INT 17
62136: DOUBLE
62137: EQUAL
62138: IFTRUE 62190
62140: LD_INT 18
62142: DOUBLE
62143: EQUAL
62144: IFTRUE 62190
62146: LD_INT 19
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62190
62152: LD_INT 22
62154: DOUBLE
62155: EQUAL
62156: IFTRUE 62190
62158: LD_INT 20
62160: DOUBLE
62161: EQUAL
62162: IFTRUE 62190
62164: LD_INT 21
62166: DOUBLE
62167: EQUAL
62168: IFTRUE 62190
62170: LD_INT 23
62172: DOUBLE
62173: EQUAL
62174: IFTRUE 62190
62176: LD_INT 24
62178: DOUBLE
62179: EQUAL
62180: IFTRUE 62190
62182: LD_INT 25
62184: DOUBLE
62185: EQUAL
62186: IFTRUE 62190
62188: GO 62246
62190: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62191: LD_ADDR_VAR 0 9
62195: PUSH
62196: LD_VAR 0 35
62200: PUSH
62201: LD_VAR 0 36
62205: PUSH
62206: LD_VAR 0 37
62210: PUSH
62211: LD_VAR 0 38
62215: PUSH
62216: LD_VAR 0 39
62220: PUSH
62221: LD_VAR 0 40
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: LD_VAR 0 4
62238: PUSH
62239: LD_INT 1
62241: PLUS
62242: ARRAY
62243: ST_TO_ADDR
62244: GO 62611
62246: LD_INT 6
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62302
62252: LD_INT 7
62254: DOUBLE
62255: EQUAL
62256: IFTRUE 62302
62258: LD_INT 8
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62302
62264: LD_INT 13
62266: DOUBLE
62267: EQUAL
62268: IFTRUE 62302
62270: LD_INT 12
62272: DOUBLE
62273: EQUAL
62274: IFTRUE 62302
62276: LD_INT 15
62278: DOUBLE
62279: EQUAL
62280: IFTRUE 62302
62282: LD_INT 11
62284: DOUBLE
62285: EQUAL
62286: IFTRUE 62302
62288: LD_INT 14
62290: DOUBLE
62291: EQUAL
62292: IFTRUE 62302
62294: LD_INT 10
62296: DOUBLE
62297: EQUAL
62298: IFTRUE 62302
62300: GO 62358
62302: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62303: LD_ADDR_VAR 0 9
62307: PUSH
62308: LD_VAR 0 41
62312: PUSH
62313: LD_VAR 0 42
62317: PUSH
62318: LD_VAR 0 43
62322: PUSH
62323: LD_VAR 0 44
62327: PUSH
62328: LD_VAR 0 45
62332: PUSH
62333: LD_VAR 0 46
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: PUSH
62346: LD_VAR 0 4
62350: PUSH
62351: LD_INT 1
62353: PLUS
62354: ARRAY
62355: ST_TO_ADDR
62356: GO 62611
62358: LD_INT 36
62360: DOUBLE
62361: EQUAL
62362: IFTRUE 62366
62364: GO 62422
62366: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62367: LD_ADDR_VAR 0 9
62371: PUSH
62372: LD_VAR 0 47
62376: PUSH
62377: LD_VAR 0 48
62381: PUSH
62382: LD_VAR 0 49
62386: PUSH
62387: LD_VAR 0 50
62391: PUSH
62392: LD_VAR 0 51
62396: PUSH
62397: LD_VAR 0 52
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: PUSH
62410: LD_VAR 0 4
62414: PUSH
62415: LD_INT 1
62417: PLUS
62418: ARRAY
62419: ST_TO_ADDR
62420: GO 62611
62422: LD_INT 4
62424: DOUBLE
62425: EQUAL
62426: IFTRUE 62448
62428: LD_INT 5
62430: DOUBLE
62431: EQUAL
62432: IFTRUE 62448
62434: LD_INT 34
62436: DOUBLE
62437: EQUAL
62438: IFTRUE 62448
62440: LD_INT 37
62442: DOUBLE
62443: EQUAL
62444: IFTRUE 62448
62446: GO 62504
62448: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62449: LD_ADDR_VAR 0 9
62453: PUSH
62454: LD_VAR 0 53
62458: PUSH
62459: LD_VAR 0 54
62463: PUSH
62464: LD_VAR 0 55
62468: PUSH
62469: LD_VAR 0 56
62473: PUSH
62474: LD_VAR 0 57
62478: PUSH
62479: LD_VAR 0 58
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: LD_VAR 0 4
62496: PUSH
62497: LD_INT 1
62499: PLUS
62500: ARRAY
62501: ST_TO_ADDR
62502: GO 62611
62504: LD_INT 31
62506: DOUBLE
62507: EQUAL
62508: IFTRUE 62554
62510: LD_INT 32
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62554
62516: LD_INT 33
62518: DOUBLE
62519: EQUAL
62520: IFTRUE 62554
62522: LD_INT 27
62524: DOUBLE
62525: EQUAL
62526: IFTRUE 62554
62528: LD_INT 26
62530: DOUBLE
62531: EQUAL
62532: IFTRUE 62554
62534: LD_INT 28
62536: DOUBLE
62537: EQUAL
62538: IFTRUE 62554
62540: LD_INT 29
62542: DOUBLE
62543: EQUAL
62544: IFTRUE 62554
62546: LD_INT 30
62548: DOUBLE
62549: EQUAL
62550: IFTRUE 62554
62552: GO 62610
62554: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62555: LD_ADDR_VAR 0 9
62559: PUSH
62560: LD_VAR 0 59
62564: PUSH
62565: LD_VAR 0 60
62569: PUSH
62570: LD_VAR 0 61
62574: PUSH
62575: LD_VAR 0 62
62579: PUSH
62580: LD_VAR 0 63
62584: PUSH
62585: LD_VAR 0 64
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: PUSH
62598: LD_VAR 0 4
62602: PUSH
62603: LD_INT 1
62605: PLUS
62606: ARRAY
62607: ST_TO_ADDR
62608: GO 62611
62610: POP
// temp_list2 = [ ] ;
62611: LD_ADDR_VAR 0 10
62615: PUSH
62616: EMPTY
62617: ST_TO_ADDR
// for i in temp_list do
62618: LD_ADDR_VAR 0 8
62622: PUSH
62623: LD_VAR 0 9
62627: PUSH
62628: FOR_IN
62629: IFFALSE 62681
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62631: LD_ADDR_VAR 0 10
62635: PUSH
62636: LD_VAR 0 10
62640: PUSH
62641: LD_VAR 0 8
62645: PUSH
62646: LD_INT 1
62648: ARRAY
62649: PUSH
62650: LD_VAR 0 2
62654: PLUS
62655: PUSH
62656: LD_VAR 0 8
62660: PUSH
62661: LD_INT 2
62663: ARRAY
62664: PUSH
62665: LD_VAR 0 3
62669: PLUS
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: EMPTY
62676: LIST
62677: ADD
62678: ST_TO_ADDR
62679: GO 62628
62681: POP
62682: POP
// result = temp_list2 ;
62683: LD_ADDR_VAR 0 7
62687: PUSH
62688: LD_VAR 0 10
62692: ST_TO_ADDR
// end ;
62693: LD_VAR 0 7
62697: RET
// export function EnemyInRange ( unit , dist ) ; begin
62698: LD_INT 0
62700: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62701: LD_ADDR_VAR 0 3
62705: PUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: CALL_OW 255
62715: PPUSH
62716: LD_VAR 0 1
62720: PPUSH
62721: CALL_OW 250
62725: PPUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 251
62735: PPUSH
62736: LD_VAR 0 2
62740: PPUSH
62741: CALL 36100 0 4
62745: PUSH
62746: LD_INT 4
62748: ARRAY
62749: ST_TO_ADDR
// end ;
62750: LD_VAR 0 3
62754: RET
// export function PlayerSeeMe ( unit ) ; begin
62755: LD_INT 0
62757: PPUSH
// result := See ( your_side , unit ) ;
62758: LD_ADDR_VAR 0 2
62762: PUSH
62763: LD_OWVAR 2
62767: PPUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: CALL_OW 292
62777: ST_TO_ADDR
// end ;
62778: LD_VAR 0 2
62782: RET
// export function ReverseDir ( unit ) ; begin
62783: LD_INT 0
62785: PPUSH
// if not unit then
62786: LD_VAR 0 1
62790: NOT
62791: IFFALSE 62795
// exit ;
62793: GO 62818
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62795: LD_ADDR_VAR 0 2
62799: PUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: CALL_OW 254
62809: PUSH
62810: LD_INT 3
62812: PLUS
62813: PUSH
62814: LD_INT 6
62816: MOD
62817: ST_TO_ADDR
// end ;
62818: LD_VAR 0 2
62822: RET
// export function ReverseArray ( array ) ; var i ; begin
62823: LD_INT 0
62825: PPUSH
62826: PPUSH
// if not array then
62827: LD_VAR 0 1
62831: NOT
62832: IFFALSE 62836
// exit ;
62834: GO 62891
// result := [ ] ;
62836: LD_ADDR_VAR 0 2
62840: PUSH
62841: EMPTY
62842: ST_TO_ADDR
// for i := array downto 1 do
62843: LD_ADDR_VAR 0 3
62847: PUSH
62848: DOUBLE
62849: LD_VAR 0 1
62853: INC
62854: ST_TO_ADDR
62855: LD_INT 1
62857: PUSH
62858: FOR_DOWNTO
62859: IFFALSE 62889
// result := Join ( result , array [ i ] ) ;
62861: LD_ADDR_VAR 0 2
62865: PUSH
62866: LD_VAR 0 2
62870: PPUSH
62871: LD_VAR 0 1
62875: PUSH
62876: LD_VAR 0 3
62880: ARRAY
62881: PPUSH
62882: CALL 67535 0 2
62886: ST_TO_ADDR
62887: GO 62858
62889: POP
62890: POP
// end ;
62891: LD_VAR 0 2
62895: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62896: LD_INT 0
62898: PPUSH
62899: PPUSH
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
// if not unit or not hexes then
62904: LD_VAR 0 1
62908: NOT
62909: PUSH
62910: LD_VAR 0 2
62914: NOT
62915: OR
62916: IFFALSE 62920
// exit ;
62918: GO 63043
// dist := 9999 ;
62920: LD_ADDR_VAR 0 5
62924: PUSH
62925: LD_INT 9999
62927: ST_TO_ADDR
// for i = 1 to hexes do
62928: LD_ADDR_VAR 0 4
62932: PUSH
62933: DOUBLE
62934: LD_INT 1
62936: DEC
62937: ST_TO_ADDR
62938: LD_VAR 0 2
62942: PUSH
62943: FOR_TO
62944: IFFALSE 63031
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62946: LD_ADDR_VAR 0 6
62950: PUSH
62951: LD_VAR 0 1
62955: PPUSH
62956: LD_VAR 0 2
62960: PUSH
62961: LD_VAR 0 4
62965: ARRAY
62966: PUSH
62967: LD_INT 1
62969: ARRAY
62970: PPUSH
62971: LD_VAR 0 2
62975: PUSH
62976: LD_VAR 0 4
62980: ARRAY
62981: PUSH
62982: LD_INT 2
62984: ARRAY
62985: PPUSH
62986: CALL_OW 297
62990: ST_TO_ADDR
// if tdist < dist then
62991: LD_VAR 0 6
62995: PUSH
62996: LD_VAR 0 5
63000: LESS
63001: IFFALSE 63029
// begin hex := hexes [ i ] ;
63003: LD_ADDR_VAR 0 8
63007: PUSH
63008: LD_VAR 0 2
63012: PUSH
63013: LD_VAR 0 4
63017: ARRAY
63018: ST_TO_ADDR
// dist := tdist ;
63019: LD_ADDR_VAR 0 5
63023: PUSH
63024: LD_VAR 0 6
63028: ST_TO_ADDR
// end ; end ;
63029: GO 62943
63031: POP
63032: POP
// result := hex ;
63033: LD_ADDR_VAR 0 3
63037: PUSH
63038: LD_VAR 0 8
63042: ST_TO_ADDR
// end ;
63043: LD_VAR 0 3
63047: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63048: LD_INT 0
63050: PPUSH
63051: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63052: LD_VAR 0 1
63056: NOT
63057: PUSH
63058: LD_VAR 0 1
63062: PUSH
63063: LD_INT 21
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 23
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PPUSH
63087: CALL_OW 69
63091: IN
63092: NOT
63093: OR
63094: IFFALSE 63098
// exit ;
63096: GO 63145
// for i = 1 to 3 do
63098: LD_ADDR_VAR 0 3
63102: PUSH
63103: DOUBLE
63104: LD_INT 1
63106: DEC
63107: ST_TO_ADDR
63108: LD_INT 3
63110: PUSH
63111: FOR_TO
63112: IFFALSE 63143
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63114: LD_VAR 0 1
63118: PPUSH
63119: CALL_OW 250
63123: PPUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 251
63133: PPUSH
63134: LD_INT 1
63136: PPUSH
63137: CALL_OW 453
63141: GO 63111
63143: POP
63144: POP
// end ;
63145: LD_VAR 0 2
63149: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63150: LD_INT 0
63152: PPUSH
63153: PPUSH
63154: PPUSH
63155: PPUSH
63156: PPUSH
63157: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63158: LD_VAR 0 1
63162: NOT
63163: PUSH
63164: LD_VAR 0 2
63168: NOT
63169: OR
63170: PUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL_OW 314
63180: OR
63181: IFFALSE 63185
// exit ;
63183: GO 63652
// if GetLives ( i ) < 250 then
63185: LD_VAR 0 4
63189: PPUSH
63190: CALL_OW 256
63194: PUSH
63195: LD_INT 250
63197: LESS
63198: IFFALSE 63211
// begin ComAutodestruct ( i ) ;
63200: LD_VAR 0 4
63204: PPUSH
63205: CALL 63048 0 1
// exit ;
63209: GO 63652
// end ; x := GetX ( enemy_unit ) ;
63211: LD_ADDR_VAR 0 7
63215: PUSH
63216: LD_VAR 0 2
63220: PPUSH
63221: CALL_OW 250
63225: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63226: LD_ADDR_VAR 0 8
63230: PUSH
63231: LD_VAR 0 2
63235: PPUSH
63236: CALL_OW 251
63240: ST_TO_ADDR
// if not x or not y then
63241: LD_VAR 0 7
63245: NOT
63246: PUSH
63247: LD_VAR 0 8
63251: NOT
63252: OR
63253: IFFALSE 63257
// exit ;
63255: GO 63652
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63257: LD_ADDR_VAR 0 6
63261: PUSH
63262: LD_VAR 0 7
63266: PPUSH
63267: LD_INT 0
63269: PPUSH
63270: LD_INT 4
63272: PPUSH
63273: CALL_OW 272
63277: PUSH
63278: LD_VAR 0 8
63282: PPUSH
63283: LD_INT 0
63285: PPUSH
63286: LD_INT 4
63288: PPUSH
63289: CALL_OW 273
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_VAR 0 7
63302: PPUSH
63303: LD_INT 1
63305: PPUSH
63306: LD_INT 4
63308: PPUSH
63309: CALL_OW 272
63313: PUSH
63314: LD_VAR 0 8
63318: PPUSH
63319: LD_INT 1
63321: PPUSH
63322: LD_INT 4
63324: PPUSH
63325: CALL_OW 273
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_VAR 0 7
63338: PPUSH
63339: LD_INT 2
63341: PPUSH
63342: LD_INT 4
63344: PPUSH
63345: CALL_OW 272
63349: PUSH
63350: LD_VAR 0 8
63354: PPUSH
63355: LD_INT 2
63357: PPUSH
63358: LD_INT 4
63360: PPUSH
63361: CALL_OW 273
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_VAR 0 7
63374: PPUSH
63375: LD_INT 3
63377: PPUSH
63378: LD_INT 4
63380: PPUSH
63381: CALL_OW 272
63385: PUSH
63386: LD_VAR 0 8
63390: PPUSH
63391: LD_INT 3
63393: PPUSH
63394: LD_INT 4
63396: PPUSH
63397: CALL_OW 273
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_VAR 0 7
63410: PPUSH
63411: LD_INT 4
63413: PPUSH
63414: LD_INT 4
63416: PPUSH
63417: CALL_OW 272
63421: PUSH
63422: LD_VAR 0 8
63426: PPUSH
63427: LD_INT 4
63429: PPUSH
63430: LD_INT 4
63432: PPUSH
63433: CALL_OW 273
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_VAR 0 7
63446: PPUSH
63447: LD_INT 5
63449: PPUSH
63450: LD_INT 4
63452: PPUSH
63453: CALL_OW 272
63457: PUSH
63458: LD_VAR 0 8
63462: PPUSH
63463: LD_INT 5
63465: PPUSH
63466: LD_INT 4
63468: PPUSH
63469: CALL_OW 273
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: ST_TO_ADDR
// for i = tmp downto 1 do
63486: LD_ADDR_VAR 0 4
63490: PUSH
63491: DOUBLE
63492: LD_VAR 0 6
63496: INC
63497: ST_TO_ADDR
63498: LD_INT 1
63500: PUSH
63501: FOR_DOWNTO
63502: IFFALSE 63603
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63504: LD_VAR 0 6
63508: PUSH
63509: LD_VAR 0 4
63513: ARRAY
63514: PUSH
63515: LD_INT 1
63517: ARRAY
63518: PPUSH
63519: LD_VAR 0 6
63523: PUSH
63524: LD_VAR 0 4
63528: ARRAY
63529: PUSH
63530: LD_INT 2
63532: ARRAY
63533: PPUSH
63534: CALL_OW 488
63538: NOT
63539: PUSH
63540: LD_VAR 0 6
63544: PUSH
63545: LD_VAR 0 4
63549: ARRAY
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: PPUSH
63555: LD_VAR 0 6
63559: PUSH
63560: LD_VAR 0 4
63564: ARRAY
63565: PUSH
63566: LD_INT 2
63568: ARRAY
63569: PPUSH
63570: CALL_OW 428
63574: PUSH
63575: LD_INT 0
63577: NONEQUAL
63578: OR
63579: IFFALSE 63601
// tmp := Delete ( tmp , i ) ;
63581: LD_ADDR_VAR 0 6
63585: PUSH
63586: LD_VAR 0 6
63590: PPUSH
63591: LD_VAR 0 4
63595: PPUSH
63596: CALL_OW 3
63600: ST_TO_ADDR
63601: GO 63501
63603: POP
63604: POP
// j := GetClosestHex ( unit , tmp ) ;
63605: LD_ADDR_VAR 0 5
63609: PUSH
63610: LD_VAR 0 1
63614: PPUSH
63615: LD_VAR 0 6
63619: PPUSH
63620: CALL 62896 0 2
63624: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63625: LD_VAR 0 1
63629: PPUSH
63630: LD_VAR 0 5
63634: PUSH
63635: LD_INT 1
63637: ARRAY
63638: PPUSH
63639: LD_VAR 0 5
63643: PUSH
63644: LD_INT 2
63646: ARRAY
63647: PPUSH
63648: CALL_OW 111
// end ;
63652: LD_VAR 0 3
63656: RET
// export function PrepareApemanSoldier ( ) ; begin
63657: LD_INT 0
63659: PPUSH
// uc_nation := 0 ;
63660: LD_ADDR_OWVAR 21
63664: PUSH
63665: LD_INT 0
63667: ST_TO_ADDR
// hc_sex := sex_male ;
63668: LD_ADDR_OWVAR 27
63672: PUSH
63673: LD_INT 1
63675: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63676: LD_ADDR_OWVAR 28
63680: PUSH
63681: LD_INT 15
63683: ST_TO_ADDR
// hc_gallery :=  ;
63684: LD_ADDR_OWVAR 33
63688: PUSH
63689: LD_STRING 
63691: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63692: LD_ADDR_OWVAR 31
63696: PUSH
63697: LD_INT 0
63699: PPUSH
63700: LD_INT 3
63702: PPUSH
63703: CALL_OW 12
63707: PUSH
63708: LD_INT 0
63710: PPUSH
63711: LD_INT 3
63713: PPUSH
63714: CALL_OW 12
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 1
63735: RET
// export function PrepareApemanEngineer ( ) ; begin
63736: LD_INT 0
63738: PPUSH
// uc_nation := 0 ;
63739: LD_ADDR_OWVAR 21
63743: PUSH
63744: LD_INT 0
63746: ST_TO_ADDR
// hc_sex := sex_male ;
63747: LD_ADDR_OWVAR 27
63751: PUSH
63752: LD_INT 1
63754: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63755: LD_ADDR_OWVAR 28
63759: PUSH
63760: LD_INT 16
63762: ST_TO_ADDR
// hc_gallery :=  ;
63763: LD_ADDR_OWVAR 33
63767: PUSH
63768: LD_STRING 
63770: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63771: LD_ADDR_OWVAR 31
63775: PUSH
63776: LD_INT 0
63778: PPUSH
63779: LD_INT 3
63781: PPUSH
63782: CALL_OW 12
63786: PUSH
63787: LD_INT 0
63789: PPUSH
63790: LD_INT 3
63792: PPUSH
63793: CALL_OW 12
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: ST_TO_ADDR
// end ;
63810: LD_VAR 0 1
63814: RET
// export function PrepareApeman ( agressivity ) ; begin
63815: LD_INT 0
63817: PPUSH
// uc_side := 0 ;
63818: LD_ADDR_OWVAR 20
63822: PUSH
63823: LD_INT 0
63825: ST_TO_ADDR
// uc_nation := 0 ;
63826: LD_ADDR_OWVAR 21
63830: PUSH
63831: LD_INT 0
63833: ST_TO_ADDR
// hc_sex := sex_male ;
63834: LD_ADDR_OWVAR 27
63838: PUSH
63839: LD_INT 1
63841: ST_TO_ADDR
// hc_class := class_apeman ;
63842: LD_ADDR_OWVAR 28
63846: PUSH
63847: LD_INT 12
63849: ST_TO_ADDR
// hc_gallery :=  ;
63850: LD_ADDR_OWVAR 33
63854: PUSH
63855: LD_STRING 
63857: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63858: LD_ADDR_OWVAR 35
63862: PUSH
63863: LD_VAR 0 1
63867: NEG
63868: PPUSH
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 12
63878: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63879: LD_ADDR_OWVAR 31
63883: PUSH
63884: LD_INT 0
63886: PPUSH
63887: LD_INT 3
63889: PPUSH
63890: CALL_OW 12
63894: PUSH
63895: LD_INT 0
63897: PPUSH
63898: LD_INT 3
63900: PPUSH
63901: CALL_OW 12
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// end ;
63918: LD_VAR 0 2
63922: RET
// export function PrepareTiger ( agressivity ) ; begin
63923: LD_INT 0
63925: PPUSH
// uc_side := 0 ;
63926: LD_ADDR_OWVAR 20
63930: PUSH
63931: LD_INT 0
63933: ST_TO_ADDR
// uc_nation := 0 ;
63934: LD_ADDR_OWVAR 21
63938: PUSH
63939: LD_INT 0
63941: ST_TO_ADDR
// hc_class := class_tiger ;
63942: LD_ADDR_OWVAR 28
63946: PUSH
63947: LD_INT 14
63949: ST_TO_ADDR
// hc_gallery :=  ;
63950: LD_ADDR_OWVAR 33
63954: PUSH
63955: LD_STRING 
63957: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63958: LD_ADDR_OWVAR 35
63962: PUSH
63963: LD_VAR 0 1
63967: NEG
63968: PPUSH
63969: LD_VAR 0 1
63973: PPUSH
63974: CALL_OW 12
63978: ST_TO_ADDR
// end ;
63979: LD_VAR 0 2
63983: RET
// export function PrepareEnchidna ( ) ; begin
63984: LD_INT 0
63986: PPUSH
// uc_side := 0 ;
63987: LD_ADDR_OWVAR 20
63991: PUSH
63992: LD_INT 0
63994: ST_TO_ADDR
// uc_nation := 0 ;
63995: LD_ADDR_OWVAR 21
63999: PUSH
64000: LD_INT 0
64002: ST_TO_ADDR
// hc_class := class_baggie ;
64003: LD_ADDR_OWVAR 28
64007: PUSH
64008: LD_INT 13
64010: ST_TO_ADDR
// hc_gallery :=  ;
64011: LD_ADDR_OWVAR 33
64015: PUSH
64016: LD_STRING 
64018: ST_TO_ADDR
// end ;
64019: LD_VAR 0 1
64023: RET
// export function PrepareFrog ( ) ; begin
64024: LD_INT 0
64026: PPUSH
// uc_side := 0 ;
64027: LD_ADDR_OWVAR 20
64031: PUSH
64032: LD_INT 0
64034: ST_TO_ADDR
// uc_nation := 0 ;
64035: LD_ADDR_OWVAR 21
64039: PUSH
64040: LD_INT 0
64042: ST_TO_ADDR
// hc_class := class_frog ;
64043: LD_ADDR_OWVAR 28
64047: PUSH
64048: LD_INT 19
64050: ST_TO_ADDR
// hc_gallery :=  ;
64051: LD_ADDR_OWVAR 33
64055: PUSH
64056: LD_STRING 
64058: ST_TO_ADDR
// end ;
64059: LD_VAR 0 1
64063: RET
// export function PrepareFish ( ) ; begin
64064: LD_INT 0
64066: PPUSH
// uc_side := 0 ;
64067: LD_ADDR_OWVAR 20
64071: PUSH
64072: LD_INT 0
64074: ST_TO_ADDR
// uc_nation := 0 ;
64075: LD_ADDR_OWVAR 21
64079: PUSH
64080: LD_INT 0
64082: ST_TO_ADDR
// hc_class := class_fish ;
64083: LD_ADDR_OWVAR 28
64087: PUSH
64088: LD_INT 20
64090: ST_TO_ADDR
// hc_gallery :=  ;
64091: LD_ADDR_OWVAR 33
64095: PUSH
64096: LD_STRING 
64098: ST_TO_ADDR
// end ;
64099: LD_VAR 0 1
64103: RET
// export function PrepareBird ( ) ; begin
64104: LD_INT 0
64106: PPUSH
// uc_side := 0 ;
64107: LD_ADDR_OWVAR 20
64111: PUSH
64112: LD_INT 0
64114: ST_TO_ADDR
// uc_nation := 0 ;
64115: LD_ADDR_OWVAR 21
64119: PUSH
64120: LD_INT 0
64122: ST_TO_ADDR
// hc_class := class_phororhacos ;
64123: LD_ADDR_OWVAR 28
64127: PUSH
64128: LD_INT 18
64130: ST_TO_ADDR
// hc_gallery :=  ;
64131: LD_ADDR_OWVAR 33
64135: PUSH
64136: LD_STRING 
64138: ST_TO_ADDR
// end ;
64139: LD_VAR 0 1
64143: RET
// export function PrepareHorse ( ) ; begin
64144: LD_INT 0
64146: PPUSH
// uc_side := 0 ;
64147: LD_ADDR_OWVAR 20
64151: PUSH
64152: LD_INT 0
64154: ST_TO_ADDR
// uc_nation := 0 ;
64155: LD_ADDR_OWVAR 21
64159: PUSH
64160: LD_INT 0
64162: ST_TO_ADDR
// hc_class := class_horse ;
64163: LD_ADDR_OWVAR 28
64167: PUSH
64168: LD_INT 21
64170: ST_TO_ADDR
// hc_gallery :=  ;
64171: LD_ADDR_OWVAR 33
64175: PUSH
64176: LD_STRING 
64178: ST_TO_ADDR
// end ;
64179: LD_VAR 0 1
64183: RET
// export function PrepareMastodont ( ) ; begin
64184: LD_INT 0
64186: PPUSH
// uc_side := 0 ;
64187: LD_ADDR_OWVAR 20
64191: PUSH
64192: LD_INT 0
64194: ST_TO_ADDR
// uc_nation := 0 ;
64195: LD_ADDR_OWVAR 21
64199: PUSH
64200: LD_INT 0
64202: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64203: LD_ADDR_OWVAR 37
64207: PUSH
64208: LD_INT 31
64210: ST_TO_ADDR
// vc_control := control_rider ;
64211: LD_ADDR_OWVAR 38
64215: PUSH
64216: LD_INT 4
64218: ST_TO_ADDR
// end ;
64219: LD_VAR 0 1
64223: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64224: LD_INT 0
64226: PPUSH
64227: PPUSH
64228: PPUSH
// uc_side = 0 ;
64229: LD_ADDR_OWVAR 20
64233: PUSH
64234: LD_INT 0
64236: ST_TO_ADDR
// uc_nation = 0 ;
64237: LD_ADDR_OWVAR 21
64241: PUSH
64242: LD_INT 0
64244: ST_TO_ADDR
// InitHc_All ( ) ;
64245: CALL_OW 584
// InitVc ;
64249: CALL_OW 20
// if mastodonts then
64253: LD_VAR 0 6
64257: IFFALSE 64324
// for i = 1 to mastodonts do
64259: LD_ADDR_VAR 0 11
64263: PUSH
64264: DOUBLE
64265: LD_INT 1
64267: DEC
64268: ST_TO_ADDR
64269: LD_VAR 0 6
64273: PUSH
64274: FOR_TO
64275: IFFALSE 64322
// begin vc_chassis := 31 ;
64277: LD_ADDR_OWVAR 37
64281: PUSH
64282: LD_INT 31
64284: ST_TO_ADDR
// vc_control := control_rider ;
64285: LD_ADDR_OWVAR 38
64289: PUSH
64290: LD_INT 4
64292: ST_TO_ADDR
// animal := CreateVehicle ;
64293: LD_ADDR_VAR 0 12
64297: PUSH
64298: CALL_OW 45
64302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64303: LD_VAR 0 12
64307: PPUSH
64308: LD_VAR 0 8
64312: PPUSH
64313: LD_INT 0
64315: PPUSH
64316: CALL 66452 0 3
// end ;
64320: GO 64274
64322: POP
64323: POP
// if horses then
64324: LD_VAR 0 5
64328: IFFALSE 64395
// for i = 1 to horses do
64330: LD_ADDR_VAR 0 11
64334: PUSH
64335: DOUBLE
64336: LD_INT 1
64338: DEC
64339: ST_TO_ADDR
64340: LD_VAR 0 5
64344: PUSH
64345: FOR_TO
64346: IFFALSE 64393
// begin hc_class := 21 ;
64348: LD_ADDR_OWVAR 28
64352: PUSH
64353: LD_INT 21
64355: ST_TO_ADDR
// hc_gallery :=  ;
64356: LD_ADDR_OWVAR 33
64360: PUSH
64361: LD_STRING 
64363: ST_TO_ADDR
// animal := CreateHuman ;
64364: LD_ADDR_VAR 0 12
64368: PUSH
64369: CALL_OW 44
64373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64374: LD_VAR 0 12
64378: PPUSH
64379: LD_VAR 0 8
64383: PPUSH
64384: LD_INT 0
64386: PPUSH
64387: CALL 66452 0 3
// end ;
64391: GO 64345
64393: POP
64394: POP
// if birds then
64395: LD_VAR 0 1
64399: IFFALSE 64466
// for i = 1 to birds do
64401: LD_ADDR_VAR 0 11
64405: PUSH
64406: DOUBLE
64407: LD_INT 1
64409: DEC
64410: ST_TO_ADDR
64411: LD_VAR 0 1
64415: PUSH
64416: FOR_TO
64417: IFFALSE 64464
// begin hc_class = 18 ;
64419: LD_ADDR_OWVAR 28
64423: PUSH
64424: LD_INT 18
64426: ST_TO_ADDR
// hc_gallery =  ;
64427: LD_ADDR_OWVAR 33
64431: PUSH
64432: LD_STRING 
64434: ST_TO_ADDR
// animal := CreateHuman ;
64435: LD_ADDR_VAR 0 12
64439: PUSH
64440: CALL_OW 44
64444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64445: LD_VAR 0 12
64449: PPUSH
64450: LD_VAR 0 8
64454: PPUSH
64455: LD_INT 0
64457: PPUSH
64458: CALL 66452 0 3
// end ;
64462: GO 64416
64464: POP
64465: POP
// if tigers then
64466: LD_VAR 0 2
64470: IFFALSE 64554
// for i = 1 to tigers do
64472: LD_ADDR_VAR 0 11
64476: PUSH
64477: DOUBLE
64478: LD_INT 1
64480: DEC
64481: ST_TO_ADDR
64482: LD_VAR 0 2
64486: PUSH
64487: FOR_TO
64488: IFFALSE 64552
// begin hc_class = class_tiger ;
64490: LD_ADDR_OWVAR 28
64494: PUSH
64495: LD_INT 14
64497: ST_TO_ADDR
// hc_gallery =  ;
64498: LD_ADDR_OWVAR 33
64502: PUSH
64503: LD_STRING 
64505: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64506: LD_ADDR_OWVAR 35
64510: PUSH
64511: LD_INT 7
64513: NEG
64514: PPUSH
64515: LD_INT 7
64517: PPUSH
64518: CALL_OW 12
64522: ST_TO_ADDR
// animal := CreateHuman ;
64523: LD_ADDR_VAR 0 12
64527: PUSH
64528: CALL_OW 44
64532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64533: LD_VAR 0 12
64537: PPUSH
64538: LD_VAR 0 8
64542: PPUSH
64543: LD_INT 0
64545: PPUSH
64546: CALL 66452 0 3
// end ;
64550: GO 64487
64552: POP
64553: POP
// if apemans then
64554: LD_VAR 0 3
64558: IFFALSE 64681
// for i = 1 to apemans do
64560: LD_ADDR_VAR 0 11
64564: PUSH
64565: DOUBLE
64566: LD_INT 1
64568: DEC
64569: ST_TO_ADDR
64570: LD_VAR 0 3
64574: PUSH
64575: FOR_TO
64576: IFFALSE 64679
// begin hc_class = class_apeman ;
64578: LD_ADDR_OWVAR 28
64582: PUSH
64583: LD_INT 12
64585: ST_TO_ADDR
// hc_gallery =  ;
64586: LD_ADDR_OWVAR 33
64590: PUSH
64591: LD_STRING 
64593: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64594: LD_ADDR_OWVAR 35
64598: PUSH
64599: LD_INT 2
64601: NEG
64602: PPUSH
64603: LD_INT 2
64605: PPUSH
64606: CALL_OW 12
64610: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64611: LD_ADDR_OWVAR 31
64615: PUSH
64616: LD_INT 1
64618: PPUSH
64619: LD_INT 3
64621: PPUSH
64622: CALL_OW 12
64626: PUSH
64627: LD_INT 1
64629: PPUSH
64630: LD_INT 3
64632: PPUSH
64633: CALL_OW 12
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// animal := CreateHuman ;
64650: LD_ADDR_VAR 0 12
64654: PUSH
64655: CALL_OW 44
64659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64660: LD_VAR 0 12
64664: PPUSH
64665: LD_VAR 0 8
64669: PPUSH
64670: LD_INT 0
64672: PPUSH
64673: CALL 66452 0 3
// end ;
64677: GO 64575
64679: POP
64680: POP
// if enchidnas then
64681: LD_VAR 0 4
64685: IFFALSE 64752
// for i = 1 to enchidnas do
64687: LD_ADDR_VAR 0 11
64691: PUSH
64692: DOUBLE
64693: LD_INT 1
64695: DEC
64696: ST_TO_ADDR
64697: LD_VAR 0 4
64701: PUSH
64702: FOR_TO
64703: IFFALSE 64750
// begin hc_class = 13 ;
64705: LD_ADDR_OWVAR 28
64709: PUSH
64710: LD_INT 13
64712: ST_TO_ADDR
// hc_gallery =  ;
64713: LD_ADDR_OWVAR 33
64717: PUSH
64718: LD_STRING 
64720: ST_TO_ADDR
// animal := CreateHuman ;
64721: LD_ADDR_VAR 0 12
64725: PUSH
64726: CALL_OW 44
64730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64731: LD_VAR 0 12
64735: PPUSH
64736: LD_VAR 0 8
64740: PPUSH
64741: LD_INT 0
64743: PPUSH
64744: CALL 66452 0 3
// end ;
64748: GO 64702
64750: POP
64751: POP
// if fishes then
64752: LD_VAR 0 7
64756: IFFALSE 64823
// for i = 1 to fishes do
64758: LD_ADDR_VAR 0 11
64762: PUSH
64763: DOUBLE
64764: LD_INT 1
64766: DEC
64767: ST_TO_ADDR
64768: LD_VAR 0 7
64772: PUSH
64773: FOR_TO
64774: IFFALSE 64821
// begin hc_class = 20 ;
64776: LD_ADDR_OWVAR 28
64780: PUSH
64781: LD_INT 20
64783: ST_TO_ADDR
// hc_gallery =  ;
64784: LD_ADDR_OWVAR 33
64788: PUSH
64789: LD_STRING 
64791: ST_TO_ADDR
// animal := CreateHuman ;
64792: LD_ADDR_VAR 0 12
64796: PUSH
64797: CALL_OW 44
64801: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64802: LD_VAR 0 12
64806: PPUSH
64807: LD_VAR 0 9
64811: PPUSH
64812: LD_INT 0
64814: PPUSH
64815: CALL 66452 0 3
// end ;
64819: GO 64773
64821: POP
64822: POP
// end ;
64823: LD_VAR 0 10
64827: RET
// export function WantHeal ( sci , unit ) ; begin
64828: LD_INT 0
64830: PPUSH
// if GetTaskList ( sci ) > 0 then
64831: LD_VAR 0 1
64835: PPUSH
64836: CALL_OW 437
64840: PUSH
64841: LD_INT 0
64843: GREATER
64844: IFFALSE 64914
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64846: LD_VAR 0 1
64850: PPUSH
64851: CALL_OW 437
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PUSH
64860: LD_INT 1
64862: ARRAY
64863: PUSH
64864: LD_STRING l
64866: EQUAL
64867: PUSH
64868: LD_VAR 0 1
64872: PPUSH
64873: CALL_OW 437
64877: PUSH
64878: LD_INT 1
64880: ARRAY
64881: PUSH
64882: LD_INT 4
64884: ARRAY
64885: PUSH
64886: LD_VAR 0 2
64890: EQUAL
64891: AND
64892: IFFALSE 64904
// result := true else
64894: LD_ADDR_VAR 0 3
64898: PUSH
64899: LD_INT 1
64901: ST_TO_ADDR
64902: GO 64912
// result := false ;
64904: LD_ADDR_VAR 0 3
64908: PUSH
64909: LD_INT 0
64911: ST_TO_ADDR
// end else
64912: GO 64922
// result := false ;
64914: LD_ADDR_VAR 0 3
64918: PUSH
64919: LD_INT 0
64921: ST_TO_ADDR
// end ;
64922: LD_VAR 0 3
64926: RET
// export function HealTarget ( sci ) ; begin
64927: LD_INT 0
64929: PPUSH
// if not sci then
64930: LD_VAR 0 1
64934: NOT
64935: IFFALSE 64939
// exit ;
64937: GO 65004
// result := 0 ;
64939: LD_ADDR_VAR 0 2
64943: PUSH
64944: LD_INT 0
64946: ST_TO_ADDR
// if GetTaskList ( sci ) then
64947: LD_VAR 0 1
64951: PPUSH
64952: CALL_OW 437
64956: IFFALSE 65004
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64958: LD_VAR 0 1
64962: PPUSH
64963: CALL_OW 437
64967: PUSH
64968: LD_INT 1
64970: ARRAY
64971: PUSH
64972: LD_INT 1
64974: ARRAY
64975: PUSH
64976: LD_STRING l
64978: EQUAL
64979: IFFALSE 65004
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64981: LD_ADDR_VAR 0 2
64985: PUSH
64986: LD_VAR 0 1
64990: PPUSH
64991: CALL_OW 437
64995: PUSH
64996: LD_INT 1
64998: ARRAY
64999: PUSH
65000: LD_INT 4
65002: ARRAY
65003: ST_TO_ADDR
// end ;
65004: LD_VAR 0 2
65008: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65009: LD_INT 0
65011: PPUSH
65012: PPUSH
65013: PPUSH
65014: PPUSH
// if not base_units then
65015: LD_VAR 0 1
65019: NOT
65020: IFFALSE 65024
// exit ;
65022: GO 65111
// result := false ;
65024: LD_ADDR_VAR 0 2
65028: PUSH
65029: LD_INT 0
65031: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65032: LD_ADDR_VAR 0 5
65036: PUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_INT 21
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PPUSH
65052: CALL_OW 72
65056: ST_TO_ADDR
// if not tmp then
65057: LD_VAR 0 5
65061: NOT
65062: IFFALSE 65066
// exit ;
65064: GO 65111
// for i in tmp do
65066: LD_ADDR_VAR 0 3
65070: PUSH
65071: LD_VAR 0 5
65075: PUSH
65076: FOR_IN
65077: IFFALSE 65109
// begin result := EnemyInRange ( i , 22 ) ;
65079: LD_ADDR_VAR 0 2
65083: PUSH
65084: LD_VAR 0 3
65088: PPUSH
65089: LD_INT 22
65091: PPUSH
65092: CALL 62698 0 2
65096: ST_TO_ADDR
// if result then
65097: LD_VAR 0 2
65101: IFFALSE 65107
// exit ;
65103: POP
65104: POP
65105: GO 65111
// end ;
65107: GO 65076
65109: POP
65110: POP
// end ;
65111: LD_VAR 0 2
65115: RET
// export function FilterByTag ( units , tag ) ; begin
65116: LD_INT 0
65118: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65119: LD_ADDR_VAR 0 3
65123: PUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: LD_INT 120
65131: PUSH
65132: LD_VAR 0 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PPUSH
65141: CALL_OW 72
65145: ST_TO_ADDR
// end ;
65146: LD_VAR 0 3
65150: RET
// export function IsDriver ( un ) ; begin
65151: LD_INT 0
65153: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65154: LD_ADDR_VAR 0 2
65158: PUSH
65159: LD_VAR 0 1
65163: PUSH
65164: LD_INT 55
65166: PUSH
65167: EMPTY
65168: LIST
65169: PPUSH
65170: CALL_OW 69
65174: IN
65175: ST_TO_ADDR
// end ;
65176: LD_VAR 0 2
65180: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65181: LD_INT 0
65183: PPUSH
65184: PPUSH
// list := [ ] ;
65185: LD_ADDR_VAR 0 5
65189: PUSH
65190: EMPTY
65191: ST_TO_ADDR
// case d of 0 :
65192: LD_VAR 0 3
65196: PUSH
65197: LD_INT 0
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65205
65203: GO 65338
65205: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65206: LD_ADDR_VAR 0 5
65210: PUSH
65211: LD_VAR 0 1
65215: PUSH
65216: LD_INT 4
65218: MINUS
65219: PUSH
65220: LD_VAR 0 2
65224: PUSH
65225: LD_INT 4
65227: MINUS
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: PUSH
65237: LD_VAR 0 1
65241: PUSH
65242: LD_INT 3
65244: MINUS
65245: PUSH
65246: LD_VAR 0 2
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: LIST
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 4
65266: PLUS
65267: PUSH
65268: LD_VAR 0 2
65272: PUSH
65273: LD_INT 4
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_INT 3
65288: PLUS
65289: PUSH
65290: LD_VAR 0 2
65294: PUSH
65295: LD_INT 3
65297: PLUS
65298: PUSH
65299: LD_INT 5
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: LIST
65306: PUSH
65307: LD_VAR 0 1
65311: PUSH
65312: LD_VAR 0 2
65316: PUSH
65317: LD_INT 4
65319: PLUS
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// end ; 1 :
65336: GO 66036
65338: LD_INT 1
65340: DOUBLE
65341: EQUAL
65342: IFTRUE 65346
65344: GO 65479
65346: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: LD_VAR 0 1
65356: PUSH
65357: LD_VAR 0 2
65361: PUSH
65362: LD_INT 4
65364: MINUS
65365: PUSH
65366: LD_INT 3
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: PUSH
65374: LD_VAR 0 1
65378: PUSH
65379: LD_INT 3
65381: MINUS
65382: PUSH
65383: LD_VAR 0 2
65387: PUSH
65388: LD_INT 3
65390: MINUS
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: PUSH
65400: LD_VAR 0 1
65404: PUSH
65405: LD_INT 4
65407: MINUS
65408: PUSH
65409: LD_VAR 0 2
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: PUSH
65422: LD_VAR 0 1
65426: PUSH
65427: LD_VAR 0 2
65431: PUSH
65432: LD_INT 3
65434: PLUS
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: PUSH
65444: LD_VAR 0 1
65448: PUSH
65449: LD_INT 4
65451: PLUS
65452: PUSH
65453: LD_VAR 0 2
65457: PUSH
65458: LD_INT 4
65460: PLUS
65461: PUSH
65462: LD_INT 5
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// end ; 2 :
65477: GO 66036
65479: LD_INT 2
65481: DOUBLE
65482: EQUAL
65483: IFTRUE 65487
65485: GO 65616
65487: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65488: LD_ADDR_VAR 0 5
65492: PUSH
65493: LD_VAR 0 1
65497: PUSH
65498: LD_VAR 0 2
65502: PUSH
65503: LD_INT 3
65505: MINUS
65506: PUSH
65507: LD_INT 3
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 4
65522: PLUS
65523: PUSH
65524: LD_VAR 0 2
65528: PUSH
65529: LD_INT 4
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_VAR 0 2
65546: PUSH
65547: LD_INT 4
65549: PLUS
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: PUSH
65559: LD_VAR 0 1
65563: PUSH
65564: LD_INT 3
65566: MINUS
65567: PUSH
65568: LD_VAR 0 2
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PUSH
65581: LD_VAR 0 1
65585: PUSH
65586: LD_INT 4
65588: MINUS
65589: PUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_INT 4
65597: MINUS
65598: PUSH
65599: LD_INT 2
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: ST_TO_ADDR
// end ; 3 :
65614: GO 66036
65616: LD_INT 3
65618: DOUBLE
65619: EQUAL
65620: IFTRUE 65624
65622: GO 65757
65624: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65625: LD_ADDR_VAR 0 5
65629: PUSH
65630: LD_VAR 0 1
65634: PUSH
65635: LD_INT 3
65637: PLUS
65638: PUSH
65639: LD_VAR 0 2
65643: PUSH
65644: LD_INT 4
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: PUSH
65652: LD_VAR 0 1
65656: PUSH
65657: LD_INT 4
65659: PLUS
65660: PUSH
65661: LD_VAR 0 2
65665: PUSH
65666: LD_INT 4
65668: PLUS
65669: PUSH
65670: LD_INT 5
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: PUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_INT 4
65685: MINUS
65686: PUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: PUSH
65700: LD_VAR 0 1
65704: PUSH
65705: LD_VAR 0 2
65709: PUSH
65710: LD_INT 4
65712: MINUS
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: PUSH
65722: LD_VAR 0 1
65726: PUSH
65727: LD_INT 3
65729: MINUS
65730: PUSH
65731: LD_VAR 0 2
65735: PUSH
65736: LD_INT 3
65738: MINUS
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: ST_TO_ADDR
// end ; 4 :
65755: GO 66036
65757: LD_INT 4
65759: DOUBLE
65760: EQUAL
65761: IFTRUE 65765
65763: GO 65898
65765: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65766: LD_ADDR_VAR 0 5
65770: PUSH
65771: LD_VAR 0 1
65775: PUSH
65776: LD_VAR 0 2
65780: PUSH
65781: LD_INT 4
65783: PLUS
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_INT 3
65800: PLUS
65801: PUSH
65802: LD_VAR 0 2
65806: PUSH
65807: LD_INT 3
65809: PLUS
65810: PUSH
65811: LD_INT 5
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: PUSH
65819: LD_VAR 0 1
65823: PUSH
65824: LD_INT 4
65826: PLUS
65827: PUSH
65828: LD_VAR 0 2
65832: PUSH
65833: LD_INT 4
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_VAR 0 2
65850: PUSH
65851: LD_INT 3
65853: MINUS
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: PUSH
65863: LD_VAR 0 1
65867: PUSH
65868: LD_INT 4
65870: MINUS
65871: PUSH
65872: LD_VAR 0 2
65876: PUSH
65877: LD_INT 4
65879: MINUS
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: ST_TO_ADDR
// end ; 5 :
65896: GO 66036
65898: LD_INT 5
65900: DOUBLE
65901: EQUAL
65902: IFTRUE 65906
65904: GO 66035
65906: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65907: LD_ADDR_VAR 0 5
65911: PUSH
65912: LD_VAR 0 1
65916: PUSH
65917: LD_INT 4
65919: MINUS
65920: PUSH
65921: LD_VAR 0 2
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: LD_VAR 0 2
65943: PUSH
65944: LD_INT 4
65946: MINUS
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: PUSH
65956: LD_VAR 0 1
65960: PUSH
65961: LD_INT 4
65963: PLUS
65964: PUSH
65965: LD_VAR 0 2
65969: PUSH
65970: LD_INT 4
65972: PLUS
65973: PUSH
65974: LD_INT 5
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: LIST
65981: PUSH
65982: LD_VAR 0 1
65986: PUSH
65987: LD_INT 3
65989: PLUS
65990: PUSH
65991: LD_VAR 0 2
65995: PUSH
65996: LD_INT 4
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: PUSH
66004: LD_VAR 0 1
66008: PUSH
66009: LD_VAR 0 2
66013: PUSH
66014: LD_INT 3
66016: PLUS
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// end ; end ;
66033: GO 66036
66035: POP
// result := list ;
66036: LD_ADDR_VAR 0 4
66040: PUSH
66041: LD_VAR 0 5
66045: ST_TO_ADDR
// end ;
66046: LD_VAR 0 4
66050: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66051: LD_INT 0
66053: PPUSH
66054: PPUSH
66055: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66056: LD_VAR 0 1
66060: NOT
66061: PUSH
66062: LD_VAR 0 2
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: LD_INT 4
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: IN
66085: NOT
66086: OR
66087: IFFALSE 66091
// exit ;
66089: GO 66174
// tmp := [ ] ;
66091: LD_ADDR_VAR 0 5
66095: PUSH
66096: EMPTY
66097: ST_TO_ADDR
// for i in units do
66098: LD_ADDR_VAR 0 4
66102: PUSH
66103: LD_VAR 0 1
66107: PUSH
66108: FOR_IN
66109: IFFALSE 66143
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66111: LD_ADDR_VAR 0 5
66115: PUSH
66116: LD_VAR 0 5
66120: PPUSH
66121: LD_VAR 0 4
66125: PPUSH
66126: LD_VAR 0 2
66130: PPUSH
66131: CALL_OW 259
66135: PPUSH
66136: CALL 67535 0 2
66140: ST_TO_ADDR
66141: GO 66108
66143: POP
66144: POP
// if not tmp then
66145: LD_VAR 0 5
66149: NOT
66150: IFFALSE 66154
// exit ;
66152: GO 66174
// result := SortListByListDesc ( units , tmp ) ;
66154: LD_ADDR_VAR 0 3
66158: PUSH
66159: LD_VAR 0 1
66163: PPUSH
66164: LD_VAR 0 5
66168: PPUSH
66169: CALL_OW 77
66173: ST_TO_ADDR
// end ;
66174: LD_VAR 0 3
66178: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66179: LD_INT 0
66181: PPUSH
66182: PPUSH
66183: PPUSH
// result := false ;
66184: LD_ADDR_VAR 0 3
66188: PUSH
66189: LD_INT 0
66191: ST_TO_ADDR
// if not building then
66192: LD_VAR 0 2
66196: NOT
66197: IFFALSE 66201
// exit ;
66199: GO 66339
// x := GetX ( building ) ;
66201: LD_ADDR_VAR 0 4
66205: PUSH
66206: LD_VAR 0 2
66210: PPUSH
66211: CALL_OW 250
66215: ST_TO_ADDR
// y := GetY ( building ) ;
66216: LD_ADDR_VAR 0 5
66220: PUSH
66221: LD_VAR 0 2
66225: PPUSH
66226: CALL_OW 251
66230: ST_TO_ADDR
// if not x or not y then
66231: LD_VAR 0 4
66235: NOT
66236: PUSH
66237: LD_VAR 0 5
66241: NOT
66242: OR
66243: IFFALSE 66247
// exit ;
66245: GO 66339
// if GetTaskList ( unit ) then
66247: LD_VAR 0 1
66251: PPUSH
66252: CALL_OW 437
66256: IFFALSE 66339
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66258: LD_STRING e
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: CALL_OW 437
66270: PUSH
66271: LD_INT 1
66273: ARRAY
66274: PUSH
66275: LD_INT 1
66277: ARRAY
66278: EQUAL
66279: PUSH
66280: LD_VAR 0 4
66284: PUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: CALL_OW 437
66294: PUSH
66295: LD_INT 1
66297: ARRAY
66298: PUSH
66299: LD_INT 2
66301: ARRAY
66302: EQUAL
66303: AND
66304: PUSH
66305: LD_VAR 0 5
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: CALL_OW 437
66319: PUSH
66320: LD_INT 1
66322: ARRAY
66323: PUSH
66324: LD_INT 3
66326: ARRAY
66327: EQUAL
66328: AND
66329: IFFALSE 66339
// result := true end ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_INT 1
66338: ST_TO_ADDR
// end ;
66339: LD_VAR 0 3
66343: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66344: LD_INT 0
66346: PPUSH
// result := false ;
66347: LD_ADDR_VAR 0 4
66351: PUSH
66352: LD_INT 0
66354: ST_TO_ADDR
// if GetTaskList ( unit ) then
66355: LD_VAR 0 1
66359: PPUSH
66360: CALL_OW 437
66364: IFFALSE 66447
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66366: LD_STRING M
66368: PUSH
66369: LD_VAR 0 1
66373: PPUSH
66374: CALL_OW 437
66378: PUSH
66379: LD_INT 1
66381: ARRAY
66382: PUSH
66383: LD_INT 1
66385: ARRAY
66386: EQUAL
66387: PUSH
66388: LD_VAR 0 2
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: CALL_OW 437
66402: PUSH
66403: LD_INT 1
66405: ARRAY
66406: PUSH
66407: LD_INT 2
66409: ARRAY
66410: EQUAL
66411: AND
66412: PUSH
66413: LD_VAR 0 3
66417: PUSH
66418: LD_VAR 0 1
66422: PPUSH
66423: CALL_OW 437
66427: PUSH
66428: LD_INT 1
66430: ARRAY
66431: PUSH
66432: LD_INT 3
66434: ARRAY
66435: EQUAL
66436: AND
66437: IFFALSE 66447
// result := true ;
66439: LD_ADDR_VAR 0 4
66443: PUSH
66444: LD_INT 1
66446: ST_TO_ADDR
// end ; end ;
66447: LD_VAR 0 4
66451: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66452: LD_INT 0
66454: PPUSH
66455: PPUSH
66456: PPUSH
66457: PPUSH
// if not unit or not area then
66458: LD_VAR 0 1
66462: NOT
66463: PUSH
66464: LD_VAR 0 2
66468: NOT
66469: OR
66470: IFFALSE 66474
// exit ;
66472: GO 66638
// tmp := AreaToList ( area , i ) ;
66474: LD_ADDR_VAR 0 6
66478: PUSH
66479: LD_VAR 0 2
66483: PPUSH
66484: LD_VAR 0 5
66488: PPUSH
66489: CALL_OW 517
66493: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66494: LD_ADDR_VAR 0 5
66498: PUSH
66499: DOUBLE
66500: LD_INT 1
66502: DEC
66503: ST_TO_ADDR
66504: LD_VAR 0 6
66508: PUSH
66509: LD_INT 1
66511: ARRAY
66512: PUSH
66513: FOR_TO
66514: IFFALSE 66636
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66516: LD_ADDR_VAR 0 7
66520: PUSH
66521: LD_VAR 0 6
66525: PUSH
66526: LD_INT 1
66528: ARRAY
66529: PUSH
66530: LD_VAR 0 5
66534: ARRAY
66535: PUSH
66536: LD_VAR 0 6
66540: PUSH
66541: LD_INT 2
66543: ARRAY
66544: PUSH
66545: LD_VAR 0 5
66549: ARRAY
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66555: LD_VAR 0 7
66559: PUSH
66560: LD_INT 1
66562: ARRAY
66563: PPUSH
66564: LD_VAR 0 7
66568: PUSH
66569: LD_INT 2
66571: ARRAY
66572: PPUSH
66573: CALL_OW 428
66577: PUSH
66578: LD_INT 0
66580: EQUAL
66581: IFFALSE 66634
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66583: LD_VAR 0 1
66587: PPUSH
66588: LD_VAR 0 7
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: PPUSH
66597: LD_VAR 0 7
66601: PUSH
66602: LD_INT 2
66604: ARRAY
66605: PPUSH
66606: LD_VAR 0 3
66610: PPUSH
66611: CALL_OW 48
// result := IsPlaced ( unit ) ;
66615: LD_ADDR_VAR 0 4
66619: PUSH
66620: LD_VAR 0 1
66624: PPUSH
66625: CALL_OW 305
66629: ST_TO_ADDR
// exit ;
66630: POP
66631: POP
66632: GO 66638
// end ; end ;
66634: GO 66513
66636: POP
66637: POP
// end ;
66638: LD_VAR 0 4
66642: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66643: LD_INT 0
66645: PPUSH
66646: PPUSH
66647: PPUSH
// if not side or side > 8 then
66648: LD_VAR 0 1
66652: NOT
66653: PUSH
66654: LD_VAR 0 1
66658: PUSH
66659: LD_INT 8
66661: GREATER
66662: OR
66663: IFFALSE 66667
// exit ;
66665: GO 66854
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66667: LD_ADDR_VAR 0 4
66671: PUSH
66672: LD_INT 22
66674: PUSH
66675: LD_VAR 0 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 21
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PPUSH
66698: CALL_OW 69
66702: ST_TO_ADDR
// if not tmp then
66703: LD_VAR 0 4
66707: NOT
66708: IFFALSE 66712
// exit ;
66710: GO 66854
// enable_addtolog := true ;
66712: LD_ADDR_OWVAR 81
66716: PUSH
66717: LD_INT 1
66719: ST_TO_ADDR
// AddToLog ( [ ) ;
66720: LD_STRING [
66722: PPUSH
66723: CALL_OW 561
// for i in tmp do
66727: LD_ADDR_VAR 0 3
66731: PUSH
66732: LD_VAR 0 4
66736: PUSH
66737: FOR_IN
66738: IFFALSE 66845
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66740: LD_STRING [
66742: PUSH
66743: LD_VAR 0 3
66747: PPUSH
66748: CALL_OW 266
66752: STR
66753: PUSH
66754: LD_STRING , 
66756: STR
66757: PUSH
66758: LD_VAR 0 3
66762: PPUSH
66763: CALL_OW 250
66767: STR
66768: PUSH
66769: LD_STRING , 
66771: STR
66772: PUSH
66773: LD_VAR 0 3
66777: PPUSH
66778: CALL_OW 251
66782: STR
66783: PUSH
66784: LD_STRING , 
66786: STR
66787: PUSH
66788: LD_VAR 0 3
66792: PPUSH
66793: CALL_OW 254
66797: STR
66798: PUSH
66799: LD_STRING , 
66801: STR
66802: PUSH
66803: LD_VAR 0 3
66807: PPUSH
66808: LD_INT 1
66810: PPUSH
66811: CALL_OW 268
66815: STR
66816: PUSH
66817: LD_STRING , 
66819: STR
66820: PUSH
66821: LD_VAR 0 3
66825: PPUSH
66826: LD_INT 2
66828: PPUSH
66829: CALL_OW 268
66833: STR
66834: PUSH
66835: LD_STRING ],
66837: STR
66838: PPUSH
66839: CALL_OW 561
// end ;
66843: GO 66737
66845: POP
66846: POP
// AddToLog ( ]; ) ;
66847: LD_STRING ];
66849: PPUSH
66850: CALL_OW 561
// end ;
66854: LD_VAR 0 2
66858: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66859: LD_INT 0
66861: PPUSH
66862: PPUSH
66863: PPUSH
66864: PPUSH
66865: PPUSH
// if not area or not rate or not max then
66866: LD_VAR 0 1
66870: NOT
66871: PUSH
66872: LD_VAR 0 2
66876: NOT
66877: OR
66878: PUSH
66879: LD_VAR 0 4
66883: NOT
66884: OR
66885: IFFALSE 66889
// exit ;
66887: GO 67078
// while 1 do
66889: LD_INT 1
66891: IFFALSE 67078
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66893: LD_ADDR_VAR 0 9
66897: PUSH
66898: LD_VAR 0 1
66902: PPUSH
66903: LD_INT 1
66905: PPUSH
66906: CALL_OW 287
66910: PUSH
66911: LD_INT 10
66913: MUL
66914: ST_TO_ADDR
// r := rate / 10 ;
66915: LD_ADDR_VAR 0 7
66919: PUSH
66920: LD_VAR 0 2
66924: PUSH
66925: LD_INT 10
66927: DIVREAL
66928: ST_TO_ADDR
// time := 1 1$00 ;
66929: LD_ADDR_VAR 0 8
66933: PUSH
66934: LD_INT 2100
66936: ST_TO_ADDR
// if amount < min then
66937: LD_VAR 0 9
66941: PUSH
66942: LD_VAR 0 3
66946: LESS
66947: IFFALSE 66965
// r := r * 2 else
66949: LD_ADDR_VAR 0 7
66953: PUSH
66954: LD_VAR 0 7
66958: PUSH
66959: LD_INT 2
66961: MUL
66962: ST_TO_ADDR
66963: GO 66991
// if amount > max then
66965: LD_VAR 0 9
66969: PUSH
66970: LD_VAR 0 4
66974: GREATER
66975: IFFALSE 66991
// r := r / 2 ;
66977: LD_ADDR_VAR 0 7
66981: PUSH
66982: LD_VAR 0 7
66986: PUSH
66987: LD_INT 2
66989: DIVREAL
66990: ST_TO_ADDR
// time := time / r ;
66991: LD_ADDR_VAR 0 8
66995: PUSH
66996: LD_VAR 0 8
67000: PUSH
67001: LD_VAR 0 7
67005: DIVREAL
67006: ST_TO_ADDR
// if time < 0 then
67007: LD_VAR 0 8
67011: PUSH
67012: LD_INT 0
67014: LESS
67015: IFFALSE 67032
// time := time * - 1 ;
67017: LD_ADDR_VAR 0 8
67021: PUSH
67022: LD_VAR 0 8
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: MUL
67031: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67032: LD_VAR 0 8
67036: PUSH
67037: LD_INT 35
67039: PPUSH
67040: LD_INT 875
67042: PPUSH
67043: CALL_OW 12
67047: PLUS
67048: PPUSH
67049: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67053: LD_INT 1
67055: PPUSH
67056: LD_INT 5
67058: PPUSH
67059: CALL_OW 12
67063: PPUSH
67064: LD_VAR 0 1
67068: PPUSH
67069: LD_INT 1
67071: PPUSH
67072: CALL_OW 55
// end ;
67076: GO 66889
// end ;
67078: LD_VAR 0 5
67082: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67083: LD_INT 0
67085: PPUSH
67086: PPUSH
67087: PPUSH
67088: PPUSH
67089: PPUSH
67090: PPUSH
67091: PPUSH
67092: PPUSH
// if not turrets or not factories then
67093: LD_VAR 0 1
67097: NOT
67098: PUSH
67099: LD_VAR 0 2
67103: NOT
67104: OR
67105: IFFALSE 67109
// exit ;
67107: GO 67416
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67109: LD_ADDR_VAR 0 10
67113: PUSH
67114: LD_INT 5
67116: PUSH
67117: LD_INT 6
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: LD_INT 4
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 5
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 24
67151: PUSH
67152: LD_INT 25
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 23
67161: PUSH
67162: LD_INT 27
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 42
67175: PUSH
67176: LD_INT 43
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 44
67185: PUSH
67186: LD_INT 46
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 45
67195: PUSH
67196: LD_INT 47
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: ST_TO_ADDR
// result := [ ] ;
67213: LD_ADDR_VAR 0 3
67217: PUSH
67218: EMPTY
67219: ST_TO_ADDR
// for i in turrets do
67220: LD_ADDR_VAR 0 4
67224: PUSH
67225: LD_VAR 0 1
67229: PUSH
67230: FOR_IN
67231: IFFALSE 67414
// begin nat := GetNation ( i ) ;
67233: LD_ADDR_VAR 0 7
67237: PUSH
67238: LD_VAR 0 4
67242: PPUSH
67243: CALL_OW 248
67247: ST_TO_ADDR
// weapon := 0 ;
67248: LD_ADDR_VAR 0 8
67252: PUSH
67253: LD_INT 0
67255: ST_TO_ADDR
// if not nat then
67256: LD_VAR 0 7
67260: NOT
67261: IFFALSE 67265
// continue ;
67263: GO 67230
// for j in list [ nat ] do
67265: LD_ADDR_VAR 0 5
67269: PUSH
67270: LD_VAR 0 10
67274: PUSH
67275: LD_VAR 0 7
67279: ARRAY
67280: PUSH
67281: FOR_IN
67282: IFFALSE 67323
// if GetBWeapon ( i ) = j [ 1 ] then
67284: LD_VAR 0 4
67288: PPUSH
67289: CALL_OW 269
67293: PUSH
67294: LD_VAR 0 5
67298: PUSH
67299: LD_INT 1
67301: ARRAY
67302: EQUAL
67303: IFFALSE 67321
// begin weapon := j [ 2 ] ;
67305: LD_ADDR_VAR 0 8
67309: PUSH
67310: LD_VAR 0 5
67314: PUSH
67315: LD_INT 2
67317: ARRAY
67318: ST_TO_ADDR
// break ;
67319: GO 67323
// end ;
67321: GO 67281
67323: POP
67324: POP
// if not weapon then
67325: LD_VAR 0 8
67329: NOT
67330: IFFALSE 67334
// continue ;
67332: GO 67230
// for k in factories do
67334: LD_ADDR_VAR 0 6
67338: PUSH
67339: LD_VAR 0 2
67343: PUSH
67344: FOR_IN
67345: IFFALSE 67410
// begin weapons := AvailableWeaponList ( k ) ;
67347: LD_ADDR_VAR 0 9
67351: PUSH
67352: LD_VAR 0 6
67356: PPUSH
67357: CALL_OW 478
67361: ST_TO_ADDR
// if not weapons then
67362: LD_VAR 0 9
67366: NOT
67367: IFFALSE 67371
// continue ;
67369: GO 67344
// if weapon in weapons then
67371: LD_VAR 0 8
67375: PUSH
67376: LD_VAR 0 9
67380: IN
67381: IFFALSE 67408
// begin result := [ i , weapon ] ;
67383: LD_ADDR_VAR 0 3
67387: PUSH
67388: LD_VAR 0 4
67392: PUSH
67393: LD_VAR 0 8
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: ST_TO_ADDR
// exit ;
67402: POP
67403: POP
67404: POP
67405: POP
67406: GO 67416
// end ; end ;
67408: GO 67344
67410: POP
67411: POP
// end ;
67412: GO 67230
67414: POP
67415: POP
// end ;
67416: LD_VAR 0 3
67420: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67421: LD_INT 0
67423: PPUSH
// if not side or side > 8 then
67424: LD_VAR 0 3
67428: NOT
67429: PUSH
67430: LD_VAR 0 3
67434: PUSH
67435: LD_INT 8
67437: GREATER
67438: OR
67439: IFFALSE 67443
// exit ;
67441: GO 67502
// if not range then
67443: LD_VAR 0 4
67447: NOT
67448: IFFALSE 67459
// range := - 12 ;
67450: LD_ADDR_VAR 0 4
67454: PUSH
67455: LD_INT 12
67457: NEG
67458: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67459: LD_VAR 0 1
67463: PPUSH
67464: LD_VAR 0 2
67468: PPUSH
67469: LD_VAR 0 3
67473: PPUSH
67474: LD_VAR 0 4
67478: PPUSH
67479: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67483: LD_VAR 0 1
67487: PPUSH
67488: LD_VAR 0 2
67492: PPUSH
67493: LD_VAR 0 3
67497: PPUSH
67498: CALL_OW 331
// end ;
67502: LD_VAR 0 5
67506: RET
// export function Video ( mode ) ; begin
67507: LD_INT 0
67509: PPUSH
// ingame_video = mode ;
67510: LD_ADDR_OWVAR 52
67514: PUSH
67515: LD_VAR 0 1
67519: ST_TO_ADDR
// interface_hidden = mode ;
67520: LD_ADDR_OWVAR 54
67524: PUSH
67525: LD_VAR 0 1
67529: ST_TO_ADDR
// end ;
67530: LD_VAR 0 2
67534: RET
// export function Join ( array , element ) ; begin
67535: LD_INT 0
67537: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67538: LD_ADDR_VAR 0 3
67542: PUSH
67543: LD_VAR 0 1
67547: PPUSH
67548: LD_VAR 0 1
67552: PUSH
67553: LD_INT 1
67555: PLUS
67556: PPUSH
67557: LD_VAR 0 2
67561: PPUSH
67562: CALL_OW 1
67566: ST_TO_ADDR
// end ;
67567: LD_VAR 0 3
67571: RET
// export function JoinUnion ( array , element ) ; begin
67572: LD_INT 0
67574: PPUSH
// result := array union element ;
67575: LD_ADDR_VAR 0 3
67579: PUSH
67580: LD_VAR 0 1
67584: PUSH
67585: LD_VAR 0 2
67589: UNION
67590: ST_TO_ADDR
// end ;
67591: LD_VAR 0 3
67595: RET
// export function GetBehemoths ( side ) ; begin
67596: LD_INT 0
67598: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67599: LD_ADDR_VAR 0 2
67603: PUSH
67604: LD_INT 22
67606: PUSH
67607: LD_VAR 0 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 31
67618: PUSH
67619: LD_INT 25
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PPUSH
67630: CALL_OW 69
67634: ST_TO_ADDR
// end ;
67635: LD_VAR 0 2
67639: RET
// export function Shuffle ( array ) ; var i , index ; begin
67640: LD_INT 0
67642: PPUSH
67643: PPUSH
67644: PPUSH
// result := [ ] ;
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: EMPTY
67651: ST_TO_ADDR
// if not array then
67652: LD_VAR 0 1
67656: NOT
67657: IFFALSE 67661
// exit ;
67659: GO 67760
// Randomize ;
67661: CALL_OW 10
// for i = array downto 1 do
67665: LD_ADDR_VAR 0 3
67669: PUSH
67670: DOUBLE
67671: LD_VAR 0 1
67675: INC
67676: ST_TO_ADDR
67677: LD_INT 1
67679: PUSH
67680: FOR_DOWNTO
67681: IFFALSE 67758
// begin index := rand ( 1 , array ) ;
67683: LD_ADDR_VAR 0 4
67687: PUSH
67688: LD_INT 1
67690: PPUSH
67691: LD_VAR 0 1
67695: PPUSH
67696: CALL_OW 12
67700: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67701: LD_ADDR_VAR 0 2
67705: PUSH
67706: LD_VAR 0 2
67710: PPUSH
67711: LD_VAR 0 2
67715: PUSH
67716: LD_INT 1
67718: PLUS
67719: PPUSH
67720: LD_VAR 0 1
67724: PUSH
67725: LD_VAR 0 4
67729: ARRAY
67730: PPUSH
67731: CALL_OW 2
67735: ST_TO_ADDR
// array := Delete ( array , index ) ;
67736: LD_ADDR_VAR 0 1
67740: PUSH
67741: LD_VAR 0 1
67745: PPUSH
67746: LD_VAR 0 4
67750: PPUSH
67751: CALL_OW 3
67755: ST_TO_ADDR
// end ;
67756: GO 67680
67758: POP
67759: POP
// end ;
67760: LD_VAR 0 2
67764: RET
// export function GetBaseMaterials ( base ) ; begin
67765: LD_INT 0
67767: PPUSH
// result := [ 0 , 0 , 0 ] ;
67768: LD_ADDR_VAR 0 2
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: ST_TO_ADDR
// if not base then
67787: LD_VAR 0 1
67791: NOT
67792: IFFALSE 67796
// exit ;
67794: GO 67845
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67796: LD_ADDR_VAR 0 2
67800: PUSH
67801: LD_VAR 0 1
67805: PPUSH
67806: LD_INT 1
67808: PPUSH
67809: CALL_OW 275
67813: PUSH
67814: LD_VAR 0 1
67818: PPUSH
67819: LD_INT 2
67821: PPUSH
67822: CALL_OW 275
67826: PUSH
67827: LD_VAR 0 1
67831: PPUSH
67832: LD_INT 3
67834: PPUSH
67835: CALL_OW 275
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 2
67849: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67850: LD_INT 0
67852: PPUSH
67853: PPUSH
// result := array ;
67854: LD_ADDR_VAR 0 3
67858: PUSH
67859: LD_VAR 0 1
67863: ST_TO_ADDR
// if size >= result then
67864: LD_VAR 0 2
67868: PUSH
67869: LD_VAR 0 3
67873: GREATEREQUAL
67874: IFFALSE 67878
// exit ;
67876: GO 67928
// if size then
67878: LD_VAR 0 2
67882: IFFALSE 67928
// for i := array downto size do
67884: LD_ADDR_VAR 0 4
67888: PUSH
67889: DOUBLE
67890: LD_VAR 0 1
67894: INC
67895: ST_TO_ADDR
67896: LD_VAR 0 2
67900: PUSH
67901: FOR_DOWNTO
67902: IFFALSE 67926
// result := Delete ( result , result ) ;
67904: LD_ADDR_VAR 0 3
67908: PUSH
67909: LD_VAR 0 3
67913: PPUSH
67914: LD_VAR 0 3
67918: PPUSH
67919: CALL_OW 3
67923: ST_TO_ADDR
67924: GO 67901
67926: POP
67927: POP
// end ;
67928: LD_VAR 0 3
67932: RET
// export function ComExit ( unit ) ; var tmp ; begin
67933: LD_INT 0
67935: PPUSH
67936: PPUSH
// if not IsInUnit ( unit ) then
67937: LD_VAR 0 1
67941: PPUSH
67942: CALL_OW 310
67946: NOT
67947: IFFALSE 67951
// exit ;
67949: GO 68011
// tmp := IsInUnit ( unit ) ;
67951: LD_ADDR_VAR 0 3
67955: PUSH
67956: LD_VAR 0 1
67960: PPUSH
67961: CALL_OW 310
67965: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67966: LD_VAR 0 3
67970: PPUSH
67971: CALL_OW 247
67975: PUSH
67976: LD_INT 2
67978: EQUAL
67979: IFFALSE 67992
// ComExitVehicle ( unit ) else
67981: LD_VAR 0 1
67985: PPUSH
67986: CALL_OW 121
67990: GO 68001
// ComExitBuilding ( unit ) ;
67992: LD_VAR 0 1
67996: PPUSH
67997: CALL_OW 122
// result := tmp ;
68001: LD_ADDR_VAR 0 2
68005: PUSH
68006: LD_VAR 0 3
68010: ST_TO_ADDR
// end ;
68011: LD_VAR 0 2
68015: RET
// export function ComExitAll ( units ) ; var i ; begin
68016: LD_INT 0
68018: PPUSH
68019: PPUSH
// if not units then
68020: LD_VAR 0 1
68024: NOT
68025: IFFALSE 68029
// exit ;
68027: GO 68055
// for i in units do
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_VAR 0 1
68038: PUSH
68039: FOR_IN
68040: IFFALSE 68053
// ComExit ( i ) ;
68042: LD_VAR 0 3
68046: PPUSH
68047: CALL 67933 0 1
68051: GO 68039
68053: POP
68054: POP
// end ;
68055: LD_VAR 0 2
68059: RET
// export function ResetHc ; begin
68060: LD_INT 0
68062: PPUSH
// InitHc ;
68063: CALL_OW 19
// hc_importance := 0 ;
68067: LD_ADDR_OWVAR 32
68071: PUSH
68072: LD_INT 0
68074: ST_TO_ADDR
// end ;
68075: LD_VAR 0 1
68079: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68080: LD_INT 0
68082: PPUSH
68083: PPUSH
68084: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68085: LD_ADDR_VAR 0 6
68089: PUSH
68090: LD_VAR 0 1
68094: PUSH
68095: LD_VAR 0 3
68099: PLUS
68100: PUSH
68101: LD_INT 2
68103: DIV
68104: ST_TO_ADDR
// if _x < 0 then
68105: LD_VAR 0 6
68109: PUSH
68110: LD_INT 0
68112: LESS
68113: IFFALSE 68130
// _x := _x * - 1 ;
68115: LD_ADDR_VAR 0 6
68119: PUSH
68120: LD_VAR 0 6
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: MUL
68129: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68130: LD_ADDR_VAR 0 7
68134: PUSH
68135: LD_VAR 0 2
68139: PUSH
68140: LD_VAR 0 4
68144: PLUS
68145: PUSH
68146: LD_INT 2
68148: DIV
68149: ST_TO_ADDR
// if _y < 0 then
68150: LD_VAR 0 7
68154: PUSH
68155: LD_INT 0
68157: LESS
68158: IFFALSE 68175
// _y := _y * - 1 ;
68160: LD_ADDR_VAR 0 7
68164: PUSH
68165: LD_VAR 0 7
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: MUL
68174: ST_TO_ADDR
// result := [ _x , _y ] ;
68175: LD_ADDR_VAR 0 5
68179: PUSH
68180: LD_VAR 0 6
68184: PUSH
68185: LD_VAR 0 7
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: ST_TO_ADDR
// end ;
68194: LD_VAR 0 5
68198: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68199: LD_INT 0
68201: PPUSH
68202: PPUSH
68203: PPUSH
68204: PPUSH
// task := GetTaskList ( unit ) ;
68205: LD_ADDR_VAR 0 7
68209: PUSH
68210: LD_VAR 0 1
68214: PPUSH
68215: CALL_OW 437
68219: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68220: LD_VAR 0 7
68224: NOT
68225: PUSH
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_VAR 0 2
68235: PPUSH
68236: CALL_OW 308
68240: NOT
68241: AND
68242: IFFALSE 68246
// exit ;
68244: GO 68364
// if IsInArea ( unit , area ) then
68246: LD_VAR 0 1
68250: PPUSH
68251: LD_VAR 0 2
68255: PPUSH
68256: CALL_OW 308
68260: IFFALSE 68278
// begin ComMoveToArea ( unit , goAway ) ;
68262: LD_VAR 0 1
68266: PPUSH
68267: LD_VAR 0 3
68271: PPUSH
68272: CALL_OW 113
// exit ;
68276: GO 68364
// end ; if task [ 1 ] [ 1 ] <> M then
68278: LD_VAR 0 7
68282: PUSH
68283: LD_INT 1
68285: ARRAY
68286: PUSH
68287: LD_INT 1
68289: ARRAY
68290: PUSH
68291: LD_STRING M
68293: NONEQUAL
68294: IFFALSE 68298
// exit ;
68296: GO 68364
// x := task [ 1 ] [ 2 ] ;
68298: LD_ADDR_VAR 0 5
68302: PUSH
68303: LD_VAR 0 7
68307: PUSH
68308: LD_INT 1
68310: ARRAY
68311: PUSH
68312: LD_INT 2
68314: ARRAY
68315: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68316: LD_ADDR_VAR 0 6
68320: PUSH
68321: LD_VAR 0 7
68325: PUSH
68326: LD_INT 1
68328: ARRAY
68329: PUSH
68330: LD_INT 3
68332: ARRAY
68333: ST_TO_ADDR
// if InArea ( x , y , area ) then
68334: LD_VAR 0 5
68338: PPUSH
68339: LD_VAR 0 6
68343: PPUSH
68344: LD_VAR 0 2
68348: PPUSH
68349: CALL_OW 309
68353: IFFALSE 68364
// ComStop ( unit ) ;
68355: LD_VAR 0 1
68359: PPUSH
68360: CALL_OW 141
// end ;
68364: LD_VAR 0 4
68368: RET
// export function Abs ( value ) ; begin
68369: LD_INT 0
68371: PPUSH
// result := value ;
68372: LD_ADDR_VAR 0 2
68376: PUSH
68377: LD_VAR 0 1
68381: ST_TO_ADDR
// if value < 0 then
68382: LD_VAR 0 1
68386: PUSH
68387: LD_INT 0
68389: LESS
68390: IFFALSE 68407
// result := value * - 1 ;
68392: LD_ADDR_VAR 0 2
68396: PUSH
68397: LD_VAR 0 1
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: MUL
68406: ST_TO_ADDR
// end ;
68407: LD_VAR 0 2
68411: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68412: LD_INT 0
68414: PPUSH
68415: PPUSH
68416: PPUSH
68417: PPUSH
68418: PPUSH
68419: PPUSH
68420: PPUSH
68421: PPUSH
// if not unit or not building then
68422: LD_VAR 0 1
68426: NOT
68427: PUSH
68428: LD_VAR 0 2
68432: NOT
68433: OR
68434: IFFALSE 68438
// exit ;
68436: GO 68664
// x := GetX ( building ) ;
68438: LD_ADDR_VAR 0 4
68442: PUSH
68443: LD_VAR 0 2
68447: PPUSH
68448: CALL_OW 250
68452: ST_TO_ADDR
// y := GetY ( building ) ;
68453: LD_ADDR_VAR 0 6
68457: PUSH
68458: LD_VAR 0 2
68462: PPUSH
68463: CALL_OW 251
68467: ST_TO_ADDR
// d := GetDir ( building ) ;
68468: LD_ADDR_VAR 0 8
68472: PUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: CALL_OW 254
68482: ST_TO_ADDR
// r := 4 ;
68483: LD_ADDR_VAR 0 9
68487: PUSH
68488: LD_INT 4
68490: ST_TO_ADDR
// for i := 1 to 5 do
68491: LD_ADDR_VAR 0 10
68495: PUSH
68496: DOUBLE
68497: LD_INT 1
68499: DEC
68500: ST_TO_ADDR
68501: LD_INT 5
68503: PUSH
68504: FOR_TO
68505: IFFALSE 68662
// begin _x := ShiftX ( x , d , r + i ) ;
68507: LD_ADDR_VAR 0 5
68511: PUSH
68512: LD_VAR 0 4
68516: PPUSH
68517: LD_VAR 0 8
68521: PPUSH
68522: LD_VAR 0 9
68526: PUSH
68527: LD_VAR 0 10
68531: PLUS
68532: PPUSH
68533: CALL_OW 272
68537: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68538: LD_ADDR_VAR 0 7
68542: PUSH
68543: LD_VAR 0 6
68547: PPUSH
68548: LD_VAR 0 8
68552: PPUSH
68553: LD_VAR 0 9
68557: PUSH
68558: LD_VAR 0 10
68562: PLUS
68563: PPUSH
68564: CALL_OW 273
68568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68569: LD_VAR 0 5
68573: PPUSH
68574: LD_VAR 0 7
68578: PPUSH
68579: CALL_OW 488
68583: PUSH
68584: LD_VAR 0 5
68588: PPUSH
68589: LD_VAR 0 7
68593: PPUSH
68594: CALL_OW 428
68598: PPUSH
68599: CALL_OW 247
68603: PUSH
68604: LD_INT 3
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: IN
68614: NOT
68615: AND
68616: IFFALSE 68660
// begin ComMoveXY ( unit , _x , _y ) ;
68618: LD_VAR 0 1
68622: PPUSH
68623: LD_VAR 0 5
68627: PPUSH
68628: LD_VAR 0 7
68632: PPUSH
68633: CALL_OW 111
// result := [ _x , _y ] ;
68637: LD_ADDR_VAR 0 3
68641: PUSH
68642: LD_VAR 0 5
68646: PUSH
68647: LD_VAR 0 7
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: ST_TO_ADDR
// exit ;
68656: POP
68657: POP
68658: GO 68664
// end ; end ;
68660: GO 68504
68662: POP
68663: POP
// end ;
68664: LD_VAR 0 3
68668: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68669: LD_INT 0
68671: PPUSH
68672: PPUSH
68673: PPUSH
// result := 0 ;
68674: LD_ADDR_VAR 0 3
68678: PUSH
68679: LD_INT 0
68681: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68682: LD_VAR 0 1
68686: PUSH
68687: LD_INT 0
68689: LESS
68690: PUSH
68691: LD_VAR 0 1
68695: PUSH
68696: LD_INT 8
68698: GREATER
68699: OR
68700: PUSH
68701: LD_VAR 0 2
68705: PUSH
68706: LD_INT 0
68708: LESS
68709: OR
68710: PUSH
68711: LD_VAR 0 2
68715: PUSH
68716: LD_INT 8
68718: GREATER
68719: OR
68720: IFFALSE 68724
// exit ;
68722: GO 68799
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68724: LD_ADDR_VAR 0 4
68728: PUSH
68729: LD_INT 22
68731: PUSH
68732: LD_VAR 0 2
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PPUSH
68741: CALL_OW 69
68745: PUSH
68746: FOR_IN
68747: IFFALSE 68797
// begin un := UnitShoot ( i ) ;
68749: LD_ADDR_VAR 0 5
68753: PUSH
68754: LD_VAR 0 4
68758: PPUSH
68759: CALL_OW 504
68763: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68764: LD_VAR 0 5
68768: PPUSH
68769: CALL_OW 255
68773: PUSH
68774: LD_VAR 0 1
68778: EQUAL
68779: IFFALSE 68795
// begin result := un ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: LD_VAR 0 5
68790: ST_TO_ADDR
// exit ;
68791: POP
68792: POP
68793: GO 68799
// end ; end ;
68795: GO 68746
68797: POP
68798: POP
// end ;
68799: LD_VAR 0 3
68803: RET
// export function GetCargoBay ( units ) ; begin
68804: LD_INT 0
68806: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68807: LD_ADDR_VAR 0 2
68811: PUSH
68812: LD_VAR 0 1
68816: PPUSH
68817: LD_INT 2
68819: PUSH
68820: LD_INT 34
68822: PUSH
68823: LD_INT 12
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 34
68832: PUSH
68833: LD_INT 51
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 34
68842: PUSH
68843: LD_INT 32
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 34
68852: PUSH
68853: LD_INT 89
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: PPUSH
68867: CALL_OW 72
68871: ST_TO_ADDR
// end ;
68872: LD_VAR 0 2
68876: RET
// export function Negate ( value ) ; begin
68877: LD_INT 0
68879: PPUSH
// result := not value ;
68880: LD_ADDR_VAR 0 2
68884: PUSH
68885: LD_VAR 0 1
68889: NOT
68890: ST_TO_ADDR
// end ;
68891: LD_VAR 0 2
68895: RET
// export function Inc ( value ) ; begin
68896: LD_INT 0
68898: PPUSH
// result := value + 1 ;
68899: LD_ADDR_VAR 0 2
68903: PUSH
68904: LD_VAR 0 1
68908: PUSH
68909: LD_INT 1
68911: PLUS
68912: ST_TO_ADDR
// end ;
68913: LD_VAR 0 2
68917: RET
// export function Dec ( value ) ; begin
68918: LD_INT 0
68920: PPUSH
// result := value - 1 ;
68921: LD_ADDR_VAR 0 2
68925: PUSH
68926: LD_VAR 0 1
68930: PUSH
68931: LD_INT 1
68933: MINUS
68934: ST_TO_ADDR
// end ;
68935: LD_VAR 0 2
68939: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68940: LD_INT 0
68942: PPUSH
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
68948: PPUSH
68949: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68950: LD_VAR 0 1
68954: PPUSH
68955: LD_VAR 0 2
68959: PPUSH
68960: CALL_OW 488
68964: NOT
68965: PUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: LD_VAR 0 4
68975: PPUSH
68976: CALL_OW 488
68980: NOT
68981: OR
68982: IFFALSE 68995
// begin result := - 1 ;
68984: LD_ADDR_VAR 0 5
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: ST_TO_ADDR
// exit ;
68993: GO 69230
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68995: LD_ADDR_VAR 0 12
68999: PUSH
69000: LD_VAR 0 1
69004: PPUSH
69005: LD_VAR 0 2
69009: PPUSH
69010: LD_VAR 0 3
69014: PPUSH
69015: LD_VAR 0 4
69019: PPUSH
69020: CALL 68080 0 4
69024: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69025: LD_ADDR_VAR 0 11
69029: PUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: LD_VAR 0 2
69039: PPUSH
69040: LD_VAR 0 12
69044: PUSH
69045: LD_INT 1
69047: ARRAY
69048: PPUSH
69049: LD_VAR 0 12
69053: PUSH
69054: LD_INT 2
69056: ARRAY
69057: PPUSH
69058: CALL_OW 298
69062: ST_TO_ADDR
// distance := 9999 ;
69063: LD_ADDR_VAR 0 10
69067: PUSH
69068: LD_INT 9999
69070: ST_TO_ADDR
// for i := 0 to 5 do
69071: LD_ADDR_VAR 0 6
69075: PUSH
69076: DOUBLE
69077: LD_INT 0
69079: DEC
69080: ST_TO_ADDR
69081: LD_INT 5
69083: PUSH
69084: FOR_TO
69085: IFFALSE 69228
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69087: LD_ADDR_VAR 0 7
69091: PUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: LD_VAR 0 6
69101: PPUSH
69102: LD_VAR 0 11
69106: PPUSH
69107: CALL_OW 272
69111: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69112: LD_ADDR_VAR 0 8
69116: PUSH
69117: LD_VAR 0 2
69121: PPUSH
69122: LD_VAR 0 6
69126: PPUSH
69127: LD_VAR 0 11
69131: PPUSH
69132: CALL_OW 273
69136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69137: LD_VAR 0 7
69141: PPUSH
69142: LD_VAR 0 8
69146: PPUSH
69147: CALL_OW 488
69151: NOT
69152: IFFALSE 69156
// continue ;
69154: GO 69084
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69156: LD_ADDR_VAR 0 9
69160: PUSH
69161: LD_VAR 0 12
69165: PUSH
69166: LD_INT 1
69168: ARRAY
69169: PPUSH
69170: LD_VAR 0 12
69174: PUSH
69175: LD_INT 2
69177: ARRAY
69178: PPUSH
69179: LD_VAR 0 7
69183: PPUSH
69184: LD_VAR 0 8
69188: PPUSH
69189: CALL_OW 298
69193: ST_TO_ADDR
// if tmp < distance then
69194: LD_VAR 0 9
69198: PUSH
69199: LD_VAR 0 10
69203: LESS
69204: IFFALSE 69226
// begin result := i ;
69206: LD_ADDR_VAR 0 5
69210: PUSH
69211: LD_VAR 0 6
69215: ST_TO_ADDR
// distance := tmp ;
69216: LD_ADDR_VAR 0 10
69220: PUSH
69221: LD_VAR 0 9
69225: ST_TO_ADDR
// end ; end ;
69226: GO 69084
69228: POP
69229: POP
// end ;
69230: LD_VAR 0 5
69234: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69235: LD_INT 0
69237: PPUSH
69238: PPUSH
// if not driver or not IsInUnit ( driver ) then
69239: LD_VAR 0 1
69243: NOT
69244: PUSH
69245: LD_VAR 0 1
69249: PPUSH
69250: CALL_OW 310
69254: NOT
69255: OR
69256: IFFALSE 69260
// exit ;
69258: GO 69350
// vehicle := IsInUnit ( driver ) ;
69260: LD_ADDR_VAR 0 3
69264: PUSH
69265: LD_VAR 0 1
69269: PPUSH
69270: CALL_OW 310
69274: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69275: LD_VAR 0 1
69279: PPUSH
69280: LD_STRING \
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: PUSH
69310: LD_STRING E
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_VAR 0 3
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PPUSH
69346: CALL_OW 446
// end ;
69350: LD_VAR 0 2
69354: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69355: LD_INT 0
69357: PPUSH
69358: PPUSH
// if not driver or not IsInUnit ( driver ) then
69359: LD_VAR 0 1
69363: NOT
69364: PUSH
69365: LD_VAR 0 1
69369: PPUSH
69370: CALL_OW 310
69374: NOT
69375: OR
69376: IFFALSE 69380
// exit ;
69378: GO 69470
// vehicle := IsInUnit ( driver ) ;
69380: LD_ADDR_VAR 0 3
69384: PUSH
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL_OW 310
69394: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69395: LD_VAR 0 1
69399: PPUSH
69400: LD_STRING \
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: PUSH
69430: LD_STRING E
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: LD_VAR 0 3
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PPUSH
69466: CALL_OW 447
// end ;
69470: LD_VAR 0 2
69474: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69475: LD_INT 0
69477: PPUSH
69478: PPUSH
69479: PPUSH
// tmp := [ ] ;
69480: LD_ADDR_VAR 0 5
69484: PUSH
69485: EMPTY
69486: ST_TO_ADDR
// for i in units do
69487: LD_ADDR_VAR 0 4
69491: PUSH
69492: LD_VAR 0 1
69496: PUSH
69497: FOR_IN
69498: IFFALSE 69536
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69500: LD_ADDR_VAR 0 5
69504: PUSH
69505: LD_VAR 0 5
69509: PPUSH
69510: LD_VAR 0 5
69514: PUSH
69515: LD_INT 1
69517: PLUS
69518: PPUSH
69519: LD_VAR 0 4
69523: PPUSH
69524: CALL_OW 256
69528: PPUSH
69529: CALL_OW 2
69533: ST_TO_ADDR
69534: GO 69497
69536: POP
69537: POP
// if not tmp then
69538: LD_VAR 0 5
69542: NOT
69543: IFFALSE 69547
// exit ;
69545: GO 69595
// if asc then
69547: LD_VAR 0 2
69551: IFFALSE 69575
// result := SortListByListAsc ( units , tmp ) else
69553: LD_ADDR_VAR 0 3
69557: PUSH
69558: LD_VAR 0 1
69562: PPUSH
69563: LD_VAR 0 5
69567: PPUSH
69568: CALL_OW 76
69572: ST_TO_ADDR
69573: GO 69595
// result := SortListByListDesc ( units , tmp ) ;
69575: LD_ADDR_VAR 0 3
69579: PUSH
69580: LD_VAR 0 1
69584: PPUSH
69585: LD_VAR 0 5
69589: PPUSH
69590: CALL_OW 77
69594: ST_TO_ADDR
// end ;
69595: LD_VAR 0 3
69599: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69600: LD_INT 0
69602: PPUSH
69603: PPUSH
// task := GetTaskList ( mech ) ;
69604: LD_ADDR_VAR 0 4
69608: PUSH
69609: LD_VAR 0 1
69613: PPUSH
69614: CALL_OW 437
69618: ST_TO_ADDR
// if not task then
69619: LD_VAR 0 4
69623: NOT
69624: IFFALSE 69628
// exit ;
69626: GO 69670
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69628: LD_ADDR_VAR 0 3
69632: PUSH
69633: LD_VAR 0 4
69637: PUSH
69638: LD_INT 1
69640: ARRAY
69641: PUSH
69642: LD_INT 1
69644: ARRAY
69645: PUSH
69646: LD_STRING r
69648: EQUAL
69649: PUSH
69650: LD_VAR 0 4
69654: PUSH
69655: LD_INT 1
69657: ARRAY
69658: PUSH
69659: LD_INT 4
69661: ARRAY
69662: PUSH
69663: LD_VAR 0 2
69667: EQUAL
69668: AND
69669: ST_TO_ADDR
// end ;
69670: LD_VAR 0 3
69674: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69675: LD_INT 0
69677: PPUSH
// SetDir ( unit , d ) ;
69678: LD_VAR 0 1
69682: PPUSH
69683: LD_VAR 0 4
69687: PPUSH
69688: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69692: LD_VAR 0 1
69696: PPUSH
69697: LD_VAR 0 2
69701: PPUSH
69702: LD_VAR 0 3
69706: PPUSH
69707: LD_VAR 0 5
69711: PPUSH
69712: CALL_OW 48
// end ;
69716: LD_VAR 0 6
69720: RET
// export function ToNaturalNumber ( number ) ; begin
69721: LD_INT 0
69723: PPUSH
// result := number div 1 ;
69724: LD_ADDR_VAR 0 2
69728: PUSH
69729: LD_VAR 0 1
69733: PUSH
69734: LD_INT 1
69736: DIV
69737: ST_TO_ADDR
// if number < 0 then
69738: LD_VAR 0 1
69742: PUSH
69743: LD_INT 0
69745: LESS
69746: IFFALSE 69756
// result := 0 ;
69748: LD_ADDR_VAR 0 2
69752: PUSH
69753: LD_INT 0
69755: ST_TO_ADDR
// end ;
69756: LD_VAR 0 2
69760: RET
// export function SortByClass ( units , class ) ; var un ; begin
69761: LD_INT 0
69763: PPUSH
69764: PPUSH
// if not units or not class then
69765: LD_VAR 0 1
69769: NOT
69770: PUSH
69771: LD_VAR 0 2
69775: NOT
69776: OR
69777: IFFALSE 69781
// exit ;
69779: GO 69876
// result := [ ] ;
69781: LD_ADDR_VAR 0 3
69785: PUSH
69786: EMPTY
69787: ST_TO_ADDR
// for un in units do
69788: LD_ADDR_VAR 0 4
69792: PUSH
69793: LD_VAR 0 1
69797: PUSH
69798: FOR_IN
69799: IFFALSE 69874
// if GetClass ( un ) = class then
69801: LD_VAR 0 4
69805: PPUSH
69806: CALL_OW 257
69810: PUSH
69811: LD_VAR 0 2
69815: EQUAL
69816: IFFALSE 69843
// result := Insert ( result , 1 , un ) else
69818: LD_ADDR_VAR 0 3
69822: PUSH
69823: LD_VAR 0 3
69827: PPUSH
69828: LD_INT 1
69830: PPUSH
69831: LD_VAR 0 4
69835: PPUSH
69836: CALL_OW 2
69840: ST_TO_ADDR
69841: GO 69872
// result := Replace ( result , result + 1 , un ) ;
69843: LD_ADDR_VAR 0 3
69847: PUSH
69848: LD_VAR 0 3
69852: PPUSH
69853: LD_VAR 0 3
69857: PUSH
69858: LD_INT 1
69860: PLUS
69861: PPUSH
69862: LD_VAR 0 4
69866: PPUSH
69867: CALL_OW 1
69871: ST_TO_ADDR
69872: GO 69798
69874: POP
69875: POP
// end ;
69876: LD_VAR 0 3
69880: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69881: LD_INT 0
69883: PPUSH
69884: PPUSH
69885: PPUSH
69886: PPUSH
69887: PPUSH
69888: PPUSH
69889: PPUSH
// result := [ ] ;
69890: LD_ADDR_VAR 0 4
69894: PUSH
69895: EMPTY
69896: ST_TO_ADDR
// if x - r < 0 then
69897: LD_VAR 0 1
69901: PUSH
69902: LD_VAR 0 3
69906: MINUS
69907: PUSH
69908: LD_INT 0
69910: LESS
69911: IFFALSE 69923
// min_x := 0 else
69913: LD_ADDR_VAR 0 8
69917: PUSH
69918: LD_INT 0
69920: ST_TO_ADDR
69921: GO 69939
// min_x := x - r ;
69923: LD_ADDR_VAR 0 8
69927: PUSH
69928: LD_VAR 0 1
69932: PUSH
69933: LD_VAR 0 3
69937: MINUS
69938: ST_TO_ADDR
// if y - r < 0 then
69939: LD_VAR 0 2
69943: PUSH
69944: LD_VAR 0 3
69948: MINUS
69949: PUSH
69950: LD_INT 0
69952: LESS
69953: IFFALSE 69965
// min_y := 0 else
69955: LD_ADDR_VAR 0 7
69959: PUSH
69960: LD_INT 0
69962: ST_TO_ADDR
69963: GO 69981
// min_y := y - r ;
69965: LD_ADDR_VAR 0 7
69969: PUSH
69970: LD_VAR 0 2
69974: PUSH
69975: LD_VAR 0 3
69979: MINUS
69980: ST_TO_ADDR
// max_x := x + r ;
69981: LD_ADDR_VAR 0 9
69985: PUSH
69986: LD_VAR 0 1
69990: PUSH
69991: LD_VAR 0 3
69995: PLUS
69996: ST_TO_ADDR
// max_y := y + r ;
69997: LD_ADDR_VAR 0 10
70001: PUSH
70002: LD_VAR 0 2
70006: PUSH
70007: LD_VAR 0 3
70011: PLUS
70012: ST_TO_ADDR
// for _x = min_x to max_x do
70013: LD_ADDR_VAR 0 5
70017: PUSH
70018: DOUBLE
70019: LD_VAR 0 8
70023: DEC
70024: ST_TO_ADDR
70025: LD_VAR 0 9
70029: PUSH
70030: FOR_TO
70031: IFFALSE 70132
// for _y = min_y to max_y do
70033: LD_ADDR_VAR 0 6
70037: PUSH
70038: DOUBLE
70039: LD_VAR 0 7
70043: DEC
70044: ST_TO_ADDR
70045: LD_VAR 0 10
70049: PUSH
70050: FOR_TO
70051: IFFALSE 70128
// begin if not ValidHex ( _x , _y ) then
70053: LD_VAR 0 5
70057: PPUSH
70058: LD_VAR 0 6
70062: PPUSH
70063: CALL_OW 488
70067: NOT
70068: IFFALSE 70072
// continue ;
70070: GO 70050
// if GetResourceTypeXY ( _x , _y ) then
70072: LD_VAR 0 5
70076: PPUSH
70077: LD_VAR 0 6
70081: PPUSH
70082: CALL_OW 283
70086: IFFALSE 70126
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: LD_VAR 0 4
70097: PPUSH
70098: LD_VAR 0 4
70102: PUSH
70103: LD_INT 1
70105: PLUS
70106: PPUSH
70107: LD_VAR 0 5
70111: PUSH
70112: LD_VAR 0 6
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PPUSH
70121: CALL_OW 1
70125: ST_TO_ADDR
// end ;
70126: GO 70050
70128: POP
70129: POP
70130: GO 70030
70132: POP
70133: POP
// end ;
70134: LD_VAR 0 4
70138: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70139: LD_INT 0
70141: PPUSH
70142: PPUSH
70143: PPUSH
70144: PPUSH
70145: PPUSH
70146: PPUSH
70147: PPUSH
70148: PPUSH
// if not units then
70149: LD_VAR 0 1
70153: NOT
70154: IFFALSE 70158
// exit ;
70156: GO 70682
// result := UnitFilter ( units , [ f_ok ] ) ;
70158: LD_ADDR_VAR 0 3
70162: PUSH
70163: LD_VAR 0 1
70167: PPUSH
70168: LD_INT 50
70170: PUSH
70171: EMPTY
70172: LIST
70173: PPUSH
70174: CALL_OW 72
70178: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70179: LD_ADDR_VAR 0 8
70183: PUSH
70184: LD_VAR 0 1
70188: PUSH
70189: LD_INT 1
70191: ARRAY
70192: PPUSH
70193: CALL_OW 255
70197: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70198: LD_ADDR_VAR 0 10
70202: PUSH
70203: LD_INT 29
70205: PUSH
70206: LD_INT 91
70208: PUSH
70209: LD_INT 49
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: LIST
70216: ST_TO_ADDR
// if not result then
70217: LD_VAR 0 3
70221: NOT
70222: IFFALSE 70226
// exit ;
70224: GO 70682
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70226: LD_ADDR_VAR 0 5
70230: PUSH
70231: LD_INT 81
70233: PUSH
70234: LD_VAR 0 8
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PPUSH
70243: CALL_OW 69
70247: ST_TO_ADDR
// for i in result do
70248: LD_ADDR_VAR 0 4
70252: PUSH
70253: LD_VAR 0 3
70257: PUSH
70258: FOR_IN
70259: IFFALSE 70680
// begin tag := GetTag ( i ) + 1 ;
70261: LD_ADDR_VAR 0 9
70265: PUSH
70266: LD_VAR 0 4
70270: PPUSH
70271: CALL_OW 110
70275: PUSH
70276: LD_INT 1
70278: PLUS
70279: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70280: LD_ADDR_VAR 0 7
70284: PUSH
70285: LD_VAR 0 4
70289: PPUSH
70290: CALL_OW 250
70294: PPUSH
70295: LD_VAR 0 4
70299: PPUSH
70300: CALL_OW 251
70304: PPUSH
70305: LD_INT 6
70307: PPUSH
70308: CALL 69881 0 3
70312: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70313: LD_VAR 0 4
70317: PPUSH
70318: CALL_OW 247
70322: PUSH
70323: LD_INT 2
70325: EQUAL
70326: PUSH
70327: LD_VAR 0 7
70331: AND
70332: PUSH
70333: LD_VAR 0 4
70337: PPUSH
70338: CALL_OW 264
70342: PUSH
70343: LD_VAR 0 10
70347: IN
70348: NOT
70349: AND
70350: IFFALSE 70389
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70352: LD_VAR 0 4
70356: PPUSH
70357: LD_VAR 0 7
70361: PUSH
70362: LD_INT 1
70364: ARRAY
70365: PUSH
70366: LD_INT 1
70368: ARRAY
70369: PPUSH
70370: LD_VAR 0 7
70374: PUSH
70375: LD_INT 1
70377: ARRAY
70378: PUSH
70379: LD_INT 2
70381: ARRAY
70382: PPUSH
70383: CALL_OW 116
70387: GO 70678
// if path > tag then
70389: LD_VAR 0 2
70393: PUSH
70394: LD_VAR 0 9
70398: GREATER
70399: IFFALSE 70607
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70401: LD_ADDR_VAR 0 6
70405: PUSH
70406: LD_VAR 0 5
70410: PPUSH
70411: LD_INT 91
70413: PUSH
70414: LD_VAR 0 4
70418: PUSH
70419: LD_INT 8
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: PPUSH
70427: CALL_OW 72
70431: ST_TO_ADDR
// if nearEnemy then
70432: LD_VAR 0 6
70436: IFFALSE 70505
// begin if GetWeapon ( i ) = ru_time_lapser then
70438: LD_VAR 0 4
70442: PPUSH
70443: CALL_OW 264
70447: PUSH
70448: LD_INT 49
70450: EQUAL
70451: IFFALSE 70479
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70453: LD_VAR 0 4
70457: PPUSH
70458: LD_VAR 0 6
70462: PPUSH
70463: LD_VAR 0 4
70467: PPUSH
70468: CALL_OW 74
70472: PPUSH
70473: CALL_OW 112
70477: GO 70503
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70479: LD_VAR 0 4
70483: PPUSH
70484: LD_VAR 0 6
70488: PPUSH
70489: LD_VAR 0 4
70493: PPUSH
70494: CALL_OW 74
70498: PPUSH
70499: CALL_OW 115
// end else
70503: GO 70605
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70505: LD_VAR 0 4
70509: PPUSH
70510: LD_VAR 0 2
70514: PUSH
70515: LD_VAR 0 9
70519: ARRAY
70520: PUSH
70521: LD_INT 1
70523: ARRAY
70524: PPUSH
70525: LD_VAR 0 2
70529: PUSH
70530: LD_VAR 0 9
70534: ARRAY
70535: PUSH
70536: LD_INT 2
70538: ARRAY
70539: PPUSH
70540: CALL_OW 297
70544: PUSH
70545: LD_INT 6
70547: GREATER
70548: IFFALSE 70591
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70550: LD_VAR 0 4
70554: PPUSH
70555: LD_VAR 0 2
70559: PUSH
70560: LD_VAR 0 9
70564: ARRAY
70565: PUSH
70566: LD_INT 1
70568: ARRAY
70569: PPUSH
70570: LD_VAR 0 2
70574: PUSH
70575: LD_VAR 0 9
70579: ARRAY
70580: PUSH
70581: LD_INT 2
70583: ARRAY
70584: PPUSH
70585: CALL_OW 114
70589: GO 70605
// SetTag ( i , tag ) ;
70591: LD_VAR 0 4
70595: PPUSH
70596: LD_VAR 0 9
70600: PPUSH
70601: CALL_OW 109
// end else
70605: GO 70678
// if enemy then
70607: LD_VAR 0 5
70611: IFFALSE 70678
// begin if GetWeapon ( i ) = ru_time_lapser then
70613: LD_VAR 0 4
70617: PPUSH
70618: CALL_OW 264
70622: PUSH
70623: LD_INT 49
70625: EQUAL
70626: IFFALSE 70654
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70628: LD_VAR 0 4
70632: PPUSH
70633: LD_VAR 0 5
70637: PPUSH
70638: LD_VAR 0 4
70642: PPUSH
70643: CALL_OW 74
70647: PPUSH
70648: CALL_OW 112
70652: GO 70678
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70654: LD_VAR 0 4
70658: PPUSH
70659: LD_VAR 0 5
70663: PPUSH
70664: LD_VAR 0 4
70668: PPUSH
70669: CALL_OW 74
70673: PPUSH
70674: CALL_OW 115
// end ; end ;
70678: GO 70258
70680: POP
70681: POP
// end ;
70682: LD_VAR 0 3
70686: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70687: LD_INT 0
70689: PPUSH
70690: PPUSH
70691: PPUSH
// if not unit or IsInUnit ( unit ) then
70692: LD_VAR 0 1
70696: NOT
70697: PUSH
70698: LD_VAR 0 1
70702: PPUSH
70703: CALL_OW 310
70707: OR
70708: IFFALSE 70712
// exit ;
70710: GO 70803
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70712: LD_ADDR_VAR 0 4
70716: PUSH
70717: LD_VAR 0 1
70721: PPUSH
70722: CALL_OW 250
70726: PPUSH
70727: LD_VAR 0 2
70731: PPUSH
70732: LD_INT 1
70734: PPUSH
70735: CALL_OW 272
70739: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70740: LD_ADDR_VAR 0 5
70744: PUSH
70745: LD_VAR 0 1
70749: PPUSH
70750: CALL_OW 251
70754: PPUSH
70755: LD_VAR 0 2
70759: PPUSH
70760: LD_INT 1
70762: PPUSH
70763: CALL_OW 273
70767: ST_TO_ADDR
// if ValidHex ( x , y ) then
70768: LD_VAR 0 4
70772: PPUSH
70773: LD_VAR 0 5
70777: PPUSH
70778: CALL_OW 488
70782: IFFALSE 70803
// ComTurnXY ( unit , x , y ) ;
70784: LD_VAR 0 1
70788: PPUSH
70789: LD_VAR 0 4
70793: PPUSH
70794: LD_VAR 0 5
70798: PPUSH
70799: CALL_OW 118
// end ;
70803: LD_VAR 0 3
70807: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70808: LD_INT 0
70810: PPUSH
70811: PPUSH
// result := false ;
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: LD_INT 0
70819: ST_TO_ADDR
// if not units then
70820: LD_VAR 0 2
70824: NOT
70825: IFFALSE 70829
// exit ;
70827: GO 70874
// for i in units do
70829: LD_ADDR_VAR 0 4
70833: PUSH
70834: LD_VAR 0 2
70838: PUSH
70839: FOR_IN
70840: IFFALSE 70872
// if See ( side , i ) then
70842: LD_VAR 0 1
70846: PPUSH
70847: LD_VAR 0 4
70851: PPUSH
70852: CALL_OW 292
70856: IFFALSE 70870
// begin result := true ;
70858: LD_ADDR_VAR 0 3
70862: PUSH
70863: LD_INT 1
70865: ST_TO_ADDR
// exit ;
70866: POP
70867: POP
70868: GO 70874
// end ;
70870: GO 70839
70872: POP
70873: POP
// end ;
70874: LD_VAR 0 3
70878: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70879: LD_INT 0
70881: PPUSH
70882: PPUSH
70883: PPUSH
70884: PPUSH
// if not unit or not points then
70885: LD_VAR 0 1
70889: NOT
70890: PUSH
70891: LD_VAR 0 2
70895: NOT
70896: OR
70897: IFFALSE 70901
// exit ;
70899: GO 70991
// dist := 99999 ;
70901: LD_ADDR_VAR 0 5
70905: PUSH
70906: LD_INT 99999
70908: ST_TO_ADDR
// for i in points do
70909: LD_ADDR_VAR 0 4
70913: PUSH
70914: LD_VAR 0 2
70918: PUSH
70919: FOR_IN
70920: IFFALSE 70989
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70922: LD_ADDR_VAR 0 6
70926: PUSH
70927: LD_VAR 0 1
70931: PPUSH
70932: LD_VAR 0 4
70936: PUSH
70937: LD_INT 1
70939: ARRAY
70940: PPUSH
70941: LD_VAR 0 4
70945: PUSH
70946: LD_INT 2
70948: ARRAY
70949: PPUSH
70950: CALL_OW 297
70954: ST_TO_ADDR
// if tmpDist < dist then
70955: LD_VAR 0 6
70959: PUSH
70960: LD_VAR 0 5
70964: LESS
70965: IFFALSE 70987
// begin result := i ;
70967: LD_ADDR_VAR 0 3
70971: PUSH
70972: LD_VAR 0 4
70976: ST_TO_ADDR
// dist := tmpDist ;
70977: LD_ADDR_VAR 0 5
70981: PUSH
70982: LD_VAR 0 6
70986: ST_TO_ADDR
// end ; end ;
70987: GO 70919
70989: POP
70990: POP
// end ;
70991: LD_VAR 0 3
70995: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70996: LD_INT 0
70998: PPUSH
// uc_side := side ;
70999: LD_ADDR_OWVAR 20
71003: PUSH
71004: LD_VAR 0 1
71008: ST_TO_ADDR
// uc_nation := 3 ;
71009: LD_ADDR_OWVAR 21
71013: PUSH
71014: LD_INT 3
71016: ST_TO_ADDR
// vc_chassis := 25 ;
71017: LD_ADDR_OWVAR 37
71021: PUSH
71022: LD_INT 25
71024: ST_TO_ADDR
// vc_engine := engine_siberite ;
71025: LD_ADDR_OWVAR 39
71029: PUSH
71030: LD_INT 3
71032: ST_TO_ADDR
// vc_control := control_computer ;
71033: LD_ADDR_OWVAR 38
71037: PUSH
71038: LD_INT 3
71040: ST_TO_ADDR
// vc_weapon := 59 ;
71041: LD_ADDR_OWVAR 40
71045: PUSH
71046: LD_INT 59
71048: ST_TO_ADDR
// result := CreateVehicle ;
71049: LD_ADDR_VAR 0 5
71053: PUSH
71054: CALL_OW 45
71058: ST_TO_ADDR
// SetDir ( result , d ) ;
71059: LD_VAR 0 5
71063: PPUSH
71064: LD_VAR 0 4
71068: PPUSH
71069: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71073: LD_VAR 0 5
71077: PPUSH
71078: LD_VAR 0 2
71082: PPUSH
71083: LD_VAR 0 3
71087: PPUSH
71088: LD_INT 0
71090: PPUSH
71091: CALL_OW 48
// end ;
71095: LD_VAR 0 5
71099: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71100: LD_INT 0
71102: PPUSH
71103: PPUSH
71104: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71105: LD_ADDR_VAR 0 2
71109: PUSH
71110: LD_INT 0
71112: PUSH
71113: LD_INT 0
71115: PUSH
71116: LD_INT 0
71118: PUSH
71119: LD_INT 0
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71128: LD_VAR 0 1
71132: NOT
71133: PUSH
71134: LD_VAR 0 1
71138: PPUSH
71139: CALL_OW 264
71143: PUSH
71144: LD_INT 12
71146: PUSH
71147: LD_INT 51
71149: PUSH
71150: LD_INT 32
71152: PUSH
71153: LD_INT 89
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: IN
71162: NOT
71163: OR
71164: IFFALSE 71168
// exit ;
71166: GO 71266
// for i := 1 to 3 do
71168: LD_ADDR_VAR 0 3
71172: PUSH
71173: DOUBLE
71174: LD_INT 1
71176: DEC
71177: ST_TO_ADDR
71178: LD_INT 3
71180: PUSH
71181: FOR_TO
71182: IFFALSE 71264
// begin tmp := GetCargo ( cargo , i ) ;
71184: LD_ADDR_VAR 0 4
71188: PUSH
71189: LD_VAR 0 1
71193: PPUSH
71194: LD_VAR 0 3
71198: PPUSH
71199: CALL_OW 289
71203: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71204: LD_ADDR_VAR 0 2
71208: PUSH
71209: LD_VAR 0 2
71213: PPUSH
71214: LD_VAR 0 3
71218: PPUSH
71219: LD_VAR 0 4
71223: PPUSH
71224: CALL_OW 1
71228: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71229: LD_ADDR_VAR 0 2
71233: PUSH
71234: LD_VAR 0 2
71238: PPUSH
71239: LD_INT 4
71241: PPUSH
71242: LD_VAR 0 2
71246: PUSH
71247: LD_INT 4
71249: ARRAY
71250: PUSH
71251: LD_VAR 0 4
71255: PLUS
71256: PPUSH
71257: CALL_OW 1
71261: ST_TO_ADDR
// end ;
71262: GO 71181
71264: POP
71265: POP
// end ;
71266: LD_VAR 0 2
71270: RET
// export function Length ( array ) ; begin
71271: LD_INT 0
71273: PPUSH
// result := array + 0 ;
71274: LD_ADDR_VAR 0 2
71278: PUSH
71279: LD_VAR 0 1
71283: PUSH
71284: LD_INT 0
71286: PLUS
71287: ST_TO_ADDR
// end ;
71288: LD_VAR 0 2
71292: RET
// export function PrepareArray ( array ) ; begin
71293: LD_INT 0
71295: PPUSH
// result := array diff 0 ;
71296: LD_ADDR_VAR 0 2
71300: PUSH
71301: LD_VAR 0 1
71305: PUSH
71306: LD_INT 0
71308: DIFF
71309: ST_TO_ADDR
// if not result [ 1 ] then
71310: LD_VAR 0 2
71314: PUSH
71315: LD_INT 1
71317: ARRAY
71318: NOT
71319: IFFALSE 71339
// result := Delete ( result , 1 ) ;
71321: LD_ADDR_VAR 0 2
71325: PUSH
71326: LD_VAR 0 2
71330: PPUSH
71331: LD_INT 1
71333: PPUSH
71334: CALL_OW 3
71338: ST_TO_ADDR
// end ;
71339: LD_VAR 0 2
71343: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71344: LD_INT 0
71346: PPUSH
71347: PPUSH
71348: PPUSH
71349: PPUSH
// sibRocketRange := 25 ;
71350: LD_ADDR_VAR 0 6
71354: PUSH
71355: LD_INT 25
71357: ST_TO_ADDR
// result := false ;
71358: LD_ADDR_VAR 0 4
71362: PUSH
71363: LD_INT 0
71365: ST_TO_ADDR
// for i := 0 to 5 do
71366: LD_ADDR_VAR 0 5
71370: PUSH
71371: DOUBLE
71372: LD_INT 0
71374: DEC
71375: ST_TO_ADDR
71376: LD_INT 5
71378: PUSH
71379: FOR_TO
71380: IFFALSE 71447
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71382: LD_VAR 0 1
71386: PPUSH
71387: LD_VAR 0 5
71391: PPUSH
71392: LD_VAR 0 6
71396: PPUSH
71397: CALL_OW 272
71401: PPUSH
71402: LD_VAR 0 2
71406: PPUSH
71407: LD_VAR 0 5
71411: PPUSH
71412: LD_VAR 0 6
71416: PPUSH
71417: CALL_OW 273
71421: PPUSH
71422: LD_VAR 0 3
71426: PPUSH
71427: CALL_OW 309
71431: IFFALSE 71445
// begin result := true ;
71433: LD_ADDR_VAR 0 4
71437: PUSH
71438: LD_INT 1
71440: ST_TO_ADDR
// exit ;
71441: POP
71442: POP
71443: GO 71449
// end ;
71445: GO 71379
71447: POP
71448: POP
// end ;
71449: LD_VAR 0 4
71453: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71454: LD_INT 0
71456: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71457: LD_VAR 0 1
71461: PPUSH
71462: LD_VAR 0 2
71466: PPUSH
71467: LD_INT 0
71469: PPUSH
71470: LD_INT 0
71472: PPUSH
71473: LD_INT 1
71475: PPUSH
71476: LD_INT 0
71478: PPUSH
71479: CALL_OW 587
// end ; end_of_file
71483: LD_VAR 0 3
71487: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71488: LD_VAR 0 1
71492: PUSH
71493: LD_INT 200
71495: DOUBLE
71496: GREATEREQUAL
71497: IFFALSE 71505
71499: LD_INT 299
71501: DOUBLE
71502: LESSEQUAL
71503: IFTRUE 71507
71505: GO 71539
71507: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71508: LD_VAR 0 1
71512: PPUSH
71513: LD_VAR 0 2
71517: PPUSH
71518: LD_VAR 0 3
71522: PPUSH
71523: LD_VAR 0 4
71527: PPUSH
71528: LD_VAR 0 5
71532: PPUSH
71533: CALL 26154 0 5
71537: GO 71616
71539: LD_INT 300
71541: DOUBLE
71542: GREATEREQUAL
71543: IFFALSE 71551
71545: LD_INT 399
71547: DOUBLE
71548: LESSEQUAL
71549: IFTRUE 71553
71551: GO 71615
71553: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71554: LD_VAR 0 1
71558: PPUSH
71559: LD_VAR 0 2
71563: PPUSH
71564: LD_VAR 0 3
71568: PPUSH
71569: LD_VAR 0 4
71573: PPUSH
71574: LD_VAR 0 5
71578: PPUSH
71579: LD_VAR 0 6
71583: PPUSH
71584: LD_VAR 0 7
71588: PPUSH
71589: LD_VAR 0 8
71593: PPUSH
71594: LD_VAR 0 9
71598: PPUSH
71599: LD_VAR 0 10
71603: PPUSH
71604: LD_VAR 0 11
71608: PPUSH
71609: CALL 22487 0 11
71613: GO 71616
71615: POP
// end ;
71616: PPOPN 11
71618: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71619: LD_VAR 0 1
71623: PPUSH
71624: LD_VAR 0 2
71628: PPUSH
71629: LD_VAR 0 3
71633: PPUSH
71634: LD_VAR 0 4
71638: PPUSH
71639: LD_VAR 0 5
71643: PPUSH
71644: CALL 25890 0 5
// end ; end_of_file
71648: PPOPN 5
71650: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71651: LD_VAR 0 1
71655: PPUSH
71656: LD_VAR 0 2
71660: PPUSH
71661: LD_VAR 0 3
71665: PPUSH
71666: LD_VAR 0 4
71670: PPUSH
71671: LD_VAR 0 5
71675: PPUSH
71676: LD_VAR 0 6
71680: PPUSH
71681: CALL 10139 0 6
// end ;
71685: PPOPN 6
71687: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71688: LD_INT 0
71690: PPUSH
// begin if not units then
71691: LD_VAR 0 1
71695: NOT
71696: IFFALSE 71700
// exit ;
71698: GO 71700
// end ;
71700: PPOPN 7
71702: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71703: CALL 10043 0 0
// end ;
71707: PPOPN 1
71709: END
