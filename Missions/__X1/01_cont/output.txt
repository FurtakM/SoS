// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: NOP4
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: NOP4
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: NOP4
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: NOP4
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: NOP4
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: NOP4
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: NOP4
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: NOP4
3808: ARRAY
3809: PPUSH
3810: NOP4
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: NOP4
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: NOP4
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: NOP4
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: NOP4
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: NOP4
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: NOP4
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: NOP4
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: NOP4
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: NOP4
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: NOP4
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: NOP4
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: NOP4
// InGameOn ;
3977: NOP4
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: NOP4
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: NOP4
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: NOP4
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: NOP4
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: NOP4
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: NOP4
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: NOP4
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: NOP4
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: NOP4
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: NOP4
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: NOP4
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: NOP4
// InGameOff ;
4122: NOP4
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: NOP4
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: NOP4
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: NOP4
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: NOP4
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: NOP4
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: NOP4
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: NOP4
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: NOP4
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: NOP4
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: NOP4
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: NOP4
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: NOP4
// DialogueOn ;
4341: NOP4
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: NOP4
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: NOP4
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: NOP4
// DialogueOff ;
4388: NOP4
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: NOP4
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: NOP4
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: NOP4
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: NOP4
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: NOP4
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: NOP4
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: NOP4
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: NOP4
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: NOP4
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: NOP4
4629: PPUSH
4630: NOP4
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: NOP4
4659: PPUSH
4660: NOP4
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: NOP4
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: NOP4
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: NOP4
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: NOP4
4764: PPUSH
4765: NOP4
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: NOP4
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: NOP4
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: NOP4
4840: PPUSH
4841: NOP4
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: NOP4
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: NOP4
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: NOP4
4916: PPUSH
4917: NOP4
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: NOP4
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: NOP4
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: NOP4
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: NOP4
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: NOP4
5064: PPUSH
5065: NOP4
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: NOP4
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: NOP4
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: NOP4
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: NOP4
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: NOP4
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: NOP4
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: NOP4
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: NOP4
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: NOP4
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: NOP4
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: NOP4
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: NOP4
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: NOP4
// InGameOn ;
5368: NOP4
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: NOP4
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: NOP4
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: NOP4
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: NOP4
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: NOP4
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: NOP4
// DialogueOn ;
5461: NOP4
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: NOP4
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: NOP4
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: NOP4
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: NOP4
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: NOP4
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: NOP4
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: NOP4
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: NOP4
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: NOP4
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: NOP4
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: NOP4
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: NOP4
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: NOP4
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: NOP4
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: NOP4
// DialogueOff ;
5659: NOP4
// InGameOff ;
5663: NOP4
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: NOP4
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: NOP4
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: NOP4
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: NOP4
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: NOP4
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: NOP4
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: NOP4
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: NOP4
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: NOP4
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: NOP4
// InGameOn ;
5841: NOP4
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: NOP4
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: NOP4
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: NOP4
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: NOP4
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: NOP4
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: NOP4
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: NOP4
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: NOP4
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: NOP4
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: NOP4
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: NOP4
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: NOP4
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: NOP4
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: NOP4
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: NOP4
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: NOP4
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: NOP4
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: NOP4
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: NOP4
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: NOP4
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: NOP4
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: NOP4
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: NOP4
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: NOP4
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: NOP4
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: NOP4
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: NOP4
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: NOP4
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: NOP4
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: NOP4
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: NOP4
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: NOP4
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: NOP4
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: NOP4
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: NOP4
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: NOP4
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: NOP4
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: NOP4
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: NOP4
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: NOP4
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: NOP4
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: NOP4
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: NOP4
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: NOP4
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: NOP4
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: NOP4
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: NOP4
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: NOP4
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: NOP4
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: NOP4
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: NOP4
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: NOP4
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: NOP4
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: NOP4
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: NOP4
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: NOP4
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: NOP4
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: NOP4
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: NOP4
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: NOP4
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: NOP4
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: NOP4
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: NOP4
// end ; InGameOff ;
6703: NOP4
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: NOP4
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: NOP4
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: NOP4
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: NOP4
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: NOP4
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: NOP4
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: NOP4
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: NOP4
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: NOP4
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: NOP4
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: NOP4
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: NOP4
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: NOP4
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: NOP4
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: NOP4
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: NOP4
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: NOP4
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: NOP4
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: NOP4
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: NOP4
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: NOP4
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: NOP4
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: NOP4
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: NOP4
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: NOP4
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: NOP4
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: NOP4
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: NOP4
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: NOP4
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: NOP4
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: NOP4
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: NOP4
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: NOP4
// InGameOff ;
7217: NOP4
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: NOP4
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: NOP4
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: NOP4
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: NOP4
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: NOP4
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: NOP4
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: NOP4
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: NOP4
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: NOP4
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: NOP4
// InGameOff ;
7448: NOP4
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: NOP4
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: NOP4
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: NOP4
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: NOP4
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: NOP4
// InGameOn ;
7542: NOP4
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: NOP4
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: NOP4
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: NOP4
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: NOP4
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: NOP4
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: NOP4
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: NOP4
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: NOP4
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: NOP4
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: NOP4
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: NOP4
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: NOP4
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: NOP4
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: NOP4
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: NOP4
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: NOP4
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: NOP4
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: NOP4
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: NOP4
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: NOP4
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: NOP4
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: NOP4
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: NOP4
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: NOP4
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: NOP4
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: NOP4
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: NOP4
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: NOP4
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: NOP4
// InGameOff ;
7927: NOP4
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: NOP4
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: NOP4
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: NOP4
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: NOP4
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: NOP4
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: NOP4
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: NOP4
8045: IFFALSE 8203
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: NOP4
8076: ARRAY
8077: PPUSH
8078: NOP4
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: NOP4
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8203
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: NOP4
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: NOP4
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: NOP4
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: NOP4
// end ;
8203: PPOPN 2
8205: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8206: LD_INT 22
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 91
8218: PUSH
8219: LD_INT 8
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: NOP4
8238: IFFALSE 8396
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8247: LD_INT 315
8249: PUSH
8250: LD_INT 280
8252: PUSH
8253: LD_INT 245
8255: PUSH
8256: LD_INT 210
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: NOP4
8269: ARRAY
8270: PPUSH
8271: NOP4
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 54
8302: PUSH
8303: EMPTY
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PPUSH
8311: NOP4
8315: ST_TO_ADDR
// if not tmp then
8316: LD_VAR 0 2
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8396
// for i in tmp do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_VAR 0 2
8334: PUSH
8335: FOR_IN
8336: IFFALSE 8364
// begin ComExitBuilding ( i ) ;
8338: LD_VAR 0 1
8342: PPUSH
8343: NOP4
// AddComAgressiveMove ( i , 142 , 71 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: NOP4
// end ;
8362: GO 8335
8364: POP
8365: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8366: LD_EXP 23
8370: PPUSH
8371: LD_INT 142
8373: PPUSH
8374: LD_INT 71
8376: PPUSH
8377: NOP4
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_INT 142
8388: PPUSH
8389: LD_INT 71
8391: PPUSH
8392: NOP4
// end ;
8396: PPOPN 2
8398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8399: LD_INT 22
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 58
8421: PUSH
8422: EMPTY
8423: LIST
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 1000
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 91
8444: PUSH
8445: LD_EXP 17
8449: PUSH
8450: LD_INT 8
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PPUSH
8465: NOP4
8469: PUSH
8470: LD_EXP 17
8474: PPUSH
8475: NOP4
8479: AND
8480: IFFALSE 8594
8482: GO 8484
8484: DISABLE
// begin enable ;
8485: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8486: LD_EXP 17
8490: PPUSH
8491: LD_INT 22
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 58
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1000
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 91
8536: PUSH
8537: LD_EXP 17
8541: PUSH
8542: LD_INT 8
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: NOP4
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: NOP4
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8570: LD_EXP 17
8574: PPUSH
8575: LD_INT 52
8577: PPUSH
8578: LD_INT 90
8580: PPUSH
8581: NOP4
// AddComHold ( Olaf ) ;
8585: LD_EXP 17
8589: PPUSH
8590: NOP4
// end ;
8594: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8595: LD_EXP 12
8599: PUSH
8600: LD_INT 2
8602: PPUSH
8603: NOP4
8607: NOT
8608: AND
8609: PUSH
8610: NOP4
8614: PUSH
8615: LD_INT 1
8617: EQUAL
8618: AND
8619: PUSH
8620: LD_EXP 13
8624: NOT
8625: AND
8626: IFFALSE 8643
8628: GO 8630
8630: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8631: LD_EXP 16
8635: PPUSH
8636: LD_STRING DH-prison-missing
8638: PPUSH
8639: NOP4
// end ;
8643: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8644: LD_EXP 12
8648: PUSH
8649: LD_INT 8
8651: PPUSH
8652: NOP4
8656: NOT
8657: AND
8658: PUSH
8659: NOP4
8663: PUSH
8664: LD_INT 1
8666: GREATER
8667: AND
8668: PUSH
8669: LD_EXP 13
8673: NOT
8674: AND
8675: IFFALSE 8692
8677: GO 8679
8679: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8680: LD_EXP 16
8684: PPUSH
8685: LD_STRING DH-prison-missing
8687: PPUSH
8688: NOP4
// end ;
8692: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8693: LD_EXP 12
8697: PUSH
8698: LD_INT 3
8700: PPUSH
8701: NOP4
8705: NOT
8706: AND
8707: PUSH
8708: LD_EXP 13
8712: NOT
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8719: LD_EXP 16
8723: PPUSH
8724: LD_STRING DH-prison-missing-a
8726: PPUSH
8727: NOP4
// end ;
8731: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8732: LD_EXP 12
8736: PUSH
8737: LD_INT 10
8739: PPUSH
8740: NOP4
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 13
8751: NOT
8752: AND
8753: IFFALSE 8770
8755: GO 8757
8757: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8758: LD_EXP 16
8762: PPUSH
8763: LD_STRING DH-prison-missing-a
8765: PPUSH
8766: NOP4
// end ;
8770: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8771: LD_EXP 13
8775: NOT
8776: PUSH
8777: LD_EXP 12
8781: AND
8782: PUSH
8783: LD_INT 2
8785: PPUSH
8786: LD_EXP 20
8790: PPUSH
8791: NOP4
8795: AND
8796: IFFALSE 8883
8798: GO 8800
8800: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8801: LD_EXP 20
8805: PPUSH
8806: LD_EXP 16
8810: PPUSH
8811: NOP4
// DialogueOn ;
8815: NOP4
// CenterNowOnUnits ( Kamil ) ;
8819: LD_EXP 20
8823: PPUSH
8824: NOP4
// Say ( Kamil , DK-prison-found ) ;
8828: LD_EXP 20
8832: PPUSH
8833: LD_STRING DK-prison-found
8835: PPUSH
8836: NOP4
// Say ( Heike , DH-prison-found ) ;
8840: LD_EXP 16
8844: PPUSH
8845: LD_STRING DH-prison-found
8847: PPUSH
8848: NOP4
// DialogueOff ;
8852: NOP4
// SetSide ( Kamil , 2 ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: NOP4
// prisonFound := true ;
8868: LD_ADDR_EXP 13
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8876: LD_STRING O6_prison_out
8878: PPUSH
8879: NOP4
// end ;
8883: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8884: LD_EXP 16
8888: PPUSH
8889: NOP4
8893: PUSH
8894: LD_INT 500
8896: LESS
8897: IFFALSE 8910
8899: GO 8901
8901: DISABLE
// heikeHurt := true ;
8902: LD_ADDR_EXP 14
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
8910: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8911: LD_INT 22
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: NOP4
8939: IFFALSE 9255
8941: GO 8943
8943: DISABLE
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
// begin uc_side := 3 ;
8949: LD_ADDR_OWVAR 20
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// uc_nation := 3 ;
8957: LD_ADDR_OWVAR 21
8961: PUSH
8962: LD_INT 3
8964: ST_TO_ADDR
// tmp := [ ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// for i := 1 to 5 do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_INT 5
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9094
// begin PrepareHuman ( false , 1 , 4 ) ;
8988: LD_INT 0
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 4
8996: PPUSH
8997: NOP4
// un := CreateHuman ;
9001: LD_ADDR_VAR 0 3
9005: PUSH
9006: NOP4
9010: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9011: LD_VAR 0 3
9015: PPUSH
9016: LD_INT 4
9018: PPUSH
9019: NOP4
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 158
9030: PPUSH
9031: LD_INT 80
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: NOP4
// ComMoveXY ( un , 147 , 75 ) ;
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 147
9048: PPUSH
9049: LD_INT 75
9051: PPUSH
9052: NOP4
// wait ( 0 0$1 ) ;
9056: LD_INT 35
9058: PPUSH
9059: NOP4
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9063: LD_ADDR_VAR 0 2
9067: PUSH
9068: LD_VAR 0 2
9072: PPUSH
9073: LD_VAR 0 2
9077: PUSH
9078: LD_INT 1
9080: PLUS
9081: PPUSH
9082: LD_VAR 0 3
9086: PPUSH
9087: NOP4
9091: ST_TO_ADDR
// end ;
9092: GO 8985
9094: POP
9095: POP
// repeat wait ( 0 0$1 ) ;
9096: LD_INT 35
9098: PPUSH
9099: NOP4
// for i in tmp do
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9235
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: NOP4
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: NOP4
9145: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: NOP4
9159: PPUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: NOP4
9173: PPUSH
9174: NOP4
9178: IFFALSE 9219
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: NOP4
9198: PPUSH
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: NOP4
9212: PPUSH
9213: NOP4
9217: GO 9233
// ComAttackUnit ( i , Heike ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_EXP 16
9228: PPUSH
9229: NOP4
// end ;
9233: GO 9113
9235: POP
9236: POP
// until IsDead ( Heike ) or not tmp ;
9237: LD_EXP 16
9241: PPUSH
9242: NOP4
9246: PUSH
9247: LD_VAR 0 2
9251: NOT
9252: OR
9253: IFFALSE 9096
// end ;
9255: PPOPN 3
9257: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9258: LD_EXP 12
9262: PUSH
9263: LD_EXP 16
9267: PPUSH
9268: NOP4
9272: AND
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 22
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 50
9299: PUSH
9300: EMPTY
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: PPUSH
9308: NOP4
9312: PUSH
9313: LD_INT 0
9315: EQUAL
9316: AND
9317: IFFALSE 9680
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin if not heikeHurt then
9325: LD_EXP 14
9329: NOT
9330: IFFALSE 9339
// SetAchievement ( ACH_INVINCIBLE ) ;
9332: LD_STRING ACH_INVINCIBLE
9334: PPUSH
9335: NOP4
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9339: LD_STRING enableBioCharacter(BIO_GIVI)
9341: PPUSH
9342: NOP4
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9346: LD_STRING enableBioCharacter(BIO_MIKE)
9348: PPUSH
9349: NOP4
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9353: LD_STRING enableBioCharacter(BIO_OLAF)
9355: PPUSH
9356: NOP4
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9360: LD_ADDR_VAR 0 1
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 50
9387: PUSH
9388: EMPTY
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: PPUSH
9396: NOP4
9400: ST_TO_ADDR
// if prisonFound then
9401: LD_EXP 13
9405: IFFALSE 9419
// AddMedal ( med1 , 1 ) else
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: NOP4
9417: GO 9430
// AddMedal ( med1 , - 1 ) ;
9419: LD_STRING med1
9421: PPUSH
9422: LD_INT 1
9424: NEG
9425: PPUSH
9426: NOP4
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9430: LD_VAR 0 1
9434: PUSH
9435: LD_INT 3
9437: LESS
9438: PUSH
9439: LD_EXP 13
9443: NOT
9444: AND
9445: PUSH
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 4
9453: LESS
9454: PUSH
9455: LD_EXP 13
9459: AND
9460: OR
9461: IFFALSE 9476
// AddMedal ( med2 , - 1 ) else
9463: LD_STRING med2
9465: PPUSH
9466: LD_INT 1
9468: NEG
9469: PPUSH
9470: NOP4
9474: GO 9486
// AddMedal ( med2 , 1 ) ;
9476: LD_STRING med2
9478: PPUSH
9479: LD_INT 1
9481: PPUSH
9482: NOP4
// if prisonFound and johnnySaved and tmp >= 4 then
9486: LD_EXP 13
9490: PUSH
9491: LD_EXP 4
9495: AND
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 4
9504: GREATEREQUAL
9505: AND
9506: IFFALSE 9520
// AddMedal ( med3 , 1 ) else
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: NOP4
9518: GO 9531
// AddMedal ( med3 , - 1 ) ;
9520: LD_STRING med3
9522: PPUSH
9523: LD_INT 1
9525: NEG
9526: PPUSH
9527: NOP4
// GiveMedals ( MAIN ) ;
9531: LD_STRING MAIN
9533: PPUSH
9534: NOP4
// RewardPeople ( tmp ) ;
9538: LD_VAR 0 1
9542: PPUSH
9543: NOP4
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9547: LD_EXP 4
9551: PPUSH
9552: LD_STRING 01_JohnnySaved
9554: PPUSH
9555: NOP4
// SaveCharacters ( Heike , 01_Heike ) ;
9559: LD_EXP 16
9563: PPUSH
9564: LD_STRING 01_Heike
9566: PPUSH
9567: NOP4
// if IsOk ( Givi ) and Givi in tmp then
9571: LD_EXP 18
9575: PPUSH
9576: NOP4
9580: PUSH
9581: LD_EXP 18
9585: PUSH
9586: LD_VAR 0 1
9590: IN
9591: AND
9592: IFFALSE 9606
// SaveCharacters ( Givi , 01_Givi ) ;
9594: LD_EXP 18
9598: PPUSH
9599: LD_STRING 01_Givi
9601: PPUSH
9602: NOP4
// if IsOk ( Mike ) and Mike in tmp then
9606: LD_EXP 19
9610: PPUSH
9611: NOP4
9615: PUSH
9616: LD_EXP 19
9620: PUSH
9621: LD_VAR 0 1
9625: IN
9626: AND
9627: IFFALSE 9641
// SaveCharacters ( Mike , 01_Mike ) ;
9629: LD_EXP 19
9633: PPUSH
9634: LD_STRING 01_Mike
9636: PPUSH
9637: NOP4
// if IsOk ( Kamil ) and Kamil in tmp then
9641: LD_EXP 20
9645: PPUSH
9646: NOP4
9650: PUSH
9651: LD_EXP 20
9655: PUSH
9656: LD_VAR 0 1
9660: IN
9661: AND
9662: IFFALSE 9676
// SaveCharacters ( Kamil , 01_Kamil ) ;
9664: LD_EXP 20
9668: PPUSH
9669: LD_STRING 01_Kamil
9671: PPUSH
9672: NOP4
// YouWin ;
9676: NOP4
// end ; end_of_file
9680: PPOPN 1
9682: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9683: LD_VAR 0 1
9687: PUSH
9688: LD_EXP 16
9692: EQUAL
9693: IFFALSE 9702
// YouLost ( Heike ) ;
9695: LD_STRING Heike
9697: PPUSH
9698: NOP4
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 3
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 25
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: NOP4
9735: IN
9736: IFFALSE 9842
// begin if un in russianPatrol then
9738: LD_VAR 0 1
9742: PUSH
9743: LD_EXP 21
9747: IN
9748: IFFALSE 9766
// russianPatrol := russianPatrol diff un ;
9750: LD_ADDR_EXP 21
9754: PUSH
9755: LD_EXP 21
9759: PUSH
9760: LD_VAR 0 1
9764: DIFF
9765: ST_TO_ADDR
// if un in russianForestPatrol then
9766: LD_VAR 0 1
9770: PUSH
9771: LD_EXP 22
9775: IN
9776: IFFALSE 9794
// russianForestPatrol := russianForestPatrol diff un ;
9778: LD_ADDR_EXP 22
9782: PUSH
9783: LD_EXP 22
9787: PUSH
9788: LD_VAR 0 1
9792: DIFF
9793: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9794: LD_ADDR_EXP 5
9798: PUSH
9799: LD_EXP 5
9803: PPUSH
9804: LD_EXP 5
9808: PUSH
9809: LD_INT 1
9811: PLUS
9812: PPUSH
9813: LD_VAR 0 1
9817: PPUSH
9818: NOP4
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: NOP4
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PPUSH
9837: NOP4
9841: ST_TO_ADDR
// end ; end ;
9842: PPOPN 1
9844: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9845: LD_VAR 0 1
9849: PUSH
9850: LD_EXP 16
9854: EQUAL
9855: IFFALSE 9864
// YouLost ( Heike ) ;
9857: LD_STRING Heike
9859: PPUSH
9860: NOP4
// if un = Olaf then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 17
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( Olaf ) ;
9876: LD_STRING Olaf
9878: PPUSH
9879: NOP4
// end ;
9883: PPOPN 1
9885: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9886: LD_VAR 0 1
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: PUSH
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 5
9902: EQUAL
9903: AND
9904: IFFALSE 9913
// YouLost ( FriendlyFire ) ;
9906: LD_STRING FriendlyFire
9908: PPUSH
9909: NOP4
// end ; end_of_file
9913: PPOPN 2
9915: END
// every 0 0$1 do
9916: GO 9918
9918: DISABLE
// begin enable ;
9919: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9920: LD_STRING updateTimer(
9922: PUSH
9923: NOP4
9927: STR
9928: PUSH
9929: LD_STRING );
9931: STR
9932: PPUSH
9933: NOP4
// end ;
9937: END
// export function SOS_MapStart ( ) ; begin
9938: LD_INT 0
9940: PPUSH
// if streamModeActive then
9941: LD_EXP 26
9945: IFFALSE 9954
// DefineStreamItems ( true ) ;
9947: LD_INT 1
9949: PPUSH
9950: CALL 11608 0 1
// UpdateFactoryWaypoints ( ) ;
9954: CALL 24469 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9958: CALL 24726 0 0
// end ;
9962: LD_VAR 0 1
9966: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9967: LD_INT 0
9969: PPUSH
// if p2 = 100 then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 100
9977: EQUAL
9978: IFFALSE 10981
// begin if not StreamModeActive then
9980: LD_EXP 26
9984: NOT
9985: IFFALSE 9995
// StreamModeActive := true ;
9987: LD_ADDR_EXP 26
9991: PUSH
9992: LD_INT 1
9994: ST_TO_ADDR
// if p3 = 0 then
9995: LD_VAR 0 3
9999: PUSH
10000: LD_INT 0
10002: EQUAL
10003: IFFALSE 10009
// InitStreamMode ;
10005: CALL 11144 0 0
// if p3 = 1 then
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 1
10016: EQUAL
10017: IFFALSE 10027
// sRocket := true ;
10019: LD_ADDR_EXP 31
10023: PUSH
10024: LD_INT 1
10026: ST_TO_ADDR
// if p3 = 2 then
10027: LD_VAR 0 3
10031: PUSH
10032: LD_INT 2
10034: EQUAL
10035: IFFALSE 10045
// sSpeed := true ;
10037: LD_ADDR_EXP 30
10041: PUSH
10042: LD_INT 1
10044: ST_TO_ADDR
// if p3 = 3 then
10045: LD_VAR 0 3
10049: PUSH
10050: LD_INT 3
10052: EQUAL
10053: IFFALSE 10063
// sEngine := true ;
10055: LD_ADDR_EXP 32
10059: PUSH
10060: LD_INT 1
10062: ST_TO_ADDR
// if p3 = 4 then
10063: LD_VAR 0 3
10067: PUSH
10068: LD_INT 4
10070: EQUAL
10071: IFFALSE 10081
// sSpec := true ;
10073: LD_ADDR_EXP 29
10077: PUSH
10078: LD_INT 1
10080: ST_TO_ADDR
// if p3 = 5 then
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 5
10088: EQUAL
10089: IFFALSE 10099
// sLevel := true ;
10091: LD_ADDR_EXP 33
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// if p3 = 6 then
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 6
10106: EQUAL
10107: IFFALSE 10117
// sArmoury := true ;
10109: LD_ADDR_EXP 34
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if p3 = 7 then
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 7
10124: EQUAL
10125: IFFALSE 10135
// sRadar := true ;
10127: LD_ADDR_EXP 35
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// if p3 = 8 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 8
10142: EQUAL
10143: IFFALSE 10153
// sBunker := true ;
10145: LD_ADDR_EXP 36
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// if p3 = 9 then
10153: LD_VAR 0 3
10157: PUSH
10158: LD_INT 9
10160: EQUAL
10161: IFFALSE 10171
// sHack := true ;
10163: LD_ADDR_EXP 37
10167: PUSH
10168: LD_INT 1
10170: ST_TO_ADDR
// if p3 = 10 then
10171: LD_VAR 0 3
10175: PUSH
10176: LD_INT 10
10178: EQUAL
10179: IFFALSE 10189
// sFire := true ;
10181: LD_ADDR_EXP 38
10185: PUSH
10186: LD_INT 1
10188: ST_TO_ADDR
// if p3 = 11 then
10189: LD_VAR 0 3
10193: PUSH
10194: LD_INT 11
10196: EQUAL
10197: IFFALSE 10207
// sRefresh := true ;
10199: LD_ADDR_EXP 39
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// if p3 = 12 then
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 12
10214: EQUAL
10215: IFFALSE 10225
// sExp := true ;
10217: LD_ADDR_EXP 40
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// if p3 = 13 then
10225: LD_VAR 0 3
10229: PUSH
10230: LD_INT 13
10232: EQUAL
10233: IFFALSE 10243
// sDepot := true ;
10235: LD_ADDR_EXP 41
10239: PUSH
10240: LD_INT 1
10242: ST_TO_ADDR
// if p3 = 14 then
10243: LD_VAR 0 3
10247: PUSH
10248: LD_INT 14
10250: EQUAL
10251: IFFALSE 10261
// sFlag := true ;
10253: LD_ADDR_EXP 42
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// if p3 = 15 then
10261: LD_VAR 0 3
10265: PUSH
10266: LD_INT 15
10268: EQUAL
10269: IFFALSE 10279
// sKamikadze := true ;
10271: LD_ADDR_EXP 50
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// if p3 = 16 then
10279: LD_VAR 0 3
10283: PUSH
10284: LD_INT 16
10286: EQUAL
10287: IFFALSE 10297
// sTroll := true ;
10289: LD_ADDR_EXP 51
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// if p3 = 17 then
10297: LD_VAR 0 3
10301: PUSH
10302: LD_INT 17
10304: EQUAL
10305: IFFALSE 10315
// sSlow := true ;
10307: LD_ADDR_EXP 52
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
// if p3 = 18 then
10315: LD_VAR 0 3
10319: PUSH
10320: LD_INT 18
10322: EQUAL
10323: IFFALSE 10333
// sLack := true ;
10325: LD_ADDR_EXP 53
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// if p3 = 19 then
10333: LD_VAR 0 3
10337: PUSH
10338: LD_INT 19
10340: EQUAL
10341: IFFALSE 10351
// sTank := true ;
10343: LD_ADDR_EXP 55
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// if p3 = 20 then
10351: LD_VAR 0 3
10355: PUSH
10356: LD_INT 20
10358: EQUAL
10359: IFFALSE 10369
// sRemote := true ;
10361: LD_ADDR_EXP 56
10365: PUSH
10366: LD_INT 1
10368: ST_TO_ADDR
// if p3 = 21 then
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 21
10376: EQUAL
10377: IFFALSE 10387
// sPowell := true ;
10379: LD_ADDR_EXP 57
10383: PUSH
10384: LD_INT 1
10386: ST_TO_ADDR
// if p3 = 22 then
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 22
10394: EQUAL
10395: IFFALSE 10405
// sTeleport := true ;
10397: LD_ADDR_EXP 60
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// if p3 = 23 then
10405: LD_VAR 0 3
10409: PUSH
10410: LD_INT 23
10412: EQUAL
10413: IFFALSE 10423
// sOilTower := true ;
10415: LD_ADDR_EXP 62
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
// if p3 = 24 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 24
10430: EQUAL
10431: IFFALSE 10441
// sShovel := true ;
10433: LD_ADDR_EXP 63
10437: PUSH
10438: LD_INT 1
10440: ST_TO_ADDR
// if p3 = 25 then
10441: LD_VAR 0 3
10445: PUSH
10446: LD_INT 25
10448: EQUAL
10449: IFFALSE 10459
// sSheik := true ;
10451: LD_ADDR_EXP 64
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// if p3 = 26 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 26
10466: EQUAL
10467: IFFALSE 10477
// sEarthquake := true ;
10469: LD_ADDR_EXP 66
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 27 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 27
10484: EQUAL
10485: IFFALSE 10495
// sAI := true ;
10487: LD_ADDR_EXP 67
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 28 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 28
10502: EQUAL
10503: IFFALSE 10513
// sCargo := true ;
10505: LD_ADDR_EXP 70
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 29 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 29
10520: EQUAL
10521: IFFALSE 10531
// sDLaser := true ;
10523: LD_ADDR_EXP 71
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 30 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 30
10538: EQUAL
10539: IFFALSE 10549
// sExchange := true ;
10541: LD_ADDR_EXP 72
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 31 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 31
10556: EQUAL
10557: IFFALSE 10567
// sFac := true ;
10559: LD_ADDR_EXP 73
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 32 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 32
10574: EQUAL
10575: IFFALSE 10585
// sPower := true ;
10577: LD_ADDR_EXP 74
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 33 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 33
10592: EQUAL
10593: IFFALSE 10603
// sRandom := true ;
10595: LD_ADDR_EXP 75
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 34 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 34
10610: EQUAL
10611: IFFALSE 10621
// sShield := true ;
10613: LD_ADDR_EXP 76
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 35 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 35
10628: EQUAL
10629: IFFALSE 10639
// sTime := true ;
10631: LD_ADDR_EXP 77
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 36 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 36
10646: EQUAL
10647: IFFALSE 10657
// sTools := true ;
10649: LD_ADDR_EXP 78
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 101 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 101
10664: EQUAL
10665: IFFALSE 10675
// sSold := true ;
10667: LD_ADDR_EXP 43
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 102 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 102
10682: EQUAL
10683: IFFALSE 10693
// sDiff := true ;
10685: LD_ADDR_EXP 44
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 103 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 103
10700: EQUAL
10701: IFFALSE 10711
// sFog := true ;
10703: LD_ADDR_EXP 47
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 104 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 104
10718: EQUAL
10719: IFFALSE 10729
// sReset := true ;
10721: LD_ADDR_EXP 48
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 105 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 105
10736: EQUAL
10737: IFFALSE 10747
// sSun := true ;
10739: LD_ADDR_EXP 49
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 106 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 106
10754: EQUAL
10755: IFFALSE 10765
// sTiger := true ;
10757: LD_ADDR_EXP 45
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 107 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 107
10772: EQUAL
10773: IFFALSE 10783
// sBomb := true ;
10775: LD_ADDR_EXP 46
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 108 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 108
10790: EQUAL
10791: IFFALSE 10801
// sWound := true ;
10793: LD_ADDR_EXP 54
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 109 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 109
10808: EQUAL
10809: IFFALSE 10819
// sBetray := true ;
10811: LD_ADDR_EXP 58
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 110 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 110
10826: EQUAL
10827: IFFALSE 10837
// sContamin := true ;
10829: LD_ADDR_EXP 59
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 111 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 111
10844: EQUAL
10845: IFFALSE 10855
// sOil := true ;
10847: LD_ADDR_EXP 61
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 112 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 112
10862: EQUAL
10863: IFFALSE 10873
// sStu := true ;
10865: LD_ADDR_EXP 65
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 113 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 113
10880: EQUAL
10881: IFFALSE 10891
// sBazooka := true ;
10883: LD_ADDR_EXP 68
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 114 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 114
10898: EQUAL
10899: IFFALSE 10909
// sMortar := true ;
10901: LD_ADDR_EXP 69
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 115 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 115
10916: EQUAL
10917: IFFALSE 10927
// sRanger := true ;
10919: LD_ADDR_EXP 79
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 116 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 116
10934: EQUAL
10935: IFFALSE 10945
// sComputer := true ;
10937: LD_ADDR_EXP 80
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 117 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 117
10952: EQUAL
10953: IFFALSE 10963
// s30 := true ;
10955: LD_ADDR_EXP 81
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 118 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 118
10970: EQUAL
10971: IFFALSE 10981
// s60 := true ;
10973: LD_ADDR_EXP 82
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// end ; if p2 = 101 then
10981: LD_VAR 0 2
10985: PUSH
10986: LD_INT 101
10988: EQUAL
10989: IFFALSE 11117
// begin case p3 of 1 :
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 1
10998: DOUBLE
10999: EQUAL
11000: IFTRUE 11004
11002: GO 11011
11004: POP
// hHackUnlimitedResources ; 2 :
11005: CALL 23215 0 0
11009: GO 11117
11011: LD_INT 2
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11026
11019: POP
// hHackSetLevel10 ; 3 :
11020: CALL 23348 0 0
11024: GO 11117
11026: LD_INT 3
11028: DOUBLE
11029: EQUAL
11030: IFTRUE 11034
11032: GO 11041
11034: POP
// hHackSetLevel10YourUnits ; 4 :
11035: CALL 23433 0 0
11039: GO 11117
11041: LD_INT 4
11043: DOUBLE
11044: EQUAL
11045: IFTRUE 11049
11047: GO 11056
11049: POP
// hHackInvincible ; 5 :
11050: CALL 23881 0 0
11054: GO 11117
11056: LD_INT 5
11058: DOUBLE
11059: EQUAL
11060: IFTRUE 11064
11062: GO 11071
11064: POP
// hHackInvisible ; 6 :
11065: CALL 23992 0 0
11069: GO 11117
11071: LD_INT 6
11073: DOUBLE
11074: EQUAL
11075: IFTRUE 11079
11077: GO 11086
11079: POP
// hHackChangeYourSide ; 7 :
11080: CALL 24049 0 0
11084: GO 11117
11086: LD_INT 7
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11101
11094: POP
// hHackChangeUnitSide ; 8 :
11095: CALL 24091 0 0
11099: GO 11117
11101: LD_INT 8
11103: DOUBLE
11104: EQUAL
11105: IFTRUE 11109
11107: GO 11116
11109: POP
// hHackFog ; end ;
11110: CALL 24192 0 0
11114: GO 11117
11116: POP
// end ; end ;
11117: LD_VAR 0 7
11121: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11122: GO 11124
11124: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11125: LD_STRING initStreamRollete();
11127: PPUSH
11128: CALL_OW 559
// InitStreamMode ;
11132: CALL 11144 0 0
// DefineStreamItems ( false ) ;
11136: LD_INT 0
11138: PPUSH
11139: CALL 11608 0 1
// end ;
11143: END
// function InitStreamMode ; begin
11144: LD_INT 0
11146: PPUSH
// streamModeActive := false ;
11147: LD_ADDR_EXP 26
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// normalCounter := 36 ;
11155: LD_ADDR_EXP 27
11159: PUSH
11160: LD_INT 36
11162: ST_TO_ADDR
// hardcoreCounter := 18 ;
11163: LD_ADDR_EXP 28
11167: PUSH
11168: LD_INT 18
11170: ST_TO_ADDR
// sRocket := false ;
11171: LD_ADDR_EXP 31
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// sSpeed := false ;
11179: LD_ADDR_EXP 30
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// sEngine := false ;
11187: LD_ADDR_EXP 32
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// sSpec := false ;
11195: LD_ADDR_EXP 29
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// sLevel := false ;
11203: LD_ADDR_EXP 33
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// sArmoury := false ;
11211: LD_ADDR_EXP 34
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// sRadar := false ;
11219: LD_ADDR_EXP 35
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// sBunker := false ;
11227: LD_ADDR_EXP 36
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// sHack := false ;
11235: LD_ADDR_EXP 37
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// sFire := false ;
11243: LD_ADDR_EXP 38
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// sRefresh := false ;
11251: LD_ADDR_EXP 39
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// sExp := false ;
11259: LD_ADDR_EXP 40
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sDepot := false ;
11267: LD_ADDR_EXP 41
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// sFlag := false ;
11275: LD_ADDR_EXP 42
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// sKamikadze := false ;
11283: LD_ADDR_EXP 50
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// sTroll := false ;
11291: LD_ADDR_EXP 51
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// sSlow := false ;
11299: LD_ADDR_EXP 52
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// sLack := false ;
11307: LD_ADDR_EXP 53
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// sTank := false ;
11315: LD_ADDR_EXP 55
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// sRemote := false ;
11323: LD_ADDR_EXP 56
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// sPowell := false ;
11331: LD_ADDR_EXP 57
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// sTeleport := false ;
11339: LD_ADDR_EXP 60
11343: PUSH
11344: LD_INT 0
11346: ST_TO_ADDR
// sOilTower := false ;
11347: LD_ADDR_EXP 62
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// sShovel := false ;
11355: LD_ADDR_EXP 63
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// sSheik := false ;
11363: LD_ADDR_EXP 64
11367: PUSH
11368: LD_INT 0
11370: ST_TO_ADDR
// sEarthquake := false ;
11371: LD_ADDR_EXP 66
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// sAI := false ;
11379: LD_ADDR_EXP 67
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// sCargo := false ;
11387: LD_ADDR_EXP 70
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// sDLaser := false ;
11395: LD_ADDR_EXP 71
11399: PUSH
11400: LD_INT 0
11402: ST_TO_ADDR
// sExchange := false ;
11403: LD_ADDR_EXP 72
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// sFac := false ;
11411: LD_ADDR_EXP 73
11415: PUSH
11416: LD_INT 0
11418: ST_TO_ADDR
// sPower := false ;
11419: LD_ADDR_EXP 74
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// sRandom := false ;
11427: LD_ADDR_EXP 75
11431: PUSH
11432: LD_INT 0
11434: ST_TO_ADDR
// sShield := false ;
11435: LD_ADDR_EXP 76
11439: PUSH
11440: LD_INT 0
11442: ST_TO_ADDR
// sTime := false ;
11443: LD_ADDR_EXP 77
11447: PUSH
11448: LD_INT 0
11450: ST_TO_ADDR
// sTools := false ;
11451: LD_ADDR_EXP 78
11455: PUSH
11456: LD_INT 0
11458: ST_TO_ADDR
// sSold := false ;
11459: LD_ADDR_EXP 43
11463: PUSH
11464: LD_INT 0
11466: ST_TO_ADDR
// sDiff := false ;
11467: LD_ADDR_EXP 44
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// sFog := false ;
11475: LD_ADDR_EXP 47
11479: PUSH
11480: LD_INT 0
11482: ST_TO_ADDR
// sReset := false ;
11483: LD_ADDR_EXP 48
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// sSun := false ;
11491: LD_ADDR_EXP 49
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// sTiger := false ;
11499: LD_ADDR_EXP 45
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// sBomb := false ;
11507: LD_ADDR_EXP 46
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// sWound := false ;
11515: LD_ADDR_EXP 54
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// sBetray := false ;
11523: LD_ADDR_EXP 58
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// sContamin := false ;
11531: LD_ADDR_EXP 59
11535: PUSH
11536: LD_INT 0
11538: ST_TO_ADDR
// sOil := false ;
11539: LD_ADDR_EXP 61
11543: PUSH
11544: LD_INT 0
11546: ST_TO_ADDR
// sStu := false ;
11547: LD_ADDR_EXP 65
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// sBazooka := false ;
11555: LD_ADDR_EXP 68
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// sMortar := false ;
11563: LD_ADDR_EXP 69
11567: PUSH
11568: LD_INT 0
11570: ST_TO_ADDR
// sRanger := false ;
11571: LD_ADDR_EXP 79
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// sComputer := false ;
11579: LD_ADDR_EXP 80
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// s30 := false ;
11587: LD_ADDR_EXP 81
11591: PUSH
11592: LD_INT 0
11594: ST_TO_ADDR
// s60 := false ;
11595: LD_ADDR_EXP 82
11599: PUSH
11600: LD_INT 0
11602: ST_TO_ADDR
// end ;
11603: LD_VAR 0 1
11607: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
// result := [ ] ;
11617: LD_ADDR_VAR 0 2
11621: PUSH
11622: EMPTY
11623: ST_TO_ADDR
// if campaign_id = 1 then
11624: NOP4
11628: PUSH
11629: LD_INT 1
11631: EQUAL
11632: IFFALSE 14798
// begin case mission_number of 1 :
11634: NOP4
11638: PUSH
11639: LD_INT 1
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11723
11647: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: LD_INT 11
11661: PUSH
11662: LD_INT 12
11664: PUSH
11665: LD_INT 15
11667: PUSH
11668: LD_INT 16
11670: PUSH
11671: LD_INT 22
11673: PUSH
11674: LD_INT 23
11676: PUSH
11677: LD_INT 26
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 101
11693: PUSH
11694: LD_INT 102
11696: PUSH
11697: LD_INT 106
11699: PUSH
11700: LD_INT 116
11702: PUSH
11703: LD_INT 117
11705: PUSH
11706: LD_INT 118
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: ST_TO_ADDR
11721: GO 14796
11723: LD_INT 2
11725: DOUBLE
11726: EQUAL
11727: IFTRUE 11731
11729: GO 11815
11731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11732: LD_ADDR_VAR 0 2
11736: PUSH
11737: LD_INT 2
11739: PUSH
11740: LD_INT 4
11742: PUSH
11743: LD_INT 11
11745: PUSH
11746: LD_INT 12
11748: PUSH
11749: LD_INT 15
11751: PUSH
11752: LD_INT 16
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_INT 23
11760: PUSH
11761: LD_INT 26
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 101
11777: PUSH
11778: LD_INT 102
11780: PUSH
11781: LD_INT 105
11783: PUSH
11784: LD_INT 106
11786: PUSH
11787: LD_INT 108
11789: PUSH
11790: LD_INT 116
11792: PUSH
11793: LD_INT 117
11795: PUSH
11796: LD_INT 118
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: ST_TO_ADDR
11813: GO 14796
11815: LD_INT 3
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 11911
11823: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: LD_INT 5
11837: PUSH
11838: LD_INT 11
11840: PUSH
11841: LD_INT 12
11843: PUSH
11844: LD_INT 15
11846: PUSH
11847: LD_INT 16
11849: PUSH
11850: LD_INT 22
11852: PUSH
11853: LD_INT 26
11855: PUSH
11856: LD_INT 36
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 101
11873: PUSH
11874: LD_INT 102
11876: PUSH
11877: LD_INT 105
11879: PUSH
11880: LD_INT 106
11882: PUSH
11883: LD_INT 108
11885: PUSH
11886: LD_INT 116
11888: PUSH
11889: LD_INT 117
11891: PUSH
11892: LD_INT 118
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: ST_TO_ADDR
11909: GO 14796
11911: LD_INT 4
11913: DOUBLE
11914: EQUAL
11915: IFTRUE 11919
11917: GO 12015
11919: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11920: LD_ADDR_VAR 0 2
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: LD_INT 4
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 8
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: LD_INT 12
11942: PUSH
11943: LD_INT 15
11945: PUSH
11946: LD_INT 16
11948: PUSH
11949: LD_INT 22
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 26
11957: PUSH
11958: LD_INT 36
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 101
11977: PUSH
11978: LD_INT 102
11980: PUSH
11981: LD_INT 105
11983: PUSH
11984: LD_INT 106
11986: PUSH
11987: LD_INT 108
11989: PUSH
11990: LD_INT 116
11992: PUSH
11993: LD_INT 117
11995: PUSH
11996: LD_INT 118
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: ST_TO_ADDR
12013: GO 14796
12015: LD_INT 5
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12135
12023: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: LD_INT 4
12034: PUSH
12035: LD_INT 5
12037: PUSH
12038: LD_INT 6
12040: PUSH
12041: LD_INT 8
12043: PUSH
12044: LD_INT 11
12046: PUSH
12047: LD_INT 12
12049: PUSH
12050: LD_INT 15
12052: PUSH
12053: LD_INT 16
12055: PUSH
12056: LD_INT 22
12058: PUSH
12059: LD_INT 23
12061: PUSH
12062: LD_INT 25
12064: PUSH
12065: LD_INT 26
12067: PUSH
12068: LD_INT 36
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 101
12089: PUSH
12090: LD_INT 102
12092: PUSH
12093: LD_INT 105
12095: PUSH
12096: LD_INT 106
12098: PUSH
12099: LD_INT 108
12101: PUSH
12102: LD_INT 109
12104: PUSH
12105: LD_INT 112
12107: PUSH
12108: LD_INT 116
12110: PUSH
12111: LD_INT 117
12113: PUSH
12114: LD_INT 118
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: ST_TO_ADDR
12133: GO 14796
12135: LD_INT 6
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12275
12143: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12144: LD_ADDR_VAR 0 2
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 5
12157: PUSH
12158: LD_INT 6
12160: PUSH
12161: LD_INT 8
12163: PUSH
12164: LD_INT 11
12166: PUSH
12167: LD_INT 12
12169: PUSH
12170: LD_INT 15
12172: PUSH
12173: LD_INT 16
12175: PUSH
12176: LD_INT 20
12178: PUSH
12179: LD_INT 21
12181: PUSH
12182: LD_INT 22
12184: PUSH
12185: LD_INT 23
12187: PUSH
12188: LD_INT 25
12190: PUSH
12191: LD_INT 26
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: LD_INT 31
12199: PUSH
12200: LD_INT 32
12202: PUSH
12203: LD_INT 36
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 101
12229: PUSH
12230: LD_INT 102
12232: PUSH
12233: LD_INT 105
12235: PUSH
12236: LD_INT 106
12238: PUSH
12239: LD_INT 108
12241: PUSH
12242: LD_INT 109
12244: PUSH
12245: LD_INT 112
12247: PUSH
12248: LD_INT 116
12250: PUSH
12251: LD_INT 117
12253: PUSH
12254: LD_INT 118
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: ST_TO_ADDR
12273: GO 14796
12275: LD_INT 7
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12395
12283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: LD_INT 5
12297: PUSH
12298: LD_INT 7
12300: PUSH
12301: LD_INT 11
12303: PUSH
12304: LD_INT 12
12306: PUSH
12307: LD_INT 15
12309: PUSH
12310: LD_INT 16
12312: PUSH
12313: LD_INT 20
12315: PUSH
12316: LD_INT 21
12318: PUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 23
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 26
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 101
12349: PUSH
12350: LD_INT 102
12352: PUSH
12353: LD_INT 103
12355: PUSH
12356: LD_INT 105
12358: PUSH
12359: LD_INT 106
12361: PUSH
12362: LD_INT 108
12364: PUSH
12365: LD_INT 112
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: ST_TO_ADDR
12393: GO 14796
12395: LD_INT 8
12397: DOUBLE
12398: EQUAL
12399: IFTRUE 12403
12401: GO 12543
12403: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12404: LD_ADDR_VAR 0 2
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: LD_INT 4
12414: PUSH
12415: LD_INT 5
12417: PUSH
12418: LD_INT 6
12420: PUSH
12421: LD_INT 7
12423: PUSH
12424: LD_INT 8
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 15
12435: PUSH
12436: LD_INT 16
12438: PUSH
12439: LD_INT 20
12441: PUSH
12442: LD_INT 21
12444: PUSH
12445: LD_INT 22
12447: PUSH
12448: LD_INT 23
12450: PUSH
12451: LD_INT 25
12453: PUSH
12454: LD_INT 26
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 31
12462: PUSH
12463: LD_INT 32
12465: PUSH
12466: LD_INT 36
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 101
12493: PUSH
12494: LD_INT 102
12496: PUSH
12497: LD_INT 103
12499: PUSH
12500: LD_INT 105
12502: PUSH
12503: LD_INT 106
12505: PUSH
12506: LD_INT 108
12508: PUSH
12509: LD_INT 109
12511: PUSH
12512: LD_INT 112
12514: PUSH
12515: LD_INT 116
12517: PUSH
12518: LD_INT 117
12520: PUSH
12521: LD_INT 118
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: ST_TO_ADDR
12541: GO 14796
12543: LD_INT 9
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12699
12551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: LD_INT 4
12562: PUSH
12563: LD_INT 5
12565: PUSH
12566: LD_INT 6
12568: PUSH
12569: LD_INT 7
12571: PUSH
12572: LD_INT 8
12574: PUSH
12575: LD_INT 11
12577: PUSH
12578: LD_INT 12
12580: PUSH
12581: LD_INT 15
12583: PUSH
12584: LD_INT 16
12586: PUSH
12587: LD_INT 20
12589: PUSH
12590: LD_INT 21
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_INT 23
12598: PUSH
12599: LD_INT 25
12601: PUSH
12602: LD_INT 26
12604: PUSH
12605: LD_INT 28
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 31
12613: PUSH
12614: LD_INT 32
12616: PUSH
12617: LD_INT 36
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 101
12645: PUSH
12646: LD_INT 102
12648: PUSH
12649: LD_INT 103
12651: PUSH
12652: LD_INT 105
12654: PUSH
12655: LD_INT 106
12657: PUSH
12658: LD_INT 108
12660: PUSH
12661: LD_INT 109
12663: PUSH
12664: LD_INT 112
12666: PUSH
12667: LD_INT 114
12669: PUSH
12670: LD_INT 116
12672: PUSH
12673: LD_INT 117
12675: PUSH
12676: LD_INT 118
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: ST_TO_ADDR
12697: GO 14796
12699: LD_INT 10
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12903
12707: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12708: LD_ADDR_VAR 0 2
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: LD_INT 4
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: LD_INT 6
12724: PUSH
12725: LD_INT 7
12727: PUSH
12728: LD_INT 8
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 10
12736: PUSH
12737: LD_INT 11
12739: PUSH
12740: LD_INT 12
12742: PUSH
12743: LD_INT 13
12745: PUSH
12746: LD_INT 14
12748: PUSH
12749: LD_INT 15
12751: PUSH
12752: LD_INT 16
12754: PUSH
12755: LD_INT 17
12757: PUSH
12758: LD_INT 18
12760: PUSH
12761: LD_INT 19
12763: PUSH
12764: LD_INT 20
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 22
12772: PUSH
12773: LD_INT 23
12775: PUSH
12776: LD_INT 24
12778: PUSH
12779: LD_INT 25
12781: PUSH
12782: LD_INT 26
12784: PUSH
12785: LD_INT 28
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 31
12793: PUSH
12794: LD_INT 32
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 104
12842: PUSH
12843: LD_INT 105
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 107
12851: PUSH
12852: LD_INT 108
12854: PUSH
12855: LD_INT 109
12857: PUSH
12858: LD_INT 110
12860: PUSH
12861: LD_INT 111
12863: PUSH
12864: LD_INT 112
12866: PUSH
12867: LD_INT 114
12869: PUSH
12870: LD_INT 116
12872: PUSH
12873: LD_INT 117
12875: PUSH
12876: LD_INT 118
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: ST_TO_ADDR
12901: GO 14796
12903: LD_INT 11
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 13115
12911: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_INT 2
12919: PUSH
12920: LD_INT 3
12922: PUSH
12923: LD_INT 4
12925: PUSH
12926: LD_INT 5
12928: PUSH
12929: LD_INT 6
12931: PUSH
12932: LD_INT 7
12934: PUSH
12935: LD_INT 8
12937: PUSH
12938: LD_INT 9
12940: PUSH
12941: LD_INT 10
12943: PUSH
12944: LD_INT 11
12946: PUSH
12947: LD_INT 12
12949: PUSH
12950: LD_INT 13
12952: PUSH
12953: LD_INT 14
12955: PUSH
12956: LD_INT 15
12958: PUSH
12959: LD_INT 16
12961: PUSH
12962: LD_INT 17
12964: PUSH
12965: LD_INT 18
12967: PUSH
12968: LD_INT 19
12970: PUSH
12971: LD_INT 20
12973: PUSH
12974: LD_INT 21
12976: PUSH
12977: LD_INT 22
12979: PUSH
12980: LD_INT 23
12982: PUSH
12983: LD_INT 24
12985: PUSH
12986: LD_INT 25
12988: PUSH
12989: LD_INT 26
12991: PUSH
12992: LD_INT 28
12994: PUSH
12995: LD_INT 30
12997: PUSH
12998: LD_INT 31
13000: PUSH
13001: LD_INT 32
13003: PUSH
13004: LD_INT 34
13006: PUSH
13007: LD_INT 36
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 103
13051: PUSH
13052: LD_INT 104
13054: PUSH
13055: LD_INT 105
13057: PUSH
13058: LD_INT 106
13060: PUSH
13061: LD_INT 107
13063: PUSH
13064: LD_INT 108
13066: PUSH
13067: LD_INT 109
13069: PUSH
13070: LD_INT 110
13072: PUSH
13073: LD_INT 111
13075: PUSH
13076: LD_INT 112
13078: PUSH
13079: LD_INT 114
13081: PUSH
13082: LD_INT 116
13084: PUSH
13085: LD_INT 117
13087: PUSH
13088: LD_INT 118
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: ST_TO_ADDR
13113: GO 14796
13115: LD_INT 12
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 13343
13123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13124: LD_ADDR_VAR 0 2
13128: PUSH
13129: LD_INT 1
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: LD_INT 4
13140: PUSH
13141: LD_INT 5
13143: PUSH
13144: LD_INT 6
13146: PUSH
13147: LD_INT 7
13149: PUSH
13150: LD_INT 8
13152: PUSH
13153: LD_INT 9
13155: PUSH
13156: LD_INT 10
13158: PUSH
13159: LD_INT 11
13161: PUSH
13162: LD_INT 12
13164: PUSH
13165: LD_INT 13
13167: PUSH
13168: LD_INT 14
13170: PUSH
13171: LD_INT 15
13173: PUSH
13174: LD_INT 16
13176: PUSH
13177: LD_INT 17
13179: PUSH
13180: LD_INT 18
13182: PUSH
13183: LD_INT 19
13185: PUSH
13186: LD_INT 20
13188: PUSH
13189: LD_INT 21
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_INT 23
13197: PUSH
13198: LD_INT 24
13200: PUSH
13201: LD_INT 25
13203: PUSH
13204: LD_INT 26
13206: PUSH
13207: LD_INT 27
13209: PUSH
13210: LD_INT 28
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 31
13218: PUSH
13219: LD_INT 32
13221: PUSH
13222: LD_INT 33
13224: PUSH
13225: LD_INT 34
13227: PUSH
13228: LD_INT 36
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 101
13269: PUSH
13270: LD_INT 102
13272: PUSH
13273: LD_INT 103
13275: PUSH
13276: LD_INT 104
13278: PUSH
13279: LD_INT 105
13281: PUSH
13282: LD_INT 106
13284: PUSH
13285: LD_INT 107
13287: PUSH
13288: LD_INT 108
13290: PUSH
13291: LD_INT 109
13293: PUSH
13294: LD_INT 110
13296: PUSH
13297: LD_INT 111
13299: PUSH
13300: LD_INT 112
13302: PUSH
13303: LD_INT 113
13305: PUSH
13306: LD_INT 114
13308: PUSH
13309: LD_INT 116
13311: PUSH
13312: LD_INT 117
13314: PUSH
13315: LD_INT 118
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 14796
13343: LD_INT 13
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13559
13351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_INT 1
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: LD_INT 4
13368: PUSH
13369: LD_INT 5
13371: PUSH
13372: LD_INT 8
13374: PUSH
13375: LD_INT 9
13377: PUSH
13378: LD_INT 10
13380: PUSH
13381: LD_INT 11
13383: PUSH
13384: LD_INT 12
13386: PUSH
13387: LD_INT 14
13389: PUSH
13390: LD_INT 15
13392: PUSH
13393: LD_INT 16
13395: PUSH
13396: LD_INT 17
13398: PUSH
13399: LD_INT 18
13401: PUSH
13402: LD_INT 19
13404: PUSH
13405: LD_INT 20
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_INT 23
13416: PUSH
13417: LD_INT 24
13419: PUSH
13420: LD_INT 25
13422: PUSH
13423: LD_INT 26
13425: PUSH
13426: LD_INT 27
13428: PUSH
13429: LD_INT 28
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: LD_INT 32
13440: PUSH
13441: LD_INT 33
13443: PUSH
13444: LD_INT 34
13446: PUSH
13447: LD_INT 36
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 101
13485: PUSH
13486: LD_INT 102
13488: PUSH
13489: LD_INT 103
13491: PUSH
13492: LD_INT 104
13494: PUSH
13495: LD_INT 105
13497: PUSH
13498: LD_INT 106
13500: PUSH
13501: LD_INT 107
13503: PUSH
13504: LD_INT 108
13506: PUSH
13507: LD_INT 109
13509: PUSH
13510: LD_INT 110
13512: PUSH
13513: LD_INT 111
13515: PUSH
13516: LD_INT 112
13518: PUSH
13519: LD_INT 113
13521: PUSH
13522: LD_INT 114
13524: PUSH
13525: LD_INT 116
13527: PUSH
13528: LD_INT 117
13530: PUSH
13531: LD_INT 118
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 14796
13559: LD_INT 14
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13791
13567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: LD_INT 2
13578: PUSH
13579: LD_INT 3
13581: PUSH
13582: LD_INT 4
13584: PUSH
13585: LD_INT 5
13587: PUSH
13588: LD_INT 6
13590: PUSH
13591: LD_INT 7
13593: PUSH
13594: LD_INT 8
13596: PUSH
13597: LD_INT 9
13599: PUSH
13600: LD_INT 10
13602: PUSH
13603: LD_INT 11
13605: PUSH
13606: LD_INT 12
13608: PUSH
13609: LD_INT 13
13611: PUSH
13612: LD_INT 14
13614: PUSH
13615: LD_INT 15
13617: PUSH
13618: LD_INT 16
13620: PUSH
13621: LD_INT 17
13623: PUSH
13624: LD_INT 18
13626: PUSH
13627: LD_INT 19
13629: PUSH
13630: LD_INT 20
13632: PUSH
13633: LD_INT 21
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 23
13641: PUSH
13642: LD_INT 24
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 26
13650: PUSH
13651: LD_INT 27
13653: PUSH
13654: LD_INT 28
13656: PUSH
13657: LD_INT 29
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: LD_INT 31
13665: PUSH
13666: LD_INT 32
13668: PUSH
13669: LD_INT 33
13671: PUSH
13672: LD_INT 34
13674: PUSH
13675: LD_INT 36
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 101
13717: PUSH
13718: LD_INT 102
13720: PUSH
13721: LD_INT 103
13723: PUSH
13724: LD_INT 104
13726: PUSH
13727: LD_INT 105
13729: PUSH
13730: LD_INT 106
13732: PUSH
13733: LD_INT 107
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 110
13744: PUSH
13745: LD_INT 111
13747: PUSH
13748: LD_INT 112
13750: PUSH
13751: LD_INT 113
13753: PUSH
13754: LD_INT 114
13756: PUSH
13757: LD_INT 116
13759: PUSH
13760: LD_INT 117
13762: PUSH
13763: LD_INT 118
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: ST_TO_ADDR
13789: GO 14796
13791: LD_INT 15
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 14023
13799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13800: LD_ADDR_VAR 0 2
13804: PUSH
13805: LD_INT 1
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: LD_INT 3
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: LD_INT 5
13819: PUSH
13820: LD_INT 6
13822: PUSH
13823: LD_INT 7
13825: PUSH
13826: LD_INT 8
13828: PUSH
13829: LD_INT 9
13831: PUSH
13832: LD_INT 10
13834: PUSH
13835: LD_INT 11
13837: PUSH
13838: LD_INT 12
13840: PUSH
13841: LD_INT 13
13843: PUSH
13844: LD_INT 14
13846: PUSH
13847: LD_INT 15
13849: PUSH
13850: LD_INT 16
13852: PUSH
13853: LD_INT 17
13855: PUSH
13856: LD_INT 18
13858: PUSH
13859: LD_INT 19
13861: PUSH
13862: LD_INT 20
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_INT 23
13873: PUSH
13874: LD_INT 24
13876: PUSH
13877: LD_INT 25
13879: PUSH
13880: LD_INT 26
13882: PUSH
13883: LD_INT 27
13885: PUSH
13886: LD_INT 28
13888: PUSH
13889: LD_INT 29
13891: PUSH
13892: LD_INT 30
13894: PUSH
13895: LD_INT 31
13897: PUSH
13898: LD_INT 32
13900: PUSH
13901: LD_INT 33
13903: PUSH
13904: LD_INT 34
13906: PUSH
13907: LD_INT 36
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 101
13949: PUSH
13950: LD_INT 102
13952: PUSH
13953: LD_INT 103
13955: PUSH
13956: LD_INT 104
13958: PUSH
13959: LD_INT 105
13961: PUSH
13962: LD_INT 106
13964: PUSH
13965: LD_INT 107
13967: PUSH
13968: LD_INT 108
13970: PUSH
13971: LD_INT 109
13973: PUSH
13974: LD_INT 110
13976: PUSH
13977: LD_INT 111
13979: PUSH
13980: LD_INT 112
13982: PUSH
13983: LD_INT 113
13985: PUSH
13986: LD_INT 114
13988: PUSH
13989: LD_INT 116
13991: PUSH
13992: LD_INT 117
13994: PUSH
13995: LD_INT 118
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: ST_TO_ADDR
14021: GO 14796
14023: LD_INT 16
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14167
14031: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: LD_INT 2
14039: PUSH
14040: LD_INT 4
14042: PUSH
14043: LD_INT 5
14045: PUSH
14046: LD_INT 7
14048: PUSH
14049: LD_INT 11
14051: PUSH
14052: LD_INT 12
14054: PUSH
14055: LD_INT 15
14057: PUSH
14058: LD_INT 16
14060: PUSH
14061: LD_INT 20
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 22
14069: PUSH
14070: LD_INT 23
14072: PUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 26
14078: PUSH
14079: LD_INT 30
14081: PUSH
14082: LD_INT 31
14084: PUSH
14085: LD_INT 32
14087: PUSH
14088: LD_INT 33
14090: PUSH
14091: LD_INT 34
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 101
14117: PUSH
14118: LD_INT 102
14120: PUSH
14121: LD_INT 103
14123: PUSH
14124: LD_INT 106
14126: PUSH
14127: LD_INT 108
14129: PUSH
14130: LD_INT 112
14132: PUSH
14133: LD_INT 113
14135: PUSH
14136: LD_INT 114
14138: PUSH
14139: LD_INT 116
14141: PUSH
14142: LD_INT 117
14144: PUSH
14145: LD_INT 118
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: ST_TO_ADDR
14165: GO 14796
14167: LD_INT 17
14169: DOUBLE
14170: EQUAL
14171: IFTRUE 14175
14173: GO 14399
14175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14176: LD_ADDR_VAR 0 2
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: LD_INT 2
14186: PUSH
14187: LD_INT 3
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: LD_INT 5
14195: PUSH
14196: LD_INT 6
14198: PUSH
14199: LD_INT 7
14201: PUSH
14202: LD_INT 8
14204: PUSH
14205: LD_INT 9
14207: PUSH
14208: LD_INT 10
14210: PUSH
14211: LD_INT 11
14213: PUSH
14214: LD_INT 12
14216: PUSH
14217: LD_INT 13
14219: PUSH
14220: LD_INT 14
14222: PUSH
14223: LD_INT 15
14225: PUSH
14226: LD_INT 16
14228: PUSH
14229: LD_INT 17
14231: PUSH
14232: LD_INT 18
14234: PUSH
14235: LD_INT 19
14237: PUSH
14238: LD_INT 20
14240: PUSH
14241: LD_INT 21
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 23
14249: PUSH
14250: LD_INT 24
14252: PUSH
14253: LD_INT 25
14255: PUSH
14256: LD_INT 26
14258: PUSH
14259: LD_INT 27
14261: PUSH
14262: LD_INT 28
14264: PUSH
14265: LD_INT 29
14267: PUSH
14268: LD_INT 30
14270: PUSH
14271: LD_INT 31
14273: PUSH
14274: LD_INT 32
14276: PUSH
14277: LD_INT 33
14279: PUSH
14280: LD_INT 34
14282: PUSH
14283: LD_INT 36
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 101
14325: PUSH
14326: LD_INT 102
14328: PUSH
14329: LD_INT 103
14331: PUSH
14332: LD_INT 104
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 107
14343: PUSH
14344: LD_INT 108
14346: PUSH
14347: LD_INT 109
14349: PUSH
14350: LD_INT 110
14352: PUSH
14353: LD_INT 111
14355: PUSH
14356: LD_INT 112
14358: PUSH
14359: LD_INT 113
14361: PUSH
14362: LD_INT 114
14364: PUSH
14365: LD_INT 116
14367: PUSH
14368: LD_INT 117
14370: PUSH
14371: LD_INT 118
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: ST_TO_ADDR
14397: GO 14796
14399: LD_INT 18
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14555
14407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_INT 2
14415: PUSH
14416: LD_INT 4
14418: PUSH
14419: LD_INT 5
14421: PUSH
14422: LD_INT 7
14424: PUSH
14425: LD_INT 11
14427: PUSH
14428: LD_INT 12
14430: PUSH
14431: LD_INT 15
14433: PUSH
14434: LD_INT 16
14436: PUSH
14437: LD_INT 20
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_INT 23
14448: PUSH
14449: LD_INT 25
14451: PUSH
14452: LD_INT 26
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 31
14460: PUSH
14461: LD_INT 32
14463: PUSH
14464: LD_INT 33
14466: PUSH
14467: LD_INT 34
14469: PUSH
14470: LD_INT 35
14472: PUSH
14473: LD_INT 36
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 101
14501: PUSH
14502: LD_INT 102
14504: PUSH
14505: LD_INT 103
14507: PUSH
14508: LD_INT 106
14510: PUSH
14511: LD_INT 108
14513: PUSH
14514: LD_INT 112
14516: PUSH
14517: LD_INT 113
14519: PUSH
14520: LD_INT 114
14522: PUSH
14523: LD_INT 115
14525: PUSH
14526: LD_INT 116
14528: PUSH
14529: LD_INT 117
14531: PUSH
14532: LD_INT 118
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: ST_TO_ADDR
14553: GO 14796
14555: LD_INT 19
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14795
14563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: LD_INT 3
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: LD_INT 5
14583: PUSH
14584: LD_INT 6
14586: PUSH
14587: LD_INT 7
14589: PUSH
14590: LD_INT 8
14592: PUSH
14593: LD_INT 9
14595: PUSH
14596: LD_INT 10
14598: PUSH
14599: LD_INT 11
14601: PUSH
14602: LD_INT 12
14604: PUSH
14605: LD_INT 13
14607: PUSH
14608: LD_INT 14
14610: PUSH
14611: LD_INT 15
14613: PUSH
14614: LD_INT 16
14616: PUSH
14617: LD_INT 17
14619: PUSH
14620: LD_INT 18
14622: PUSH
14623: LD_INT 19
14625: PUSH
14626: LD_INT 20
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_INT 23
14637: PUSH
14638: LD_INT 24
14640: PUSH
14641: LD_INT 25
14643: PUSH
14644: LD_INT 26
14646: PUSH
14647: LD_INT 27
14649: PUSH
14650: LD_INT 28
14652: PUSH
14653: LD_INT 29
14655: PUSH
14656: LD_INT 30
14658: PUSH
14659: LD_INT 31
14661: PUSH
14662: LD_INT 32
14664: PUSH
14665: LD_INT 33
14667: PUSH
14668: LD_INT 34
14670: PUSH
14671: LD_INT 35
14673: PUSH
14674: LD_INT 36
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 101
14717: PUSH
14718: LD_INT 102
14720: PUSH
14721: LD_INT 103
14723: PUSH
14724: LD_INT 104
14726: PUSH
14727: LD_INT 105
14729: PUSH
14730: LD_INT 106
14732: PUSH
14733: LD_INT 107
14735: PUSH
14736: LD_INT 108
14738: PUSH
14739: LD_INT 109
14741: PUSH
14742: LD_INT 110
14744: PUSH
14745: LD_INT 111
14747: PUSH
14748: LD_INT 112
14750: PUSH
14751: LD_INT 113
14753: PUSH
14754: LD_INT 114
14756: PUSH
14757: LD_INT 115
14759: PUSH
14760: LD_INT 116
14762: PUSH
14763: LD_INT 117
14765: PUSH
14766: LD_INT 118
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 14796
14795: POP
// end else
14796: GO 15027
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 35
14907: PUSH
14908: LD_INT 36
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 101
14951: PUSH
14952: LD_INT 102
14954: PUSH
14955: LD_INT 103
14957: PUSH
14958: LD_INT 104
14960: PUSH
14961: LD_INT 105
14963: PUSH
14964: LD_INT 106
14966: PUSH
14967: LD_INT 107
14969: PUSH
14970: LD_INT 108
14972: PUSH
14973: LD_INT 109
14975: PUSH
14976: LD_INT 110
14978: PUSH
14979: LD_INT 111
14981: PUSH
14982: LD_INT 112
14984: PUSH
14985: LD_INT 113
14987: PUSH
14988: LD_INT 114
14990: PUSH
14991: LD_INT 115
14993: PUSH
14994: LD_INT 116
14996: PUSH
14997: LD_INT 117
14999: PUSH
15000: LD_INT 118
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: ST_TO_ADDR
// if result then
15027: LD_VAR 0 2
15031: IFFALSE 15817
// begin normal :=  ;
15033: LD_ADDR_VAR 0 5
15037: PUSH
15038: LD_STRING 
15040: ST_TO_ADDR
// hardcore :=  ;
15041: LD_ADDR_VAR 0 6
15045: PUSH
15046: LD_STRING 
15048: ST_TO_ADDR
// active :=  ;
15049: LD_ADDR_VAR 0 7
15053: PUSH
15054: LD_STRING 
15056: ST_TO_ADDR
// for i = 1 to normalCounter do
15057: LD_ADDR_VAR 0 8
15061: PUSH
15062: DOUBLE
15063: LD_INT 1
15065: DEC
15066: ST_TO_ADDR
15067: LD_EXP 27
15071: PUSH
15072: FOR_TO
15073: IFFALSE 15174
// begin tmp := 0 ;
15075: LD_ADDR_VAR 0 3
15079: PUSH
15080: LD_STRING 0
15082: ST_TO_ADDR
// if result [ 1 ] then
15083: LD_VAR 0 2
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: IFFALSE 15156
// if result [ 1 ] [ 1 ] = i then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PUSH
15106: LD_VAR 0 8
15110: EQUAL
15111: IFFALSE 15156
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15113: LD_ADDR_VAR 0 2
15117: PUSH
15118: LD_VAR 0 2
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_VAR 0 2
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_INT 1
15137: PPUSH
15138: NOP4
15142: PPUSH
15143: NOP4
15147: ST_TO_ADDR
// tmp := 1 ;
15148: LD_ADDR_VAR 0 3
15152: PUSH
15153: LD_STRING 1
15155: ST_TO_ADDR
// end ; normal := normal & tmp ;
15156: LD_ADDR_VAR 0 5
15160: PUSH
15161: LD_VAR 0 5
15165: PUSH
15166: LD_VAR 0 3
15170: STR
15171: ST_TO_ADDR
// end ;
15172: GO 15072
15174: POP
15175: POP
// for i = 1 to hardcoreCounter do
15176: LD_ADDR_VAR 0 8
15180: PUSH
15181: DOUBLE
15182: LD_INT 1
15184: DEC
15185: ST_TO_ADDR
15186: LD_EXP 28
15190: PUSH
15191: FOR_TO
15192: IFFALSE 15297
// begin tmp := 0 ;
15194: LD_ADDR_VAR 0 3
15198: PUSH
15199: LD_STRING 0
15201: ST_TO_ADDR
// if result [ 2 ] then
15202: LD_VAR 0 2
15206: PUSH
15207: LD_INT 2
15209: ARRAY
15210: IFFALSE 15279
// if result [ 2 ] [ 1 ] = 100 + i then
15212: LD_VAR 0 2
15216: PUSH
15217: LD_INT 2
15219: ARRAY
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PUSH
15225: LD_INT 100
15227: PUSH
15228: LD_VAR 0 8
15232: PLUS
15233: EQUAL
15234: IFFALSE 15279
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_VAR 0 2
15245: PPUSH
15246: LD_INT 2
15248: PPUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_INT 2
15256: ARRAY
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: NOP4
15265: PPUSH
15266: NOP4
15270: ST_TO_ADDR
// tmp := 1 ;
15271: LD_ADDR_VAR 0 3
15275: PUSH
15276: LD_STRING 1
15278: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15279: LD_ADDR_VAR 0 6
15283: PUSH
15284: LD_VAR 0 6
15288: PUSH
15289: LD_VAR 0 3
15293: STR
15294: ST_TO_ADDR
// end ;
15295: GO 15191
15297: POP
15298: POP
// if isGameLoad then
15299: LD_VAR 0 1
15303: IFFALSE 15778
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15305: LD_ADDR_VAR 0 4
15309: PUSH
15310: LD_EXP 31
15314: PUSH
15315: LD_EXP 30
15319: PUSH
15320: LD_EXP 32
15324: PUSH
15325: LD_EXP 29
15329: PUSH
15330: LD_EXP 33
15334: PUSH
15335: LD_EXP 34
15339: PUSH
15340: LD_EXP 35
15344: PUSH
15345: LD_EXP 36
15349: PUSH
15350: LD_EXP 37
15354: PUSH
15355: LD_EXP 38
15359: PUSH
15360: LD_EXP 39
15364: PUSH
15365: LD_EXP 40
15369: PUSH
15370: LD_EXP 41
15374: PUSH
15375: LD_EXP 42
15379: PUSH
15380: LD_EXP 50
15384: PUSH
15385: LD_EXP 51
15389: PUSH
15390: LD_EXP 52
15394: PUSH
15395: LD_EXP 53
15399: PUSH
15400: LD_EXP 55
15404: PUSH
15405: LD_EXP 56
15409: PUSH
15410: LD_EXP 57
15414: PUSH
15415: LD_EXP 60
15419: PUSH
15420: LD_EXP 62
15424: PUSH
15425: LD_EXP 63
15429: PUSH
15430: LD_EXP 64
15434: PUSH
15435: LD_EXP 66
15439: PUSH
15440: LD_EXP 67
15444: PUSH
15445: LD_EXP 70
15449: PUSH
15450: LD_EXP 71
15454: PUSH
15455: LD_EXP 72
15459: PUSH
15460: LD_EXP 73
15464: PUSH
15465: LD_EXP 74
15469: PUSH
15470: LD_EXP 75
15474: PUSH
15475: LD_EXP 76
15479: PUSH
15480: LD_EXP 77
15484: PUSH
15485: LD_EXP 78
15489: PUSH
15490: LD_EXP 43
15494: PUSH
15495: LD_EXP 44
15499: PUSH
15500: LD_EXP 47
15504: PUSH
15505: LD_EXP 48
15509: PUSH
15510: LD_EXP 49
15514: PUSH
15515: LD_EXP 45
15519: PUSH
15520: LD_EXP 46
15524: PUSH
15525: LD_EXP 54
15529: PUSH
15530: LD_EXP 58
15534: PUSH
15535: LD_EXP 59
15539: PUSH
15540: LD_EXP 61
15544: PUSH
15545: LD_EXP 65
15549: PUSH
15550: LD_EXP 68
15554: PUSH
15555: LD_EXP 69
15559: PUSH
15560: LD_EXP 79
15564: PUSH
15565: LD_EXP 80
15569: PUSH
15570: LD_EXP 81
15574: PUSH
15575: LD_EXP 82
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: ST_TO_ADDR
// tmp :=  ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_STRING 
15643: ST_TO_ADDR
// for i = 1 to normalCounter do
15644: LD_ADDR_VAR 0 8
15648: PUSH
15649: DOUBLE
15650: LD_INT 1
15652: DEC
15653: ST_TO_ADDR
15654: LD_EXP 27
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15696
// begin if flags [ i ] then
15662: LD_VAR 0 4
15666: PUSH
15667: LD_VAR 0 8
15671: ARRAY
15672: IFFALSE 15694
// tmp := tmp & i & ; ;
15674: LD_ADDR_VAR 0 3
15678: PUSH
15679: LD_VAR 0 3
15683: PUSH
15684: LD_VAR 0 8
15688: STR
15689: PUSH
15690: LD_STRING ;
15692: STR
15693: ST_TO_ADDR
// end ;
15694: GO 15659
15696: POP
15697: POP
// for i = 1 to hardcoreCounter do
15698: LD_ADDR_VAR 0 8
15702: PUSH
15703: DOUBLE
15704: LD_INT 1
15706: DEC
15707: ST_TO_ADDR
15708: LD_EXP 28
15712: PUSH
15713: FOR_TO
15714: IFFALSE 15760
// begin if flags [ normalCounter + i ] then
15716: LD_VAR 0 4
15720: PUSH
15721: LD_EXP 27
15725: PUSH
15726: LD_VAR 0 8
15730: PLUS
15731: ARRAY
15732: IFFALSE 15758
// tmp := tmp & ( 100 + i ) & ; ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 100
15746: PUSH
15747: LD_VAR 0 8
15751: PLUS
15752: STR
15753: PUSH
15754: LD_STRING ;
15756: STR
15757: ST_TO_ADDR
// end ;
15758: GO 15713
15760: POP
15761: POP
// if tmp then
15762: LD_VAR 0 3
15766: IFFALSE 15778
// active := tmp ;
15768: LD_ADDR_VAR 0 7
15772: PUSH
15773: LD_VAR 0 3
15777: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15778: LD_STRING getStreamItemsFromMission("
15780: PUSH
15781: LD_VAR 0 5
15785: STR
15786: PUSH
15787: LD_STRING ","
15789: STR
15790: PUSH
15791: LD_VAR 0 6
15795: STR
15796: PUSH
15797: LD_STRING ","
15799: STR
15800: PUSH
15801: LD_VAR 0 7
15805: STR
15806: PUSH
15807: LD_STRING ")
15809: STR
15810: PPUSH
15811: NOP4
// end else
15815: GO 15824
// ToLua ( getStreamItemsFromMission("","","") ) ;
15817: LD_STRING getStreamItemsFromMission("","","")
15819: PPUSH
15820: NOP4
// end ;
15824: LD_VAR 0 2
15828: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15829: LD_EXP 26
15833: PUSH
15834: LD_EXP 31
15838: AND
15839: IFFALSE 15963
15841: GO 15843
15843: DISABLE
15844: LD_INT 0
15846: PPUSH
15847: PPUSH
// begin enable ;
15848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15849: LD_ADDR_VAR 0 2
15853: PUSH
15854: LD_INT 22
15856: PUSH
15857: NOP4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 34
15871: PUSH
15872: LD_INT 7
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 34
15881: PUSH
15882: LD_INT 45
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 34
15891: PUSH
15892: LD_INT 28
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 34
15901: PUSH
15902: LD_INT 47
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PPUSH
15920: NOP4
15924: ST_TO_ADDR
// if not tmp then
15925: LD_VAR 0 2
15929: NOT
15930: IFFALSE 15934
// exit ;
15932: GO 15963
// for i in tmp do
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 2
15943: PUSH
15944: FOR_IN
15945: IFFALSE 15961
// begin SetLives ( i , 0 ) ;
15947: LD_VAR 0 1
15951: PPUSH
15952: LD_INT 0
15954: PPUSH
15955: NOP4
// end ;
15959: GO 15944
15961: POP
15962: POP
// end ;
15963: PPOPN 2
15965: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15966: LD_EXP 26
15970: PUSH
15971: LD_EXP 32
15975: AND
15976: IFFALSE 16060
15978: GO 15980
15980: DISABLE
15981: LD_INT 0
15983: PPUSH
15984: PPUSH
// begin enable ;
15985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_INT 22
15993: PUSH
15994: NOP4
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 32
16005: PUSH
16006: LD_INT 3
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PPUSH
16017: NOP4
16021: ST_TO_ADDR
// if not tmp then
16022: LD_VAR 0 2
16026: NOT
16027: IFFALSE 16031
// exit ;
16029: GO 16060
// for i in tmp do
16031: LD_ADDR_VAR 0 1
16035: PUSH
16036: LD_VAR 0 2
16040: PUSH
16041: FOR_IN
16042: IFFALSE 16058
// begin SetLives ( i , 0 ) ;
16044: LD_VAR 0 1
16048: PPUSH
16049: LD_INT 0
16051: PPUSH
16052: NOP4
// end ;
16056: GO 16041
16058: POP
16059: POP
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16063: LD_EXP 26
16067: PUSH
16068: LD_EXP 29
16072: AND
16073: IFFALSE 16166
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
// begin enable ;
16081: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16082: LD_ADDR_VAR 0 1
16086: PUSH
16087: LD_INT 22
16089: PUSH
16090: NOP4
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 2
16101: PUSH
16102: LD_INT 25
16104: PUSH
16105: LD_INT 5
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 25
16114: PUSH
16115: LD_INT 9
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 25
16124: PUSH
16125: LD_INT 8
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PPUSH
16142: NOP4
16146: PUSH
16147: FOR_IN
16148: IFFALSE 16164
// begin SetClass ( i , 1 ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_INT 1
16157: PPUSH
16158: NOP4
// end ;
16162: GO 16147
16164: POP
16165: POP
// end ;
16166: PPOPN 1
16168: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16169: LD_EXP 26
16173: PUSH
16174: LD_EXP 30
16178: AND
16179: PUSH
16180: NOP4
16184: PUSH
16185: LD_INT 7
16187: LESS
16188: AND
16189: IFFALSE 16203
16191: GO 16193
16193: DISABLE
// begin enable ;
16194: ENABLE
// game_speed := 7 ;
16195: LD_ADDR_OWVAR 65
16199: PUSH
16200: LD_INT 7
16202: ST_TO_ADDR
// end ;
16203: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16204: LD_EXP 26
16208: PUSH
16209: LD_EXP 33
16213: AND
16214: IFFALSE 16416
16216: GO 16218
16218: DISABLE
16219: LD_INT 0
16221: PPUSH
16222: PPUSH
16223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_INT 81
16231: PUSH
16232: NOP4
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 21
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PPUSH
16255: NOP4
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 3
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16416
// if tmp > 5 then
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 5
16276: GREATER
16277: IFFALSE 16289
// k := 5 else
16279: LD_ADDR_VAR 0 2
16283: PUSH
16284: LD_INT 5
16286: ST_TO_ADDR
16287: GO 16299
// k := tmp ;
16289: LD_ADDR_VAR 0 2
16293: PUSH
16294: LD_VAR 0 3
16298: ST_TO_ADDR
// for i := 1 to k do
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_VAR 0 2
16313: PUSH
16314: FOR_TO
16315: IFFALSE 16414
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16317: LD_VAR 0 3
16321: PUSH
16322: LD_VAR 0 1
16326: ARRAY
16327: PPUSH
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 4
16335: MOD
16336: PUSH
16337: LD_INT 1
16339: PLUS
16340: PPUSH
16341: NOP4
16345: PUSH
16346: LD_INT 10
16348: LESS
16349: IFFALSE 16412
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16351: LD_VAR 0 3
16355: PUSH
16356: LD_VAR 0 1
16360: ARRAY
16361: PPUSH
16362: LD_VAR 0 1
16366: PUSH
16367: LD_INT 4
16369: MOD
16370: PUSH
16371: LD_INT 1
16373: PLUS
16374: PPUSH
16375: LD_VAR 0 3
16379: PUSH
16380: LD_VAR 0 1
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 1
16390: PUSH
16391: LD_INT 4
16393: MOD
16394: PUSH
16395: LD_INT 1
16397: PLUS
16398: PPUSH
16399: NOP4
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: PPUSH
16408: NOP4
16412: GO 16314
16414: POP
16415: POP
// end ;
16416: PPOPN 3
16418: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16419: LD_EXP 26
16423: PUSH
16424: LD_EXP 34
16428: AND
16429: IFFALSE 16449
16431: GO 16433
16433: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16434: LD_INT 4
16436: PPUSH
16437: NOP4
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: NOP4
16449: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16450: LD_EXP 26
16454: PUSH
16455: LD_EXP 63
16459: AND
16460: IFFALSE 16480
16462: GO 16464
16464: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16465: LD_INT 19
16467: PPUSH
16468: NOP4
16472: PPUSH
16473: LD_INT 0
16475: PPUSH
16476: NOP4
16480: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16481: LD_EXP 26
16485: PUSH
16486: LD_EXP 35
16490: AND
16491: IFFALSE 16593
16493: GO 16495
16495: DISABLE
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
// begin enable ;
16500: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: NOP4
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: LD_INT 34
16523: PUSH
16524: LD_INT 11
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 34
16533: PUSH
16534: LD_INT 30
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PPUSH
16550: NOP4
16554: ST_TO_ADDR
// if not tmp then
16555: LD_VAR 0 2
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 16593
// for i in tmp do
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: LD_VAR 0 2
16573: PUSH
16574: FOR_IN
16575: IFFALSE 16591
// begin SetLives ( i , 0 ) ;
16577: LD_VAR 0 1
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: NOP4
// end ;
16589: GO 16574
16591: POP
16592: POP
// end ;
16593: PPOPN 2
16595: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16596: LD_EXP 26
16600: PUSH
16601: LD_EXP 36
16605: AND
16606: IFFALSE 16626
16608: GO 16610
16610: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16611: LD_INT 32
16613: PPUSH
16614: NOP4
16618: PPUSH
16619: LD_INT 0
16621: PPUSH
16622: NOP4
16626: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16627: LD_EXP 26
16631: PUSH
16632: LD_EXP 37
16636: AND
16637: IFFALSE 16818
16639: GO 16641
16641: DISABLE
16642: LD_INT 0
16644: PPUSH
16645: PPUSH
16646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: NOP4
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 33
16666: PUSH
16667: LD_INT 3
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: NOP4
16682: ST_TO_ADDR
// if not tmp then
16683: LD_VAR 0 2
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16818
// side := 0 ;
16692: LD_ADDR_VAR 0 3
16696: PUSH
16697: LD_INT 0
16699: ST_TO_ADDR
// for i := 1 to 8 do
16700: LD_ADDR_VAR 0 1
16704: PUSH
16705: DOUBLE
16706: LD_INT 1
16708: DEC
16709: ST_TO_ADDR
16710: LD_INT 8
16712: PUSH
16713: FOR_TO
16714: IFFALSE 16762
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16716: NOP4
16720: PUSH
16721: LD_VAR 0 1
16725: NONEQUAL
16726: PUSH
16727: NOP4
16731: PPUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: NOP4
16741: PUSH
16742: LD_INT 2
16744: EQUAL
16745: AND
16746: IFFALSE 16760
// begin side := i ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_VAR 0 1
16757: ST_TO_ADDR
// break ;
16758: GO 16762
// end ;
16760: GO 16713
16762: POP
16763: POP
// if not side then
16764: LD_VAR 0 3
16768: NOT
16769: IFFALSE 16773
// exit ;
16771: GO 16818
// for i := 1 to tmp do
16773: LD_ADDR_VAR 0 1
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_VAR 0 2
16787: PUSH
16788: FOR_TO
16789: IFFALSE 16816
// if Prob ( 60 ) then
16791: LD_INT 60
16793: PPUSH
16794: NOP4
16798: IFFALSE 16814
// SetSide ( i , side ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: NOP4
16814: GO 16788
16816: POP
16817: POP
// end ;
16818: PPOPN 3
16820: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16821: LD_EXP 26
16825: PUSH
16826: LD_EXP 39
16830: AND
16831: IFFALSE 16950
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16839: LD_ADDR_VAR 0 1
16843: PUSH
16844: LD_INT 22
16846: PUSH
16847: NOP4
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 21
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 3
16868: PUSH
16869: LD_INT 23
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: PPUSH
16888: NOP4
16892: PUSH
16893: FOR_IN
16894: IFFALSE 16948
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16896: LD_VAR 0 1
16900: PPUSH
16901: NOP4
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: LD_INT 2
16911: PUSH
16912: LD_INT 3
16914: PUSH
16915: LD_INT 4
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: IN
16924: IFFALSE 16946
// SetClass ( un , rand ( 1 , 4 ) ) ;
16926: LD_VAR 0 1
16930: PPUSH
16931: LD_INT 1
16933: PPUSH
16934: LD_INT 4
16936: PPUSH
16937: NOP4
16941: PPUSH
16942: NOP4
16946: GO 16893
16948: POP
16949: POP
// end ;
16950: PPOPN 1
16952: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16953: LD_EXP 26
16957: PUSH
16958: LD_EXP 38
16962: AND
16963: IFFALSE 17042
16965: GO 16967
16967: DISABLE
16968: LD_INT 0
16970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: NOP4
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 21
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PPUSH
17002: NOP4
17006: ST_TO_ADDR
// if not tmp then
17007: LD_VAR 0 1
17011: NOT
17012: IFFALSE 17016
// exit ;
17014: GO 17042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17016: LD_VAR 0 1
17020: PUSH
17021: LD_INT 1
17023: PPUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: NOP4
17033: ARRAY
17034: PPUSH
17035: LD_INT 100
17037: PPUSH
17038: NOP4
// end ;
17042: PPOPN 1
17044: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17045: LD_EXP 26
17049: PUSH
17050: LD_EXP 40
17054: AND
17055: IFFALSE 17153
17057: GO 17059
17059: DISABLE
17060: LD_INT 0
17062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17063: LD_ADDR_VAR 0 1
17067: PUSH
17068: LD_INT 22
17070: PUSH
17071: NOP4
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 21
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PPUSH
17094: NOP4
17098: ST_TO_ADDR
// if not tmp then
17099: LD_VAR 0 1
17103: NOT
17104: IFFALSE 17108
// exit ;
17106: GO 17153
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17108: LD_VAR 0 1
17112: PUSH
17113: LD_INT 1
17115: PPUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: NOP4
17125: ARRAY
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: LD_INT 4
17132: PPUSH
17133: NOP4
17137: PPUSH
17138: LD_INT 3000
17140: PPUSH
17141: LD_INT 9000
17143: PPUSH
17144: NOP4
17148: PPUSH
17149: NOP4
// end ;
17153: PPOPN 1
17155: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17156: LD_EXP 26
17160: PUSH
17161: LD_EXP 41
17165: AND
17166: IFFALSE 17186
17168: GO 17170
17170: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17171: LD_INT 1
17173: PPUSH
17174: NOP4
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: NOP4
17186: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17187: LD_EXP 26
17191: PUSH
17192: LD_EXP 42
17196: AND
17197: IFFALSE 17280
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_INT 22
17213: PUSH
17214: NOP4
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 21
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PPUSH
17237: NOP4
17241: ST_TO_ADDR
// if not tmp then
17242: LD_VAR 0 2
17246: NOT
17247: IFFALSE 17251
// exit ;
17249: GO 17280
// for i in tmp do
17251: LD_ADDR_VAR 0 1
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: FOR_IN
17262: IFFALSE 17278
// SetBLevel ( i , 10 ) ;
17264: LD_VAR 0 1
17268: PPUSH
17269: LD_INT 10
17271: PPUSH
17272: NOP4
17276: GO 17261
17278: POP
17279: POP
// end ;
17280: PPOPN 2
17282: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17283: LD_EXP 26
17287: PUSH
17288: LD_EXP 43
17292: AND
17293: IFFALSE 17404
17295: GO 17297
17297: DISABLE
17298: LD_INT 0
17300: PPUSH
17301: PPUSH
17302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17303: LD_ADDR_VAR 0 3
17307: PUSH
17308: LD_INT 22
17310: PUSH
17311: NOP4
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: NOP4
17338: ST_TO_ADDR
// if not tmp then
17339: LD_VAR 0 3
17343: NOT
17344: IFFALSE 17348
// exit ;
17346: GO 17404
// un := tmp [ rand ( 1 , tmp ) ] ;
17348: LD_ADDR_VAR 0 2
17352: PUSH
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: NOP4
17370: ARRAY
17371: ST_TO_ADDR
// if Crawls ( un ) then
17372: LD_VAR 0 2
17376: PPUSH
17377: NOP4
17381: IFFALSE 17392
// ComWalk ( un ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: NOP4
// SetClass ( un , class_sniper ) ;
17392: LD_VAR 0 2
17396: PPUSH
17397: LD_INT 5
17399: PPUSH
17400: NOP4
// end ;
17404: PPOPN 3
17406: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17407: LD_EXP 26
17411: PUSH
17412: LD_EXP 44
17416: AND
17417: PUSH
17418: NOP4
17422: PUSH
17423: LD_INT 4
17425: LESS
17426: AND
17427: IFFALSE 17446
17429: GO 17431
17431: DISABLE
// begin Difficulty := Difficulty + 1 ;
17432: LD_ADDR_OWVAR 67
17436: PUSH
17437: NOP4
17441: PUSH
17442: LD_INT 1
17444: PLUS
17445: ST_TO_ADDR
// end ;
17446: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17447: LD_EXP 26
17451: PUSH
17452: LD_EXP 45
17456: AND
17457: IFFALSE 17560
17459: GO 17461
17461: DISABLE
17462: LD_INT 0
17464: PPUSH
// begin for i := 1 to 5 do
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: DOUBLE
17471: LD_INT 1
17473: DEC
17474: ST_TO_ADDR
17475: LD_INT 5
17477: PUSH
17478: FOR_TO
17479: IFFALSE 17558
// begin uc_nation := nation_nature ;
17481: LD_ADDR_OWVAR 21
17485: PUSH
17486: LD_INT 0
17488: ST_TO_ADDR
// uc_side := 0 ;
17489: LD_ADDR_OWVAR 20
17493: PUSH
17494: LD_INT 0
17496: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17497: LD_ADDR_OWVAR 29
17501: PUSH
17502: LD_INT 12
17504: PUSH
17505: LD_INT 12
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: ST_TO_ADDR
// hc_agressivity := 20 ;
17512: LD_ADDR_OWVAR 35
17516: PUSH
17517: LD_INT 20
17519: ST_TO_ADDR
// hc_class := class_tiger ;
17520: LD_ADDR_OWVAR 28
17524: PUSH
17525: LD_INT 14
17527: ST_TO_ADDR
// hc_gallery :=  ;
17528: LD_ADDR_OWVAR 33
17532: PUSH
17533: LD_STRING 
17535: ST_TO_ADDR
// hc_name :=  ;
17536: LD_ADDR_OWVAR 26
17540: PUSH
17541: LD_STRING 
17543: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17544: NOP4
17548: PPUSH
17549: LD_INT 0
17551: PPUSH
17552: NOP4
// end ;
17556: GO 17478
17558: POP
17559: POP
// end ;
17560: PPOPN 1
17562: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17563: LD_EXP 26
17567: PUSH
17568: LD_EXP 46
17572: AND
17573: IFFALSE 17582
17575: GO 17577
17577: DISABLE
// StreamSibBomb ;
17578: CALL 17583 0 0
17582: END
// export function StreamSibBomb ; var i , x , y ; begin
17583: LD_INT 0
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
// result := false ;
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 0
17596: ST_TO_ADDR
// for i := 1 to 16 do
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: DOUBLE
17603: LD_INT 1
17605: DEC
17606: ST_TO_ADDR
17607: LD_INT 16
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17810
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17613: LD_ADDR_VAR 0 3
17617: PUSH
17618: LD_INT 10
17620: PUSH
17621: LD_INT 20
17623: PUSH
17624: LD_INT 30
17626: PUSH
17627: LD_INT 40
17629: PUSH
17630: LD_INT 50
17632: PUSH
17633: LD_INT 60
17635: PUSH
17636: LD_INT 70
17638: PUSH
17639: LD_INT 80
17641: PUSH
17642: LD_INT 90
17644: PUSH
17645: LD_INT 100
17647: PUSH
17648: LD_INT 110
17650: PUSH
17651: LD_INT 120
17653: PUSH
17654: LD_INT 130
17656: PUSH
17657: LD_INT 140
17659: PUSH
17660: LD_INT 150
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PPUSH
17683: LD_INT 15
17685: PPUSH
17686: NOP4
17690: ARRAY
17691: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17692: LD_ADDR_VAR 0 4
17696: PUSH
17697: LD_INT 10
17699: PUSH
17700: LD_INT 20
17702: PUSH
17703: LD_INT 30
17705: PUSH
17706: LD_INT 40
17708: PUSH
17709: LD_INT 50
17711: PUSH
17712: LD_INT 60
17714: PUSH
17715: LD_INT 70
17717: PUSH
17718: LD_INT 80
17720: PUSH
17721: LD_INT 90
17723: PUSH
17724: LD_INT 100
17726: PUSH
17727: LD_INT 110
17729: PUSH
17730: LD_INT 120
17732: PUSH
17733: LD_INT 130
17735: PUSH
17736: LD_INT 140
17738: PUSH
17739: LD_INT 150
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PPUSH
17762: LD_INT 15
17764: PPUSH
17765: NOP4
17769: ARRAY
17770: ST_TO_ADDR
// if ValidHex ( x , y ) then
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_VAR 0 4
17780: PPUSH
17781: NOP4
17785: IFFALSE 17808
// begin result := [ x , y ] ;
17787: LD_ADDR_VAR 0 1
17791: PUSH
17792: LD_VAR 0 3
17796: PUSH
17797: LD_VAR 0 4
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
// break ;
17806: GO 17810
// end ; end ;
17808: GO 17610
17810: POP
17811: POP
// if result then
17812: LD_VAR 0 1
17816: IFFALSE 17876
// begin ToLua ( playSibBomb() ) ;
17818: LD_STRING playSibBomb()
17820: PPUSH
17821: NOP4
// wait ( 0 0$14 ) ;
17825: LD_INT 490
17827: PPUSH
17828: NOP4
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17832: LD_VAR 0 1
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PPUSH
17841: LD_VAR 0 1
17845: PUSH
17846: LD_INT 2
17848: ARRAY
17849: PPUSH
17850: NOP4
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17854: LD_VAR 0 1
17858: PUSH
17859: LD_INT 1
17861: ARRAY
17862: PPUSH
17863: LD_VAR 0 1
17867: PUSH
17868: LD_INT 2
17870: ARRAY
17871: PPUSH
17872: NOP4
// end ; end ;
17876: LD_VAR 0 1
17880: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17881: LD_EXP 26
17885: PUSH
17886: LD_EXP 48
17890: AND
17891: IFFALSE 17903
17893: GO 17895
17895: DISABLE
// YouLost (  ) ;
17896: LD_STRING 
17898: PPUSH
17899: NOP4
17903: END
// every 0 0$1 trigger StreamModeActive and sFog do
17904: LD_EXP 26
17908: PUSH
17909: LD_EXP 47
17913: AND
17914: IFFALSE 17928
17916: GO 17918
17918: DISABLE
// FogOff ( your_side ) ;
17919: NOP4
17923: PPUSH
17924: NOP4
17928: END
// every 0 0$1 trigger StreamModeActive and sSun do
17929: LD_EXP 26
17933: PUSH
17934: LD_EXP 49
17938: AND
17939: IFFALSE 17967
17941: GO 17943
17943: DISABLE
// begin solar_recharge_percent := 0 ;
17944: LD_ADDR_OWVAR 79
17948: PUSH
17949: LD_INT 0
17951: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17952: LD_INT 10500
17954: PPUSH
17955: NOP4
// solar_recharge_percent := 100 ;
17959: LD_ADDR_OWVAR 79
17963: PUSH
17964: LD_INT 100
17966: ST_TO_ADDR
// end ;
17967: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17968: LD_EXP 26
17972: PUSH
17973: LD_EXP 50
17977: AND
17978: IFFALSE 18217
17980: GO 17982
17982: DISABLE
17983: LD_INT 0
17985: PPUSH
17986: PPUSH
17987: PPUSH
// begin tmp := [ ] ;
17988: LD_ADDR_VAR 0 3
17992: PUSH
17993: EMPTY
17994: ST_TO_ADDR
// for i := 1 to 6 do
17995: LD_ADDR_VAR 0 1
17999: PUSH
18000: DOUBLE
18001: LD_INT 1
18003: DEC
18004: ST_TO_ADDR
18005: LD_INT 6
18007: PUSH
18008: FOR_TO
18009: IFFALSE 18114
// begin uc_nation := nation_nature ;
18011: LD_ADDR_OWVAR 21
18015: PUSH
18016: LD_INT 0
18018: ST_TO_ADDR
// uc_side := 0 ;
18019: LD_ADDR_OWVAR 20
18023: PUSH
18024: LD_INT 0
18026: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18027: LD_ADDR_OWVAR 29
18031: PUSH
18032: LD_INT 12
18034: PUSH
18035: LD_INT 12
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: ST_TO_ADDR
// hc_agressivity := 20 ;
18042: LD_ADDR_OWVAR 35
18046: PUSH
18047: LD_INT 20
18049: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18050: LD_ADDR_OWVAR 28
18054: PUSH
18055: LD_INT 17
18057: ST_TO_ADDR
// hc_gallery :=  ;
18058: LD_ADDR_OWVAR 33
18062: PUSH
18063: LD_STRING 
18065: ST_TO_ADDR
// hc_name :=  ;
18066: LD_ADDR_OWVAR 26
18070: PUSH
18071: LD_STRING 
18073: ST_TO_ADDR
// un := CreateHuman ;
18074: LD_ADDR_VAR 0 2
18078: PUSH
18079: NOP4
18083: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18084: LD_VAR 0 2
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: NOP4
// tmp := tmp ^ un ;
18096: LD_ADDR_VAR 0 3
18100: PUSH
18101: LD_VAR 0 3
18105: PUSH
18106: LD_VAR 0 2
18110: ADD
18111: ST_TO_ADDR
// end ;
18112: GO 18008
18114: POP
18115: POP
// repeat wait ( 0 0$1 ) ;
18116: LD_INT 35
18118: PPUSH
18119: NOP4
// for un in tmp do
18123: LD_ADDR_VAR 0 2
18127: PUSH
18128: LD_VAR 0 3
18132: PUSH
18133: FOR_IN
18134: IFFALSE 18208
// begin if IsDead ( un ) then
18136: LD_VAR 0 2
18140: PPUSH
18141: NOP4
18145: IFFALSE 18165
// begin tmp := tmp diff un ;
18147: LD_ADDR_VAR 0 3
18151: PUSH
18152: LD_VAR 0 3
18156: PUSH
18157: LD_VAR 0 2
18161: DIFF
18162: ST_TO_ADDR
// continue ;
18163: GO 18133
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18165: LD_VAR 0 2
18169: PPUSH
18170: LD_INT 3
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PPUSH
18187: NOP4
18191: PPUSH
18192: LD_VAR 0 2
18196: PPUSH
18197: NOP4
18201: PPUSH
18202: NOP4
// end ;
18206: GO 18133
18208: POP
18209: POP
// until not tmp ;
18210: LD_VAR 0 3
18214: NOT
18215: IFFALSE 18116
// end ;
18217: PPOPN 3
18219: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18220: LD_EXP 26
18224: PUSH
18225: LD_EXP 51
18229: AND
18230: IFFALSE 18284
18232: GO 18234
18234: DISABLE
// begin ToLua ( displayTroll(); ) ;
18235: LD_STRING displayTroll();
18237: PPUSH
18238: NOP4
// wait ( 3 3$00 ) ;
18242: LD_INT 6300
18244: PPUSH
18245: NOP4
// ToLua ( hideTroll(); ) ;
18249: LD_STRING hideTroll();
18251: PPUSH
18252: NOP4
// wait ( 1 1$00 ) ;
18256: LD_INT 2100
18258: PPUSH
18259: NOP4
// ToLua ( displayTroll(); ) ;
18263: LD_STRING displayTroll();
18265: PPUSH
18266: NOP4
// wait ( 1 1$00 ) ;
18270: LD_INT 2100
18272: PPUSH
18273: NOP4
// ToLua ( hideTroll(); ) ;
18277: LD_STRING hideTroll();
18279: PPUSH
18280: NOP4
// end ;
18284: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18285: LD_EXP 26
18289: PUSH
18290: LD_EXP 52
18294: AND
18295: IFFALSE 18358
18297: GO 18299
18299: DISABLE
18300: LD_INT 0
18302: PPUSH
// begin p := 0 ;
18303: LD_ADDR_VAR 0 1
18307: PUSH
18308: LD_INT 0
18310: ST_TO_ADDR
// repeat game_speed := 1 ;
18311: LD_ADDR_OWVAR 65
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18319: LD_INT 35
18321: PPUSH
18322: NOP4
// p := p + 1 ;
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_VAR 0 1
18335: PUSH
18336: LD_INT 1
18338: PLUS
18339: ST_TO_ADDR
// until p >= 60 ;
18340: LD_VAR 0 1
18344: PUSH
18345: LD_INT 60
18347: GREATEREQUAL
18348: IFFALSE 18311
// game_speed := 4 ;
18350: LD_ADDR_OWVAR 65
18354: PUSH
18355: LD_INT 4
18357: ST_TO_ADDR
// end ;
18358: PPOPN 1
18360: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18361: LD_EXP 26
18365: PUSH
18366: LD_EXP 53
18370: AND
18371: IFFALSE 18517
18373: GO 18375
18375: DISABLE
18376: LD_INT 0
18378: PPUSH
18379: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: NOP4
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 30
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 30
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PPUSH
18429: NOP4
18433: ST_TO_ADDR
// if not depot then
18434: LD_VAR 0 1
18438: NOT
18439: IFFALSE 18443
// exit ;
18441: GO 18517
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18443: LD_ADDR_VAR 0 2
18447: PUSH
18448: LD_VAR 0 1
18452: PUSH
18453: LD_INT 1
18455: PPUSH
18456: LD_VAR 0 1
18460: PPUSH
18461: NOP4
18465: ARRAY
18466: PPUSH
18467: NOP4
18471: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18472: LD_VAR 0 2
18476: PPUSH
18477: LD_INT 1
18479: PPUSH
18480: LD_INT 0
18482: PPUSH
18483: NOP4
// SetResourceType ( base , mat_oil , 0 ) ;
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_INT 2
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: NOP4
// SetResourceType ( base , mat_siberit , 0 ) ;
18502: LD_VAR 0 2
18506: PPUSH
18507: LD_INT 3
18509: PPUSH
18510: LD_INT 0
18512: PPUSH
18513: NOP4
// end ;
18517: PPOPN 2
18519: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18520: LD_EXP 26
18524: PUSH
18525: LD_EXP 54
18529: AND
18530: IFFALSE 18627
18532: GO 18534
18534: DISABLE
18535: LD_INT 0
18537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: NOP4
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 21
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 3
18567: PUSH
18568: LD_INT 23
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: PPUSH
18587: NOP4
18591: ST_TO_ADDR
// if not tmp then
18592: LD_VAR 0 1
18596: NOT
18597: IFFALSE 18601
// exit ;
18599: GO 18627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18601: LD_VAR 0 1
18605: PUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_VAR 0 1
18613: PPUSH
18614: NOP4
18618: ARRAY
18619: PPUSH
18620: LD_INT 200
18622: PPUSH
18623: NOP4
// end ;
18627: PPOPN 1
18629: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18630: LD_EXP 26
18634: PUSH
18635: LD_EXP 55
18639: AND
18640: IFFALSE 18719
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: NOP4
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: NOP4
18683: ST_TO_ADDR
// if not tmp then
18684: LD_VAR 0 1
18688: NOT
18689: IFFALSE 18693
// exit ;
18691: GO 18719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: NOP4
18710: ARRAY
18711: PPUSH
18712: LD_INT 60
18714: PPUSH
18715: NOP4
// end ;
18719: PPOPN 1
18721: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18722: LD_EXP 26
18726: PUSH
18727: LD_EXP 56
18731: AND
18732: IFFALSE 18831
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
// begin enable ;
18741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18742: LD_ADDR_VAR 0 1
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: NOP4
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 61
18761: PUSH
18762: EMPTY
18763: LIST
18764: PUSH
18765: LD_INT 33
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: PPUSH
18780: NOP4
18784: ST_TO_ADDR
// if not tmp then
18785: LD_VAR 0 1
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 18831
// for i in tmp do
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_VAR 0 1
18803: PUSH
18804: FOR_IN
18805: IFFALSE 18829
// if IsControledBy ( i ) then
18807: LD_VAR 0 2
18811: PPUSH
18812: NOP4
18816: IFFALSE 18827
// ComUnlink ( i ) ;
18818: LD_VAR 0 2
18822: PPUSH
18823: NOP4
18827: GO 18804
18829: POP
18830: POP
// end ;
18831: PPOPN 2
18833: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18834: LD_EXP 26
18838: PUSH
18839: LD_EXP 57
18843: AND
18844: IFFALSE 18984
18846: GO 18848
18848: DISABLE
18849: LD_INT 0
18851: PPUSH
18852: PPUSH
// begin ToLua ( displayPowell(); ) ;
18853: LD_STRING displayPowell();
18855: PPUSH
18856: NOP4
// uc_side := 0 ;
18860: LD_ADDR_OWVAR 20
18864: PUSH
18865: LD_INT 0
18867: ST_TO_ADDR
// uc_nation := 2 ;
18868: LD_ADDR_OWVAR 21
18872: PUSH
18873: LD_INT 2
18875: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18876: LD_ADDR_OWVAR 37
18880: PUSH
18881: LD_INT 14
18883: ST_TO_ADDR
// vc_engine := engine_siberite ;
18884: LD_ADDR_OWVAR 39
18888: PUSH
18889: LD_INT 3
18891: ST_TO_ADDR
// vc_control := control_apeman ;
18892: LD_ADDR_OWVAR 38
18896: PUSH
18897: LD_INT 5
18899: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18900: LD_ADDR_OWVAR 40
18904: PUSH
18905: LD_INT 29
18907: ST_TO_ADDR
// un := CreateVehicle ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: NOP4
18917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18918: LD_VAR 0 2
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: NOP4
// repeat wait ( 0 0$1 ) ;
18930: LD_INT 35
18932: PPUSH
18933: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_INT 22
18944: PUSH
18945: NOP4
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PPUSH
18954: NOP4
18958: PPUSH
18959: LD_VAR 0 2
18963: PPUSH
18964: NOP4
18968: PPUSH
18969: NOP4
// until IsDead ( un ) ;
18973: LD_VAR 0 2
18977: PPUSH
18978: NOP4
18982: IFFALSE 18930
// end ;
18984: PPOPN 2
18986: END
// every 0 0$1 trigger StreamModeActive and sStu do
18987: LD_EXP 26
18991: PUSH
18992: LD_EXP 65
18996: AND
18997: IFFALSE 19013
18999: GO 19001
19001: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19002: LD_STRING displayStucuk();
19004: PPUSH
19005: NOP4
// ResetFog ;
19009: NOP4
// end ;
19013: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19014: LD_EXP 26
19018: PUSH
19019: LD_EXP 58
19023: AND
19024: IFFALSE 19165
19026: GO 19028
19028: DISABLE
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 22
19040: PUSH
19041: NOP4
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 21
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PPUSH
19064: NOP4
19068: ST_TO_ADDR
// if not tmp then
19069: LD_VAR 0 2
19073: NOT
19074: IFFALSE 19078
// exit ;
19076: GO 19165
// un := tmp [ rand ( 1 , tmp ) ] ;
19078: LD_ADDR_VAR 0 1
19082: PUSH
19083: LD_VAR 0 2
19087: PUSH
19088: LD_INT 1
19090: PPUSH
19091: LD_VAR 0 2
19095: PPUSH
19096: NOP4
19100: ARRAY
19101: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19102: LD_VAR 0 1
19106: PPUSH
19107: LD_INT 0
19109: PPUSH
19110: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19114: LD_VAR 0 1
19118: PPUSH
19119: NOP4
19123: PUSH
19124: LD_VAR 0 1
19128: DIFF
19129: PPUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: NOP4
19139: PPUSH
19140: NOP4
// wait ( 0 0$20 ) ;
19144: LD_INT 700
19146: PPUSH
19147: NOP4
// SetSide ( un , your_side ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: NOP4
19160: PPUSH
19161: NOP4
// end ;
19165: PPOPN 2
19167: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19168: LD_EXP 26
19172: PUSH
19173: LD_EXP 59
19177: AND
19178: IFFALSE 19284
19180: GO 19182
19182: DISABLE
19183: LD_INT 0
19185: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_INT 22
19193: PUSH
19194: NOP4
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: LD_INT 30
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 30
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: NOP4
19239: ST_TO_ADDR
// if not depot then
19240: LD_VAR 0 1
19244: NOT
19245: IFFALSE 19249
// exit ;
19247: GO 19284
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19249: LD_VAR 0 1
19253: PUSH
19254: LD_INT 1
19256: ARRAY
19257: PPUSH
19258: NOP4
19262: PPUSH
19263: LD_VAR 0 1
19267: PUSH
19268: LD_INT 1
19270: ARRAY
19271: PPUSH
19272: NOP4
19276: PPUSH
19277: LD_INT 70
19279: PPUSH
19280: NOP4
// end ;
19284: PPOPN 1
19286: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19287: LD_EXP 26
19291: PUSH
19292: LD_EXP 60
19296: AND
19297: IFFALSE 19508
19299: GO 19301
19301: DISABLE
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
19306: PPUSH
19307: PPUSH
19308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19309: LD_ADDR_VAR 0 5
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: NOP4
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 21
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: NOP4
19344: ST_TO_ADDR
// if not tmp then
19345: LD_VAR 0 5
19349: NOT
19350: IFFALSE 19354
// exit ;
19352: GO 19508
// for i in tmp do
19354: LD_ADDR_VAR 0 1
19358: PUSH
19359: LD_VAR 0 5
19363: PUSH
19364: FOR_IN
19365: IFFALSE 19506
// begin d := rand ( 0 , 5 ) ;
19367: LD_ADDR_VAR 0 4
19371: PUSH
19372: LD_INT 0
19374: PPUSH
19375: LD_INT 5
19377: PPUSH
19378: NOP4
19382: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19383: LD_ADDR_VAR 0 2
19387: PUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: NOP4
19397: PPUSH
19398: LD_VAR 0 4
19402: PPUSH
19403: LD_INT 3
19405: PPUSH
19406: LD_INT 12
19408: PPUSH
19409: NOP4
19413: PPUSH
19414: NOP4
19418: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_VAR 0 1
19428: PPUSH
19429: NOP4
19433: PPUSH
19434: LD_VAR 0 4
19438: PPUSH
19439: LD_INT 3
19441: PPUSH
19442: LD_INT 12
19444: PPUSH
19445: NOP4
19449: PPUSH
19450: NOP4
19454: ST_TO_ADDR
// if ValidHex ( x , y ) then
19455: LD_VAR 0 2
19459: PPUSH
19460: LD_VAR 0 3
19464: PPUSH
19465: NOP4
19469: IFFALSE 19504
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19471: LD_VAR 0 1
19475: PPUSH
19476: LD_VAR 0 2
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: LD_INT 3
19488: PPUSH
19489: LD_INT 6
19491: PPUSH
19492: NOP4
19496: PPUSH
19497: LD_INT 1
19499: PPUSH
19500: NOP4
// end ;
19504: GO 19364
19506: POP
19507: POP
// end ;
19508: PPOPN 5
19510: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19511: LD_EXP 26
19515: PUSH
19516: LD_EXP 61
19520: AND
19521: IFFALSE 19615
19523: GO 19525
19525: DISABLE
19526: LD_INT 0
19528: PPUSH
19529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19530: LD_ADDR_VAR 0 2
19534: PUSH
19535: LD_INT 22
19537: PUSH
19538: NOP4
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 32
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 21
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: PPUSH
19572: NOP4
19576: ST_TO_ADDR
// if not tmp then
19577: LD_VAR 0 2
19581: NOT
19582: IFFALSE 19586
// exit ;
19584: GO 19615
// for i in tmp do
19586: LD_ADDR_VAR 0 1
19590: PUSH
19591: LD_VAR 0 2
19595: PUSH
19596: FOR_IN
19597: IFFALSE 19613
// SetFuel ( i , 0 ) ;
19599: LD_VAR 0 1
19603: PPUSH
19604: LD_INT 0
19606: PPUSH
19607: NOP4
19611: GO 19596
19613: POP
19614: POP
// end ;
19615: PPOPN 2
19617: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19618: LD_EXP 26
19622: PUSH
19623: LD_EXP 62
19627: AND
19628: IFFALSE 19694
19630: GO 19632
19632: DISABLE
19633: LD_INT 0
19635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19636: LD_ADDR_VAR 0 1
19640: PUSH
19641: LD_INT 22
19643: PUSH
19644: NOP4
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 30
19655: PUSH
19656: LD_INT 29
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PPUSH
19667: NOP4
19671: ST_TO_ADDR
// if not tmp then
19672: LD_VAR 0 1
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 19694
// DestroyUnit ( tmp [ 1 ] ) ;
19681: LD_VAR 0 1
19685: PUSH
19686: LD_INT 1
19688: ARRAY
19689: PPUSH
19690: NOP4
// end ;
19694: PPOPN 1
19696: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19697: LD_EXP 26
19701: PUSH
19702: LD_EXP 64
19706: AND
19707: IFFALSE 19836
19709: GO 19711
19711: DISABLE
19712: LD_INT 0
19714: PPUSH
// begin uc_side := 0 ;
19715: LD_ADDR_OWVAR 20
19719: PUSH
19720: LD_INT 0
19722: ST_TO_ADDR
// uc_nation := nation_arabian ;
19723: LD_ADDR_OWVAR 21
19727: PUSH
19728: LD_INT 2
19730: ST_TO_ADDR
// hc_gallery :=  ;
19731: LD_ADDR_OWVAR 33
19735: PUSH
19736: LD_STRING 
19738: ST_TO_ADDR
// hc_name :=  ;
19739: LD_ADDR_OWVAR 26
19743: PUSH
19744: LD_STRING 
19746: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19747: LD_INT 1
19749: PPUSH
19750: LD_INT 11
19752: PPUSH
19753: LD_INT 10
19755: PPUSH
19756: NOP4
// un := CreateHuman ;
19760: LD_ADDR_VAR 0 1
19764: PUSH
19765: NOP4
19769: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19770: LD_VAR 0 1
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: NOP4
// repeat wait ( 0 0$1 ) ;
19782: LD_INT 35
19784: PPUSH
19785: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19789: LD_VAR 0 1
19793: PPUSH
19794: LD_INT 22
19796: PUSH
19797: NOP4
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: NOP4
19810: PPUSH
19811: LD_VAR 0 1
19815: PPUSH
19816: NOP4
19820: PPUSH
19821: NOP4
// until IsDead ( un ) ;
19825: LD_VAR 0 1
19829: PPUSH
19830: NOP4
19834: IFFALSE 19782
// end ;
19836: PPOPN 1
19838: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19839: LD_EXP 26
19843: PUSH
19844: LD_EXP 66
19848: AND
19849: IFFALSE 19861
19851: GO 19853
19853: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19854: LD_STRING earthquake(getX(game), 0, 32)
19856: PPUSH
19857: NOP4
19861: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19862: LD_EXP 26
19866: PUSH
19867: LD_EXP 67
19871: AND
19872: IFFALSE 19963
19874: GO 19876
19876: DISABLE
19877: LD_INT 0
19879: PPUSH
// begin enable ;
19880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19881: LD_ADDR_VAR 0 1
19885: PUSH
19886: LD_INT 22
19888: PUSH
19889: NOP4
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 21
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 33
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: PPUSH
19923: NOP4
19927: ST_TO_ADDR
// if not tmp then
19928: LD_VAR 0 1
19932: NOT
19933: IFFALSE 19937
// exit ;
19935: GO 19963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19937: LD_VAR 0 1
19941: PUSH
19942: LD_INT 1
19944: PPUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: NOP4
19954: ARRAY
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: NOP4
// end ;
19963: PPOPN 1
19965: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19966: LD_EXP 26
19970: PUSH
19971: LD_EXP 68
19975: AND
19976: IFFALSE 20117
19978: GO 19980
19980: DISABLE
19981: LD_INT 0
19983: PPUSH
19984: PPUSH
19985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19986: LD_ADDR_VAR 0 3
19990: PUSH
19991: LD_INT 22
19993: PUSH
19994: NOP4
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 25
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PPUSH
20017: NOP4
20021: ST_TO_ADDR
// if not tmp then
20022: LD_VAR 0 3
20026: NOT
20027: IFFALSE 20031
// exit ;
20029: GO 20117
// un := tmp [ rand ( 1 , tmp ) ] ;
20031: LD_ADDR_VAR 0 2
20035: PUSH
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 1
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: NOP4
20053: ARRAY
20054: ST_TO_ADDR
// if Crawls ( un ) then
20055: LD_VAR 0 2
20059: PPUSH
20060: NOP4
20064: IFFALSE 20075
// ComWalk ( un ) ;
20066: LD_VAR 0 2
20070: PPUSH
20071: NOP4
// SetClass ( un , class_bazooker ) ;
20075: LD_VAR 0 2
20079: PPUSH
20080: LD_INT 9
20082: PPUSH
20083: NOP4
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20087: LD_INT 28
20089: PPUSH
20090: NOP4
20094: PPUSH
20095: LD_INT 2
20097: PPUSH
20098: NOP4
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20102: LD_INT 29
20104: PPUSH
20105: NOP4
20109: PPUSH
20110: LD_INT 2
20112: PPUSH
20113: NOP4
// end ;
20117: PPOPN 3
20119: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20120: LD_EXP 26
20124: PUSH
20125: LD_EXP 69
20129: AND
20130: IFFALSE 20241
20132: GO 20134
20134: DISABLE
20135: LD_INT 0
20137: PPUSH
20138: PPUSH
20139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 22
20147: PUSH
20148: NOP4
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 25
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PPUSH
20171: NOP4
20175: ST_TO_ADDR
// if not tmp then
20176: LD_VAR 0 3
20180: NOT
20181: IFFALSE 20185
// exit ;
20183: GO 20241
// un := tmp [ rand ( 1 , tmp ) ] ;
20185: LD_ADDR_VAR 0 2
20189: PUSH
20190: LD_VAR 0 3
20194: PUSH
20195: LD_INT 1
20197: PPUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: NOP4
20207: ARRAY
20208: ST_TO_ADDR
// if Crawls ( un ) then
20209: LD_VAR 0 2
20213: PPUSH
20214: NOP4
20218: IFFALSE 20229
// ComWalk ( un ) ;
20220: LD_VAR 0 2
20224: PPUSH
20225: NOP4
// SetClass ( un , class_mortar ) ;
20229: LD_VAR 0 2
20233: PPUSH
20234: LD_INT 8
20236: PPUSH
20237: NOP4
// end ;
20241: PPOPN 3
20243: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20244: LD_EXP 26
20248: PUSH
20249: LD_EXP 70
20253: AND
20254: IFFALSE 20398
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: NOP4
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 34
20295: PUSH
20296: LD_INT 12
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 34
20305: PUSH
20306: LD_INT 51
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 34
20315: PUSH
20316: LD_INT 32
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PPUSH
20334: NOP4
20338: ST_TO_ADDR
// if not tmp then
20339: LD_VAR 0 2
20343: NOT
20344: IFFALSE 20348
// exit ;
20346: GO 20398
// for i in tmp do
20348: LD_ADDR_VAR 0 1
20352: PUSH
20353: LD_VAR 0 2
20357: PUSH
20358: FOR_IN
20359: IFFALSE 20396
// if GetCargo ( i , mat_artifact ) = 0 then
20361: LD_VAR 0 1
20365: PPUSH
20366: LD_INT 4
20368: PPUSH
20369: NOP4
20373: PUSH
20374: LD_INT 0
20376: EQUAL
20377: IFFALSE 20394
// SetCargo ( i , mat_siberit , 100 ) ;
20379: LD_VAR 0 1
20383: PPUSH
20384: LD_INT 3
20386: PPUSH
20387: LD_INT 100
20389: PPUSH
20390: NOP4
20394: GO 20358
20396: POP
20397: POP
// end ;
20398: PPOPN 2
20400: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20401: LD_EXP 26
20405: PUSH
20406: LD_EXP 71
20410: AND
20411: IFFALSE 20594
20413: GO 20415
20415: DISABLE
20416: LD_INT 0
20418: PPUSH
20419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_INT 22
20427: PUSH
20428: NOP4
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PPUSH
20437: NOP4
20441: ST_TO_ADDR
// if not tmp then
20442: LD_VAR 0 2
20446: NOT
20447: IFFALSE 20451
// exit ;
20449: GO 20594
// for i := 1 to 2 do
20451: LD_ADDR_VAR 0 1
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_INT 2
20463: PUSH
20464: FOR_TO
20465: IFFALSE 20592
// begin uc_side := your_side ;
20467: LD_ADDR_OWVAR 20
20471: PUSH
20472: NOP4
20476: ST_TO_ADDR
// uc_nation := nation_american ;
20477: LD_ADDR_OWVAR 21
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// vc_chassis := us_morphling ;
20485: LD_ADDR_OWVAR 37
20489: PUSH
20490: LD_INT 5
20492: ST_TO_ADDR
// vc_engine := engine_siberite ;
20493: LD_ADDR_OWVAR 39
20497: PUSH
20498: LD_INT 3
20500: ST_TO_ADDR
// vc_control := control_computer ;
20501: LD_ADDR_OWVAR 38
20505: PUSH
20506: LD_INT 3
20508: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20509: LD_ADDR_OWVAR 40
20513: PUSH
20514: LD_INT 10
20516: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20517: LD_VAR 0 2
20521: PUSH
20522: LD_INT 1
20524: ARRAY
20525: PPUSH
20526: NOP4
20530: NOT
20531: IFFALSE 20578
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20533: NOP4
20537: PPUSH
20538: LD_VAR 0 2
20542: PUSH
20543: LD_INT 1
20545: ARRAY
20546: PPUSH
20547: NOP4
20551: PPUSH
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: PPUSH
20561: NOP4
20565: PPUSH
20566: LD_INT 12
20568: PPUSH
20569: LD_INT 1
20571: PPUSH
20572: NOP4
20576: GO 20590
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20578: NOP4
20582: PPUSH
20583: LD_INT 1
20585: PPUSH
20586: NOP4
// end ;
20590: GO 20464
20592: POP
20593: POP
// end ;
20594: PPOPN 2
20596: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20597: LD_EXP 26
20601: PUSH
20602: LD_EXP 72
20606: AND
20607: IFFALSE 20829
20609: GO 20611
20611: DISABLE
20612: LD_INT 0
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20620: LD_ADDR_VAR 0 6
20624: PUSH
20625: LD_INT 22
20627: PUSH
20628: NOP4
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 3
20649: PUSH
20650: LD_INT 23
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: PPUSH
20669: NOP4
20673: ST_TO_ADDR
// if not tmp then
20674: LD_VAR 0 6
20678: NOT
20679: IFFALSE 20683
// exit ;
20681: GO 20829
// s1 := rand ( 1 , 4 ) ;
20683: LD_ADDR_VAR 0 2
20687: PUSH
20688: LD_INT 1
20690: PPUSH
20691: LD_INT 4
20693: PPUSH
20694: NOP4
20698: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20699: LD_ADDR_VAR 0 4
20703: PUSH
20704: LD_VAR 0 6
20708: PUSH
20709: LD_INT 1
20711: ARRAY
20712: PPUSH
20713: LD_VAR 0 2
20717: PPUSH
20718: NOP4
20722: ST_TO_ADDR
// if s1 = 1 then
20723: LD_VAR 0 2
20727: PUSH
20728: LD_INT 1
20730: EQUAL
20731: IFFALSE 20751
// s2 := rand ( 2 , 4 ) else
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 2
20740: PPUSH
20741: LD_INT 4
20743: PPUSH
20744: NOP4
20748: ST_TO_ADDR
20749: GO 20759
// s2 := 1 ;
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20759: LD_ADDR_VAR 0 5
20763: PUSH
20764: LD_VAR 0 6
20768: PUSH
20769: LD_INT 1
20771: ARRAY
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: NOP4
20782: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20783: LD_VAR 0 6
20787: PUSH
20788: LD_INT 1
20790: ARRAY
20791: PPUSH
20792: LD_VAR 0 2
20796: PPUSH
20797: LD_VAR 0 5
20801: PPUSH
20802: NOP4
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20806: LD_VAR 0 6
20810: PUSH
20811: LD_INT 1
20813: ARRAY
20814: PPUSH
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_VAR 0 4
20824: PPUSH
20825: NOP4
// end ;
20829: PPOPN 6
20831: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20832: LD_EXP 26
20836: PUSH
20837: LD_EXP 73
20841: AND
20842: IFFALSE 20921
20844: GO 20846
20846: DISABLE
20847: LD_INT 0
20849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: NOP4
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 30
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PPUSH
20881: NOP4
20885: ST_TO_ADDR
// if not tmp then
20886: LD_VAR 0 1
20890: NOT
20891: IFFALSE 20895
// exit ;
20893: GO 20921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20895: LD_VAR 0 1
20899: PUSH
20900: LD_INT 1
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: NOP4
20912: ARRAY
20913: PPUSH
20914: LD_INT 1
20916: PPUSH
20917: NOP4
// end ;
20921: PPOPN 1
20923: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20924: LD_EXP 26
20928: PUSH
20929: LD_EXP 74
20933: AND
20934: IFFALSE 21046
20936: GO 20938
20938: DISABLE
20939: LD_INT 0
20941: PPUSH
20942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: NOP4
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 30
20965: PUSH
20966: LD_INT 27
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 30
20975: PUSH
20976: LD_INT 26
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 28
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: NOP4
21007: ST_TO_ADDR
// if not tmp then
21008: LD_VAR 0 2
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21046
// for i in tmp do
21017: LD_ADDR_VAR 0 1
21021: PUSH
21022: LD_VAR 0 2
21026: PUSH
21027: FOR_IN
21028: IFFALSE 21044
// SetLives ( i , 1 ) ;
21030: LD_VAR 0 1
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: NOP4
21042: GO 21027
21044: POP
21045: POP
// end ;
21046: PPOPN 2
21048: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21049: LD_EXP 26
21053: PUSH
21054: LD_EXP 75
21058: AND
21059: IFFALSE 21346
21061: GO 21063
21063: DISABLE
21064: LD_INT 0
21066: PPUSH
21067: PPUSH
21068: PPUSH
// begin i := rand ( 1 , 7 ) ;
21069: LD_ADDR_VAR 0 1
21073: PUSH
21074: LD_INT 1
21076: PPUSH
21077: LD_INT 7
21079: PPUSH
21080: NOP4
21084: ST_TO_ADDR
// case i of 1 :
21085: LD_VAR 0 1
21089: PUSH
21090: LD_INT 1
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21108
21098: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21099: LD_STRING earthquake(getX(game), 0, 32)
21101: PPUSH
21102: NOP4
21106: GO 21346
21108: LD_INT 2
21110: DOUBLE
21111: EQUAL
21112: IFTRUE 21116
21114: GO 21130
21116: POP
// begin ToLua ( displayStucuk(); ) ;
21117: LD_STRING displayStucuk();
21119: PPUSH
21120: NOP4
// ResetFog ;
21124: NOP4
// end ; 3 :
21128: GO 21346
21130: LD_INT 3
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21242
21138: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21139: LD_ADDR_VAR 0 2
21143: PUSH
21144: LD_INT 22
21146: PUSH
21147: NOP4
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 25
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PPUSH
21170: NOP4
21174: ST_TO_ADDR
// if not tmp then
21175: LD_VAR 0 2
21179: NOT
21180: IFFALSE 21184
// exit ;
21182: GO 21346
// un := tmp [ rand ( 1 , tmp ) ] ;
21184: LD_ADDR_VAR 0 3
21188: PUSH
21189: LD_VAR 0 2
21193: PUSH
21194: LD_INT 1
21196: PPUSH
21197: LD_VAR 0 2
21201: PPUSH
21202: NOP4
21206: ARRAY
21207: ST_TO_ADDR
// if Crawls ( un ) then
21208: LD_VAR 0 3
21212: PPUSH
21213: NOP4
21217: IFFALSE 21228
// ComWalk ( un ) ;
21219: LD_VAR 0 3
21223: PPUSH
21224: NOP4
// SetClass ( un , class_mortar ) ;
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_INT 8
21235: PPUSH
21236: NOP4
// end ; 4 :
21240: GO 21346
21242: LD_INT 4
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21324
21250: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: NOP4
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 30
21270: PUSH
21271: LD_INT 29
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: NOP4
21286: ST_TO_ADDR
// if not tmp then
21287: LD_VAR 0 2
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 21346
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21296: LD_VAR 0 2
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: NOP4
// DestroyUnit ( tmp [ 1 ] ) ;
21309: LD_VAR 0 2
21313: PUSH
21314: LD_INT 1
21316: ARRAY
21317: PPUSH
21318: NOP4
// end ; 5 .. 7 :
21322: GO 21346
21324: LD_INT 5
21326: DOUBLE
21327: GREATEREQUAL
21328: IFFALSE 21336
21330: LD_INT 7
21332: DOUBLE
21333: LESSEQUAL
21334: IFTRUE 21338
21336: GO 21345
21338: POP
// StreamSibBomb ; end ;
21339: CALL 17583 0 0
21343: GO 21346
21345: POP
// end ;
21346: PPOPN 3
21348: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21349: LD_EXP 26
21353: PUSH
21354: LD_EXP 76
21358: AND
21359: IFFALSE 21515
21361: GO 21363
21363: DISABLE
21364: LD_INT 0
21366: PPUSH
21367: PPUSH
21368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21369: LD_ADDR_VAR 0 2
21373: PUSH
21374: LD_INT 81
21376: PUSH
21377: NOP4
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 21
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PPUSH
21418: NOP4
21422: ST_TO_ADDR
// if not tmp then
21423: LD_VAR 0 2
21427: NOT
21428: IFFALSE 21432
// exit ;
21430: GO 21515
// p := 0 ;
21432: LD_ADDR_VAR 0 3
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21440: LD_INT 35
21442: PPUSH
21443: NOP4
// p := p + 1 ;
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 1
21459: PLUS
21460: ST_TO_ADDR
// for i in tmp do
21461: LD_ADDR_VAR 0 1
21465: PUSH
21466: LD_VAR 0 2
21470: PUSH
21471: FOR_IN
21472: IFFALSE 21503
// if GetLives ( i ) < 1000 then
21474: LD_VAR 0 1
21478: PPUSH
21479: NOP4
21483: PUSH
21484: LD_INT 1000
21486: LESS
21487: IFFALSE 21501
// SetLives ( i , 1000 ) ;
21489: LD_VAR 0 1
21493: PPUSH
21494: LD_INT 1000
21496: PPUSH
21497: NOP4
21501: GO 21471
21503: POP
21504: POP
// until p > 20 ;
21505: LD_VAR 0 3
21509: PUSH
21510: LD_INT 20
21512: GREATER
21513: IFFALSE 21440
// end ;
21515: PPOPN 3
21517: END
// every 0 0$1 trigger StreamModeActive and sTime do
21518: LD_EXP 26
21522: PUSH
21523: LD_EXP 77
21527: AND
21528: IFFALSE 21563
21530: GO 21532
21532: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21533: LD_INT 28
21535: PPUSH
21536: NOP4
21540: PPUSH
21541: LD_INT 2
21543: PPUSH
21544: NOP4
// SetTech ( tech_tauField , your_side , state_researched ) ;
21548: LD_INT 30
21550: PPUSH
21551: NOP4
21555: PPUSH
21556: LD_INT 2
21558: PPUSH
21559: NOP4
// end ;
21563: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21564: LD_EXP 26
21568: PUSH
21569: LD_EXP 78
21573: AND
21574: IFFALSE 21695
21576: GO 21578
21578: DISABLE
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21583: LD_ADDR_VAR 0 2
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: NOP4
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 21
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 3
21612: PUSH
21613: LD_INT 23
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: PPUSH
21632: NOP4
21636: ST_TO_ADDR
// if not tmp then
21637: LD_VAR 0 2
21641: NOT
21642: IFFALSE 21646
// exit ;
21644: GO 21695
// for i in tmp do
21646: LD_ADDR_VAR 0 1
21650: PUSH
21651: LD_VAR 0 2
21655: PUSH
21656: FOR_IN
21657: IFFALSE 21693
// begin if Crawls ( i ) then
21659: LD_VAR 0 1
21663: PPUSH
21664: NOP4
21668: IFFALSE 21679
// ComWalk ( i ) ;
21670: LD_VAR 0 1
21674: PPUSH
21675: NOP4
// SetClass ( i , 2 ) ;
21679: LD_VAR 0 1
21683: PPUSH
21684: LD_INT 2
21686: PPUSH
21687: NOP4
// end ;
21691: GO 21656
21693: POP
21694: POP
// end ;
21695: PPOPN 2
21697: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21698: LD_EXP 26
21702: PUSH
21703: LD_EXP 79
21707: AND
21708: IFFALSE 21996
21710: GO 21712
21712: DISABLE
21713: LD_INT 0
21715: PPUSH
21716: PPUSH
21717: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21718: NOP4
21722: PPUSH
21723: LD_INT 9
21725: PPUSH
21726: LD_INT 1
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: NOP4
// ChangeSideFog ( 9 , your_side ) ;
21736: LD_INT 9
21738: PPUSH
21739: NOP4
21743: PPUSH
21744: NOP4
// uc_side := 9 ;
21748: LD_ADDR_OWVAR 20
21752: PUSH
21753: LD_INT 9
21755: ST_TO_ADDR
// uc_nation := 2 ;
21756: LD_ADDR_OWVAR 21
21760: PUSH
21761: LD_INT 2
21763: ST_TO_ADDR
// hc_name := Dark Warrior ;
21764: LD_ADDR_OWVAR 26
21768: PUSH
21769: LD_STRING Dark Warrior
21771: ST_TO_ADDR
// hc_gallery :=  ;
21772: LD_ADDR_OWVAR 33
21776: PUSH
21777: LD_STRING 
21779: ST_TO_ADDR
// hc_noskilllimit := true ;
21780: LD_ADDR_OWVAR 76
21784: PUSH
21785: LD_INT 1
21787: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21788: LD_ADDR_OWVAR 31
21792: PUSH
21793: LD_INT 30
21795: PUSH
21796: LD_INT 30
21798: PUSH
21799: LD_INT 30
21801: PUSH
21802: LD_INT 30
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
// un := CreateHuman ;
21811: LD_ADDR_VAR 0 3
21815: PUSH
21816: NOP4
21820: ST_TO_ADDR
// hc_noskilllimit := false ;
21821: LD_ADDR_OWVAR 76
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21829: LD_VAR 0 3
21833: PPUSH
21834: LD_INT 1
21836: PPUSH
21837: NOP4
// ToLua ( playRanger() ) ;
21841: LD_STRING playRanger()
21843: PPUSH
21844: NOP4
// p := 0 ;
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21856: LD_INT 35
21858: PPUSH
21859: NOP4
// p := p + 1 ;
21863: LD_ADDR_VAR 0 2
21867: PUSH
21868: LD_VAR 0 2
21872: PUSH
21873: LD_INT 1
21875: PLUS
21876: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21877: LD_VAR 0 3
21881: PPUSH
21882: NOP4
21886: PUSH
21887: LD_INT 1000
21889: LESS
21890: IFFALSE 21904
// SetLives ( un , 1000 ) ;
21892: LD_VAR 0 3
21896: PPUSH
21897: LD_INT 1000
21899: PPUSH
21900: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21904: LD_VAR 0 3
21908: PPUSH
21909: LD_INT 81
21911: PUSH
21912: NOP4
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 91
21923: PUSH
21924: LD_VAR 0 3
21928: PUSH
21929: LD_INT 30
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PPUSH
21941: NOP4
21945: PPUSH
21946: LD_VAR 0 3
21950: PPUSH
21951: NOP4
21955: PPUSH
21956: NOP4
// until p > 80 or IsDead ( un ) ;
21960: LD_VAR 0 2
21964: PUSH
21965: LD_INT 80
21967: GREATER
21968: PUSH
21969: LD_VAR 0 3
21973: PPUSH
21974: NOP4
21978: OR
21979: IFFALSE 21856
// if un then
21981: LD_VAR 0 3
21985: IFFALSE 21996
// RemoveUnit ( un ) ;
21987: LD_VAR 0 3
21991: PPUSH
21992: NOP4
// end ;
21996: PPOPN 3
21998: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21999: LD_EXP 80
22003: IFFALSE 22119
22005: GO 22007
22007: DISABLE
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 81
22020: PUSH
22021: NOP4
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 21
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PPUSH
22044: NOP4
22048: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22049: LD_STRING playComputer()
22051: PPUSH
22052: NOP4
// if not tmp then
22056: LD_VAR 0 2
22060: NOT
22061: IFFALSE 22065
// exit ;
22063: GO 22119
// for i in tmp do
22065: LD_ADDR_VAR 0 1
22069: PUSH
22070: LD_VAR 0 2
22074: PUSH
22075: FOR_IN
22076: IFFALSE 22117
// for j := 1 to 4 do
22078: LD_ADDR_VAR 0 3
22082: PUSH
22083: DOUBLE
22084: LD_INT 1
22086: DEC
22087: ST_TO_ADDR
22088: LD_INT 4
22090: PUSH
22091: FOR_TO
22092: IFFALSE 22113
// SetSkill ( i , j , 10 ) ;
22094: LD_VAR 0 1
22098: PPUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: LD_INT 10
22106: PPUSH
22107: NOP4
22111: GO 22091
22113: POP
22114: POP
22115: GO 22075
22117: POP
22118: POP
// end ;
22119: PPOPN 3
22121: END
// every 0 0$1 trigger s30 do var i , tmp ;
22122: LD_EXP 81
22126: IFFALSE 22195
22128: GO 22130
22130: DISABLE
22131: LD_INT 0
22133: PPUSH
22134: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_INT 22
22142: PUSH
22143: NOP4
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PPUSH
22152: NOP4
22156: ST_TO_ADDR
// if not tmp then
22157: LD_VAR 0 2
22161: NOT
22162: IFFALSE 22166
// exit ;
22164: GO 22195
// for i in tmp do
22166: LD_ADDR_VAR 0 1
22170: PUSH
22171: LD_VAR 0 2
22175: PUSH
22176: FOR_IN
22177: IFFALSE 22193
// SetLives ( i , 300 ) ;
22179: LD_VAR 0 1
22183: PPUSH
22184: LD_INT 300
22186: PPUSH
22187: NOP4
22191: GO 22176
22193: POP
22194: POP
// end ;
22195: PPOPN 2
22197: END
// every 0 0$1 trigger s60 do var i , tmp ;
22198: LD_EXP 82
22202: IFFALSE 22271
22204: GO 22206
22206: DISABLE
22207: LD_INT 0
22209: PPUSH
22210: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22211: LD_ADDR_VAR 0 2
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: NOP4
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PPUSH
22228: NOP4
22232: ST_TO_ADDR
// if not tmp then
22233: LD_VAR 0 2
22237: NOT
22238: IFFALSE 22242
// exit ;
22240: GO 22271
// for i in tmp do
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: FOR_IN
22253: IFFALSE 22269
// SetLives ( i , 600 ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_INT 600
22262: PPUSH
22263: NOP4
22267: GO 22252
22269: POP
22270: POP
// end ;
22271: PPOPN 2
22273: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22274: LD_INT 0
22276: PPUSH
// case cmd of 301 :
22277: LD_VAR 0 1
22281: PUSH
22282: LD_INT 301
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22322
22290: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22291: LD_VAR 0 6
22295: PPUSH
22296: LD_VAR 0 7
22300: PPUSH
22301: LD_VAR 0 8
22305: PPUSH
22306: LD_VAR 0 4
22310: PPUSH
22311: LD_VAR 0 5
22315: PPUSH
22316: CALL 23523 0 5
22320: GO 22443
22322: LD_INT 302
22324: DOUBLE
22325: EQUAL
22326: IFTRUE 22330
22328: GO 22367
22330: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22331: LD_VAR 0 6
22335: PPUSH
22336: LD_VAR 0 7
22340: PPUSH
22341: LD_VAR 0 8
22345: PPUSH
22346: LD_VAR 0 9
22350: PPUSH
22351: LD_VAR 0 4
22355: PPUSH
22356: LD_VAR 0 5
22360: PPUSH
22361: CALL 23614 0 6
22365: GO 22443
22367: LD_INT 303
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22375
22373: GO 22412
22375: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22376: LD_VAR 0 6
22380: PPUSH
22381: LD_VAR 0 7
22385: PPUSH
22386: LD_VAR 0 8
22390: PPUSH
22391: LD_VAR 0 9
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: CALL 22448 0 6
22410: GO 22443
22412: LD_INT 304
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22442
22420: POP
// hHackTeleport ( unit , x , y ) ; end ;
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_VAR 0 4
22430: PPUSH
22431: LD_VAR 0 5
22435: PPUSH
22436: CALL 24207 0 3
22440: GO 22443
22442: POP
// end ;
22443: LD_VAR 0 12
22447: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22448: LD_INT 0
22450: PPUSH
22451: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22452: LD_VAR 0 1
22456: PUSH
22457: LD_INT 1
22459: LESS
22460: PUSH
22461: LD_VAR 0 1
22465: PUSH
22466: LD_INT 3
22468: GREATER
22469: OR
22470: PUSH
22471: LD_VAR 0 5
22475: PPUSH
22476: LD_VAR 0 6
22480: PPUSH
22481: NOP4
22485: OR
22486: IFFALSE 22490
// exit ;
22488: GO 23210
// uc_side := your_side ;
22490: LD_ADDR_OWVAR 20
22494: PUSH
22495: NOP4
22499: ST_TO_ADDR
// uc_nation := nation ;
22500: LD_ADDR_OWVAR 21
22504: PUSH
22505: LD_VAR 0 1
22509: ST_TO_ADDR
// bc_level = 1 ;
22510: LD_ADDR_OWVAR 43
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// case btype of 1 :
22518: LD_VAR 0 2
22522: PUSH
22523: LD_INT 1
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22542
22531: POP
// bc_type := b_depot ; 2 :
22532: LD_ADDR_OWVAR 42
22536: PUSH
22537: LD_INT 0
22539: ST_TO_ADDR
22540: GO 23154
22542: LD_INT 2
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22561
22550: POP
// bc_type := b_warehouse ; 3 :
22551: LD_ADDR_OWVAR 42
22555: PUSH
22556: LD_INT 1
22558: ST_TO_ADDR
22559: GO 23154
22561: LD_INT 3
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22580
22569: POP
// bc_type := b_lab ; 4 .. 9 :
22570: LD_ADDR_OWVAR 42
22574: PUSH
22575: LD_INT 6
22577: ST_TO_ADDR
22578: GO 23154
22580: LD_INT 4
22582: DOUBLE
22583: GREATEREQUAL
22584: IFFALSE 22592
22586: LD_INT 9
22588: DOUBLE
22589: LESSEQUAL
22590: IFTRUE 22594
22592: GO 22646
22594: POP
// begin bc_type := b_lab_half ;
22595: LD_ADDR_OWVAR 42
22599: PUSH
22600: LD_INT 7
22602: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22603: LD_ADDR_OWVAR 44
22607: PUSH
22608: LD_INT 10
22610: PUSH
22611: LD_INT 11
22613: PUSH
22614: LD_INT 12
22616: PUSH
22617: LD_INT 15
22619: PUSH
22620: LD_INT 14
22622: PUSH
22623: LD_INT 13
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: LD_VAR 0 2
22638: PUSH
22639: LD_INT 3
22641: MINUS
22642: ARRAY
22643: ST_TO_ADDR
// end ; 10 .. 13 :
22644: GO 23154
22646: LD_INT 10
22648: DOUBLE
22649: GREATEREQUAL
22650: IFFALSE 22658
22652: LD_INT 13
22654: DOUBLE
22655: LESSEQUAL
22656: IFTRUE 22660
22658: GO 22737
22660: POP
// begin bc_type := b_lab_full ;
22661: LD_ADDR_OWVAR 42
22665: PUSH
22666: LD_INT 8
22668: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22669: LD_ADDR_OWVAR 44
22673: PUSH
22674: LD_INT 10
22676: PUSH
22677: LD_INT 12
22679: PUSH
22680: LD_INT 14
22682: PUSH
22683: LD_INT 13
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: PUSH
22692: LD_VAR 0 2
22696: PUSH
22697: LD_INT 9
22699: MINUS
22700: ARRAY
22701: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22702: LD_ADDR_OWVAR 45
22706: PUSH
22707: LD_INT 11
22709: PUSH
22710: LD_INT 15
22712: PUSH
22713: LD_INT 12
22715: PUSH
22716: LD_INT 15
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: LD_VAR 0 2
22729: PUSH
22730: LD_INT 9
22732: MINUS
22733: ARRAY
22734: ST_TO_ADDR
// end ; 14 :
22735: GO 23154
22737: LD_INT 14
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22756
22745: POP
// bc_type := b_workshop ; 15 :
22746: LD_ADDR_OWVAR 42
22750: PUSH
22751: LD_INT 2
22753: ST_TO_ADDR
22754: GO 23154
22756: LD_INT 15
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22775
22764: POP
// bc_type := b_factory ; 16 :
22765: LD_ADDR_OWVAR 42
22769: PUSH
22770: LD_INT 3
22772: ST_TO_ADDR
22773: GO 23154
22775: LD_INT 16
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22794
22783: POP
// bc_type := b_ext_gun ; 17 :
22784: LD_ADDR_OWVAR 42
22788: PUSH
22789: LD_INT 17
22791: ST_TO_ADDR
22792: GO 23154
22794: LD_INT 17
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 22830
22802: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22803: LD_ADDR_OWVAR 42
22807: PUSH
22808: LD_INT 19
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 19
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: LIST
22821: PUSH
22822: LD_VAR 0 1
22826: ARRAY
22827: ST_TO_ADDR
22828: GO 23154
22830: LD_INT 18
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22849
22838: POP
// bc_type := b_ext_radar ; 19 :
22839: LD_ADDR_OWVAR 42
22843: PUSH
22844: LD_INT 20
22846: ST_TO_ADDR
22847: GO 23154
22849: LD_INT 19
22851: DOUBLE
22852: EQUAL
22853: IFTRUE 22857
22855: GO 22868
22857: POP
// bc_type := b_ext_radio ; 20 :
22858: LD_ADDR_OWVAR 42
22862: PUSH
22863: LD_INT 22
22865: ST_TO_ADDR
22866: GO 23154
22868: LD_INT 20
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22887
22876: POP
// bc_type := b_ext_siberium ; 21 :
22877: LD_ADDR_OWVAR 42
22881: PUSH
22882: LD_INT 21
22884: ST_TO_ADDR
22885: GO 23154
22887: LD_INT 21
22889: DOUBLE
22890: EQUAL
22891: IFTRUE 22895
22893: GO 22906
22895: POP
// bc_type := b_ext_computer ; 22 :
22896: LD_ADDR_OWVAR 42
22900: PUSH
22901: LD_INT 24
22903: ST_TO_ADDR
22904: GO 23154
22906: LD_INT 22
22908: DOUBLE
22909: EQUAL
22910: IFTRUE 22914
22912: GO 22925
22914: POP
// bc_type := b_ext_track ; 23 :
22915: LD_ADDR_OWVAR 42
22919: PUSH
22920: LD_INT 16
22922: ST_TO_ADDR
22923: GO 23154
22925: LD_INT 23
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 22944
22933: POP
// bc_type := b_ext_laser ; 24 :
22934: LD_ADDR_OWVAR 42
22938: PUSH
22939: LD_INT 25
22941: ST_TO_ADDR
22942: GO 23154
22944: LD_INT 24
22946: DOUBLE
22947: EQUAL
22948: IFTRUE 22952
22950: GO 22963
22952: POP
// bc_type := b_control_tower ; 25 :
22953: LD_ADDR_OWVAR 42
22957: PUSH
22958: LD_INT 36
22960: ST_TO_ADDR
22961: GO 23154
22963: LD_INT 25
22965: DOUBLE
22966: EQUAL
22967: IFTRUE 22971
22969: GO 22982
22971: POP
// bc_type := b_breastwork ; 26 :
22972: LD_ADDR_OWVAR 42
22976: PUSH
22977: LD_INT 31
22979: ST_TO_ADDR
22980: GO 23154
22982: LD_INT 26
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23001
22990: POP
// bc_type := b_bunker ; 27 :
22991: LD_ADDR_OWVAR 42
22995: PUSH
22996: LD_INT 32
22998: ST_TO_ADDR
22999: GO 23154
23001: LD_INT 27
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23020
23009: POP
// bc_type := b_turret ; 28 :
23010: LD_ADDR_OWVAR 42
23014: PUSH
23015: LD_INT 33
23017: ST_TO_ADDR
23018: GO 23154
23020: LD_INT 28
23022: DOUBLE
23023: EQUAL
23024: IFTRUE 23028
23026: GO 23039
23028: POP
// bc_type := b_armoury ; 29 :
23029: LD_ADDR_OWVAR 42
23033: PUSH
23034: LD_INT 4
23036: ST_TO_ADDR
23037: GO 23154
23039: LD_INT 29
23041: DOUBLE
23042: EQUAL
23043: IFTRUE 23047
23045: GO 23058
23047: POP
// bc_type := b_barracks ; 30 :
23048: LD_ADDR_OWVAR 42
23052: PUSH
23053: LD_INT 5
23055: ST_TO_ADDR
23056: GO 23154
23058: LD_INT 30
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23077
23066: POP
// bc_type := b_solar_power ; 31 :
23067: LD_ADDR_OWVAR 42
23071: PUSH
23072: LD_INT 27
23074: ST_TO_ADDR
23075: GO 23154
23077: LD_INT 31
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23096
23085: POP
// bc_type := b_oil_power ; 32 :
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 26
23093: ST_TO_ADDR
23094: GO 23154
23096: LD_INT 32
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23104
23102: GO 23115
23104: POP
// bc_type := b_siberite_power ; 33 :
23105: LD_ADDR_OWVAR 42
23109: PUSH
23110: LD_INT 28
23112: ST_TO_ADDR
23113: GO 23154
23115: LD_INT 33
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23134
23123: POP
// bc_type := b_oil_mine ; 34 :
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 29
23131: ST_TO_ADDR
23132: GO 23154
23134: LD_INT 34
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23153
23142: POP
// bc_type := b_siberite_mine ; end ;
23143: LD_ADDR_OWVAR 42
23147: PUSH
23148: LD_INT 30
23150: ST_TO_ADDR
23151: GO 23154
23153: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23154: LD_ADDR_VAR 0 8
23158: PUSH
23159: LD_VAR 0 5
23163: PPUSH
23164: LD_VAR 0 6
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: NOP4
23178: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23179: NOP4
23183: PUSH
23184: LD_INT 32
23186: PUSH
23187: LD_INT 33
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: IN
23194: IFFALSE 23210
// PlaceWeaponTurret ( b , weapon ) ;
23196: LD_VAR 0 8
23200: PPUSH
23201: LD_VAR 0 4
23205: PPUSH
23206: NOP4
// end ;
23210: LD_VAR 0 7
23214: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
23220: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23221: LD_ADDR_VAR 0 4
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: NOP4
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: LD_INT 30
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: NOP4
23274: ST_TO_ADDR
// if not tmp then
23275: LD_VAR 0 4
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23343
// for i in tmp do
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_VAR 0 4
23293: PUSH
23294: FOR_IN
23295: IFFALSE 23341
// for j = 1 to 3 do
23297: LD_ADDR_VAR 0 3
23301: PUSH
23302: DOUBLE
23303: LD_INT 1
23305: DEC
23306: ST_TO_ADDR
23307: LD_INT 3
23309: PUSH
23310: FOR_TO
23311: IFFALSE 23337
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: NOP4
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_INT 99999
23330: PPUSH
23331: NOP4
23335: GO 23310
23337: POP
23338: POP
23339: GO 23294
23341: POP
23342: POP
// end ;
23343: LD_VAR 0 1
23347: RET
// export function hHackSetLevel10 ; var i , j ; begin
23348: LD_INT 0
23350: PPUSH
23351: PPUSH
23352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PPUSH
23368: NOP4
23372: PUSH
23373: FOR_IN
23374: IFFALSE 23426
// if IsSelected ( i ) then
23376: LD_VAR 0 2
23380: PPUSH
23381: NOP4
23385: IFFALSE 23424
// begin for j := 1 to 4 do
23387: LD_ADDR_VAR 0 3
23391: PUSH
23392: DOUBLE
23393: LD_INT 1
23395: DEC
23396: ST_TO_ADDR
23397: LD_INT 4
23399: PUSH
23400: FOR_TO
23401: IFFALSE 23422
// SetSkill ( i , j , 10 ) ;
23403: LD_VAR 0 2
23407: PPUSH
23408: LD_VAR 0 3
23412: PPUSH
23413: LD_INT 10
23415: PPUSH
23416: NOP4
23420: GO 23400
23422: POP
23423: POP
// end ;
23424: GO 23373
23426: POP
23427: POP
// end ;
23428: LD_VAR 0 1
23432: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23433: LD_INT 0
23435: PPUSH
23436: PPUSH
23437: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 22
23445: PUSH
23446: NOP4
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 21
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PPUSH
23469: NOP4
23473: PUSH
23474: FOR_IN
23475: IFFALSE 23516
// begin for j := 1 to 4 do
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: DOUBLE
23483: LD_INT 1
23485: DEC
23486: ST_TO_ADDR
23487: LD_INT 4
23489: PUSH
23490: FOR_TO
23491: IFFALSE 23512
// SetSkill ( i , j , 10 ) ;
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_INT 10
23505: PPUSH
23506: NOP4
23510: GO 23490
23512: POP
23513: POP
// end ;
23514: GO 23474
23516: POP
23517: POP
// end ;
23518: LD_VAR 0 1
23522: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23523: LD_INT 0
23525: PPUSH
// uc_side := your_side ;
23526: LD_ADDR_OWVAR 20
23530: PUSH
23531: NOP4
23535: ST_TO_ADDR
// uc_nation := nation ;
23536: LD_ADDR_OWVAR 21
23540: PUSH
23541: LD_VAR 0 1
23545: ST_TO_ADDR
// InitHc ;
23546: NOP4
// PrepareHuman ( false , class , skill ) ;
23550: LD_INT 0
23552: PPUSH
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_VAR 0 3
23562: PPUSH
23563: NOP4
// if HexInfo ( x , y ) = 0 then
23567: LD_VAR 0 4
23571: PPUSH
23572: LD_VAR 0 5
23576: PPUSH
23577: NOP4
23581: PUSH
23582: LD_INT 0
23584: EQUAL
23585: IFFALSE 23609
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23587: NOP4
23591: PPUSH
23592: LD_VAR 0 4
23596: PPUSH
23597: LD_VAR 0 5
23601: PPUSH
23602: LD_INT 1
23604: PPUSH
23605: NOP4
// end ;
23609: LD_VAR 0 6
23613: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23614: LD_INT 0
23616: PPUSH
23617: PPUSH
// uc_side := your_side ;
23618: LD_ADDR_OWVAR 20
23622: PUSH
23623: NOP4
23627: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23628: LD_VAR 0 1
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: LD_INT 3
23641: PUSH
23642: LD_INT 4
23644: PUSH
23645: LD_INT 5
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: IN
23655: IFFALSE 23667
// uc_nation := nation_american else
23657: LD_ADDR_OWVAR 21
23661: PUSH
23662: LD_INT 1
23664: ST_TO_ADDR
23665: GO 23710
// if chassis in [ 11 , 12 , 13 , 14 ] then
23667: LD_VAR 0 1
23671: PUSH
23672: LD_INT 11
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 13
23680: PUSH
23681: LD_INT 14
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: IN
23690: IFFALSE 23702
// uc_nation := nation_arabian else
23692: LD_ADDR_OWVAR 21
23696: PUSH
23697: LD_INT 2
23699: ST_TO_ADDR
23700: GO 23710
// uc_nation := nation_russian ;
23702: LD_ADDR_OWVAR 21
23706: PUSH
23707: LD_INT 3
23709: ST_TO_ADDR
// vc_chassis := chassis ;
23710: LD_ADDR_OWVAR 37
23714: PUSH
23715: LD_VAR 0 1
23719: ST_TO_ADDR
// vc_engine := engine ;
23720: LD_ADDR_OWVAR 39
23724: PUSH
23725: LD_VAR 0 2
23729: ST_TO_ADDR
// vc_control := control ;
23730: LD_ADDR_OWVAR 38
23734: PUSH
23735: LD_VAR 0 3
23739: ST_TO_ADDR
// vc_weapon := weapon ;
23740: LD_ADDR_OWVAR 40
23744: PUSH
23745: LD_VAR 0 4
23749: ST_TO_ADDR
// un := CreateVehicle ;
23750: LD_ADDR_VAR 0 8
23754: PUSH
23755: NOP4
23759: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23760: LD_VAR 0 8
23764: PPUSH
23765: LD_INT 0
23767: PPUSH
23768: LD_INT 5
23770: PPUSH
23771: NOP4
23775: PPUSH
23776: NOP4
// PlaceUnitXY ( un , x , y , true ) ;
23780: LD_VAR 0 8
23784: PPUSH
23785: LD_VAR 0 5
23789: PPUSH
23790: LD_VAR 0 6
23794: PPUSH
23795: LD_INT 1
23797: PPUSH
23798: NOP4
// end ;
23802: LD_VAR 0 7
23806: RET
// export hInvincible ; every 1 do
23807: GO 23809
23809: DISABLE
// hInvincible := [ ] ;
23810: LD_ADDR_EXP 83
23814: PUSH
23815: EMPTY
23816: ST_TO_ADDR
23817: END
// every 10 do var i ;
23818: GO 23820
23820: DISABLE
23821: LD_INT 0
23823: PPUSH
// begin enable ;
23824: ENABLE
// if not hInvincible then
23825: LD_EXP 83
23829: NOT
23830: IFFALSE 23834
// exit ;
23832: GO 23878
// for i in hInvincible do
23834: LD_ADDR_VAR 0 1
23838: PUSH
23839: LD_EXP 83
23843: PUSH
23844: FOR_IN
23845: IFFALSE 23876
// if GetLives ( i ) < 1000 then
23847: LD_VAR 0 1
23851: PPUSH
23852: NOP4
23856: PUSH
23857: LD_INT 1000
23859: LESS
23860: IFFALSE 23874
// SetLives ( i , 1000 ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: LD_INT 1000
23869: PPUSH
23870: NOP4
23874: GO 23844
23876: POP
23877: POP
// end ;
23878: PPOPN 1
23880: END
// export function hHackInvincible ; var i ; begin
23881: LD_INT 0
23883: PPUSH
23884: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23885: LD_ADDR_VAR 0 2
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 21
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 21
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: PPUSH
23918: NOP4
23922: PUSH
23923: FOR_IN
23924: IFFALSE 23985
// if IsSelected ( i ) then
23926: LD_VAR 0 2
23930: PPUSH
23931: NOP4
23935: IFFALSE 23983
// begin if i in hInvincible then
23937: LD_VAR 0 2
23941: PUSH
23942: LD_EXP 83
23946: IN
23947: IFFALSE 23967
// hInvincible := hInvincible diff i else
23949: LD_ADDR_EXP 83
23953: PUSH
23954: LD_EXP 83
23958: PUSH
23959: LD_VAR 0 2
23963: DIFF
23964: ST_TO_ADDR
23965: GO 23983
// hInvincible := hInvincible union i ;
23967: LD_ADDR_EXP 83
23971: PUSH
23972: LD_EXP 83
23976: PUSH
23977: LD_VAR 0 2
23981: UNION
23982: ST_TO_ADDR
// end ;
23983: GO 23923
23985: POP
23986: POP
// end ;
23987: LD_VAR 0 1
23991: RET
// export function hHackInvisible ; var i , j ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
23996: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23997: LD_ADDR_VAR 0 2
24001: PUSH
24002: LD_INT 21
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PPUSH
24012: NOP4
24016: PUSH
24017: FOR_IN
24018: IFFALSE 24042
// if IsSelected ( i ) then
24020: LD_VAR 0 2
24024: PPUSH
24025: NOP4
24029: IFFALSE 24040
// ComForceInvisible ( i ) ;
24031: LD_VAR 0 2
24035: PPUSH
24036: NOP4
24040: GO 24017
24042: POP
24043: POP
// end ;
24044: LD_VAR 0 1
24048: RET
// export function hHackChangeYourSide ; begin
24049: LD_INT 0
24051: PPUSH
// if your_side = 8 then
24052: NOP4
24056: PUSH
24057: LD_INT 8
24059: EQUAL
24060: IFFALSE 24072
// your_side := 0 else
24062: LD_ADDR_OWVAR 2
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
24070: GO 24086
// your_side := your_side + 1 ;
24072: LD_ADDR_OWVAR 2
24076: PUSH
24077: NOP4
24081: PUSH
24082: LD_INT 1
24084: PLUS
24085: ST_TO_ADDR
// end ;
24086: LD_VAR 0 1
24090: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24091: LD_INT 0
24093: PPUSH
24094: PPUSH
24095: PPUSH
// for i in all_units do
24096: LD_ADDR_VAR 0 2
24100: PUSH
24101: NOP4
24105: PUSH
24106: FOR_IN
24107: IFFALSE 24185
// if IsSelected ( i ) then
24109: LD_VAR 0 2
24113: PPUSH
24114: NOP4
24118: IFFALSE 24183
// begin j := GetSide ( i ) ;
24120: LD_ADDR_VAR 0 3
24124: PUSH
24125: LD_VAR 0 2
24129: PPUSH
24130: NOP4
24134: ST_TO_ADDR
// if j = 8 then
24135: LD_VAR 0 3
24139: PUSH
24140: LD_INT 8
24142: EQUAL
24143: IFFALSE 24155
// j := 0 else
24145: LD_ADDR_VAR 0 3
24149: PUSH
24150: LD_INT 0
24152: ST_TO_ADDR
24153: GO 24169
// j := j + 1 ;
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: LD_INT 1
24167: PLUS
24168: ST_TO_ADDR
// SetSide ( i , j ) ;
24169: LD_VAR 0 2
24173: PPUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: NOP4
// end ;
24183: GO 24106
24185: POP
24186: POP
// end ;
24187: LD_VAR 0 1
24191: RET
// export function hHackFog ; begin
24192: LD_INT 0
24194: PPUSH
// FogOff ( true ) ;
24195: LD_INT 1
24197: PPUSH
24198: NOP4
// end ;
24202: LD_VAR 0 1
24206: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24207: LD_INT 0
24209: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24210: LD_VAR 0 1
24214: PPUSH
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: LD_INT 1
24230: PPUSH
24231: NOP4
// CenterOnXY ( x , y ) ;
24235: LD_VAR 0 2
24239: PPUSH
24240: LD_VAR 0 3
24244: PPUSH
24245: NOP4
// end ;
24249: LD_VAR 0 4
24253: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24254: LD_INT 0
24256: PPUSH
24257: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24258: LD_VAR 0 1
24262: NOT
24263: PUSH
24264: LD_VAR 0 2
24268: PPUSH
24269: LD_VAR 0 3
24273: PPUSH
24274: NOP4
24278: NOT
24279: OR
24280: PUSH
24281: LD_VAR 0 1
24285: PPUSH
24286: NOP4
24290: PUSH
24291: LD_INT 3
24293: NONEQUAL
24294: PUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: NOP4
24304: PUSH
24305: LD_INT 1
24307: EQUAL
24308: NOT
24309: AND
24310: OR
24311: IFFALSE 24315
// exit ;
24313: GO 24464
// if GetType ( factory ) = unit_human then
24315: LD_VAR 0 1
24319: PPUSH
24320: NOP4
24324: PUSH
24325: LD_INT 1
24327: EQUAL
24328: IFFALSE 24345
// factory := IsInUnit ( factory ) ;
24330: LD_ADDR_VAR 0 1
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: NOP4
24344: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24345: LD_VAR 0 1
24349: PPUSH
24350: NOP4
24354: PUSH
24355: LD_INT 3
24357: NONEQUAL
24358: IFFALSE 24362
// exit ;
24360: GO 24464
// if HexInfo ( x , y ) = factory then
24362: LD_VAR 0 2
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: NOP4
24376: PUSH
24377: LD_VAR 0 1
24381: EQUAL
24382: IFFALSE 24409
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24384: LD_ADDR_EXP 84
24388: PUSH
24389: LD_EXP 84
24393: PPUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: LD_INT 0
24401: PPUSH
24402: NOP4
24406: ST_TO_ADDR
24407: GO 24460
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24409: LD_ADDR_EXP 84
24413: PUSH
24414: LD_EXP 84
24418: PPUSH
24419: LD_VAR 0 1
24423: PPUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: NOP4
24433: PUSH
24434: LD_VAR 0 1
24438: PUSH
24439: LD_VAR 0 2
24443: PUSH
24444: LD_VAR 0 3
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: PPUSH
24455: NOP4
24459: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24460: CALL 24469 0 0
// end ;
24464: LD_VAR 0 4
24468: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
24473: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24474: LD_STRING resetFactoryWaypoint();
24476: PPUSH
24477: NOP4
// if factoryWaypoints then
24481: LD_EXP 84
24485: IFFALSE 24611
// begin list := PrepareArray ( factoryWaypoints ) ;
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: LD_EXP 84
24496: PPUSH
24497: CALL 70988 0 1
24501: ST_TO_ADDR
// for i := 1 to list do
24502: LD_ADDR_VAR 0 2
24506: PUSH
24507: DOUBLE
24508: LD_INT 1
24510: DEC
24511: ST_TO_ADDR
24512: LD_VAR 0 3
24516: PUSH
24517: FOR_TO
24518: IFFALSE 24609
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24520: LD_STRING setFactoryWaypointXY(
24522: PUSH
24523: LD_VAR 0 3
24527: PUSH
24528: LD_VAR 0 2
24532: ARRAY
24533: PUSH
24534: LD_INT 1
24536: ARRAY
24537: STR
24538: PUSH
24539: LD_STRING ,
24541: STR
24542: PUSH
24543: LD_VAR 0 3
24547: PUSH
24548: LD_VAR 0 2
24552: ARRAY
24553: PUSH
24554: LD_INT 2
24556: ARRAY
24557: STR
24558: PUSH
24559: LD_STRING ,
24561: STR
24562: PUSH
24563: LD_VAR 0 3
24567: PUSH
24568: LD_VAR 0 2
24572: ARRAY
24573: PUSH
24574: LD_INT 3
24576: ARRAY
24577: STR
24578: PUSH
24579: LD_STRING ,
24581: STR
24582: PUSH
24583: LD_VAR 0 3
24587: PUSH
24588: LD_VAR 0 2
24592: ARRAY
24593: PUSH
24594: LD_INT 4
24596: ARRAY
24597: STR
24598: PUSH
24599: LD_STRING )
24601: STR
24602: PPUSH
24603: NOP4
24607: GO 24517
24609: POP
24610: POP
// end ; end ;
24611: LD_VAR 0 1
24615: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24616: LD_INT 0
24618: PPUSH
// if HexInfo ( x , y ) = warehouse then
24619: LD_VAR 0 2
24623: PPUSH
24624: LD_VAR 0 3
24628: PPUSH
24629: NOP4
24633: PUSH
24634: LD_VAR 0 1
24638: EQUAL
24639: IFFALSE 24666
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24641: LD_ADDR_EXP 85
24645: PUSH
24646: LD_EXP 85
24650: PPUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: LD_INT 0
24658: PPUSH
24659: NOP4
24663: ST_TO_ADDR
24664: GO 24717
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24666: LD_ADDR_EXP 85
24670: PUSH
24671: LD_EXP 85
24675: PPUSH
24676: LD_VAR 0 1
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: NOP4
24690: PUSH
24691: LD_VAR 0 1
24695: PUSH
24696: LD_VAR 0 2
24700: PUSH
24701: LD_VAR 0 3
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: PPUSH
24712: NOP4
24716: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24717: CALL 24726 0 0
// end ;
24721: LD_VAR 0 4
24725: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24726: LD_INT 0
24728: PPUSH
24729: PPUSH
24730: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24731: LD_STRING resetWarehouseGatheringPoints();
24733: PPUSH
24734: NOP4
// if warehouseGatheringPoints then
24738: LD_EXP 85
24742: IFFALSE 24868
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24744: LD_ADDR_VAR 0 3
24748: PUSH
24749: LD_EXP 85
24753: PPUSH
24754: CALL 70988 0 1
24758: ST_TO_ADDR
// for i := 1 to list do
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: DOUBLE
24765: LD_INT 1
24767: DEC
24768: ST_TO_ADDR
24769: LD_VAR 0 3
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24866
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24777: LD_STRING setWarehouseGatheringPointXY(
24779: PUSH
24780: LD_VAR 0 3
24784: PUSH
24785: LD_VAR 0 2
24789: ARRAY
24790: PUSH
24791: LD_INT 1
24793: ARRAY
24794: STR
24795: PUSH
24796: LD_STRING ,
24798: STR
24799: PUSH
24800: LD_VAR 0 3
24804: PUSH
24805: LD_VAR 0 2
24809: ARRAY
24810: PUSH
24811: LD_INT 2
24813: ARRAY
24814: STR
24815: PUSH
24816: LD_STRING ,
24818: STR
24819: PUSH
24820: LD_VAR 0 3
24824: PUSH
24825: LD_VAR 0 2
24829: ARRAY
24830: PUSH
24831: LD_INT 3
24833: ARRAY
24834: STR
24835: PUSH
24836: LD_STRING ,
24838: STR
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_VAR 0 2
24849: ARRAY
24850: PUSH
24851: LD_INT 4
24853: ARRAY
24854: STR
24855: PUSH
24856: LD_STRING )
24858: STR
24859: PPUSH
24860: NOP4
24864: GO 24774
24866: POP
24867: POP
// end ; end ;
24868: LD_VAR 0 1
24872: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24873: LD_EXP 85
24877: IFFALSE 25562
24879: GO 24881
24881: DISABLE
24882: LD_INT 0
24884: PPUSH
24885: PPUSH
24886: PPUSH
24887: PPUSH
24888: PPUSH
24889: PPUSH
24890: PPUSH
24891: PPUSH
24892: PPUSH
// begin enable ;
24893: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24894: LD_ADDR_VAR 0 3
24898: PUSH
24899: LD_EXP 85
24903: PPUSH
24904: CALL 70988 0 1
24908: ST_TO_ADDR
// if not list then
24909: LD_VAR 0 3
24913: NOT
24914: IFFALSE 24918
// exit ;
24916: GO 25562
// for i := 1 to list do
24918: LD_ADDR_VAR 0 1
24922: PUSH
24923: DOUBLE
24924: LD_INT 1
24926: DEC
24927: ST_TO_ADDR
24928: LD_VAR 0 3
24932: PUSH
24933: FOR_TO
24934: IFFALSE 25560
// begin depot := list [ i ] [ 2 ] ;
24936: LD_ADDR_VAR 0 8
24940: PUSH
24941: LD_VAR 0 3
24945: PUSH
24946: LD_VAR 0 1
24950: ARRAY
24951: PUSH
24952: LD_INT 2
24954: ARRAY
24955: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24956: LD_ADDR_VAR 0 5
24960: PUSH
24961: LD_VAR 0 3
24965: PUSH
24966: LD_VAR 0 1
24970: ARRAY
24971: PUSH
24972: LD_INT 1
24974: ARRAY
24975: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24976: LD_VAR 0 8
24980: PPUSH
24981: NOP4
24985: PUSH
24986: LD_VAR 0 5
24990: PUSH
24991: LD_VAR 0 8
24995: PPUSH
24996: NOP4
25000: NONEQUAL
25001: OR
25002: IFFALSE 25031
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25004: LD_ADDR_EXP 85
25008: PUSH
25009: LD_EXP 85
25013: PPUSH
25014: LD_VAR 0 8
25018: PPUSH
25019: LD_INT 0
25021: PPUSH
25022: NOP4
25026: ST_TO_ADDR
// exit ;
25027: POP
25028: POP
25029: GO 25562
// end ; x := list [ i ] [ 3 ] ;
25031: LD_ADDR_VAR 0 6
25035: PUSH
25036: LD_VAR 0 3
25040: PUSH
25041: LD_VAR 0 1
25045: ARRAY
25046: PUSH
25047: LD_INT 3
25049: ARRAY
25050: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25051: LD_ADDR_VAR 0 7
25055: PUSH
25056: LD_VAR 0 3
25060: PUSH
25061: LD_VAR 0 1
25065: ARRAY
25066: PUSH
25067: LD_INT 4
25069: ARRAY
25070: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25071: LD_ADDR_VAR 0 9
25075: PUSH
25076: LD_VAR 0 6
25080: PPUSH
25081: LD_VAR 0 7
25085: PPUSH
25086: LD_INT 16
25088: PPUSH
25089: CALL 69576 0 3
25093: ST_TO_ADDR
// if not cratesNearbyPoint then
25094: LD_VAR 0 9
25098: NOT
25099: IFFALSE 25105
// exit ;
25101: POP
25102: POP
25103: GO 25562
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25105: LD_ADDR_VAR 0 4
25109: PUSH
25110: LD_INT 22
25112: PUSH
25113: LD_VAR 0 5
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 3
25124: PUSH
25125: LD_INT 60
25127: PUSH
25128: EMPTY
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 91
25137: PUSH
25138: LD_VAR 0 8
25142: PUSH
25143: LD_INT 6
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: LD_INT 25
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 25
25166: PUSH
25167: LD_INT 16
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: PPUSH
25185: NOP4
25189: PUSH
25190: LD_VAR 0 8
25194: PPUSH
25195: NOP4
25199: PPUSH
25200: LD_INT 3
25202: PUSH
25203: LD_INT 60
25205: PUSH
25206: EMPTY
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: LD_INT 25
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 25
25228: PUSH
25229: LD_INT 16
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PPUSH
25245: NOP4
25249: UNION
25250: ST_TO_ADDR
// if tmp then
25251: LD_VAR 0 4
25255: IFFALSE 25335
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25257: LD_ADDR_VAR 0 4
25261: PUSH
25262: LD_VAR 0 4
25266: PPUSH
25267: LD_INT 3
25269: PPUSH
25270: CALL 67545 0 2
25274: ST_TO_ADDR
// for j in tmp do
25275: LD_ADDR_VAR 0 2
25279: PUSH
25280: LD_VAR 0 4
25284: PUSH
25285: FOR_IN
25286: IFFALSE 25329
// begin if IsInUnit ( j ) then
25288: LD_VAR 0 2
25292: PPUSH
25293: NOP4
25297: IFFALSE 25308
// ComExit ( j ) ;
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL 67628 0 1
// AddComCollect ( j , x , y ) ;
25308: LD_VAR 0 2
25312: PPUSH
25313: LD_VAR 0 6
25317: PPUSH
25318: LD_VAR 0 7
25322: PPUSH
25323: NOP4
// end ;
25327: GO 25285
25329: POP
25330: POP
// exit ;
25331: POP
25332: POP
25333: GO 25562
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25335: LD_ADDR_VAR 0 4
25339: PUSH
25340: LD_INT 22
25342: PUSH
25343: LD_VAR 0 5
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 91
25354: PUSH
25355: LD_VAR 0 8
25359: PUSH
25360: LD_INT 8
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 34
25373: PUSH
25374: LD_INT 12
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 34
25383: PUSH
25384: LD_INT 51
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 34
25393: PUSH
25394: LD_INT 32
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 34
25403: PUSH
25404: LD_INT 89
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PPUSH
25423: NOP4
25427: ST_TO_ADDR
// if tmp then
25428: LD_VAR 0 4
25432: IFFALSE 25558
// begin for j in tmp do
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_VAR 0 4
25443: PUSH
25444: FOR_IN
25445: IFFALSE 25556
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25447: LD_VAR 0 2
25451: PPUSH
25452: NOP4
25456: PUSH
25457: LD_INT 3
25459: EQUAL
25460: PUSH
25461: LD_VAR 0 2
25465: PPUSH
25466: NOP4
25470: PUSH
25471: LD_INT 20
25473: GREATER
25474: OR
25475: PUSH
25476: LD_VAR 0 2
25480: PPUSH
25481: NOP4
25485: NOT
25486: AND
25487: PUSH
25488: LD_VAR 0 2
25492: PPUSH
25493: NOP4
25497: PUSH
25498: LD_INT 1
25500: NONEQUAL
25501: PUSH
25502: LD_VAR 0 2
25506: PPUSH
25507: NOP4
25511: OR
25512: AND
25513: IFFALSE 25554
// begin ComCollect ( j , x , y ) ;
25515: LD_VAR 0 2
25519: PPUSH
25520: LD_VAR 0 6
25524: PPUSH
25525: LD_VAR 0 7
25529: PPUSH
25530: NOP4
// AddComMoveUnit ( j , depot ) ;
25534: LD_VAR 0 2
25538: PPUSH
25539: LD_VAR 0 8
25543: PPUSH
25544: NOP4
// exit ;
25548: POP
25549: POP
25550: POP
25551: POP
25552: GO 25562
// end ;
25554: GO 25444
25556: POP
25557: POP
// end ; end ;
25558: GO 24933
25560: POP
25561: POP
// end ; end_of_file end_of_file
25562: PPOPN 9
25564: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25565: LD_INT 0
25567: PPUSH
25568: PPUSH
25569: PPUSH
25570: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25571: LD_VAR 0 1
25575: PPUSH
25576: NOP4
25580: PUSH
25581: LD_INT 91
25583: EQUAL
25584: IFFALSE 25656
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25586: LD_INT 68
25588: PPUSH
25589: LD_VAR 0 1
25593: PPUSH
25594: NOP4
25598: PPUSH
25599: NOP4
25603: PUSH
25604: LD_INT 2
25606: EQUAL
25607: IFFALSE 25619
// eff := 70 else
25609: LD_ADDR_VAR 0 4
25613: PUSH
25614: LD_INT 70
25616: ST_TO_ADDR
25617: GO 25627
// eff := 30 ;
25619: LD_ADDR_VAR 0 4
25623: PUSH
25624: LD_INT 30
25626: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25627: LD_VAR 0 1
25631: PPUSH
25632: NOP4
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: NOP4
25646: PPUSH
25647: LD_VAR 0 4
25651: PPUSH
25652: NOP4
// end ; end ;
25656: LD_VAR 0 2
25660: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25661: LD_INT 0
25663: PPUSH
// end ;
25664: LD_VAR 0 4
25668: RET
// export function SOS_Command ( cmd ) ; begin
25669: LD_INT 0
25671: PPUSH
// end ;
25672: LD_VAR 0 2
25676: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25677: LD_INT 0
25679: PPUSH
// end ;
25680: LD_VAR 0 6
25684: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25685: LD_INT 0
25687: PPUSH
25688: PPUSH
// if not vehicle or not factory then
25689: LD_VAR 0 1
25693: NOT
25694: PUSH
25695: LD_VAR 0 2
25699: NOT
25700: OR
25701: IFFALSE 25705
// exit ;
25703: GO 25936
// if factoryWaypoints >= factory then
25705: LD_EXP 84
25709: PUSH
25710: LD_VAR 0 2
25714: GREATEREQUAL
25715: IFFALSE 25936
// if factoryWaypoints [ factory ] then
25717: LD_EXP 84
25721: PUSH
25722: LD_VAR 0 2
25726: ARRAY
25727: IFFALSE 25936
// begin if GetControl ( vehicle ) = control_manual then
25729: LD_VAR 0 1
25733: PPUSH
25734: NOP4
25738: PUSH
25739: LD_INT 1
25741: EQUAL
25742: IFFALSE 25823
// begin driver := IsDrivenBy ( vehicle ) ;
25744: LD_ADDR_VAR 0 4
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: NOP4
25758: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25759: LD_VAR 0 4
25763: PPUSH
25764: LD_EXP 84
25768: PUSH
25769: LD_VAR 0 2
25773: ARRAY
25774: PUSH
25775: LD_INT 3
25777: ARRAY
25778: PPUSH
25779: LD_EXP 84
25783: PUSH
25784: LD_VAR 0 2
25788: ARRAY
25789: PUSH
25790: LD_INT 4
25792: ARRAY
25793: PPUSH
25794: NOP4
// AddComExitVehicle ( driver ) ;
25798: LD_VAR 0 4
25802: PPUSH
25803: NOP4
// AddComEnterUnit ( driver , factory ) ;
25807: LD_VAR 0 4
25811: PPUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: NOP4
// end else
25821: GO 25936
// if GetControl ( vehicle ) = control_remote then
25823: LD_VAR 0 1
25827: PPUSH
25828: NOP4
25832: PUSH
25833: LD_INT 2
25835: EQUAL
25836: IFFALSE 25897
// begin wait ( 0 0$2 ) ;
25838: LD_INT 70
25840: PPUSH
25841: NOP4
// if Connect ( vehicle ) then
25845: LD_VAR 0 1
25849: PPUSH
25850: CALL 37960 0 1
25854: IFFALSE 25895
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25856: LD_VAR 0 1
25860: PPUSH
25861: LD_EXP 84
25865: PUSH
25866: LD_VAR 0 2
25870: ARRAY
25871: PUSH
25872: LD_INT 3
25874: ARRAY
25875: PPUSH
25876: LD_EXP 84
25880: PUSH
25881: LD_VAR 0 2
25885: ARRAY
25886: PUSH
25887: LD_INT 4
25889: ARRAY
25890: PPUSH
25891: NOP4
// end else
25895: GO 25936
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25897: LD_VAR 0 1
25901: PPUSH
25902: LD_EXP 84
25906: PUSH
25907: LD_VAR 0 2
25911: ARRAY
25912: PUSH
25913: LD_INT 3
25915: ARRAY
25916: PPUSH
25917: LD_EXP 84
25921: PUSH
25922: LD_VAR 0 2
25926: ARRAY
25927: PUSH
25928: LD_INT 4
25930: ARRAY
25931: PPUSH
25932: NOP4
// end ; end ;
25936: LD_VAR 0 3
25940: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25941: LD_INT 0
25943: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25944: LD_VAR 0 1
25948: PUSH
25949: LD_INT 250
25951: EQUAL
25952: PUSH
25953: LD_VAR 0 2
25957: PPUSH
25958: NOP4
25962: PUSH
25963: LD_INT 81
25965: EQUAL
25966: AND
25967: IFFALSE 25988
// MinerPlaceMine ( unit , x , y ) ;
25969: LD_VAR 0 2
25973: PPUSH
25974: LD_VAR 0 4
25978: PPUSH
25979: LD_VAR 0 5
25983: PPUSH
25984: CALL 28373 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25988: LD_VAR 0 1
25992: PUSH
25993: LD_INT 251
25995: EQUAL
25996: PUSH
25997: LD_VAR 0 2
26001: PPUSH
26002: NOP4
26006: PUSH
26007: LD_INT 81
26009: EQUAL
26010: AND
26011: IFFALSE 26032
// MinerDetonateMine ( unit , x , y ) ;
26013: LD_VAR 0 2
26017: PPUSH
26018: LD_VAR 0 4
26022: PPUSH
26023: LD_VAR 0 5
26027: PPUSH
26028: CALL 28648 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26032: LD_VAR 0 1
26036: PUSH
26037: LD_INT 252
26039: EQUAL
26040: PUSH
26041: LD_VAR 0 2
26045: PPUSH
26046: NOP4
26050: PUSH
26051: LD_INT 81
26053: EQUAL
26054: AND
26055: IFFALSE 26076
// MinerCreateMinefield ( unit , x , y ) ;
26057: LD_VAR 0 2
26061: PPUSH
26062: LD_VAR 0 4
26066: PPUSH
26067: LD_VAR 0 5
26071: PPUSH
26072: CALL 29065 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26076: LD_VAR 0 1
26080: PUSH
26081: LD_INT 253
26083: EQUAL
26084: PUSH
26085: LD_VAR 0 2
26089: PPUSH
26090: NOP4
26094: PUSH
26095: LD_INT 5
26097: EQUAL
26098: AND
26099: IFFALSE 26120
// ComBinocular ( unit , x , y ) ;
26101: LD_VAR 0 2
26105: PPUSH
26106: LD_VAR 0 4
26110: PPUSH
26111: LD_VAR 0 5
26115: PPUSH
26116: CALL 29434 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26120: LD_VAR 0 1
26124: PUSH
26125: LD_INT 254
26127: EQUAL
26128: PUSH
26129: LD_VAR 0 2
26133: PPUSH
26134: NOP4
26138: PUSH
26139: LD_INT 99
26141: EQUAL
26142: AND
26143: PUSH
26144: LD_VAR 0 3
26148: PPUSH
26149: NOP4
26153: PUSH
26154: LD_INT 3
26156: EQUAL
26157: AND
26158: IFFALSE 26174
// HackDestroyVehicle ( unit , selectedUnit ) ;
26160: LD_VAR 0 2
26164: PPUSH
26165: LD_VAR 0 3
26169: PPUSH
26170: CALL 27737 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26174: LD_VAR 0 1
26178: PUSH
26179: LD_INT 255
26181: EQUAL
26182: PUSH
26183: LD_VAR 0 2
26187: PPUSH
26188: NOP4
26192: PUSH
26193: LD_INT 14
26195: PUSH
26196: LD_INT 53
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: IN
26203: AND
26204: PUSH
26205: LD_VAR 0 4
26209: PPUSH
26210: LD_VAR 0 5
26214: PPUSH
26215: NOP4
26219: AND
26220: IFFALSE 26244
// CutTreeXYR ( unit , x , y , 12 ) ;
26222: LD_VAR 0 2
26226: PPUSH
26227: LD_VAR 0 4
26231: PPUSH
26232: LD_VAR 0 5
26236: PPUSH
26237: LD_INT 12
26239: PPUSH
26240: CALL 26307 0 4
// if cmd = 256 then
26244: LD_VAR 0 1
26248: PUSH
26249: LD_INT 256
26251: EQUAL
26252: IFFALSE 26273
// SetFactoryWaypoint ( unit , x , y ) ;
26254: LD_VAR 0 2
26258: PPUSH
26259: LD_VAR 0 4
26263: PPUSH
26264: LD_VAR 0 5
26268: PPUSH
26269: CALL 24254 0 3
// if cmd = 257 then
26273: LD_VAR 0 1
26277: PUSH
26278: LD_INT 257
26280: EQUAL
26281: IFFALSE 26302
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26283: LD_VAR 0 2
26287: PPUSH
26288: LD_VAR 0 4
26292: PPUSH
26293: LD_VAR 0 5
26297: PPUSH
26298: CALL 24616 0 3
// end ;
26302: LD_VAR 0 6
26306: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26307: LD_INT 0
26309: PPUSH
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26318: LD_VAR 0 1
26322: NOT
26323: PUSH
26324: LD_VAR 0 2
26328: PPUSH
26329: LD_VAR 0 3
26333: PPUSH
26334: NOP4
26338: NOT
26339: OR
26340: PUSH
26341: LD_VAR 0 4
26345: NOT
26346: OR
26347: IFFALSE 26351
// exit ;
26349: GO 26691
// list := [ ] ;
26351: LD_ADDR_VAR 0 13
26355: PUSH
26356: EMPTY
26357: ST_TO_ADDR
// if x - r < 0 then
26358: LD_VAR 0 2
26362: PUSH
26363: LD_VAR 0 4
26367: MINUS
26368: PUSH
26369: LD_INT 0
26371: LESS
26372: IFFALSE 26384
// min_x := 0 else
26374: LD_ADDR_VAR 0 7
26378: PUSH
26379: LD_INT 0
26381: ST_TO_ADDR
26382: GO 26400
// min_x := x - r ;
26384: LD_ADDR_VAR 0 7
26388: PUSH
26389: LD_VAR 0 2
26393: PUSH
26394: LD_VAR 0 4
26398: MINUS
26399: ST_TO_ADDR
// if y - r < 0 then
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 4
26409: MINUS
26410: PUSH
26411: LD_INT 0
26413: LESS
26414: IFFALSE 26426
// min_y := 0 else
26416: LD_ADDR_VAR 0 8
26420: PUSH
26421: LD_INT 0
26423: ST_TO_ADDR
26424: GO 26442
// min_y := y - r ;
26426: LD_ADDR_VAR 0 8
26430: PUSH
26431: LD_VAR 0 3
26435: PUSH
26436: LD_VAR 0 4
26440: MINUS
26441: ST_TO_ADDR
// max_x := x + r ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_VAR 0 2
26451: PUSH
26452: LD_VAR 0 4
26456: PLUS
26457: ST_TO_ADDR
// max_y := y + r ;
26458: LD_ADDR_VAR 0 10
26462: PUSH
26463: LD_VAR 0 3
26467: PUSH
26468: LD_VAR 0 4
26472: PLUS
26473: ST_TO_ADDR
// for _x = min_x to max_x do
26474: LD_ADDR_VAR 0 11
26478: PUSH
26479: DOUBLE
26480: LD_VAR 0 7
26484: DEC
26485: ST_TO_ADDR
26486: LD_VAR 0 9
26490: PUSH
26491: FOR_TO
26492: IFFALSE 26609
// for _y = min_y to max_y do
26494: LD_ADDR_VAR 0 12
26498: PUSH
26499: DOUBLE
26500: LD_VAR 0 8
26504: DEC
26505: ST_TO_ADDR
26506: LD_VAR 0 10
26510: PUSH
26511: FOR_TO
26512: IFFALSE 26605
// begin if not ValidHex ( _x , _y ) then
26514: LD_VAR 0 11
26518: PPUSH
26519: LD_VAR 0 12
26523: PPUSH
26524: NOP4
26528: NOT
26529: IFFALSE 26533
// continue ;
26531: GO 26511
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26533: LD_VAR 0 11
26537: PPUSH
26538: LD_VAR 0 12
26542: PPUSH
26543: NOP4
26547: PUSH
26548: LD_VAR 0 11
26552: PPUSH
26553: LD_VAR 0 12
26557: PPUSH
26558: NOP4
26562: AND
26563: IFFALSE 26603
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26565: LD_ADDR_VAR 0 13
26569: PUSH
26570: LD_VAR 0 13
26574: PPUSH
26575: LD_VAR 0 13
26579: PUSH
26580: LD_INT 1
26582: PLUS
26583: PPUSH
26584: LD_VAR 0 11
26588: PUSH
26589: LD_VAR 0 12
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PPUSH
26598: NOP4
26602: ST_TO_ADDR
// end ;
26603: GO 26511
26605: POP
26606: POP
26607: GO 26491
26609: POP
26610: POP
// if not list then
26611: LD_VAR 0 13
26615: NOT
26616: IFFALSE 26620
// exit ;
26618: GO 26691
// for i in list do
26620: LD_ADDR_VAR 0 6
26624: PUSH
26625: LD_VAR 0 13
26629: PUSH
26630: FOR_IN
26631: IFFALSE 26689
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26633: LD_VAR 0 1
26637: PPUSH
26638: LD_STRING M
26640: PUSH
26641: LD_VAR 0 6
26645: PUSH
26646: LD_INT 1
26648: ARRAY
26649: PUSH
26650: LD_VAR 0 6
26654: PUSH
26655: LD_INT 2
26657: ARRAY
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: PUSH
26680: EMPTY
26681: LIST
26682: PPUSH
26683: NOP4
26687: GO 26630
26689: POP
26690: POP
// end ;
26691: LD_VAR 0 5
26695: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26696: LD_EXP 87
26700: NOT
26701: IFFALSE 26751
26703: GO 26705
26705: DISABLE
// begin initHack := true ;
26706: LD_ADDR_EXP 87
26710: PUSH
26711: LD_INT 1
26713: ST_TO_ADDR
// hackTanks := [ ] ;
26714: LD_ADDR_EXP 88
26718: PUSH
26719: EMPTY
26720: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26721: LD_ADDR_EXP 89
26725: PUSH
26726: EMPTY
26727: ST_TO_ADDR
// hackLimit := 3 ;
26728: LD_ADDR_EXP 90
26732: PUSH
26733: LD_INT 3
26735: ST_TO_ADDR
// hackDist := 12 ;
26736: LD_ADDR_EXP 91
26740: PUSH
26741: LD_INT 12
26743: ST_TO_ADDR
// hackCounter := [ ] ;
26744: LD_ADDR_EXP 92
26748: PUSH
26749: EMPTY
26750: ST_TO_ADDR
// end ;
26751: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26752: LD_EXP 87
26756: PUSH
26757: LD_INT 34
26759: PUSH
26760: LD_INT 99
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: NOP4
26771: AND
26772: IFFALSE 27025
26774: GO 26776
26776: DISABLE
26777: LD_INT 0
26779: PPUSH
26780: PPUSH
// begin enable ;
26781: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26782: LD_ADDR_VAR 0 1
26786: PUSH
26787: LD_INT 34
26789: PUSH
26790: LD_INT 99
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PPUSH
26797: NOP4
26801: PUSH
26802: FOR_IN
26803: IFFALSE 27023
// begin if not i in hackTanks then
26805: LD_VAR 0 1
26809: PUSH
26810: LD_EXP 88
26814: IN
26815: NOT
26816: IFFALSE 26899
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26818: LD_ADDR_EXP 88
26822: PUSH
26823: LD_EXP 88
26827: PPUSH
26828: LD_EXP 88
26832: PUSH
26833: LD_INT 1
26835: PLUS
26836: PPUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: NOP4
26846: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26847: LD_ADDR_EXP 89
26851: PUSH
26852: LD_EXP 89
26856: PPUSH
26857: LD_EXP 89
26861: PUSH
26862: LD_INT 1
26864: PLUS
26865: PPUSH
26866: EMPTY
26867: PPUSH
26868: NOP4
26872: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26873: LD_ADDR_EXP 92
26877: PUSH
26878: LD_EXP 92
26882: PPUSH
26883: LD_EXP 92
26887: PUSH
26888: LD_INT 1
26890: PLUS
26891: PPUSH
26892: EMPTY
26893: PPUSH
26894: NOP4
26898: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26899: LD_VAR 0 1
26903: PPUSH
26904: NOP4
26908: NOT
26909: IFFALSE 26922
// begin HackUnlinkAll ( i ) ;
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL 27028 0 1
// continue ;
26920: GO 26802
// end ; HackCheckCapturedStatus ( i ) ;
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL 27471 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_INT 81
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: NOP4
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 33
26955: PUSH
26956: LD_INT 3
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 91
26965: PUSH
26966: LD_VAR 0 1
26970: PUSH
26971: LD_EXP 91
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 50
26983: PUSH
26984: EMPTY
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: PPUSH
26993: NOP4
26997: ST_TO_ADDR
// if not tmp then
26998: LD_VAR 0 2
27002: NOT
27003: IFFALSE 27007
// continue ;
27005: GO 26802
// HackLink ( i , tmp ) ;
27007: LD_VAR 0 1
27011: PPUSH
27012: LD_VAR 0 2
27016: PPUSH
27017: CALL 27164 0 2
// end ;
27021: GO 26802
27023: POP
27024: POP
// end ;
27025: PPOPN 2
27027: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
27032: PPUSH
// if not hack in hackTanks then
27033: LD_VAR 0 1
27037: PUSH
27038: LD_EXP 88
27042: IN
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27159
// index := GetElementIndex ( hackTanks , hack ) ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_EXP 88
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL 34776 0 2
27067: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27068: LD_EXP 89
27072: PUSH
27073: LD_VAR 0 4
27077: ARRAY
27078: IFFALSE 27159
// begin for i in hackTanksCaptured [ index ] do
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_EXP 89
27089: PUSH
27090: LD_VAR 0 4
27094: ARRAY
27095: PUSH
27096: FOR_IN
27097: IFFALSE 27123
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27099: LD_VAR 0 3
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PPUSH
27108: LD_VAR 0 3
27112: PUSH
27113: LD_INT 2
27115: ARRAY
27116: PPUSH
27117: NOP4
27121: GO 27096
27123: POP
27124: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27125: LD_ADDR_EXP 89
27129: PUSH
27130: LD_EXP 89
27134: PPUSH
27135: LD_VAR 0 4
27139: PPUSH
27140: EMPTY
27141: PPUSH
27142: NOP4
27146: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27147: LD_VAR 0 1
27151: PPUSH
27152: LD_INT 0
27154: PPUSH
27155: NOP4
// end ; end ;
27159: LD_VAR 0 2
27163: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
27168: PPUSH
// if not hack in hackTanks or not vehicles then
27169: LD_VAR 0 1
27173: PUSH
27174: LD_EXP 88
27178: IN
27179: NOT
27180: PUSH
27181: LD_VAR 0 2
27185: NOT
27186: OR
27187: IFFALSE 27191
// exit ;
27189: GO 27466
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27191: LD_ADDR_VAR 0 2
27195: PUSH
27196: LD_VAR 0 1
27200: PPUSH
27201: LD_VAR 0 2
27205: PPUSH
27206: LD_INT 1
27208: PPUSH
27209: LD_INT 1
27211: PPUSH
27212: CALL 35426 0 4
27216: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_EXP 88
27226: PPUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL 34776 0 2
27236: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27237: LD_EXP 89
27241: PUSH
27242: LD_VAR 0 5
27246: ARRAY
27247: PUSH
27248: LD_EXP 90
27252: LESS
27253: IFFALSE 27442
// begin for i := 1 to vehicles do
27255: LD_ADDR_VAR 0 4
27259: PUSH
27260: DOUBLE
27261: LD_INT 1
27263: DEC
27264: ST_TO_ADDR
27265: LD_VAR 0 2
27269: PUSH
27270: FOR_TO
27271: IFFALSE 27440
// begin if hackTanksCaptured [ index ] = hackLimit then
27273: LD_EXP 89
27277: PUSH
27278: LD_VAR 0 5
27282: ARRAY
27283: PUSH
27284: LD_EXP 90
27288: EQUAL
27289: IFFALSE 27293
// break ;
27291: GO 27440
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27293: LD_ADDR_EXP 92
27297: PUSH
27298: LD_EXP 92
27302: PPUSH
27303: LD_VAR 0 5
27307: PPUSH
27308: LD_EXP 92
27312: PUSH
27313: LD_VAR 0 5
27317: ARRAY
27318: PUSH
27319: LD_INT 1
27321: PLUS
27322: PPUSH
27323: NOP4
27327: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27328: LD_ADDR_EXP 89
27332: PUSH
27333: LD_EXP 89
27337: PPUSH
27338: LD_VAR 0 5
27342: PUSH
27343: LD_EXP 89
27347: PUSH
27348: LD_VAR 0 5
27352: ARRAY
27353: PUSH
27354: LD_INT 1
27356: PLUS
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PPUSH
27362: LD_VAR 0 2
27366: PUSH
27367: LD_VAR 0 4
27371: ARRAY
27372: PUSH
27373: LD_VAR 0 2
27377: PUSH
27378: LD_VAR 0 4
27382: ARRAY
27383: PPUSH
27384: NOP4
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL 34991 0 3
27397: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27398: LD_VAR 0 2
27402: PUSH
27403: LD_VAR 0 4
27407: ARRAY
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: NOP4
27418: PPUSH
27419: NOP4
// ComStop ( vehicles [ i ] ) ;
27423: LD_VAR 0 2
27427: PUSH
27428: LD_VAR 0 4
27432: ARRAY
27433: PPUSH
27434: NOP4
// end ;
27438: GO 27270
27440: POP
27441: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27442: LD_VAR 0 1
27446: PPUSH
27447: LD_EXP 89
27451: PUSH
27452: LD_VAR 0 5
27456: ARRAY
27457: PUSH
27458: LD_INT 0
27460: PLUS
27461: PPUSH
27462: NOP4
// end ;
27466: LD_VAR 0 3
27470: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27471: LD_INT 0
27473: PPUSH
27474: PPUSH
27475: PPUSH
27476: PPUSH
// if not hack in hackTanks then
27477: LD_VAR 0 1
27481: PUSH
27482: LD_EXP 88
27486: IN
27487: NOT
27488: IFFALSE 27492
// exit ;
27490: GO 27732
// index := GetElementIndex ( hackTanks , hack ) ;
27492: LD_ADDR_VAR 0 4
27496: PUSH
27497: LD_EXP 88
27501: PPUSH
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL 34776 0 2
27511: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: DOUBLE
27518: LD_EXP 89
27522: PUSH
27523: LD_VAR 0 4
27527: ARRAY
27528: INC
27529: ST_TO_ADDR
27530: LD_INT 1
27532: PUSH
27533: FOR_DOWNTO
27534: IFFALSE 27706
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_EXP 89
27545: PUSH
27546: LD_VAR 0 4
27550: ARRAY
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27558: LD_VAR 0 5
27562: PUSH
27563: LD_INT 1
27565: ARRAY
27566: PPUSH
27567: NOP4
27571: NOT
27572: PUSH
27573: LD_VAR 0 5
27577: PUSH
27578: LD_INT 1
27580: ARRAY
27581: PPUSH
27582: NOP4
27586: PUSH
27587: LD_VAR 0 1
27591: PPUSH
27592: NOP4
27596: NONEQUAL
27597: OR
27598: IFFALSE 27704
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27600: LD_VAR 0 5
27604: PUSH
27605: LD_INT 1
27607: ARRAY
27608: PPUSH
27609: NOP4
27613: PUSH
27614: LD_VAR 0 5
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: PPUSH
27623: NOP4
27627: PUSH
27628: LD_VAR 0 1
27632: PPUSH
27633: NOP4
27637: EQUAL
27638: AND
27639: IFFALSE 27663
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27641: LD_VAR 0 5
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: PPUSH
27650: LD_VAR 0 5
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: PPUSH
27659: NOP4
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27663: LD_ADDR_EXP 89
27667: PUSH
27668: LD_EXP 89
27672: PPUSH
27673: LD_VAR 0 4
27677: PPUSH
27678: LD_EXP 89
27682: PUSH
27683: LD_VAR 0 4
27687: ARRAY
27688: PPUSH
27689: LD_VAR 0 3
27693: PPUSH
27694: NOP4
27698: PPUSH
27699: NOP4
27703: ST_TO_ADDR
// end ; end ;
27704: GO 27533
27706: POP
27707: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27708: LD_VAR 0 1
27712: PPUSH
27713: LD_EXP 89
27717: PUSH
27718: LD_VAR 0 4
27722: ARRAY
27723: PUSH
27724: LD_INT 0
27726: PLUS
27727: PPUSH
27728: NOP4
// end ;
27732: LD_VAR 0 2
27736: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27737: LD_INT 0
27739: PPUSH
27740: PPUSH
27741: PPUSH
27742: PPUSH
// if not hack in hackTanks then
27743: LD_VAR 0 1
27747: PUSH
27748: LD_EXP 88
27752: IN
27753: NOT
27754: IFFALSE 27758
// exit ;
27756: GO 27843
// index := GetElementIndex ( hackTanks , hack ) ;
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_EXP 88
27767: PPUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL 34776 0 2
27777: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27778: LD_ADDR_VAR 0 4
27782: PUSH
27783: DOUBLE
27784: LD_INT 1
27786: DEC
27787: ST_TO_ADDR
27788: LD_EXP 89
27792: PUSH
27793: LD_VAR 0 5
27797: ARRAY
27798: PUSH
27799: FOR_TO
27800: IFFALSE 27841
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27802: LD_EXP 89
27806: PUSH
27807: LD_VAR 0 5
27811: ARRAY
27812: PUSH
27813: LD_VAR 0 4
27817: ARRAY
27818: PUSH
27819: LD_INT 1
27821: ARRAY
27822: PUSH
27823: LD_VAR 0 2
27827: EQUAL
27828: IFFALSE 27839
// KillUnit ( vehicle ) ;
27830: LD_VAR 0 2
27834: PPUSH
27835: NOP4
27839: GO 27799
27841: POP
27842: POP
// end ;
27843: LD_VAR 0 3
27847: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27848: LD_EXP 93
27852: NOT
27853: IFFALSE 27888
27855: GO 27857
27857: DISABLE
// begin initMiner := true ;
27858: LD_ADDR_EXP 93
27862: PUSH
27863: LD_INT 1
27865: ST_TO_ADDR
// minersList := [ ] ;
27866: LD_ADDR_EXP 94
27870: PUSH
27871: EMPTY
27872: ST_TO_ADDR
// minerMinesList := [ ] ;
27873: LD_ADDR_EXP 95
27877: PUSH
27878: EMPTY
27879: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27880: LD_ADDR_EXP 96
27884: PUSH
27885: LD_INT 5
27887: ST_TO_ADDR
// end ;
27888: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27889: LD_EXP 93
27893: PUSH
27894: LD_INT 34
27896: PUSH
27897: LD_INT 81
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PPUSH
27904: NOP4
27908: AND
27909: IFFALSE 28370
27911: GO 27913
27913: DISABLE
27914: LD_INT 0
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
// begin enable ;
27920: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27921: LD_ADDR_VAR 0 1
27925: PUSH
27926: LD_INT 34
27928: PUSH
27929: LD_INT 81
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PPUSH
27936: NOP4
27940: PUSH
27941: FOR_IN
27942: IFFALSE 28014
// begin if not i in minersList then
27944: LD_VAR 0 1
27948: PUSH
27949: LD_EXP 94
27953: IN
27954: NOT
27955: IFFALSE 28012
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27957: LD_ADDR_EXP 94
27961: PUSH
27962: LD_EXP 94
27966: PPUSH
27967: LD_EXP 94
27971: PUSH
27972: LD_INT 1
27974: PLUS
27975: PPUSH
27976: LD_VAR 0 1
27980: PPUSH
27981: NOP4
27985: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27986: LD_ADDR_EXP 95
27990: PUSH
27991: LD_EXP 95
27995: PPUSH
27996: LD_EXP 95
28000: PUSH
28001: LD_INT 1
28003: PLUS
28004: PPUSH
28005: EMPTY
28006: PPUSH
28007: NOP4
28011: ST_TO_ADDR
// end end ;
28012: GO 27941
28014: POP
28015: POP
// for i := minerMinesList downto 1 do
28016: LD_ADDR_VAR 0 1
28020: PUSH
28021: DOUBLE
28022: LD_EXP 95
28026: INC
28027: ST_TO_ADDR
28028: LD_INT 1
28030: PUSH
28031: FOR_DOWNTO
28032: IFFALSE 28368
// begin if IsLive ( minersList [ i ] ) then
28034: LD_EXP 94
28038: PUSH
28039: LD_VAR 0 1
28043: ARRAY
28044: PPUSH
28045: NOP4
28049: IFFALSE 28077
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28051: LD_EXP 94
28055: PUSH
28056: LD_VAR 0 1
28060: ARRAY
28061: PPUSH
28062: LD_EXP 95
28066: PUSH
28067: LD_VAR 0 1
28071: ARRAY
28072: PPUSH
28073: NOP4
// if not minerMinesList [ i ] then
28077: LD_EXP 95
28081: PUSH
28082: LD_VAR 0 1
28086: ARRAY
28087: NOT
28088: IFFALSE 28092
// continue ;
28090: GO 28031
// for j := minerMinesList [ i ] downto 1 do
28092: LD_ADDR_VAR 0 2
28096: PUSH
28097: DOUBLE
28098: LD_EXP 95
28102: PUSH
28103: LD_VAR 0 1
28107: ARRAY
28108: INC
28109: ST_TO_ADDR
28110: LD_INT 1
28112: PUSH
28113: FOR_DOWNTO
28114: IFFALSE 28364
// begin side := GetSide ( minersList [ i ] ) ;
28116: LD_ADDR_VAR 0 3
28120: PUSH
28121: LD_EXP 94
28125: PUSH
28126: LD_VAR 0 1
28130: ARRAY
28131: PPUSH
28132: NOP4
28136: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28137: LD_ADDR_VAR 0 4
28141: PUSH
28142: LD_EXP 95
28146: PUSH
28147: LD_VAR 0 1
28151: ARRAY
28152: PUSH
28153: LD_VAR 0 2
28157: ARRAY
28158: PUSH
28159: LD_INT 1
28161: ARRAY
28162: PPUSH
28163: LD_EXP 95
28167: PUSH
28168: LD_VAR 0 1
28172: ARRAY
28173: PUSH
28174: LD_VAR 0 2
28178: ARRAY
28179: PUSH
28180: LD_INT 2
28182: ARRAY
28183: PPUSH
28184: NOP4
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 4
28193: NOT
28194: IFFALSE 28198
// continue ;
28196: GO 28113
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28198: LD_VAR 0 4
28202: PUSH
28203: LD_INT 81
28205: PUSH
28206: LD_VAR 0 3
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PPUSH
28215: NOP4
28219: IN
28220: PUSH
28221: LD_EXP 95
28225: PUSH
28226: LD_VAR 0 1
28230: ARRAY
28231: PUSH
28232: LD_VAR 0 2
28236: ARRAY
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: LD_EXP 95
28246: PUSH
28247: LD_VAR 0 1
28251: ARRAY
28252: PUSH
28253: LD_VAR 0 2
28257: ARRAY
28258: PUSH
28259: LD_INT 2
28261: ARRAY
28262: PPUSH
28263: NOP4
28267: AND
28268: IFFALSE 28362
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28270: LD_EXP 95
28274: PUSH
28275: LD_VAR 0 1
28279: ARRAY
28280: PUSH
28281: LD_VAR 0 2
28285: ARRAY
28286: PUSH
28287: LD_INT 1
28289: ARRAY
28290: PPUSH
28291: LD_EXP 95
28295: PUSH
28296: LD_VAR 0 1
28300: ARRAY
28301: PUSH
28302: LD_VAR 0 2
28306: ARRAY
28307: PUSH
28308: LD_INT 2
28310: ARRAY
28311: PPUSH
28312: LD_VAR 0 3
28316: PPUSH
28317: NOP4
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28321: LD_ADDR_EXP 95
28325: PUSH
28326: LD_EXP 95
28330: PPUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: LD_EXP 95
28340: PUSH
28341: LD_VAR 0 1
28345: ARRAY
28346: PPUSH
28347: LD_VAR 0 2
28351: PPUSH
28352: NOP4
28356: PPUSH
28357: NOP4
28361: ST_TO_ADDR
// end ; end ;
28362: GO 28113
28364: POP
28365: POP
// end ;
28366: GO 28031
28368: POP
28369: POP
// end ;
28370: PPOPN 4
28372: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28373: LD_INT 0
28375: PPUSH
28376: PPUSH
// result := false ;
28377: LD_ADDR_VAR 0 4
28381: PUSH
28382: LD_INT 0
28384: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28385: LD_VAR 0 1
28389: PPUSH
28390: NOP4
28394: PUSH
28395: LD_INT 81
28397: EQUAL
28398: NOT
28399: IFFALSE 28403
// exit ;
28401: GO 28643
// index := GetElementIndex ( minersList , unit ) ;
28403: LD_ADDR_VAR 0 5
28407: PUSH
28408: LD_EXP 94
28412: PPUSH
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL 34776 0 2
28422: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28423: LD_EXP 95
28427: PUSH
28428: LD_VAR 0 5
28432: ARRAY
28433: PUSH
28434: LD_EXP 96
28438: GREATEREQUAL
28439: IFFALSE 28443
// exit ;
28441: GO 28643
// ComMoveXY ( unit , x , y ) ;
28443: LD_VAR 0 1
28447: PPUSH
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_VAR 0 3
28457: PPUSH
28458: NOP4
// repeat wait ( 0 0$1 ) ;
28462: LD_INT 35
28464: PPUSH
28465: NOP4
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28469: LD_VAR 0 1
28473: PPUSH
28474: LD_VAR 0 2
28478: PPUSH
28479: LD_VAR 0 3
28483: PPUSH
28484: CALL 66039 0 3
28488: NOT
28489: PUSH
28490: LD_VAR 0 1
28494: PPUSH
28495: NOP4
28499: AND
28500: IFFALSE 28504
// exit ;
28502: GO 28643
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_VAR 0 3
28513: PPUSH
28514: NOP4
28518: PUSH
28519: LD_VAR 0 1
28523: EQUAL
28524: PUSH
28525: LD_VAR 0 1
28529: PPUSH
28530: NOP4
28534: NOT
28535: AND
28536: IFFALSE 28462
// PlaySoundXY ( x , y , PlantMine ) ;
28538: LD_VAR 0 2
28542: PPUSH
28543: LD_VAR 0 3
28547: PPUSH
28548: LD_STRING PlantMine
28550: PPUSH
28551: NOP4
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28555: LD_VAR 0 2
28559: PPUSH
28560: LD_VAR 0 3
28564: PPUSH
28565: LD_VAR 0 1
28569: PPUSH
28570: NOP4
28574: PPUSH
28575: LD_INT 0
28577: PPUSH
28578: NOP4
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28582: LD_ADDR_EXP 95
28586: PUSH
28587: LD_EXP 95
28591: PPUSH
28592: LD_VAR 0 5
28596: PUSH
28597: LD_EXP 95
28601: PUSH
28602: LD_VAR 0 5
28606: ARRAY
28607: PUSH
28608: LD_INT 1
28610: PLUS
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PPUSH
28616: LD_VAR 0 2
28620: PUSH
28621: LD_VAR 0 3
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PPUSH
28630: CALL 34991 0 3
28634: ST_TO_ADDR
// result := true ;
28635: LD_ADDR_VAR 0 4
28639: PUSH
28640: LD_INT 1
28642: ST_TO_ADDR
// end ;
28643: LD_VAR 0 4
28647: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28648: LD_INT 0
28650: PPUSH
28651: PPUSH
28652: PPUSH
// if not unit in minersList then
28653: LD_VAR 0 1
28657: PUSH
28658: LD_EXP 94
28662: IN
28663: NOT
28664: IFFALSE 28668
// exit ;
28666: GO 29060
// index := GetElementIndex ( minersList , unit ) ;
28668: LD_ADDR_VAR 0 6
28672: PUSH
28673: LD_EXP 94
28677: PPUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL 34776 0 2
28687: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28688: LD_ADDR_VAR 0 5
28692: PUSH
28693: DOUBLE
28694: LD_EXP 95
28698: PUSH
28699: LD_VAR 0 6
28703: ARRAY
28704: INC
28705: ST_TO_ADDR
28706: LD_INT 1
28708: PUSH
28709: FOR_DOWNTO
28710: IFFALSE 28871
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28712: LD_EXP 95
28716: PUSH
28717: LD_VAR 0 6
28721: ARRAY
28722: PUSH
28723: LD_VAR 0 5
28727: ARRAY
28728: PUSH
28729: LD_INT 1
28731: ARRAY
28732: PUSH
28733: LD_VAR 0 2
28737: EQUAL
28738: PUSH
28739: LD_EXP 95
28743: PUSH
28744: LD_VAR 0 6
28748: ARRAY
28749: PUSH
28750: LD_VAR 0 5
28754: ARRAY
28755: PUSH
28756: LD_INT 2
28758: ARRAY
28759: PUSH
28760: LD_VAR 0 3
28764: EQUAL
28765: AND
28766: IFFALSE 28869
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28768: LD_EXP 95
28772: PUSH
28773: LD_VAR 0 6
28777: ARRAY
28778: PUSH
28779: LD_VAR 0 5
28783: ARRAY
28784: PUSH
28785: LD_INT 1
28787: ARRAY
28788: PPUSH
28789: LD_EXP 95
28793: PUSH
28794: LD_VAR 0 6
28798: ARRAY
28799: PUSH
28800: LD_VAR 0 5
28804: ARRAY
28805: PUSH
28806: LD_INT 2
28808: ARRAY
28809: PPUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: NOP4
28819: PPUSH
28820: NOP4
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28824: LD_ADDR_EXP 95
28828: PUSH
28829: LD_EXP 95
28833: PPUSH
28834: LD_VAR 0 6
28838: PPUSH
28839: LD_EXP 95
28843: PUSH
28844: LD_VAR 0 6
28848: ARRAY
28849: PPUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: NOP4
28859: PPUSH
28860: NOP4
28864: ST_TO_ADDR
// exit ;
28865: POP
28866: POP
28867: GO 29060
// end ; end ;
28869: GO 28709
28871: POP
28872: POP
// for i := minerMinesList [ index ] downto 1 do
28873: LD_ADDR_VAR 0 5
28877: PUSH
28878: DOUBLE
28879: LD_EXP 95
28883: PUSH
28884: LD_VAR 0 6
28888: ARRAY
28889: INC
28890: ST_TO_ADDR
28891: LD_INT 1
28893: PUSH
28894: FOR_DOWNTO
28895: IFFALSE 29058
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28897: LD_EXP 95
28901: PUSH
28902: LD_VAR 0 6
28906: ARRAY
28907: PUSH
28908: LD_VAR 0 5
28912: ARRAY
28913: PUSH
28914: LD_INT 1
28916: ARRAY
28917: PPUSH
28918: LD_EXP 95
28922: PUSH
28923: LD_VAR 0 6
28927: ARRAY
28928: PUSH
28929: LD_VAR 0 5
28933: ARRAY
28934: PUSH
28935: LD_INT 2
28937: ARRAY
28938: PPUSH
28939: LD_VAR 0 2
28943: PPUSH
28944: LD_VAR 0 3
28948: PPUSH
28949: NOP4
28953: PUSH
28954: LD_INT 6
28956: LESS
28957: IFFALSE 29056
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28959: LD_EXP 95
28963: PUSH
28964: LD_VAR 0 6
28968: ARRAY
28969: PUSH
28970: LD_VAR 0 5
28974: ARRAY
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: LD_EXP 95
28984: PUSH
28985: LD_VAR 0 6
28989: ARRAY
28990: PUSH
28991: LD_VAR 0 5
28995: ARRAY
28996: PUSH
28997: LD_INT 2
28999: ARRAY
29000: PPUSH
29001: LD_VAR 0 1
29005: PPUSH
29006: NOP4
29010: PPUSH
29011: NOP4
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29015: LD_ADDR_EXP 95
29019: PUSH
29020: LD_EXP 95
29024: PPUSH
29025: LD_VAR 0 6
29029: PPUSH
29030: LD_EXP 95
29034: PUSH
29035: LD_VAR 0 6
29039: ARRAY
29040: PPUSH
29041: LD_VAR 0 5
29045: PPUSH
29046: NOP4
29050: PPUSH
29051: NOP4
29055: ST_TO_ADDR
// end ; end ;
29056: GO 28894
29058: POP
29059: POP
// end ;
29060: LD_VAR 0 4
29064: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29065: LD_INT 0
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29076: LD_VAR 0 1
29080: PPUSH
29081: NOP4
29085: PUSH
29086: LD_INT 81
29088: EQUAL
29089: NOT
29090: PUSH
29091: LD_VAR 0 1
29095: PUSH
29096: LD_EXP 94
29100: IN
29101: NOT
29102: OR
29103: IFFALSE 29107
// exit ;
29105: GO 29429
// index := GetElementIndex ( minersList , unit ) ;
29107: LD_ADDR_VAR 0 6
29111: PUSH
29112: LD_EXP 94
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL 34776 0 2
29126: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29127: LD_ADDR_VAR 0 8
29131: PUSH
29132: LD_EXP 96
29136: PUSH
29137: LD_EXP 95
29141: PUSH
29142: LD_VAR 0 6
29146: ARRAY
29147: MINUS
29148: ST_TO_ADDR
// if not minesFreeAmount then
29149: LD_VAR 0 8
29153: NOT
29154: IFFALSE 29158
// exit ;
29156: GO 29429
// tmp := [ ] ;
29158: LD_ADDR_VAR 0 7
29162: PUSH
29163: EMPTY
29164: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29165: LD_ADDR_VAR 0 5
29169: PUSH
29170: DOUBLE
29171: LD_INT 1
29173: DEC
29174: ST_TO_ADDR
29175: LD_VAR 0 8
29179: PUSH
29180: FOR_TO
29181: IFFALSE 29376
// begin _d := rand ( 0 , 5 ) ;
29183: LD_ADDR_VAR 0 11
29187: PUSH
29188: LD_INT 0
29190: PPUSH
29191: LD_INT 5
29193: PPUSH
29194: NOP4
29198: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29199: LD_ADDR_VAR 0 12
29203: PUSH
29204: LD_INT 2
29206: PPUSH
29207: LD_INT 6
29209: PPUSH
29210: NOP4
29214: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29215: LD_ADDR_VAR 0 9
29219: PUSH
29220: LD_VAR 0 2
29224: PPUSH
29225: LD_VAR 0 11
29229: PPUSH
29230: LD_VAR 0 12
29234: PPUSH
29235: NOP4
29239: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29240: LD_ADDR_VAR 0 10
29244: PUSH
29245: LD_VAR 0 3
29249: PPUSH
29250: LD_VAR 0 11
29254: PPUSH
29255: LD_VAR 0 12
29259: PPUSH
29260: NOP4
29264: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29265: LD_VAR 0 9
29269: PPUSH
29270: LD_VAR 0 10
29274: PPUSH
29275: NOP4
29279: PUSH
29280: LD_VAR 0 9
29284: PUSH
29285: LD_VAR 0 10
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_VAR 0 7
29298: IN
29299: NOT
29300: AND
29301: PUSH
29302: LD_VAR 0 9
29306: PPUSH
29307: LD_VAR 0 10
29311: PPUSH
29312: NOP4
29316: NOT
29317: AND
29318: IFFALSE 29360
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29320: LD_ADDR_VAR 0 7
29324: PUSH
29325: LD_VAR 0 7
29329: PPUSH
29330: LD_VAR 0 7
29334: PUSH
29335: LD_INT 1
29337: PLUS
29338: PPUSH
29339: LD_VAR 0 9
29343: PUSH
29344: LD_VAR 0 10
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PPUSH
29353: NOP4
29357: ST_TO_ADDR
29358: GO 29374
// i := i - 1 ;
29360: LD_ADDR_VAR 0 5
29364: PUSH
29365: LD_VAR 0 5
29369: PUSH
29370: LD_INT 1
29372: MINUS
29373: ST_TO_ADDR
// end ;
29374: GO 29180
29376: POP
29377: POP
// for i in tmp do
29378: LD_ADDR_VAR 0 5
29382: PUSH
29383: LD_VAR 0 7
29387: PUSH
29388: FOR_IN
29389: IFFALSE 29427
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29391: LD_VAR 0 1
29395: PPUSH
29396: LD_VAR 0 5
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PPUSH
29405: LD_VAR 0 5
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: PPUSH
29414: CALL 28373 0 3
29418: NOT
29419: IFFALSE 29425
// exit ;
29421: POP
29422: POP
29423: GO 29429
29425: GO 29388
29427: POP
29428: POP
// end ;
29429: LD_VAR 0 4
29433: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29434: LD_INT 0
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
// if not GetClass ( unit ) = class_sniper then
29443: LD_VAR 0 1
29447: PPUSH
29448: NOP4
29452: PUSH
29453: LD_INT 5
29455: EQUAL
29456: NOT
29457: IFFALSE 29461
// exit ;
29459: GO 29849
// dist := 8 ;
29461: LD_ADDR_VAR 0 5
29465: PUSH
29466: LD_INT 8
29468: ST_TO_ADDR
// viewRange := 12 ;
29469: LD_ADDR_VAR 0 7
29473: PUSH
29474: LD_INT 12
29476: ST_TO_ADDR
// side := GetSide ( unit ) ;
29477: LD_ADDR_VAR 0 6
29481: PUSH
29482: LD_VAR 0 1
29486: PPUSH
29487: NOP4
29491: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29492: LD_INT 61
29494: PPUSH
29495: LD_VAR 0 6
29499: PPUSH
29500: NOP4
29504: PUSH
29505: LD_INT 2
29507: EQUAL
29508: IFFALSE 29518
// viewRange := 16 ;
29510: LD_ADDR_VAR 0 7
29514: PUSH
29515: LD_INT 16
29517: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_VAR 0 2
29527: PPUSH
29528: LD_VAR 0 3
29532: PPUSH
29533: NOP4
29537: PUSH
29538: LD_VAR 0 5
29542: GREATER
29543: IFFALSE 29622
// begin ComMoveXY ( unit , x , y ) ;
29545: LD_VAR 0 1
29549: PPUSH
29550: LD_VAR 0 2
29554: PPUSH
29555: LD_VAR 0 3
29559: PPUSH
29560: NOP4
// repeat wait ( 0 0$1 ) ;
29564: LD_INT 35
29566: PPUSH
29567: NOP4
// if not UnitGoingToXY ( unit , x , y ) then
29571: LD_VAR 0 1
29575: PPUSH
29576: LD_VAR 0 2
29580: PPUSH
29581: LD_VAR 0 3
29585: PPUSH
29586: CALL 66039 0 3
29590: NOT
29591: IFFALSE 29595
// exit ;
29593: GO 29849
// until GetDistUnitXY ( unit , x , y ) < dist ;
29595: LD_VAR 0 1
29599: PPUSH
29600: LD_VAR 0 2
29604: PPUSH
29605: LD_VAR 0 3
29609: PPUSH
29610: NOP4
29614: PUSH
29615: LD_VAR 0 5
29619: LESS
29620: IFFALSE 29564
// end ; ComTurnXY ( unit , x , y ) ;
29622: LD_VAR 0 1
29626: PPUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: LD_VAR 0 3
29636: PPUSH
29637: NOP4
// wait ( 5 ) ;
29641: LD_INT 5
29643: PPUSH
29644: NOP4
// _d := GetDir ( unit ) ;
29648: LD_ADDR_VAR 0 10
29652: PUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: NOP4
29662: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29663: LD_ADDR_VAR 0 8
29667: PUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: NOP4
29677: PPUSH
29678: LD_VAR 0 10
29682: PPUSH
29683: LD_VAR 0 5
29687: PPUSH
29688: NOP4
29692: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29693: LD_ADDR_VAR 0 9
29697: PUSH
29698: LD_VAR 0 1
29702: PPUSH
29703: NOP4
29707: PPUSH
29708: LD_VAR 0 10
29712: PPUSH
29713: LD_VAR 0 5
29717: PPUSH
29718: NOP4
29722: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29723: LD_VAR 0 8
29727: PPUSH
29728: LD_VAR 0 9
29732: PPUSH
29733: NOP4
29737: NOT
29738: IFFALSE 29742
// exit ;
29740: GO 29849
// ComAnimCustom ( unit , 1 ) ;
29742: LD_VAR 0 1
29746: PPUSH
29747: LD_INT 1
29749: PPUSH
29750: NOP4
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29754: LD_VAR 0 8
29758: PPUSH
29759: LD_VAR 0 9
29763: PPUSH
29764: LD_VAR 0 6
29768: PPUSH
29769: LD_VAR 0 7
29773: PPUSH
29774: NOP4
// repeat wait ( 1 ) ;
29778: LD_INT 1
29780: PPUSH
29781: NOP4
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29785: LD_VAR 0 1
29789: PPUSH
29790: NOP4
29794: PUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: NOP4
29804: OR
29805: PUSH
29806: LD_VAR 0 1
29810: PPUSH
29811: NOP4
29815: NOT
29816: OR
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: NOP4
29827: OR
29828: IFFALSE 29778
// RemoveSeeing ( _x , _y , side ) ;
29830: LD_VAR 0 8
29834: PPUSH
29835: LD_VAR 0 9
29839: PPUSH
29840: LD_VAR 0 6
29844: PPUSH
29845: NOP4
// end ; end_of_file
29849: LD_VAR 0 4
29853: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29854: LD_INT 0
29856: PPUSH
29857: PPUSH
// if exist_mode then
29858: LD_VAR 0 2
29862: IFFALSE 29887
// unit := CreateCharacter ( prefix & ident ) else
29864: LD_ADDR_VAR 0 5
29868: PUSH
29869: LD_VAR 0 3
29873: PUSH
29874: LD_VAR 0 1
29878: STR
29879: PPUSH
29880: NOP4
29884: ST_TO_ADDR
29885: GO 29902
// unit := NewCharacter ( ident ) ;
29887: LD_ADDR_VAR 0 5
29891: PUSH
29892: LD_VAR 0 1
29896: PPUSH
29897: NOP4
29901: ST_TO_ADDR
// result := unit ;
29902: LD_ADDR_VAR 0 4
29906: PUSH
29907: LD_VAR 0 5
29911: ST_TO_ADDR
// end ;
29912: LD_VAR 0 4
29916: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29917: LD_INT 0
29919: PPUSH
29920: PPUSH
// if not side or not nation then
29921: LD_VAR 0 1
29925: NOT
29926: PUSH
29927: LD_VAR 0 2
29931: NOT
29932: OR
29933: IFFALSE 29937
// exit ;
29935: GO 30705
// case nation of nation_american :
29937: LD_VAR 0 2
29941: PUSH
29942: LD_INT 1
29944: DOUBLE
29945: EQUAL
29946: IFTRUE 29950
29948: GO 30164
29950: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29951: LD_ADDR_VAR 0 4
29955: PUSH
29956: LD_INT 35
29958: PUSH
29959: LD_INT 45
29961: PUSH
29962: LD_INT 46
29964: PUSH
29965: LD_INT 47
29967: PUSH
29968: LD_INT 82
29970: PUSH
29971: LD_INT 83
29973: PUSH
29974: LD_INT 84
29976: PUSH
29977: LD_INT 85
29979: PUSH
29980: LD_INT 86
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 6
29991: PUSH
29992: LD_INT 15
29994: PUSH
29995: LD_INT 16
29997: PUSH
29998: LD_INT 7
30000: PUSH
30001: LD_INT 12
30003: PUSH
30004: LD_INT 13
30006: PUSH
30007: LD_INT 10
30009: PUSH
30010: LD_INT 14
30012: PUSH
30013: LD_INT 20
30015: PUSH
30016: LD_INT 21
30018: PUSH
30019: LD_INT 22
30021: PUSH
30022: LD_INT 25
30024: PUSH
30025: LD_INT 32
30027: PUSH
30028: LD_INT 27
30030: PUSH
30031: LD_INT 36
30033: PUSH
30034: LD_INT 69
30036: PUSH
30037: LD_INT 39
30039: PUSH
30040: LD_INT 34
30042: PUSH
30043: LD_INT 40
30045: PUSH
30046: LD_INT 48
30048: PUSH
30049: LD_INT 49
30051: PUSH
30052: LD_INT 50
30054: PUSH
30055: LD_INT 51
30057: PUSH
30058: LD_INT 52
30060: PUSH
30061: LD_INT 53
30063: PUSH
30064: LD_INT 54
30066: PUSH
30067: LD_INT 55
30069: PUSH
30070: LD_INT 56
30072: PUSH
30073: LD_INT 57
30075: PUSH
30076: LD_INT 58
30078: PUSH
30079: LD_INT 59
30081: PUSH
30082: LD_INT 60
30084: PUSH
30085: LD_INT 61
30087: PUSH
30088: LD_INT 62
30090: PUSH
30091: LD_INT 80
30093: PUSH
30094: LD_INT 82
30096: PUSH
30097: LD_INT 83
30099: PUSH
30100: LD_INT 84
30102: PUSH
30103: LD_INT 85
30105: PUSH
30106: LD_INT 86
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
30162: GO 30629
30164: LD_INT 2
30166: DOUBLE
30167: EQUAL
30168: IFTRUE 30172
30170: GO 30398
30172: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30173: LD_ADDR_VAR 0 4
30177: PUSH
30178: LD_INT 35
30180: PUSH
30181: LD_INT 45
30183: PUSH
30184: LD_INT 46
30186: PUSH
30187: LD_INT 47
30189: PUSH
30190: LD_INT 82
30192: PUSH
30193: LD_INT 83
30195: PUSH
30196: LD_INT 84
30198: PUSH
30199: LD_INT 85
30201: PUSH
30202: LD_INT 87
30204: PUSH
30205: LD_INT 70
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: LD_INT 11
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: LD_INT 4
30219: PUSH
30220: LD_INT 5
30222: PUSH
30223: LD_INT 6
30225: PUSH
30226: LD_INT 15
30228: PUSH
30229: LD_INT 18
30231: PUSH
30232: LD_INT 7
30234: PUSH
30235: LD_INT 17
30237: PUSH
30238: LD_INT 8
30240: PUSH
30241: LD_INT 20
30243: PUSH
30244: LD_INT 21
30246: PUSH
30247: LD_INT 22
30249: PUSH
30250: LD_INT 72
30252: PUSH
30253: LD_INT 26
30255: PUSH
30256: LD_INT 69
30258: PUSH
30259: LD_INT 39
30261: PUSH
30262: LD_INT 40
30264: PUSH
30265: LD_INT 41
30267: PUSH
30268: LD_INT 42
30270: PUSH
30271: LD_INT 43
30273: PUSH
30274: LD_INT 48
30276: PUSH
30277: LD_INT 49
30279: PUSH
30280: LD_INT 50
30282: PUSH
30283: LD_INT 51
30285: PUSH
30286: LD_INT 52
30288: PUSH
30289: LD_INT 53
30291: PUSH
30292: LD_INT 54
30294: PUSH
30295: LD_INT 55
30297: PUSH
30298: LD_INT 56
30300: PUSH
30301: LD_INT 60
30303: PUSH
30304: LD_INT 61
30306: PUSH
30307: LD_INT 62
30309: PUSH
30310: LD_INT 66
30312: PUSH
30313: LD_INT 67
30315: PUSH
30316: LD_INT 68
30318: PUSH
30319: LD_INT 81
30321: PUSH
30322: LD_INT 82
30324: PUSH
30325: LD_INT 83
30327: PUSH
30328: LD_INT 84
30330: PUSH
30331: LD_INT 85
30333: PUSH
30334: LD_INT 87
30336: PUSH
30337: LD_INT 88
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: ST_TO_ADDR
30396: GO 30629
30398: LD_INT 3
30400: DOUBLE
30401: EQUAL
30402: IFTRUE 30406
30404: GO 30628
30406: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30407: LD_ADDR_VAR 0 4
30411: PUSH
30412: LD_INT 46
30414: PUSH
30415: LD_INT 47
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 2
30423: PUSH
30424: LD_INT 82
30426: PUSH
30427: LD_INT 83
30429: PUSH
30430: LD_INT 84
30432: PUSH
30433: LD_INT 85
30435: PUSH
30436: LD_INT 86
30438: PUSH
30439: LD_INT 11
30441: PUSH
30442: LD_INT 9
30444: PUSH
30445: LD_INT 20
30447: PUSH
30448: LD_INT 19
30450: PUSH
30451: LD_INT 21
30453: PUSH
30454: LD_INT 24
30456: PUSH
30457: LD_INT 22
30459: PUSH
30460: LD_INT 25
30462: PUSH
30463: LD_INT 28
30465: PUSH
30466: LD_INT 29
30468: PUSH
30469: LD_INT 30
30471: PUSH
30472: LD_INT 31
30474: PUSH
30475: LD_INT 37
30477: PUSH
30478: LD_INT 38
30480: PUSH
30481: LD_INT 32
30483: PUSH
30484: LD_INT 27
30486: PUSH
30487: LD_INT 33
30489: PUSH
30490: LD_INT 69
30492: PUSH
30493: LD_INT 39
30495: PUSH
30496: LD_INT 34
30498: PUSH
30499: LD_INT 40
30501: PUSH
30502: LD_INT 71
30504: PUSH
30505: LD_INT 23
30507: PUSH
30508: LD_INT 44
30510: PUSH
30511: LD_INT 48
30513: PUSH
30514: LD_INT 49
30516: PUSH
30517: LD_INT 50
30519: PUSH
30520: LD_INT 51
30522: PUSH
30523: LD_INT 52
30525: PUSH
30526: LD_INT 53
30528: PUSH
30529: LD_INT 54
30531: PUSH
30532: LD_INT 55
30534: PUSH
30535: LD_INT 56
30537: PUSH
30538: LD_INT 57
30540: PUSH
30541: LD_INT 58
30543: PUSH
30544: LD_INT 59
30546: PUSH
30547: LD_INT 63
30549: PUSH
30550: LD_INT 64
30552: PUSH
30553: LD_INT 65
30555: PUSH
30556: LD_INT 82
30558: PUSH
30559: LD_INT 83
30561: PUSH
30562: LD_INT 84
30564: PUSH
30565: LD_INT 85
30567: PUSH
30568: LD_INT 86
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: ST_TO_ADDR
30626: GO 30629
30628: POP
// if state > - 1 and state < 3 then
30629: LD_VAR 0 3
30633: PUSH
30634: LD_INT 1
30636: NEG
30637: GREATER
30638: PUSH
30639: LD_VAR 0 3
30643: PUSH
30644: LD_INT 3
30646: LESS
30647: AND
30648: IFFALSE 30705
// for i in result do
30650: LD_ADDR_VAR 0 5
30654: PUSH
30655: LD_VAR 0 4
30659: PUSH
30660: FOR_IN
30661: IFFALSE 30703
// if GetTech ( i , side ) <> state then
30663: LD_VAR 0 5
30667: PPUSH
30668: LD_VAR 0 1
30672: PPUSH
30673: NOP4
30677: PUSH
30678: LD_VAR 0 3
30682: NONEQUAL
30683: IFFALSE 30701
// result := result diff i ;
30685: LD_ADDR_VAR 0 4
30689: PUSH
30690: LD_VAR 0 4
30694: PUSH
30695: LD_VAR 0 5
30699: DIFF
30700: ST_TO_ADDR
30701: GO 30660
30703: POP
30704: POP
// end ;
30705: LD_VAR 0 4
30709: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
// result := true ;
30715: LD_ADDR_VAR 0 3
30719: PUSH
30720: LD_INT 1
30722: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30723: LD_ADDR_VAR 0 5
30727: PUSH
30728: LD_VAR 0 2
30732: PPUSH
30733: NOP4
30737: ST_TO_ADDR
// if not tmp then
30738: LD_VAR 0 5
30742: NOT
30743: IFFALSE 30747
// exit ;
30745: GO 30796
// for i in tmp do
30747: LD_ADDR_VAR 0 4
30751: PUSH
30752: LD_VAR 0 5
30756: PUSH
30757: FOR_IN
30758: IFFALSE 30794
// if GetTech ( i , side ) <> state_researched then
30760: LD_VAR 0 4
30764: PPUSH
30765: LD_VAR 0 1
30769: PPUSH
30770: NOP4
30774: PUSH
30775: LD_INT 2
30777: NONEQUAL
30778: IFFALSE 30792
// begin result := false ;
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_INT 0
30787: ST_TO_ADDR
// exit ;
30788: POP
30789: POP
30790: GO 30796
// end ;
30792: GO 30757
30794: POP
30795: POP
// end ;
30796: LD_VAR 0 3
30800: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30801: LD_INT 0
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
30807: PPUSH
30808: PPUSH
30809: PPUSH
30810: PPUSH
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
30815: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30816: LD_VAR 0 1
30820: NOT
30821: PUSH
30822: LD_VAR 0 1
30826: PPUSH
30827: NOP4
30831: PUSH
30832: LD_INT 9
30834: NONEQUAL
30835: OR
30836: IFFALSE 30840
// exit ;
30838: GO 31413
// side := GetSide ( unit ) ;
30840: LD_ADDR_VAR 0 9
30844: PUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: NOP4
30854: ST_TO_ADDR
// tech_space := tech_spacanom ;
30855: LD_ADDR_VAR 0 12
30859: PUSH
30860: LD_INT 29
30862: ST_TO_ADDR
// tech_time := tech_taurad ;
30863: LD_ADDR_VAR 0 13
30867: PUSH
30868: LD_INT 28
30870: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30871: LD_ADDR_VAR 0 11
30875: PUSH
30876: LD_VAR 0 1
30880: PPUSH
30881: NOP4
30885: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30886: LD_VAR 0 11
30890: PPUSH
30891: NOP4
30895: PUSH
30896: LD_INT 2
30898: EQUAL
30899: IFFALSE 30903
// exit ;
30901: GO 31413
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30903: LD_ADDR_VAR 0 8
30907: PUSH
30908: LD_INT 81
30910: PUSH
30911: LD_VAR 0 9
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PPUSH
30941: NOP4
30945: ST_TO_ADDR
// if not tmp then
30946: LD_VAR 0 8
30950: NOT
30951: IFFALSE 30955
// exit ;
30953: GO 31413
// if in_unit then
30955: LD_VAR 0 11
30959: IFFALSE 30983
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30961: LD_ADDR_VAR 0 10
30965: PUSH
30966: LD_VAR 0 8
30970: PPUSH
30971: LD_VAR 0 11
30975: PPUSH
30976: NOP4
30980: ST_TO_ADDR
30981: GO 31003
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30983: LD_ADDR_VAR 0 10
30987: PUSH
30988: LD_VAR 0 8
30992: PPUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: NOP4
31002: ST_TO_ADDR
// if not enemy then
31003: LD_VAR 0 10
31007: NOT
31008: IFFALSE 31012
// exit ;
31010: GO 31413
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31012: LD_VAR 0 11
31016: PUSH
31017: LD_VAR 0 11
31021: PPUSH
31022: LD_VAR 0 10
31026: PPUSH
31027: NOP4
31031: PUSH
31032: LD_INT 13
31034: GREATER
31035: AND
31036: PUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: LD_VAR 0 10
31046: PPUSH
31047: NOP4
31051: PUSH
31052: LD_INT 12
31054: GREATER
31055: OR
31056: IFFALSE 31060
// exit ;
31058: GO 31413
// missile := [ 1 ] ;
31060: LD_ADDR_VAR 0 14
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: EMPTY
31069: LIST
31070: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31071: LD_VAR 0 9
31075: PPUSH
31076: LD_VAR 0 12
31080: PPUSH
31081: NOP4
31085: IFFALSE 31114
// missile := Replace ( missile , missile + 1 , 2 ) ;
31087: LD_ADDR_VAR 0 14
31091: PUSH
31092: LD_VAR 0 14
31096: PPUSH
31097: LD_VAR 0 14
31101: PUSH
31102: LD_INT 1
31104: PLUS
31105: PPUSH
31106: LD_INT 2
31108: PPUSH
31109: NOP4
31113: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31114: LD_VAR 0 9
31118: PPUSH
31119: LD_VAR 0 13
31123: PPUSH
31124: NOP4
31128: PUSH
31129: LD_VAR 0 10
31133: PPUSH
31134: NOP4
31138: PPUSH
31139: LD_VAR 0 13
31143: PPUSH
31144: NOP4
31148: NOT
31149: AND
31150: IFFALSE 31179
// missile := Replace ( missile , missile + 1 , 3 ) ;
31152: LD_ADDR_VAR 0 14
31156: PUSH
31157: LD_VAR 0 14
31161: PPUSH
31162: LD_VAR 0 14
31166: PUSH
31167: LD_INT 1
31169: PLUS
31170: PPUSH
31171: LD_INT 3
31173: PPUSH
31174: NOP4
31178: ST_TO_ADDR
// if missile < 2 then
31179: LD_VAR 0 14
31183: PUSH
31184: LD_INT 2
31186: LESS
31187: IFFALSE 31191
// exit ;
31189: GO 31413
// x := GetX ( enemy ) ;
31191: LD_ADDR_VAR 0 4
31195: PUSH
31196: LD_VAR 0 10
31200: PPUSH
31201: NOP4
31205: ST_TO_ADDR
// y := GetY ( enemy ) ;
31206: LD_ADDR_VAR 0 5
31210: PUSH
31211: LD_VAR 0 10
31215: PPUSH
31216: NOP4
31220: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31221: LD_ADDR_VAR 0 6
31225: PUSH
31226: LD_VAR 0 4
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PPUSH
31235: LD_INT 1
31237: PPUSH
31238: NOP4
31242: PLUS
31243: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31244: LD_ADDR_VAR 0 7
31248: PUSH
31249: LD_VAR 0 5
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PPUSH
31258: LD_INT 1
31260: PPUSH
31261: NOP4
31265: PLUS
31266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31267: LD_VAR 0 6
31271: PPUSH
31272: LD_VAR 0 7
31276: PPUSH
31277: NOP4
31281: NOT
31282: IFFALSE 31304
// begin _x := x ;
31284: LD_ADDR_VAR 0 6
31288: PUSH
31289: LD_VAR 0 4
31293: ST_TO_ADDR
// _y := y ;
31294: LD_ADDR_VAR 0 7
31298: PUSH
31299: LD_VAR 0 5
31303: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31304: LD_ADDR_VAR 0 3
31308: PUSH
31309: LD_INT 1
31311: PPUSH
31312: LD_VAR 0 14
31316: PPUSH
31317: NOP4
31321: ST_TO_ADDR
// case i of 1 :
31322: LD_VAR 0 3
31326: PUSH
31327: LD_INT 1
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31352
31335: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_VAR 0 10
31345: PPUSH
31346: NOP4
31350: GO 31413
31352: LD_INT 2
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31382
31360: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31361: LD_VAR 0 1
31365: PPUSH
31366: LD_VAR 0 6
31370: PPUSH
31371: LD_VAR 0 7
31375: PPUSH
31376: NOP4
31380: GO 31413
31382: LD_INT 3
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31412
31390: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31391: LD_VAR 0 1
31395: PPUSH
31396: LD_VAR 0 6
31400: PPUSH
31401: LD_VAR 0 7
31405: PPUSH
31406: NOP4
31410: GO 31413
31412: POP
// end ;
31413: LD_VAR 0 2
31417: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31418: LD_INT 0
31420: PPUSH
31421: PPUSH
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
// if not unit or not building then
31426: LD_VAR 0 1
31430: NOT
31431: PUSH
31432: LD_VAR 0 2
31436: NOT
31437: OR
31438: IFFALSE 31442
// exit ;
31440: GO 31600
// x := GetX ( building ) ;
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_VAR 0 2
31451: PPUSH
31452: NOP4
31456: ST_TO_ADDR
// y := GetY ( building ) ;
31457: LD_ADDR_VAR 0 6
31461: PUSH
31462: LD_VAR 0 2
31466: PPUSH
31467: NOP4
31471: ST_TO_ADDR
// for i = 0 to 5 do
31472: LD_ADDR_VAR 0 4
31476: PUSH
31477: DOUBLE
31478: LD_INT 0
31480: DEC
31481: ST_TO_ADDR
31482: LD_INT 5
31484: PUSH
31485: FOR_TO
31486: IFFALSE 31598
// begin _x := ShiftX ( x , i , 3 ) ;
31488: LD_ADDR_VAR 0 7
31492: PUSH
31493: LD_VAR 0 5
31497: PPUSH
31498: LD_VAR 0 4
31502: PPUSH
31503: LD_INT 3
31505: PPUSH
31506: NOP4
31510: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31511: LD_ADDR_VAR 0 8
31515: PUSH
31516: LD_VAR 0 6
31520: PPUSH
31521: LD_VAR 0 4
31525: PPUSH
31526: LD_INT 3
31528: PPUSH
31529: NOP4
31533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31534: LD_VAR 0 7
31538: PPUSH
31539: LD_VAR 0 8
31543: PPUSH
31544: NOP4
31548: NOT
31549: IFFALSE 31553
// continue ;
31551: GO 31485
// if HexInfo ( _x , _y ) = 0 then
31553: LD_VAR 0 7
31557: PPUSH
31558: LD_VAR 0 8
31562: PPUSH
31563: NOP4
31567: PUSH
31568: LD_INT 0
31570: EQUAL
31571: IFFALSE 31596
// begin ComMoveXY ( unit , _x , _y ) ;
31573: LD_VAR 0 1
31577: PPUSH
31578: LD_VAR 0 7
31582: PPUSH
31583: LD_VAR 0 8
31587: PPUSH
31588: NOP4
// exit ;
31592: POP
31593: POP
31594: GO 31600
// end ; end ;
31596: GO 31485
31598: POP
31599: POP
// end ;
31600: LD_VAR 0 3
31604: RET
// export function ScanBase ( side , base_area ) ; begin
31605: LD_INT 0
31607: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31608: LD_ADDR_VAR 0 3
31612: PUSH
31613: LD_VAR 0 2
31617: PPUSH
31618: LD_INT 81
31620: PUSH
31621: LD_VAR 0 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PPUSH
31630: NOP4
31634: ST_TO_ADDR
// end ;
31635: LD_VAR 0 3
31639: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31640: LD_INT 0
31642: PPUSH
31643: PPUSH
31644: PPUSH
31645: PPUSH
// result := false ;
31646: LD_ADDR_VAR 0 2
31650: PUSH
31651: LD_INT 0
31653: ST_TO_ADDR
// side := GetSide ( unit ) ;
31654: LD_ADDR_VAR 0 3
31658: PUSH
31659: LD_VAR 0 1
31663: PPUSH
31664: NOP4
31668: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31669: LD_ADDR_VAR 0 4
31673: PUSH
31674: LD_VAR 0 1
31678: PPUSH
31679: NOP4
31683: ST_TO_ADDR
// case nat of 1 :
31684: LD_VAR 0 4
31688: PUSH
31689: LD_INT 1
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31708
31697: POP
// tech := tech_lassight ; 2 :
31698: LD_ADDR_VAR 0 5
31702: PUSH
31703: LD_INT 12
31705: ST_TO_ADDR
31706: GO 31747
31708: LD_INT 2
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31727
31716: POP
// tech := tech_mortar ; 3 :
31717: LD_ADDR_VAR 0 5
31721: PUSH
31722: LD_INT 41
31724: ST_TO_ADDR
31725: GO 31747
31727: LD_INT 3
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31746
31735: POP
// tech := tech_bazooka ; end ;
31736: LD_ADDR_VAR 0 5
31740: PUSH
31741: LD_INT 44
31743: ST_TO_ADDR
31744: GO 31747
31746: POP
// if Researched ( side , tech ) then
31747: LD_VAR 0 3
31751: PPUSH
31752: LD_VAR 0 5
31756: PPUSH
31757: NOP4
31761: IFFALSE 31788
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31763: LD_ADDR_VAR 0 2
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: LD_INT 8
31773: PUSH
31774: LD_INT 9
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: PUSH
31782: LD_VAR 0 4
31786: ARRAY
31787: ST_TO_ADDR
// end ;
31788: LD_VAR 0 2
31792: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31793: LD_INT 0
31795: PPUSH
31796: PPUSH
31797: PPUSH
// if not mines then
31798: LD_VAR 0 2
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 31951
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31807: LD_ADDR_VAR 0 5
31811: PUSH
31812: LD_INT 81
31814: PUSH
31815: LD_VAR 0 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: LD_INT 21
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PPUSH
31845: NOP4
31849: ST_TO_ADDR
// for i in mines do
31850: LD_ADDR_VAR 0 4
31854: PUSH
31855: LD_VAR 0 2
31859: PUSH
31860: FOR_IN
31861: IFFALSE 31949
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31863: LD_VAR 0 4
31867: PUSH
31868: LD_INT 1
31870: ARRAY
31871: PPUSH
31872: LD_VAR 0 4
31876: PUSH
31877: LD_INT 2
31879: ARRAY
31880: PPUSH
31881: NOP4
31885: NOT
31886: IFFALSE 31890
// continue ;
31888: GO 31860
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31890: LD_VAR 0 4
31894: PUSH
31895: LD_INT 1
31897: ARRAY
31898: PPUSH
31899: LD_VAR 0 4
31903: PUSH
31904: LD_INT 2
31906: ARRAY
31907: PPUSH
31908: NOP4
31912: PUSH
31913: LD_VAR 0 5
31917: IN
31918: IFFALSE 31947
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31920: LD_VAR 0 4
31924: PUSH
31925: LD_INT 1
31927: ARRAY
31928: PPUSH
31929: LD_VAR 0 4
31933: PUSH
31934: LD_INT 2
31936: ARRAY
31937: PPUSH
31938: LD_VAR 0 1
31942: PPUSH
31943: NOP4
// end ;
31947: GO 31860
31949: POP
31950: POP
// end ;
31951: LD_VAR 0 3
31955: RET
// export function Count ( array ) ; var i ; begin
31956: LD_INT 0
31958: PPUSH
31959: PPUSH
// result := 0 ;
31960: LD_ADDR_VAR 0 2
31964: PUSH
31965: LD_INT 0
31967: ST_TO_ADDR
// for i in array do
31968: LD_ADDR_VAR 0 3
31972: PUSH
31973: LD_VAR 0 1
31977: PUSH
31978: FOR_IN
31979: IFFALSE 32003
// if i then
31981: LD_VAR 0 3
31985: IFFALSE 32001
// result := result + 1 ;
31987: LD_ADDR_VAR 0 2
31991: PUSH
31992: LD_VAR 0 2
31996: PUSH
31997: LD_INT 1
31999: PLUS
32000: ST_TO_ADDR
32001: GO 31978
32003: POP
32004: POP
// end ;
32005: LD_VAR 0 2
32009: RET
// export function IsEmpty ( building ) ; begin
32010: LD_INT 0
32012: PPUSH
// if not building then
32013: LD_VAR 0 1
32017: NOT
32018: IFFALSE 32022
// exit ;
32020: GO 32065
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32022: LD_ADDR_VAR 0 2
32026: PUSH
32027: LD_VAR 0 1
32031: PUSH
32032: LD_INT 22
32034: PUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: NOP4
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 58
32051: PUSH
32052: EMPTY
32053: LIST
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PPUSH
32059: NOP4
32063: IN
32064: ST_TO_ADDR
// end ;
32065: LD_VAR 0 2
32069: RET
// export function IsNotFull ( building ) ; var places ; begin
32070: LD_INT 0
32072: PPUSH
32073: PPUSH
// if not building then
32074: LD_VAR 0 1
32078: NOT
32079: IFFALSE 32083
// exit ;
32081: GO 32254
// result := false ;
32083: LD_ADDR_VAR 0 2
32087: PUSH
32088: LD_INT 0
32090: ST_TO_ADDR
// places := 0 ;
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 0
32098: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32099: LD_VAR 0 1
32103: PPUSH
32104: NOP4
32108: PUSH
32109: LD_INT 0
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32171
32115: LD_INT 1
32117: DOUBLE
32118: EQUAL
32119: IFTRUE 32171
32121: LD_INT 6
32123: DOUBLE
32124: EQUAL
32125: IFTRUE 32171
32127: LD_INT 7
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32171
32133: LD_INT 8
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32171
32139: LD_INT 4
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32171
32145: LD_INT 5
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32171
32151: LD_INT 2
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32171
32157: LD_INT 3
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32171
32163: LD_INT 35
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32182
32171: POP
// places := 6 ; b_bunker , b_breastwork :
32172: LD_ADDR_VAR 0 3
32176: PUSH
32177: LD_INT 6
32179: ST_TO_ADDR
32180: GO 32227
32182: LD_INT 32
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32196
32188: LD_INT 31
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32207
32196: POP
// places := 1 ; b_control_tower :
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_INT 1
32204: ST_TO_ADDR
32205: GO 32227
32207: LD_INT 36
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32226
32215: POP
// places := 3 ; end ;
32216: LD_ADDR_VAR 0 3
32220: PUSH
32221: LD_INT 3
32223: ST_TO_ADDR
32224: GO 32227
32226: POP
// if places then
32227: LD_VAR 0 3
32231: IFFALSE 32254
// result := UnitsInside ( building ) < places ;
32233: LD_ADDR_VAR 0 2
32237: PUSH
32238: LD_VAR 0 1
32242: PPUSH
32243: NOP4
32247: PUSH
32248: LD_VAR 0 3
32252: LESS
32253: ST_TO_ADDR
// end ;
32254: LD_VAR 0 2
32258: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32259: LD_INT 0
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
// tmp := [ ] ;
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: EMPTY
32271: ST_TO_ADDR
// list := [ ] ;
32272: LD_ADDR_VAR 0 5
32276: PUSH
32277: EMPTY
32278: ST_TO_ADDR
// for i = 16 to 25 do
32279: LD_ADDR_VAR 0 4
32283: PUSH
32284: DOUBLE
32285: LD_INT 16
32287: DEC
32288: ST_TO_ADDR
32289: LD_INT 25
32291: PUSH
32292: FOR_TO
32293: IFFALSE 32366
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32295: LD_ADDR_VAR 0 3
32299: PUSH
32300: LD_VAR 0 3
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: NOP4
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 91
32324: PUSH
32325: LD_VAR 0 1
32329: PUSH
32330: LD_INT 6
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 30
32340: PUSH
32341: LD_VAR 0 4
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: PUSH
32355: EMPTY
32356: LIST
32357: PPUSH
32358: NOP4
32362: ADD
32363: ST_TO_ADDR
32364: GO 32292
32366: POP
32367: POP
// for i = 1 to tmp do
32368: LD_ADDR_VAR 0 4
32372: PUSH
32373: DOUBLE
32374: LD_INT 1
32376: DEC
32377: ST_TO_ADDR
32378: LD_VAR 0 3
32382: PUSH
32383: FOR_TO
32384: IFFALSE 32472
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32386: LD_ADDR_VAR 0 5
32390: PUSH
32391: LD_VAR 0 5
32395: PUSH
32396: LD_VAR 0 3
32400: PUSH
32401: LD_VAR 0 4
32405: ARRAY
32406: PPUSH
32407: NOP4
32411: PUSH
32412: LD_VAR 0 3
32416: PUSH
32417: LD_VAR 0 4
32421: ARRAY
32422: PPUSH
32423: NOP4
32427: PUSH
32428: LD_VAR 0 3
32432: PUSH
32433: LD_VAR 0 4
32437: ARRAY
32438: PPUSH
32439: NOP4
32443: PUSH
32444: LD_VAR 0 3
32448: PUSH
32449: LD_VAR 0 4
32453: ARRAY
32454: PPUSH
32455: NOP4
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: ADD
32469: ST_TO_ADDR
32470: GO 32383
32472: POP
32473: POP
// result := list ;
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_VAR 0 5
32483: ST_TO_ADDR
// end ;
32484: LD_VAR 0 2
32488: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32489: LD_INT 0
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
// if not factory then
32498: LD_VAR 0 1
32502: NOT
32503: IFFALSE 32507
// exit ;
32505: GO 33100
// if control = control_apeman then
32507: LD_VAR 0 4
32511: PUSH
32512: LD_INT 5
32514: EQUAL
32515: IFFALSE 32624
// begin tmp := UnitsInside ( factory ) ;
32517: LD_ADDR_VAR 0 8
32521: PUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: NOP4
32531: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32532: LD_VAR 0 8
32536: PPUSH
32537: LD_INT 25
32539: PUSH
32540: LD_INT 12
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PPUSH
32547: NOP4
32551: NOT
32552: IFFALSE 32562
// control := control_manual ;
32554: LD_ADDR_VAR 0 4
32558: PUSH
32559: LD_INT 1
32561: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32562: LD_ADDR_VAR 0 8
32566: PUSH
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL 32259 0 1
32576: ST_TO_ADDR
// if tmp then
32577: LD_VAR 0 8
32581: IFFALSE 32624
// begin for i in tmp do
32583: LD_ADDR_VAR 0 7
32587: PUSH
32588: LD_VAR 0 8
32592: PUSH
32593: FOR_IN
32594: IFFALSE 32622
// if i [ 1 ] = b_ext_radio then
32596: LD_VAR 0 7
32600: PUSH
32601: LD_INT 1
32603: ARRAY
32604: PUSH
32605: LD_INT 22
32607: EQUAL
32608: IFFALSE 32620
// begin control := control_remote ;
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_INT 2
32617: ST_TO_ADDR
// break ;
32618: GO 32622
// end ;
32620: GO 32593
32622: POP
32623: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32624: LD_VAR 0 1
32628: PPUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: LD_VAR 0 3
32638: PPUSH
32639: LD_VAR 0 4
32643: PPUSH
32644: LD_VAR 0 5
32648: PPUSH
32649: NOP4
32653: IFFALSE 32688
// begin result := [ chassis , engine , control , weapon ] ;
32655: LD_ADDR_VAR 0 6
32659: PUSH
32660: LD_VAR 0 2
32664: PUSH
32665: LD_VAR 0 3
32669: PUSH
32670: LD_VAR 0 4
32674: PUSH
32675: LD_VAR 0 5
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: ST_TO_ADDR
// exit ;
32686: GO 33100
// end ; _chassis := AvailableChassisList ( factory ) ;
32688: LD_ADDR_VAR 0 9
32692: PUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: NOP4
32702: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32703: LD_ADDR_VAR 0 11
32707: PUSH
32708: LD_VAR 0 1
32712: PPUSH
32713: NOP4
32717: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32718: LD_ADDR_VAR 0 12
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: NOP4
32732: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32733: LD_ADDR_VAR 0 10
32737: PUSH
32738: LD_VAR 0 1
32742: PPUSH
32743: NOP4
32747: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32748: LD_VAR 0 9
32752: NOT
32753: PUSH
32754: LD_VAR 0 11
32758: NOT
32759: OR
32760: PUSH
32761: LD_VAR 0 12
32765: NOT
32766: OR
32767: PUSH
32768: LD_VAR 0 10
32772: NOT
32773: OR
32774: IFFALSE 32809
// begin result := [ chassis , engine , control , weapon ] ;
32776: LD_ADDR_VAR 0 6
32780: PUSH
32781: LD_VAR 0 2
32785: PUSH
32786: LD_VAR 0 3
32790: PUSH
32791: LD_VAR 0 4
32795: PUSH
32796: LD_VAR 0 5
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
// exit ;
32807: GO 33100
// end ; if not chassis in _chassis then
32809: LD_VAR 0 2
32813: PUSH
32814: LD_VAR 0 9
32818: IN
32819: NOT
32820: IFFALSE 32846
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32822: LD_ADDR_VAR 0 2
32826: PUSH
32827: LD_VAR 0 9
32831: PUSH
32832: LD_INT 1
32834: PPUSH
32835: LD_VAR 0 9
32839: PPUSH
32840: NOP4
32844: ARRAY
32845: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32846: LD_VAR 0 2
32850: PPUSH
32851: LD_VAR 0 3
32855: PPUSH
32856: CALL 33105 0 2
32860: NOT
32861: IFFALSE 32920
// repeat engine := _engine [ 1 ] ;
32863: LD_ADDR_VAR 0 3
32867: PUSH
32868: LD_VAR 0 11
32872: PUSH
32873: LD_INT 1
32875: ARRAY
32876: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32877: LD_ADDR_VAR 0 11
32881: PUSH
32882: LD_VAR 0 11
32886: PPUSH
32887: LD_INT 1
32889: PPUSH
32890: NOP4
32894: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32895: LD_VAR 0 2
32899: PPUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: CALL 33105 0 2
32909: PUSH
32910: LD_VAR 0 11
32914: PUSH
32915: EMPTY
32916: EQUAL
32917: OR
32918: IFFALSE 32863
// if not control in _control then
32920: LD_VAR 0 4
32924: PUSH
32925: LD_VAR 0 12
32929: IN
32930: NOT
32931: IFFALSE 32957
// control := _control [ rand ( 1 , _control ) ] ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_VAR 0 12
32942: PUSH
32943: LD_INT 1
32945: PPUSH
32946: LD_VAR 0 12
32950: PPUSH
32951: NOP4
32955: ARRAY
32956: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32957: LD_VAR 0 2
32961: PPUSH
32962: LD_VAR 0 5
32966: PPUSH
32967: CALL 33325 0 2
32971: NOT
32972: IFFALSE 33031
// repeat weapon := _weapon [ 1 ] ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_VAR 0 10
32983: PUSH
32984: LD_INT 1
32986: ARRAY
32987: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32988: LD_ADDR_VAR 0 10
32992: PUSH
32993: LD_VAR 0 10
32997: PPUSH
32998: LD_INT 1
33000: PPUSH
33001: NOP4
33005: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33006: LD_VAR 0 2
33010: PPUSH
33011: LD_VAR 0 5
33015: PPUSH
33016: CALL 33325 0 2
33020: PUSH
33021: LD_VAR 0 10
33025: PUSH
33026: EMPTY
33027: EQUAL
33028: OR
33029: IFFALSE 32974
// result := [ ] ;
33031: LD_ADDR_VAR 0 6
33035: PUSH
33036: EMPTY
33037: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33038: LD_VAR 0 1
33042: PPUSH
33043: LD_VAR 0 2
33047: PPUSH
33048: LD_VAR 0 3
33052: PPUSH
33053: LD_VAR 0 4
33057: PPUSH
33058: LD_VAR 0 5
33062: PPUSH
33063: NOP4
33067: IFFALSE 33100
// result := [ chassis , engine , control , weapon ] ;
33069: LD_ADDR_VAR 0 6
33073: PUSH
33074: LD_VAR 0 2
33078: PUSH
33079: LD_VAR 0 3
33083: PUSH
33084: LD_VAR 0 4
33088: PUSH
33089: LD_VAR 0 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: ST_TO_ADDR
// end ;
33100: LD_VAR 0 6
33104: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33105: LD_INT 0
33107: PPUSH
// if not chassis or not engine then
33108: LD_VAR 0 1
33112: NOT
33113: PUSH
33114: LD_VAR 0 2
33118: NOT
33119: OR
33120: IFFALSE 33124
// exit ;
33122: GO 33320
// case engine of engine_solar :
33124: LD_VAR 0 2
33128: PUSH
33129: LD_INT 2
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33175
33137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 11
33145: PUSH
33146: LD_INT 12
33148: PUSH
33149: LD_INT 13
33151: PUSH
33152: LD_INT 14
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 33304
33175: LD_INT 1
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33245
33183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: LD_INT 4
33212: PUSH
33213: LD_INT 5
33215: PUSH
33216: LD_INT 21
33218: PUSH
33219: LD_INT 23
33221: PUSH
33222: LD_INT 22
33224: PUSH
33225: LD_INT 24
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: ST_TO_ADDR
33243: GO 33304
33245: LD_INT 3
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33303
33253: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_INT 13
33261: PUSH
33262: LD_INT 14
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: LD_INT 4
33273: PUSH
33274: LD_INT 5
33276: PUSH
33277: LD_INT 21
33279: PUSH
33280: LD_INT 22
33282: PUSH
33283: LD_INT 23
33285: PUSH
33286: LD_INT 24
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: ST_TO_ADDR
33301: GO 33304
33303: POP
// result := ( chassis in result ) ;
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: LD_VAR 0 1
33313: PUSH
33314: LD_VAR 0 3
33318: IN
33319: ST_TO_ADDR
// end ;
33320: LD_VAR 0 3
33324: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33325: LD_INT 0
33327: PPUSH
// if not chassis or not weapon then
33328: LD_VAR 0 1
33332: NOT
33333: PUSH
33334: LD_VAR 0 2
33338: NOT
33339: OR
33340: IFFALSE 33344
// exit ;
33342: GO 34404
// case weapon of us_machine_gun :
33344: LD_VAR 0 2
33348: PUSH
33349: LD_INT 2
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33387
33357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 4
33374: PUSH
33375: LD_INT 5
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
33385: GO 34388
33387: LD_INT 3
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33395
33393: GO 33425
33395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33396: LD_ADDR_VAR 0 3
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 3
33409: PUSH
33410: LD_INT 4
33412: PUSH
33413: LD_INT 5
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: ST_TO_ADDR
33423: GO 34388
33425: LD_INT 11
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33463
33433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
33461: GO 34388
33463: LD_INT 4
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33497
33471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: LD_INT 5
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
33495: GO 34388
33497: LD_INT 5
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33531
33505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33506: LD_ADDR_VAR 0 3
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: LD_INT 4
33519: PUSH
33520: LD_INT 5
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 34388
33531: LD_INT 9
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33565
33539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: LD_INT 4
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
33563: GO 34388
33565: LD_INT 7
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33599
33573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
33597: GO 34388
33599: LD_INT 12
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33633
33607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 4
33621: PUSH
33622: LD_INT 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: ST_TO_ADDR
33631: GO 34388
33633: LD_INT 13
33635: DOUBLE
33636: EQUAL
33637: IFTRUE 33641
33639: GO 33667
33641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33642: LD_ADDR_VAR 0 3
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 3
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 5
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 34388
33667: LD_INT 14
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33693
33675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: LD_INT 5
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: ST_TO_ADDR
33691: GO 34388
33693: LD_INT 6
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33701
33699: GO 33719
33701: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 4
33709: PUSH
33710: LD_INT 5
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: ST_TO_ADDR
33717: GO 34388
33719: LD_INT 10
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33727
33725: GO 33745
33727: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_INT 4
33735: PUSH
33736: LD_INT 5
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: ST_TO_ADDR
33743: GO 34388
33745: LD_INT 22
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33779
33753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: LD_INT 11
33761: PUSH
33762: LD_INT 12
33764: PUSH
33765: LD_INT 13
33767: PUSH
33768: LD_INT 14
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: ST_TO_ADDR
33777: GO 34388
33779: LD_INT 23
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33787
33785: GO 33813
33787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33788: LD_ADDR_VAR 0 3
33792: PUSH
33793: LD_INT 11
33795: PUSH
33796: LD_INT 12
33798: PUSH
33799: LD_INT 13
33801: PUSH
33802: LD_INT 14
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
33811: GO 34388
33813: LD_INT 24
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33847
33821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33822: LD_ADDR_VAR 0 3
33826: PUSH
33827: LD_INT 11
33829: PUSH
33830: LD_INT 12
33832: PUSH
33833: LD_INT 13
33835: PUSH
33836: LD_INT 14
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
33845: GO 34388
33847: LD_INT 30
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33855
33853: GO 33881
33855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 11
33863: PUSH
33864: LD_INT 12
33866: PUSH
33867: LD_INT 13
33869: PUSH
33870: LD_INT 14
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 34388
33881: LD_INT 25
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33907
33889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 13
33897: PUSH
33898: LD_INT 14
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 34388
33907: LD_INT 27
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33933
33915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 13
33923: PUSH
33924: LD_INT 14
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: ST_TO_ADDR
33931: GO 34388
33933: LD_INT 92
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33941
33939: GO 33967
33941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_INT 11
33949: PUSH
33950: LD_INT 12
33952: PUSH
33953: LD_INT 13
33955: PUSH
33956: LD_INT 14
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
33965: GO 34388
33967: LD_INT 28
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33975
33973: GO 33993
33975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_INT 13
33983: PUSH
33984: LD_INT 14
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: ST_TO_ADDR
33991: GO 34388
33993: LD_INT 29
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34001
33999: GO 34019
34001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_INT 13
34009: PUSH
34010: LD_INT 14
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: ST_TO_ADDR
34017: GO 34388
34019: LD_INT 31
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34045
34027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 13
34035: PUSH
34036: LD_INT 14
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: ST_TO_ADDR
34043: GO 34388
34045: LD_INT 26
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34071
34053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34054: LD_ADDR_VAR 0 3
34058: PUSH
34059: LD_INT 13
34061: PUSH
34062: LD_INT 14
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: ST_TO_ADDR
34069: GO 34388
34071: LD_INT 42
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34079
34077: GO 34105
34079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_INT 21
34087: PUSH
34088: LD_INT 22
34090: PUSH
34091: LD_INT 23
34093: PUSH
34094: LD_INT 24
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: ST_TO_ADDR
34103: GO 34388
34105: LD_INT 43
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34113
34111: GO 34139
34113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34114: LD_ADDR_VAR 0 3
34118: PUSH
34119: LD_INT 21
34121: PUSH
34122: LD_INT 22
34124: PUSH
34125: LD_INT 23
34127: PUSH
34128: LD_INT 24
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: ST_TO_ADDR
34137: GO 34388
34139: LD_INT 44
34141: DOUBLE
34142: EQUAL
34143: IFTRUE 34147
34145: GO 34173
34147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34148: LD_ADDR_VAR 0 3
34152: PUSH
34153: LD_INT 21
34155: PUSH
34156: LD_INT 22
34158: PUSH
34159: LD_INT 23
34161: PUSH
34162: LD_INT 24
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: ST_TO_ADDR
34171: GO 34388
34173: LD_INT 45
34175: DOUBLE
34176: EQUAL
34177: IFTRUE 34181
34179: GO 34207
34181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_INT 21
34189: PUSH
34190: LD_INT 22
34192: PUSH
34193: LD_INT 23
34195: PUSH
34196: LD_INT 24
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
34205: GO 34388
34207: LD_INT 49
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34241
34215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_INT 21
34223: PUSH
34224: LD_INT 22
34226: PUSH
34227: LD_INT 23
34229: PUSH
34230: LD_INT 24
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
34239: GO 34388
34241: LD_INT 51
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34275
34249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 21
34257: PUSH
34258: LD_INT 22
34260: PUSH
34261: LD_INT 23
34263: PUSH
34264: LD_INT 24
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34388
34275: LD_INT 52
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34309
34283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 21
34291: PUSH
34292: LD_INT 22
34294: PUSH
34295: LD_INT 23
34297: PUSH
34298: LD_INT 24
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
34307: GO 34388
34309: LD_INT 53
34311: DOUBLE
34312: EQUAL
34313: IFTRUE 34317
34315: GO 34335
34317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_INT 23
34325: PUSH
34326: LD_INT 24
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: ST_TO_ADDR
34333: GO 34388
34335: LD_INT 46
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34361
34343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 23
34351: PUSH
34352: LD_INT 24
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: ST_TO_ADDR
34359: GO 34388
34361: LD_INT 47
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34387
34369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: LD_INT 23
34377: PUSH
34378: LD_INT 24
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34388
34387: POP
// result := ( chassis in result ) ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_VAR 0 1
34397: PUSH
34398: LD_VAR 0 3
34402: IN
34403: ST_TO_ADDR
// end ;
34404: LD_VAR 0 3
34408: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34409: LD_INT 0
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
// result := array ;
34418: LD_ADDR_VAR 0 5
34422: PUSH
34423: LD_VAR 0 1
34427: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34428: LD_VAR 0 1
34432: NOT
34433: PUSH
34434: LD_VAR 0 2
34438: NOT
34439: OR
34440: PUSH
34441: LD_VAR 0 3
34445: NOT
34446: OR
34447: PUSH
34448: LD_VAR 0 2
34452: PUSH
34453: LD_VAR 0 1
34457: GREATER
34458: OR
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 1
34469: GREATER
34470: OR
34471: IFFALSE 34475
// exit ;
34473: GO 34771
// if direction then
34475: LD_VAR 0 4
34479: IFFALSE 34543
// begin d := 1 ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 1
34488: ST_TO_ADDR
// if i_from > i_to then
34489: LD_VAR 0 2
34493: PUSH
34494: LD_VAR 0 3
34498: GREATER
34499: IFFALSE 34525
// length := ( array - i_from ) + i_to else
34501: LD_ADDR_VAR 0 11
34505: PUSH
34506: LD_VAR 0 1
34510: PUSH
34511: LD_VAR 0 2
34515: MINUS
34516: PUSH
34517: LD_VAR 0 3
34521: PLUS
34522: ST_TO_ADDR
34523: GO 34541
// length := i_to - i_from ;
34525: LD_ADDR_VAR 0 11
34529: PUSH
34530: LD_VAR 0 3
34534: PUSH
34535: LD_VAR 0 2
34539: MINUS
34540: ST_TO_ADDR
// end else
34541: GO 34604
// begin d := - 1 ;
34543: LD_ADDR_VAR 0 9
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: ST_TO_ADDR
// if i_from > i_to then
34552: LD_VAR 0 2
34556: PUSH
34557: LD_VAR 0 3
34561: GREATER
34562: IFFALSE 34582
// length := i_from - i_to else
34564: LD_ADDR_VAR 0 11
34568: PUSH
34569: LD_VAR 0 2
34573: PUSH
34574: LD_VAR 0 3
34578: MINUS
34579: ST_TO_ADDR
34580: GO 34604
// length := ( array - i_to ) + i_from ;
34582: LD_ADDR_VAR 0 11
34586: PUSH
34587: LD_VAR 0 1
34591: PUSH
34592: LD_VAR 0 3
34596: MINUS
34597: PUSH
34598: LD_VAR 0 2
34602: PLUS
34603: ST_TO_ADDR
// end ; if not length then
34604: LD_VAR 0 11
34608: NOT
34609: IFFALSE 34613
// exit ;
34611: GO 34771
// tmp := array ;
34613: LD_ADDR_VAR 0 10
34617: PUSH
34618: LD_VAR 0 1
34622: ST_TO_ADDR
// for i = 1 to length do
34623: LD_ADDR_VAR 0 6
34627: PUSH
34628: DOUBLE
34629: LD_INT 1
34631: DEC
34632: ST_TO_ADDR
34633: LD_VAR 0 11
34637: PUSH
34638: FOR_TO
34639: IFFALSE 34759
// begin for j = 1 to array do
34641: LD_ADDR_VAR 0 7
34645: PUSH
34646: DOUBLE
34647: LD_INT 1
34649: DEC
34650: ST_TO_ADDR
34651: LD_VAR 0 1
34655: PUSH
34656: FOR_TO
34657: IFFALSE 34745
// begin k := j + d ;
34659: LD_ADDR_VAR 0 8
34663: PUSH
34664: LD_VAR 0 7
34668: PUSH
34669: LD_VAR 0 9
34673: PLUS
34674: ST_TO_ADDR
// if k > array then
34675: LD_VAR 0 8
34679: PUSH
34680: LD_VAR 0 1
34684: GREATER
34685: IFFALSE 34695
// k := 1 ;
34687: LD_ADDR_VAR 0 8
34691: PUSH
34692: LD_INT 1
34694: ST_TO_ADDR
// if not k then
34695: LD_VAR 0 8
34699: NOT
34700: IFFALSE 34712
// k := array ;
34702: LD_ADDR_VAR 0 8
34706: PUSH
34707: LD_VAR 0 1
34711: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34712: LD_ADDR_VAR 0 10
34716: PUSH
34717: LD_VAR 0 10
34721: PPUSH
34722: LD_VAR 0 8
34726: PPUSH
34727: LD_VAR 0 1
34731: PUSH
34732: LD_VAR 0 7
34736: ARRAY
34737: PPUSH
34738: NOP4
34742: ST_TO_ADDR
// end ;
34743: GO 34656
34745: POP
34746: POP
// array := tmp ;
34747: LD_ADDR_VAR 0 1
34751: PUSH
34752: LD_VAR 0 10
34756: ST_TO_ADDR
// end ;
34757: GO 34638
34759: POP
34760: POP
// result := array ;
34761: LD_ADDR_VAR 0 5
34765: PUSH
34766: LD_VAR 0 1
34770: ST_TO_ADDR
// end ;
34771: LD_VAR 0 5
34775: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
// result := 0 ;
34780: LD_ADDR_VAR 0 3
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// if not array or not value in array then
34788: LD_VAR 0 1
34792: NOT
34793: PUSH
34794: LD_VAR 0 2
34798: PUSH
34799: LD_VAR 0 1
34803: IN
34804: NOT
34805: OR
34806: IFFALSE 34810
// exit ;
34808: GO 34864
// for i = 1 to array do
34810: LD_ADDR_VAR 0 4
34814: PUSH
34815: DOUBLE
34816: LD_INT 1
34818: DEC
34819: ST_TO_ADDR
34820: LD_VAR 0 1
34824: PUSH
34825: FOR_TO
34826: IFFALSE 34862
// if value = array [ i ] then
34828: LD_VAR 0 2
34832: PUSH
34833: LD_VAR 0 1
34837: PUSH
34838: LD_VAR 0 4
34842: ARRAY
34843: EQUAL
34844: IFFALSE 34860
// begin result := i ;
34846: LD_ADDR_VAR 0 3
34850: PUSH
34851: LD_VAR 0 4
34855: ST_TO_ADDR
// exit ;
34856: POP
34857: POP
34858: GO 34864
// end ;
34860: GO 34825
34862: POP
34863: POP
// end ;
34864: LD_VAR 0 3
34868: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34869: LD_INT 0
34871: PPUSH
// vc_chassis := chassis ;
34872: LD_ADDR_OWVAR 37
34876: PUSH
34877: LD_VAR 0 1
34881: ST_TO_ADDR
// vc_engine := engine ;
34882: LD_ADDR_OWVAR 39
34886: PUSH
34887: LD_VAR 0 2
34891: ST_TO_ADDR
// vc_control := control ;
34892: LD_ADDR_OWVAR 38
34896: PUSH
34897: LD_VAR 0 3
34901: ST_TO_ADDR
// vc_weapon := weapon ;
34902: LD_ADDR_OWVAR 40
34906: PUSH
34907: LD_VAR 0 4
34911: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34912: LD_ADDR_OWVAR 41
34916: PUSH
34917: LD_VAR 0 5
34921: ST_TO_ADDR
// end ;
34922: LD_VAR 0 6
34926: RET
// export function WantPlant ( unit ) ; var task ; begin
34927: LD_INT 0
34929: PPUSH
34930: PPUSH
// result := false ;
34931: LD_ADDR_VAR 0 2
34935: PUSH
34936: LD_INT 0
34938: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_VAR 0 1
34948: PPUSH
34949: NOP4
34953: ST_TO_ADDR
// if task then
34954: LD_VAR 0 3
34958: IFFALSE 34986
// if task [ 1 ] [ 1 ] = p then
34960: LD_VAR 0 3
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: PUSH
34969: LD_INT 1
34971: ARRAY
34972: PUSH
34973: LD_STRING p
34975: EQUAL
34976: IFFALSE 34986
// result := true ;
34978: LD_ADDR_VAR 0 2
34982: PUSH
34983: LD_INT 1
34985: ST_TO_ADDR
// end ;
34986: LD_VAR 0 2
34990: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34991: LD_INT 0
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
// if pos < 1 then
34997: LD_VAR 0 2
35001: PUSH
35002: LD_INT 1
35004: LESS
35005: IFFALSE 35009
// exit ;
35007: GO 35312
// if pos = 1 then
35009: LD_VAR 0 2
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: IFFALSE 35050
// result := Replace ( arr , pos [ 1 ] , value ) else
35019: LD_ADDR_VAR 0 4
35023: PUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: LD_VAR 0 2
35033: PUSH
35034: LD_INT 1
35036: ARRAY
35037: PPUSH
35038: LD_VAR 0 3
35042: PPUSH
35043: NOP4
35047: ST_TO_ADDR
35048: GO 35312
// begin tmp := arr ;
35050: LD_ADDR_VAR 0 6
35054: PUSH
35055: LD_VAR 0 1
35059: ST_TO_ADDR
// s_arr := [ tmp ] ;
35060: LD_ADDR_VAR 0 7
35064: PUSH
35065: LD_VAR 0 6
35069: PUSH
35070: EMPTY
35071: LIST
35072: ST_TO_ADDR
// for i = 1 to pos - 1 do
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: DOUBLE
35079: LD_INT 1
35081: DEC
35082: ST_TO_ADDR
35083: LD_VAR 0 2
35087: PUSH
35088: LD_INT 1
35090: MINUS
35091: PUSH
35092: FOR_TO
35093: IFFALSE 35138
// begin tmp := tmp [ pos [ i ] ] ;
35095: LD_ADDR_VAR 0 6
35099: PUSH
35100: LD_VAR 0 6
35104: PUSH
35105: LD_VAR 0 2
35109: PUSH
35110: LD_VAR 0 5
35114: ARRAY
35115: ARRAY
35116: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35117: LD_ADDR_VAR 0 7
35121: PUSH
35122: LD_VAR 0 7
35126: PUSH
35127: LD_VAR 0 6
35131: PUSH
35132: EMPTY
35133: LIST
35134: ADD
35135: ST_TO_ADDR
// end ;
35136: GO 35092
35138: POP
35139: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35140: LD_ADDR_VAR 0 6
35144: PUSH
35145: LD_VAR 0 6
35149: PPUSH
35150: LD_VAR 0 2
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: PPUSH
35161: LD_VAR 0 3
35165: PPUSH
35166: NOP4
35170: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35171: LD_ADDR_VAR 0 7
35175: PUSH
35176: LD_VAR 0 7
35180: PPUSH
35181: LD_VAR 0 7
35185: PPUSH
35186: LD_VAR 0 6
35190: PPUSH
35191: NOP4
35195: ST_TO_ADDR
// for i = s_arr downto 2 do
35196: LD_ADDR_VAR 0 5
35200: PUSH
35201: DOUBLE
35202: LD_VAR 0 7
35206: INC
35207: ST_TO_ADDR
35208: LD_INT 2
35210: PUSH
35211: FOR_DOWNTO
35212: IFFALSE 35296
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35214: LD_ADDR_VAR 0 6
35218: PUSH
35219: LD_VAR 0 7
35223: PUSH
35224: LD_VAR 0 5
35228: PUSH
35229: LD_INT 1
35231: MINUS
35232: ARRAY
35233: PPUSH
35234: LD_VAR 0 2
35238: PUSH
35239: LD_VAR 0 5
35243: PUSH
35244: LD_INT 1
35246: MINUS
35247: ARRAY
35248: PPUSH
35249: LD_VAR 0 7
35253: PUSH
35254: LD_VAR 0 5
35258: ARRAY
35259: PPUSH
35260: NOP4
35264: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35265: LD_ADDR_VAR 0 7
35269: PUSH
35270: LD_VAR 0 7
35274: PPUSH
35275: LD_VAR 0 5
35279: PUSH
35280: LD_INT 1
35282: MINUS
35283: PPUSH
35284: LD_VAR 0 6
35288: PPUSH
35289: NOP4
35293: ST_TO_ADDR
// end ;
35294: GO 35211
35296: POP
35297: POP
// result := s_arr [ 1 ] ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_VAR 0 7
35307: PUSH
35308: LD_INT 1
35310: ARRAY
35311: ST_TO_ADDR
// end ; end ;
35312: LD_VAR 0 4
35316: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35317: LD_INT 0
35319: PPUSH
35320: PPUSH
// if not list then
35321: LD_VAR 0 1
35325: NOT
35326: IFFALSE 35330
// exit ;
35328: GO 35421
// i := list [ pos1 ] ;
35330: LD_ADDR_VAR 0 5
35334: PUSH
35335: LD_VAR 0 1
35339: PUSH
35340: LD_VAR 0 2
35344: ARRAY
35345: ST_TO_ADDR
// if not i then
35346: LD_VAR 0 5
35350: NOT
35351: IFFALSE 35355
// exit ;
35353: GO 35421
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35355: LD_ADDR_VAR 0 1
35359: PUSH
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 1
35374: PUSH
35375: LD_VAR 0 3
35379: ARRAY
35380: PPUSH
35381: NOP4
35385: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35386: LD_ADDR_VAR 0 1
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: LD_VAR 0 3
35400: PPUSH
35401: LD_VAR 0 5
35405: PPUSH
35406: NOP4
35410: ST_TO_ADDR
// result := list ;
35411: LD_ADDR_VAR 0 4
35415: PUSH
35416: LD_VAR 0 1
35420: ST_TO_ADDR
// end ;
35421: LD_VAR 0 4
35425: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35426: LD_INT 0
35428: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35429: LD_ADDR_VAR 0 5
35433: PUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: NOP4
35443: PPUSH
35444: LD_VAR 0 1
35448: PPUSH
35449: NOP4
35453: PPUSH
35454: LD_VAR 0 2
35458: PPUSH
35459: LD_VAR 0 3
35463: PPUSH
35464: LD_VAR 0 4
35468: PPUSH
35469: CALL 35479 0 5
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 5
35478: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35479: LD_INT 0
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
// if not list then
35485: LD_VAR 0 3
35489: NOT
35490: IFFALSE 35494
// exit ;
35492: GO 35882
// result := [ ] ;
35494: LD_ADDR_VAR 0 6
35498: PUSH
35499: EMPTY
35500: ST_TO_ADDR
// for i in list do
35501: LD_ADDR_VAR 0 7
35505: PUSH
35506: LD_VAR 0 3
35510: PUSH
35511: FOR_IN
35512: IFFALSE 35714
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35514: LD_ADDR_VAR 0 9
35518: PUSH
35519: LD_VAR 0 7
35523: PPUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: LD_VAR 0 2
35533: PPUSH
35534: NOP4
35538: ST_TO_ADDR
// if not result then
35539: LD_VAR 0 6
35543: NOT
35544: IFFALSE 35570
// result := [ [ i , tmp ] ] else
35546: LD_ADDR_VAR 0 6
35550: PUSH
35551: LD_VAR 0 7
35555: PUSH
35556: LD_VAR 0 9
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: EMPTY
35566: LIST
35567: ST_TO_ADDR
35568: GO 35712
// begin if result [ result ] [ 2 ] < tmp then
35570: LD_VAR 0 6
35574: PUSH
35575: LD_VAR 0 6
35579: ARRAY
35580: PUSH
35581: LD_INT 2
35583: ARRAY
35584: PUSH
35585: LD_VAR 0 9
35589: LESS
35590: IFFALSE 35632
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35592: LD_ADDR_VAR 0 6
35596: PUSH
35597: LD_VAR 0 6
35601: PPUSH
35602: LD_VAR 0 6
35606: PUSH
35607: LD_INT 1
35609: PLUS
35610: PPUSH
35611: LD_VAR 0 7
35615: PUSH
35616: LD_VAR 0 9
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PPUSH
35625: NOP4
35629: ST_TO_ADDR
35630: GO 35712
// for j = 1 to result do
35632: LD_ADDR_VAR 0 8
35636: PUSH
35637: DOUBLE
35638: LD_INT 1
35640: DEC
35641: ST_TO_ADDR
35642: LD_VAR 0 6
35646: PUSH
35647: FOR_TO
35648: IFFALSE 35710
// begin if tmp < result [ j ] [ 2 ] then
35650: LD_VAR 0 9
35654: PUSH
35655: LD_VAR 0 6
35659: PUSH
35660: LD_VAR 0 8
35664: ARRAY
35665: PUSH
35666: LD_INT 2
35668: ARRAY
35669: LESS
35670: IFFALSE 35708
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35672: LD_ADDR_VAR 0 6
35676: PUSH
35677: LD_VAR 0 6
35681: PPUSH
35682: LD_VAR 0 8
35686: PPUSH
35687: LD_VAR 0 7
35691: PUSH
35692: LD_VAR 0 9
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PPUSH
35701: NOP4
35705: ST_TO_ADDR
// break ;
35706: GO 35710
// end ; end ;
35708: GO 35647
35710: POP
35711: POP
// end ; end ;
35712: GO 35511
35714: POP
35715: POP
// if result and not asc then
35716: LD_VAR 0 6
35720: PUSH
35721: LD_VAR 0 4
35725: NOT
35726: AND
35727: IFFALSE 35802
// begin tmp := result ;
35729: LD_ADDR_VAR 0 9
35733: PUSH
35734: LD_VAR 0 6
35738: ST_TO_ADDR
// for i = tmp downto 1 do
35739: LD_ADDR_VAR 0 7
35743: PUSH
35744: DOUBLE
35745: LD_VAR 0 9
35749: INC
35750: ST_TO_ADDR
35751: LD_INT 1
35753: PUSH
35754: FOR_DOWNTO
35755: IFFALSE 35800
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35757: LD_ADDR_VAR 0 6
35761: PUSH
35762: LD_VAR 0 6
35766: PPUSH
35767: LD_VAR 0 9
35771: PUSH
35772: LD_VAR 0 7
35776: MINUS
35777: PUSH
35778: LD_INT 1
35780: PLUS
35781: PPUSH
35782: LD_VAR 0 9
35786: PUSH
35787: LD_VAR 0 7
35791: ARRAY
35792: PPUSH
35793: NOP4
35797: ST_TO_ADDR
35798: GO 35754
35800: POP
35801: POP
// end ; tmp := [ ] ;
35802: LD_ADDR_VAR 0 9
35806: PUSH
35807: EMPTY
35808: ST_TO_ADDR
// if mode then
35809: LD_VAR 0 5
35813: IFFALSE 35882
// begin for i = 1 to result do
35815: LD_ADDR_VAR 0 7
35819: PUSH
35820: DOUBLE
35821: LD_INT 1
35823: DEC
35824: ST_TO_ADDR
35825: LD_VAR 0 6
35829: PUSH
35830: FOR_TO
35831: IFFALSE 35870
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35833: LD_ADDR_VAR 0 9
35837: PUSH
35838: LD_VAR 0 9
35842: PPUSH
35843: LD_VAR 0 7
35847: PPUSH
35848: LD_VAR 0 6
35852: PUSH
35853: LD_VAR 0 7
35857: ARRAY
35858: PUSH
35859: LD_INT 1
35861: ARRAY
35862: PPUSH
35863: NOP4
35867: ST_TO_ADDR
35868: GO 35830
35870: POP
35871: POP
// result := tmp ;
35872: LD_ADDR_VAR 0 6
35876: PUSH
35877: LD_VAR 0 9
35881: ST_TO_ADDR
// end ; end ;
35882: LD_VAR 0 6
35886: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35887: LD_INT 0
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35895: LD_ADDR_VAR 0 5
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: ST_TO_ADDR
// if not x or not y then
35917: LD_VAR 0 2
35921: NOT
35922: PUSH
35923: LD_VAR 0 3
35927: NOT
35928: OR
35929: IFFALSE 35933
// exit ;
35931: GO 37583
// if not range then
35933: LD_VAR 0 4
35937: NOT
35938: IFFALSE 35948
// range := 10 ;
35940: LD_ADDR_VAR 0 4
35944: PUSH
35945: LD_INT 10
35947: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35948: LD_ADDR_VAR 0 8
35952: PUSH
35953: LD_INT 81
35955: PUSH
35956: LD_VAR 0 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 92
35967: PUSH
35968: LD_VAR 0 2
35972: PUSH
35973: LD_VAR 0 3
35977: PUSH
35978: LD_VAR 0 4
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 3
35991: PUSH
35992: LD_INT 21
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: PPUSH
36011: NOP4
36015: ST_TO_ADDR
// if not tmp then
36016: LD_VAR 0 8
36020: NOT
36021: IFFALSE 36025
// exit ;
36023: GO 37583
// for i in tmp do
36025: LD_ADDR_VAR 0 6
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: FOR_IN
36036: IFFALSE 37558
// begin points := [ 0 , 0 , 0 ] ;
36038: LD_ADDR_VAR 0 9
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: ST_TO_ADDR
// bpoints := 1 ;
36057: LD_ADDR_VAR 0 10
36061: PUSH
36062: LD_INT 1
36064: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36065: LD_VAR 0 6
36069: PPUSH
36070: NOP4
36074: PUSH
36075: LD_INT 1
36077: DOUBLE
36078: EQUAL
36079: IFTRUE 36083
36081: GO 36661
36083: POP
// begin if GetClass ( i ) = 1 then
36084: LD_VAR 0 6
36088: PPUSH
36089: NOP4
36093: PUSH
36094: LD_INT 1
36096: EQUAL
36097: IFFALSE 36118
// points := [ 10 , 5 , 3 ] ;
36099: LD_ADDR_VAR 0 9
36103: PUSH
36104: LD_INT 10
36106: PUSH
36107: LD_INT 5
36109: PUSH
36110: LD_INT 3
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36118: LD_VAR 0 6
36122: PPUSH
36123: NOP4
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: LIST
36141: IN
36142: IFFALSE 36163
// points := [ 3 , 2 , 1 ] ;
36144: LD_ADDR_VAR 0 9
36148: PUSH
36149: LD_INT 3
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36163: LD_VAR 0 6
36167: PPUSH
36168: NOP4
36172: PUSH
36173: LD_INT 5
36175: EQUAL
36176: IFFALSE 36197
// points := [ 130 , 5 , 2 ] ;
36178: LD_ADDR_VAR 0 9
36182: PUSH
36183: LD_INT 130
36185: PUSH
36186: LD_INT 5
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36197: LD_VAR 0 6
36201: PPUSH
36202: NOP4
36206: PUSH
36207: LD_INT 8
36209: EQUAL
36210: IFFALSE 36231
// points := [ 35 , 35 , 30 ] ;
36212: LD_ADDR_VAR 0 9
36216: PUSH
36217: LD_INT 35
36219: PUSH
36220: LD_INT 35
36222: PUSH
36223: LD_INT 30
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36231: LD_VAR 0 6
36235: PPUSH
36236: NOP4
36240: PUSH
36241: LD_INT 9
36243: EQUAL
36244: IFFALSE 36265
// points := [ 20 , 55 , 40 ] ;
36246: LD_ADDR_VAR 0 9
36250: PUSH
36251: LD_INT 20
36253: PUSH
36254: LD_INT 55
36256: PUSH
36257: LD_INT 40
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36265: LD_VAR 0 6
36269: PPUSH
36270: NOP4
36274: PUSH
36275: LD_INT 12
36277: PUSH
36278: LD_INT 16
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: IN
36285: IFFALSE 36306
// points := [ 5 , 3 , 2 ] ;
36287: LD_ADDR_VAR 0 9
36291: PUSH
36292: LD_INT 5
36294: PUSH
36295: LD_INT 3
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36306: LD_VAR 0 6
36310: PPUSH
36311: NOP4
36315: PUSH
36316: LD_INT 17
36318: EQUAL
36319: IFFALSE 36340
// points := [ 100 , 50 , 75 ] ;
36321: LD_ADDR_VAR 0 9
36325: PUSH
36326: LD_INT 100
36328: PUSH
36329: LD_INT 50
36331: PUSH
36332: LD_INT 75
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36340: LD_VAR 0 6
36344: PPUSH
36345: NOP4
36349: PUSH
36350: LD_INT 15
36352: EQUAL
36353: IFFALSE 36374
// points := [ 10 , 5 , 3 ] ;
36355: LD_ADDR_VAR 0 9
36359: PUSH
36360: LD_INT 10
36362: PUSH
36363: LD_INT 5
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36374: LD_VAR 0 6
36378: PPUSH
36379: NOP4
36383: PUSH
36384: LD_INT 14
36386: EQUAL
36387: IFFALSE 36408
// points := [ 10 , 0 , 0 ] ;
36389: LD_ADDR_VAR 0 9
36393: PUSH
36394: LD_INT 10
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36408: LD_VAR 0 6
36412: PPUSH
36413: NOP4
36417: PUSH
36418: LD_INT 11
36420: EQUAL
36421: IFFALSE 36442
// points := [ 30 , 10 , 5 ] ;
36423: LD_ADDR_VAR 0 9
36427: PUSH
36428: LD_INT 30
36430: PUSH
36431: LD_INT 10
36433: PUSH
36434: LD_INT 5
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36442: LD_VAR 0 1
36446: PPUSH
36447: LD_INT 5
36449: PPUSH
36450: NOP4
36454: PUSH
36455: LD_INT 2
36457: EQUAL
36458: IFFALSE 36475
// bpoints := bpoints * 1.8 ;
36460: LD_ADDR_VAR 0 10
36464: PUSH
36465: LD_VAR 0 10
36469: PUSH
36470: LD_REAL  1.80000000000000E+0000
36473: MUL
36474: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36475: LD_VAR 0 6
36479: PPUSH
36480: NOP4
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: LD_INT 3
36493: PUSH
36494: LD_INT 4
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: IN
36503: PUSH
36504: LD_VAR 0 1
36508: PPUSH
36509: LD_INT 51
36511: PPUSH
36512: NOP4
36516: PUSH
36517: LD_INT 2
36519: EQUAL
36520: AND
36521: IFFALSE 36538
// bpoints := bpoints * 1.2 ;
36523: LD_ADDR_VAR 0 10
36527: PUSH
36528: LD_VAR 0 10
36532: PUSH
36533: LD_REAL  1.20000000000000E+0000
36536: MUL
36537: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36538: LD_VAR 0 6
36542: PPUSH
36543: NOP4
36547: PUSH
36548: LD_INT 5
36550: PUSH
36551: LD_INT 7
36553: PUSH
36554: LD_INT 9
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: IN
36562: PUSH
36563: LD_VAR 0 1
36567: PPUSH
36568: LD_INT 52
36570: PPUSH
36571: NOP4
36575: PUSH
36576: LD_INT 2
36578: EQUAL
36579: AND
36580: IFFALSE 36597
// bpoints := bpoints * 1.5 ;
36582: LD_ADDR_VAR 0 10
36586: PUSH
36587: LD_VAR 0 10
36591: PUSH
36592: LD_REAL  1.50000000000000E+0000
36595: MUL
36596: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36597: LD_VAR 0 1
36601: PPUSH
36602: LD_INT 66
36604: PPUSH
36605: NOP4
36609: PUSH
36610: LD_INT 2
36612: EQUAL
36613: IFFALSE 36630
// bpoints := bpoints * 1.1 ;
36615: LD_ADDR_VAR 0 10
36619: PUSH
36620: LD_VAR 0 10
36624: PUSH
36625: LD_REAL  1.10000000000000E+0000
36628: MUL
36629: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36630: LD_ADDR_VAR 0 10
36634: PUSH
36635: LD_VAR 0 10
36639: PUSH
36640: LD_VAR 0 6
36644: PPUSH
36645: LD_INT 1
36647: PPUSH
36648: NOP4
36652: PUSH
36653: LD_REAL  1.15000000000000E+0000
36656: MUL
36657: MUL
36658: ST_TO_ADDR
// end ; unit_vehicle :
36659: GO 37487
36661: LD_INT 2
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36669
36667: GO 37475
36669: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36670: LD_VAR 0 6
36674: PPUSH
36675: NOP4
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 42
36685: PUSH
36686: LD_INT 24
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: IN
36694: IFFALSE 36715
// points := [ 25 , 5 , 3 ] ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_INT 25
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: LD_INT 3
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36715: LD_VAR 0 6
36719: PPUSH
36720: NOP4
36724: PUSH
36725: LD_INT 4
36727: PUSH
36728: LD_INT 43
36730: PUSH
36731: LD_INT 25
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: IN
36739: IFFALSE 36760
// points := [ 40 , 15 , 5 ] ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_INT 40
36748: PUSH
36749: LD_INT 15
36751: PUSH
36752: LD_INT 5
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36760: LD_VAR 0 6
36764: PPUSH
36765: NOP4
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: LD_INT 23
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: IN
36780: IFFALSE 36801
// points := [ 7 , 25 , 8 ] ;
36782: LD_ADDR_VAR 0 9
36786: PUSH
36787: LD_INT 7
36789: PUSH
36790: LD_INT 25
36792: PUSH
36793: LD_INT 8
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36801: LD_VAR 0 6
36805: PPUSH
36806: NOP4
36810: PUSH
36811: LD_INT 5
36813: PUSH
36814: LD_INT 27
36816: PUSH
36817: LD_INT 44
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: IN
36825: IFFALSE 36846
// points := [ 14 , 50 , 16 ] ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 14
36834: PUSH
36835: LD_INT 50
36837: PUSH
36838: LD_INT 16
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36846: LD_VAR 0 6
36850: PPUSH
36851: NOP4
36855: PUSH
36856: LD_INT 6
36858: PUSH
36859: LD_INT 46
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: IN
36866: IFFALSE 36887
// points := [ 32 , 120 , 70 ] ;
36868: LD_ADDR_VAR 0 9
36872: PUSH
36873: LD_INT 32
36875: PUSH
36876: LD_INT 120
36878: PUSH
36879: LD_INT 70
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36887: LD_VAR 0 6
36891: PPUSH
36892: NOP4
36896: PUSH
36897: LD_INT 7
36899: PUSH
36900: LD_INT 28
36902: PUSH
36903: LD_INT 45
36905: PUSH
36906: LD_INT 92
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: IN
36915: IFFALSE 36936
// points := [ 35 , 20 , 45 ] ;
36917: LD_ADDR_VAR 0 9
36921: PUSH
36922: LD_INT 35
36924: PUSH
36925: LD_INT 20
36927: PUSH
36928: LD_INT 45
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36936: LD_VAR 0 6
36940: PPUSH
36941: NOP4
36945: PUSH
36946: LD_INT 47
36948: PUSH
36949: EMPTY
36950: LIST
36951: IN
36952: IFFALSE 36973
// points := [ 67 , 45 , 75 ] ;
36954: LD_ADDR_VAR 0 9
36958: PUSH
36959: LD_INT 67
36961: PUSH
36962: LD_INT 45
36964: PUSH
36965: LD_INT 75
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36973: LD_VAR 0 6
36977: PPUSH
36978: NOP4
36982: PUSH
36983: LD_INT 26
36985: PUSH
36986: EMPTY
36987: LIST
36988: IN
36989: IFFALSE 37010
// points := [ 120 , 30 , 80 ] ;
36991: LD_ADDR_VAR 0 9
36995: PUSH
36996: LD_INT 120
36998: PUSH
36999: LD_INT 30
37001: PUSH
37002: LD_INT 80
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37010: LD_VAR 0 6
37014: PPUSH
37015: NOP4
37019: PUSH
37020: LD_INT 22
37022: PUSH
37023: EMPTY
37024: LIST
37025: IN
37026: IFFALSE 37047
// points := [ 40 , 1 , 1 ] ;
37028: LD_ADDR_VAR 0 9
37032: PUSH
37033: LD_INT 40
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37047: LD_VAR 0 6
37051: PPUSH
37052: NOP4
37056: PUSH
37057: LD_INT 29
37059: PUSH
37060: EMPTY
37061: LIST
37062: IN
37063: IFFALSE 37084
// points := [ 70 , 200 , 400 ] ;
37065: LD_ADDR_VAR 0 9
37069: PUSH
37070: LD_INT 70
37072: PUSH
37073: LD_INT 200
37075: PUSH
37076: LD_INT 400
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37084: LD_VAR 0 6
37088: PPUSH
37089: NOP4
37093: PUSH
37094: LD_INT 14
37096: PUSH
37097: LD_INT 53
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: IN
37104: IFFALSE 37125
// points := [ 40 , 10 , 20 ] ;
37106: LD_ADDR_VAR 0 9
37110: PUSH
37111: LD_INT 40
37113: PUSH
37114: LD_INT 10
37116: PUSH
37117: LD_INT 20
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37125: LD_VAR 0 6
37129: PPUSH
37130: NOP4
37134: PUSH
37135: LD_INT 9
37137: PUSH
37138: EMPTY
37139: LIST
37140: IN
37141: IFFALSE 37162
// points := [ 5 , 70 , 20 ] ;
37143: LD_ADDR_VAR 0 9
37147: PUSH
37148: LD_INT 5
37150: PUSH
37151: LD_INT 70
37153: PUSH
37154: LD_INT 20
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37162: LD_VAR 0 6
37166: PPUSH
37167: NOP4
37171: PUSH
37172: LD_INT 10
37174: PUSH
37175: EMPTY
37176: LIST
37177: IN
37178: IFFALSE 37199
// points := [ 35 , 110 , 70 ] ;
37180: LD_ADDR_VAR 0 9
37184: PUSH
37185: LD_INT 35
37187: PUSH
37188: LD_INT 110
37190: PUSH
37191: LD_INT 70
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37199: LD_VAR 0 6
37203: PPUSH
37204: NOP4
37208: PUSH
37209: LD_INT 25
37211: EQUAL
37212: IFFALSE 37233
// points := [ 80 , 65 , 100 ] ;
37214: LD_ADDR_VAR 0 9
37218: PUSH
37219: LD_INT 80
37221: PUSH
37222: LD_INT 65
37224: PUSH
37225: LD_INT 100
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37233: LD_VAR 0 6
37237: PPUSH
37238: NOP4
37242: PUSH
37243: LD_INT 1
37245: EQUAL
37246: IFFALSE 37281
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37248: LD_ADDR_VAR 0 10
37252: PUSH
37253: LD_VAR 0 10
37257: PUSH
37258: LD_VAR 0 6
37262: PPUSH
37263: NOP4
37267: PPUSH
37268: LD_INT 3
37270: PPUSH
37271: NOP4
37275: PUSH
37276: LD_INT 4
37278: MUL
37279: MUL
37280: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37281: LD_VAR 0 6
37285: PPUSH
37286: NOP4
37290: PUSH
37291: LD_INT 2
37293: EQUAL
37294: IFFALSE 37345
// begin j := IsControledBy ( i ) ;
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: LD_VAR 0 6
37305: PPUSH
37306: NOP4
37310: ST_TO_ADDR
// if j then
37311: LD_VAR 0 7
37315: IFFALSE 37345
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37317: LD_ADDR_VAR 0 10
37321: PUSH
37322: LD_VAR 0 10
37326: PUSH
37327: LD_VAR 0 7
37331: PPUSH
37332: LD_INT 3
37334: PPUSH
37335: NOP4
37339: PUSH
37340: LD_INT 3
37342: MUL
37343: MUL
37344: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37345: LD_VAR 0 6
37349: PPUSH
37350: NOP4
37354: PUSH
37355: LD_INT 5
37357: PUSH
37358: LD_INT 6
37360: PUSH
37361: LD_INT 46
37363: PUSH
37364: LD_INT 44
37366: PUSH
37367: LD_INT 47
37369: PUSH
37370: LD_INT 45
37372: PUSH
37373: LD_INT 28
37375: PUSH
37376: LD_INT 7
37378: PUSH
37379: LD_INT 27
37381: PUSH
37382: LD_INT 29
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: IN
37397: PUSH
37398: LD_VAR 0 1
37402: PPUSH
37403: LD_INT 52
37405: PPUSH
37406: NOP4
37410: PUSH
37411: LD_INT 2
37413: EQUAL
37414: AND
37415: IFFALSE 37432
// bpoints := bpoints * 1.2 ;
37417: LD_ADDR_VAR 0 10
37421: PUSH
37422: LD_VAR 0 10
37426: PUSH
37427: LD_REAL  1.20000000000000E+0000
37430: MUL
37431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37432: LD_VAR 0 6
37436: PPUSH
37437: NOP4
37441: PUSH
37442: LD_INT 6
37444: PUSH
37445: LD_INT 46
37447: PUSH
37448: LD_INT 47
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: IN
37456: IFFALSE 37473
// bpoints := bpoints * 1.2 ;
37458: LD_ADDR_VAR 0 10
37462: PUSH
37463: LD_VAR 0 10
37467: PUSH
37468: LD_REAL  1.20000000000000E+0000
37471: MUL
37472: ST_TO_ADDR
// end ; unit_building :
37473: GO 37487
37475: LD_INT 3
37477: DOUBLE
37478: EQUAL
37479: IFTRUE 37483
37481: GO 37486
37483: POP
// ; end ;
37484: GO 37487
37486: POP
// for j = 1 to 3 do
37487: LD_ADDR_VAR 0 7
37491: PUSH
37492: DOUBLE
37493: LD_INT 1
37495: DEC
37496: ST_TO_ADDR
37497: LD_INT 3
37499: PUSH
37500: FOR_TO
37501: IFFALSE 37554
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37503: LD_ADDR_VAR 0 5
37507: PUSH
37508: LD_VAR 0 5
37512: PPUSH
37513: LD_VAR 0 7
37517: PPUSH
37518: LD_VAR 0 5
37522: PUSH
37523: LD_VAR 0 7
37527: ARRAY
37528: PUSH
37529: LD_VAR 0 9
37533: PUSH
37534: LD_VAR 0 7
37538: ARRAY
37539: PUSH
37540: LD_VAR 0 10
37544: MUL
37545: PLUS
37546: PPUSH
37547: NOP4
37551: ST_TO_ADDR
37552: GO 37500
37554: POP
37555: POP
// end ;
37556: GO 36035
37558: POP
37559: POP
// result := Replace ( result , 4 , tmp ) ;
37560: LD_ADDR_VAR 0 5
37564: PUSH
37565: LD_VAR 0 5
37569: PPUSH
37570: LD_INT 4
37572: PPUSH
37573: LD_VAR 0 8
37577: PPUSH
37578: NOP4
37582: ST_TO_ADDR
// end ;
37583: LD_VAR 0 5
37587: RET
// export function DangerAtRange ( unit , range ) ; begin
37588: LD_INT 0
37590: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37591: LD_ADDR_VAR 0 3
37595: PUSH
37596: LD_VAR 0 1
37600: PPUSH
37601: NOP4
37605: PPUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: NOP4
37615: PPUSH
37616: LD_VAR 0 1
37620: PPUSH
37621: NOP4
37625: PPUSH
37626: LD_VAR 0 2
37630: PPUSH
37631: CALL 35887 0 4
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 3
37640: RET
// export function DangerInArea ( side , area ) ; begin
37641: LD_INT 0
37643: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37644: LD_ADDR_VAR 0 3
37648: PUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: LD_INT 81
37656: PUSH
37657: LD_VAR 0 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PPUSH
37666: NOP4
37670: ST_TO_ADDR
// end ;
37671: LD_VAR 0 3
37675: RET
// export function IsExtension ( b ) ; begin
37676: LD_INT 0
37678: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: LD_VAR 0 1
37688: PUSH
37689: LD_INT 23
37691: PUSH
37692: LD_INT 20
37694: PUSH
37695: LD_INT 22
37697: PUSH
37698: LD_INT 17
37700: PUSH
37701: LD_INT 24
37703: PUSH
37704: LD_INT 21
37706: PUSH
37707: LD_INT 19
37709: PUSH
37710: LD_INT 16
37712: PUSH
37713: LD_INT 25
37715: PUSH
37716: LD_INT 18
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: IN
37731: ST_TO_ADDR
// end ;
37732: LD_VAR 0 2
37736: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37737: LD_INT 0
37739: PPUSH
37740: PPUSH
37741: PPUSH
// result := [ ] ;
37742: LD_ADDR_VAR 0 4
37746: PUSH
37747: EMPTY
37748: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37749: LD_ADDR_VAR 0 5
37753: PUSH
37754: LD_VAR 0 2
37758: PPUSH
37759: LD_INT 21
37761: PUSH
37762: LD_INT 3
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PPUSH
37769: NOP4
37773: ST_TO_ADDR
// if not tmp then
37774: LD_VAR 0 5
37778: NOT
37779: IFFALSE 37783
// exit ;
37781: GO 37847
// if checkLink then
37783: LD_VAR 0 3
37787: IFFALSE 37837
// begin for i in tmp do
37789: LD_ADDR_VAR 0 6
37793: PUSH
37794: LD_VAR 0 5
37798: PUSH
37799: FOR_IN
37800: IFFALSE 37835
// if GetBase ( i ) <> base then
37802: LD_VAR 0 6
37806: PPUSH
37807: NOP4
37811: PUSH
37812: LD_VAR 0 1
37816: NONEQUAL
37817: IFFALSE 37833
// ComLinkToBase ( base , i ) ;
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_VAR 0 6
37828: PPUSH
37829: NOP4
37833: GO 37799
37835: POP
37836: POP
// end ; result := tmp ;
37837: LD_ADDR_VAR 0 4
37841: PUSH
37842: LD_VAR 0 5
37846: ST_TO_ADDR
// end ;
37847: LD_VAR 0 4
37851: RET
// export function ComComplete ( units , b ) ; var i ; begin
37852: LD_INT 0
37854: PPUSH
37855: PPUSH
// if not units then
37856: LD_VAR 0 1
37860: NOT
37861: IFFALSE 37865
// exit ;
37863: GO 37955
// for i in units do
37865: LD_ADDR_VAR 0 4
37869: PUSH
37870: LD_VAR 0 1
37874: PUSH
37875: FOR_IN
37876: IFFALSE 37953
// if BuildingStatus ( b ) = bs_build then
37878: LD_VAR 0 2
37882: PPUSH
37883: NOP4
37887: PUSH
37888: LD_INT 1
37890: EQUAL
37891: IFFALSE 37951
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37893: LD_VAR 0 4
37897: PPUSH
37898: LD_STRING h
37900: PUSH
37901: LD_VAR 0 2
37905: PPUSH
37906: NOP4
37910: PUSH
37911: LD_VAR 0 2
37915: PPUSH
37916: NOP4
37920: PUSH
37921: LD_VAR 0 2
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: PPUSH
37947: NOP4
37951: GO 37875
37953: POP
37954: POP
// end ;
37955: LD_VAR 0 3
37959: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37960: LD_INT 0
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
37967: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37968: LD_VAR 0 1
37972: NOT
37973: PUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: NOP4
37983: PUSH
37984: LD_INT 2
37986: NONEQUAL
37987: OR
37988: IFFALSE 37992
// exit ;
37990: GO 38308
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37992: LD_ADDR_VAR 0 6
37996: PUSH
37997: LD_INT 22
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: NOP4
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 30
38019: PUSH
38020: LD_INT 36
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 34
38029: PUSH
38030: LD_INT 31
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: NOP4
38050: ST_TO_ADDR
// if not tmp then
38051: LD_VAR 0 6
38055: NOT
38056: IFFALSE 38060
// exit ;
38058: GO 38308
// result := [ ] ;
38060: LD_ADDR_VAR 0 2
38064: PUSH
38065: EMPTY
38066: ST_TO_ADDR
// for i in tmp do
38067: LD_ADDR_VAR 0 3
38071: PUSH
38072: LD_VAR 0 6
38076: PUSH
38077: FOR_IN
38078: IFFALSE 38149
// begin t := UnitsInside ( i ) ;
38080: LD_ADDR_VAR 0 4
38084: PUSH
38085: LD_VAR 0 3
38089: PPUSH
38090: NOP4
38094: ST_TO_ADDR
// if t then
38095: LD_VAR 0 4
38099: IFFALSE 38147
// for j in t do
38101: LD_ADDR_VAR 0 7
38105: PUSH
38106: LD_VAR 0 4
38110: PUSH
38111: FOR_IN
38112: IFFALSE 38145
// result := Replace ( result , result + 1 , j ) ;
38114: LD_ADDR_VAR 0 2
38118: PUSH
38119: LD_VAR 0 2
38123: PPUSH
38124: LD_VAR 0 2
38128: PUSH
38129: LD_INT 1
38131: PLUS
38132: PPUSH
38133: LD_VAR 0 7
38137: PPUSH
38138: NOP4
38142: ST_TO_ADDR
38143: GO 38111
38145: POP
38146: POP
// end ;
38147: GO 38077
38149: POP
38150: POP
// if not result then
38151: LD_VAR 0 2
38155: NOT
38156: IFFALSE 38160
// exit ;
38158: GO 38308
// mech := result [ 1 ] ;
38160: LD_ADDR_VAR 0 5
38164: PUSH
38165: LD_VAR 0 2
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: ST_TO_ADDR
// if result > 1 then
38174: LD_VAR 0 2
38178: PUSH
38179: LD_INT 1
38181: GREATER
38182: IFFALSE 38294
// begin for i = 2 to result do
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: DOUBLE
38190: LD_INT 2
38192: DEC
38193: ST_TO_ADDR
38194: LD_VAR 0 2
38198: PUSH
38199: FOR_TO
38200: IFFALSE 38292
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38202: LD_ADDR_VAR 0 4
38206: PUSH
38207: LD_VAR 0 2
38211: PUSH
38212: LD_VAR 0 3
38216: ARRAY
38217: PPUSH
38218: LD_INT 3
38220: PPUSH
38221: NOP4
38225: PUSH
38226: LD_VAR 0 2
38230: PUSH
38231: LD_VAR 0 3
38235: ARRAY
38236: PPUSH
38237: NOP4
38241: MINUS
38242: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38243: LD_VAR 0 4
38247: PUSH
38248: LD_VAR 0 5
38252: PPUSH
38253: LD_INT 3
38255: PPUSH
38256: NOP4
38260: PUSH
38261: LD_VAR 0 5
38265: PPUSH
38266: NOP4
38270: MINUS
38271: GREATEREQUAL
38272: IFFALSE 38290
// mech := result [ i ] ;
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: LD_VAR 0 2
38283: PUSH
38284: LD_VAR 0 3
38288: ARRAY
38289: ST_TO_ADDR
// end ;
38290: GO 38199
38292: POP
38293: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38294: LD_VAR 0 1
38298: PPUSH
38299: LD_VAR 0 5
38303: PPUSH
38304: NOP4
// end ;
38308: LD_VAR 0 2
38312: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38313: LD_INT 0
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
// result := [ ] ;
38328: LD_ADDR_VAR 0 7
38332: PUSH
38333: EMPTY
38334: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38335: LD_VAR 0 1
38339: PPUSH
38340: NOP4
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: IN
38355: NOT
38356: IFFALSE 38360
// exit ;
38358: GO 39994
// if name then
38360: LD_VAR 0 3
38364: IFFALSE 38380
// SetBName ( base_dep , name ) ;
38366: LD_VAR 0 1
38370: PPUSH
38371: LD_VAR 0 3
38375: PPUSH
38376: NOP4
// base := GetBase ( base_dep ) ;
38380: LD_ADDR_VAR 0 15
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: NOP4
38394: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38395: LD_ADDR_VAR 0 16
38399: PUSH
38400: LD_VAR 0 1
38404: PPUSH
38405: NOP4
38409: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38410: LD_ADDR_VAR 0 17
38414: PUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: NOP4
38424: ST_TO_ADDR
// if sources then
38425: LD_VAR 0 5
38429: IFFALSE 38476
// for i = 1 to 3 do
38431: LD_ADDR_VAR 0 8
38435: PUSH
38436: DOUBLE
38437: LD_INT 1
38439: DEC
38440: ST_TO_ADDR
38441: LD_INT 3
38443: PUSH
38444: FOR_TO
38445: IFFALSE 38474
// AddResourceType ( base , i , sources [ i ] ) ;
38447: LD_VAR 0 15
38451: PPUSH
38452: LD_VAR 0 8
38456: PPUSH
38457: LD_VAR 0 5
38461: PUSH
38462: LD_VAR 0 8
38466: ARRAY
38467: PPUSH
38468: NOP4
38472: GO 38444
38474: POP
38475: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38476: LD_ADDR_VAR 0 18
38480: PUSH
38481: LD_VAR 0 15
38485: PPUSH
38486: LD_VAR 0 2
38490: PPUSH
38491: LD_INT 1
38493: PPUSH
38494: CALL 37737 0 3
38498: ST_TO_ADDR
// InitHc ;
38499: NOP4
// InitUc ;
38503: NOP4
// uc_side := side ;
38507: LD_ADDR_OWVAR 20
38511: PUSH
38512: LD_VAR 0 16
38516: ST_TO_ADDR
// uc_nation := nation ;
38517: LD_ADDR_OWVAR 21
38521: PUSH
38522: LD_VAR 0 17
38526: ST_TO_ADDR
// if buildings then
38527: LD_VAR 0 18
38531: IFFALSE 39853
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38533: LD_ADDR_VAR 0 19
38537: PUSH
38538: LD_VAR 0 18
38542: PPUSH
38543: LD_INT 2
38545: PUSH
38546: LD_INT 30
38548: PUSH
38549: LD_INT 29
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 30
38558: PUSH
38559: LD_INT 30
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: PPUSH
38571: NOP4
38575: ST_TO_ADDR
// if tmp then
38576: LD_VAR 0 19
38580: IFFALSE 38628
// for i in tmp do
38582: LD_ADDR_VAR 0 8
38586: PUSH
38587: LD_VAR 0 19
38591: PUSH
38592: FOR_IN
38593: IFFALSE 38626
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38595: LD_VAR 0 8
38599: PPUSH
38600: NOP4
38604: PPUSH
38605: LD_VAR 0 8
38609: PPUSH
38610: NOP4
38614: PPUSH
38615: LD_VAR 0 16
38619: PPUSH
38620: NOP4
38624: GO 38592
38626: POP
38627: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38628: LD_VAR 0 18
38632: PPUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 30
38638: PUSH
38639: LD_INT 32
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 30
38648: PUSH
38649: LD_INT 33
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: PPUSH
38661: NOP4
38665: IFFALSE 38753
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38667: LD_ADDR_VAR 0 8
38671: PUSH
38672: LD_VAR 0 18
38676: PPUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 30
38682: PUSH
38683: LD_INT 32
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 30
38692: PUSH
38693: LD_INT 33
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: PPUSH
38705: NOP4
38709: PUSH
38710: FOR_IN
38711: IFFALSE 38751
// begin if not GetBWeapon ( i ) then
38713: LD_VAR 0 8
38717: PPUSH
38718: NOP4
38722: NOT
38723: IFFALSE 38749
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38725: LD_VAR 0 8
38729: PPUSH
38730: LD_VAR 0 8
38734: PPUSH
38735: LD_VAR 0 2
38739: PPUSH
38740: CALL 39999 0 2
38744: PPUSH
38745: NOP4
// end ;
38749: GO 38710
38751: POP
38752: POP
// end ; for i = 1 to personel do
38753: LD_ADDR_VAR 0 8
38757: PUSH
38758: DOUBLE
38759: LD_INT 1
38761: DEC
38762: ST_TO_ADDR
38763: LD_VAR 0 6
38767: PUSH
38768: FOR_TO
38769: IFFALSE 39833
// begin if i > 4 then
38771: LD_VAR 0 8
38775: PUSH
38776: LD_INT 4
38778: GREATER
38779: IFFALSE 38783
// break ;
38781: GO 39833
// case i of 1 :
38783: LD_VAR 0 8
38787: PUSH
38788: LD_INT 1
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38876
38796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38797: LD_ADDR_VAR 0 12
38801: PUSH
38802: LD_VAR 0 18
38806: PPUSH
38807: LD_INT 22
38809: PUSH
38810: LD_VAR 0 16
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 58
38821: PUSH
38822: EMPTY
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 30
38830: PUSH
38831: LD_INT 32
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 30
38840: PUSH
38841: LD_INT 4
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 30
38850: PUSH
38851: LD_INT 5
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: PPUSH
38869: NOP4
38873: ST_TO_ADDR
38874: GO 39098
38876: LD_INT 2
38878: DOUBLE
38879: EQUAL
38880: IFTRUE 38884
38882: GO 38946
38884: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38885: LD_ADDR_VAR 0 12
38889: PUSH
38890: LD_VAR 0 18
38894: PPUSH
38895: LD_INT 22
38897: PUSH
38898: LD_VAR 0 16
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: LD_INT 30
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 30
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PPUSH
38939: NOP4
38943: ST_TO_ADDR
38944: GO 39098
38946: LD_INT 3
38948: DOUBLE
38949: EQUAL
38950: IFTRUE 38954
38952: GO 39016
38954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38955: LD_ADDR_VAR 0 12
38959: PUSH
38960: LD_VAR 0 18
38964: PPUSH
38965: LD_INT 22
38967: PUSH
38968: LD_VAR 0 16
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 30
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 30
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PPUSH
39009: NOP4
39013: ST_TO_ADDR
39014: GO 39098
39016: LD_INT 4
39018: DOUBLE
39019: EQUAL
39020: IFTRUE 39024
39022: GO 39097
39024: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39025: LD_ADDR_VAR 0 12
39029: PUSH
39030: LD_VAR 0 18
39034: PPUSH
39035: LD_INT 22
39037: PUSH
39038: LD_VAR 0 16
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 30
39052: PUSH
39053: LD_INT 6
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 30
39062: PUSH
39063: LD_INT 7
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 30
39072: PUSH
39073: LD_INT 8
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PPUSH
39090: NOP4
39094: ST_TO_ADDR
39095: GO 39098
39097: POP
// if i = 1 then
39098: LD_VAR 0 8
39102: PUSH
39103: LD_INT 1
39105: EQUAL
39106: IFFALSE 39217
// begin tmp := [ ] ;
39108: LD_ADDR_VAR 0 19
39112: PUSH
39113: EMPTY
39114: ST_TO_ADDR
// for j in f do
39115: LD_ADDR_VAR 0 9
39119: PUSH
39120: LD_VAR 0 12
39124: PUSH
39125: FOR_IN
39126: IFFALSE 39199
// if GetBType ( j ) = b_bunker then
39128: LD_VAR 0 9
39132: PPUSH
39133: NOP4
39137: PUSH
39138: LD_INT 32
39140: EQUAL
39141: IFFALSE 39168
// tmp := Insert ( tmp , 1 , j ) else
39143: LD_ADDR_VAR 0 19
39147: PUSH
39148: LD_VAR 0 19
39152: PPUSH
39153: LD_INT 1
39155: PPUSH
39156: LD_VAR 0 9
39160: PPUSH
39161: NOP4
39165: ST_TO_ADDR
39166: GO 39197
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39168: LD_ADDR_VAR 0 19
39172: PUSH
39173: LD_VAR 0 19
39177: PPUSH
39178: LD_VAR 0 19
39182: PUSH
39183: LD_INT 1
39185: PLUS
39186: PPUSH
39187: LD_VAR 0 9
39191: PPUSH
39192: NOP4
39196: ST_TO_ADDR
39197: GO 39125
39199: POP
39200: POP
// if tmp then
39201: LD_VAR 0 19
39205: IFFALSE 39217
// f := tmp ;
39207: LD_ADDR_VAR 0 12
39211: PUSH
39212: LD_VAR 0 19
39216: ST_TO_ADDR
// end ; x := personel [ i ] ;
39217: LD_ADDR_VAR 0 13
39221: PUSH
39222: LD_VAR 0 6
39226: PUSH
39227: LD_VAR 0 8
39231: ARRAY
39232: ST_TO_ADDR
// if x = - 1 then
39233: LD_VAR 0 13
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: EQUAL
39242: IFFALSE 39451
// begin for j in f do
39244: LD_ADDR_VAR 0 9
39248: PUSH
39249: LD_VAR 0 12
39253: PUSH
39254: FOR_IN
39255: IFFALSE 39447
// repeat InitHc ;
39257: NOP4
// if GetBType ( j ) = b_barracks then
39261: LD_VAR 0 9
39265: PPUSH
39266: NOP4
39270: PUSH
39271: LD_INT 5
39273: EQUAL
39274: IFFALSE 39344
// begin if UnitsInside ( j ) < 3 then
39276: LD_VAR 0 9
39280: PPUSH
39281: NOP4
39285: PUSH
39286: LD_INT 3
39288: LESS
39289: IFFALSE 39325
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39291: LD_INT 0
39293: PPUSH
39294: LD_INT 5
39296: PUSH
39297: LD_INT 8
39299: PUSH
39300: LD_INT 9
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: PUSH
39308: LD_VAR 0 17
39312: ARRAY
39313: PPUSH
39314: LD_VAR 0 4
39318: PPUSH
39319: NOP4
39323: GO 39342
// PrepareHuman ( false , i , skill ) ;
39325: LD_INT 0
39327: PPUSH
39328: LD_VAR 0 8
39332: PPUSH
39333: LD_VAR 0 4
39337: PPUSH
39338: NOP4
// end else
39342: GO 39361
// PrepareHuman ( false , i , skill ) ;
39344: LD_INT 0
39346: PPUSH
39347: LD_VAR 0 8
39351: PPUSH
39352: LD_VAR 0 4
39356: PPUSH
39357: NOP4
// un := CreateHuman ;
39361: LD_ADDR_VAR 0 14
39365: PUSH
39366: NOP4
39370: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39371: LD_ADDR_VAR 0 7
39375: PUSH
39376: LD_VAR 0 7
39380: PPUSH
39381: LD_INT 1
39383: PPUSH
39384: LD_VAR 0 14
39388: PPUSH
39389: NOP4
39393: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39394: LD_VAR 0 14
39398: PPUSH
39399: LD_VAR 0 9
39403: PPUSH
39404: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39408: LD_VAR 0 9
39412: PPUSH
39413: NOP4
39417: PUSH
39418: LD_INT 6
39420: EQUAL
39421: PUSH
39422: LD_VAR 0 9
39426: PPUSH
39427: NOP4
39431: PUSH
39432: LD_INT 32
39434: PUSH
39435: LD_INT 31
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: IN
39442: OR
39443: IFFALSE 39257
39445: GO 39254
39447: POP
39448: POP
// end else
39449: GO 39831
// for j = 1 to x do
39451: LD_ADDR_VAR 0 9
39455: PUSH
39456: DOUBLE
39457: LD_INT 1
39459: DEC
39460: ST_TO_ADDR
39461: LD_VAR 0 13
39465: PUSH
39466: FOR_TO
39467: IFFALSE 39829
// begin InitHc ;
39469: NOP4
// if not f then
39473: LD_VAR 0 12
39477: NOT
39478: IFFALSE 39567
// begin PrepareHuman ( false , i , skill ) ;
39480: LD_INT 0
39482: PPUSH
39483: LD_VAR 0 8
39487: PPUSH
39488: LD_VAR 0 4
39492: PPUSH
39493: NOP4
// un := CreateHuman ;
39497: LD_ADDR_VAR 0 14
39501: PUSH
39502: NOP4
39506: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39507: LD_ADDR_VAR 0 7
39511: PUSH
39512: LD_VAR 0 7
39516: PPUSH
39517: LD_INT 1
39519: PPUSH
39520: LD_VAR 0 14
39524: PPUSH
39525: NOP4
39529: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39530: LD_VAR 0 14
39534: PPUSH
39535: LD_VAR 0 1
39539: PPUSH
39540: NOP4
39544: PPUSH
39545: LD_VAR 0 1
39549: PPUSH
39550: NOP4
39554: PPUSH
39555: LD_INT 10
39557: PPUSH
39558: LD_INT 0
39560: PPUSH
39561: NOP4
// continue ;
39565: GO 39466
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39567: LD_VAR 0 12
39571: PUSH
39572: LD_INT 1
39574: ARRAY
39575: PPUSH
39576: NOP4
39580: PUSH
39581: LD_VAR 0 12
39585: PUSH
39586: LD_INT 1
39588: ARRAY
39589: PPUSH
39590: NOP4
39594: PUSH
39595: LD_INT 32
39597: PUSH
39598: LD_INT 31
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: IN
39605: AND
39606: PUSH
39607: LD_VAR 0 12
39611: PUSH
39612: LD_INT 1
39614: ARRAY
39615: PPUSH
39616: NOP4
39620: PUSH
39621: LD_INT 6
39623: EQUAL
39624: OR
39625: IFFALSE 39645
// f := Delete ( f , 1 ) ;
39627: LD_ADDR_VAR 0 12
39631: PUSH
39632: LD_VAR 0 12
39636: PPUSH
39637: LD_INT 1
39639: PPUSH
39640: NOP4
39644: ST_TO_ADDR
// if not f then
39645: LD_VAR 0 12
39649: NOT
39650: IFFALSE 39668
// begin x := x + 2 ;
39652: LD_ADDR_VAR 0 13
39656: PUSH
39657: LD_VAR 0 13
39661: PUSH
39662: LD_INT 2
39664: PLUS
39665: ST_TO_ADDR
// continue ;
39666: GO 39466
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39668: LD_VAR 0 12
39672: PUSH
39673: LD_INT 1
39675: ARRAY
39676: PPUSH
39677: NOP4
39681: PUSH
39682: LD_INT 5
39684: EQUAL
39685: IFFALSE 39759
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39687: LD_VAR 0 12
39691: PUSH
39692: LD_INT 1
39694: ARRAY
39695: PPUSH
39696: NOP4
39700: PUSH
39701: LD_INT 3
39703: LESS
39704: IFFALSE 39740
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39706: LD_INT 0
39708: PPUSH
39709: LD_INT 5
39711: PUSH
39712: LD_INT 8
39714: PUSH
39715: LD_INT 9
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: PUSH
39723: LD_VAR 0 17
39727: ARRAY
39728: PPUSH
39729: LD_VAR 0 4
39733: PPUSH
39734: NOP4
39738: GO 39757
// PrepareHuman ( false , i , skill ) ;
39740: LD_INT 0
39742: PPUSH
39743: LD_VAR 0 8
39747: PPUSH
39748: LD_VAR 0 4
39752: PPUSH
39753: NOP4
// end else
39757: GO 39776
// PrepareHuman ( false , i , skill ) ;
39759: LD_INT 0
39761: PPUSH
39762: LD_VAR 0 8
39766: PPUSH
39767: LD_VAR 0 4
39771: PPUSH
39772: NOP4
// un := CreateHuman ;
39776: LD_ADDR_VAR 0 14
39780: PUSH
39781: NOP4
39785: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39786: LD_ADDR_VAR 0 7
39790: PUSH
39791: LD_VAR 0 7
39795: PPUSH
39796: LD_INT 1
39798: PPUSH
39799: LD_VAR 0 14
39803: PPUSH
39804: NOP4
39808: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39809: LD_VAR 0 14
39813: PPUSH
39814: LD_VAR 0 12
39818: PUSH
39819: LD_INT 1
39821: ARRAY
39822: PPUSH
39823: NOP4
// end ;
39827: GO 39466
39829: POP
39830: POP
// end ;
39831: GO 38768
39833: POP
39834: POP
// result := result ^ buildings ;
39835: LD_ADDR_VAR 0 7
39839: PUSH
39840: LD_VAR 0 7
39844: PUSH
39845: LD_VAR 0 18
39849: ADD
39850: ST_TO_ADDR
// end else
39851: GO 39994
// begin for i = 1 to personel do
39853: LD_ADDR_VAR 0 8
39857: PUSH
39858: DOUBLE
39859: LD_INT 1
39861: DEC
39862: ST_TO_ADDR
39863: LD_VAR 0 6
39867: PUSH
39868: FOR_TO
39869: IFFALSE 39992
// begin if i > 4 then
39871: LD_VAR 0 8
39875: PUSH
39876: LD_INT 4
39878: GREATER
39879: IFFALSE 39883
// break ;
39881: GO 39992
// x := personel [ i ] ;
39883: LD_ADDR_VAR 0 13
39887: PUSH
39888: LD_VAR 0 6
39892: PUSH
39893: LD_VAR 0 8
39897: ARRAY
39898: ST_TO_ADDR
// if x = - 1 then
39899: LD_VAR 0 13
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: EQUAL
39908: IFFALSE 39912
// continue ;
39910: GO 39868
// PrepareHuman ( false , i , skill ) ;
39912: LD_INT 0
39914: PPUSH
39915: LD_VAR 0 8
39919: PPUSH
39920: LD_VAR 0 4
39924: PPUSH
39925: NOP4
// un := CreateHuman ;
39929: LD_ADDR_VAR 0 14
39933: PUSH
39934: NOP4
39938: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39939: LD_VAR 0 14
39943: PPUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: NOP4
39953: PPUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: NOP4
39963: PPUSH
39964: LD_INT 10
39966: PPUSH
39967: LD_INT 0
39969: PPUSH
39970: NOP4
// result := result ^ un ;
39974: LD_ADDR_VAR 0 7
39978: PUSH
39979: LD_VAR 0 7
39983: PUSH
39984: LD_VAR 0 14
39988: ADD
39989: ST_TO_ADDR
// end ;
39990: GO 39868
39992: POP
39993: POP
// end ; end ;
39994: LD_VAR 0 7
39998: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
// result := false ;
40017: LD_ADDR_VAR 0 3
40021: PUSH
40022: LD_INT 0
40024: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40025: LD_VAR 0 1
40029: NOT
40030: PUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: NOP4
40040: PUSH
40041: LD_INT 32
40043: PUSH
40044: LD_INT 33
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: IN
40051: NOT
40052: OR
40053: IFFALSE 40057
// exit ;
40055: GO 41166
// nat := GetNation ( tower ) ;
40057: LD_ADDR_VAR 0 12
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: NOP4
40071: ST_TO_ADDR
// side := GetSide ( tower ) ;
40072: LD_ADDR_VAR 0 16
40076: PUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: NOP4
40086: ST_TO_ADDR
// x := GetX ( tower ) ;
40087: LD_ADDR_VAR 0 10
40091: PUSH
40092: LD_VAR 0 1
40096: PPUSH
40097: NOP4
40101: ST_TO_ADDR
// y := GetY ( tower ) ;
40102: LD_ADDR_VAR 0 11
40106: PUSH
40107: LD_VAR 0 1
40111: PPUSH
40112: NOP4
40116: ST_TO_ADDR
// if not x or not y then
40117: LD_VAR 0 10
40121: NOT
40122: PUSH
40123: LD_VAR 0 11
40127: NOT
40128: OR
40129: IFFALSE 40133
// exit ;
40131: GO 41166
// weapon := 0 ;
40133: LD_ADDR_VAR 0 18
40137: PUSH
40138: LD_INT 0
40140: ST_TO_ADDR
// fac_list := [ ] ;
40141: LD_ADDR_VAR 0 17
40145: PUSH
40146: EMPTY
40147: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40148: LD_ADDR_VAR 0 6
40152: PUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: NOP4
40162: PPUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: LD_INT 0
40170: PPUSH
40171: CALL 37737 0 3
40175: PPUSH
40176: LD_INT 30
40178: PUSH
40179: LD_INT 3
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PPUSH
40186: NOP4
40190: ST_TO_ADDR
// if not factories then
40191: LD_VAR 0 6
40195: NOT
40196: IFFALSE 40200
// exit ;
40198: GO 41166
// for i in factories do
40200: LD_ADDR_VAR 0 8
40204: PUSH
40205: LD_VAR 0 6
40209: PUSH
40210: FOR_IN
40211: IFFALSE 40236
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40213: LD_ADDR_VAR 0 17
40217: PUSH
40218: LD_VAR 0 17
40222: PUSH
40223: LD_VAR 0 8
40227: PPUSH
40228: NOP4
40232: UNION
40233: ST_TO_ADDR
40234: GO 40210
40236: POP
40237: POP
// if not fac_list then
40238: LD_VAR 0 17
40242: NOT
40243: IFFALSE 40247
// exit ;
40245: GO 41166
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40247: LD_ADDR_VAR 0 5
40251: PUSH
40252: LD_INT 4
40254: PUSH
40255: LD_INT 5
40257: PUSH
40258: LD_INT 9
40260: PUSH
40261: LD_INT 10
40263: PUSH
40264: LD_INT 6
40266: PUSH
40267: LD_INT 7
40269: PUSH
40270: LD_INT 11
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 27
40284: PUSH
40285: LD_INT 28
40287: PUSH
40288: LD_INT 26
40290: PUSH
40291: LD_INT 30
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 43
40302: PUSH
40303: LD_INT 44
40305: PUSH
40306: LD_INT 46
40308: PUSH
40309: LD_INT 45
40311: PUSH
40312: LD_INT 47
40314: PUSH
40315: LD_INT 49
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: PUSH
40331: LD_VAR 0 12
40335: ARRAY
40336: ST_TO_ADDR
// list := list isect fac_list ;
40337: LD_ADDR_VAR 0 5
40341: PUSH
40342: LD_VAR 0 5
40346: PUSH
40347: LD_VAR 0 17
40351: ISECT
40352: ST_TO_ADDR
// if not list then
40353: LD_VAR 0 5
40357: NOT
40358: IFFALSE 40362
// exit ;
40360: GO 41166
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40362: LD_VAR 0 12
40366: PUSH
40367: LD_INT 3
40369: EQUAL
40370: PUSH
40371: LD_INT 49
40373: PUSH
40374: LD_VAR 0 5
40378: IN
40379: AND
40380: PUSH
40381: LD_INT 31
40383: PPUSH
40384: LD_VAR 0 16
40388: PPUSH
40389: NOP4
40393: PUSH
40394: LD_INT 2
40396: EQUAL
40397: AND
40398: IFFALSE 40458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40400: LD_INT 22
40402: PUSH
40403: LD_VAR 0 16
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 35
40414: PUSH
40415: LD_INT 49
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 91
40424: PUSH
40425: LD_VAR 0 1
40429: PUSH
40430: LD_INT 10
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: PPUSH
40443: NOP4
40447: NOT
40448: IFFALSE 40458
// weapon := ru_time_lapser ;
40450: LD_ADDR_VAR 0 18
40454: PUSH
40455: LD_INT 49
40457: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40458: LD_VAR 0 12
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: IN
40473: PUSH
40474: LD_INT 11
40476: PUSH
40477: LD_VAR 0 5
40481: IN
40482: PUSH
40483: LD_INT 30
40485: PUSH
40486: LD_VAR 0 5
40490: IN
40491: OR
40492: AND
40493: PUSH
40494: LD_INT 6
40496: PPUSH
40497: LD_VAR 0 16
40501: PPUSH
40502: NOP4
40506: PUSH
40507: LD_INT 2
40509: EQUAL
40510: AND
40511: IFFALSE 40676
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40513: LD_INT 22
40515: PUSH
40516: LD_VAR 0 16
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 35
40530: PUSH
40531: LD_INT 11
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 35
40540: PUSH
40541: LD_INT 30
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 91
40555: PUSH
40556: LD_VAR 0 1
40560: PUSH
40561: LD_INT 18
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: LIST
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: PPUSH
40574: NOP4
40578: NOT
40579: PUSH
40580: LD_INT 22
40582: PUSH
40583: LD_VAR 0 16
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 30
40597: PUSH
40598: LD_INT 32
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 30
40607: PUSH
40608: LD_INT 33
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 91
40622: PUSH
40623: LD_VAR 0 1
40627: PUSH
40628: LD_INT 12
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: LIST
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: PUSH
40641: EMPTY
40642: LIST
40643: PPUSH
40644: NOP4
40648: PUSH
40649: LD_INT 2
40651: GREATER
40652: AND
40653: IFFALSE 40676
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40655: LD_ADDR_VAR 0 18
40659: PUSH
40660: LD_INT 11
40662: PUSH
40663: LD_INT 30
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_VAR 0 12
40674: ARRAY
40675: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40676: LD_VAR 0 18
40680: NOT
40681: PUSH
40682: LD_INT 40
40684: PPUSH
40685: LD_VAR 0 16
40689: PPUSH
40690: NOP4
40694: PUSH
40695: LD_INT 2
40697: EQUAL
40698: AND
40699: PUSH
40700: LD_INT 7
40702: PUSH
40703: LD_VAR 0 5
40707: IN
40708: PUSH
40709: LD_INT 28
40711: PUSH
40712: LD_VAR 0 5
40716: IN
40717: OR
40718: PUSH
40719: LD_INT 45
40721: PUSH
40722: LD_VAR 0 5
40726: IN
40727: OR
40728: AND
40729: IFFALSE 40983
// begin hex := GetHexInfo ( x , y ) ;
40731: LD_ADDR_VAR 0 4
40735: PUSH
40736: LD_VAR 0 10
40740: PPUSH
40741: LD_VAR 0 11
40745: PPUSH
40746: NOP4
40750: ST_TO_ADDR
// if hex [ 1 ] then
40751: LD_VAR 0 4
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: IFFALSE 40763
// exit ;
40761: GO 41166
// height := hex [ 2 ] ;
40763: LD_ADDR_VAR 0 15
40767: PUSH
40768: LD_VAR 0 4
40772: PUSH
40773: LD_INT 2
40775: ARRAY
40776: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40777: LD_ADDR_VAR 0 14
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 3
40790: PUSH
40791: LD_INT 5
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
// for i in tmp do
40800: LD_ADDR_VAR 0 8
40804: PUSH
40805: LD_VAR 0 14
40809: PUSH
40810: FOR_IN
40811: IFFALSE 40981
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40813: LD_ADDR_VAR 0 9
40817: PUSH
40818: LD_VAR 0 10
40822: PPUSH
40823: LD_VAR 0 8
40827: PPUSH
40828: LD_INT 5
40830: PPUSH
40831: NOP4
40835: PUSH
40836: LD_VAR 0 11
40840: PPUSH
40841: LD_VAR 0 8
40845: PPUSH
40846: LD_INT 5
40848: PPUSH
40849: NOP4
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40858: LD_VAR 0 9
40862: PUSH
40863: LD_INT 1
40865: ARRAY
40866: PPUSH
40867: LD_VAR 0 9
40871: PUSH
40872: LD_INT 2
40874: ARRAY
40875: PPUSH
40876: NOP4
40880: IFFALSE 40979
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40882: LD_ADDR_VAR 0 4
40886: PUSH
40887: LD_VAR 0 9
40891: PUSH
40892: LD_INT 1
40894: ARRAY
40895: PPUSH
40896: LD_VAR 0 9
40900: PUSH
40901: LD_INT 2
40903: ARRAY
40904: PPUSH
40905: NOP4
40909: ST_TO_ADDR
// if hex [ 1 ] then
40910: LD_VAR 0 4
40914: PUSH
40915: LD_INT 1
40917: ARRAY
40918: IFFALSE 40922
// continue ;
40920: GO 40810
// h := hex [ 2 ] ;
40922: LD_ADDR_VAR 0 13
40926: PUSH
40927: LD_VAR 0 4
40931: PUSH
40932: LD_INT 2
40934: ARRAY
40935: ST_TO_ADDR
// if h + 7 < height then
40936: LD_VAR 0 13
40940: PUSH
40941: LD_INT 7
40943: PLUS
40944: PUSH
40945: LD_VAR 0 15
40949: LESS
40950: IFFALSE 40979
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40952: LD_ADDR_VAR 0 18
40956: PUSH
40957: LD_INT 7
40959: PUSH
40960: LD_INT 28
40962: PUSH
40963: LD_INT 45
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: PUSH
40971: LD_VAR 0 12
40975: ARRAY
40976: ST_TO_ADDR
// break ;
40977: GO 40981
// end ; end ; end ;
40979: GO 40810
40981: POP
40982: POP
// end ; if not weapon then
40983: LD_VAR 0 18
40987: NOT
40988: IFFALSE 41048
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40990: LD_ADDR_VAR 0 5
40994: PUSH
40995: LD_VAR 0 5
40999: PUSH
41000: LD_INT 11
41002: PUSH
41003: LD_INT 30
41005: PUSH
41006: LD_INT 49
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: DIFF
41014: ST_TO_ADDR
// if not list then
41015: LD_VAR 0 5
41019: NOT
41020: IFFALSE 41024
// exit ;
41022: GO 41166
// weapon := list [ rand ( 1 , list ) ] ;
41024: LD_ADDR_VAR 0 18
41028: PUSH
41029: LD_VAR 0 5
41033: PUSH
41034: LD_INT 1
41036: PPUSH
41037: LD_VAR 0 5
41041: PPUSH
41042: NOP4
41046: ARRAY
41047: ST_TO_ADDR
// end ; if weapon then
41048: LD_VAR 0 18
41052: IFFALSE 41166
// begin tmp := CostOfWeapon ( weapon ) ;
41054: LD_ADDR_VAR 0 14
41058: PUSH
41059: LD_VAR 0 18
41063: PPUSH
41064: NOP4
41068: ST_TO_ADDR
// j := GetBase ( tower ) ;
41069: LD_ADDR_VAR 0 9
41073: PUSH
41074: LD_VAR 0 1
41078: PPUSH
41079: NOP4
41083: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41084: LD_VAR 0 9
41088: PPUSH
41089: LD_INT 1
41091: PPUSH
41092: NOP4
41096: PUSH
41097: LD_VAR 0 14
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: GREATEREQUAL
41106: PUSH
41107: LD_VAR 0 9
41111: PPUSH
41112: LD_INT 2
41114: PPUSH
41115: NOP4
41119: PUSH
41120: LD_VAR 0 14
41124: PUSH
41125: LD_INT 2
41127: ARRAY
41128: GREATEREQUAL
41129: AND
41130: PUSH
41131: LD_VAR 0 9
41135: PPUSH
41136: LD_INT 3
41138: PPUSH
41139: NOP4
41143: PUSH
41144: LD_VAR 0 14
41148: PUSH
41149: LD_INT 3
41151: ARRAY
41152: GREATEREQUAL
41153: AND
41154: IFFALSE 41166
// result := weapon ;
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_VAR 0 18
41165: ST_TO_ADDR
// end ; end ;
41166: LD_VAR 0 3
41170: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41171: LD_INT 0
41173: PPUSH
41174: PPUSH
// result := true ;
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 1
41182: ST_TO_ADDR
// if array1 = array2 then
41183: LD_VAR 0 1
41187: PUSH
41188: LD_VAR 0 2
41192: EQUAL
41193: IFFALSE 41253
// begin for i = 1 to array1 do
41195: LD_ADDR_VAR 0 4
41199: PUSH
41200: DOUBLE
41201: LD_INT 1
41203: DEC
41204: ST_TO_ADDR
41205: LD_VAR 0 1
41209: PUSH
41210: FOR_TO
41211: IFFALSE 41249
// if array1 [ i ] <> array2 [ i ] then
41213: LD_VAR 0 1
41217: PUSH
41218: LD_VAR 0 4
41222: ARRAY
41223: PUSH
41224: LD_VAR 0 2
41228: PUSH
41229: LD_VAR 0 4
41233: ARRAY
41234: NONEQUAL
41235: IFFALSE 41247
// begin result := false ;
41237: LD_ADDR_VAR 0 3
41241: PUSH
41242: LD_INT 0
41244: ST_TO_ADDR
// break ;
41245: GO 41249
// end ;
41247: GO 41210
41249: POP
41250: POP
// end else
41251: GO 41261
// result := false ;
41253: LD_ADDR_VAR 0 3
41257: PUSH
41258: LD_INT 0
41260: ST_TO_ADDR
// end ;
41261: LD_VAR 0 3
41265: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41266: LD_INT 0
41268: PPUSH
41269: PPUSH
// if not array1 or not array2 then
41270: LD_VAR 0 1
41274: NOT
41275: PUSH
41276: LD_VAR 0 2
41280: NOT
41281: OR
41282: IFFALSE 41286
// exit ;
41284: GO 41350
// result := true ;
41286: LD_ADDR_VAR 0 3
41290: PUSH
41291: LD_INT 1
41293: ST_TO_ADDR
// for i = 1 to array1 do
41294: LD_ADDR_VAR 0 4
41298: PUSH
41299: DOUBLE
41300: LD_INT 1
41302: DEC
41303: ST_TO_ADDR
41304: LD_VAR 0 1
41308: PUSH
41309: FOR_TO
41310: IFFALSE 41348
// if array1 [ i ] <> array2 [ i ] then
41312: LD_VAR 0 1
41316: PUSH
41317: LD_VAR 0 4
41321: ARRAY
41322: PUSH
41323: LD_VAR 0 2
41327: PUSH
41328: LD_VAR 0 4
41332: ARRAY
41333: NONEQUAL
41334: IFFALSE 41346
// begin result := false ;
41336: LD_ADDR_VAR 0 3
41340: PUSH
41341: LD_INT 0
41343: ST_TO_ADDR
// break ;
41344: GO 41348
// end ;
41346: GO 41309
41348: POP
41349: POP
// end ;
41350: LD_VAR 0 3
41354: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41355: LD_INT 0
41357: PPUSH
41358: PPUSH
41359: PPUSH
// pom := GetBase ( fac ) ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: NOP4
41374: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41375: LD_ADDR_VAR 0 4
41379: PUSH
41380: LD_VAR 0 2
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: LD_VAR 0 2
41393: PUSH
41394: LD_INT 2
41396: ARRAY
41397: PPUSH
41398: LD_VAR 0 2
41402: PUSH
41403: LD_INT 3
41405: ARRAY
41406: PPUSH
41407: LD_VAR 0 2
41411: PUSH
41412: LD_INT 4
41414: ARRAY
41415: PPUSH
41416: NOP4
41420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41421: LD_ADDR_VAR 0 3
41425: PUSH
41426: LD_VAR 0 5
41430: PPUSH
41431: LD_INT 1
41433: PPUSH
41434: NOP4
41438: PUSH
41439: LD_VAR 0 4
41443: PUSH
41444: LD_INT 1
41446: ARRAY
41447: GREATEREQUAL
41448: PUSH
41449: LD_VAR 0 5
41453: PPUSH
41454: LD_INT 2
41456: PPUSH
41457: NOP4
41461: PUSH
41462: LD_VAR 0 4
41466: PUSH
41467: LD_INT 2
41469: ARRAY
41470: GREATEREQUAL
41471: AND
41472: PUSH
41473: LD_VAR 0 5
41477: PPUSH
41478: LD_INT 3
41480: PPUSH
41481: NOP4
41485: PUSH
41486: LD_VAR 0 4
41490: PUSH
41491: LD_INT 3
41493: ARRAY
41494: GREATEREQUAL
41495: AND
41496: ST_TO_ADDR
// end ;
41497: LD_VAR 0 3
41501: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41502: LD_INT 0
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
// pom := GetBase ( building ) ;
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: NOP4
41522: ST_TO_ADDR
// if not pom then
41523: LD_VAR 0 3
41527: NOT
41528: IFFALSE 41532
// exit ;
41530: GO 41702
// btype := GetBType ( building ) ;
41532: LD_ADDR_VAR 0 5
41536: PUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: NOP4
41546: ST_TO_ADDR
// if btype = b_armoury then
41547: LD_VAR 0 5
41551: PUSH
41552: LD_INT 4
41554: EQUAL
41555: IFFALSE 41565
// btype := b_barracks ;
41557: LD_ADDR_VAR 0 5
41561: PUSH
41562: LD_INT 5
41564: ST_TO_ADDR
// if btype = b_depot then
41565: LD_VAR 0 5
41569: PUSH
41570: LD_INT 0
41572: EQUAL
41573: IFFALSE 41583
// btype := b_warehouse ;
41575: LD_ADDR_VAR 0 5
41579: PUSH
41580: LD_INT 1
41582: ST_TO_ADDR
// if btype = b_workshop then
41583: LD_VAR 0 5
41587: PUSH
41588: LD_INT 2
41590: EQUAL
41591: IFFALSE 41601
// btype := b_factory ;
41593: LD_ADDR_VAR 0 5
41597: PUSH
41598: LD_INT 3
41600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41601: LD_ADDR_VAR 0 4
41605: PUSH
41606: LD_VAR 0 5
41610: PPUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: NOP4
41620: PPUSH
41621: NOP4
41625: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41626: LD_ADDR_VAR 0 2
41630: PUSH
41631: LD_VAR 0 3
41635: PPUSH
41636: LD_INT 1
41638: PPUSH
41639: NOP4
41643: PUSH
41644: LD_VAR 0 4
41648: PUSH
41649: LD_INT 1
41651: ARRAY
41652: GREATEREQUAL
41653: PUSH
41654: LD_VAR 0 3
41658: PPUSH
41659: LD_INT 2
41661: PPUSH
41662: NOP4
41666: PUSH
41667: LD_VAR 0 4
41671: PUSH
41672: LD_INT 2
41674: ARRAY
41675: GREATEREQUAL
41676: AND
41677: PUSH
41678: LD_VAR 0 3
41682: PPUSH
41683: LD_INT 3
41685: PPUSH
41686: NOP4
41690: PUSH
41691: LD_VAR 0 4
41695: PUSH
41696: LD_INT 3
41698: ARRAY
41699: GREATEREQUAL
41700: AND
41701: ST_TO_ADDR
// end ;
41702: LD_VAR 0 2
41706: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41707: LD_INT 0
41709: PPUSH
41710: PPUSH
41711: PPUSH
// pom := GetBase ( building ) ;
41712: LD_ADDR_VAR 0 4
41716: PUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: NOP4
41726: ST_TO_ADDR
// if not pom then
41727: LD_VAR 0 4
41731: NOT
41732: IFFALSE 41736
// exit ;
41734: GO 41837
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41736: LD_ADDR_VAR 0 5
41740: PUSH
41741: LD_VAR 0 2
41745: PPUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: NOP4
41755: PPUSH
41756: NOP4
41760: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: LD_VAR 0 4
41770: PPUSH
41771: LD_INT 1
41773: PPUSH
41774: NOP4
41778: PUSH
41779: LD_VAR 0 5
41783: PUSH
41784: LD_INT 1
41786: ARRAY
41787: GREATEREQUAL
41788: PUSH
41789: LD_VAR 0 4
41793: PPUSH
41794: LD_INT 2
41796: PPUSH
41797: NOP4
41801: PUSH
41802: LD_VAR 0 5
41806: PUSH
41807: LD_INT 2
41809: ARRAY
41810: GREATEREQUAL
41811: AND
41812: PUSH
41813: LD_VAR 0 4
41817: PPUSH
41818: LD_INT 3
41820: PPUSH
41821: NOP4
41825: PUSH
41826: LD_VAR 0 5
41830: PUSH
41831: LD_INT 3
41833: ARRAY
41834: GREATEREQUAL
41835: AND
41836: ST_TO_ADDR
// end ;
41837: LD_VAR 0 3
41841: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41842: LD_INT 0
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
// result := false ;
41855: LD_ADDR_VAR 0 8
41859: PUSH
41860: LD_INT 0
41862: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41863: LD_VAR 0 5
41867: NOT
41868: PUSH
41869: LD_VAR 0 1
41873: NOT
41874: OR
41875: PUSH
41876: LD_VAR 0 2
41880: NOT
41881: OR
41882: PUSH
41883: LD_VAR 0 3
41887: NOT
41888: OR
41889: IFFALSE 41893
// exit ;
41891: GO 42707
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41893: LD_ADDR_VAR 0 14
41897: PUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: LD_VAR 0 2
41907: PPUSH
41908: LD_VAR 0 3
41912: PPUSH
41913: LD_VAR 0 4
41917: PPUSH
41918: LD_VAR 0 5
41922: PUSH
41923: LD_INT 1
41925: ARRAY
41926: PPUSH
41927: NOP4
41931: PPUSH
41932: LD_INT 0
41934: PPUSH
41935: CALL 43940 0 6
41939: ST_TO_ADDR
// if not hexes then
41940: LD_VAR 0 14
41944: NOT
41945: IFFALSE 41949
// exit ;
41947: GO 42707
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41949: LD_ADDR_VAR 0 17
41953: PUSH
41954: LD_VAR 0 5
41958: PPUSH
41959: LD_INT 22
41961: PUSH
41962: LD_VAR 0 13
41966: PPUSH
41967: NOP4
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 30
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 30
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PPUSH
42008: NOP4
42012: ST_TO_ADDR
// for i = 1 to hexes do
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: DOUBLE
42019: LD_INT 1
42021: DEC
42022: ST_TO_ADDR
42023: LD_VAR 0 14
42027: PUSH
42028: FOR_TO
42029: IFFALSE 42705
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42031: LD_ADDR_VAR 0 13
42035: PUSH
42036: LD_VAR 0 14
42040: PUSH
42041: LD_VAR 0 9
42045: ARRAY
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PPUSH
42051: LD_VAR 0 14
42055: PUSH
42056: LD_VAR 0 9
42060: ARRAY
42061: PUSH
42062: LD_INT 2
42064: ARRAY
42065: PPUSH
42066: NOP4
42070: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42071: LD_VAR 0 14
42075: PUSH
42076: LD_VAR 0 9
42080: ARRAY
42081: PUSH
42082: LD_INT 1
42084: ARRAY
42085: PPUSH
42086: LD_VAR 0 14
42090: PUSH
42091: LD_VAR 0 9
42095: ARRAY
42096: PUSH
42097: LD_INT 2
42099: ARRAY
42100: PPUSH
42101: NOP4
42105: PUSH
42106: LD_VAR 0 14
42110: PUSH
42111: LD_VAR 0 9
42115: ARRAY
42116: PUSH
42117: LD_INT 1
42119: ARRAY
42120: PPUSH
42121: LD_VAR 0 14
42125: PUSH
42126: LD_VAR 0 9
42130: ARRAY
42131: PUSH
42132: LD_INT 2
42134: ARRAY
42135: PPUSH
42136: NOP4
42140: NOT
42141: OR
42142: PUSH
42143: LD_VAR 0 13
42147: PPUSH
42148: NOP4
42152: PUSH
42153: LD_INT 3
42155: EQUAL
42156: OR
42157: IFFALSE 42163
// exit ;
42159: POP
42160: POP
42161: GO 42707
// if not tmp then
42163: LD_VAR 0 13
42167: NOT
42168: IFFALSE 42172
// continue ;
42170: GO 42028
// result := true ;
42172: LD_ADDR_VAR 0 8
42176: PUSH
42177: LD_INT 1
42179: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42180: LD_VAR 0 6
42184: PUSH
42185: LD_VAR 0 13
42189: PPUSH
42190: NOP4
42194: PUSH
42195: LD_INT 2
42197: EQUAL
42198: AND
42199: PUSH
42200: LD_VAR 0 13
42204: PPUSH
42205: NOP4
42209: PUSH
42210: LD_INT 1
42212: EQUAL
42213: AND
42214: IFFALSE 42378
// begin if IsDrivenBy ( tmp ) then
42216: LD_VAR 0 13
42220: PPUSH
42221: NOP4
42225: IFFALSE 42229
// continue ;
42227: GO 42028
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42229: LD_VAR 0 6
42233: PPUSH
42234: LD_INT 3
42236: PUSH
42237: LD_INT 60
42239: PUSH
42240: EMPTY
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 3
42249: PUSH
42250: LD_INT 55
42252: PUSH
42253: EMPTY
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PPUSH
42264: NOP4
42268: IFFALSE 42376
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42270: LD_ADDR_VAR 0 18
42274: PUSH
42275: LD_VAR 0 6
42279: PPUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 60
42285: PUSH
42286: EMPTY
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 55
42298: PUSH
42299: EMPTY
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PPUSH
42310: NOP4
42314: PUSH
42315: LD_INT 1
42317: ARRAY
42318: ST_TO_ADDR
// if IsInUnit ( driver ) then
42319: LD_VAR 0 18
42323: PPUSH
42324: NOP4
42328: IFFALSE 42339
// ComExit ( driver ) ;
42330: LD_VAR 0 18
42334: PPUSH
42335: CALL 67628 0 1
// AddComEnterUnit ( driver , tmp ) ;
42339: LD_VAR 0 18
42343: PPUSH
42344: LD_VAR 0 13
42348: PPUSH
42349: NOP4
// AddComMoveToArea ( driver , parking ) ;
42353: LD_VAR 0 18
42357: PPUSH
42358: LD_VAR 0 7
42362: PPUSH
42363: NOP4
// AddComExitVehicle ( driver ) ;
42367: LD_VAR 0 18
42371: PPUSH
42372: NOP4
// end ; continue ;
42376: GO 42028
// end ; if not cleaners or not tmp in cleaners then
42378: LD_VAR 0 6
42382: NOT
42383: PUSH
42384: LD_VAR 0 13
42388: PUSH
42389: LD_VAR 0 6
42393: IN
42394: NOT
42395: OR
42396: IFFALSE 42703
// begin if dep then
42398: LD_VAR 0 17
42402: IFFALSE 42538
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42404: LD_ADDR_VAR 0 16
42408: PUSH
42409: LD_VAR 0 17
42413: PUSH
42414: LD_INT 1
42416: ARRAY
42417: PPUSH
42418: NOP4
42422: PPUSH
42423: LD_VAR 0 17
42427: PUSH
42428: LD_INT 1
42430: ARRAY
42431: PPUSH
42432: NOP4
42436: PPUSH
42437: LD_INT 5
42439: PPUSH
42440: NOP4
42444: PUSH
42445: LD_VAR 0 17
42449: PUSH
42450: LD_INT 1
42452: ARRAY
42453: PPUSH
42454: NOP4
42458: PPUSH
42459: LD_VAR 0 17
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: PPUSH
42468: NOP4
42472: PPUSH
42473: LD_INT 5
42475: PPUSH
42476: NOP4
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42485: LD_VAR 0 16
42489: PUSH
42490: LD_INT 1
42492: ARRAY
42493: PPUSH
42494: LD_VAR 0 16
42498: PUSH
42499: LD_INT 2
42501: ARRAY
42502: PPUSH
42503: NOP4
42507: IFFALSE 42538
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42509: LD_VAR 0 13
42513: PPUSH
42514: LD_VAR 0 16
42518: PUSH
42519: LD_INT 1
42521: ARRAY
42522: PPUSH
42523: LD_VAR 0 16
42527: PUSH
42528: LD_INT 2
42530: ARRAY
42531: PPUSH
42532: NOP4
// continue ;
42536: GO 42028
// end ; end ; r := GetDir ( tmp ) ;
42538: LD_ADDR_VAR 0 15
42542: PUSH
42543: LD_VAR 0 13
42547: PPUSH
42548: NOP4
42552: ST_TO_ADDR
// if r = 5 then
42553: LD_VAR 0 15
42557: PUSH
42558: LD_INT 5
42560: EQUAL
42561: IFFALSE 42571
// r := 0 ;
42563: LD_ADDR_VAR 0 15
42567: PUSH
42568: LD_INT 0
42570: ST_TO_ADDR
// for j = r to 5 do
42571: LD_ADDR_VAR 0 10
42575: PUSH
42576: DOUBLE
42577: LD_VAR 0 15
42581: DEC
42582: ST_TO_ADDR
42583: LD_INT 5
42585: PUSH
42586: FOR_TO
42587: IFFALSE 42701
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42589: LD_ADDR_VAR 0 11
42593: PUSH
42594: LD_VAR 0 13
42598: PPUSH
42599: NOP4
42603: PPUSH
42604: LD_VAR 0 10
42608: PPUSH
42609: LD_INT 2
42611: PPUSH
42612: NOP4
42616: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42617: LD_ADDR_VAR 0 12
42621: PUSH
42622: LD_VAR 0 13
42626: PPUSH
42627: NOP4
42631: PPUSH
42632: LD_VAR 0 10
42636: PPUSH
42637: LD_INT 2
42639: PPUSH
42640: NOP4
42644: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42645: LD_VAR 0 11
42649: PPUSH
42650: LD_VAR 0 12
42654: PPUSH
42655: NOP4
42659: PUSH
42660: LD_VAR 0 11
42664: PPUSH
42665: LD_VAR 0 12
42669: PPUSH
42670: NOP4
42674: NOT
42675: AND
42676: IFFALSE 42699
// begin ComMoveXY ( tmp , _x , _y ) ;
42678: LD_VAR 0 13
42682: PPUSH
42683: LD_VAR 0 11
42687: PPUSH
42688: LD_VAR 0 12
42692: PPUSH
42693: NOP4
// break ;
42697: GO 42701
// end ; end ;
42699: GO 42586
42701: POP
42702: POP
// end ; end ;
42703: GO 42028
42705: POP
42706: POP
// end ;
42707: LD_VAR 0 8
42711: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42712: LD_INT 0
42714: PPUSH
// result := true ;
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_INT 1
42722: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42723: LD_VAR 0 2
42727: PUSH
42728: LD_INT 24
42730: DOUBLE
42731: EQUAL
42732: IFTRUE 42742
42734: LD_INT 33
42736: DOUBLE
42737: EQUAL
42738: IFTRUE 42742
42740: GO 42767
42742: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42743: LD_ADDR_VAR 0 3
42747: PUSH
42748: LD_INT 32
42750: PPUSH
42751: LD_VAR 0 1
42755: PPUSH
42756: NOP4
42760: PUSH
42761: LD_INT 2
42763: EQUAL
42764: ST_TO_ADDR
42765: GO 43083
42767: LD_INT 20
42769: DOUBLE
42770: EQUAL
42771: IFTRUE 42775
42773: GO 42800
42775: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42776: LD_ADDR_VAR 0 3
42780: PUSH
42781: LD_INT 6
42783: PPUSH
42784: LD_VAR 0 1
42788: PPUSH
42789: NOP4
42793: PUSH
42794: LD_INT 2
42796: EQUAL
42797: ST_TO_ADDR
42798: GO 43083
42800: LD_INT 22
42802: DOUBLE
42803: EQUAL
42804: IFTRUE 42814
42806: LD_INT 36
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42839
42814: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42815: LD_ADDR_VAR 0 3
42819: PUSH
42820: LD_INT 15
42822: PPUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: NOP4
42832: PUSH
42833: LD_INT 2
42835: EQUAL
42836: ST_TO_ADDR
42837: GO 43083
42839: LD_INT 30
42841: DOUBLE
42842: EQUAL
42843: IFTRUE 42847
42845: GO 42872
42847: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42848: LD_ADDR_VAR 0 3
42852: PUSH
42853: LD_INT 20
42855: PPUSH
42856: LD_VAR 0 1
42860: PPUSH
42861: NOP4
42865: PUSH
42866: LD_INT 2
42868: EQUAL
42869: ST_TO_ADDR
42870: GO 43083
42872: LD_INT 28
42874: DOUBLE
42875: EQUAL
42876: IFTRUE 42886
42878: LD_INT 21
42880: DOUBLE
42881: EQUAL
42882: IFTRUE 42886
42884: GO 42911
42886: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42887: LD_ADDR_VAR 0 3
42891: PUSH
42892: LD_INT 21
42894: PPUSH
42895: LD_VAR 0 1
42899: PPUSH
42900: NOP4
42904: PUSH
42905: LD_INT 2
42907: EQUAL
42908: ST_TO_ADDR
42909: GO 43083
42911: LD_INT 16
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42944
42919: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_INT 84
42927: PPUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: NOP4
42937: PUSH
42938: LD_INT 2
42940: EQUAL
42941: ST_TO_ADDR
42942: GO 43083
42944: LD_INT 19
42946: DOUBLE
42947: EQUAL
42948: IFTRUE 42958
42950: LD_INT 23
42952: DOUBLE
42953: EQUAL
42954: IFTRUE 42958
42956: GO 42983
42958: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42959: LD_ADDR_VAR 0 3
42963: PUSH
42964: LD_INT 83
42966: PPUSH
42967: LD_VAR 0 1
42971: PPUSH
42972: NOP4
42976: PUSH
42977: LD_INT 2
42979: EQUAL
42980: ST_TO_ADDR
42981: GO 43083
42983: LD_INT 17
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43016
42991: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 39
42999: PPUSH
43000: LD_VAR 0 1
43004: PPUSH
43005: NOP4
43009: PUSH
43010: LD_INT 2
43012: EQUAL
43013: ST_TO_ADDR
43014: GO 43083
43016: LD_INT 18
43018: DOUBLE
43019: EQUAL
43020: IFTRUE 43024
43022: GO 43049
43024: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 40
43032: PPUSH
43033: LD_VAR 0 1
43037: PPUSH
43038: NOP4
43042: PUSH
43043: LD_INT 2
43045: EQUAL
43046: ST_TO_ADDR
43047: GO 43083
43049: LD_INT 27
43051: DOUBLE
43052: EQUAL
43053: IFTRUE 43057
43055: GO 43082
43057: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43058: LD_ADDR_VAR 0 3
43062: PUSH
43063: LD_INT 35
43065: PPUSH
43066: LD_VAR 0 1
43070: PPUSH
43071: NOP4
43075: PUSH
43076: LD_INT 2
43078: EQUAL
43079: ST_TO_ADDR
43080: GO 43083
43082: POP
// end ;
43083: LD_VAR 0 3
43087: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43088: LD_INT 0
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
// result := false ;
43101: LD_ADDR_VAR 0 6
43105: PUSH
43106: LD_INT 0
43108: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43109: LD_VAR 0 1
43113: NOT
43114: PUSH
43115: LD_VAR 0 1
43119: PPUSH
43120: NOP4
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: IN
43135: NOT
43136: OR
43137: PUSH
43138: LD_VAR 0 2
43142: NOT
43143: OR
43144: PUSH
43145: LD_VAR 0 5
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: LD_INT 4
43164: PUSH
43165: LD_INT 5
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: IN
43176: NOT
43177: OR
43178: PUSH
43179: LD_VAR 0 3
43183: PPUSH
43184: LD_VAR 0 4
43188: PPUSH
43189: NOP4
43193: NOT
43194: OR
43195: IFFALSE 43199
// exit ;
43197: GO 43935
// side := GetSide ( depot ) ;
43199: LD_ADDR_VAR 0 9
43203: PUSH
43204: LD_VAR 0 1
43208: PPUSH
43209: NOP4
43213: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43214: LD_VAR 0 9
43218: PPUSH
43219: LD_VAR 0 2
43223: PPUSH
43224: CALL 42712 0 2
43228: NOT
43229: IFFALSE 43233
// exit ;
43231: GO 43935
// pom := GetBase ( depot ) ;
43233: LD_ADDR_VAR 0 10
43237: PUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: NOP4
43247: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43248: LD_ADDR_VAR 0 11
43252: PUSH
43253: LD_VAR 0 2
43257: PPUSH
43258: LD_VAR 0 1
43262: PPUSH
43263: NOP4
43267: PPUSH
43268: NOP4
43272: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43273: LD_VAR 0 10
43277: PPUSH
43278: LD_INT 1
43280: PPUSH
43281: NOP4
43285: PUSH
43286: LD_VAR 0 11
43290: PUSH
43291: LD_INT 1
43293: ARRAY
43294: GREATEREQUAL
43295: PUSH
43296: LD_VAR 0 10
43300: PPUSH
43301: LD_INT 2
43303: PPUSH
43304: NOP4
43308: PUSH
43309: LD_VAR 0 11
43313: PUSH
43314: LD_INT 2
43316: ARRAY
43317: GREATEREQUAL
43318: AND
43319: PUSH
43320: LD_VAR 0 10
43324: PPUSH
43325: LD_INT 3
43327: PPUSH
43328: NOP4
43332: PUSH
43333: LD_VAR 0 11
43337: PUSH
43338: LD_INT 3
43340: ARRAY
43341: GREATEREQUAL
43342: AND
43343: NOT
43344: IFFALSE 43348
// exit ;
43346: GO 43935
// if GetBType ( depot ) = b_depot then
43348: LD_VAR 0 1
43352: PPUSH
43353: NOP4
43357: PUSH
43358: LD_INT 0
43360: EQUAL
43361: IFFALSE 43373
// dist := 28 else
43363: LD_ADDR_VAR 0 14
43367: PUSH
43368: LD_INT 28
43370: ST_TO_ADDR
43371: GO 43381
// dist := 36 ;
43373: LD_ADDR_VAR 0 14
43377: PUSH
43378: LD_INT 36
43380: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43381: LD_VAR 0 1
43385: PPUSH
43386: LD_VAR 0 3
43390: PPUSH
43391: LD_VAR 0 4
43395: PPUSH
43396: NOP4
43400: PUSH
43401: LD_VAR 0 14
43405: GREATER
43406: IFFALSE 43410
// exit ;
43408: GO 43935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43410: LD_ADDR_VAR 0 12
43414: PUSH
43415: LD_VAR 0 2
43419: PPUSH
43420: LD_VAR 0 3
43424: PPUSH
43425: LD_VAR 0 4
43429: PPUSH
43430: LD_VAR 0 5
43434: PPUSH
43435: LD_VAR 0 1
43439: PPUSH
43440: NOP4
43444: PPUSH
43445: LD_INT 0
43447: PPUSH
43448: CALL 43940 0 6
43452: ST_TO_ADDR
// if not hexes then
43453: LD_VAR 0 12
43457: NOT
43458: IFFALSE 43462
// exit ;
43460: GO 43935
// hex := GetHexInfo ( x , y ) ;
43462: LD_ADDR_VAR 0 15
43466: PUSH
43467: LD_VAR 0 3
43471: PPUSH
43472: LD_VAR 0 4
43476: PPUSH
43477: NOP4
43481: ST_TO_ADDR
// if hex [ 1 ] then
43482: LD_VAR 0 15
43486: PUSH
43487: LD_INT 1
43489: ARRAY
43490: IFFALSE 43494
// exit ;
43492: GO 43935
// height := hex [ 2 ] ;
43494: LD_ADDR_VAR 0 13
43498: PUSH
43499: LD_VAR 0 15
43503: PUSH
43504: LD_INT 2
43506: ARRAY
43507: ST_TO_ADDR
// for i = 1 to hexes do
43508: LD_ADDR_VAR 0 7
43512: PUSH
43513: DOUBLE
43514: LD_INT 1
43516: DEC
43517: ST_TO_ADDR
43518: LD_VAR 0 12
43522: PUSH
43523: FOR_TO
43524: IFFALSE 43854
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43526: LD_VAR 0 12
43530: PUSH
43531: LD_VAR 0 7
43535: ARRAY
43536: PUSH
43537: LD_INT 1
43539: ARRAY
43540: PPUSH
43541: LD_VAR 0 12
43545: PUSH
43546: LD_VAR 0 7
43550: ARRAY
43551: PUSH
43552: LD_INT 2
43554: ARRAY
43555: PPUSH
43556: NOP4
43560: NOT
43561: PUSH
43562: LD_VAR 0 12
43566: PUSH
43567: LD_VAR 0 7
43571: ARRAY
43572: PUSH
43573: LD_INT 1
43575: ARRAY
43576: PPUSH
43577: LD_VAR 0 12
43581: PUSH
43582: LD_VAR 0 7
43586: ARRAY
43587: PUSH
43588: LD_INT 2
43590: ARRAY
43591: PPUSH
43592: NOP4
43596: PUSH
43597: LD_INT 0
43599: GREATER
43600: OR
43601: PUSH
43602: LD_VAR 0 12
43606: PUSH
43607: LD_VAR 0 7
43611: ARRAY
43612: PUSH
43613: LD_INT 1
43615: ARRAY
43616: PPUSH
43617: LD_VAR 0 12
43621: PUSH
43622: LD_VAR 0 7
43626: ARRAY
43627: PUSH
43628: LD_INT 2
43630: ARRAY
43631: PPUSH
43632: NOP4
43636: OR
43637: IFFALSE 43643
// exit ;
43639: POP
43640: POP
43641: GO 43935
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43643: LD_ADDR_VAR 0 8
43647: PUSH
43648: LD_VAR 0 12
43652: PUSH
43653: LD_VAR 0 7
43657: ARRAY
43658: PUSH
43659: LD_INT 1
43661: ARRAY
43662: PPUSH
43663: LD_VAR 0 12
43667: PUSH
43668: LD_VAR 0 7
43672: ARRAY
43673: PUSH
43674: LD_INT 2
43676: ARRAY
43677: PPUSH
43678: NOP4
43682: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43683: LD_VAR 0 8
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: PUSH
43692: LD_VAR 0 8
43696: PUSH
43697: LD_INT 2
43699: ARRAY
43700: PUSH
43701: LD_VAR 0 13
43705: PUSH
43706: LD_INT 2
43708: PLUS
43709: GREATER
43710: OR
43711: PUSH
43712: LD_VAR 0 8
43716: PUSH
43717: LD_INT 2
43719: ARRAY
43720: PUSH
43721: LD_VAR 0 13
43725: PUSH
43726: LD_INT 2
43728: MINUS
43729: LESS
43730: OR
43731: PUSH
43732: LD_VAR 0 8
43736: PUSH
43737: LD_INT 3
43739: ARRAY
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 8
43746: PUSH
43747: LD_INT 9
43749: PUSH
43750: LD_INT 10
43752: PUSH
43753: LD_INT 11
43755: PUSH
43756: LD_INT 12
43758: PUSH
43759: LD_INT 13
43761: PUSH
43762: LD_INT 16
43764: PUSH
43765: LD_INT 17
43767: PUSH
43768: LD_INT 18
43770: PUSH
43771: LD_INT 19
43773: PUSH
43774: LD_INT 20
43776: PUSH
43777: LD_INT 21
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: IN
43795: NOT
43796: OR
43797: PUSH
43798: LD_VAR 0 8
43802: PUSH
43803: LD_INT 5
43805: ARRAY
43806: NOT
43807: OR
43808: PUSH
43809: LD_VAR 0 8
43813: PUSH
43814: LD_INT 6
43816: ARRAY
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 7
43826: PUSH
43827: LD_INT 9
43829: PUSH
43830: LD_INT 10
43832: PUSH
43833: LD_INT 11
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: IN
43844: NOT
43845: OR
43846: IFFALSE 43852
// exit ;
43848: POP
43849: POP
43850: GO 43935
// end ;
43852: GO 43523
43854: POP
43855: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43856: LD_VAR 0 9
43860: PPUSH
43861: LD_VAR 0 3
43865: PPUSH
43866: LD_VAR 0 4
43870: PPUSH
43871: LD_INT 20
43873: PPUSH
43874: CALL 35887 0 4
43878: PUSH
43879: LD_INT 4
43881: ARRAY
43882: IFFALSE 43886
// exit ;
43884: GO 43935
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43886: LD_VAR 0 2
43890: PUSH
43891: LD_INT 29
43893: PUSH
43894: LD_INT 30
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: IN
43901: PUSH
43902: LD_VAR 0 3
43906: PPUSH
43907: LD_VAR 0 4
43911: PPUSH
43912: LD_VAR 0 9
43916: PPUSH
43917: NOP4
43921: NOT
43922: AND
43923: IFFALSE 43927
// exit ;
43925: GO 43935
// result := true ;
43927: LD_ADDR_VAR 0 6
43931: PUSH
43932: LD_INT 1
43934: ST_TO_ADDR
// end ;
43935: LD_VAR 0 6
43939: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43940: LD_INT 0
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
43981: PPUSH
43982: PPUSH
43983: PPUSH
43984: PPUSH
43985: PPUSH
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
43990: PPUSH
43991: PPUSH
43992: PPUSH
43993: PPUSH
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
// result = [ ] ;
44000: LD_ADDR_VAR 0 7
44004: PUSH
44005: EMPTY
44006: ST_TO_ADDR
// temp_list = [ ] ;
44007: LD_ADDR_VAR 0 9
44011: PUSH
44012: EMPTY
44013: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44014: LD_VAR 0 4
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 3
44030: PUSH
44031: LD_INT 4
44033: PUSH
44034: LD_INT 5
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: IN
44045: NOT
44046: PUSH
44047: LD_VAR 0 1
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: IN
44062: PUSH
44063: LD_VAR 0 5
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: IN
44082: NOT
44083: AND
44084: OR
44085: IFFALSE 44089
// exit ;
44087: GO 62480
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44089: LD_VAR 0 1
44093: PUSH
44094: LD_INT 6
44096: PUSH
44097: LD_INT 7
44099: PUSH
44100: LD_INT 8
44102: PUSH
44103: LD_INT 13
44105: PUSH
44106: LD_INT 12
44108: PUSH
44109: LD_INT 15
44111: PUSH
44112: LD_INT 11
44114: PUSH
44115: LD_INT 14
44117: PUSH
44118: LD_INT 10
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: IN
44132: IFFALSE 44142
// btype = b_lab ;
44134: LD_ADDR_VAR 0 1
44138: PUSH
44139: LD_INT 6
44141: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44142: LD_VAR 0 6
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: IN
44161: NOT
44162: PUSH
44163: LD_VAR 0 1
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: LD_INT 6
44182: PUSH
44183: LD_INT 36
44185: PUSH
44186: LD_INT 4
44188: PUSH
44189: LD_INT 5
44191: PUSH
44192: LD_INT 31
44194: PUSH
44195: LD_INT 32
44197: PUSH
44198: LD_INT 33
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: IN
44214: NOT
44215: PUSH
44216: LD_VAR 0 6
44220: PUSH
44221: LD_INT 1
44223: EQUAL
44224: AND
44225: OR
44226: PUSH
44227: LD_VAR 0 1
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: IN
44242: NOT
44243: PUSH
44244: LD_VAR 0 6
44248: PUSH
44249: LD_INT 2
44251: EQUAL
44252: AND
44253: OR
44254: IFFALSE 44264
// mode = 0 ;
44256: LD_ADDR_VAR 0 6
44260: PUSH
44261: LD_INT 0
44263: ST_TO_ADDR
// case mode of 0 :
44264: LD_VAR 0 6
44268: PUSH
44269: LD_INT 0
44271: DOUBLE
44272: EQUAL
44273: IFTRUE 44277
44275: GO 55730
44277: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44278: LD_ADDR_VAR 0 11
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 3
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 3
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44471: LD_ADDR_VAR 0 12
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44667: LD_ADDR_VAR 0 13
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: NEG
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44866: LD_ADDR_VAR 0 14
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 3
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45062: LD_ADDR_VAR 0 15
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45255: LD_ADDR_VAR 0 16
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45448: LD_ADDR_VAR 0 17
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45678: LD_ADDR_VAR 0 18
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45908: LD_ADDR_VAR 0 19
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46138: LD_ADDR_VAR 0 20
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46368: LD_ADDR_VAR 0 21
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46598: LD_ADDR_VAR 0 22
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46828: LD_ADDR_VAR 0 23
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 3
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47108: LD_ADDR_VAR 0 24
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47384: LD_ADDR_VAR 0 25
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 3
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47658: LD_ADDR_VAR 0 26
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47934: LD_ADDR_VAR 0 27
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 3
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48214: LD_ADDR_VAR 0 28
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 3
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48496: LD_ADDR_VAR 0 29
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48775: LD_ADDR_VAR 0 30
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 3
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49053: LD_ADDR_VAR 0 31
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49331: LD_ADDR_VAR 0 32
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49609: LD_ADDR_VAR 0 33
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49888: LD_ADDR_VAR 0 34
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50168: LD_ADDR_VAR 0 35
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50280: LD_ADDR_VAR 0 36
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50392: LD_ADDR_VAR 0 37
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50504: LD_ADDR_VAR 0 38
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50616: LD_ADDR_VAR 0 39
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50728: LD_ADDR_VAR 0 40
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50840: LD_ADDR_VAR 0 41
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51190: LD_ADDR_VAR 0 42
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51540: LD_ADDR_VAR 0 43
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 3
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 3
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51888: LD_ADDR_VAR 0 44
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52238: LD_ADDR_VAR 0 45
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52588: LD_ADDR_VAR 0 46
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52936: LD_ADDR_VAR 0 47
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53087: LD_ADDR_VAR 0 48
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53234: LD_ADDR_VAR 0 49
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53378: LD_ADDR_VAR 0 50
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53522: LD_ADDR_VAR 0 51
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53669: LD_ADDR_VAR 0 52
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53820: LD_ADDR_VAR 0 53
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54050: LD_ADDR_VAR 0 54
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54280: LD_ADDR_VAR 0 55
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54510: LD_ADDR_VAR 0 56
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54740: LD_ADDR_VAR 0 57
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54970: LD_ADDR_VAR 0 58
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55200: LD_ADDR_VAR 0 59
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55288: LD_ADDR_VAR 0 60
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55376: LD_ADDR_VAR 0 61
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55464: LD_ADDR_VAR 0 62
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55552: LD_ADDR_VAR 0 63
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55640: LD_ADDR_VAR 0 64
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: ST_TO_ADDR
// end ; 1 :
55728: GO 61625
55730: LD_INT 1
55732: DOUBLE
55733: EQUAL
55734: IFTRUE 55738
55736: GO 58361
55738: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55739: LD_ADDR_VAR 0 11
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55783: LD_ADDR_VAR 0 12
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 3
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: LIST
55823: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55824: LD_ADDR_VAR 0 13
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55864: LD_ADDR_VAR 0 14
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55905: LD_ADDR_VAR 0 15
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55949: LD_ADDR_VAR 0 16
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55995: LD_ADDR_VAR 0 17
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56039: LD_ADDR_VAR 0 18
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: LIST
56079: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56080: LD_ADDR_VAR 0 19
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56120: LD_ADDR_VAR 0 20
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56161: LD_ADDR_VAR 0 21
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 3
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56205: LD_ADDR_VAR 0 22
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56251: LD_ADDR_VAR 0 23
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56295: LD_ADDR_VAR 0 24
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 4
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56336: LD_ADDR_VAR 0 25
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 4
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 3
56363: PUSH
56364: LD_INT 4
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56376: LD_ADDR_VAR 0 26
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56417: LD_ADDR_VAR 0 27
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56461: LD_ADDR_VAR 0 28
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: LD_INT 4
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 4
56492: NEG
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56507: LD_ADDR_VAR 0 29
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 4
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 5
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 5
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: LD_INT 4
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 6
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 6
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 5
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56662: LD_ADDR_VAR 0 30
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 5
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 5
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 5
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 6
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 6
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56805: LD_ADDR_VAR 0 31
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 3
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 4
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 4
56852: PUSH
56853: LD_INT 4
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 4
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: LD_INT 4
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 5
56882: PUSH
56883: LD_INT 5
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 6
56902: PUSH
56903: LD_INT 5
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 6
56912: PUSH
56913: LD_INT 6
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 5
56922: PUSH
56923: LD_INT 6
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56944: LD_ADDR_VAR 0 32
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 4
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 4
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 5
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 5
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 6
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 6
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 5
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57087: LD_ADDR_VAR 0 33
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 4
57139: NEG
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 4
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 5
57173: NEG
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 6
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 6
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57242: LD_ADDR_VAR 0 34
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 4
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 4
57309: NEG
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 4
57321: NEG
57322: PUSH
57323: LD_INT 5
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 5
57333: NEG
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 5
57345: NEG
57346: PUSH
57347: LD_INT 5
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 5
57357: NEG
57358: PUSH
57359: LD_INT 6
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 6
57369: NEG
57370: PUSH
57371: LD_INT 5
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 6
57381: NEG
57382: PUSH
57383: LD_INT 6
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57405: LD_ADDR_VAR 0 41
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57449: LD_ADDR_VAR 0 42
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57490: LD_ADDR_VAR 0 43
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57530: LD_ADDR_VAR 0 44
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57571: LD_ADDR_VAR 0 45
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57615: LD_ADDR_VAR 0 46
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57661: LD_ADDR_VAR 0 47
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57694: LD_ADDR_VAR 0 48
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57725: LD_ADDR_VAR 0 49
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57754: LD_ADDR_VAR 0 50
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57783: LD_ADDR_VAR 0 51
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57814: LD_ADDR_VAR 0 52
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57847: LD_ADDR_VAR 0 53
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57891: LD_ADDR_VAR 0 54
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57932: LD_ADDR_VAR 0 55
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57972: LD_ADDR_VAR 0 56
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 3
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58013: LD_ADDR_VAR 0 57
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58057: LD_ADDR_VAR 0 58
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58103: LD_ADDR_VAR 0 59
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58147: LD_ADDR_VAR 0 60
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58188: LD_ADDR_VAR 0 61
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58228: LD_ADDR_VAR 0 62
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58269: LD_ADDR_VAR 0 63
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: LIST
58312: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58313: LD_ADDR_VAR 0 64
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// end ; 2 :
58359: GO 61625
58361: LD_INT 2
58363: DOUBLE
58364: EQUAL
58365: IFTRUE 58369
58367: GO 61624
58369: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58370: LD_ADDR_VAR 0 29
58374: PUSH
58375: LD_INT 4
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 5
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 5
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 5
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 4
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 4
58500: PUSH
58501: LD_INT 4
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 4
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 4
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 5
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 5
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 5
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 4
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 4
58755: NEG
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 4
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 4
58803: NEG
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 5
58815: NEG
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: NEG
58828: PUSH
58829: LD_INT 5
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 5
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 5
58851: NEG
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58908: LD_ADDR_VAR 0 30
58912: PUSH
58913: LD_INT 4
58915: PUSH
58916: LD_INT 4
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 4
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 5
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 5
58945: PUSH
58946: LD_INT 5
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 4
58955: PUSH
58956: LD_INT 5
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: LD_INT 4
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 5
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: LD_INT 5
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 4
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 3
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 4
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 4
59109: NEG
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 4
59143: NEG
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 5
59154: NEG
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 5
59165: NEG
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 5
59177: NEG
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: NEG
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: NEG
59273: PUSH
59274: LD_INT 4
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 4
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 5
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 4
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 3
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 5
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: LD_INT 5
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59455: LD_ADDR_VAR 0 31
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 4
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 4
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 5
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 4
59669: NEG
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 4
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 5
59717: NEG
59718: PUSH
59719: LD_INT 4
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 5
59729: NEG
59730: PUSH
59731: LD_INT 5
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: LD_INT 5
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 5
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 4
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 4
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 4
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 4
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 4
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 5
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 5
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 5
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60005: LD_ADDR_VAR 0 32
60009: PUSH
60010: LD_INT 4
60012: NEG
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 4
60023: NEG
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 3
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 4
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 5
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 5
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 5
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 3
60103: NEG
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: LD_INT 4
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 4
60174: NEG
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: NEG
60187: PUSH
60188: LD_INT 4
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 4
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 5
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 4
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 3
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 4
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: LD_INT 3
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 4
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 4
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 4
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 4
60417: PUSH
60418: LD_INT 4
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: LD_INT 3
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 5
60437: PUSH
60438: LD_INT 4
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 5
60447: PUSH
60448: LD_INT 5
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: PUSH
60458: LD_INT 5
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: LD_INT 4
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 5
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 5
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60552: LD_ADDR_VAR 0 33
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: LD_INT 5
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: LD_INT 4
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: NEG
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 5
60619: NEG
60620: PUSH
60621: LD_INT 4
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 5
60631: NEG
60632: PUSH
60633: LD_INT 5
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: LD_INT 5
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 5
60655: NEG
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 4
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 4
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 4
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 4
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 5
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 5
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 5
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: LD_INT 4
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 4
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 4
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 5
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 5
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 4
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: PUSH
61025: LD_INT 5
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61090: LD_ADDR_VAR 0 34
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 5
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 4
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 3
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 4
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 5
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 5
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 4
61292: PUSH
61293: LD_INT 4
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: LD_INT 4
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 5
61322: PUSH
61323: LD_INT 5
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: LD_INT 5
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: LD_INT 4
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: LD_INT 5
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 4
61475: NEG
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 5
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 5
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 5
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: ST_TO_ADDR
// end ; end ;
61622: GO 61625
61624: POP
// case btype of b_depot , b_warehouse :
61625: LD_VAR 0 1
61629: PUSH
61630: LD_INT 0
61632: DOUBLE
61633: EQUAL
61634: IFTRUE 61644
61636: LD_INT 1
61638: DOUBLE
61639: EQUAL
61640: IFTRUE 61644
61642: GO 61845
61644: POP
// case nation of nation_american :
61645: LD_VAR 0 5
61649: PUSH
61650: LD_INT 1
61652: DOUBLE
61653: EQUAL
61654: IFTRUE 61658
61656: GO 61714
61658: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61659: LD_ADDR_VAR 0 9
61663: PUSH
61664: LD_VAR 0 11
61668: PUSH
61669: LD_VAR 0 12
61673: PUSH
61674: LD_VAR 0 13
61678: PUSH
61679: LD_VAR 0 14
61683: PUSH
61684: LD_VAR 0 15
61688: PUSH
61689: LD_VAR 0 16
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: PUSH
61702: LD_VAR 0 4
61706: PUSH
61707: LD_INT 1
61709: PLUS
61710: ARRAY
61711: ST_TO_ADDR
61712: GO 61843
61714: LD_INT 2
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61722
61720: GO 61778
61722: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61723: LD_ADDR_VAR 0 9
61727: PUSH
61728: LD_VAR 0 17
61732: PUSH
61733: LD_VAR 0 18
61737: PUSH
61738: LD_VAR 0 19
61742: PUSH
61743: LD_VAR 0 20
61747: PUSH
61748: LD_VAR 0 21
61752: PUSH
61753: LD_VAR 0 22
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: PUSH
61766: LD_VAR 0 4
61770: PUSH
61771: LD_INT 1
61773: PLUS
61774: ARRAY
61775: ST_TO_ADDR
61776: GO 61843
61778: LD_INT 3
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61786
61784: GO 61842
61786: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61787: LD_ADDR_VAR 0 9
61791: PUSH
61792: LD_VAR 0 23
61796: PUSH
61797: LD_VAR 0 24
61801: PUSH
61802: LD_VAR 0 25
61806: PUSH
61807: LD_VAR 0 26
61811: PUSH
61812: LD_VAR 0 27
61816: PUSH
61817: LD_VAR 0 28
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: LD_VAR 0 4
61834: PUSH
61835: LD_INT 1
61837: PLUS
61838: ARRAY
61839: ST_TO_ADDR
61840: GO 61843
61842: POP
61843: GO 62398
61845: LD_INT 2
61847: DOUBLE
61848: EQUAL
61849: IFTRUE 61859
61851: LD_INT 3
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61859
61857: GO 61915
61859: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61860: LD_ADDR_VAR 0 9
61864: PUSH
61865: LD_VAR 0 29
61869: PUSH
61870: LD_VAR 0 30
61874: PUSH
61875: LD_VAR 0 31
61879: PUSH
61880: LD_VAR 0 32
61884: PUSH
61885: LD_VAR 0 33
61889: PUSH
61890: LD_VAR 0 34
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: PUSH
61903: LD_VAR 0 4
61907: PUSH
61908: LD_INT 1
61910: PLUS
61911: ARRAY
61912: ST_TO_ADDR
61913: GO 62398
61915: LD_INT 16
61917: DOUBLE
61918: EQUAL
61919: IFTRUE 61977
61921: LD_INT 17
61923: DOUBLE
61924: EQUAL
61925: IFTRUE 61977
61927: LD_INT 18
61929: DOUBLE
61930: EQUAL
61931: IFTRUE 61977
61933: LD_INT 19
61935: DOUBLE
61936: EQUAL
61937: IFTRUE 61977
61939: LD_INT 22
61941: DOUBLE
61942: EQUAL
61943: IFTRUE 61977
61945: LD_INT 20
61947: DOUBLE
61948: EQUAL
61949: IFTRUE 61977
61951: LD_INT 21
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61977
61957: LD_INT 23
61959: DOUBLE
61960: EQUAL
61961: IFTRUE 61977
61963: LD_INT 24
61965: DOUBLE
61966: EQUAL
61967: IFTRUE 61977
61969: LD_INT 25
61971: DOUBLE
61972: EQUAL
61973: IFTRUE 61977
61975: GO 62033
61977: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61978: LD_ADDR_VAR 0 9
61982: PUSH
61983: LD_VAR 0 35
61987: PUSH
61988: LD_VAR 0 36
61992: PUSH
61993: LD_VAR 0 37
61997: PUSH
61998: LD_VAR 0 38
62002: PUSH
62003: LD_VAR 0 39
62007: PUSH
62008: LD_VAR 0 40
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: PUSH
62021: LD_VAR 0 4
62025: PUSH
62026: LD_INT 1
62028: PLUS
62029: ARRAY
62030: ST_TO_ADDR
62031: GO 62398
62033: LD_INT 6
62035: DOUBLE
62036: EQUAL
62037: IFTRUE 62089
62039: LD_INT 7
62041: DOUBLE
62042: EQUAL
62043: IFTRUE 62089
62045: LD_INT 8
62047: DOUBLE
62048: EQUAL
62049: IFTRUE 62089
62051: LD_INT 13
62053: DOUBLE
62054: EQUAL
62055: IFTRUE 62089
62057: LD_INT 12
62059: DOUBLE
62060: EQUAL
62061: IFTRUE 62089
62063: LD_INT 15
62065: DOUBLE
62066: EQUAL
62067: IFTRUE 62089
62069: LD_INT 11
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62089
62075: LD_INT 14
62077: DOUBLE
62078: EQUAL
62079: IFTRUE 62089
62081: LD_INT 10
62083: DOUBLE
62084: EQUAL
62085: IFTRUE 62089
62087: GO 62145
62089: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62090: LD_ADDR_VAR 0 9
62094: PUSH
62095: LD_VAR 0 41
62099: PUSH
62100: LD_VAR 0 42
62104: PUSH
62105: LD_VAR 0 43
62109: PUSH
62110: LD_VAR 0 44
62114: PUSH
62115: LD_VAR 0 45
62119: PUSH
62120: LD_VAR 0 46
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: PUSH
62133: LD_VAR 0 4
62137: PUSH
62138: LD_INT 1
62140: PLUS
62141: ARRAY
62142: ST_TO_ADDR
62143: GO 62398
62145: LD_INT 36
62147: DOUBLE
62148: EQUAL
62149: IFTRUE 62153
62151: GO 62209
62153: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62154: LD_ADDR_VAR 0 9
62158: PUSH
62159: LD_VAR 0 47
62163: PUSH
62164: LD_VAR 0 48
62168: PUSH
62169: LD_VAR 0 49
62173: PUSH
62174: LD_VAR 0 50
62178: PUSH
62179: LD_VAR 0 51
62183: PUSH
62184: LD_VAR 0 52
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: PUSH
62197: LD_VAR 0 4
62201: PUSH
62202: LD_INT 1
62204: PLUS
62205: ARRAY
62206: ST_TO_ADDR
62207: GO 62398
62209: LD_INT 4
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62235
62215: LD_INT 5
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62235
62221: LD_INT 34
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62235
62227: LD_INT 37
62229: DOUBLE
62230: EQUAL
62231: IFTRUE 62235
62233: GO 62291
62235: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62236: LD_ADDR_VAR 0 9
62240: PUSH
62241: LD_VAR 0 53
62245: PUSH
62246: LD_VAR 0 54
62250: PUSH
62251: LD_VAR 0 55
62255: PUSH
62256: LD_VAR 0 56
62260: PUSH
62261: LD_VAR 0 57
62265: PUSH
62266: LD_VAR 0 58
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: LD_VAR 0 4
62283: PUSH
62284: LD_INT 1
62286: PLUS
62287: ARRAY
62288: ST_TO_ADDR
62289: GO 62398
62291: LD_INT 31
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62341
62297: LD_INT 32
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62341
62303: LD_INT 33
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62341
62309: LD_INT 27
62311: DOUBLE
62312: EQUAL
62313: IFTRUE 62341
62315: LD_INT 26
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62341
62321: LD_INT 28
62323: DOUBLE
62324: EQUAL
62325: IFTRUE 62341
62327: LD_INT 29
62329: DOUBLE
62330: EQUAL
62331: IFTRUE 62341
62333: LD_INT 30
62335: DOUBLE
62336: EQUAL
62337: IFTRUE 62341
62339: GO 62397
62341: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62342: LD_ADDR_VAR 0 9
62346: PUSH
62347: LD_VAR 0 59
62351: PUSH
62352: LD_VAR 0 60
62356: PUSH
62357: LD_VAR 0 61
62361: PUSH
62362: LD_VAR 0 62
62366: PUSH
62367: LD_VAR 0 63
62371: PUSH
62372: LD_VAR 0 64
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: PUSH
62385: LD_VAR 0 4
62389: PUSH
62390: LD_INT 1
62392: PLUS
62393: ARRAY
62394: ST_TO_ADDR
62395: GO 62398
62397: POP
// temp_list2 = [ ] ;
62398: LD_ADDR_VAR 0 10
62402: PUSH
62403: EMPTY
62404: ST_TO_ADDR
// for i in temp_list do
62405: LD_ADDR_VAR 0 8
62409: PUSH
62410: LD_VAR 0 9
62414: PUSH
62415: FOR_IN
62416: IFFALSE 62468
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62418: LD_ADDR_VAR 0 10
62422: PUSH
62423: LD_VAR 0 10
62427: PUSH
62428: LD_VAR 0 8
62432: PUSH
62433: LD_INT 1
62435: ARRAY
62436: PUSH
62437: LD_VAR 0 2
62441: PLUS
62442: PUSH
62443: LD_VAR 0 8
62447: PUSH
62448: LD_INT 2
62450: ARRAY
62451: PUSH
62452: LD_VAR 0 3
62456: PLUS
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: EMPTY
62463: LIST
62464: ADD
62465: ST_TO_ADDR
62466: GO 62415
62468: POP
62469: POP
// result = temp_list2 ;
62470: LD_ADDR_VAR 0 7
62474: PUSH
62475: LD_VAR 0 10
62479: ST_TO_ADDR
// end ;
62480: LD_VAR 0 7
62484: RET
// export function EnemyInRange ( unit , dist ) ; begin
62485: LD_INT 0
62487: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62488: LD_ADDR_VAR 0 3
62492: PUSH
62493: LD_VAR 0 1
62497: PPUSH
62498: NOP4
62502: PPUSH
62503: LD_VAR 0 1
62507: PPUSH
62508: NOP4
62512: PPUSH
62513: LD_VAR 0 1
62517: PPUSH
62518: NOP4
62522: PPUSH
62523: LD_VAR 0 2
62527: PPUSH
62528: CALL 35887 0 4
62532: PUSH
62533: LD_INT 4
62535: ARRAY
62536: ST_TO_ADDR
// end ;
62537: LD_VAR 0 3
62541: RET
// export function PlayerSeeMe ( unit ) ; begin
62542: LD_INT 0
62544: PPUSH
// result := See ( your_side , unit ) ;
62545: LD_ADDR_VAR 0 2
62549: PUSH
62550: NOP4
62554: PPUSH
62555: LD_VAR 0 1
62559: PPUSH
62560: NOP4
62564: ST_TO_ADDR
// end ;
62565: LD_VAR 0 2
62569: RET
// export function ReverseDir ( unit ) ; begin
62570: LD_INT 0
62572: PPUSH
// if not unit then
62573: LD_VAR 0 1
62577: NOT
62578: IFFALSE 62582
// exit ;
62580: GO 62605
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62582: LD_ADDR_VAR 0 2
62586: PUSH
62587: LD_VAR 0 1
62591: PPUSH
62592: NOP4
62596: PUSH
62597: LD_INT 3
62599: PLUS
62600: PUSH
62601: LD_INT 6
62603: MOD
62604: ST_TO_ADDR
// end ;
62605: LD_VAR 0 2
62609: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62610: LD_INT 0
62612: PPUSH
62613: PPUSH
62614: PPUSH
62615: PPUSH
62616: PPUSH
62617: PPUSH
// if not unit or not hexes then
62618: LD_VAR 0 1
62622: NOT
62623: PUSH
62624: LD_VAR 0 2
62628: NOT
62629: OR
62630: IFFALSE 62634
// exit ;
62632: GO 62757
// dist := 9999 ;
62634: LD_ADDR_VAR 0 5
62638: PUSH
62639: LD_INT 9999
62641: ST_TO_ADDR
// for i = 1 to hexes do
62642: LD_ADDR_VAR 0 4
62646: PUSH
62647: DOUBLE
62648: LD_INT 1
62650: DEC
62651: ST_TO_ADDR
62652: LD_VAR 0 2
62656: PUSH
62657: FOR_TO
62658: IFFALSE 62745
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62660: LD_ADDR_VAR 0 6
62664: PUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: LD_VAR 0 2
62674: PUSH
62675: LD_VAR 0 4
62679: ARRAY
62680: PUSH
62681: LD_INT 1
62683: ARRAY
62684: PPUSH
62685: LD_VAR 0 2
62689: PUSH
62690: LD_VAR 0 4
62694: ARRAY
62695: PUSH
62696: LD_INT 2
62698: ARRAY
62699: PPUSH
62700: NOP4
62704: ST_TO_ADDR
// if tdist < dist then
62705: LD_VAR 0 6
62709: PUSH
62710: LD_VAR 0 5
62714: LESS
62715: IFFALSE 62743
// begin hex := hexes [ i ] ;
62717: LD_ADDR_VAR 0 8
62721: PUSH
62722: LD_VAR 0 2
62726: PUSH
62727: LD_VAR 0 4
62731: ARRAY
62732: ST_TO_ADDR
// dist := tdist ;
62733: LD_ADDR_VAR 0 5
62737: PUSH
62738: LD_VAR 0 6
62742: ST_TO_ADDR
// end ; end ;
62743: GO 62657
62745: POP
62746: POP
// result := hex ;
62747: LD_ADDR_VAR 0 3
62751: PUSH
62752: LD_VAR 0 8
62756: ST_TO_ADDR
// end ;
62757: LD_VAR 0 3
62761: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62762: LD_INT 0
62764: PPUSH
62765: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62766: LD_VAR 0 1
62770: NOT
62771: PUSH
62772: LD_VAR 0 1
62776: PUSH
62777: LD_INT 21
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 23
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PPUSH
62801: NOP4
62805: IN
62806: NOT
62807: OR
62808: IFFALSE 62812
// exit ;
62810: GO 62859
// for i = 1 to 3 do
62812: LD_ADDR_VAR 0 3
62816: PUSH
62817: DOUBLE
62818: LD_INT 1
62820: DEC
62821: ST_TO_ADDR
62822: LD_INT 3
62824: PUSH
62825: FOR_TO
62826: IFFALSE 62857
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62828: LD_VAR 0 1
62832: PPUSH
62833: NOP4
62837: PPUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: NOP4
62847: PPUSH
62848: LD_INT 1
62850: PPUSH
62851: NOP4
62855: GO 62825
62857: POP
62858: POP
// end ;
62859: LD_VAR 0 2
62863: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62864: LD_INT 0
62866: PPUSH
62867: PPUSH
62868: PPUSH
62869: PPUSH
62870: PPUSH
62871: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62872: LD_VAR 0 1
62876: NOT
62877: PUSH
62878: LD_VAR 0 2
62882: NOT
62883: OR
62884: PUSH
62885: LD_VAR 0 1
62889: PPUSH
62890: NOP4
62894: OR
62895: IFFALSE 62899
// exit ;
62897: GO 63340
// x := GetX ( enemy_unit ) ;
62899: LD_ADDR_VAR 0 7
62903: PUSH
62904: LD_VAR 0 2
62908: PPUSH
62909: NOP4
62913: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62914: LD_ADDR_VAR 0 8
62918: PUSH
62919: LD_VAR 0 2
62923: PPUSH
62924: NOP4
62928: ST_TO_ADDR
// if not x or not y then
62929: LD_VAR 0 7
62933: NOT
62934: PUSH
62935: LD_VAR 0 8
62939: NOT
62940: OR
62941: IFFALSE 62945
// exit ;
62943: GO 63340
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62945: LD_ADDR_VAR 0 6
62949: PUSH
62950: LD_VAR 0 7
62954: PPUSH
62955: LD_INT 0
62957: PPUSH
62958: LD_INT 4
62960: PPUSH
62961: NOP4
62965: PUSH
62966: LD_VAR 0 8
62970: PPUSH
62971: LD_INT 0
62973: PPUSH
62974: LD_INT 4
62976: PPUSH
62977: NOP4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_VAR 0 7
62990: PPUSH
62991: LD_INT 1
62993: PPUSH
62994: LD_INT 4
62996: PPUSH
62997: NOP4
63001: PUSH
63002: LD_VAR 0 8
63006: PPUSH
63007: LD_INT 1
63009: PPUSH
63010: LD_INT 4
63012: PPUSH
63013: NOP4
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_VAR 0 7
63026: PPUSH
63027: LD_INT 2
63029: PPUSH
63030: LD_INT 4
63032: PPUSH
63033: NOP4
63037: PUSH
63038: LD_VAR 0 8
63042: PPUSH
63043: LD_INT 2
63045: PPUSH
63046: LD_INT 4
63048: PPUSH
63049: NOP4
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_VAR 0 7
63062: PPUSH
63063: LD_INT 3
63065: PPUSH
63066: LD_INT 4
63068: PPUSH
63069: NOP4
63073: PUSH
63074: LD_VAR 0 8
63078: PPUSH
63079: LD_INT 3
63081: PPUSH
63082: LD_INT 4
63084: PPUSH
63085: NOP4
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_VAR 0 7
63098: PPUSH
63099: LD_INT 4
63101: PPUSH
63102: LD_INT 4
63104: PPUSH
63105: NOP4
63109: PUSH
63110: LD_VAR 0 8
63114: PPUSH
63115: LD_INT 4
63117: PPUSH
63118: LD_INT 4
63120: PPUSH
63121: NOP4
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_VAR 0 7
63134: PPUSH
63135: LD_INT 5
63137: PPUSH
63138: LD_INT 4
63140: PPUSH
63141: NOP4
63145: PUSH
63146: LD_VAR 0 8
63150: PPUSH
63151: LD_INT 5
63153: PPUSH
63154: LD_INT 4
63156: PPUSH
63157: NOP4
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// for i = tmp downto 1 do
63174: LD_ADDR_VAR 0 4
63178: PUSH
63179: DOUBLE
63180: LD_VAR 0 6
63184: INC
63185: ST_TO_ADDR
63186: LD_INT 1
63188: PUSH
63189: FOR_DOWNTO
63190: IFFALSE 63291
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63192: LD_VAR 0 6
63196: PUSH
63197: LD_VAR 0 4
63201: ARRAY
63202: PUSH
63203: LD_INT 1
63205: ARRAY
63206: PPUSH
63207: LD_VAR 0 6
63211: PUSH
63212: LD_VAR 0 4
63216: ARRAY
63217: PUSH
63218: LD_INT 2
63220: ARRAY
63221: PPUSH
63222: NOP4
63226: NOT
63227: PUSH
63228: LD_VAR 0 6
63232: PUSH
63233: LD_VAR 0 4
63237: ARRAY
63238: PUSH
63239: LD_INT 1
63241: ARRAY
63242: PPUSH
63243: LD_VAR 0 6
63247: PUSH
63248: LD_VAR 0 4
63252: ARRAY
63253: PUSH
63254: LD_INT 2
63256: ARRAY
63257: PPUSH
63258: NOP4
63262: PUSH
63263: LD_INT 0
63265: NONEQUAL
63266: OR
63267: IFFALSE 63289
// tmp := Delete ( tmp , i ) ;
63269: LD_ADDR_VAR 0 6
63273: PUSH
63274: LD_VAR 0 6
63278: PPUSH
63279: LD_VAR 0 4
63283: PPUSH
63284: NOP4
63288: ST_TO_ADDR
63289: GO 63189
63291: POP
63292: POP
// j := GetClosestHex ( unit , tmp ) ;
63293: LD_ADDR_VAR 0 5
63297: PUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: LD_VAR 0 6
63307: PPUSH
63308: CALL 62610 0 2
63312: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63313: LD_VAR 0 1
63317: PPUSH
63318: LD_VAR 0 5
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: PPUSH
63327: LD_VAR 0 5
63331: PUSH
63332: LD_INT 2
63334: ARRAY
63335: PPUSH
63336: NOP4
// end ;
63340: LD_VAR 0 3
63344: RET
// export function PrepareApemanSoldier ( ) ; begin
63345: LD_INT 0
63347: PPUSH
// uc_nation := 0 ;
63348: LD_ADDR_OWVAR 21
63352: PUSH
63353: LD_INT 0
63355: ST_TO_ADDR
// hc_sex := sex_male ;
63356: LD_ADDR_OWVAR 27
63360: PUSH
63361: LD_INT 1
63363: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63364: LD_ADDR_OWVAR 28
63368: PUSH
63369: LD_INT 15
63371: ST_TO_ADDR
// hc_gallery :=  ;
63372: LD_ADDR_OWVAR 33
63376: PUSH
63377: LD_STRING 
63379: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63380: LD_ADDR_OWVAR 31
63384: PUSH
63385: LD_INT 0
63387: PPUSH
63388: LD_INT 3
63390: PPUSH
63391: NOP4
63395: PUSH
63396: LD_INT 0
63398: PPUSH
63399: LD_INT 3
63401: PPUSH
63402: NOP4
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: ST_TO_ADDR
// end ;
63419: LD_VAR 0 1
63423: RET
// export function PrepareApemanEngineer ( ) ; begin
63424: LD_INT 0
63426: PPUSH
// uc_nation := 0 ;
63427: LD_ADDR_OWVAR 21
63431: PUSH
63432: LD_INT 0
63434: ST_TO_ADDR
// hc_sex := sex_male ;
63435: LD_ADDR_OWVAR 27
63439: PUSH
63440: LD_INT 1
63442: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63443: LD_ADDR_OWVAR 28
63447: PUSH
63448: LD_INT 16
63450: ST_TO_ADDR
// hc_gallery :=  ;
63451: LD_ADDR_OWVAR 33
63455: PUSH
63456: LD_STRING 
63458: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63459: LD_ADDR_OWVAR 31
63463: PUSH
63464: LD_INT 0
63466: PPUSH
63467: LD_INT 3
63469: PPUSH
63470: NOP4
63474: PUSH
63475: LD_INT 0
63477: PPUSH
63478: LD_INT 3
63480: PPUSH
63481: NOP4
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: ST_TO_ADDR
// end ;
63498: LD_VAR 0 1
63502: RET
// export function PrepareApeman ( agressivity ) ; begin
63503: LD_INT 0
63505: PPUSH
// uc_side := 0 ;
63506: LD_ADDR_OWVAR 20
63510: PUSH
63511: LD_INT 0
63513: ST_TO_ADDR
// uc_nation := 0 ;
63514: LD_ADDR_OWVAR 21
63518: PUSH
63519: LD_INT 0
63521: ST_TO_ADDR
// hc_sex := sex_male ;
63522: LD_ADDR_OWVAR 27
63526: PUSH
63527: LD_INT 1
63529: ST_TO_ADDR
// hc_class := class_apeman ;
63530: LD_ADDR_OWVAR 28
63534: PUSH
63535: LD_INT 12
63537: ST_TO_ADDR
// hc_gallery :=  ;
63538: LD_ADDR_OWVAR 33
63542: PUSH
63543: LD_STRING 
63545: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63546: LD_ADDR_OWVAR 35
63550: PUSH
63551: LD_VAR 0 1
63555: NEG
63556: PPUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: NOP4
63566: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63567: LD_ADDR_OWVAR 31
63571: PUSH
63572: LD_INT 0
63574: PPUSH
63575: LD_INT 3
63577: PPUSH
63578: NOP4
63582: PUSH
63583: LD_INT 0
63585: PPUSH
63586: LD_INT 3
63588: PPUSH
63589: NOP4
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: ST_TO_ADDR
// end ;
63606: LD_VAR 0 2
63610: RET
// export function PrepareTiger ( agressivity ) ; begin
63611: LD_INT 0
63613: PPUSH
// uc_side := 0 ;
63614: LD_ADDR_OWVAR 20
63618: PUSH
63619: LD_INT 0
63621: ST_TO_ADDR
// uc_nation := 0 ;
63622: LD_ADDR_OWVAR 21
63626: PUSH
63627: LD_INT 0
63629: ST_TO_ADDR
// hc_class := class_tiger ;
63630: LD_ADDR_OWVAR 28
63634: PUSH
63635: LD_INT 14
63637: ST_TO_ADDR
// hc_gallery :=  ;
63638: LD_ADDR_OWVAR 33
63642: PUSH
63643: LD_STRING 
63645: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63646: LD_ADDR_OWVAR 35
63650: PUSH
63651: LD_VAR 0 1
63655: NEG
63656: PPUSH
63657: LD_VAR 0 1
63661: PPUSH
63662: NOP4
63666: ST_TO_ADDR
// end ;
63667: LD_VAR 0 2
63671: RET
// export function PrepareEnchidna ( ) ; begin
63672: LD_INT 0
63674: PPUSH
// uc_side := 0 ;
63675: LD_ADDR_OWVAR 20
63679: PUSH
63680: LD_INT 0
63682: ST_TO_ADDR
// uc_nation := 0 ;
63683: LD_ADDR_OWVAR 21
63687: PUSH
63688: LD_INT 0
63690: ST_TO_ADDR
// hc_class := class_baggie ;
63691: LD_ADDR_OWVAR 28
63695: PUSH
63696: LD_INT 13
63698: ST_TO_ADDR
// hc_gallery :=  ;
63699: LD_ADDR_OWVAR 33
63703: PUSH
63704: LD_STRING 
63706: ST_TO_ADDR
// end ;
63707: LD_VAR 0 1
63711: RET
// export function PrepareFrog ( ) ; begin
63712: LD_INT 0
63714: PPUSH
// uc_side := 0 ;
63715: LD_ADDR_OWVAR 20
63719: PUSH
63720: LD_INT 0
63722: ST_TO_ADDR
// uc_nation := 0 ;
63723: LD_ADDR_OWVAR 21
63727: PUSH
63728: LD_INT 0
63730: ST_TO_ADDR
// hc_class := class_frog ;
63731: LD_ADDR_OWVAR 28
63735: PUSH
63736: LD_INT 19
63738: ST_TO_ADDR
// hc_gallery :=  ;
63739: LD_ADDR_OWVAR 33
63743: PUSH
63744: LD_STRING 
63746: ST_TO_ADDR
// end ;
63747: LD_VAR 0 1
63751: RET
// export function PrepareFish ( ) ; begin
63752: LD_INT 0
63754: PPUSH
// uc_side := 0 ;
63755: LD_ADDR_OWVAR 20
63759: PUSH
63760: LD_INT 0
63762: ST_TO_ADDR
// uc_nation := 0 ;
63763: LD_ADDR_OWVAR 21
63767: PUSH
63768: LD_INT 0
63770: ST_TO_ADDR
// hc_class := class_fish ;
63771: LD_ADDR_OWVAR 28
63775: PUSH
63776: LD_INT 20
63778: ST_TO_ADDR
// hc_gallery :=  ;
63779: LD_ADDR_OWVAR 33
63783: PUSH
63784: LD_STRING 
63786: ST_TO_ADDR
// end ;
63787: LD_VAR 0 1
63791: RET
// export function PrepareBird ( ) ; begin
63792: LD_INT 0
63794: PPUSH
// uc_side := 0 ;
63795: LD_ADDR_OWVAR 20
63799: PUSH
63800: LD_INT 0
63802: ST_TO_ADDR
// uc_nation := 0 ;
63803: LD_ADDR_OWVAR 21
63807: PUSH
63808: LD_INT 0
63810: ST_TO_ADDR
// hc_class := class_phororhacos ;
63811: LD_ADDR_OWVAR 28
63815: PUSH
63816: LD_INT 18
63818: ST_TO_ADDR
// hc_gallery :=  ;
63819: LD_ADDR_OWVAR 33
63823: PUSH
63824: LD_STRING 
63826: ST_TO_ADDR
// end ;
63827: LD_VAR 0 1
63831: RET
// export function PrepareHorse ( ) ; begin
63832: LD_INT 0
63834: PPUSH
// uc_side := 0 ;
63835: LD_ADDR_OWVAR 20
63839: PUSH
63840: LD_INT 0
63842: ST_TO_ADDR
// uc_nation := 0 ;
63843: LD_ADDR_OWVAR 21
63847: PUSH
63848: LD_INT 0
63850: ST_TO_ADDR
// hc_class := class_horse ;
63851: LD_ADDR_OWVAR 28
63855: PUSH
63856: LD_INT 21
63858: ST_TO_ADDR
// hc_gallery :=  ;
63859: LD_ADDR_OWVAR 33
63863: PUSH
63864: LD_STRING 
63866: ST_TO_ADDR
// end ;
63867: LD_VAR 0 1
63871: RET
// export function PrepareMastodont ( ) ; begin
63872: LD_INT 0
63874: PPUSH
// uc_side := 0 ;
63875: LD_ADDR_OWVAR 20
63879: PUSH
63880: LD_INT 0
63882: ST_TO_ADDR
// uc_nation := 0 ;
63883: LD_ADDR_OWVAR 21
63887: PUSH
63888: LD_INT 0
63890: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63891: LD_ADDR_OWVAR 37
63895: PUSH
63896: LD_INT 31
63898: ST_TO_ADDR
// vc_control := control_rider ;
63899: LD_ADDR_OWVAR 38
63903: PUSH
63904: LD_INT 4
63906: ST_TO_ADDR
// end ;
63907: LD_VAR 0 1
63911: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63912: LD_INT 0
63914: PPUSH
63915: PPUSH
63916: PPUSH
// uc_side = 0 ;
63917: LD_ADDR_OWVAR 20
63921: PUSH
63922: LD_INT 0
63924: ST_TO_ADDR
// uc_nation = 0 ;
63925: LD_ADDR_OWVAR 21
63929: PUSH
63930: LD_INT 0
63932: ST_TO_ADDR
// InitHc_All ( ) ;
63933: NOP4
// InitVc ;
63937: NOP4
// if mastodonts then
63941: LD_VAR 0 6
63945: IFFALSE 64012
// for i = 1 to mastodonts do
63947: LD_ADDR_VAR 0 11
63951: PUSH
63952: DOUBLE
63953: LD_INT 1
63955: DEC
63956: ST_TO_ADDR
63957: LD_VAR 0 6
63961: PUSH
63962: FOR_TO
63963: IFFALSE 64010
// begin vc_chassis := 31 ;
63965: LD_ADDR_OWVAR 37
63969: PUSH
63970: LD_INT 31
63972: ST_TO_ADDR
// vc_control := control_rider ;
63973: LD_ADDR_OWVAR 38
63977: PUSH
63978: LD_INT 4
63980: ST_TO_ADDR
// animal := CreateVehicle ;
63981: LD_ADDR_VAR 0 12
63985: PUSH
63986: NOP4
63990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63991: LD_VAR 0 12
63995: PPUSH
63996: LD_VAR 0 8
64000: PPUSH
64001: LD_INT 0
64003: PPUSH
64004: CALL 66147 0 3
// end ;
64008: GO 63962
64010: POP
64011: POP
// if horses then
64012: LD_VAR 0 5
64016: IFFALSE 64083
// for i = 1 to horses do
64018: LD_ADDR_VAR 0 11
64022: PUSH
64023: DOUBLE
64024: LD_INT 1
64026: DEC
64027: ST_TO_ADDR
64028: LD_VAR 0 5
64032: PUSH
64033: FOR_TO
64034: IFFALSE 64081
// begin hc_class := 21 ;
64036: LD_ADDR_OWVAR 28
64040: PUSH
64041: LD_INT 21
64043: ST_TO_ADDR
// hc_gallery :=  ;
64044: LD_ADDR_OWVAR 33
64048: PUSH
64049: LD_STRING 
64051: ST_TO_ADDR
// animal := CreateHuman ;
64052: LD_ADDR_VAR 0 12
64056: PUSH
64057: NOP4
64061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64062: LD_VAR 0 12
64066: PPUSH
64067: LD_VAR 0 8
64071: PPUSH
64072: LD_INT 0
64074: PPUSH
64075: CALL 66147 0 3
// end ;
64079: GO 64033
64081: POP
64082: POP
// if birds then
64083: LD_VAR 0 1
64087: IFFALSE 64154
// for i = 1 to birds do
64089: LD_ADDR_VAR 0 11
64093: PUSH
64094: DOUBLE
64095: LD_INT 1
64097: DEC
64098: ST_TO_ADDR
64099: LD_VAR 0 1
64103: PUSH
64104: FOR_TO
64105: IFFALSE 64152
// begin hc_class = 18 ;
64107: LD_ADDR_OWVAR 28
64111: PUSH
64112: LD_INT 18
64114: ST_TO_ADDR
// hc_gallery =  ;
64115: LD_ADDR_OWVAR 33
64119: PUSH
64120: LD_STRING 
64122: ST_TO_ADDR
// animal := CreateHuman ;
64123: LD_ADDR_VAR 0 12
64127: PUSH
64128: NOP4
64132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64133: LD_VAR 0 12
64137: PPUSH
64138: LD_VAR 0 8
64142: PPUSH
64143: LD_INT 0
64145: PPUSH
64146: CALL 66147 0 3
// end ;
64150: GO 64104
64152: POP
64153: POP
// if tigers then
64154: LD_VAR 0 2
64158: IFFALSE 64242
// for i = 1 to tigers do
64160: LD_ADDR_VAR 0 11
64164: PUSH
64165: DOUBLE
64166: LD_INT 1
64168: DEC
64169: ST_TO_ADDR
64170: LD_VAR 0 2
64174: PUSH
64175: FOR_TO
64176: IFFALSE 64240
// begin hc_class = class_tiger ;
64178: LD_ADDR_OWVAR 28
64182: PUSH
64183: LD_INT 14
64185: ST_TO_ADDR
// hc_gallery =  ;
64186: LD_ADDR_OWVAR 33
64190: PUSH
64191: LD_STRING 
64193: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64194: LD_ADDR_OWVAR 35
64198: PUSH
64199: LD_INT 7
64201: NEG
64202: PPUSH
64203: LD_INT 7
64205: PPUSH
64206: NOP4
64210: ST_TO_ADDR
// animal := CreateHuman ;
64211: LD_ADDR_VAR 0 12
64215: PUSH
64216: NOP4
64220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64221: LD_VAR 0 12
64225: PPUSH
64226: LD_VAR 0 8
64230: PPUSH
64231: LD_INT 0
64233: PPUSH
64234: CALL 66147 0 3
// end ;
64238: GO 64175
64240: POP
64241: POP
// if apemans then
64242: LD_VAR 0 3
64246: IFFALSE 64369
// for i = 1 to apemans do
64248: LD_ADDR_VAR 0 11
64252: PUSH
64253: DOUBLE
64254: LD_INT 1
64256: DEC
64257: ST_TO_ADDR
64258: LD_VAR 0 3
64262: PUSH
64263: FOR_TO
64264: IFFALSE 64367
// begin hc_class = class_apeman ;
64266: LD_ADDR_OWVAR 28
64270: PUSH
64271: LD_INT 12
64273: ST_TO_ADDR
// hc_gallery =  ;
64274: LD_ADDR_OWVAR 33
64278: PUSH
64279: LD_STRING 
64281: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64282: LD_ADDR_OWVAR 35
64286: PUSH
64287: LD_INT 2
64289: NEG
64290: PPUSH
64291: LD_INT 2
64293: PPUSH
64294: NOP4
64298: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64299: LD_ADDR_OWVAR 31
64303: PUSH
64304: LD_INT 1
64306: PPUSH
64307: LD_INT 3
64309: PPUSH
64310: NOP4
64314: PUSH
64315: LD_INT 1
64317: PPUSH
64318: LD_INT 3
64320: PPUSH
64321: NOP4
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// animal := CreateHuman ;
64338: LD_ADDR_VAR 0 12
64342: PUSH
64343: NOP4
64347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64348: LD_VAR 0 12
64352: PPUSH
64353: LD_VAR 0 8
64357: PPUSH
64358: LD_INT 0
64360: PPUSH
64361: CALL 66147 0 3
// end ;
64365: GO 64263
64367: POP
64368: POP
// if enchidnas then
64369: LD_VAR 0 4
64373: IFFALSE 64440
// for i = 1 to enchidnas do
64375: LD_ADDR_VAR 0 11
64379: PUSH
64380: DOUBLE
64381: LD_INT 1
64383: DEC
64384: ST_TO_ADDR
64385: LD_VAR 0 4
64389: PUSH
64390: FOR_TO
64391: IFFALSE 64438
// begin hc_class = 13 ;
64393: LD_ADDR_OWVAR 28
64397: PUSH
64398: LD_INT 13
64400: ST_TO_ADDR
// hc_gallery =  ;
64401: LD_ADDR_OWVAR 33
64405: PUSH
64406: LD_STRING 
64408: ST_TO_ADDR
// animal := CreateHuman ;
64409: LD_ADDR_VAR 0 12
64413: PUSH
64414: NOP4
64418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64419: LD_VAR 0 12
64423: PPUSH
64424: LD_VAR 0 8
64428: PPUSH
64429: LD_INT 0
64431: PPUSH
64432: CALL 66147 0 3
// end ;
64436: GO 64390
64438: POP
64439: POP
// if fishes then
64440: LD_VAR 0 7
64444: IFFALSE 64511
// for i = 1 to fishes do
64446: LD_ADDR_VAR 0 11
64450: PUSH
64451: DOUBLE
64452: LD_INT 1
64454: DEC
64455: ST_TO_ADDR
64456: LD_VAR 0 7
64460: PUSH
64461: FOR_TO
64462: IFFALSE 64509
// begin hc_class = 20 ;
64464: LD_ADDR_OWVAR 28
64468: PUSH
64469: LD_INT 20
64471: ST_TO_ADDR
// hc_gallery =  ;
64472: LD_ADDR_OWVAR 33
64476: PUSH
64477: LD_STRING 
64479: ST_TO_ADDR
// animal := CreateHuman ;
64480: LD_ADDR_VAR 0 12
64484: PUSH
64485: NOP4
64489: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64490: LD_VAR 0 12
64494: PPUSH
64495: LD_VAR 0 9
64499: PPUSH
64500: LD_INT 0
64502: PPUSH
64503: CALL 66147 0 3
// end ;
64507: GO 64461
64509: POP
64510: POP
// end ;
64511: LD_VAR 0 10
64515: RET
// export function WantHeal ( sci , unit ) ; begin
64516: LD_INT 0
64518: PPUSH
// if GetTaskList ( sci ) > 0 then
64519: LD_VAR 0 1
64523: PPUSH
64524: NOP4
64528: PUSH
64529: LD_INT 0
64531: GREATER
64532: IFFALSE 64602
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64534: LD_VAR 0 1
64538: PPUSH
64539: NOP4
64543: PUSH
64544: LD_INT 1
64546: ARRAY
64547: PUSH
64548: LD_INT 1
64550: ARRAY
64551: PUSH
64552: LD_STRING l
64554: EQUAL
64555: PUSH
64556: LD_VAR 0 1
64560: PPUSH
64561: NOP4
64565: PUSH
64566: LD_INT 1
64568: ARRAY
64569: PUSH
64570: LD_INT 4
64572: ARRAY
64573: PUSH
64574: LD_VAR 0 2
64578: EQUAL
64579: AND
64580: IFFALSE 64592
// result := true else
64582: LD_ADDR_VAR 0 3
64586: PUSH
64587: LD_INT 1
64589: ST_TO_ADDR
64590: GO 64600
// result := false ;
64592: LD_ADDR_VAR 0 3
64596: PUSH
64597: LD_INT 0
64599: ST_TO_ADDR
// end else
64600: GO 64610
// result := false ;
64602: LD_ADDR_VAR 0 3
64606: PUSH
64607: LD_INT 0
64609: ST_TO_ADDR
// end ;
64610: LD_VAR 0 3
64614: RET
// export function HealTarget ( sci ) ; begin
64615: LD_INT 0
64617: PPUSH
// if not sci then
64618: LD_VAR 0 1
64622: NOT
64623: IFFALSE 64627
// exit ;
64625: GO 64692
// result := 0 ;
64627: LD_ADDR_VAR 0 2
64631: PUSH
64632: LD_INT 0
64634: ST_TO_ADDR
// if GetTaskList ( sci ) then
64635: LD_VAR 0 1
64639: PPUSH
64640: NOP4
64644: IFFALSE 64692
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64646: LD_VAR 0 1
64650: PPUSH
64651: NOP4
64655: PUSH
64656: LD_INT 1
64658: ARRAY
64659: PUSH
64660: LD_INT 1
64662: ARRAY
64663: PUSH
64664: LD_STRING l
64666: EQUAL
64667: IFFALSE 64692
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64669: LD_ADDR_VAR 0 2
64673: PUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: NOP4
64683: PUSH
64684: LD_INT 1
64686: ARRAY
64687: PUSH
64688: LD_INT 4
64690: ARRAY
64691: ST_TO_ADDR
// end ;
64692: LD_VAR 0 2
64696: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64697: LD_INT 0
64699: PPUSH
64700: PPUSH
64701: PPUSH
64702: PPUSH
// if not base_units then
64703: LD_VAR 0 1
64707: NOT
64708: IFFALSE 64712
// exit ;
64710: GO 64799
// result := false ;
64712: LD_ADDR_VAR 0 2
64716: PUSH
64717: LD_INT 0
64719: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64720: LD_ADDR_VAR 0 5
64724: PUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: LD_INT 21
64732: PUSH
64733: LD_INT 3
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PPUSH
64740: NOP4
64744: ST_TO_ADDR
// if not tmp then
64745: LD_VAR 0 5
64749: NOT
64750: IFFALSE 64754
// exit ;
64752: GO 64799
// for i in tmp do
64754: LD_ADDR_VAR 0 3
64758: PUSH
64759: LD_VAR 0 5
64763: PUSH
64764: FOR_IN
64765: IFFALSE 64797
// begin result := EnemyInRange ( i , 22 ) ;
64767: LD_ADDR_VAR 0 2
64771: PUSH
64772: LD_VAR 0 3
64776: PPUSH
64777: LD_INT 22
64779: PPUSH
64780: CALL 62485 0 2
64784: ST_TO_ADDR
// if result then
64785: LD_VAR 0 2
64789: IFFALSE 64795
// exit ;
64791: POP
64792: POP
64793: GO 64799
// end ;
64795: GO 64764
64797: POP
64798: POP
// end ;
64799: LD_VAR 0 2
64803: RET
// export function FilterByTag ( units , tag ) ; begin
64804: LD_INT 0
64806: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64807: LD_ADDR_VAR 0 3
64811: PUSH
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_INT 120
64819: PUSH
64820: LD_VAR 0 2
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PPUSH
64829: NOP4
64833: ST_TO_ADDR
// end ;
64834: LD_VAR 0 3
64838: RET
// export function IsDriver ( un ) ; begin
64839: LD_INT 0
64841: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64842: LD_ADDR_VAR 0 2
64846: PUSH
64847: LD_VAR 0 1
64851: PUSH
64852: LD_INT 55
64854: PUSH
64855: EMPTY
64856: LIST
64857: PPUSH
64858: NOP4
64862: IN
64863: ST_TO_ADDR
// end ;
64864: LD_VAR 0 2
64868: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64869: LD_INT 0
64871: PPUSH
64872: PPUSH
// list := [ ] ;
64873: LD_ADDR_VAR 0 5
64877: PUSH
64878: EMPTY
64879: ST_TO_ADDR
// case d of 0 :
64880: LD_VAR 0 3
64884: PUSH
64885: LD_INT 0
64887: DOUBLE
64888: EQUAL
64889: IFTRUE 64893
64891: GO 65026
64893: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 4
64906: MINUS
64907: PUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_INT 4
64915: MINUS
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: PUSH
64925: LD_VAR 0 1
64929: PUSH
64930: LD_INT 3
64932: MINUS
64933: PUSH
64934: LD_VAR 0 2
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: PUSH
64947: LD_VAR 0 1
64951: PUSH
64952: LD_INT 4
64954: PLUS
64955: PUSH
64956: LD_VAR 0 2
64960: PUSH
64961: LD_INT 4
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: PUSH
64969: LD_VAR 0 1
64973: PUSH
64974: LD_INT 3
64976: PLUS
64977: PUSH
64978: LD_VAR 0 2
64982: PUSH
64983: LD_INT 3
64985: PLUS
64986: PUSH
64987: LD_INT 5
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: PUSH
64995: LD_VAR 0 1
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 4
65007: PLUS
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// end ; 1 :
65024: GO 65724
65026: LD_INT 1
65028: DOUBLE
65029: EQUAL
65030: IFTRUE 65034
65032: GO 65167
65034: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65035: LD_ADDR_VAR 0 5
65039: PUSH
65040: LD_VAR 0 1
65044: PUSH
65045: LD_VAR 0 2
65049: PUSH
65050: LD_INT 4
65052: MINUS
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: PUSH
65062: LD_VAR 0 1
65066: PUSH
65067: LD_INT 3
65069: MINUS
65070: PUSH
65071: LD_VAR 0 2
65075: PUSH
65076: LD_INT 3
65078: MINUS
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: LD_VAR 0 1
65092: PUSH
65093: LD_INT 4
65095: MINUS
65096: PUSH
65097: LD_VAR 0 2
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: PUSH
65110: LD_VAR 0 1
65114: PUSH
65115: LD_VAR 0 2
65119: PUSH
65120: LD_INT 3
65122: PLUS
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: PUSH
65132: LD_VAR 0 1
65136: PUSH
65137: LD_INT 4
65139: PLUS
65140: PUSH
65141: LD_VAR 0 2
65145: PUSH
65146: LD_INT 4
65148: PLUS
65149: PUSH
65150: LD_INT 5
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: ST_TO_ADDR
// end ; 2 :
65165: GO 65724
65167: LD_INT 2
65169: DOUBLE
65170: EQUAL
65171: IFTRUE 65175
65173: GO 65304
65175: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65176: LD_ADDR_VAR 0 5
65180: PUSH
65181: LD_VAR 0 1
65185: PUSH
65186: LD_VAR 0 2
65190: PUSH
65191: LD_INT 3
65193: MINUS
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: PUSH
65203: LD_VAR 0 1
65207: PUSH
65208: LD_INT 4
65210: PLUS
65211: PUSH
65212: LD_VAR 0 2
65216: PUSH
65217: LD_INT 4
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: PUSH
65225: LD_VAR 0 1
65229: PUSH
65230: LD_VAR 0 2
65234: PUSH
65235: LD_INT 4
65237: PLUS
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: PUSH
65247: LD_VAR 0 1
65251: PUSH
65252: LD_INT 3
65254: MINUS
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: PUSH
65269: LD_VAR 0 1
65273: PUSH
65274: LD_INT 4
65276: MINUS
65277: PUSH
65278: LD_VAR 0 2
65282: PUSH
65283: LD_INT 4
65285: MINUS
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: LIST
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// end ; 3 :
65302: GO 65724
65304: LD_INT 3
65306: DOUBLE
65307: EQUAL
65308: IFTRUE 65312
65310: GO 65445
65312: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65313: LD_ADDR_VAR 0 5
65317: PUSH
65318: LD_VAR 0 1
65322: PUSH
65323: LD_INT 3
65325: PLUS
65326: PUSH
65327: LD_VAR 0 2
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: LIST
65339: PUSH
65340: LD_VAR 0 1
65344: PUSH
65345: LD_INT 4
65347: PLUS
65348: PUSH
65349: LD_VAR 0 2
65353: PUSH
65354: LD_INT 4
65356: PLUS
65357: PUSH
65358: LD_INT 5
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: LIST
65365: PUSH
65366: LD_VAR 0 1
65370: PUSH
65371: LD_INT 4
65373: MINUS
65374: PUSH
65375: LD_VAR 0 2
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: PUSH
65388: LD_VAR 0 1
65392: PUSH
65393: LD_VAR 0 2
65397: PUSH
65398: LD_INT 4
65400: MINUS
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: LIST
65409: PUSH
65410: LD_VAR 0 1
65414: PUSH
65415: LD_INT 3
65417: MINUS
65418: PUSH
65419: LD_VAR 0 2
65423: PUSH
65424: LD_INT 3
65426: MINUS
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: LIST
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: ST_TO_ADDR
// end ; 4 :
65443: GO 65724
65445: LD_INT 4
65447: DOUBLE
65448: EQUAL
65449: IFTRUE 65453
65451: GO 65586
65453: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65454: LD_ADDR_VAR 0 5
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_VAR 0 2
65468: PUSH
65469: LD_INT 4
65471: PLUS
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: PUSH
65481: LD_VAR 0 1
65485: PUSH
65486: LD_INT 3
65488: PLUS
65489: PUSH
65490: LD_VAR 0 2
65494: PUSH
65495: LD_INT 3
65497: PLUS
65498: PUSH
65499: LD_INT 5
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: PUSH
65507: LD_VAR 0 1
65511: PUSH
65512: LD_INT 4
65514: PLUS
65515: PUSH
65516: LD_VAR 0 2
65520: PUSH
65521: LD_INT 4
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: PUSH
65529: LD_VAR 0 1
65533: PUSH
65534: LD_VAR 0 2
65538: PUSH
65539: LD_INT 3
65541: MINUS
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: PUSH
65551: LD_VAR 0 1
65555: PUSH
65556: LD_INT 4
65558: MINUS
65559: PUSH
65560: LD_VAR 0 2
65564: PUSH
65565: LD_INT 4
65567: MINUS
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: LIST
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: ST_TO_ADDR
// end ; 5 :
65584: GO 65724
65586: LD_INT 5
65588: DOUBLE
65589: EQUAL
65590: IFTRUE 65594
65592: GO 65723
65594: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65595: LD_ADDR_VAR 0 5
65599: PUSH
65600: LD_VAR 0 1
65604: PUSH
65605: LD_INT 4
65607: MINUS
65608: PUSH
65609: LD_VAR 0 2
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: PUSH
65622: LD_VAR 0 1
65626: PUSH
65627: LD_VAR 0 2
65631: PUSH
65632: LD_INT 4
65634: MINUS
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: PUSH
65644: LD_VAR 0 1
65648: PUSH
65649: LD_INT 4
65651: PLUS
65652: PUSH
65653: LD_VAR 0 2
65657: PUSH
65658: LD_INT 4
65660: PLUS
65661: PUSH
65662: LD_INT 5
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: LIST
65669: PUSH
65670: LD_VAR 0 1
65674: PUSH
65675: LD_INT 3
65677: PLUS
65678: PUSH
65679: LD_VAR 0 2
65683: PUSH
65684: LD_INT 4
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: LIST
65691: PUSH
65692: LD_VAR 0 1
65696: PUSH
65697: LD_VAR 0 2
65701: PUSH
65702: LD_INT 3
65704: PLUS
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: ST_TO_ADDR
// end ; end ;
65721: GO 65724
65723: POP
// result := list ;
65724: LD_ADDR_VAR 0 4
65728: PUSH
65729: LD_VAR 0 5
65733: ST_TO_ADDR
// end ;
65734: LD_VAR 0 4
65738: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65739: LD_INT 0
65741: PPUSH
65742: PPUSH
65743: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65744: LD_VAR 0 1
65748: NOT
65749: PUSH
65750: LD_VAR 0 2
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: IN
65773: NOT
65774: OR
65775: IFFALSE 65779
// exit ;
65777: GO 65871
// tmp := [ ] ;
65779: LD_ADDR_VAR 0 5
65783: PUSH
65784: EMPTY
65785: ST_TO_ADDR
// for i in units do
65786: LD_ADDR_VAR 0 4
65790: PUSH
65791: LD_VAR 0 1
65795: PUSH
65796: FOR_IN
65797: IFFALSE 65840
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65799: LD_ADDR_VAR 0 5
65803: PUSH
65804: LD_VAR 0 5
65808: PPUSH
65809: LD_VAR 0 5
65813: PUSH
65814: LD_INT 1
65816: PLUS
65817: PPUSH
65818: LD_VAR 0 4
65822: PPUSH
65823: LD_VAR 0 2
65827: PPUSH
65828: NOP4
65832: PPUSH
65833: NOP4
65837: ST_TO_ADDR
65838: GO 65796
65840: POP
65841: POP
// if not tmp then
65842: LD_VAR 0 5
65846: NOT
65847: IFFALSE 65851
// exit ;
65849: GO 65871
// result := SortListByListDesc ( units , tmp ) ;
65851: LD_ADDR_VAR 0 3
65855: PUSH
65856: LD_VAR 0 1
65860: PPUSH
65861: LD_VAR 0 5
65865: PPUSH
65866: NOP4
65870: ST_TO_ADDR
// end ;
65871: LD_VAR 0 3
65875: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65876: LD_INT 0
65878: PPUSH
65879: PPUSH
65880: PPUSH
// result := false ;
65881: LD_ADDR_VAR 0 3
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// x := GetX ( building ) ;
65889: LD_ADDR_VAR 0 4
65893: PUSH
65894: LD_VAR 0 2
65898: PPUSH
65899: NOP4
65903: ST_TO_ADDR
// y := GetY ( building ) ;
65904: LD_ADDR_VAR 0 5
65908: PUSH
65909: LD_VAR 0 2
65913: PPUSH
65914: NOP4
65918: ST_TO_ADDR
// if not building or not x or not y then
65919: LD_VAR 0 2
65923: NOT
65924: PUSH
65925: LD_VAR 0 4
65929: NOT
65930: OR
65931: PUSH
65932: LD_VAR 0 5
65936: NOT
65937: OR
65938: IFFALSE 65942
// exit ;
65940: GO 66034
// if GetTaskList ( unit ) then
65942: LD_VAR 0 1
65946: PPUSH
65947: NOP4
65951: IFFALSE 66034
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65953: LD_STRING e
65955: PUSH
65956: LD_VAR 0 1
65960: PPUSH
65961: NOP4
65965: PUSH
65966: LD_INT 1
65968: ARRAY
65969: PUSH
65970: LD_INT 1
65972: ARRAY
65973: EQUAL
65974: PUSH
65975: LD_VAR 0 4
65979: PUSH
65980: LD_VAR 0 1
65984: PPUSH
65985: NOP4
65989: PUSH
65990: LD_INT 1
65992: ARRAY
65993: PUSH
65994: LD_INT 2
65996: ARRAY
65997: EQUAL
65998: AND
65999: PUSH
66000: LD_VAR 0 5
66004: PUSH
66005: LD_VAR 0 1
66009: PPUSH
66010: NOP4
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_INT 3
66021: ARRAY
66022: EQUAL
66023: AND
66024: IFFALSE 66034
// result := true end ;
66026: LD_ADDR_VAR 0 3
66030: PUSH
66031: LD_INT 1
66033: ST_TO_ADDR
// end ;
66034: LD_VAR 0 3
66038: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66039: LD_INT 0
66041: PPUSH
// result := false ;
66042: LD_ADDR_VAR 0 4
66046: PUSH
66047: LD_INT 0
66049: ST_TO_ADDR
// if GetTaskList ( unit ) then
66050: LD_VAR 0 1
66054: PPUSH
66055: NOP4
66059: IFFALSE 66142
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66061: LD_STRING M
66063: PUSH
66064: LD_VAR 0 1
66068: PPUSH
66069: NOP4
66073: PUSH
66074: LD_INT 1
66076: ARRAY
66077: PUSH
66078: LD_INT 1
66080: ARRAY
66081: EQUAL
66082: PUSH
66083: LD_VAR 0 2
66087: PUSH
66088: LD_VAR 0 1
66092: PPUSH
66093: NOP4
66097: PUSH
66098: LD_INT 1
66100: ARRAY
66101: PUSH
66102: LD_INT 2
66104: ARRAY
66105: EQUAL
66106: AND
66107: PUSH
66108: LD_VAR 0 3
66112: PUSH
66113: LD_VAR 0 1
66117: PPUSH
66118: NOP4
66122: PUSH
66123: LD_INT 1
66125: ARRAY
66126: PUSH
66127: LD_INT 3
66129: ARRAY
66130: EQUAL
66131: AND
66132: IFFALSE 66142
// result := true ;
66134: LD_ADDR_VAR 0 4
66138: PUSH
66139: LD_INT 1
66141: ST_TO_ADDR
// end ; end ;
66142: LD_VAR 0 4
66146: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66147: LD_INT 0
66149: PPUSH
66150: PPUSH
66151: PPUSH
66152: PPUSH
// if not unit or not area then
66153: LD_VAR 0 1
66157: NOT
66158: PUSH
66159: LD_VAR 0 2
66163: NOT
66164: OR
66165: IFFALSE 66169
// exit ;
66167: GO 66333
// tmp := AreaToList ( area , i ) ;
66169: LD_ADDR_VAR 0 6
66173: PUSH
66174: LD_VAR 0 2
66178: PPUSH
66179: LD_VAR 0 5
66183: PPUSH
66184: NOP4
66188: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66189: LD_ADDR_VAR 0 5
66193: PUSH
66194: DOUBLE
66195: LD_INT 1
66197: DEC
66198: ST_TO_ADDR
66199: LD_VAR 0 6
66203: PUSH
66204: LD_INT 1
66206: ARRAY
66207: PUSH
66208: FOR_TO
66209: IFFALSE 66331
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66211: LD_ADDR_VAR 0 7
66215: PUSH
66216: LD_VAR 0 6
66220: PUSH
66221: LD_INT 1
66223: ARRAY
66224: PUSH
66225: LD_VAR 0 5
66229: ARRAY
66230: PUSH
66231: LD_VAR 0 6
66235: PUSH
66236: LD_INT 2
66238: ARRAY
66239: PUSH
66240: LD_VAR 0 5
66244: ARRAY
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66250: LD_VAR 0 7
66254: PUSH
66255: LD_INT 1
66257: ARRAY
66258: PPUSH
66259: LD_VAR 0 7
66263: PUSH
66264: LD_INT 2
66266: ARRAY
66267: PPUSH
66268: NOP4
66272: PUSH
66273: LD_INT 0
66275: EQUAL
66276: IFFALSE 66329
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66278: LD_VAR 0 1
66282: PPUSH
66283: LD_VAR 0 7
66287: PUSH
66288: LD_INT 1
66290: ARRAY
66291: PPUSH
66292: LD_VAR 0 7
66296: PUSH
66297: LD_INT 2
66299: ARRAY
66300: PPUSH
66301: LD_VAR 0 3
66305: PPUSH
66306: NOP4
// result := IsPlaced ( unit ) ;
66310: LD_ADDR_VAR 0 4
66314: PUSH
66315: LD_VAR 0 1
66319: PPUSH
66320: NOP4
66324: ST_TO_ADDR
// exit ;
66325: POP
66326: POP
66327: GO 66333
// end ; end ;
66329: GO 66208
66331: POP
66332: POP
// end ;
66333: LD_VAR 0 4
66337: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66338: LD_INT 0
66340: PPUSH
66341: PPUSH
66342: PPUSH
// if not side or side > 8 then
66343: LD_VAR 0 1
66347: NOT
66348: PUSH
66349: LD_VAR 0 1
66353: PUSH
66354: LD_INT 8
66356: GREATER
66357: OR
66358: IFFALSE 66362
// exit ;
66360: GO 66549
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66362: LD_ADDR_VAR 0 4
66366: PUSH
66367: LD_INT 22
66369: PUSH
66370: LD_VAR 0 1
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 21
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PPUSH
66393: NOP4
66397: ST_TO_ADDR
// if not tmp then
66398: LD_VAR 0 4
66402: NOT
66403: IFFALSE 66407
// exit ;
66405: GO 66549
// enable_addtolog := true ;
66407: LD_ADDR_OWVAR 81
66411: PUSH
66412: LD_INT 1
66414: ST_TO_ADDR
// AddToLog ( [ ) ;
66415: LD_STRING [
66417: PPUSH
66418: NOP4
// for i in tmp do
66422: LD_ADDR_VAR 0 3
66426: PUSH
66427: LD_VAR 0 4
66431: PUSH
66432: FOR_IN
66433: IFFALSE 66540
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66435: LD_STRING [
66437: PUSH
66438: LD_VAR 0 3
66442: PPUSH
66443: NOP4
66447: STR
66448: PUSH
66449: LD_STRING , 
66451: STR
66452: PUSH
66453: LD_VAR 0 3
66457: PPUSH
66458: NOP4
66462: STR
66463: PUSH
66464: LD_STRING , 
66466: STR
66467: PUSH
66468: LD_VAR 0 3
66472: PPUSH
66473: NOP4
66477: STR
66478: PUSH
66479: LD_STRING , 
66481: STR
66482: PUSH
66483: LD_VAR 0 3
66487: PPUSH
66488: NOP4
66492: STR
66493: PUSH
66494: LD_STRING , 
66496: STR
66497: PUSH
66498: LD_VAR 0 3
66502: PPUSH
66503: LD_INT 1
66505: PPUSH
66506: NOP4
66510: STR
66511: PUSH
66512: LD_STRING , 
66514: STR
66515: PUSH
66516: LD_VAR 0 3
66520: PPUSH
66521: LD_INT 2
66523: PPUSH
66524: NOP4
66528: STR
66529: PUSH
66530: LD_STRING ],
66532: STR
66533: PPUSH
66534: NOP4
// end ;
66538: GO 66432
66540: POP
66541: POP
// AddToLog ( ]; ) ;
66542: LD_STRING ];
66544: PPUSH
66545: NOP4
// end ;
66549: LD_VAR 0 2
66553: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66554: LD_INT 0
66556: PPUSH
66557: PPUSH
66558: PPUSH
66559: PPUSH
66560: PPUSH
// if not area or not rate or not max then
66561: LD_VAR 0 1
66565: NOT
66566: PUSH
66567: LD_VAR 0 2
66571: NOT
66572: OR
66573: PUSH
66574: LD_VAR 0 4
66578: NOT
66579: OR
66580: IFFALSE 66584
// exit ;
66582: GO 66773
// while 1 do
66584: LD_INT 1
66586: IFFALSE 66773
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66588: LD_ADDR_VAR 0 9
66592: PUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: LD_INT 1
66600: PPUSH
66601: NOP4
66605: PUSH
66606: LD_INT 10
66608: MUL
66609: ST_TO_ADDR
// r := rate / 10 ;
66610: LD_ADDR_VAR 0 7
66614: PUSH
66615: LD_VAR 0 2
66619: PUSH
66620: LD_INT 10
66622: DIVREAL
66623: ST_TO_ADDR
// time := 1 1$00 ;
66624: LD_ADDR_VAR 0 8
66628: PUSH
66629: LD_INT 2100
66631: ST_TO_ADDR
// if amount < min then
66632: LD_VAR 0 9
66636: PUSH
66637: LD_VAR 0 3
66641: LESS
66642: IFFALSE 66660
// r := r * 2 else
66644: LD_ADDR_VAR 0 7
66648: PUSH
66649: LD_VAR 0 7
66653: PUSH
66654: LD_INT 2
66656: MUL
66657: ST_TO_ADDR
66658: GO 66686
// if amount > max then
66660: LD_VAR 0 9
66664: PUSH
66665: LD_VAR 0 4
66669: GREATER
66670: IFFALSE 66686
// r := r / 2 ;
66672: LD_ADDR_VAR 0 7
66676: PUSH
66677: LD_VAR 0 7
66681: PUSH
66682: LD_INT 2
66684: DIVREAL
66685: ST_TO_ADDR
// time := time / r ;
66686: LD_ADDR_VAR 0 8
66690: PUSH
66691: LD_VAR 0 8
66695: PUSH
66696: LD_VAR 0 7
66700: DIVREAL
66701: ST_TO_ADDR
// if time < 0 then
66702: LD_VAR 0 8
66706: PUSH
66707: LD_INT 0
66709: LESS
66710: IFFALSE 66727
// time := time * - 1 ;
66712: LD_ADDR_VAR 0 8
66716: PUSH
66717: LD_VAR 0 8
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: MUL
66726: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66727: LD_VAR 0 8
66731: PUSH
66732: LD_INT 35
66734: PPUSH
66735: LD_INT 875
66737: PPUSH
66738: NOP4
66742: PLUS
66743: PPUSH
66744: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66748: LD_INT 1
66750: PPUSH
66751: LD_INT 5
66753: PPUSH
66754: NOP4
66758: PPUSH
66759: LD_VAR 0 1
66763: PPUSH
66764: LD_INT 1
66766: PPUSH
66767: NOP4
// end ;
66771: GO 66584
// end ;
66773: LD_VAR 0 5
66777: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
66784: PPUSH
66785: PPUSH
66786: PPUSH
66787: PPUSH
// if not turrets or not factories then
66788: LD_VAR 0 1
66792: NOT
66793: PUSH
66794: LD_VAR 0 2
66798: NOT
66799: OR
66800: IFFALSE 66804
// exit ;
66802: GO 67111
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66804: LD_ADDR_VAR 0 10
66808: PUSH
66809: LD_INT 5
66811: PUSH
66812: LD_INT 6
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: LD_INT 4
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: LD_INT 5
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 24
66846: PUSH
66847: LD_INT 25
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 23
66856: PUSH
66857: LD_INT 27
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 42
66870: PUSH
66871: LD_INT 43
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 44
66880: PUSH
66881: LD_INT 46
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 45
66890: PUSH
66891: LD_INT 47
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: ST_TO_ADDR
// result := [ ] ;
66908: LD_ADDR_VAR 0 3
66912: PUSH
66913: EMPTY
66914: ST_TO_ADDR
// for i in turrets do
66915: LD_ADDR_VAR 0 4
66919: PUSH
66920: LD_VAR 0 1
66924: PUSH
66925: FOR_IN
66926: IFFALSE 67109
// begin nat := GetNation ( i ) ;
66928: LD_ADDR_VAR 0 7
66932: PUSH
66933: LD_VAR 0 4
66937: PPUSH
66938: NOP4
66942: ST_TO_ADDR
// weapon := 0 ;
66943: LD_ADDR_VAR 0 8
66947: PUSH
66948: LD_INT 0
66950: ST_TO_ADDR
// if not nat then
66951: LD_VAR 0 7
66955: NOT
66956: IFFALSE 66960
// continue ;
66958: GO 66925
// for j in list [ nat ] do
66960: LD_ADDR_VAR 0 5
66964: PUSH
66965: LD_VAR 0 10
66969: PUSH
66970: LD_VAR 0 7
66974: ARRAY
66975: PUSH
66976: FOR_IN
66977: IFFALSE 67018
// if GetBWeapon ( i ) = j [ 1 ] then
66979: LD_VAR 0 4
66983: PPUSH
66984: NOP4
66988: PUSH
66989: LD_VAR 0 5
66993: PUSH
66994: LD_INT 1
66996: ARRAY
66997: EQUAL
66998: IFFALSE 67016
// begin weapon := j [ 2 ] ;
67000: LD_ADDR_VAR 0 8
67004: PUSH
67005: LD_VAR 0 5
67009: PUSH
67010: LD_INT 2
67012: ARRAY
67013: ST_TO_ADDR
// break ;
67014: GO 67018
// end ;
67016: GO 66976
67018: POP
67019: POP
// if not weapon then
67020: LD_VAR 0 8
67024: NOT
67025: IFFALSE 67029
// continue ;
67027: GO 66925
// for k in factories do
67029: LD_ADDR_VAR 0 6
67033: PUSH
67034: LD_VAR 0 2
67038: PUSH
67039: FOR_IN
67040: IFFALSE 67105
// begin weapons := AvailableWeaponList ( k ) ;
67042: LD_ADDR_VAR 0 9
67046: PUSH
67047: LD_VAR 0 6
67051: PPUSH
67052: NOP4
67056: ST_TO_ADDR
// if not weapons then
67057: LD_VAR 0 9
67061: NOT
67062: IFFALSE 67066
// continue ;
67064: GO 67039
// if weapon in weapons then
67066: LD_VAR 0 8
67070: PUSH
67071: LD_VAR 0 9
67075: IN
67076: IFFALSE 67103
// begin result := [ i , weapon ] ;
67078: LD_ADDR_VAR 0 3
67082: PUSH
67083: LD_VAR 0 4
67087: PUSH
67088: LD_VAR 0 8
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: ST_TO_ADDR
// exit ;
67097: POP
67098: POP
67099: POP
67100: POP
67101: GO 67111
// end ; end ;
67103: GO 67039
67105: POP
67106: POP
// end ;
67107: GO 66925
67109: POP
67110: POP
// end ;
67111: LD_VAR 0 3
67115: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67116: LD_INT 0
67118: PPUSH
// if not side or side > 8 then
67119: LD_VAR 0 3
67123: NOT
67124: PUSH
67125: LD_VAR 0 3
67129: PUSH
67130: LD_INT 8
67132: GREATER
67133: OR
67134: IFFALSE 67138
// exit ;
67136: GO 67197
// if not range then
67138: LD_VAR 0 4
67142: NOT
67143: IFFALSE 67154
// range := - 12 ;
67145: LD_ADDR_VAR 0 4
67149: PUSH
67150: LD_INT 12
67152: NEG
67153: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67154: LD_VAR 0 1
67158: PPUSH
67159: LD_VAR 0 2
67163: PPUSH
67164: LD_VAR 0 3
67168: PPUSH
67169: LD_VAR 0 4
67173: PPUSH
67174: NOP4
// RemoveSeeing ( x , y , side ) ;
67178: LD_VAR 0 1
67182: PPUSH
67183: LD_VAR 0 2
67187: PPUSH
67188: LD_VAR 0 3
67192: PPUSH
67193: NOP4
// end ;
67197: LD_VAR 0 5
67201: RET
// export function Video ( mode ) ; begin
67202: LD_INT 0
67204: PPUSH
// ingame_video = mode ;
67205: LD_ADDR_OWVAR 52
67209: PUSH
67210: LD_VAR 0 1
67214: ST_TO_ADDR
// interface_hidden = mode ;
67215: LD_ADDR_OWVAR 54
67219: PUSH
67220: LD_VAR 0 1
67224: ST_TO_ADDR
// end ;
67225: LD_VAR 0 2
67229: RET
// export function Join ( array , element ) ; begin
67230: LD_INT 0
67232: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67233: LD_ADDR_VAR 0 3
67237: PUSH
67238: LD_VAR 0 1
67242: PPUSH
67243: LD_VAR 0 1
67247: PUSH
67248: LD_INT 1
67250: PLUS
67251: PPUSH
67252: LD_VAR 0 2
67256: PPUSH
67257: NOP4
67261: ST_TO_ADDR
// end ;
67262: LD_VAR 0 3
67266: RET
// export function JoinUnion ( array , element ) ; begin
67267: LD_INT 0
67269: PPUSH
// result := array union element ;
67270: LD_ADDR_VAR 0 3
67274: PUSH
67275: LD_VAR 0 1
67279: PUSH
67280: LD_VAR 0 2
67284: UNION
67285: ST_TO_ADDR
// end ;
67286: LD_VAR 0 3
67290: RET
// export function GetBehemoths ( side ) ; begin
67291: LD_INT 0
67293: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67294: LD_ADDR_VAR 0 2
67298: PUSH
67299: LD_INT 22
67301: PUSH
67302: LD_VAR 0 1
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 31
67313: PUSH
67314: LD_INT 25
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PPUSH
67325: NOP4
67329: ST_TO_ADDR
// end ;
67330: LD_VAR 0 2
67334: RET
// export function Shuffle ( array ) ; var i , index ; begin
67335: LD_INT 0
67337: PPUSH
67338: PPUSH
67339: PPUSH
// result := [ ] ;
67340: LD_ADDR_VAR 0 2
67344: PUSH
67345: EMPTY
67346: ST_TO_ADDR
// if not array then
67347: LD_VAR 0 1
67351: NOT
67352: IFFALSE 67356
// exit ;
67354: GO 67455
// Randomize ;
67356: NOP4
// for i = array downto 1 do
67360: LD_ADDR_VAR 0 3
67364: PUSH
67365: DOUBLE
67366: LD_VAR 0 1
67370: INC
67371: ST_TO_ADDR
67372: LD_INT 1
67374: PUSH
67375: FOR_DOWNTO
67376: IFFALSE 67453
// begin index := rand ( 1 , array ) ;
67378: LD_ADDR_VAR 0 4
67382: PUSH
67383: LD_INT 1
67385: PPUSH
67386: LD_VAR 0 1
67390: PPUSH
67391: NOP4
67395: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67396: LD_ADDR_VAR 0 2
67400: PUSH
67401: LD_VAR 0 2
67405: PPUSH
67406: LD_VAR 0 2
67410: PUSH
67411: LD_INT 1
67413: PLUS
67414: PPUSH
67415: LD_VAR 0 1
67419: PUSH
67420: LD_VAR 0 4
67424: ARRAY
67425: PPUSH
67426: NOP4
67430: ST_TO_ADDR
// array := Delete ( array , index ) ;
67431: LD_ADDR_VAR 0 1
67435: PUSH
67436: LD_VAR 0 1
67440: PPUSH
67441: LD_VAR 0 4
67445: PPUSH
67446: NOP4
67450: ST_TO_ADDR
// end ;
67451: GO 67375
67453: POP
67454: POP
// end ;
67455: LD_VAR 0 2
67459: RET
// export function GetBaseMaterials ( base ) ; begin
67460: LD_INT 0
67462: PPUSH
// result := [ 0 , 0 , 0 ] ;
67463: LD_ADDR_VAR 0 2
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: LIST
67481: ST_TO_ADDR
// if not base then
67482: LD_VAR 0 1
67486: NOT
67487: IFFALSE 67491
// exit ;
67489: GO 67540
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67491: LD_ADDR_VAR 0 2
67495: PUSH
67496: LD_VAR 0 1
67500: PPUSH
67501: LD_INT 1
67503: PPUSH
67504: NOP4
67508: PUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: LD_INT 2
67516: PPUSH
67517: NOP4
67521: PUSH
67522: LD_VAR 0 1
67526: PPUSH
67527: LD_INT 3
67529: PPUSH
67530: NOP4
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: ST_TO_ADDR
// end ;
67540: LD_VAR 0 2
67544: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67545: LD_INT 0
67547: PPUSH
67548: PPUSH
// result := array ;
67549: LD_ADDR_VAR 0 3
67553: PUSH
67554: LD_VAR 0 1
67558: ST_TO_ADDR
// if size >= result then
67559: LD_VAR 0 2
67563: PUSH
67564: LD_VAR 0 3
67568: GREATEREQUAL
67569: IFFALSE 67573
// exit ;
67571: GO 67623
// if size then
67573: LD_VAR 0 2
67577: IFFALSE 67623
// for i := array downto size do
67579: LD_ADDR_VAR 0 4
67583: PUSH
67584: DOUBLE
67585: LD_VAR 0 1
67589: INC
67590: ST_TO_ADDR
67591: LD_VAR 0 2
67595: PUSH
67596: FOR_DOWNTO
67597: IFFALSE 67621
// result := Delete ( result , result ) ;
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: LD_VAR 0 3
67608: PPUSH
67609: LD_VAR 0 3
67613: PPUSH
67614: NOP4
67618: ST_TO_ADDR
67619: GO 67596
67621: POP
67622: POP
// end ;
67623: LD_VAR 0 3
67627: RET
// export function ComExit ( unit ) ; var tmp ; begin
67628: LD_INT 0
67630: PPUSH
67631: PPUSH
// if not IsInUnit ( unit ) then
67632: LD_VAR 0 1
67636: PPUSH
67637: NOP4
67641: NOT
67642: IFFALSE 67646
// exit ;
67644: GO 67706
// tmp := IsInUnit ( unit ) ;
67646: LD_ADDR_VAR 0 3
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: NOP4
67660: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67661: LD_VAR 0 3
67665: PPUSH
67666: NOP4
67670: PUSH
67671: LD_INT 2
67673: EQUAL
67674: IFFALSE 67687
// ComExitVehicle ( unit ) else
67676: LD_VAR 0 1
67680: PPUSH
67681: NOP4
67685: GO 67696
// ComExitBuilding ( unit ) ;
67687: LD_VAR 0 1
67691: PPUSH
67692: NOP4
// result := tmp ;
67696: LD_ADDR_VAR 0 2
67700: PUSH
67701: LD_VAR 0 3
67705: ST_TO_ADDR
// end ;
67706: LD_VAR 0 2
67710: RET
// export function ComExitAll ( units ) ; var i ; begin
67711: LD_INT 0
67713: PPUSH
67714: PPUSH
// if not units then
67715: LD_VAR 0 1
67719: NOT
67720: IFFALSE 67724
// exit ;
67722: GO 67750
// for i in units do
67724: LD_ADDR_VAR 0 3
67728: PUSH
67729: LD_VAR 0 1
67733: PUSH
67734: FOR_IN
67735: IFFALSE 67748
// ComExit ( i ) ;
67737: LD_VAR 0 3
67741: PPUSH
67742: CALL 67628 0 1
67746: GO 67734
67748: POP
67749: POP
// end ;
67750: LD_VAR 0 2
67754: RET
// export function ResetHc ; begin
67755: LD_INT 0
67757: PPUSH
// InitHc ;
67758: NOP4
// hc_importance := 0 ;
67762: LD_ADDR_OWVAR 32
67766: PUSH
67767: LD_INT 0
67769: ST_TO_ADDR
// end ;
67770: LD_VAR 0 1
67774: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67775: LD_INT 0
67777: PPUSH
67778: PPUSH
67779: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67780: LD_ADDR_VAR 0 6
67784: PUSH
67785: LD_VAR 0 1
67789: PUSH
67790: LD_VAR 0 3
67794: PLUS
67795: PUSH
67796: LD_INT 2
67798: DIV
67799: ST_TO_ADDR
// if _x < 0 then
67800: LD_VAR 0 6
67804: PUSH
67805: LD_INT 0
67807: LESS
67808: IFFALSE 67825
// _x := _x * - 1 ;
67810: LD_ADDR_VAR 0 6
67814: PUSH
67815: LD_VAR 0 6
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: MUL
67824: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67825: LD_ADDR_VAR 0 7
67829: PUSH
67830: LD_VAR 0 2
67834: PUSH
67835: LD_VAR 0 4
67839: PLUS
67840: PUSH
67841: LD_INT 2
67843: DIV
67844: ST_TO_ADDR
// if _y < 0 then
67845: LD_VAR 0 7
67849: PUSH
67850: LD_INT 0
67852: LESS
67853: IFFALSE 67870
// _y := _y * - 1 ;
67855: LD_ADDR_VAR 0 7
67859: PUSH
67860: LD_VAR 0 7
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: MUL
67869: ST_TO_ADDR
// result := [ _x , _y ] ;
67870: LD_ADDR_VAR 0 5
67874: PUSH
67875: LD_VAR 0 6
67879: PUSH
67880: LD_VAR 0 7
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// end ;
67889: LD_VAR 0 5
67893: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67894: LD_INT 0
67896: PPUSH
67897: PPUSH
67898: PPUSH
67899: PPUSH
// task := GetTaskList ( unit ) ;
67900: LD_ADDR_VAR 0 7
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: NOP4
67914: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67915: LD_VAR 0 7
67919: NOT
67920: PUSH
67921: LD_VAR 0 1
67925: PPUSH
67926: LD_VAR 0 2
67930: PPUSH
67931: NOP4
67935: NOT
67936: AND
67937: IFFALSE 67941
// exit ;
67939: GO 68059
// if IsInArea ( unit , area ) then
67941: LD_VAR 0 1
67945: PPUSH
67946: LD_VAR 0 2
67950: PPUSH
67951: NOP4
67955: IFFALSE 67973
// begin ComMoveToArea ( unit , goAway ) ;
67957: LD_VAR 0 1
67961: PPUSH
67962: LD_VAR 0 3
67966: PPUSH
67967: NOP4
// exit ;
67971: GO 68059
// end ; if task [ 1 ] [ 1 ] <> M then
67973: LD_VAR 0 7
67977: PUSH
67978: LD_INT 1
67980: ARRAY
67981: PUSH
67982: LD_INT 1
67984: ARRAY
67985: PUSH
67986: LD_STRING M
67988: NONEQUAL
67989: IFFALSE 67993
// exit ;
67991: GO 68059
// x := task [ 1 ] [ 2 ] ;
67993: LD_ADDR_VAR 0 5
67997: PUSH
67998: LD_VAR 0 7
68002: PUSH
68003: LD_INT 1
68005: ARRAY
68006: PUSH
68007: LD_INT 2
68009: ARRAY
68010: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68011: LD_ADDR_VAR 0 6
68015: PUSH
68016: LD_VAR 0 7
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PUSH
68025: LD_INT 3
68027: ARRAY
68028: ST_TO_ADDR
// if InArea ( x , y , area ) then
68029: LD_VAR 0 5
68033: PPUSH
68034: LD_VAR 0 6
68038: PPUSH
68039: LD_VAR 0 2
68043: PPUSH
68044: NOP4
68048: IFFALSE 68059
// ComStop ( unit ) ;
68050: LD_VAR 0 1
68054: PPUSH
68055: NOP4
// end ;
68059: LD_VAR 0 4
68063: RET
// export function Abs ( value ) ; begin
68064: LD_INT 0
68066: PPUSH
// result := value ;
68067: LD_ADDR_VAR 0 2
68071: PUSH
68072: LD_VAR 0 1
68076: ST_TO_ADDR
// if value < 0 then
68077: LD_VAR 0 1
68081: PUSH
68082: LD_INT 0
68084: LESS
68085: IFFALSE 68102
// result := value * - 1 ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_VAR 0 1
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: MUL
68101: ST_TO_ADDR
// end ;
68102: LD_VAR 0 2
68106: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68107: LD_INT 0
68109: PPUSH
68110: PPUSH
68111: PPUSH
68112: PPUSH
68113: PPUSH
68114: PPUSH
68115: PPUSH
68116: PPUSH
// if not unit or not building then
68117: LD_VAR 0 1
68121: NOT
68122: PUSH
68123: LD_VAR 0 2
68127: NOT
68128: OR
68129: IFFALSE 68133
// exit ;
68131: GO 68359
// x := GetX ( building ) ;
68133: LD_ADDR_VAR 0 4
68137: PUSH
68138: LD_VAR 0 2
68142: PPUSH
68143: NOP4
68147: ST_TO_ADDR
// y := GetY ( building ) ;
68148: LD_ADDR_VAR 0 6
68152: PUSH
68153: LD_VAR 0 2
68157: PPUSH
68158: NOP4
68162: ST_TO_ADDR
// d := GetDir ( building ) ;
68163: LD_ADDR_VAR 0 8
68167: PUSH
68168: LD_VAR 0 2
68172: PPUSH
68173: NOP4
68177: ST_TO_ADDR
// r := 4 ;
68178: LD_ADDR_VAR 0 9
68182: PUSH
68183: LD_INT 4
68185: ST_TO_ADDR
// for i := 1 to 5 do
68186: LD_ADDR_VAR 0 10
68190: PUSH
68191: DOUBLE
68192: LD_INT 1
68194: DEC
68195: ST_TO_ADDR
68196: LD_INT 5
68198: PUSH
68199: FOR_TO
68200: IFFALSE 68357
// begin _x := ShiftX ( x , d , r + i ) ;
68202: LD_ADDR_VAR 0 5
68206: PUSH
68207: LD_VAR 0 4
68211: PPUSH
68212: LD_VAR 0 8
68216: PPUSH
68217: LD_VAR 0 9
68221: PUSH
68222: LD_VAR 0 10
68226: PLUS
68227: PPUSH
68228: NOP4
68232: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68233: LD_ADDR_VAR 0 7
68237: PUSH
68238: LD_VAR 0 6
68242: PPUSH
68243: LD_VAR 0 8
68247: PPUSH
68248: LD_VAR 0 9
68252: PUSH
68253: LD_VAR 0 10
68257: PLUS
68258: PPUSH
68259: NOP4
68263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68264: LD_VAR 0 5
68268: PPUSH
68269: LD_VAR 0 7
68273: PPUSH
68274: NOP4
68278: PUSH
68279: LD_VAR 0 5
68283: PPUSH
68284: LD_VAR 0 7
68288: PPUSH
68289: NOP4
68293: PPUSH
68294: NOP4
68298: PUSH
68299: LD_INT 3
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: IN
68309: NOT
68310: AND
68311: IFFALSE 68355
// begin ComMoveXY ( unit , _x , _y ) ;
68313: LD_VAR 0 1
68317: PPUSH
68318: LD_VAR 0 5
68322: PPUSH
68323: LD_VAR 0 7
68327: PPUSH
68328: NOP4
// result := [ _x , _y ] ;
68332: LD_ADDR_VAR 0 3
68336: PUSH
68337: LD_VAR 0 5
68341: PUSH
68342: LD_VAR 0 7
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: ST_TO_ADDR
// exit ;
68351: POP
68352: POP
68353: GO 68359
// end ; end ;
68355: GO 68199
68357: POP
68358: POP
// end ;
68359: LD_VAR 0 3
68363: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68364: LD_INT 0
68366: PPUSH
68367: PPUSH
68368: PPUSH
// result := 0 ;
68369: LD_ADDR_VAR 0 3
68373: PUSH
68374: LD_INT 0
68376: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68377: LD_VAR 0 1
68381: PUSH
68382: LD_INT 0
68384: LESS
68385: PUSH
68386: LD_VAR 0 1
68390: PUSH
68391: LD_INT 8
68393: GREATER
68394: OR
68395: PUSH
68396: LD_VAR 0 2
68400: PUSH
68401: LD_INT 0
68403: LESS
68404: OR
68405: PUSH
68406: LD_VAR 0 2
68410: PUSH
68411: LD_INT 8
68413: GREATER
68414: OR
68415: IFFALSE 68419
// exit ;
68417: GO 68494
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68419: LD_ADDR_VAR 0 4
68423: PUSH
68424: LD_INT 22
68426: PUSH
68427: LD_VAR 0 2
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PPUSH
68436: NOP4
68440: PUSH
68441: FOR_IN
68442: IFFALSE 68492
// begin un := UnitShoot ( i ) ;
68444: LD_ADDR_VAR 0 5
68448: PUSH
68449: LD_VAR 0 4
68453: PPUSH
68454: NOP4
68458: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68459: LD_VAR 0 5
68463: PPUSH
68464: NOP4
68468: PUSH
68469: LD_VAR 0 1
68473: EQUAL
68474: IFFALSE 68490
// begin result := un ;
68476: LD_ADDR_VAR 0 3
68480: PUSH
68481: LD_VAR 0 5
68485: ST_TO_ADDR
// exit ;
68486: POP
68487: POP
68488: GO 68494
// end ; end ;
68490: GO 68441
68492: POP
68493: POP
// end ;
68494: LD_VAR 0 3
68498: RET
// export function GetCargoBay ( units ) ; begin
68499: LD_INT 0
68501: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68502: LD_ADDR_VAR 0 2
68506: PUSH
68507: LD_VAR 0 1
68511: PPUSH
68512: LD_INT 2
68514: PUSH
68515: LD_INT 34
68517: PUSH
68518: LD_INT 12
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 34
68527: PUSH
68528: LD_INT 51
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 34
68537: PUSH
68538: LD_INT 32
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 34
68547: PUSH
68548: LD_INT 89
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: PPUSH
68562: NOP4
68566: ST_TO_ADDR
// end ;
68567: LD_VAR 0 2
68571: RET
// export function Negate ( value ) ; begin
68572: LD_INT 0
68574: PPUSH
// result := not value ;
68575: LD_ADDR_VAR 0 2
68579: PUSH
68580: LD_VAR 0 1
68584: NOT
68585: ST_TO_ADDR
// end ;
68586: LD_VAR 0 2
68590: RET
// export function Inc ( value ) ; begin
68591: LD_INT 0
68593: PPUSH
// result := value + 1 ;
68594: LD_ADDR_VAR 0 2
68598: PUSH
68599: LD_VAR 0 1
68603: PUSH
68604: LD_INT 1
68606: PLUS
68607: ST_TO_ADDR
// end ;
68608: LD_VAR 0 2
68612: RET
// export function Dec ( value ) ; begin
68613: LD_INT 0
68615: PPUSH
// result := value - 1 ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_VAR 0 1
68625: PUSH
68626: LD_INT 1
68628: MINUS
68629: ST_TO_ADDR
// end ;
68630: LD_VAR 0 2
68634: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68635: LD_INT 0
68637: PPUSH
68638: PPUSH
68639: PPUSH
68640: PPUSH
68641: PPUSH
68642: PPUSH
68643: PPUSH
68644: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68645: LD_VAR 0 1
68649: PPUSH
68650: LD_VAR 0 2
68654: PPUSH
68655: NOP4
68659: NOT
68660: PUSH
68661: LD_VAR 0 3
68665: PPUSH
68666: LD_VAR 0 4
68670: PPUSH
68671: NOP4
68675: NOT
68676: OR
68677: IFFALSE 68690
// begin result := - 1 ;
68679: LD_ADDR_VAR 0 5
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: ST_TO_ADDR
// exit ;
68688: GO 68925
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68690: LD_ADDR_VAR 0 12
68694: PUSH
68695: LD_VAR 0 1
68699: PPUSH
68700: LD_VAR 0 2
68704: PPUSH
68705: LD_VAR 0 3
68709: PPUSH
68710: LD_VAR 0 4
68714: PPUSH
68715: CALL 67775 0 4
68719: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68720: LD_ADDR_VAR 0 11
68724: PUSH
68725: LD_VAR 0 1
68729: PPUSH
68730: LD_VAR 0 2
68734: PPUSH
68735: LD_VAR 0 12
68739: PUSH
68740: LD_INT 1
68742: ARRAY
68743: PPUSH
68744: LD_VAR 0 12
68748: PUSH
68749: LD_INT 2
68751: ARRAY
68752: PPUSH
68753: NOP4
68757: ST_TO_ADDR
// distance := 9999 ;
68758: LD_ADDR_VAR 0 10
68762: PUSH
68763: LD_INT 9999
68765: ST_TO_ADDR
// for i := 0 to 5 do
68766: LD_ADDR_VAR 0 6
68770: PUSH
68771: DOUBLE
68772: LD_INT 0
68774: DEC
68775: ST_TO_ADDR
68776: LD_INT 5
68778: PUSH
68779: FOR_TO
68780: IFFALSE 68923
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68782: LD_ADDR_VAR 0 7
68786: PUSH
68787: LD_VAR 0 1
68791: PPUSH
68792: LD_VAR 0 6
68796: PPUSH
68797: LD_VAR 0 11
68801: PPUSH
68802: NOP4
68806: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68807: LD_ADDR_VAR 0 8
68811: PUSH
68812: LD_VAR 0 2
68816: PPUSH
68817: LD_VAR 0 6
68821: PPUSH
68822: LD_VAR 0 11
68826: PPUSH
68827: NOP4
68831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68832: LD_VAR 0 7
68836: PPUSH
68837: LD_VAR 0 8
68841: PPUSH
68842: NOP4
68846: NOT
68847: IFFALSE 68851
// continue ;
68849: GO 68779
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68851: LD_ADDR_VAR 0 9
68855: PUSH
68856: LD_VAR 0 12
68860: PUSH
68861: LD_INT 1
68863: ARRAY
68864: PPUSH
68865: LD_VAR 0 12
68869: PUSH
68870: LD_INT 2
68872: ARRAY
68873: PPUSH
68874: LD_VAR 0 7
68878: PPUSH
68879: LD_VAR 0 8
68883: PPUSH
68884: NOP4
68888: ST_TO_ADDR
// if tmp < distance then
68889: LD_VAR 0 9
68893: PUSH
68894: LD_VAR 0 10
68898: LESS
68899: IFFALSE 68921
// begin result := i ;
68901: LD_ADDR_VAR 0 5
68905: PUSH
68906: LD_VAR 0 6
68910: ST_TO_ADDR
// distance := tmp ;
68911: LD_ADDR_VAR 0 10
68915: PUSH
68916: LD_VAR 0 9
68920: ST_TO_ADDR
// end ; end ;
68921: GO 68779
68923: POP
68924: POP
// end ;
68925: LD_VAR 0 5
68929: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68930: LD_INT 0
68932: PPUSH
68933: PPUSH
// if not driver or not IsInUnit ( driver ) then
68934: LD_VAR 0 1
68938: NOT
68939: PUSH
68940: LD_VAR 0 1
68944: PPUSH
68945: NOP4
68949: NOT
68950: OR
68951: IFFALSE 68955
// exit ;
68953: GO 69045
// vehicle := IsInUnit ( driver ) ;
68955: LD_ADDR_VAR 0 3
68959: PUSH
68960: LD_VAR 0 1
68964: PPUSH
68965: NOP4
68969: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68970: LD_VAR 0 1
68974: PPUSH
68975: LD_STRING \
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: PUSH
69005: LD_STRING E
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: LD_VAR 0 3
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PPUSH
69041: NOP4
// end ;
69045: LD_VAR 0 2
69049: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69050: LD_INT 0
69052: PPUSH
69053: PPUSH
// if not driver or not IsInUnit ( driver ) then
69054: LD_VAR 0 1
69058: NOT
69059: PUSH
69060: LD_VAR 0 1
69064: PPUSH
69065: NOP4
69069: NOT
69070: OR
69071: IFFALSE 69075
// exit ;
69073: GO 69165
// vehicle := IsInUnit ( driver ) ;
69075: LD_ADDR_VAR 0 3
69079: PUSH
69080: LD_VAR 0 1
69084: PPUSH
69085: NOP4
69089: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69090: LD_VAR 0 1
69094: PPUSH
69095: LD_STRING \
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: PUSH
69125: LD_STRING E
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: LD_VAR 0 3
69138: PUSH
69139: LD_INT 0
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PPUSH
69161: NOP4
// end ;
69165: LD_VAR 0 2
69169: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69170: LD_INT 0
69172: PPUSH
69173: PPUSH
69174: PPUSH
// tmp := [ ] ;
69175: LD_ADDR_VAR 0 5
69179: PUSH
69180: EMPTY
69181: ST_TO_ADDR
// for i in units do
69182: LD_ADDR_VAR 0 4
69186: PUSH
69187: LD_VAR 0 1
69191: PUSH
69192: FOR_IN
69193: IFFALSE 69231
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69195: LD_ADDR_VAR 0 5
69199: PUSH
69200: LD_VAR 0 5
69204: PPUSH
69205: LD_VAR 0 5
69209: PUSH
69210: LD_INT 1
69212: PLUS
69213: PPUSH
69214: LD_VAR 0 4
69218: PPUSH
69219: NOP4
69223: PPUSH
69224: NOP4
69228: ST_TO_ADDR
69229: GO 69192
69231: POP
69232: POP
// if not tmp then
69233: LD_VAR 0 5
69237: NOT
69238: IFFALSE 69242
// exit ;
69240: GO 69290
// if asc then
69242: LD_VAR 0 2
69246: IFFALSE 69270
// result := SortListByListAsc ( units , tmp ) else
69248: LD_ADDR_VAR 0 3
69252: PUSH
69253: LD_VAR 0 1
69257: PPUSH
69258: LD_VAR 0 5
69262: PPUSH
69263: NOP4
69267: ST_TO_ADDR
69268: GO 69290
// result := SortListByListDesc ( units , tmp ) ;
69270: LD_ADDR_VAR 0 3
69274: PUSH
69275: LD_VAR 0 1
69279: PPUSH
69280: LD_VAR 0 5
69284: PPUSH
69285: NOP4
69289: ST_TO_ADDR
// end ;
69290: LD_VAR 0 3
69294: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69295: LD_INT 0
69297: PPUSH
69298: PPUSH
// task := GetTaskList ( mech ) ;
69299: LD_ADDR_VAR 0 4
69303: PUSH
69304: LD_VAR 0 1
69308: PPUSH
69309: NOP4
69313: ST_TO_ADDR
// if not task then
69314: LD_VAR 0 4
69318: NOT
69319: IFFALSE 69323
// exit ;
69321: GO 69365
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69323: LD_ADDR_VAR 0 3
69327: PUSH
69328: LD_VAR 0 4
69332: PUSH
69333: LD_INT 1
69335: ARRAY
69336: PUSH
69337: LD_INT 1
69339: ARRAY
69340: PUSH
69341: LD_STRING r
69343: EQUAL
69344: PUSH
69345: LD_VAR 0 4
69349: PUSH
69350: LD_INT 1
69352: ARRAY
69353: PUSH
69354: LD_INT 4
69356: ARRAY
69357: PUSH
69358: LD_VAR 0 2
69362: EQUAL
69363: AND
69364: ST_TO_ADDR
// end ;
69365: LD_VAR 0 3
69369: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69370: LD_INT 0
69372: PPUSH
// SetDir ( unit , d ) ;
69373: LD_VAR 0 1
69377: PPUSH
69378: LD_VAR 0 4
69382: PPUSH
69383: NOP4
// PlaceUnitXY ( unit , x , y , mode ) ;
69387: LD_VAR 0 1
69391: PPUSH
69392: LD_VAR 0 2
69396: PPUSH
69397: LD_VAR 0 3
69401: PPUSH
69402: LD_VAR 0 5
69406: PPUSH
69407: NOP4
// end ;
69411: LD_VAR 0 6
69415: RET
// export function ToNaturalNumber ( number ) ; begin
69416: LD_INT 0
69418: PPUSH
// result := number div 1 ;
69419: LD_ADDR_VAR 0 2
69423: PUSH
69424: LD_VAR 0 1
69428: PUSH
69429: LD_INT 1
69431: DIV
69432: ST_TO_ADDR
// if number < 0 then
69433: LD_VAR 0 1
69437: PUSH
69438: LD_INT 0
69440: LESS
69441: IFFALSE 69451
// result := 0 ;
69443: LD_ADDR_VAR 0 2
69447: PUSH
69448: LD_INT 0
69450: ST_TO_ADDR
// end ;
69451: LD_VAR 0 2
69455: RET
// export function SortByClass ( units , class ) ; var un ; begin
69456: LD_INT 0
69458: PPUSH
69459: PPUSH
// if not units or not class then
69460: LD_VAR 0 1
69464: NOT
69465: PUSH
69466: LD_VAR 0 2
69470: NOT
69471: OR
69472: IFFALSE 69476
// exit ;
69474: GO 69571
// result := [ ] ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: EMPTY
69482: ST_TO_ADDR
// for un in units do
69483: LD_ADDR_VAR 0 4
69487: PUSH
69488: LD_VAR 0 1
69492: PUSH
69493: FOR_IN
69494: IFFALSE 69569
// if GetClass ( un ) = class then
69496: LD_VAR 0 4
69500: PPUSH
69501: NOP4
69505: PUSH
69506: LD_VAR 0 2
69510: EQUAL
69511: IFFALSE 69538
// result := Insert ( result , 1 , un ) else
69513: LD_ADDR_VAR 0 3
69517: PUSH
69518: LD_VAR 0 3
69522: PPUSH
69523: LD_INT 1
69525: PPUSH
69526: LD_VAR 0 4
69530: PPUSH
69531: NOP4
69535: ST_TO_ADDR
69536: GO 69567
// result := Replace ( result , result + 1 , un ) ;
69538: LD_ADDR_VAR 0 3
69542: PUSH
69543: LD_VAR 0 3
69547: PPUSH
69548: LD_VAR 0 3
69552: PUSH
69553: LD_INT 1
69555: PLUS
69556: PPUSH
69557: LD_VAR 0 4
69561: PPUSH
69562: NOP4
69566: ST_TO_ADDR
69567: GO 69493
69569: POP
69570: POP
// end ;
69571: LD_VAR 0 3
69575: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69576: LD_INT 0
69578: PPUSH
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
69583: PPUSH
69584: PPUSH
// result := [ ] ;
69585: LD_ADDR_VAR 0 4
69589: PUSH
69590: EMPTY
69591: ST_TO_ADDR
// if x - r < 0 then
69592: LD_VAR 0 1
69596: PUSH
69597: LD_VAR 0 3
69601: MINUS
69602: PUSH
69603: LD_INT 0
69605: LESS
69606: IFFALSE 69618
// min_x := 0 else
69608: LD_ADDR_VAR 0 8
69612: PUSH
69613: LD_INT 0
69615: ST_TO_ADDR
69616: GO 69634
// min_x := x - r ;
69618: LD_ADDR_VAR 0 8
69622: PUSH
69623: LD_VAR 0 1
69627: PUSH
69628: LD_VAR 0 3
69632: MINUS
69633: ST_TO_ADDR
// if y - r < 0 then
69634: LD_VAR 0 2
69638: PUSH
69639: LD_VAR 0 3
69643: MINUS
69644: PUSH
69645: LD_INT 0
69647: LESS
69648: IFFALSE 69660
// min_y := 0 else
69650: LD_ADDR_VAR 0 7
69654: PUSH
69655: LD_INT 0
69657: ST_TO_ADDR
69658: GO 69676
// min_y := y - r ;
69660: LD_ADDR_VAR 0 7
69664: PUSH
69665: LD_VAR 0 2
69669: PUSH
69670: LD_VAR 0 3
69674: MINUS
69675: ST_TO_ADDR
// max_x := x + r ;
69676: LD_ADDR_VAR 0 9
69680: PUSH
69681: LD_VAR 0 1
69685: PUSH
69686: LD_VAR 0 3
69690: PLUS
69691: ST_TO_ADDR
// max_y := y + r ;
69692: LD_ADDR_VAR 0 10
69696: PUSH
69697: LD_VAR 0 2
69701: PUSH
69702: LD_VAR 0 3
69706: PLUS
69707: ST_TO_ADDR
// for _x = min_x to max_x do
69708: LD_ADDR_VAR 0 5
69712: PUSH
69713: DOUBLE
69714: LD_VAR 0 8
69718: DEC
69719: ST_TO_ADDR
69720: LD_VAR 0 9
69724: PUSH
69725: FOR_TO
69726: IFFALSE 69827
// for _y = min_y to max_y do
69728: LD_ADDR_VAR 0 6
69732: PUSH
69733: DOUBLE
69734: LD_VAR 0 7
69738: DEC
69739: ST_TO_ADDR
69740: LD_VAR 0 10
69744: PUSH
69745: FOR_TO
69746: IFFALSE 69823
// begin if not ValidHex ( _x , _y ) then
69748: LD_VAR 0 5
69752: PPUSH
69753: LD_VAR 0 6
69757: PPUSH
69758: NOP4
69762: NOT
69763: IFFALSE 69767
// continue ;
69765: GO 69745
// if GetResourceTypeXY ( _x , _y ) then
69767: LD_VAR 0 5
69771: PPUSH
69772: LD_VAR 0 6
69776: PPUSH
69777: NOP4
69781: IFFALSE 69821
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69783: LD_ADDR_VAR 0 4
69787: PUSH
69788: LD_VAR 0 4
69792: PPUSH
69793: LD_VAR 0 4
69797: PUSH
69798: LD_INT 1
69800: PLUS
69801: PPUSH
69802: LD_VAR 0 5
69806: PUSH
69807: LD_VAR 0 6
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PPUSH
69816: NOP4
69820: ST_TO_ADDR
// end ;
69821: GO 69745
69823: POP
69824: POP
69825: GO 69725
69827: POP
69828: POP
// end ;
69829: LD_VAR 0 4
69833: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69834: LD_INT 0
69836: PPUSH
69837: PPUSH
69838: PPUSH
69839: PPUSH
69840: PPUSH
69841: PPUSH
69842: PPUSH
69843: PPUSH
// if not units then
69844: LD_VAR 0 1
69848: NOT
69849: IFFALSE 69853
// exit ;
69851: GO 70377
// result := UnitFilter ( units , [ f_ok ] ) ;
69853: LD_ADDR_VAR 0 3
69857: PUSH
69858: LD_VAR 0 1
69862: PPUSH
69863: LD_INT 50
69865: PUSH
69866: EMPTY
69867: LIST
69868: PPUSH
69869: NOP4
69873: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69874: LD_ADDR_VAR 0 8
69878: PUSH
69879: LD_VAR 0 1
69883: PUSH
69884: LD_INT 1
69886: ARRAY
69887: PPUSH
69888: NOP4
69892: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69893: LD_ADDR_VAR 0 10
69897: PUSH
69898: LD_INT 29
69900: PUSH
69901: LD_INT 91
69903: PUSH
69904: LD_INT 49
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: ST_TO_ADDR
// if not result then
69912: LD_VAR 0 3
69916: NOT
69917: IFFALSE 69921
// exit ;
69919: GO 70377
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69921: LD_ADDR_VAR 0 5
69925: PUSH
69926: LD_INT 81
69928: PUSH
69929: LD_VAR 0 8
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PPUSH
69938: NOP4
69942: ST_TO_ADDR
// for i in result do
69943: LD_ADDR_VAR 0 4
69947: PUSH
69948: LD_VAR 0 3
69952: PUSH
69953: FOR_IN
69954: IFFALSE 70375
// begin tag := GetTag ( i ) + 1 ;
69956: LD_ADDR_VAR 0 9
69960: PUSH
69961: LD_VAR 0 4
69965: PPUSH
69966: NOP4
69970: PUSH
69971: LD_INT 1
69973: PLUS
69974: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69975: LD_ADDR_VAR 0 7
69979: PUSH
69980: LD_VAR 0 4
69984: PPUSH
69985: NOP4
69989: PPUSH
69990: LD_VAR 0 4
69994: PPUSH
69995: NOP4
69999: PPUSH
70000: LD_INT 6
70002: PPUSH
70003: CALL 69576 0 3
70007: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70008: LD_VAR 0 4
70012: PPUSH
70013: NOP4
70017: PUSH
70018: LD_INT 2
70020: EQUAL
70021: PUSH
70022: LD_VAR 0 7
70026: AND
70027: PUSH
70028: LD_VAR 0 4
70032: PPUSH
70033: NOP4
70037: PUSH
70038: LD_VAR 0 10
70042: IN
70043: NOT
70044: AND
70045: IFFALSE 70084
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70047: LD_VAR 0 4
70051: PPUSH
70052: LD_VAR 0 7
70056: PUSH
70057: LD_INT 1
70059: ARRAY
70060: PUSH
70061: LD_INT 1
70063: ARRAY
70064: PPUSH
70065: LD_VAR 0 7
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: PUSH
70074: LD_INT 2
70076: ARRAY
70077: PPUSH
70078: NOP4
70082: GO 70373
// if path > tag then
70084: LD_VAR 0 2
70088: PUSH
70089: LD_VAR 0 9
70093: GREATER
70094: IFFALSE 70302
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70096: LD_ADDR_VAR 0 6
70100: PUSH
70101: LD_VAR 0 5
70105: PPUSH
70106: LD_INT 91
70108: PUSH
70109: LD_VAR 0 4
70113: PUSH
70114: LD_INT 8
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: LIST
70121: PPUSH
70122: NOP4
70126: ST_TO_ADDR
// if nearEnemy then
70127: LD_VAR 0 6
70131: IFFALSE 70200
// begin if GetWeapon ( i ) = ru_time_lapser then
70133: LD_VAR 0 4
70137: PPUSH
70138: NOP4
70142: PUSH
70143: LD_INT 49
70145: EQUAL
70146: IFFALSE 70174
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70148: LD_VAR 0 4
70152: PPUSH
70153: LD_VAR 0 6
70157: PPUSH
70158: LD_VAR 0 4
70162: PPUSH
70163: NOP4
70167: PPUSH
70168: NOP4
70172: GO 70198
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70174: LD_VAR 0 4
70178: PPUSH
70179: LD_VAR 0 6
70183: PPUSH
70184: LD_VAR 0 4
70188: PPUSH
70189: NOP4
70193: PPUSH
70194: NOP4
// end else
70198: GO 70300
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70200: LD_VAR 0 4
70204: PPUSH
70205: LD_VAR 0 2
70209: PUSH
70210: LD_VAR 0 9
70214: ARRAY
70215: PUSH
70216: LD_INT 1
70218: ARRAY
70219: PPUSH
70220: LD_VAR 0 2
70224: PUSH
70225: LD_VAR 0 9
70229: ARRAY
70230: PUSH
70231: LD_INT 2
70233: ARRAY
70234: PPUSH
70235: NOP4
70239: PUSH
70240: LD_INT 6
70242: GREATER
70243: IFFALSE 70286
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70245: LD_VAR 0 4
70249: PPUSH
70250: LD_VAR 0 2
70254: PUSH
70255: LD_VAR 0 9
70259: ARRAY
70260: PUSH
70261: LD_INT 1
70263: ARRAY
70264: PPUSH
70265: LD_VAR 0 2
70269: PUSH
70270: LD_VAR 0 9
70274: ARRAY
70275: PUSH
70276: LD_INT 2
70278: ARRAY
70279: PPUSH
70280: NOP4
70284: GO 70300
// SetTag ( i , tag ) ;
70286: LD_VAR 0 4
70290: PPUSH
70291: LD_VAR 0 9
70295: PPUSH
70296: NOP4
// end else
70300: GO 70373
// if enemy then
70302: LD_VAR 0 5
70306: IFFALSE 70373
// begin if GetWeapon ( i ) = ru_time_lapser then
70308: LD_VAR 0 4
70312: PPUSH
70313: NOP4
70317: PUSH
70318: LD_INT 49
70320: EQUAL
70321: IFFALSE 70349
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70323: LD_VAR 0 4
70327: PPUSH
70328: LD_VAR 0 5
70332: PPUSH
70333: LD_VAR 0 4
70337: PPUSH
70338: NOP4
70342: PPUSH
70343: NOP4
70347: GO 70373
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70349: LD_VAR 0 4
70353: PPUSH
70354: LD_VAR 0 5
70358: PPUSH
70359: LD_VAR 0 4
70363: PPUSH
70364: NOP4
70368: PPUSH
70369: NOP4
// end ; end ;
70373: GO 69953
70375: POP
70376: POP
// end ;
70377: LD_VAR 0 3
70381: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70382: LD_INT 0
70384: PPUSH
70385: PPUSH
70386: PPUSH
// if not unit or IsInUnit ( unit ) then
70387: LD_VAR 0 1
70391: NOT
70392: PUSH
70393: LD_VAR 0 1
70397: PPUSH
70398: NOP4
70402: OR
70403: IFFALSE 70407
// exit ;
70405: GO 70498
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70407: LD_ADDR_VAR 0 4
70411: PUSH
70412: LD_VAR 0 1
70416: PPUSH
70417: NOP4
70421: PPUSH
70422: LD_VAR 0 2
70426: PPUSH
70427: LD_INT 1
70429: PPUSH
70430: NOP4
70434: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70435: LD_ADDR_VAR 0 5
70439: PUSH
70440: LD_VAR 0 1
70444: PPUSH
70445: NOP4
70449: PPUSH
70450: LD_VAR 0 2
70454: PPUSH
70455: LD_INT 1
70457: PPUSH
70458: NOP4
70462: ST_TO_ADDR
// if ValidHex ( x , y ) then
70463: LD_VAR 0 4
70467: PPUSH
70468: LD_VAR 0 5
70472: PPUSH
70473: NOP4
70477: IFFALSE 70498
// ComTurnXY ( unit , x , y ) ;
70479: LD_VAR 0 1
70483: PPUSH
70484: LD_VAR 0 4
70488: PPUSH
70489: LD_VAR 0 5
70493: PPUSH
70494: NOP4
// end ;
70498: LD_VAR 0 3
70502: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70503: LD_INT 0
70505: PPUSH
70506: PPUSH
// result := false ;
70507: LD_ADDR_VAR 0 3
70511: PUSH
70512: LD_INT 0
70514: ST_TO_ADDR
// if not units then
70515: LD_VAR 0 2
70519: NOT
70520: IFFALSE 70524
// exit ;
70522: GO 70569
// for i in units do
70524: LD_ADDR_VAR 0 4
70528: PUSH
70529: LD_VAR 0 2
70533: PUSH
70534: FOR_IN
70535: IFFALSE 70567
// if See ( side , i ) then
70537: LD_VAR 0 1
70541: PPUSH
70542: LD_VAR 0 4
70546: PPUSH
70547: NOP4
70551: IFFALSE 70565
// begin result := true ;
70553: LD_ADDR_VAR 0 3
70557: PUSH
70558: LD_INT 1
70560: ST_TO_ADDR
// exit ;
70561: POP
70562: POP
70563: GO 70569
// end ;
70565: GO 70534
70567: POP
70568: POP
// end ;
70569: LD_VAR 0 3
70573: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70574: LD_INT 0
70576: PPUSH
70577: PPUSH
70578: PPUSH
70579: PPUSH
// if not unit or not points then
70580: LD_VAR 0 1
70584: NOT
70585: PUSH
70586: LD_VAR 0 2
70590: NOT
70591: OR
70592: IFFALSE 70596
// exit ;
70594: GO 70686
// dist := 99999 ;
70596: LD_ADDR_VAR 0 5
70600: PUSH
70601: LD_INT 99999
70603: ST_TO_ADDR
// for i in points do
70604: LD_ADDR_VAR 0 4
70608: PUSH
70609: LD_VAR 0 2
70613: PUSH
70614: FOR_IN
70615: IFFALSE 70684
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70617: LD_ADDR_VAR 0 6
70621: PUSH
70622: LD_VAR 0 1
70626: PPUSH
70627: LD_VAR 0 4
70631: PUSH
70632: LD_INT 1
70634: ARRAY
70635: PPUSH
70636: LD_VAR 0 4
70640: PUSH
70641: LD_INT 2
70643: ARRAY
70644: PPUSH
70645: NOP4
70649: ST_TO_ADDR
// if tmpDist < dist then
70650: LD_VAR 0 6
70654: PUSH
70655: LD_VAR 0 5
70659: LESS
70660: IFFALSE 70682
// begin result := i ;
70662: LD_ADDR_VAR 0 3
70666: PUSH
70667: LD_VAR 0 4
70671: ST_TO_ADDR
// dist := tmpDist ;
70672: LD_ADDR_VAR 0 5
70676: PUSH
70677: LD_VAR 0 6
70681: ST_TO_ADDR
// end ; end ;
70682: GO 70614
70684: POP
70685: POP
// end ;
70686: LD_VAR 0 3
70690: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70691: LD_INT 0
70693: PPUSH
// uc_side := side ;
70694: LD_ADDR_OWVAR 20
70698: PUSH
70699: LD_VAR 0 1
70703: ST_TO_ADDR
// uc_nation := 3 ;
70704: LD_ADDR_OWVAR 21
70708: PUSH
70709: LD_INT 3
70711: ST_TO_ADDR
// vc_chassis := 25 ;
70712: LD_ADDR_OWVAR 37
70716: PUSH
70717: LD_INT 25
70719: ST_TO_ADDR
// vc_engine := engine_siberite ;
70720: LD_ADDR_OWVAR 39
70724: PUSH
70725: LD_INT 3
70727: ST_TO_ADDR
// vc_control := control_computer ;
70728: LD_ADDR_OWVAR 38
70732: PUSH
70733: LD_INT 3
70735: ST_TO_ADDR
// vc_weapon := 59 ;
70736: LD_ADDR_OWVAR 40
70740: PUSH
70741: LD_INT 59
70743: ST_TO_ADDR
// result := CreateVehicle ;
70744: LD_ADDR_VAR 0 5
70748: PUSH
70749: NOP4
70753: ST_TO_ADDR
// SetDir ( result , d ) ;
70754: LD_VAR 0 5
70758: PPUSH
70759: LD_VAR 0 4
70763: PPUSH
70764: NOP4
// PlaceUnitXY ( result , x , y , false ) ;
70768: LD_VAR 0 5
70772: PPUSH
70773: LD_VAR 0 2
70777: PPUSH
70778: LD_VAR 0 3
70782: PPUSH
70783: LD_INT 0
70785: PPUSH
70786: NOP4
// end ;
70790: LD_VAR 0 5
70794: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70795: LD_INT 0
70797: PPUSH
70798: PPUSH
70799: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70800: LD_ADDR_VAR 0 2
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70823: LD_VAR 0 1
70827: NOT
70828: PUSH
70829: LD_VAR 0 1
70833: PPUSH
70834: NOP4
70838: PUSH
70839: LD_INT 12
70841: PUSH
70842: LD_INT 51
70844: PUSH
70845: LD_INT 32
70847: PUSH
70848: LD_INT 89
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: IN
70857: NOT
70858: OR
70859: IFFALSE 70863
// exit ;
70861: GO 70961
// for i := 1 to 3 do
70863: LD_ADDR_VAR 0 3
70867: PUSH
70868: DOUBLE
70869: LD_INT 1
70871: DEC
70872: ST_TO_ADDR
70873: LD_INT 3
70875: PUSH
70876: FOR_TO
70877: IFFALSE 70959
// begin tmp := GetCargo ( cargo , i ) ;
70879: LD_ADDR_VAR 0 4
70883: PUSH
70884: LD_VAR 0 1
70888: PPUSH
70889: LD_VAR 0 3
70893: PPUSH
70894: NOP4
70898: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70899: LD_ADDR_VAR 0 2
70903: PUSH
70904: LD_VAR 0 2
70908: PPUSH
70909: LD_VAR 0 3
70913: PPUSH
70914: LD_VAR 0 4
70918: PPUSH
70919: NOP4
70923: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70924: LD_ADDR_VAR 0 2
70928: PUSH
70929: LD_VAR 0 2
70933: PPUSH
70934: LD_INT 4
70936: PPUSH
70937: LD_VAR 0 2
70941: PUSH
70942: LD_INT 4
70944: ARRAY
70945: PUSH
70946: LD_VAR 0 4
70950: PLUS
70951: PPUSH
70952: NOP4
70956: ST_TO_ADDR
// end ;
70957: GO 70876
70959: POP
70960: POP
// end ;
70961: LD_VAR 0 2
70965: RET
// export function Length ( array ) ; begin
70966: LD_INT 0
70968: PPUSH
// result := array + 0 ;
70969: LD_ADDR_VAR 0 2
70973: PUSH
70974: LD_VAR 0 1
70978: PUSH
70979: LD_INT 0
70981: PLUS
70982: ST_TO_ADDR
// end ;
70983: LD_VAR 0 2
70987: RET
// export function PrepareArray ( array ) ; begin
70988: LD_INT 0
70990: PPUSH
// result := array diff 0 ;
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_VAR 0 1
71000: PUSH
71001: LD_INT 0
71003: DIFF
71004: ST_TO_ADDR
// if not result [ 1 ] then
71005: LD_VAR 0 2
71009: PUSH
71010: LD_INT 1
71012: ARRAY
71013: NOT
71014: IFFALSE 71034
// result := Delete ( result , 1 ) ;
71016: LD_ADDR_VAR 0 2
71020: PUSH
71021: LD_VAR 0 2
71025: PPUSH
71026: LD_INT 1
71028: PPUSH
71029: NOP4
71033: ST_TO_ADDR
// end ; end_of_file
71034: LD_VAR 0 2
71038: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71039: LD_VAR 0 1
71043: PUSH
71044: LD_INT 200
71046: DOUBLE
71047: GREATEREQUAL
71048: IFFALSE 71056
71050: LD_INT 299
71052: DOUBLE
71053: LESSEQUAL
71054: IFTRUE 71058
71056: GO 71090
71058: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71059: LD_VAR 0 1
71063: PPUSH
71064: LD_VAR 0 2
71068: PPUSH
71069: LD_VAR 0 3
71073: PPUSH
71074: LD_VAR 0 4
71078: PPUSH
71079: LD_VAR 0 5
71083: PPUSH
71084: CALL 25941 0 5
71088: GO 71167
71090: LD_INT 300
71092: DOUBLE
71093: GREATEREQUAL
71094: IFFALSE 71102
71096: LD_INT 399
71098: DOUBLE
71099: LESSEQUAL
71100: IFTRUE 71104
71102: GO 71166
71104: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71105: LD_VAR 0 1
71109: PPUSH
71110: LD_VAR 0 2
71114: PPUSH
71115: LD_VAR 0 3
71119: PPUSH
71120: LD_VAR 0 4
71124: PPUSH
71125: LD_VAR 0 5
71129: PPUSH
71130: LD_VAR 0 6
71134: PPUSH
71135: LD_VAR 0 7
71139: PPUSH
71140: LD_VAR 0 8
71144: PPUSH
71145: LD_VAR 0 9
71149: PPUSH
71150: LD_VAR 0 10
71154: PPUSH
71155: LD_VAR 0 11
71159: PPUSH
71160: CALL 22274 0 11
71164: GO 71167
71166: POP
// end ;
71167: PPOPN 11
71169: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71170: LD_VAR 0 1
71174: PPUSH
71175: LD_VAR 0 2
71179: PPUSH
71180: LD_VAR 0 3
71184: PPUSH
71185: LD_VAR 0 4
71189: PPUSH
71190: LD_VAR 0 5
71194: PPUSH
71195: CALL 25677 0 5
// end ; end_of_file
71199: PPOPN 5
71201: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71202: LD_VAR 0 1
71206: PPUSH
71207: LD_VAR 0 2
71211: PPUSH
71212: LD_VAR 0 3
71216: PPUSH
71217: LD_VAR 0 4
71221: PPUSH
71222: LD_VAR 0 5
71226: PPUSH
71227: LD_VAR 0 6
71231: PPUSH
71232: CALL 9967 0 6
// end ;
71236: PPOPN 6
71238: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71239: LD_INT 0
71241: PPUSH
// begin if not units then
71242: LD_VAR 0 1
71246: NOT
71247: IFFALSE 71251
// exit ;
71249: GO 71251
// end ;
71251: PPOPN 7
71253: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71254: CALL 9938 0 0
// end ;
71258: PPOPN 1
71260: END
