// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PrepareNature ( 4 , 3 , 4 , 5 , 2 , 0 , 3 , natureArea , riverArea ) ;
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: LD_INT 2
  25: PPUSH
  26: LD_INT 0
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: LD_INT 6
  37: PPUSH
  38: CALL 191 0 9
// InitVariables ;
  42: CALL 63 0 0
// PrepareRussian ;
  46: CALL 1364 0 0
// PrepareArabian ;
  50: CALL 934 0 0
// PrepareHeike ;
  54: CALL 869 0 0
// Action ;
  58: CALL 2901 0 0
// end ;
  62: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound ; function InitVariables ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// missionStarted := false ;
  74: LD_ADDR_EXP 1
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// meetJohnny := false ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// johnnySaved := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// dogTag := [ ] ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: EMPTY
 104: ST_TO_ADDR
// dogTagFound := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// mercenariesSpotted := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// olafSpotted := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// russianSpotted := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// mercenariesQuestReady := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// mercenariesQuestDone := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// lastObjectiveActive := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// prisonFound := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// end ;
 169: LD_VAR 0 1
 173: RET
// every 0 0$1 trigger debug do
 174: LD_EXP 2
 178: IFFALSE 190
 180: GO 182
 182: DISABLE
// FogOff ( 2 ) ; end_of_file
 183: LD_INT 2
 185: PPUSH
 186: CALL_OW 344
 190: END
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 0 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// uc_nation = 0 ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// InitHc ;
 212: CALL_OW 19
// InitVc ;
 216: CALL_OW 20
// if mastodonts then
 220: LD_VAR 0 6
 224: IFFALSE 291
// for i = 1 to mastodonts do
 226: LD_ADDR_VAR 0 11
 230: PUSH
 231: DOUBLE
 232: LD_INT 1
 234: DEC
 235: ST_TO_ADDR
 236: LD_VAR 0 6
 240: PUSH
 241: FOR_TO
 242: IFFALSE 289
// begin vc_chassis := 31 ;
 244: LD_ADDR_OWVAR 37
 248: PUSH
 249: LD_INT 31
 251: ST_TO_ADDR
// vc_control := control_rider ;
 252: LD_ADDR_OWVAR 38
 256: PUSH
 257: LD_INT 4
 259: ST_TO_ADDR
// animal := CreateVehicle ;
 260: LD_ADDR_VAR 0 12
 264: PUSH
 265: CALL_OW 45
 269: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 270: LD_VAR 0 12
 274: PPUSH
 275: LD_VAR 0 8
 279: PPUSH
 280: LD_INT 0
 282: PPUSH
 283: CALL_OW 49
// end ;
 287: GO 241
 289: POP
 290: POP
// if horses then
 291: LD_VAR 0 5
 295: IFFALSE 362
// for i = 1 to horses do
 297: LD_ADDR_VAR 0 11
 301: PUSH
 302: DOUBLE
 303: LD_INT 1
 305: DEC
 306: ST_TO_ADDR
 307: LD_VAR 0 5
 311: PUSH
 312: FOR_TO
 313: IFFALSE 360
// begin hc_class := 21 ;
 315: LD_ADDR_OWVAR 28
 319: PUSH
 320: LD_INT 21
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// animal := CreateHuman ;
 331: LD_ADDR_VAR 0 12
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 341: LD_VAR 0 12
 345: PPUSH
 346: LD_VAR 0 8
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 312
 360: POP
 361: POP
// if birds then
 362: LD_VAR 0 1
 366: IFFALSE 433
// for i = 1 to birds do
 368: LD_ADDR_VAR 0 11
 372: PUSH
 373: DOUBLE
 374: LD_INT 1
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 1
 382: PUSH
 383: FOR_TO
 384: IFFALSE 431
// begin hc_class = 18 ;
 386: LD_ADDR_OWVAR 28
 390: PUSH
 391: LD_INT 18
 393: ST_TO_ADDR
// hc_gallery =  ;
 394: LD_ADDR_OWVAR 33
 398: PUSH
 399: LD_STRING 
 401: ST_TO_ADDR
// animal := CreateHuman ;
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 412: LD_VAR 0 12
 416: PPUSH
 417: LD_VAR 0 8
 421: PPUSH
 422: LD_INT 0
 424: PPUSH
 425: CALL_OW 49
// end ;
 429: GO 383
 431: POP
 432: POP
// if tigers then
 433: LD_VAR 0 2
 437: IFFALSE 521
// for i = 1 to tigers do
 439: LD_ADDR_VAR 0 11
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_VAR 0 2
 453: PUSH
 454: FOR_TO
 455: IFFALSE 519
// begin hc_class = class_tiger ;
 457: LD_ADDR_OWVAR 28
 461: PUSH
 462: LD_INT 14
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 473: LD_ADDR_OWVAR 35
 477: PUSH
 478: LD_INT 7
 480: NEG
 481: PPUSH
 482: LD_INT 7
 484: PPUSH
 485: CALL_OW 12
 489: ST_TO_ADDR
// animal := CreateHuman ;
 490: LD_ADDR_VAR 0 12
 494: PUSH
 495: CALL_OW 44
 499: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 500: LD_VAR 0 12
 504: PPUSH
 505: LD_VAR 0 8
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// end ;
 517: GO 454
 519: POP
 520: POP
// if apemans then
 521: LD_VAR 0 3
 525: IFFALSE 648
// for i = 1 to apemans do
 527: LD_ADDR_VAR 0 11
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 3
 541: PUSH
 542: FOR_TO
 543: IFFALSE 646
// begin hc_class = class_apeman ;
 545: LD_ADDR_OWVAR 28
 549: PUSH
 550: LD_INT 12
 552: ST_TO_ADDR
// hc_gallery =  ;
 553: LD_ADDR_OWVAR 33
 557: PUSH
 558: LD_STRING 
 560: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 578: LD_ADDR_OWVAR 31
 582: PUSH
 583: LD_INT 1
 585: PPUSH
 586: LD_INT 3
 588: PPUSH
 589: CALL_OW 12
 593: PUSH
 594: LD_INT 1
 596: PPUSH
 597: LD_INT 3
 599: PPUSH
 600: CALL_OW 12
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// animal := CreateHuman ;
 617: LD_ADDR_VAR 0 12
 621: PUSH
 622: CALL_OW 44
 626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 627: LD_VAR 0 12
 631: PPUSH
 632: LD_VAR 0 8
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 542
 646: POP
 647: POP
// if enchidnas then
 648: LD_VAR 0 4
 652: IFFALSE 719
// for i = 1 to enchidnas do
 654: LD_ADDR_VAR 0 11
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_VAR 0 4
 668: PUSH
 669: FOR_TO
 670: IFFALSE 717
// begin hc_class = 13 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 13
 679: ST_TO_ADDR
// hc_gallery =  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// animal := CreateHuman ;
 688: LD_ADDR_VAR 0 12
 692: PUSH
 693: CALL_OW 44
 697: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 698: LD_VAR 0 12
 702: PPUSH
 703: LD_VAR 0 8
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// end ;
 715: GO 669
 717: POP
 718: POP
// if fishes then
 719: LD_VAR 0 7
 723: IFFALSE 790
// for i = 1 to fishes do
 725: LD_ADDR_VAR 0 11
 729: PUSH
 730: DOUBLE
 731: LD_INT 1
 733: DEC
 734: ST_TO_ADDR
 735: LD_VAR 0 7
 739: PUSH
 740: FOR_TO
 741: IFFALSE 788
// begin hc_class = class_fish ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 20
 750: ST_TO_ADDR
// hc_gallery =  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// animal := CreateHuman ;
 759: LD_ADDR_VAR 0 12
 763: PUSH
 764: CALL_OW 44
 768: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 769: LD_VAR 0 12
 773: PPUSH
 774: LD_VAR 0 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// end ;
 786: GO 740
 788: POP
 789: POP
// end ;
 790: LD_VAR 0 10
 794: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
 799: PPUSH
// if not observer or not unit then
 800: LD_VAR 0 1
 804: NOT
 805: PUSH
 806: LD_VAR 0 2
 810: NOT
 811: OR
 812: IFFALSE 816
// exit ;
 814: GO 864
// if not See ( GetSide ( observer ) , unit ) then
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 255
 825: PPUSH
 826: LD_VAR 0 2
 830: PPUSH
 831: CALL_OW 292
 835: NOT
 836: IFFALSE 840
// exit ;
 838: GO 864
// result := GetDistUnits ( observer , unit ) < 12 ;
 840: LD_ADDR_VAR 0 3
 844: PUSH
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_VAR 0 2
 854: PPUSH
 855: CALL_OW 296
 859: PUSH
 860: LD_INT 12
 862: LESS
 863: ST_TO_ADDR
// end ; end_of_file
 864: LD_VAR 0 3
 868: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 869: LD_INT 0
 871: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 872: LD_INT 66
 874: PPUSH
 875: LD_INT 26
 877: PPUSH
 878: CALL_OW 86
// uc_side := 2 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 2
 889: ST_TO_ADDR
// uc_nation := 2 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 2
 897: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 898: LD_ADDR_EXP 14
 902: PUSH
 903: LD_STRING Heike
 905: PPUSH
 906: CALL_OW 25
 910: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 911: LD_EXP 14
 915: PPUSH
 916: LD_INT 66
 918: PPUSH
 919: LD_INT 26
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL_OW 48
// end ;
 929: LD_VAR 0 1
 933: RET
// export function PrepareArabian ; begin
 934: LD_INT 0
 936: PPUSH
// uc_side := 5 ;
 937: LD_ADDR_OWVAR 20
 941: PUSH
 942: LD_INT 5
 944: ST_TO_ADDR
// uc_nation := 2 ;
 945: LD_ADDR_OWVAR 21
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 953: LD_ADDR_EXP 15
 957: PUSH
 958: LD_STRING Olaf
 960: PPUSH
 961: CALL_OW 25
 965: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
 966: LD_EXP 15
 970: PPUSH
 971: LD_INT 39
 973: PPUSH
 974: LD_INT 52
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
 984: LD_ADDR_EXP 16
 988: PUSH
 989: LD_STRING Givi
 991: PPUSH
 992: CALL_OW 25
 996: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
 997: LD_EXP 16
1001: PPUSH
1002: LD_INT 55
1004: PPUSH
1005: LD_INT 90
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1015: LD_EXP 16
1019: PPUSH
1020: LD_INT 53
1022: PPUSH
1023: LD_INT 89
1025: PPUSH
1026: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1030: LD_ADDR_EXP 17
1034: PUSH
1035: LD_STRING Mike
1037: PPUSH
1038: CALL_OW 25
1042: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1043: LD_EXP 17
1047: PPUSH
1048: LD_INT 53
1050: PPUSH
1051: LD_INT 87
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1061: LD_EXP 17
1065: PPUSH
1066: LD_INT 53
1068: PPUSH
1069: LD_INT 89
1071: PPUSH
1072: CALL_OW 118
// end ;
1076: LD_VAR 0 1
1080: RET
// export function PreparePrison ; begin
1081: LD_INT 0
1083: PPUSH
// uc_side := 5 ;
1084: LD_ADDR_OWVAR 20
1088: PUSH
1089: LD_INT 5
1091: ST_TO_ADDR
// uc_nation := 2 ;
1092: LD_ADDR_OWVAR 21
1096: PUSH
1097: LD_INT 2
1099: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1100: LD_ADDR_EXP 18
1104: PUSH
1105: LD_STRING Kamil
1107: PPUSH
1108: CALL_OW 25
1112: ST_TO_ADDR
// if Difficulty > 1 then
1113: LD_OWVAR 67
1117: PUSH
1118: LD_INT 1
1120: GREATER
1121: IFFALSE 1137
// PlaceHumanInUnit ( Kamil , northDep ) else
1123: LD_EXP 18
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: CALL_OW 52
1135: GO 1149
// PlaceHumanInUnit ( Kamil , southDep ) ;
1137: LD_EXP 18
1141: PPUSH
1142: LD_INT 8
1144: PPUSH
1145: CALL_OW 52
// uc_side := 3 ;
1149: LD_ADDR_OWVAR 20
1153: PUSH
1154: LD_INT 3
1156: ST_TO_ADDR
// uc_nation := 3 ;
1157: LD_ADDR_OWVAR 21
1161: PUSH
1162: LD_INT 3
1164: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1165: LD_INT 0
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 380
// if Difficulty > 1 then
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: GREATER
1186: IFFALSE 1202
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1188: CALL_OW 44
1192: PPUSH
1193: LD_INT 8
1195: PPUSH
1196: CALL_OW 52
1200: GO 1214
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1202: CALL_OW 44
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: CALL_OW 52
// end ; end_of_file
1214: LD_VAR 0 1
1218: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
1223: PPUSH
// uc_side := 3 ;
1224: LD_ADDR_OWVAR 20
1228: PUSH
1229: LD_INT 3
1231: ST_TO_ADDR
// uc_nation := 3 ;
1232: LD_ADDR_OWVAR 21
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// russianPatrol := [ ] ;
1240: LD_ADDR_EXP 19
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for i = 1 to 3 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 3
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1357
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: CALL_OW 12
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1309: LD_ADDR_EXP 19
1313: PUSH
1314: LD_EXP 19
1318: PPUSH
1319: LD_VAR 0 2
1323: PPUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1334: LD_VAR 0 3
1338: PPUSH
1339: LD_INT 26
1341: PPUSH
1342: LD_INT 22
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 50
// end ;
1355: GO 1260
1357: POP
1358: POP
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side := 3 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// uc_nation := 3 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// russianForces := [ ] ;
1387: LD_ADDR_EXP 21
1391: PUSH
1392: EMPTY
1393: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1394: LD_ADDR_EXP 20
1398: PUSH
1399: EMPTY
1400: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1401: LD_ADDR_VAR 0 5
1405: PUSH
1406: LD_INT 11
1408: PPUSH
1409: LD_INT 0
1411: PPUSH
1412: CALL_OW 517
1416: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PPUSH
1432: CALL_OW 69
1436: PUSH
1437: FOR_IN
1438: IFFALSE 1482
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1440: LD_VAR 0 2
1444: PPUSH
1445: CALL_OW 274
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 200
1455: PPUSH
1456: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1460: LD_VAR 0 2
1464: PPUSH
1465: CALL_OW 274
1469: PPUSH
1470: LD_INT 2
1472: PPUSH
1473: LD_INT 10
1475: PPUSH
1476: CALL_OW 277
// end ;
1480: GO 1437
1482: POP
1483: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_INT 30
1491: PUSH
1492: LD_INT 31
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 69
1503: PUSH
1504: FOR_IN
1505: IFFALSE 1579
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_OWVAR 67
1517: PUSH
1518: LD_INT 1
1520: MINUS
1521: PPUSH
1522: CALL_OW 380
// un := CreateHuman ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: CALL_OW 44
1535: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1536: LD_VAR 0 4
1540: PPUSH
1541: LD_VAR 0 2
1545: PPUSH
1546: CALL_OW 254
1550: PUSH
1551: LD_INT 3
1553: MINUS
1554: PUSH
1555: LD_INT 6
1557: MOD
1558: PPUSH
1559: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_VAR 0 2
1572: PPUSH
1573: CALL_OW 52
// end ;
1577: GO 1504
1579: POP
1580: POP
// for i = 1 to 5 do
1581: LD_ADDR_VAR 0 2
1585: PUSH
1586: DOUBLE
1587: LD_INT 1
1589: DEC
1590: ST_TO_ADDR
1591: LD_INT 5
1593: PUSH
1594: FOR_TO
1595: IFFALSE 1677
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PPUSH
1608: CALL_OW 380
// un := CreateHuman ;
1612: LD_ADDR_VAR 0 4
1616: PUSH
1617: CALL_OW 44
1621: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1622: LD_VAR 0 4
1626: PPUSH
1627: LD_INT 9
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 49
// ComHold ( un ) ;
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1646: LD_ADDR_EXP 21
1650: PUSH
1651: LD_EXP 21
1655: PPUSH
1656: LD_EXP 21
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL_OW 1
1674: ST_TO_ADDR
// end ;
1675: GO 1594
1677: POP
1678: POP
// for i := 1 to Difficulty + 1 do
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: DOUBLE
1685: LD_INT 1
1687: DEC
1688: ST_TO_ADDR
1689: LD_OWVAR 67
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: PUSH
1698: FOR_TO
1699: IFFALSE 1799
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1701: LD_INT 0
1703: PPUSH
1704: LD_INT 1
1706: PPUSH
1707: LD_OWVAR 67
1711: PPUSH
1712: CALL_OW 380
// un := CreateHuman ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: CALL_OW 44
1725: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PPUSH
1746: LD_VAR 0 5
1750: PUSH
1751: LD_INT 2
1753: ARRAY
1754: PUSH
1755: LD_VAR 0 2
1759: ARRAY
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1768: LD_ADDR_EXP 20
1772: PUSH
1773: LD_EXP 20
1777: PPUSH
1778: LD_EXP 20
1782: PUSH
1783: LD_INT 1
1785: PLUS
1786: PPUSH
1787: LD_VAR 0 4
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// end ;
1797: GO 1698
1799: POP
1800: POP
// vc_chassis := ru_medium_wheeled ;
1801: LD_ADDR_OWVAR 37
1805: PUSH
1806: LD_INT 21
1808: ST_TO_ADDR
// vc_engine := engine_combustion ;
1809: LD_ADDR_OWVAR 39
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// vc_control := control_manual ;
1817: LD_ADDR_OWVAR 38
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 42
1832: ST_TO_ADDR
// russianTank := CreateVehicle ;
1833: LD_ADDR_EXP 22
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1843: LD_EXP 22
1847: PPUSH
1848: LD_INT 121
1850: PPUSH
1851: LD_INT 25
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1861: LD_INT 0
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: LD_OWVAR 67
1871: PPUSH
1872: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1876: CALL_OW 44
1880: PPUSH
1881: LD_EXP 22
1885: PPUSH
1886: CALL_OW 52
// if Difficulty > 1 then
1890: LD_OWVAR 67
1894: PUSH
1895: LD_INT 1
1897: GREATER
1898: IFFALSE 1984
// begin bc_type := b_breastwork ;
1900: LD_ADDR_OWVAR 42
1904: PUSH
1905: LD_INT 31
1907: ST_TO_ADDR
// bc_level := 2 ;
1908: LD_ADDR_OWVAR 43
1912: PUSH
1913: LD_INT 2
1915: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1916: LD_ADDR_VAR 0 3
1920: PUSH
1921: LD_INT 143
1923: PPUSH
1924: LD_INT 88
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 47
1934: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 2
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 52
// end ; if Difficulty > 2 then
1984: LD_OWVAR 67
1988: PUSH
1989: LD_INT 2
1991: GREATER
1992: IFFALSE 2048
// begin for i := 1 to 2 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 2
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2046
// begin PrepareHuman ( false , 1 , 2 ) ;
2010: LD_INT 0
2012: PPUSH
2013: LD_INT 1
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2023: CALL_OW 44
2027: PPUSH
2028: LD_INT 156
2030: PPUSH
2031: LD_INT 108
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 50
// end ;
2044: GO 2007
2046: POP
2047: POP
// end ; end ;
2048: LD_VAR 0 1
2052: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2053: LD_EXP 20
2057: IFFALSE 2363
2059: GO 2061
2061: DISABLE
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
// begin enable ;
2070: ENABLE
// for i in russianForestPatrol do
2071: LD_ADDR_VAR 0 1
2075: PUSH
2076: LD_EXP 20
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2361
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_INT 53
2091: PPUSH
2092: LD_INT 89
2094: PPUSH
2095: CALL_OW 297
2099: PUSH
2100: LD_INT 30
2102: LESS
2103: IFFALSE 2122
// begin ComMoveXY ( i , 114 , 80 ) ;
2105: LD_VAR 0 1
2109: PPUSH
2110: LD_INT 114
2112: PPUSH
2113: LD_INT 80
2115: PPUSH
2116: CALL_OW 111
// continue ;
2120: GO 2081
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2122: LD_ADDR_VAR 0 6
2126: PUSH
2127: LD_EXP 20
2131: PUSH
2132: LD_VAR 0 1
2136: DIFF
2137: PPUSH
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 74
2147: ST_TO_ADDR
// if tmp then
2148: LD_VAR 0 6
2152: IFFALSE 2220
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_VAR 0 6
2163: PPUSH
2164: CALL_OW 296
2168: PUSH
2169: LD_INT 14
2171: LESS
2172: PUSH
2173: LD_VAR 0 6
2177: PPUSH
2178: CALL_OW 256
2182: PUSH
2183: LD_INT 999
2185: LESS
2186: AND
2187: IFFALSE 2220
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2189: LD_VAR 0 1
2193: PPUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 6
2208: PPUSH
2209: CALL_OW 251
2213: PPUSH
2214: CALL_OW 114
// break ;
2218: GO 2361
// end ; if not HasTask ( i ) then
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 314
2229: NOT
2230: IFFALSE 2359
// begin d := rand ( 0 , 5 ) ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_INT 0
2239: PPUSH
2240: LD_INT 5
2242: PPUSH
2243: CALL_OW 12
2247: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: LD_INT 3
2255: PPUSH
2256: LD_INT 7
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2264: LD_ADDR_VAR 0 4
2268: PUSH
2269: LD_VAR 0 1
2273: PPUSH
2274: CALL_OW 250
2278: PPUSH
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_VAR 0 3
2288: PPUSH
2289: CALL_OW 272
2293: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2294: LD_ADDR_VAR 0 5
2298: PUSH
2299: LD_VAR 0 1
2303: PPUSH
2304: CALL_OW 251
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_VAR 0 3
2318: PPUSH
2319: CALL_OW 273
2323: ST_TO_ADDR
// if ValidHex ( x , y ) then
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_VAR 0 5
2333: PPUSH
2334: CALL_OW 488
2338: IFFALSE 2359
// ComAgressiveMove ( i , x , y ) ;
2340: LD_VAR 0 1
2344: PPUSH
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_VAR 0 5
2354: PPUSH
2355: CALL_OW 114
// end ; end ;
2359: GO 2081
2361: POP
2362: POP
// end ;
2363: PPOPN 6
2365: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2366: LD_EXP 22
2370: PPUSH
2371: CALL_OW 302
2375: PUSH
2376: LD_EXP 22
2380: PPUSH
2381: CALL_OW 255
2385: PUSH
2386: LD_INT 3
2388: EQUAL
2389: AND
2390: IFFALSE 2657
2392: GO 2394
2394: DISABLE
// begin enable ;
2395: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2396: LD_EXP 22
2400: PPUSH
2401: LD_INT 124
2403: PPUSH
2404: LD_INT 25
2406: PPUSH
2407: CALL_OW 307
2411: IFFALSE 2425
// SetFuel ( russianTank , 100 ) ;
2413: LD_EXP 22
2417: PPUSH
2418: LD_INT 100
2420: PPUSH
2421: CALL_OW 240
// if HasTask ( russianTank ) then
2425: LD_EXP 22
2429: PPUSH
2430: CALL_OW 314
2434: IFFALSE 2438
// exit ;
2436: GO 2657
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2438: LD_EXP 22
2442: PPUSH
2443: LD_INT 121
2445: PPUSH
2446: LD_INT 25
2448: PPUSH
2449: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2453: LD_EXP 22
2457: PPUSH
2458: LD_INT 122
2460: PPUSH
2461: LD_INT 48
2463: PPUSH
2464: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2468: LD_EXP 22
2472: PPUSH
2473: LD_INT 70
2475: PPUSH
2476: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2480: LD_EXP 22
2484: PPUSH
2485: LD_INT 107
2487: PPUSH
2488: LD_INT 57
2490: PPUSH
2491: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2495: LD_EXP 22
2499: PPUSH
2500: LD_INT 70
2502: PPUSH
2503: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2507: LD_EXP 22
2511: PPUSH
2512: LD_INT 100
2514: PPUSH
2515: LD_INT 61
2517: PPUSH
2518: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2522: LD_EXP 22
2526: PPUSH
2527: LD_INT 105
2529: PPUSH
2530: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2534: LD_EXP 22
2538: PPUSH
2539: LD_INT 78
2541: PPUSH
2542: LD_INT 64
2544: PPUSH
2545: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2549: LD_EXP 22
2553: PPUSH
2554: LD_INT 140
2556: PPUSH
2557: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2561: LD_EXP 22
2565: PPUSH
2566: LD_INT 100
2568: PPUSH
2569: LD_INT 61
2571: PPUSH
2572: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2576: LD_EXP 22
2580: PPUSH
2581: LD_INT 105
2583: PPUSH
2584: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2588: LD_EXP 22
2592: PPUSH
2593: LD_INT 107
2595: PPUSH
2596: LD_INT 57
2598: PPUSH
2599: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2603: LD_EXP 22
2607: PPUSH
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2615: LD_EXP 22
2619: PPUSH
2620: LD_INT 122
2622: PPUSH
2623: LD_INT 48
2625: PPUSH
2626: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2630: LD_EXP 22
2634: PPUSH
2635: LD_INT 70
2637: PPUSH
2638: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2642: LD_EXP 22
2646: PPUSH
2647: LD_INT 124
2649: PPUSH
2650: LD_INT 25
2652: PPUSH
2653: CALL_OW 171
// end ; end_of_file
2657: END
// export Johnny ; export function PrepareJohnny ; begin
2658: LD_INT 0
2660: PPUSH
// uc_side := 1 ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// uc_nation := 1 ;
2669: LD_ADDR_OWVAR 21
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2677: LD_ADDR_EXP 23
2681: PUSH
2682: LD_STRING Harris
2684: PPUSH
2685: CALL_OW 25
2689: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2690: LD_EXP 23
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2702: LD_EXP 23
2706: PPUSH
2707: LD_INT 8
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL_OW 49
// ComCrawl ( Johnny ) ;
2717: LD_EXP 23
2721: PPUSH
2722: CALL_OW 137
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PreparePatrolTank ; var veh , un ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
// uc_side := 1 ;
2736: LD_ADDR_OWVAR 20
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// uc_nation := 1 ;
2744: LD_ADDR_OWVAR 21
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: LD_INT 1
2760: PPUSH
2761: CALL_OW 380
// un := CreateHuman ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2775: LD_ADDR_OWVAR 37
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// vc_engine := engine_combustion ;
2783: LD_ADDR_OWVAR 39
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// vc_control := control_manual ;
2791: LD_ADDR_OWVAR 38
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2799: LD_ADDR_OWVAR 40
2803: PUSH
2804: LD_INT 2
2806: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2807: LD_ADDR_OWVAR 41
2811: PUSH
2812: LD_INT 72
2814: PUSH
2815: LD_INT 54
2817: PUSH
2818: LD_INT 36
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_OWVAR 67
2830: ARRAY
2831: ST_TO_ADDR
// veh := CreateVehicle ;
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: CALL_OW 45
2841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2842: LD_VAR 0 2
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2854: LD_VAR 0 2
2858: PPUSH
2859: LD_INT 31
2861: PPUSH
2862: LD_INT 58
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: CALL_OW 52
// result := un ;
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_VAR 0 3
2895: ST_TO_ADDR
// end ; end_of_file
2896: LD_VAR 0 1
2900: RET
// export function Action ; begin
2901: LD_INT 0
2903: PPUSH
// InGameOn ;
2904: CALL_OW 8
// wait ( 0 0$4 ) ;
2908: LD_INT 140
2910: PPUSH
2911: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2915: LD_EXP 14
2919: PPUSH
2920: LD_STRING DH-start-1
2922: PPUSH
2923: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
2927: LD_EXP 14
2931: PPUSH
2932: LD_INT 71
2934: PPUSH
2935: LD_INT 29
2937: PPUSH
2938: CALL_OW 111
// wait ( 0 0$4 ) ;
2942: LD_INT 140
2944: PPUSH
2945: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
2949: LD_EXP 14
2953: PPUSH
2954: LD_INT 71
2956: PPUSH
2957: LD_INT 33
2959: PPUSH
2960: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
2964: LD_EXP 14
2968: PPUSH
2969: LD_INT 71
2971: PPUSH
2972: LD_INT 34
2974: PPUSH
2975: CALL_OW 178
// wait ( 0 0$4 ) ;
2979: LD_INT 140
2981: PPUSH
2982: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
2986: LD_EXP 14
2990: PPUSH
2991: LD_STRING DH-start-2
2993: PPUSH
2994: CALL_OW 88
// wait ( 0 0$4 ) ;
2998: LD_INT 140
3000: PPUSH
3001: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3005: LD_EXP 14
3009: PPUSH
3010: LD_INT 65
3012: PPUSH
3013: LD_INT 26
3015: PPUSH
3016: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3020: LD_EXP 14
3024: PPUSH
3025: LD_STRING DH-start-3
3027: PPUSH
3028: CALL_OW 88
// InGameOff ;
3032: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3036: LD_STRING O1_cont
3038: PPUSH
3039: CALL_OW 337
// SaveForQuickRestart ;
3043: CALL_OW 22
// missionStarted := true ;
3047: LD_ADDR_EXP 1
3051: PUSH
3052: LD_INT 1
3054: ST_TO_ADDR
// PrepareJohnny ;
3055: CALL 2658 0 0
// end ;
3059: LD_VAR 0 1
3063: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3064: LD_EXP 8
3068: NOT
3069: PUSH
3070: LD_EXP 7
3074: NOT
3075: AND
3076: PUSH
3077: LD_INT 2
3079: PPUSH
3080: LD_EXP 23
3084: PPUSH
3085: CALL_OW 292
3089: AND
3090: PUSH
3091: LD_INT 3
3093: PPUSH
3094: LD_EXP 14
3098: PPUSH
3099: CALL_OW 292
3103: NOT
3104: AND
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PPUSH
3121: LD_EXP 14
3125: PPUSH
3126: CALL_OW 74
3130: PUSH
3131: LD_EXP 23
3135: EQUAL
3136: AND
3137: PUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 2
3143: PPUSH
3144: CALL_OW 81
3148: PUSH
3149: LD_INT 0
3151: EQUAL
3152: AND
3153: IFFALSE 4072
3155: GO 3157
3157: DISABLE
// begin InGameOn ;
3158: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3162: LD_EXP 14
3166: PPUSH
3167: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3171: LD_EXP 23
3175: PPUSH
3176: LD_STRING DJ-ambush-1
3178: PPUSH
3179: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3183: LD_INT 10
3185: PPUSH
3186: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3190: LD_EXP 14
3194: PPUSH
3195: LD_EXP 23
3199: PPUSH
3200: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3204: LD_EXP 14
3208: PPUSH
3209: LD_STRING DH-ambush-1
3211: PPUSH
3212: CALL_OW 88
// wait ( 0 0$1 ) ;
3216: LD_INT 35
3218: PPUSH
3219: CALL_OW 67
// ComWalk ( Johnny ) ;
3223: LD_EXP 23
3227: PPUSH
3228: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3232: LD_EXP 23
3236: PPUSH
3237: LD_EXP 14
3241: PPUSH
3242: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3246: LD_INT 35
3248: PPUSH
3249: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3253: LD_EXP 23
3257: PPUSH
3258: LD_EXP 14
3262: PPUSH
3263: CALL_OW 296
3267: PUSH
3268: LD_INT 4
3270: LESS
3271: IFFALSE 3246
// ComTurnUnit ( Johnny , Heike ) ;
3273: LD_EXP 23
3277: PPUSH
3278: LD_EXP 14
3282: PPUSH
3283: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3287: LD_EXP 23
3291: PPUSH
3292: LD_STRING DJ-ambush-2
3294: PPUSH
3295: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3299: LD_EXP 14
3303: PPUSH
3304: LD_STRING DH-ambush-2
3306: PPUSH
3307: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3311: LD_EXP 23
3315: PPUSH
3316: LD_STRING DJ-ambush-3
3318: PPUSH
3319: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3323: LD_EXP 14
3327: PPUSH
3328: LD_STRING DH-ambush-3
3330: PPUSH
3331: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3335: LD_EXP 23
3339: PPUSH
3340: LD_STRING DJ-ambush-4
3342: PPUSH
3343: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3347: LD_EXP 14
3351: PPUSH
3352: LD_INT 39
3354: PPUSH
3355: LD_INT 22
3357: PPUSH
3358: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3362: LD_EXP 14
3366: PPUSH
3367: LD_STRING DH-ambush-4
3369: PPUSH
3370: CALL_OW 88
// PrepareRussianPatrol ;
3374: CALL 1219 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3378: LD_INT 39
3380: PPUSH
3381: LD_INT 22
3383: PPUSH
3384: LD_INT 2
3386: PPUSH
3387: LD_INT 12
3389: NEG
3390: PPUSH
3391: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3395: LD_INT 39
3397: PPUSH
3398: LD_INT 22
3400: PPUSH
3401: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3405: LD_EXP 19
3409: PPUSH
3410: LD_INT 39
3412: PPUSH
3413: LD_INT 23
3415: PPUSH
3416: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3420: LD_EXP 14
3424: PUSH
3425: LD_EXP 23
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: PPUSH
3434: LD_INT 39
3436: PPUSH
3437: LD_INT 7
3439: PPUSH
3440: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3444: LD_EXP 14
3448: PUSH
3449: LD_EXP 23
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: LD_EXP 19
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3471: LD_EXP 19
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_STRING DR-ambush-5
3482: PPUSH
3483: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3487: LD_EXP 19
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: LD_STRING DR1-ambush-5
3498: PPUSH
3499: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3503: LD_INT 35
3505: PPUSH
3506: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3510: LD_EXP 14
3514: PPUSH
3515: LD_INT 39
3517: PPUSH
3518: LD_INT 7
3520: PPUSH
3521: CALL_OW 297
3525: PUSH
3526: LD_INT 6
3528: LESS
3529: IFFALSE 3503
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3531: LD_EXP 14
3535: PPUSH
3536: LD_EXP 19
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: PPUSH
3545: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3549: LD_EXP 23
3553: PPUSH
3554: LD_EXP 14
3558: PPUSH
3559: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3563: LD_EXP 23
3567: PPUSH
3568: LD_STRING DJ-ambush-6
3570: PPUSH
3571: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3575: LD_EXP 14
3579: PPUSH
3580: LD_STRING DH-ambush-6
3582: PPUSH
3583: CALL_OW 88
// InGameOff ;
3587: CALL_OW 9
// meetJohnny := true ;
3591: LD_ADDR_EXP 3
3595: PUSH
3596: LD_INT 1
3598: ST_TO_ADDR
// ComFree ( Johnny ) ;
3599: LD_EXP 23
3603: PPUSH
3604: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3608: LD_STRING O2_ambush_cont
3610: PPUSH
3611: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3615: LD_EXP 19
3619: PUSH
3620: LD_EXP 19
3624: ARRAY
3625: PPUSH
3626: LD_INT 29
3628: PPUSH
3629: LD_INT 15
3631: PPUSH
3632: CALL_OW 111
// wait ( 0 0$2 ) ;
3636: LD_INT 70
3638: PPUSH
3639: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3643: LD_INT 3
3645: PPUSH
3646: LD_EXP 14
3650: PPUSH
3651: CALL_OW 292
3655: NOT
3656: PUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_EXP 23
3664: PPUSH
3665: CALL_OW 292
3669: NOT
3670: AND
3671: IFFALSE 3692
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3673: LD_EXP 19
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: PPUSH
3682: LD_INT 58
3684: PPUSH
3685: LD_INT 32
3687: PPUSH
3688: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3692: LD_INT 1750
3694: PUSH
3695: LD_INT 1400
3697: PUSH
3698: LD_INT 1225
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: LD_OWVAR 67
3710: ARRAY
3711: PPUSH
3712: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3716: LD_EXP 19
3720: PPUSH
3721: LD_INT 43
3723: PPUSH
3724: LD_INT 13
3726: PPUSH
3727: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3731: LD_INT 35
3733: PPUSH
3734: CALL_OW 67
// until not russianPatrol ;
3738: LD_EXP 19
3742: NOT
3743: IFFALSE 3731
// RemoveSeeing ( 39 , 22 , 2 ) ;
3745: LD_INT 39
3747: PPUSH
3748: LD_INT 22
3750: PPUSH
3751: LD_INT 2
3753: PPUSH
3754: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 2
3763: PPUSH
3764: CALL_OW 81
3768: PUSH
3769: LD_INT 2
3771: EQUAL
3772: IFFALSE 3776
// exit ;
3774: GO 4072
// if not IsOk ( Johnny ) then
3776: LD_EXP 23
3780: PPUSH
3781: CALL_OW 302
3785: NOT
3786: IFFALSE 3797
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3788: LD_STRING O2_ambush_out_cont
3790: PPUSH
3791: CALL_OW 337
// exit ;
3795: GO 4072
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3797: LD_EXP 14
3801: PPUSH
3802: LD_EXP 23
3806: PPUSH
3807: CALL_OW 296
3811: PUSH
3812: LD_INT 10
3814: GREATER
3815: IFFALSE 3858
// begin ComMoveUnit ( Johnny , Heike ) ;
3817: LD_EXP 23
3821: PPUSH
3822: LD_EXP 14
3826: PPUSH
3827: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3831: LD_INT 35
3833: PPUSH
3834: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3838: LD_EXP 23
3842: PPUSH
3843: LD_EXP 14
3847: PPUSH
3848: CALL_OW 296
3852: PUSH
3853: LD_INT 6
3855: LESS
3856: IFFALSE 3831
// end ; CenterNowOnUnits ( Heike ) ;
3858: LD_EXP 14
3862: PPUSH
3863: CALL_OW 87
// InGameOn ;
3867: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3871: LD_EXP 14
3875: PPUSH
3876: LD_EXP 23
3880: PPUSH
3881: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3885: LD_EXP 23
3889: PPUSH
3890: LD_EXP 14
3894: PPUSH
3895: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3899: LD_EXP 23
3903: PPUSH
3904: LD_STRING DJ-thanks-1
3906: PPUSH
3907: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
3911: LD_EXP 14
3915: PPUSH
3916: LD_STRING DH-thanks-1
3918: PPUSH
3919: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
3923: LD_EXP 23
3927: PPUSH
3928: LD_STRING DJ-thanks-2
3930: PPUSH
3931: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
3935: LD_EXP 23
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: LD_INT 3
3945: PPUSH
3946: CALL_OW 111
// wait ( 0 0$1 ) ;
3950: LD_INT 35
3952: PPUSH
3953: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_STRING DH-thanks-2
3964: PPUSH
3965: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3969: LD_INT 35
3971: PPUSH
3972: CALL_OW 67
// until not See ( 2 , Johnny ) ;
3976: LD_INT 2
3978: PPUSH
3979: LD_EXP 23
3983: PPUSH
3984: CALL_OW 292
3988: NOT
3989: IFFALSE 3969
// Say ( Heike , DH-thanks-2a ) ;
3991: LD_EXP 14
3995: PPUSH
3996: LD_STRING DH-thanks-2a
3998: PPUSH
3999: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4003: LD_EXP 23
4007: PPUSH
4008: CALL_OW 64
// InGameOff ;
4012: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4016: LD_STRING O2_ambush_out_cont
4018: PPUSH
4019: CALL_OW 337
// johnnySaved := true ;
4023: LD_ADDR_EXP 4
4027: PUSH
4028: LD_INT 1
4030: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4031: LD_EXP 14
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 600
4041: PPUSH
4042: CALL_OW 492
// if IsOk ( Olaf ) then
4046: LD_EXP 15
4050: PPUSH
4051: CALL_OW 302
4055: IFFALSE 4072
// ComMoveXY ( Olaf , 44 , 25 ) ;
4057: LD_EXP 15
4061: PPUSH
4062: LD_INT 44
4064: PPUSH
4065: LD_INT 25
4067: PPUSH
4068: CALL_OW 111
// end ;
4072: END
// every 0 0$1 trigger russianPatrol do var i ;
4073: LD_EXP 19
4077: IFFALSE 4145
4079: GO 4081
4081: DISABLE
4082: LD_INT 0
4084: PPUSH
// begin enable ;
4085: ENABLE
// for i in russianPatrol do
4086: LD_ADDR_VAR 0 1
4090: PUSH
4091: LD_EXP 19
4095: PUSH
4096: FOR_IN
4097: IFFALSE 4143
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4099: LD_VAR 0 1
4103: PPUSH
4104: CALL_OW 256
4108: PUSH
4109: LD_INT 1000
4111: LESS
4112: PUSH
4113: LD_VAR 0 1
4117: PPUSH
4118: CALL_OW 314
4122: NOT
4123: AND
4124: IFFALSE 4141
// ComAgressiveMove ( i , 42 , 12 ) ;
4126: LD_VAR 0 1
4130: PPUSH
4131: LD_INT 42
4133: PPUSH
4134: LD_INT 12
4136: PPUSH
4137: CALL_OW 114
4141: GO 4096
4143: POP
4144: POP
// end ;
4145: PPOPN 1
4147: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4148: LD_INT 1
4150: PPUSH
4151: LD_INT 2
4153: PPUSH
4154: CALL_OW 81
4158: PUSH
4159: LD_INT 2
4161: EQUAL
4162: PUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 302
4172: AND
4173: IFFALSE 4190
4175: GO 4177
4177: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4178: LD_EXP 23
4182: PPUSH
4183: LD_STRING DJ-fire-1
4185: PPUSH
4186: CALL_OW 88
4190: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4191: LD_EXP 7
4195: NOT
4196: PUSH
4197: LD_EXP 21
4201: PPUSH
4202: LD_INT 101
4204: PUSH
4205: LD_INT 2
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PPUSH
4212: CALL_OW 72
4216: AND
4217: IFFALSE 4337
4219: GO 4221
4221: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4222: LD_EXP 14
4226: PPUSH
4227: CALL_OW 87
// DialogueOn ;
4231: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4235: LD_EXP 14
4239: PPUSH
4240: LD_STRING DH-see-enemy-patrol-1
4242: PPUSH
4243: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4247: LD_EXP 21
4251: PPUSH
4252: LD_INT 26
4254: PUSH
4255: LD_INT 1
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 72
4266: PUSH
4267: LD_INT 1
4269: ARRAY
4270: PPUSH
4271: LD_STRING DR-see-enemy-patrol-1
4273: PPUSH
4274: CALL_OW 88
// DialogueOff ;
4278: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4282: LD_EXP 21
4286: PPUSH
4287: LD_INT 66
4289: PPUSH
4290: LD_INT 22
4292: PPUSH
4293: CALL_OW 114
// wait ( 0 0$10 ) ;
4297: LD_INT 350
4299: PPUSH
4300: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4304: LD_EXP 21
4308: PPUSH
4309: LD_INT 175
4311: PPUSH
4312: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4316: LD_EXP 21
4320: PPUSH
4321: LD_INT 9
4323: PPUSH
4324: CALL_OW 173
// AddComFree ( russianForces ) ;
4328: LD_EXP 21
4332: PPUSH
4333: CALL_OW 199
// end ;
4337: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4338: LD_EXP 21
4342: PPUSH
4343: LD_INT 3
4345: PUSH
4346: LD_INT 24
4348: PUSH
4349: LD_INT 960
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PPUSH
4360: CALL_OW 72
4364: IFFALSE 4608
4366: GO 4368
4368: DISABLE
4369: LD_INT 0
4371: PPUSH
4372: PPUSH
4373: PPUSH
4374: PPUSH
// begin enable ;
4375: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4376: LD_ADDR_VAR 0 2
4380: PUSH
4381: LD_INT 22
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 69
4395: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4396: LD_ADDR_VAR 0 3
4400: PUSH
4401: LD_EXP 21
4405: PPUSH
4406: LD_INT 1
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 24
4414: PUSH
4415: LD_INT 960
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 24
4424: PUSH
4425: LD_INT 500
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PPUSH
4441: CALL_OW 72
4445: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4446: LD_ADDR_VAR 0 4
4450: PUSH
4451: LD_EXP 21
4455: PPUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 24
4461: PUSH
4462: LD_INT 500
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PPUSH
4473: CALL_OW 72
4477: ST_TO_ADDR
// if not tmp then
4478: LD_VAR 0 2
4482: NOT
4483: IFFALSE 4487
// exit ;
4485: GO 4608
// tmp := NearestUnitToUnit ( tmp2 [ 1 ] , tmp ) ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_VAR 0 3
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: PPUSH
4501: LD_VAR 0 2
4505: PPUSH
4506: CALL_OW 74
4510: ST_TO_ADDR
// if GetDistUnits ( tmp , tmp2 [ 1 ] ) < 10 then
4511: LD_VAR 0 2
4515: PPUSH
4516: LD_VAR 0 3
4520: PUSH
4521: LD_INT 1
4523: ARRAY
4524: PPUSH
4525: CALL_OW 296
4529: PUSH
4530: LD_INT 10
4532: LESS
4533: IFFALSE 4549
// ComAttackUnit ( tmp2 , tmp ) ;
4535: LD_VAR 0 3
4539: PPUSH
4540: LD_VAR 0 2
4544: PPUSH
4545: CALL_OW 115
// if tmp3 then
4549: LD_VAR 0 4
4553: IFFALSE 4608
// for i in tmp do
4555: LD_ADDR_VAR 0 1
4559: PUSH
4560: LD_VAR 0 2
4564: PUSH
4565: FOR_IN
4566: IFFALSE 4606
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4568: LD_VAR 0 1
4572: PPUSH
4573: LD_INT 119
4575: PPUSH
4576: LD_INT 21
4578: PPUSH
4579: CALL_OW 297
4583: PUSH
4584: LD_INT 10
4586: GREATER
4587: IFFALSE 4604
// ComMoveXY ( i , 119 , 21 ) ;
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 119
4596: PPUSH
4597: LD_INT 21
4599: PPUSH
4600: CALL_OW 111
4604: GO 4565
4606: POP
4607: POP
// end ;
4608: PPOPN 4
4610: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4611: LD_EXP 1
4615: PUSH
4616: LD_EXP 8
4620: NOT
4621: AND
4622: PUSH
4623: LD_EXP 7
4627: NOT
4628: AND
4629: PUSH
4630: LD_EXP 14
4634: PPUSH
4635: LD_INT 25
4637: PUSH
4638: LD_INT 14
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PPUSH
4650: LD_EXP 14
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 296
4664: PUSH
4665: LD_INT 6
4667: LESS
4668: AND
4669: IFFALSE 4686
4671: GO 4673
4673: DISABLE
// Say ( Heike , DH-tiger-1 ) ;
4674: LD_EXP 14
4678: PPUSH
4679: LD_STRING DH-tiger-1
4681: PPUSH
4682: CALL_OW 88
4686: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4687: LD_EXP 1
4691: PUSH
4692: LD_EXP 8
4696: NOT
4697: AND
4698: PUSH
4699: LD_EXP 7
4703: NOT
4704: AND
4705: PUSH
4706: LD_EXP 14
4710: PPUSH
4711: LD_INT 25
4713: PUSH
4714: LD_INT 12
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 69
4725: PPUSH
4726: LD_EXP 14
4730: PPUSH
4731: CALL_OW 74
4735: PPUSH
4736: CALL_OW 296
4740: PUSH
4741: LD_INT 6
4743: LESS
4744: AND
4745: IFFALSE 4762
4747: GO 4749
4749: DISABLE
// Say ( Heike , DH-ape-1 ) ;
4750: LD_EXP 14
4754: PPUSH
4755: LD_STRING DH-ape-1
4757: PPUSH
4758: CALL_OW 88
4762: END
// every 0 0$2 trigger missionStarted and not olafSpotted and not mercenariesSpotted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4763: LD_EXP 1
4767: PUSH
4768: LD_EXP 8
4772: NOT
4773: AND
4774: PUSH
4775: LD_EXP 7
4779: NOT
4780: AND
4781: PUSH
4782: LD_EXP 14
4786: PPUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 18
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 69
4801: PPUSH
4802: LD_EXP 14
4806: PPUSH
4807: CALL_OW 74
4811: PPUSH
4812: CALL_OW 296
4816: PUSH
4817: LD_INT 6
4819: LESS
4820: AND
4821: IFFALSE 4838
4823: GO 4825
4825: DISABLE
// Say ( Heike , DH-bird-1 ) ;
4826: LD_EXP 14
4830: PPUSH
4831: LD_STRING DH-bird-1
4833: PPUSH
4834: CALL_OW 88
4838: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4839: LD_INT 22
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 101
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: IFFALSE 4880
4869: GO 4871
4871: DISABLE
// russianSpotted := true ;
4872: LD_ADDR_EXP 9
4876: PUSH
4877: LD_INT 1
4879: ST_TO_ADDR
4880: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
4881: LD_EXP 14
4885: PPUSH
4886: LD_INT 22
4888: PUSH
4889: LD_INT 3
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 21
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: PPUSH
4915: LD_EXP 14
4919: PPUSH
4920: CALL_OW 74
4924: PPUSH
4925: CALL_OW 296
4929: PUSH
4930: LD_INT 8
4932: LESS
4933: IFFALSE 4950
4935: GO 4937
4937: DISABLE
// Say ( Heike , DH-enemy-base ) ;
4938: LD_EXP 14
4942: PPUSH
4943: LD_STRING DH-enemy-base
4945: PPUSH
4946: CALL_OW 88
4950: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
4951: LD_EXP 23
4955: PPUSH
4956: CALL_OW 305
4960: NOT
4961: PUSH
4962: LD_EXP 6
4966: NOT
4967: AND
4968: PUSH
4969: LD_EXP 5
4973: AND
4974: PUSH
4975: LD_EXP 12
4979: NOT
4980: AND
4981: PUSH
4982: LD_EXP 11
4986: NOT
4987: AND
4988: IFFALSE 5139
4990: GO 4992
4992: DISABLE
4993: LD_INT 0
4995: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4996: LD_INT 35
4998: PPUSH
4999: CALL_OW 67
// for i in dogTag do
5003: LD_ADDR_VAR 0 1
5007: PUSH
5008: LD_EXP 5
5012: PUSH
5013: FOR_IN
5014: IFFALSE 5063
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5016: LD_EXP 14
5020: PPUSH
5021: LD_VAR 0 1
5025: PUSH
5026: LD_INT 1
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 1
5034: PUSH
5035: LD_INT 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 297
5043: PUSH
5044: LD_INT 3
5046: LESS
5047: IFFALSE 5061
// begin dogTagFound := i ;
5049: LD_ADDR_EXP 6
5053: PUSH
5054: LD_VAR 0 1
5058: ST_TO_ADDR
// break ;
5059: GO 5063
// end ;
5061: GO 5013
5063: POP
5064: POP
// until dogTagFound ;
5065: LD_EXP 6
5069: IFFALSE 4996
// CenterNowOnUnits ( Heike ) ;
5071: LD_EXP 14
5075: PPUSH
5076: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5080: LD_EXP 14
5084: PPUSH
5085: LD_EXP 6
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_EXP 6
5098: PUSH
5099: LD_INT 2
5101: ARRAY
5102: PPUSH
5103: CALL_OW 111
// if mercenariesQuestReady then
5107: LD_EXP 10
5111: IFFALSE 5127
// Say ( Heike , DH-dogtag-found-quest ) else
5113: LD_EXP 14
5117: PPUSH
5118: LD_STRING DH-dogtag-found-quest
5120: PPUSH
5121: CALL_OW 88
5125: GO 5139
// Say ( Heike , DH-dogtag-found ) ;
5127: LD_EXP 14
5131: PPUSH
5132: LD_STRING DH-dogtag-found
5134: PPUSH
5135: CALL_OW 88
// end ;
5139: PPOPN 1
5141: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5142: LD_EXP 8
5146: NOT
5147: PUSH
5148: LD_EXP 7
5152: NOT
5153: AND
5154: PUSH
5155: LD_INT 5
5157: PPUSH
5158: LD_EXP 14
5162: PPUSH
5163: CALL_OW 292
5167: AND
5168: PUSH
5169: LD_EXP 14
5173: PPUSH
5174: LD_EXP 15
5178: PPUSH
5179: CALL_OW 296
5183: PUSH
5184: LD_INT 8
5186: LESS
5187: AND
5188: IFFALSE 5549
5190: GO 5192
5192: DISABLE
// begin olafSpotted := true ;
5193: LD_ADDR_EXP 8
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if HasTask ( Olaf ) then
5201: LD_EXP 15
5205: PPUSH
5206: CALL_OW 314
5210: IFFALSE 5221
// ComStop ( Olaf ) ;
5212: LD_EXP 15
5216: PPUSH
5217: CALL_OW 141
// InGameOn ;
5221: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5225: LD_EXP 15
5229: PPUSH
5230: LD_EXP 14
5234: PPUSH
5235: CALL_OW 296
5239: PUSH
5240: LD_INT 8
5242: GREATER
5243: IFFALSE 5259
// ComMoveUnit ( Olaf , Heike ) ;
5245: LD_EXP 15
5249: PPUSH
5250: LD_EXP 14
5254: PPUSH
5255: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5259: LD_INT 35
5261: PPUSH
5262: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5266: LD_EXP 15
5270: PPUSH
5271: LD_EXP 14
5275: PPUSH
5276: CALL_OW 296
5280: PUSH
5281: LD_INT 8
5283: LESSEQUAL
5284: IFFALSE 5259
// ComTurnUnit ( Heike , Olaf ) ;
5286: LD_EXP 14
5290: PPUSH
5291: LD_EXP 15
5295: PPUSH
5296: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5300: LD_EXP 15
5304: PPUSH
5305: LD_EXP 14
5309: PPUSH
5310: CALL_OW 119
// Say ( Olaf , DO-olaf-1 ) ;
5314: LD_EXP 15
5318: PPUSH
5319: LD_STRING DO-olaf-1
5321: PPUSH
5322: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5326: LD_EXP 14
5330: PPUSH
5331: LD_STRING DH-olaf-1
5333: PPUSH
5334: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5338: LD_EXP 15
5342: PPUSH
5343: LD_STRING DO-olaf-2
5345: PPUSH
5346: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5350: LD_EXP 14
5354: PPUSH
5355: LD_STRING DH-olaf-2
5357: PPUSH
5358: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5362: LD_EXP 15
5366: PPUSH
5367: LD_STRING DO-olaf-3
5369: PPUSH
5370: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5374: LD_EXP 15
5378: PPUSH
5379: LD_STRING DO-olaf-4
5381: PPUSH
5382: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5386: LD_EXP 14
5390: PPUSH
5391: LD_STRING DH-olaf-4
5393: PPUSH
5394: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5398: LD_EXP 15
5402: PPUSH
5403: LD_STRING DO-olaf-5
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5410: LD_EXP 14
5414: PPUSH
5415: LD_STRING DH-olaf-5
5417: PPUSH
5418: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5422: LD_EXP 15
5426: PPUSH
5427: LD_STRING DO-olaf-6
5429: PPUSH
5430: CALL_OW 88
// if russianSpotted or johnnySaved then
5434: LD_EXP 9
5438: PUSH
5439: LD_EXP 4
5443: OR
5444: IFFALSE 5472
// begin Say ( Heike , DH-olaf-6a ) ;
5446: LD_EXP 14
5450: PPUSH
5451: LD_STRING DH-olaf-6a
5453: PPUSH
5454: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5458: LD_EXP 15
5462: PPUSH
5463: LD_STRING DO-olaf-7a
5465: PPUSH
5466: CALL_OW 88
// end else
5470: GO 5496
// begin Say ( Heike , DH-olaf-6b ) ;
5472: LD_EXP 14
5476: PPUSH
5477: LD_STRING DH-olaf-6b
5479: PPUSH
5480: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5484: LD_EXP 15
5488: PPUSH
5489: LD_STRING DO-olaf-7b
5491: PPUSH
5492: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5496: LD_EXP 15
5500: PPUSH
5501: LD_STRING DO-olaf-8
5503: PPUSH
5504: CALL_OW 88
// InGameOff ;
5508: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5512: LD_STRING O3_camp_cont
5514: PPUSH
5515: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5519: LD_EXP 15
5523: PPUSH
5524: LD_INT 52
5526: PPUSH
5527: LD_INT 90
5529: PPUSH
5530: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5534: LD_EXP 15
5538: PPUSH
5539: LD_INT 53
5541: PPUSH
5542: LD_INT 89
5544: PPUSH
5545: CALL_OW 178
// end ;
5549: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5550: LD_EXP 8
5554: NOT
5555: PUSH
5556: LD_EXP 14
5560: PPUSH
5561: LD_EXP 16
5565: PPUSH
5566: CALL_OW 296
5570: PUSH
5571: LD_INT 36
5573: LESS
5574: AND
5575: IFFALSE 5595
5577: GO 5579
5579: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5580: LD_EXP 15
5584: PPUSH
5585: LD_INT 39
5587: PPUSH
5588: LD_INT 71
5590: PPUSH
5591: CALL_OW 111
5595: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5596: LD_EXP 7
5600: NOT
5601: PUSH
5602: LD_INT 2
5604: PPUSH
5605: LD_EXP 17
5609: PPUSH
5610: CALL_OW 292
5614: PUSH
5615: LD_INT 2
5617: PPUSH
5618: LD_EXP 16
5622: PPUSH
5623: CALL_OW 292
5627: OR
5628: AND
5629: IFFALSE 6954
5631: GO 5633
5633: DISABLE
5634: LD_INT 0
5636: PPUSH
5637: PPUSH
5638: PPUSH
// begin if IsLive ( Johnny ) then
5639: LD_EXP 23
5643: PPUSH
5644: CALL_OW 300
5648: IFFALSE 5659
// KillUnit ( Johnny ) ;
5650: LD_EXP 23
5654: PPUSH
5655: CALL_OW 66
// mercenariesSpotted := true ;
5659: LD_ADDR_EXP 7
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5667: LD_STRING O4_camp_cont
5669: PPUSH
5670: CALL_OW 337
// InGameOn ;
5674: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5678: LD_INT 53
5680: PPUSH
5681: LD_INT 89
5683: PPUSH
5684: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5688: LD_INT 53
5690: PPUSH
5691: LD_INT 89
5693: PPUSH
5694: LD_INT 2
5696: PPUSH
5697: LD_INT 8
5699: NEG
5700: PPUSH
5701: CALL_OW 330
// if olafSpotted then
5705: LD_EXP 8
5709: IFFALSE 5827
// begin AddComTurnUnit ( Olaf , Heike ) ;
5711: LD_EXP 15
5715: PPUSH
5716: LD_EXP 14
5720: PPUSH
5721: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5725: LD_EXP 14
5729: PPUSH
5730: LD_INT 51
5732: PPUSH
5733: LD_INT 86
5735: PPUSH
5736: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5740: LD_EXP 14
5744: PPUSH
5745: LD_EXP 15
5749: PPUSH
5750: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5754: LD_EXP 15
5758: PPUSH
5759: LD_STRING DO-camp-1
5761: PPUSH
5762: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5766: LD_EXP 16
5770: PUSH
5771: LD_EXP 17
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PPUSH
5780: LD_EXP 14
5784: PPUSH
5785: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5789: LD_EXP 16
5793: PPUSH
5794: LD_STRING DG-camp-1
5796: PPUSH
5797: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5801: LD_EXP 14
5805: PPUSH
5806: LD_STRING DH-camp-1
5808: PPUSH
5809: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5813: LD_EXP 15
5817: PPUSH
5818: LD_STRING DO-camp-2
5820: PPUSH
5821: CALL_OW 88
// end else
5825: GO 6222
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5827: LD_EXP 14
5831: PPUSH
5832: LD_INT 51
5834: PPUSH
5835: LD_INT 86
5837: PPUSH
5838: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5842: LD_EXP 14
5846: PPUSH
5847: LD_EXP 16
5851: PPUSH
5852: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5856: LD_EXP 16
5860: PUSH
5861: LD_EXP 17
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: LD_EXP 14
5874: PPUSH
5875: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
5879: LD_EXP 16
5883: PPUSH
5884: LD_STRING DG-camp-1a
5886: PPUSH
5887: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
5891: LD_EXP 14
5895: PPUSH
5896: LD_STRING DH-camp-1a
5898: PPUSH
5899: CALL_OW 88
// wait ( 0 0$0.03 ) ;
5903: LD_INT 1
5905: PPUSH
5906: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
5910: LD_EXP 17
5914: PPUSH
5915: LD_EXP 15
5919: PPUSH
5920: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
5924: LD_EXP 17
5928: PPUSH
5929: LD_STRING DM-camp-1a
5931: PPUSH
5932: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
5936: LD_EXP 15
5940: PPUSH
5941: LD_INT 52
5943: PPUSH
5944: LD_INT 90
5946: PPUSH
5947: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
5951: LD_EXP 17
5955: PPUSH
5956: LD_EXP 14
5960: PPUSH
5961: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
5965: LD_EXP 16
5969: PPUSH
5970: LD_STRING DG-camp-2a
5972: PPUSH
5973: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
5977: LD_EXP 14
5981: PPUSH
5982: LD_STRING DH-camp-2a
5984: PPUSH
5985: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
5989: LD_EXP 17
5993: PPUSH
5994: LD_STRING DM-camp-2a
5996: PPUSH
5997: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6001: LD_INT 35
6003: PPUSH
6004: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6008: LD_EXP 15
6012: PPUSH
6013: LD_EXP 14
6017: PPUSH
6018: CALL_OW 296
6022: PUSH
6023: LD_INT 10
6025: LESS
6026: IFFALSE 6001
// AddComTurnUnit ( Olaf , Heike ) ;
6028: LD_EXP 15
6032: PPUSH
6033: LD_EXP 14
6037: PPUSH
6038: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6042: LD_EXP 17
6046: PPUSH
6047: LD_EXP 14
6051: PPUSH
6052: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6056: LD_EXP 15
6060: PPUSH
6061: LD_STRING DO-camp-2a
6063: PPUSH
6064: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6068: LD_EXP 14
6072: PPUSH
6073: LD_EXP 15
6077: PPUSH
6078: CALL_OW 119
// if russianSpotted then
6082: LD_EXP 9
6086: IFFALSE 6126
// begin Say ( Heike , DH-camp-2aa ) ;
6088: LD_EXP 14
6092: PPUSH
6093: LD_STRING DH-camp-2aa
6095: PPUSH
6096: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6100: LD_EXP 16
6104: PPUSH
6105: LD_STRING DG-camp-2aa
6107: PPUSH
6108: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6112: LD_EXP 17
6116: PPUSH
6117: LD_STRING DM-camp-2aa
6119: PPUSH
6120: CALL_OW 88
// end else
6124: GO 6150
// begin Say ( Heike , DH-camp-2ab ) ;
6126: LD_EXP 14
6130: PPUSH
6131: LD_STRING DH-camp-2ab
6133: PPUSH
6134: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6138: LD_EXP 17
6142: PPUSH
6143: LD_STRING DM-camp-2ab
6145: PPUSH
6146: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6150: LD_EXP 14
6154: PPUSH
6155: LD_STRING DH-camp-3a
6157: PPUSH
6158: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6162: LD_EXP 15
6166: PPUSH
6167: LD_STRING DO-camp-3a
6169: PPUSH
6170: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6174: LD_EXP 16
6178: PPUSH
6179: LD_STRING DG-camp-3a
6181: PPUSH
6182: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6186: LD_EXP 14
6190: PPUSH
6191: LD_STRING DH-camp-4aa
6193: PPUSH
6194: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6198: LD_EXP 17
6202: PPUSH
6203: LD_STRING DM-camp-4aa
6205: PPUSH
6206: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6210: LD_EXP 15
6214: PPUSH
6215: LD_STRING DO-camp-4a
6217: PPUSH
6218: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6222: LD_EXP 15
6226: PPUSH
6227: LD_STRING DO-camp-3
6229: PPUSH
6230: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6234: LD_EXP 15
6238: PPUSH
6239: LD_STRING DO-camp-4
6241: PPUSH
6242: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6246: LD_EXP 16
6250: PPUSH
6251: LD_EXP 15
6255: PPUSH
6256: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6260: LD_EXP 16
6264: PPUSH
6265: LD_STRING DG-camp-4
6267: PPUSH
6268: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6272: LD_EXP 14
6276: PPUSH
6277: LD_EXP 16
6281: PPUSH
6282: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6286: LD_EXP 14
6290: PPUSH
6291: LD_STRING DH-camp-4
6293: PPUSH
6294: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6298: LD_EXP 17
6302: PUSH
6303: LD_EXP 15
6307: PUSH
6308: LD_EXP 16
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: PPUSH
6318: LD_EXP 14
6322: PPUSH
6323: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6327: LD_EXP 16
6331: PPUSH
6332: LD_STRING DG-camp-5
6334: PPUSH
6335: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6339: LD_EXP 16
6343: PPUSH
6344: LD_STRING DG-camp-6
6346: PPUSH
6347: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6351: LD_EXP 14
6355: PPUSH
6356: LD_STRING DH-camp-6
6358: PPUSH
6359: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6363: LD_EXP 16
6367: PPUSH
6368: LD_STRING DG-camp-7
6370: PPUSH
6371: CALL_OW 88
// if DogTagFound then
6375: LD_EXP 6
6379: IFFALSE 6419
// begin Say ( Heike , DH-quest-1a ) ;
6381: LD_EXP 14
6385: PPUSH
6386: LD_STRING DH-quest-1a
6388: PPUSH
6389: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6393: LD_EXP 16
6397: PPUSH
6398: LD_STRING DG-quest-1a
6400: PPUSH
6401: CALL_OW 88
// mercenariesQuestDone := true ;
6405: LD_ADDR_EXP 11
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// InGameOff ;
6413: CALL_OW 9
// end else
6417: GO 6585
// begin Say ( Heike , DH-camp-7 ) ;
6419: LD_EXP 14
6423: PPUSH
6424: LD_STRING DH-camp-7
6426: PPUSH
6427: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6431: LD_EXP 14
6435: PPUSH
6436: CALL_OW 256
6440: PUSH
6441: LD_INT 1000
6443: LESS
6444: IFFALSE 6536
// begin Say ( Olaf , DO-heal-1 ) ;
6446: LD_EXP 15
6450: PPUSH
6451: LD_STRING DO-heal-1
6453: PPUSH
6454: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6458: LD_EXP 14
6462: PPUSH
6463: LD_INT 51
6465: PPUSH
6466: LD_INT 88
6468: PPUSH
6469: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6473: LD_INT 35
6475: PPUSH
6476: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6480: LD_EXP 14
6484: PPUSH
6485: LD_EXP 15
6489: PPUSH
6490: CALL_OW 296
6494: PUSH
6495: LD_INT 4
6497: LESS
6498: PUSH
6499: LD_EXP 14
6503: PPUSH
6504: LD_INT 51
6506: PPUSH
6507: LD_INT 88
6509: PPUSH
6510: CALL_OW 307
6514: OR
6515: IFFALSE 6473
// SetLives ( Heike , 1000 ) ;
6517: LD_EXP 14
6521: PPUSH
6522: LD_INT 1000
6524: PPUSH
6525: CALL_OW 234
// wait ( 0 0$2 ) ;
6529: LD_INT 70
6531: PPUSH
6532: CALL_OW 67
// end ; InGameOff ;
6536: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6540: LD_EXP 15
6544: PUSH
6545: LD_EXP 16
6549: PUSH
6550: LD_EXP 17
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PPUSH
6560: LD_INT 53
6562: PPUSH
6563: LD_INT 89
6565: PPUSH
6566: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6570: LD_STRING O5_proof_cont
6572: PPUSH
6573: CALL_OW 337
// mercenariesQuestReady := true ;
6577: LD_ADDR_EXP 10
6581: PUSH
6582: LD_INT 1
6584: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6585: LD_EXP 10
6589: NOT
6590: IFFALSE 6594
// exit ;
6592: GO 6954
// wait ( 0 0$35 ) ;
6594: LD_INT 1225
6596: PPUSH
6597: CALL_OW 67
// driver := PreparePatrolTank ;
6601: LD_ADDR_VAR 0 2
6605: PUSH
6606: CALL 2731 0 0
6610: ST_TO_ADDR
// if not driver then
6611: LD_VAR 0 2
6615: NOT
6616: IFFALSE 6620
// exit ;
6618: GO 6954
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6620: LD_INT 2
6622: PPUSH
6623: LD_INT 1
6625: PPUSH
6626: LD_INT 2
6628: PPUSH
6629: LD_INT 1
6631: PPUSH
6632: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6636: LD_ADDR_VAR 0 3
6640: PUSH
6641: LD_VAR 0 2
6645: PPUSH
6646: CALL_OW 310
6650: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6651: LD_VAR 0 3
6655: PPUSH
6656: LD_INT 500
6658: PPUSH
6659: CALL_OW 234
// SetLives ( driver , 450 ) ;
6663: LD_VAR 0 2
6667: PPUSH
6668: LD_INT 450
6670: PPUSH
6671: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6675: LD_VAR 0 2
6679: PPUSH
6680: LD_INT 59
6682: PPUSH
6683: LD_INT 60
6685: PPUSH
6686: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6690: LD_INT 35
6692: PPUSH
6693: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 59
6704: PPUSH
6705: LD_INT 60
6707: PPUSH
6708: CALL_OW 307
6712: IFFALSE 6690
// if not See ( 1 , Heike ) then
6714: LD_INT 1
6716: PPUSH
6717: LD_EXP 14
6721: PPUSH
6722: CALL_OW 292
6726: NOT
6727: IFFALSE 6851
// begin if Difficulty < 3 then
6729: LD_OWVAR 67
6733: PUSH
6734: LD_INT 3
6736: LESS
6737: IFFALSE 6755
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6739: LD_INT 59
6741: PPUSH
6742: LD_INT 60
6744: PPUSH
6745: LD_INT 2
6747: PPUSH
6748: LD_INT 6
6750: PPUSH
6751: CALL_OW 330
// ComExitVehicle ( driver ) ;
6755: LD_VAR 0 2
6759: PPUSH
6760: CALL_OW 121
// wait ( 0 0$1 ) ;
6764: LD_INT 35
6766: PPUSH
6767: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6771: LD_VAR 0 2
6775: PPUSH
6776: LD_INT 58
6778: PPUSH
6779: LD_INT 54
6781: PPUSH
6782: CALL_OW 171
// wait ( 0 0$1 ) ;
6786: LD_INT 35
6788: PPUSH
6789: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_INT 57
6800: PPUSH
6801: LD_INT 53
6803: PPUSH
6804: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6808: LD_VAR 0 2
6812: PPUSH
6813: LD_INT 350
6815: PPUSH
6816: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6820: LD_VAR 0 2
6824: PPUSH
6825: LD_VAR 0 3
6829: PPUSH
6830: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6834: LD_VAR 0 2
6838: PPUSH
6839: LD_INT 107
6841: PPUSH
6842: LD_INT 118
6844: PPUSH
6845: CALL_OW 171
// end else
6849: GO 6866
// begin ComMoveXY ( driver , 107 , 118 ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_INT 107
6858: PPUSH
6859: LD_INT 118
6861: PPUSH
6862: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
6873: LD_VAR 0 3
6877: PPUSH
6878: LD_INT 107
6880: PPUSH
6881: LD_INT 118
6883: PPUSH
6884: CALL_OW 307
6888: PUSH
6889: LD_VAR 0 2
6893: PPUSH
6894: CALL_OW 301
6898: OR
6899: IFFALSE 6866
// if IsDead ( driver [ 1 ] ) then
6901: LD_VAR 0 2
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: CALL_OW 301
6914: IFFALSE 6918
// exit ;
6916: GO 6954
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6918: LD_ADDR_VAR 0 1
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: PUSH
6938: FOR_IN
6939: IFFALSE 6952
// RemoveUnit ( i ) ;
6941: LD_VAR 0 1
6945: PPUSH
6946: CALL_OW 64
6950: GO 6938
6952: POP
6953: POP
// end ;
6954: PPOPN 3
6956: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
6957: LD_INT 10
6959: PPUSH
6960: LD_INT 22
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 21
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL_OW 70
6988: IFFALSE 7062
6990: GO 6992
6992: DISABLE
// begin InGameOn ;
6993: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
6997: LD_EXP 15
7001: PUSH
7002: LD_EXP 17
7006: PUSH
7007: LD_EXP 16
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: PPUSH
7017: LD_EXP 14
7021: PPUSH
7022: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7026: LD_EXP 17
7030: PPUSH
7031: LD_STRING DM-quest-1
7033: PPUSH
7034: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7038: LD_EXP 16
7042: PPUSH
7043: LD_STRING DG-quest-1
7045: PPUSH
7046: CALL_OW 88
// InGameOff ;
7050: CALL_OW 9
// mercenariesQuestDone := true ;
7054: LD_ADDR_EXP 11
7058: PUSH
7059: LD_INT 1
7061: ST_TO_ADDR
// end ;
7062: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady do var p ;
7063: LD_EXP 14
7067: PPUSH
7068: LD_INT 10
7070: PPUSH
7071: CALL_OW 308
7075: PUSH
7076: LD_EXP 6
7080: AND
7081: PUSH
7082: LD_EXP 10
7086: AND
7087: IFFALSE 7259
7089: GO 7091
7091: DISABLE
7092: LD_INT 0
7094: PPUSH
// begin InGameOn ;
7095: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7099: LD_EXP 15
7103: PUSH
7104: LD_EXP 17
7108: PUSH
7109: LD_EXP 16
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PPUSH
7119: LD_EXP 14
7123: PPUSH
7124: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7128: LD_EXP 14
7132: PPUSH
7133: LD_INT 54
7135: PPUSH
7136: LD_INT 86
7138: PPUSH
7139: CALL_OW 111
// p := p + 1 ;
7143: LD_ADDR_VAR 0 1
7147: PUSH
7148: LD_VAR 0 1
7152: PUSH
7153: LD_INT 1
7155: PLUS
7156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7157: LD_INT 35
7159: PPUSH
7160: CALL_OW 67
// p := p + 1 ;
7164: LD_ADDR_VAR 0 1
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: LD_INT 1
7176: PLUS
7177: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7178: LD_EXP 14
7182: PPUSH
7183: LD_EXP 16
7187: PPUSH
7188: CALL_OW 296
7192: PUSH
7193: LD_INT 4
7195: LESS
7196: PUSH
7197: LD_VAR 0 1
7201: PUSH
7202: LD_INT 5
7204: GREATER
7205: OR
7206: IFFALSE 7157
// Say ( Mike , DM-quest-1 ) ;
7208: LD_EXP 17
7212: PPUSH
7213: LD_STRING DM-quest-1
7215: PPUSH
7216: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7220: LD_EXP 16
7224: PPUSH
7225: LD_STRING DG-quest-1
7227: PPUSH
7228: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7232: LD_EXP 14
7236: PPUSH
7237: LD_INT 55
7239: PPUSH
7240: LD_INT 87
7242: PPUSH
7243: CALL_OW 111
// InGameOff ;
7247: CALL_OW 9
// mercenariesQuestDone := true ;
7251: LD_ADDR_EXP 11
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// end ;
7259: PPOPN 1
7261: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7262: LD_EXP 14
7266: PUSH
7267: LD_INT 55
7269: PUSH
7270: EMPTY
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: IN
7278: IFFALSE 7318
7280: GO 7282
7282: DISABLE
// begin if Difficulty < 3 then
7283: LD_OWVAR 67
7287: PUSH
7288: LD_INT 3
7290: LESS
7291: IFFALSE 7306
// RemoveSeeing ( 59 , 60 , 2 ) ;
7293: LD_INT 59
7295: PPUSH
7296: LD_INT 60
7298: PPUSH
7299: LD_INT 2
7301: PPUSH
7302: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7306: LD_EXP 14
7310: PPUSH
7311: LD_STRING DH-driver
7313: PPUSH
7314: CALL_OW 88
// end ;
7318: END
// every 0 0$1 trigger mercenariesQuestDone do
7319: LD_EXP 11
7323: IFFALSE 7811
7325: GO 7327
7327: DISABLE
// begin if mercenariesQuestReady then
7328: LD_EXP 10
7332: IFFALSE 7341
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7334: LD_STRING O5_proof_cont_out
7336: PPUSH
7337: CALL_OW 337
// InGameOn ;
7341: CALL_OW 8
// if IsInUnit ( Heike ) then
7345: LD_EXP 14
7349: PPUSH
7350: CALL_OW 310
7354: IFFALSE 7365
// ComExitVehicle ( Heike ) ;
7356: LD_EXP 14
7360: PPUSH
7361: CALL_OW 121
// wait ( 3 ) ;
7365: LD_INT 3
7367: PPUSH
7368: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7372: LD_EXP 14
7376: PPUSH
7377: LD_EXP 16
7381: PPUSH
7382: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7386: LD_EXP 15
7390: PUSH
7391: LD_EXP 17
7395: PUSH
7396: LD_EXP 16
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: PPUSH
7406: LD_EXP 14
7410: PPUSH
7411: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7415: LD_EXP 14
7419: PPUSH
7420: LD_STRING DH-quest-done-1
7422: PPUSH
7423: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7427: LD_EXP 17
7431: PPUSH
7432: LD_STRING DM-quest-done-1
7434: PPUSH
7435: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7439: LD_EXP 16
7443: PPUSH
7444: LD_STRING DG-quest-done-1
7446: PPUSH
7447: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7451: LD_EXP 14
7455: PPUSH
7456: LD_EXP 15
7460: PPUSH
7461: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7465: LD_EXP 14
7469: PPUSH
7470: LD_STRING DH-quest-done-2
7472: PPUSH
7473: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7477: LD_EXP 15
7481: PPUSH
7482: LD_STRING DO-quest-done-2
7484: PPUSH
7485: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7489: LD_EXP 15
7493: PPUSH
7494: LD_STRING DO-quest-done-3
7496: PPUSH
7497: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7501: LD_EXP 16
7505: PPUSH
7506: LD_INT 51
7508: PPUSH
7509: LD_INT 90
7511: PPUSH
7512: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7516: LD_EXP 16
7520: PPUSH
7521: LD_INT 50
7523: PPUSH
7524: LD_INT 89
7526: PPUSH
7527: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7531: LD_EXP 14
7535: PPUSH
7536: LD_EXP 16
7540: PPUSH
7541: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7545: LD_EXP 16
7549: PPUSH
7550: LD_STRING DG-quest-done-4
7552: PPUSH
7553: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: LD_EXP 14
7566: PPUSH
7567: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7571: LD_EXP 14
7575: PPUSH
7576: CALL_OW 256
7580: PUSH
7581: LD_INT 1000
7583: LESS
7584: IFFALSE 7676
// begin Say ( Olaf , DO-heal-1 ) ;
7586: LD_EXP 15
7590: PPUSH
7591: LD_STRING DO-heal-1
7593: PPUSH
7594: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7598: LD_EXP 14
7602: PPUSH
7603: LD_INT 51
7605: PPUSH
7606: LD_INT 88
7608: PPUSH
7609: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7613: LD_INT 35
7615: PPUSH
7616: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7620: LD_EXP 14
7624: PPUSH
7625: LD_EXP 15
7629: PPUSH
7630: CALL_OW 296
7634: PUSH
7635: LD_INT 4
7637: LESS
7638: PUSH
7639: LD_EXP 14
7643: PPUSH
7644: LD_INT 51
7646: PPUSH
7647: LD_INT 88
7649: PPUSH
7650: CALL_OW 307
7654: OR
7655: IFFALSE 7613
// SetLives ( Heike , 1000 ) ;
7657: LD_EXP 14
7661: PPUSH
7662: LD_INT 1000
7664: PPUSH
7665: CALL_OW 234
// wait ( 0 0$2 ) ;
7669: LD_INT 70
7671: PPUSH
7672: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7676: LD_EXP 14
7680: PPUSH
7681: LD_STRING DH-quest-done-4
7683: PPUSH
7684: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7688: LD_EXP 15
7692: PPUSH
7693: LD_STRING DO-quest-done-4
7695: PPUSH
7696: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7700: LD_EXP 14
7704: PPUSH
7705: LD_EXP 15
7709: PPUSH
7710: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7714: LD_EXP 14
7718: PPUSH
7719: LD_STRING DH-quest-done-5
7721: PPUSH
7722: CALL_OW 88
// InGameOff ;
7726: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7730: LD_STRING O6_end_cont
7732: PPUSH
7733: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7737: LD_EXP 16
7741: PPUSH
7742: LD_INT 2
7744: PPUSH
7745: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7749: LD_EXP 17
7753: PPUSH
7754: LD_INT 2
7756: PPUSH
7757: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7761: LD_INT 42
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 2
7769: PPUSH
7770: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7774: LD_EXP 15
7778: PPUSH
7779: LD_INT 53
7781: PPUSH
7782: LD_INT 89
7784: PPUSH
7785: CALL_OW 118
// lastObjectiveActive := true ;
7789: LD_ADDR_EXP 12
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: CALL_OW 424
// PreparePrison ;
7807: CALL 1081 0 0
// end ;
7811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7812: LD_INT 22
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 91
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 4
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 69
7844: IFFALSE 8012
7846: GO 7848
7848: DISABLE
7849: LD_INT 0
7851: PPUSH
7852: PPUSH
// begin wait ( [ 0 0$07 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
7853: LD_INT 245
7855: PUSH
7856: LD_INT 210
7858: PUSH
7859: LD_INT 175
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: PUSH
7867: LD_OWVAR 67
7871: ARRAY
7872: PPUSH
7873: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
7877: LD_ADDR_VAR 0 2
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_INT 3
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 25
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 54
7904: PUSH
7905: EMPTY
7906: LIST
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 69
7917: ST_TO_ADDR
// if not tmp then
7918: LD_VAR 0 2
7922: NOT
7923: IFFALSE 7927
// exit ;
7925: GO 8012
// for i in tmp do
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: LD_VAR 0 2
7936: PUSH
7937: FOR_IN
7938: IFFALSE 7966
// begin ComExitBuilding ( i ) ;
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_INT 121
7956: PPUSH
7957: LD_INT 22
7959: PPUSH
7960: CALL_OW 174
// end ;
7964: GO 7937
7966: POP
7967: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
7968: LD_EXP 21
7972: PPUSH
7973: LD_INT 121
7975: PPUSH
7976: LD_INT 22
7978: PPUSH
7979: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
7983: LD_EXP 22
7987: PPUSH
7988: LD_INT 121
7990: PPUSH
7991: LD_INT 22
7993: PPUSH
7994: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
7998: LD_EXP 22
8002: PPUSH
8003: LD_EXP 14
8007: PPUSH
8008: CALL_OW 175
// end ;
8012: PPOPN 2
8014: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8015: LD_INT 22
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 91
8027: PUSH
8028: LD_INT 8
8030: PUSH
8031: LD_INT 4
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: IFFALSE 8215
8049: GO 8051
8051: DISABLE
8052: LD_INT 0
8054: PPUSH
8055: PPUSH
// begin wait ( [ 0 0$06 , 0 0$05 , 0 0$04 ] [ Difficulty ] ) ;
8056: LD_INT 210
8058: PUSH
8059: LD_INT 175
8061: PUSH
8062: LD_INT 140
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PUSH
8070: LD_OWVAR 67
8074: ARRAY
8075: PPUSH
8076: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 22
8087: PUSH
8088: LD_INT 3
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 25
8097: PUSH
8098: LD_INT 1
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 54
8107: PUSH
8108: EMPTY
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 69
8120: ST_TO_ADDR
// if not tmp then
8121: LD_VAR 0 2
8125: NOT
8126: IFFALSE 8130
// exit ;
8128: GO 8215
// for i in tmp do
8130: LD_ADDR_VAR 0 1
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: FOR_IN
8141: IFFALSE 8169
// begin ComExitBuilding ( i ) ;
8143: LD_VAR 0 1
8147: PPUSH
8148: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8152: LD_VAR 0 1
8156: PPUSH
8157: LD_INT 142
8159: PPUSH
8160: LD_INT 71
8162: PPUSH
8163: CALL_OW 174
// end ;
8167: GO 8140
8169: POP
8170: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8171: LD_EXP 21
8175: PPUSH
8176: LD_INT 142
8178: PPUSH
8179: LD_INT 71
8181: PPUSH
8182: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8186: LD_EXP 22
8190: PPUSH
8191: LD_INT 142
8193: PPUSH
8194: LD_INT 71
8196: PPUSH
8197: CALL_OW 114
// AddComAttackUnit ( russianTank , Heike ) ;
8201: LD_EXP 22
8205: PPUSH
8206: LD_EXP 14
8210: PPUSH
8211: CALL_OW 175
// end ;
8215: PPOPN 2
8217: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 21
8230: PUSH
8231: LD_INT 2
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 58
8240: PUSH
8241: EMPTY
8242: LIST
8243: PUSH
8244: LD_INT 3
8246: PUSH
8247: LD_INT 24
8249: PUSH
8250: LD_INT 1000
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 91
8263: PUSH
8264: LD_EXP 15
8268: PUSH
8269: LD_INT 8
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 69
8288: PUSH
8289: LD_EXP 15
8293: PPUSH
8294: CALL_OW 302
8298: AND
8299: IFFALSE 8413
8301: GO 8303
8303: DISABLE
// begin enable ;
8304: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8305: LD_EXP 15
8309: PPUSH
8310: LD_INT 22
8312: PUSH
8313: LD_INT 2
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 21
8322: PUSH
8323: LD_INT 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 58
8332: PUSH
8333: EMPTY
8334: LIST
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 24
8341: PUSH
8342: LD_INT 1000
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 91
8355: PUSH
8356: LD_EXP 15
8360: PUSH
8361: LD_INT 8
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 69
8380: PUSH
8381: LD_INT 1
8383: ARRAY
8384: PPUSH
8385: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8389: LD_EXP 15
8393: PPUSH
8394: LD_INT 52
8396: PPUSH
8397: LD_INT 90
8399: PPUSH
8400: CALL_OW 171
// AddComHold ( Olaf ) ;
8404: LD_EXP 15
8408: PPUSH
8409: CALL_OW 200
// end ;
8413: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8414: LD_EXP 12
8418: PUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 302
8426: NOT
8427: AND
8428: PUSH
8429: LD_OWVAR 67
8433: PUSH
8434: LD_INT 1
8436: EQUAL
8437: AND
8438: PUSH
8439: LD_EXP 13
8443: NOT
8444: AND
8445: IFFALSE 8462
8447: GO 8449
8449: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8450: LD_EXP 14
8454: PPUSH
8455: LD_STRING DH-prison-missing
8457: PPUSH
8458: CALL_OW 88
// end ;
8462: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8463: LD_EXP 12
8467: PUSH
8468: LD_INT 8
8470: PPUSH
8471: CALL_OW 302
8475: NOT
8476: AND
8477: PUSH
8478: LD_OWVAR 67
8482: PUSH
8483: LD_INT 1
8485: GREATER
8486: AND
8487: PUSH
8488: LD_EXP 13
8492: NOT
8493: AND
8494: IFFALSE 8511
8496: GO 8498
8498: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8499: LD_EXP 14
8503: PPUSH
8504: LD_STRING DH-prison-missing
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8512: LD_EXP 12
8516: PUSH
8517: LD_INT 3
8519: PPUSH
8520: CALL_OW 302
8524: NOT
8525: AND
8526: PUSH
8527: LD_EXP 13
8531: NOT
8532: AND
8533: IFFALSE 8550
8535: GO 8537
8537: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8538: LD_EXP 14
8542: PPUSH
8543: LD_STRING DH-prison-missing-a
8545: PPUSH
8546: CALL_OW 88
// end ;
8550: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8551: LD_EXP 12
8555: PUSH
8556: LD_INT 10
8558: PPUSH
8559: CALL_OW 302
8563: NOT
8564: AND
8565: PUSH
8566: LD_EXP 13
8570: NOT
8571: AND
8572: IFFALSE 8589
8574: GO 8576
8576: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8577: LD_EXP 14
8581: PPUSH
8582: LD_STRING DH-prison-missing-a
8584: PPUSH
8585: CALL_OW 88
// end ;
8589: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8590: LD_EXP 13
8594: NOT
8595: PUSH
8596: LD_EXP 12
8600: AND
8601: PUSH
8602: LD_INT 2
8604: PPUSH
8605: LD_EXP 18
8609: PPUSH
8610: CALL_OW 292
8614: AND
8615: IFFALSE 8702
8617: GO 8619
8619: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8620: LD_EXP 18
8624: PPUSH
8625: LD_EXP 14
8629: PPUSH
8630: CALL_OW 119
// DialogueOn ;
8634: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8638: LD_EXP 18
8642: PPUSH
8643: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8647: LD_EXP 18
8651: PPUSH
8652: LD_STRING DK-prison-found
8654: PPUSH
8655: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8659: LD_EXP 14
8663: PPUSH
8664: LD_STRING DH-prison-found
8666: PPUSH
8667: CALL_OW 88
// DialogueOff ;
8671: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8675: LD_EXP 18
8679: PPUSH
8680: LD_INT 2
8682: PPUSH
8683: CALL_OW 235
// prisonFound := true ;
8687: LD_ADDR_EXP 13
8691: PUSH
8692: LD_INT 1
8694: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8695: LD_STRING O6_prison_out
8697: PPUSH
8698: CALL_OW 337
// end ;
8702: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) = 0 do var tmp ;
8703: LD_EXP 12
8707: PUSH
8708: LD_EXP 14
8712: PPUSH
8713: CALL_OW 302
8717: AND
8718: PUSH
8719: LD_INT 1
8721: PPUSH
8722: LD_INT 21
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 22
8734: PUSH
8735: LD_INT 2
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PPUSH
8746: CALL_OW 71
8750: PUSH
8751: LD_INT 0
8753: EQUAL
8754: AND
8755: IFFALSE 9064
8757: GO 8759
8759: DISABLE
8760: LD_INT 0
8762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
8763: LD_ADDR_VAR 0 1
8767: PUSH
8768: LD_INT 22
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 21
8780: PUSH
8781: LD_INT 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PPUSH
8792: CALL_OW 69
8796: ST_TO_ADDR
// if prisonFound then
8797: LD_EXP 13
8801: IFFALSE 8815
// AddMedal ( med1 , 1 ) else
8803: LD_STRING med1
8805: PPUSH
8806: LD_INT 1
8808: PPUSH
8809: CALL_OW 101
8813: GO 8826
// AddMedal ( med1 , - 1 ) ;
8815: LD_STRING med1
8817: PPUSH
8818: LD_INT 1
8820: NEG
8821: PPUSH
8822: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
8826: LD_VAR 0 1
8830: PUSH
8831: LD_INT 3
8833: LESS
8834: PUSH
8835: LD_EXP 13
8839: NOT
8840: AND
8841: PUSH
8842: LD_VAR 0 1
8846: PUSH
8847: LD_INT 4
8849: LESS
8850: PUSH
8851: LD_EXP 13
8855: AND
8856: OR
8857: IFFALSE 8872
// AddMedal ( med2 , - 1 ) else
8859: LD_STRING med2
8861: PPUSH
8862: LD_INT 1
8864: NEG
8865: PPUSH
8866: CALL_OW 101
8870: GO 8882
// AddMedal ( med2 , 1 ) ;
8872: LD_STRING med2
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
8882: LD_EXP 13
8886: PUSH
8887: LD_EXP 4
8891: AND
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: LD_INT 4
8900: GREATEREQUAL
8901: AND
8902: IFFALSE 8916
// AddMedal ( med3 , 1 ) else
8904: LD_STRING med3
8906: PPUSH
8907: LD_INT 1
8909: PPUSH
8910: CALL_OW 101
8914: GO 8927
// AddMedal ( med3 , - 1 ) ;
8916: LD_STRING med3
8918: PPUSH
8919: LD_INT 1
8921: NEG
8922: PPUSH
8923: CALL_OW 101
// GiveMedals ( MAIN ) ;
8927: LD_STRING MAIN
8929: PPUSH
8930: CALL_OW 102
// RewardPeople ( tmp ) ;
8934: LD_VAR 0 1
8938: PPUSH
8939: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
8943: LD_EXP 14
8947: PPUSH
8948: LD_STRING 01_Heike
8950: PPUSH
8951: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
8955: LD_EXP 16
8959: PPUSH
8960: CALL_OW 302
8964: PUSH
8965: LD_EXP 16
8969: PUSH
8970: LD_VAR 0 1
8974: IN
8975: AND
8976: IFFALSE 8990
// SaveCharacters ( Givi , 01_Givi ) ;
8978: LD_EXP 16
8982: PPUSH
8983: LD_STRING 01_Givi
8985: PPUSH
8986: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
8990: LD_EXP 17
8994: PPUSH
8995: CALL_OW 302
8999: PUSH
9000: LD_EXP 17
9004: PUSH
9005: LD_VAR 0 1
9009: IN
9010: AND
9011: IFFALSE 9025
// SaveCharacters ( Mike , 01_Mike ) ;
9013: LD_EXP 17
9017: PPUSH
9018: LD_STRING 01_Mike
9020: PPUSH
9021: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9025: LD_EXP 18
9029: PPUSH
9030: CALL_OW 302
9034: PUSH
9035: LD_EXP 18
9039: PUSH
9040: LD_VAR 0 1
9044: IN
9045: AND
9046: IFFALSE 9060
// SaveCharacters ( Kamil , 01_Kamil ) ;
9048: LD_EXP 18
9052: PPUSH
9053: LD_STRING 01_Kamil
9055: PPUSH
9056: CALL_OW 38
// YouWin ;
9060: CALL_OW 103
// end ; end_of_file
9064: PPOPN 1
9066: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9067: LD_VAR 0 1
9071: PUSH
9072: LD_EXP 14
9076: EQUAL
9077: IFFALSE 9086
// YouLost ( Heike ) ;
9079: LD_STRING Heike
9081: PPUSH
9082: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9086: LD_VAR 0 1
9090: PUSH
9091: LD_INT 22
9093: PUSH
9094: LD_INT 3
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: LD_INT 25
9103: PUSH
9104: LD_INT 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: IN
9120: IFFALSE 9226
// begin if un in russianPatrol then
9122: LD_VAR 0 1
9126: PUSH
9127: LD_EXP 19
9131: IN
9132: IFFALSE 9150
// russianPatrol := russianPatrol diff un ;
9134: LD_ADDR_EXP 19
9138: PUSH
9139: LD_EXP 19
9143: PUSH
9144: LD_VAR 0 1
9148: DIFF
9149: ST_TO_ADDR
// if un in russianForestPatrol then
9150: LD_VAR 0 1
9154: PUSH
9155: LD_EXP 20
9159: IN
9160: IFFALSE 9178
// russianForestPatrol := russianForestPatrol diff un ;
9162: LD_ADDR_EXP 20
9166: PUSH
9167: LD_EXP 20
9171: PUSH
9172: LD_VAR 0 1
9176: DIFF
9177: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9178: LD_ADDR_EXP 5
9182: PUSH
9183: LD_EXP 5
9187: PPUSH
9188: LD_EXP 5
9192: PUSH
9193: LD_INT 1
9195: PLUS
9196: PPUSH
9197: LD_VAR 0 1
9201: PPUSH
9202: CALL_OW 250
9206: PUSH
9207: LD_VAR 0 1
9211: PPUSH
9212: CALL_OW 251
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PPUSH
9221: CALL_OW 1
9225: ST_TO_ADDR
// end ; end ;
9226: PPOPN 1
9228: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9229: LD_VAR 0 1
9233: PUSH
9234: LD_EXP 14
9238: EQUAL
9239: IFFALSE 9248
// YouLost ( Heike ) ;
9241: LD_STRING Heike
9243: PPUSH
9244: CALL_OW 104
// end ;
9248: PPOPN 1
9250: END
// on Contact ( s1 , s2 ) do begin if s1 in [ 2 , 5 ] and s2 in [ 5 , 2 ] then
9251: LD_VAR 0 1
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 5
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: IN
9266: PUSH
9267: LD_VAR 0 2
9271: PUSH
9272: LD_INT 5
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: IN
9282: AND
9283: IFFALSE 9292
// YouLost ( FriendlyFire ) ;
9285: LD_STRING FriendlyFire
9287: PPUSH
9288: CALL_OW 104
// end ; end_of_file
9292: PPOPN 2
9294: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9295: GO 9297
9297: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9298: LD_STRING initStreamRollete();
9300: PPUSH
9301: CALL_OW 559
// InitStreamMode ;
9305: CALL 9314 0 0
// DefineStreamItems ( ) ;
9309: CALL 9754 0 0
// end ;
9313: END
// function InitStreamMode ; begin
9314: LD_INT 0
9316: PPUSH
// streamModeActive := false ;
9317: LD_ADDR_EXP 24
9321: PUSH
9322: LD_INT 0
9324: ST_TO_ADDR
// normalCounter := 36 ;
9325: LD_ADDR_EXP 25
9329: PUSH
9330: LD_INT 36
9332: ST_TO_ADDR
// hardcoreCounter := 16 ;
9333: LD_ADDR_EXP 26
9337: PUSH
9338: LD_INT 16
9340: ST_TO_ADDR
// sRocket := false ;
9341: LD_ADDR_EXP 29
9345: PUSH
9346: LD_INT 0
9348: ST_TO_ADDR
// sSpeed := false ;
9349: LD_ADDR_EXP 28
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// sEngine := false ;
9357: LD_ADDR_EXP 30
9361: PUSH
9362: LD_INT 0
9364: ST_TO_ADDR
// sSpec := false ;
9365: LD_ADDR_EXP 27
9369: PUSH
9370: LD_INT 0
9372: ST_TO_ADDR
// sLevel := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// sArmoury := false ;
9381: LD_ADDR_EXP 32
9385: PUSH
9386: LD_INT 0
9388: ST_TO_ADDR
// sRadar := false ;
9389: LD_ADDR_EXP 33
9393: PUSH
9394: LD_INT 0
9396: ST_TO_ADDR
// sBunker := false ;
9397: LD_ADDR_EXP 34
9401: PUSH
9402: LD_INT 0
9404: ST_TO_ADDR
// sHack := false ;
9405: LD_ADDR_EXP 35
9409: PUSH
9410: LD_INT 0
9412: ST_TO_ADDR
// sFire := false ;
9413: LD_ADDR_EXP 36
9417: PUSH
9418: LD_INT 0
9420: ST_TO_ADDR
// sRefresh := false ;
9421: LD_ADDR_EXP 37
9425: PUSH
9426: LD_INT 0
9428: ST_TO_ADDR
// sExp := false ;
9429: LD_ADDR_EXP 38
9433: PUSH
9434: LD_INT 0
9436: ST_TO_ADDR
// sDepot := false ;
9437: LD_ADDR_EXP 39
9441: PUSH
9442: LD_INT 0
9444: ST_TO_ADDR
// sFlag := false ;
9445: LD_ADDR_EXP 40
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// sKamikadze := false ;
9453: LD_ADDR_EXP 48
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// sTroll := false ;
9461: LD_ADDR_EXP 49
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// sSlow := false ;
9469: LD_ADDR_EXP 50
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// sLack := false ;
9477: LD_ADDR_EXP 51
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// sTank := false ;
9485: LD_ADDR_EXP 53
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// sRemote := false ;
9493: LD_ADDR_EXP 54
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// sPowell := false ;
9501: LD_ADDR_EXP 55
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// sTeleport := false ;
9509: LD_ADDR_EXP 58
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// sOilTower := false ;
9517: LD_ADDR_EXP 60
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// sShovel := false ;
9525: LD_ADDR_EXP 61
9529: PUSH
9530: LD_INT 0
9532: ST_TO_ADDR
// sSheik := false ;
9533: LD_ADDR_EXP 62
9537: PUSH
9538: LD_INT 0
9540: ST_TO_ADDR
// sEarthquake := false ;
9541: LD_ADDR_EXP 64
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// sAI := false ;
9549: LD_ADDR_EXP 65
9553: PUSH
9554: LD_INT 0
9556: ST_TO_ADDR
// sCargo := false ;
9557: LD_ADDR_EXP 68
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// sDLaser := false ;
9565: LD_ADDR_EXP 69
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// sExchange := false ;
9573: LD_ADDR_EXP 70
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// sFac := false ;
9581: LD_ADDR_EXP 71
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// sPower := false ;
9589: LD_ADDR_EXP 72
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// sRandom := false ;
9597: LD_ADDR_EXP 73
9601: PUSH
9602: LD_INT 0
9604: ST_TO_ADDR
// sShield := false ;
9605: LD_ADDR_EXP 74
9609: PUSH
9610: LD_INT 0
9612: ST_TO_ADDR
// sTime := false ;
9613: LD_ADDR_EXP 75
9617: PUSH
9618: LD_INT 0
9620: ST_TO_ADDR
// sTools := false ;
9621: LD_ADDR_EXP 76
9625: PUSH
9626: LD_INT 0
9628: ST_TO_ADDR
// sSold := false ;
9629: LD_ADDR_EXP 41
9633: PUSH
9634: LD_INT 0
9636: ST_TO_ADDR
// sDiff := false ;
9637: LD_ADDR_EXP 42
9641: PUSH
9642: LD_INT 0
9644: ST_TO_ADDR
// sFog := false ;
9645: LD_ADDR_EXP 45
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// sReset := false ;
9653: LD_ADDR_EXP 46
9657: PUSH
9658: LD_INT 0
9660: ST_TO_ADDR
// sSun := false ;
9661: LD_ADDR_EXP 47
9665: PUSH
9666: LD_INT 0
9668: ST_TO_ADDR
// sTiger := false ;
9669: LD_ADDR_EXP 43
9673: PUSH
9674: LD_INT 0
9676: ST_TO_ADDR
// sBomb := false ;
9677: LD_ADDR_EXP 44
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// sWound := false ;
9685: LD_ADDR_EXP 52
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// sBetray := false ;
9693: LD_ADDR_EXP 56
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// sContamin := false ;
9701: LD_ADDR_EXP 57
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// sOil := false ;
9709: LD_ADDR_EXP 59
9713: PUSH
9714: LD_INT 0
9716: ST_TO_ADDR
// sStu := false ;
9717: LD_ADDR_EXP 63
9721: PUSH
9722: LD_INT 0
9724: ST_TO_ADDR
// sBazooka := false ;
9725: LD_ADDR_EXP 66
9729: PUSH
9730: LD_INT 0
9732: ST_TO_ADDR
// sMortar := false ;
9733: LD_ADDR_EXP 67
9737: PUSH
9738: LD_INT 0
9740: ST_TO_ADDR
// sRanger := false ;
9741: LD_ADDR_EXP 77
9745: PUSH
9746: LD_INT 0
9748: ST_TO_ADDR
// end ;
9749: LD_VAR 0 1
9753: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
// result := [ ] ;
9761: LD_ADDR_VAR 0 1
9765: PUSH
9766: EMPTY
9767: ST_TO_ADDR
// if campaign_id = 1 then
9768: LD_OWVAR 69
9772: PUSH
9773: LD_INT 1
9775: EQUAL
9776: IFFALSE 12714
// begin case mission_number of 1 :
9778: LD_OWVAR 70
9782: PUSH
9783: LD_INT 1
9785: DOUBLE
9786: EQUAL
9787: IFTRUE 9791
9789: GO 9855
9791: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9792: LD_ADDR_VAR 0 1
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 11
9805: PUSH
9806: LD_INT 12
9808: PUSH
9809: LD_INT 15
9811: PUSH
9812: LD_INT 16
9814: PUSH
9815: LD_INT 22
9817: PUSH
9818: LD_INT 23
9820: PUSH
9821: LD_INT 26
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 101
9837: PUSH
9838: LD_INT 102
9840: PUSH
9841: LD_INT 106
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: ST_TO_ADDR
9853: GO 12712
9855: LD_INT 2
9857: DOUBLE
9858: EQUAL
9859: IFTRUE 9863
9861: GO 9935
9863: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9864: LD_ADDR_VAR 0 1
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: LD_INT 4
9874: PUSH
9875: LD_INT 11
9877: PUSH
9878: LD_INT 12
9880: PUSH
9881: LD_INT 15
9883: PUSH
9884: LD_INT 16
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_INT 23
9892: PUSH
9893: LD_INT 26
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 101
9909: PUSH
9910: LD_INT 102
9912: PUSH
9913: LD_INT 105
9915: PUSH
9916: LD_INT 106
9918: PUSH
9919: LD_INT 108
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: ST_TO_ADDR
9933: GO 12712
9935: LD_INT 3
9937: DOUBLE
9938: EQUAL
9939: IFTRUE 9943
9941: GO 10019
9943: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9944: LD_ADDR_VAR 0 1
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: LD_INT 4
9954: PUSH
9955: LD_INT 5
9957: PUSH
9958: LD_INT 11
9960: PUSH
9961: LD_INT 12
9963: PUSH
9964: LD_INT 15
9966: PUSH
9967: LD_INT 16
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 26
9975: PUSH
9976: LD_INT 36
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 101
9993: PUSH
9994: LD_INT 102
9996: PUSH
9997: LD_INT 105
9999: PUSH
10000: LD_INT 106
10002: PUSH
10003: LD_INT 108
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: ST_TO_ADDR
10017: GO 12712
10019: LD_INT 4
10021: DOUBLE
10022: EQUAL
10023: IFTRUE 10027
10025: GO 10111
10027: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10028: LD_ADDR_VAR 0 1
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 4
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: LD_INT 8
10044: PUSH
10045: LD_INT 11
10047: PUSH
10048: LD_INT 12
10050: PUSH
10051: LD_INT 15
10053: PUSH
10054: LD_INT 16
10056: PUSH
10057: LD_INT 22
10059: PUSH
10060: LD_INT 23
10062: PUSH
10063: LD_INT 26
10065: PUSH
10066: LD_INT 36
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 101
10085: PUSH
10086: LD_INT 102
10088: PUSH
10089: LD_INT 105
10091: PUSH
10092: LD_INT 106
10094: PUSH
10095: LD_INT 108
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
10109: GO 12712
10111: LD_INT 5
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10219
10119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10120: LD_ADDR_VAR 0 1
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: LD_INT 4
10130: PUSH
10131: LD_INT 5
10133: PUSH
10134: LD_INT 6
10136: PUSH
10137: LD_INT 8
10139: PUSH
10140: LD_INT 11
10142: PUSH
10143: LD_INT 12
10145: PUSH
10146: LD_INT 15
10148: PUSH
10149: LD_INT 16
10151: PUSH
10152: LD_INT 22
10154: PUSH
10155: LD_INT 23
10157: PUSH
10158: LD_INT 25
10160: PUSH
10161: LD_INT 26
10163: PUSH
10164: LD_INT 36
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 101
10185: PUSH
10186: LD_INT 102
10188: PUSH
10189: LD_INT 105
10191: PUSH
10192: LD_INT 106
10194: PUSH
10195: LD_INT 108
10197: PUSH
10198: LD_INT 109
10200: PUSH
10201: LD_INT 112
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: ST_TO_ADDR
10217: GO 12712
10219: LD_INT 6
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10227
10225: GO 10347
10227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10228: LD_ADDR_VAR 0 1
10232: PUSH
10233: LD_INT 2
10235: PUSH
10236: LD_INT 4
10238: PUSH
10239: LD_INT 5
10241: PUSH
10242: LD_INT 6
10244: PUSH
10245: LD_INT 8
10247: PUSH
10248: LD_INT 11
10250: PUSH
10251: LD_INT 12
10253: PUSH
10254: LD_INT 15
10256: PUSH
10257: LD_INT 16
10259: PUSH
10260: LD_INT 20
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 23
10271: PUSH
10272: LD_INT 25
10274: PUSH
10275: LD_INT 26
10277: PUSH
10278: LD_INT 30
10280: PUSH
10281: LD_INT 31
10283: PUSH
10284: LD_INT 32
10286: PUSH
10287: LD_INT 36
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 101
10313: PUSH
10314: LD_INT 102
10316: PUSH
10317: LD_INT 105
10319: PUSH
10320: LD_INT 106
10322: PUSH
10323: LD_INT 108
10325: PUSH
10326: LD_INT 109
10328: PUSH
10329: LD_INT 112
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: ST_TO_ADDR
10345: GO 12712
10347: LD_INT 7
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10455
10355: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 4
10366: PUSH
10367: LD_INT 5
10369: PUSH
10370: LD_INT 7
10372: PUSH
10373: LD_INT 11
10375: PUSH
10376: LD_INT 12
10378: PUSH
10379: LD_INT 15
10381: PUSH
10382: LD_INT 16
10384: PUSH
10385: LD_INT 20
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 22
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 26
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 101
10421: PUSH
10422: LD_INT 102
10424: PUSH
10425: LD_INT 103
10427: PUSH
10428: LD_INT 105
10430: PUSH
10431: LD_INT 106
10433: PUSH
10434: LD_INT 108
10436: PUSH
10437: LD_INT 112
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: ST_TO_ADDR
10453: GO 12712
10455: LD_INT 8
10457: DOUBLE
10458: EQUAL
10459: IFTRUE 10463
10461: GO 10591
10463: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 2
10471: PUSH
10472: LD_INT 4
10474: PUSH
10475: LD_INT 5
10477: PUSH
10478: LD_INT 6
10480: PUSH
10481: LD_INT 7
10483: PUSH
10484: LD_INT 8
10486: PUSH
10487: LD_INT 11
10489: PUSH
10490: LD_INT 12
10492: PUSH
10493: LD_INT 15
10495: PUSH
10496: LD_INT 16
10498: PUSH
10499: LD_INT 20
10501: PUSH
10502: LD_INT 21
10504: PUSH
10505: LD_INT 22
10507: PUSH
10508: LD_INT 23
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 26
10516: PUSH
10517: LD_INT 30
10519: PUSH
10520: LD_INT 31
10522: PUSH
10523: LD_INT 32
10525: PUSH
10526: LD_INT 36
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 101
10553: PUSH
10554: LD_INT 102
10556: PUSH
10557: LD_INT 103
10559: PUSH
10560: LD_INT 105
10562: PUSH
10563: LD_INT 106
10565: PUSH
10566: LD_INT 108
10568: PUSH
10569: LD_INT 109
10571: PUSH
10572: LD_INT 112
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: ST_TO_ADDR
10589: GO 12712
10591: LD_INT 9
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10735
10599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10600: LD_ADDR_VAR 0 1
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 4
10610: PUSH
10611: LD_INT 5
10613: PUSH
10614: LD_INT 6
10616: PUSH
10617: LD_INT 7
10619: PUSH
10620: LD_INT 8
10622: PUSH
10623: LD_INT 11
10625: PUSH
10626: LD_INT 12
10628: PUSH
10629: LD_INT 15
10631: PUSH
10632: LD_INT 16
10634: PUSH
10635: LD_INT 20
10637: PUSH
10638: LD_INT 21
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: LD_INT 23
10646: PUSH
10647: LD_INT 25
10649: PUSH
10650: LD_INT 26
10652: PUSH
10653: LD_INT 28
10655: PUSH
10656: LD_INT 30
10658: PUSH
10659: LD_INT 31
10661: PUSH
10662: LD_INT 32
10664: PUSH
10665: LD_INT 36
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 101
10693: PUSH
10694: LD_INT 102
10696: PUSH
10697: LD_INT 103
10699: PUSH
10700: LD_INT 105
10702: PUSH
10703: LD_INT 106
10705: PUSH
10706: LD_INT 108
10708: PUSH
10709: LD_INT 109
10711: PUSH
10712: LD_INT 112
10714: PUSH
10715: LD_INT 114
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: ST_TO_ADDR
10733: GO 12712
10735: LD_INT 10
10737: DOUBLE
10738: EQUAL
10739: IFTRUE 10743
10741: GO 10927
10743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10744: LD_ADDR_VAR 0 1
10748: PUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 4
10754: PUSH
10755: LD_INT 5
10757: PUSH
10758: LD_INT 6
10760: PUSH
10761: LD_INT 7
10763: PUSH
10764: LD_INT 8
10766: PUSH
10767: LD_INT 9
10769: PUSH
10770: LD_INT 10
10772: PUSH
10773: LD_INT 11
10775: PUSH
10776: LD_INT 12
10778: PUSH
10779: LD_INT 13
10781: PUSH
10782: LD_INT 14
10784: PUSH
10785: LD_INT 15
10787: PUSH
10788: LD_INT 16
10790: PUSH
10791: LD_INT 17
10793: PUSH
10794: LD_INT 18
10796: PUSH
10797: LD_INT 19
10799: PUSH
10800: LD_INT 20
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_INT 23
10811: PUSH
10812: LD_INT 24
10814: PUSH
10815: LD_INT 25
10817: PUSH
10818: LD_INT 26
10820: PUSH
10821: LD_INT 28
10823: PUSH
10824: LD_INT 30
10826: PUSH
10827: LD_INT 31
10829: PUSH
10830: LD_INT 32
10832: PUSH
10833: LD_INT 36
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 101
10869: PUSH
10870: LD_INT 102
10872: PUSH
10873: LD_INT 103
10875: PUSH
10876: LD_INT 104
10878: PUSH
10879: LD_INT 105
10881: PUSH
10882: LD_INT 106
10884: PUSH
10885: LD_INT 107
10887: PUSH
10888: LD_INT 108
10890: PUSH
10891: LD_INT 109
10893: PUSH
10894: LD_INT 110
10896: PUSH
10897: LD_INT 111
10899: PUSH
10900: LD_INT 112
10902: PUSH
10903: LD_INT 114
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: ST_TO_ADDR
10925: GO 12712
10927: LD_INT 11
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10935
10933: GO 11127
10935: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10936: LD_ADDR_VAR 0 1
10940: PUSH
10941: LD_INT 2
10943: PUSH
10944: LD_INT 3
10946: PUSH
10947: LD_INT 4
10949: PUSH
10950: LD_INT 5
10952: PUSH
10953: LD_INT 6
10955: PUSH
10956: LD_INT 7
10958: PUSH
10959: LD_INT 8
10961: PUSH
10962: LD_INT 9
10964: PUSH
10965: LD_INT 10
10967: PUSH
10968: LD_INT 11
10970: PUSH
10971: LD_INT 12
10973: PUSH
10974: LD_INT 13
10976: PUSH
10977: LD_INT 14
10979: PUSH
10980: LD_INT 15
10982: PUSH
10983: LD_INT 16
10985: PUSH
10986: LD_INT 17
10988: PUSH
10989: LD_INT 18
10991: PUSH
10992: LD_INT 19
10994: PUSH
10995: LD_INT 20
10997: PUSH
10998: LD_INT 21
11000: PUSH
11001: LD_INT 22
11003: PUSH
11004: LD_INT 23
11006: PUSH
11007: LD_INT 24
11009: PUSH
11010: LD_INT 25
11012: PUSH
11013: LD_INT 26
11015: PUSH
11016: LD_INT 28
11018: PUSH
11019: LD_INT 30
11021: PUSH
11022: LD_INT 31
11024: PUSH
11025: LD_INT 32
11027: PUSH
11028: LD_INT 34
11030: PUSH
11031: LD_INT 36
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 101
11069: PUSH
11070: LD_INT 102
11072: PUSH
11073: LD_INT 103
11075: PUSH
11076: LD_INT 104
11078: PUSH
11079: LD_INT 105
11081: PUSH
11082: LD_INT 106
11084: PUSH
11085: LD_INT 107
11087: PUSH
11088: LD_INT 108
11090: PUSH
11091: LD_INT 109
11093: PUSH
11094: LD_INT 110
11096: PUSH
11097: LD_INT 111
11099: PUSH
11100: LD_INT 112
11102: PUSH
11103: LD_INT 114
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: ST_TO_ADDR
11125: GO 12712
11127: LD_INT 12
11129: DOUBLE
11130: EQUAL
11131: IFTRUE 11135
11133: GO 11343
11135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: LD_INT 2
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: LD_INT 5
11155: PUSH
11156: LD_INT 6
11158: PUSH
11159: LD_INT 7
11161: PUSH
11162: LD_INT 8
11164: PUSH
11165: LD_INT 9
11167: PUSH
11168: LD_INT 10
11170: PUSH
11171: LD_INT 11
11173: PUSH
11174: LD_INT 12
11176: PUSH
11177: LD_INT 13
11179: PUSH
11180: LD_INT 14
11182: PUSH
11183: LD_INT 15
11185: PUSH
11186: LD_INT 16
11188: PUSH
11189: LD_INT 17
11191: PUSH
11192: LD_INT 18
11194: PUSH
11195: LD_INT 19
11197: PUSH
11198: LD_INT 20
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 23
11209: PUSH
11210: LD_INT 24
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 26
11218: PUSH
11219: LD_INT 27
11221: PUSH
11222: LD_INT 28
11224: PUSH
11225: LD_INT 30
11227: PUSH
11228: LD_INT 31
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: LD_INT 33
11236: PUSH
11237: LD_INT 34
11239: PUSH
11240: LD_INT 36
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 101
11281: PUSH
11282: LD_INT 102
11284: PUSH
11285: LD_INT 103
11287: PUSH
11288: LD_INT 104
11290: PUSH
11291: LD_INT 105
11293: PUSH
11294: LD_INT 106
11296: PUSH
11297: LD_INT 107
11299: PUSH
11300: LD_INT 108
11302: PUSH
11303: LD_INT 109
11305: PUSH
11306: LD_INT 110
11308: PUSH
11309: LD_INT 111
11311: PUSH
11312: LD_INT 112
11314: PUSH
11315: LD_INT 113
11317: PUSH
11318: LD_INT 114
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: ST_TO_ADDR
11341: GO 12712
11343: LD_INT 13
11345: DOUBLE
11346: EQUAL
11347: IFTRUE 11351
11349: GO 11547
11351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11352: LD_ADDR_VAR 0 1
11356: PUSH
11357: LD_INT 1
11359: PUSH
11360: LD_INT 2
11362: PUSH
11363: LD_INT 3
11365: PUSH
11366: LD_INT 4
11368: PUSH
11369: LD_INT 5
11371: PUSH
11372: LD_INT 8
11374: PUSH
11375: LD_INT 9
11377: PUSH
11378: LD_INT 10
11380: PUSH
11381: LD_INT 11
11383: PUSH
11384: LD_INT 12
11386: PUSH
11387: LD_INT 14
11389: PUSH
11390: LD_INT 15
11392: PUSH
11393: LD_INT 16
11395: PUSH
11396: LD_INT 17
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 19
11404: PUSH
11405: LD_INT 20
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 27
11428: PUSH
11429: LD_INT 28
11431: PUSH
11432: LD_INT 30
11434: PUSH
11435: LD_INT 31
11437: PUSH
11438: LD_INT 32
11440: PUSH
11441: LD_INT 33
11443: PUSH
11444: LD_INT 34
11446: PUSH
11447: LD_INT 36
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 101
11485: PUSH
11486: LD_INT 102
11488: PUSH
11489: LD_INT 103
11491: PUSH
11492: LD_INT 104
11494: PUSH
11495: LD_INT 105
11497: PUSH
11498: LD_INT 106
11500: PUSH
11501: LD_INT 107
11503: PUSH
11504: LD_INT 108
11506: PUSH
11507: LD_INT 109
11509: PUSH
11510: LD_INT 110
11512: PUSH
11513: LD_INT 111
11515: PUSH
11516: LD_INT 112
11518: PUSH
11519: LD_INT 113
11521: PUSH
11522: LD_INT 114
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: ST_TO_ADDR
11545: GO 12712
11547: LD_INT 14
11549: DOUBLE
11550: EQUAL
11551: IFTRUE 11555
11553: GO 11767
11555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11556: LD_ADDR_VAR 0 1
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: LD_INT 3
11569: PUSH
11570: LD_INT 4
11572: PUSH
11573: LD_INT 5
11575: PUSH
11576: LD_INT 6
11578: PUSH
11579: LD_INT 7
11581: PUSH
11582: LD_INT 8
11584: PUSH
11585: LD_INT 9
11587: PUSH
11588: LD_INT 10
11590: PUSH
11591: LD_INT 11
11593: PUSH
11594: LD_INT 12
11596: PUSH
11597: LD_INT 13
11599: PUSH
11600: LD_INT 14
11602: PUSH
11603: LD_INT 15
11605: PUSH
11606: LD_INT 16
11608: PUSH
11609: LD_INT 17
11611: PUSH
11612: LD_INT 18
11614: PUSH
11615: LD_INT 19
11617: PUSH
11618: LD_INT 20
11620: PUSH
11621: LD_INT 21
11623: PUSH
11624: LD_INT 22
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 24
11632: PUSH
11633: LD_INT 25
11635: PUSH
11636: LD_INT 26
11638: PUSH
11639: LD_INT 27
11641: PUSH
11642: LD_INT 28
11644: PUSH
11645: LD_INT 29
11647: PUSH
11648: LD_INT 30
11650: PUSH
11651: LD_INT 31
11653: PUSH
11654: LD_INT 32
11656: PUSH
11657: LD_INT 33
11659: PUSH
11660: LD_INT 34
11662: PUSH
11663: LD_INT 36
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 101
11705: PUSH
11706: LD_INT 102
11708: PUSH
11709: LD_INT 103
11711: PUSH
11712: LD_INT 104
11714: PUSH
11715: LD_INT 105
11717: PUSH
11718: LD_INT 106
11720: PUSH
11721: LD_INT 107
11723: PUSH
11724: LD_INT 108
11726: PUSH
11727: LD_INT 109
11729: PUSH
11730: LD_INT 110
11732: PUSH
11733: LD_INT 111
11735: PUSH
11736: LD_INT 112
11738: PUSH
11739: LD_INT 113
11741: PUSH
11742: LD_INT 114
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: ST_TO_ADDR
11765: GO 12712
11767: LD_INT 15
11769: DOUBLE
11770: EQUAL
11771: IFTRUE 11775
11773: GO 11987
11775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11776: LD_ADDR_VAR 0 1
11780: PUSH
11781: LD_INT 1
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 3
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: LD_INT 5
11795: PUSH
11796: LD_INT 6
11798: PUSH
11799: LD_INT 7
11801: PUSH
11802: LD_INT 8
11804: PUSH
11805: LD_INT 9
11807: PUSH
11808: LD_INT 10
11810: PUSH
11811: LD_INT 11
11813: PUSH
11814: LD_INT 12
11816: PUSH
11817: LD_INT 13
11819: PUSH
11820: LD_INT 14
11822: PUSH
11823: LD_INT 15
11825: PUSH
11826: LD_INT 16
11828: PUSH
11829: LD_INT 17
11831: PUSH
11832: LD_INT 18
11834: PUSH
11835: LD_INT 19
11837: PUSH
11838: LD_INT 20
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 22
11846: PUSH
11847: LD_INT 23
11849: PUSH
11850: LD_INT 24
11852: PUSH
11853: LD_INT 25
11855: PUSH
11856: LD_INT 26
11858: PUSH
11859: LD_INT 27
11861: PUSH
11862: LD_INT 28
11864: PUSH
11865: LD_INT 29
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 31
11873: PUSH
11874: LD_INT 32
11876: PUSH
11877: LD_INT 33
11879: PUSH
11880: LD_INT 34
11882: PUSH
11883: LD_INT 36
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 101
11925: PUSH
11926: LD_INT 102
11928: PUSH
11929: LD_INT 103
11931: PUSH
11932: LD_INT 104
11934: PUSH
11935: LD_INT 105
11937: PUSH
11938: LD_INT 106
11940: PUSH
11941: LD_INT 107
11943: PUSH
11944: LD_INT 108
11946: PUSH
11947: LD_INT 109
11949: PUSH
11950: LD_INT 110
11952: PUSH
11953: LD_INT 111
11955: PUSH
11956: LD_INT 112
11958: PUSH
11959: LD_INT 113
11961: PUSH
11962: LD_INT 114
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: ST_TO_ADDR
11985: GO 12712
11987: LD_INT 16
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12119
11995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11996: LD_ADDR_VAR 0 1
12000: PUSH
12001: LD_INT 2
12003: PUSH
12004: LD_INT 4
12006: PUSH
12007: LD_INT 5
12009: PUSH
12010: LD_INT 7
12012: PUSH
12013: LD_INT 11
12015: PUSH
12016: LD_INT 12
12018: PUSH
12019: LD_INT 15
12021: PUSH
12022: LD_INT 16
12024: PUSH
12025: LD_INT 20
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 22
12033: PUSH
12034: LD_INT 23
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 26
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 31
12048: PUSH
12049: LD_INT 32
12051: PUSH
12052: LD_INT 33
12054: PUSH
12055: LD_INT 34
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 101
12081: PUSH
12082: LD_INT 102
12084: PUSH
12085: LD_INT 103
12087: PUSH
12088: LD_INT 106
12090: PUSH
12091: LD_INT 108
12093: PUSH
12094: LD_INT 112
12096: PUSH
12097: LD_INT 113
12099: PUSH
12100: LD_INT 114
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: ST_TO_ADDR
12117: GO 12712
12119: LD_INT 17
12121: DOUBLE
12122: EQUAL
12123: IFTRUE 12127
12125: GO 12339
12127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12128: LD_ADDR_VAR 0 1
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 3
12141: PUSH
12142: LD_INT 4
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 6
12150: PUSH
12151: LD_INT 7
12153: PUSH
12154: LD_INT 8
12156: PUSH
12157: LD_INT 9
12159: PUSH
12160: LD_INT 10
12162: PUSH
12163: LD_INT 11
12165: PUSH
12166: LD_INT 12
12168: PUSH
12169: LD_INT 13
12171: PUSH
12172: LD_INT 14
12174: PUSH
12175: LD_INT 15
12177: PUSH
12178: LD_INT 16
12180: PUSH
12181: LD_INT 17
12183: PUSH
12184: LD_INT 18
12186: PUSH
12187: LD_INT 19
12189: PUSH
12190: LD_INT 20
12192: PUSH
12193: LD_INT 21
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_INT 23
12201: PUSH
12202: LD_INT 24
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 26
12210: PUSH
12211: LD_INT 27
12213: PUSH
12214: LD_INT 28
12216: PUSH
12217: LD_INT 29
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 31
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 34
12234: PUSH
12235: LD_INT 36
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 101
12277: PUSH
12278: LD_INT 102
12280: PUSH
12281: LD_INT 103
12283: PUSH
12284: LD_INT 104
12286: PUSH
12287: LD_INT 105
12289: PUSH
12290: LD_INT 106
12292: PUSH
12293: LD_INT 107
12295: PUSH
12296: LD_INT 108
12298: PUSH
12299: LD_INT 109
12301: PUSH
12302: LD_INT 110
12304: PUSH
12305: LD_INT 111
12307: PUSH
12308: LD_INT 112
12310: PUSH
12311: LD_INT 113
12313: PUSH
12314: LD_INT 114
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: ST_TO_ADDR
12337: GO 12712
12339: LD_INT 18
12341: DOUBLE
12342: EQUAL
12343: IFTRUE 12347
12345: GO 12483
12347: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12348: LD_ADDR_VAR 0 1
12352: PUSH
12353: LD_INT 2
12355: PUSH
12356: LD_INT 4
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: LD_INT 7
12364: PUSH
12365: LD_INT 11
12367: PUSH
12368: LD_INT 12
12370: PUSH
12371: LD_INT 15
12373: PUSH
12374: LD_INT 16
12376: PUSH
12377: LD_INT 20
12379: PUSH
12380: LD_INT 21
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_INT 23
12388: PUSH
12389: LD_INT 25
12391: PUSH
12392: LD_INT 26
12394: PUSH
12395: LD_INT 30
12397: PUSH
12398: LD_INT 31
12400: PUSH
12401: LD_INT 32
12403: PUSH
12404: LD_INT 33
12406: PUSH
12407: LD_INT 34
12409: PUSH
12410: LD_INT 35
12412: PUSH
12413: LD_INT 36
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 101
12441: PUSH
12442: LD_INT 102
12444: PUSH
12445: LD_INT 103
12447: PUSH
12448: LD_INT 106
12450: PUSH
12451: LD_INT 108
12453: PUSH
12454: LD_INT 112
12456: PUSH
12457: LD_INT 113
12459: PUSH
12460: LD_INT 114
12462: PUSH
12463: LD_INT 115
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: ST_TO_ADDR
12481: GO 12712
12483: LD_INT 19
12485: DOUBLE
12486: EQUAL
12487: IFTRUE 12491
12489: GO 12711
12491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12492: LD_ADDR_VAR 0 1
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: LD_INT 4
12508: PUSH
12509: LD_INT 5
12511: PUSH
12512: LD_INT 6
12514: PUSH
12515: LD_INT 7
12517: PUSH
12518: LD_INT 8
12520: PUSH
12521: LD_INT 9
12523: PUSH
12524: LD_INT 10
12526: PUSH
12527: LD_INT 11
12529: PUSH
12530: LD_INT 12
12532: PUSH
12533: LD_INT 13
12535: PUSH
12536: LD_INT 14
12538: PUSH
12539: LD_INT 15
12541: PUSH
12542: LD_INT 16
12544: PUSH
12545: LD_INT 17
12547: PUSH
12548: LD_INT 18
12550: PUSH
12551: LD_INT 19
12553: PUSH
12554: LD_INT 20
12556: PUSH
12557: LD_INT 21
12559: PUSH
12560: LD_INT 22
12562: PUSH
12563: LD_INT 23
12565: PUSH
12566: LD_INT 24
12568: PUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 26
12574: PUSH
12575: LD_INT 27
12577: PUSH
12578: LD_INT 28
12580: PUSH
12581: LD_INT 29
12583: PUSH
12584: LD_INT 30
12586: PUSH
12587: LD_INT 31
12589: PUSH
12590: LD_INT 32
12592: PUSH
12593: LD_INT 33
12595: PUSH
12596: LD_INT 34
12598: PUSH
12599: LD_INT 35
12601: PUSH
12602: LD_INT 36
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 101
12645: PUSH
12646: LD_INT 102
12648: PUSH
12649: LD_INT 103
12651: PUSH
12652: LD_INT 104
12654: PUSH
12655: LD_INT 105
12657: PUSH
12658: LD_INT 106
12660: PUSH
12661: LD_INT 107
12663: PUSH
12664: LD_INT 108
12666: PUSH
12667: LD_INT 109
12669: PUSH
12670: LD_INT 110
12672: PUSH
12673: LD_INT 111
12675: PUSH
12676: LD_INT 112
12678: PUSH
12679: LD_INT 113
12681: PUSH
12682: LD_INT 114
12684: PUSH
12685: LD_INT 115
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: ST_TO_ADDR
12709: GO 12712
12711: POP
// end else
12712: GO 12749
// if campaign_id = 5 then
12714: LD_OWVAR 69
12718: PUSH
12719: LD_INT 5
12721: EQUAL
12722: IFFALSE 12749
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
12724: LD_ADDR_VAR 0 1
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 100
12741: PUSH
12742: EMPTY
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: ST_TO_ADDR
// end ; if result then
12749: LD_VAR 0 1
12753: IFFALSE 13042
// begin normal :=  ;
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: LD_STRING 
12762: ST_TO_ADDR
// hardcore :=  ;
12763: LD_ADDR_VAR 0 4
12767: PUSH
12768: LD_STRING 
12770: ST_TO_ADDR
// for i = 1 to normalCounter do
12771: LD_ADDR_VAR 0 5
12775: PUSH
12776: DOUBLE
12777: LD_INT 1
12779: DEC
12780: ST_TO_ADDR
12781: LD_EXP 25
12785: PUSH
12786: FOR_TO
12787: IFFALSE 12888
// begin tmp := 0 ;
12789: LD_ADDR_VAR 0 2
12793: PUSH
12794: LD_STRING 0
12796: ST_TO_ADDR
// if result [ 1 ] then
12797: LD_VAR 0 1
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: IFFALSE 12870
// if result [ 1 ] [ 1 ] = i then
12807: LD_VAR 0 1
12811: PUSH
12812: LD_INT 1
12814: ARRAY
12815: PUSH
12816: LD_INT 1
12818: ARRAY
12819: PUSH
12820: LD_VAR 0 5
12824: EQUAL
12825: IFFALSE 12870
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_VAR 0 1
12836: PPUSH
12837: LD_INT 1
12839: PPUSH
12840: LD_VAR 0 1
12844: PUSH
12845: LD_INT 1
12847: ARRAY
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 3
12856: PPUSH
12857: CALL_OW 1
12861: ST_TO_ADDR
// tmp := 1 ;
12862: LD_ADDR_VAR 0 2
12866: PUSH
12867: LD_STRING 1
12869: ST_TO_ADDR
// end ; normal := normal & tmp ;
12870: LD_ADDR_VAR 0 3
12874: PUSH
12875: LD_VAR 0 3
12879: PUSH
12880: LD_VAR 0 2
12884: STR
12885: ST_TO_ADDR
// end ;
12886: GO 12786
12888: POP
12889: POP
// for i = 1 to hardcoreCounter do
12890: LD_ADDR_VAR 0 5
12894: PUSH
12895: DOUBLE
12896: LD_INT 1
12898: DEC
12899: ST_TO_ADDR
12900: LD_EXP 26
12904: PUSH
12905: FOR_TO
12906: IFFALSE 13011
// begin tmp := 0 ;
12908: LD_ADDR_VAR 0 2
12912: PUSH
12913: LD_STRING 0
12915: ST_TO_ADDR
// if result [ 2 ] then
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 2
12923: ARRAY
12924: IFFALSE 12993
// if result [ 2 ] [ 1 ] = 100 + i then
12926: LD_VAR 0 1
12930: PUSH
12931: LD_INT 2
12933: ARRAY
12934: PUSH
12935: LD_INT 1
12937: ARRAY
12938: PUSH
12939: LD_INT 100
12941: PUSH
12942: LD_VAR 0 5
12946: PLUS
12947: EQUAL
12948: IFFALSE 12993
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_INT 2
12962: PPUSH
12963: LD_VAR 0 1
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: CALL_OW 3
12979: PPUSH
12980: CALL_OW 1
12984: ST_TO_ADDR
// tmp := 1 ;
12985: LD_ADDR_VAR 0 2
12989: PUSH
12990: LD_STRING 1
12992: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12993: LD_ADDR_VAR 0 4
12997: PUSH
12998: LD_VAR 0 4
13002: PUSH
13003: LD_VAR 0 2
13007: STR
13008: ST_TO_ADDR
// end ;
13009: GO 12905
13011: POP
13012: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13013: LD_STRING getStreamItemsFromMission("
13015: PUSH
13016: LD_VAR 0 3
13020: STR
13021: PUSH
13022: LD_STRING ","
13024: STR
13025: PUSH
13026: LD_VAR 0 4
13030: STR
13031: PUSH
13032: LD_STRING ")
13034: STR
13035: PPUSH
13036: CALL_OW 559
// end else
13040: GO 13049
// ToLua ( getStreamItemsFromMission("","") ) ;
13042: LD_STRING getStreamItemsFromMission("","")
13044: PPUSH
13045: CALL_OW 559
// end ;
13049: LD_VAR 0 1
13053: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13054: LD_VAR 0 2
13058: PUSH
13059: LD_INT 100
13061: EQUAL
13062: IFFALSE 14011
// begin if not StreamModeActive then
13064: LD_EXP 24
13068: NOT
13069: IFFALSE 13079
// StreamModeActive := true ;
13071: LD_ADDR_EXP 24
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// if p3 = 0 then
13079: LD_VAR 0 3
13083: PUSH
13084: LD_INT 0
13086: EQUAL
13087: IFFALSE 13093
// InitStreamMode ;
13089: CALL 9314 0 0
// if p3 = 1 then
13093: LD_VAR 0 3
13097: PUSH
13098: LD_INT 1
13100: EQUAL
13101: IFFALSE 13111
// sRocket := true ;
13103: LD_ADDR_EXP 29
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// if p3 = 2 then
13111: LD_VAR 0 3
13115: PUSH
13116: LD_INT 2
13118: EQUAL
13119: IFFALSE 13129
// sSpeed := true ;
13121: LD_ADDR_EXP 28
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// if p3 = 3 then
13129: LD_VAR 0 3
13133: PUSH
13134: LD_INT 3
13136: EQUAL
13137: IFFALSE 13147
// sEngine := true ;
13139: LD_ADDR_EXP 30
13143: PUSH
13144: LD_INT 1
13146: ST_TO_ADDR
// if p3 = 4 then
13147: LD_VAR 0 3
13151: PUSH
13152: LD_INT 4
13154: EQUAL
13155: IFFALSE 13165
// sSpec := true ;
13157: LD_ADDR_EXP 27
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if p3 = 5 then
13165: LD_VAR 0 3
13169: PUSH
13170: LD_INT 5
13172: EQUAL
13173: IFFALSE 13183
// sLevel := true ;
13175: LD_ADDR_EXP 31
13179: PUSH
13180: LD_INT 1
13182: ST_TO_ADDR
// if p3 = 6 then
13183: LD_VAR 0 3
13187: PUSH
13188: LD_INT 6
13190: EQUAL
13191: IFFALSE 13201
// sArmoury := true ;
13193: LD_ADDR_EXP 32
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// if p3 = 7 then
13201: LD_VAR 0 3
13205: PUSH
13206: LD_INT 7
13208: EQUAL
13209: IFFALSE 13219
// sRadar := true ;
13211: LD_ADDR_EXP 33
13215: PUSH
13216: LD_INT 1
13218: ST_TO_ADDR
// if p3 = 8 then
13219: LD_VAR 0 3
13223: PUSH
13224: LD_INT 8
13226: EQUAL
13227: IFFALSE 13237
// sBunker := true ;
13229: LD_ADDR_EXP 34
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// if p3 = 9 then
13237: LD_VAR 0 3
13241: PUSH
13242: LD_INT 9
13244: EQUAL
13245: IFFALSE 13255
// sHack := true ;
13247: LD_ADDR_EXP 35
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// if p3 = 10 then
13255: LD_VAR 0 3
13259: PUSH
13260: LD_INT 10
13262: EQUAL
13263: IFFALSE 13273
// sFire := true ;
13265: LD_ADDR_EXP 36
13269: PUSH
13270: LD_INT 1
13272: ST_TO_ADDR
// if p3 = 11 then
13273: LD_VAR 0 3
13277: PUSH
13278: LD_INT 11
13280: EQUAL
13281: IFFALSE 13291
// sRefresh := true ;
13283: LD_ADDR_EXP 37
13287: PUSH
13288: LD_INT 1
13290: ST_TO_ADDR
// if p3 = 12 then
13291: LD_VAR 0 3
13295: PUSH
13296: LD_INT 12
13298: EQUAL
13299: IFFALSE 13309
// sExp := true ;
13301: LD_ADDR_EXP 38
13305: PUSH
13306: LD_INT 1
13308: ST_TO_ADDR
// if p3 = 13 then
13309: LD_VAR 0 3
13313: PUSH
13314: LD_INT 13
13316: EQUAL
13317: IFFALSE 13327
// sDepot := true ;
13319: LD_ADDR_EXP 39
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
// if p3 = 14 then
13327: LD_VAR 0 3
13331: PUSH
13332: LD_INT 14
13334: EQUAL
13335: IFFALSE 13345
// sFlag := true ;
13337: LD_ADDR_EXP 40
13341: PUSH
13342: LD_INT 1
13344: ST_TO_ADDR
// if p3 = 15 then
13345: LD_VAR 0 3
13349: PUSH
13350: LD_INT 15
13352: EQUAL
13353: IFFALSE 13363
// sKamikadze := true ;
13355: LD_ADDR_EXP 48
13359: PUSH
13360: LD_INT 1
13362: ST_TO_ADDR
// if p3 = 16 then
13363: LD_VAR 0 3
13367: PUSH
13368: LD_INT 16
13370: EQUAL
13371: IFFALSE 13381
// sTroll := true ;
13373: LD_ADDR_EXP 49
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// if p3 = 17 then
13381: LD_VAR 0 3
13385: PUSH
13386: LD_INT 17
13388: EQUAL
13389: IFFALSE 13399
// sSlow := true ;
13391: LD_ADDR_EXP 50
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// if p3 = 18 then
13399: LD_VAR 0 3
13403: PUSH
13404: LD_INT 18
13406: EQUAL
13407: IFFALSE 13417
// sLack := true ;
13409: LD_ADDR_EXP 51
13413: PUSH
13414: LD_INT 1
13416: ST_TO_ADDR
// if p3 = 19 then
13417: LD_VAR 0 3
13421: PUSH
13422: LD_INT 19
13424: EQUAL
13425: IFFALSE 13435
// sTank := true ;
13427: LD_ADDR_EXP 53
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// if p3 = 20 then
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 20
13442: EQUAL
13443: IFFALSE 13453
// sRemote := true ;
13445: LD_ADDR_EXP 54
13449: PUSH
13450: LD_INT 1
13452: ST_TO_ADDR
// if p3 = 21 then
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 21
13460: EQUAL
13461: IFFALSE 13471
// sPowell := true ;
13463: LD_ADDR_EXP 55
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// if p3 = 22 then
13471: LD_VAR 0 3
13475: PUSH
13476: LD_INT 22
13478: EQUAL
13479: IFFALSE 13489
// sTeleport := true ;
13481: LD_ADDR_EXP 58
13485: PUSH
13486: LD_INT 1
13488: ST_TO_ADDR
// if p3 = 23 then
13489: LD_VAR 0 3
13493: PUSH
13494: LD_INT 23
13496: EQUAL
13497: IFFALSE 13507
// sOilTower := true ;
13499: LD_ADDR_EXP 60
13503: PUSH
13504: LD_INT 1
13506: ST_TO_ADDR
// if p3 = 24 then
13507: LD_VAR 0 3
13511: PUSH
13512: LD_INT 24
13514: EQUAL
13515: IFFALSE 13525
// sShovel := true ;
13517: LD_ADDR_EXP 61
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// if p3 = 25 then
13525: LD_VAR 0 3
13529: PUSH
13530: LD_INT 25
13532: EQUAL
13533: IFFALSE 13543
// sSheik := true ;
13535: LD_ADDR_EXP 62
13539: PUSH
13540: LD_INT 1
13542: ST_TO_ADDR
// if p3 = 26 then
13543: LD_VAR 0 3
13547: PUSH
13548: LD_INT 26
13550: EQUAL
13551: IFFALSE 13561
// sEarthquake := true ;
13553: LD_ADDR_EXP 64
13557: PUSH
13558: LD_INT 1
13560: ST_TO_ADDR
// if p3 = 27 then
13561: LD_VAR 0 3
13565: PUSH
13566: LD_INT 27
13568: EQUAL
13569: IFFALSE 13579
// sAI := true ;
13571: LD_ADDR_EXP 65
13575: PUSH
13576: LD_INT 1
13578: ST_TO_ADDR
// if p3 = 28 then
13579: LD_VAR 0 3
13583: PUSH
13584: LD_INT 28
13586: EQUAL
13587: IFFALSE 13597
// sCargo := true ;
13589: LD_ADDR_EXP 68
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// if p3 = 29 then
13597: LD_VAR 0 3
13601: PUSH
13602: LD_INT 29
13604: EQUAL
13605: IFFALSE 13615
// sDLaser := true ;
13607: LD_ADDR_EXP 69
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// if p3 = 30 then
13615: LD_VAR 0 3
13619: PUSH
13620: LD_INT 30
13622: EQUAL
13623: IFFALSE 13633
// sExchange := true ;
13625: LD_ADDR_EXP 70
13629: PUSH
13630: LD_INT 1
13632: ST_TO_ADDR
// if p3 = 31 then
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 31
13640: EQUAL
13641: IFFALSE 13651
// sFac := true ;
13643: LD_ADDR_EXP 71
13647: PUSH
13648: LD_INT 1
13650: ST_TO_ADDR
// if p3 = 32 then
13651: LD_VAR 0 3
13655: PUSH
13656: LD_INT 32
13658: EQUAL
13659: IFFALSE 13669
// sPower := true ;
13661: LD_ADDR_EXP 72
13665: PUSH
13666: LD_INT 1
13668: ST_TO_ADDR
// if p3 = 33 then
13669: LD_VAR 0 3
13673: PUSH
13674: LD_INT 33
13676: EQUAL
13677: IFFALSE 13687
// sRandom := true ;
13679: LD_ADDR_EXP 73
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// if p3 = 34 then
13687: LD_VAR 0 3
13691: PUSH
13692: LD_INT 34
13694: EQUAL
13695: IFFALSE 13705
// sShield := true ;
13697: LD_ADDR_EXP 74
13701: PUSH
13702: LD_INT 1
13704: ST_TO_ADDR
// if p3 = 35 then
13705: LD_VAR 0 3
13709: PUSH
13710: LD_INT 35
13712: EQUAL
13713: IFFALSE 13723
// sTime := true ;
13715: LD_ADDR_EXP 75
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// if p3 = 36 then
13723: LD_VAR 0 3
13727: PUSH
13728: LD_INT 36
13730: EQUAL
13731: IFFALSE 13741
// sTools := true ;
13733: LD_ADDR_EXP 76
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// if p3 = 101 then
13741: LD_VAR 0 3
13745: PUSH
13746: LD_INT 101
13748: EQUAL
13749: IFFALSE 13759
// sSold := true ;
13751: LD_ADDR_EXP 41
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// if p3 = 102 then
13759: LD_VAR 0 3
13763: PUSH
13764: LD_INT 102
13766: EQUAL
13767: IFFALSE 13777
// sDiff := true ;
13769: LD_ADDR_EXP 42
13773: PUSH
13774: LD_INT 1
13776: ST_TO_ADDR
// if p3 = 103 then
13777: LD_VAR 0 3
13781: PUSH
13782: LD_INT 103
13784: EQUAL
13785: IFFALSE 13795
// sFog := true ;
13787: LD_ADDR_EXP 45
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// if p3 = 104 then
13795: LD_VAR 0 3
13799: PUSH
13800: LD_INT 104
13802: EQUAL
13803: IFFALSE 13813
// sReset := true ;
13805: LD_ADDR_EXP 46
13809: PUSH
13810: LD_INT 1
13812: ST_TO_ADDR
// if p3 = 105 then
13813: LD_VAR 0 3
13817: PUSH
13818: LD_INT 105
13820: EQUAL
13821: IFFALSE 13831
// sSun := true ;
13823: LD_ADDR_EXP 47
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// if p3 = 106 then
13831: LD_VAR 0 3
13835: PUSH
13836: LD_INT 106
13838: EQUAL
13839: IFFALSE 13849
// sTiger := true ;
13841: LD_ADDR_EXP 43
13845: PUSH
13846: LD_INT 1
13848: ST_TO_ADDR
// if p3 = 107 then
13849: LD_VAR 0 3
13853: PUSH
13854: LD_INT 107
13856: EQUAL
13857: IFFALSE 13867
// sBomb := true ;
13859: LD_ADDR_EXP 44
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
// if p3 = 108 then
13867: LD_VAR 0 3
13871: PUSH
13872: LD_INT 108
13874: EQUAL
13875: IFFALSE 13885
// sWound := true ;
13877: LD_ADDR_EXP 52
13881: PUSH
13882: LD_INT 1
13884: ST_TO_ADDR
// if p3 = 109 then
13885: LD_VAR 0 3
13889: PUSH
13890: LD_INT 109
13892: EQUAL
13893: IFFALSE 13903
// sBetray := true ;
13895: LD_ADDR_EXP 56
13899: PUSH
13900: LD_INT 1
13902: ST_TO_ADDR
// if p3 = 110 then
13903: LD_VAR 0 3
13907: PUSH
13908: LD_INT 110
13910: EQUAL
13911: IFFALSE 13921
// sContamin := true ;
13913: LD_ADDR_EXP 57
13917: PUSH
13918: LD_INT 1
13920: ST_TO_ADDR
// if p3 = 111 then
13921: LD_VAR 0 3
13925: PUSH
13926: LD_INT 111
13928: EQUAL
13929: IFFALSE 13939
// sOil := true ;
13931: LD_ADDR_EXP 59
13935: PUSH
13936: LD_INT 1
13938: ST_TO_ADDR
// if p3 = 112 then
13939: LD_VAR 0 3
13943: PUSH
13944: LD_INT 112
13946: EQUAL
13947: IFFALSE 13957
// sStu := true ;
13949: LD_ADDR_EXP 63
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// if p3 = 113 then
13957: LD_VAR 0 3
13961: PUSH
13962: LD_INT 113
13964: EQUAL
13965: IFFALSE 13975
// sBazooka := true ;
13967: LD_ADDR_EXP 66
13971: PUSH
13972: LD_INT 1
13974: ST_TO_ADDR
// if p3 = 114 then
13975: LD_VAR 0 3
13979: PUSH
13980: LD_INT 114
13982: EQUAL
13983: IFFALSE 13993
// sMortar := true ;
13985: LD_ADDR_EXP 67
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
// if p3 = 115 then
13993: LD_VAR 0 3
13997: PUSH
13998: LD_INT 115
14000: EQUAL
14001: IFFALSE 14011
// sRanger := true ;
14003: LD_ADDR_EXP 77
14007: PUSH
14008: LD_INT 1
14010: ST_TO_ADDR
// end ; end ;
14011: PPOPN 6
14013: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14014: LD_EXP 24
14018: PUSH
14019: LD_EXP 29
14023: AND
14024: IFFALSE 14148
14026: GO 14028
14028: DISABLE
14029: LD_INT 0
14031: PPUSH
14032: PPUSH
// begin enable ;
14033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14034: LD_ADDR_VAR 0 2
14038: PUSH
14039: LD_INT 22
14041: PUSH
14042: LD_OWVAR 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 2
14053: PUSH
14054: LD_INT 34
14056: PUSH
14057: LD_INT 7
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 34
14066: PUSH
14067: LD_INT 45
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 34
14076: PUSH
14077: LD_INT 28
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 34
14086: PUSH
14087: LD_INT 47
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: CALL_OW 69
14109: ST_TO_ADDR
// if not tmp then
14110: LD_VAR 0 2
14114: NOT
14115: IFFALSE 14119
// exit ;
14117: GO 14148
// for i in tmp do
14119: LD_ADDR_VAR 0 1
14123: PUSH
14124: LD_VAR 0 2
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14146
// begin SetLives ( i , 0 ) ;
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_INT 0
14139: PPUSH
14140: CALL_OW 234
// end ;
14144: GO 14129
14146: POP
14147: POP
// end ;
14148: PPOPN 2
14150: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14151: LD_EXP 24
14155: PUSH
14156: LD_EXP 30
14160: AND
14161: IFFALSE 14245
14163: GO 14165
14165: DISABLE
14166: LD_INT 0
14168: PPUSH
14169: PPUSH
// begin enable ;
14170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_OWVAR 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 32
14190: PUSH
14191: LD_INT 3
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 69
14206: ST_TO_ADDR
// if not tmp then
14207: LD_VAR 0 2
14211: NOT
14212: IFFALSE 14216
// exit ;
14214: GO 14245
// for i in tmp do
14216: LD_ADDR_VAR 0 1
14220: PUSH
14221: LD_VAR 0 2
14225: PUSH
14226: FOR_IN
14227: IFFALSE 14243
// begin SetLives ( i , 0 ) ;
14229: LD_VAR 0 1
14233: PPUSH
14234: LD_INT 0
14236: PPUSH
14237: CALL_OW 234
// end ;
14241: GO 14226
14243: POP
14244: POP
// end ;
14245: PPOPN 2
14247: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14248: LD_EXP 24
14252: PUSH
14253: LD_EXP 27
14257: AND
14258: IFFALSE 14351
14260: GO 14262
14262: DISABLE
14263: LD_INT 0
14265: PPUSH
// begin enable ;
14266: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 22
14274: PUSH
14275: LD_OWVAR 2
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: LD_INT 25
14289: PUSH
14290: LD_INT 5
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 25
14299: PUSH
14300: LD_INT 9
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 25
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 69
14331: PUSH
14332: FOR_IN
14333: IFFALSE 14349
// begin SetClass ( i , 1 ) ;
14335: LD_VAR 0 1
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 336
// end ;
14347: GO 14332
14349: POP
14350: POP
// end ;
14351: PPOPN 1
14353: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14354: LD_EXP 24
14358: PUSH
14359: LD_EXP 28
14363: AND
14364: PUSH
14365: LD_OWVAR 65
14369: PUSH
14370: LD_INT 7
14372: LESS
14373: AND
14374: IFFALSE 14388
14376: GO 14378
14378: DISABLE
// begin enable ;
14379: ENABLE
// game_speed := 7 ;
14380: LD_ADDR_OWVAR 65
14384: PUSH
14385: LD_INT 7
14387: ST_TO_ADDR
// end ;
14388: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14389: LD_EXP 24
14393: PUSH
14394: LD_EXP 31
14398: AND
14399: IFFALSE 14601
14401: GO 14403
14403: DISABLE
14404: LD_INT 0
14406: PPUSH
14407: PPUSH
14408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14409: LD_ADDR_VAR 0 3
14413: PUSH
14414: LD_INT 81
14416: PUSH
14417: LD_OWVAR 2
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 21
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: ST_TO_ADDR
// if not tmp then
14445: LD_VAR 0 3
14449: NOT
14450: IFFALSE 14454
// exit ;
14452: GO 14601
// if tmp > 5 then
14454: LD_VAR 0 3
14458: PUSH
14459: LD_INT 5
14461: GREATER
14462: IFFALSE 14474
// k := 5 else
14464: LD_ADDR_VAR 0 2
14468: PUSH
14469: LD_INT 5
14471: ST_TO_ADDR
14472: GO 14484
// k := tmp ;
14474: LD_ADDR_VAR 0 2
14478: PUSH
14479: LD_VAR 0 3
14483: ST_TO_ADDR
// for i := 1 to k do
14484: LD_ADDR_VAR 0 1
14488: PUSH
14489: DOUBLE
14490: LD_INT 1
14492: DEC
14493: ST_TO_ADDR
14494: LD_VAR 0 2
14498: PUSH
14499: FOR_TO
14500: IFFALSE 14599
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14502: LD_VAR 0 3
14506: PUSH
14507: LD_VAR 0 1
14511: ARRAY
14512: PPUSH
14513: LD_VAR 0 1
14517: PUSH
14518: LD_INT 4
14520: MOD
14521: PUSH
14522: LD_INT 1
14524: PLUS
14525: PPUSH
14526: CALL_OW 259
14530: PUSH
14531: LD_INT 10
14533: LESS
14534: IFFALSE 14597
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14536: LD_VAR 0 3
14540: PUSH
14541: LD_VAR 0 1
14545: ARRAY
14546: PPUSH
14547: LD_VAR 0 1
14551: PUSH
14552: LD_INT 4
14554: MOD
14555: PUSH
14556: LD_INT 1
14558: PLUS
14559: PPUSH
14560: LD_VAR 0 3
14564: PUSH
14565: LD_VAR 0 1
14569: ARRAY
14570: PPUSH
14571: LD_VAR 0 1
14575: PUSH
14576: LD_INT 4
14578: MOD
14579: PUSH
14580: LD_INT 1
14582: PLUS
14583: PPUSH
14584: CALL_OW 259
14588: PUSH
14589: LD_INT 1
14591: PLUS
14592: PPUSH
14593: CALL_OW 237
14597: GO 14499
14599: POP
14600: POP
// end ;
14601: PPOPN 3
14603: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14604: LD_EXP 24
14608: PUSH
14609: LD_EXP 32
14613: AND
14614: IFFALSE 14634
14616: GO 14618
14618: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14619: LD_INT 4
14621: PPUSH
14622: LD_OWVAR 2
14626: PPUSH
14627: LD_INT 0
14629: PPUSH
14630: CALL_OW 324
14634: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14635: LD_EXP 24
14639: PUSH
14640: LD_EXP 61
14644: AND
14645: IFFALSE 14665
14647: GO 14649
14649: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14650: LD_INT 19
14652: PPUSH
14653: LD_OWVAR 2
14657: PPUSH
14658: LD_INT 0
14660: PPUSH
14661: CALL_OW 324
14665: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14666: LD_EXP 24
14670: PUSH
14671: LD_EXP 33
14675: AND
14676: IFFALSE 14778
14678: GO 14680
14680: DISABLE
14681: LD_INT 0
14683: PPUSH
14684: PPUSH
// begin enable ;
14685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14686: LD_ADDR_VAR 0 2
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_OWVAR 2
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 34
14708: PUSH
14709: LD_INT 11
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 34
14718: PUSH
14719: LD_INT 30
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: ST_TO_ADDR
// if not tmp then
14740: LD_VAR 0 2
14744: NOT
14745: IFFALSE 14749
// exit ;
14747: GO 14778
// for i in tmp do
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_VAR 0 2
14758: PUSH
14759: FOR_IN
14760: IFFALSE 14776
// begin SetLives ( i , 0 ) ;
14762: LD_VAR 0 1
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 234
// end ;
14774: GO 14759
14776: POP
14777: POP
// end ;
14778: PPOPN 2
14780: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14781: LD_EXP 24
14785: PUSH
14786: LD_EXP 34
14790: AND
14791: IFFALSE 14811
14793: GO 14795
14795: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14796: LD_INT 32
14798: PPUSH
14799: LD_OWVAR 2
14803: PPUSH
14804: LD_INT 0
14806: PPUSH
14807: CALL_OW 324
14811: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14812: LD_EXP 24
14816: PUSH
14817: LD_EXP 35
14821: AND
14822: IFFALSE 15003
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
14831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_OWVAR 2
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 33
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: ST_TO_ADDR
// if not tmp then
14868: LD_VAR 0 2
14872: NOT
14873: IFFALSE 14877
// exit ;
14875: GO 15003
// side := 0 ;
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_INT 0
14884: ST_TO_ADDR
// for i := 1 to 8 do
14885: LD_ADDR_VAR 0 1
14889: PUSH
14890: DOUBLE
14891: LD_INT 1
14893: DEC
14894: ST_TO_ADDR
14895: LD_INT 8
14897: PUSH
14898: FOR_TO
14899: IFFALSE 14947
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14901: LD_OWVAR 2
14905: PUSH
14906: LD_VAR 0 1
14910: NONEQUAL
14911: PUSH
14912: LD_OWVAR 2
14916: PPUSH
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 81
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: AND
14931: IFFALSE 14945
// begin side := i ;
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_VAR 0 1
14942: ST_TO_ADDR
// break ;
14943: GO 14947
// end ;
14945: GO 14898
14947: POP
14948: POP
// if not side then
14949: LD_VAR 0 3
14953: NOT
14954: IFFALSE 14958
// exit ;
14956: GO 15003
// for i := 1 to tmp do
14958: LD_ADDR_VAR 0 1
14962: PUSH
14963: DOUBLE
14964: LD_INT 1
14966: DEC
14967: ST_TO_ADDR
14968: LD_VAR 0 2
14972: PUSH
14973: FOR_TO
14974: IFFALSE 15001
// if Prob ( 60 ) then
14976: LD_INT 60
14978: PPUSH
14979: CALL_OW 13
14983: IFFALSE 14999
// SetSide ( i , side ) ;
14985: LD_VAR 0 1
14989: PPUSH
14990: LD_VAR 0 3
14994: PPUSH
14995: CALL_OW 235
14999: GO 14973
15001: POP
15002: POP
// end ;
15003: PPOPN 3
15005: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15006: LD_EXP 24
15010: PUSH
15011: LD_EXP 37
15015: AND
15016: IFFALSE 15135
15018: GO 15020
15020: DISABLE
15021: LD_INT 0
15023: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_OWVAR 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 21
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 3
15053: PUSH
15054: LD_INT 23
15056: PUSH
15057: LD_INT 0
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: PUSH
15078: FOR_IN
15079: IFFALSE 15133
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 257
15090: PUSH
15091: LD_INT 1
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 4
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: IN
15109: IFFALSE 15131
// SetClass ( un , rand ( 1 , 4 ) ) ;
15111: LD_VAR 0 1
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_INT 4
15121: PPUSH
15122: CALL_OW 12
15126: PPUSH
15127: CALL_OW 336
15131: GO 15078
15133: POP
15134: POP
// end ;
15135: PPOPN 1
15137: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15138: LD_EXP 24
15142: PUSH
15143: LD_EXP 36
15147: AND
15148: IFFALSE 15227
15150: GO 15152
15152: DISABLE
15153: LD_INT 0
15155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15156: LD_ADDR_VAR 0 1
15160: PUSH
15161: LD_INT 22
15163: PUSH
15164: LD_OWVAR 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 3
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PPUSH
15187: CALL_OW 69
15191: ST_TO_ADDR
// if not tmp then
15192: LD_VAR 0 1
15196: NOT
15197: IFFALSE 15201
// exit ;
15199: GO 15227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15201: LD_VAR 0 1
15205: PUSH
15206: LD_INT 1
15208: PPUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 12
15218: ARRAY
15219: PPUSH
15220: LD_INT 100
15222: PPUSH
15223: CALL_OW 234
// end ;
15227: PPOPN 1
15229: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15230: LD_EXP 24
15234: PUSH
15235: LD_EXP 38
15239: AND
15240: IFFALSE 15338
15242: GO 15244
15244: DISABLE
15245: LD_INT 0
15247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_OWVAR 2
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: ST_TO_ADDR
// if not tmp then
15284: LD_VAR 0 1
15288: NOT
15289: IFFALSE 15293
// exit ;
15291: GO 15338
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15293: LD_VAR 0 1
15297: PUSH
15298: LD_INT 1
15300: PPUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 12
15310: ARRAY
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: LD_INT 4
15317: PPUSH
15318: CALL_OW 12
15322: PPUSH
15323: LD_INT 3000
15325: PPUSH
15326: LD_INT 9000
15328: PPUSH
15329: CALL_OW 12
15333: PPUSH
15334: CALL_OW 492
// end ;
15338: PPOPN 1
15340: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15341: LD_EXP 24
15345: PUSH
15346: LD_EXP 39
15350: AND
15351: IFFALSE 15371
15353: GO 15355
15355: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15356: LD_INT 1
15358: PPUSH
15359: LD_OWVAR 2
15363: PPUSH
15364: LD_INT 0
15366: PPUSH
15367: CALL_OW 324
15371: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15372: LD_EXP 24
15376: PUSH
15377: LD_EXP 40
15381: AND
15382: IFFALSE 15465
15384: GO 15386
15386: DISABLE
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_INT 22
15398: PUSH
15399: LD_OWVAR 2
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 21
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: ST_TO_ADDR
// if not tmp then
15427: LD_VAR 0 2
15431: NOT
15432: IFFALSE 15436
// exit ;
15434: GO 15465
// for i in tmp do
15436: LD_ADDR_VAR 0 1
15440: PUSH
15441: LD_VAR 0 2
15445: PUSH
15446: FOR_IN
15447: IFFALSE 15463
// SetBLevel ( i , 10 ) ;
15449: LD_VAR 0 1
15453: PPUSH
15454: LD_INT 10
15456: PPUSH
15457: CALL_OW 241
15461: GO 15446
15463: POP
15464: POP
// end ;
15465: PPOPN 2
15467: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15468: LD_EXP 24
15472: PUSH
15473: LD_EXP 41
15477: AND
15478: IFFALSE 15589
15480: GO 15482
15482: DISABLE
15483: LD_INT 0
15485: PPUSH
15486: PPUSH
15487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15488: LD_ADDR_VAR 0 3
15492: PUSH
15493: LD_INT 22
15495: PUSH
15496: LD_OWVAR 2
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 25
15507: PUSH
15508: LD_INT 1
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PPUSH
15519: CALL_OW 69
15523: ST_TO_ADDR
// if not tmp then
15524: LD_VAR 0 3
15528: NOT
15529: IFFALSE 15533
// exit ;
15531: GO 15589
// un := tmp [ rand ( 1 , tmp ) ] ;
15533: LD_ADDR_VAR 0 2
15537: PUSH
15538: LD_VAR 0 3
15542: PUSH
15543: LD_INT 1
15545: PPUSH
15546: LD_VAR 0 3
15550: PPUSH
15551: CALL_OW 12
15555: ARRAY
15556: ST_TO_ADDR
// if Crawls ( un ) then
15557: LD_VAR 0 2
15561: PPUSH
15562: CALL_OW 318
15566: IFFALSE 15577
// ComWalk ( un ) ;
15568: LD_VAR 0 2
15572: PPUSH
15573: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15577: LD_VAR 0 2
15581: PPUSH
15582: LD_INT 5
15584: PPUSH
15585: CALL_OW 336
// end ;
15589: PPOPN 3
15591: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15592: LD_EXP 24
15596: PUSH
15597: LD_EXP 42
15601: AND
15602: PUSH
15603: LD_OWVAR 67
15607: PUSH
15608: LD_INT 3
15610: LESS
15611: AND
15612: IFFALSE 15631
15614: GO 15616
15616: DISABLE
// Difficulty := Difficulty + 1 ;
15617: LD_ADDR_OWVAR 67
15621: PUSH
15622: LD_OWVAR 67
15626: PUSH
15627: LD_INT 1
15629: PLUS
15630: ST_TO_ADDR
15631: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15632: LD_EXP 24
15636: PUSH
15637: LD_EXP 43
15641: AND
15642: IFFALSE 15745
15644: GO 15646
15646: DISABLE
15647: LD_INT 0
15649: PPUSH
// begin for i := 1 to 5 do
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: DOUBLE
15656: LD_INT 1
15658: DEC
15659: ST_TO_ADDR
15660: LD_INT 5
15662: PUSH
15663: FOR_TO
15664: IFFALSE 15743
// begin uc_nation := nation_nature ;
15666: LD_ADDR_OWVAR 21
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// uc_side := 0 ;
15674: LD_ADDR_OWVAR 20
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15682: LD_ADDR_OWVAR 29
15686: PUSH
15687: LD_INT 12
15689: PUSH
15690: LD_INT 12
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: ST_TO_ADDR
// hc_agressivity := 20 ;
15697: LD_ADDR_OWVAR 35
15701: PUSH
15702: LD_INT 20
15704: ST_TO_ADDR
// hc_class := class_tiger ;
15705: LD_ADDR_OWVAR 28
15709: PUSH
15710: LD_INT 14
15712: ST_TO_ADDR
// hc_gallery :=  ;
15713: LD_ADDR_OWVAR 33
15717: PUSH
15718: LD_STRING 
15720: ST_TO_ADDR
// hc_name :=  ;
15721: LD_ADDR_OWVAR 26
15725: PUSH
15726: LD_STRING 
15728: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15729: CALL_OW 44
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL_OW 51
// end ;
15741: GO 15663
15743: POP
15744: POP
// end ;
15745: PPOPN 1
15747: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15748: LD_EXP 24
15752: PUSH
15753: LD_EXP 44
15757: AND
15758: IFFALSE 15767
15760: GO 15762
15762: DISABLE
// StreamSibBomb ;
15763: CALL 15768 0 0
15767: END
// export function StreamSibBomb ; var i , x , y ; begin
15768: LD_INT 0
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
// result := false ;
15774: LD_ADDR_VAR 0 1
15778: PUSH
15779: LD_INT 0
15781: ST_TO_ADDR
// for i := 1 to 16 do
15782: LD_ADDR_VAR 0 2
15786: PUSH
15787: DOUBLE
15788: LD_INT 1
15790: DEC
15791: ST_TO_ADDR
15792: LD_INT 16
15794: PUSH
15795: FOR_TO
15796: IFFALSE 15995
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15798: LD_ADDR_VAR 0 3
15802: PUSH
15803: LD_INT 10
15805: PUSH
15806: LD_INT 20
15808: PUSH
15809: LD_INT 30
15811: PUSH
15812: LD_INT 40
15814: PUSH
15815: LD_INT 50
15817: PUSH
15818: LD_INT 60
15820: PUSH
15821: LD_INT 70
15823: PUSH
15824: LD_INT 80
15826: PUSH
15827: LD_INT 90
15829: PUSH
15830: LD_INT 100
15832: PUSH
15833: LD_INT 110
15835: PUSH
15836: LD_INT 120
15838: PUSH
15839: LD_INT 130
15841: PUSH
15842: LD_INT 140
15844: PUSH
15845: LD_INT 150
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 1
15867: PPUSH
15868: LD_INT 15
15870: PPUSH
15871: CALL_OW 12
15875: ARRAY
15876: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15877: LD_ADDR_VAR 0 4
15881: PUSH
15882: LD_INT 10
15884: PUSH
15885: LD_INT 20
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_INT 40
15893: PUSH
15894: LD_INT 50
15896: PUSH
15897: LD_INT 60
15899: PUSH
15900: LD_INT 70
15902: PUSH
15903: LD_INT 80
15905: PUSH
15906: LD_INT 90
15908: PUSH
15909: LD_INT 100
15911: PUSH
15912: LD_INT 110
15914: PUSH
15915: LD_INT 120
15917: PUSH
15918: LD_INT 130
15920: PUSH
15921: LD_INT 140
15923: PUSH
15924: LD_INT 150
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 1
15946: PPUSH
15947: LD_INT 15
15949: PPUSH
15950: CALL_OW 12
15954: ARRAY
15955: ST_TO_ADDR
// if ValidHex ( x , y ) then
15956: LD_VAR 0 3
15960: PPUSH
15961: LD_VAR 0 4
15965: PPUSH
15966: CALL_OW 488
15970: IFFALSE 15993
// begin result := [ x , y ] ;
15972: LD_ADDR_VAR 0 1
15976: PUSH
15977: LD_VAR 0 3
15981: PUSH
15982: LD_VAR 0 4
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: ST_TO_ADDR
// break ;
15991: GO 15995
// end ; end ;
15993: GO 15795
15995: POP
15996: POP
// if result then
15997: LD_VAR 0 1
16001: IFFALSE 16061
// begin ToLua ( playSibBomb() ) ;
16003: LD_STRING playSibBomb()
16005: PPUSH
16006: CALL_OW 559
// wait ( 0 0$14 ) ;
16010: LD_INT 490
16012: PPUSH
16013: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16017: LD_VAR 0 1
16021: PUSH
16022: LD_INT 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 2
16033: ARRAY
16034: PPUSH
16035: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16039: LD_VAR 0 1
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: LD_VAR 0 1
16052: PUSH
16053: LD_INT 2
16055: ARRAY
16056: PPUSH
16057: CALL_OW 429
// end ; end ;
16061: LD_VAR 0 1
16065: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16066: LD_EXP 24
16070: PUSH
16071: LD_EXP 46
16075: AND
16076: IFFALSE 16088
16078: GO 16080
16080: DISABLE
// YouLost (  ) ;
16081: LD_STRING 
16083: PPUSH
16084: CALL_OW 104
16088: END
// every 0 0$1 trigger StreamModeActive and sFog do
16089: LD_EXP 24
16093: PUSH
16094: LD_EXP 45
16098: AND
16099: IFFALSE 16113
16101: GO 16103
16103: DISABLE
// FogOff ( your_side ) ;
16104: LD_OWVAR 2
16108: PPUSH
16109: CALL_OW 344
16113: END
// every 0 0$1 trigger StreamModeActive and sSun do
16114: LD_EXP 24
16118: PUSH
16119: LD_EXP 47
16123: AND
16124: IFFALSE 16152
16126: GO 16128
16128: DISABLE
// begin solar_recharge_percent := 0 ;
16129: LD_ADDR_OWVAR 79
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16137: LD_INT 10500
16139: PPUSH
16140: CALL_OW 67
// solar_recharge_percent := 100 ;
16144: LD_ADDR_OWVAR 79
16148: PUSH
16149: LD_INT 100
16151: ST_TO_ADDR
// end ;
16152: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16153: LD_EXP 24
16157: PUSH
16158: LD_EXP 48
16162: AND
16163: IFFALSE 16402
16165: GO 16167
16167: DISABLE
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
16172: PPUSH
// begin tmp := [ ] ;
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: EMPTY
16179: ST_TO_ADDR
// for i := 1 to 6 do
16180: LD_ADDR_VAR 0 1
16184: PUSH
16185: DOUBLE
16186: LD_INT 1
16188: DEC
16189: ST_TO_ADDR
16190: LD_INT 6
16192: PUSH
16193: FOR_TO
16194: IFFALSE 16299
// begin uc_nation := nation_nature ;
16196: LD_ADDR_OWVAR 21
16200: PUSH
16201: LD_INT 0
16203: ST_TO_ADDR
// uc_side := 0 ;
16204: LD_ADDR_OWVAR 20
16208: PUSH
16209: LD_INT 0
16211: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16212: LD_ADDR_OWVAR 29
16216: PUSH
16217: LD_INT 12
16219: PUSH
16220: LD_INT 12
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: ST_TO_ADDR
// hc_agressivity := 20 ;
16227: LD_ADDR_OWVAR 35
16231: PUSH
16232: LD_INT 20
16234: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16235: LD_ADDR_OWVAR 28
16239: PUSH
16240: LD_INT 17
16242: ST_TO_ADDR
// hc_gallery :=  ;
16243: LD_ADDR_OWVAR 33
16247: PUSH
16248: LD_STRING 
16250: ST_TO_ADDR
// hc_name :=  ;
16251: LD_ADDR_OWVAR 26
16255: PUSH
16256: LD_STRING 
16258: ST_TO_ADDR
// un := CreateHuman ;
16259: LD_ADDR_VAR 0 2
16263: PUSH
16264: CALL_OW 44
16268: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16269: LD_VAR 0 2
16273: PPUSH
16274: LD_INT 1
16276: PPUSH
16277: CALL_OW 51
// tmp := tmp ^ un ;
16281: LD_ADDR_VAR 0 3
16285: PUSH
16286: LD_VAR 0 3
16290: PUSH
16291: LD_VAR 0 2
16295: ADD
16296: ST_TO_ADDR
// end ;
16297: GO 16193
16299: POP
16300: POP
// repeat wait ( 0 0$1 ) ;
16301: LD_INT 35
16303: PPUSH
16304: CALL_OW 67
// for un in tmp do
16308: LD_ADDR_VAR 0 2
16312: PUSH
16313: LD_VAR 0 3
16317: PUSH
16318: FOR_IN
16319: IFFALSE 16393
// begin if IsDead ( un ) then
16321: LD_VAR 0 2
16325: PPUSH
16326: CALL_OW 301
16330: IFFALSE 16350
// begin tmp := tmp diff un ;
16332: LD_ADDR_VAR 0 3
16336: PUSH
16337: LD_VAR 0 3
16341: PUSH
16342: LD_VAR 0 2
16346: DIFF
16347: ST_TO_ADDR
// continue ;
16348: GO 16318
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16350: LD_VAR 0 2
16354: PPUSH
16355: LD_INT 3
16357: PUSH
16358: LD_INT 22
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: PPUSH
16377: LD_VAR 0 2
16381: PPUSH
16382: CALL_OW 74
16386: PPUSH
16387: CALL_OW 115
// end ;
16391: GO 16318
16393: POP
16394: POP
// until not tmp ;
16395: LD_VAR 0 3
16399: NOT
16400: IFFALSE 16301
// end ;
16402: PPOPN 3
16404: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16405: LD_EXP 24
16409: PUSH
16410: LD_EXP 49
16414: AND
16415: IFFALSE 16469
16417: GO 16419
16419: DISABLE
// begin ToLua ( displayTroll(); ) ;
16420: LD_STRING displayTroll();
16422: PPUSH
16423: CALL_OW 559
// wait ( 3 3$00 ) ;
16427: LD_INT 6300
16429: PPUSH
16430: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16434: LD_STRING hideTroll();
16436: PPUSH
16437: CALL_OW 559
// wait ( 1 1$00 ) ;
16441: LD_INT 2100
16443: PPUSH
16444: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16448: LD_STRING displayTroll();
16450: PPUSH
16451: CALL_OW 559
// wait ( 1 1$00 ) ;
16455: LD_INT 2100
16457: PPUSH
16458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16462: LD_STRING hideTroll();
16464: PPUSH
16465: CALL_OW 559
// end ;
16469: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16470: LD_EXP 24
16474: PUSH
16475: LD_EXP 50
16479: AND
16480: IFFALSE 16543
16482: GO 16484
16484: DISABLE
16485: LD_INT 0
16487: PPUSH
// begin p := 0 ;
16488: LD_ADDR_VAR 0 1
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// repeat game_speed := 1 ;
16496: LD_ADDR_OWVAR 65
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16504: LD_INT 35
16506: PPUSH
16507: CALL_OW 67
// p := p + 1 ;
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_VAR 0 1
16520: PUSH
16521: LD_INT 1
16523: PLUS
16524: ST_TO_ADDR
// until p >= 60 ;
16525: LD_VAR 0 1
16529: PUSH
16530: LD_INT 60
16532: GREATEREQUAL
16533: IFFALSE 16496
// game_speed := 4 ;
16535: LD_ADDR_OWVAR 65
16539: PUSH
16540: LD_INT 4
16542: ST_TO_ADDR
// end ;
16543: PPOPN 1
16545: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16546: LD_EXP 24
16550: PUSH
16551: LD_EXP 51
16555: AND
16556: IFFALSE 16702
16558: GO 16560
16560: DISABLE
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16565: LD_ADDR_VAR 0 1
16569: PUSH
16570: LD_INT 22
16572: PUSH
16573: LD_OWVAR 2
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 0
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 30
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PPUSH
16614: CALL_OW 69
16618: ST_TO_ADDR
// if not depot then
16619: LD_VAR 0 1
16623: NOT
16624: IFFALSE 16628
// exit ;
16626: GO 16702
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: LD_VAR 0 1
16637: PUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 12
16650: ARRAY
16651: PPUSH
16652: CALL_OW 274
16656: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16657: LD_VAR 0 2
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: LD_INT 0
16667: PPUSH
16668: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16672: LD_VAR 0 2
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: LD_INT 0
16682: PPUSH
16683: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_INT 3
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL_OW 277
// end ;
16702: PPOPN 2
16704: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16705: LD_EXP 24
16709: PUSH
16710: LD_EXP 52
16714: AND
16715: IFFALSE 16812
16717: GO 16719
16719: DISABLE
16720: LD_INT 0
16722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16723: LD_ADDR_VAR 0 1
16727: PUSH
16728: LD_INT 22
16730: PUSH
16731: LD_OWVAR 2
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 21
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 23
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: PPUSH
16772: CALL_OW 69
16776: ST_TO_ADDR
// if not tmp then
16777: LD_VAR 0 1
16781: NOT
16782: IFFALSE 16786
// exit ;
16784: GO 16812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16786: LD_VAR 0 1
16790: PUSH
16791: LD_INT 1
16793: PPUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 12
16803: ARRAY
16804: PPUSH
16805: LD_INT 200
16807: PPUSH
16808: CALL_OW 234
// end ;
16812: PPOPN 1
16814: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16815: LD_EXP 24
16819: PUSH
16820: LD_EXP 53
16824: AND
16825: IFFALSE 16904
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16833: LD_ADDR_VAR 0 1
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_OWVAR 2
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 21
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// if not tmp then
16869: LD_VAR 0 1
16873: NOT
16874: IFFALSE 16878
// exit ;
16876: GO 16904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16878: LD_VAR 0 1
16882: PUSH
16883: LD_INT 1
16885: PPUSH
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 12
16895: ARRAY
16896: PPUSH
16897: LD_INT 60
16899: PPUSH
16900: CALL_OW 234
// end ;
16904: PPOPN 1
16906: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16907: LD_EXP 24
16911: PUSH
16912: LD_EXP 54
16916: AND
16917: IFFALSE 17016
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
// begin enable ;
16926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16927: LD_ADDR_VAR 0 1
16931: PUSH
16932: LD_INT 22
16934: PUSH
16935: LD_OWVAR 2
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 61
16946: PUSH
16947: EMPTY
16948: LIST
16949: PUSH
16950: LD_INT 33
16952: PUSH
16953: LD_INT 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: PPUSH
16965: CALL_OW 69
16969: ST_TO_ADDR
// if not tmp then
16970: LD_VAR 0 1
16974: NOT
16975: IFFALSE 16979
// exit ;
16977: GO 17016
// for i in tmp do
16979: LD_ADDR_VAR 0 2
16983: PUSH
16984: LD_VAR 0 1
16988: PUSH
16989: FOR_IN
16990: IFFALSE 17014
// if IsControledBy ( i ) then
16992: LD_VAR 0 2
16996: PPUSH
16997: CALL_OW 312
17001: IFFALSE 17012
// ComUnlink ( i ) ;
17003: LD_VAR 0 2
17007: PPUSH
17008: CALL_OW 136
17012: GO 16989
17014: POP
17015: POP
// end ;
17016: PPOPN 2
17018: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17019: LD_EXP 24
17023: PUSH
17024: LD_EXP 55
17028: AND
17029: IFFALSE 17169
17031: GO 17033
17033: DISABLE
17034: LD_INT 0
17036: PPUSH
17037: PPUSH
// begin ToLua ( displayPowell(); ) ;
17038: LD_STRING displayPowell();
17040: PPUSH
17041: CALL_OW 559
// uc_side := 0 ;
17045: LD_ADDR_OWVAR 20
17049: PUSH
17050: LD_INT 0
17052: ST_TO_ADDR
// uc_nation := 2 ;
17053: LD_ADDR_OWVAR 21
17057: PUSH
17058: LD_INT 2
17060: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17061: LD_ADDR_OWVAR 37
17065: PUSH
17066: LD_INT 14
17068: ST_TO_ADDR
// vc_engine := engine_siberite ;
17069: LD_ADDR_OWVAR 39
17073: PUSH
17074: LD_INT 3
17076: ST_TO_ADDR
// vc_control := control_apeman ;
17077: LD_ADDR_OWVAR 38
17081: PUSH
17082: LD_INT 5
17084: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17085: LD_ADDR_OWVAR 40
17089: PUSH
17090: LD_INT 29
17092: ST_TO_ADDR
// un := CreateVehicle ;
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: CALL_OW 45
17102: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17103: LD_VAR 0 2
17107: PPUSH
17108: LD_INT 1
17110: PPUSH
17111: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17115: LD_INT 35
17117: PPUSH
17118: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17122: LD_VAR 0 2
17126: PPUSH
17127: LD_INT 22
17129: PUSH
17130: LD_OWVAR 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 69
17143: PPUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: CALL_OW 74
17153: PPUSH
17154: CALL_OW 115
// until IsDead ( un ) ;
17158: LD_VAR 0 2
17162: PPUSH
17163: CALL_OW 301
17167: IFFALSE 17115
// end ;
17169: PPOPN 2
17171: END
// every 0 0$1 trigger StreamModeActive and sStu do
17172: LD_EXP 24
17176: PUSH
17177: LD_EXP 63
17181: AND
17182: IFFALSE 17198
17184: GO 17186
17186: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17187: LD_STRING displayStucuk();
17189: PPUSH
17190: CALL_OW 559
// ResetFog ;
17194: CALL_OW 335
// end ;
17198: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17199: LD_EXP 24
17203: PUSH
17204: LD_EXP 56
17208: AND
17209: IFFALSE 17350
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17218: LD_ADDR_VAR 0 2
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_OWVAR 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 21
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: ST_TO_ADDR
// if not tmp then
17254: LD_VAR 0 2
17258: NOT
17259: IFFALSE 17263
// exit ;
17261: GO 17350
// un := tmp [ rand ( 1 , tmp ) ] ;
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_VAR 0 2
17272: PUSH
17273: LD_INT 1
17275: PPUSH
17276: LD_VAR 0 2
17280: PPUSH
17281: CALL_OW 12
17285: ARRAY
17286: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17287: LD_VAR 0 1
17291: PPUSH
17292: LD_INT 0
17294: PPUSH
17295: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17299: LD_VAR 0 1
17303: PPUSH
17304: LD_OWVAR 3
17308: PUSH
17309: LD_VAR 0 1
17313: DIFF
17314: PPUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 74
17324: PPUSH
17325: CALL_OW 115
// wait ( 0 0$20 ) ;
17329: LD_INT 700
17331: PPUSH
17332: CALL_OW 67
// SetSide ( un , your_side ) ;
17336: LD_VAR 0 1
17340: PPUSH
17341: LD_OWVAR 2
17345: PPUSH
17346: CALL_OW 235
// end ;
17350: PPOPN 2
17352: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17353: LD_EXP 24
17357: PUSH
17358: LD_EXP 57
17362: AND
17363: IFFALSE 17469
17365: GO 17367
17367: DISABLE
17368: LD_INT 0
17370: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17371: LD_ADDR_VAR 0 1
17375: PUSH
17376: LD_INT 22
17378: PUSH
17379: LD_OWVAR 2
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 30
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: ST_TO_ADDR
// if not depot then
17425: LD_VAR 0 1
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17469
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17434: LD_VAR 0 1
17438: PUSH
17439: LD_INT 1
17441: ARRAY
17442: PPUSH
17443: CALL_OW 250
17447: PPUSH
17448: LD_VAR 0 1
17452: PUSH
17453: LD_INT 1
17455: ARRAY
17456: PPUSH
17457: CALL_OW 251
17461: PPUSH
17462: LD_INT 70
17464: PPUSH
17465: CALL_OW 495
// end ;
17469: PPOPN 1
17471: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17472: LD_EXP 24
17476: PUSH
17477: LD_EXP 58
17481: AND
17482: IFFALSE 17693
17484: GO 17486
17486: DISABLE
17487: LD_INT 0
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17494: LD_ADDR_VAR 0 5
17498: PUSH
17499: LD_INT 22
17501: PUSH
17502: LD_OWVAR 2
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PPUSH
17525: CALL_OW 69
17529: ST_TO_ADDR
// if not tmp then
17530: LD_VAR 0 5
17534: NOT
17535: IFFALSE 17539
// exit ;
17537: GO 17693
// for i in tmp do
17539: LD_ADDR_VAR 0 1
17543: PUSH
17544: LD_VAR 0 5
17548: PUSH
17549: FOR_IN
17550: IFFALSE 17691
// begin d := rand ( 0 , 5 ) ;
17552: LD_ADDR_VAR 0 4
17556: PUSH
17557: LD_INT 0
17559: PPUSH
17560: LD_INT 5
17562: PPUSH
17563: CALL_OW 12
17567: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17568: LD_ADDR_VAR 0 2
17572: PUSH
17573: LD_VAR 0 1
17577: PPUSH
17578: CALL_OW 250
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_INT 3
17590: PPUSH
17591: LD_INT 12
17593: PPUSH
17594: CALL_OW 12
17598: PPUSH
17599: CALL_OW 272
17603: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17604: LD_ADDR_VAR 0 3
17608: PUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 251
17618: PPUSH
17619: LD_VAR 0 4
17623: PPUSH
17624: LD_INT 3
17626: PPUSH
17627: LD_INT 12
17629: PPUSH
17630: CALL_OW 12
17634: PPUSH
17635: CALL_OW 273
17639: ST_TO_ADDR
// if ValidHex ( x , y ) then
17640: LD_VAR 0 2
17644: PPUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: CALL_OW 488
17654: IFFALSE 17689
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17656: LD_VAR 0 1
17660: PPUSH
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_INT 3
17673: PPUSH
17674: LD_INT 6
17676: PPUSH
17677: CALL_OW 12
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 483
// end ;
17689: GO 17549
17691: POP
17692: POP
// end ;
17693: PPOPN 5
17695: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17696: LD_EXP 24
17700: PUSH
17701: LD_EXP 59
17705: AND
17706: IFFALSE 17800
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_OWVAR 2
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 32
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 69
17761: ST_TO_ADDR
// if not tmp then
17762: LD_VAR 0 2
17766: NOT
17767: IFFALSE 17771
// exit ;
17769: GO 17800
// for i in tmp do
17771: LD_ADDR_VAR 0 1
17775: PUSH
17776: LD_VAR 0 2
17780: PUSH
17781: FOR_IN
17782: IFFALSE 17798
// SetFuel ( i , 0 ) ;
17784: LD_VAR 0 1
17788: PPUSH
17789: LD_INT 0
17791: PPUSH
17792: CALL_OW 240
17796: GO 17781
17798: POP
17799: POP
// end ;
17800: PPOPN 2
17802: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17803: LD_EXP 24
17807: PUSH
17808: LD_EXP 60
17812: AND
17813: IFFALSE 17879
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 30
17840: PUSH
17841: LD_INT 29
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 1
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 17879
// DestroyUnit ( tmp [ 1 ] ) ;
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 1
17873: ARRAY
17874: PPUSH
17875: CALL_OW 65
// end ;
17879: PPOPN 1
17881: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17882: LD_EXP 24
17886: PUSH
17887: LD_EXP 62
17891: AND
17892: IFFALSE 18021
17894: GO 17896
17896: DISABLE
17897: LD_INT 0
17899: PPUSH
// begin uc_side := 0 ;
17900: LD_ADDR_OWVAR 20
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// uc_nation := nation_arabian ;
17908: LD_ADDR_OWVAR 21
17912: PUSH
17913: LD_INT 2
17915: ST_TO_ADDR
// hc_gallery :=  ;
17916: LD_ADDR_OWVAR 33
17920: PUSH
17921: LD_STRING 
17923: ST_TO_ADDR
// hc_name :=  ;
17924: LD_ADDR_OWVAR 26
17928: PUSH
17929: LD_STRING 
17931: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17932: LD_INT 1
17934: PPUSH
17935: LD_INT 11
17937: PPUSH
17938: LD_INT 10
17940: PPUSH
17941: CALL_OW 380
// un := CreateHuman ;
17945: LD_ADDR_VAR 0 1
17949: PUSH
17950: CALL_OW 44
17954: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17955: LD_VAR 0 1
17959: PPUSH
17960: LD_INT 1
17962: PPUSH
17963: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17967: LD_INT 35
17969: PPUSH
17970: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17974: LD_VAR 0 1
17978: PPUSH
17979: LD_INT 22
17981: PUSH
17982: LD_OWVAR 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PPUSH
17991: CALL_OW 69
17995: PPUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 74
18005: PPUSH
18006: CALL_OW 115
// until IsDead ( un ) ;
18010: LD_VAR 0 1
18014: PPUSH
18015: CALL_OW 301
18019: IFFALSE 17967
// end ;
18021: PPOPN 1
18023: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18024: LD_EXP 24
18028: PUSH
18029: LD_EXP 64
18033: AND
18034: IFFALSE 18046
18036: GO 18038
18038: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18039: LD_STRING earthquake(getX(game), 0, 32)
18041: PPUSH
18042: CALL_OW 559
18046: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18047: LD_EXP 24
18051: PUSH
18052: LD_EXP 65
18056: AND
18057: IFFALSE 18148
18059: GO 18061
18061: DISABLE
18062: LD_INT 0
18064: PPUSH
// begin enable ;
18065: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18066: LD_ADDR_VAR 0 1
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_OWVAR 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 33
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 69
18112: ST_TO_ADDR
// if not tmp then
18113: LD_VAR 0 1
18117: NOT
18118: IFFALSE 18122
// exit ;
18120: GO 18148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18122: LD_VAR 0 1
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 1
18134: PPUSH
18135: CALL_OW 12
18139: ARRAY
18140: PPUSH
18141: LD_INT 1
18143: PPUSH
18144: CALL_OW 234
// end ;
18148: PPOPN 1
18150: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18151: LD_EXP 24
18155: PUSH
18156: LD_EXP 66
18160: AND
18161: IFFALSE 18302
18163: GO 18165
18165: DISABLE
18166: LD_INT 0
18168: PPUSH
18169: PPUSH
18170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18171: LD_ADDR_VAR 0 3
18175: PUSH
18176: LD_INT 22
18178: PUSH
18179: LD_OWVAR 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 25
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: ST_TO_ADDR
// if not tmp then
18207: LD_VAR 0 3
18211: NOT
18212: IFFALSE 18216
// exit ;
18214: GO 18302
// un := tmp [ rand ( 1 , tmp ) ] ;
18216: LD_ADDR_VAR 0 2
18220: PUSH
18221: LD_VAR 0 3
18225: PUSH
18226: LD_INT 1
18228: PPUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: CALL_OW 12
18238: ARRAY
18239: ST_TO_ADDR
// if Crawls ( un ) then
18240: LD_VAR 0 2
18244: PPUSH
18245: CALL_OW 318
18249: IFFALSE 18260
// ComWalk ( un ) ;
18251: LD_VAR 0 2
18255: PPUSH
18256: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18260: LD_VAR 0 2
18264: PPUSH
18265: LD_INT 9
18267: PPUSH
18268: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18272: LD_INT 28
18274: PPUSH
18275: LD_OWVAR 2
18279: PPUSH
18280: LD_INT 2
18282: PPUSH
18283: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18287: LD_INT 29
18289: PPUSH
18290: LD_OWVAR 2
18294: PPUSH
18295: LD_INT 2
18297: PPUSH
18298: CALL_OW 322
// end ;
18302: PPOPN 3
18304: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18305: LD_EXP 24
18309: PUSH
18310: LD_EXP 67
18314: AND
18315: IFFALSE 18426
18317: GO 18319
18319: DISABLE
18320: LD_INT 0
18322: PPUSH
18323: PPUSH
18324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18325: LD_ADDR_VAR 0 3
18329: PUSH
18330: LD_INT 22
18332: PUSH
18333: LD_OWVAR 2
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 25
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PPUSH
18356: CALL_OW 69
18360: ST_TO_ADDR
// if not tmp then
18361: LD_VAR 0 3
18365: NOT
18366: IFFALSE 18370
// exit ;
18368: GO 18426
// un := tmp [ rand ( 1 , tmp ) ] ;
18370: LD_ADDR_VAR 0 2
18374: PUSH
18375: LD_VAR 0 3
18379: PUSH
18380: LD_INT 1
18382: PPUSH
18383: LD_VAR 0 3
18387: PPUSH
18388: CALL_OW 12
18392: ARRAY
18393: ST_TO_ADDR
// if Crawls ( un ) then
18394: LD_VAR 0 2
18398: PPUSH
18399: CALL_OW 318
18403: IFFALSE 18414
// ComWalk ( un ) ;
18405: LD_VAR 0 2
18409: PPUSH
18410: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18414: LD_VAR 0 2
18418: PPUSH
18419: LD_INT 8
18421: PPUSH
18422: CALL_OW 336
// end ;
18426: PPOPN 3
18428: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18429: LD_EXP 24
18433: PUSH
18434: LD_EXP 68
18438: AND
18439: IFFALSE 18583
18441: GO 18443
18443: DISABLE
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18448: LD_ADDR_VAR 0 2
18452: PUSH
18453: LD_INT 22
18455: PUSH
18456: LD_OWVAR 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 21
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: LD_INT 34
18480: PUSH
18481: LD_INT 12
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 34
18490: PUSH
18491: LD_INT 51
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 34
18500: PUSH
18501: LD_INT 32
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 69
18523: ST_TO_ADDR
// if not tmp then
18524: LD_VAR 0 2
18528: NOT
18529: IFFALSE 18533
// exit ;
18531: GO 18583
// for i in tmp do
18533: LD_ADDR_VAR 0 1
18537: PUSH
18538: LD_VAR 0 2
18542: PUSH
18543: FOR_IN
18544: IFFALSE 18581
// if GetCargo ( i , mat_artifact ) = 0 then
18546: LD_VAR 0 1
18550: PPUSH
18551: LD_INT 4
18553: PPUSH
18554: CALL_OW 289
18558: PUSH
18559: LD_INT 0
18561: EQUAL
18562: IFFALSE 18579
// SetCargo ( i , mat_siberit , 100 ) ;
18564: LD_VAR 0 1
18568: PPUSH
18569: LD_INT 3
18571: PPUSH
18572: LD_INT 100
18574: PPUSH
18575: CALL_OW 290
18579: GO 18543
18581: POP
18582: POP
// end ;
18583: PPOPN 2
18585: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18586: LD_EXP 24
18590: PUSH
18591: LD_EXP 69
18595: AND
18596: IFFALSE 18749
18598: GO 18600
18600: DISABLE
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18605: LD_ADDR_VAR 0 2
18609: PUSH
18610: LD_INT 22
18612: PUSH
18613: LD_OWVAR 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PPUSH
18622: CALL_OW 69
18626: ST_TO_ADDR
// if not tmp then
18627: LD_VAR 0 2
18631: NOT
18632: IFFALSE 18636
// exit ;
18634: GO 18749
// for i := 1 to 2 do
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: DOUBLE
18642: LD_INT 1
18644: DEC
18645: ST_TO_ADDR
18646: LD_INT 2
18648: PUSH
18649: FOR_TO
18650: IFFALSE 18747
// begin uc_side := your_side ;
18652: LD_ADDR_OWVAR 20
18656: PUSH
18657: LD_OWVAR 2
18661: ST_TO_ADDR
// uc_nation := nation_american ;
18662: LD_ADDR_OWVAR 21
18666: PUSH
18667: LD_INT 1
18669: ST_TO_ADDR
// vc_chassis := us_morphling ;
18670: LD_ADDR_OWVAR 37
18674: PUSH
18675: LD_INT 5
18677: ST_TO_ADDR
// vc_engine := engine_siberite ;
18678: LD_ADDR_OWVAR 39
18682: PUSH
18683: LD_INT 3
18685: ST_TO_ADDR
// vc_control := control_computer ;
18686: LD_ADDR_OWVAR 38
18690: PUSH
18691: LD_INT 3
18693: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18694: LD_ADDR_OWVAR 40
18698: PUSH
18699: LD_INT 10
18701: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18702: CALL_OW 45
18706: PPUSH
18707: LD_VAR 0 2
18711: PUSH
18712: LD_INT 1
18714: ARRAY
18715: PPUSH
18716: CALL_OW 250
18720: PPUSH
18721: LD_VAR 0 2
18725: PUSH
18726: LD_INT 1
18728: ARRAY
18729: PPUSH
18730: CALL_OW 251
18734: PPUSH
18735: LD_INT 12
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: CALL_OW 50
// end ;
18745: GO 18649
18747: POP
18748: POP
// end ;
18749: PPOPN 2
18751: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18752: LD_EXP 24
18756: PUSH
18757: LD_EXP 70
18761: AND
18762: IFFALSE 18984
18764: GO 18766
18766: DISABLE
18767: LD_INT 0
18769: PPUSH
18770: PPUSH
18771: PPUSH
18772: PPUSH
18773: PPUSH
18774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18775: LD_ADDR_VAR 0 6
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_OWVAR 2
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 21
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: LD_INT 23
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: PPUSH
18824: CALL_OW 69
18828: ST_TO_ADDR
// if not tmp then
18829: LD_VAR 0 6
18833: NOT
18834: IFFALSE 18838
// exit ;
18836: GO 18984
// s1 := rand ( 1 , 4 ) ;
18838: LD_ADDR_VAR 0 2
18842: PUSH
18843: LD_INT 1
18845: PPUSH
18846: LD_INT 4
18848: PPUSH
18849: CALL_OW 12
18853: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18854: LD_ADDR_VAR 0 4
18858: PUSH
18859: LD_VAR 0 6
18863: PUSH
18864: LD_INT 1
18866: ARRAY
18867: PPUSH
18868: LD_VAR 0 2
18872: PPUSH
18873: CALL_OW 259
18877: ST_TO_ADDR
// if s1 = 1 then
18878: LD_VAR 0 2
18882: PUSH
18883: LD_INT 1
18885: EQUAL
18886: IFFALSE 18906
// s2 := rand ( 2 , 4 ) else
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 2
18895: PPUSH
18896: LD_INT 4
18898: PPUSH
18899: CALL_OW 12
18903: ST_TO_ADDR
18904: GO 18914
// s2 := 1 ;
18906: LD_ADDR_VAR 0 3
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18914: LD_ADDR_VAR 0 5
18918: PUSH
18919: LD_VAR 0 6
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: PPUSH
18928: LD_VAR 0 3
18932: PPUSH
18933: CALL_OW 259
18937: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18938: LD_VAR 0 6
18942: PUSH
18943: LD_INT 1
18945: ARRAY
18946: PPUSH
18947: LD_VAR 0 2
18951: PPUSH
18952: LD_VAR 0 5
18956: PPUSH
18957: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18961: LD_VAR 0 6
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_VAR 0 4
18979: PPUSH
18980: CALL_OW 237
// end ;
18984: PPOPN 6
18986: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18987: LD_EXP 24
18991: PUSH
18992: LD_EXP 71
18996: AND
18997: IFFALSE 19076
18999: GO 19001
19001: DISABLE
19002: LD_INT 0
19004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: LD_INT 22
19012: PUSH
19013: LD_OWVAR 2
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 30
19024: PUSH
19025: LD_INT 3
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PPUSH
19036: CALL_OW 69
19040: ST_TO_ADDR
// if not tmp then
19041: LD_VAR 0 1
19045: NOT
19046: IFFALSE 19050
// exit ;
19048: GO 19076
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19050: LD_VAR 0 1
19054: PUSH
19055: LD_INT 1
19057: PPUSH
19058: LD_VAR 0 1
19062: PPUSH
19063: CALL_OW 12
19067: ARRAY
19068: PPUSH
19069: LD_INT 1
19071: PPUSH
19072: CALL_OW 234
// end ;
19076: PPOPN 1
19078: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19079: LD_EXP 24
19083: PUSH
19084: LD_EXP 72
19088: AND
19089: IFFALSE 19201
19091: GO 19093
19093: DISABLE
19094: LD_INT 0
19096: PPUSH
19097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19098: LD_ADDR_VAR 0 2
19102: PUSH
19103: LD_INT 22
19105: PUSH
19106: LD_OWVAR 2
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 30
19120: PUSH
19121: LD_INT 27
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 30
19130: PUSH
19131: LD_INT 26
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 30
19140: PUSH
19141: LD_INT 28
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: ST_TO_ADDR
// if not tmp then
19163: LD_VAR 0 2
19167: NOT
19168: IFFALSE 19172
// exit ;
19170: GO 19201
// for i in tmp do
19172: LD_ADDR_VAR 0 1
19176: PUSH
19177: LD_VAR 0 2
19181: PUSH
19182: FOR_IN
19183: IFFALSE 19199
// SetLives ( i , 1 ) ;
19185: LD_VAR 0 1
19189: PPUSH
19190: LD_INT 1
19192: PPUSH
19193: CALL_OW 234
19197: GO 19182
19199: POP
19200: POP
// end ;
19201: PPOPN 2
19203: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19204: LD_EXP 24
19208: PUSH
19209: LD_EXP 73
19213: AND
19214: IFFALSE 19488
19216: GO 19218
19218: DISABLE
19219: LD_INT 0
19221: PPUSH
19222: PPUSH
19223: PPUSH
// begin i := rand ( 1 , 7 ) ;
19224: LD_ADDR_VAR 0 1
19228: PUSH
19229: LD_INT 1
19231: PPUSH
19232: LD_INT 7
19234: PPUSH
19235: CALL_OW 12
19239: ST_TO_ADDR
// case i of 1 :
19240: LD_VAR 0 1
19244: PUSH
19245: LD_INT 1
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19263
19253: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19254: LD_STRING earthquake(getX(game), 0, 32)
19256: PPUSH
19257: CALL_OW 559
19261: GO 19488
19263: LD_INT 2
19265: DOUBLE
19266: EQUAL
19267: IFTRUE 19271
19269: GO 19285
19271: POP
// begin ToLua ( displayStucuk(); ) ;
19272: LD_STRING displayStucuk();
19274: PPUSH
19275: CALL_OW 559
// ResetFog ;
19279: CALL_OW 335
// end ; 3 :
19283: GO 19488
19285: LD_INT 3
19287: DOUBLE
19288: EQUAL
19289: IFTRUE 19293
19291: GO 19397
19293: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_OWVAR 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 25
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PPUSH
19325: CALL_OW 69
19329: ST_TO_ADDR
// if not tmp then
19330: LD_VAR 0 2
19334: NOT
19335: IFFALSE 19339
// exit ;
19337: GO 19488
// un := tmp [ rand ( 1 , tmp ) ] ;
19339: LD_ADDR_VAR 0 3
19343: PUSH
19344: LD_VAR 0 2
19348: PUSH
19349: LD_INT 1
19351: PPUSH
19352: LD_VAR 0 2
19356: PPUSH
19357: CALL_OW 12
19361: ARRAY
19362: ST_TO_ADDR
// if Crawls ( un ) then
19363: LD_VAR 0 3
19367: PPUSH
19368: CALL_OW 318
19372: IFFALSE 19383
// ComWalk ( un ) ;
19374: LD_VAR 0 3
19378: PPUSH
19379: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 8
19390: PPUSH
19391: CALL_OW 336
// end ; 4 :
19395: GO 19488
19397: LD_INT 4
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19466
19405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_OWVAR 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 30
19425: PUSH
19426: LD_INT 29
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 69
19441: ST_TO_ADDR
// if not tmp then
19442: LD_VAR 0 2
19446: NOT
19447: IFFALSE 19451
// exit ;
19449: GO 19488
// DestroyUnit ( tmp [ 1 ] ) ;
19451: LD_VAR 0 2
19455: PUSH
19456: LD_INT 1
19458: ARRAY
19459: PPUSH
19460: CALL_OW 65
// end ; 5 .. 7 :
19464: GO 19488
19466: LD_INT 5
19468: DOUBLE
19469: GREATEREQUAL
19470: IFFALSE 19478
19472: LD_INT 7
19474: DOUBLE
19475: LESSEQUAL
19476: IFTRUE 19480
19478: GO 19487
19480: POP
// StreamSibBomb ; end ;
19481: CALL 15768 0 0
19485: GO 19488
19487: POP
// end ;
19488: PPOPN 3
19490: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19491: LD_EXP 24
19495: PUSH
19496: LD_EXP 74
19500: AND
19501: IFFALSE 19657
19503: GO 19505
19505: DISABLE
19506: LD_INT 0
19508: PPUSH
19509: PPUSH
19510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_INT 81
19518: PUSH
19519: LD_OWVAR 2
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: PUSH
19531: LD_INT 21
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 21
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PPUSH
19560: CALL_OW 69
19564: ST_TO_ADDR
// if not tmp then
19565: LD_VAR 0 2
19569: NOT
19570: IFFALSE 19574
// exit ;
19572: GO 19657
// p := 0 ;
19574: LD_ADDR_VAR 0 3
19578: PUSH
19579: LD_INT 0
19581: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19582: LD_INT 35
19584: PPUSH
19585: CALL_OW 67
// p := p + 1 ;
19589: LD_ADDR_VAR 0 3
19593: PUSH
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 1
19601: PLUS
19602: ST_TO_ADDR
// for i in tmp do
19603: LD_ADDR_VAR 0 1
19607: PUSH
19608: LD_VAR 0 2
19612: PUSH
19613: FOR_IN
19614: IFFALSE 19645
// if GetLives ( i ) < 1000 then
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 256
19625: PUSH
19626: LD_INT 1000
19628: LESS
19629: IFFALSE 19643
// SetLives ( i , 1000 ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_INT 1000
19638: PPUSH
19639: CALL_OW 234
19643: GO 19613
19645: POP
19646: POP
// until p > 20 ;
19647: LD_VAR 0 3
19651: PUSH
19652: LD_INT 20
19654: GREATER
19655: IFFALSE 19582
// end ;
19657: PPOPN 3
19659: END
// every 0 0$1 trigger StreamModeActive and sTime do
19660: LD_EXP 24
19664: PUSH
19665: LD_EXP 75
19669: AND
19670: IFFALSE 19705
19672: GO 19674
19674: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19675: LD_INT 28
19677: PPUSH
19678: LD_OWVAR 2
19682: PPUSH
19683: LD_INT 2
19685: PPUSH
19686: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19690: LD_INT 30
19692: PPUSH
19693: LD_OWVAR 2
19697: PPUSH
19698: LD_INT 2
19700: PPUSH
19701: CALL_OW 322
// end ;
19705: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19706: LD_EXP 24
19710: PUSH
19711: LD_EXP 76
19715: AND
19716: IFFALSE 19837
19718: GO 19720
19720: DISABLE
19721: LD_INT 0
19723: PPUSH
19724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19725: LD_ADDR_VAR 0 2
19729: PUSH
19730: LD_INT 22
19732: PUSH
19733: LD_OWVAR 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: LD_INT 23
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: ST_TO_ADDR
// if not tmp then
19779: LD_VAR 0 2
19783: NOT
19784: IFFALSE 19788
// exit ;
19786: GO 19837
// for i in tmp do
19788: LD_ADDR_VAR 0 1
19792: PUSH
19793: LD_VAR 0 2
19797: PUSH
19798: FOR_IN
19799: IFFALSE 19835
// begin if Crawls ( i ) then
19801: LD_VAR 0 1
19805: PPUSH
19806: CALL_OW 318
19810: IFFALSE 19821
// ComWalk ( i ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 138
// SetClass ( i , 2 ) ;
19821: LD_VAR 0 1
19825: PPUSH
19826: LD_INT 2
19828: PPUSH
19829: CALL_OW 336
// end ;
19833: GO 19798
19835: POP
19836: POP
// end ;
19837: PPOPN 2
19839: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19840: LD_EXP 24
19844: PUSH
19845: LD_EXP 77
19849: AND
19850: IFFALSE 20131
19852: GO 19854
19854: DISABLE
19855: LD_INT 0
19857: PPUSH
19858: PPUSH
19859: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19860: LD_OWVAR 2
19864: PPUSH
19865: LD_INT 9
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: LD_INT 1
19873: PPUSH
19874: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19878: LD_INT 9
19880: PPUSH
19881: LD_OWVAR 2
19885: PPUSH
19886: CALL_OW 343
// uc_side := 9 ;
19890: LD_ADDR_OWVAR 20
19894: PUSH
19895: LD_INT 9
19897: ST_TO_ADDR
// uc_nation := 2 ;
19898: LD_ADDR_OWVAR 21
19902: PUSH
19903: LD_INT 2
19905: ST_TO_ADDR
// hc_name := Dark Warrior ;
19906: LD_ADDR_OWVAR 26
19910: PUSH
19911: LD_STRING Dark Warrior
19913: ST_TO_ADDR
// hc_gallery :=  ;
19914: LD_ADDR_OWVAR 33
19918: PUSH
19919: LD_STRING 
19921: ST_TO_ADDR
// hc_noskilllimit := true ;
19922: LD_ADDR_OWVAR 76
19926: PUSH
19927: LD_INT 1
19929: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19930: LD_ADDR_OWVAR 31
19934: PUSH
19935: LD_INT 30
19937: PUSH
19938: LD_INT 30
19940: PUSH
19941: LD_INT 30
19943: PUSH
19944: LD_INT 30
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: ST_TO_ADDR
// un := CreateHuman ;
19953: LD_ADDR_VAR 0 3
19957: PUSH
19958: CALL_OW 44
19962: ST_TO_ADDR
// hc_noskilllimit := false ;
19963: LD_ADDR_OWVAR 76
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_INT 1
19978: PPUSH
19979: CALL_OW 51
// p := 0 ;
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19991: LD_INT 35
19993: PPUSH
19994: CALL_OW 67
// p := p + 1 ;
19998: LD_ADDR_VAR 0 2
20002: PUSH
20003: LD_VAR 0 2
20007: PUSH
20008: LD_INT 1
20010: PLUS
20011: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20012: LD_VAR 0 3
20016: PPUSH
20017: CALL_OW 256
20021: PUSH
20022: LD_INT 1000
20024: LESS
20025: IFFALSE 20039
// SetLives ( un , 1000 ) ;
20027: LD_VAR 0 3
20031: PPUSH
20032: LD_INT 1000
20034: PPUSH
20035: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20039: LD_VAR 0 3
20043: PPUSH
20044: LD_INT 81
20046: PUSH
20047: LD_OWVAR 2
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 91
20058: PUSH
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 30
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PPUSH
20076: CALL_OW 69
20080: PPUSH
20081: LD_VAR 0 3
20085: PPUSH
20086: CALL_OW 74
20090: PPUSH
20091: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20095: LD_VAR 0 2
20099: PUSH
20100: LD_INT 60
20102: GREATER
20103: PUSH
20104: LD_VAR 0 3
20108: PPUSH
20109: CALL_OW 301
20113: OR
20114: IFFALSE 19991
// if un then
20116: LD_VAR 0 3
20120: IFFALSE 20131
// RemoveUnit ( un ) ;
20122: LD_VAR 0 3
20126: PPUSH
20127: CALL_OW 64
// end ; end_of_file end_of_file
20131: PPOPN 3
20133: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20134: LD_INT 0
20136: PPUSH
20137: PPUSH
20138: PPUSH
20139: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 264
20149: PUSH
20150: LD_EXP 82
20154: EQUAL
20155: IFFALSE 20227
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20157: LD_INT 68
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 255
20169: PPUSH
20170: CALL_OW 321
20174: PUSH
20175: LD_INT 2
20177: EQUAL
20178: IFFALSE 20190
// eff := 70 else
20180: LD_ADDR_VAR 0 4
20184: PUSH
20185: LD_INT 70
20187: ST_TO_ADDR
20188: GO 20198
// eff := 30 ;
20190: LD_ADDR_VAR 0 4
20194: PUSH
20195: LD_INT 30
20197: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 250
20207: PPUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL_OW 251
20217: PPUSH
20218: LD_VAR 0 4
20222: PPUSH
20223: CALL_OW 495
// end ; end ;
20227: LD_VAR 0 2
20231: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20232: LD_INT 0
20234: PPUSH
// end ;
20235: LD_VAR 0 4
20239: RET
// export function SOS_Command ( cmd ) ; begin
20240: LD_INT 0
20242: PPUSH
// end ;
20243: LD_VAR 0 2
20247: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20248: LD_VAR 0 1
20252: PUSH
20253: LD_INT 255
20255: EQUAL
20256: PUSH
20257: LD_VAR 0 2
20261: PPUSH
20262: CALL_OW 264
20266: PUSH
20267: LD_INT 14
20269: PUSH
20270: LD_INT 53
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: IN
20277: AND
20278: PUSH
20279: LD_VAR 0 4
20283: PPUSH
20284: LD_VAR 0 5
20288: PPUSH
20289: CALL_OW 488
20293: AND
20294: IFFALSE 20318
// CutTreeXYR ( unit , x , y , 12 ) ;
20296: LD_VAR 0 2
20300: PPUSH
20301: LD_VAR 0 4
20305: PPUSH
20306: LD_VAR 0 5
20310: PPUSH
20311: LD_INT 12
20313: PPUSH
20314: CALL 20321 0 4
// end ;
20318: PPOPN 5
20320: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
20331: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20332: LD_VAR 0 1
20336: NOT
20337: PUSH
20338: LD_VAR 0 2
20342: PPUSH
20343: LD_VAR 0 3
20347: PPUSH
20348: CALL_OW 488
20352: NOT
20353: OR
20354: PUSH
20355: LD_VAR 0 4
20359: NOT
20360: OR
20361: IFFALSE 20365
// exit ;
20363: GO 20705
// list := [ ] ;
20365: LD_ADDR_VAR 0 13
20369: PUSH
20370: EMPTY
20371: ST_TO_ADDR
// if x - r < 0 then
20372: LD_VAR 0 2
20376: PUSH
20377: LD_VAR 0 4
20381: MINUS
20382: PUSH
20383: LD_INT 0
20385: LESS
20386: IFFALSE 20398
// min_x := 0 else
20388: LD_ADDR_VAR 0 7
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
20396: GO 20414
// min_x := x - r ;
20398: LD_ADDR_VAR 0 7
20402: PUSH
20403: LD_VAR 0 2
20407: PUSH
20408: LD_VAR 0 4
20412: MINUS
20413: ST_TO_ADDR
// if y - r < 0 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_VAR 0 4
20423: MINUS
20424: PUSH
20425: LD_INT 0
20427: LESS
20428: IFFALSE 20440
// min_y := 0 else
20430: LD_ADDR_VAR 0 8
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
20438: GO 20456
// min_y := y - r ;
20440: LD_ADDR_VAR 0 8
20444: PUSH
20445: LD_VAR 0 3
20449: PUSH
20450: LD_VAR 0 4
20454: MINUS
20455: ST_TO_ADDR
// max_x := x + r ;
20456: LD_ADDR_VAR 0 9
20460: PUSH
20461: LD_VAR 0 2
20465: PUSH
20466: LD_VAR 0 4
20470: PLUS
20471: ST_TO_ADDR
// max_y := y + r ;
20472: LD_ADDR_VAR 0 10
20476: PUSH
20477: LD_VAR 0 3
20481: PUSH
20482: LD_VAR 0 4
20486: PLUS
20487: ST_TO_ADDR
// for _x = min_x to max_x do
20488: LD_ADDR_VAR 0 11
20492: PUSH
20493: DOUBLE
20494: LD_VAR 0 7
20498: DEC
20499: ST_TO_ADDR
20500: LD_VAR 0 9
20504: PUSH
20505: FOR_TO
20506: IFFALSE 20623
// for _y = min_y to max_y do
20508: LD_ADDR_VAR 0 12
20512: PUSH
20513: DOUBLE
20514: LD_VAR 0 8
20518: DEC
20519: ST_TO_ADDR
20520: LD_VAR 0 10
20524: PUSH
20525: FOR_TO
20526: IFFALSE 20619
// begin if not ValidHex ( _x , _y ) then
20528: LD_VAR 0 11
20532: PPUSH
20533: LD_VAR 0 12
20537: PPUSH
20538: CALL_OW 488
20542: NOT
20543: IFFALSE 20547
// continue ;
20545: GO 20525
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20547: LD_VAR 0 11
20551: PPUSH
20552: LD_VAR 0 12
20556: PPUSH
20557: CALL_OW 351
20561: PUSH
20562: LD_VAR 0 11
20566: PPUSH
20567: LD_VAR 0 12
20571: PPUSH
20572: CALL_OW 554
20576: AND
20577: IFFALSE 20617
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20579: LD_ADDR_VAR 0 13
20583: PUSH
20584: LD_VAR 0 13
20588: PPUSH
20589: LD_VAR 0 13
20593: PUSH
20594: LD_INT 1
20596: PLUS
20597: PPUSH
20598: LD_VAR 0 11
20602: PUSH
20603: LD_VAR 0 12
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PPUSH
20612: CALL_OW 2
20616: ST_TO_ADDR
// end ;
20617: GO 20525
20619: POP
20620: POP
20621: GO 20505
20623: POP
20624: POP
// if not list then
20625: LD_VAR 0 13
20629: NOT
20630: IFFALSE 20634
// exit ;
20632: GO 20705
// for i in list do
20634: LD_ADDR_VAR 0 6
20638: PUSH
20639: LD_VAR 0 13
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20703
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20647: LD_VAR 0 1
20651: PPUSH
20652: LD_STRING M
20654: PUSH
20655: LD_VAR 0 6
20659: PUSH
20660: LD_INT 1
20662: ARRAY
20663: PUSH
20664: LD_VAR 0 6
20668: PUSH
20669: LD_INT 2
20671: ARRAY
20672: PUSH
20673: LD_INT 0
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: PPUSH
20697: CALL_OW 447
20701: GO 20644
20703: POP
20704: POP
// end ; end_of_file
20705: LD_VAR 0 5
20709: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
20710: GO 20712
20712: DISABLE
// begin ru_radar := 98 ;
20713: LD_ADDR_EXP 78
20717: PUSH
20718: LD_INT 98
20720: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20721: LD_ADDR_EXP 79
20725: PUSH
20726: LD_INT 89
20728: ST_TO_ADDR
// us_hack := 99 ;
20729: LD_ADDR_EXP 80
20733: PUSH
20734: LD_INT 99
20736: ST_TO_ADDR
// us_artillery := 97 ;
20737: LD_ADDR_EXP 81
20741: PUSH
20742: LD_INT 97
20744: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20745: LD_ADDR_EXP 82
20749: PUSH
20750: LD_INT 91
20752: ST_TO_ADDR
// tech_Artillery := 80 ;
20753: LD_ADDR_EXP 83
20757: PUSH
20758: LD_INT 80
20760: ST_TO_ADDR
// tech_RadMat := 81 ;
20761: LD_ADDR_EXP 84
20765: PUSH
20766: LD_INT 81
20768: ST_TO_ADDR
// tech_BasicTools := 82 ;
20769: LD_ADDR_EXP 85
20773: PUSH
20774: LD_INT 82
20776: ST_TO_ADDR
// tech_Cargo := 83 ;
20777: LD_ADDR_EXP 86
20781: PUSH
20782: LD_INT 83
20784: ST_TO_ADDR
// tech_Track := 84 ;
20785: LD_ADDR_EXP 87
20789: PUSH
20790: LD_INT 84
20792: ST_TO_ADDR
// tech_Crane := 85 ;
20793: LD_ADDR_EXP 88
20797: PUSH
20798: LD_INT 85
20800: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20801: LD_ADDR_EXP 89
20805: PUSH
20806: LD_INT 86
20808: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20809: LD_ADDR_EXP 90
20813: PUSH
20814: LD_INT 87
20816: ST_TO_ADDR
// end ;
20817: END
