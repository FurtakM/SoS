// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5318
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5318
// Say ( Heike , DH-dogtag-found ) ;
5306: LD_EXP 16
5310: PPUSH
5311: LD_STRING DH-dogtag-found
5313: PPUSH
5314: CALL_OW 88
// end ;
5318: PPOPN 1
5320: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5321: LD_EXP 8
5325: NOT
5326: PUSH
5327: LD_EXP 7
5331: NOT
5332: AND
5333: PUSH
5334: LD_INT 5
5336: PPUSH
5337: LD_EXP 16
5341: PPUSH
5342: CALL_OW 292
5346: AND
5347: PUSH
5348: LD_EXP 16
5352: PPUSH
5353: LD_EXP 17
5357: PPUSH
5358: CALL_OW 296
5362: PUSH
5363: LD_INT 8
5365: LESS
5366: AND
5367: IFFALSE 5752
5369: GO 5371
5371: DISABLE
// begin olafSpotted := true ;
5372: LD_ADDR_EXP 8
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if HasTask ( Olaf ) then
5380: LD_EXP 17
5384: PPUSH
5385: CALL_OW 314
5389: IFFALSE 5400
// ComStop ( Olaf ) ;
5391: LD_EXP 17
5395: PPUSH
5396: CALL_OW 141
// InGameOn ;
5400: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5404: LD_EXP 17
5408: PPUSH
5409: LD_EXP 16
5413: PPUSH
5414: CALL_OW 296
5418: PUSH
5419: LD_INT 8
5421: GREATER
5422: IFFALSE 5438
// ComMoveUnit ( Olaf , Heike ) ;
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5438: LD_INT 35
5440: PPUSH
5441: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5445: LD_EXP 17
5449: PPUSH
5450: LD_EXP 16
5454: PPUSH
5455: CALL_OW 296
5459: PUSH
5460: LD_INT 8
5462: LESSEQUAL
5463: IFFALSE 5438
// ComTurnUnit ( Heike , Olaf ) ;
5465: LD_EXP 16
5469: PPUSH
5470: LD_EXP 17
5474: PPUSH
5475: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5479: LD_EXP 17
5483: PPUSH
5484: LD_EXP 16
5488: PPUSH
5489: CALL_OW 119
// DialogueOn ;
5493: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5497: LD_EXP 17
5501: PPUSH
5502: LD_STRING DO-olaf-1
5504: PPUSH
5505: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5509: LD_EXP 16
5513: PPUSH
5514: LD_STRING DH-olaf-1
5516: PPUSH
5517: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5521: LD_EXP 17
5525: PPUSH
5526: LD_STRING DO-olaf-2
5528: PPUSH
5529: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5533: LD_EXP 16
5537: PPUSH
5538: LD_STRING DH-olaf-2
5540: PPUSH
5541: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5545: LD_EXP 17
5549: PPUSH
5550: LD_STRING DO-olaf-3
5552: PPUSH
5553: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5557: LD_EXP 17
5561: PPUSH
5562: LD_STRING DO-olaf-4
5564: PPUSH
5565: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5569: LD_EXP 16
5573: PPUSH
5574: LD_STRING DH-olaf-4
5576: PPUSH
5577: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5581: LD_EXP 17
5585: PPUSH
5586: LD_STRING DO-olaf-5
5588: PPUSH
5589: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5593: LD_EXP 16
5597: PPUSH
5598: LD_STRING DH-olaf-5
5600: PPUSH
5601: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5605: LD_EXP 17
5609: PPUSH
5610: LD_STRING DO-olaf-6
5612: PPUSH
5613: CALL_OW 88
// if russianSpotted or johnnySaved then
5617: LD_EXP 9
5621: PUSH
5622: LD_EXP 4
5626: OR
5627: IFFALSE 5655
// begin Say ( Heike , DH-olaf-6a ) ;
5629: LD_EXP 16
5633: PPUSH
5634: LD_STRING DH-olaf-6a
5636: PPUSH
5637: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5641: LD_EXP 17
5645: PPUSH
5646: LD_STRING DO-olaf-7a
5648: PPUSH
5649: CALL_OW 88
// end else
5653: GO 5679
// begin Say ( Heike , DH-olaf-6b ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DH-olaf-6b
5662: PPUSH
5663: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5667: LD_EXP 17
5671: PPUSH
5672: LD_STRING DO-olaf-7b
5674: PPUSH
5675: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5679: LD_EXP 17
5683: PPUSH
5684: LD_STRING DO-olaf-8
5686: PPUSH
5687: CALL_OW 88
// DialogueOff ;
5691: CALL_OW 7
// InGameOff ;
5695: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5699: LD_STRING O3_camp_cont
5701: PPUSH
5702: CALL_OW 337
// if not johnnySaved then
5706: LD_EXP 4
5710: NOT
5711: IFFALSE 5722
// KillUnit ( Johnny ) ;
5713: LD_EXP 25
5717: PPUSH
5718: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_INT 52
5729: PPUSH
5730: LD_INT 90
5732: PPUSH
5733: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5737: LD_EXP 17
5741: PPUSH
5742: LD_INT 53
5744: PPUSH
5745: LD_INT 89
5747: PPUSH
5748: CALL_OW 178
// end ;
5752: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5753: LD_EXP 8
5757: NOT
5758: PUSH
5759: LD_EXP 16
5763: PPUSH
5764: LD_EXP 18
5768: PPUSH
5769: CALL_OW 296
5773: PUSH
5774: LD_INT 36
5776: LESS
5777: AND
5778: IFFALSE 5798
5780: GO 5782
5782: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5783: LD_EXP 17
5787: PPUSH
5788: LD_INT 39
5790: PPUSH
5791: LD_INT 71
5793: PPUSH
5794: CALL_OW 111
5798: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5799: LD_EXP 7
5803: NOT
5804: PUSH
5805: LD_INT 2
5807: PPUSH
5808: LD_EXP 19
5812: PPUSH
5813: CALL_OW 292
5817: PUSH
5818: LD_INT 2
5820: PPUSH
5821: LD_EXP 18
5825: PPUSH
5826: CALL_OW 292
5830: OR
5831: AND
5832: IFFALSE 7153
5834: GO 5836
5836: DISABLE
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin if not johnnySaved then
5842: LD_EXP 4
5846: NOT
5847: IFFALSE 5858
// KillUnit ( Johnny ) ;
5849: LD_EXP 25
5853: PPUSH
5854: CALL_OW 66
// mercenariesSpotted := true ;
5858: LD_ADDR_EXP 7
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5866: LD_STRING O4_camp_cont
5868: PPUSH
5869: CALL_OW 337
// InGameOn ;
5873: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5877: LD_INT 53
5879: PPUSH
5880: LD_INT 89
5882: PPUSH
5883: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5887: LD_INT 53
5889: PPUSH
5890: LD_INT 89
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_INT 8
5898: NEG
5899: PPUSH
5900: CALL_OW 330
// if olafSpotted then
5904: LD_EXP 8
5908: IFFALSE 6026
// begin AddComTurnUnit ( Olaf , Heike ) ;
5910: LD_EXP 17
5914: PPUSH
5915: LD_EXP 16
5919: PPUSH
5920: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5924: LD_EXP 16
5928: PPUSH
5929: LD_INT 51
5931: PPUSH
5932: LD_INT 86
5934: PPUSH
5935: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5939: LD_EXP 16
5943: PPUSH
5944: LD_EXP 17
5948: PPUSH
5949: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5953: LD_EXP 17
5957: PPUSH
5958: LD_STRING DO-camp-1
5960: PPUSH
5961: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5965: LD_EXP 18
5969: PUSH
5970: LD_EXP 19
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PPUSH
5979: LD_EXP 16
5983: PPUSH
5984: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5988: LD_EXP 18
5992: PPUSH
5993: LD_STRING DG-camp-1
5995: PPUSH
5996: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6000: LD_EXP 16
6004: PPUSH
6005: LD_STRING DH-camp-1
6007: PPUSH
6008: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6012: LD_EXP 17
6016: PPUSH
6017: LD_STRING DO-camp-2
6019: PPUSH
6020: CALL_OW 88
// end else
6024: GO 6421
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6026: LD_EXP 16
6030: PPUSH
6031: LD_INT 51
6033: PPUSH
6034: LD_INT 86
6036: PPUSH
6037: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6041: LD_EXP 16
6045: PPUSH
6046: LD_EXP 18
6050: PPUSH
6051: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6055: LD_EXP 18
6059: PUSH
6060: LD_EXP 19
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: LD_EXP 16
6073: PPUSH
6074: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6078: LD_EXP 18
6082: PPUSH
6083: LD_STRING DG-camp-1a
6085: PPUSH
6086: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6090: LD_EXP 16
6094: PPUSH
6095: LD_STRING DH-camp-1a
6097: PPUSH
6098: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6109: LD_EXP 19
6113: PPUSH
6114: LD_EXP 17
6118: PPUSH
6119: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6123: LD_EXP 19
6127: PPUSH
6128: LD_STRING DM-camp-1a
6130: PPUSH
6131: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6135: LD_EXP 17
6139: PPUSH
6140: LD_INT 52
6142: PPUSH
6143: LD_INT 90
6145: PPUSH
6146: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_EXP 16
6159: PPUSH
6160: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6164: LD_EXP 18
6168: PPUSH
6169: LD_STRING DG-camp-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6176: LD_EXP 16
6180: PPUSH
6181: LD_STRING DH-camp-2a
6183: PPUSH
6184: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6188: LD_EXP 19
6192: PPUSH
6193: LD_STRING DM-camp-2a
6195: PPUSH
6196: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6207: LD_EXP 17
6211: PPUSH
6212: LD_EXP 16
6216: PPUSH
6217: CALL_OW 296
6221: PUSH
6222: LD_INT 10
6224: LESS
6225: IFFALSE 6200
// AddComTurnUnit ( Olaf , Heike ) ;
6227: LD_EXP 17
6231: PPUSH
6232: LD_EXP 16
6236: PPUSH
6237: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6241: LD_EXP 19
6245: PPUSH
6246: LD_EXP 16
6250: PPUSH
6251: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6255: LD_EXP 17
6259: PPUSH
6260: LD_STRING DO-camp-2a
6262: PPUSH
6263: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6267: LD_EXP 16
6271: PPUSH
6272: LD_EXP 17
6276: PPUSH
6277: CALL_OW 119
// if russianSpotted then
6281: LD_EXP 9
6285: IFFALSE 6325
// begin Say ( Heike , DH-camp-2aa ) ;
6287: LD_EXP 16
6291: PPUSH
6292: LD_STRING DH-camp-2aa
6294: PPUSH
6295: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6299: LD_EXP 18
6303: PPUSH
6304: LD_STRING DG-camp-2aa
6306: PPUSH
6307: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6311: LD_EXP 19
6315: PPUSH
6316: LD_STRING DM-camp-2aa
6318: PPUSH
6319: CALL_OW 88
// end else
6323: GO 6349
// begin Say ( Heike , DH-camp-2ab ) ;
6325: LD_EXP 16
6329: PPUSH
6330: LD_STRING DH-camp-2ab
6332: PPUSH
6333: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6337: LD_EXP 19
6341: PPUSH
6342: LD_STRING DM-camp-2ab
6344: PPUSH
6345: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6349: LD_EXP 16
6353: PPUSH
6354: LD_STRING DH-camp-3a
6356: PPUSH
6357: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6361: LD_EXP 17
6365: PPUSH
6366: LD_STRING DO-camp-3a
6368: PPUSH
6369: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6373: LD_EXP 18
6377: PPUSH
6378: LD_STRING DG-camp-3a
6380: PPUSH
6381: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6385: LD_EXP 16
6389: PPUSH
6390: LD_STRING DH-camp-4aa
6392: PPUSH
6393: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6397: LD_EXP 19
6401: PPUSH
6402: LD_STRING DM-camp-4aa
6404: PPUSH
6405: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6409: LD_EXP 17
6413: PPUSH
6414: LD_STRING DO-camp-4a
6416: PPUSH
6417: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6421: LD_EXP 17
6425: PPUSH
6426: LD_STRING DO-camp-3
6428: PPUSH
6429: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6433: LD_EXP 17
6437: PPUSH
6438: LD_STRING DO-camp-4
6440: PPUSH
6441: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6445: LD_EXP 18
6449: PPUSH
6450: LD_EXP 17
6454: PPUSH
6455: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6459: LD_EXP 18
6463: PPUSH
6464: LD_STRING DG-camp-4
6466: PPUSH
6467: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6471: LD_EXP 16
6475: PPUSH
6476: LD_EXP 18
6480: PPUSH
6481: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6485: LD_EXP 16
6489: PPUSH
6490: LD_STRING DH-camp-4
6492: PPUSH
6493: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6497: LD_EXP 19
6501: PUSH
6502: LD_EXP 17
6506: PUSH
6507: LD_EXP 18
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: PPUSH
6517: LD_EXP 16
6521: PPUSH
6522: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6526: LD_EXP 18
6530: PPUSH
6531: LD_STRING DG-camp-5
6533: PPUSH
6534: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6538: LD_EXP 18
6542: PPUSH
6543: LD_STRING DG-camp-6
6545: PPUSH
6546: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6550: LD_EXP 16
6554: PPUSH
6555: LD_STRING DH-camp-6
6557: PPUSH
6558: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6562: LD_EXP 18
6566: PPUSH
6567: LD_STRING DG-camp-7
6569: PPUSH
6570: CALL_OW 88
// if DogTagFound then
6574: LD_EXP 6
6578: IFFALSE 6618
// begin Say ( Heike , DH-quest-1a ) ;
6580: LD_EXP 16
6584: PPUSH
6585: LD_STRING DH-quest-1a
6587: PPUSH
6588: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6592: LD_EXP 18
6596: PPUSH
6597: LD_STRING DG-quest-1a
6599: PPUSH
6600: CALL_OW 88
// mercenariesQuestDone := true ;
6604: LD_ADDR_EXP 11
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// InGameOff ;
6612: CALL_OW 9
// end else
6616: GO 6784
// begin Say ( Heike , DH-camp-7 ) ;
6618: LD_EXP 16
6622: PPUSH
6623: LD_STRING DH-camp-7
6625: PPUSH
6626: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6630: LD_EXP 16
6634: PPUSH
6635: CALL_OW 256
6639: PUSH
6640: LD_INT 1000
6642: LESS
6643: IFFALSE 6735
// begin Say ( Olaf , DO-heal-1 ) ;
6645: LD_EXP 17
6649: PPUSH
6650: LD_STRING DO-heal-1
6652: PPUSH
6653: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6657: LD_EXP 16
6661: PPUSH
6662: LD_INT 51
6664: PPUSH
6665: LD_INT 88
6667: PPUSH
6668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6672: LD_INT 35
6674: PPUSH
6675: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6679: LD_EXP 16
6683: PPUSH
6684: LD_EXP 17
6688: PPUSH
6689: CALL_OW 296
6693: PUSH
6694: LD_INT 4
6696: LESS
6697: PUSH
6698: LD_EXP 16
6702: PPUSH
6703: LD_INT 51
6705: PPUSH
6706: LD_INT 88
6708: PPUSH
6709: CALL_OW 307
6713: OR
6714: IFFALSE 6672
// SetLives ( Heike , 1000 ) ;
6716: LD_EXP 16
6720: PPUSH
6721: LD_INT 1000
6723: PPUSH
6724: CALL_OW 234
// wait ( 0 0$2 ) ;
6728: LD_INT 70
6730: PPUSH
6731: CALL_OW 67
// end ; InGameOff ;
6735: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6739: LD_EXP 17
6743: PUSH
6744: LD_EXP 18
6748: PUSH
6749: LD_EXP 19
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PPUSH
6759: LD_INT 53
6761: PPUSH
6762: LD_INT 89
6764: PPUSH
6765: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6769: LD_STRING O5_proof_cont
6771: PPUSH
6772: CALL_OW 337
// mercenariesQuestReady := true ;
6776: LD_ADDR_EXP 10
6780: PUSH
6781: LD_INT 1
6783: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6784: LD_EXP 10
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7153
// wait ( 0 0$35 ) ;
6793: LD_INT 1225
6795: PPUSH
6796: CALL_OW 67
// driver := PreparePatrolTank ;
6800: LD_ADDR_VAR 0 2
6804: PUSH
6805: CALL 2821 0 0
6809: ST_TO_ADDR
// if not driver then
6810: LD_VAR 0 2
6814: NOT
6815: IFFALSE 6819
// exit ;
6817: GO 7153
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6819: LD_INT 2
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 2
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_VAR 0 2
6844: PPUSH
6845: CALL_OW 310
6849: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6850: LD_VAR 0 3
6854: PPUSH
6855: LD_INT 500
6857: PPUSH
6858: CALL_OW 234
// SetLives ( driver , 450 ) ;
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_INT 450
6869: PPUSH
6870: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6874: LD_VAR 0 2
6878: PPUSH
6879: LD_INT 59
6881: PPUSH
6882: LD_INT 60
6884: PPUSH
6885: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6889: LD_INT 35
6891: PPUSH
6892: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6896: LD_VAR 0 3
6900: PPUSH
6901: LD_INT 59
6903: PPUSH
6904: LD_INT 60
6906: PPUSH
6907: CALL_OW 307
6911: IFFALSE 6889
// if not See ( 1 , Heike ) then
6913: LD_INT 1
6915: PPUSH
6916: LD_EXP 16
6920: PPUSH
6921: CALL_OW 292
6925: NOT
6926: IFFALSE 7050
// begin if Difficulty < 3 then
6928: LD_OWVAR 67
6932: PUSH
6933: LD_INT 3
6935: LESS
6936: IFFALSE 6954
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6938: LD_INT 59
6940: PPUSH
6941: LD_INT 60
6943: PPUSH
6944: LD_INT 2
6946: PPUSH
6947: LD_INT 6
6949: PPUSH
6950: CALL_OW 330
// ComExitVehicle ( driver ) ;
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 121
// wait ( 0 0$1 ) ;
6963: LD_INT 35
6965: PPUSH
6966: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 58
6977: PPUSH
6978: LD_INT 54
6980: PPUSH
6981: CALL_OW 171
// wait ( 0 0$1 ) ;
6985: LD_INT 35
6987: PPUSH
6988: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6992: LD_VAR 0 2
6996: PPUSH
6997: LD_INT 57
6999: PPUSH
7000: LD_INT 53
7002: PPUSH
7003: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 350
7014: PPUSH
7015: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 107
7040: PPUSH
7041: LD_INT 118
7043: PPUSH
7044: CALL_OW 171
// end else
7048: GO 7065
// begin ComMoveXY ( driver , 107 , 118 ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: LD_INT 107
7057: PPUSH
7058: LD_INT 118
7060: PPUSH
7061: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7072: LD_VAR 0 3
7076: PPUSH
7077: LD_INT 107
7079: PPUSH
7080: LD_INT 118
7082: PPUSH
7083: CALL_OW 307
7087: PUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 301
7097: OR
7098: IFFALSE 7065
// if IsDead ( driver [ 1 ] ) then
7100: LD_VAR 0 2
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: CALL_OW 301
7113: IFFALSE 7117
// exit ;
7115: GO 7153
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 1
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: FOR_IN
7138: IFFALSE 7151
// RemoveUnit ( i ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 64
7149: GO 7137
7151: POP
7152: POP
// end ;
7153: PPOPN 3
7155: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7156: LD_INT 10
7158: PPUSH
7159: LD_INT 22
7161: PUSH
7162: LD_INT 2
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 2
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 70
7187: IFFALSE 7261
7189: GO 7191
7191: DISABLE
// begin InGameOn ;
7192: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7196: LD_EXP 17
7200: PUSH
7201: LD_EXP 19
7205: PUSH
7206: LD_EXP 18
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: PPUSH
7216: LD_EXP 16
7220: PPUSH
7221: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7225: LD_EXP 19
7229: PPUSH
7230: LD_STRING DM-quest-1
7232: PPUSH
7233: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7237: LD_EXP 18
7241: PPUSH
7242: LD_STRING DG-quest-1
7244: PPUSH
7245: CALL_OW 88
// InGameOff ;
7249: CALL_OW 9
// mercenariesQuestDone := true ;
7253: LD_ADDR_EXP 11
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// end ;
7261: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7262: LD_EXP 16
7266: PPUSH
7267: LD_INT 10
7269: PPUSH
7270: CALL_OW 308
7274: PUSH
7275: LD_EXP 6
7279: AND
7280: PUSH
7281: LD_EXP 10
7285: AND
7286: PUSH
7287: LD_INT 10
7289: PPUSH
7290: LD_INT 22
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 21
7302: PUSH
7303: LD_INT 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 70
7318: NOT
7319: AND
7320: IFFALSE 7492
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
// begin InGameOn ;
7328: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7332: LD_EXP 17
7336: PUSH
7337: LD_EXP 19
7341: PUSH
7342: LD_EXP 18
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PPUSH
7352: LD_EXP 16
7356: PPUSH
7357: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7361: LD_EXP 16
7365: PPUSH
7366: LD_INT 54
7368: PPUSH
7369: LD_INT 86
7371: PPUSH
7372: CALL_OW 111
// p := p + 1 ;
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PLUS
7389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7390: LD_INT 35
7392: PPUSH
7393: CALL_OW 67
// p := p + 1 ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_VAR 0 1
7406: PUSH
7407: LD_INT 1
7409: PLUS
7410: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7411: LD_EXP 16
7415: PPUSH
7416: LD_EXP 18
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 4
7428: LESS
7429: PUSH
7430: LD_VAR 0 1
7434: PUSH
7435: LD_INT 5
7437: GREATER
7438: OR
7439: IFFALSE 7390
// Say ( Mike , DM-quest-1 ) ;
7441: LD_EXP 19
7445: PPUSH
7446: LD_STRING DM-quest-1
7448: PPUSH
7449: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7453: LD_EXP 18
7457: PPUSH
7458: LD_STRING DG-quest-1
7460: PPUSH
7461: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7465: LD_EXP 16
7469: PPUSH
7470: LD_INT 55
7472: PPUSH
7473: LD_INT 87
7475: PPUSH
7476: CALL_OW 111
// InGameOff ;
7480: CALL_OW 9
// mercenariesQuestDone := true ;
7484: LD_ADDR_EXP 11
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// end ;
7492: PPOPN 1
7494: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7495: LD_EXP 16
7499: PUSH
7500: LD_INT 55
7502: PUSH
7503: EMPTY
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: IN
7511: IFFALSE 7551
7513: GO 7515
7515: DISABLE
// begin if Difficulty < 3 then
7516: LD_OWVAR 67
7520: PUSH
7521: LD_INT 3
7523: LESS
7524: IFFALSE 7539
// RemoveSeeing ( 59 , 60 , 2 ) ;
7526: LD_INT 59
7528: PPUSH
7529: LD_INT 60
7531: PPUSH
7532: LD_INT 2
7534: PPUSH
7535: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7539: LD_EXP 16
7543: PPUSH
7544: LD_STRING DH-driver
7546: PPUSH
7547: CALL_OW 88
// end ;
7551: END
// every 0 0$1 trigger mercenariesQuestDone do
7552: LD_EXP 11
7556: IFFALSE 8044
7558: GO 7560
7560: DISABLE
// begin if mercenariesQuestReady then
7561: LD_EXP 10
7565: IFFALSE 7574
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7567: LD_STRING O5_proof_cont_out
7569: PPUSH
7570: CALL_OW 337
// InGameOn ;
7574: CALL_OW 8
// if IsInUnit ( Heike ) then
7578: LD_EXP 16
7582: PPUSH
7583: CALL_OW 310
7587: IFFALSE 7598
// ComExitVehicle ( Heike ) ;
7589: LD_EXP 16
7593: PPUSH
7594: CALL_OW 121
// wait ( 3 ) ;
7598: LD_INT 3
7600: PPUSH
7601: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7605: LD_EXP 16
7609: PPUSH
7610: LD_EXP 18
7614: PPUSH
7615: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7619: LD_EXP 17
7623: PUSH
7624: LD_EXP 19
7628: PUSH
7629: LD_EXP 18
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: LD_EXP 16
7643: PPUSH
7644: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7648: LD_EXP 16
7652: PPUSH
7653: LD_STRING DH-quest-done-1
7655: PPUSH
7656: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7660: LD_EXP 19
7664: PPUSH
7665: LD_STRING DM-quest-done-1
7667: PPUSH
7668: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7672: LD_EXP 18
7676: PPUSH
7677: LD_STRING DG-quest-done-1
7679: PPUSH
7680: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7684: LD_EXP 16
7688: PPUSH
7689: LD_EXP 17
7693: PPUSH
7694: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7698: LD_EXP 16
7702: PPUSH
7703: LD_STRING DH-quest-done-2
7705: PPUSH
7706: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7710: LD_EXP 17
7714: PPUSH
7715: LD_STRING DO-quest-done-2
7717: PPUSH
7718: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7722: LD_EXP 17
7726: PPUSH
7727: LD_STRING DO-quest-done-3
7729: PPUSH
7730: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7734: LD_EXP 18
7738: PPUSH
7739: LD_INT 51
7741: PPUSH
7742: LD_INT 90
7744: PPUSH
7745: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7749: LD_EXP 18
7753: PPUSH
7754: LD_INT 50
7756: PPUSH
7757: LD_INT 89
7759: PPUSH
7760: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7764: LD_EXP 16
7768: PPUSH
7769: LD_EXP 18
7773: PPUSH
7774: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7778: LD_EXP 18
7782: PPUSH
7783: LD_STRING DG-quest-done-4
7785: PPUSH
7786: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7790: LD_EXP 18
7794: PPUSH
7795: LD_EXP 16
7799: PPUSH
7800: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7804: LD_EXP 16
7808: PPUSH
7809: CALL_OW 256
7813: PUSH
7814: LD_INT 1000
7816: LESS
7817: IFFALSE 7909
// begin Say ( Olaf , DO-heal-1 ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING DO-heal-1
7826: PPUSH
7827: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7831: LD_EXP 16
7835: PPUSH
7836: LD_INT 51
7838: PPUSH
7839: LD_INT 88
7841: PPUSH
7842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7846: LD_INT 35
7848: PPUSH
7849: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7853: LD_EXP 16
7857: PPUSH
7858: LD_EXP 17
7862: PPUSH
7863: CALL_OW 296
7867: PUSH
7868: LD_INT 4
7870: LESS
7871: PUSH
7872: LD_EXP 16
7876: PPUSH
7877: LD_INT 51
7879: PPUSH
7880: LD_INT 88
7882: PPUSH
7883: CALL_OW 307
7887: OR
7888: IFFALSE 7846
// SetLives ( Heike , 1000 ) ;
7890: LD_EXP 16
7894: PPUSH
7895: LD_INT 1000
7897: PPUSH
7898: CALL_OW 234
// wait ( 0 0$2 ) ;
7902: LD_INT 70
7904: PPUSH
7905: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7909: LD_EXP 16
7913: PPUSH
7914: LD_STRING DH-quest-done-4
7916: PPUSH
7917: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7921: LD_EXP 17
7925: PPUSH
7926: LD_STRING DO-quest-done-4
7928: PPUSH
7929: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7933: LD_EXP 16
7937: PPUSH
7938: LD_EXP 17
7942: PPUSH
7943: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7947: LD_EXP 16
7951: PPUSH
7952: LD_STRING DH-quest-done-5
7954: PPUSH
7955: CALL_OW 88
// InGameOff ;
7959: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7963: LD_STRING O6_end_cont
7965: PPUSH
7966: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7970: LD_EXP 18
7974: PPUSH
7975: LD_INT 2
7977: PPUSH
7978: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7982: LD_EXP 19
7986: PPUSH
7987: LD_INT 2
7989: PPUSH
7990: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7994: LD_INT 42
7996: PPUSH
7997: LD_INT 2
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8007: LD_EXP 17
8011: PPUSH
8012: LD_INT 53
8014: PPUSH
8015: LD_INT 89
8017: PPUSH
8018: CALL_OW 118
// lastObjectiveActive := true ;
8022: LD_ADDR_EXP 12
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8030: LD_INT 1
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL_OW 424
// PreparePrison ;
8040: CALL 1164 0 0
// end ;
8044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8045: LD_INT 22
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 91
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 4
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 69
8077: IFFALSE 8235
8079: GO 8081
8081: DISABLE
8082: LD_INT 0
8084: PPUSH
8085: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8086: LD_INT 245
8088: PUSH
8089: LD_INT 210
8091: PUSH
8092: LD_INT 210
8094: PUSH
8095: LD_INT 175
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_OWVAR 67
8108: ARRAY
8109: PPUSH
8110: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: EMPTY
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: ST_TO_ADDR
// if not tmp then
8155: LD_VAR 0 2
8159: NOT
8160: IFFALSE 8164
// exit ;
8162: GO 8235
// for i in tmp do
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: FOR_IN
8175: IFFALSE 8203
// begin ComExitBuilding ( i ) ;
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8186: LD_VAR 0 1
8190: PPUSH
8191: LD_INT 121
8193: PPUSH
8194: LD_INT 22
8196: PPUSH
8197: CALL_OW 174
// end ;
8201: GO 8174
8203: POP
8204: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8205: LD_EXP 23
8209: PPUSH
8210: LD_INT 121
8212: PPUSH
8213: LD_INT 22
8215: PPUSH
8216: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8220: LD_EXP 24
8224: PPUSH
8225: LD_INT 121
8227: PPUSH
8228: LD_INT 22
8230: PPUSH
8231: CALL_OW 114
// end ;
8235: PPOPN 2
8237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8238: LD_INT 22
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 91
8250: PUSH
8251: LD_INT 8
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PPUSH
8266: CALL_OW 69
8270: IFFALSE 8428
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8279: LD_INT 315
8281: PUSH
8282: LD_INT 280
8284: PUSH
8285: LD_INT 245
8287: PUSH
8288: LD_INT 210
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: PUSH
8297: LD_OWVAR 67
8301: ARRAY
8302: PPUSH
8303: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_INT 22
8314: PUSH
8315: LD_INT 3
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 25
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 54
8334: PUSH
8335: EMPTY
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// if not tmp then
8348: LD_VAR 0 2
8352: NOT
8353: IFFALSE 8357
// exit ;
8355: GO 8428
// for i in tmp do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: LD_VAR 0 2
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8396
// begin ComExitBuilding ( i ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_INT 142
8386: PPUSH
8387: LD_INT 71
8389: PPUSH
8390: CALL_OW 174
// end ;
8394: GO 8367
8396: POP
8397: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8398: LD_EXP 23
8402: PPUSH
8403: LD_INT 142
8405: PPUSH
8406: LD_INT 71
8408: PPUSH
8409: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8413: LD_EXP 24
8417: PPUSH
8418: LD_INT 142
8420: PPUSH
8421: LD_INT 71
8423: PPUSH
8424: CALL_OW 114
// end ;
8428: PPOPN 2
8430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8431: LD_INT 22
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 58
8453: PUSH
8454: EMPTY
8455: LIST
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 24
8462: PUSH
8463: LD_INT 1000
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 91
8476: PUSH
8477: LD_EXP 17
8481: PUSH
8482: LD_INT 8
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 69
8501: PUSH
8502: LD_EXP 17
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: IFFALSE 8626
8514: GO 8516
8516: DISABLE
// begin enable ;
8517: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8518: LD_EXP 17
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 58
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 1000
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 91
8568: PUSH
8569: LD_EXP 17
8573: PUSH
8574: LD_INT 8
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 69
8593: PUSH
8594: LD_INT 1
8596: ARRAY
8597: PPUSH
8598: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8602: LD_EXP 17
8606: PPUSH
8607: LD_INT 52
8609: PPUSH
8610: LD_INT 90
8612: PPUSH
8613: CALL_OW 171
// AddComHold ( Olaf ) ;
8617: LD_EXP 17
8621: PPUSH
8622: CALL_OW 200
// end ;
8626: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8627: LD_EXP 12
8631: PUSH
8632: LD_INT 2
8634: PPUSH
8635: CALL_OW 302
8639: NOT
8640: AND
8641: PUSH
8642: LD_OWVAR 67
8646: PUSH
8647: LD_INT 1
8649: EQUAL
8650: AND
8651: PUSH
8652: LD_EXP 13
8656: NOT
8657: AND
8658: IFFALSE 8675
8660: GO 8662
8662: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8663: LD_EXP 16
8667: PPUSH
8668: LD_STRING DH-prison-missing
8670: PPUSH
8671: CALL_OW 88
// end ;
8675: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8676: LD_EXP 12
8680: PUSH
8681: LD_INT 8
8683: PPUSH
8684: CALL_OW 302
8688: NOT
8689: AND
8690: PUSH
8691: LD_OWVAR 67
8695: PUSH
8696: LD_INT 1
8698: GREATER
8699: AND
8700: PUSH
8701: LD_EXP 13
8705: NOT
8706: AND
8707: IFFALSE 8724
8709: GO 8711
8711: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8712: LD_EXP 16
8716: PPUSH
8717: LD_STRING DH-prison-missing
8719: PPUSH
8720: CALL_OW 88
// end ;
8724: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8725: LD_EXP 12
8729: PUSH
8730: LD_INT 3
8732: PPUSH
8733: CALL_OW 302
8737: NOT
8738: AND
8739: PUSH
8740: LD_EXP 13
8744: NOT
8745: AND
8746: IFFALSE 8763
8748: GO 8750
8750: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8751: LD_EXP 16
8755: PPUSH
8756: LD_STRING DH-prison-missing-a
8758: PPUSH
8759: CALL_OW 88
// end ;
8763: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8764: LD_EXP 12
8768: PUSH
8769: LD_INT 10
8771: PPUSH
8772: CALL_OW 302
8776: NOT
8777: AND
8778: PUSH
8779: LD_EXP 13
8783: NOT
8784: AND
8785: IFFALSE 8802
8787: GO 8789
8789: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8790: LD_EXP 16
8794: PPUSH
8795: LD_STRING DH-prison-missing-a
8797: PPUSH
8798: CALL_OW 88
// end ;
8802: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8803: LD_EXP 13
8807: NOT
8808: PUSH
8809: LD_EXP 12
8813: AND
8814: PUSH
8815: LD_INT 2
8817: PPUSH
8818: LD_EXP 20
8822: PPUSH
8823: CALL_OW 292
8827: AND
8828: IFFALSE 8915
8830: GO 8832
8832: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8833: LD_EXP 20
8837: PPUSH
8838: LD_EXP 16
8842: PPUSH
8843: CALL_OW 119
// DialogueOn ;
8847: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8851: LD_EXP 20
8855: PPUSH
8856: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_STRING DK-prison-found
8867: PPUSH
8868: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8872: LD_EXP 16
8876: PPUSH
8877: LD_STRING DH-prison-found
8879: PPUSH
8880: CALL_OW 88
// DialogueOff ;
8884: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8888: LD_EXP 20
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: CALL_OW 235
// prisonFound := true ;
8900: LD_ADDR_EXP 13
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8908: LD_STRING O6_prison_out
8910: PPUSH
8911: CALL_OW 337
// end ;
8915: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8916: LD_EXP 16
8920: PPUSH
8921: CALL_OW 256
8925: PUSH
8926: LD_INT 500
8928: LESS
8929: IFFALSE 8942
8931: GO 8933
8933: DISABLE
// heikeHurt := true ;
8934: LD_ADDR_EXP 14
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
8942: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8943: LD_INT 22
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: IFFALSE 9287
8973: GO 8975
8975: DISABLE
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
8980: PPUSH
// begin uc_side := 3 ;
8981: LD_ADDR_OWVAR 20
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// uc_nation := 3 ;
8989: LD_ADDR_OWVAR 21
8993: PUSH
8994: LD_INT 3
8996: ST_TO_ADDR
// tmp := [ ] ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// for i := 1 to 5 do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_INT 5
9016: PUSH
9017: FOR_TO
9018: IFFALSE 9126
// begin PrepareHuman ( false , 1 , 4 ) ;
9020: LD_INT 0
9022: PPUSH
9023: LD_INT 1
9025: PPUSH
9026: LD_INT 4
9028: PPUSH
9029: CALL_OW 380
// un := CreateHuman ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: CALL_OW 44
9042: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9043: LD_VAR 0 3
9047: PPUSH
9048: LD_INT 4
9050: PPUSH
9051: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9055: LD_VAR 0 3
9059: PPUSH
9060: LD_INT 158
9062: PPUSH
9063: LD_INT 80
9065: PPUSH
9066: LD_INT 0
9068: PPUSH
9069: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9073: LD_VAR 0 3
9077: PPUSH
9078: LD_INT 147
9080: PPUSH
9081: LD_INT 75
9083: PPUSH
9084: CALL_OW 111
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 2
9109: PUSH
9110: LD_INT 1
9112: PLUS
9113: PPUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: CALL_OW 1
9123: ST_TO_ADDR
// end ;
9124: GO 9017
9126: POP
9127: POP
// repeat wait ( 0 0$1 ) ;
9128: LD_INT 35
9130: PPUSH
9131: CALL_OW 67
// for i in tmp do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: LD_VAR 0 2
9144: PUSH
9145: FOR_IN
9146: IFFALSE 9267
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9178: LD_VAR 0 3
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: CALL_OW 250
9191: PPUSH
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 1
9199: ARRAY
9200: PPUSH
9201: CALL_OW 251
9205: PPUSH
9206: CALL_OW 428
9210: IFFALSE 9251
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 1
9224: ARRAY
9225: PPUSH
9226: CALL_OW 250
9230: PPUSH
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 1
9238: ARRAY
9239: PPUSH
9240: CALL_OW 251
9244: PPUSH
9245: CALL_OW 114
9249: GO 9265
// ComAttackUnit ( i , Heike ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_EXP 16
9260: PPUSH
9261: CALL_OW 115
// end ;
9265: GO 9145
9267: POP
9268: POP
// until IsDead ( Heike ) or not tmp ;
9269: LD_EXP 16
9273: PPUSH
9274: CALL_OW 301
9278: PUSH
9279: LD_VAR 0 2
9283: NOT
9284: OR
9285: IFFALSE 9128
// end ;
9287: PPOPN 3
9289: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9290: LD_EXP 12
9294: PUSH
9295: LD_EXP 16
9299: PPUSH
9300: CALL_OW 302
9304: AND
9305: PUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 21
9311: PUSH
9312: LD_INT 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 22
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 50
9331: PUSH
9332: EMPTY
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: PPUSH
9340: CALL_OW 71
9344: PUSH
9345: LD_INT 0
9347: EQUAL
9348: AND
9349: IFFALSE 9748
9351: GO 9353
9353: DISABLE
9354: LD_INT 0
9356: PPUSH
// begin if not heikeHurt then
9357: LD_EXP 14
9361: NOT
9362: IFFALSE 9371
// SetAchievement ( ACH_INVINCIBLE ) ;
9364: LD_STRING ACH_INVINCIBLE
9366: PPUSH
9367: CALL_OW 543
// if tick <= 6 6$00 then
9371: LD_OWVAR 1
9375: PUSH
9376: LD_INT 12600
9378: LESSEQUAL
9379: IFFALSE 9388
// SetAchievement ( ACH_HSPEED_1 ) ;
9381: LD_STRING ACH_HSPEED_1
9383: PPUSH
9384: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9388: LD_STRING enableBioCharacter(BIO_GIVI)
9390: PPUSH
9391: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9395: LD_STRING enableBioCharacter(BIO_MIKE)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9402: LD_STRING enableBioCharacter(BIO_OLAF)
9404: PPUSH
9405: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 1
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 50
9436: PUSH
9437: EMPTY
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: PPUSH
9445: CALL_OW 69
9449: ST_TO_ADDR
// if Kamil in tmp then
9450: LD_EXP 20
9454: PUSH
9455: LD_VAR 0 1
9459: IN
9460: IFFALSE 9469
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9462: LD_STRING enableBioCharacter(BIO_KAMI)
9464: PPUSH
9465: CALL_OW 559
// if prisonFound then
9469: LD_EXP 13
9473: IFFALSE 9487
// AddMedal ( med1 , 1 ) else
9475: LD_STRING med1
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 101
9485: GO 9498
// AddMedal ( med1 , - 1 ) ;
9487: LD_STRING med1
9489: PPUSH
9490: LD_INT 1
9492: NEG
9493: PPUSH
9494: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9498: LD_VAR 0 1
9502: PUSH
9503: LD_INT 3
9505: LESS
9506: PUSH
9507: LD_EXP 13
9511: NOT
9512: AND
9513: PUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 4
9521: LESS
9522: PUSH
9523: LD_EXP 13
9527: AND
9528: OR
9529: IFFALSE 9544
// AddMedal ( med2 , - 1 ) else
9531: LD_STRING med2
9533: PPUSH
9534: LD_INT 1
9536: NEG
9537: PPUSH
9538: CALL_OW 101
9542: GO 9554
// AddMedal ( med2 , 1 ) ;
9544: LD_STRING med2
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9554: LD_EXP 13
9558: PUSH
9559: LD_EXP 4
9563: AND
9564: PUSH
9565: LD_VAR 0 1
9569: PUSH
9570: LD_INT 4
9572: GREATEREQUAL
9573: AND
9574: IFFALSE 9588
// AddMedal ( med3 , 1 ) else
9576: LD_STRING med3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 101
9586: GO 9599
// AddMedal ( med3 , - 1 ) ;
9588: LD_STRING med3
9590: PPUSH
9591: LD_INT 1
9593: NEG
9594: PPUSH
9595: CALL_OW 101
// GiveMedals ( MAIN ) ;
9599: LD_STRING MAIN
9601: PPUSH
9602: CALL_OW 102
// RewardPeople ( tmp ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9615: LD_EXP 4
9619: PPUSH
9620: LD_STRING 01_JohnnySaved
9622: PPUSH
9623: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9627: LD_EXP 16
9631: PPUSH
9632: LD_STRING 01_Heike
9634: PPUSH
9635: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9639: LD_EXP 18
9643: PPUSH
9644: CALL_OW 302
9648: PUSH
9649: LD_EXP 18
9653: PUSH
9654: LD_VAR 0 1
9658: IN
9659: AND
9660: IFFALSE 9674
// SaveCharacters ( Givi , 01_Givi ) ;
9662: LD_EXP 18
9666: PPUSH
9667: LD_STRING 01_Givi
9669: PPUSH
9670: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9674: LD_EXP 19
9678: PPUSH
9679: CALL_OW 302
9683: PUSH
9684: LD_EXP 19
9688: PUSH
9689: LD_VAR 0 1
9693: IN
9694: AND
9695: IFFALSE 9709
// SaveCharacters ( Mike , 01_Mike ) ;
9697: LD_EXP 19
9701: PPUSH
9702: LD_STRING 01_Mike
9704: PPUSH
9705: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9709: LD_EXP 20
9713: PPUSH
9714: CALL_OW 302
9718: PUSH
9719: LD_EXP 20
9723: PUSH
9724: LD_VAR 0 1
9728: IN
9729: AND
9730: IFFALSE 9744
// SaveCharacters ( Kamil , 01_Kamil ) ;
9732: LD_EXP 20
9736: PPUSH
9737: LD_STRING 01_Kamil
9739: PPUSH
9740: CALL_OW 38
// YouWin ;
9744: CALL_OW 103
// end ; end_of_file
9748: PPOPN 1
9750: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9751: LD_VAR 0 1
9755: PUSH
9756: LD_EXP 16
9760: EQUAL
9761: IFFALSE 9770
// YouLost ( Heike ) ;
9763: LD_STRING Heike
9765: PPUSH
9766: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9770: LD_VAR 0 1
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 3
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 25
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: IN
9804: IFFALSE 9910
// begin if un in russianPatrol then
9806: LD_VAR 0 1
9810: PUSH
9811: LD_EXP 21
9815: IN
9816: IFFALSE 9834
// russianPatrol := russianPatrol diff un ;
9818: LD_ADDR_EXP 21
9822: PUSH
9823: LD_EXP 21
9827: PUSH
9828: LD_VAR 0 1
9832: DIFF
9833: ST_TO_ADDR
// if un in russianForestPatrol then
9834: LD_VAR 0 1
9838: PUSH
9839: LD_EXP 22
9843: IN
9844: IFFALSE 9862
// russianForestPatrol := russianForestPatrol diff un ;
9846: LD_ADDR_EXP 22
9850: PUSH
9851: LD_EXP 22
9855: PUSH
9856: LD_VAR 0 1
9860: DIFF
9861: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9862: LD_ADDR_EXP 5
9866: PUSH
9867: LD_EXP 5
9871: PPUSH
9872: LD_EXP 5
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: CALL_OW 250
9890: PUSH
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 251
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 1
9909: ST_TO_ADDR
// end ; end ;
9910: PPOPN 1
9912: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9913: LD_VAR 0 1
9917: PUSH
9918: LD_EXP 16
9922: EQUAL
9923: IFFALSE 9932
// YouLost ( Heike ) ;
9925: LD_STRING Heike
9927: PPUSH
9928: CALL_OW 104
// if un = Olaf then
9932: LD_VAR 0 1
9936: PUSH
9937: LD_EXP 17
9941: EQUAL
9942: IFFALSE 9951
// YouLost ( Olaf ) ;
9944: LD_STRING Olaf
9946: PPUSH
9947: CALL_OW 104
// end ;
9951: PPOPN 1
9953: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_INT 2
9961: EQUAL
9962: PUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_INT 5
9970: EQUAL
9971: AND
9972: IFFALSE 9981
// YouLost ( FriendlyFire ) ;
9974: LD_STRING FriendlyFire
9976: PPUSH
9977: CALL_OW 104
// end ; end_of_file
9981: PPOPN 2
9983: END
// export globalGameSaveCounter ; every 0 0$1 do
9984: GO 9986
9986: DISABLE
// begin enable ;
9987: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9988: LD_STRING updateTimer(
9990: PUSH
9991: LD_OWVAR 1
9995: STR
9996: PUSH
9997: LD_STRING );
9999: STR
10000: PPUSH
10001: CALL_OW 559
// end ;
10005: END
// every 0 0$1 do
10006: GO 10008
10008: DISABLE
// begin globalGameSaveCounter := 0 ;
10009: LD_ADDR_EXP 26
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10017: LD_STRING setGameSaveCounter(0)
10019: PPUSH
10020: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10024: LD_STRING initStreamRollete();
10026: PPUSH
10027: CALL_OW 559
// InitStreamMode ;
10031: CALL 11357 0 0
// DefineStreamItems ( false ) ;
10035: LD_INT 0
10037: PPUSH
10038: CALL 11821 0 1
// end ;
10042: END
// export function SOS_MapStart ( ) ; begin
10043: LD_INT 0
10045: PPUSH
// if streamModeActive then
10046: LD_EXP 27
10050: IFFALSE 10059
// DefineStreamItems ( true ) ;
10052: LD_INT 1
10054: PPUSH
10055: CALL 11821 0 1
// UpdateLuaVariables ( ) ;
10059: CALL 10076 0 0
// UpdateFactoryWaypoints ( ) ;
10063: CALL 24690 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10067: CALL 24947 0 0
// end ;
10071: LD_VAR 0 1
10075: RET
// function UpdateLuaVariables ( ) ; begin
10076: LD_INT 0
10078: PPUSH
// if globalGameSaveCounter then
10079: LD_EXP 26
10083: IFFALSE 10117
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10085: LD_ADDR_EXP 26
10089: PUSH
10090: LD_EXP 26
10094: PPUSH
10095: CALL 69577 0 1
10099: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10100: LD_STRING setGameSaveCounter(
10102: PUSH
10103: LD_EXP 26
10107: STR
10108: PUSH
10109: LD_STRING )
10111: STR
10112: PPUSH
10113: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10117: LD_STRING setGameDifficulty(
10119: PUSH
10120: LD_OWVAR 67
10124: STR
10125: PUSH
10126: LD_STRING )
10128: STR
10129: PPUSH
10130: CALL_OW 559
// end ;
10134: LD_VAR 0 1
10138: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10139: LD_INT 0
10141: PPUSH
// if p2 = stream_mode then
10142: LD_VAR 0 2
10146: PUSH
10147: LD_INT 100
10149: EQUAL
10150: IFFALSE 11153
// begin if not StreamModeActive then
10152: LD_EXP 27
10156: NOT
10157: IFFALSE 10167
// StreamModeActive := true ;
10159: LD_ADDR_EXP 27
10163: PUSH
10164: LD_INT 1
10166: ST_TO_ADDR
// if p3 = 0 then
10167: LD_VAR 0 3
10171: PUSH
10172: LD_INT 0
10174: EQUAL
10175: IFFALSE 10181
// InitStreamMode ;
10177: CALL 11357 0 0
// if p3 = 1 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 1
10188: EQUAL
10189: IFFALSE 10199
// sRocket := true ;
10191: LD_ADDR_EXP 32
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 2 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 2
10206: EQUAL
10207: IFFALSE 10217
// sSpeed := true ;
10209: LD_ADDR_EXP 31
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 3 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 3
10224: EQUAL
10225: IFFALSE 10235
// sEngine := true ;
10227: LD_ADDR_EXP 33
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 4 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 4
10242: EQUAL
10243: IFFALSE 10253
// sSpec := true ;
10245: LD_ADDR_EXP 30
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 5 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 5
10260: EQUAL
10261: IFFALSE 10271
// sLevel := true ;
10263: LD_ADDR_EXP 34
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 6 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 6
10278: EQUAL
10279: IFFALSE 10289
// sArmoury := true ;
10281: LD_ADDR_EXP 35
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 7 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 7
10296: EQUAL
10297: IFFALSE 10307
// sRadar := true ;
10299: LD_ADDR_EXP 36
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 8 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 8
10314: EQUAL
10315: IFFALSE 10325
// sBunker := true ;
10317: LD_ADDR_EXP 37
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 9 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 9
10332: EQUAL
10333: IFFALSE 10343
// sHack := true ;
10335: LD_ADDR_EXP 38
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 10 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 10
10350: EQUAL
10351: IFFALSE 10361
// sFire := true ;
10353: LD_ADDR_EXP 39
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 11 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 11
10368: EQUAL
10369: IFFALSE 10379
// sRefresh := true ;
10371: LD_ADDR_EXP 40
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 12 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 12
10386: EQUAL
10387: IFFALSE 10397
// sExp := true ;
10389: LD_ADDR_EXP 41
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 13 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 13
10404: EQUAL
10405: IFFALSE 10415
// sDepot := true ;
10407: LD_ADDR_EXP 42
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 14 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 14
10422: EQUAL
10423: IFFALSE 10433
// sFlag := true ;
10425: LD_ADDR_EXP 43
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 15 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 15
10440: EQUAL
10441: IFFALSE 10451
// sKamikadze := true ;
10443: LD_ADDR_EXP 51
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 16 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 16
10458: EQUAL
10459: IFFALSE 10469
// sTroll := true ;
10461: LD_ADDR_EXP 52
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 17 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 17
10476: EQUAL
10477: IFFALSE 10487
// sSlow := true ;
10479: LD_ADDR_EXP 53
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 18 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 18
10494: EQUAL
10495: IFFALSE 10505
// sLack := true ;
10497: LD_ADDR_EXP 54
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 19 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 19
10512: EQUAL
10513: IFFALSE 10523
// sTank := true ;
10515: LD_ADDR_EXP 56
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 20 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 20
10530: EQUAL
10531: IFFALSE 10541
// sRemote := true ;
10533: LD_ADDR_EXP 57
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 21 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 21
10548: EQUAL
10549: IFFALSE 10559
// sPowell := true ;
10551: LD_ADDR_EXP 58
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 22 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 22
10566: EQUAL
10567: IFFALSE 10577
// sTeleport := true ;
10569: LD_ADDR_EXP 61
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 23 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 23
10584: EQUAL
10585: IFFALSE 10595
// sOilTower := true ;
10587: LD_ADDR_EXP 63
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 24 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 24
10602: EQUAL
10603: IFFALSE 10613
// sShovel := true ;
10605: LD_ADDR_EXP 64
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 25 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 25
10620: EQUAL
10621: IFFALSE 10631
// sSheik := true ;
10623: LD_ADDR_EXP 65
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 26 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 26
10638: EQUAL
10639: IFFALSE 10649
// sEarthquake := true ;
10641: LD_ADDR_EXP 67
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 27 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 27
10656: EQUAL
10657: IFFALSE 10667
// sAI := true ;
10659: LD_ADDR_EXP 68
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 28 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 28
10674: EQUAL
10675: IFFALSE 10685
// sCargo := true ;
10677: LD_ADDR_EXP 71
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 29 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 29
10692: EQUAL
10693: IFFALSE 10703
// sDLaser := true ;
10695: LD_ADDR_EXP 72
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 30 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 30
10710: EQUAL
10711: IFFALSE 10721
// sExchange := true ;
10713: LD_ADDR_EXP 73
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 31 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 31
10728: EQUAL
10729: IFFALSE 10739
// sFac := true ;
10731: LD_ADDR_EXP 74
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 32 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 32
10746: EQUAL
10747: IFFALSE 10757
// sPower := true ;
10749: LD_ADDR_EXP 75
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 33 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 33
10764: EQUAL
10765: IFFALSE 10775
// sRandom := true ;
10767: LD_ADDR_EXP 76
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 34 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 34
10782: EQUAL
10783: IFFALSE 10793
// sShield := true ;
10785: LD_ADDR_EXP 77
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 35 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 35
10800: EQUAL
10801: IFFALSE 10811
// sTime := true ;
10803: LD_ADDR_EXP 78
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 36 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 36
10818: EQUAL
10819: IFFALSE 10829
// sTools := true ;
10821: LD_ADDR_EXP 79
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 101 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 101
10836: EQUAL
10837: IFFALSE 10847
// sSold := true ;
10839: LD_ADDR_EXP 44
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 102 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 102
10854: EQUAL
10855: IFFALSE 10865
// sDiff := true ;
10857: LD_ADDR_EXP 45
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 103 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 103
10872: EQUAL
10873: IFFALSE 10883
// sFog := true ;
10875: LD_ADDR_EXP 48
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// if p3 = 104 then
10883: LD_VAR 0 3
10887: PUSH
10888: LD_INT 104
10890: EQUAL
10891: IFFALSE 10901
// sReset := true ;
10893: LD_ADDR_EXP 49
10897: PUSH
10898: LD_INT 1
10900: ST_TO_ADDR
// if p3 = 105 then
10901: LD_VAR 0 3
10905: PUSH
10906: LD_INT 105
10908: EQUAL
10909: IFFALSE 10919
// sSun := true ;
10911: LD_ADDR_EXP 50
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if p3 = 106 then
10919: LD_VAR 0 3
10923: PUSH
10924: LD_INT 106
10926: EQUAL
10927: IFFALSE 10937
// sTiger := true ;
10929: LD_ADDR_EXP 46
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// if p3 = 107 then
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 107
10944: EQUAL
10945: IFFALSE 10955
// sBomb := true ;
10947: LD_ADDR_EXP 47
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if p3 = 108 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 108
10962: EQUAL
10963: IFFALSE 10973
// sWound := true ;
10965: LD_ADDR_EXP 55
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if p3 = 109 then
10973: LD_VAR 0 3
10977: PUSH
10978: LD_INT 109
10980: EQUAL
10981: IFFALSE 10991
// sBetray := true ;
10983: LD_ADDR_EXP 59
10987: PUSH
10988: LD_INT 1
10990: ST_TO_ADDR
// if p3 = 110 then
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 110
10998: EQUAL
10999: IFFALSE 11009
// sContamin := true ;
11001: LD_ADDR_EXP 60
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// if p3 = 111 then
11009: LD_VAR 0 3
11013: PUSH
11014: LD_INT 111
11016: EQUAL
11017: IFFALSE 11027
// sOil := true ;
11019: LD_ADDR_EXP 62
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// if p3 = 112 then
11027: LD_VAR 0 3
11031: PUSH
11032: LD_INT 112
11034: EQUAL
11035: IFFALSE 11045
// sStu := true ;
11037: LD_ADDR_EXP 66
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// if p3 = 113 then
11045: LD_VAR 0 3
11049: PUSH
11050: LD_INT 113
11052: EQUAL
11053: IFFALSE 11063
// sBazooka := true ;
11055: LD_ADDR_EXP 69
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if p3 = 114 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 114
11070: EQUAL
11071: IFFALSE 11081
// sMortar := true ;
11073: LD_ADDR_EXP 70
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// if p3 = 115 then
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 115
11088: EQUAL
11089: IFFALSE 11099
// sRanger := true ;
11091: LD_ADDR_EXP 80
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// if p3 = 116 then
11099: LD_VAR 0 3
11103: PUSH
11104: LD_INT 116
11106: EQUAL
11107: IFFALSE 11117
// sComputer := true ;
11109: LD_ADDR_EXP 81
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// if p3 = 117 then
11117: LD_VAR 0 3
11121: PUSH
11122: LD_INT 117
11124: EQUAL
11125: IFFALSE 11135
// s30 := true ;
11127: LD_ADDR_EXP 82
11131: PUSH
11132: LD_INT 1
11134: ST_TO_ADDR
// if p3 = 118 then
11135: LD_VAR 0 3
11139: PUSH
11140: LD_INT 118
11142: EQUAL
11143: IFFALSE 11153
// s60 := true ;
11145: LD_ADDR_EXP 83
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// end ; if p2 = hack_mode then
11153: LD_VAR 0 2
11157: PUSH
11158: LD_INT 101
11160: EQUAL
11161: IFFALSE 11289
// begin case p3 of 1 :
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 1
11170: DOUBLE
11171: EQUAL
11172: IFTRUE 11176
11174: GO 11183
11176: POP
// hHackUnlimitedResources ; 2 :
11177: CALL 23436 0 0
11181: GO 11289
11183: LD_INT 2
11185: DOUBLE
11186: EQUAL
11187: IFTRUE 11191
11189: GO 11198
11191: POP
// hHackSetLevel10 ; 3 :
11192: CALL 23569 0 0
11196: GO 11289
11198: LD_INT 3
11200: DOUBLE
11201: EQUAL
11202: IFTRUE 11206
11204: GO 11213
11206: POP
// hHackSetLevel10YourUnits ; 4 :
11207: CALL 23654 0 0
11211: GO 11289
11213: LD_INT 4
11215: DOUBLE
11216: EQUAL
11217: IFTRUE 11221
11219: GO 11228
11221: POP
// hHackInvincible ; 5 :
11222: CALL 24102 0 0
11226: GO 11289
11228: LD_INT 5
11230: DOUBLE
11231: EQUAL
11232: IFTRUE 11236
11234: GO 11243
11236: POP
// hHackInvisible ; 6 :
11237: CALL 24213 0 0
11241: GO 11289
11243: LD_INT 6
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11258
11251: POP
// hHackChangeYourSide ; 7 :
11252: CALL 24270 0 0
11256: GO 11289
11258: LD_INT 7
11260: DOUBLE
11261: EQUAL
11262: IFTRUE 11266
11264: GO 11273
11266: POP
// hHackChangeUnitSide ; 8 :
11267: CALL 24312 0 0
11271: GO 11289
11273: LD_INT 8
11275: DOUBLE
11276: EQUAL
11277: IFTRUE 11281
11279: GO 11288
11281: POP
// hHackFog ; end ;
11282: CALL 24413 0 0
11286: GO 11289
11288: POP
// end ; if p2 = game_save_mode then
11289: LD_VAR 0 2
11293: PUSH
11294: LD_INT 102
11296: EQUAL
11297: IFFALSE 11352
// begin if p3 = 1 then
11299: LD_VAR 0 3
11303: PUSH
11304: LD_INT 1
11306: EQUAL
11307: IFFALSE 11319
// globalGameSaveCounter := p4 ;
11309: LD_ADDR_EXP 26
11313: PUSH
11314: LD_VAR 0 4
11318: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 2
11326: EQUAL
11327: PUSH
11328: LD_EXP 26
11332: AND
11333: IFFALSE 11352
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11335: LD_STRING setGameSaveCounter(
11337: PUSH
11338: LD_EXP 26
11342: STR
11343: PUSH
11344: LD_STRING )
11346: STR
11347: PPUSH
11348: CALL_OW 559
// end ; end ;
11352: LD_VAR 0 7
11356: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11357: LD_INT 0
11359: PPUSH
// streamModeActive := false ;
11360: LD_ADDR_EXP 27
11364: PUSH
11365: LD_INT 0
11367: ST_TO_ADDR
// normalCounter := 36 ;
11368: LD_ADDR_EXP 28
11372: PUSH
11373: LD_INT 36
11375: ST_TO_ADDR
// hardcoreCounter := 18 ;
11376: LD_ADDR_EXP 29
11380: PUSH
11381: LD_INT 18
11383: ST_TO_ADDR
// sRocket := false ;
11384: LD_ADDR_EXP 32
11388: PUSH
11389: LD_INT 0
11391: ST_TO_ADDR
// sSpeed := false ;
11392: LD_ADDR_EXP 31
11396: PUSH
11397: LD_INT 0
11399: ST_TO_ADDR
// sEngine := false ;
11400: LD_ADDR_EXP 33
11404: PUSH
11405: LD_INT 0
11407: ST_TO_ADDR
// sSpec := false ;
11408: LD_ADDR_EXP 30
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// sLevel := false ;
11416: LD_ADDR_EXP 34
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// sArmoury := false ;
11424: LD_ADDR_EXP 35
11428: PUSH
11429: LD_INT 0
11431: ST_TO_ADDR
// sRadar := false ;
11432: LD_ADDR_EXP 36
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// sBunker := false ;
11440: LD_ADDR_EXP 37
11444: PUSH
11445: LD_INT 0
11447: ST_TO_ADDR
// sHack := false ;
11448: LD_ADDR_EXP 38
11452: PUSH
11453: LD_INT 0
11455: ST_TO_ADDR
// sFire := false ;
11456: LD_ADDR_EXP 39
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// sRefresh := false ;
11464: LD_ADDR_EXP 40
11468: PUSH
11469: LD_INT 0
11471: ST_TO_ADDR
// sExp := false ;
11472: LD_ADDR_EXP 41
11476: PUSH
11477: LD_INT 0
11479: ST_TO_ADDR
// sDepot := false ;
11480: LD_ADDR_EXP 42
11484: PUSH
11485: LD_INT 0
11487: ST_TO_ADDR
// sFlag := false ;
11488: LD_ADDR_EXP 43
11492: PUSH
11493: LD_INT 0
11495: ST_TO_ADDR
// sKamikadze := false ;
11496: LD_ADDR_EXP 51
11500: PUSH
11501: LD_INT 0
11503: ST_TO_ADDR
// sTroll := false ;
11504: LD_ADDR_EXP 52
11508: PUSH
11509: LD_INT 0
11511: ST_TO_ADDR
// sSlow := false ;
11512: LD_ADDR_EXP 53
11516: PUSH
11517: LD_INT 0
11519: ST_TO_ADDR
// sLack := false ;
11520: LD_ADDR_EXP 54
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// sTank := false ;
11528: LD_ADDR_EXP 56
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// sRemote := false ;
11536: LD_ADDR_EXP 57
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// sPowell := false ;
11544: LD_ADDR_EXP 58
11548: PUSH
11549: LD_INT 0
11551: ST_TO_ADDR
// sTeleport := false ;
11552: LD_ADDR_EXP 61
11556: PUSH
11557: LD_INT 0
11559: ST_TO_ADDR
// sOilTower := false ;
11560: LD_ADDR_EXP 63
11564: PUSH
11565: LD_INT 0
11567: ST_TO_ADDR
// sShovel := false ;
11568: LD_ADDR_EXP 64
11572: PUSH
11573: LD_INT 0
11575: ST_TO_ADDR
// sSheik := false ;
11576: LD_ADDR_EXP 65
11580: PUSH
11581: LD_INT 0
11583: ST_TO_ADDR
// sEarthquake := false ;
11584: LD_ADDR_EXP 67
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// sAI := false ;
11592: LD_ADDR_EXP 68
11596: PUSH
11597: LD_INT 0
11599: ST_TO_ADDR
// sCargo := false ;
11600: LD_ADDR_EXP 71
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// sDLaser := false ;
11608: LD_ADDR_EXP 72
11612: PUSH
11613: LD_INT 0
11615: ST_TO_ADDR
// sExchange := false ;
11616: LD_ADDR_EXP 73
11620: PUSH
11621: LD_INT 0
11623: ST_TO_ADDR
// sFac := false ;
11624: LD_ADDR_EXP 74
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// sPower := false ;
11632: LD_ADDR_EXP 75
11636: PUSH
11637: LD_INT 0
11639: ST_TO_ADDR
// sRandom := false ;
11640: LD_ADDR_EXP 76
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// sShield := false ;
11648: LD_ADDR_EXP 77
11652: PUSH
11653: LD_INT 0
11655: ST_TO_ADDR
// sTime := false ;
11656: LD_ADDR_EXP 78
11660: PUSH
11661: LD_INT 0
11663: ST_TO_ADDR
// sTools := false ;
11664: LD_ADDR_EXP 79
11668: PUSH
11669: LD_INT 0
11671: ST_TO_ADDR
// sSold := false ;
11672: LD_ADDR_EXP 44
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// sDiff := false ;
11680: LD_ADDR_EXP 45
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// sFog := false ;
11688: LD_ADDR_EXP 48
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// sReset := false ;
11696: LD_ADDR_EXP 49
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// sSun := false ;
11704: LD_ADDR_EXP 50
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// sTiger := false ;
11712: LD_ADDR_EXP 46
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// sBomb := false ;
11720: LD_ADDR_EXP 47
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sWound := false ;
11728: LD_ADDR_EXP 55
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// sBetray := false ;
11736: LD_ADDR_EXP 59
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// sContamin := false ;
11744: LD_ADDR_EXP 60
11748: PUSH
11749: LD_INT 0
11751: ST_TO_ADDR
// sOil := false ;
11752: LD_ADDR_EXP 62
11756: PUSH
11757: LD_INT 0
11759: ST_TO_ADDR
// sStu := false ;
11760: LD_ADDR_EXP 66
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// sBazooka := false ;
11768: LD_ADDR_EXP 69
11772: PUSH
11773: LD_INT 0
11775: ST_TO_ADDR
// sMortar := false ;
11776: LD_ADDR_EXP 70
11780: PUSH
11781: LD_INT 0
11783: ST_TO_ADDR
// sRanger := false ;
11784: LD_ADDR_EXP 80
11788: PUSH
11789: LD_INT 0
11791: ST_TO_ADDR
// sComputer := false ;
11792: LD_ADDR_EXP 81
11796: PUSH
11797: LD_INT 0
11799: ST_TO_ADDR
// s30 := false ;
11800: LD_ADDR_EXP 82
11804: PUSH
11805: LD_INT 0
11807: ST_TO_ADDR
// s60 := false ;
11808: LD_ADDR_EXP 83
11812: PUSH
11813: LD_INT 0
11815: ST_TO_ADDR
// end ;
11816: LD_VAR 0 1
11820: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
// result := [ ] ;
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: EMPTY
11836: ST_TO_ADDR
// if campaign_id = 1 then
11837: LD_OWVAR 69
11841: PUSH
11842: LD_INT 1
11844: EQUAL
11845: IFFALSE 15011
// begin case mission_number of 1 :
11847: LD_OWVAR 70
11851: PUSH
11852: LD_INT 1
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11936
11860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 11
11874: PUSH
11875: LD_INT 12
11877: PUSH
11878: LD_INT 15
11880: PUSH
11881: LD_INT 16
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 23
11889: PUSH
11890: LD_INT 26
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 106
11912: PUSH
11913: LD_INT 116
11915: PUSH
11916: LD_INT 117
11918: PUSH
11919: LD_INT 118
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: ST_TO_ADDR
11934: GO 15009
11936: LD_INT 2
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12028
11944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: LD_INT 11
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 16
11967: PUSH
11968: LD_INT 22
11970: PUSH
11971: LD_INT 23
11973: PUSH
11974: LD_INT 26
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 101
11990: PUSH
11991: LD_INT 102
11993: PUSH
11994: LD_INT 105
11996: PUSH
11997: LD_INT 106
11999: PUSH
12000: LD_INT 108
12002: PUSH
12003: LD_INT 116
12005: PUSH
12006: LD_INT 117
12008: PUSH
12009: LD_INT 118
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: ST_TO_ADDR
12026: GO 15009
12028: LD_INT 3
12030: DOUBLE
12031: EQUAL
12032: IFTRUE 12036
12034: GO 12124
12036: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 4
12047: PUSH
12048: LD_INT 5
12050: PUSH
12051: LD_INT 11
12053: PUSH
12054: LD_INT 12
12056: PUSH
12057: LD_INT 15
12059: PUSH
12060: LD_INT 16
12062: PUSH
12063: LD_INT 22
12065: PUSH
12066: LD_INT 26
12068: PUSH
12069: LD_INT 36
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 101
12086: PUSH
12087: LD_INT 102
12089: PUSH
12090: LD_INT 105
12092: PUSH
12093: LD_INT 106
12095: PUSH
12096: LD_INT 108
12098: PUSH
12099: LD_INT 116
12101: PUSH
12102: LD_INT 117
12104: PUSH
12105: LD_INT 118
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: ST_TO_ADDR
12122: GO 15009
12124: LD_INT 4
12126: DOUBLE
12127: EQUAL
12128: IFTRUE 12132
12130: GO 12228
12132: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: LD_INT 5
12146: PUSH
12147: LD_INT 8
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 15
12158: PUSH
12159: LD_INT 16
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: LD_INT 36
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 101
12190: PUSH
12191: LD_INT 102
12193: PUSH
12194: LD_INT 105
12196: PUSH
12197: LD_INT 106
12199: PUSH
12200: LD_INT 108
12202: PUSH
12203: LD_INT 116
12205: PUSH
12206: LD_INT 117
12208: PUSH
12209: LD_INT 118
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: ST_TO_ADDR
12226: GO 15009
12228: LD_INT 5
12230: DOUBLE
12231: EQUAL
12232: IFTRUE 12236
12234: GO 12348
12236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 4
12247: PUSH
12248: LD_INT 5
12250: PUSH
12251: LD_INT 6
12253: PUSH
12254: LD_INT 8
12256: PUSH
12257: LD_INT 11
12259: PUSH
12260: LD_INT 12
12262: PUSH
12263: LD_INT 15
12265: PUSH
12266: LD_INT 16
12268: PUSH
12269: LD_INT 22
12271: PUSH
12272: LD_INT 23
12274: PUSH
12275: LD_INT 25
12277: PUSH
12278: LD_INT 26
12280: PUSH
12281: LD_INT 36
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 101
12302: PUSH
12303: LD_INT 102
12305: PUSH
12306: LD_INT 105
12308: PUSH
12309: LD_INT 106
12311: PUSH
12312: LD_INT 108
12314: PUSH
12315: LD_INT 109
12317: PUSH
12318: LD_INT 112
12320: PUSH
12321: LD_INT 116
12323: PUSH
12324: LD_INT 117
12326: PUSH
12327: LD_INT 118
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
12346: GO 15009
12348: LD_INT 6
12350: DOUBLE
12351: EQUAL
12352: IFTRUE 12356
12354: GO 12488
12356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12357: LD_ADDR_VAR 0 2
12361: PUSH
12362: LD_INT 2
12364: PUSH
12365: LD_INT 4
12367: PUSH
12368: LD_INT 5
12370: PUSH
12371: LD_INT 6
12373: PUSH
12374: LD_INT 8
12376: PUSH
12377: LD_INT 11
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: LD_INT 15
12385: PUSH
12386: LD_INT 16
12388: PUSH
12389: LD_INT 20
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: LD_INT 36
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 101
12442: PUSH
12443: LD_INT 102
12445: PUSH
12446: LD_INT 105
12448: PUSH
12449: LD_INT 106
12451: PUSH
12452: LD_INT 108
12454: PUSH
12455: LD_INT 109
12457: PUSH
12458: LD_INT 112
12460: PUSH
12461: LD_INT 116
12463: PUSH
12464: LD_INT 117
12466: PUSH
12467: LD_INT 118
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: ST_TO_ADDR
12486: GO 15009
12488: LD_INT 7
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12608
12496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_INT 2
12504: PUSH
12505: LD_INT 4
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: LD_INT 7
12513: PUSH
12514: LD_INT 11
12516: PUSH
12517: LD_INT 12
12519: PUSH
12520: LD_INT 15
12522: PUSH
12523: LD_INT 16
12525: PUSH
12526: LD_INT 20
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 26
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 105
12571: PUSH
12572: LD_INT 106
12574: PUSH
12575: LD_INT 108
12577: PUSH
12578: LD_INT 112
12580: PUSH
12581: LD_INT 116
12583: PUSH
12584: LD_INT 117
12586: PUSH
12587: LD_INT 118
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: ST_TO_ADDR
12606: GO 15009
12608: LD_INT 8
12610: DOUBLE
12611: EQUAL
12612: IFTRUE 12616
12614: GO 12756
12616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: LD_INT 6
12633: PUSH
12634: LD_INT 7
12636: PUSH
12637: LD_INT 8
12639: PUSH
12640: LD_INT 11
12642: PUSH
12643: LD_INT 12
12645: PUSH
12646: LD_INT 15
12648: PUSH
12649: LD_INT 16
12651: PUSH
12652: LD_INT 20
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 23
12663: PUSH
12664: LD_INT 25
12666: PUSH
12667: LD_INT 26
12669: PUSH
12670: LD_INT 30
12672: PUSH
12673: LD_INT 31
12675: PUSH
12676: LD_INT 32
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 101
12706: PUSH
12707: LD_INT 102
12709: PUSH
12710: LD_INT 103
12712: PUSH
12713: LD_INT 105
12715: PUSH
12716: LD_INT 106
12718: PUSH
12719: LD_INT 108
12721: PUSH
12722: LD_INT 109
12724: PUSH
12725: LD_INT 112
12727: PUSH
12728: LD_INT 116
12730: PUSH
12731: LD_INT 117
12733: PUSH
12734: LD_INT 118
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: ST_TO_ADDR
12754: GO 15009
12756: LD_INT 9
12758: DOUBLE
12759: EQUAL
12760: IFTRUE 12764
12762: GO 12912
12764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12765: LD_ADDR_VAR 0 2
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: LD_INT 4
12775: PUSH
12776: LD_INT 5
12778: PUSH
12779: LD_INT 6
12781: PUSH
12782: LD_INT 7
12784: PUSH
12785: LD_INT 8
12787: PUSH
12788: LD_INT 11
12790: PUSH
12791: LD_INT 12
12793: PUSH
12794: LD_INT 15
12796: PUSH
12797: LD_INT 16
12799: PUSH
12800: LD_INT 20
12802: PUSH
12803: LD_INT 21
12805: PUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 23
12811: PUSH
12812: LD_INT 25
12814: PUSH
12815: LD_INT 26
12817: PUSH
12818: LD_INT 28
12820: PUSH
12821: LD_INT 30
12823: PUSH
12824: LD_INT 31
12826: PUSH
12827: LD_INT 32
12829: PUSH
12830: LD_INT 36
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 101
12858: PUSH
12859: LD_INT 102
12861: PUSH
12862: LD_INT 103
12864: PUSH
12865: LD_INT 105
12867: PUSH
12868: LD_INT 106
12870: PUSH
12871: LD_INT 108
12873: PUSH
12874: LD_INT 109
12876: PUSH
12877: LD_INT 112
12879: PUSH
12880: LD_INT 114
12882: PUSH
12883: LD_INT 116
12885: PUSH
12886: LD_INT 117
12888: PUSH
12889: LD_INT 118
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: ST_TO_ADDR
12910: GO 15009
12912: LD_INT 10
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 13116
12920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12921: LD_ADDR_VAR 0 2
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: LD_INT 4
12931: PUSH
12932: LD_INT 5
12934: PUSH
12935: LD_INT 6
12937: PUSH
12938: LD_INT 7
12940: PUSH
12941: LD_INT 8
12943: PUSH
12944: LD_INT 9
12946: PUSH
12947: LD_INT 10
12949: PUSH
12950: LD_INT 11
12952: PUSH
12953: LD_INT 12
12955: PUSH
12956: LD_INT 13
12958: PUSH
12959: LD_INT 14
12961: PUSH
12962: LD_INT 15
12964: PUSH
12965: LD_INT 16
12967: PUSH
12968: LD_INT 17
12970: PUSH
12971: LD_INT 18
12973: PUSH
12974: LD_INT 19
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 21
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_INT 23
12988: PUSH
12989: LD_INT 24
12991: PUSH
12992: LD_INT 25
12994: PUSH
12995: LD_INT 26
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 31
13006: PUSH
13007: LD_INT 32
13009: PUSH
13010: LD_INT 36
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 101
13046: PUSH
13047: LD_INT 102
13049: PUSH
13050: LD_INT 103
13052: PUSH
13053: LD_INT 104
13055: PUSH
13056: LD_INT 105
13058: PUSH
13059: LD_INT 106
13061: PUSH
13062: LD_INT 107
13064: PUSH
13065: LD_INT 108
13067: PUSH
13068: LD_INT 109
13070: PUSH
13071: LD_INT 110
13073: PUSH
13074: LD_INT 111
13076: PUSH
13077: LD_INT 112
13079: PUSH
13080: LD_INT 114
13082: PUSH
13083: LD_INT 116
13085: PUSH
13086: LD_INT 117
13088: PUSH
13089: LD_INT 118
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 15009
13116: LD_INT 11
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13328
13124: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 3
13135: PUSH
13136: LD_INT 4
13138: PUSH
13139: LD_INT 5
13141: PUSH
13142: LD_INT 6
13144: PUSH
13145: LD_INT 7
13147: PUSH
13148: LD_INT 8
13150: PUSH
13151: LD_INT 9
13153: PUSH
13154: LD_INT 10
13156: PUSH
13157: LD_INT 11
13159: PUSH
13160: LD_INT 12
13162: PUSH
13163: LD_INT 13
13165: PUSH
13166: LD_INT 14
13168: PUSH
13169: LD_INT 15
13171: PUSH
13172: LD_INT 16
13174: PUSH
13175: LD_INT 17
13177: PUSH
13178: LD_INT 18
13180: PUSH
13181: LD_INT 19
13183: PUSH
13184: LD_INT 20
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 22
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 24
13198: PUSH
13199: LD_INT 25
13201: PUSH
13202: LD_INT 26
13204: PUSH
13205: LD_INT 28
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 31
13213: PUSH
13214: LD_INT 32
13216: PUSH
13217: LD_INT 34
13219: PUSH
13220: LD_INT 36
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 101
13258: PUSH
13259: LD_INT 102
13261: PUSH
13262: LD_INT 103
13264: PUSH
13265: LD_INT 104
13267: PUSH
13268: LD_INT 105
13270: PUSH
13271: LD_INT 106
13273: PUSH
13274: LD_INT 107
13276: PUSH
13277: LD_INT 108
13279: PUSH
13280: LD_INT 109
13282: PUSH
13283: LD_INT 110
13285: PUSH
13286: LD_INT 111
13288: PUSH
13289: LD_INT 112
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 116
13297: PUSH
13298: LD_INT 117
13300: PUSH
13301: LD_INT 118
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
13326: GO 15009
13328: LD_INT 12
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13556
13336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13337: LD_ADDR_VAR 0 2
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 3
13350: PUSH
13351: LD_INT 4
13353: PUSH
13354: LD_INT 5
13356: PUSH
13357: LD_INT 6
13359: PUSH
13360: LD_INT 7
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: LD_INT 9
13368: PUSH
13369: LD_INT 10
13371: PUSH
13372: LD_INT 11
13374: PUSH
13375: LD_INT 12
13377: PUSH
13378: LD_INT 13
13380: PUSH
13381: LD_INT 14
13383: PUSH
13384: LD_INT 15
13386: PUSH
13387: LD_INT 16
13389: PUSH
13390: LD_INT 17
13392: PUSH
13393: LD_INT 18
13395: PUSH
13396: LD_INT 19
13398: PUSH
13399: LD_INT 20
13401: PUSH
13402: LD_INT 21
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 23
13410: PUSH
13411: LD_INT 24
13413: PUSH
13414: LD_INT 25
13416: PUSH
13417: LD_INT 26
13419: PUSH
13420: LD_INT 27
13422: PUSH
13423: LD_INT 28
13425: PUSH
13426: LD_INT 30
13428: PUSH
13429: LD_INT 31
13431: PUSH
13432: LD_INT 32
13434: PUSH
13435: LD_INT 33
13437: PUSH
13438: LD_INT 34
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 101
13482: PUSH
13483: LD_INT 102
13485: PUSH
13486: LD_INT 103
13488: PUSH
13489: LD_INT 104
13491: PUSH
13492: LD_INT 105
13494: PUSH
13495: LD_INT 106
13497: PUSH
13498: LD_INT 107
13500: PUSH
13501: LD_INT 108
13503: PUSH
13504: LD_INT 109
13506: PUSH
13507: LD_INT 110
13509: PUSH
13510: LD_INT 111
13512: PUSH
13513: LD_INT 112
13515: PUSH
13516: LD_INT 113
13518: PUSH
13519: LD_INT 114
13521: PUSH
13522: LD_INT 116
13524: PUSH
13525: LD_INT 117
13527: PUSH
13528: LD_INT 118
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 15009
13556: LD_INT 13
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13772
13564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: LD_INT 4
13581: PUSH
13582: LD_INT 5
13584: PUSH
13585: LD_INT 8
13587: PUSH
13588: LD_INT 9
13590: PUSH
13591: LD_INT 10
13593: PUSH
13594: LD_INT 11
13596: PUSH
13597: LD_INT 12
13599: PUSH
13600: LD_INT 14
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: LD_INT 16
13608: PUSH
13609: LD_INT 17
13611: PUSH
13612: LD_INT 18
13614: PUSH
13615: LD_INT 19
13617: PUSH
13618: LD_INT 20
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 23
13629: PUSH
13630: LD_INT 24
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 27
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 30
13647: PUSH
13648: LD_INT 31
13650: PUSH
13651: LD_INT 32
13653: PUSH
13654: LD_INT 33
13656: PUSH
13657: LD_INT 34
13659: PUSH
13660: LD_INT 36
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 101
13698: PUSH
13699: LD_INT 102
13701: PUSH
13702: LD_INT 103
13704: PUSH
13705: LD_INT 104
13707: PUSH
13708: LD_INT 105
13710: PUSH
13711: LD_INT 106
13713: PUSH
13714: LD_INT 107
13716: PUSH
13717: LD_INT 108
13719: PUSH
13720: LD_INT 109
13722: PUSH
13723: LD_INT 110
13725: PUSH
13726: LD_INT 111
13728: PUSH
13729: LD_INT 112
13731: PUSH
13732: LD_INT 113
13734: PUSH
13735: LD_INT 114
13737: PUSH
13738: LD_INT 116
13740: PUSH
13741: LD_INT 117
13743: PUSH
13744: LD_INT 118
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: ST_TO_ADDR
13770: GO 15009
13772: LD_INT 14
13774: DOUBLE
13775: EQUAL
13776: IFTRUE 13780
13778: GO 14004
13780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13781: LD_ADDR_VAR 0 2
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: LD_INT 2
13791: PUSH
13792: LD_INT 3
13794: PUSH
13795: LD_INT 4
13797: PUSH
13798: LD_INT 5
13800: PUSH
13801: LD_INT 6
13803: PUSH
13804: LD_INT 7
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: LD_INT 9
13812: PUSH
13813: LD_INT 10
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_INT 12
13821: PUSH
13822: LD_INT 13
13824: PUSH
13825: LD_INT 14
13827: PUSH
13828: LD_INT 15
13830: PUSH
13831: LD_INT 16
13833: PUSH
13834: LD_INT 17
13836: PUSH
13837: LD_INT 18
13839: PUSH
13840: LD_INT 19
13842: PUSH
13843: LD_INT 20
13845: PUSH
13846: LD_INT 21
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_INT 23
13854: PUSH
13855: LD_INT 24
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 26
13863: PUSH
13864: LD_INT 27
13866: PUSH
13867: LD_INT 28
13869: PUSH
13870: LD_INT 29
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: LD_INT 31
13878: PUSH
13879: LD_INT 32
13881: PUSH
13882: LD_INT 33
13884: PUSH
13885: LD_INT 34
13887: PUSH
13888: LD_INT 36
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 101
13930: PUSH
13931: LD_INT 102
13933: PUSH
13934: LD_INT 103
13936: PUSH
13937: LD_INT 104
13939: PUSH
13940: LD_INT 105
13942: PUSH
13943: LD_INT 106
13945: PUSH
13946: LD_INT 107
13948: PUSH
13949: LD_INT 108
13951: PUSH
13952: LD_INT 109
13954: PUSH
13955: LD_INT 110
13957: PUSH
13958: LD_INT 111
13960: PUSH
13961: LD_INT 112
13963: PUSH
13964: LD_INT 113
13966: PUSH
13967: LD_INT 114
13969: PUSH
13970: LD_INT 116
13972: PUSH
13973: LD_INT 117
13975: PUSH
13976: LD_INT 118
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 15009
14004: LD_INT 15
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14236
14012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 6
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: LD_INT 9
14044: PUSH
14045: LD_INT 10
14047: PUSH
14048: LD_INT 11
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 15
14062: PUSH
14063: LD_INT 16
14065: PUSH
14066: LD_INT 17
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: LD_INT 19
14074: PUSH
14075: LD_INT 20
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 23
14086: PUSH
14087: LD_INT 24
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 27
14098: PUSH
14099: LD_INT 28
14101: PUSH
14102: LD_INT 29
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 33
14116: PUSH
14117: LD_INT 34
14119: PUSH
14120: LD_INT 36
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 101
14162: PUSH
14163: LD_INT 102
14165: PUSH
14166: LD_INT 103
14168: PUSH
14169: LD_INT 104
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 107
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: LD_INT 109
14186: PUSH
14187: LD_INT 110
14189: PUSH
14190: LD_INT 111
14192: PUSH
14193: LD_INT 112
14195: PUSH
14196: LD_INT 113
14198: PUSH
14199: LD_INT 114
14201: PUSH
14202: LD_INT 116
14204: PUSH
14205: LD_INT 117
14207: PUSH
14208: LD_INT 118
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 15009
14236: LD_INT 16
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14380
14244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 4
14255: PUSH
14256: LD_INT 5
14258: PUSH
14259: LD_INT 7
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 15
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 23
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 26
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 101
14330: PUSH
14331: LD_INT 102
14333: PUSH
14334: LD_INT 103
14336: PUSH
14337: LD_INT 106
14339: PUSH
14340: LD_INT 108
14342: PUSH
14343: LD_INT 112
14345: PUSH
14346: LD_INT 113
14348: PUSH
14349: LD_INT 114
14351: PUSH
14352: LD_INT 116
14354: PUSH
14355: LD_INT 117
14357: PUSH
14358: LD_INT 118
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: ST_TO_ADDR
14378: GO 15009
14380: LD_INT 17
14382: DOUBLE
14383: EQUAL
14384: IFTRUE 14388
14386: GO 14612
14388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: LD_INT 5
14408: PUSH
14409: LD_INT 6
14411: PUSH
14412: LD_INT 7
14414: PUSH
14415: LD_INT 8
14417: PUSH
14418: LD_INT 9
14420: PUSH
14421: LD_INT 10
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: LD_INT 13
14432: PUSH
14433: LD_INT 14
14435: PUSH
14436: LD_INT 15
14438: PUSH
14439: LD_INT 16
14441: PUSH
14442: LD_INT 17
14444: PUSH
14445: LD_INT 18
14447: PUSH
14448: LD_INT 19
14450: PUSH
14451: LD_INT 20
14453: PUSH
14454: LD_INT 21
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_INT 23
14462: PUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 25
14468: PUSH
14469: LD_INT 26
14471: PUSH
14472: LD_INT 27
14474: PUSH
14475: LD_INT 28
14477: PUSH
14478: LD_INT 29
14480: PUSH
14481: LD_INT 30
14483: PUSH
14484: LD_INT 31
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: LD_INT 33
14492: PUSH
14493: LD_INT 34
14495: PUSH
14496: LD_INT 36
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 101
14538: PUSH
14539: LD_INT 102
14541: PUSH
14542: LD_INT 103
14544: PUSH
14545: LD_INT 104
14547: PUSH
14548: LD_INT 105
14550: PUSH
14551: LD_INT 106
14553: PUSH
14554: LD_INT 107
14556: PUSH
14557: LD_INT 108
14559: PUSH
14560: LD_INT 109
14562: PUSH
14563: LD_INT 110
14565: PUSH
14566: LD_INT 111
14568: PUSH
14569: LD_INT 112
14571: PUSH
14572: LD_INT 113
14574: PUSH
14575: LD_INT 114
14577: PUSH
14578: LD_INT 116
14580: PUSH
14581: LD_INT 117
14583: PUSH
14584: LD_INT 118
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: ST_TO_ADDR
14610: GO 15009
14612: LD_INT 18
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14768
14620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: LD_INT 4
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 7
14637: PUSH
14638: LD_INT 11
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: LD_INT 15
14646: PUSH
14647: LD_INT 16
14649: PUSH
14650: LD_INT 20
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_INT 23
14661: PUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 26
14667: PUSH
14668: LD_INT 30
14670: PUSH
14671: LD_INT 31
14673: PUSH
14674: LD_INT 32
14676: PUSH
14677: LD_INT 33
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 35
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 101
14714: PUSH
14715: LD_INT 102
14717: PUSH
14718: LD_INT 103
14720: PUSH
14721: LD_INT 106
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 112
14729: PUSH
14730: LD_INT 113
14732: PUSH
14733: LD_INT 114
14735: PUSH
14736: LD_INT 115
14738: PUSH
14739: LD_INT 116
14741: PUSH
14742: LD_INT 117
14744: PUSH
14745: LD_INT 118
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: ST_TO_ADDR
14766: GO 15009
14768: LD_INT 19
14770: DOUBLE
14771: EQUAL
14772: IFTRUE 14776
14774: GO 15008
14776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14777: LD_ADDR_VAR 0 2
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: LD_INT 5
14796: PUSH
14797: LD_INT 6
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: LD_INT 8
14805: PUSH
14806: LD_INT 9
14808: PUSH
14809: LD_INT 10
14811: PUSH
14812: LD_INT 11
14814: PUSH
14815: LD_INT 12
14817: PUSH
14818: LD_INT 13
14820: PUSH
14821: LD_INT 14
14823: PUSH
14824: LD_INT 15
14826: PUSH
14827: LD_INT 16
14829: PUSH
14830: LD_INT 17
14832: PUSH
14833: LD_INT 18
14835: PUSH
14836: LD_INT 19
14838: PUSH
14839: LD_INT 20
14841: PUSH
14842: LD_INT 21
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 23
14850: PUSH
14851: LD_INT 24
14853: PUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 28
14865: PUSH
14866: LD_INT 29
14868: PUSH
14869: LD_INT 30
14871: PUSH
14872: LD_INT 31
14874: PUSH
14875: LD_INT 32
14877: PUSH
14878: LD_INT 33
14880: PUSH
14881: LD_INT 34
14883: PUSH
14884: LD_INT 35
14886: PUSH
14887: LD_INT 36
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 101
14930: PUSH
14931: LD_INT 102
14933: PUSH
14934: LD_INT 103
14936: PUSH
14937: LD_INT 104
14939: PUSH
14940: LD_INT 105
14942: PUSH
14943: LD_INT 106
14945: PUSH
14946: LD_INT 107
14948: PUSH
14949: LD_INT 108
14951: PUSH
14952: LD_INT 109
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 111
14960: PUSH
14961: LD_INT 112
14963: PUSH
14964: LD_INT 113
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: LD_INT 115
14972: PUSH
14973: LD_INT 116
14975: PUSH
14976: LD_INT 117
14978: PUSH
14979: LD_INT 118
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 15009
15008: POP
// end else
15009: GO 15240
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: LD_INT 3
15024: PUSH
15025: LD_INT 4
15027: PUSH
15028: LD_INT 5
15030: PUSH
15031: LD_INT 6
15033: PUSH
15034: LD_INT 7
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: LD_INT 9
15042: PUSH
15043: LD_INT 10
15045: PUSH
15046: LD_INT 11
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 13
15054: PUSH
15055: LD_INT 14
15057: PUSH
15058: LD_INT 15
15060: PUSH
15061: LD_INT 16
15063: PUSH
15064: LD_INT 17
15066: PUSH
15067: LD_INT 18
15069: PUSH
15070: LD_INT 19
15072: PUSH
15073: LD_INT 20
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_INT 23
15084: PUSH
15085: LD_INT 24
15087: PUSH
15088: LD_INT 25
15090: PUSH
15091: LD_INT 26
15093: PUSH
15094: LD_INT 27
15096: PUSH
15097: LD_INT 28
15099: PUSH
15100: LD_INT 29
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 31
15108: PUSH
15109: LD_INT 32
15111: PUSH
15112: LD_INT 33
15114: PUSH
15115: LD_INT 34
15117: PUSH
15118: LD_INT 35
15120: PUSH
15121: LD_INT 36
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 101
15164: PUSH
15165: LD_INT 102
15167: PUSH
15168: LD_INT 103
15170: PUSH
15171: LD_INT 104
15173: PUSH
15174: LD_INT 105
15176: PUSH
15177: LD_INT 106
15179: PUSH
15180: LD_INT 107
15182: PUSH
15183: LD_INT 108
15185: PUSH
15186: LD_INT 109
15188: PUSH
15189: LD_INT 110
15191: PUSH
15192: LD_INT 111
15194: PUSH
15195: LD_INT 112
15197: PUSH
15198: LD_INT 113
15200: PUSH
15201: LD_INT 114
15203: PUSH
15204: LD_INT 115
15206: PUSH
15207: LD_INT 116
15209: PUSH
15210: LD_INT 117
15212: PUSH
15213: LD_INT 118
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ST_TO_ADDR
// if result then
15240: LD_VAR 0 2
15244: IFFALSE 16030
// begin normal :=  ;
15246: LD_ADDR_VAR 0 5
15250: PUSH
15251: LD_STRING 
15253: ST_TO_ADDR
// hardcore :=  ;
15254: LD_ADDR_VAR 0 6
15258: PUSH
15259: LD_STRING 
15261: ST_TO_ADDR
// active :=  ;
15262: LD_ADDR_VAR 0 7
15266: PUSH
15267: LD_STRING 
15269: ST_TO_ADDR
// for i = 1 to normalCounter do
15270: LD_ADDR_VAR 0 8
15274: PUSH
15275: DOUBLE
15276: LD_INT 1
15278: DEC
15279: ST_TO_ADDR
15280: LD_EXP 28
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15387
// begin tmp := 0 ;
15288: LD_ADDR_VAR 0 3
15292: PUSH
15293: LD_STRING 0
15295: ST_TO_ADDR
// if result [ 1 ] then
15296: LD_VAR 0 2
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: IFFALSE 15369
// if result [ 1 ] [ 1 ] = i then
15306: LD_VAR 0 2
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PUSH
15319: LD_VAR 0 8
15323: EQUAL
15324: IFFALSE 15369
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_INT 1
15338: PPUSH
15339: LD_VAR 0 2
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 3
15355: PPUSH
15356: CALL_OW 1
15360: ST_TO_ADDR
// tmp := 1 ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_STRING 1
15368: ST_TO_ADDR
// end ; normal := normal & tmp ;
15369: LD_ADDR_VAR 0 5
15373: PUSH
15374: LD_VAR 0 5
15378: PUSH
15379: LD_VAR 0 3
15383: STR
15384: ST_TO_ADDR
// end ;
15385: GO 15285
15387: POP
15388: POP
// for i = 1 to hardcoreCounter do
15389: LD_ADDR_VAR 0 8
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_EXP 29
15403: PUSH
15404: FOR_TO
15405: IFFALSE 15510
// begin tmp := 0 ;
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_STRING 0
15414: ST_TO_ADDR
// if result [ 2 ] then
15415: LD_VAR 0 2
15419: PUSH
15420: LD_INT 2
15422: ARRAY
15423: IFFALSE 15492
// if result [ 2 ] [ 1 ] = 100 + i then
15425: LD_VAR 0 2
15429: PUSH
15430: LD_INT 2
15432: ARRAY
15433: PUSH
15434: LD_INT 1
15436: ARRAY
15437: PUSH
15438: LD_INT 100
15440: PUSH
15441: LD_VAR 0 8
15445: PLUS
15446: EQUAL
15447: IFFALSE 15492
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_INT 2
15461: PPUSH
15462: LD_VAR 0 2
15466: PUSH
15467: LD_INT 2
15469: ARRAY
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 3
15478: PPUSH
15479: CALL_OW 1
15483: ST_TO_ADDR
// tmp := 1 ;
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_STRING 1
15491: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15492: LD_ADDR_VAR 0 6
15496: PUSH
15497: LD_VAR 0 6
15501: PUSH
15502: LD_VAR 0 3
15506: STR
15507: ST_TO_ADDR
// end ;
15508: GO 15404
15510: POP
15511: POP
// if isGameLoad then
15512: LD_VAR 0 1
15516: IFFALSE 15991
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15518: LD_ADDR_VAR 0 4
15522: PUSH
15523: LD_EXP 32
15527: PUSH
15528: LD_EXP 31
15532: PUSH
15533: LD_EXP 33
15537: PUSH
15538: LD_EXP 30
15542: PUSH
15543: LD_EXP 34
15547: PUSH
15548: LD_EXP 35
15552: PUSH
15553: LD_EXP 36
15557: PUSH
15558: LD_EXP 37
15562: PUSH
15563: LD_EXP 38
15567: PUSH
15568: LD_EXP 39
15572: PUSH
15573: LD_EXP 40
15577: PUSH
15578: LD_EXP 41
15582: PUSH
15583: LD_EXP 42
15587: PUSH
15588: LD_EXP 43
15592: PUSH
15593: LD_EXP 51
15597: PUSH
15598: LD_EXP 52
15602: PUSH
15603: LD_EXP 53
15607: PUSH
15608: LD_EXP 54
15612: PUSH
15613: LD_EXP 56
15617: PUSH
15618: LD_EXP 57
15622: PUSH
15623: LD_EXP 58
15627: PUSH
15628: LD_EXP 61
15632: PUSH
15633: LD_EXP 63
15637: PUSH
15638: LD_EXP 64
15642: PUSH
15643: LD_EXP 65
15647: PUSH
15648: LD_EXP 67
15652: PUSH
15653: LD_EXP 68
15657: PUSH
15658: LD_EXP 71
15662: PUSH
15663: LD_EXP 72
15667: PUSH
15668: LD_EXP 73
15672: PUSH
15673: LD_EXP 74
15677: PUSH
15678: LD_EXP 75
15682: PUSH
15683: LD_EXP 76
15687: PUSH
15688: LD_EXP 77
15692: PUSH
15693: LD_EXP 78
15697: PUSH
15698: LD_EXP 79
15702: PUSH
15703: LD_EXP 44
15707: PUSH
15708: LD_EXP 45
15712: PUSH
15713: LD_EXP 48
15717: PUSH
15718: LD_EXP 49
15722: PUSH
15723: LD_EXP 50
15727: PUSH
15728: LD_EXP 46
15732: PUSH
15733: LD_EXP 47
15737: PUSH
15738: LD_EXP 55
15742: PUSH
15743: LD_EXP 59
15747: PUSH
15748: LD_EXP 60
15752: PUSH
15753: LD_EXP 62
15757: PUSH
15758: LD_EXP 66
15762: PUSH
15763: LD_EXP 69
15767: PUSH
15768: LD_EXP 70
15772: PUSH
15773: LD_EXP 80
15777: PUSH
15778: LD_EXP 81
15782: PUSH
15783: LD_EXP 82
15787: PUSH
15788: LD_EXP 83
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// tmp :=  ;
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// for i = 1 to normalCounter do
15857: LD_ADDR_VAR 0 8
15861: PUSH
15862: DOUBLE
15863: LD_INT 1
15865: DEC
15866: ST_TO_ADDR
15867: LD_EXP 28
15871: PUSH
15872: FOR_TO
15873: IFFALSE 15909
// begin if flags [ i ] then
15875: LD_VAR 0 4
15879: PUSH
15880: LD_VAR 0 8
15884: ARRAY
15885: IFFALSE 15907
// tmp := tmp & i & ; ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: LD_VAR 0 3
15896: PUSH
15897: LD_VAR 0 8
15901: STR
15902: PUSH
15903: LD_STRING ;
15905: STR
15906: ST_TO_ADDR
// end ;
15907: GO 15872
15909: POP
15910: POP
// for i = 1 to hardcoreCounter do
15911: LD_ADDR_VAR 0 8
15915: PUSH
15916: DOUBLE
15917: LD_INT 1
15919: DEC
15920: ST_TO_ADDR
15921: LD_EXP 29
15925: PUSH
15926: FOR_TO
15927: IFFALSE 15973
// begin if flags [ normalCounter + i ] then
15929: LD_VAR 0 4
15933: PUSH
15934: LD_EXP 28
15938: PUSH
15939: LD_VAR 0 8
15943: PLUS
15944: ARRAY
15945: IFFALSE 15971
// tmp := tmp & ( 100 + i ) & ; ;
15947: LD_ADDR_VAR 0 3
15951: PUSH
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 100
15959: PUSH
15960: LD_VAR 0 8
15964: PLUS
15965: STR
15966: PUSH
15967: LD_STRING ;
15969: STR
15970: ST_TO_ADDR
// end ;
15971: GO 15926
15973: POP
15974: POP
// if tmp then
15975: LD_VAR 0 3
15979: IFFALSE 15991
// active := tmp ;
15981: LD_ADDR_VAR 0 7
15985: PUSH
15986: LD_VAR 0 3
15990: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15991: LD_STRING getStreamItemsFromMission("
15993: PUSH
15994: LD_VAR 0 5
15998: STR
15999: PUSH
16000: LD_STRING ","
16002: STR
16003: PUSH
16004: LD_VAR 0 6
16008: STR
16009: PUSH
16010: LD_STRING ","
16012: STR
16013: PUSH
16014: LD_VAR 0 7
16018: STR
16019: PUSH
16020: LD_STRING ")
16022: STR
16023: PPUSH
16024: CALL_OW 559
// end else
16028: GO 16037
// ToLua ( getStreamItemsFromMission("","","") ) ;
16030: LD_STRING getStreamItemsFromMission("","","")
16032: PPUSH
16033: CALL_OW 559
// end ;
16037: LD_VAR 0 2
16041: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16042: LD_EXP 27
16046: PUSH
16047: LD_EXP 32
16051: AND
16052: IFFALSE 16176
16054: GO 16056
16056: DISABLE
16057: LD_INT 0
16059: PPUSH
16060: PPUSH
// begin enable ;
16061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_OWVAR 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 7
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 34
16094: PUSH
16095: LD_INT 45
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 34
16104: PUSH
16105: LD_INT 28
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 34
16114: PUSH
16115: LD_INT 47
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PPUSH
16133: CALL_OW 69
16137: ST_TO_ADDR
// if not tmp then
16138: LD_VAR 0 2
16142: NOT
16143: IFFALSE 16147
// exit ;
16145: GO 16176
// for i in tmp do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16174
// begin SetLives ( i , 0 ) ;
16160: LD_VAR 0 1
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 234
// end ;
16172: GO 16157
16174: POP
16175: POP
// end ;
16176: PPOPN 2
16178: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16179: LD_EXP 27
16183: PUSH
16184: LD_EXP 33
16188: AND
16189: IFFALSE 16273
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// begin enable ;
16198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 32
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: CALL_OW 69
16234: ST_TO_ADDR
// if not tmp then
16235: LD_VAR 0 2
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16273
// for i in tmp do
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 2
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16271
// begin SetLives ( i , 0 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 0
16264: PPUSH
16265: CALL_OW 234
// end ;
16269: GO 16254
16271: POP
16272: POP
// end ;
16273: PPOPN 2
16275: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16276: LD_EXP 27
16280: PUSH
16281: LD_EXP 30
16285: AND
16286: IFFALSE 16379
16288: GO 16290
16290: DISABLE
16291: LD_INT 0
16293: PPUSH
// begin enable ;
16294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16295: LD_ADDR_VAR 0 1
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_OWVAR 2
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 2
16314: PUSH
16315: LD_INT 25
16317: PUSH
16318: LD_INT 5
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 25
16327: PUSH
16328: LD_INT 9
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 25
16337: PUSH
16338: LD_INT 8
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PPUSH
16355: CALL_OW 69
16359: PUSH
16360: FOR_IN
16361: IFFALSE 16377
// begin SetClass ( i , 1 ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 336
// end ;
16375: GO 16360
16377: POP
16378: POP
// end ;
16379: PPOPN 1
16381: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16382: LD_EXP 27
16386: PUSH
16387: LD_EXP 31
16391: AND
16392: PUSH
16393: LD_OWVAR 65
16397: PUSH
16398: LD_INT 7
16400: LESS
16401: AND
16402: IFFALSE 16416
16404: GO 16406
16406: DISABLE
// begin enable ;
16407: ENABLE
// game_speed := 7 ;
16408: LD_ADDR_OWVAR 65
16412: PUSH
16413: LD_INT 7
16415: ST_TO_ADDR
// end ;
16416: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16417: LD_EXP 27
16421: PUSH
16422: LD_EXP 34
16426: AND
16427: IFFALSE 16629
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
16435: PPUSH
16436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_INT 81
16444: PUSH
16445: LD_OWVAR 2
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 21
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// if not tmp then
16473: LD_VAR 0 3
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16629
// if tmp > 5 then
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 5
16489: GREATER
16490: IFFALSE 16502
// k := 5 else
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: LD_INT 5
16499: ST_TO_ADDR
16500: GO 16512
// k := tmp ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_VAR 0 3
16511: ST_TO_ADDR
// for i := 1 to k do
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_VAR 0 2
16526: PUSH
16527: FOR_TO
16528: IFFALSE 16627
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_VAR 0 1
16539: ARRAY
16540: PPUSH
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 4
16548: MOD
16549: PUSH
16550: LD_INT 1
16552: PLUS
16553: PPUSH
16554: CALL_OW 259
16558: PUSH
16559: LD_INT 10
16561: LESS
16562: IFFALSE 16625
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16564: LD_VAR 0 3
16568: PUSH
16569: LD_VAR 0 1
16573: ARRAY
16574: PPUSH
16575: LD_VAR 0 1
16579: PUSH
16580: LD_INT 4
16582: MOD
16583: PUSH
16584: LD_INT 1
16586: PLUS
16587: PPUSH
16588: LD_VAR 0 3
16592: PUSH
16593: LD_VAR 0 1
16597: ARRAY
16598: PPUSH
16599: LD_VAR 0 1
16603: PUSH
16604: LD_INT 4
16606: MOD
16607: PUSH
16608: LD_INT 1
16610: PLUS
16611: PPUSH
16612: CALL_OW 259
16616: PUSH
16617: LD_INT 1
16619: PLUS
16620: PPUSH
16621: CALL_OW 237
16625: GO 16527
16627: POP
16628: POP
// end ;
16629: PPOPN 3
16631: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16632: LD_EXP 27
16636: PUSH
16637: LD_EXP 35
16641: AND
16642: IFFALSE 16662
16644: GO 16646
16646: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16647: LD_INT 4
16649: PPUSH
16650: LD_OWVAR 2
16654: PPUSH
16655: LD_INT 0
16657: PPUSH
16658: CALL_OW 324
16662: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16663: LD_EXP 27
16667: PUSH
16668: LD_EXP 64
16672: AND
16673: IFFALSE 16693
16675: GO 16677
16677: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16678: LD_INT 19
16680: PPUSH
16681: LD_OWVAR 2
16685: PPUSH
16686: LD_INT 0
16688: PPUSH
16689: CALL_OW 324
16693: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16694: LD_EXP 27
16698: PUSH
16699: LD_EXP 36
16703: AND
16704: IFFALSE 16806
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
// begin enable ;
16713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_INT 22
16721: PUSH
16722: LD_OWVAR 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 34
16736: PUSH
16737: LD_INT 11
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 34
16746: PUSH
16747: LD_INT 30
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PPUSH
16763: CALL_OW 69
16767: ST_TO_ADDR
// if not tmp then
16768: LD_VAR 0 2
16772: NOT
16773: IFFALSE 16777
// exit ;
16775: GO 16806
// for i in tmp do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_VAR 0 2
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16804
// begin SetLives ( i , 0 ) ;
16790: LD_VAR 0 1
16794: PPUSH
16795: LD_INT 0
16797: PPUSH
16798: CALL_OW 234
// end ;
16802: GO 16787
16804: POP
16805: POP
// end ;
16806: PPOPN 2
16808: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16809: LD_EXP 27
16813: PUSH
16814: LD_EXP 37
16818: AND
16819: IFFALSE 16839
16821: GO 16823
16823: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16824: LD_INT 32
16826: PPUSH
16827: LD_OWVAR 2
16831: PPUSH
16832: LD_INT 0
16834: PPUSH
16835: CALL_OW 324
16839: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16840: LD_EXP 27
16844: PUSH
16845: LD_EXP 38
16849: AND
16850: IFFALSE 17031
16852: GO 16854
16854: DISABLE
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 33
16879: PUSH
16880: LD_INT 3
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 2
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 17031
// side := 0 ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// for i := 1 to 8 do
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: DOUBLE
16919: LD_INT 1
16921: DEC
16922: ST_TO_ADDR
16923: LD_INT 8
16925: PUSH
16926: FOR_TO
16927: IFFALSE 16975
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16929: LD_OWVAR 2
16933: PUSH
16934: LD_VAR 0 1
16938: NONEQUAL
16939: PUSH
16940: LD_OWVAR 2
16944: PPUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 81
16954: PUSH
16955: LD_INT 2
16957: EQUAL
16958: AND
16959: IFFALSE 16973
// begin side := i ;
16961: LD_ADDR_VAR 0 3
16965: PUSH
16966: LD_VAR 0 1
16970: ST_TO_ADDR
// break ;
16971: GO 16975
// end ;
16973: GO 16926
16975: POP
16976: POP
// if not side then
16977: LD_VAR 0 3
16981: NOT
16982: IFFALSE 16986
// exit ;
16984: GO 17031
// for i := 1 to tmp do
16986: LD_ADDR_VAR 0 1
16990: PUSH
16991: DOUBLE
16992: LD_INT 1
16994: DEC
16995: ST_TO_ADDR
16996: LD_VAR 0 2
17000: PUSH
17001: FOR_TO
17002: IFFALSE 17029
// if Prob ( 60 ) then
17004: LD_INT 60
17006: PPUSH
17007: CALL_OW 13
17011: IFFALSE 17027
// SetSide ( i , side ) ;
17013: LD_VAR 0 1
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: CALL_OW 235
17027: GO 17001
17029: POP
17030: POP
// end ;
17031: PPOPN 3
17033: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17034: LD_EXP 27
17038: PUSH
17039: LD_EXP 40
17043: AND
17044: IFFALSE 17163
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_OWVAR 2
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 21
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 23
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: PUSH
17106: FOR_IN
17107: IFFALSE 17161
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 257
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: LD_INT 4
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: IN
17137: IFFALSE 17159
// SetClass ( un , rand ( 1 , 4 ) ) ;
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: LD_INT 4
17149: PPUSH
17150: CALL_OW 12
17154: PPUSH
17155: CALL_OW 336
17159: GO 17106
17161: POP
17162: POP
// end ;
17163: PPOPN 1
17165: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17166: LD_EXP 27
17170: PUSH
17171: LD_EXP 39
17175: AND
17176: IFFALSE 17255
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_OWVAR 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 21
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: ST_TO_ADDR
// if not tmp then
17220: LD_VAR 0 1
17224: NOT
17225: IFFALSE 17229
// exit ;
17227: GO 17255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17229: LD_VAR 0 1
17233: PUSH
17234: LD_INT 1
17236: PPUSH
17237: LD_VAR 0 1
17241: PPUSH
17242: CALL_OW 12
17246: ARRAY
17247: PPUSH
17248: LD_INT 100
17250: PPUSH
17251: CALL_OW 234
// end ;
17255: PPOPN 1
17257: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17258: LD_EXP 27
17262: PUSH
17263: LD_EXP 41
17267: AND
17268: IFFALSE 17366
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17276: LD_ADDR_VAR 0 1
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_OWVAR 2
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 21
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PPUSH
17307: CALL_OW 69
17311: ST_TO_ADDR
// if not tmp then
17312: LD_VAR 0 1
17316: NOT
17317: IFFALSE 17321
// exit ;
17319: GO 17366
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 1
17328: PPUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 12
17338: ARRAY
17339: PPUSH
17340: LD_INT 1
17342: PPUSH
17343: LD_INT 4
17345: PPUSH
17346: CALL_OW 12
17350: PPUSH
17351: LD_INT 3000
17353: PPUSH
17354: LD_INT 9000
17356: PPUSH
17357: CALL_OW 12
17361: PPUSH
17362: CALL_OW 492
// end ;
17366: PPOPN 1
17368: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17369: LD_EXP 27
17373: PUSH
17374: LD_EXP 42
17378: AND
17379: IFFALSE 17399
17381: GO 17383
17383: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17384: LD_INT 1
17386: PPUSH
17387: LD_OWVAR 2
17391: PPUSH
17392: LD_INT 0
17394: PPUSH
17395: CALL_OW 324
17399: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17400: LD_EXP 27
17404: PUSH
17405: LD_EXP 43
17409: AND
17410: IFFALSE 17493
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17419: LD_ADDR_VAR 0 2
17423: PUSH
17424: LD_INT 22
17426: PUSH
17427: LD_OWVAR 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 21
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PPUSH
17450: CALL_OW 69
17454: ST_TO_ADDR
// if not tmp then
17455: LD_VAR 0 2
17459: NOT
17460: IFFALSE 17464
// exit ;
17462: GO 17493
// for i in tmp do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_VAR 0 2
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17491
// SetBLevel ( i , 10 ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_INT 10
17484: PPUSH
17485: CALL_OW 241
17489: GO 17474
17491: POP
17492: POP
// end ;
17493: PPOPN 2
17495: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17496: LD_EXP 27
17500: PUSH
17501: LD_EXP 44
17505: AND
17506: IFFALSE 17617
17508: GO 17510
17510: DISABLE
17511: LD_INT 0
17513: PPUSH
17514: PPUSH
17515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17516: LD_ADDR_VAR 0 3
17520: PUSH
17521: LD_INT 22
17523: PUSH
17524: LD_OWVAR 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PPUSH
17547: CALL_OW 69
17551: ST_TO_ADDR
// if not tmp then
17552: LD_VAR 0 3
17556: NOT
17557: IFFALSE 17561
// exit ;
17559: GO 17617
// un := tmp [ rand ( 1 , tmp ) ] ;
17561: LD_ADDR_VAR 0 2
17565: PUSH
17566: LD_VAR 0 3
17570: PUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_VAR 0 3
17578: PPUSH
17579: CALL_OW 12
17583: ARRAY
17584: ST_TO_ADDR
// if Crawls ( un ) then
17585: LD_VAR 0 2
17589: PPUSH
17590: CALL_OW 318
17594: IFFALSE 17605
// ComWalk ( un ) ;
17596: LD_VAR 0 2
17600: PPUSH
17601: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17605: LD_VAR 0 2
17609: PPUSH
17610: LD_INT 5
17612: PPUSH
17613: CALL_OW 336
// end ;
17617: PPOPN 3
17619: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17620: LD_EXP 27
17624: PUSH
17625: LD_EXP 45
17629: AND
17630: PUSH
17631: LD_OWVAR 67
17635: PUSH
17636: LD_INT 4
17638: LESS
17639: AND
17640: IFFALSE 17659
17642: GO 17644
17644: DISABLE
// begin Difficulty := Difficulty + 1 ;
17645: LD_ADDR_OWVAR 67
17649: PUSH
17650: LD_OWVAR 67
17654: PUSH
17655: LD_INT 1
17657: PLUS
17658: ST_TO_ADDR
// end ;
17659: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17660: LD_EXP 27
17664: PUSH
17665: LD_EXP 46
17669: AND
17670: IFFALSE 17773
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
// begin for i := 1 to 5 do
17678: LD_ADDR_VAR 0 1
17682: PUSH
17683: DOUBLE
17684: LD_INT 1
17686: DEC
17687: ST_TO_ADDR
17688: LD_INT 5
17690: PUSH
17691: FOR_TO
17692: IFFALSE 17771
// begin uc_nation := nation_nature ;
17694: LD_ADDR_OWVAR 21
17698: PUSH
17699: LD_INT 0
17701: ST_TO_ADDR
// uc_side := 0 ;
17702: LD_ADDR_OWVAR 20
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17710: LD_ADDR_OWVAR 29
17714: PUSH
17715: LD_INT 12
17717: PUSH
17718: LD_INT 12
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// hc_agressivity := 20 ;
17725: LD_ADDR_OWVAR 35
17729: PUSH
17730: LD_INT 20
17732: ST_TO_ADDR
// hc_class := class_tiger ;
17733: LD_ADDR_OWVAR 28
17737: PUSH
17738: LD_INT 14
17740: ST_TO_ADDR
// hc_gallery :=  ;
17741: LD_ADDR_OWVAR 33
17745: PUSH
17746: LD_STRING 
17748: ST_TO_ADDR
// hc_name :=  ;
17749: LD_ADDR_OWVAR 26
17753: PUSH
17754: LD_STRING 
17756: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17757: CALL_OW 44
17761: PPUSH
17762: LD_INT 0
17764: PPUSH
17765: CALL_OW 51
// end ;
17769: GO 17691
17771: POP
17772: POP
// end ;
17773: PPOPN 1
17775: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17776: LD_EXP 27
17780: PUSH
17781: LD_EXP 47
17785: AND
17786: IFFALSE 17795
17788: GO 17790
17790: DISABLE
// StreamSibBomb ;
17791: CALL 17796 0 0
17795: END
// export function StreamSibBomb ; var i , x , y ; begin
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
// result := false ;
17802: LD_ADDR_VAR 0 1
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// for i := 1 to 16 do
17810: LD_ADDR_VAR 0 2
17814: PUSH
17815: DOUBLE
17816: LD_INT 1
17818: DEC
17819: ST_TO_ADDR
17820: LD_INT 16
17822: PUSH
17823: FOR_TO
17824: IFFALSE 18023
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17826: LD_ADDR_VAR 0 3
17830: PUSH
17831: LD_INT 10
17833: PUSH
17834: LD_INT 20
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 40
17842: PUSH
17843: LD_INT 50
17845: PUSH
17846: LD_INT 60
17848: PUSH
17849: LD_INT 70
17851: PUSH
17852: LD_INT 80
17854: PUSH
17855: LD_INT 90
17857: PUSH
17858: LD_INT 100
17860: PUSH
17861: LD_INT 110
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 130
17869: PUSH
17870: LD_INT 140
17872: PUSH
17873: LD_INT 150
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 15
17898: PPUSH
17899: CALL_OW 12
17903: ARRAY
17904: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_INT 10
17912: PUSH
17913: LD_INT 20
17915: PUSH
17916: LD_INT 30
17918: PUSH
17919: LD_INT 40
17921: PUSH
17922: LD_INT 50
17924: PUSH
17925: LD_INT 60
17927: PUSH
17928: LD_INT 70
17930: PUSH
17931: LD_INT 80
17933: PUSH
17934: LD_INT 90
17936: PUSH
17937: LD_INT 100
17939: PUSH
17940: LD_INT 110
17942: PUSH
17943: LD_INT 120
17945: PUSH
17946: LD_INT 130
17948: PUSH
17949: LD_INT 140
17951: PUSH
17952: LD_INT 150
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_INT 15
17977: PPUSH
17978: CALL_OW 12
17982: ARRAY
17983: ST_TO_ADDR
// if ValidHex ( x , y ) then
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_VAR 0 4
17993: PPUSH
17994: CALL_OW 488
17998: IFFALSE 18021
// begin result := [ x , y ] ;
18000: LD_ADDR_VAR 0 1
18004: PUSH
18005: LD_VAR 0 3
18009: PUSH
18010: LD_VAR 0 4
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: ST_TO_ADDR
// break ;
18019: GO 18023
// end ; end ;
18021: GO 17823
18023: POP
18024: POP
// if result then
18025: LD_VAR 0 1
18029: IFFALSE 18089
// begin ToLua ( playSibBomb() ) ;
18031: LD_STRING playSibBomb()
18033: PPUSH
18034: CALL_OW 559
// wait ( 0 0$14 ) ;
18038: LD_INT 490
18040: PPUSH
18041: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 1
18052: ARRAY
18053: PPUSH
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 2
18061: ARRAY
18062: PPUSH
18063: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18067: LD_VAR 0 1
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PPUSH
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 2
18083: ARRAY
18084: PPUSH
18085: CALL_OW 429
// end ; end ;
18089: LD_VAR 0 1
18093: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18094: LD_EXP 27
18098: PUSH
18099: LD_EXP 49
18103: AND
18104: IFFALSE 18116
18106: GO 18108
18108: DISABLE
// YouLost (  ) ;
18109: LD_STRING 
18111: PPUSH
18112: CALL_OW 104
18116: END
// every 0 0$1 trigger StreamModeActive and sFog do
18117: LD_EXP 27
18121: PUSH
18122: LD_EXP 48
18126: AND
18127: IFFALSE 18141
18129: GO 18131
18131: DISABLE
// FogOff ( your_side ) ;
18132: LD_OWVAR 2
18136: PPUSH
18137: CALL_OW 344
18141: END
// every 0 0$1 trigger StreamModeActive and sSun do
18142: LD_EXP 27
18146: PUSH
18147: LD_EXP 50
18151: AND
18152: IFFALSE 18180
18154: GO 18156
18156: DISABLE
// begin solar_recharge_percent := 0 ;
18157: LD_ADDR_OWVAR 79
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18165: LD_INT 10500
18167: PPUSH
18168: CALL_OW 67
// solar_recharge_percent := 100 ;
18172: LD_ADDR_OWVAR 79
18176: PUSH
18177: LD_INT 100
18179: ST_TO_ADDR
// end ;
18180: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18181: LD_EXP 27
18185: PUSH
18186: LD_EXP 51
18190: AND
18191: IFFALSE 18430
18193: GO 18195
18195: DISABLE
18196: LD_INT 0
18198: PPUSH
18199: PPUSH
18200: PPUSH
// begin tmp := [ ] ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// for i := 1 to 6 do
18208: LD_ADDR_VAR 0 1
18212: PUSH
18213: DOUBLE
18214: LD_INT 1
18216: DEC
18217: ST_TO_ADDR
18218: LD_INT 6
18220: PUSH
18221: FOR_TO
18222: IFFALSE 18327
// begin uc_nation := nation_nature ;
18224: LD_ADDR_OWVAR 21
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// uc_side := 0 ;
18232: LD_ADDR_OWVAR 20
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18240: LD_ADDR_OWVAR 29
18244: PUSH
18245: LD_INT 12
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: ST_TO_ADDR
// hc_agressivity := 20 ;
18255: LD_ADDR_OWVAR 35
18259: PUSH
18260: LD_INT 20
18262: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18263: LD_ADDR_OWVAR 28
18267: PUSH
18268: LD_INT 17
18270: ST_TO_ADDR
// hc_gallery :=  ;
18271: LD_ADDR_OWVAR 33
18275: PUSH
18276: LD_STRING 
18278: ST_TO_ADDR
// hc_name :=  ;
18279: LD_ADDR_OWVAR 26
18283: PUSH
18284: LD_STRING 
18286: ST_TO_ADDR
// un := CreateHuman ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: CALL_OW 44
18296: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 51
// tmp := tmp ^ un ;
18309: LD_ADDR_VAR 0 3
18313: PUSH
18314: LD_VAR 0 3
18318: PUSH
18319: LD_VAR 0 2
18323: ADD
18324: ST_TO_ADDR
// end ;
18325: GO 18221
18327: POP
18328: POP
// repeat wait ( 0 0$1 ) ;
18329: LD_INT 35
18331: PPUSH
18332: CALL_OW 67
// for un in tmp do
18336: LD_ADDR_VAR 0 2
18340: PUSH
18341: LD_VAR 0 3
18345: PUSH
18346: FOR_IN
18347: IFFALSE 18421
// begin if IsDead ( un ) then
18349: LD_VAR 0 2
18353: PPUSH
18354: CALL_OW 301
18358: IFFALSE 18378
// begin tmp := tmp diff un ;
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: LD_VAR 0 3
18369: PUSH
18370: LD_VAR 0 2
18374: DIFF
18375: ST_TO_ADDR
// continue ;
18376: GO 18346
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18378: LD_VAR 0 2
18382: PPUSH
18383: LD_INT 3
18385: PUSH
18386: LD_INT 22
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PPUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: CALL_OW 74
18414: PPUSH
18415: CALL_OW 115
// end ;
18419: GO 18346
18421: POP
18422: POP
// until not tmp ;
18423: LD_VAR 0 3
18427: NOT
18428: IFFALSE 18329
// end ;
18430: PPOPN 3
18432: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18433: LD_EXP 27
18437: PUSH
18438: LD_EXP 52
18442: AND
18443: IFFALSE 18497
18445: GO 18447
18447: DISABLE
// begin ToLua ( displayTroll(); ) ;
18448: LD_STRING displayTroll();
18450: PPUSH
18451: CALL_OW 559
// wait ( 3 3$00 ) ;
18455: LD_INT 6300
18457: PPUSH
18458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18462: LD_STRING hideTroll();
18464: PPUSH
18465: CALL_OW 559
// wait ( 1 1$00 ) ;
18469: LD_INT 2100
18471: PPUSH
18472: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18476: LD_STRING displayTroll();
18478: PPUSH
18479: CALL_OW 559
// wait ( 1 1$00 ) ;
18483: LD_INT 2100
18485: PPUSH
18486: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18490: LD_STRING hideTroll();
18492: PPUSH
18493: CALL_OW 559
// end ;
18497: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18498: LD_EXP 27
18502: PUSH
18503: LD_EXP 53
18507: AND
18508: IFFALSE 18571
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
// begin p := 0 ;
18516: LD_ADDR_VAR 0 1
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// repeat game_speed := 1 ;
18524: LD_ADDR_OWVAR 65
18528: PUSH
18529: LD_INT 1
18531: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18532: LD_INT 35
18534: PPUSH
18535: CALL_OW 67
// p := p + 1 ;
18539: LD_ADDR_VAR 0 1
18543: PUSH
18544: LD_VAR 0 1
18548: PUSH
18549: LD_INT 1
18551: PLUS
18552: ST_TO_ADDR
// until p >= 60 ;
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 60
18560: GREATEREQUAL
18561: IFFALSE 18524
// game_speed := 4 ;
18563: LD_ADDR_OWVAR 65
18567: PUSH
18568: LD_INT 4
18570: ST_TO_ADDR
// end ;
18571: PPOPN 1
18573: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18574: LD_EXP 27
18578: PUSH
18579: LD_EXP 54
18583: AND
18584: IFFALSE 18730
18586: GO 18588
18588: DISABLE
18589: LD_INT 0
18591: PPUSH
18592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_OWVAR 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 30
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 30
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PPUSH
18642: CALL_OW 69
18646: ST_TO_ADDR
// if not depot then
18647: LD_VAR 0 1
18651: NOT
18652: IFFALSE 18656
// exit ;
18654: GO 18730
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_VAR 0 1
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 12
18678: ARRAY
18679: PPUSH
18680: CALL_OW 274
18684: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: LD_INT 0
18695: PPUSH
18696: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_INT 2
18707: PPUSH
18708: LD_INT 0
18710: PPUSH
18711: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_INT 3
18722: PPUSH
18723: LD_INT 0
18725: PPUSH
18726: CALL_OW 277
// end ;
18730: PPOPN 2
18732: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18733: LD_EXP 27
18737: PUSH
18738: LD_EXP 55
18742: AND
18743: IFFALSE 18840
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 21
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: LD_INT 23
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 69
18804: ST_TO_ADDR
// if not tmp then
18805: LD_VAR 0 1
18809: NOT
18810: IFFALSE 18814
// exit ;
18812: GO 18840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18814: LD_VAR 0 1
18818: PUSH
18819: LD_INT 1
18821: PPUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 12
18831: ARRAY
18832: PPUSH
18833: LD_INT 200
18835: PPUSH
18836: CALL_OW 234
// end ;
18840: PPOPN 1
18842: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18843: LD_EXP 27
18847: PUSH
18848: LD_EXP 56
18852: AND
18853: IFFALSE 18932
18855: GO 18857
18857: DISABLE
18858: LD_INT 0
18860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18861: LD_ADDR_VAR 0 1
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 21
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 69
18896: ST_TO_ADDR
// if not tmp then
18897: LD_VAR 0 1
18901: NOT
18902: IFFALSE 18906
// exit ;
18904: GO 18932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18906: LD_VAR 0 1
18910: PUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 12
18923: ARRAY
18924: PPUSH
18925: LD_INT 60
18927: PPUSH
18928: CALL_OW 234
// end ;
18932: PPOPN 1
18934: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18935: LD_EXP 27
18939: PUSH
18940: LD_EXP 57
18944: AND
18945: IFFALSE 19044
18947: GO 18949
18949: DISABLE
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
// begin enable ;
18954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18955: LD_ADDR_VAR 0 1
18959: PUSH
18960: LD_INT 22
18962: PUSH
18963: LD_OWVAR 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 61
18974: PUSH
18975: EMPTY
18976: LIST
18977: PUSH
18978: LD_INT 33
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: ST_TO_ADDR
// if not tmp then
18998: LD_VAR 0 1
19002: NOT
19003: IFFALSE 19007
// exit ;
19005: GO 19044
// for i in tmp do
19007: LD_ADDR_VAR 0 2
19011: PUSH
19012: LD_VAR 0 1
19016: PUSH
19017: FOR_IN
19018: IFFALSE 19042
// if IsControledBy ( i ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 312
19029: IFFALSE 19040
// ComUnlink ( i ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 136
19040: GO 19017
19042: POP
19043: POP
// end ;
19044: PPOPN 2
19046: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19047: LD_EXP 27
19051: PUSH
19052: LD_EXP 58
19056: AND
19057: IFFALSE 19197
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
// begin ToLua ( displayPowell(); ) ;
19066: LD_STRING displayPowell();
19068: PPUSH
19069: CALL_OW 559
// uc_side := 0 ;
19073: LD_ADDR_OWVAR 20
19077: PUSH
19078: LD_INT 0
19080: ST_TO_ADDR
// uc_nation := 2 ;
19081: LD_ADDR_OWVAR 21
19085: PUSH
19086: LD_INT 2
19088: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19089: LD_ADDR_OWVAR 37
19093: PUSH
19094: LD_INT 14
19096: ST_TO_ADDR
// vc_engine := engine_siberite ;
19097: LD_ADDR_OWVAR 39
19101: PUSH
19102: LD_INT 3
19104: ST_TO_ADDR
// vc_control := control_apeman ;
19105: LD_ADDR_OWVAR 38
19109: PUSH
19110: LD_INT 5
19112: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19113: LD_ADDR_OWVAR 40
19117: PUSH
19118: LD_INT 29
19120: ST_TO_ADDR
// un := CreateVehicle ;
19121: LD_ADDR_VAR 0 2
19125: PUSH
19126: CALL_OW 45
19130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19131: LD_VAR 0 2
19135: PPUSH
19136: LD_INT 1
19138: PPUSH
19139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19143: LD_INT 35
19145: PPUSH
19146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19150: LD_VAR 0 2
19154: PPUSH
19155: LD_INT 22
19157: PUSH
19158: LD_OWVAR 2
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 69
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: CALL_OW 74
19181: PPUSH
19182: CALL_OW 115
// until IsDead ( un ) ;
19186: LD_VAR 0 2
19190: PPUSH
19191: CALL_OW 301
19195: IFFALSE 19143
// end ;
19197: PPOPN 2
19199: END
// every 0 0$1 trigger StreamModeActive and sStu do
19200: LD_EXP 27
19204: PUSH
19205: LD_EXP 66
19209: AND
19210: IFFALSE 19226
19212: GO 19214
19214: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19215: LD_STRING displayStucuk();
19217: PPUSH
19218: CALL_OW 559
// ResetFog ;
19222: CALL_OW 335
// end ;
19226: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19227: LD_EXP 27
19231: PUSH
19232: LD_EXP 59
19236: AND
19237: IFFALSE 19378
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19246: LD_ADDR_VAR 0 2
19250: PUSH
19251: LD_INT 22
19253: PUSH
19254: LD_OWVAR 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: ST_TO_ADDR
// if not tmp then
19282: LD_VAR 0 2
19286: NOT
19287: IFFALSE 19291
// exit ;
19289: GO 19378
// un := tmp [ rand ( 1 , tmp ) ] ;
19291: LD_ADDR_VAR 0 1
19295: PUSH
19296: LD_VAR 0 2
19300: PUSH
19301: LD_INT 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: CALL_OW 12
19313: ARRAY
19314: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19327: LD_VAR 0 1
19331: PPUSH
19332: LD_OWVAR 3
19336: PUSH
19337: LD_VAR 0 1
19341: DIFF
19342: PPUSH
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL_OW 74
19352: PPUSH
19353: CALL_OW 115
// wait ( 0 0$20 ) ;
19357: LD_INT 700
19359: PPUSH
19360: CALL_OW 67
// SetSide ( un , your_side ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_OWVAR 2
19373: PPUSH
19374: CALL_OW 235
// end ;
19378: PPOPN 2
19380: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19381: LD_EXP 27
19385: PUSH
19386: LD_EXP 60
19390: AND
19391: IFFALSE 19497
19393: GO 19395
19395: DISABLE
19396: LD_INT 0
19398: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19399: LD_ADDR_VAR 0 1
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_OWVAR 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 30
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 30
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// if not depot then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 19497
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19462: LD_VAR 0 1
19466: PUSH
19467: LD_INT 1
19469: ARRAY
19470: PPUSH
19471: CALL_OW 250
19475: PPUSH
19476: LD_VAR 0 1
19480: PUSH
19481: LD_INT 1
19483: ARRAY
19484: PPUSH
19485: CALL_OW 251
19489: PPUSH
19490: LD_INT 70
19492: PPUSH
19493: CALL_OW 495
// end ;
19497: PPOPN 1
19499: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19500: LD_EXP 27
19504: PUSH
19505: LD_EXP 61
19509: AND
19510: IFFALSE 19721
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19522: LD_ADDR_VAR 0 5
19526: PUSH
19527: LD_INT 22
19529: PUSH
19530: LD_OWVAR 2
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 21
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// if not tmp then
19558: LD_VAR 0 5
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19721
// for i in tmp do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: LD_VAR 0 5
19576: PUSH
19577: FOR_IN
19578: IFFALSE 19719
// begin d := rand ( 0 , 5 ) ;
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: LD_INT 0
19587: PPUSH
19588: LD_INT 5
19590: PPUSH
19591: CALL_OW 12
19595: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 250
19610: PPUSH
19611: LD_VAR 0 4
19615: PPUSH
19616: LD_INT 3
19618: PPUSH
19619: LD_INT 12
19621: PPUSH
19622: CALL_OW 12
19626: PPUSH
19627: CALL_OW 272
19631: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19632: LD_ADDR_VAR 0 3
19636: PUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL_OW 251
19646: PPUSH
19647: LD_VAR 0 4
19651: PPUSH
19652: LD_INT 3
19654: PPUSH
19655: LD_INT 12
19657: PPUSH
19658: CALL_OW 12
19662: PPUSH
19663: CALL_OW 273
19667: ST_TO_ADDR
// if ValidHex ( x , y ) then
19668: LD_VAR 0 2
19672: PPUSH
19673: LD_VAR 0 3
19677: PPUSH
19678: CALL_OW 488
19682: IFFALSE 19717
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_INT 3
19701: PPUSH
19702: LD_INT 6
19704: PPUSH
19705: CALL_OW 12
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 483
// end ;
19717: GO 19577
19719: POP
19720: POP
// end ;
19721: PPOPN 5
19723: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19724: LD_EXP 27
19728: PUSH
19729: LD_EXP 62
19733: AND
19734: IFFALSE 19828
19736: GO 19738
19738: DISABLE
19739: LD_INT 0
19741: PPUSH
19742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19743: LD_ADDR_VAR 0 2
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_OWVAR 2
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 32
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 2
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19828
// for i in tmp do
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_VAR 0 2
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19826
// SetFuel ( i , 0 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 240
19824: GO 19809
19826: POP
19827: POP
// end ;
19828: PPOPN 2
19830: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19831: LD_EXP 27
19835: PUSH
19836: LD_EXP 63
19840: AND
19841: IFFALSE 19907
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_OWVAR 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 30
19868: PUSH
19869: LD_INT 29
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 1
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 19907
// DestroyUnit ( tmp [ 1 ] ) ;
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: ARRAY
19902: PPUSH
19903: CALL_OW 65
// end ;
19907: PPOPN 1
19909: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19910: LD_EXP 27
19914: PUSH
19915: LD_EXP 65
19919: AND
19920: IFFALSE 20049
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
// begin uc_side := 0 ;
19928: LD_ADDR_OWVAR 20
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// uc_nation := nation_arabian ;
19936: LD_ADDR_OWVAR 21
19940: PUSH
19941: LD_INT 2
19943: ST_TO_ADDR
// hc_gallery :=  ;
19944: LD_ADDR_OWVAR 33
19948: PUSH
19949: LD_STRING 
19951: ST_TO_ADDR
// hc_name :=  ;
19952: LD_ADDR_OWVAR 26
19956: PUSH
19957: LD_STRING 
19959: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19960: LD_INT 1
19962: PPUSH
19963: LD_INT 11
19965: PPUSH
19966: LD_INT 10
19968: PPUSH
19969: CALL_OW 380
// un := CreateHuman ;
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: CALL_OW 44
19982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19983: LD_VAR 0 1
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 22
20009: PUSH
20010: LD_OWVAR 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PPUSH
20019: CALL_OW 69
20023: PPUSH
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 74
20033: PPUSH
20034: CALL_OW 115
// until IsDead ( un ) ;
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 301
20047: IFFALSE 19995
// end ;
20049: PPOPN 1
20051: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20052: LD_EXP 27
20056: PUSH
20057: LD_EXP 67
20061: AND
20062: IFFALSE 20074
20064: GO 20066
20066: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20067: LD_STRING earthquake(getX(game), 0, 32)
20069: PPUSH
20070: CALL_OW 559
20074: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20075: LD_EXP 27
20079: PUSH
20080: LD_EXP 68
20084: AND
20085: IFFALSE 20176
20087: GO 20089
20089: DISABLE
20090: LD_INT 0
20092: PPUSH
// begin enable ;
20093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20094: LD_ADDR_VAR 0 1
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_OWVAR 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 21
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 33
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: ST_TO_ADDR
// if not tmp then
20141: LD_VAR 0 1
20145: NOT
20146: IFFALSE 20150
// exit ;
20148: GO 20176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20150: LD_VAR 0 1
20154: PUSH
20155: LD_INT 1
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 234
// end ;
20176: PPOPN 1
20178: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20179: LD_EXP 27
20183: PUSH
20184: LD_EXP 69
20188: AND
20189: IFFALSE 20330
20191: GO 20193
20193: DISABLE
20194: LD_INT 0
20196: PPUSH
20197: PPUSH
20198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 22
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 25
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PPUSH
20230: CALL_OW 69
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 3
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20330
// un := tmp [ rand ( 1 , tmp ) ] ;
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 1
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: CALL_OW 12
20266: ARRAY
20267: ST_TO_ADDR
// if Crawls ( un ) then
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 318
20277: IFFALSE 20288
// ComWalk ( un ) ;
20279: LD_VAR 0 2
20283: PPUSH
20284: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20288: LD_VAR 0 2
20292: PPUSH
20293: LD_INT 9
20295: PPUSH
20296: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20300: LD_INT 28
20302: PPUSH
20303: LD_OWVAR 2
20307: PPUSH
20308: LD_INT 2
20310: PPUSH
20311: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20315: LD_INT 29
20317: PPUSH
20318: LD_OWVAR 2
20322: PPUSH
20323: LD_INT 2
20325: PPUSH
20326: CALL_OW 322
// end ;
20330: PPOPN 3
20332: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20333: LD_EXP 27
20337: PUSH
20338: LD_EXP 70
20342: AND
20343: IFFALSE 20454
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 3
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20454
// un := tmp [ rand ( 1 , tmp ) ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// if Crawls ( un ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 318
20431: IFFALSE 20442
// ComWalk ( un ) ;
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_INT 8
20449: PPUSH
20450: CALL_OW 336
// end ;
20454: PPOPN 3
20456: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20457: LD_EXP 27
20461: PUSH
20462: LD_EXP 71
20466: AND
20467: IFFALSE 20611
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20476: LD_ADDR_VAR 0 2
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_OWVAR 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 21
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 34
20508: PUSH
20509: LD_INT 12
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 34
20518: PUSH
20519: LD_INT 51
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 34
20528: PUSH
20529: LD_INT 32
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: PPUSH
20547: CALL_OW 69
20551: ST_TO_ADDR
// if not tmp then
20552: LD_VAR 0 2
20556: NOT
20557: IFFALSE 20561
// exit ;
20559: GO 20611
// for i in tmp do
20561: LD_ADDR_VAR 0 1
20565: PUSH
20566: LD_VAR 0 2
20570: PUSH
20571: FOR_IN
20572: IFFALSE 20609
// if GetCargo ( i , mat_artifact ) = 0 then
20574: LD_VAR 0 1
20578: PPUSH
20579: LD_INT 4
20581: PPUSH
20582: CALL_OW 289
20586: PUSH
20587: LD_INT 0
20589: EQUAL
20590: IFFALSE 20607
// SetCargo ( i , mat_siberit , 100 ) ;
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_INT 3
20599: PPUSH
20600: LD_INT 100
20602: PPUSH
20603: CALL_OW 290
20607: GO 20571
20609: POP
20610: POP
// end ;
20611: PPOPN 2
20613: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20614: LD_EXP 27
20618: PUSH
20619: LD_EXP 72
20623: AND
20624: IFFALSE 20807
20626: GO 20628
20628: DISABLE
20629: LD_INT 0
20631: PPUSH
20632: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 22
20640: PUSH
20641: LD_OWVAR 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: CALL_OW 69
20654: ST_TO_ADDR
// if not tmp then
20655: LD_VAR 0 2
20659: NOT
20660: IFFALSE 20664
// exit ;
20662: GO 20807
// for i := 1 to 2 do
20664: LD_ADDR_VAR 0 1
20668: PUSH
20669: DOUBLE
20670: LD_INT 1
20672: DEC
20673: ST_TO_ADDR
20674: LD_INT 2
20676: PUSH
20677: FOR_TO
20678: IFFALSE 20805
// begin uc_side := your_side ;
20680: LD_ADDR_OWVAR 20
20684: PUSH
20685: LD_OWVAR 2
20689: ST_TO_ADDR
// uc_nation := nation_american ;
20690: LD_ADDR_OWVAR 21
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// vc_chassis := us_morphling ;
20698: LD_ADDR_OWVAR 37
20702: PUSH
20703: LD_INT 5
20705: ST_TO_ADDR
// vc_engine := engine_siberite ;
20706: LD_ADDR_OWVAR 39
20710: PUSH
20711: LD_INT 3
20713: ST_TO_ADDR
// vc_control := control_computer ;
20714: LD_ADDR_OWVAR 38
20718: PUSH
20719: LD_INT 3
20721: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20722: LD_ADDR_OWVAR 40
20726: PUSH
20727: LD_INT 10
20729: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20730: LD_VAR 0 2
20734: PUSH
20735: LD_INT 1
20737: ARRAY
20738: PPUSH
20739: CALL_OW 310
20743: NOT
20744: IFFALSE 20791
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20746: CALL_OW 45
20750: PPUSH
20751: LD_VAR 0 2
20755: PUSH
20756: LD_INT 1
20758: ARRAY
20759: PPUSH
20760: CALL_OW 250
20764: PPUSH
20765: LD_VAR 0 2
20769: PUSH
20770: LD_INT 1
20772: ARRAY
20773: PPUSH
20774: CALL_OW 251
20778: PPUSH
20779: LD_INT 12
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 50
20789: GO 20803
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20791: CALL_OW 45
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 51
// end ;
20803: GO 20677
20805: POP
20806: POP
// end ;
20807: PPOPN 2
20809: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20810: LD_EXP 27
20814: PUSH
20815: LD_EXP 73
20819: AND
20820: IFFALSE 21042
20822: GO 20824
20824: DISABLE
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20833: LD_ADDR_VAR 0 6
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_OWVAR 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 3
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: ST_TO_ADDR
// if not tmp then
20887: LD_VAR 0 6
20891: NOT
20892: IFFALSE 20896
// exit ;
20894: GO 21042
// s1 := rand ( 1 , 4 ) ;
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_INT 1
20903: PPUSH
20904: LD_INT 4
20906: PPUSH
20907: CALL_OW 12
20911: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20912: LD_ADDR_VAR 0 4
20916: PUSH
20917: LD_VAR 0 6
20921: PUSH
20922: LD_INT 1
20924: ARRAY
20925: PPUSH
20926: LD_VAR 0 2
20930: PPUSH
20931: CALL_OW 259
20935: ST_TO_ADDR
// if s1 = 1 then
20936: LD_VAR 0 2
20940: PUSH
20941: LD_INT 1
20943: EQUAL
20944: IFFALSE 20964
// s2 := rand ( 2 , 4 ) else
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 2
20953: PPUSH
20954: LD_INT 4
20956: PPUSH
20957: CALL_OW 12
20961: ST_TO_ADDR
20962: GO 20972
// s2 := 1 ;
20964: LD_ADDR_VAR 0 3
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20972: LD_ADDR_VAR 0 5
20976: PUSH
20977: LD_VAR 0 6
20981: PUSH
20982: LD_INT 1
20984: ARRAY
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: CALL_OW 259
20995: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20996: LD_VAR 0 6
21000: PUSH
21001: LD_INT 1
21003: ARRAY
21004: PPUSH
21005: LD_VAR 0 2
21009: PPUSH
21010: LD_VAR 0 5
21014: PPUSH
21015: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21019: LD_VAR 0 6
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 3
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: CALL_OW 237
// end ;
21042: PPOPN 6
21044: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21045: LD_EXP 27
21049: PUSH
21050: LD_EXP 74
21054: AND
21055: IFFALSE 21134
21057: GO 21059
21059: DISABLE
21060: LD_INT 0
21062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_OWVAR 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 30
21082: PUSH
21083: LD_INT 3
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: ST_TO_ADDR
// if not tmp then
21099: LD_VAR 0 1
21103: NOT
21104: IFFALSE 21108
// exit ;
21106: GO 21134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21108: LD_VAR 0 1
21112: PUSH
21113: LD_INT 1
21115: PPUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 12
21125: ARRAY
21126: PPUSH
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 234
// end ;
21134: PPOPN 1
21136: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21137: LD_EXP 27
21141: PUSH
21142: LD_EXP 75
21146: AND
21147: IFFALSE 21259
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_OWVAR 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 30
21178: PUSH
21179: LD_INT 27
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 30
21188: PUSH
21189: LD_INT 26
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 28
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 2
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21259
// for i in tmp do
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: LD_VAR 0 2
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21257
// SetLives ( i , 1 ) ;
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 234
21255: GO 21240
21257: POP
21258: POP
// end ;
21259: PPOPN 2
21261: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21262: LD_EXP 27
21266: PUSH
21267: LD_EXP 76
21271: AND
21272: IFFALSE 21559
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
// begin i := rand ( 1 , 7 ) ;
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: LD_INT 1
21289: PPUSH
21290: LD_INT 7
21292: PPUSH
21293: CALL_OW 12
21297: ST_TO_ADDR
// case i of 1 :
21298: LD_VAR 0 1
21302: PUSH
21303: LD_INT 1
21305: DOUBLE
21306: EQUAL
21307: IFTRUE 21311
21309: GO 21321
21311: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21312: LD_STRING earthquake(getX(game), 0, 32)
21314: PPUSH
21315: CALL_OW 559
21319: GO 21559
21321: LD_INT 2
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21343
21329: POP
// begin ToLua ( displayStucuk(); ) ;
21330: LD_STRING displayStucuk();
21332: PPUSH
21333: CALL_OW 559
// ResetFog ;
21337: CALL_OW 335
// end ; 3 :
21341: GO 21559
21343: LD_INT 3
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21455
21351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_OWVAR 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 25
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 69
21387: ST_TO_ADDR
// if not tmp then
21388: LD_VAR 0 2
21392: NOT
21393: IFFALSE 21397
// exit ;
21395: GO 21559
// un := tmp [ rand ( 1 , tmp ) ] ;
21397: LD_ADDR_VAR 0 3
21401: PUSH
21402: LD_VAR 0 2
21406: PUSH
21407: LD_INT 1
21409: PPUSH
21410: LD_VAR 0 2
21414: PPUSH
21415: CALL_OW 12
21419: ARRAY
21420: ST_TO_ADDR
// if Crawls ( un ) then
21421: LD_VAR 0 3
21425: PPUSH
21426: CALL_OW 318
21430: IFFALSE 21441
// ComWalk ( un ) ;
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21441: LD_VAR 0 3
21445: PPUSH
21446: LD_INT 8
21448: PPUSH
21449: CALL_OW 336
// end ; 4 :
21453: GO 21559
21455: LD_INT 4
21457: DOUBLE
21458: EQUAL
21459: IFTRUE 21463
21461: GO 21537
21463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_INT 22
21471: PUSH
21472: LD_OWVAR 2
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 30
21483: PUSH
21484: LD_INT 29
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: ST_TO_ADDR
// if not tmp then
21500: LD_VAR 0 2
21504: NOT
21505: IFFALSE 21509
// exit ;
21507: GO 21559
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21509: LD_VAR 0 2
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21522: LD_VAR 0 2
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: CALL_OW 65
// end ; 5 .. 7 :
21535: GO 21559
21537: LD_INT 5
21539: DOUBLE
21540: GREATEREQUAL
21541: IFFALSE 21549
21543: LD_INT 7
21545: DOUBLE
21546: LESSEQUAL
21547: IFTRUE 21551
21549: GO 21558
21551: POP
// StreamSibBomb ; end ;
21552: CALL 17796 0 0
21556: GO 21559
21558: POP
// end ;
21559: PPOPN 3
21561: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21562: LD_EXP 27
21566: PUSH
21567: LD_EXP 77
21571: AND
21572: IFFALSE 21728
21574: GO 21576
21576: DISABLE
21577: LD_INT 0
21579: PPUSH
21580: PPUSH
21581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21582: LD_ADDR_VAR 0 2
21586: PUSH
21587: LD_INT 81
21589: PUSH
21590: LD_OWVAR 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 69
21635: ST_TO_ADDR
// if not tmp then
21636: LD_VAR 0 2
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 21728
// p := 0 ;
21645: LD_ADDR_VAR 0 3
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21653: LD_INT 35
21655: PPUSH
21656: CALL_OW 67
// p := p + 1 ;
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 1
21672: PLUS
21673: ST_TO_ADDR
// for i in tmp do
21674: LD_ADDR_VAR 0 1
21678: PUSH
21679: LD_VAR 0 2
21683: PUSH
21684: FOR_IN
21685: IFFALSE 21716
// if GetLives ( i ) < 1000 then
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 256
21696: PUSH
21697: LD_INT 1000
21699: LESS
21700: IFFALSE 21714
// SetLives ( i , 1000 ) ;
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_INT 1000
21709: PPUSH
21710: CALL_OW 234
21714: GO 21684
21716: POP
21717: POP
// until p > 20 ;
21718: LD_VAR 0 3
21722: PUSH
21723: LD_INT 20
21725: GREATER
21726: IFFALSE 21653
// end ;
21728: PPOPN 3
21730: END
// every 0 0$1 trigger StreamModeActive and sTime do
21731: LD_EXP 27
21735: PUSH
21736: LD_EXP 78
21740: AND
21741: IFFALSE 21776
21743: GO 21745
21745: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21746: LD_INT 28
21748: PPUSH
21749: LD_OWVAR 2
21753: PPUSH
21754: LD_INT 2
21756: PPUSH
21757: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21761: LD_INT 30
21763: PPUSH
21764: LD_OWVAR 2
21768: PPUSH
21769: LD_INT 2
21771: PPUSH
21772: CALL_OW 322
// end ;
21776: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21777: LD_EXP 27
21781: PUSH
21782: LD_EXP 79
21786: AND
21787: IFFALSE 21908
21789: GO 21791
21791: DISABLE
21792: LD_INT 0
21794: PPUSH
21795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_OWVAR 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 21
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: LD_INT 23
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: PPUSH
21845: CALL_OW 69
21849: ST_TO_ADDR
// if not tmp then
21850: LD_VAR 0 2
21854: NOT
21855: IFFALSE 21859
// exit ;
21857: GO 21908
// for i in tmp do
21859: LD_ADDR_VAR 0 1
21863: PUSH
21864: LD_VAR 0 2
21868: PUSH
21869: FOR_IN
21870: IFFALSE 21906
// begin if Crawls ( i ) then
21872: LD_VAR 0 1
21876: PPUSH
21877: CALL_OW 318
21881: IFFALSE 21892
// ComWalk ( i ) ;
21883: LD_VAR 0 1
21887: PPUSH
21888: CALL_OW 138
// SetClass ( i , 2 ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 2
21899: PPUSH
21900: CALL_OW 336
// end ;
21904: GO 21869
21906: POP
21907: POP
// end ;
21908: PPOPN 2
21910: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21911: LD_EXP 27
21915: PUSH
21916: LD_EXP 80
21920: AND
21921: IFFALSE 22209
21923: GO 21925
21925: DISABLE
21926: LD_INT 0
21928: PPUSH
21929: PPUSH
21930: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21931: LD_OWVAR 2
21935: PPUSH
21936: LD_INT 9
21938: PPUSH
21939: LD_INT 1
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21949: LD_INT 9
21951: PPUSH
21952: LD_OWVAR 2
21956: PPUSH
21957: CALL_OW 343
// uc_side := 9 ;
21961: LD_ADDR_OWVAR 20
21965: PUSH
21966: LD_INT 9
21968: ST_TO_ADDR
// uc_nation := 2 ;
21969: LD_ADDR_OWVAR 21
21973: PUSH
21974: LD_INT 2
21976: ST_TO_ADDR
// hc_name := Dark Warrior ;
21977: LD_ADDR_OWVAR 26
21981: PUSH
21982: LD_STRING Dark Warrior
21984: ST_TO_ADDR
// hc_gallery :=  ;
21985: LD_ADDR_OWVAR 33
21989: PUSH
21990: LD_STRING 
21992: ST_TO_ADDR
// hc_noskilllimit := true ;
21993: LD_ADDR_OWVAR 76
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22001: LD_ADDR_OWVAR 31
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 30
22014: PUSH
22015: LD_INT 30
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: ST_TO_ADDR
// un := CreateHuman ;
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: CALL_OW 44
22033: ST_TO_ADDR
// hc_noskilllimit := false ;
22034: LD_ADDR_OWVAR 76
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22042: LD_VAR 0 3
22046: PPUSH
22047: LD_INT 1
22049: PPUSH
22050: CALL_OW 51
// ToLua ( playRanger() ) ;
22054: LD_STRING playRanger()
22056: PPUSH
22057: CALL_OW 559
// p := 0 ;
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22069: LD_INT 35
22071: PPUSH
22072: CALL_OW 67
// p := p + 1 ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_VAR 0 2
22085: PUSH
22086: LD_INT 1
22088: PLUS
22089: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22090: LD_VAR 0 3
22094: PPUSH
22095: CALL_OW 256
22099: PUSH
22100: LD_INT 1000
22102: LESS
22103: IFFALSE 22117
// SetLives ( un , 1000 ) ;
22105: LD_VAR 0 3
22109: PPUSH
22110: LD_INT 1000
22112: PPUSH
22113: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22117: LD_VAR 0 3
22121: PPUSH
22122: LD_INT 81
22124: PUSH
22125: LD_OWVAR 2
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 91
22136: PUSH
22137: LD_VAR 0 3
22141: PUSH
22142: LD_INT 30
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: PPUSH
22159: LD_VAR 0 3
22163: PPUSH
22164: CALL_OW 74
22168: PPUSH
22169: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22173: LD_VAR 0 2
22177: PUSH
22178: LD_INT 80
22180: GREATER
22181: PUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: CALL_OW 301
22191: OR
22192: IFFALSE 22069
// if un then
22194: LD_VAR 0 3
22198: IFFALSE 22209
// RemoveUnit ( un ) ;
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 64
// end ;
22209: PPOPN 3
22211: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22212: LD_EXP 81
22216: IFFALSE 22332
22218: GO 22220
22220: DISABLE
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
22225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 81
22233: PUSH
22234: LD_OWVAR 2
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 21
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 69
22261: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22262: LD_STRING playComputer()
22264: PPUSH
22265: CALL_OW 559
// if not tmp then
22269: LD_VAR 0 2
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22332
// for i in tmp do
22278: LD_ADDR_VAR 0 1
22282: PUSH
22283: LD_VAR 0 2
22287: PUSH
22288: FOR_IN
22289: IFFALSE 22330
// for j := 1 to 4 do
22291: LD_ADDR_VAR 0 3
22295: PUSH
22296: DOUBLE
22297: LD_INT 1
22299: DEC
22300: ST_TO_ADDR
22301: LD_INT 4
22303: PUSH
22304: FOR_TO
22305: IFFALSE 22326
// SetSkill ( i , j , 10 ) ;
22307: LD_VAR 0 1
22311: PPUSH
22312: LD_VAR 0 3
22316: PPUSH
22317: LD_INT 10
22319: PPUSH
22320: CALL_OW 237
22324: GO 22304
22326: POP
22327: POP
22328: GO 22288
22330: POP
22331: POP
// end ;
22332: PPOPN 3
22334: END
// every 0 0$1 trigger s30 do var i , tmp ;
22335: LD_EXP 82
22339: IFFALSE 22408
22341: GO 22343
22343: DISABLE
22344: LD_INT 0
22346: PPUSH
22347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_INT 22
22355: PUSH
22356: LD_OWVAR 2
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PPUSH
22365: CALL_OW 69
22369: ST_TO_ADDR
// if not tmp then
22370: LD_VAR 0 2
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22408
// for i in tmp do
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: LD_VAR 0 2
22388: PUSH
22389: FOR_IN
22390: IFFALSE 22406
// SetLives ( i , 300 ) ;
22392: LD_VAR 0 1
22396: PPUSH
22397: LD_INT 300
22399: PPUSH
22400: CALL_OW 234
22404: GO 22389
22406: POP
22407: POP
// end ;
22408: PPOPN 2
22410: END
// every 0 0$1 trigger s60 do var i , tmp ;
22411: LD_EXP 83
22415: IFFALSE 22484
22417: GO 22419
22419: DISABLE
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: LD_INT 22
22431: PUSH
22432: LD_OWVAR 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 69
22445: ST_TO_ADDR
// if not tmp then
22446: LD_VAR 0 2
22450: NOT
22451: IFFALSE 22455
// exit ;
22453: GO 22484
// for i in tmp do
22455: LD_ADDR_VAR 0 1
22459: PUSH
22460: LD_VAR 0 2
22464: PUSH
22465: FOR_IN
22466: IFFALSE 22482
// SetLives ( i , 600 ) ;
22468: LD_VAR 0 1
22472: PPUSH
22473: LD_INT 600
22475: PPUSH
22476: CALL_OW 234
22480: GO 22465
22482: POP
22483: POP
// end ;
22484: PPOPN 2
22486: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22487: LD_INT 0
22489: PPUSH
// case cmd of 301 :
22490: LD_VAR 0 1
22494: PUSH
22495: LD_INT 301
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22535
22503: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22504: LD_VAR 0 6
22508: PPUSH
22509: LD_VAR 0 7
22513: PPUSH
22514: LD_VAR 0 8
22518: PPUSH
22519: LD_VAR 0 4
22523: PPUSH
22524: LD_VAR 0 5
22528: PPUSH
22529: CALL 23744 0 5
22533: GO 22656
22535: LD_INT 302
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22580
22543: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22544: LD_VAR 0 6
22548: PPUSH
22549: LD_VAR 0 7
22553: PPUSH
22554: LD_VAR 0 8
22558: PPUSH
22559: LD_VAR 0 9
22563: PPUSH
22564: LD_VAR 0 4
22568: PPUSH
22569: LD_VAR 0 5
22573: PPUSH
22574: CALL 23835 0 6
22578: GO 22656
22580: LD_INT 303
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22625
22588: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22589: LD_VAR 0 6
22593: PPUSH
22594: LD_VAR 0 7
22598: PPUSH
22599: LD_VAR 0 8
22603: PPUSH
22604: LD_VAR 0 9
22608: PPUSH
22609: LD_VAR 0 4
22613: PPUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: CALL 22661 0 6
22623: GO 22656
22625: LD_INT 304
22627: DOUBLE
22628: EQUAL
22629: IFTRUE 22633
22631: GO 22655
22633: POP
// hHackTeleport ( unit , x , y ) ; end ;
22634: LD_VAR 0 2
22638: PPUSH
22639: LD_VAR 0 4
22643: PPUSH
22644: LD_VAR 0 5
22648: PPUSH
22649: CALL 24428 0 3
22653: GO 22656
22655: POP
// end ;
22656: LD_VAR 0 12
22660: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22665: LD_VAR 0 1
22669: PUSH
22670: LD_INT 1
22672: LESS
22673: PUSH
22674: LD_VAR 0 1
22678: PUSH
22679: LD_INT 3
22681: GREATER
22682: OR
22683: PUSH
22684: LD_VAR 0 5
22688: PPUSH
22689: LD_VAR 0 6
22693: PPUSH
22694: CALL_OW 428
22698: OR
22699: IFFALSE 22703
// exit ;
22701: GO 23431
// uc_side := your_side ;
22703: LD_ADDR_OWVAR 20
22707: PUSH
22708: LD_OWVAR 2
22712: ST_TO_ADDR
// uc_nation := nation ;
22713: LD_ADDR_OWVAR 21
22717: PUSH
22718: LD_VAR 0 1
22722: ST_TO_ADDR
// bc_level = 1 ;
22723: LD_ADDR_OWVAR 43
22727: PUSH
22728: LD_INT 1
22730: ST_TO_ADDR
// case btype of 1 :
22731: LD_VAR 0 2
22735: PUSH
22736: LD_INT 1
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22755
22744: POP
// bc_type := b_depot ; 2 :
22745: LD_ADDR_OWVAR 42
22749: PUSH
22750: LD_INT 0
22752: ST_TO_ADDR
22753: GO 23375
22755: LD_INT 2
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22774
22763: POP
// bc_type := b_warehouse ; 3 :
22764: LD_ADDR_OWVAR 42
22768: PUSH
22769: LD_INT 1
22771: ST_TO_ADDR
22772: GO 23375
22774: LD_INT 3
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 22793
22782: POP
// bc_type := b_lab ; 4 .. 9 :
22783: LD_ADDR_OWVAR 42
22787: PUSH
22788: LD_INT 6
22790: ST_TO_ADDR
22791: GO 23375
22793: LD_INT 4
22795: DOUBLE
22796: GREATEREQUAL
22797: IFFALSE 22805
22799: LD_INT 9
22801: DOUBLE
22802: LESSEQUAL
22803: IFTRUE 22807
22805: GO 22867
22807: POP
// begin bc_type := b_lab_half ;
22808: LD_ADDR_OWVAR 42
22812: PUSH
22813: LD_INT 7
22815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22816: LD_ADDR_OWVAR 44
22820: PUSH
22821: LD_INT 10
22823: PUSH
22824: LD_INT 11
22826: PUSH
22827: LD_INT 12
22829: PUSH
22830: LD_INT 15
22832: PUSH
22833: LD_INT 14
22835: PUSH
22836: LD_INT 13
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PUSH
22847: LD_VAR 0 2
22851: PUSH
22852: LD_INT 3
22854: MINUS
22855: ARRAY
22856: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22857: LD_ADDR_OWVAR 45
22861: PUSH
22862: LD_INT 9
22864: ST_TO_ADDR
// end ; 10 .. 13 :
22865: GO 23375
22867: LD_INT 10
22869: DOUBLE
22870: GREATEREQUAL
22871: IFFALSE 22879
22873: LD_INT 13
22875: DOUBLE
22876: LESSEQUAL
22877: IFTRUE 22881
22879: GO 22958
22881: POP
// begin bc_type := b_lab_full ;
22882: LD_ADDR_OWVAR 42
22886: PUSH
22887: LD_INT 8
22889: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22890: LD_ADDR_OWVAR 44
22894: PUSH
22895: LD_INT 10
22897: PUSH
22898: LD_INT 12
22900: PUSH
22901: LD_INT 14
22903: PUSH
22904: LD_INT 13
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: LD_VAR 0 2
22917: PUSH
22918: LD_INT 9
22920: MINUS
22921: ARRAY
22922: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22923: LD_ADDR_OWVAR 45
22927: PUSH
22928: LD_INT 11
22930: PUSH
22931: LD_INT 15
22933: PUSH
22934: LD_INT 12
22936: PUSH
22937: LD_INT 15
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: LD_VAR 0 2
22950: PUSH
22951: LD_INT 9
22953: MINUS
22954: ARRAY
22955: ST_TO_ADDR
// end ; 14 :
22956: GO 23375
22958: LD_INT 14
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 22977
22966: POP
// bc_type := b_workshop ; 15 :
22967: LD_ADDR_OWVAR 42
22971: PUSH
22972: LD_INT 2
22974: ST_TO_ADDR
22975: GO 23375
22977: LD_INT 15
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 22996
22985: POP
// bc_type := b_factory ; 16 :
22986: LD_ADDR_OWVAR 42
22990: PUSH
22991: LD_INT 3
22993: ST_TO_ADDR
22994: GO 23375
22996: LD_INT 16
22998: DOUBLE
22999: EQUAL
23000: IFTRUE 23004
23002: GO 23015
23004: POP
// bc_type := b_ext_gun ; 17 :
23005: LD_ADDR_OWVAR 42
23009: PUSH
23010: LD_INT 17
23012: ST_TO_ADDR
23013: GO 23375
23015: LD_INT 17
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23051
23023: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23024: LD_ADDR_OWVAR 42
23028: PUSH
23029: LD_INT 19
23031: PUSH
23032: LD_INT 23
23034: PUSH
23035: LD_INT 19
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_VAR 0 1
23047: ARRAY
23048: ST_TO_ADDR
23049: GO 23375
23051: LD_INT 18
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23070
23059: POP
// bc_type := b_ext_radar ; 19 :
23060: LD_ADDR_OWVAR 42
23064: PUSH
23065: LD_INT 20
23067: ST_TO_ADDR
23068: GO 23375
23070: LD_INT 19
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23089
23078: POP
// bc_type := b_ext_radio ; 20 :
23079: LD_ADDR_OWVAR 42
23083: PUSH
23084: LD_INT 22
23086: ST_TO_ADDR
23087: GO 23375
23089: LD_INT 20
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23108
23097: POP
// bc_type := b_ext_siberium ; 21 :
23098: LD_ADDR_OWVAR 42
23102: PUSH
23103: LD_INT 21
23105: ST_TO_ADDR
23106: GO 23375
23108: LD_INT 21
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23127
23116: POP
// bc_type := b_ext_computer ; 22 :
23117: LD_ADDR_OWVAR 42
23121: PUSH
23122: LD_INT 24
23124: ST_TO_ADDR
23125: GO 23375
23127: LD_INT 22
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23146
23135: POP
// bc_type := b_ext_track ; 23 :
23136: LD_ADDR_OWVAR 42
23140: PUSH
23141: LD_INT 16
23143: ST_TO_ADDR
23144: GO 23375
23146: LD_INT 23
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23165
23154: POP
// bc_type := b_ext_laser ; 24 :
23155: LD_ADDR_OWVAR 42
23159: PUSH
23160: LD_INT 25
23162: ST_TO_ADDR
23163: GO 23375
23165: LD_INT 24
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23184
23173: POP
// bc_type := b_control_tower ; 25 :
23174: LD_ADDR_OWVAR 42
23178: PUSH
23179: LD_INT 36
23181: ST_TO_ADDR
23182: GO 23375
23184: LD_INT 25
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23203
23192: POP
// bc_type := b_breastwork ; 26 :
23193: LD_ADDR_OWVAR 42
23197: PUSH
23198: LD_INT 31
23200: ST_TO_ADDR
23201: GO 23375
23203: LD_INT 26
23205: DOUBLE
23206: EQUAL
23207: IFTRUE 23211
23209: GO 23222
23211: POP
// bc_type := b_bunker ; 27 :
23212: LD_ADDR_OWVAR 42
23216: PUSH
23217: LD_INT 32
23219: ST_TO_ADDR
23220: GO 23375
23222: LD_INT 27
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23241
23230: POP
// bc_type := b_turret ; 28 :
23231: LD_ADDR_OWVAR 42
23235: PUSH
23236: LD_INT 33
23238: ST_TO_ADDR
23239: GO 23375
23241: LD_INT 28
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23260
23249: POP
// bc_type := b_armoury ; 29 :
23250: LD_ADDR_OWVAR 42
23254: PUSH
23255: LD_INT 4
23257: ST_TO_ADDR
23258: GO 23375
23260: LD_INT 29
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23279
23268: POP
// bc_type := b_barracks ; 30 :
23269: LD_ADDR_OWVAR 42
23273: PUSH
23274: LD_INT 5
23276: ST_TO_ADDR
23277: GO 23375
23279: LD_INT 30
23281: DOUBLE
23282: EQUAL
23283: IFTRUE 23287
23285: GO 23298
23287: POP
// bc_type := b_solar_power ; 31 :
23288: LD_ADDR_OWVAR 42
23292: PUSH
23293: LD_INT 27
23295: ST_TO_ADDR
23296: GO 23375
23298: LD_INT 31
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23317
23306: POP
// bc_type := b_oil_power ; 32 :
23307: LD_ADDR_OWVAR 42
23311: PUSH
23312: LD_INT 26
23314: ST_TO_ADDR
23315: GO 23375
23317: LD_INT 32
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23336
23325: POP
// bc_type := b_siberite_power ; 33 :
23326: LD_ADDR_OWVAR 42
23330: PUSH
23331: LD_INT 28
23333: ST_TO_ADDR
23334: GO 23375
23336: LD_INT 33
23338: DOUBLE
23339: EQUAL
23340: IFTRUE 23344
23342: GO 23355
23344: POP
// bc_type := b_oil_mine ; 34 :
23345: LD_ADDR_OWVAR 42
23349: PUSH
23350: LD_INT 29
23352: ST_TO_ADDR
23353: GO 23375
23355: LD_INT 34
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23374
23363: POP
// bc_type := b_siberite_mine ; end ;
23364: LD_ADDR_OWVAR 42
23368: PUSH
23369: LD_INT 30
23371: ST_TO_ADDR
23372: GO 23375
23374: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23375: LD_ADDR_VAR 0 8
23379: PUSH
23380: LD_VAR 0 5
23384: PPUSH
23385: LD_VAR 0 6
23389: PPUSH
23390: LD_VAR 0 3
23394: PPUSH
23395: CALL_OW 47
23399: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23400: LD_OWVAR 42
23404: PUSH
23405: LD_INT 32
23407: PUSH
23408: LD_INT 33
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: IN
23415: IFFALSE 23431
// PlaceWeaponTurret ( b , weapon ) ;
23417: LD_VAR 0 8
23421: PPUSH
23422: LD_VAR 0 4
23426: PPUSH
23427: CALL_OW 431
// end ;
23431: LD_VAR 0 7
23435: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23436: LD_INT 0
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23442: LD_ADDR_VAR 0 4
23446: PUSH
23447: LD_INT 22
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 30
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 30
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PPUSH
23491: CALL_OW 69
23495: ST_TO_ADDR
// if not tmp then
23496: LD_VAR 0 4
23500: NOT
23501: IFFALSE 23505
// exit ;
23503: GO 23564
// for i in tmp do
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: LD_VAR 0 4
23514: PUSH
23515: FOR_IN
23516: IFFALSE 23562
// for j = 1 to 3 do
23518: LD_ADDR_VAR 0 3
23522: PUSH
23523: DOUBLE
23524: LD_INT 1
23526: DEC
23527: ST_TO_ADDR
23528: LD_INT 3
23530: PUSH
23531: FOR_TO
23532: IFFALSE 23558
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23534: LD_VAR 0 2
23538: PPUSH
23539: CALL_OW 274
23543: PPUSH
23544: LD_VAR 0 3
23548: PPUSH
23549: LD_INT 99999
23551: PPUSH
23552: CALL_OW 277
23556: GO 23531
23558: POP
23559: POP
23560: GO 23515
23562: POP
23563: POP
// end ;
23564: LD_VAR 0 1
23568: RET
// export function hHackSetLevel10 ; var i , j ; begin
23569: LD_INT 0
23571: PPUSH
23572: PPUSH
23573: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23574: LD_ADDR_VAR 0 2
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: PUSH
23594: FOR_IN
23595: IFFALSE 23647
// if IsSelected ( i ) then
23597: LD_VAR 0 2
23601: PPUSH
23602: CALL_OW 306
23606: IFFALSE 23645
// begin for j := 1 to 4 do
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: DOUBLE
23614: LD_INT 1
23616: DEC
23617: ST_TO_ADDR
23618: LD_INT 4
23620: PUSH
23621: FOR_TO
23622: IFFALSE 23643
// SetSkill ( i , j , 10 ) ;
23624: LD_VAR 0 2
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: LD_INT 10
23636: PPUSH
23637: CALL_OW 237
23641: GO 23621
23643: POP
23644: POP
// end ;
23645: GO 23594
23647: POP
23648: POP
// end ;
23649: LD_VAR 0 1
23653: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
23658: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23659: LD_ADDR_VAR 0 2
23663: PUSH
23664: LD_INT 22
23666: PUSH
23667: LD_OWVAR 2
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 21
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 69
23694: PUSH
23695: FOR_IN
23696: IFFALSE 23737
// begin for j := 1 to 4 do
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: DOUBLE
23704: LD_INT 1
23706: DEC
23707: ST_TO_ADDR
23708: LD_INT 4
23710: PUSH
23711: FOR_TO
23712: IFFALSE 23733
// SetSkill ( i , j , 10 ) ;
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 10
23726: PPUSH
23727: CALL_OW 237
23731: GO 23711
23733: POP
23734: POP
// end ;
23735: GO 23695
23737: POP
23738: POP
// end ;
23739: LD_VAR 0 1
23743: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23744: LD_INT 0
23746: PPUSH
// uc_side := your_side ;
23747: LD_ADDR_OWVAR 20
23751: PUSH
23752: LD_OWVAR 2
23756: ST_TO_ADDR
// uc_nation := nation ;
23757: LD_ADDR_OWVAR 21
23761: PUSH
23762: LD_VAR 0 1
23766: ST_TO_ADDR
// InitHc ;
23767: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23771: LD_INT 0
23773: PPUSH
23774: LD_VAR 0 2
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23788: LD_VAR 0 4
23792: PPUSH
23793: LD_VAR 0 5
23797: PPUSH
23798: CALL_OW 428
23802: PUSH
23803: LD_INT 0
23805: EQUAL
23806: IFFALSE 23830
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23808: CALL_OW 44
23812: PPUSH
23813: LD_VAR 0 4
23817: PPUSH
23818: LD_VAR 0 5
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: CALL_OW 48
// end ;
23830: LD_VAR 0 6
23834: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23835: LD_INT 0
23837: PPUSH
23838: PPUSH
// uc_side := your_side ;
23839: LD_ADDR_OWVAR 20
23843: PUSH
23844: LD_OWVAR 2
23848: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23849: LD_VAR 0 1
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: LD_INT 3
23862: PUSH
23863: LD_INT 4
23865: PUSH
23866: LD_INT 5
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: IN
23876: IFFALSE 23888
// uc_nation := nation_american else
23878: LD_ADDR_OWVAR 21
23882: PUSH
23883: LD_INT 1
23885: ST_TO_ADDR
23886: GO 23931
// if chassis in [ 11 , 12 , 13 , 14 ] then
23888: LD_VAR 0 1
23892: PUSH
23893: LD_INT 11
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: LD_INT 13
23901: PUSH
23902: LD_INT 14
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: IN
23911: IFFALSE 23923
// uc_nation := nation_arabian else
23913: LD_ADDR_OWVAR 21
23917: PUSH
23918: LD_INT 2
23920: ST_TO_ADDR
23921: GO 23931
// uc_nation := nation_russian ;
23923: LD_ADDR_OWVAR 21
23927: PUSH
23928: LD_INT 3
23930: ST_TO_ADDR
// vc_chassis := chassis ;
23931: LD_ADDR_OWVAR 37
23935: PUSH
23936: LD_VAR 0 1
23940: ST_TO_ADDR
// vc_engine := engine ;
23941: LD_ADDR_OWVAR 39
23945: PUSH
23946: LD_VAR 0 2
23950: ST_TO_ADDR
// vc_control := control ;
23951: LD_ADDR_OWVAR 38
23955: PUSH
23956: LD_VAR 0 3
23960: ST_TO_ADDR
// vc_weapon := weapon ;
23961: LD_ADDR_OWVAR 40
23965: PUSH
23966: LD_VAR 0 4
23970: ST_TO_ADDR
// un := CreateVehicle ;
23971: LD_ADDR_VAR 0 8
23975: PUSH
23976: CALL_OW 45
23980: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23981: LD_VAR 0 8
23985: PPUSH
23986: LD_INT 0
23988: PPUSH
23989: LD_INT 5
23991: PPUSH
23992: CALL_OW 12
23996: PPUSH
23997: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24001: LD_VAR 0 8
24005: PPUSH
24006: LD_VAR 0 5
24010: PPUSH
24011: LD_VAR 0 6
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: CALL_OW 48
// end ;
24023: LD_VAR 0 7
24027: RET
// export hInvincible ; every 1 do
24028: GO 24030
24030: DISABLE
// hInvincible := [ ] ;
24031: LD_ADDR_EXP 84
24035: PUSH
24036: EMPTY
24037: ST_TO_ADDR
24038: END
// every 10 do var i ;
24039: GO 24041
24041: DISABLE
24042: LD_INT 0
24044: PPUSH
// begin enable ;
24045: ENABLE
// if not hInvincible then
24046: LD_EXP 84
24050: NOT
24051: IFFALSE 24055
// exit ;
24053: GO 24099
// for i in hInvincible do
24055: LD_ADDR_VAR 0 1
24059: PUSH
24060: LD_EXP 84
24064: PUSH
24065: FOR_IN
24066: IFFALSE 24097
// if GetLives ( i ) < 1000 then
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 256
24077: PUSH
24078: LD_INT 1000
24080: LESS
24081: IFFALSE 24095
// SetLives ( i , 1000 ) ;
24083: LD_VAR 0 1
24087: PPUSH
24088: LD_INT 1000
24090: PPUSH
24091: CALL_OW 234
24095: GO 24065
24097: POP
24098: POP
// end ;
24099: PPOPN 1
24101: END
// export function hHackInvincible ; var i ; begin
24102: LD_INT 0
24104: PPUSH
24105: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24106: LD_ADDR_VAR 0 2
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 69
24143: PUSH
24144: FOR_IN
24145: IFFALSE 24206
// if IsSelected ( i ) then
24147: LD_VAR 0 2
24151: PPUSH
24152: CALL_OW 306
24156: IFFALSE 24204
// begin if i in hInvincible then
24158: LD_VAR 0 2
24162: PUSH
24163: LD_EXP 84
24167: IN
24168: IFFALSE 24188
// hInvincible := hInvincible diff i else
24170: LD_ADDR_EXP 84
24174: PUSH
24175: LD_EXP 84
24179: PUSH
24180: LD_VAR 0 2
24184: DIFF
24185: ST_TO_ADDR
24186: GO 24204
// hInvincible := hInvincible union i ;
24188: LD_ADDR_EXP 84
24192: PUSH
24193: LD_EXP 84
24197: PUSH
24198: LD_VAR 0 2
24202: UNION
24203: ST_TO_ADDR
// end ;
24204: GO 24144
24206: POP
24207: POP
// end ;
24208: LD_VAR 0 1
24212: RET
// export function hHackInvisible ; var i , j ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
24217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_INT 21
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PPUSH
24233: CALL_OW 69
24237: PUSH
24238: FOR_IN
24239: IFFALSE 24263
// if IsSelected ( i ) then
24241: LD_VAR 0 2
24245: PPUSH
24246: CALL_OW 306
24250: IFFALSE 24261
// ComForceInvisible ( i ) ;
24252: LD_VAR 0 2
24256: PPUSH
24257: CALL_OW 496
24261: GO 24238
24263: POP
24264: POP
// end ;
24265: LD_VAR 0 1
24269: RET
// export function hHackChangeYourSide ; begin
24270: LD_INT 0
24272: PPUSH
// if your_side = 8 then
24273: LD_OWVAR 2
24277: PUSH
24278: LD_INT 8
24280: EQUAL
24281: IFFALSE 24293
// your_side := 0 else
24283: LD_ADDR_OWVAR 2
24287: PUSH
24288: LD_INT 0
24290: ST_TO_ADDR
24291: GO 24307
// your_side := your_side + 1 ;
24293: LD_ADDR_OWVAR 2
24297: PUSH
24298: LD_OWVAR 2
24302: PUSH
24303: LD_INT 1
24305: PLUS
24306: ST_TO_ADDR
// end ;
24307: LD_VAR 0 1
24311: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
24316: PPUSH
// for i in all_units do
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_OWVAR 3
24326: PUSH
24327: FOR_IN
24328: IFFALSE 24406
// if IsSelected ( i ) then
24330: LD_VAR 0 2
24334: PPUSH
24335: CALL_OW 306
24339: IFFALSE 24404
// begin j := GetSide ( i ) ;
24341: LD_ADDR_VAR 0 3
24345: PUSH
24346: LD_VAR 0 2
24350: PPUSH
24351: CALL_OW 255
24355: ST_TO_ADDR
// if j = 8 then
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 8
24363: EQUAL
24364: IFFALSE 24376
// j := 0 else
24366: LD_ADDR_VAR 0 3
24370: PUSH
24371: LD_INT 0
24373: ST_TO_ADDR
24374: GO 24390
// j := j + 1 ;
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 1
24388: PLUS
24389: ST_TO_ADDR
// SetSide ( i , j ) ;
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: CALL_OW 235
// end ;
24404: GO 24327
24406: POP
24407: POP
// end ;
24408: LD_VAR 0 1
24412: RET
// export function hHackFog ; begin
24413: LD_INT 0
24415: PPUSH
// FogOff ( true ) ;
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 344
// end ;
24423: LD_VAR 0 1
24427: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24428: LD_INT 0
24430: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24431: LD_VAR 0 1
24435: PPUSH
24436: LD_VAR 0 2
24440: PPUSH
24441: LD_VAR 0 3
24445: PPUSH
24446: LD_INT 1
24448: PPUSH
24449: LD_INT 1
24451: PPUSH
24452: CALL_OW 483
// CenterOnXY ( x , y ) ;
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_VAR 0 3
24465: PPUSH
24466: CALL_OW 84
// end ;
24470: LD_VAR 0 4
24474: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24479: LD_VAR 0 1
24483: NOT
24484: PUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: CALL_OW 488
24499: NOT
24500: OR
24501: PUSH
24502: LD_VAR 0 1
24506: PPUSH
24507: CALL_OW 266
24511: PUSH
24512: LD_INT 3
24514: NONEQUAL
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 247
24525: PUSH
24526: LD_INT 1
24528: EQUAL
24529: NOT
24530: AND
24531: OR
24532: IFFALSE 24536
// exit ;
24534: GO 24685
// if GetType ( factory ) = unit_human then
24536: LD_VAR 0 1
24540: PPUSH
24541: CALL_OW 247
24545: PUSH
24546: LD_INT 1
24548: EQUAL
24549: IFFALSE 24566
// factory := IsInUnit ( factory ) ;
24551: LD_ADDR_VAR 0 1
24555: PUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL_OW 310
24565: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24566: LD_VAR 0 1
24570: PPUSH
24571: CALL_OW 266
24575: PUSH
24576: LD_INT 3
24578: NONEQUAL
24579: IFFALSE 24583
// exit ;
24581: GO 24685
// if HexInfo ( x , y ) = factory then
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 3
24592: PPUSH
24593: CALL_OW 428
24597: PUSH
24598: LD_VAR 0 1
24602: EQUAL
24603: IFFALSE 24630
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24605: LD_ADDR_EXP 85
24609: PUSH
24610: LD_EXP 85
24614: PPUSH
24615: LD_VAR 0 1
24619: PPUSH
24620: LD_INT 0
24622: PPUSH
24623: CALL_OW 1
24627: ST_TO_ADDR
24628: GO 24681
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24630: LD_ADDR_EXP 85
24634: PUSH
24635: LD_EXP 85
24639: PPUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 255
24654: PUSH
24655: LD_VAR 0 1
24659: PUSH
24660: LD_VAR 0 2
24664: PUSH
24665: LD_VAR 0 3
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL_OW 1
24680: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24681: CALL 24690 0 0
// end ;
24685: LD_VAR 0 4
24689: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
24694: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24695: LD_STRING resetFactoryWaypoint();
24697: PPUSH
24698: CALL_OW 559
// if factoryWaypoints then
24702: LD_EXP 85
24706: IFFALSE 24832
// begin list := PrepareArray ( factoryWaypoints ) ;
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_EXP 85
24717: PPUSH
24718: CALL 71974 0 1
24722: ST_TO_ADDR
// for i := 1 to list do
24723: LD_ADDR_VAR 0 2
24727: PUSH
24728: DOUBLE
24729: LD_INT 1
24731: DEC
24732: ST_TO_ADDR
24733: LD_VAR 0 3
24737: PUSH
24738: FOR_TO
24739: IFFALSE 24830
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24741: LD_STRING setFactoryWaypointXY(
24743: PUSH
24744: LD_VAR 0 3
24748: PUSH
24749: LD_VAR 0 2
24753: ARRAY
24754: PUSH
24755: LD_INT 1
24757: ARRAY
24758: STR
24759: PUSH
24760: LD_STRING ,
24762: STR
24763: PUSH
24764: LD_VAR 0 3
24768: PUSH
24769: LD_VAR 0 2
24773: ARRAY
24774: PUSH
24775: LD_INT 2
24777: ARRAY
24778: STR
24779: PUSH
24780: LD_STRING ,
24782: STR
24783: PUSH
24784: LD_VAR 0 3
24788: PUSH
24789: LD_VAR 0 2
24793: ARRAY
24794: PUSH
24795: LD_INT 3
24797: ARRAY
24798: STR
24799: PUSH
24800: LD_STRING ,
24802: STR
24803: PUSH
24804: LD_VAR 0 3
24808: PUSH
24809: LD_VAR 0 2
24813: ARRAY
24814: PUSH
24815: LD_INT 4
24817: ARRAY
24818: STR
24819: PUSH
24820: LD_STRING )
24822: STR
24823: PPUSH
24824: CALL_OW 559
24828: GO 24738
24830: POP
24831: POP
// end ; end ;
24832: LD_VAR 0 1
24836: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24837: LD_INT 0
24839: PPUSH
// if HexInfo ( x , y ) = warehouse then
24840: LD_VAR 0 2
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: CALL_OW 428
24854: PUSH
24855: LD_VAR 0 1
24859: EQUAL
24860: IFFALSE 24887
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24862: LD_ADDR_EXP 86
24866: PUSH
24867: LD_EXP 86
24871: PPUSH
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_INT 0
24879: PPUSH
24880: CALL_OW 1
24884: ST_TO_ADDR
24885: GO 24938
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24887: LD_ADDR_EXP 86
24891: PUSH
24892: LD_EXP 86
24896: PPUSH
24897: LD_VAR 0 1
24901: PPUSH
24902: LD_VAR 0 1
24906: PPUSH
24907: CALL_OW 255
24911: PUSH
24912: LD_VAR 0 1
24916: PUSH
24917: LD_VAR 0 2
24921: PUSH
24922: LD_VAR 0 3
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 1
24937: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24938: CALL 24947 0 0
// end ;
24942: LD_VAR 0 4
24946: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24947: LD_INT 0
24949: PPUSH
24950: PPUSH
24951: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24952: LD_STRING resetWarehouseGatheringPoints();
24954: PPUSH
24955: CALL_OW 559
// if warehouseGatheringPoints then
24959: LD_EXP 86
24963: IFFALSE 25089
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_EXP 86
24974: PPUSH
24975: CALL 71974 0 1
24979: ST_TO_ADDR
// for i := 1 to list do
24980: LD_ADDR_VAR 0 2
24984: PUSH
24985: DOUBLE
24986: LD_INT 1
24988: DEC
24989: ST_TO_ADDR
24990: LD_VAR 0 3
24994: PUSH
24995: FOR_TO
24996: IFFALSE 25087
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24998: LD_STRING setWarehouseGatheringPointXY(
25000: PUSH
25001: LD_VAR 0 3
25005: PUSH
25006: LD_VAR 0 2
25010: ARRAY
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: STR
25016: PUSH
25017: LD_STRING ,
25019: STR
25020: PUSH
25021: LD_VAR 0 3
25025: PUSH
25026: LD_VAR 0 2
25030: ARRAY
25031: PUSH
25032: LD_INT 2
25034: ARRAY
25035: STR
25036: PUSH
25037: LD_STRING ,
25039: STR
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: LD_VAR 0 2
25050: ARRAY
25051: PUSH
25052: LD_INT 3
25054: ARRAY
25055: STR
25056: PUSH
25057: LD_STRING ,
25059: STR
25060: PUSH
25061: LD_VAR 0 3
25065: PUSH
25066: LD_VAR 0 2
25070: ARRAY
25071: PUSH
25072: LD_INT 4
25074: ARRAY
25075: STR
25076: PUSH
25077: LD_STRING )
25079: STR
25080: PPUSH
25081: CALL_OW 559
25085: GO 24995
25087: POP
25088: POP
// end ; end ;
25089: LD_VAR 0 1
25093: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25094: LD_EXP 86
25098: IFFALSE 25783
25100: GO 25102
25102: DISABLE
25103: LD_INT 0
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
// begin enable ;
25114: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_EXP 86
25124: PPUSH
25125: CALL 71974 0 1
25129: ST_TO_ADDR
// if not list then
25130: LD_VAR 0 3
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25783
// for i := 1 to list do
25139: LD_ADDR_VAR 0 1
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 3
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25781
// begin depot := list [ i ] [ 2 ] ;
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: LD_VAR 0 3
25166: PUSH
25167: LD_VAR 0 1
25171: ARRAY
25172: PUSH
25173: LD_INT 2
25175: ARRAY
25176: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25177: LD_ADDR_VAR 0 5
25181: PUSH
25182: LD_VAR 0 3
25186: PUSH
25187: LD_VAR 0 1
25191: ARRAY
25192: PUSH
25193: LD_INT 1
25195: ARRAY
25196: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25197: LD_VAR 0 8
25201: PPUSH
25202: CALL_OW 301
25206: PUSH
25207: LD_VAR 0 5
25211: PUSH
25212: LD_VAR 0 8
25216: PPUSH
25217: CALL_OW 255
25221: NONEQUAL
25222: OR
25223: IFFALSE 25252
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25225: LD_ADDR_EXP 86
25229: PUSH
25230: LD_EXP 86
25234: PPUSH
25235: LD_VAR 0 8
25239: PPUSH
25240: LD_INT 0
25242: PPUSH
25243: CALL_OW 1
25247: ST_TO_ADDR
// exit ;
25248: POP
25249: POP
25250: GO 25783
// end ; x := list [ i ] [ 3 ] ;
25252: LD_ADDR_VAR 0 6
25256: PUSH
25257: LD_VAR 0 3
25261: PUSH
25262: LD_VAR 0 1
25266: ARRAY
25267: PUSH
25268: LD_INT 3
25270: ARRAY
25271: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25272: LD_ADDR_VAR 0 7
25276: PUSH
25277: LD_VAR 0 3
25281: PUSH
25282: LD_VAR 0 1
25286: ARRAY
25287: PUSH
25288: LD_INT 4
25290: ARRAY
25291: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25292: LD_ADDR_VAR 0 9
25296: PUSH
25297: LD_VAR 0 6
25301: PPUSH
25302: LD_VAR 0 7
25306: PPUSH
25307: LD_INT 16
25309: PPUSH
25310: CALL 70562 0 3
25314: ST_TO_ADDR
// if not cratesNearbyPoint then
25315: LD_VAR 0 9
25319: NOT
25320: IFFALSE 25326
// exit ;
25322: POP
25323: POP
25324: GO 25783
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25326: LD_ADDR_VAR 0 4
25330: PUSH
25331: LD_INT 22
25333: PUSH
25334: LD_VAR 0 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: LD_INT 60
25348: PUSH
25349: EMPTY
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 91
25358: PUSH
25359: LD_VAR 0 8
25363: PUSH
25364: LD_INT 6
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 25
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 25
25387: PUSH
25388: LD_INT 16
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: PPUSH
25406: CALL_OW 69
25410: PUSH
25411: LD_VAR 0 8
25415: PPUSH
25416: CALL_OW 313
25420: PPUSH
25421: LD_INT 3
25423: PUSH
25424: LD_INT 60
25426: PUSH
25427: EMPTY
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 25
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 25
25449: PUSH
25450: LD_INT 16
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PPUSH
25466: CALL_OW 72
25470: UNION
25471: ST_TO_ADDR
// if tmp then
25472: LD_VAR 0 4
25476: IFFALSE 25556
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25478: LD_ADDR_VAR 0 4
25482: PUSH
25483: LD_VAR 0 4
25487: PPUSH
25488: LD_INT 3
25490: PPUSH
25491: CALL 68531 0 2
25495: ST_TO_ADDR
// for j in tmp do
25496: LD_ADDR_VAR 0 2
25500: PUSH
25501: LD_VAR 0 4
25505: PUSH
25506: FOR_IN
25507: IFFALSE 25550
// begin if IsInUnit ( j ) then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 310
25518: IFFALSE 25529
// ComExit ( j ) ;
25520: LD_VAR 0 2
25524: PPUSH
25525: CALL 68614 0 1
// AddComCollect ( j , x , y ) ;
25529: LD_VAR 0 2
25533: PPUSH
25534: LD_VAR 0 6
25538: PPUSH
25539: LD_VAR 0 7
25543: PPUSH
25544: CALL_OW 177
// end ;
25548: GO 25506
25550: POP
25551: POP
// exit ;
25552: POP
25553: POP
25554: GO 25783
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25556: LD_ADDR_VAR 0 4
25560: PUSH
25561: LD_INT 22
25563: PUSH
25564: LD_VAR 0 5
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 91
25575: PUSH
25576: LD_VAR 0 8
25580: PUSH
25581: LD_INT 8
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 34
25594: PUSH
25595: LD_INT 12
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 34
25604: PUSH
25605: LD_INT 51
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 34
25614: PUSH
25615: LD_INT 32
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 34
25624: PUSH
25625: LD_INT 89
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: PPUSH
25644: CALL_OW 69
25648: ST_TO_ADDR
// if tmp then
25649: LD_VAR 0 4
25653: IFFALSE 25779
// begin for j in tmp do
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_VAR 0 4
25664: PUSH
25665: FOR_IN
25666: IFFALSE 25777
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 262
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 261
25691: PUSH
25692: LD_INT 20
25694: GREATER
25695: OR
25696: PUSH
25697: LD_VAR 0 2
25701: PPUSH
25702: CALL_OW 314
25706: NOT
25707: AND
25708: PUSH
25709: LD_VAR 0 2
25713: PPUSH
25714: CALL_OW 263
25718: PUSH
25719: LD_INT 1
25721: NONEQUAL
25722: PUSH
25723: LD_VAR 0 2
25727: PPUSH
25728: CALL_OW 311
25732: OR
25733: AND
25734: IFFALSE 25775
// begin ComCollect ( j , x , y ) ;
25736: LD_VAR 0 2
25740: PPUSH
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_VAR 0 7
25750: PPUSH
25751: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25755: LD_VAR 0 2
25759: PPUSH
25760: LD_VAR 0 8
25764: PPUSH
25765: CALL_OW 172
// exit ;
25769: POP
25770: POP
25771: POP
25772: POP
25773: GO 25783
// end ;
25775: GO 25665
25777: POP
25778: POP
// end ; end ;
25779: GO 25154
25781: POP
25782: POP
// end ; end_of_file end_of_file
25783: PPOPN 9
25785: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
25790: PPUSH
25791: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 264
25801: PUSH
25802: LD_INT 91
25804: EQUAL
25805: IFFALSE 25877
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25807: LD_INT 68
25809: PPUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 255
25819: PPUSH
25820: CALL_OW 321
25824: PUSH
25825: LD_INT 2
25827: EQUAL
25828: IFFALSE 25840
// eff := 70 else
25830: LD_ADDR_VAR 0 4
25834: PUSH
25835: LD_INT 70
25837: ST_TO_ADDR
25838: GO 25848
// eff := 30 ;
25840: LD_ADDR_VAR 0 4
25844: PUSH
25845: LD_INT 30
25847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL_OW 250
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 251
25867: PPUSH
25868: LD_VAR 0 4
25872: PPUSH
25873: CALL_OW 495
// end ; end ;
25877: LD_VAR 0 2
25881: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25882: LD_INT 0
25884: PPUSH
// end ;
25885: LD_VAR 0 4
25889: RET
// export function SOS_Command ( cmd ) ; begin
25890: LD_INT 0
25892: PPUSH
// end ;
25893: LD_VAR 0 2
25897: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25898: LD_INT 0
25900: PPUSH
// end ;
25901: LD_VAR 0 6
25905: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25906: LD_INT 0
25908: PPUSH
25909: PPUSH
// if not vehicle or not factory then
25910: LD_VAR 0 1
25914: NOT
25915: PUSH
25916: LD_VAR 0 2
25920: NOT
25921: OR
25922: IFFALSE 25926
// exit ;
25924: GO 26157
// if factoryWaypoints >= factory then
25926: LD_EXP 85
25930: PUSH
25931: LD_VAR 0 2
25935: GREATEREQUAL
25936: IFFALSE 26157
// if factoryWaypoints [ factory ] then
25938: LD_EXP 85
25942: PUSH
25943: LD_VAR 0 2
25947: ARRAY
25948: IFFALSE 26157
// begin if GetControl ( vehicle ) = control_manual then
25950: LD_VAR 0 1
25954: PPUSH
25955: CALL_OW 263
25959: PUSH
25960: LD_INT 1
25962: EQUAL
25963: IFFALSE 26044
// begin driver := IsDrivenBy ( vehicle ) ;
25965: LD_ADDR_VAR 0 4
25969: PUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 311
25979: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25980: LD_VAR 0 4
25984: PPUSH
25985: LD_EXP 85
25989: PUSH
25990: LD_VAR 0 2
25994: ARRAY
25995: PUSH
25996: LD_INT 3
25998: ARRAY
25999: PPUSH
26000: LD_EXP 85
26004: PUSH
26005: LD_VAR 0 2
26009: ARRAY
26010: PUSH
26011: LD_INT 4
26013: ARRAY
26014: PPUSH
26015: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26019: LD_VAR 0 4
26023: PPUSH
26024: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26028: LD_VAR 0 4
26032: PPUSH
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 180
// end else
26042: GO 26157
// if GetControl ( vehicle ) = control_remote then
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 263
26053: PUSH
26054: LD_INT 2
26056: EQUAL
26057: IFFALSE 26118
// begin wait ( 0 0$2 ) ;
26059: LD_INT 70
26061: PPUSH
26062: CALL_OW 67
// if Connect ( vehicle ) then
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL 38822 0 1
26075: IFFALSE 26116
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26077: LD_VAR 0 1
26081: PPUSH
26082: LD_EXP 85
26086: PUSH
26087: LD_VAR 0 2
26091: ARRAY
26092: PUSH
26093: LD_INT 3
26095: ARRAY
26096: PPUSH
26097: LD_EXP 85
26101: PUSH
26102: LD_VAR 0 2
26106: ARRAY
26107: PUSH
26108: LD_INT 4
26110: ARRAY
26111: PPUSH
26112: CALL_OW 171
// end else
26116: GO 26157
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_EXP 85
26127: PUSH
26128: LD_VAR 0 2
26132: ARRAY
26133: PUSH
26134: LD_INT 3
26136: ARRAY
26137: PPUSH
26138: LD_EXP 85
26142: PUSH
26143: LD_VAR 0 2
26147: ARRAY
26148: PUSH
26149: LD_INT 4
26151: ARRAY
26152: PPUSH
26153: CALL_OW 171
// end ; end ;
26157: LD_VAR 0 3
26161: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26162: LD_INT 0
26164: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26165: LD_VAR 0 1
26169: PUSH
26170: LD_INT 250
26172: EQUAL
26173: PUSH
26174: LD_VAR 0 2
26178: PPUSH
26179: CALL_OW 264
26183: PUSH
26184: LD_INT 81
26186: EQUAL
26187: AND
26188: IFFALSE 26209
// MinerPlaceMine ( unit , x , y ) ;
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_VAR 0 4
26199: PPUSH
26200: LD_VAR 0 5
26204: PPUSH
26205: CALL 29033 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26209: LD_VAR 0 1
26213: PUSH
26214: LD_INT 251
26216: EQUAL
26217: PUSH
26218: LD_VAR 0 2
26222: PPUSH
26223: CALL_OW 264
26227: PUSH
26228: LD_INT 81
26230: EQUAL
26231: AND
26232: IFFALSE 26253
// MinerDetonateMine ( unit , x , y ) ;
26234: LD_VAR 0 2
26238: PPUSH
26239: LD_VAR 0 4
26243: PPUSH
26244: LD_VAR 0 5
26248: PPUSH
26249: CALL 29308 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26253: LD_VAR 0 1
26257: PUSH
26258: LD_INT 252
26260: EQUAL
26261: PUSH
26262: LD_VAR 0 2
26266: PPUSH
26267: CALL_OW 264
26271: PUSH
26272: LD_INT 81
26274: EQUAL
26275: AND
26276: IFFALSE 26297
// MinerCreateMinefield ( unit , x , y ) ;
26278: LD_VAR 0 2
26282: PPUSH
26283: LD_VAR 0 4
26287: PPUSH
26288: LD_VAR 0 5
26292: PPUSH
26293: CALL 29725 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26297: LD_VAR 0 1
26301: PUSH
26302: LD_INT 253
26304: EQUAL
26305: PUSH
26306: LD_VAR 0 2
26310: PPUSH
26311: CALL_OW 257
26315: PUSH
26316: LD_INT 5
26318: EQUAL
26319: AND
26320: IFFALSE 26341
// ComBinocular ( unit , x , y ) ;
26322: LD_VAR 0 2
26326: PPUSH
26327: LD_VAR 0 4
26331: PPUSH
26332: LD_VAR 0 5
26336: PPUSH
26337: CALL 30094 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26341: LD_VAR 0 1
26345: PUSH
26346: LD_INT 254
26348: EQUAL
26349: PUSH
26350: LD_VAR 0 2
26354: PPUSH
26355: CALL_OW 264
26359: PUSH
26360: LD_INT 99
26362: EQUAL
26363: AND
26364: PUSH
26365: LD_VAR 0 3
26369: PPUSH
26370: CALL_OW 263
26374: PUSH
26375: LD_INT 3
26377: EQUAL
26378: AND
26379: IFFALSE 26395
// HackDestroyVehicle ( unit , selectedUnit ) ;
26381: LD_VAR 0 2
26385: PPUSH
26386: LD_VAR 0 3
26390: PPUSH
26391: CALL 28397 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26395: LD_VAR 0 1
26399: PUSH
26400: LD_INT 255
26402: EQUAL
26403: PUSH
26404: LD_VAR 0 2
26408: PPUSH
26409: CALL_OW 264
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: LD_INT 53
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: IN
26424: AND
26425: PUSH
26426: LD_VAR 0 4
26430: PPUSH
26431: LD_VAR 0 5
26435: PPUSH
26436: CALL_OW 488
26440: AND
26441: IFFALSE 26465
// CutTreeXYR ( unit , x , y , 12 ) ;
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 4
26452: PPUSH
26453: LD_VAR 0 5
26457: PPUSH
26458: LD_INT 12
26460: PPUSH
26461: CALL 26560 0 4
// if cmd = 256 then
26465: LD_VAR 0 1
26469: PUSH
26470: LD_INT 256
26472: EQUAL
26473: IFFALSE 26494
// SetFactoryWaypoint ( unit , x , y ) ;
26475: LD_VAR 0 2
26479: PPUSH
26480: LD_VAR 0 4
26484: PPUSH
26485: LD_VAR 0 5
26489: PPUSH
26490: CALL 24475 0 3
// if cmd = 257 then
26494: LD_VAR 0 1
26498: PUSH
26499: LD_INT 257
26501: EQUAL
26502: IFFALSE 26523
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 4
26513: PPUSH
26514: LD_VAR 0 5
26518: PPUSH
26519: CALL 24837 0 3
// if cmd = 258 then
26523: LD_VAR 0 1
26527: PUSH
26528: LD_INT 258
26530: EQUAL
26531: IFFALSE 26555
// BurnTreeXYR ( unit , x , y , 8 ) ;
26533: LD_VAR 0 2
26537: PPUSH
26538: LD_VAR 0 4
26542: PPUSH
26543: LD_VAR 0 5
26547: PPUSH
26548: LD_INT 8
26550: PPUSH
26551: CALL 26954 0 4
// end ;
26555: LD_VAR 0 6
26559: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26560: LD_INT 0
26562: PPUSH
26563: PPUSH
26564: PPUSH
26565: PPUSH
26566: PPUSH
26567: PPUSH
26568: PPUSH
26569: PPUSH
26570: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL_OW 302
26580: NOT
26581: PUSH
26582: LD_VAR 0 2
26586: PPUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 488
26596: NOT
26597: OR
26598: PUSH
26599: LD_VAR 0 4
26603: NOT
26604: OR
26605: IFFALSE 26609
// exit ;
26607: GO 26949
// list := [ ] ;
26609: LD_ADDR_VAR 0 13
26613: PUSH
26614: EMPTY
26615: ST_TO_ADDR
// if x - r < 0 then
26616: LD_VAR 0 2
26620: PUSH
26621: LD_VAR 0 4
26625: MINUS
26626: PUSH
26627: LD_INT 0
26629: LESS
26630: IFFALSE 26642
// min_x := 0 else
26632: LD_ADDR_VAR 0 7
26636: PUSH
26637: LD_INT 0
26639: ST_TO_ADDR
26640: GO 26658
// min_x := x - r ;
26642: LD_ADDR_VAR 0 7
26646: PUSH
26647: LD_VAR 0 2
26651: PUSH
26652: LD_VAR 0 4
26656: MINUS
26657: ST_TO_ADDR
// if y - r < 0 then
26658: LD_VAR 0 3
26662: PUSH
26663: LD_VAR 0 4
26667: MINUS
26668: PUSH
26669: LD_INT 0
26671: LESS
26672: IFFALSE 26684
// min_y := 0 else
26674: LD_ADDR_VAR 0 8
26678: PUSH
26679: LD_INT 0
26681: ST_TO_ADDR
26682: GO 26700
// min_y := y - r ;
26684: LD_ADDR_VAR 0 8
26688: PUSH
26689: LD_VAR 0 3
26693: PUSH
26694: LD_VAR 0 4
26698: MINUS
26699: ST_TO_ADDR
// max_x := x + r ;
26700: LD_ADDR_VAR 0 9
26704: PUSH
26705: LD_VAR 0 2
26709: PUSH
26710: LD_VAR 0 4
26714: PLUS
26715: ST_TO_ADDR
// max_y := y + r ;
26716: LD_ADDR_VAR 0 10
26720: PUSH
26721: LD_VAR 0 3
26725: PUSH
26726: LD_VAR 0 4
26730: PLUS
26731: ST_TO_ADDR
// for _x = min_x to max_x do
26732: LD_ADDR_VAR 0 11
26736: PUSH
26737: DOUBLE
26738: LD_VAR 0 7
26742: DEC
26743: ST_TO_ADDR
26744: LD_VAR 0 9
26748: PUSH
26749: FOR_TO
26750: IFFALSE 26867
// for _y = min_y to max_y do
26752: LD_ADDR_VAR 0 12
26756: PUSH
26757: DOUBLE
26758: LD_VAR 0 8
26762: DEC
26763: ST_TO_ADDR
26764: LD_VAR 0 10
26768: PUSH
26769: FOR_TO
26770: IFFALSE 26863
// begin if not ValidHex ( _x , _y ) then
26772: LD_VAR 0 11
26776: PPUSH
26777: LD_VAR 0 12
26781: PPUSH
26782: CALL_OW 488
26786: NOT
26787: IFFALSE 26791
// continue ;
26789: GO 26769
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26791: LD_VAR 0 11
26795: PPUSH
26796: LD_VAR 0 12
26800: PPUSH
26801: CALL_OW 351
26805: PUSH
26806: LD_VAR 0 11
26810: PPUSH
26811: LD_VAR 0 12
26815: PPUSH
26816: CALL_OW 554
26820: AND
26821: IFFALSE 26861
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26823: LD_ADDR_VAR 0 13
26827: PUSH
26828: LD_VAR 0 13
26832: PPUSH
26833: LD_VAR 0 13
26837: PUSH
26838: LD_INT 1
26840: PLUS
26841: PPUSH
26842: LD_VAR 0 11
26846: PUSH
26847: LD_VAR 0 12
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PPUSH
26856: CALL_OW 2
26860: ST_TO_ADDR
// end ;
26861: GO 26769
26863: POP
26864: POP
26865: GO 26749
26867: POP
26868: POP
// if not list then
26869: LD_VAR 0 13
26873: NOT
26874: IFFALSE 26878
// exit ;
26876: GO 26949
// for i in list do
26878: LD_ADDR_VAR 0 6
26882: PUSH
26883: LD_VAR 0 13
26887: PUSH
26888: FOR_IN
26889: IFFALSE 26947
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26891: LD_VAR 0 1
26895: PPUSH
26896: LD_STRING M
26898: PUSH
26899: LD_VAR 0 6
26903: PUSH
26904: LD_INT 1
26906: ARRAY
26907: PUSH
26908: LD_VAR 0 6
26912: PUSH
26913: LD_INT 2
26915: ARRAY
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: PPUSH
26941: CALL_OW 447
26945: GO 26888
26947: POP
26948: POP
// end ;
26949: LD_VAR 0 5
26953: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26954: LD_INT 0
26956: PPUSH
26957: PPUSH
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26965: LD_VAR 0 1
26969: PPUSH
26970: CALL_OW 302
26974: NOT
26975: PUSH
26976: LD_VAR 0 2
26980: PPUSH
26981: LD_VAR 0 3
26985: PPUSH
26986: CALL_OW 488
26990: NOT
26991: OR
26992: PUSH
26993: LD_VAR 0 4
26997: NOT
26998: OR
26999: IFFALSE 27003
// exit ;
27001: GO 27351
// list := [ ] ;
27003: LD_ADDR_VAR 0 13
27007: PUSH
27008: EMPTY
27009: ST_TO_ADDR
// if x - r < 0 then
27010: LD_VAR 0 2
27014: PUSH
27015: LD_VAR 0 4
27019: MINUS
27020: PUSH
27021: LD_INT 0
27023: LESS
27024: IFFALSE 27036
// min_x := 0 else
27026: LD_ADDR_VAR 0 7
27030: PUSH
27031: LD_INT 0
27033: ST_TO_ADDR
27034: GO 27052
// min_x := x - r ;
27036: LD_ADDR_VAR 0 7
27040: PUSH
27041: LD_VAR 0 2
27045: PUSH
27046: LD_VAR 0 4
27050: MINUS
27051: ST_TO_ADDR
// if y - r < 0 then
27052: LD_VAR 0 3
27056: PUSH
27057: LD_VAR 0 4
27061: MINUS
27062: PUSH
27063: LD_INT 0
27065: LESS
27066: IFFALSE 27078
// min_y := 0 else
27068: LD_ADDR_VAR 0 8
27072: PUSH
27073: LD_INT 0
27075: ST_TO_ADDR
27076: GO 27094
// min_y := y - r ;
27078: LD_ADDR_VAR 0 8
27082: PUSH
27083: LD_VAR 0 3
27087: PUSH
27088: LD_VAR 0 4
27092: MINUS
27093: ST_TO_ADDR
// max_x := x + r ;
27094: LD_ADDR_VAR 0 9
27098: PUSH
27099: LD_VAR 0 2
27103: PUSH
27104: LD_VAR 0 4
27108: PLUS
27109: ST_TO_ADDR
// max_y := y + r ;
27110: LD_ADDR_VAR 0 10
27114: PUSH
27115: LD_VAR 0 3
27119: PUSH
27120: LD_VAR 0 4
27124: PLUS
27125: ST_TO_ADDR
// for _x = min_x to max_x do
27126: LD_ADDR_VAR 0 11
27130: PUSH
27131: DOUBLE
27132: LD_VAR 0 7
27136: DEC
27137: ST_TO_ADDR
27138: LD_VAR 0 9
27142: PUSH
27143: FOR_TO
27144: IFFALSE 27261
// for _y = min_y to max_y do
27146: LD_ADDR_VAR 0 12
27150: PUSH
27151: DOUBLE
27152: LD_VAR 0 8
27156: DEC
27157: ST_TO_ADDR
27158: LD_VAR 0 10
27162: PUSH
27163: FOR_TO
27164: IFFALSE 27257
// begin if not ValidHex ( _x , _y ) then
27166: LD_VAR 0 11
27170: PPUSH
27171: LD_VAR 0 12
27175: PPUSH
27176: CALL_OW 488
27180: NOT
27181: IFFALSE 27185
// continue ;
27183: GO 27163
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27185: LD_VAR 0 11
27189: PPUSH
27190: LD_VAR 0 12
27194: PPUSH
27195: CALL_OW 351
27199: PUSH
27200: LD_VAR 0 11
27204: PPUSH
27205: LD_VAR 0 12
27209: PPUSH
27210: CALL_OW 554
27214: AND
27215: IFFALSE 27255
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27217: LD_ADDR_VAR 0 13
27221: PUSH
27222: LD_VAR 0 13
27226: PPUSH
27227: LD_VAR 0 13
27231: PUSH
27232: LD_INT 1
27234: PLUS
27235: PPUSH
27236: LD_VAR 0 11
27240: PUSH
27241: LD_VAR 0 12
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PPUSH
27250: CALL_OW 2
27254: ST_TO_ADDR
// end ;
27255: GO 27163
27257: POP
27258: POP
27259: GO 27143
27261: POP
27262: POP
// if not list then
27263: LD_VAR 0 13
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27351
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27272: LD_ADDR_VAR 0 13
27276: PUSH
27277: LD_VAR 0 1
27281: PPUSH
27282: LD_VAR 0 13
27286: PPUSH
27287: LD_INT 1
27289: PPUSH
27290: LD_INT 1
27292: PPUSH
27293: CALL 35964 0 4
27297: ST_TO_ADDR
// ComStop ( flame ) ;
27298: LD_VAR 0 1
27302: PPUSH
27303: CALL_OW 141
// for i in list do
27307: LD_ADDR_VAR 0 6
27311: PUSH
27312: LD_VAR 0 13
27316: PUSH
27317: FOR_IN
27318: IFFALSE 27349
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27320: LD_VAR 0 1
27324: PPUSH
27325: LD_VAR 0 6
27329: PUSH
27330: LD_INT 1
27332: ARRAY
27333: PPUSH
27334: LD_VAR 0 6
27338: PUSH
27339: LD_INT 2
27341: ARRAY
27342: PPUSH
27343: CALL_OW 176
27347: GO 27317
27349: POP
27350: POP
// end ;
27351: LD_VAR 0 5
27355: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27356: LD_EXP 88
27360: NOT
27361: IFFALSE 27411
27363: GO 27365
27365: DISABLE
// begin initHack := true ;
27366: LD_ADDR_EXP 88
27370: PUSH
27371: LD_INT 1
27373: ST_TO_ADDR
// hackTanks := [ ] ;
27374: LD_ADDR_EXP 89
27378: PUSH
27379: EMPTY
27380: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27381: LD_ADDR_EXP 90
27385: PUSH
27386: EMPTY
27387: ST_TO_ADDR
// hackLimit := 3 ;
27388: LD_ADDR_EXP 91
27392: PUSH
27393: LD_INT 3
27395: ST_TO_ADDR
// hackDist := 12 ;
27396: LD_ADDR_EXP 92
27400: PUSH
27401: LD_INT 12
27403: ST_TO_ADDR
// hackCounter := [ ] ;
27404: LD_ADDR_EXP 93
27408: PUSH
27409: EMPTY
27410: ST_TO_ADDR
// end ;
27411: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27412: LD_EXP 88
27416: PUSH
27417: LD_INT 34
27419: PUSH
27420: LD_INT 99
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PPUSH
27427: CALL_OW 69
27431: AND
27432: IFFALSE 27685
27434: GO 27436
27436: DISABLE
27437: LD_INT 0
27439: PPUSH
27440: PPUSH
// begin enable ;
27441: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27442: LD_ADDR_VAR 0 1
27446: PUSH
27447: LD_INT 34
27449: PUSH
27450: LD_INT 99
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: PUSH
27462: FOR_IN
27463: IFFALSE 27683
// begin if not i in hackTanks then
27465: LD_VAR 0 1
27469: PUSH
27470: LD_EXP 89
27474: IN
27475: NOT
27476: IFFALSE 27559
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27478: LD_ADDR_EXP 89
27482: PUSH
27483: LD_EXP 89
27487: PPUSH
27488: LD_EXP 89
27492: PUSH
27493: LD_INT 1
27495: PLUS
27496: PPUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL_OW 1
27506: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27507: LD_ADDR_EXP 90
27511: PUSH
27512: LD_EXP 90
27516: PPUSH
27517: LD_EXP 90
27521: PUSH
27522: LD_INT 1
27524: PLUS
27525: PPUSH
27526: EMPTY
27527: PPUSH
27528: CALL_OW 1
27532: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27533: LD_ADDR_EXP 93
27537: PUSH
27538: LD_EXP 93
27542: PPUSH
27543: LD_EXP 93
27547: PUSH
27548: LD_INT 1
27550: PLUS
27551: PPUSH
27552: EMPTY
27553: PPUSH
27554: CALL_OW 1
27558: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL_OW 302
27568: NOT
27569: IFFALSE 27582
// begin HackUnlinkAll ( i ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: CALL 27688 0 1
// continue ;
27580: GO 27462
// end ; HackCheckCapturedStatus ( i ) ;
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL 28131 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27591: LD_ADDR_VAR 0 2
27595: PUSH
27596: LD_INT 81
27598: PUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL_OW 255
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 33
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 91
27625: PUSH
27626: LD_VAR 0 1
27630: PUSH
27631: LD_EXP 92
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 50
27643: PUSH
27644: EMPTY
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: PPUSH
27653: CALL_OW 69
27657: ST_TO_ADDR
// if not tmp then
27658: LD_VAR 0 2
27662: NOT
27663: IFFALSE 27667
// continue ;
27665: GO 27462
// HackLink ( i , tmp ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: LD_VAR 0 2
27676: PPUSH
27677: CALL 27824 0 2
// end ;
27681: GO 27462
27683: POP
27684: POP
// end ;
27685: PPOPN 2
27687: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27688: LD_INT 0
27690: PPUSH
27691: PPUSH
27692: PPUSH
// if not hack in hackTanks then
27693: LD_VAR 0 1
27697: PUSH
27698: LD_EXP 89
27702: IN
27703: NOT
27704: IFFALSE 27708
// exit ;
27706: GO 27819
// index := GetElementIndex ( hackTanks , hack ) ;
27708: LD_ADDR_VAR 0 4
27712: PUSH
27713: LD_EXP 89
27717: PPUSH
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL 35261 0 2
27727: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27728: LD_EXP 90
27732: PUSH
27733: LD_VAR 0 4
27737: ARRAY
27738: IFFALSE 27819
// begin for i in hackTanksCaptured [ index ] do
27740: LD_ADDR_VAR 0 3
27744: PUSH
27745: LD_EXP 90
27749: PUSH
27750: LD_VAR 0 4
27754: ARRAY
27755: PUSH
27756: FOR_IN
27757: IFFALSE 27783
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27759: LD_VAR 0 3
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: PPUSH
27768: LD_VAR 0 3
27772: PUSH
27773: LD_INT 2
27775: ARRAY
27776: PPUSH
27777: CALL_OW 235
27781: GO 27756
27783: POP
27784: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27785: LD_ADDR_EXP 90
27789: PUSH
27790: LD_EXP 90
27794: PPUSH
27795: LD_VAR 0 4
27799: PPUSH
27800: EMPTY
27801: PPUSH
27802: CALL_OW 1
27806: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27807: LD_VAR 0 1
27811: PPUSH
27812: LD_INT 0
27814: PPUSH
27815: CALL_OW 505
// end ; end ;
27819: LD_VAR 0 2
27823: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27824: LD_INT 0
27826: PPUSH
27827: PPUSH
27828: PPUSH
// if not hack in hackTanks or not vehicles then
27829: LD_VAR 0 1
27833: PUSH
27834: LD_EXP 89
27838: IN
27839: NOT
27840: PUSH
27841: LD_VAR 0 2
27845: NOT
27846: OR
27847: IFFALSE 27851
// exit ;
27849: GO 28126
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27851: LD_ADDR_VAR 0 2
27855: PUSH
27856: LD_VAR 0 1
27860: PPUSH
27861: LD_VAR 0 2
27865: PPUSH
27866: LD_INT 1
27868: PPUSH
27869: LD_INT 1
27871: PPUSH
27872: CALL 35911 0 4
27876: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27877: LD_ADDR_VAR 0 5
27881: PUSH
27882: LD_EXP 89
27886: PPUSH
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL 35261 0 2
27896: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27897: LD_EXP 90
27901: PUSH
27902: LD_VAR 0 5
27906: ARRAY
27907: PUSH
27908: LD_EXP 91
27912: LESS
27913: IFFALSE 28102
// begin for i := 1 to vehicles do
27915: LD_ADDR_VAR 0 4
27919: PUSH
27920: DOUBLE
27921: LD_INT 1
27923: DEC
27924: ST_TO_ADDR
27925: LD_VAR 0 2
27929: PUSH
27930: FOR_TO
27931: IFFALSE 28100
// begin if hackTanksCaptured [ index ] = hackLimit then
27933: LD_EXP 90
27937: PUSH
27938: LD_VAR 0 5
27942: ARRAY
27943: PUSH
27944: LD_EXP 91
27948: EQUAL
27949: IFFALSE 27953
// break ;
27951: GO 28100
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27953: LD_ADDR_EXP 93
27957: PUSH
27958: LD_EXP 93
27962: PPUSH
27963: LD_VAR 0 5
27967: PPUSH
27968: LD_EXP 93
27972: PUSH
27973: LD_VAR 0 5
27977: ARRAY
27978: PUSH
27979: LD_INT 1
27981: PLUS
27982: PPUSH
27983: CALL_OW 1
27987: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27988: LD_ADDR_EXP 90
27992: PUSH
27993: LD_EXP 90
27997: PPUSH
27998: LD_VAR 0 5
28002: PUSH
28003: LD_EXP 90
28007: PUSH
28008: LD_VAR 0 5
28012: ARRAY
28013: PUSH
28014: LD_INT 1
28016: PLUS
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PPUSH
28022: LD_VAR 0 2
28026: PUSH
28027: LD_VAR 0 4
28031: ARRAY
28032: PUSH
28033: LD_VAR 0 2
28037: PUSH
28038: LD_VAR 0 4
28042: ARRAY
28043: PPUSH
28044: CALL_OW 255
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL 35476 0 3
28057: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28058: LD_VAR 0 2
28062: PUSH
28063: LD_VAR 0 4
28067: ARRAY
28068: PPUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: CALL_OW 255
28078: PPUSH
28079: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28083: LD_VAR 0 2
28087: PUSH
28088: LD_VAR 0 4
28092: ARRAY
28093: PPUSH
28094: CALL_OW 141
// end ;
28098: GO 27930
28100: POP
28101: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28102: LD_VAR 0 1
28106: PPUSH
28107: LD_EXP 90
28111: PUSH
28112: LD_VAR 0 5
28116: ARRAY
28117: PUSH
28118: LD_INT 0
28120: PLUS
28121: PPUSH
28122: CALL_OW 505
// end ;
28126: LD_VAR 0 3
28130: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28131: LD_INT 0
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
// if not hack in hackTanks then
28137: LD_VAR 0 1
28141: PUSH
28142: LD_EXP 89
28146: IN
28147: NOT
28148: IFFALSE 28152
// exit ;
28150: GO 28392
// index := GetElementIndex ( hackTanks , hack ) ;
28152: LD_ADDR_VAR 0 4
28156: PUSH
28157: LD_EXP 89
28161: PPUSH
28162: LD_VAR 0 1
28166: PPUSH
28167: CALL 35261 0 2
28171: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: DOUBLE
28178: LD_EXP 90
28182: PUSH
28183: LD_VAR 0 4
28187: ARRAY
28188: INC
28189: ST_TO_ADDR
28190: LD_INT 1
28192: PUSH
28193: FOR_DOWNTO
28194: IFFALSE 28366
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28196: LD_ADDR_VAR 0 5
28200: PUSH
28201: LD_EXP 90
28205: PUSH
28206: LD_VAR 0 4
28210: ARRAY
28211: PUSH
28212: LD_VAR 0 3
28216: ARRAY
28217: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28218: LD_VAR 0 5
28222: PUSH
28223: LD_INT 1
28225: ARRAY
28226: PPUSH
28227: CALL_OW 302
28231: NOT
28232: PUSH
28233: LD_VAR 0 5
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: CALL_OW 255
28246: PUSH
28247: LD_VAR 0 1
28251: PPUSH
28252: CALL_OW 255
28256: NONEQUAL
28257: OR
28258: IFFALSE 28364
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28260: LD_VAR 0 5
28264: PUSH
28265: LD_INT 1
28267: ARRAY
28268: PPUSH
28269: CALL_OW 305
28273: PUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_INT 1
28281: ARRAY
28282: PPUSH
28283: CALL_OW 255
28287: PUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 255
28297: EQUAL
28298: AND
28299: IFFALSE 28323
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28301: LD_VAR 0 5
28305: PUSH
28306: LD_INT 1
28308: ARRAY
28309: PPUSH
28310: LD_VAR 0 5
28314: PUSH
28315: LD_INT 2
28317: ARRAY
28318: PPUSH
28319: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28323: LD_ADDR_EXP 90
28327: PUSH
28328: LD_EXP 90
28332: PPUSH
28333: LD_VAR 0 4
28337: PPUSH
28338: LD_EXP 90
28342: PUSH
28343: LD_VAR 0 4
28347: ARRAY
28348: PPUSH
28349: LD_VAR 0 3
28353: PPUSH
28354: CALL_OW 3
28358: PPUSH
28359: CALL_OW 1
28363: ST_TO_ADDR
// end ; end ;
28364: GO 28193
28366: POP
28367: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28368: LD_VAR 0 1
28372: PPUSH
28373: LD_EXP 90
28377: PUSH
28378: LD_VAR 0 4
28382: ARRAY
28383: PUSH
28384: LD_INT 0
28386: PLUS
28387: PPUSH
28388: CALL_OW 505
// end ;
28392: LD_VAR 0 2
28396: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28397: LD_INT 0
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
// if not hack in hackTanks then
28403: LD_VAR 0 1
28407: PUSH
28408: LD_EXP 89
28412: IN
28413: NOT
28414: IFFALSE 28418
// exit ;
28416: GO 28503
// index := GetElementIndex ( hackTanks , hack ) ;
28418: LD_ADDR_VAR 0 5
28422: PUSH
28423: LD_EXP 89
28427: PPUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL 35261 0 2
28437: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28438: LD_ADDR_VAR 0 4
28442: PUSH
28443: DOUBLE
28444: LD_INT 1
28446: DEC
28447: ST_TO_ADDR
28448: LD_EXP 90
28452: PUSH
28453: LD_VAR 0 5
28457: ARRAY
28458: PUSH
28459: FOR_TO
28460: IFFALSE 28501
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28462: LD_EXP 90
28466: PUSH
28467: LD_VAR 0 5
28471: ARRAY
28472: PUSH
28473: LD_VAR 0 4
28477: ARRAY
28478: PUSH
28479: LD_INT 1
28481: ARRAY
28482: PUSH
28483: LD_VAR 0 2
28487: EQUAL
28488: IFFALSE 28499
// KillUnit ( vehicle ) ;
28490: LD_VAR 0 2
28494: PPUSH
28495: CALL_OW 66
28499: GO 28459
28501: POP
28502: POP
// end ;
28503: LD_VAR 0 3
28507: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28508: LD_EXP 94
28512: NOT
28513: IFFALSE 28548
28515: GO 28517
28517: DISABLE
// begin initMiner := true ;
28518: LD_ADDR_EXP 94
28522: PUSH
28523: LD_INT 1
28525: ST_TO_ADDR
// minersList := [ ] ;
28526: LD_ADDR_EXP 95
28530: PUSH
28531: EMPTY
28532: ST_TO_ADDR
// minerMinesList := [ ] ;
28533: LD_ADDR_EXP 96
28537: PUSH
28538: EMPTY
28539: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28540: LD_ADDR_EXP 97
28544: PUSH
28545: LD_INT 5
28547: ST_TO_ADDR
// end ;
28548: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28549: LD_EXP 94
28553: PUSH
28554: LD_INT 34
28556: PUSH
28557: LD_INT 81
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PPUSH
28564: CALL_OW 69
28568: AND
28569: IFFALSE 29030
28571: GO 28573
28573: DISABLE
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
28578: PPUSH
28579: PPUSH
// begin enable ;
28580: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28581: LD_ADDR_VAR 0 1
28585: PUSH
28586: LD_INT 34
28588: PUSH
28589: LD_INT 81
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 69
28600: PUSH
28601: FOR_IN
28602: IFFALSE 28674
// begin if not i in minersList then
28604: LD_VAR 0 1
28608: PUSH
28609: LD_EXP 95
28613: IN
28614: NOT
28615: IFFALSE 28672
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28617: LD_ADDR_EXP 95
28621: PUSH
28622: LD_EXP 95
28626: PPUSH
28627: LD_EXP 95
28631: PUSH
28632: LD_INT 1
28634: PLUS
28635: PPUSH
28636: LD_VAR 0 1
28640: PPUSH
28641: CALL_OW 1
28645: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28646: LD_ADDR_EXP 96
28650: PUSH
28651: LD_EXP 96
28655: PPUSH
28656: LD_EXP 96
28660: PUSH
28661: LD_INT 1
28663: PLUS
28664: PPUSH
28665: EMPTY
28666: PPUSH
28667: CALL_OW 1
28671: ST_TO_ADDR
// end end ;
28672: GO 28601
28674: POP
28675: POP
// for i := minerMinesList downto 1 do
28676: LD_ADDR_VAR 0 1
28680: PUSH
28681: DOUBLE
28682: LD_EXP 96
28686: INC
28687: ST_TO_ADDR
28688: LD_INT 1
28690: PUSH
28691: FOR_DOWNTO
28692: IFFALSE 29028
// begin if IsLive ( minersList [ i ] ) then
28694: LD_EXP 95
28698: PUSH
28699: LD_VAR 0 1
28703: ARRAY
28704: PPUSH
28705: CALL_OW 300
28709: IFFALSE 28737
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28711: LD_EXP 95
28715: PUSH
28716: LD_VAR 0 1
28720: ARRAY
28721: PPUSH
28722: LD_EXP 96
28726: PUSH
28727: LD_VAR 0 1
28731: ARRAY
28732: PPUSH
28733: CALL_OW 505
// if not minerMinesList [ i ] then
28737: LD_EXP 96
28741: PUSH
28742: LD_VAR 0 1
28746: ARRAY
28747: NOT
28748: IFFALSE 28752
// continue ;
28750: GO 28691
// for j := minerMinesList [ i ] downto 1 do
28752: LD_ADDR_VAR 0 2
28756: PUSH
28757: DOUBLE
28758: LD_EXP 96
28762: PUSH
28763: LD_VAR 0 1
28767: ARRAY
28768: INC
28769: ST_TO_ADDR
28770: LD_INT 1
28772: PUSH
28773: FOR_DOWNTO
28774: IFFALSE 29024
// begin side := GetSide ( minersList [ i ] ) ;
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_EXP 95
28785: PUSH
28786: LD_VAR 0 1
28790: ARRAY
28791: PPUSH
28792: CALL_OW 255
28796: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28797: LD_ADDR_VAR 0 4
28801: PUSH
28802: LD_EXP 96
28806: PUSH
28807: LD_VAR 0 1
28811: ARRAY
28812: PUSH
28813: LD_VAR 0 2
28817: ARRAY
28818: PUSH
28819: LD_INT 1
28821: ARRAY
28822: PPUSH
28823: LD_EXP 96
28827: PUSH
28828: LD_VAR 0 1
28832: ARRAY
28833: PUSH
28834: LD_VAR 0 2
28838: ARRAY
28839: PUSH
28840: LD_INT 2
28842: ARRAY
28843: PPUSH
28844: CALL_OW 428
28848: ST_TO_ADDR
// if not tmp then
28849: LD_VAR 0 4
28853: NOT
28854: IFFALSE 28858
// continue ;
28856: GO 28773
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28858: LD_VAR 0 4
28862: PUSH
28863: LD_INT 81
28865: PUSH
28866: LD_VAR 0 3
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PPUSH
28875: CALL_OW 69
28879: IN
28880: PUSH
28881: LD_EXP 96
28885: PUSH
28886: LD_VAR 0 1
28890: ARRAY
28891: PUSH
28892: LD_VAR 0 2
28896: ARRAY
28897: PUSH
28898: LD_INT 1
28900: ARRAY
28901: PPUSH
28902: LD_EXP 96
28906: PUSH
28907: LD_VAR 0 1
28911: ARRAY
28912: PUSH
28913: LD_VAR 0 2
28917: ARRAY
28918: PUSH
28919: LD_INT 2
28921: ARRAY
28922: PPUSH
28923: CALL_OW 458
28927: AND
28928: IFFALSE 29022
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28930: LD_EXP 96
28934: PUSH
28935: LD_VAR 0 1
28939: ARRAY
28940: PUSH
28941: LD_VAR 0 2
28945: ARRAY
28946: PUSH
28947: LD_INT 1
28949: ARRAY
28950: PPUSH
28951: LD_EXP 96
28955: PUSH
28956: LD_VAR 0 1
28960: ARRAY
28961: PUSH
28962: LD_VAR 0 2
28966: ARRAY
28967: PUSH
28968: LD_INT 2
28970: ARRAY
28971: PPUSH
28972: LD_VAR 0 3
28976: PPUSH
28977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28981: LD_ADDR_EXP 96
28985: PUSH
28986: LD_EXP 96
28990: PPUSH
28991: LD_VAR 0 1
28995: PPUSH
28996: LD_EXP 96
29000: PUSH
29001: LD_VAR 0 1
29005: ARRAY
29006: PPUSH
29007: LD_VAR 0 2
29011: PPUSH
29012: CALL_OW 3
29016: PPUSH
29017: CALL_OW 1
29021: ST_TO_ADDR
// end ; end ;
29022: GO 28773
29024: POP
29025: POP
// end ;
29026: GO 28691
29028: POP
29029: POP
// end ;
29030: PPOPN 4
29032: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29033: LD_INT 0
29035: PPUSH
29036: PPUSH
// result := false ;
29037: LD_ADDR_VAR 0 4
29041: PUSH
29042: LD_INT 0
29044: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29045: LD_VAR 0 1
29049: PPUSH
29050: CALL_OW 264
29054: PUSH
29055: LD_INT 81
29057: EQUAL
29058: NOT
29059: IFFALSE 29063
// exit ;
29061: GO 29303
// index := GetElementIndex ( minersList , unit ) ;
29063: LD_ADDR_VAR 0 5
29067: PUSH
29068: LD_EXP 95
29072: PPUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL 35261 0 2
29082: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29083: LD_EXP 96
29087: PUSH
29088: LD_VAR 0 5
29092: ARRAY
29093: PUSH
29094: LD_EXP 97
29098: GREATEREQUAL
29099: IFFALSE 29103
// exit ;
29101: GO 29303
// ComMoveXY ( unit , x , y ) ;
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: LD_VAR 0 3
29117: PPUSH
29118: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29122: LD_INT 35
29124: PPUSH
29125: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29129: LD_VAR 0 1
29133: PPUSH
29134: LD_VAR 0 2
29138: PPUSH
29139: LD_VAR 0 3
29143: PPUSH
29144: CALL 67013 0 3
29148: NOT
29149: PUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 314
29159: AND
29160: IFFALSE 29164
// exit ;
29162: GO 29303
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29164: LD_VAR 0 2
29168: PPUSH
29169: LD_VAR 0 3
29173: PPUSH
29174: CALL_OW 428
29178: PUSH
29179: LD_VAR 0 1
29183: EQUAL
29184: PUSH
29185: LD_VAR 0 1
29189: PPUSH
29190: CALL_OW 314
29194: NOT
29195: AND
29196: IFFALSE 29122
// PlaySoundXY ( x , y , PlantMine ) ;
29198: LD_VAR 0 2
29202: PPUSH
29203: LD_VAR 0 3
29207: PPUSH
29208: LD_STRING PlantMine
29210: PPUSH
29211: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29215: LD_VAR 0 2
29219: PPUSH
29220: LD_VAR 0 3
29224: PPUSH
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 255
29234: PPUSH
29235: LD_INT 0
29237: PPUSH
29238: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29242: LD_ADDR_EXP 96
29246: PUSH
29247: LD_EXP 96
29251: PPUSH
29252: LD_VAR 0 5
29256: PUSH
29257: LD_EXP 96
29261: PUSH
29262: LD_VAR 0 5
29266: ARRAY
29267: PUSH
29268: LD_INT 1
29270: PLUS
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PPUSH
29276: LD_VAR 0 2
29280: PUSH
29281: LD_VAR 0 3
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PPUSH
29290: CALL 35476 0 3
29294: ST_TO_ADDR
// result := true ;
29295: LD_ADDR_VAR 0 4
29299: PUSH
29300: LD_INT 1
29302: ST_TO_ADDR
// end ;
29303: LD_VAR 0 4
29307: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
29312: PPUSH
// if not unit in minersList then
29313: LD_VAR 0 1
29317: PUSH
29318: LD_EXP 95
29322: IN
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29720
// index := GetElementIndex ( minersList , unit ) ;
29328: LD_ADDR_VAR 0 6
29332: PUSH
29333: LD_EXP 95
29337: PPUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL 35261 0 2
29347: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29348: LD_ADDR_VAR 0 5
29352: PUSH
29353: DOUBLE
29354: LD_EXP 96
29358: PUSH
29359: LD_VAR 0 6
29363: ARRAY
29364: INC
29365: ST_TO_ADDR
29366: LD_INT 1
29368: PUSH
29369: FOR_DOWNTO
29370: IFFALSE 29531
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29372: LD_EXP 96
29376: PUSH
29377: LD_VAR 0 6
29381: ARRAY
29382: PUSH
29383: LD_VAR 0 5
29387: ARRAY
29388: PUSH
29389: LD_INT 1
29391: ARRAY
29392: PUSH
29393: LD_VAR 0 2
29397: EQUAL
29398: PUSH
29399: LD_EXP 96
29403: PUSH
29404: LD_VAR 0 6
29408: ARRAY
29409: PUSH
29410: LD_VAR 0 5
29414: ARRAY
29415: PUSH
29416: LD_INT 2
29418: ARRAY
29419: PUSH
29420: LD_VAR 0 3
29424: EQUAL
29425: AND
29426: IFFALSE 29529
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29428: LD_EXP 96
29432: PUSH
29433: LD_VAR 0 6
29437: ARRAY
29438: PUSH
29439: LD_VAR 0 5
29443: ARRAY
29444: PUSH
29445: LD_INT 1
29447: ARRAY
29448: PPUSH
29449: LD_EXP 96
29453: PUSH
29454: LD_VAR 0 6
29458: ARRAY
29459: PUSH
29460: LD_VAR 0 5
29464: ARRAY
29465: PUSH
29466: LD_INT 2
29468: ARRAY
29469: PPUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 255
29479: PPUSH
29480: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29484: LD_ADDR_EXP 96
29488: PUSH
29489: LD_EXP 96
29493: PPUSH
29494: LD_VAR 0 6
29498: PPUSH
29499: LD_EXP 96
29503: PUSH
29504: LD_VAR 0 6
29508: ARRAY
29509: PPUSH
29510: LD_VAR 0 5
29514: PPUSH
29515: CALL_OW 3
29519: PPUSH
29520: CALL_OW 1
29524: ST_TO_ADDR
// exit ;
29525: POP
29526: POP
29527: GO 29720
// end ; end ;
29529: GO 29369
29531: POP
29532: POP
// for i := minerMinesList [ index ] downto 1 do
29533: LD_ADDR_VAR 0 5
29537: PUSH
29538: DOUBLE
29539: LD_EXP 96
29543: PUSH
29544: LD_VAR 0 6
29548: ARRAY
29549: INC
29550: ST_TO_ADDR
29551: LD_INT 1
29553: PUSH
29554: FOR_DOWNTO
29555: IFFALSE 29718
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29557: LD_EXP 96
29561: PUSH
29562: LD_VAR 0 6
29566: ARRAY
29567: PUSH
29568: LD_VAR 0 5
29572: ARRAY
29573: PUSH
29574: LD_INT 1
29576: ARRAY
29577: PPUSH
29578: LD_EXP 96
29582: PUSH
29583: LD_VAR 0 6
29587: ARRAY
29588: PUSH
29589: LD_VAR 0 5
29593: ARRAY
29594: PUSH
29595: LD_INT 2
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 2
29603: PPUSH
29604: LD_VAR 0 3
29608: PPUSH
29609: CALL_OW 298
29613: PUSH
29614: LD_INT 6
29616: LESS
29617: IFFALSE 29716
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29619: LD_EXP 96
29623: PUSH
29624: LD_VAR 0 6
29628: ARRAY
29629: PUSH
29630: LD_VAR 0 5
29634: ARRAY
29635: PUSH
29636: LD_INT 1
29638: ARRAY
29639: PPUSH
29640: LD_EXP 96
29644: PUSH
29645: LD_VAR 0 6
29649: ARRAY
29650: PUSH
29651: LD_VAR 0 5
29655: ARRAY
29656: PUSH
29657: LD_INT 2
29659: ARRAY
29660: PPUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 255
29670: PPUSH
29671: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29675: LD_ADDR_EXP 96
29679: PUSH
29680: LD_EXP 96
29684: PPUSH
29685: LD_VAR 0 6
29689: PPUSH
29690: LD_EXP 96
29694: PUSH
29695: LD_VAR 0 6
29699: ARRAY
29700: PPUSH
29701: LD_VAR 0 5
29705: PPUSH
29706: CALL_OW 3
29710: PPUSH
29711: CALL_OW 1
29715: ST_TO_ADDR
// end ; end ;
29716: GO 29554
29718: POP
29719: POP
// end ;
29720: LD_VAR 0 4
29724: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29725: LD_INT 0
29727: PPUSH
29728: PPUSH
29729: PPUSH
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29736: LD_VAR 0 1
29740: PPUSH
29741: CALL_OW 264
29745: PUSH
29746: LD_INT 81
29748: EQUAL
29749: NOT
29750: PUSH
29751: LD_VAR 0 1
29755: PUSH
29756: LD_EXP 95
29760: IN
29761: NOT
29762: OR
29763: IFFALSE 29767
// exit ;
29765: GO 30089
// index := GetElementIndex ( minersList , unit ) ;
29767: LD_ADDR_VAR 0 6
29771: PUSH
29772: LD_EXP 95
29776: PPUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL 35261 0 2
29786: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29787: LD_ADDR_VAR 0 8
29791: PUSH
29792: LD_EXP 97
29796: PUSH
29797: LD_EXP 96
29801: PUSH
29802: LD_VAR 0 6
29806: ARRAY
29807: MINUS
29808: ST_TO_ADDR
// if not minesFreeAmount then
29809: LD_VAR 0 8
29813: NOT
29814: IFFALSE 29818
// exit ;
29816: GO 30089
// tmp := [ ] ;
29818: LD_ADDR_VAR 0 7
29822: PUSH
29823: EMPTY
29824: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29825: LD_ADDR_VAR 0 5
29829: PUSH
29830: DOUBLE
29831: LD_INT 1
29833: DEC
29834: ST_TO_ADDR
29835: LD_VAR 0 8
29839: PUSH
29840: FOR_TO
29841: IFFALSE 30036
// begin _d := rand ( 0 , 5 ) ;
29843: LD_ADDR_VAR 0 11
29847: PUSH
29848: LD_INT 0
29850: PPUSH
29851: LD_INT 5
29853: PPUSH
29854: CALL_OW 12
29858: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29859: LD_ADDR_VAR 0 12
29863: PUSH
29864: LD_INT 2
29866: PPUSH
29867: LD_INT 6
29869: PPUSH
29870: CALL_OW 12
29874: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29875: LD_ADDR_VAR 0 9
29879: PUSH
29880: LD_VAR 0 2
29884: PPUSH
29885: LD_VAR 0 11
29889: PPUSH
29890: LD_VAR 0 12
29894: PPUSH
29895: CALL_OW 272
29899: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29900: LD_ADDR_VAR 0 10
29904: PUSH
29905: LD_VAR 0 3
29909: PPUSH
29910: LD_VAR 0 11
29914: PPUSH
29915: LD_VAR 0 12
29919: PPUSH
29920: CALL_OW 273
29924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29925: LD_VAR 0 9
29929: PPUSH
29930: LD_VAR 0 10
29934: PPUSH
29935: CALL_OW 488
29939: PUSH
29940: LD_VAR 0 9
29944: PUSH
29945: LD_VAR 0 10
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_VAR 0 7
29958: IN
29959: NOT
29960: AND
29961: PUSH
29962: LD_VAR 0 9
29966: PPUSH
29967: LD_VAR 0 10
29971: PPUSH
29972: CALL_OW 458
29976: NOT
29977: AND
29978: IFFALSE 30020
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29980: LD_ADDR_VAR 0 7
29984: PUSH
29985: LD_VAR 0 7
29989: PPUSH
29990: LD_VAR 0 7
29994: PUSH
29995: LD_INT 1
29997: PLUS
29998: PPUSH
29999: LD_VAR 0 9
30003: PUSH
30004: LD_VAR 0 10
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 1
30017: ST_TO_ADDR
30018: GO 30034
// i := i - 1 ;
30020: LD_ADDR_VAR 0 5
30024: PUSH
30025: LD_VAR 0 5
30029: PUSH
30030: LD_INT 1
30032: MINUS
30033: ST_TO_ADDR
// end ;
30034: GO 29840
30036: POP
30037: POP
// for i in tmp do
30038: LD_ADDR_VAR 0 5
30042: PUSH
30043: LD_VAR 0 7
30047: PUSH
30048: FOR_IN
30049: IFFALSE 30087
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30051: LD_VAR 0 1
30055: PPUSH
30056: LD_VAR 0 5
30060: PUSH
30061: LD_INT 1
30063: ARRAY
30064: PPUSH
30065: LD_VAR 0 5
30069: PUSH
30070: LD_INT 2
30072: ARRAY
30073: PPUSH
30074: CALL 29033 0 3
30078: NOT
30079: IFFALSE 30085
// exit ;
30081: POP
30082: POP
30083: GO 30089
30085: GO 30048
30087: POP
30088: POP
// end ;
30089: LD_VAR 0 4
30093: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30094: LD_INT 0
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
// if not GetClass ( unit ) = class_sniper then
30103: LD_VAR 0 1
30107: PPUSH
30108: CALL_OW 257
30112: PUSH
30113: LD_INT 5
30115: EQUAL
30116: NOT
30117: IFFALSE 30121
// exit ;
30119: GO 30509
// dist := 8 ;
30121: LD_ADDR_VAR 0 5
30125: PUSH
30126: LD_INT 8
30128: ST_TO_ADDR
// viewRange := 12 ;
30129: LD_ADDR_VAR 0 7
30133: PUSH
30134: LD_INT 12
30136: ST_TO_ADDR
// side := GetSide ( unit ) ;
30137: LD_ADDR_VAR 0 6
30141: PUSH
30142: LD_VAR 0 1
30146: PPUSH
30147: CALL_OW 255
30151: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30152: LD_INT 61
30154: PPUSH
30155: LD_VAR 0 6
30159: PPUSH
30160: CALL_OW 321
30164: PUSH
30165: LD_INT 2
30167: EQUAL
30168: IFFALSE 30178
// viewRange := 16 ;
30170: LD_ADDR_VAR 0 7
30174: PUSH
30175: LD_INT 16
30177: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30178: LD_VAR 0 1
30182: PPUSH
30183: LD_VAR 0 2
30187: PPUSH
30188: LD_VAR 0 3
30192: PPUSH
30193: CALL_OW 297
30197: PUSH
30198: LD_VAR 0 5
30202: GREATER
30203: IFFALSE 30282
// begin ComMoveXY ( unit , x , y ) ;
30205: LD_VAR 0 1
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30224: LD_INT 35
30226: PPUSH
30227: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_VAR 0 2
30240: PPUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: CALL 67013 0 3
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30509
// until GetDistUnitXY ( unit , x , y ) < dist ;
30255: LD_VAR 0 1
30259: PPUSH
30260: LD_VAR 0 2
30264: PPUSH
30265: LD_VAR 0 3
30269: PPUSH
30270: CALL_OW 297
30274: PUSH
30275: LD_VAR 0 5
30279: LESS
30280: IFFALSE 30224
// end ; ComTurnXY ( unit , x , y ) ;
30282: LD_VAR 0 1
30286: PPUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: CALL_OW 118
// wait ( 5 ) ;
30301: LD_INT 5
30303: PPUSH
30304: CALL_OW 67
// _d := GetDir ( unit ) ;
30308: LD_ADDR_VAR 0 10
30312: PUSH
30313: LD_VAR 0 1
30317: PPUSH
30318: CALL_OW 254
30322: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30323: LD_ADDR_VAR 0 8
30327: PUSH
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 250
30337: PPUSH
30338: LD_VAR 0 10
30342: PPUSH
30343: LD_VAR 0 5
30347: PPUSH
30348: CALL_OW 272
30352: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30353: LD_ADDR_VAR 0 9
30357: PUSH
30358: LD_VAR 0 1
30362: PPUSH
30363: CALL_OW 251
30367: PPUSH
30368: LD_VAR 0 10
30372: PPUSH
30373: LD_VAR 0 5
30377: PPUSH
30378: CALL_OW 273
30382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30383: LD_VAR 0 8
30387: PPUSH
30388: LD_VAR 0 9
30392: PPUSH
30393: CALL_OW 488
30397: NOT
30398: IFFALSE 30402
// exit ;
30400: GO 30509
// ComAnimCustom ( unit , 1 ) ;
30402: LD_VAR 0 1
30406: PPUSH
30407: LD_INT 1
30409: PPUSH
30410: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30414: LD_VAR 0 8
30418: PPUSH
30419: LD_VAR 0 9
30423: PPUSH
30424: LD_VAR 0 6
30428: PPUSH
30429: LD_VAR 0 7
30433: PPUSH
30434: CALL_OW 330
// repeat wait ( 1 ) ;
30438: LD_INT 1
30440: PPUSH
30441: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30445: LD_VAR 0 1
30449: PPUSH
30450: CALL_OW 316
30454: PUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: CALL_OW 314
30464: OR
30465: PUSH
30466: LD_VAR 0 1
30470: PPUSH
30471: CALL_OW 302
30475: NOT
30476: OR
30477: PUSH
30478: LD_VAR 0 1
30482: PPUSH
30483: CALL_OW 301
30487: OR
30488: IFFALSE 30438
// RemoveSeeing ( _x , _y , side ) ;
30490: LD_VAR 0 8
30494: PPUSH
30495: LD_VAR 0 9
30499: PPUSH
30500: LD_VAR 0 6
30504: PPUSH
30505: CALL_OW 331
// end ; end_of_file
30509: LD_VAR 0 4
30513: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30514: LD_INT 0
30516: PPUSH
30517: PPUSH
// if exist_mode then
30518: LD_VAR 0 2
30522: IFFALSE 30547
// unit := CreateCharacter ( prefix & ident ) else
30524: LD_ADDR_VAR 0 5
30528: PUSH
30529: LD_VAR 0 3
30533: PUSH
30534: LD_VAR 0 1
30538: STR
30539: PPUSH
30540: CALL_OW 34
30544: ST_TO_ADDR
30545: GO 30562
// unit := NewCharacter ( ident ) ;
30547: LD_ADDR_VAR 0 5
30551: PUSH
30552: LD_VAR 0 1
30556: PPUSH
30557: CALL_OW 25
30561: ST_TO_ADDR
// result := unit ;
30562: LD_ADDR_VAR 0 4
30566: PUSH
30567: LD_VAR 0 5
30571: ST_TO_ADDR
// end ;
30572: LD_VAR 0 4
30576: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
// if not side or not nation then
30581: LD_VAR 0 1
30585: NOT
30586: PUSH
30587: LD_VAR 0 2
30591: NOT
30592: OR
30593: IFFALSE 30597
// exit ;
30595: GO 31365
// case nation of nation_american :
30597: LD_VAR 0 2
30601: PUSH
30602: LD_INT 1
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30824
30610: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30611: LD_ADDR_VAR 0 4
30615: PUSH
30616: LD_INT 35
30618: PUSH
30619: LD_INT 45
30621: PUSH
30622: LD_INT 46
30624: PUSH
30625: LD_INT 47
30627: PUSH
30628: LD_INT 82
30630: PUSH
30631: LD_INT 83
30633: PUSH
30634: LD_INT 84
30636: PUSH
30637: LD_INT 85
30639: PUSH
30640: LD_INT 86
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: LD_INT 6
30651: PUSH
30652: LD_INT 15
30654: PUSH
30655: LD_INT 16
30657: PUSH
30658: LD_INT 7
30660: PUSH
30661: LD_INT 12
30663: PUSH
30664: LD_INT 13
30666: PUSH
30667: LD_INT 10
30669: PUSH
30670: LD_INT 14
30672: PUSH
30673: LD_INT 20
30675: PUSH
30676: LD_INT 21
30678: PUSH
30679: LD_INT 22
30681: PUSH
30682: LD_INT 25
30684: PUSH
30685: LD_INT 32
30687: PUSH
30688: LD_INT 27
30690: PUSH
30691: LD_INT 36
30693: PUSH
30694: LD_INT 69
30696: PUSH
30697: LD_INT 39
30699: PUSH
30700: LD_INT 34
30702: PUSH
30703: LD_INT 40
30705: PUSH
30706: LD_INT 48
30708: PUSH
30709: LD_INT 49
30711: PUSH
30712: LD_INT 50
30714: PUSH
30715: LD_INT 51
30717: PUSH
30718: LD_INT 52
30720: PUSH
30721: LD_INT 53
30723: PUSH
30724: LD_INT 54
30726: PUSH
30727: LD_INT 55
30729: PUSH
30730: LD_INT 56
30732: PUSH
30733: LD_INT 57
30735: PUSH
30736: LD_INT 58
30738: PUSH
30739: LD_INT 59
30741: PUSH
30742: LD_INT 60
30744: PUSH
30745: LD_INT 61
30747: PUSH
30748: LD_INT 62
30750: PUSH
30751: LD_INT 80
30753: PUSH
30754: LD_INT 82
30756: PUSH
30757: LD_INT 83
30759: PUSH
30760: LD_INT 84
30762: PUSH
30763: LD_INT 85
30765: PUSH
30766: LD_INT 86
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: ST_TO_ADDR
30822: GO 31289
30824: LD_INT 2
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 31058
30832: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30833: LD_ADDR_VAR 0 4
30837: PUSH
30838: LD_INT 35
30840: PUSH
30841: LD_INT 45
30843: PUSH
30844: LD_INT 46
30846: PUSH
30847: LD_INT 47
30849: PUSH
30850: LD_INT 82
30852: PUSH
30853: LD_INT 83
30855: PUSH
30856: LD_INT 84
30858: PUSH
30859: LD_INT 85
30861: PUSH
30862: LD_INT 87
30864: PUSH
30865: LD_INT 70
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 11
30873: PUSH
30874: LD_INT 3
30876: PUSH
30877: LD_INT 4
30879: PUSH
30880: LD_INT 5
30882: PUSH
30883: LD_INT 6
30885: PUSH
30886: LD_INT 15
30888: PUSH
30889: LD_INT 18
30891: PUSH
30892: LD_INT 7
30894: PUSH
30895: LD_INT 17
30897: PUSH
30898: LD_INT 8
30900: PUSH
30901: LD_INT 20
30903: PUSH
30904: LD_INT 21
30906: PUSH
30907: LD_INT 22
30909: PUSH
30910: LD_INT 72
30912: PUSH
30913: LD_INT 26
30915: PUSH
30916: LD_INT 69
30918: PUSH
30919: LD_INT 39
30921: PUSH
30922: LD_INT 40
30924: PUSH
30925: LD_INT 41
30927: PUSH
30928: LD_INT 42
30930: PUSH
30931: LD_INT 43
30933: PUSH
30934: LD_INT 48
30936: PUSH
30937: LD_INT 49
30939: PUSH
30940: LD_INT 50
30942: PUSH
30943: LD_INT 51
30945: PUSH
30946: LD_INT 52
30948: PUSH
30949: LD_INT 53
30951: PUSH
30952: LD_INT 54
30954: PUSH
30955: LD_INT 55
30957: PUSH
30958: LD_INT 56
30960: PUSH
30961: LD_INT 60
30963: PUSH
30964: LD_INT 61
30966: PUSH
30967: LD_INT 62
30969: PUSH
30970: LD_INT 66
30972: PUSH
30973: LD_INT 67
30975: PUSH
30976: LD_INT 68
30978: PUSH
30979: LD_INT 81
30981: PUSH
30982: LD_INT 82
30984: PUSH
30985: LD_INT 83
30987: PUSH
30988: LD_INT 84
30990: PUSH
30991: LD_INT 85
30993: PUSH
30994: LD_INT 87
30996: PUSH
30997: LD_INT 88
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
31056: GO 31289
31058: LD_INT 3
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31288
31066: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31067: LD_ADDR_VAR 0 4
31071: PUSH
31072: LD_INT 46
31074: PUSH
31075: LD_INT 47
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 82
31086: PUSH
31087: LD_INT 83
31089: PUSH
31090: LD_INT 84
31092: PUSH
31093: LD_INT 85
31095: PUSH
31096: LD_INT 86
31098: PUSH
31099: LD_INT 11
31101: PUSH
31102: LD_INT 9
31104: PUSH
31105: LD_INT 20
31107: PUSH
31108: LD_INT 19
31110: PUSH
31111: LD_INT 21
31113: PUSH
31114: LD_INT 24
31116: PUSH
31117: LD_INT 22
31119: PUSH
31120: LD_INT 25
31122: PUSH
31123: LD_INT 28
31125: PUSH
31126: LD_INT 29
31128: PUSH
31129: LD_INT 30
31131: PUSH
31132: LD_INT 31
31134: PUSH
31135: LD_INT 37
31137: PUSH
31138: LD_INT 38
31140: PUSH
31141: LD_INT 32
31143: PUSH
31144: LD_INT 27
31146: PUSH
31147: LD_INT 33
31149: PUSH
31150: LD_INT 69
31152: PUSH
31153: LD_INT 39
31155: PUSH
31156: LD_INT 34
31158: PUSH
31159: LD_INT 40
31161: PUSH
31162: LD_INT 71
31164: PUSH
31165: LD_INT 23
31167: PUSH
31168: LD_INT 44
31170: PUSH
31171: LD_INT 48
31173: PUSH
31174: LD_INT 49
31176: PUSH
31177: LD_INT 50
31179: PUSH
31180: LD_INT 51
31182: PUSH
31183: LD_INT 52
31185: PUSH
31186: LD_INT 53
31188: PUSH
31189: LD_INT 54
31191: PUSH
31192: LD_INT 55
31194: PUSH
31195: LD_INT 56
31197: PUSH
31198: LD_INT 57
31200: PUSH
31201: LD_INT 58
31203: PUSH
31204: LD_INT 59
31206: PUSH
31207: LD_INT 63
31209: PUSH
31210: LD_INT 64
31212: PUSH
31213: LD_INT 65
31215: PUSH
31216: LD_INT 82
31218: PUSH
31219: LD_INT 83
31221: PUSH
31222: LD_INT 84
31224: PUSH
31225: LD_INT 85
31227: PUSH
31228: LD_INT 86
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
31286: GO 31289
31288: POP
// if state > - 1 and state < 3 then
31289: LD_VAR 0 3
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: GREATER
31298: PUSH
31299: LD_VAR 0 3
31303: PUSH
31304: LD_INT 3
31306: LESS
31307: AND
31308: IFFALSE 31365
// for i in result do
31310: LD_ADDR_VAR 0 5
31314: PUSH
31315: LD_VAR 0 4
31319: PUSH
31320: FOR_IN
31321: IFFALSE 31363
// if GetTech ( i , side ) <> state then
31323: LD_VAR 0 5
31327: PPUSH
31328: LD_VAR 0 1
31332: PPUSH
31333: CALL_OW 321
31337: PUSH
31338: LD_VAR 0 3
31342: NONEQUAL
31343: IFFALSE 31361
// result := result diff i ;
31345: LD_ADDR_VAR 0 4
31349: PUSH
31350: LD_VAR 0 4
31354: PUSH
31355: LD_VAR 0 5
31359: DIFF
31360: ST_TO_ADDR
31361: GO 31320
31363: POP
31364: POP
// end ;
31365: LD_VAR 0 4
31369: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
31374: PPUSH
// result := true ;
31375: LD_ADDR_VAR 0 3
31379: PUSH
31380: LD_INT 1
31382: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31383: LD_ADDR_VAR 0 5
31387: PUSH
31388: LD_VAR 0 2
31392: PPUSH
31393: CALL_OW 480
31397: ST_TO_ADDR
// if not tmp then
31398: LD_VAR 0 5
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31456
// for i in tmp do
31407: LD_ADDR_VAR 0 4
31411: PUSH
31412: LD_VAR 0 5
31416: PUSH
31417: FOR_IN
31418: IFFALSE 31454
// if GetTech ( i , side ) <> state_researched then
31420: LD_VAR 0 4
31424: PPUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 321
31434: PUSH
31435: LD_INT 2
31437: NONEQUAL
31438: IFFALSE 31452
// begin result := false ;
31440: LD_ADDR_VAR 0 3
31444: PUSH
31445: LD_INT 0
31447: ST_TO_ADDR
// exit ;
31448: POP
31449: POP
31450: GO 31456
// end ;
31452: GO 31417
31454: POP
31455: POP
// end ;
31456: LD_VAR 0 3
31460: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31461: LD_INT 0
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
31468: PPUSH
31469: PPUSH
31470: PPUSH
31471: PPUSH
31472: PPUSH
31473: PPUSH
31474: PPUSH
31475: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31476: LD_VAR 0 1
31480: NOT
31481: PUSH
31482: LD_VAR 0 1
31486: PPUSH
31487: CALL_OW 257
31491: PUSH
31492: LD_INT 9
31494: NONEQUAL
31495: OR
31496: IFFALSE 31500
// exit ;
31498: GO 32073
// side := GetSide ( unit ) ;
31500: LD_ADDR_VAR 0 9
31504: PUSH
31505: LD_VAR 0 1
31509: PPUSH
31510: CALL_OW 255
31514: ST_TO_ADDR
// tech_space := tech_spacanom ;
31515: LD_ADDR_VAR 0 12
31519: PUSH
31520: LD_INT 29
31522: ST_TO_ADDR
// tech_time := tech_taurad ;
31523: LD_ADDR_VAR 0 13
31527: PUSH
31528: LD_INT 28
31530: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31531: LD_ADDR_VAR 0 11
31535: PUSH
31536: LD_VAR 0 1
31540: PPUSH
31541: CALL_OW 310
31545: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31546: LD_VAR 0 11
31550: PPUSH
31551: CALL_OW 247
31555: PUSH
31556: LD_INT 2
31558: EQUAL
31559: IFFALSE 31563
// exit ;
31561: GO 32073
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31563: LD_ADDR_VAR 0 8
31567: PUSH
31568: LD_INT 81
31570: PUSH
31571: LD_VAR 0 9
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 21
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PPUSH
31601: CALL_OW 69
31605: ST_TO_ADDR
// if not tmp then
31606: LD_VAR 0 8
31610: NOT
31611: IFFALSE 31615
// exit ;
31613: GO 32073
// if in_unit then
31615: LD_VAR 0 11
31619: IFFALSE 31643
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31621: LD_ADDR_VAR 0 10
31625: PUSH
31626: LD_VAR 0 8
31630: PPUSH
31631: LD_VAR 0 11
31635: PPUSH
31636: CALL_OW 74
31640: ST_TO_ADDR
31641: GO 31663
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31643: LD_ADDR_VAR 0 10
31647: PUSH
31648: LD_VAR 0 8
31652: PPUSH
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 74
31662: ST_TO_ADDR
// if not enemy then
31663: LD_VAR 0 10
31667: NOT
31668: IFFALSE 31672
// exit ;
31670: GO 32073
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31672: LD_VAR 0 11
31676: PUSH
31677: LD_VAR 0 11
31681: PPUSH
31682: LD_VAR 0 10
31686: PPUSH
31687: CALL_OW 296
31691: PUSH
31692: LD_INT 13
31694: GREATER
31695: AND
31696: PUSH
31697: LD_VAR 0 1
31701: PPUSH
31702: LD_VAR 0 10
31706: PPUSH
31707: CALL_OW 296
31711: PUSH
31712: LD_INT 12
31714: GREATER
31715: OR
31716: IFFALSE 31720
// exit ;
31718: GO 32073
// missile := [ 1 ] ;
31720: LD_ADDR_VAR 0 14
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: EMPTY
31729: LIST
31730: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31731: LD_VAR 0 9
31735: PPUSH
31736: LD_VAR 0 12
31740: PPUSH
31741: CALL_OW 325
31745: IFFALSE 31774
// missile := Replace ( missile , missile + 1 , 2 ) ;
31747: LD_ADDR_VAR 0 14
31751: PUSH
31752: LD_VAR 0 14
31756: PPUSH
31757: LD_VAR 0 14
31761: PUSH
31762: LD_INT 1
31764: PLUS
31765: PPUSH
31766: LD_INT 2
31768: PPUSH
31769: CALL_OW 1
31773: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31774: LD_VAR 0 9
31778: PPUSH
31779: LD_VAR 0 13
31783: PPUSH
31784: CALL_OW 325
31788: PUSH
31789: LD_VAR 0 10
31793: PPUSH
31794: CALL_OW 255
31798: PPUSH
31799: LD_VAR 0 13
31803: PPUSH
31804: CALL_OW 325
31808: NOT
31809: AND
31810: IFFALSE 31839
// missile := Replace ( missile , missile + 1 , 3 ) ;
31812: LD_ADDR_VAR 0 14
31816: PUSH
31817: LD_VAR 0 14
31821: PPUSH
31822: LD_VAR 0 14
31826: PUSH
31827: LD_INT 1
31829: PLUS
31830: PPUSH
31831: LD_INT 3
31833: PPUSH
31834: CALL_OW 1
31838: ST_TO_ADDR
// if missile < 2 then
31839: LD_VAR 0 14
31843: PUSH
31844: LD_INT 2
31846: LESS
31847: IFFALSE 31851
// exit ;
31849: GO 32073
// x := GetX ( enemy ) ;
31851: LD_ADDR_VAR 0 4
31855: PUSH
31856: LD_VAR 0 10
31860: PPUSH
31861: CALL_OW 250
31865: ST_TO_ADDR
// y := GetY ( enemy ) ;
31866: LD_ADDR_VAR 0 5
31870: PUSH
31871: LD_VAR 0 10
31875: PPUSH
31876: CALL_OW 251
31880: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31881: LD_ADDR_VAR 0 6
31885: PUSH
31886: LD_VAR 0 4
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PPUSH
31895: LD_INT 1
31897: PPUSH
31898: CALL_OW 12
31902: PLUS
31903: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31904: LD_ADDR_VAR 0 7
31908: PUSH
31909: LD_VAR 0 5
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PPUSH
31918: LD_INT 1
31920: PPUSH
31921: CALL_OW 12
31925: PLUS
31926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31927: LD_VAR 0 6
31931: PPUSH
31932: LD_VAR 0 7
31936: PPUSH
31937: CALL_OW 488
31941: NOT
31942: IFFALSE 31964
// begin _x := x ;
31944: LD_ADDR_VAR 0 6
31948: PUSH
31949: LD_VAR 0 4
31953: ST_TO_ADDR
// _y := y ;
31954: LD_ADDR_VAR 0 7
31958: PUSH
31959: LD_VAR 0 5
31963: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31964: LD_ADDR_VAR 0 3
31968: PUSH
31969: LD_INT 1
31971: PPUSH
31972: LD_VAR 0 14
31976: PPUSH
31977: CALL_OW 12
31981: ST_TO_ADDR
// case i of 1 :
31982: LD_VAR 0 3
31986: PUSH
31987: LD_INT 1
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32012
31995: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31996: LD_VAR 0 1
32000: PPUSH
32001: LD_VAR 0 10
32005: PPUSH
32006: CALL_OW 115
32010: GO 32073
32012: LD_INT 2
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32042
32020: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32021: LD_VAR 0 1
32025: PPUSH
32026: LD_VAR 0 6
32030: PPUSH
32031: LD_VAR 0 7
32035: PPUSH
32036: CALL_OW 153
32040: GO 32073
32042: LD_INT 3
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32050
32048: GO 32072
32050: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32051: LD_VAR 0 1
32055: PPUSH
32056: LD_VAR 0 6
32060: PPUSH
32061: LD_VAR 0 7
32065: PPUSH
32066: CALL_OW 154
32070: GO 32073
32072: POP
// end ;
32073: LD_VAR 0 2
32077: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32078: LD_INT 0
32080: PPUSH
32081: PPUSH
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
// if not unit or not building then
32086: LD_VAR 0 1
32090: NOT
32091: PUSH
32092: LD_VAR 0 2
32096: NOT
32097: OR
32098: IFFALSE 32102
// exit ;
32100: GO 32260
// x := GetX ( building ) ;
32102: LD_ADDR_VAR 0 5
32106: PUSH
32107: LD_VAR 0 2
32111: PPUSH
32112: CALL_OW 250
32116: ST_TO_ADDR
// y := GetY ( building ) ;
32117: LD_ADDR_VAR 0 6
32121: PUSH
32122: LD_VAR 0 2
32126: PPUSH
32127: CALL_OW 251
32131: ST_TO_ADDR
// for i = 0 to 5 do
32132: LD_ADDR_VAR 0 4
32136: PUSH
32137: DOUBLE
32138: LD_INT 0
32140: DEC
32141: ST_TO_ADDR
32142: LD_INT 5
32144: PUSH
32145: FOR_TO
32146: IFFALSE 32258
// begin _x := ShiftX ( x , i , 3 ) ;
32148: LD_ADDR_VAR 0 7
32152: PUSH
32153: LD_VAR 0 5
32157: PPUSH
32158: LD_VAR 0 4
32162: PPUSH
32163: LD_INT 3
32165: PPUSH
32166: CALL_OW 272
32170: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32171: LD_ADDR_VAR 0 8
32175: PUSH
32176: LD_VAR 0 6
32180: PPUSH
32181: LD_VAR 0 4
32185: PPUSH
32186: LD_INT 3
32188: PPUSH
32189: CALL_OW 273
32193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32194: LD_VAR 0 7
32198: PPUSH
32199: LD_VAR 0 8
32203: PPUSH
32204: CALL_OW 488
32208: NOT
32209: IFFALSE 32213
// continue ;
32211: GO 32145
// if HexInfo ( _x , _y ) = 0 then
32213: LD_VAR 0 7
32217: PPUSH
32218: LD_VAR 0 8
32222: PPUSH
32223: CALL_OW 428
32227: PUSH
32228: LD_INT 0
32230: EQUAL
32231: IFFALSE 32256
// begin ComMoveXY ( unit , _x , _y ) ;
32233: LD_VAR 0 1
32237: PPUSH
32238: LD_VAR 0 7
32242: PPUSH
32243: LD_VAR 0 8
32247: PPUSH
32248: CALL_OW 111
// exit ;
32252: POP
32253: POP
32254: GO 32260
// end ; end ;
32256: GO 32145
32258: POP
32259: POP
// end ;
32260: LD_VAR 0 3
32264: RET
// export function ScanBase ( side , base_area ) ; begin
32265: LD_INT 0
32267: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_VAR 0 2
32277: PPUSH
32278: LD_INT 81
32280: PUSH
32281: LD_VAR 0 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PPUSH
32290: CALL_OW 70
32294: ST_TO_ADDR
// end ;
32295: LD_VAR 0 3
32299: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32300: LD_INT 0
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
// result := false ;
32306: LD_ADDR_VAR 0 2
32310: PUSH
32311: LD_INT 0
32313: ST_TO_ADDR
// side := GetSide ( unit ) ;
32314: LD_ADDR_VAR 0 3
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 255
32328: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32329: LD_ADDR_VAR 0 4
32333: PUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 248
32343: ST_TO_ADDR
// case nat of 1 :
32344: LD_VAR 0 4
32348: PUSH
32349: LD_INT 1
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32368
32357: POP
// tech := tech_lassight ; 2 :
32358: LD_ADDR_VAR 0 5
32362: PUSH
32363: LD_INT 12
32365: ST_TO_ADDR
32366: GO 32407
32368: LD_INT 2
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32387
32376: POP
// tech := tech_mortar ; 3 :
32377: LD_ADDR_VAR 0 5
32381: PUSH
32382: LD_INT 41
32384: ST_TO_ADDR
32385: GO 32407
32387: LD_INT 3
32389: DOUBLE
32390: EQUAL
32391: IFTRUE 32395
32393: GO 32406
32395: POP
// tech := tech_bazooka ; end ;
32396: LD_ADDR_VAR 0 5
32400: PUSH
32401: LD_INT 44
32403: ST_TO_ADDR
32404: GO 32407
32406: POP
// if Researched ( side , tech ) then
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_VAR 0 5
32416: PPUSH
32417: CALL_OW 325
32421: IFFALSE 32448
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32423: LD_ADDR_VAR 0 2
32427: PUSH
32428: LD_INT 5
32430: PUSH
32431: LD_INT 8
32433: PUSH
32434: LD_INT 9
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: LIST
32441: PUSH
32442: LD_VAR 0 4
32446: ARRAY
32447: ST_TO_ADDR
// end ;
32448: LD_VAR 0 2
32452: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32453: LD_INT 0
32455: PPUSH
32456: PPUSH
32457: PPUSH
// if not mines then
32458: LD_VAR 0 2
32462: NOT
32463: IFFALSE 32467
// exit ;
32465: GO 32611
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32467: LD_ADDR_VAR 0 5
32471: PUSH
32472: LD_INT 81
32474: PUSH
32475: LD_VAR 0 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: LD_INT 21
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PPUSH
32505: CALL_OW 69
32509: ST_TO_ADDR
// for i in mines do
32510: LD_ADDR_VAR 0 4
32514: PUSH
32515: LD_VAR 0 2
32519: PUSH
32520: FOR_IN
32521: IFFALSE 32609
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32523: LD_VAR 0 4
32527: PUSH
32528: LD_INT 1
32530: ARRAY
32531: PPUSH
32532: LD_VAR 0 4
32536: PUSH
32537: LD_INT 2
32539: ARRAY
32540: PPUSH
32541: CALL_OW 458
32545: NOT
32546: IFFALSE 32550
// continue ;
32548: GO 32520
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32550: LD_VAR 0 4
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: LD_VAR 0 4
32563: PUSH
32564: LD_INT 2
32566: ARRAY
32567: PPUSH
32568: CALL_OW 428
32572: PUSH
32573: LD_VAR 0 5
32577: IN
32578: IFFALSE 32607
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32580: LD_VAR 0 4
32584: PUSH
32585: LD_INT 1
32587: ARRAY
32588: PPUSH
32589: LD_VAR 0 4
32593: PUSH
32594: LD_INT 2
32596: ARRAY
32597: PPUSH
32598: LD_VAR 0 1
32602: PPUSH
32603: CALL_OW 456
// end ;
32607: GO 32520
32609: POP
32610: POP
// end ;
32611: LD_VAR 0 3
32615: RET
// export function Count ( array ) ; begin
32616: LD_INT 0
32618: PPUSH
// result := array + 0 ;
32619: LD_ADDR_VAR 0 2
32623: PUSH
32624: LD_VAR 0 1
32628: PUSH
32629: LD_INT 0
32631: PLUS
32632: ST_TO_ADDR
// end ;
32633: LD_VAR 0 2
32637: RET
// export function IsEmpty ( building ) ; begin
32638: LD_INT 0
32640: PPUSH
// if not building then
32641: LD_VAR 0 1
32645: NOT
32646: IFFALSE 32650
// exit ;
32648: GO 32693
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32650: LD_ADDR_VAR 0 2
32654: PUSH
32655: LD_VAR 0 1
32659: PUSH
32660: LD_INT 22
32662: PUSH
32663: LD_VAR 0 1
32667: PPUSH
32668: CALL_OW 255
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 58
32679: PUSH
32680: EMPTY
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PPUSH
32687: CALL_OW 69
32691: IN
32692: ST_TO_ADDR
// end ;
32693: LD_VAR 0 2
32697: RET
// export function IsNotFull ( building ) ; var places ; begin
32698: LD_INT 0
32700: PPUSH
32701: PPUSH
// if not building then
32702: LD_VAR 0 1
32706: NOT
32707: IFFALSE 32711
// exit ;
32709: GO 32739
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32711: LD_ADDR_VAR 0 2
32715: PUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: LD_INT 3
32723: PUSH
32724: LD_INT 62
32726: PUSH
32727: EMPTY
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PPUSH
32734: CALL_OW 72
32738: ST_TO_ADDR
// end ;
32739: LD_VAR 0 2
32743: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32744: LD_INT 0
32746: PPUSH
32747: PPUSH
32748: PPUSH
32749: PPUSH
// tmp := [ ] ;
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: EMPTY
32756: ST_TO_ADDR
// list := [ ] ;
32757: LD_ADDR_VAR 0 5
32761: PUSH
32762: EMPTY
32763: ST_TO_ADDR
// for i = 16 to 25 do
32764: LD_ADDR_VAR 0 4
32768: PUSH
32769: DOUBLE
32770: LD_INT 16
32772: DEC
32773: ST_TO_ADDR
32774: LD_INT 25
32776: PUSH
32777: FOR_TO
32778: IFFALSE 32851
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_VAR 0 3
32789: PUSH
32790: LD_INT 22
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 255
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 91
32809: PUSH
32810: LD_VAR 0 1
32814: PUSH
32815: LD_INT 6
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 30
32825: PUSH
32826: LD_VAR 0 4
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: PUSH
32840: EMPTY
32841: LIST
32842: PPUSH
32843: CALL_OW 69
32847: ADD
32848: ST_TO_ADDR
32849: GO 32777
32851: POP
32852: POP
// for i = 1 to tmp do
32853: LD_ADDR_VAR 0 4
32857: PUSH
32858: DOUBLE
32859: LD_INT 1
32861: DEC
32862: ST_TO_ADDR
32863: LD_VAR 0 3
32867: PUSH
32868: FOR_TO
32869: IFFALSE 32957
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32871: LD_ADDR_VAR 0 5
32875: PUSH
32876: LD_VAR 0 5
32880: PUSH
32881: LD_VAR 0 3
32885: PUSH
32886: LD_VAR 0 4
32890: ARRAY
32891: PPUSH
32892: CALL_OW 266
32896: PUSH
32897: LD_VAR 0 3
32901: PUSH
32902: LD_VAR 0 4
32906: ARRAY
32907: PPUSH
32908: CALL_OW 250
32912: PUSH
32913: LD_VAR 0 3
32917: PUSH
32918: LD_VAR 0 4
32922: ARRAY
32923: PPUSH
32924: CALL_OW 251
32928: PUSH
32929: LD_VAR 0 3
32933: PUSH
32934: LD_VAR 0 4
32938: ARRAY
32939: PPUSH
32940: CALL_OW 254
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: ADD
32954: ST_TO_ADDR
32955: GO 32868
32957: POP
32958: POP
// result := list ;
32959: LD_ADDR_VAR 0 2
32963: PUSH
32964: LD_VAR 0 5
32968: ST_TO_ADDR
// end ;
32969: LD_VAR 0 2
32973: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32974: LD_INT 0
32976: PPUSH
32977: PPUSH
32978: PPUSH
32979: PPUSH
32980: PPUSH
32981: PPUSH
32982: PPUSH
// if not factory then
32983: LD_VAR 0 1
32987: NOT
32988: IFFALSE 32992
// exit ;
32990: GO 33585
// if control = control_apeman then
32992: LD_VAR 0 4
32996: PUSH
32997: LD_INT 5
32999: EQUAL
33000: IFFALSE 33109
// begin tmp := UnitsInside ( factory ) ;
33002: LD_ADDR_VAR 0 8
33006: PUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL_OW 313
33016: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33017: LD_VAR 0 8
33021: PPUSH
33022: LD_INT 25
33024: PUSH
33025: LD_INT 12
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PPUSH
33032: CALL_OW 72
33036: NOT
33037: IFFALSE 33047
// control := control_manual ;
33039: LD_ADDR_VAR 0 4
33043: PUSH
33044: LD_INT 1
33046: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33047: LD_ADDR_VAR 0 8
33051: PUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL 32744 0 1
33061: ST_TO_ADDR
// if tmp then
33062: LD_VAR 0 8
33066: IFFALSE 33109
// begin for i in tmp do
33068: LD_ADDR_VAR 0 7
33072: PUSH
33073: LD_VAR 0 8
33077: PUSH
33078: FOR_IN
33079: IFFALSE 33107
// if i [ 1 ] = b_ext_radio then
33081: LD_VAR 0 7
33085: PUSH
33086: LD_INT 1
33088: ARRAY
33089: PUSH
33090: LD_INT 22
33092: EQUAL
33093: IFFALSE 33105
// begin control := control_remote ;
33095: LD_ADDR_VAR 0 4
33099: PUSH
33100: LD_INT 2
33102: ST_TO_ADDR
// break ;
33103: GO 33107
// end ;
33105: GO 33078
33107: POP
33108: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33109: LD_VAR 0 1
33113: PPUSH
33114: LD_VAR 0 2
33118: PPUSH
33119: LD_VAR 0 3
33123: PPUSH
33124: LD_VAR 0 4
33128: PPUSH
33129: LD_VAR 0 5
33133: PPUSH
33134: CALL_OW 448
33138: IFFALSE 33173
// begin result := [ chassis , engine , control , weapon ] ;
33140: LD_ADDR_VAR 0 6
33144: PUSH
33145: LD_VAR 0 2
33149: PUSH
33150: LD_VAR 0 3
33154: PUSH
33155: LD_VAR 0 4
33159: PUSH
33160: LD_VAR 0 5
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: ST_TO_ADDR
// exit ;
33171: GO 33585
// end ; _chassis := AvailableChassisList ( factory ) ;
33173: LD_ADDR_VAR 0 9
33177: PUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 475
33187: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33188: LD_ADDR_VAR 0 11
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 476
33202: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33203: LD_ADDR_VAR 0 12
33207: PUSH
33208: LD_VAR 0 1
33212: PPUSH
33213: CALL_OW 477
33217: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33218: LD_ADDR_VAR 0 10
33222: PUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: CALL_OW 478
33232: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33233: LD_VAR 0 9
33237: NOT
33238: PUSH
33239: LD_VAR 0 11
33243: NOT
33244: OR
33245: PUSH
33246: LD_VAR 0 12
33250: NOT
33251: OR
33252: PUSH
33253: LD_VAR 0 10
33257: NOT
33258: OR
33259: IFFALSE 33294
// begin result := [ chassis , engine , control , weapon ] ;
33261: LD_ADDR_VAR 0 6
33265: PUSH
33266: LD_VAR 0 2
33270: PUSH
33271: LD_VAR 0 3
33275: PUSH
33276: LD_VAR 0 4
33280: PUSH
33281: LD_VAR 0 5
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// exit ;
33292: GO 33585
// end ; if not chassis in _chassis then
33294: LD_VAR 0 2
33298: PUSH
33299: LD_VAR 0 9
33303: IN
33304: NOT
33305: IFFALSE 33331
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33307: LD_ADDR_VAR 0 2
33311: PUSH
33312: LD_VAR 0 9
33316: PUSH
33317: LD_INT 1
33319: PPUSH
33320: LD_VAR 0 9
33324: PPUSH
33325: CALL_OW 12
33329: ARRAY
33330: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33331: LD_VAR 0 2
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: CALL 33590 0 2
33345: NOT
33346: IFFALSE 33405
// repeat engine := _engine [ 1 ] ;
33348: LD_ADDR_VAR 0 3
33352: PUSH
33353: LD_VAR 0 11
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33362: LD_ADDR_VAR 0 11
33366: PUSH
33367: LD_VAR 0 11
33371: PPUSH
33372: LD_INT 1
33374: PPUSH
33375: CALL_OW 3
33379: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33380: LD_VAR 0 2
33384: PPUSH
33385: LD_VAR 0 3
33389: PPUSH
33390: CALL 33590 0 2
33394: PUSH
33395: LD_VAR 0 11
33399: PUSH
33400: EMPTY
33401: EQUAL
33402: OR
33403: IFFALSE 33348
// if not control in _control then
33405: LD_VAR 0 4
33409: PUSH
33410: LD_VAR 0 12
33414: IN
33415: NOT
33416: IFFALSE 33442
// control := _control [ rand ( 1 , _control ) ] ;
33418: LD_ADDR_VAR 0 4
33422: PUSH
33423: LD_VAR 0 12
33427: PUSH
33428: LD_INT 1
33430: PPUSH
33431: LD_VAR 0 12
33435: PPUSH
33436: CALL_OW 12
33440: ARRAY
33441: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33442: LD_VAR 0 2
33446: PPUSH
33447: LD_VAR 0 5
33451: PPUSH
33452: CALL 33810 0 2
33456: NOT
33457: IFFALSE 33516
// repeat weapon := _weapon [ 1 ] ;
33459: LD_ADDR_VAR 0 5
33463: PUSH
33464: LD_VAR 0 10
33468: PUSH
33469: LD_INT 1
33471: ARRAY
33472: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33473: LD_ADDR_VAR 0 10
33477: PUSH
33478: LD_VAR 0 10
33482: PPUSH
33483: LD_INT 1
33485: PPUSH
33486: CALL_OW 3
33490: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33491: LD_VAR 0 2
33495: PPUSH
33496: LD_VAR 0 5
33500: PPUSH
33501: CALL 33810 0 2
33505: PUSH
33506: LD_VAR 0 10
33510: PUSH
33511: EMPTY
33512: EQUAL
33513: OR
33514: IFFALSE 33459
// result := [ ] ;
33516: LD_ADDR_VAR 0 6
33520: PUSH
33521: EMPTY
33522: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33523: LD_VAR 0 1
33527: PPUSH
33528: LD_VAR 0 2
33532: PPUSH
33533: LD_VAR 0 3
33537: PPUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: LD_VAR 0 5
33547: PPUSH
33548: CALL_OW 448
33552: IFFALSE 33585
// result := [ chassis , engine , control , weapon ] ;
33554: LD_ADDR_VAR 0 6
33558: PUSH
33559: LD_VAR 0 2
33563: PUSH
33564: LD_VAR 0 3
33568: PUSH
33569: LD_VAR 0 4
33573: PUSH
33574: LD_VAR 0 5
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: ST_TO_ADDR
// end ;
33585: LD_VAR 0 6
33589: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33590: LD_INT 0
33592: PPUSH
// if not chassis or not engine then
33593: LD_VAR 0 1
33597: NOT
33598: PUSH
33599: LD_VAR 0 2
33603: NOT
33604: OR
33605: IFFALSE 33609
// exit ;
33607: GO 33805
// case engine of engine_solar :
33609: LD_VAR 0 2
33613: PUSH
33614: LD_INT 2
33616: DOUBLE
33617: EQUAL
33618: IFTRUE 33622
33620: GO 33660
33622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33623: LD_ADDR_VAR 0 3
33627: PUSH
33628: LD_INT 11
33630: PUSH
33631: LD_INT 12
33633: PUSH
33634: LD_INT 13
33636: PUSH
33637: LD_INT 14
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: LD_INT 3
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
33658: GO 33789
33660: LD_INT 1
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33730
33668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_INT 11
33676: PUSH
33677: LD_INT 12
33679: PUSH
33680: LD_INT 13
33682: PUSH
33683: LD_INT 14
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: LD_INT 21
33703: PUSH
33704: LD_INT 23
33706: PUSH
33707: LD_INT 22
33709: PUSH
33710: LD_INT 24
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
33728: GO 33789
33730: LD_INT 3
33732: DOUBLE
33733: EQUAL
33734: IFTRUE 33738
33736: GO 33788
33738: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33739: LD_ADDR_VAR 0 3
33743: PUSH
33744: LD_INT 13
33746: PUSH
33747: LD_INT 14
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 3
33755: PUSH
33756: LD_INT 4
33758: PUSH
33759: LD_INT 5
33761: PUSH
33762: LD_INT 21
33764: PUSH
33765: LD_INT 22
33767: PUSH
33768: LD_INT 23
33770: PUSH
33771: LD_INT 24
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: ST_TO_ADDR
33786: GO 33789
33788: POP
// result := ( chassis in result ) ;
33789: LD_ADDR_VAR 0 3
33793: PUSH
33794: LD_VAR 0 1
33798: PUSH
33799: LD_VAR 0 3
33803: IN
33804: ST_TO_ADDR
// end ;
33805: LD_VAR 0 3
33809: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33810: LD_INT 0
33812: PPUSH
// if not chassis or not weapon then
33813: LD_VAR 0 1
33817: NOT
33818: PUSH
33819: LD_VAR 0 2
33823: NOT
33824: OR
33825: IFFALSE 33829
// exit ;
33827: GO 34889
// case weapon of us_machine_gun :
33829: LD_VAR 0 2
33833: PUSH
33834: LD_INT 2
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 33872
33842: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: LD_INT 4
33859: PUSH
33860: LD_INT 5
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: ST_TO_ADDR
33870: GO 34873
33872: LD_INT 3
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33910
33880: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 3
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: LD_INT 5
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: ST_TO_ADDR
33908: GO 34873
33910: LD_INT 11
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33948
33918: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 4
33935: PUSH
33936: LD_INT 5
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
33946: GO 34873
33948: LD_INT 4
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 33982
33956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 4
33970: PUSH
33971: LD_INT 5
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: ST_TO_ADDR
33980: GO 34873
33982: LD_INT 5
33984: DOUBLE
33985: EQUAL
33986: IFTRUE 33990
33988: GO 34016
33990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33991: LD_ADDR_VAR 0 3
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 3
34001: PUSH
34002: LD_INT 4
34004: PUSH
34005: LD_INT 5
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: ST_TO_ADDR
34014: GO 34873
34016: LD_INT 9
34018: DOUBLE
34019: EQUAL
34020: IFTRUE 34024
34022: GO 34050
34024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34025: LD_ADDR_VAR 0 3
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
34048: GO 34873
34050: LD_INT 7
34052: DOUBLE
34053: EQUAL
34054: IFTRUE 34058
34056: GO 34084
34058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 4
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34873
34084: LD_INT 12
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34118
34092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 4
34106: PUSH
34107: LD_INT 5
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: ST_TO_ADDR
34116: GO 34873
34118: LD_INT 13
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34126
34124: GO 34152
34126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: LD_INT 4
34140: PUSH
34141: LD_INT 5
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: ST_TO_ADDR
34150: GO 34873
34152: LD_INT 14
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34178
34160: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_INT 4
34168: PUSH
34169: LD_INT 5
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: ST_TO_ADDR
34176: GO 34873
34178: LD_INT 6
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34204
34186: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_INT 4
34194: PUSH
34195: LD_INT 5
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: ST_TO_ADDR
34202: GO 34873
34204: LD_INT 10
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34230
34212: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34213: LD_ADDR_VAR 0 3
34217: PUSH
34218: LD_INT 4
34220: PUSH
34221: LD_INT 5
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: ST_TO_ADDR
34228: GO 34873
34230: LD_INT 22
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34264
34238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_INT 11
34246: PUSH
34247: LD_INT 12
34249: PUSH
34250: LD_INT 13
34252: PUSH
34253: LD_INT 14
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
34262: GO 34873
34264: LD_INT 23
34266: DOUBLE
34267: EQUAL
34268: IFTRUE 34272
34270: GO 34298
34272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34273: LD_ADDR_VAR 0 3
34277: PUSH
34278: LD_INT 11
34280: PUSH
34281: LD_INT 12
34283: PUSH
34284: LD_INT 13
34286: PUSH
34287: LD_INT 14
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
34296: GO 34873
34298: LD_INT 24
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34306
34304: GO 34332
34306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_INT 11
34314: PUSH
34315: LD_INT 12
34317: PUSH
34318: LD_INT 13
34320: PUSH
34321: LD_INT 14
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
34330: GO 34873
34332: LD_INT 30
34334: DOUBLE
34335: EQUAL
34336: IFTRUE 34340
34338: GO 34366
34340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_INT 11
34348: PUSH
34349: LD_INT 12
34351: PUSH
34352: LD_INT 13
34354: PUSH
34355: LD_INT 14
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
34364: GO 34873
34366: LD_INT 25
34368: DOUBLE
34369: EQUAL
34370: IFTRUE 34374
34372: GO 34392
34374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34375: LD_ADDR_VAR 0 3
34379: PUSH
34380: LD_INT 13
34382: PUSH
34383: LD_INT 14
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: ST_TO_ADDR
34390: GO 34873
34392: LD_INT 27
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34400
34398: GO 34418
34400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34401: LD_ADDR_VAR 0 3
34405: PUSH
34406: LD_INT 13
34408: PUSH
34409: LD_INT 14
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 34873
34418: LD_INT 92
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34452
34426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 11
34434: PUSH
34435: LD_INT 12
34437: PUSH
34438: LD_INT 13
34440: PUSH
34441: LD_INT 14
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34873
34452: LD_INT 28
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34478
34460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 13
34468: PUSH
34469: LD_INT 14
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 34873
34478: LD_INT 29
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34504
34486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_INT 13
34494: PUSH
34495: LD_INT 14
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: ST_TO_ADDR
34502: GO 34873
34504: LD_INT 31
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34512
34510: GO 34530
34512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_INT 13
34520: PUSH
34521: LD_INT 14
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: ST_TO_ADDR
34528: GO 34873
34530: LD_INT 26
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34556
34538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: LD_INT 13
34546: PUSH
34547: LD_INT 14
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: ST_TO_ADDR
34554: GO 34873
34556: LD_INT 42
34558: DOUBLE
34559: EQUAL
34560: IFTRUE 34564
34562: GO 34590
34564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34565: LD_ADDR_VAR 0 3
34569: PUSH
34570: LD_INT 21
34572: PUSH
34573: LD_INT 22
34575: PUSH
34576: LD_INT 23
34578: PUSH
34579: LD_INT 24
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: ST_TO_ADDR
34588: GO 34873
34590: LD_INT 43
34592: DOUBLE
34593: EQUAL
34594: IFTRUE 34598
34596: GO 34624
34598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34599: LD_ADDR_VAR 0 3
34603: PUSH
34604: LD_INT 21
34606: PUSH
34607: LD_INT 22
34609: PUSH
34610: LD_INT 23
34612: PUSH
34613: LD_INT 24
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: ST_TO_ADDR
34622: GO 34873
34624: LD_INT 44
34626: DOUBLE
34627: EQUAL
34628: IFTRUE 34632
34630: GO 34658
34632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34633: LD_ADDR_VAR 0 3
34637: PUSH
34638: LD_INT 21
34640: PUSH
34641: LD_INT 22
34643: PUSH
34644: LD_INT 23
34646: PUSH
34647: LD_INT 24
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: ST_TO_ADDR
34656: GO 34873
34658: LD_INT 45
34660: DOUBLE
34661: EQUAL
34662: IFTRUE 34666
34664: GO 34692
34666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34667: LD_ADDR_VAR 0 3
34671: PUSH
34672: LD_INT 21
34674: PUSH
34675: LD_INT 22
34677: PUSH
34678: LD_INT 23
34680: PUSH
34681: LD_INT 24
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: ST_TO_ADDR
34690: GO 34873
34692: LD_INT 49
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34700
34698: GO 34726
34700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34701: LD_ADDR_VAR 0 3
34705: PUSH
34706: LD_INT 21
34708: PUSH
34709: LD_INT 22
34711: PUSH
34712: LD_INT 23
34714: PUSH
34715: LD_INT 24
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: ST_TO_ADDR
34724: GO 34873
34726: LD_INT 51
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34760
34734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34735: LD_ADDR_VAR 0 3
34739: PUSH
34740: LD_INT 21
34742: PUSH
34743: LD_INT 22
34745: PUSH
34746: LD_INT 23
34748: PUSH
34749: LD_INT 24
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: ST_TO_ADDR
34758: GO 34873
34760: LD_INT 52
34762: DOUBLE
34763: EQUAL
34764: IFTRUE 34768
34766: GO 34794
34768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34769: LD_ADDR_VAR 0 3
34773: PUSH
34774: LD_INT 21
34776: PUSH
34777: LD_INT 22
34779: PUSH
34780: LD_INT 23
34782: PUSH
34783: LD_INT 24
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: ST_TO_ADDR
34792: GO 34873
34794: LD_INT 53
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34820
34802: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_INT 23
34810: PUSH
34811: LD_INT 24
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: ST_TO_ADDR
34818: GO 34873
34820: LD_INT 46
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34846
34828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 23
34836: PUSH
34837: LD_INT 24
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: ST_TO_ADDR
34844: GO 34873
34846: LD_INT 47
34848: DOUBLE
34849: EQUAL
34850: IFTRUE 34854
34852: GO 34872
34854: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34855: LD_ADDR_VAR 0 3
34859: PUSH
34860: LD_INT 23
34862: PUSH
34863: LD_INT 24
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: ST_TO_ADDR
34870: GO 34873
34872: POP
// result := ( chassis in result ) ;
34873: LD_ADDR_VAR 0 3
34877: PUSH
34878: LD_VAR 0 1
34882: PUSH
34883: LD_VAR 0 3
34887: IN
34888: ST_TO_ADDR
// end ;
34889: LD_VAR 0 3
34893: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34894: LD_INT 0
34896: PPUSH
34897: PPUSH
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
// result := array ;
34903: LD_ADDR_VAR 0 5
34907: PUSH
34908: LD_VAR 0 1
34912: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34913: LD_VAR 0 1
34917: NOT
34918: PUSH
34919: LD_VAR 0 2
34923: NOT
34924: OR
34925: PUSH
34926: LD_VAR 0 3
34930: NOT
34931: OR
34932: PUSH
34933: LD_VAR 0 2
34937: PUSH
34938: LD_VAR 0 1
34942: GREATER
34943: OR
34944: PUSH
34945: LD_VAR 0 3
34949: PUSH
34950: LD_VAR 0 1
34954: GREATER
34955: OR
34956: IFFALSE 34960
// exit ;
34958: GO 35256
// if direction then
34960: LD_VAR 0 4
34964: IFFALSE 35028
// begin d := 1 ;
34966: LD_ADDR_VAR 0 9
34970: PUSH
34971: LD_INT 1
34973: ST_TO_ADDR
// if i_from > i_to then
34974: LD_VAR 0 2
34978: PUSH
34979: LD_VAR 0 3
34983: GREATER
34984: IFFALSE 35010
// length := ( array - i_from ) + i_to else
34986: LD_ADDR_VAR 0 11
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_VAR 0 2
35000: MINUS
35001: PUSH
35002: LD_VAR 0 3
35006: PLUS
35007: ST_TO_ADDR
35008: GO 35026
// length := i_to - i_from ;
35010: LD_ADDR_VAR 0 11
35014: PUSH
35015: LD_VAR 0 3
35019: PUSH
35020: LD_VAR 0 2
35024: MINUS
35025: ST_TO_ADDR
// end else
35026: GO 35089
// begin d := - 1 ;
35028: LD_ADDR_VAR 0 9
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: ST_TO_ADDR
// if i_from > i_to then
35037: LD_VAR 0 2
35041: PUSH
35042: LD_VAR 0 3
35046: GREATER
35047: IFFALSE 35067
// length := i_from - i_to else
35049: LD_ADDR_VAR 0 11
35053: PUSH
35054: LD_VAR 0 2
35058: PUSH
35059: LD_VAR 0 3
35063: MINUS
35064: ST_TO_ADDR
35065: GO 35089
// length := ( array - i_to ) + i_from ;
35067: LD_ADDR_VAR 0 11
35071: PUSH
35072: LD_VAR 0 1
35076: PUSH
35077: LD_VAR 0 3
35081: MINUS
35082: PUSH
35083: LD_VAR 0 2
35087: PLUS
35088: ST_TO_ADDR
// end ; if not length then
35089: LD_VAR 0 11
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 35256
// tmp := array ;
35098: LD_ADDR_VAR 0 10
35102: PUSH
35103: LD_VAR 0 1
35107: ST_TO_ADDR
// for i = 1 to length do
35108: LD_ADDR_VAR 0 6
35112: PUSH
35113: DOUBLE
35114: LD_INT 1
35116: DEC
35117: ST_TO_ADDR
35118: LD_VAR 0 11
35122: PUSH
35123: FOR_TO
35124: IFFALSE 35244
// begin for j = 1 to array do
35126: LD_ADDR_VAR 0 7
35130: PUSH
35131: DOUBLE
35132: LD_INT 1
35134: DEC
35135: ST_TO_ADDR
35136: LD_VAR 0 1
35140: PUSH
35141: FOR_TO
35142: IFFALSE 35230
// begin k := j + d ;
35144: LD_ADDR_VAR 0 8
35148: PUSH
35149: LD_VAR 0 7
35153: PUSH
35154: LD_VAR 0 9
35158: PLUS
35159: ST_TO_ADDR
// if k > array then
35160: LD_VAR 0 8
35164: PUSH
35165: LD_VAR 0 1
35169: GREATER
35170: IFFALSE 35180
// k := 1 ;
35172: LD_ADDR_VAR 0 8
35176: PUSH
35177: LD_INT 1
35179: ST_TO_ADDR
// if not k then
35180: LD_VAR 0 8
35184: NOT
35185: IFFALSE 35197
// k := array ;
35187: LD_ADDR_VAR 0 8
35191: PUSH
35192: LD_VAR 0 1
35196: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35197: LD_ADDR_VAR 0 10
35201: PUSH
35202: LD_VAR 0 10
35206: PPUSH
35207: LD_VAR 0 8
35211: PPUSH
35212: LD_VAR 0 1
35216: PUSH
35217: LD_VAR 0 7
35221: ARRAY
35222: PPUSH
35223: CALL_OW 1
35227: ST_TO_ADDR
// end ;
35228: GO 35141
35230: POP
35231: POP
// array := tmp ;
35232: LD_ADDR_VAR 0 1
35236: PUSH
35237: LD_VAR 0 10
35241: ST_TO_ADDR
// end ;
35242: GO 35123
35244: POP
35245: POP
// result := array ;
35246: LD_ADDR_VAR 0 5
35250: PUSH
35251: LD_VAR 0 1
35255: ST_TO_ADDR
// end ;
35256: LD_VAR 0 5
35260: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35261: LD_INT 0
35263: PPUSH
35264: PPUSH
// result := 0 ;
35265: LD_ADDR_VAR 0 3
35269: PUSH
35270: LD_INT 0
35272: ST_TO_ADDR
// if not array or not value in array then
35273: LD_VAR 0 1
35277: NOT
35278: PUSH
35279: LD_VAR 0 2
35283: PUSH
35284: LD_VAR 0 1
35288: IN
35289: NOT
35290: OR
35291: IFFALSE 35295
// exit ;
35293: GO 35349
// for i = 1 to array do
35295: LD_ADDR_VAR 0 4
35299: PUSH
35300: DOUBLE
35301: LD_INT 1
35303: DEC
35304: ST_TO_ADDR
35305: LD_VAR 0 1
35309: PUSH
35310: FOR_TO
35311: IFFALSE 35347
// if value = array [ i ] then
35313: LD_VAR 0 2
35317: PUSH
35318: LD_VAR 0 1
35322: PUSH
35323: LD_VAR 0 4
35327: ARRAY
35328: EQUAL
35329: IFFALSE 35345
// begin result := i ;
35331: LD_ADDR_VAR 0 3
35335: PUSH
35336: LD_VAR 0 4
35340: ST_TO_ADDR
// exit ;
35341: POP
35342: POP
35343: GO 35349
// end ;
35345: GO 35310
35347: POP
35348: POP
// end ;
35349: LD_VAR 0 3
35353: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35354: LD_INT 0
35356: PPUSH
// vc_chassis := chassis ;
35357: LD_ADDR_OWVAR 37
35361: PUSH
35362: LD_VAR 0 1
35366: ST_TO_ADDR
// vc_engine := engine ;
35367: LD_ADDR_OWVAR 39
35371: PUSH
35372: LD_VAR 0 2
35376: ST_TO_ADDR
// vc_control := control ;
35377: LD_ADDR_OWVAR 38
35381: PUSH
35382: LD_VAR 0 3
35386: ST_TO_ADDR
// vc_weapon := weapon ;
35387: LD_ADDR_OWVAR 40
35391: PUSH
35392: LD_VAR 0 4
35396: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35397: LD_ADDR_OWVAR 41
35401: PUSH
35402: LD_VAR 0 5
35406: ST_TO_ADDR
// end ;
35407: LD_VAR 0 6
35411: RET
// export function WantPlant ( unit ) ; var task ; begin
35412: LD_INT 0
35414: PPUSH
35415: PPUSH
// result := false ;
35416: LD_ADDR_VAR 0 2
35420: PUSH
35421: LD_INT 0
35423: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35424: LD_ADDR_VAR 0 3
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 437
35438: ST_TO_ADDR
// if task then
35439: LD_VAR 0 3
35443: IFFALSE 35471
// if task [ 1 ] [ 1 ] = p then
35445: LD_VAR 0 3
35449: PUSH
35450: LD_INT 1
35452: ARRAY
35453: PUSH
35454: LD_INT 1
35456: ARRAY
35457: PUSH
35458: LD_STRING p
35460: EQUAL
35461: IFFALSE 35471
// result := true ;
35463: LD_ADDR_VAR 0 2
35467: PUSH
35468: LD_INT 1
35470: ST_TO_ADDR
// end ;
35471: LD_VAR 0 2
35475: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35476: LD_INT 0
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
// if pos < 1 then
35482: LD_VAR 0 2
35486: PUSH
35487: LD_INT 1
35489: LESS
35490: IFFALSE 35494
// exit ;
35492: GO 35797
// if pos = 1 then
35494: LD_VAR 0 2
35498: PUSH
35499: LD_INT 1
35501: EQUAL
35502: IFFALSE 35535
// result := Replace ( arr , pos [ 1 ] , value ) else
35504: LD_ADDR_VAR 0 4
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: LD_VAR 0 2
35518: PUSH
35519: LD_INT 1
35521: ARRAY
35522: PPUSH
35523: LD_VAR 0 3
35527: PPUSH
35528: CALL_OW 1
35532: ST_TO_ADDR
35533: GO 35797
// begin tmp := arr ;
35535: LD_ADDR_VAR 0 6
35539: PUSH
35540: LD_VAR 0 1
35544: ST_TO_ADDR
// s_arr := [ tmp ] ;
35545: LD_ADDR_VAR 0 7
35549: PUSH
35550: LD_VAR 0 6
35554: PUSH
35555: EMPTY
35556: LIST
35557: ST_TO_ADDR
// for i = 1 to pos - 1 do
35558: LD_ADDR_VAR 0 5
35562: PUSH
35563: DOUBLE
35564: LD_INT 1
35566: DEC
35567: ST_TO_ADDR
35568: LD_VAR 0 2
35572: PUSH
35573: LD_INT 1
35575: MINUS
35576: PUSH
35577: FOR_TO
35578: IFFALSE 35623
// begin tmp := tmp [ pos [ i ] ] ;
35580: LD_ADDR_VAR 0 6
35584: PUSH
35585: LD_VAR 0 6
35589: PUSH
35590: LD_VAR 0 2
35594: PUSH
35595: LD_VAR 0 5
35599: ARRAY
35600: ARRAY
35601: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35602: LD_ADDR_VAR 0 7
35606: PUSH
35607: LD_VAR 0 7
35611: PUSH
35612: LD_VAR 0 6
35616: PUSH
35617: EMPTY
35618: LIST
35619: ADD
35620: ST_TO_ADDR
// end ;
35621: GO 35577
35623: POP
35624: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35625: LD_ADDR_VAR 0 6
35629: PUSH
35630: LD_VAR 0 6
35634: PPUSH
35635: LD_VAR 0 2
35639: PUSH
35640: LD_VAR 0 2
35644: ARRAY
35645: PPUSH
35646: LD_VAR 0 3
35650: PPUSH
35651: CALL_OW 1
35655: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35656: LD_ADDR_VAR 0 7
35660: PUSH
35661: LD_VAR 0 7
35665: PPUSH
35666: LD_VAR 0 7
35670: PPUSH
35671: LD_VAR 0 6
35675: PPUSH
35676: CALL_OW 1
35680: ST_TO_ADDR
// for i = s_arr downto 2 do
35681: LD_ADDR_VAR 0 5
35685: PUSH
35686: DOUBLE
35687: LD_VAR 0 7
35691: INC
35692: ST_TO_ADDR
35693: LD_INT 2
35695: PUSH
35696: FOR_DOWNTO
35697: IFFALSE 35781
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35699: LD_ADDR_VAR 0 6
35703: PUSH
35704: LD_VAR 0 7
35708: PUSH
35709: LD_VAR 0 5
35713: PUSH
35714: LD_INT 1
35716: MINUS
35717: ARRAY
35718: PPUSH
35719: LD_VAR 0 2
35723: PUSH
35724: LD_VAR 0 5
35728: PUSH
35729: LD_INT 1
35731: MINUS
35732: ARRAY
35733: PPUSH
35734: LD_VAR 0 7
35738: PUSH
35739: LD_VAR 0 5
35743: ARRAY
35744: PPUSH
35745: CALL_OW 1
35749: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35750: LD_ADDR_VAR 0 7
35754: PUSH
35755: LD_VAR 0 7
35759: PPUSH
35760: LD_VAR 0 5
35764: PUSH
35765: LD_INT 1
35767: MINUS
35768: PPUSH
35769: LD_VAR 0 6
35773: PPUSH
35774: CALL_OW 1
35778: ST_TO_ADDR
// end ;
35779: GO 35696
35781: POP
35782: POP
// result := s_arr [ 1 ] ;
35783: LD_ADDR_VAR 0 4
35787: PUSH
35788: LD_VAR 0 7
35792: PUSH
35793: LD_INT 1
35795: ARRAY
35796: ST_TO_ADDR
// end ; end ;
35797: LD_VAR 0 4
35801: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35802: LD_INT 0
35804: PPUSH
35805: PPUSH
// if not list then
35806: LD_VAR 0 1
35810: NOT
35811: IFFALSE 35815
// exit ;
35813: GO 35906
// i := list [ pos1 ] ;
35815: LD_ADDR_VAR 0 5
35819: PUSH
35820: LD_VAR 0 1
35824: PUSH
35825: LD_VAR 0 2
35829: ARRAY
35830: ST_TO_ADDR
// if not i then
35831: LD_VAR 0 5
35835: NOT
35836: IFFALSE 35840
// exit ;
35838: GO 35906
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35840: LD_ADDR_VAR 0 1
35844: PUSH
35845: LD_VAR 0 1
35849: PPUSH
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_VAR 0 1
35859: PUSH
35860: LD_VAR 0 3
35864: ARRAY
35865: PPUSH
35866: CALL_OW 1
35870: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35871: LD_ADDR_VAR 0 1
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: LD_VAR 0 3
35885: PPUSH
35886: LD_VAR 0 5
35890: PPUSH
35891: CALL_OW 1
35895: ST_TO_ADDR
// result := list ;
35896: LD_ADDR_VAR 0 4
35900: PUSH
35901: LD_VAR 0 1
35905: ST_TO_ADDR
// end ;
35906: LD_VAR 0 4
35910: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35911: LD_INT 0
35913: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35914: LD_ADDR_VAR 0 5
35918: PUSH
35919: LD_VAR 0 1
35923: PPUSH
35924: CALL_OW 250
35928: PPUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 251
35938: PPUSH
35939: LD_VAR 0 2
35943: PPUSH
35944: LD_VAR 0 3
35948: PPUSH
35949: LD_VAR 0 4
35953: PPUSH
35954: CALL 36332 0 5
35958: ST_TO_ADDR
// end ;
35959: LD_VAR 0 5
35963: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35964: LD_INT 0
35966: PPUSH
35967: PPUSH
35968: PPUSH
35969: PPUSH
// if not list or not unit then
35970: LD_VAR 0 2
35974: NOT
35975: PUSH
35976: LD_VAR 0 1
35980: NOT
35981: OR
35982: IFFALSE 35986
// exit ;
35984: GO 36327
// result := [ ] ;
35986: LD_ADDR_VAR 0 5
35990: PUSH
35991: EMPTY
35992: ST_TO_ADDR
// for i in list do
35993: LD_ADDR_VAR 0 6
35997: PUSH
35998: LD_VAR 0 2
36002: PUSH
36003: FOR_IN
36004: IFFALSE 36222
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36006: LD_ADDR_VAR 0 8
36010: PUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_VAR 0 6
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: PPUSH
36025: LD_VAR 0 6
36029: PUSH
36030: LD_INT 2
36032: ARRAY
36033: PPUSH
36034: CALL_OW 297
36038: ST_TO_ADDR
// if not Count ( result ) then
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL 32616 0 1
36048: NOT
36049: IFFALSE 36082
// begin result := Join ( result , [ i , tmp ] ) ;
36051: LD_ADDR_VAR 0 5
36055: PUSH
36056: LD_VAR 0 5
36060: PPUSH
36061: LD_VAR 0 6
36065: PUSH
36066: LD_VAR 0 8
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PPUSH
36075: CALL 68216 0 2
36079: ST_TO_ADDR
// continue ;
36080: GO 36003
// end ; if result [ result ] [ 2 ] <= tmp then
36082: LD_VAR 0 5
36086: PUSH
36087: LD_VAR 0 5
36091: ARRAY
36092: PUSH
36093: LD_INT 2
36095: ARRAY
36096: PUSH
36097: LD_VAR 0 8
36101: LESSEQUAL
36102: IFFALSE 36135
// result := Join ( result , [ i , tmp ] ) else
36104: LD_ADDR_VAR 0 5
36108: PUSH
36109: LD_VAR 0 5
36113: PPUSH
36114: LD_VAR 0 6
36118: PUSH
36119: LD_VAR 0 8
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PPUSH
36128: CALL 68216 0 2
36132: ST_TO_ADDR
36133: GO 36220
// begin for j := 1 to Count ( result ) do
36135: LD_ADDR_VAR 0 7
36139: PUSH
36140: DOUBLE
36141: LD_INT 1
36143: DEC
36144: ST_TO_ADDR
36145: LD_VAR 0 5
36149: PPUSH
36150: CALL 32616 0 1
36154: PUSH
36155: FOR_TO
36156: IFFALSE 36218
// begin if tmp < result [ j ] [ 2 ] then
36158: LD_VAR 0 8
36162: PUSH
36163: LD_VAR 0 5
36167: PUSH
36168: LD_VAR 0 7
36172: ARRAY
36173: PUSH
36174: LD_INT 2
36176: ARRAY
36177: LESS
36178: IFFALSE 36216
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: LD_VAR 0 5
36189: PPUSH
36190: LD_VAR 0 7
36194: PPUSH
36195: LD_VAR 0 6
36199: PUSH
36200: LD_VAR 0 8
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PPUSH
36209: CALL_OW 2
36213: ST_TO_ADDR
// break ;
36214: GO 36218
// end ; end ;
36216: GO 36155
36218: POP
36219: POP
// end ; end ;
36220: GO 36003
36222: POP
36223: POP
// if result and not asc then
36224: LD_VAR 0 5
36228: PUSH
36229: LD_VAR 0 3
36233: NOT
36234: AND
36235: IFFALSE 36252
// result := ReverseArray ( result ) ;
36237: LD_ADDR_VAR 0 5
36241: PUSH
36242: LD_VAR 0 5
36246: PPUSH
36247: CALL 63492 0 1
36251: ST_TO_ADDR
// tmp := [ ] ;
36252: LD_ADDR_VAR 0 8
36256: PUSH
36257: EMPTY
36258: ST_TO_ADDR
// if mode then
36259: LD_VAR 0 4
36263: IFFALSE 36327
// begin for i := 1 to result do
36265: LD_ADDR_VAR 0 6
36269: PUSH
36270: DOUBLE
36271: LD_INT 1
36273: DEC
36274: ST_TO_ADDR
36275: LD_VAR 0 5
36279: PUSH
36280: FOR_TO
36281: IFFALSE 36315
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36283: LD_ADDR_VAR 0 8
36287: PUSH
36288: LD_VAR 0 8
36292: PPUSH
36293: LD_VAR 0 5
36297: PUSH
36298: LD_VAR 0 6
36302: ARRAY
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PPUSH
36308: CALL 68216 0 2
36312: ST_TO_ADDR
36313: GO 36280
36315: POP
36316: POP
// result := tmp ;
36317: LD_ADDR_VAR 0 5
36321: PUSH
36322: LD_VAR 0 8
36326: ST_TO_ADDR
// end ; end ;
36327: LD_VAR 0 5
36331: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36332: LD_INT 0
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
// if not list then
36338: LD_VAR 0 3
36342: NOT
36343: IFFALSE 36347
// exit ;
36345: GO 36735
// result := [ ] ;
36347: LD_ADDR_VAR 0 6
36351: PUSH
36352: EMPTY
36353: ST_TO_ADDR
// for i in list do
36354: LD_ADDR_VAR 0 7
36358: PUSH
36359: LD_VAR 0 3
36363: PUSH
36364: FOR_IN
36365: IFFALSE 36567
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36367: LD_ADDR_VAR 0 9
36371: PUSH
36372: LD_VAR 0 7
36376: PPUSH
36377: LD_VAR 0 1
36381: PPUSH
36382: LD_VAR 0 2
36386: PPUSH
36387: CALL_OW 297
36391: ST_TO_ADDR
// if not result then
36392: LD_VAR 0 6
36396: NOT
36397: IFFALSE 36423
// result := [ [ i , tmp ] ] else
36399: LD_ADDR_VAR 0 6
36403: PUSH
36404: LD_VAR 0 7
36408: PUSH
36409: LD_VAR 0 9
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: EMPTY
36419: LIST
36420: ST_TO_ADDR
36421: GO 36565
// begin if result [ result ] [ 2 ] < tmp then
36423: LD_VAR 0 6
36427: PUSH
36428: LD_VAR 0 6
36432: ARRAY
36433: PUSH
36434: LD_INT 2
36436: ARRAY
36437: PUSH
36438: LD_VAR 0 9
36442: LESS
36443: IFFALSE 36485
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36445: LD_ADDR_VAR 0 6
36449: PUSH
36450: LD_VAR 0 6
36454: PPUSH
36455: LD_VAR 0 6
36459: PUSH
36460: LD_INT 1
36462: PLUS
36463: PPUSH
36464: LD_VAR 0 7
36468: PUSH
36469: LD_VAR 0 9
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PPUSH
36478: CALL_OW 2
36482: ST_TO_ADDR
36483: GO 36565
// for j = 1 to result do
36485: LD_ADDR_VAR 0 8
36489: PUSH
36490: DOUBLE
36491: LD_INT 1
36493: DEC
36494: ST_TO_ADDR
36495: LD_VAR 0 6
36499: PUSH
36500: FOR_TO
36501: IFFALSE 36563
// begin if tmp < result [ j ] [ 2 ] then
36503: LD_VAR 0 9
36507: PUSH
36508: LD_VAR 0 6
36512: PUSH
36513: LD_VAR 0 8
36517: ARRAY
36518: PUSH
36519: LD_INT 2
36521: ARRAY
36522: LESS
36523: IFFALSE 36561
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36525: LD_ADDR_VAR 0 6
36529: PUSH
36530: LD_VAR 0 6
36534: PPUSH
36535: LD_VAR 0 8
36539: PPUSH
36540: LD_VAR 0 7
36544: PUSH
36545: LD_VAR 0 9
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PPUSH
36554: CALL_OW 2
36558: ST_TO_ADDR
// break ;
36559: GO 36563
// end ; end ;
36561: GO 36500
36563: POP
36564: POP
// end ; end ;
36565: GO 36364
36567: POP
36568: POP
// if result and not asc then
36569: LD_VAR 0 6
36573: PUSH
36574: LD_VAR 0 4
36578: NOT
36579: AND
36580: IFFALSE 36655
// begin tmp := result ;
36582: LD_ADDR_VAR 0 9
36586: PUSH
36587: LD_VAR 0 6
36591: ST_TO_ADDR
// for i = tmp downto 1 do
36592: LD_ADDR_VAR 0 7
36596: PUSH
36597: DOUBLE
36598: LD_VAR 0 9
36602: INC
36603: ST_TO_ADDR
36604: LD_INT 1
36606: PUSH
36607: FOR_DOWNTO
36608: IFFALSE 36653
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36610: LD_ADDR_VAR 0 6
36614: PUSH
36615: LD_VAR 0 6
36619: PPUSH
36620: LD_VAR 0 9
36624: PUSH
36625: LD_VAR 0 7
36629: MINUS
36630: PUSH
36631: LD_INT 1
36633: PLUS
36634: PPUSH
36635: LD_VAR 0 9
36639: PUSH
36640: LD_VAR 0 7
36644: ARRAY
36645: PPUSH
36646: CALL_OW 1
36650: ST_TO_ADDR
36651: GO 36607
36653: POP
36654: POP
// end ; tmp := [ ] ;
36655: LD_ADDR_VAR 0 9
36659: PUSH
36660: EMPTY
36661: ST_TO_ADDR
// if mode then
36662: LD_VAR 0 5
36666: IFFALSE 36735
// begin for i = 1 to result do
36668: LD_ADDR_VAR 0 7
36672: PUSH
36673: DOUBLE
36674: LD_INT 1
36676: DEC
36677: ST_TO_ADDR
36678: LD_VAR 0 6
36682: PUSH
36683: FOR_TO
36684: IFFALSE 36723
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36686: LD_ADDR_VAR 0 9
36690: PUSH
36691: LD_VAR 0 9
36695: PPUSH
36696: LD_VAR 0 7
36700: PPUSH
36701: LD_VAR 0 6
36705: PUSH
36706: LD_VAR 0 7
36710: ARRAY
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: CALL_OW 1
36720: ST_TO_ADDR
36721: GO 36683
36723: POP
36724: POP
// result := tmp ;
36725: LD_ADDR_VAR 0 6
36729: PUSH
36730: LD_VAR 0 9
36734: ST_TO_ADDR
// end ; end ;
36735: LD_VAR 0 6
36739: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36740: LD_INT 0
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36748: LD_ADDR_VAR 0 5
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: EMPTY
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: ST_TO_ADDR
// if not x or not y then
36770: LD_VAR 0 2
36774: NOT
36775: PUSH
36776: LD_VAR 0 3
36780: NOT
36781: OR
36782: IFFALSE 36786
// exit ;
36784: GO 38436
// if not range then
36786: LD_VAR 0 4
36790: NOT
36791: IFFALSE 36801
// range := 10 ;
36793: LD_ADDR_VAR 0 4
36797: PUSH
36798: LD_INT 10
36800: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36801: LD_ADDR_VAR 0 8
36805: PUSH
36806: LD_INT 81
36808: PUSH
36809: LD_VAR 0 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 92
36820: PUSH
36821: LD_VAR 0 2
36825: PUSH
36826: LD_VAR 0 3
36830: PUSH
36831: LD_VAR 0 4
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: LD_INT 21
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: PPUSH
36864: CALL_OW 69
36868: ST_TO_ADDR
// if not tmp then
36869: LD_VAR 0 8
36873: NOT
36874: IFFALSE 36878
// exit ;
36876: GO 38436
// for i in tmp do
36878: LD_ADDR_VAR 0 6
36882: PUSH
36883: LD_VAR 0 8
36887: PUSH
36888: FOR_IN
36889: IFFALSE 38411
// begin points := [ 0 , 0 , 0 ] ;
36891: LD_ADDR_VAR 0 9
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// bpoints := 1 ;
36910: LD_ADDR_VAR 0 10
36914: PUSH
36915: LD_INT 1
36917: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36918: LD_VAR 0 6
36922: PPUSH
36923: CALL_OW 247
36927: PUSH
36928: LD_INT 1
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 37514
36936: POP
// begin if GetClass ( i ) = 1 then
36937: LD_VAR 0 6
36941: PPUSH
36942: CALL_OW 257
36946: PUSH
36947: LD_INT 1
36949: EQUAL
36950: IFFALSE 36971
// points := [ 10 , 5 , 3 ] ;
36952: LD_ADDR_VAR 0 9
36956: PUSH
36957: LD_INT 10
36959: PUSH
36960: LD_INT 5
36962: PUSH
36963: LD_INT 3
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36971: LD_VAR 0 6
36975: PPUSH
36976: CALL_OW 257
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: LD_INT 4
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: IN
36995: IFFALSE 37016
// points := [ 3 , 2 , 1 ] ;
36997: LD_ADDR_VAR 0 9
37001: PUSH
37002: LD_INT 3
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37016: LD_VAR 0 6
37020: PPUSH
37021: CALL_OW 257
37025: PUSH
37026: LD_INT 5
37028: EQUAL
37029: IFFALSE 37050
// points := [ 130 , 5 , 2 ] ;
37031: LD_ADDR_VAR 0 9
37035: PUSH
37036: LD_INT 130
37038: PUSH
37039: LD_INT 5
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37050: LD_VAR 0 6
37054: PPUSH
37055: CALL_OW 257
37059: PUSH
37060: LD_INT 8
37062: EQUAL
37063: IFFALSE 37084
// points := [ 35 , 35 , 30 ] ;
37065: LD_ADDR_VAR 0 9
37069: PUSH
37070: LD_INT 35
37072: PUSH
37073: LD_INT 35
37075: PUSH
37076: LD_INT 30
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37084: LD_VAR 0 6
37088: PPUSH
37089: CALL_OW 257
37093: PUSH
37094: LD_INT 9
37096: EQUAL
37097: IFFALSE 37118
// points := [ 20 , 55 , 40 ] ;
37099: LD_ADDR_VAR 0 9
37103: PUSH
37104: LD_INT 20
37106: PUSH
37107: LD_INT 55
37109: PUSH
37110: LD_INT 40
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37118: LD_VAR 0 6
37122: PPUSH
37123: CALL_OW 257
37127: PUSH
37128: LD_INT 12
37130: PUSH
37131: LD_INT 16
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: IN
37138: IFFALSE 37159
// points := [ 5 , 3 , 2 ] ;
37140: LD_ADDR_VAR 0 9
37144: PUSH
37145: LD_INT 5
37147: PUSH
37148: LD_INT 3
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37159: LD_VAR 0 6
37163: PPUSH
37164: CALL_OW 257
37168: PUSH
37169: LD_INT 17
37171: EQUAL
37172: IFFALSE 37193
// points := [ 100 , 50 , 75 ] ;
37174: LD_ADDR_VAR 0 9
37178: PUSH
37179: LD_INT 100
37181: PUSH
37182: LD_INT 50
37184: PUSH
37185: LD_INT 75
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37193: LD_VAR 0 6
37197: PPUSH
37198: CALL_OW 257
37202: PUSH
37203: LD_INT 15
37205: EQUAL
37206: IFFALSE 37227
// points := [ 10 , 5 , 3 ] ;
37208: LD_ADDR_VAR 0 9
37212: PUSH
37213: LD_INT 10
37215: PUSH
37216: LD_INT 5
37218: PUSH
37219: LD_INT 3
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37227: LD_VAR 0 6
37231: PPUSH
37232: CALL_OW 257
37236: PUSH
37237: LD_INT 14
37239: EQUAL
37240: IFFALSE 37261
// points := [ 10 , 0 , 0 ] ;
37242: LD_ADDR_VAR 0 9
37246: PUSH
37247: LD_INT 10
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37261: LD_VAR 0 6
37265: PPUSH
37266: CALL_OW 257
37270: PUSH
37271: LD_INT 11
37273: EQUAL
37274: IFFALSE 37295
// points := [ 30 , 10 , 5 ] ;
37276: LD_ADDR_VAR 0 9
37280: PUSH
37281: LD_INT 30
37283: PUSH
37284: LD_INT 10
37286: PUSH
37287: LD_INT 5
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_INT 5
37302: PPUSH
37303: CALL_OW 321
37307: PUSH
37308: LD_INT 2
37310: EQUAL
37311: IFFALSE 37328
// bpoints := bpoints * 1.8 ;
37313: LD_ADDR_VAR 0 10
37317: PUSH
37318: LD_VAR 0 10
37322: PUSH
37323: LD_REAL  1.80000000000000E+0000
37326: MUL
37327: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37328: LD_VAR 0 6
37332: PPUSH
37333: CALL_OW 257
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 3
37346: PUSH
37347: LD_INT 4
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: IN
37356: PUSH
37357: LD_VAR 0 1
37361: PPUSH
37362: LD_INT 51
37364: PPUSH
37365: CALL_OW 321
37369: PUSH
37370: LD_INT 2
37372: EQUAL
37373: AND
37374: IFFALSE 37391
// bpoints := bpoints * 1.2 ;
37376: LD_ADDR_VAR 0 10
37380: PUSH
37381: LD_VAR 0 10
37385: PUSH
37386: LD_REAL  1.20000000000000E+0000
37389: MUL
37390: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 257
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: LD_INT 7
37406: PUSH
37407: LD_INT 9
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: IN
37415: PUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_INT 52
37423: PPUSH
37424: CALL_OW 321
37428: PUSH
37429: LD_INT 2
37431: EQUAL
37432: AND
37433: IFFALSE 37450
// bpoints := bpoints * 1.5 ;
37435: LD_ADDR_VAR 0 10
37439: PUSH
37440: LD_VAR 0 10
37444: PUSH
37445: LD_REAL  1.50000000000000E+0000
37448: MUL
37449: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37450: LD_VAR 0 1
37454: PPUSH
37455: LD_INT 66
37457: PPUSH
37458: CALL_OW 321
37462: PUSH
37463: LD_INT 2
37465: EQUAL
37466: IFFALSE 37483
// bpoints := bpoints * 1.1 ;
37468: LD_ADDR_VAR 0 10
37472: PUSH
37473: LD_VAR 0 10
37477: PUSH
37478: LD_REAL  1.10000000000000E+0000
37481: MUL
37482: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37483: LD_ADDR_VAR 0 10
37487: PUSH
37488: LD_VAR 0 10
37492: PUSH
37493: LD_VAR 0 6
37497: PPUSH
37498: LD_INT 1
37500: PPUSH
37501: CALL_OW 259
37505: PUSH
37506: LD_REAL  1.15000000000000E+0000
37509: MUL
37510: MUL
37511: ST_TO_ADDR
// end ; unit_vehicle :
37512: GO 38340
37514: LD_INT 2
37516: DOUBLE
37517: EQUAL
37518: IFTRUE 37522
37520: GO 38328
37522: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37523: LD_VAR 0 6
37527: PPUSH
37528: CALL_OW 264
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: LD_INT 42
37538: PUSH
37539: LD_INT 24
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: IN
37547: IFFALSE 37568
// points := [ 25 , 5 , 3 ] ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_INT 25
37556: PUSH
37557: LD_INT 5
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 264
37577: PUSH
37578: LD_INT 4
37580: PUSH
37581: LD_INT 43
37583: PUSH
37584: LD_INT 25
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: IN
37592: IFFALSE 37613
// points := [ 40 , 15 , 5 ] ;
37594: LD_ADDR_VAR 0 9
37598: PUSH
37599: LD_INT 40
37601: PUSH
37602: LD_INT 15
37604: PUSH
37605: LD_INT 5
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37613: LD_VAR 0 6
37617: PPUSH
37618: CALL_OW 264
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: LD_INT 23
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: IN
37633: IFFALSE 37654
// points := [ 7 , 25 , 8 ] ;
37635: LD_ADDR_VAR 0 9
37639: PUSH
37640: LD_INT 7
37642: PUSH
37643: LD_INT 25
37645: PUSH
37646: LD_INT 8
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37654: LD_VAR 0 6
37658: PPUSH
37659: CALL_OW 264
37663: PUSH
37664: LD_INT 5
37666: PUSH
37667: LD_INT 27
37669: PUSH
37670: LD_INT 44
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: IN
37678: IFFALSE 37699
// points := [ 14 , 50 , 16 ] ;
37680: LD_ADDR_VAR 0 9
37684: PUSH
37685: LD_INT 14
37687: PUSH
37688: LD_INT 50
37690: PUSH
37691: LD_INT 16
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37699: LD_VAR 0 6
37703: PPUSH
37704: CALL_OW 264
37708: PUSH
37709: LD_INT 6
37711: PUSH
37712: LD_INT 46
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: IN
37719: IFFALSE 37740
// points := [ 32 , 120 , 70 ] ;
37721: LD_ADDR_VAR 0 9
37725: PUSH
37726: LD_INT 32
37728: PUSH
37729: LD_INT 120
37731: PUSH
37732: LD_INT 70
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37740: LD_VAR 0 6
37744: PPUSH
37745: CALL_OW 264
37749: PUSH
37750: LD_INT 7
37752: PUSH
37753: LD_INT 28
37755: PUSH
37756: LD_INT 45
37758: PUSH
37759: LD_INT 92
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: IN
37768: IFFALSE 37789
// points := [ 35 , 20 , 45 ] ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_INT 35
37777: PUSH
37778: LD_INT 20
37780: PUSH
37781: LD_INT 45
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37789: LD_VAR 0 6
37793: PPUSH
37794: CALL_OW 264
37798: PUSH
37799: LD_INT 47
37801: PUSH
37802: EMPTY
37803: LIST
37804: IN
37805: IFFALSE 37826
// points := [ 67 , 45 , 75 ] ;
37807: LD_ADDR_VAR 0 9
37811: PUSH
37812: LD_INT 67
37814: PUSH
37815: LD_INT 45
37817: PUSH
37818: LD_INT 75
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37826: LD_VAR 0 6
37830: PPUSH
37831: CALL_OW 264
37835: PUSH
37836: LD_INT 26
37838: PUSH
37839: EMPTY
37840: LIST
37841: IN
37842: IFFALSE 37863
// points := [ 120 , 30 , 80 ] ;
37844: LD_ADDR_VAR 0 9
37848: PUSH
37849: LD_INT 120
37851: PUSH
37852: LD_INT 30
37854: PUSH
37855: LD_INT 80
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37863: LD_VAR 0 6
37867: PPUSH
37868: CALL_OW 264
37872: PUSH
37873: LD_INT 22
37875: PUSH
37876: EMPTY
37877: LIST
37878: IN
37879: IFFALSE 37900
// points := [ 40 , 1 , 1 ] ;
37881: LD_ADDR_VAR 0 9
37885: PUSH
37886: LD_INT 40
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37900: LD_VAR 0 6
37904: PPUSH
37905: CALL_OW 264
37909: PUSH
37910: LD_INT 29
37912: PUSH
37913: EMPTY
37914: LIST
37915: IN
37916: IFFALSE 37937
// points := [ 70 , 200 , 400 ] ;
37918: LD_ADDR_VAR 0 9
37922: PUSH
37923: LD_INT 70
37925: PUSH
37926: LD_INT 200
37928: PUSH
37929: LD_INT 400
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37937: LD_VAR 0 6
37941: PPUSH
37942: CALL_OW 264
37946: PUSH
37947: LD_INT 14
37949: PUSH
37950: LD_INT 53
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: IN
37957: IFFALSE 37978
// points := [ 40 , 10 , 20 ] ;
37959: LD_ADDR_VAR 0 9
37963: PUSH
37964: LD_INT 40
37966: PUSH
37967: LD_INT 10
37969: PUSH
37970: LD_INT 20
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37978: LD_VAR 0 6
37982: PPUSH
37983: CALL_OW 264
37987: PUSH
37988: LD_INT 9
37990: PUSH
37991: EMPTY
37992: LIST
37993: IN
37994: IFFALSE 38015
// points := [ 5 , 70 , 20 ] ;
37996: LD_ADDR_VAR 0 9
38000: PUSH
38001: LD_INT 5
38003: PUSH
38004: LD_INT 70
38006: PUSH
38007: LD_INT 20
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38015: LD_VAR 0 6
38019: PPUSH
38020: CALL_OW 264
38024: PUSH
38025: LD_INT 10
38027: PUSH
38028: EMPTY
38029: LIST
38030: IN
38031: IFFALSE 38052
// points := [ 35 , 110 , 70 ] ;
38033: LD_ADDR_VAR 0 9
38037: PUSH
38038: LD_INT 35
38040: PUSH
38041: LD_INT 110
38043: PUSH
38044: LD_INT 70
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38052: LD_VAR 0 6
38056: PPUSH
38057: CALL_OW 265
38061: PUSH
38062: LD_INT 25
38064: EQUAL
38065: IFFALSE 38086
// points := [ 80 , 65 , 100 ] ;
38067: LD_ADDR_VAR 0 9
38071: PUSH
38072: LD_INT 80
38074: PUSH
38075: LD_INT 65
38077: PUSH
38078: LD_INT 100
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38086: LD_VAR 0 6
38090: PPUSH
38091: CALL_OW 263
38095: PUSH
38096: LD_INT 1
38098: EQUAL
38099: IFFALSE 38134
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38101: LD_ADDR_VAR 0 10
38105: PUSH
38106: LD_VAR 0 10
38110: PUSH
38111: LD_VAR 0 6
38115: PPUSH
38116: CALL_OW 311
38120: PPUSH
38121: LD_INT 3
38123: PPUSH
38124: CALL_OW 259
38128: PUSH
38129: LD_INT 4
38131: MUL
38132: MUL
38133: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38134: LD_VAR 0 6
38138: PPUSH
38139: CALL_OW 263
38143: PUSH
38144: LD_INT 2
38146: EQUAL
38147: IFFALSE 38198
// begin j := IsControledBy ( i ) ;
38149: LD_ADDR_VAR 0 7
38153: PUSH
38154: LD_VAR 0 6
38158: PPUSH
38159: CALL_OW 312
38163: ST_TO_ADDR
// if j then
38164: LD_VAR 0 7
38168: IFFALSE 38198
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38170: LD_ADDR_VAR 0 10
38174: PUSH
38175: LD_VAR 0 10
38179: PUSH
38180: LD_VAR 0 7
38184: PPUSH
38185: LD_INT 3
38187: PPUSH
38188: CALL_OW 259
38192: PUSH
38193: LD_INT 3
38195: MUL
38196: MUL
38197: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38198: LD_VAR 0 6
38202: PPUSH
38203: CALL_OW 264
38207: PUSH
38208: LD_INT 5
38210: PUSH
38211: LD_INT 6
38213: PUSH
38214: LD_INT 46
38216: PUSH
38217: LD_INT 44
38219: PUSH
38220: LD_INT 47
38222: PUSH
38223: LD_INT 45
38225: PUSH
38226: LD_INT 28
38228: PUSH
38229: LD_INT 7
38231: PUSH
38232: LD_INT 27
38234: PUSH
38235: LD_INT 29
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: IN
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_INT 52
38258: PPUSH
38259: CALL_OW 321
38263: PUSH
38264: LD_INT 2
38266: EQUAL
38267: AND
38268: IFFALSE 38285
// bpoints := bpoints * 1.2 ;
38270: LD_ADDR_VAR 0 10
38274: PUSH
38275: LD_VAR 0 10
38279: PUSH
38280: LD_REAL  1.20000000000000E+0000
38283: MUL
38284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38285: LD_VAR 0 6
38289: PPUSH
38290: CALL_OW 264
38294: PUSH
38295: LD_INT 6
38297: PUSH
38298: LD_INT 46
38300: PUSH
38301: LD_INT 47
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: IN
38309: IFFALSE 38326
// bpoints := bpoints * 1.2 ;
38311: LD_ADDR_VAR 0 10
38315: PUSH
38316: LD_VAR 0 10
38320: PUSH
38321: LD_REAL  1.20000000000000E+0000
38324: MUL
38325: ST_TO_ADDR
// end ; unit_building :
38326: GO 38340
38328: LD_INT 3
38330: DOUBLE
38331: EQUAL
38332: IFTRUE 38336
38334: GO 38339
38336: POP
// ; end ;
38337: GO 38340
38339: POP
// for j = 1 to 3 do
38340: LD_ADDR_VAR 0 7
38344: PUSH
38345: DOUBLE
38346: LD_INT 1
38348: DEC
38349: ST_TO_ADDR
38350: LD_INT 3
38352: PUSH
38353: FOR_TO
38354: IFFALSE 38407
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38356: LD_ADDR_VAR 0 5
38360: PUSH
38361: LD_VAR 0 5
38365: PPUSH
38366: LD_VAR 0 7
38370: PPUSH
38371: LD_VAR 0 5
38375: PUSH
38376: LD_VAR 0 7
38380: ARRAY
38381: PUSH
38382: LD_VAR 0 9
38386: PUSH
38387: LD_VAR 0 7
38391: ARRAY
38392: PUSH
38393: LD_VAR 0 10
38397: MUL
38398: PLUS
38399: PPUSH
38400: CALL_OW 1
38404: ST_TO_ADDR
38405: GO 38353
38407: POP
38408: POP
// end ;
38409: GO 36888
38411: POP
38412: POP
// result := Replace ( result , 4 , tmp ) ;
38413: LD_ADDR_VAR 0 5
38417: PUSH
38418: LD_VAR 0 5
38422: PPUSH
38423: LD_INT 4
38425: PPUSH
38426: LD_VAR 0 8
38430: PPUSH
38431: CALL_OW 1
38435: ST_TO_ADDR
// end ;
38436: LD_VAR 0 5
38440: RET
// export function DangerAtRange ( unit , range ) ; begin
38441: LD_INT 0
38443: PPUSH
// if not unit then
38444: LD_VAR 0 1
38448: NOT
38449: IFFALSE 38453
// exit ;
38451: GO 38498
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38453: LD_ADDR_VAR 0 3
38457: PUSH
38458: LD_VAR 0 1
38462: PPUSH
38463: CALL_OW 255
38467: PPUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 250
38477: PPUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: CALL_OW 251
38487: PPUSH
38488: LD_VAR 0 2
38492: PPUSH
38493: CALL 36740 0 4
38497: ST_TO_ADDR
// end ;
38498: LD_VAR 0 3
38502: RET
// export function DangerInArea ( side , area ) ; begin
38503: LD_INT 0
38505: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38506: LD_ADDR_VAR 0 3
38510: PUSH
38511: LD_VAR 0 2
38515: PPUSH
38516: LD_INT 81
38518: PUSH
38519: LD_VAR 0 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PPUSH
38528: CALL_OW 70
38532: ST_TO_ADDR
// end ;
38533: LD_VAR 0 3
38537: RET
// export function IsExtension ( b ) ; begin
38538: LD_INT 0
38540: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38541: LD_ADDR_VAR 0 2
38545: PUSH
38546: LD_VAR 0 1
38550: PUSH
38551: LD_INT 23
38553: PUSH
38554: LD_INT 20
38556: PUSH
38557: LD_INT 22
38559: PUSH
38560: LD_INT 17
38562: PUSH
38563: LD_INT 24
38565: PUSH
38566: LD_INT 21
38568: PUSH
38569: LD_INT 19
38571: PUSH
38572: LD_INT 16
38574: PUSH
38575: LD_INT 25
38577: PUSH
38578: LD_INT 18
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: IN
38593: ST_TO_ADDR
// end ;
38594: LD_VAR 0 2
38598: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
38603: PPUSH
// result := [ ] ;
38604: LD_ADDR_VAR 0 4
38608: PUSH
38609: EMPTY
38610: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_VAR 0 2
38620: PPUSH
38621: LD_INT 21
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PPUSH
38631: CALL_OW 70
38635: ST_TO_ADDR
// if not tmp then
38636: LD_VAR 0 5
38640: NOT
38641: IFFALSE 38645
// exit ;
38643: GO 38709
// if checkLink then
38645: LD_VAR 0 3
38649: IFFALSE 38699
// begin for i in tmp do
38651: LD_ADDR_VAR 0 6
38655: PUSH
38656: LD_VAR 0 5
38660: PUSH
38661: FOR_IN
38662: IFFALSE 38697
// if GetBase ( i ) <> base then
38664: LD_VAR 0 6
38668: PPUSH
38669: CALL_OW 274
38673: PUSH
38674: LD_VAR 0 1
38678: NONEQUAL
38679: IFFALSE 38695
// ComLinkToBase ( base , i ) ;
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_VAR 0 6
38690: PPUSH
38691: CALL_OW 169
38695: GO 38661
38697: POP
38698: POP
// end ; result := tmp ;
38699: LD_ADDR_VAR 0 4
38703: PUSH
38704: LD_VAR 0 5
38708: ST_TO_ADDR
// end ;
38709: LD_VAR 0 4
38713: RET
// export function ComComplete ( units , b ) ; var i ; begin
38714: LD_INT 0
38716: PPUSH
38717: PPUSH
// if not units then
38718: LD_VAR 0 1
38722: NOT
38723: IFFALSE 38727
// exit ;
38725: GO 38817
// for i in units do
38727: LD_ADDR_VAR 0 4
38731: PUSH
38732: LD_VAR 0 1
38736: PUSH
38737: FOR_IN
38738: IFFALSE 38815
// if BuildingStatus ( b ) = bs_build then
38740: LD_VAR 0 2
38744: PPUSH
38745: CALL_OW 461
38749: PUSH
38750: LD_INT 1
38752: EQUAL
38753: IFFALSE 38813
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38755: LD_VAR 0 4
38759: PPUSH
38760: LD_STRING h
38762: PUSH
38763: LD_VAR 0 2
38767: PPUSH
38768: CALL_OW 250
38772: PUSH
38773: LD_VAR 0 2
38777: PPUSH
38778: CALL_OW 251
38782: PUSH
38783: LD_VAR 0 2
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: PUSH
38806: EMPTY
38807: LIST
38808: PPUSH
38809: CALL_OW 446
38813: GO 38737
38815: POP
38816: POP
// end ;
38817: LD_VAR 0 3
38821: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38822: LD_INT 0
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38830: LD_VAR 0 1
38834: NOT
38835: PUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: CALL_OW 263
38845: PUSH
38846: LD_INT 2
38848: NONEQUAL
38849: OR
38850: IFFALSE 38854
// exit ;
38852: GO 39170
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38854: LD_ADDR_VAR 0 6
38858: PUSH
38859: LD_INT 22
38861: PUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: CALL_OW 255
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: LD_INT 30
38881: PUSH
38882: LD_INT 36
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 34
38891: PUSH
38892: LD_INT 31
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PPUSH
38908: CALL_OW 69
38912: ST_TO_ADDR
// if not tmp then
38913: LD_VAR 0 6
38917: NOT
38918: IFFALSE 38922
// exit ;
38920: GO 39170
// result := [ ] ;
38922: LD_ADDR_VAR 0 2
38926: PUSH
38927: EMPTY
38928: ST_TO_ADDR
// for i in tmp do
38929: LD_ADDR_VAR 0 3
38933: PUSH
38934: LD_VAR 0 6
38938: PUSH
38939: FOR_IN
38940: IFFALSE 39011
// begin t := UnitsInside ( i ) ;
38942: LD_ADDR_VAR 0 4
38946: PUSH
38947: LD_VAR 0 3
38951: PPUSH
38952: CALL_OW 313
38956: ST_TO_ADDR
// if t then
38957: LD_VAR 0 4
38961: IFFALSE 39009
// for j in t do
38963: LD_ADDR_VAR 0 7
38967: PUSH
38968: LD_VAR 0 4
38972: PUSH
38973: FOR_IN
38974: IFFALSE 39007
// result := Replace ( result , result + 1 , j ) ;
38976: LD_ADDR_VAR 0 2
38980: PUSH
38981: LD_VAR 0 2
38985: PPUSH
38986: LD_VAR 0 2
38990: PUSH
38991: LD_INT 1
38993: PLUS
38994: PPUSH
38995: LD_VAR 0 7
38999: PPUSH
39000: CALL_OW 1
39004: ST_TO_ADDR
39005: GO 38973
39007: POP
39008: POP
// end ;
39009: GO 38939
39011: POP
39012: POP
// if not result then
39013: LD_VAR 0 2
39017: NOT
39018: IFFALSE 39022
// exit ;
39020: GO 39170
// mech := result [ 1 ] ;
39022: LD_ADDR_VAR 0 5
39026: PUSH
39027: LD_VAR 0 2
39031: PUSH
39032: LD_INT 1
39034: ARRAY
39035: ST_TO_ADDR
// if result > 1 then
39036: LD_VAR 0 2
39040: PUSH
39041: LD_INT 1
39043: GREATER
39044: IFFALSE 39156
// begin for i = 2 to result do
39046: LD_ADDR_VAR 0 3
39050: PUSH
39051: DOUBLE
39052: LD_INT 2
39054: DEC
39055: ST_TO_ADDR
39056: LD_VAR 0 2
39060: PUSH
39061: FOR_TO
39062: IFFALSE 39154
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39064: LD_ADDR_VAR 0 4
39068: PUSH
39069: LD_VAR 0 2
39073: PUSH
39074: LD_VAR 0 3
39078: ARRAY
39079: PPUSH
39080: LD_INT 3
39082: PPUSH
39083: CALL_OW 259
39087: PUSH
39088: LD_VAR 0 2
39092: PUSH
39093: LD_VAR 0 3
39097: ARRAY
39098: PPUSH
39099: CALL_OW 432
39103: MINUS
39104: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39105: LD_VAR 0 4
39109: PUSH
39110: LD_VAR 0 5
39114: PPUSH
39115: LD_INT 3
39117: PPUSH
39118: CALL_OW 259
39122: PUSH
39123: LD_VAR 0 5
39127: PPUSH
39128: CALL_OW 432
39132: MINUS
39133: GREATEREQUAL
39134: IFFALSE 39152
// mech := result [ i ] ;
39136: LD_ADDR_VAR 0 5
39140: PUSH
39141: LD_VAR 0 2
39145: PUSH
39146: LD_VAR 0 3
39150: ARRAY
39151: ST_TO_ADDR
// end ;
39152: GO 39061
39154: POP
39155: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39156: LD_VAR 0 1
39160: PPUSH
39161: LD_VAR 0 5
39165: PPUSH
39166: CALL_OW 135
// end ;
39170: LD_VAR 0 2
39174: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39175: LD_INT 0
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
// result := [ ] ;
39190: LD_ADDR_VAR 0 7
39194: PUSH
39195: EMPTY
39196: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39197: LD_VAR 0 1
39201: PPUSH
39202: CALL_OW 266
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: IN
39217: NOT
39218: IFFALSE 39222
// exit ;
39220: GO 40856
// if name then
39222: LD_VAR 0 3
39226: IFFALSE 39242
// SetBName ( base_dep , name ) ;
39228: LD_VAR 0 1
39232: PPUSH
39233: LD_VAR 0 3
39237: PPUSH
39238: CALL_OW 500
// base := GetBase ( base_dep ) ;
39242: LD_ADDR_VAR 0 15
39246: PUSH
39247: LD_VAR 0 1
39251: PPUSH
39252: CALL_OW 274
39256: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39257: LD_ADDR_VAR 0 16
39261: PUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 255
39271: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39272: LD_ADDR_VAR 0 17
39276: PUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 248
39286: ST_TO_ADDR
// if sources then
39287: LD_VAR 0 5
39291: IFFALSE 39338
// for i = 1 to 3 do
39293: LD_ADDR_VAR 0 8
39297: PUSH
39298: DOUBLE
39299: LD_INT 1
39301: DEC
39302: ST_TO_ADDR
39303: LD_INT 3
39305: PUSH
39306: FOR_TO
39307: IFFALSE 39336
// AddResourceType ( base , i , sources [ i ] ) ;
39309: LD_VAR 0 15
39313: PPUSH
39314: LD_VAR 0 8
39318: PPUSH
39319: LD_VAR 0 5
39323: PUSH
39324: LD_VAR 0 8
39328: ARRAY
39329: PPUSH
39330: CALL_OW 276
39334: GO 39306
39336: POP
39337: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39338: LD_ADDR_VAR 0 18
39342: PUSH
39343: LD_VAR 0 15
39347: PPUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: LD_INT 1
39355: PPUSH
39356: CALL 38599 0 3
39360: ST_TO_ADDR
// InitHc ;
39361: CALL_OW 19
// InitUc ;
39365: CALL_OW 18
// uc_side := side ;
39369: LD_ADDR_OWVAR 20
39373: PUSH
39374: LD_VAR 0 16
39378: ST_TO_ADDR
// uc_nation := nation ;
39379: LD_ADDR_OWVAR 21
39383: PUSH
39384: LD_VAR 0 17
39388: ST_TO_ADDR
// if buildings then
39389: LD_VAR 0 18
39393: IFFALSE 40715
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39395: LD_ADDR_VAR 0 19
39399: PUSH
39400: LD_VAR 0 18
39404: PPUSH
39405: LD_INT 2
39407: PUSH
39408: LD_INT 30
39410: PUSH
39411: LD_INT 29
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 30
39420: PUSH
39421: LD_INT 30
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: PPUSH
39433: CALL_OW 72
39437: ST_TO_ADDR
// if tmp then
39438: LD_VAR 0 19
39442: IFFALSE 39490
// for i in tmp do
39444: LD_ADDR_VAR 0 8
39448: PUSH
39449: LD_VAR 0 19
39453: PUSH
39454: FOR_IN
39455: IFFALSE 39488
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39457: LD_VAR 0 8
39461: PPUSH
39462: CALL_OW 250
39466: PPUSH
39467: LD_VAR 0 8
39471: PPUSH
39472: CALL_OW 251
39476: PPUSH
39477: LD_VAR 0 16
39481: PPUSH
39482: CALL_OW 441
39486: GO 39454
39488: POP
39489: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39490: LD_VAR 0 18
39494: PPUSH
39495: LD_INT 2
39497: PUSH
39498: LD_INT 30
39500: PUSH
39501: LD_INT 32
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 30
39510: PUSH
39511: LD_INT 33
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: PPUSH
39523: CALL_OW 72
39527: IFFALSE 39615
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39529: LD_ADDR_VAR 0 8
39533: PUSH
39534: LD_VAR 0 18
39538: PPUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 30
39544: PUSH
39545: LD_INT 32
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 30
39554: PUSH
39555: LD_INT 33
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: LIST
39566: PPUSH
39567: CALL_OW 72
39571: PUSH
39572: FOR_IN
39573: IFFALSE 39613
// begin if not GetBWeapon ( i ) then
39575: LD_VAR 0 8
39579: PPUSH
39580: CALL_OW 269
39584: NOT
39585: IFFALSE 39611
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39587: LD_VAR 0 8
39591: PPUSH
39592: LD_VAR 0 8
39596: PPUSH
39597: LD_VAR 0 2
39601: PPUSH
39602: CALL 40861 0 2
39606: PPUSH
39607: CALL_OW 431
// end ;
39611: GO 39572
39613: POP
39614: POP
// end ; for i = 1 to personel do
39615: LD_ADDR_VAR 0 8
39619: PUSH
39620: DOUBLE
39621: LD_INT 1
39623: DEC
39624: ST_TO_ADDR
39625: LD_VAR 0 6
39629: PUSH
39630: FOR_TO
39631: IFFALSE 40695
// begin if i > 4 then
39633: LD_VAR 0 8
39637: PUSH
39638: LD_INT 4
39640: GREATER
39641: IFFALSE 39645
// break ;
39643: GO 40695
// case i of 1 :
39645: LD_VAR 0 8
39649: PUSH
39650: LD_INT 1
39652: DOUBLE
39653: EQUAL
39654: IFTRUE 39658
39656: GO 39738
39658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39659: LD_ADDR_VAR 0 12
39663: PUSH
39664: LD_VAR 0 18
39668: PPUSH
39669: LD_INT 22
39671: PUSH
39672: LD_VAR 0 16
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 58
39683: PUSH
39684: EMPTY
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 30
39692: PUSH
39693: LD_INT 32
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 30
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 30
39712: PUSH
39713: LD_INT 5
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: PPUSH
39731: CALL_OW 72
39735: ST_TO_ADDR
39736: GO 39960
39738: LD_INT 2
39740: DOUBLE
39741: EQUAL
39742: IFTRUE 39746
39744: GO 39808
39746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39747: LD_ADDR_VAR 0 12
39751: PUSH
39752: LD_VAR 0 18
39756: PPUSH
39757: LD_INT 22
39759: PUSH
39760: LD_VAR 0 16
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PPUSH
39801: CALL_OW 72
39805: ST_TO_ADDR
39806: GO 39960
39808: LD_INT 3
39810: DOUBLE
39811: EQUAL
39812: IFTRUE 39816
39814: GO 39878
39816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39817: LD_ADDR_VAR 0 12
39821: PUSH
39822: LD_VAR 0 18
39826: PPUSH
39827: LD_INT 22
39829: PUSH
39830: LD_VAR 0 16
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: LD_INT 30
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 30
39854: PUSH
39855: LD_INT 3
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PPUSH
39871: CALL_OW 72
39875: ST_TO_ADDR
39876: GO 39960
39878: LD_INT 4
39880: DOUBLE
39881: EQUAL
39882: IFTRUE 39886
39884: GO 39959
39886: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39887: LD_ADDR_VAR 0 12
39891: PUSH
39892: LD_VAR 0 18
39896: PPUSH
39897: LD_INT 22
39899: PUSH
39900: LD_VAR 0 16
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 30
39914: PUSH
39915: LD_INT 6
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 30
39924: PUSH
39925: LD_INT 7
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 30
39934: PUSH
39935: LD_INT 8
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PPUSH
39952: CALL_OW 72
39956: ST_TO_ADDR
39957: GO 39960
39959: POP
// if i = 1 then
39960: LD_VAR 0 8
39964: PUSH
39965: LD_INT 1
39967: EQUAL
39968: IFFALSE 40079
// begin tmp := [ ] ;
39970: LD_ADDR_VAR 0 19
39974: PUSH
39975: EMPTY
39976: ST_TO_ADDR
// for j in f do
39977: LD_ADDR_VAR 0 9
39981: PUSH
39982: LD_VAR 0 12
39986: PUSH
39987: FOR_IN
39988: IFFALSE 40061
// if GetBType ( j ) = b_bunker then
39990: LD_VAR 0 9
39994: PPUSH
39995: CALL_OW 266
39999: PUSH
40000: LD_INT 32
40002: EQUAL
40003: IFFALSE 40030
// tmp := Insert ( tmp , 1 , j ) else
40005: LD_ADDR_VAR 0 19
40009: PUSH
40010: LD_VAR 0 19
40014: PPUSH
40015: LD_INT 1
40017: PPUSH
40018: LD_VAR 0 9
40022: PPUSH
40023: CALL_OW 2
40027: ST_TO_ADDR
40028: GO 40059
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40030: LD_ADDR_VAR 0 19
40034: PUSH
40035: LD_VAR 0 19
40039: PPUSH
40040: LD_VAR 0 19
40044: PUSH
40045: LD_INT 1
40047: PLUS
40048: PPUSH
40049: LD_VAR 0 9
40053: PPUSH
40054: CALL_OW 2
40058: ST_TO_ADDR
40059: GO 39987
40061: POP
40062: POP
// if tmp then
40063: LD_VAR 0 19
40067: IFFALSE 40079
// f := tmp ;
40069: LD_ADDR_VAR 0 12
40073: PUSH
40074: LD_VAR 0 19
40078: ST_TO_ADDR
// end ; x := personel [ i ] ;
40079: LD_ADDR_VAR 0 13
40083: PUSH
40084: LD_VAR 0 6
40088: PUSH
40089: LD_VAR 0 8
40093: ARRAY
40094: ST_TO_ADDR
// if x = - 1 then
40095: LD_VAR 0 13
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: EQUAL
40104: IFFALSE 40313
// begin for j in f do
40106: LD_ADDR_VAR 0 9
40110: PUSH
40111: LD_VAR 0 12
40115: PUSH
40116: FOR_IN
40117: IFFALSE 40309
// repeat InitHc ;
40119: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40123: LD_VAR 0 9
40127: PPUSH
40128: CALL_OW 266
40132: PUSH
40133: LD_INT 5
40135: EQUAL
40136: IFFALSE 40206
// begin if UnitsInside ( j ) < 3 then
40138: LD_VAR 0 9
40142: PPUSH
40143: CALL_OW 313
40147: PUSH
40148: LD_INT 3
40150: LESS
40151: IFFALSE 40187
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40153: LD_INT 0
40155: PPUSH
40156: LD_INT 5
40158: PUSH
40159: LD_INT 8
40161: PUSH
40162: LD_INT 9
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: PUSH
40170: LD_VAR 0 17
40174: ARRAY
40175: PPUSH
40176: LD_VAR 0 4
40180: PPUSH
40181: CALL_OW 380
40185: GO 40204
// PrepareHuman ( false , i , skill ) ;
40187: LD_INT 0
40189: PPUSH
40190: LD_VAR 0 8
40194: PPUSH
40195: LD_VAR 0 4
40199: PPUSH
40200: CALL_OW 380
// end else
40204: GO 40223
// PrepareHuman ( false , i , skill ) ;
40206: LD_INT 0
40208: PPUSH
40209: LD_VAR 0 8
40213: PPUSH
40214: LD_VAR 0 4
40218: PPUSH
40219: CALL_OW 380
// un := CreateHuman ;
40223: LD_ADDR_VAR 0 14
40227: PUSH
40228: CALL_OW 44
40232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40233: LD_ADDR_VAR 0 7
40237: PUSH
40238: LD_VAR 0 7
40242: PPUSH
40243: LD_INT 1
40245: PPUSH
40246: LD_VAR 0 14
40250: PPUSH
40251: CALL_OW 2
40255: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40256: LD_VAR 0 14
40260: PPUSH
40261: LD_VAR 0 9
40265: PPUSH
40266: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40270: LD_VAR 0 9
40274: PPUSH
40275: CALL_OW 313
40279: PUSH
40280: LD_INT 6
40282: EQUAL
40283: PUSH
40284: LD_VAR 0 9
40288: PPUSH
40289: CALL_OW 266
40293: PUSH
40294: LD_INT 32
40296: PUSH
40297: LD_INT 31
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: IN
40304: OR
40305: IFFALSE 40119
40307: GO 40116
40309: POP
40310: POP
// end else
40311: GO 40693
// for j = 1 to x do
40313: LD_ADDR_VAR 0 9
40317: PUSH
40318: DOUBLE
40319: LD_INT 1
40321: DEC
40322: ST_TO_ADDR
40323: LD_VAR 0 13
40327: PUSH
40328: FOR_TO
40329: IFFALSE 40691
// begin InitHc ;
40331: CALL_OW 19
// if not f then
40335: LD_VAR 0 12
40339: NOT
40340: IFFALSE 40429
// begin PrepareHuman ( false , i , skill ) ;
40342: LD_INT 0
40344: PPUSH
40345: LD_VAR 0 8
40349: PPUSH
40350: LD_VAR 0 4
40354: PPUSH
40355: CALL_OW 380
// un := CreateHuman ;
40359: LD_ADDR_VAR 0 14
40363: PUSH
40364: CALL_OW 44
40368: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40369: LD_ADDR_VAR 0 7
40373: PUSH
40374: LD_VAR 0 7
40378: PPUSH
40379: LD_INT 1
40381: PPUSH
40382: LD_VAR 0 14
40386: PPUSH
40387: CALL_OW 2
40391: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40392: LD_VAR 0 14
40396: PPUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 250
40406: PPUSH
40407: LD_VAR 0 1
40411: PPUSH
40412: CALL_OW 251
40416: PPUSH
40417: LD_INT 10
40419: PPUSH
40420: LD_INT 0
40422: PPUSH
40423: CALL_OW 50
// continue ;
40427: GO 40328
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40429: LD_VAR 0 12
40433: PUSH
40434: LD_INT 1
40436: ARRAY
40437: PPUSH
40438: CALL_OW 313
40442: PUSH
40443: LD_VAR 0 12
40447: PUSH
40448: LD_INT 1
40450: ARRAY
40451: PPUSH
40452: CALL_OW 266
40456: PUSH
40457: LD_INT 32
40459: PUSH
40460: LD_INT 31
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: IN
40467: AND
40468: PUSH
40469: LD_VAR 0 12
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: PPUSH
40478: CALL_OW 313
40482: PUSH
40483: LD_INT 6
40485: EQUAL
40486: OR
40487: IFFALSE 40507
// f := Delete ( f , 1 ) ;
40489: LD_ADDR_VAR 0 12
40493: PUSH
40494: LD_VAR 0 12
40498: PPUSH
40499: LD_INT 1
40501: PPUSH
40502: CALL_OW 3
40506: ST_TO_ADDR
// if not f then
40507: LD_VAR 0 12
40511: NOT
40512: IFFALSE 40530
// begin x := x + 2 ;
40514: LD_ADDR_VAR 0 13
40518: PUSH
40519: LD_VAR 0 13
40523: PUSH
40524: LD_INT 2
40526: PLUS
40527: ST_TO_ADDR
// continue ;
40528: GO 40328
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40530: LD_VAR 0 12
40534: PUSH
40535: LD_INT 1
40537: ARRAY
40538: PPUSH
40539: CALL_OW 266
40543: PUSH
40544: LD_INT 5
40546: EQUAL
40547: IFFALSE 40621
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40549: LD_VAR 0 12
40553: PUSH
40554: LD_INT 1
40556: ARRAY
40557: PPUSH
40558: CALL_OW 313
40562: PUSH
40563: LD_INT 3
40565: LESS
40566: IFFALSE 40602
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40568: LD_INT 0
40570: PPUSH
40571: LD_INT 5
40573: PUSH
40574: LD_INT 8
40576: PUSH
40577: LD_INT 9
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: PUSH
40585: LD_VAR 0 17
40589: ARRAY
40590: PPUSH
40591: LD_VAR 0 4
40595: PPUSH
40596: CALL_OW 380
40600: GO 40619
// PrepareHuman ( false , i , skill ) ;
40602: LD_INT 0
40604: PPUSH
40605: LD_VAR 0 8
40609: PPUSH
40610: LD_VAR 0 4
40614: PPUSH
40615: CALL_OW 380
// end else
40619: GO 40638
// PrepareHuman ( false , i , skill ) ;
40621: LD_INT 0
40623: PPUSH
40624: LD_VAR 0 8
40628: PPUSH
40629: LD_VAR 0 4
40633: PPUSH
40634: CALL_OW 380
// un := CreateHuman ;
40638: LD_ADDR_VAR 0 14
40642: PUSH
40643: CALL_OW 44
40647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40648: LD_ADDR_VAR 0 7
40652: PUSH
40653: LD_VAR 0 7
40657: PPUSH
40658: LD_INT 1
40660: PPUSH
40661: LD_VAR 0 14
40665: PPUSH
40666: CALL_OW 2
40670: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40671: LD_VAR 0 14
40675: PPUSH
40676: LD_VAR 0 12
40680: PUSH
40681: LD_INT 1
40683: ARRAY
40684: PPUSH
40685: CALL_OW 52
// end ;
40689: GO 40328
40691: POP
40692: POP
// end ;
40693: GO 39630
40695: POP
40696: POP
// result := result ^ buildings ;
40697: LD_ADDR_VAR 0 7
40701: PUSH
40702: LD_VAR 0 7
40706: PUSH
40707: LD_VAR 0 18
40711: ADD
40712: ST_TO_ADDR
// end else
40713: GO 40856
// begin for i = 1 to personel do
40715: LD_ADDR_VAR 0 8
40719: PUSH
40720: DOUBLE
40721: LD_INT 1
40723: DEC
40724: ST_TO_ADDR
40725: LD_VAR 0 6
40729: PUSH
40730: FOR_TO
40731: IFFALSE 40854
// begin if i > 4 then
40733: LD_VAR 0 8
40737: PUSH
40738: LD_INT 4
40740: GREATER
40741: IFFALSE 40745
// break ;
40743: GO 40854
// x := personel [ i ] ;
40745: LD_ADDR_VAR 0 13
40749: PUSH
40750: LD_VAR 0 6
40754: PUSH
40755: LD_VAR 0 8
40759: ARRAY
40760: ST_TO_ADDR
// if x = - 1 then
40761: LD_VAR 0 13
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: EQUAL
40770: IFFALSE 40774
// continue ;
40772: GO 40730
// PrepareHuman ( false , i , skill ) ;
40774: LD_INT 0
40776: PPUSH
40777: LD_VAR 0 8
40781: PPUSH
40782: LD_VAR 0 4
40786: PPUSH
40787: CALL_OW 380
// un := CreateHuman ;
40791: LD_ADDR_VAR 0 14
40795: PUSH
40796: CALL_OW 44
40800: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40801: LD_VAR 0 14
40805: PPUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 250
40815: PPUSH
40816: LD_VAR 0 1
40820: PPUSH
40821: CALL_OW 251
40825: PPUSH
40826: LD_INT 10
40828: PPUSH
40829: LD_INT 0
40831: PPUSH
40832: CALL_OW 50
// result := result ^ un ;
40836: LD_ADDR_VAR 0 7
40840: PUSH
40841: LD_VAR 0 7
40845: PUSH
40846: LD_VAR 0 14
40850: ADD
40851: ST_TO_ADDR
// end ;
40852: GO 40730
40854: POP
40855: POP
// end ; end ;
40856: LD_VAR 0 7
40860: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40861: LD_INT 0
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
// result := false ;
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_INT 0
40886: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40887: LD_VAR 0 1
40891: NOT
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 266
40902: PUSH
40903: LD_INT 32
40905: PUSH
40906: LD_INT 33
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: IN
40913: NOT
40914: OR
40915: IFFALSE 40919
// exit ;
40917: GO 42028
// nat := GetNation ( tower ) ;
40919: LD_ADDR_VAR 0 12
40923: PUSH
40924: LD_VAR 0 1
40928: PPUSH
40929: CALL_OW 248
40933: ST_TO_ADDR
// side := GetSide ( tower ) ;
40934: LD_ADDR_VAR 0 16
40938: PUSH
40939: LD_VAR 0 1
40943: PPUSH
40944: CALL_OW 255
40948: ST_TO_ADDR
// x := GetX ( tower ) ;
40949: LD_ADDR_VAR 0 10
40953: PUSH
40954: LD_VAR 0 1
40958: PPUSH
40959: CALL_OW 250
40963: ST_TO_ADDR
// y := GetY ( tower ) ;
40964: LD_ADDR_VAR 0 11
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 251
40978: ST_TO_ADDR
// if not x or not y then
40979: LD_VAR 0 10
40983: NOT
40984: PUSH
40985: LD_VAR 0 11
40989: NOT
40990: OR
40991: IFFALSE 40995
// exit ;
40993: GO 42028
// weapon := 0 ;
40995: LD_ADDR_VAR 0 18
40999: PUSH
41000: LD_INT 0
41002: ST_TO_ADDR
// fac_list := [ ] ;
41003: LD_ADDR_VAR 0 17
41007: PUSH
41008: EMPTY
41009: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41010: LD_ADDR_VAR 0 6
41014: PUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 274
41024: PPUSH
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_INT 0
41032: PPUSH
41033: CALL 38599 0 3
41037: PPUSH
41038: LD_INT 30
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 72
41052: ST_TO_ADDR
// if not factories then
41053: LD_VAR 0 6
41057: NOT
41058: IFFALSE 41062
// exit ;
41060: GO 42028
// for i in factories do
41062: LD_ADDR_VAR 0 8
41066: PUSH
41067: LD_VAR 0 6
41071: PUSH
41072: FOR_IN
41073: IFFALSE 41098
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41075: LD_ADDR_VAR 0 17
41079: PUSH
41080: LD_VAR 0 17
41084: PUSH
41085: LD_VAR 0 8
41089: PPUSH
41090: CALL_OW 478
41094: UNION
41095: ST_TO_ADDR
41096: GO 41072
41098: POP
41099: POP
// if not fac_list then
41100: LD_VAR 0 17
41104: NOT
41105: IFFALSE 41109
// exit ;
41107: GO 42028
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41109: LD_ADDR_VAR 0 5
41113: PUSH
41114: LD_INT 4
41116: PUSH
41117: LD_INT 5
41119: PUSH
41120: LD_INT 9
41122: PUSH
41123: LD_INT 10
41125: PUSH
41126: LD_INT 6
41128: PUSH
41129: LD_INT 7
41131: PUSH
41132: LD_INT 11
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 27
41146: PUSH
41147: LD_INT 28
41149: PUSH
41150: LD_INT 26
41152: PUSH
41153: LD_INT 30
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 43
41164: PUSH
41165: LD_INT 44
41167: PUSH
41168: LD_INT 46
41170: PUSH
41171: LD_INT 45
41173: PUSH
41174: LD_INT 47
41176: PUSH
41177: LD_INT 49
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: PUSH
41193: LD_VAR 0 12
41197: ARRAY
41198: ST_TO_ADDR
// list := list isect fac_list ;
41199: LD_ADDR_VAR 0 5
41203: PUSH
41204: LD_VAR 0 5
41208: PUSH
41209: LD_VAR 0 17
41213: ISECT
41214: ST_TO_ADDR
// if not list then
41215: LD_VAR 0 5
41219: NOT
41220: IFFALSE 41224
// exit ;
41222: GO 42028
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41224: LD_VAR 0 12
41228: PUSH
41229: LD_INT 3
41231: EQUAL
41232: PUSH
41233: LD_INT 49
41235: PUSH
41236: LD_VAR 0 5
41240: IN
41241: AND
41242: PUSH
41243: LD_INT 31
41245: PPUSH
41246: LD_VAR 0 16
41250: PPUSH
41251: CALL_OW 321
41255: PUSH
41256: LD_INT 2
41258: EQUAL
41259: AND
41260: IFFALSE 41320
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41262: LD_INT 22
41264: PUSH
41265: LD_VAR 0 16
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 35
41276: PUSH
41277: LD_INT 49
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 91
41286: PUSH
41287: LD_VAR 0 1
41291: PUSH
41292: LD_INT 10
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: PPUSH
41305: CALL_OW 69
41309: NOT
41310: IFFALSE 41320
// weapon := ru_time_lapser ;
41312: LD_ADDR_VAR 0 18
41316: PUSH
41317: LD_INT 49
41319: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41320: LD_VAR 0 12
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: IN
41335: PUSH
41336: LD_INT 11
41338: PUSH
41339: LD_VAR 0 5
41343: IN
41344: PUSH
41345: LD_INT 30
41347: PUSH
41348: LD_VAR 0 5
41352: IN
41353: OR
41354: AND
41355: PUSH
41356: LD_INT 6
41358: PPUSH
41359: LD_VAR 0 16
41363: PPUSH
41364: CALL_OW 321
41368: PUSH
41369: LD_INT 2
41371: EQUAL
41372: AND
41373: IFFALSE 41538
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41375: LD_INT 22
41377: PUSH
41378: LD_VAR 0 16
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 35
41392: PUSH
41393: LD_INT 11
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 35
41402: PUSH
41403: LD_INT 30
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 91
41417: PUSH
41418: LD_VAR 0 1
41422: PUSH
41423: LD_INT 18
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: PPUSH
41436: CALL_OW 69
41440: NOT
41441: PUSH
41442: LD_INT 22
41444: PUSH
41445: LD_VAR 0 16
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 30
41459: PUSH
41460: LD_INT 32
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 30
41469: PUSH
41470: LD_INT 33
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 91
41484: PUSH
41485: LD_VAR 0 1
41489: PUSH
41490: LD_INT 12
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: PPUSH
41506: CALL_OW 69
41510: PUSH
41511: LD_INT 2
41513: GREATER
41514: AND
41515: IFFALSE 41538
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41517: LD_ADDR_VAR 0 18
41521: PUSH
41522: LD_INT 11
41524: PUSH
41525: LD_INT 30
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_VAR 0 12
41536: ARRAY
41537: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41538: LD_VAR 0 18
41542: NOT
41543: PUSH
41544: LD_INT 40
41546: PPUSH
41547: LD_VAR 0 16
41551: PPUSH
41552: CALL_OW 321
41556: PUSH
41557: LD_INT 2
41559: EQUAL
41560: AND
41561: PUSH
41562: LD_INT 7
41564: PUSH
41565: LD_VAR 0 5
41569: IN
41570: PUSH
41571: LD_INT 28
41573: PUSH
41574: LD_VAR 0 5
41578: IN
41579: OR
41580: PUSH
41581: LD_INT 45
41583: PUSH
41584: LD_VAR 0 5
41588: IN
41589: OR
41590: AND
41591: IFFALSE 41845
// begin hex := GetHexInfo ( x , y ) ;
41593: LD_ADDR_VAR 0 4
41597: PUSH
41598: LD_VAR 0 10
41602: PPUSH
41603: LD_VAR 0 11
41607: PPUSH
41608: CALL_OW 546
41612: ST_TO_ADDR
// if hex [ 1 ] then
41613: LD_VAR 0 4
41617: PUSH
41618: LD_INT 1
41620: ARRAY
41621: IFFALSE 41625
// exit ;
41623: GO 42028
// height := hex [ 2 ] ;
41625: LD_ADDR_VAR 0 15
41629: PUSH
41630: LD_VAR 0 4
41634: PUSH
41635: LD_INT 2
41637: ARRAY
41638: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41639: LD_ADDR_VAR 0 14
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 3
41652: PUSH
41653: LD_INT 5
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// for i in tmp do
41662: LD_ADDR_VAR 0 8
41666: PUSH
41667: LD_VAR 0 14
41671: PUSH
41672: FOR_IN
41673: IFFALSE 41843
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41675: LD_ADDR_VAR 0 9
41679: PUSH
41680: LD_VAR 0 10
41684: PPUSH
41685: LD_VAR 0 8
41689: PPUSH
41690: LD_INT 5
41692: PPUSH
41693: CALL_OW 272
41697: PUSH
41698: LD_VAR 0 11
41702: PPUSH
41703: LD_VAR 0 8
41707: PPUSH
41708: LD_INT 5
41710: PPUSH
41711: CALL_OW 273
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41720: LD_VAR 0 9
41724: PUSH
41725: LD_INT 1
41727: ARRAY
41728: PPUSH
41729: LD_VAR 0 9
41733: PUSH
41734: LD_INT 2
41736: ARRAY
41737: PPUSH
41738: CALL_OW 488
41742: IFFALSE 41841
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_VAR 0 9
41753: PUSH
41754: LD_INT 1
41756: ARRAY
41757: PPUSH
41758: LD_VAR 0 9
41762: PUSH
41763: LD_INT 2
41765: ARRAY
41766: PPUSH
41767: CALL_OW 546
41771: ST_TO_ADDR
// if hex [ 1 ] then
41772: LD_VAR 0 4
41776: PUSH
41777: LD_INT 1
41779: ARRAY
41780: IFFALSE 41784
// continue ;
41782: GO 41672
// h := hex [ 2 ] ;
41784: LD_ADDR_VAR 0 13
41788: PUSH
41789: LD_VAR 0 4
41793: PUSH
41794: LD_INT 2
41796: ARRAY
41797: ST_TO_ADDR
// if h + 7 < height then
41798: LD_VAR 0 13
41802: PUSH
41803: LD_INT 7
41805: PLUS
41806: PUSH
41807: LD_VAR 0 15
41811: LESS
41812: IFFALSE 41841
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41814: LD_ADDR_VAR 0 18
41818: PUSH
41819: LD_INT 7
41821: PUSH
41822: LD_INT 28
41824: PUSH
41825: LD_INT 45
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: PUSH
41833: LD_VAR 0 12
41837: ARRAY
41838: ST_TO_ADDR
// break ;
41839: GO 41843
// end ; end ; end ;
41841: GO 41672
41843: POP
41844: POP
// end ; if not weapon then
41845: LD_VAR 0 18
41849: NOT
41850: IFFALSE 41910
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41852: LD_ADDR_VAR 0 5
41856: PUSH
41857: LD_VAR 0 5
41861: PUSH
41862: LD_INT 11
41864: PUSH
41865: LD_INT 30
41867: PUSH
41868: LD_INT 49
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: DIFF
41876: ST_TO_ADDR
// if not list then
41877: LD_VAR 0 5
41881: NOT
41882: IFFALSE 41886
// exit ;
41884: GO 42028
// weapon := list [ rand ( 1 , list ) ] ;
41886: LD_ADDR_VAR 0 18
41890: PUSH
41891: LD_VAR 0 5
41895: PUSH
41896: LD_INT 1
41898: PPUSH
41899: LD_VAR 0 5
41903: PPUSH
41904: CALL_OW 12
41908: ARRAY
41909: ST_TO_ADDR
// end ; if weapon then
41910: LD_VAR 0 18
41914: IFFALSE 42028
// begin tmp := CostOfWeapon ( weapon ) ;
41916: LD_ADDR_VAR 0 14
41920: PUSH
41921: LD_VAR 0 18
41925: PPUSH
41926: CALL_OW 451
41930: ST_TO_ADDR
// j := GetBase ( tower ) ;
41931: LD_ADDR_VAR 0 9
41935: PUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 274
41945: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41946: LD_VAR 0 9
41950: PPUSH
41951: LD_INT 1
41953: PPUSH
41954: CALL_OW 275
41958: PUSH
41959: LD_VAR 0 14
41963: PUSH
41964: LD_INT 1
41966: ARRAY
41967: GREATEREQUAL
41968: PUSH
41969: LD_VAR 0 9
41973: PPUSH
41974: LD_INT 2
41976: PPUSH
41977: CALL_OW 275
41981: PUSH
41982: LD_VAR 0 14
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: GREATEREQUAL
41991: AND
41992: PUSH
41993: LD_VAR 0 9
41997: PPUSH
41998: LD_INT 3
42000: PPUSH
42001: CALL_OW 275
42005: PUSH
42006: LD_VAR 0 14
42010: PUSH
42011: LD_INT 3
42013: ARRAY
42014: GREATEREQUAL
42015: AND
42016: IFFALSE 42028
// result := weapon ;
42018: LD_ADDR_VAR 0 3
42022: PUSH
42023: LD_VAR 0 18
42027: ST_TO_ADDR
// end ; end ;
42028: LD_VAR 0 3
42032: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42033: LD_INT 0
42035: PPUSH
42036: PPUSH
// result := true ;
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_INT 1
42044: ST_TO_ADDR
// if array1 = array2 then
42045: LD_VAR 0 1
42049: PUSH
42050: LD_VAR 0 2
42054: EQUAL
42055: IFFALSE 42115
// begin for i = 1 to array1 do
42057: LD_ADDR_VAR 0 4
42061: PUSH
42062: DOUBLE
42063: LD_INT 1
42065: DEC
42066: ST_TO_ADDR
42067: LD_VAR 0 1
42071: PUSH
42072: FOR_TO
42073: IFFALSE 42111
// if array1 [ i ] <> array2 [ i ] then
42075: LD_VAR 0 1
42079: PUSH
42080: LD_VAR 0 4
42084: ARRAY
42085: PUSH
42086: LD_VAR 0 2
42090: PUSH
42091: LD_VAR 0 4
42095: ARRAY
42096: NONEQUAL
42097: IFFALSE 42109
// begin result := false ;
42099: LD_ADDR_VAR 0 3
42103: PUSH
42104: LD_INT 0
42106: ST_TO_ADDR
// break ;
42107: GO 42111
// end ;
42109: GO 42072
42111: POP
42112: POP
// end else
42113: GO 42123
// result := false ;
42115: LD_ADDR_VAR 0 3
42119: PUSH
42120: LD_INT 0
42122: ST_TO_ADDR
// end ;
42123: LD_VAR 0 3
42127: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42128: LD_INT 0
42130: PPUSH
42131: PPUSH
// if not array1 or not array2 then
42132: LD_VAR 0 1
42136: NOT
42137: PUSH
42138: LD_VAR 0 2
42142: NOT
42143: OR
42144: IFFALSE 42148
// exit ;
42146: GO 42212
// result := true ;
42148: LD_ADDR_VAR 0 3
42152: PUSH
42153: LD_INT 1
42155: ST_TO_ADDR
// for i = 1 to array1 do
42156: LD_ADDR_VAR 0 4
42160: PUSH
42161: DOUBLE
42162: LD_INT 1
42164: DEC
42165: ST_TO_ADDR
42166: LD_VAR 0 1
42170: PUSH
42171: FOR_TO
42172: IFFALSE 42210
// if array1 [ i ] <> array2 [ i ] then
42174: LD_VAR 0 1
42178: PUSH
42179: LD_VAR 0 4
42183: ARRAY
42184: PUSH
42185: LD_VAR 0 2
42189: PUSH
42190: LD_VAR 0 4
42194: ARRAY
42195: NONEQUAL
42196: IFFALSE 42208
// begin result := false ;
42198: LD_ADDR_VAR 0 3
42202: PUSH
42203: LD_INT 0
42205: ST_TO_ADDR
// break ;
42206: GO 42210
// end ;
42208: GO 42171
42210: POP
42211: POP
// end ;
42212: LD_VAR 0 3
42216: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42217: LD_INT 0
42219: PPUSH
42220: PPUSH
42221: PPUSH
// pom := GetBase ( fac ) ;
42222: LD_ADDR_VAR 0 5
42226: PUSH
42227: LD_VAR 0 1
42231: PPUSH
42232: CALL_OW 274
42236: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42237: LD_ADDR_VAR 0 4
42241: PUSH
42242: LD_VAR 0 2
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: PPUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_INT 2
42258: ARRAY
42259: PPUSH
42260: LD_VAR 0 2
42264: PUSH
42265: LD_INT 3
42267: ARRAY
42268: PPUSH
42269: LD_VAR 0 2
42273: PUSH
42274: LD_INT 4
42276: ARRAY
42277: PPUSH
42278: CALL_OW 449
42282: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_VAR 0 5
42292: PPUSH
42293: LD_INT 1
42295: PPUSH
42296: CALL_OW 275
42300: PUSH
42301: LD_VAR 0 4
42305: PUSH
42306: LD_INT 1
42308: ARRAY
42309: GREATEREQUAL
42310: PUSH
42311: LD_VAR 0 5
42315: PPUSH
42316: LD_INT 2
42318: PPUSH
42319: CALL_OW 275
42323: PUSH
42324: LD_VAR 0 4
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: GREATEREQUAL
42333: AND
42334: PUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: LD_INT 3
42342: PPUSH
42343: CALL_OW 275
42347: PUSH
42348: LD_VAR 0 4
42352: PUSH
42353: LD_INT 3
42355: ARRAY
42356: GREATEREQUAL
42357: AND
42358: ST_TO_ADDR
// end ;
42359: LD_VAR 0 3
42363: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42364: LD_INT 0
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
// pom := GetBase ( building ) ;
42370: LD_ADDR_VAR 0 3
42374: PUSH
42375: LD_VAR 0 1
42379: PPUSH
42380: CALL_OW 274
42384: ST_TO_ADDR
// if not pom then
42385: LD_VAR 0 3
42389: NOT
42390: IFFALSE 42394
// exit ;
42392: GO 42564
// btype := GetBType ( building ) ;
42394: LD_ADDR_VAR 0 5
42398: PUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 266
42408: ST_TO_ADDR
// if btype = b_armoury then
42409: LD_VAR 0 5
42413: PUSH
42414: LD_INT 4
42416: EQUAL
42417: IFFALSE 42427
// btype := b_barracks ;
42419: LD_ADDR_VAR 0 5
42423: PUSH
42424: LD_INT 5
42426: ST_TO_ADDR
// if btype = b_depot then
42427: LD_VAR 0 5
42431: PUSH
42432: LD_INT 0
42434: EQUAL
42435: IFFALSE 42445
// btype := b_warehouse ;
42437: LD_ADDR_VAR 0 5
42441: PUSH
42442: LD_INT 1
42444: ST_TO_ADDR
// if btype = b_workshop then
42445: LD_VAR 0 5
42449: PUSH
42450: LD_INT 2
42452: EQUAL
42453: IFFALSE 42463
// btype := b_factory ;
42455: LD_ADDR_VAR 0 5
42459: PUSH
42460: LD_INT 3
42462: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42463: LD_ADDR_VAR 0 4
42467: PUSH
42468: LD_VAR 0 5
42472: PPUSH
42473: LD_VAR 0 1
42477: PPUSH
42478: CALL_OW 248
42482: PPUSH
42483: CALL_OW 450
42487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42488: LD_ADDR_VAR 0 2
42492: PUSH
42493: LD_VAR 0 3
42497: PPUSH
42498: LD_INT 1
42500: PPUSH
42501: CALL_OW 275
42505: PUSH
42506: LD_VAR 0 4
42510: PUSH
42511: LD_INT 1
42513: ARRAY
42514: GREATEREQUAL
42515: PUSH
42516: LD_VAR 0 3
42520: PPUSH
42521: LD_INT 2
42523: PPUSH
42524: CALL_OW 275
42528: PUSH
42529: LD_VAR 0 4
42533: PUSH
42534: LD_INT 2
42536: ARRAY
42537: GREATEREQUAL
42538: AND
42539: PUSH
42540: LD_VAR 0 3
42544: PPUSH
42545: LD_INT 3
42547: PPUSH
42548: CALL_OW 275
42552: PUSH
42553: LD_VAR 0 4
42557: PUSH
42558: LD_INT 3
42560: ARRAY
42561: GREATEREQUAL
42562: AND
42563: ST_TO_ADDR
// end ;
42564: LD_VAR 0 2
42568: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42569: LD_INT 0
42571: PPUSH
42572: PPUSH
42573: PPUSH
// pom := GetBase ( building ) ;
42574: LD_ADDR_VAR 0 4
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: CALL_OW 274
42588: ST_TO_ADDR
// if not pom then
42589: LD_VAR 0 4
42593: NOT
42594: IFFALSE 42598
// exit ;
42596: GO 42699
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42598: LD_ADDR_VAR 0 5
42602: PUSH
42603: LD_VAR 0 2
42607: PPUSH
42608: LD_VAR 0 1
42612: PPUSH
42613: CALL_OW 248
42617: PPUSH
42618: CALL_OW 450
42622: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42623: LD_ADDR_VAR 0 3
42627: PUSH
42628: LD_VAR 0 4
42632: PPUSH
42633: LD_INT 1
42635: PPUSH
42636: CALL_OW 275
42640: PUSH
42641: LD_VAR 0 5
42645: PUSH
42646: LD_INT 1
42648: ARRAY
42649: GREATEREQUAL
42650: PUSH
42651: LD_VAR 0 4
42655: PPUSH
42656: LD_INT 2
42658: PPUSH
42659: CALL_OW 275
42663: PUSH
42664: LD_VAR 0 5
42668: PUSH
42669: LD_INT 2
42671: ARRAY
42672: GREATEREQUAL
42673: AND
42674: PUSH
42675: LD_VAR 0 4
42679: PPUSH
42680: LD_INT 3
42682: PPUSH
42683: CALL_OW 275
42687: PUSH
42688: LD_VAR 0 5
42692: PUSH
42693: LD_INT 3
42695: ARRAY
42696: GREATEREQUAL
42697: AND
42698: ST_TO_ADDR
// end ;
42699: LD_VAR 0 3
42703: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42704: LD_INT 0
42706: PPUSH
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
// result := false ;
42717: LD_ADDR_VAR 0 8
42721: PUSH
42722: LD_INT 0
42724: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42725: LD_VAR 0 5
42729: NOT
42730: PUSH
42731: LD_VAR 0 1
42735: NOT
42736: OR
42737: PUSH
42738: LD_VAR 0 2
42742: NOT
42743: OR
42744: PUSH
42745: LD_VAR 0 3
42749: NOT
42750: OR
42751: IFFALSE 42755
// exit ;
42753: GO 43569
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42755: LD_ADDR_VAR 0 14
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: LD_VAR 0 2
42769: PPUSH
42770: LD_VAR 0 3
42774: PPUSH
42775: LD_VAR 0 4
42779: PPUSH
42780: LD_VAR 0 5
42784: PUSH
42785: LD_INT 1
42787: ARRAY
42788: PPUSH
42789: CALL_OW 248
42793: PPUSH
42794: LD_INT 0
42796: PPUSH
42797: CALL 44822 0 6
42801: ST_TO_ADDR
// if not hexes then
42802: LD_VAR 0 14
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 43569
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42811: LD_ADDR_VAR 0 17
42815: PUSH
42816: LD_VAR 0 5
42820: PPUSH
42821: LD_INT 22
42823: PUSH
42824: LD_VAR 0 13
42828: PPUSH
42829: CALL_OW 255
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 30
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 30
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PPUSH
42870: CALL_OW 72
42874: ST_TO_ADDR
// for i = 1 to hexes do
42875: LD_ADDR_VAR 0 9
42879: PUSH
42880: DOUBLE
42881: LD_INT 1
42883: DEC
42884: ST_TO_ADDR
42885: LD_VAR 0 14
42889: PUSH
42890: FOR_TO
42891: IFFALSE 43567
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42893: LD_ADDR_VAR 0 13
42897: PUSH
42898: LD_VAR 0 14
42902: PUSH
42903: LD_VAR 0 9
42907: ARRAY
42908: PUSH
42909: LD_INT 1
42911: ARRAY
42912: PPUSH
42913: LD_VAR 0 14
42917: PUSH
42918: LD_VAR 0 9
42922: ARRAY
42923: PUSH
42924: LD_INT 2
42926: ARRAY
42927: PPUSH
42928: CALL_OW 428
42932: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42933: LD_VAR 0 14
42937: PUSH
42938: LD_VAR 0 9
42942: ARRAY
42943: PUSH
42944: LD_INT 1
42946: ARRAY
42947: PPUSH
42948: LD_VAR 0 14
42952: PUSH
42953: LD_VAR 0 9
42957: ARRAY
42958: PUSH
42959: LD_INT 2
42961: ARRAY
42962: PPUSH
42963: CALL_OW 351
42967: PUSH
42968: LD_VAR 0 14
42972: PUSH
42973: LD_VAR 0 9
42977: ARRAY
42978: PUSH
42979: LD_INT 1
42981: ARRAY
42982: PPUSH
42983: LD_VAR 0 14
42987: PUSH
42988: LD_VAR 0 9
42992: ARRAY
42993: PUSH
42994: LD_INT 2
42996: ARRAY
42997: PPUSH
42998: CALL_OW 488
43002: NOT
43003: OR
43004: PUSH
43005: LD_VAR 0 13
43009: PPUSH
43010: CALL_OW 247
43014: PUSH
43015: LD_INT 3
43017: EQUAL
43018: OR
43019: IFFALSE 43025
// exit ;
43021: POP
43022: POP
43023: GO 43569
// if not tmp then
43025: LD_VAR 0 13
43029: NOT
43030: IFFALSE 43034
// continue ;
43032: GO 42890
// result := true ;
43034: LD_ADDR_VAR 0 8
43038: PUSH
43039: LD_INT 1
43041: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43042: LD_VAR 0 6
43046: PUSH
43047: LD_VAR 0 13
43051: PPUSH
43052: CALL_OW 247
43056: PUSH
43057: LD_INT 2
43059: EQUAL
43060: AND
43061: PUSH
43062: LD_VAR 0 13
43066: PPUSH
43067: CALL_OW 263
43071: PUSH
43072: LD_INT 1
43074: EQUAL
43075: AND
43076: IFFALSE 43240
// begin if IsDrivenBy ( tmp ) then
43078: LD_VAR 0 13
43082: PPUSH
43083: CALL_OW 311
43087: IFFALSE 43091
// continue ;
43089: GO 42890
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43091: LD_VAR 0 6
43095: PPUSH
43096: LD_INT 3
43098: PUSH
43099: LD_INT 60
43101: PUSH
43102: EMPTY
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: LD_INT 55
43114: PUSH
43115: EMPTY
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PPUSH
43126: CALL_OW 72
43130: IFFALSE 43238
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43132: LD_ADDR_VAR 0 18
43136: PUSH
43137: LD_VAR 0 6
43141: PPUSH
43142: LD_INT 3
43144: PUSH
43145: LD_INT 60
43147: PUSH
43148: EMPTY
43149: LIST
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: LD_INT 55
43160: PUSH
43161: EMPTY
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PPUSH
43172: CALL_OW 72
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: ST_TO_ADDR
// if IsInUnit ( driver ) then
43181: LD_VAR 0 18
43185: PPUSH
43186: CALL_OW 310
43190: IFFALSE 43201
// ComExit ( driver ) ;
43192: LD_VAR 0 18
43196: PPUSH
43197: CALL 68614 0 1
// AddComEnterUnit ( driver , tmp ) ;
43201: LD_VAR 0 18
43205: PPUSH
43206: LD_VAR 0 13
43210: PPUSH
43211: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43215: LD_VAR 0 18
43219: PPUSH
43220: LD_VAR 0 7
43224: PPUSH
43225: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43229: LD_VAR 0 18
43233: PPUSH
43234: CALL_OW 181
// end ; continue ;
43238: GO 42890
// end ; if not cleaners or not tmp in cleaners then
43240: LD_VAR 0 6
43244: NOT
43245: PUSH
43246: LD_VAR 0 13
43250: PUSH
43251: LD_VAR 0 6
43255: IN
43256: NOT
43257: OR
43258: IFFALSE 43565
// begin if dep then
43260: LD_VAR 0 17
43264: IFFALSE 43400
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43266: LD_ADDR_VAR 0 16
43270: PUSH
43271: LD_VAR 0 17
43275: PUSH
43276: LD_INT 1
43278: ARRAY
43279: PPUSH
43280: CALL_OW 250
43284: PPUSH
43285: LD_VAR 0 17
43289: PUSH
43290: LD_INT 1
43292: ARRAY
43293: PPUSH
43294: CALL_OW 254
43298: PPUSH
43299: LD_INT 5
43301: PPUSH
43302: CALL_OW 272
43306: PUSH
43307: LD_VAR 0 17
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PPUSH
43316: CALL_OW 251
43320: PPUSH
43321: LD_VAR 0 17
43325: PUSH
43326: LD_INT 1
43328: ARRAY
43329: PPUSH
43330: CALL_OW 254
43334: PPUSH
43335: LD_INT 5
43337: PPUSH
43338: CALL_OW 273
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43347: LD_VAR 0 16
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: PPUSH
43356: LD_VAR 0 16
43360: PUSH
43361: LD_INT 2
43363: ARRAY
43364: PPUSH
43365: CALL_OW 488
43369: IFFALSE 43400
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43371: LD_VAR 0 13
43375: PPUSH
43376: LD_VAR 0 16
43380: PUSH
43381: LD_INT 1
43383: ARRAY
43384: PPUSH
43385: LD_VAR 0 16
43389: PUSH
43390: LD_INT 2
43392: ARRAY
43393: PPUSH
43394: CALL_OW 111
// continue ;
43398: GO 42890
// end ; end ; r := GetDir ( tmp ) ;
43400: LD_ADDR_VAR 0 15
43404: PUSH
43405: LD_VAR 0 13
43409: PPUSH
43410: CALL_OW 254
43414: ST_TO_ADDR
// if r = 5 then
43415: LD_VAR 0 15
43419: PUSH
43420: LD_INT 5
43422: EQUAL
43423: IFFALSE 43433
// r := 0 ;
43425: LD_ADDR_VAR 0 15
43429: PUSH
43430: LD_INT 0
43432: ST_TO_ADDR
// for j = r to 5 do
43433: LD_ADDR_VAR 0 10
43437: PUSH
43438: DOUBLE
43439: LD_VAR 0 15
43443: DEC
43444: ST_TO_ADDR
43445: LD_INT 5
43447: PUSH
43448: FOR_TO
43449: IFFALSE 43563
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43451: LD_ADDR_VAR 0 11
43455: PUSH
43456: LD_VAR 0 13
43460: PPUSH
43461: CALL_OW 250
43465: PPUSH
43466: LD_VAR 0 10
43470: PPUSH
43471: LD_INT 2
43473: PPUSH
43474: CALL_OW 272
43478: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43479: LD_ADDR_VAR 0 12
43483: PUSH
43484: LD_VAR 0 13
43488: PPUSH
43489: CALL_OW 251
43493: PPUSH
43494: LD_VAR 0 10
43498: PPUSH
43499: LD_INT 2
43501: PPUSH
43502: CALL_OW 273
43506: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43507: LD_VAR 0 11
43511: PPUSH
43512: LD_VAR 0 12
43516: PPUSH
43517: CALL_OW 488
43521: PUSH
43522: LD_VAR 0 11
43526: PPUSH
43527: LD_VAR 0 12
43531: PPUSH
43532: CALL_OW 428
43536: NOT
43537: AND
43538: IFFALSE 43561
// begin ComMoveXY ( tmp , _x , _y ) ;
43540: LD_VAR 0 13
43544: PPUSH
43545: LD_VAR 0 11
43549: PPUSH
43550: LD_VAR 0 12
43554: PPUSH
43555: CALL_OW 111
// break ;
43559: GO 43563
// end ; end ;
43561: GO 43448
43563: POP
43564: POP
// end ; end ;
43565: GO 42890
43567: POP
43568: POP
// end ;
43569: LD_VAR 0 8
43573: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43574: LD_INT 0
43576: PPUSH
// result := true ;
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 1
43584: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43585: LD_VAR 0 2
43589: PUSH
43590: LD_INT 24
43592: DOUBLE
43593: EQUAL
43594: IFTRUE 43604
43596: LD_INT 33
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43604
43602: GO 43629
43604: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: LD_INT 32
43612: PPUSH
43613: LD_VAR 0 1
43617: PPUSH
43618: CALL_OW 321
43622: PUSH
43623: LD_INT 2
43625: EQUAL
43626: ST_TO_ADDR
43627: GO 43945
43629: LD_INT 20
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43662
43637: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: LD_INT 6
43645: PPUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 321
43655: PUSH
43656: LD_INT 2
43658: EQUAL
43659: ST_TO_ADDR
43660: GO 43945
43662: LD_INT 22
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43676
43668: LD_INT 36
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43676
43674: GO 43701
43676: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_INT 15
43684: PPUSH
43685: LD_VAR 0 1
43689: PPUSH
43690: CALL_OW 321
43694: PUSH
43695: LD_INT 2
43697: EQUAL
43698: ST_TO_ADDR
43699: GO 43945
43701: LD_INT 30
43703: DOUBLE
43704: EQUAL
43705: IFTRUE 43709
43707: GO 43734
43709: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43710: LD_ADDR_VAR 0 3
43714: PUSH
43715: LD_INT 20
43717: PPUSH
43718: LD_VAR 0 1
43722: PPUSH
43723: CALL_OW 321
43727: PUSH
43728: LD_INT 2
43730: EQUAL
43731: ST_TO_ADDR
43732: GO 43945
43734: LD_INT 28
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43748
43740: LD_INT 21
43742: DOUBLE
43743: EQUAL
43744: IFTRUE 43748
43746: GO 43773
43748: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: LD_INT 21
43756: PPUSH
43757: LD_VAR 0 1
43761: PPUSH
43762: CALL_OW 321
43766: PUSH
43767: LD_INT 2
43769: EQUAL
43770: ST_TO_ADDR
43771: GO 43945
43773: LD_INT 16
43775: DOUBLE
43776: EQUAL
43777: IFTRUE 43781
43779: GO 43806
43781: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43782: LD_ADDR_VAR 0 3
43786: PUSH
43787: LD_INT 84
43789: PPUSH
43790: LD_VAR 0 1
43794: PPUSH
43795: CALL_OW 321
43799: PUSH
43800: LD_INT 2
43802: EQUAL
43803: ST_TO_ADDR
43804: GO 43945
43806: LD_INT 19
43808: DOUBLE
43809: EQUAL
43810: IFTRUE 43820
43812: LD_INT 23
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43820
43818: GO 43845
43820: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_INT 83
43828: PPUSH
43829: LD_VAR 0 1
43833: PPUSH
43834: CALL_OW 321
43838: PUSH
43839: LD_INT 2
43841: EQUAL
43842: ST_TO_ADDR
43843: GO 43945
43845: LD_INT 17
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43853
43851: GO 43878
43853: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_INT 39
43861: PPUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 321
43871: PUSH
43872: LD_INT 2
43874: EQUAL
43875: ST_TO_ADDR
43876: GO 43945
43878: LD_INT 18
43880: DOUBLE
43881: EQUAL
43882: IFTRUE 43886
43884: GO 43911
43886: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43887: LD_ADDR_VAR 0 3
43891: PUSH
43892: LD_INT 40
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 321
43904: PUSH
43905: LD_INT 2
43907: EQUAL
43908: ST_TO_ADDR
43909: GO 43945
43911: LD_INT 27
43913: DOUBLE
43914: EQUAL
43915: IFTRUE 43919
43917: GO 43944
43919: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_INT 35
43927: PPUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 321
43937: PUSH
43938: LD_INT 2
43940: EQUAL
43941: ST_TO_ADDR
43942: GO 43945
43944: POP
// end ;
43945: LD_VAR 0 3
43949: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43950: LD_INT 0
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
// result := false ;
43963: LD_ADDR_VAR 0 6
43967: PUSH
43968: LD_INT 0
43970: ST_TO_ADDR
// if btype = b_depot then
43971: LD_VAR 0 2
43975: PUSH
43976: LD_INT 0
43978: EQUAL
43979: IFFALSE 43991
// begin result := true ;
43981: LD_ADDR_VAR 0 6
43985: PUSH
43986: LD_INT 1
43988: ST_TO_ADDR
// exit ;
43989: GO 44817
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43991: LD_VAR 0 1
43995: NOT
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 266
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: IN
44017: NOT
44018: OR
44019: PUSH
44020: LD_VAR 0 2
44024: NOT
44025: OR
44026: PUSH
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 4
44046: PUSH
44047: LD_INT 5
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: IN
44058: NOT
44059: OR
44060: PUSH
44061: LD_VAR 0 3
44065: PPUSH
44066: LD_VAR 0 4
44070: PPUSH
44071: CALL_OW 488
44075: NOT
44076: OR
44077: IFFALSE 44081
// exit ;
44079: GO 44817
// side := GetSide ( depot ) ;
44081: LD_ADDR_VAR 0 9
44085: PUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 255
44095: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44096: LD_VAR 0 9
44100: PPUSH
44101: LD_VAR 0 2
44105: PPUSH
44106: CALL 43574 0 2
44110: NOT
44111: IFFALSE 44115
// exit ;
44113: GO 44817
// pom := GetBase ( depot ) ;
44115: LD_ADDR_VAR 0 10
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 274
44129: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44130: LD_ADDR_VAR 0 11
44134: PUSH
44135: LD_VAR 0 2
44139: PPUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 248
44149: PPUSH
44150: CALL_OW 450
44154: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44155: LD_VAR 0 10
44159: PPUSH
44160: LD_INT 1
44162: PPUSH
44163: CALL_OW 275
44167: PUSH
44168: LD_VAR 0 11
44172: PUSH
44173: LD_INT 1
44175: ARRAY
44176: GREATEREQUAL
44177: PUSH
44178: LD_VAR 0 10
44182: PPUSH
44183: LD_INT 2
44185: PPUSH
44186: CALL_OW 275
44190: PUSH
44191: LD_VAR 0 11
44195: PUSH
44196: LD_INT 2
44198: ARRAY
44199: GREATEREQUAL
44200: AND
44201: PUSH
44202: LD_VAR 0 10
44206: PPUSH
44207: LD_INT 3
44209: PPUSH
44210: CALL_OW 275
44214: PUSH
44215: LD_VAR 0 11
44219: PUSH
44220: LD_INT 3
44222: ARRAY
44223: GREATEREQUAL
44224: AND
44225: NOT
44226: IFFALSE 44230
// exit ;
44228: GO 44817
// if GetBType ( depot ) = b_depot then
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 266
44239: PUSH
44240: LD_INT 0
44242: EQUAL
44243: IFFALSE 44255
// dist := 28 else
44245: LD_ADDR_VAR 0 14
44249: PUSH
44250: LD_INT 28
44252: ST_TO_ADDR
44253: GO 44263
// dist := 36 ;
44255: LD_ADDR_VAR 0 14
44259: PUSH
44260: LD_INT 36
44262: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44263: LD_VAR 0 1
44267: PPUSH
44268: LD_VAR 0 3
44272: PPUSH
44273: LD_VAR 0 4
44277: PPUSH
44278: CALL_OW 297
44282: PUSH
44283: LD_VAR 0 14
44287: GREATER
44288: IFFALSE 44292
// exit ;
44290: GO 44817
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44292: LD_ADDR_VAR 0 12
44296: PUSH
44297: LD_VAR 0 2
44301: PPUSH
44302: LD_VAR 0 3
44306: PPUSH
44307: LD_VAR 0 4
44311: PPUSH
44312: LD_VAR 0 5
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 248
44326: PPUSH
44327: LD_INT 0
44329: PPUSH
44330: CALL 44822 0 6
44334: ST_TO_ADDR
// if not hexes then
44335: LD_VAR 0 12
44339: NOT
44340: IFFALSE 44344
// exit ;
44342: GO 44817
// hex := GetHexInfo ( x , y ) ;
44344: LD_ADDR_VAR 0 15
44348: PUSH
44349: LD_VAR 0 3
44353: PPUSH
44354: LD_VAR 0 4
44358: PPUSH
44359: CALL_OW 546
44363: ST_TO_ADDR
// if hex [ 1 ] then
44364: LD_VAR 0 15
44368: PUSH
44369: LD_INT 1
44371: ARRAY
44372: IFFALSE 44376
// exit ;
44374: GO 44817
// height := hex [ 2 ] ;
44376: LD_ADDR_VAR 0 13
44380: PUSH
44381: LD_VAR 0 15
44385: PUSH
44386: LD_INT 2
44388: ARRAY
44389: ST_TO_ADDR
// for i = 1 to hexes do
44390: LD_ADDR_VAR 0 7
44394: PUSH
44395: DOUBLE
44396: LD_INT 1
44398: DEC
44399: ST_TO_ADDR
44400: LD_VAR 0 12
44404: PUSH
44405: FOR_TO
44406: IFFALSE 44736
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44408: LD_VAR 0 12
44412: PUSH
44413: LD_VAR 0 7
44417: ARRAY
44418: PUSH
44419: LD_INT 1
44421: ARRAY
44422: PPUSH
44423: LD_VAR 0 12
44427: PUSH
44428: LD_VAR 0 7
44432: ARRAY
44433: PUSH
44434: LD_INT 2
44436: ARRAY
44437: PPUSH
44438: CALL_OW 488
44442: NOT
44443: PUSH
44444: LD_VAR 0 12
44448: PUSH
44449: LD_VAR 0 7
44453: ARRAY
44454: PUSH
44455: LD_INT 1
44457: ARRAY
44458: PPUSH
44459: LD_VAR 0 12
44463: PUSH
44464: LD_VAR 0 7
44468: ARRAY
44469: PUSH
44470: LD_INT 2
44472: ARRAY
44473: PPUSH
44474: CALL_OW 428
44478: PUSH
44479: LD_INT 0
44481: GREATER
44482: OR
44483: PUSH
44484: LD_VAR 0 12
44488: PUSH
44489: LD_VAR 0 7
44493: ARRAY
44494: PUSH
44495: LD_INT 1
44497: ARRAY
44498: PPUSH
44499: LD_VAR 0 12
44503: PUSH
44504: LD_VAR 0 7
44508: ARRAY
44509: PUSH
44510: LD_INT 2
44512: ARRAY
44513: PPUSH
44514: CALL_OW 351
44518: OR
44519: IFFALSE 44525
// exit ;
44521: POP
44522: POP
44523: GO 44817
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44525: LD_ADDR_VAR 0 8
44529: PUSH
44530: LD_VAR 0 12
44534: PUSH
44535: LD_VAR 0 7
44539: ARRAY
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: PPUSH
44545: LD_VAR 0 12
44549: PUSH
44550: LD_VAR 0 7
44554: ARRAY
44555: PUSH
44556: LD_INT 2
44558: ARRAY
44559: PPUSH
44560: CALL_OW 546
44564: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44565: LD_VAR 0 8
44569: PUSH
44570: LD_INT 1
44572: ARRAY
44573: PUSH
44574: LD_VAR 0 8
44578: PUSH
44579: LD_INT 2
44581: ARRAY
44582: PUSH
44583: LD_VAR 0 13
44587: PUSH
44588: LD_INT 2
44590: PLUS
44591: GREATER
44592: OR
44593: PUSH
44594: LD_VAR 0 8
44598: PUSH
44599: LD_INT 2
44601: ARRAY
44602: PUSH
44603: LD_VAR 0 13
44607: PUSH
44608: LD_INT 2
44610: MINUS
44611: LESS
44612: OR
44613: PUSH
44614: LD_VAR 0 8
44618: PUSH
44619: LD_INT 3
44621: ARRAY
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 8
44628: PUSH
44629: LD_INT 9
44631: PUSH
44632: LD_INT 10
44634: PUSH
44635: LD_INT 11
44637: PUSH
44638: LD_INT 12
44640: PUSH
44641: LD_INT 13
44643: PUSH
44644: LD_INT 16
44646: PUSH
44647: LD_INT 17
44649: PUSH
44650: LD_INT 18
44652: PUSH
44653: LD_INT 19
44655: PUSH
44656: LD_INT 20
44658: PUSH
44659: LD_INT 21
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: IN
44677: NOT
44678: OR
44679: PUSH
44680: LD_VAR 0 8
44684: PUSH
44685: LD_INT 5
44687: ARRAY
44688: NOT
44689: OR
44690: PUSH
44691: LD_VAR 0 8
44695: PUSH
44696: LD_INT 6
44698: ARRAY
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 7
44708: PUSH
44709: LD_INT 9
44711: PUSH
44712: LD_INT 10
44714: PUSH
44715: LD_INT 11
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: IN
44726: NOT
44727: OR
44728: IFFALSE 44734
// exit ;
44730: POP
44731: POP
44732: GO 44817
// end ;
44734: GO 44405
44736: POP
44737: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44738: LD_VAR 0 9
44742: PPUSH
44743: LD_VAR 0 3
44747: PPUSH
44748: LD_VAR 0 4
44752: PPUSH
44753: LD_INT 20
44755: PPUSH
44756: CALL 36740 0 4
44760: PUSH
44761: LD_INT 4
44763: ARRAY
44764: IFFALSE 44768
// exit ;
44766: GO 44817
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44768: LD_VAR 0 2
44772: PUSH
44773: LD_INT 29
44775: PUSH
44776: LD_INT 30
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: IN
44783: PUSH
44784: LD_VAR 0 3
44788: PPUSH
44789: LD_VAR 0 4
44793: PPUSH
44794: LD_VAR 0 9
44798: PPUSH
44799: CALL_OW 440
44803: NOT
44804: AND
44805: IFFALSE 44809
// exit ;
44807: GO 44817
// result := true ;
44809: LD_ADDR_VAR 0 6
44813: PUSH
44814: LD_INT 1
44816: ST_TO_ADDR
// end ;
44817: LD_VAR 0 6
44821: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44822: LD_INT 0
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
// result = [ ] ;
44882: LD_ADDR_VAR 0 7
44886: PUSH
44887: EMPTY
44888: ST_TO_ADDR
// temp_list = [ ] ;
44889: LD_ADDR_VAR 0 9
44893: PUSH
44894: EMPTY
44895: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44896: LD_VAR 0 4
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: LD_INT 4
44915: PUSH
44916: LD_INT 5
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: IN
44927: NOT
44928: PUSH
44929: LD_VAR 0 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: IN
44944: PUSH
44945: LD_VAR 0 5
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: IN
44964: NOT
44965: AND
44966: OR
44967: IFFALSE 44971
// exit ;
44969: GO 63362
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44971: LD_VAR 0 1
44975: PUSH
44976: LD_INT 6
44978: PUSH
44979: LD_INT 7
44981: PUSH
44982: LD_INT 8
44984: PUSH
44985: LD_INT 13
44987: PUSH
44988: LD_INT 12
44990: PUSH
44991: LD_INT 15
44993: PUSH
44994: LD_INT 11
44996: PUSH
44997: LD_INT 14
44999: PUSH
45000: LD_INT 10
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: IN
45014: IFFALSE 45024
// btype = b_lab ;
45016: LD_ADDR_VAR 0 1
45020: PUSH
45021: LD_INT 6
45023: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45024: LD_VAR 0 6
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: IN
45043: NOT
45044: PUSH
45045: LD_VAR 0 1
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 3
45061: PUSH
45062: LD_INT 6
45064: PUSH
45065: LD_INT 36
45067: PUSH
45068: LD_INT 4
45070: PUSH
45071: LD_INT 5
45073: PUSH
45074: LD_INT 31
45076: PUSH
45077: LD_INT 32
45079: PUSH
45080: LD_INT 33
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: IN
45096: NOT
45097: PUSH
45098: LD_VAR 0 6
45102: PUSH
45103: LD_INT 1
45105: EQUAL
45106: AND
45107: OR
45108: PUSH
45109: LD_VAR 0 1
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: IN
45124: NOT
45125: PUSH
45126: LD_VAR 0 6
45130: PUSH
45131: LD_INT 2
45133: EQUAL
45134: AND
45135: OR
45136: IFFALSE 45146
// mode = 0 ;
45138: LD_ADDR_VAR 0 6
45142: PUSH
45143: LD_INT 0
45145: ST_TO_ADDR
// case mode of 0 :
45146: LD_VAR 0 6
45150: PUSH
45151: LD_INT 0
45153: DOUBLE
45154: EQUAL
45155: IFTRUE 45159
45157: GO 56612
45159: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45160: LD_ADDR_VAR 0 11
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45353: LD_ADDR_VAR 0 12
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45549: LD_ADDR_VAR 0 13
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45748: LD_ADDR_VAR 0 14
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 3
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45944: LD_ADDR_VAR 0 15
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46137: LD_ADDR_VAR 0 16
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 3
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46330: LD_ADDR_VAR 0 17
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46560: LD_ADDR_VAR 0 18
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46790: LD_ADDR_VAR 0 19
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47020: LD_ADDR_VAR 0 20
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47250: LD_ADDR_VAR 0 21
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47480: LD_ADDR_VAR 0 22
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47710: LD_ADDR_VAR 0 23
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47990: LD_ADDR_VAR 0 24
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48266: LD_ADDR_VAR 0 25
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48540: LD_ADDR_VAR 0 26
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48816: LD_ADDR_VAR 0 27
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49096: LD_ADDR_VAR 0 28
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: NEG
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49378: LD_ADDR_VAR 0 29
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49657: LD_ADDR_VAR 0 30
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 3
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49935: LD_ADDR_VAR 0 31
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50213: LD_ADDR_VAR 0 32
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50491: LD_ADDR_VAR 0 33
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50770: LD_ADDR_VAR 0 34
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 3
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51050: LD_ADDR_VAR 0 35
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51162: LD_ADDR_VAR 0 36
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51274: LD_ADDR_VAR 0 37
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51386: LD_ADDR_VAR 0 38
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51498: LD_ADDR_VAR 0 39
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51610: LD_ADDR_VAR 0 40
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51722: LD_ADDR_VAR 0 41
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52072: LD_ADDR_VAR 0 42
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 3
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52422: LD_ADDR_VAR 0 43
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52770: LD_ADDR_VAR 0 44
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: LD_INT 3
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 3
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53120: LD_ADDR_VAR 0 45
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53470: LD_ADDR_VAR 0 46
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53818: LD_ADDR_VAR 0 47
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53969: LD_ADDR_VAR 0 48
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54116: LD_ADDR_VAR 0 49
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54260: LD_ADDR_VAR 0 50
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54404: LD_ADDR_VAR 0 51
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54551: LD_ADDR_VAR 0 52
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54702: LD_ADDR_VAR 0 53
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54932: LD_ADDR_VAR 0 54
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55162: LD_ADDR_VAR 0 55
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55392: LD_ADDR_VAR 0 56
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55622: LD_ADDR_VAR 0 57
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55852: LD_ADDR_VAR 0 58
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56082: LD_ADDR_VAR 0 59
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56170: LD_ADDR_VAR 0 60
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56258: LD_ADDR_VAR 0 61
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56346: LD_ADDR_VAR 0 62
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56434: LD_ADDR_VAR 0 63
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56522: LD_ADDR_VAR 0 64
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// end ; 1 :
56610: GO 62507
56612: LD_INT 1
56614: DOUBLE
56615: EQUAL
56616: IFTRUE 56620
56618: GO 59243
56620: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56621: LD_ADDR_VAR 0 11
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 3
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56665: LD_ADDR_VAR 0 12
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56706: LD_ADDR_VAR 0 13
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56746: LD_ADDR_VAR 0 14
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56787: LD_ADDR_VAR 0 15
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56831: LD_ADDR_VAR 0 16
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 3
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56877: LD_ADDR_VAR 0 17
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 3
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56921: LD_ADDR_VAR 0 18
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56962: LD_ADDR_VAR 0 19
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57002: LD_ADDR_VAR 0 20
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57043: LD_ADDR_VAR 0 21
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57087: LD_ADDR_VAR 0 22
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57133: LD_ADDR_VAR 0 23
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 4
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57177: LD_ADDR_VAR 0 24
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57218: LD_ADDR_VAR 0 25
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57258: LD_ADDR_VAR 0 26
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 4
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57299: LD_ADDR_VAR 0 27
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57343: LD_ADDR_VAR 0 28
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: LD_INT 4
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: NEG
57375: PUSH
57376: LD_INT 3
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57389: LD_ADDR_VAR 0 29
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 4
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 5
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 4
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 6
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 6
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 5
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57544: LD_ADDR_VAR 0 30
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 4
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 5
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 5
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 6
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 6
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57687: LD_ADDR_VAR 0 31
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 4
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: LD_INT 4
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 4
57774: PUSH
57775: LD_INT 5
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 6
57784: PUSH
57785: LD_INT 5
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 6
57794: PUSH
57795: LD_INT 6
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 5
57804: PUSH
57805: LD_INT 6
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57826: LD_ADDR_VAR 0 32
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 4
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 5
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 5
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 6
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 6
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57969: LD_ADDR_VAR 0 33
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 4
58021: NEG
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 4
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 5
58055: NEG
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 5
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 6
58089: NEG
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 6
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58124: LD_ADDR_VAR 0 34
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: NEG
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 4
58191: NEG
58192: PUSH
58193: LD_INT 4
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 4
58203: NEG
58204: PUSH
58205: LD_INT 5
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 5
58215: NEG
58216: PUSH
58217: LD_INT 4
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 5
58227: NEG
58228: PUSH
58229: LD_INT 5
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 5
58239: NEG
58240: PUSH
58241: LD_INT 6
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 6
58251: NEG
58252: PUSH
58253: LD_INT 5
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 6
58263: NEG
58264: PUSH
58265: LD_INT 6
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58287: LD_ADDR_VAR 0 41
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58331: LD_ADDR_VAR 0 42
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58372: LD_ADDR_VAR 0 43
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58412: LD_ADDR_VAR 0 44
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: LIST
58452: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58453: LD_ADDR_VAR 0 45
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58497: LD_ADDR_VAR 0 46
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58543: LD_ADDR_VAR 0 47
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58576: LD_ADDR_VAR 0 48
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58607: LD_ADDR_VAR 0 49
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58636: LD_ADDR_VAR 0 50
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58665: LD_ADDR_VAR 0 51
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58696: LD_ADDR_VAR 0 52
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58729: LD_ADDR_VAR 0 53
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: LIST
58772: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58773: LD_ADDR_VAR 0 54
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58814: LD_ADDR_VAR 0 55
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58854: LD_ADDR_VAR 0 56
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58895: LD_ADDR_VAR 0 57
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58939: LD_ADDR_VAR 0 58
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58985: LD_ADDR_VAR 0 59
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59029: LD_ADDR_VAR 0 60
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59070: LD_ADDR_VAR 0 61
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59110: LD_ADDR_VAR 0 62
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59151: LD_ADDR_VAR 0 63
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59195: LD_ADDR_VAR 0 64
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// end ; 2 :
59241: GO 62507
59243: LD_INT 2
59245: DOUBLE
59246: EQUAL
59247: IFTRUE 59251
59249: GO 62506
59251: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59252: LD_ADDR_VAR 0 29
59256: PUSH
59257: LD_INT 4
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 4
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 5
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 5
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 5
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 3
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 4
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 4
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: LD_INT 4
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 4
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 5
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 5
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 3
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: LD_INT 5
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 4
59637: NEG
59638: PUSH
59639: LD_INT 4
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: LD_INT 4
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 5
59697: NEG
59698: PUSH
59699: LD_INT 4
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: NEG
59710: PUSH
59711: LD_INT 5
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: NEG
59722: PUSH
59723: LD_INT 5
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 5
59733: NEG
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59790: LD_ADDR_VAR 0 30
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: LD_INT 4
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: LD_INT 5
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 4
59837: PUSH
59838: LD_INT 5
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 3
59847: PUSH
59848: LD_INT 4
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 5
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 5
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 4
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 4
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 4
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 5
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 5
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: LD_INT 4
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 4
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 4
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 4
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 5
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 4
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 5
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60337: LD_ADDR_VAR 0 31
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 4
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 5
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 5
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: LD_INT 3
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 4
60504: NEG
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 4
60516: NEG
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 3
60575: NEG
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 4
60587: NEG
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 5
60599: NEG
60600: PUSH
60601: LD_INT 4
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: NEG
60612: PUSH
60613: LD_INT 5
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 5
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 5
60635: NEG
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 4
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 4
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 4
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 5
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 5
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 5
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60887: LD_ADDR_VAR 0 32
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 4
60905: NEG
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 4
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 5
60950: NEG
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 5
60973: NEG
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: LD_INT 4
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 4
61056: NEG
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 4
61068: NEG
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 4
61092: NEG
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 4
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 5
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 4
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 5
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 5
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 4
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 5
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 5
61329: PUSH
61330: LD_INT 5
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 4
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 5
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61434: LD_ADDR_VAR 0 33
61438: PUSH
61439: LD_INT 4
61441: NEG
61442: PUSH
61443: LD_INT 4
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: LD_INT 5
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: LD_INT 4
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 4
61489: NEG
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 5
61501: NEG
61502: PUSH
61503: LD_INT 4
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 5
61513: NEG
61514: PUSH
61515: LD_INT 5
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: LD_INT 5
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 5
61537: NEG
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 3
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 4
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 4
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 4
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 5
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 5
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 4
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 4
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 4
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: LD_INT 4
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 4
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 3
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 4
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 5
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 5
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 5
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61972: LD_ADDR_VAR 0 34
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 5
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 4
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: LD_INT 4
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 5
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: LD_INT 5
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 4
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 2
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 4
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: LD_INT 4
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 5
62194: PUSH
62195: LD_INT 4
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: PUSH
62205: LD_INT 5
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 4
62214: PUSH
62215: LD_INT 5
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: LD_INT 4
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 3
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 5
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: LD_INT 5
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 3
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 3
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 4
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 4
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 4
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 5
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 5
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 5
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: ST_TO_ADDR
// end ; end ;
62504: GO 62507
62506: POP
// case btype of b_depot , b_warehouse :
62507: LD_VAR 0 1
62511: PUSH
62512: LD_INT 0
62514: DOUBLE
62515: EQUAL
62516: IFTRUE 62526
62518: LD_INT 1
62520: DOUBLE
62521: EQUAL
62522: IFTRUE 62526
62524: GO 62727
62526: POP
// case nation of nation_american :
62527: LD_VAR 0 5
62531: PUSH
62532: LD_INT 1
62534: DOUBLE
62535: EQUAL
62536: IFTRUE 62540
62538: GO 62596
62540: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62541: LD_ADDR_VAR 0 9
62545: PUSH
62546: LD_VAR 0 11
62550: PUSH
62551: LD_VAR 0 12
62555: PUSH
62556: LD_VAR 0 13
62560: PUSH
62561: LD_VAR 0 14
62565: PUSH
62566: LD_VAR 0 15
62570: PUSH
62571: LD_VAR 0 16
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: PUSH
62584: LD_VAR 0 4
62588: PUSH
62589: LD_INT 1
62591: PLUS
62592: ARRAY
62593: ST_TO_ADDR
62594: GO 62725
62596: LD_INT 2
62598: DOUBLE
62599: EQUAL
62600: IFTRUE 62604
62602: GO 62660
62604: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62605: LD_ADDR_VAR 0 9
62609: PUSH
62610: LD_VAR 0 17
62614: PUSH
62615: LD_VAR 0 18
62619: PUSH
62620: LD_VAR 0 19
62624: PUSH
62625: LD_VAR 0 20
62629: PUSH
62630: LD_VAR 0 21
62634: PUSH
62635: LD_VAR 0 22
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: PUSH
62648: LD_VAR 0 4
62652: PUSH
62653: LD_INT 1
62655: PLUS
62656: ARRAY
62657: ST_TO_ADDR
62658: GO 62725
62660: LD_INT 3
62662: DOUBLE
62663: EQUAL
62664: IFTRUE 62668
62666: GO 62724
62668: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62669: LD_ADDR_VAR 0 9
62673: PUSH
62674: LD_VAR 0 23
62678: PUSH
62679: LD_VAR 0 24
62683: PUSH
62684: LD_VAR 0 25
62688: PUSH
62689: LD_VAR 0 26
62693: PUSH
62694: LD_VAR 0 27
62698: PUSH
62699: LD_VAR 0 28
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: PUSH
62712: LD_VAR 0 4
62716: PUSH
62717: LD_INT 1
62719: PLUS
62720: ARRAY
62721: ST_TO_ADDR
62722: GO 62725
62724: POP
62725: GO 63280
62727: LD_INT 2
62729: DOUBLE
62730: EQUAL
62731: IFTRUE 62741
62733: LD_INT 3
62735: DOUBLE
62736: EQUAL
62737: IFTRUE 62741
62739: GO 62797
62741: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62742: LD_ADDR_VAR 0 9
62746: PUSH
62747: LD_VAR 0 29
62751: PUSH
62752: LD_VAR 0 30
62756: PUSH
62757: LD_VAR 0 31
62761: PUSH
62762: LD_VAR 0 32
62766: PUSH
62767: LD_VAR 0 33
62771: PUSH
62772: LD_VAR 0 34
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: PUSH
62785: LD_VAR 0 4
62789: PUSH
62790: LD_INT 1
62792: PLUS
62793: ARRAY
62794: ST_TO_ADDR
62795: GO 63280
62797: LD_INT 16
62799: DOUBLE
62800: EQUAL
62801: IFTRUE 62859
62803: LD_INT 17
62805: DOUBLE
62806: EQUAL
62807: IFTRUE 62859
62809: LD_INT 18
62811: DOUBLE
62812: EQUAL
62813: IFTRUE 62859
62815: LD_INT 19
62817: DOUBLE
62818: EQUAL
62819: IFTRUE 62859
62821: LD_INT 22
62823: DOUBLE
62824: EQUAL
62825: IFTRUE 62859
62827: LD_INT 20
62829: DOUBLE
62830: EQUAL
62831: IFTRUE 62859
62833: LD_INT 21
62835: DOUBLE
62836: EQUAL
62837: IFTRUE 62859
62839: LD_INT 23
62841: DOUBLE
62842: EQUAL
62843: IFTRUE 62859
62845: LD_INT 24
62847: DOUBLE
62848: EQUAL
62849: IFTRUE 62859
62851: LD_INT 25
62853: DOUBLE
62854: EQUAL
62855: IFTRUE 62859
62857: GO 62915
62859: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62860: LD_ADDR_VAR 0 9
62864: PUSH
62865: LD_VAR 0 35
62869: PUSH
62870: LD_VAR 0 36
62874: PUSH
62875: LD_VAR 0 37
62879: PUSH
62880: LD_VAR 0 38
62884: PUSH
62885: LD_VAR 0 39
62889: PUSH
62890: LD_VAR 0 40
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: PUSH
62903: LD_VAR 0 4
62907: PUSH
62908: LD_INT 1
62910: PLUS
62911: ARRAY
62912: ST_TO_ADDR
62913: GO 63280
62915: LD_INT 6
62917: DOUBLE
62918: EQUAL
62919: IFTRUE 62971
62921: LD_INT 7
62923: DOUBLE
62924: EQUAL
62925: IFTRUE 62971
62927: LD_INT 8
62929: DOUBLE
62930: EQUAL
62931: IFTRUE 62971
62933: LD_INT 13
62935: DOUBLE
62936: EQUAL
62937: IFTRUE 62971
62939: LD_INT 12
62941: DOUBLE
62942: EQUAL
62943: IFTRUE 62971
62945: LD_INT 15
62947: DOUBLE
62948: EQUAL
62949: IFTRUE 62971
62951: LD_INT 11
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62971
62957: LD_INT 14
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62971
62963: LD_INT 10
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62971
62969: GO 63027
62971: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62972: LD_ADDR_VAR 0 9
62976: PUSH
62977: LD_VAR 0 41
62981: PUSH
62982: LD_VAR 0 42
62986: PUSH
62987: LD_VAR 0 43
62991: PUSH
62992: LD_VAR 0 44
62996: PUSH
62997: LD_VAR 0 45
63001: PUSH
63002: LD_VAR 0 46
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: PUSH
63015: LD_VAR 0 4
63019: PUSH
63020: LD_INT 1
63022: PLUS
63023: ARRAY
63024: ST_TO_ADDR
63025: GO 63280
63027: LD_INT 36
63029: DOUBLE
63030: EQUAL
63031: IFTRUE 63035
63033: GO 63091
63035: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63036: LD_ADDR_VAR 0 9
63040: PUSH
63041: LD_VAR 0 47
63045: PUSH
63046: LD_VAR 0 48
63050: PUSH
63051: LD_VAR 0 49
63055: PUSH
63056: LD_VAR 0 50
63060: PUSH
63061: LD_VAR 0 51
63065: PUSH
63066: LD_VAR 0 52
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: PUSH
63079: LD_VAR 0 4
63083: PUSH
63084: LD_INT 1
63086: PLUS
63087: ARRAY
63088: ST_TO_ADDR
63089: GO 63280
63091: LD_INT 4
63093: DOUBLE
63094: EQUAL
63095: IFTRUE 63117
63097: LD_INT 5
63099: DOUBLE
63100: EQUAL
63101: IFTRUE 63117
63103: LD_INT 34
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63117
63109: LD_INT 37
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63117
63115: GO 63173
63117: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63118: LD_ADDR_VAR 0 9
63122: PUSH
63123: LD_VAR 0 53
63127: PUSH
63128: LD_VAR 0 54
63132: PUSH
63133: LD_VAR 0 55
63137: PUSH
63138: LD_VAR 0 56
63142: PUSH
63143: LD_VAR 0 57
63147: PUSH
63148: LD_VAR 0 58
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: PUSH
63161: LD_VAR 0 4
63165: PUSH
63166: LD_INT 1
63168: PLUS
63169: ARRAY
63170: ST_TO_ADDR
63171: GO 63280
63173: LD_INT 31
63175: DOUBLE
63176: EQUAL
63177: IFTRUE 63223
63179: LD_INT 32
63181: DOUBLE
63182: EQUAL
63183: IFTRUE 63223
63185: LD_INT 33
63187: DOUBLE
63188: EQUAL
63189: IFTRUE 63223
63191: LD_INT 27
63193: DOUBLE
63194: EQUAL
63195: IFTRUE 63223
63197: LD_INT 26
63199: DOUBLE
63200: EQUAL
63201: IFTRUE 63223
63203: LD_INT 28
63205: DOUBLE
63206: EQUAL
63207: IFTRUE 63223
63209: LD_INT 29
63211: DOUBLE
63212: EQUAL
63213: IFTRUE 63223
63215: LD_INT 30
63217: DOUBLE
63218: EQUAL
63219: IFTRUE 63223
63221: GO 63279
63223: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63224: LD_ADDR_VAR 0 9
63228: PUSH
63229: LD_VAR 0 59
63233: PUSH
63234: LD_VAR 0 60
63238: PUSH
63239: LD_VAR 0 61
63243: PUSH
63244: LD_VAR 0 62
63248: PUSH
63249: LD_VAR 0 63
63253: PUSH
63254: LD_VAR 0 64
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: PUSH
63267: LD_VAR 0 4
63271: PUSH
63272: LD_INT 1
63274: PLUS
63275: ARRAY
63276: ST_TO_ADDR
63277: GO 63280
63279: POP
// temp_list2 = [ ] ;
63280: LD_ADDR_VAR 0 10
63284: PUSH
63285: EMPTY
63286: ST_TO_ADDR
// for i in temp_list do
63287: LD_ADDR_VAR 0 8
63291: PUSH
63292: LD_VAR 0 9
63296: PUSH
63297: FOR_IN
63298: IFFALSE 63350
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63300: LD_ADDR_VAR 0 10
63304: PUSH
63305: LD_VAR 0 10
63309: PUSH
63310: LD_VAR 0 8
63314: PUSH
63315: LD_INT 1
63317: ARRAY
63318: PUSH
63319: LD_VAR 0 2
63323: PLUS
63324: PUSH
63325: LD_VAR 0 8
63329: PUSH
63330: LD_INT 2
63332: ARRAY
63333: PUSH
63334: LD_VAR 0 3
63338: PLUS
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: ADD
63347: ST_TO_ADDR
63348: GO 63297
63350: POP
63351: POP
// result = temp_list2 ;
63352: LD_ADDR_VAR 0 7
63356: PUSH
63357: LD_VAR 0 10
63361: ST_TO_ADDR
// end ;
63362: LD_VAR 0 7
63366: RET
// export function EnemyInRange ( unit , dist ) ; begin
63367: LD_INT 0
63369: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63370: LD_ADDR_VAR 0 3
63374: PUSH
63375: LD_VAR 0 1
63379: PPUSH
63380: CALL_OW 255
63384: PPUSH
63385: LD_VAR 0 1
63389: PPUSH
63390: CALL_OW 250
63394: PPUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 251
63404: PPUSH
63405: LD_VAR 0 2
63409: PPUSH
63410: CALL 36740 0 4
63414: PUSH
63415: LD_INT 4
63417: ARRAY
63418: ST_TO_ADDR
// end ;
63419: LD_VAR 0 3
63423: RET
// export function PlayerSeeMe ( unit ) ; begin
63424: LD_INT 0
63426: PPUSH
// result := See ( your_side , unit ) ;
63427: LD_ADDR_VAR 0 2
63431: PUSH
63432: LD_OWVAR 2
63436: PPUSH
63437: LD_VAR 0 1
63441: PPUSH
63442: CALL_OW 292
63446: ST_TO_ADDR
// end ;
63447: LD_VAR 0 2
63451: RET
// export function ReverseDir ( unit ) ; begin
63452: LD_INT 0
63454: PPUSH
// if not unit then
63455: LD_VAR 0 1
63459: NOT
63460: IFFALSE 63464
// exit ;
63462: GO 63487
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63464: LD_ADDR_VAR 0 2
63468: PUSH
63469: LD_VAR 0 1
63473: PPUSH
63474: CALL_OW 254
63478: PUSH
63479: LD_INT 3
63481: PLUS
63482: PUSH
63483: LD_INT 6
63485: MOD
63486: ST_TO_ADDR
// end ;
63487: LD_VAR 0 2
63491: RET
// export function ReverseArray ( array ) ; var i ; begin
63492: LD_INT 0
63494: PPUSH
63495: PPUSH
// if not array then
63496: LD_VAR 0 1
63500: NOT
63501: IFFALSE 63505
// exit ;
63503: GO 63560
// result := [ ] ;
63505: LD_ADDR_VAR 0 2
63509: PUSH
63510: EMPTY
63511: ST_TO_ADDR
// for i := array downto 1 do
63512: LD_ADDR_VAR 0 3
63516: PUSH
63517: DOUBLE
63518: LD_VAR 0 1
63522: INC
63523: ST_TO_ADDR
63524: LD_INT 1
63526: PUSH
63527: FOR_DOWNTO
63528: IFFALSE 63558
// result := Join ( result , array [ i ] ) ;
63530: LD_ADDR_VAR 0 2
63534: PUSH
63535: LD_VAR 0 2
63539: PPUSH
63540: LD_VAR 0 1
63544: PUSH
63545: LD_VAR 0 3
63549: ARRAY
63550: PPUSH
63551: CALL 68216 0 2
63555: ST_TO_ADDR
63556: GO 63527
63558: POP
63559: POP
// end ;
63560: LD_VAR 0 2
63564: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63565: LD_INT 0
63567: PPUSH
63568: PPUSH
63569: PPUSH
63570: PPUSH
63571: PPUSH
63572: PPUSH
// if not unit or not hexes then
63573: LD_VAR 0 1
63577: NOT
63578: PUSH
63579: LD_VAR 0 2
63583: NOT
63584: OR
63585: IFFALSE 63589
// exit ;
63587: GO 63712
// dist := 9999 ;
63589: LD_ADDR_VAR 0 5
63593: PUSH
63594: LD_INT 9999
63596: ST_TO_ADDR
// for i = 1 to hexes do
63597: LD_ADDR_VAR 0 4
63601: PUSH
63602: DOUBLE
63603: LD_INT 1
63605: DEC
63606: ST_TO_ADDR
63607: LD_VAR 0 2
63611: PUSH
63612: FOR_TO
63613: IFFALSE 63700
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63615: LD_ADDR_VAR 0 6
63619: PUSH
63620: LD_VAR 0 1
63624: PPUSH
63625: LD_VAR 0 2
63629: PUSH
63630: LD_VAR 0 4
63634: ARRAY
63635: PUSH
63636: LD_INT 1
63638: ARRAY
63639: PPUSH
63640: LD_VAR 0 2
63644: PUSH
63645: LD_VAR 0 4
63649: ARRAY
63650: PUSH
63651: LD_INT 2
63653: ARRAY
63654: PPUSH
63655: CALL_OW 297
63659: ST_TO_ADDR
// if tdist < dist then
63660: LD_VAR 0 6
63664: PUSH
63665: LD_VAR 0 5
63669: LESS
63670: IFFALSE 63698
// begin hex := hexes [ i ] ;
63672: LD_ADDR_VAR 0 8
63676: PUSH
63677: LD_VAR 0 2
63681: PUSH
63682: LD_VAR 0 4
63686: ARRAY
63687: ST_TO_ADDR
// dist := tdist ;
63688: LD_ADDR_VAR 0 5
63692: PUSH
63693: LD_VAR 0 6
63697: ST_TO_ADDR
// end ; end ;
63698: GO 63612
63700: POP
63701: POP
// result := hex ;
63702: LD_ADDR_VAR 0 3
63706: PUSH
63707: LD_VAR 0 8
63711: ST_TO_ADDR
// end ;
63712: LD_VAR 0 3
63716: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63717: LD_INT 0
63719: PPUSH
63720: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63721: LD_VAR 0 1
63725: NOT
63726: PUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_INT 21
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 23
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PPUSH
63756: CALL_OW 69
63760: IN
63761: NOT
63762: OR
63763: IFFALSE 63767
// exit ;
63765: GO 63814
// for i = 1 to 3 do
63767: LD_ADDR_VAR 0 3
63771: PUSH
63772: DOUBLE
63773: LD_INT 1
63775: DEC
63776: ST_TO_ADDR
63777: LD_INT 3
63779: PUSH
63780: FOR_TO
63781: IFFALSE 63812
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63783: LD_VAR 0 1
63787: PPUSH
63788: CALL_OW 250
63792: PPUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: CALL_OW 251
63802: PPUSH
63803: LD_INT 1
63805: PPUSH
63806: CALL_OW 453
63810: GO 63780
63812: POP
63813: POP
// end ;
63814: LD_VAR 0 2
63818: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63819: LD_INT 0
63821: PPUSH
63822: PPUSH
63823: PPUSH
63824: PPUSH
63825: PPUSH
63826: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63827: LD_VAR 0 1
63831: NOT
63832: PUSH
63833: LD_VAR 0 2
63837: NOT
63838: OR
63839: PUSH
63840: LD_VAR 0 1
63844: PPUSH
63845: CALL_OW 314
63849: OR
63850: IFFALSE 63854
// exit ;
63852: GO 64321
// if GetLives ( i ) < 250 then
63854: LD_VAR 0 4
63858: PPUSH
63859: CALL_OW 256
63863: PUSH
63864: LD_INT 250
63866: LESS
63867: IFFALSE 63880
// begin ComAutodestruct ( i ) ;
63869: LD_VAR 0 4
63873: PPUSH
63874: CALL 63717 0 1
// exit ;
63878: GO 64321
// end ; x := GetX ( enemy_unit ) ;
63880: LD_ADDR_VAR 0 7
63884: PUSH
63885: LD_VAR 0 2
63889: PPUSH
63890: CALL_OW 250
63894: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63895: LD_ADDR_VAR 0 8
63899: PUSH
63900: LD_VAR 0 2
63904: PPUSH
63905: CALL_OW 251
63909: ST_TO_ADDR
// if not x or not y then
63910: LD_VAR 0 7
63914: NOT
63915: PUSH
63916: LD_VAR 0 8
63920: NOT
63921: OR
63922: IFFALSE 63926
// exit ;
63924: GO 64321
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63926: LD_ADDR_VAR 0 6
63930: PUSH
63931: LD_VAR 0 7
63935: PPUSH
63936: LD_INT 0
63938: PPUSH
63939: LD_INT 4
63941: PPUSH
63942: CALL_OW 272
63946: PUSH
63947: LD_VAR 0 8
63951: PPUSH
63952: LD_INT 0
63954: PPUSH
63955: LD_INT 4
63957: PPUSH
63958: CALL_OW 273
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_VAR 0 7
63971: PPUSH
63972: LD_INT 1
63974: PPUSH
63975: LD_INT 4
63977: PPUSH
63978: CALL_OW 272
63982: PUSH
63983: LD_VAR 0 8
63987: PPUSH
63988: LD_INT 1
63990: PPUSH
63991: LD_INT 4
63993: PPUSH
63994: CALL_OW 273
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_VAR 0 7
64007: PPUSH
64008: LD_INT 2
64010: PPUSH
64011: LD_INT 4
64013: PPUSH
64014: CALL_OW 272
64018: PUSH
64019: LD_VAR 0 8
64023: PPUSH
64024: LD_INT 2
64026: PPUSH
64027: LD_INT 4
64029: PPUSH
64030: CALL_OW 273
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_VAR 0 7
64043: PPUSH
64044: LD_INT 3
64046: PPUSH
64047: LD_INT 4
64049: PPUSH
64050: CALL_OW 272
64054: PUSH
64055: LD_VAR 0 8
64059: PPUSH
64060: LD_INT 3
64062: PPUSH
64063: LD_INT 4
64065: PPUSH
64066: CALL_OW 273
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_VAR 0 7
64079: PPUSH
64080: LD_INT 4
64082: PPUSH
64083: LD_INT 4
64085: PPUSH
64086: CALL_OW 272
64090: PUSH
64091: LD_VAR 0 8
64095: PPUSH
64096: LD_INT 4
64098: PPUSH
64099: LD_INT 4
64101: PPUSH
64102: CALL_OW 273
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_VAR 0 7
64115: PPUSH
64116: LD_INT 5
64118: PPUSH
64119: LD_INT 4
64121: PPUSH
64122: CALL_OW 272
64126: PUSH
64127: LD_VAR 0 8
64131: PPUSH
64132: LD_INT 5
64134: PPUSH
64135: LD_INT 4
64137: PPUSH
64138: CALL_OW 273
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// for i = tmp downto 1 do
64155: LD_ADDR_VAR 0 4
64159: PUSH
64160: DOUBLE
64161: LD_VAR 0 6
64165: INC
64166: ST_TO_ADDR
64167: LD_INT 1
64169: PUSH
64170: FOR_DOWNTO
64171: IFFALSE 64272
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64173: LD_VAR 0 6
64177: PUSH
64178: LD_VAR 0 4
64182: ARRAY
64183: PUSH
64184: LD_INT 1
64186: ARRAY
64187: PPUSH
64188: LD_VAR 0 6
64192: PUSH
64193: LD_VAR 0 4
64197: ARRAY
64198: PUSH
64199: LD_INT 2
64201: ARRAY
64202: PPUSH
64203: CALL_OW 488
64207: NOT
64208: PUSH
64209: LD_VAR 0 6
64213: PUSH
64214: LD_VAR 0 4
64218: ARRAY
64219: PUSH
64220: LD_INT 1
64222: ARRAY
64223: PPUSH
64224: LD_VAR 0 6
64228: PUSH
64229: LD_VAR 0 4
64233: ARRAY
64234: PUSH
64235: LD_INT 2
64237: ARRAY
64238: PPUSH
64239: CALL_OW 428
64243: PUSH
64244: LD_INT 0
64246: NONEQUAL
64247: OR
64248: IFFALSE 64270
// tmp := Delete ( tmp , i ) ;
64250: LD_ADDR_VAR 0 6
64254: PUSH
64255: LD_VAR 0 6
64259: PPUSH
64260: LD_VAR 0 4
64264: PPUSH
64265: CALL_OW 3
64269: ST_TO_ADDR
64270: GO 64170
64272: POP
64273: POP
// j := GetClosestHex ( unit , tmp ) ;
64274: LD_ADDR_VAR 0 5
64278: PUSH
64279: LD_VAR 0 1
64283: PPUSH
64284: LD_VAR 0 6
64288: PPUSH
64289: CALL 63565 0 2
64293: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64294: LD_VAR 0 1
64298: PPUSH
64299: LD_VAR 0 5
64303: PUSH
64304: LD_INT 1
64306: ARRAY
64307: PPUSH
64308: LD_VAR 0 5
64312: PUSH
64313: LD_INT 2
64315: ARRAY
64316: PPUSH
64317: CALL_OW 111
// end ;
64321: LD_VAR 0 3
64325: RET
// export function PrepareApemanSoldier ( ) ; begin
64326: LD_INT 0
64328: PPUSH
// uc_nation := 0 ;
64329: LD_ADDR_OWVAR 21
64333: PUSH
64334: LD_INT 0
64336: ST_TO_ADDR
// hc_sex := sex_male ;
64337: LD_ADDR_OWVAR 27
64341: PUSH
64342: LD_INT 1
64344: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64345: LD_ADDR_OWVAR 28
64349: PUSH
64350: LD_INT 15
64352: ST_TO_ADDR
// hc_gallery :=  ;
64353: LD_ADDR_OWVAR 33
64357: PUSH
64358: LD_STRING 
64360: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64361: LD_ADDR_OWVAR 31
64365: PUSH
64366: LD_INT 0
64368: PPUSH
64369: LD_INT 3
64371: PPUSH
64372: CALL_OW 12
64376: PUSH
64377: LD_INT 0
64379: PPUSH
64380: LD_INT 3
64382: PPUSH
64383: CALL_OW 12
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: ST_TO_ADDR
// end ;
64400: LD_VAR 0 1
64404: RET
// export function PrepareApemanEngineer ( ) ; begin
64405: LD_INT 0
64407: PPUSH
// uc_nation := 0 ;
64408: LD_ADDR_OWVAR 21
64412: PUSH
64413: LD_INT 0
64415: ST_TO_ADDR
// hc_sex := sex_male ;
64416: LD_ADDR_OWVAR 27
64420: PUSH
64421: LD_INT 1
64423: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64424: LD_ADDR_OWVAR 28
64428: PUSH
64429: LD_INT 16
64431: ST_TO_ADDR
// hc_gallery :=  ;
64432: LD_ADDR_OWVAR 33
64436: PUSH
64437: LD_STRING 
64439: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64440: LD_ADDR_OWVAR 31
64444: PUSH
64445: LD_INT 0
64447: PPUSH
64448: LD_INT 3
64450: PPUSH
64451: CALL_OW 12
64455: PUSH
64456: LD_INT 0
64458: PPUSH
64459: LD_INT 3
64461: PPUSH
64462: CALL_OW 12
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: ST_TO_ADDR
// end ;
64479: LD_VAR 0 1
64483: RET
// export function PrepareApeman ( agressivity ) ; begin
64484: LD_INT 0
64486: PPUSH
// uc_side := 0 ;
64487: LD_ADDR_OWVAR 20
64491: PUSH
64492: LD_INT 0
64494: ST_TO_ADDR
// uc_nation := 0 ;
64495: LD_ADDR_OWVAR 21
64499: PUSH
64500: LD_INT 0
64502: ST_TO_ADDR
// hc_sex := sex_male ;
64503: LD_ADDR_OWVAR 27
64507: PUSH
64508: LD_INT 1
64510: ST_TO_ADDR
// hc_class := class_apeman ;
64511: LD_ADDR_OWVAR 28
64515: PUSH
64516: LD_INT 12
64518: ST_TO_ADDR
// hc_gallery :=  ;
64519: LD_ADDR_OWVAR 33
64523: PUSH
64524: LD_STRING 
64526: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64527: LD_ADDR_OWVAR 35
64531: PUSH
64532: LD_VAR 0 1
64536: NEG
64537: PPUSH
64538: LD_VAR 0 1
64542: PPUSH
64543: CALL_OW 12
64547: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64548: LD_ADDR_OWVAR 31
64552: PUSH
64553: LD_INT 0
64555: PPUSH
64556: LD_INT 3
64558: PPUSH
64559: CALL_OW 12
64563: PUSH
64564: LD_INT 0
64566: PPUSH
64567: LD_INT 3
64569: PPUSH
64570: CALL_OW 12
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: ST_TO_ADDR
// end ;
64587: LD_VAR 0 2
64591: RET
// export function PrepareTiger ( agressivity ) ; begin
64592: LD_INT 0
64594: PPUSH
// uc_side := 0 ;
64595: LD_ADDR_OWVAR 20
64599: PUSH
64600: LD_INT 0
64602: ST_TO_ADDR
// uc_nation := 0 ;
64603: LD_ADDR_OWVAR 21
64607: PUSH
64608: LD_INT 0
64610: ST_TO_ADDR
// hc_class := class_tiger ;
64611: LD_ADDR_OWVAR 28
64615: PUSH
64616: LD_INT 14
64618: ST_TO_ADDR
// hc_gallery :=  ;
64619: LD_ADDR_OWVAR 33
64623: PUSH
64624: LD_STRING 
64626: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64627: LD_ADDR_OWVAR 35
64631: PUSH
64632: LD_VAR 0 1
64636: NEG
64637: PPUSH
64638: LD_VAR 0 1
64642: PPUSH
64643: CALL_OW 12
64647: ST_TO_ADDR
// end ;
64648: LD_VAR 0 2
64652: RET
// export function PrepareEnchidna ( ) ; begin
64653: LD_INT 0
64655: PPUSH
// uc_side := 0 ;
64656: LD_ADDR_OWVAR 20
64660: PUSH
64661: LD_INT 0
64663: ST_TO_ADDR
// uc_nation := 0 ;
64664: LD_ADDR_OWVAR 21
64668: PUSH
64669: LD_INT 0
64671: ST_TO_ADDR
// hc_class := class_baggie ;
64672: LD_ADDR_OWVAR 28
64676: PUSH
64677: LD_INT 13
64679: ST_TO_ADDR
// hc_gallery :=  ;
64680: LD_ADDR_OWVAR 33
64684: PUSH
64685: LD_STRING 
64687: ST_TO_ADDR
// end ;
64688: LD_VAR 0 1
64692: RET
// export function PrepareFrog ( ) ; begin
64693: LD_INT 0
64695: PPUSH
// uc_side := 0 ;
64696: LD_ADDR_OWVAR 20
64700: PUSH
64701: LD_INT 0
64703: ST_TO_ADDR
// uc_nation := 0 ;
64704: LD_ADDR_OWVAR 21
64708: PUSH
64709: LD_INT 0
64711: ST_TO_ADDR
// hc_class := class_frog ;
64712: LD_ADDR_OWVAR 28
64716: PUSH
64717: LD_INT 19
64719: ST_TO_ADDR
// hc_gallery :=  ;
64720: LD_ADDR_OWVAR 33
64724: PUSH
64725: LD_STRING 
64727: ST_TO_ADDR
// end ;
64728: LD_VAR 0 1
64732: RET
// export function PrepareFish ( ) ; begin
64733: LD_INT 0
64735: PPUSH
// uc_side := 0 ;
64736: LD_ADDR_OWVAR 20
64740: PUSH
64741: LD_INT 0
64743: ST_TO_ADDR
// uc_nation := 0 ;
64744: LD_ADDR_OWVAR 21
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// hc_class := class_fish ;
64752: LD_ADDR_OWVAR 28
64756: PUSH
64757: LD_INT 20
64759: ST_TO_ADDR
// hc_gallery :=  ;
64760: LD_ADDR_OWVAR 33
64764: PUSH
64765: LD_STRING 
64767: ST_TO_ADDR
// end ;
64768: LD_VAR 0 1
64772: RET
// export function PrepareBird ( ) ; begin
64773: LD_INT 0
64775: PPUSH
// uc_side := 0 ;
64776: LD_ADDR_OWVAR 20
64780: PUSH
64781: LD_INT 0
64783: ST_TO_ADDR
// uc_nation := 0 ;
64784: LD_ADDR_OWVAR 21
64788: PUSH
64789: LD_INT 0
64791: ST_TO_ADDR
// hc_class := class_phororhacos ;
64792: LD_ADDR_OWVAR 28
64796: PUSH
64797: LD_INT 18
64799: ST_TO_ADDR
// hc_gallery :=  ;
64800: LD_ADDR_OWVAR 33
64804: PUSH
64805: LD_STRING 
64807: ST_TO_ADDR
// end ;
64808: LD_VAR 0 1
64812: RET
// export function PrepareHorse ( ) ; begin
64813: LD_INT 0
64815: PPUSH
// uc_side := 0 ;
64816: LD_ADDR_OWVAR 20
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// uc_nation := 0 ;
64824: LD_ADDR_OWVAR 21
64828: PUSH
64829: LD_INT 0
64831: ST_TO_ADDR
// hc_class := class_horse ;
64832: LD_ADDR_OWVAR 28
64836: PUSH
64837: LD_INT 21
64839: ST_TO_ADDR
// hc_gallery :=  ;
64840: LD_ADDR_OWVAR 33
64844: PUSH
64845: LD_STRING 
64847: ST_TO_ADDR
// end ;
64848: LD_VAR 0 1
64852: RET
// export function PrepareMastodont ( ) ; begin
64853: LD_INT 0
64855: PPUSH
// uc_side := 0 ;
64856: LD_ADDR_OWVAR 20
64860: PUSH
64861: LD_INT 0
64863: ST_TO_ADDR
// uc_nation := 0 ;
64864: LD_ADDR_OWVAR 21
64868: PUSH
64869: LD_INT 0
64871: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64872: LD_ADDR_OWVAR 37
64876: PUSH
64877: LD_INT 31
64879: ST_TO_ADDR
// vc_control := control_rider ;
64880: LD_ADDR_OWVAR 38
64884: PUSH
64885: LD_INT 4
64887: ST_TO_ADDR
// end ;
64888: LD_VAR 0 1
64892: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64893: LD_INT 0
64895: PPUSH
64896: PPUSH
64897: PPUSH
// uc_side = 0 ;
64898: LD_ADDR_OWVAR 20
64902: PUSH
64903: LD_INT 0
64905: ST_TO_ADDR
// uc_nation = 0 ;
64906: LD_ADDR_OWVAR 21
64910: PUSH
64911: LD_INT 0
64913: ST_TO_ADDR
// InitHc_All ( ) ;
64914: CALL_OW 584
// InitVc ;
64918: CALL_OW 20
// if mastodonts then
64922: LD_VAR 0 6
64926: IFFALSE 64993
// for i = 1 to mastodonts do
64928: LD_ADDR_VAR 0 11
64932: PUSH
64933: DOUBLE
64934: LD_INT 1
64936: DEC
64937: ST_TO_ADDR
64938: LD_VAR 0 6
64942: PUSH
64943: FOR_TO
64944: IFFALSE 64991
// begin vc_chassis := 31 ;
64946: LD_ADDR_OWVAR 37
64950: PUSH
64951: LD_INT 31
64953: ST_TO_ADDR
// vc_control := control_rider ;
64954: LD_ADDR_OWVAR 38
64958: PUSH
64959: LD_INT 4
64961: ST_TO_ADDR
// animal := CreateVehicle ;
64962: LD_ADDR_VAR 0 12
64966: PUSH
64967: CALL_OW 45
64971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64972: LD_VAR 0 12
64976: PPUSH
64977: LD_VAR 0 8
64981: PPUSH
64982: LD_INT 0
64984: PPUSH
64985: CALL 67121 0 3
// end ;
64989: GO 64943
64991: POP
64992: POP
// if horses then
64993: LD_VAR 0 5
64997: IFFALSE 65064
// for i = 1 to horses do
64999: LD_ADDR_VAR 0 11
65003: PUSH
65004: DOUBLE
65005: LD_INT 1
65007: DEC
65008: ST_TO_ADDR
65009: LD_VAR 0 5
65013: PUSH
65014: FOR_TO
65015: IFFALSE 65062
// begin hc_class := 21 ;
65017: LD_ADDR_OWVAR 28
65021: PUSH
65022: LD_INT 21
65024: ST_TO_ADDR
// hc_gallery :=  ;
65025: LD_ADDR_OWVAR 33
65029: PUSH
65030: LD_STRING 
65032: ST_TO_ADDR
// animal := CreateHuman ;
65033: LD_ADDR_VAR 0 12
65037: PUSH
65038: CALL_OW 44
65042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65043: LD_VAR 0 12
65047: PPUSH
65048: LD_VAR 0 8
65052: PPUSH
65053: LD_INT 0
65055: PPUSH
65056: CALL 67121 0 3
// end ;
65060: GO 65014
65062: POP
65063: POP
// if birds then
65064: LD_VAR 0 1
65068: IFFALSE 65135
// for i = 1 to birds do
65070: LD_ADDR_VAR 0 11
65074: PUSH
65075: DOUBLE
65076: LD_INT 1
65078: DEC
65079: ST_TO_ADDR
65080: LD_VAR 0 1
65084: PUSH
65085: FOR_TO
65086: IFFALSE 65133
// begin hc_class := 18 ;
65088: LD_ADDR_OWVAR 28
65092: PUSH
65093: LD_INT 18
65095: ST_TO_ADDR
// hc_gallery =  ;
65096: LD_ADDR_OWVAR 33
65100: PUSH
65101: LD_STRING 
65103: ST_TO_ADDR
// animal := CreateHuman ;
65104: LD_ADDR_VAR 0 12
65108: PUSH
65109: CALL_OW 44
65113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65114: LD_VAR 0 12
65118: PPUSH
65119: LD_VAR 0 8
65123: PPUSH
65124: LD_INT 0
65126: PPUSH
65127: CALL 67121 0 3
// end ;
65131: GO 65085
65133: POP
65134: POP
// if tigers then
65135: LD_VAR 0 2
65139: IFFALSE 65223
// for i = 1 to tigers do
65141: LD_ADDR_VAR 0 11
65145: PUSH
65146: DOUBLE
65147: LD_INT 1
65149: DEC
65150: ST_TO_ADDR
65151: LD_VAR 0 2
65155: PUSH
65156: FOR_TO
65157: IFFALSE 65221
// begin hc_class = class_tiger ;
65159: LD_ADDR_OWVAR 28
65163: PUSH
65164: LD_INT 14
65166: ST_TO_ADDR
// hc_gallery =  ;
65167: LD_ADDR_OWVAR 33
65171: PUSH
65172: LD_STRING 
65174: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65175: LD_ADDR_OWVAR 35
65179: PUSH
65180: LD_INT 7
65182: NEG
65183: PPUSH
65184: LD_INT 7
65186: PPUSH
65187: CALL_OW 12
65191: ST_TO_ADDR
// animal := CreateHuman ;
65192: LD_ADDR_VAR 0 12
65196: PUSH
65197: CALL_OW 44
65201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65202: LD_VAR 0 12
65206: PPUSH
65207: LD_VAR 0 8
65211: PPUSH
65212: LD_INT 0
65214: PPUSH
65215: CALL 67121 0 3
// end ;
65219: GO 65156
65221: POP
65222: POP
// if apemans then
65223: LD_VAR 0 3
65227: IFFALSE 65350
// for i = 1 to apemans do
65229: LD_ADDR_VAR 0 11
65233: PUSH
65234: DOUBLE
65235: LD_INT 1
65237: DEC
65238: ST_TO_ADDR
65239: LD_VAR 0 3
65243: PUSH
65244: FOR_TO
65245: IFFALSE 65348
// begin hc_class = class_apeman ;
65247: LD_ADDR_OWVAR 28
65251: PUSH
65252: LD_INT 12
65254: ST_TO_ADDR
// hc_gallery =  ;
65255: LD_ADDR_OWVAR 33
65259: PUSH
65260: LD_STRING 
65262: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65263: LD_ADDR_OWVAR 35
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PPUSH
65272: LD_INT 2
65274: PPUSH
65275: CALL_OW 12
65279: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65280: LD_ADDR_OWVAR 31
65284: PUSH
65285: LD_INT 1
65287: PPUSH
65288: LD_INT 3
65290: PPUSH
65291: CALL_OW 12
65295: PUSH
65296: LD_INT 1
65298: PPUSH
65299: LD_INT 3
65301: PPUSH
65302: CALL_OW 12
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// animal := CreateHuman ;
65319: LD_ADDR_VAR 0 12
65323: PUSH
65324: CALL_OW 44
65328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65329: LD_VAR 0 12
65333: PPUSH
65334: LD_VAR 0 8
65338: PPUSH
65339: LD_INT 0
65341: PPUSH
65342: CALL 67121 0 3
// end ;
65346: GO 65244
65348: POP
65349: POP
// if enchidnas then
65350: LD_VAR 0 4
65354: IFFALSE 65421
// for i = 1 to enchidnas do
65356: LD_ADDR_VAR 0 11
65360: PUSH
65361: DOUBLE
65362: LD_INT 1
65364: DEC
65365: ST_TO_ADDR
65366: LD_VAR 0 4
65370: PUSH
65371: FOR_TO
65372: IFFALSE 65419
// begin hc_class = 13 ;
65374: LD_ADDR_OWVAR 28
65378: PUSH
65379: LD_INT 13
65381: ST_TO_ADDR
// hc_gallery =  ;
65382: LD_ADDR_OWVAR 33
65386: PUSH
65387: LD_STRING 
65389: ST_TO_ADDR
// animal := CreateHuman ;
65390: LD_ADDR_VAR 0 12
65394: PUSH
65395: CALL_OW 44
65399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65400: LD_VAR 0 12
65404: PPUSH
65405: LD_VAR 0 8
65409: PPUSH
65410: LD_INT 0
65412: PPUSH
65413: CALL 67121 0 3
// end ;
65417: GO 65371
65419: POP
65420: POP
// if fishes then
65421: LD_VAR 0 7
65425: IFFALSE 65492
// for i = 1 to fishes do
65427: LD_ADDR_VAR 0 11
65431: PUSH
65432: DOUBLE
65433: LD_INT 1
65435: DEC
65436: ST_TO_ADDR
65437: LD_VAR 0 7
65441: PUSH
65442: FOR_TO
65443: IFFALSE 65490
// begin hc_class = 20 ;
65445: LD_ADDR_OWVAR 28
65449: PUSH
65450: LD_INT 20
65452: ST_TO_ADDR
// hc_gallery =  ;
65453: LD_ADDR_OWVAR 33
65457: PUSH
65458: LD_STRING 
65460: ST_TO_ADDR
// animal := CreateHuman ;
65461: LD_ADDR_VAR 0 12
65465: PUSH
65466: CALL_OW 44
65470: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65471: LD_VAR 0 12
65475: PPUSH
65476: LD_VAR 0 9
65480: PPUSH
65481: LD_INT 0
65483: PPUSH
65484: CALL 67121 0 3
// end ;
65488: GO 65442
65490: POP
65491: POP
// end ;
65492: LD_VAR 0 10
65496: RET
// export function WantHeal ( sci , unit ) ; begin
65497: LD_INT 0
65499: PPUSH
// if GetTaskList ( sci ) > 0 then
65500: LD_VAR 0 1
65504: PPUSH
65505: CALL_OW 437
65509: PUSH
65510: LD_INT 0
65512: GREATER
65513: IFFALSE 65583
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65515: LD_VAR 0 1
65519: PPUSH
65520: CALL_OW 437
65524: PUSH
65525: LD_INT 1
65527: ARRAY
65528: PUSH
65529: LD_INT 1
65531: ARRAY
65532: PUSH
65533: LD_STRING l
65535: EQUAL
65536: PUSH
65537: LD_VAR 0 1
65541: PPUSH
65542: CALL_OW 437
65546: PUSH
65547: LD_INT 1
65549: ARRAY
65550: PUSH
65551: LD_INT 4
65553: ARRAY
65554: PUSH
65555: LD_VAR 0 2
65559: EQUAL
65560: AND
65561: IFFALSE 65573
// result := true else
65563: LD_ADDR_VAR 0 3
65567: PUSH
65568: LD_INT 1
65570: ST_TO_ADDR
65571: GO 65581
// result := false ;
65573: LD_ADDR_VAR 0 3
65577: PUSH
65578: LD_INT 0
65580: ST_TO_ADDR
// end else
65581: GO 65591
// result := false ;
65583: LD_ADDR_VAR 0 3
65587: PUSH
65588: LD_INT 0
65590: ST_TO_ADDR
// end ;
65591: LD_VAR 0 3
65595: RET
// export function HealTarget ( sci ) ; begin
65596: LD_INT 0
65598: PPUSH
// if not sci then
65599: LD_VAR 0 1
65603: NOT
65604: IFFALSE 65608
// exit ;
65606: GO 65673
// result := 0 ;
65608: LD_ADDR_VAR 0 2
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// if GetTaskList ( sci ) then
65616: LD_VAR 0 1
65620: PPUSH
65621: CALL_OW 437
65625: IFFALSE 65673
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65627: LD_VAR 0 1
65631: PPUSH
65632: CALL_OW 437
65636: PUSH
65637: LD_INT 1
65639: ARRAY
65640: PUSH
65641: LD_INT 1
65643: ARRAY
65644: PUSH
65645: LD_STRING l
65647: EQUAL
65648: IFFALSE 65673
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65650: LD_ADDR_VAR 0 2
65654: PUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 437
65664: PUSH
65665: LD_INT 1
65667: ARRAY
65668: PUSH
65669: LD_INT 4
65671: ARRAY
65672: ST_TO_ADDR
// end ;
65673: LD_VAR 0 2
65677: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65678: LD_INT 0
65680: PPUSH
65681: PPUSH
65682: PPUSH
65683: PPUSH
// if not base_units then
65684: LD_VAR 0 1
65688: NOT
65689: IFFALSE 65693
// exit ;
65691: GO 65780
// result := false ;
65693: LD_ADDR_VAR 0 2
65697: PUSH
65698: LD_INT 0
65700: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65701: LD_ADDR_VAR 0 5
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: LD_INT 21
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PPUSH
65721: CALL_OW 72
65725: ST_TO_ADDR
// if not tmp then
65726: LD_VAR 0 5
65730: NOT
65731: IFFALSE 65735
// exit ;
65733: GO 65780
// for i in tmp do
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_VAR 0 5
65744: PUSH
65745: FOR_IN
65746: IFFALSE 65778
// begin result := EnemyInRange ( i , 22 ) ;
65748: LD_ADDR_VAR 0 2
65752: PUSH
65753: LD_VAR 0 3
65757: PPUSH
65758: LD_INT 22
65760: PPUSH
65761: CALL 63367 0 2
65765: ST_TO_ADDR
// if result then
65766: LD_VAR 0 2
65770: IFFALSE 65776
// exit ;
65772: POP
65773: POP
65774: GO 65780
// end ;
65776: GO 65745
65778: POP
65779: POP
// end ;
65780: LD_VAR 0 2
65784: RET
// export function FilterByTag ( units , tag ) ; begin
65785: LD_INT 0
65787: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65788: LD_ADDR_VAR 0 3
65792: PUSH
65793: LD_VAR 0 1
65797: PPUSH
65798: LD_INT 120
65800: PUSH
65801: LD_VAR 0 2
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PPUSH
65810: CALL_OW 72
65814: ST_TO_ADDR
// end ;
65815: LD_VAR 0 3
65819: RET
// export function IsDriver ( un ) ; begin
65820: LD_INT 0
65822: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 55
65835: PUSH
65836: EMPTY
65837: LIST
65838: PPUSH
65839: CALL_OW 69
65843: IN
65844: ST_TO_ADDR
// end ;
65845: LD_VAR 0 2
65849: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
// list := [ ] ;
65854: LD_ADDR_VAR 0 5
65858: PUSH
65859: EMPTY
65860: ST_TO_ADDR
// case d of 0 :
65861: LD_VAR 0 3
65865: PUSH
65866: LD_INT 0
65868: DOUBLE
65869: EQUAL
65870: IFTRUE 65874
65872: GO 66007
65874: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65875: LD_ADDR_VAR 0 5
65879: PUSH
65880: LD_VAR 0 1
65884: PUSH
65885: LD_INT 4
65887: MINUS
65888: PUSH
65889: LD_VAR 0 2
65893: PUSH
65894: LD_INT 4
65896: MINUS
65897: PUSH
65898: LD_INT 2
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 3
65913: MINUS
65914: PUSH
65915: LD_VAR 0 2
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: PUSH
65928: LD_VAR 0 1
65932: PUSH
65933: LD_INT 4
65935: PLUS
65936: PUSH
65937: LD_VAR 0 2
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 3
65957: PLUS
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 3
65966: PLUS
65967: PUSH
65968: LD_INT 5
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: PUSH
65976: LD_VAR 0 1
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 4
65988: PLUS
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: ST_TO_ADDR
// end ; 1 :
66005: GO 66705
66007: LD_INT 1
66009: DOUBLE
66010: EQUAL
66011: IFTRUE 66015
66013: GO 66148
66015: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66016: LD_ADDR_VAR 0 5
66020: PUSH
66021: LD_VAR 0 1
66025: PUSH
66026: LD_VAR 0 2
66030: PUSH
66031: LD_INT 4
66033: MINUS
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: PUSH
66043: LD_VAR 0 1
66047: PUSH
66048: LD_INT 3
66050: MINUS
66051: PUSH
66052: LD_VAR 0 2
66056: PUSH
66057: LD_INT 3
66059: MINUS
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: PUSH
66069: LD_VAR 0 1
66073: PUSH
66074: LD_INT 4
66076: MINUS
66077: PUSH
66078: LD_VAR 0 2
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: PUSH
66091: LD_VAR 0 1
66095: PUSH
66096: LD_VAR 0 2
66100: PUSH
66101: LD_INT 3
66103: PLUS
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_INT 4
66120: PLUS
66121: PUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 4
66129: PLUS
66130: PUSH
66131: LD_INT 5
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// end ; 2 :
66146: GO 66705
66148: LD_INT 2
66150: DOUBLE
66151: EQUAL
66152: IFTRUE 66156
66154: GO 66285
66156: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66157: LD_ADDR_VAR 0 5
66161: PUSH
66162: LD_VAR 0 1
66166: PUSH
66167: LD_VAR 0 2
66171: PUSH
66172: LD_INT 3
66174: MINUS
66175: PUSH
66176: LD_INT 3
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: PUSH
66184: LD_VAR 0 1
66188: PUSH
66189: LD_INT 4
66191: PLUS
66192: PUSH
66193: LD_VAR 0 2
66197: PUSH
66198: LD_INT 4
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_VAR 0 2
66215: PUSH
66216: LD_INT 4
66218: PLUS
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: PUSH
66228: LD_VAR 0 1
66232: PUSH
66233: LD_INT 3
66235: MINUS
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: PUSH
66250: LD_VAR 0 1
66254: PUSH
66255: LD_INT 4
66257: MINUS
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 4
66266: MINUS
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: ST_TO_ADDR
// end ; 3 :
66283: GO 66705
66285: LD_INT 3
66287: DOUBLE
66288: EQUAL
66289: IFTRUE 66293
66291: GO 66426
66293: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66294: LD_ADDR_VAR 0 5
66298: PUSH
66299: LD_VAR 0 1
66303: PUSH
66304: LD_INT 3
66306: PLUS
66307: PUSH
66308: LD_VAR 0 2
66312: PUSH
66313: LD_INT 4
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: PUSH
66321: LD_VAR 0 1
66325: PUSH
66326: LD_INT 4
66328: PLUS
66329: PUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_INT 4
66337: PLUS
66338: PUSH
66339: LD_INT 5
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: LD_VAR 0 1
66351: PUSH
66352: LD_INT 4
66354: MINUS
66355: PUSH
66356: LD_VAR 0 2
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_VAR 0 2
66378: PUSH
66379: LD_INT 4
66381: MINUS
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_INT 3
66398: MINUS
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: LD_INT 3
66407: MINUS
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// end ; 4 :
66424: GO 66705
66426: LD_INT 4
66428: DOUBLE
66429: EQUAL
66430: IFTRUE 66434
66432: GO 66567
66434: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: LD_VAR 0 1
66444: PUSH
66445: LD_VAR 0 2
66449: PUSH
66450: LD_INT 4
66452: PLUS
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: LIST
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_INT 3
66469: PLUS
66470: PUSH
66471: LD_VAR 0 2
66475: PUSH
66476: LD_INT 3
66478: PLUS
66479: PUSH
66480: LD_INT 5
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: PUSH
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 4
66495: PLUS
66496: PUSH
66497: LD_VAR 0 2
66501: PUSH
66502: LD_INT 4
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_VAR 0 2
66519: PUSH
66520: LD_INT 3
66522: MINUS
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 4
66539: MINUS
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 4
66548: MINUS
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: ST_TO_ADDR
// end ; 5 :
66565: GO 66705
66567: LD_INT 5
66569: DOUBLE
66570: EQUAL
66571: IFTRUE 66575
66573: GO 66704
66575: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66576: LD_ADDR_VAR 0 5
66580: PUSH
66581: LD_VAR 0 1
66585: PUSH
66586: LD_INT 4
66588: MINUS
66589: PUSH
66590: LD_VAR 0 2
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: LIST
66602: PUSH
66603: LD_VAR 0 1
66607: PUSH
66608: LD_VAR 0 2
66612: PUSH
66613: LD_INT 4
66615: MINUS
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: LIST
66624: PUSH
66625: LD_VAR 0 1
66629: PUSH
66630: LD_INT 4
66632: PLUS
66633: PUSH
66634: LD_VAR 0 2
66638: PUSH
66639: LD_INT 4
66641: PLUS
66642: PUSH
66643: LD_INT 5
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: PUSH
66651: LD_VAR 0 1
66655: PUSH
66656: LD_INT 3
66658: PLUS
66659: PUSH
66660: LD_VAR 0 2
66664: PUSH
66665: LD_INT 4
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: PUSH
66673: LD_VAR 0 1
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: LD_INT 3
66685: PLUS
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: ST_TO_ADDR
// end ; end ;
66702: GO 66705
66704: POP
// result := list ;
66705: LD_ADDR_VAR 0 4
66709: PUSH
66710: LD_VAR 0 5
66714: ST_TO_ADDR
// end ;
66715: LD_VAR 0 4
66719: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66720: LD_INT 0
66722: PPUSH
66723: PPUSH
66724: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66725: LD_VAR 0 1
66729: NOT
66730: PUSH
66731: LD_VAR 0 2
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 4
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: IN
66754: NOT
66755: OR
66756: IFFALSE 66760
// exit ;
66758: GO 66843
// tmp := [ ] ;
66760: LD_ADDR_VAR 0 5
66764: PUSH
66765: EMPTY
66766: ST_TO_ADDR
// for i in units do
66767: LD_ADDR_VAR 0 4
66771: PUSH
66772: LD_VAR 0 1
66776: PUSH
66777: FOR_IN
66778: IFFALSE 66812
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66780: LD_ADDR_VAR 0 5
66784: PUSH
66785: LD_VAR 0 5
66789: PPUSH
66790: LD_VAR 0 4
66794: PPUSH
66795: LD_VAR 0 2
66799: PPUSH
66800: CALL_OW 259
66804: PPUSH
66805: CALL 68216 0 2
66809: ST_TO_ADDR
66810: GO 66777
66812: POP
66813: POP
// if not tmp then
66814: LD_VAR 0 5
66818: NOT
66819: IFFALSE 66823
// exit ;
66821: GO 66843
// result := SortListByListDesc ( units , tmp ) ;
66823: LD_ADDR_VAR 0 3
66827: PUSH
66828: LD_VAR 0 1
66832: PPUSH
66833: LD_VAR 0 5
66837: PPUSH
66838: CALL_OW 77
66842: ST_TO_ADDR
// end ;
66843: LD_VAR 0 3
66847: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66848: LD_INT 0
66850: PPUSH
66851: PPUSH
66852: PPUSH
// result := false ;
66853: LD_ADDR_VAR 0 3
66857: PUSH
66858: LD_INT 0
66860: ST_TO_ADDR
// if not building then
66861: LD_VAR 0 2
66865: NOT
66866: IFFALSE 66870
// exit ;
66868: GO 67008
// x := GetX ( building ) ;
66870: LD_ADDR_VAR 0 4
66874: PUSH
66875: LD_VAR 0 2
66879: PPUSH
66880: CALL_OW 250
66884: ST_TO_ADDR
// y := GetY ( building ) ;
66885: LD_ADDR_VAR 0 5
66889: PUSH
66890: LD_VAR 0 2
66894: PPUSH
66895: CALL_OW 251
66899: ST_TO_ADDR
// if not x or not y then
66900: LD_VAR 0 4
66904: NOT
66905: PUSH
66906: LD_VAR 0 5
66910: NOT
66911: OR
66912: IFFALSE 66916
// exit ;
66914: GO 67008
// if GetTaskList ( unit ) then
66916: LD_VAR 0 1
66920: PPUSH
66921: CALL_OW 437
66925: IFFALSE 67008
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66927: LD_STRING e
66929: PUSH
66930: LD_VAR 0 1
66934: PPUSH
66935: CALL_OW 437
66939: PUSH
66940: LD_INT 1
66942: ARRAY
66943: PUSH
66944: LD_INT 1
66946: ARRAY
66947: EQUAL
66948: PUSH
66949: LD_VAR 0 4
66953: PUSH
66954: LD_VAR 0 1
66958: PPUSH
66959: CALL_OW 437
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_INT 2
66970: ARRAY
66971: EQUAL
66972: AND
66973: PUSH
66974: LD_VAR 0 5
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 437
66988: PUSH
66989: LD_INT 1
66991: ARRAY
66992: PUSH
66993: LD_INT 3
66995: ARRAY
66996: EQUAL
66997: AND
66998: IFFALSE 67008
// result := true end ;
67000: LD_ADDR_VAR 0 3
67004: PUSH
67005: LD_INT 1
67007: ST_TO_ADDR
// end ;
67008: LD_VAR 0 3
67012: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67013: LD_INT 0
67015: PPUSH
// result := false ;
67016: LD_ADDR_VAR 0 4
67020: PUSH
67021: LD_INT 0
67023: ST_TO_ADDR
// if GetTaskList ( unit ) then
67024: LD_VAR 0 1
67028: PPUSH
67029: CALL_OW 437
67033: IFFALSE 67116
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67035: LD_STRING M
67037: PUSH
67038: LD_VAR 0 1
67042: PPUSH
67043: CALL_OW 437
67047: PUSH
67048: LD_INT 1
67050: ARRAY
67051: PUSH
67052: LD_INT 1
67054: ARRAY
67055: EQUAL
67056: PUSH
67057: LD_VAR 0 2
67061: PUSH
67062: LD_VAR 0 1
67066: PPUSH
67067: CALL_OW 437
67071: PUSH
67072: LD_INT 1
67074: ARRAY
67075: PUSH
67076: LD_INT 2
67078: ARRAY
67079: EQUAL
67080: AND
67081: PUSH
67082: LD_VAR 0 3
67086: PUSH
67087: LD_VAR 0 1
67091: PPUSH
67092: CALL_OW 437
67096: PUSH
67097: LD_INT 1
67099: ARRAY
67100: PUSH
67101: LD_INT 3
67103: ARRAY
67104: EQUAL
67105: AND
67106: IFFALSE 67116
// result := true ;
67108: LD_ADDR_VAR 0 4
67112: PUSH
67113: LD_INT 1
67115: ST_TO_ADDR
// end ; end ;
67116: LD_VAR 0 4
67120: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67121: LD_INT 0
67123: PPUSH
67124: PPUSH
67125: PPUSH
67126: PPUSH
// if not unit or not area then
67127: LD_VAR 0 1
67131: NOT
67132: PUSH
67133: LD_VAR 0 2
67137: NOT
67138: OR
67139: IFFALSE 67143
// exit ;
67141: GO 67319
// tmp := AreaToList ( area , i ) ;
67143: LD_ADDR_VAR 0 6
67147: PUSH
67148: LD_VAR 0 2
67152: PPUSH
67153: LD_VAR 0 5
67157: PPUSH
67158: CALL_OW 517
67162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67163: LD_ADDR_VAR 0 5
67167: PUSH
67168: DOUBLE
67169: LD_INT 1
67171: DEC
67172: ST_TO_ADDR
67173: LD_VAR 0 6
67177: PUSH
67178: LD_INT 1
67180: ARRAY
67181: PUSH
67182: FOR_TO
67183: IFFALSE 67317
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67185: LD_ADDR_VAR 0 7
67189: PUSH
67190: LD_VAR 0 6
67194: PUSH
67195: LD_INT 1
67197: ARRAY
67198: PUSH
67199: LD_VAR 0 5
67203: ARRAY
67204: PUSH
67205: LD_VAR 0 6
67209: PUSH
67210: LD_INT 2
67212: ARRAY
67213: PUSH
67214: LD_VAR 0 5
67218: ARRAY
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67224: LD_INT 92
67226: PUSH
67227: LD_VAR 0 7
67231: PUSH
67232: LD_INT 1
67234: ARRAY
67235: PUSH
67236: LD_VAR 0 7
67240: PUSH
67241: LD_INT 2
67243: ARRAY
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: PPUSH
67254: CALL_OW 69
67258: PUSH
67259: LD_INT 0
67261: EQUAL
67262: IFFALSE 67315
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67264: LD_VAR 0 1
67268: PPUSH
67269: LD_VAR 0 7
67273: PUSH
67274: LD_INT 1
67276: ARRAY
67277: PPUSH
67278: LD_VAR 0 7
67282: PUSH
67283: LD_INT 2
67285: ARRAY
67286: PPUSH
67287: LD_VAR 0 3
67291: PPUSH
67292: CALL_OW 48
// result := IsPlaced ( unit ) ;
67296: LD_ADDR_VAR 0 4
67300: PUSH
67301: LD_VAR 0 1
67305: PPUSH
67306: CALL_OW 305
67310: ST_TO_ADDR
// exit ;
67311: POP
67312: POP
67313: GO 67319
// end ; end ;
67315: GO 67182
67317: POP
67318: POP
// end ;
67319: LD_VAR 0 4
67323: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67324: LD_INT 0
67326: PPUSH
67327: PPUSH
67328: PPUSH
// if not side or side > 8 then
67329: LD_VAR 0 1
67333: NOT
67334: PUSH
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 8
67342: GREATER
67343: OR
67344: IFFALSE 67348
// exit ;
67346: GO 67535
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67348: LD_ADDR_VAR 0 4
67352: PUSH
67353: LD_INT 22
67355: PUSH
67356: LD_VAR 0 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 21
67367: PUSH
67368: LD_INT 3
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PPUSH
67379: CALL_OW 69
67383: ST_TO_ADDR
// if not tmp then
67384: LD_VAR 0 4
67388: NOT
67389: IFFALSE 67393
// exit ;
67391: GO 67535
// enable_addtolog := true ;
67393: LD_ADDR_OWVAR 81
67397: PUSH
67398: LD_INT 1
67400: ST_TO_ADDR
// AddToLog ( [ ) ;
67401: LD_STRING [
67403: PPUSH
67404: CALL_OW 561
// for i in tmp do
67408: LD_ADDR_VAR 0 3
67412: PUSH
67413: LD_VAR 0 4
67417: PUSH
67418: FOR_IN
67419: IFFALSE 67526
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67421: LD_STRING [
67423: PUSH
67424: LD_VAR 0 3
67428: PPUSH
67429: CALL_OW 266
67433: STR
67434: PUSH
67435: LD_STRING , 
67437: STR
67438: PUSH
67439: LD_VAR 0 3
67443: PPUSH
67444: CALL_OW 250
67448: STR
67449: PUSH
67450: LD_STRING , 
67452: STR
67453: PUSH
67454: LD_VAR 0 3
67458: PPUSH
67459: CALL_OW 251
67463: STR
67464: PUSH
67465: LD_STRING , 
67467: STR
67468: PUSH
67469: LD_VAR 0 3
67473: PPUSH
67474: CALL_OW 254
67478: STR
67479: PUSH
67480: LD_STRING , 
67482: STR
67483: PUSH
67484: LD_VAR 0 3
67488: PPUSH
67489: LD_INT 1
67491: PPUSH
67492: CALL_OW 268
67496: STR
67497: PUSH
67498: LD_STRING , 
67500: STR
67501: PUSH
67502: LD_VAR 0 3
67506: PPUSH
67507: LD_INT 2
67509: PPUSH
67510: CALL_OW 268
67514: STR
67515: PUSH
67516: LD_STRING ],
67518: STR
67519: PPUSH
67520: CALL_OW 561
// end ;
67524: GO 67418
67526: POP
67527: POP
// AddToLog ( ]; ) ;
67528: LD_STRING ];
67530: PPUSH
67531: CALL_OW 561
// end ;
67535: LD_VAR 0 2
67539: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67540: LD_INT 0
67542: PPUSH
67543: PPUSH
67544: PPUSH
67545: PPUSH
67546: PPUSH
// if not area or not rate or not max then
67547: LD_VAR 0 1
67551: NOT
67552: PUSH
67553: LD_VAR 0 2
67557: NOT
67558: OR
67559: PUSH
67560: LD_VAR 0 4
67564: NOT
67565: OR
67566: IFFALSE 67570
// exit ;
67568: GO 67759
// while 1 do
67570: LD_INT 1
67572: IFFALSE 67759
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67574: LD_ADDR_VAR 0 9
67578: PUSH
67579: LD_VAR 0 1
67583: PPUSH
67584: LD_INT 1
67586: PPUSH
67587: CALL_OW 287
67591: PUSH
67592: LD_INT 10
67594: MUL
67595: ST_TO_ADDR
// r := rate / 10 ;
67596: LD_ADDR_VAR 0 7
67600: PUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_INT 10
67608: DIVREAL
67609: ST_TO_ADDR
// time := 1 1$00 ;
67610: LD_ADDR_VAR 0 8
67614: PUSH
67615: LD_INT 2100
67617: ST_TO_ADDR
// if amount < min then
67618: LD_VAR 0 9
67622: PUSH
67623: LD_VAR 0 3
67627: LESS
67628: IFFALSE 67646
// r := r * 2 else
67630: LD_ADDR_VAR 0 7
67634: PUSH
67635: LD_VAR 0 7
67639: PUSH
67640: LD_INT 2
67642: MUL
67643: ST_TO_ADDR
67644: GO 67672
// if amount > max then
67646: LD_VAR 0 9
67650: PUSH
67651: LD_VAR 0 4
67655: GREATER
67656: IFFALSE 67672
// r := r / 2 ;
67658: LD_ADDR_VAR 0 7
67662: PUSH
67663: LD_VAR 0 7
67667: PUSH
67668: LD_INT 2
67670: DIVREAL
67671: ST_TO_ADDR
// time := time / r ;
67672: LD_ADDR_VAR 0 8
67676: PUSH
67677: LD_VAR 0 8
67681: PUSH
67682: LD_VAR 0 7
67686: DIVREAL
67687: ST_TO_ADDR
// if time < 0 then
67688: LD_VAR 0 8
67692: PUSH
67693: LD_INT 0
67695: LESS
67696: IFFALSE 67713
// time := time * - 1 ;
67698: LD_ADDR_VAR 0 8
67702: PUSH
67703: LD_VAR 0 8
67707: PUSH
67708: LD_INT 1
67710: NEG
67711: MUL
67712: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67713: LD_VAR 0 8
67717: PUSH
67718: LD_INT 35
67720: PPUSH
67721: LD_INT 875
67723: PPUSH
67724: CALL_OW 12
67728: PLUS
67729: PPUSH
67730: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67734: LD_INT 1
67736: PPUSH
67737: LD_INT 5
67739: PPUSH
67740: CALL_OW 12
67744: PPUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_INT 1
67752: PPUSH
67753: CALL_OW 55
// end ;
67757: GO 67570
// end ;
67759: LD_VAR 0 5
67763: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67764: LD_INT 0
67766: PPUSH
67767: PPUSH
67768: PPUSH
67769: PPUSH
67770: PPUSH
67771: PPUSH
67772: PPUSH
67773: PPUSH
// if not turrets or not factories then
67774: LD_VAR 0 1
67778: NOT
67779: PUSH
67780: LD_VAR 0 2
67784: NOT
67785: OR
67786: IFFALSE 67790
// exit ;
67788: GO 68097
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67790: LD_ADDR_VAR 0 10
67794: PUSH
67795: LD_INT 5
67797: PUSH
67798: LD_INT 6
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: LD_INT 4
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 3
67817: PUSH
67818: LD_INT 5
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 24
67832: PUSH
67833: LD_INT 25
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 23
67842: PUSH
67843: LD_INT 27
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 42
67856: PUSH
67857: LD_INT 43
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 44
67866: PUSH
67867: LD_INT 46
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 45
67876: PUSH
67877: LD_INT 47
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: LIST
67893: ST_TO_ADDR
// result := [ ] ;
67894: LD_ADDR_VAR 0 3
67898: PUSH
67899: EMPTY
67900: ST_TO_ADDR
// for i in turrets do
67901: LD_ADDR_VAR 0 4
67905: PUSH
67906: LD_VAR 0 1
67910: PUSH
67911: FOR_IN
67912: IFFALSE 68095
// begin nat := GetNation ( i ) ;
67914: LD_ADDR_VAR 0 7
67918: PUSH
67919: LD_VAR 0 4
67923: PPUSH
67924: CALL_OW 248
67928: ST_TO_ADDR
// weapon := 0 ;
67929: LD_ADDR_VAR 0 8
67933: PUSH
67934: LD_INT 0
67936: ST_TO_ADDR
// if not nat then
67937: LD_VAR 0 7
67941: NOT
67942: IFFALSE 67946
// continue ;
67944: GO 67911
// for j in list [ nat ] do
67946: LD_ADDR_VAR 0 5
67950: PUSH
67951: LD_VAR 0 10
67955: PUSH
67956: LD_VAR 0 7
67960: ARRAY
67961: PUSH
67962: FOR_IN
67963: IFFALSE 68004
// if GetBWeapon ( i ) = j [ 1 ] then
67965: LD_VAR 0 4
67969: PPUSH
67970: CALL_OW 269
67974: PUSH
67975: LD_VAR 0 5
67979: PUSH
67980: LD_INT 1
67982: ARRAY
67983: EQUAL
67984: IFFALSE 68002
// begin weapon := j [ 2 ] ;
67986: LD_ADDR_VAR 0 8
67990: PUSH
67991: LD_VAR 0 5
67995: PUSH
67996: LD_INT 2
67998: ARRAY
67999: ST_TO_ADDR
// break ;
68000: GO 68004
// end ;
68002: GO 67962
68004: POP
68005: POP
// if not weapon then
68006: LD_VAR 0 8
68010: NOT
68011: IFFALSE 68015
// continue ;
68013: GO 67911
// for k in factories do
68015: LD_ADDR_VAR 0 6
68019: PUSH
68020: LD_VAR 0 2
68024: PUSH
68025: FOR_IN
68026: IFFALSE 68091
// begin weapons := AvailableWeaponList ( k ) ;
68028: LD_ADDR_VAR 0 9
68032: PUSH
68033: LD_VAR 0 6
68037: PPUSH
68038: CALL_OW 478
68042: ST_TO_ADDR
// if not weapons then
68043: LD_VAR 0 9
68047: NOT
68048: IFFALSE 68052
// continue ;
68050: GO 68025
// if weapon in weapons then
68052: LD_VAR 0 8
68056: PUSH
68057: LD_VAR 0 9
68061: IN
68062: IFFALSE 68089
// begin result := [ i , weapon ] ;
68064: LD_ADDR_VAR 0 3
68068: PUSH
68069: LD_VAR 0 4
68073: PUSH
68074: LD_VAR 0 8
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: ST_TO_ADDR
// exit ;
68083: POP
68084: POP
68085: POP
68086: POP
68087: GO 68097
// end ; end ;
68089: GO 68025
68091: POP
68092: POP
// end ;
68093: GO 67911
68095: POP
68096: POP
// end ;
68097: LD_VAR 0 3
68101: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68102: LD_INT 0
68104: PPUSH
// if not side or side > 8 then
68105: LD_VAR 0 3
68109: NOT
68110: PUSH
68111: LD_VAR 0 3
68115: PUSH
68116: LD_INT 8
68118: GREATER
68119: OR
68120: IFFALSE 68124
// exit ;
68122: GO 68183
// if not range then
68124: LD_VAR 0 4
68128: NOT
68129: IFFALSE 68140
// range := - 12 ;
68131: LD_ADDR_VAR 0 4
68135: PUSH
68136: LD_INT 12
68138: NEG
68139: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68140: LD_VAR 0 1
68144: PPUSH
68145: LD_VAR 0 2
68149: PPUSH
68150: LD_VAR 0 3
68154: PPUSH
68155: LD_VAR 0 4
68159: PPUSH
68160: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68164: LD_VAR 0 1
68168: PPUSH
68169: LD_VAR 0 2
68173: PPUSH
68174: LD_VAR 0 3
68178: PPUSH
68179: CALL_OW 331
// end ;
68183: LD_VAR 0 5
68187: RET
// export function Video ( mode ) ; begin
68188: LD_INT 0
68190: PPUSH
// ingame_video = mode ;
68191: LD_ADDR_OWVAR 52
68195: PUSH
68196: LD_VAR 0 1
68200: ST_TO_ADDR
// interface_hidden = mode ;
68201: LD_ADDR_OWVAR 54
68205: PUSH
68206: LD_VAR 0 1
68210: ST_TO_ADDR
// end ;
68211: LD_VAR 0 2
68215: RET
// export function Join ( array , element ) ; begin
68216: LD_INT 0
68218: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68219: LD_ADDR_VAR 0 3
68223: PUSH
68224: LD_VAR 0 1
68228: PPUSH
68229: LD_VAR 0 1
68233: PUSH
68234: LD_INT 1
68236: PLUS
68237: PPUSH
68238: LD_VAR 0 2
68242: PPUSH
68243: CALL_OW 1
68247: ST_TO_ADDR
// end ;
68248: LD_VAR 0 3
68252: RET
// export function JoinUnion ( array , element ) ; begin
68253: LD_INT 0
68255: PPUSH
// result := array union element ;
68256: LD_ADDR_VAR 0 3
68260: PUSH
68261: LD_VAR 0 1
68265: PUSH
68266: LD_VAR 0 2
68270: UNION
68271: ST_TO_ADDR
// end ;
68272: LD_VAR 0 3
68276: RET
// export function GetBehemoths ( side ) ; begin
68277: LD_INT 0
68279: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68280: LD_ADDR_VAR 0 2
68284: PUSH
68285: LD_INT 22
68287: PUSH
68288: LD_VAR 0 1
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 31
68299: PUSH
68300: LD_INT 25
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PPUSH
68311: CALL_OW 69
68315: ST_TO_ADDR
// end ;
68316: LD_VAR 0 2
68320: RET
// export function Shuffle ( array ) ; var i , index ; begin
68321: LD_INT 0
68323: PPUSH
68324: PPUSH
68325: PPUSH
// result := [ ] ;
68326: LD_ADDR_VAR 0 2
68330: PUSH
68331: EMPTY
68332: ST_TO_ADDR
// if not array then
68333: LD_VAR 0 1
68337: NOT
68338: IFFALSE 68342
// exit ;
68340: GO 68441
// Randomize ;
68342: CALL_OW 10
// for i = array downto 1 do
68346: LD_ADDR_VAR 0 3
68350: PUSH
68351: DOUBLE
68352: LD_VAR 0 1
68356: INC
68357: ST_TO_ADDR
68358: LD_INT 1
68360: PUSH
68361: FOR_DOWNTO
68362: IFFALSE 68439
// begin index := rand ( 1 , array ) ;
68364: LD_ADDR_VAR 0 4
68368: PUSH
68369: LD_INT 1
68371: PPUSH
68372: LD_VAR 0 1
68376: PPUSH
68377: CALL_OW 12
68381: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68382: LD_ADDR_VAR 0 2
68386: PUSH
68387: LD_VAR 0 2
68391: PPUSH
68392: LD_VAR 0 2
68396: PUSH
68397: LD_INT 1
68399: PLUS
68400: PPUSH
68401: LD_VAR 0 1
68405: PUSH
68406: LD_VAR 0 4
68410: ARRAY
68411: PPUSH
68412: CALL_OW 2
68416: ST_TO_ADDR
// array := Delete ( array , index ) ;
68417: LD_ADDR_VAR 0 1
68421: PUSH
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 4
68431: PPUSH
68432: CALL_OW 3
68436: ST_TO_ADDR
// end ;
68437: GO 68361
68439: POP
68440: POP
// end ;
68441: LD_VAR 0 2
68445: RET
// export function GetBaseMaterials ( base ) ; begin
68446: LD_INT 0
68448: PPUSH
// result := [ 0 , 0 , 0 ] ;
68449: LD_ADDR_VAR 0 2
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: ST_TO_ADDR
// if not base then
68468: LD_VAR 0 1
68472: NOT
68473: IFFALSE 68477
// exit ;
68475: GO 68526
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68477: LD_ADDR_VAR 0 2
68481: PUSH
68482: LD_VAR 0 1
68486: PPUSH
68487: LD_INT 1
68489: PPUSH
68490: CALL_OW 275
68494: PUSH
68495: LD_VAR 0 1
68499: PPUSH
68500: LD_INT 2
68502: PPUSH
68503: CALL_OW 275
68507: PUSH
68508: LD_VAR 0 1
68512: PPUSH
68513: LD_INT 3
68515: PPUSH
68516: CALL_OW 275
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: LIST
68525: ST_TO_ADDR
// end ;
68526: LD_VAR 0 2
68530: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68531: LD_INT 0
68533: PPUSH
68534: PPUSH
// result := array ;
68535: LD_ADDR_VAR 0 3
68539: PUSH
68540: LD_VAR 0 1
68544: ST_TO_ADDR
// if size >= result then
68545: LD_VAR 0 2
68549: PUSH
68550: LD_VAR 0 3
68554: GREATEREQUAL
68555: IFFALSE 68559
// exit ;
68557: GO 68609
// if size then
68559: LD_VAR 0 2
68563: IFFALSE 68609
// for i := array downto size do
68565: LD_ADDR_VAR 0 4
68569: PUSH
68570: DOUBLE
68571: LD_VAR 0 1
68575: INC
68576: ST_TO_ADDR
68577: LD_VAR 0 2
68581: PUSH
68582: FOR_DOWNTO
68583: IFFALSE 68607
// result := Delete ( result , result ) ;
68585: LD_ADDR_VAR 0 3
68589: PUSH
68590: LD_VAR 0 3
68594: PPUSH
68595: LD_VAR 0 3
68599: PPUSH
68600: CALL_OW 3
68604: ST_TO_ADDR
68605: GO 68582
68607: POP
68608: POP
// end ;
68609: LD_VAR 0 3
68613: RET
// export function ComExit ( unit ) ; var tmp ; begin
68614: LD_INT 0
68616: PPUSH
68617: PPUSH
// if not IsInUnit ( unit ) then
68618: LD_VAR 0 1
68622: PPUSH
68623: CALL_OW 310
68627: NOT
68628: IFFALSE 68632
// exit ;
68630: GO 68692
// tmp := IsInUnit ( unit ) ;
68632: LD_ADDR_VAR 0 3
68636: PUSH
68637: LD_VAR 0 1
68641: PPUSH
68642: CALL_OW 310
68646: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68647: LD_VAR 0 3
68651: PPUSH
68652: CALL_OW 247
68656: PUSH
68657: LD_INT 2
68659: EQUAL
68660: IFFALSE 68673
// ComExitVehicle ( unit ) else
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL_OW 121
68671: GO 68682
// ComExitBuilding ( unit ) ;
68673: LD_VAR 0 1
68677: PPUSH
68678: CALL_OW 122
// result := tmp ;
68682: LD_ADDR_VAR 0 2
68686: PUSH
68687: LD_VAR 0 3
68691: ST_TO_ADDR
// end ;
68692: LD_VAR 0 2
68696: RET
// export function ComExitAll ( units ) ; var i ; begin
68697: LD_INT 0
68699: PPUSH
68700: PPUSH
// if not units then
68701: LD_VAR 0 1
68705: NOT
68706: IFFALSE 68710
// exit ;
68708: GO 68736
// for i in units do
68710: LD_ADDR_VAR 0 3
68714: PUSH
68715: LD_VAR 0 1
68719: PUSH
68720: FOR_IN
68721: IFFALSE 68734
// ComExit ( i ) ;
68723: LD_VAR 0 3
68727: PPUSH
68728: CALL 68614 0 1
68732: GO 68720
68734: POP
68735: POP
// end ;
68736: LD_VAR 0 2
68740: RET
// export function ResetHc ; begin
68741: LD_INT 0
68743: PPUSH
// InitHc ;
68744: CALL_OW 19
// hc_importance := 0 ;
68748: LD_ADDR_OWVAR 32
68752: PUSH
68753: LD_INT 0
68755: ST_TO_ADDR
// end ;
68756: LD_VAR 0 1
68760: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68761: LD_INT 0
68763: PPUSH
68764: PPUSH
68765: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68766: LD_ADDR_VAR 0 6
68770: PUSH
68771: LD_VAR 0 1
68775: PUSH
68776: LD_VAR 0 3
68780: PLUS
68781: PUSH
68782: LD_INT 2
68784: DIV
68785: ST_TO_ADDR
// if _x < 0 then
68786: LD_VAR 0 6
68790: PUSH
68791: LD_INT 0
68793: LESS
68794: IFFALSE 68811
// _x := _x * - 1 ;
68796: LD_ADDR_VAR 0 6
68800: PUSH
68801: LD_VAR 0 6
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: MUL
68810: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68811: LD_ADDR_VAR 0 7
68815: PUSH
68816: LD_VAR 0 2
68820: PUSH
68821: LD_VAR 0 4
68825: PLUS
68826: PUSH
68827: LD_INT 2
68829: DIV
68830: ST_TO_ADDR
// if _y < 0 then
68831: LD_VAR 0 7
68835: PUSH
68836: LD_INT 0
68838: LESS
68839: IFFALSE 68856
// _y := _y * - 1 ;
68841: LD_ADDR_VAR 0 7
68845: PUSH
68846: LD_VAR 0 7
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: MUL
68855: ST_TO_ADDR
// result := [ _x , _y ] ;
68856: LD_ADDR_VAR 0 5
68860: PUSH
68861: LD_VAR 0 6
68865: PUSH
68866: LD_VAR 0 7
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: ST_TO_ADDR
// end ;
68875: LD_VAR 0 5
68879: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
68884: PPUSH
68885: PPUSH
// task := GetTaskList ( unit ) ;
68886: LD_ADDR_VAR 0 7
68890: PUSH
68891: LD_VAR 0 1
68895: PPUSH
68896: CALL_OW 437
68900: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68901: LD_VAR 0 7
68905: NOT
68906: PUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: LD_VAR 0 2
68916: PPUSH
68917: CALL_OW 308
68921: NOT
68922: AND
68923: IFFALSE 68927
// exit ;
68925: GO 69045
// if IsInArea ( unit , area ) then
68927: LD_VAR 0 1
68931: PPUSH
68932: LD_VAR 0 2
68936: PPUSH
68937: CALL_OW 308
68941: IFFALSE 68959
// begin ComMoveToArea ( unit , goAway ) ;
68943: LD_VAR 0 1
68947: PPUSH
68948: LD_VAR 0 3
68952: PPUSH
68953: CALL_OW 113
// exit ;
68957: GO 69045
// end ; if task [ 1 ] [ 1 ] <> M then
68959: LD_VAR 0 7
68963: PUSH
68964: LD_INT 1
68966: ARRAY
68967: PUSH
68968: LD_INT 1
68970: ARRAY
68971: PUSH
68972: LD_STRING M
68974: NONEQUAL
68975: IFFALSE 68979
// exit ;
68977: GO 69045
// x := task [ 1 ] [ 2 ] ;
68979: LD_ADDR_VAR 0 5
68983: PUSH
68984: LD_VAR 0 7
68988: PUSH
68989: LD_INT 1
68991: ARRAY
68992: PUSH
68993: LD_INT 2
68995: ARRAY
68996: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68997: LD_ADDR_VAR 0 6
69001: PUSH
69002: LD_VAR 0 7
69006: PUSH
69007: LD_INT 1
69009: ARRAY
69010: PUSH
69011: LD_INT 3
69013: ARRAY
69014: ST_TO_ADDR
// if InArea ( x , y , area ) then
69015: LD_VAR 0 5
69019: PPUSH
69020: LD_VAR 0 6
69024: PPUSH
69025: LD_VAR 0 2
69029: PPUSH
69030: CALL_OW 309
69034: IFFALSE 69045
// ComStop ( unit ) ;
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 141
// end ;
69045: LD_VAR 0 4
69049: RET
// export function Abs ( value ) ; begin
69050: LD_INT 0
69052: PPUSH
// result := value ;
69053: LD_ADDR_VAR 0 2
69057: PUSH
69058: LD_VAR 0 1
69062: ST_TO_ADDR
// if value < 0 then
69063: LD_VAR 0 1
69067: PUSH
69068: LD_INT 0
69070: LESS
69071: IFFALSE 69088
// result := value * - 1 ;
69073: LD_ADDR_VAR 0 2
69077: PUSH
69078: LD_VAR 0 1
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: MUL
69087: ST_TO_ADDR
// end ;
69088: LD_VAR 0 2
69092: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69093: LD_INT 0
69095: PPUSH
69096: PPUSH
69097: PPUSH
69098: PPUSH
69099: PPUSH
69100: PPUSH
69101: PPUSH
69102: PPUSH
// if not unit or not building then
69103: LD_VAR 0 1
69107: NOT
69108: PUSH
69109: LD_VAR 0 2
69113: NOT
69114: OR
69115: IFFALSE 69119
// exit ;
69117: GO 69345
// x := GetX ( building ) ;
69119: LD_ADDR_VAR 0 4
69123: PUSH
69124: LD_VAR 0 2
69128: PPUSH
69129: CALL_OW 250
69133: ST_TO_ADDR
// y := GetY ( building ) ;
69134: LD_ADDR_VAR 0 6
69138: PUSH
69139: LD_VAR 0 2
69143: PPUSH
69144: CALL_OW 251
69148: ST_TO_ADDR
// d := GetDir ( building ) ;
69149: LD_ADDR_VAR 0 8
69153: PUSH
69154: LD_VAR 0 2
69158: PPUSH
69159: CALL_OW 254
69163: ST_TO_ADDR
// r := 4 ;
69164: LD_ADDR_VAR 0 9
69168: PUSH
69169: LD_INT 4
69171: ST_TO_ADDR
// for i := 1 to 5 do
69172: LD_ADDR_VAR 0 10
69176: PUSH
69177: DOUBLE
69178: LD_INT 1
69180: DEC
69181: ST_TO_ADDR
69182: LD_INT 5
69184: PUSH
69185: FOR_TO
69186: IFFALSE 69343
// begin _x := ShiftX ( x , d , r + i ) ;
69188: LD_ADDR_VAR 0 5
69192: PUSH
69193: LD_VAR 0 4
69197: PPUSH
69198: LD_VAR 0 8
69202: PPUSH
69203: LD_VAR 0 9
69207: PUSH
69208: LD_VAR 0 10
69212: PLUS
69213: PPUSH
69214: CALL_OW 272
69218: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69219: LD_ADDR_VAR 0 7
69223: PUSH
69224: LD_VAR 0 6
69228: PPUSH
69229: LD_VAR 0 8
69233: PPUSH
69234: LD_VAR 0 9
69238: PUSH
69239: LD_VAR 0 10
69243: PLUS
69244: PPUSH
69245: CALL_OW 273
69249: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69250: LD_VAR 0 5
69254: PPUSH
69255: LD_VAR 0 7
69259: PPUSH
69260: CALL_OW 488
69264: PUSH
69265: LD_VAR 0 5
69269: PPUSH
69270: LD_VAR 0 7
69274: PPUSH
69275: CALL_OW 428
69279: PPUSH
69280: CALL_OW 247
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: LD_INT 2
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: IN
69295: NOT
69296: AND
69297: IFFALSE 69341
// begin ComMoveXY ( unit , _x , _y ) ;
69299: LD_VAR 0 1
69303: PPUSH
69304: LD_VAR 0 5
69308: PPUSH
69309: LD_VAR 0 7
69313: PPUSH
69314: CALL_OW 111
// result := [ _x , _y ] ;
69318: LD_ADDR_VAR 0 3
69322: PUSH
69323: LD_VAR 0 5
69327: PUSH
69328: LD_VAR 0 7
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: ST_TO_ADDR
// exit ;
69337: POP
69338: POP
69339: GO 69345
// end ; end ;
69341: GO 69185
69343: POP
69344: POP
// end ;
69345: LD_VAR 0 3
69349: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69350: LD_INT 0
69352: PPUSH
69353: PPUSH
69354: PPUSH
// result := 0 ;
69355: LD_ADDR_VAR 0 3
69359: PUSH
69360: LD_INT 0
69362: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69363: LD_VAR 0 1
69367: PUSH
69368: LD_INT 0
69370: LESS
69371: PUSH
69372: LD_VAR 0 1
69376: PUSH
69377: LD_INT 8
69379: GREATER
69380: OR
69381: PUSH
69382: LD_VAR 0 2
69386: PUSH
69387: LD_INT 0
69389: LESS
69390: OR
69391: PUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_INT 8
69399: GREATER
69400: OR
69401: IFFALSE 69405
// exit ;
69403: GO 69480
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69405: LD_ADDR_VAR 0 4
69409: PUSH
69410: LD_INT 22
69412: PUSH
69413: LD_VAR 0 2
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PPUSH
69422: CALL_OW 69
69426: PUSH
69427: FOR_IN
69428: IFFALSE 69478
// begin un := UnitShoot ( i ) ;
69430: LD_ADDR_VAR 0 5
69434: PUSH
69435: LD_VAR 0 4
69439: PPUSH
69440: CALL_OW 504
69444: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69445: LD_VAR 0 5
69449: PPUSH
69450: CALL_OW 255
69454: PUSH
69455: LD_VAR 0 1
69459: EQUAL
69460: IFFALSE 69476
// begin result := un ;
69462: LD_ADDR_VAR 0 3
69466: PUSH
69467: LD_VAR 0 5
69471: ST_TO_ADDR
// exit ;
69472: POP
69473: POP
69474: GO 69480
// end ; end ;
69476: GO 69427
69478: POP
69479: POP
// end ;
69480: LD_VAR 0 3
69484: RET
// export function GetCargoBay ( units ) ; begin
69485: LD_INT 0
69487: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69488: LD_ADDR_VAR 0 2
69492: PUSH
69493: LD_VAR 0 1
69497: PPUSH
69498: LD_INT 2
69500: PUSH
69501: LD_INT 34
69503: PUSH
69504: LD_INT 12
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 34
69513: PUSH
69514: LD_INT 51
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 34
69523: PUSH
69524: LD_INT 32
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 34
69533: PUSH
69534: LD_INT 89
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: PPUSH
69548: CALL_OW 72
69552: ST_TO_ADDR
// end ;
69553: LD_VAR 0 2
69557: RET
// export function Negate ( value ) ; begin
69558: LD_INT 0
69560: PPUSH
// result := not value ;
69561: LD_ADDR_VAR 0 2
69565: PUSH
69566: LD_VAR 0 1
69570: NOT
69571: ST_TO_ADDR
// end ;
69572: LD_VAR 0 2
69576: RET
// export function Inc ( value ) ; begin
69577: LD_INT 0
69579: PPUSH
// result := value + 1 ;
69580: LD_ADDR_VAR 0 2
69584: PUSH
69585: LD_VAR 0 1
69589: PUSH
69590: LD_INT 1
69592: PLUS
69593: ST_TO_ADDR
// end ;
69594: LD_VAR 0 2
69598: RET
// export function Dec ( value ) ; begin
69599: LD_INT 0
69601: PPUSH
// result := value - 1 ;
69602: LD_ADDR_VAR 0 2
69606: PUSH
69607: LD_VAR 0 1
69611: PUSH
69612: LD_INT 1
69614: MINUS
69615: ST_TO_ADDR
// end ;
69616: LD_VAR 0 2
69620: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69621: LD_INT 0
69623: PPUSH
69624: PPUSH
69625: PPUSH
69626: PPUSH
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69631: LD_VAR 0 1
69635: PPUSH
69636: LD_VAR 0 2
69640: PPUSH
69641: CALL_OW 488
69645: NOT
69646: PUSH
69647: LD_VAR 0 3
69651: PPUSH
69652: LD_VAR 0 4
69656: PPUSH
69657: CALL_OW 488
69661: NOT
69662: OR
69663: IFFALSE 69676
// begin result := - 1 ;
69665: LD_ADDR_VAR 0 5
69669: PUSH
69670: LD_INT 1
69672: NEG
69673: ST_TO_ADDR
// exit ;
69674: GO 69911
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69676: LD_ADDR_VAR 0 12
69680: PUSH
69681: LD_VAR 0 1
69685: PPUSH
69686: LD_VAR 0 2
69690: PPUSH
69691: LD_VAR 0 3
69695: PPUSH
69696: LD_VAR 0 4
69700: PPUSH
69701: CALL 68761 0 4
69705: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69706: LD_ADDR_VAR 0 11
69710: PUSH
69711: LD_VAR 0 1
69715: PPUSH
69716: LD_VAR 0 2
69720: PPUSH
69721: LD_VAR 0 12
69725: PUSH
69726: LD_INT 1
69728: ARRAY
69729: PPUSH
69730: LD_VAR 0 12
69734: PUSH
69735: LD_INT 2
69737: ARRAY
69738: PPUSH
69739: CALL_OW 298
69743: ST_TO_ADDR
// distance := 9999 ;
69744: LD_ADDR_VAR 0 10
69748: PUSH
69749: LD_INT 9999
69751: ST_TO_ADDR
// for i := 0 to 5 do
69752: LD_ADDR_VAR 0 6
69756: PUSH
69757: DOUBLE
69758: LD_INT 0
69760: DEC
69761: ST_TO_ADDR
69762: LD_INT 5
69764: PUSH
69765: FOR_TO
69766: IFFALSE 69909
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69768: LD_ADDR_VAR 0 7
69772: PUSH
69773: LD_VAR 0 1
69777: PPUSH
69778: LD_VAR 0 6
69782: PPUSH
69783: LD_VAR 0 11
69787: PPUSH
69788: CALL_OW 272
69792: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69793: LD_ADDR_VAR 0 8
69797: PUSH
69798: LD_VAR 0 2
69802: PPUSH
69803: LD_VAR 0 6
69807: PPUSH
69808: LD_VAR 0 11
69812: PPUSH
69813: CALL_OW 273
69817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69818: LD_VAR 0 7
69822: PPUSH
69823: LD_VAR 0 8
69827: PPUSH
69828: CALL_OW 488
69832: NOT
69833: IFFALSE 69837
// continue ;
69835: GO 69765
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69837: LD_ADDR_VAR 0 9
69841: PUSH
69842: LD_VAR 0 12
69846: PUSH
69847: LD_INT 1
69849: ARRAY
69850: PPUSH
69851: LD_VAR 0 12
69855: PUSH
69856: LD_INT 2
69858: ARRAY
69859: PPUSH
69860: LD_VAR 0 7
69864: PPUSH
69865: LD_VAR 0 8
69869: PPUSH
69870: CALL_OW 298
69874: ST_TO_ADDR
// if tmp < distance then
69875: LD_VAR 0 9
69879: PUSH
69880: LD_VAR 0 10
69884: LESS
69885: IFFALSE 69907
// begin result := i ;
69887: LD_ADDR_VAR 0 5
69891: PUSH
69892: LD_VAR 0 6
69896: ST_TO_ADDR
// distance := tmp ;
69897: LD_ADDR_VAR 0 10
69901: PUSH
69902: LD_VAR 0 9
69906: ST_TO_ADDR
// end ; end ;
69907: GO 69765
69909: POP
69910: POP
// end ;
69911: LD_VAR 0 5
69915: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69916: LD_INT 0
69918: PPUSH
69919: PPUSH
// if not driver or not IsInUnit ( driver ) then
69920: LD_VAR 0 1
69924: NOT
69925: PUSH
69926: LD_VAR 0 1
69930: PPUSH
69931: CALL_OW 310
69935: NOT
69936: OR
69937: IFFALSE 69941
// exit ;
69939: GO 70031
// vehicle := IsInUnit ( driver ) ;
69941: LD_ADDR_VAR 0 3
69945: PUSH
69946: LD_VAR 0 1
69950: PPUSH
69951: CALL_OW 310
69955: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69956: LD_VAR 0 1
69960: PPUSH
69961: LD_STRING \
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: LD_INT 0
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: PUSH
69991: LD_STRING E
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: LD_VAR 0 3
70004: PUSH
70005: LD_INT 0
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PPUSH
70027: CALL_OW 446
// end ;
70031: LD_VAR 0 2
70035: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70036: LD_INT 0
70038: PPUSH
70039: PPUSH
// if not driver or not IsInUnit ( driver ) then
70040: LD_VAR 0 1
70044: NOT
70045: PUSH
70046: LD_VAR 0 1
70050: PPUSH
70051: CALL_OW 310
70055: NOT
70056: OR
70057: IFFALSE 70061
// exit ;
70059: GO 70151
// vehicle := IsInUnit ( driver ) ;
70061: LD_ADDR_VAR 0 3
70065: PUSH
70066: LD_VAR 0 1
70070: PPUSH
70071: CALL_OW 310
70075: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70076: LD_VAR 0 1
70080: PPUSH
70081: LD_STRING \
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: LD_INT 0
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: PUSH
70111: LD_STRING E
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: LD_INT 0
70119: PUSH
70120: LD_VAR 0 3
70124: PUSH
70125: LD_INT 0
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: LD_INT 0
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PPUSH
70147: CALL_OW 447
// end ;
70151: LD_VAR 0 2
70155: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70156: LD_INT 0
70158: PPUSH
70159: PPUSH
70160: PPUSH
// tmp := [ ] ;
70161: LD_ADDR_VAR 0 5
70165: PUSH
70166: EMPTY
70167: ST_TO_ADDR
// for i in units do
70168: LD_ADDR_VAR 0 4
70172: PUSH
70173: LD_VAR 0 1
70177: PUSH
70178: FOR_IN
70179: IFFALSE 70217
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70181: LD_ADDR_VAR 0 5
70185: PUSH
70186: LD_VAR 0 5
70190: PPUSH
70191: LD_VAR 0 5
70195: PUSH
70196: LD_INT 1
70198: PLUS
70199: PPUSH
70200: LD_VAR 0 4
70204: PPUSH
70205: CALL_OW 256
70209: PPUSH
70210: CALL_OW 2
70214: ST_TO_ADDR
70215: GO 70178
70217: POP
70218: POP
// if not tmp then
70219: LD_VAR 0 5
70223: NOT
70224: IFFALSE 70228
// exit ;
70226: GO 70276
// if asc then
70228: LD_VAR 0 2
70232: IFFALSE 70256
// result := SortListByListAsc ( units , tmp ) else
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_VAR 0 1
70243: PPUSH
70244: LD_VAR 0 5
70248: PPUSH
70249: CALL_OW 76
70253: ST_TO_ADDR
70254: GO 70276
// result := SortListByListDesc ( units , tmp ) ;
70256: LD_ADDR_VAR 0 3
70260: PUSH
70261: LD_VAR 0 1
70265: PPUSH
70266: LD_VAR 0 5
70270: PPUSH
70271: CALL_OW 77
70275: ST_TO_ADDR
// end ;
70276: LD_VAR 0 3
70280: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70281: LD_INT 0
70283: PPUSH
70284: PPUSH
// task := GetTaskList ( mech ) ;
70285: LD_ADDR_VAR 0 4
70289: PUSH
70290: LD_VAR 0 1
70294: PPUSH
70295: CALL_OW 437
70299: ST_TO_ADDR
// if not task then
70300: LD_VAR 0 4
70304: NOT
70305: IFFALSE 70309
// exit ;
70307: GO 70351
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70309: LD_ADDR_VAR 0 3
70313: PUSH
70314: LD_VAR 0 4
70318: PUSH
70319: LD_INT 1
70321: ARRAY
70322: PUSH
70323: LD_INT 1
70325: ARRAY
70326: PUSH
70327: LD_STRING r
70329: EQUAL
70330: PUSH
70331: LD_VAR 0 4
70335: PUSH
70336: LD_INT 1
70338: ARRAY
70339: PUSH
70340: LD_INT 4
70342: ARRAY
70343: PUSH
70344: LD_VAR 0 2
70348: EQUAL
70349: AND
70350: ST_TO_ADDR
// end ;
70351: LD_VAR 0 3
70355: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70356: LD_INT 0
70358: PPUSH
// SetDir ( unit , d ) ;
70359: LD_VAR 0 1
70363: PPUSH
70364: LD_VAR 0 4
70368: PPUSH
70369: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70373: LD_VAR 0 1
70377: PPUSH
70378: LD_VAR 0 2
70382: PPUSH
70383: LD_VAR 0 3
70387: PPUSH
70388: LD_VAR 0 5
70392: PPUSH
70393: CALL_OW 48
// end ;
70397: LD_VAR 0 6
70401: RET
// export function ToNaturalNumber ( number ) ; begin
70402: LD_INT 0
70404: PPUSH
// result := number div 1 ;
70405: LD_ADDR_VAR 0 2
70409: PUSH
70410: LD_VAR 0 1
70414: PUSH
70415: LD_INT 1
70417: DIV
70418: ST_TO_ADDR
// if number < 0 then
70419: LD_VAR 0 1
70423: PUSH
70424: LD_INT 0
70426: LESS
70427: IFFALSE 70437
// result := 0 ;
70429: LD_ADDR_VAR 0 2
70433: PUSH
70434: LD_INT 0
70436: ST_TO_ADDR
// end ;
70437: LD_VAR 0 2
70441: RET
// export function SortByClass ( units , class ) ; var un ; begin
70442: LD_INT 0
70444: PPUSH
70445: PPUSH
// if not units or not class then
70446: LD_VAR 0 1
70450: NOT
70451: PUSH
70452: LD_VAR 0 2
70456: NOT
70457: OR
70458: IFFALSE 70462
// exit ;
70460: GO 70557
// result := [ ] ;
70462: LD_ADDR_VAR 0 3
70466: PUSH
70467: EMPTY
70468: ST_TO_ADDR
// for un in units do
70469: LD_ADDR_VAR 0 4
70473: PUSH
70474: LD_VAR 0 1
70478: PUSH
70479: FOR_IN
70480: IFFALSE 70555
// if GetClass ( un ) = class then
70482: LD_VAR 0 4
70486: PPUSH
70487: CALL_OW 257
70491: PUSH
70492: LD_VAR 0 2
70496: EQUAL
70497: IFFALSE 70524
// result := Insert ( result , 1 , un ) else
70499: LD_ADDR_VAR 0 3
70503: PUSH
70504: LD_VAR 0 3
70508: PPUSH
70509: LD_INT 1
70511: PPUSH
70512: LD_VAR 0 4
70516: PPUSH
70517: CALL_OW 2
70521: ST_TO_ADDR
70522: GO 70553
// result := Replace ( result , result + 1 , un ) ;
70524: LD_ADDR_VAR 0 3
70528: PUSH
70529: LD_VAR 0 3
70533: PPUSH
70534: LD_VAR 0 3
70538: PUSH
70539: LD_INT 1
70541: PLUS
70542: PPUSH
70543: LD_VAR 0 4
70547: PPUSH
70548: CALL_OW 1
70552: ST_TO_ADDR
70553: GO 70479
70555: POP
70556: POP
// end ;
70557: LD_VAR 0 3
70561: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70562: LD_INT 0
70564: PPUSH
70565: PPUSH
70566: PPUSH
70567: PPUSH
70568: PPUSH
70569: PPUSH
70570: PPUSH
// result := [ ] ;
70571: LD_ADDR_VAR 0 4
70575: PUSH
70576: EMPTY
70577: ST_TO_ADDR
// if x - r < 0 then
70578: LD_VAR 0 1
70582: PUSH
70583: LD_VAR 0 3
70587: MINUS
70588: PUSH
70589: LD_INT 0
70591: LESS
70592: IFFALSE 70604
// min_x := 0 else
70594: LD_ADDR_VAR 0 8
70598: PUSH
70599: LD_INT 0
70601: ST_TO_ADDR
70602: GO 70620
// min_x := x - r ;
70604: LD_ADDR_VAR 0 8
70608: PUSH
70609: LD_VAR 0 1
70613: PUSH
70614: LD_VAR 0 3
70618: MINUS
70619: ST_TO_ADDR
// if y - r < 0 then
70620: LD_VAR 0 2
70624: PUSH
70625: LD_VAR 0 3
70629: MINUS
70630: PUSH
70631: LD_INT 0
70633: LESS
70634: IFFALSE 70646
// min_y := 0 else
70636: LD_ADDR_VAR 0 7
70640: PUSH
70641: LD_INT 0
70643: ST_TO_ADDR
70644: GO 70662
// min_y := y - r ;
70646: LD_ADDR_VAR 0 7
70650: PUSH
70651: LD_VAR 0 2
70655: PUSH
70656: LD_VAR 0 3
70660: MINUS
70661: ST_TO_ADDR
// max_x := x + r ;
70662: LD_ADDR_VAR 0 9
70666: PUSH
70667: LD_VAR 0 1
70671: PUSH
70672: LD_VAR 0 3
70676: PLUS
70677: ST_TO_ADDR
// max_y := y + r ;
70678: LD_ADDR_VAR 0 10
70682: PUSH
70683: LD_VAR 0 2
70687: PUSH
70688: LD_VAR 0 3
70692: PLUS
70693: ST_TO_ADDR
// for _x = min_x to max_x do
70694: LD_ADDR_VAR 0 5
70698: PUSH
70699: DOUBLE
70700: LD_VAR 0 8
70704: DEC
70705: ST_TO_ADDR
70706: LD_VAR 0 9
70710: PUSH
70711: FOR_TO
70712: IFFALSE 70813
// for _y = min_y to max_y do
70714: LD_ADDR_VAR 0 6
70718: PUSH
70719: DOUBLE
70720: LD_VAR 0 7
70724: DEC
70725: ST_TO_ADDR
70726: LD_VAR 0 10
70730: PUSH
70731: FOR_TO
70732: IFFALSE 70809
// begin if not ValidHex ( _x , _y ) then
70734: LD_VAR 0 5
70738: PPUSH
70739: LD_VAR 0 6
70743: PPUSH
70744: CALL_OW 488
70748: NOT
70749: IFFALSE 70753
// continue ;
70751: GO 70731
// if GetResourceTypeXY ( _x , _y ) then
70753: LD_VAR 0 5
70757: PPUSH
70758: LD_VAR 0 6
70762: PPUSH
70763: CALL_OW 283
70767: IFFALSE 70807
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70769: LD_ADDR_VAR 0 4
70773: PUSH
70774: LD_VAR 0 4
70778: PPUSH
70779: LD_VAR 0 4
70783: PUSH
70784: LD_INT 1
70786: PLUS
70787: PPUSH
70788: LD_VAR 0 5
70792: PUSH
70793: LD_VAR 0 6
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PPUSH
70802: CALL_OW 1
70806: ST_TO_ADDR
// end ;
70807: GO 70731
70809: POP
70810: POP
70811: GO 70711
70813: POP
70814: POP
// end ;
70815: LD_VAR 0 4
70819: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70820: LD_INT 0
70822: PPUSH
70823: PPUSH
70824: PPUSH
70825: PPUSH
70826: PPUSH
70827: PPUSH
70828: PPUSH
70829: PPUSH
// if not units then
70830: LD_VAR 0 1
70834: NOT
70835: IFFALSE 70839
// exit ;
70837: GO 71363
// result := UnitFilter ( units , [ f_ok ] ) ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: LD_VAR 0 1
70848: PPUSH
70849: LD_INT 50
70851: PUSH
70852: EMPTY
70853: LIST
70854: PPUSH
70855: CALL_OW 72
70859: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70860: LD_ADDR_VAR 0 8
70864: PUSH
70865: LD_VAR 0 1
70869: PUSH
70870: LD_INT 1
70872: ARRAY
70873: PPUSH
70874: CALL_OW 255
70878: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70879: LD_ADDR_VAR 0 10
70883: PUSH
70884: LD_INT 29
70886: PUSH
70887: LD_INT 91
70889: PUSH
70890: LD_INT 49
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: ST_TO_ADDR
// if not result then
70898: LD_VAR 0 3
70902: NOT
70903: IFFALSE 70907
// exit ;
70905: GO 71363
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70907: LD_ADDR_VAR 0 5
70911: PUSH
70912: LD_INT 81
70914: PUSH
70915: LD_VAR 0 8
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PPUSH
70924: CALL_OW 69
70928: ST_TO_ADDR
// for i in result do
70929: LD_ADDR_VAR 0 4
70933: PUSH
70934: LD_VAR 0 3
70938: PUSH
70939: FOR_IN
70940: IFFALSE 71361
// begin tag := GetTag ( i ) + 1 ;
70942: LD_ADDR_VAR 0 9
70946: PUSH
70947: LD_VAR 0 4
70951: PPUSH
70952: CALL_OW 110
70956: PUSH
70957: LD_INT 1
70959: PLUS
70960: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70961: LD_ADDR_VAR 0 7
70965: PUSH
70966: LD_VAR 0 4
70970: PPUSH
70971: CALL_OW 250
70975: PPUSH
70976: LD_VAR 0 4
70980: PPUSH
70981: CALL_OW 251
70985: PPUSH
70986: LD_INT 6
70988: PPUSH
70989: CALL 70562 0 3
70993: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70994: LD_VAR 0 4
70998: PPUSH
70999: CALL_OW 247
71003: PUSH
71004: LD_INT 2
71006: EQUAL
71007: PUSH
71008: LD_VAR 0 7
71012: AND
71013: PUSH
71014: LD_VAR 0 4
71018: PPUSH
71019: CALL_OW 264
71023: PUSH
71024: LD_VAR 0 10
71028: IN
71029: NOT
71030: AND
71031: IFFALSE 71070
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71033: LD_VAR 0 4
71037: PPUSH
71038: LD_VAR 0 7
71042: PUSH
71043: LD_INT 1
71045: ARRAY
71046: PUSH
71047: LD_INT 1
71049: ARRAY
71050: PPUSH
71051: LD_VAR 0 7
71055: PUSH
71056: LD_INT 1
71058: ARRAY
71059: PUSH
71060: LD_INT 2
71062: ARRAY
71063: PPUSH
71064: CALL_OW 116
71068: GO 71359
// if path > tag then
71070: LD_VAR 0 2
71074: PUSH
71075: LD_VAR 0 9
71079: GREATER
71080: IFFALSE 71288
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71082: LD_ADDR_VAR 0 6
71086: PUSH
71087: LD_VAR 0 5
71091: PPUSH
71092: LD_INT 91
71094: PUSH
71095: LD_VAR 0 4
71099: PUSH
71100: LD_INT 8
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: LIST
71107: PPUSH
71108: CALL_OW 72
71112: ST_TO_ADDR
// if nearEnemy then
71113: LD_VAR 0 6
71117: IFFALSE 71186
// begin if GetWeapon ( i ) = ru_time_lapser then
71119: LD_VAR 0 4
71123: PPUSH
71124: CALL_OW 264
71128: PUSH
71129: LD_INT 49
71131: EQUAL
71132: IFFALSE 71160
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71134: LD_VAR 0 4
71138: PPUSH
71139: LD_VAR 0 6
71143: PPUSH
71144: LD_VAR 0 4
71148: PPUSH
71149: CALL_OW 74
71153: PPUSH
71154: CALL_OW 112
71158: GO 71184
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71160: LD_VAR 0 4
71164: PPUSH
71165: LD_VAR 0 6
71169: PPUSH
71170: LD_VAR 0 4
71174: PPUSH
71175: CALL_OW 74
71179: PPUSH
71180: CALL 72288 0 2
// end else
71184: GO 71286
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71186: LD_VAR 0 4
71190: PPUSH
71191: LD_VAR 0 2
71195: PUSH
71196: LD_VAR 0 9
71200: ARRAY
71201: PUSH
71202: LD_INT 1
71204: ARRAY
71205: PPUSH
71206: LD_VAR 0 2
71210: PUSH
71211: LD_VAR 0 9
71215: ARRAY
71216: PUSH
71217: LD_INT 2
71219: ARRAY
71220: PPUSH
71221: CALL_OW 297
71225: PUSH
71226: LD_INT 6
71228: GREATER
71229: IFFALSE 71272
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71231: LD_VAR 0 4
71235: PPUSH
71236: LD_VAR 0 2
71240: PUSH
71241: LD_VAR 0 9
71245: ARRAY
71246: PUSH
71247: LD_INT 1
71249: ARRAY
71250: PPUSH
71251: LD_VAR 0 2
71255: PUSH
71256: LD_VAR 0 9
71260: ARRAY
71261: PUSH
71262: LD_INT 2
71264: ARRAY
71265: PPUSH
71266: CALL_OW 114
71270: GO 71286
// SetTag ( i , tag ) ;
71272: LD_VAR 0 4
71276: PPUSH
71277: LD_VAR 0 9
71281: PPUSH
71282: CALL_OW 109
// end else
71286: GO 71359
// if enemy then
71288: LD_VAR 0 5
71292: IFFALSE 71359
// begin if GetWeapon ( i ) = ru_time_lapser then
71294: LD_VAR 0 4
71298: PPUSH
71299: CALL_OW 264
71303: PUSH
71304: LD_INT 49
71306: EQUAL
71307: IFFALSE 71335
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71309: LD_VAR 0 4
71313: PPUSH
71314: LD_VAR 0 5
71318: PPUSH
71319: LD_VAR 0 4
71323: PPUSH
71324: CALL_OW 74
71328: PPUSH
71329: CALL_OW 112
71333: GO 71359
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71335: LD_VAR 0 4
71339: PPUSH
71340: LD_VAR 0 5
71344: PPUSH
71345: LD_VAR 0 4
71349: PPUSH
71350: CALL_OW 74
71354: PPUSH
71355: CALL 72288 0 2
// end ; end ;
71359: GO 70939
71361: POP
71362: POP
// end ;
71363: LD_VAR 0 3
71367: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71368: LD_INT 0
71370: PPUSH
71371: PPUSH
71372: PPUSH
// if not unit or IsInUnit ( unit ) then
71373: LD_VAR 0 1
71377: NOT
71378: PUSH
71379: LD_VAR 0 1
71383: PPUSH
71384: CALL_OW 310
71388: OR
71389: IFFALSE 71393
// exit ;
71391: GO 71484
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71393: LD_ADDR_VAR 0 4
71397: PUSH
71398: LD_VAR 0 1
71402: PPUSH
71403: CALL_OW 250
71407: PPUSH
71408: LD_VAR 0 2
71412: PPUSH
71413: LD_INT 1
71415: PPUSH
71416: CALL_OW 272
71420: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71421: LD_ADDR_VAR 0 5
71425: PUSH
71426: LD_VAR 0 1
71430: PPUSH
71431: CALL_OW 251
71435: PPUSH
71436: LD_VAR 0 2
71440: PPUSH
71441: LD_INT 1
71443: PPUSH
71444: CALL_OW 273
71448: ST_TO_ADDR
// if ValidHex ( x , y ) then
71449: LD_VAR 0 4
71453: PPUSH
71454: LD_VAR 0 5
71458: PPUSH
71459: CALL_OW 488
71463: IFFALSE 71484
// ComTurnXY ( unit , x , y ) ;
71465: LD_VAR 0 1
71469: PPUSH
71470: LD_VAR 0 4
71474: PPUSH
71475: LD_VAR 0 5
71479: PPUSH
71480: CALL_OW 118
// end ;
71484: LD_VAR 0 3
71488: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71489: LD_INT 0
71491: PPUSH
71492: PPUSH
// result := false ;
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: LD_INT 0
71500: ST_TO_ADDR
// if not units then
71501: LD_VAR 0 2
71505: NOT
71506: IFFALSE 71510
// exit ;
71508: GO 71555
// for i in units do
71510: LD_ADDR_VAR 0 4
71514: PUSH
71515: LD_VAR 0 2
71519: PUSH
71520: FOR_IN
71521: IFFALSE 71553
// if See ( side , i ) then
71523: LD_VAR 0 1
71527: PPUSH
71528: LD_VAR 0 4
71532: PPUSH
71533: CALL_OW 292
71537: IFFALSE 71551
// begin result := true ;
71539: LD_ADDR_VAR 0 3
71543: PUSH
71544: LD_INT 1
71546: ST_TO_ADDR
// exit ;
71547: POP
71548: POP
71549: GO 71555
// end ;
71551: GO 71520
71553: POP
71554: POP
// end ;
71555: LD_VAR 0 3
71559: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71560: LD_INT 0
71562: PPUSH
71563: PPUSH
71564: PPUSH
71565: PPUSH
// if not unit or not points then
71566: LD_VAR 0 1
71570: NOT
71571: PUSH
71572: LD_VAR 0 2
71576: NOT
71577: OR
71578: IFFALSE 71582
// exit ;
71580: GO 71672
// dist := 99999 ;
71582: LD_ADDR_VAR 0 5
71586: PUSH
71587: LD_INT 99999
71589: ST_TO_ADDR
// for i in points do
71590: LD_ADDR_VAR 0 4
71594: PUSH
71595: LD_VAR 0 2
71599: PUSH
71600: FOR_IN
71601: IFFALSE 71670
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71603: LD_ADDR_VAR 0 6
71607: PUSH
71608: LD_VAR 0 1
71612: PPUSH
71613: LD_VAR 0 4
71617: PUSH
71618: LD_INT 1
71620: ARRAY
71621: PPUSH
71622: LD_VAR 0 4
71626: PUSH
71627: LD_INT 2
71629: ARRAY
71630: PPUSH
71631: CALL_OW 297
71635: ST_TO_ADDR
// if tmpDist < dist then
71636: LD_VAR 0 6
71640: PUSH
71641: LD_VAR 0 5
71645: LESS
71646: IFFALSE 71668
// begin result := i ;
71648: LD_ADDR_VAR 0 3
71652: PUSH
71653: LD_VAR 0 4
71657: ST_TO_ADDR
// dist := tmpDist ;
71658: LD_ADDR_VAR 0 5
71662: PUSH
71663: LD_VAR 0 6
71667: ST_TO_ADDR
// end ; end ;
71668: GO 71600
71670: POP
71671: POP
// end ;
71672: LD_VAR 0 3
71676: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71677: LD_INT 0
71679: PPUSH
// uc_side := side ;
71680: LD_ADDR_OWVAR 20
71684: PUSH
71685: LD_VAR 0 1
71689: ST_TO_ADDR
// uc_nation := 3 ;
71690: LD_ADDR_OWVAR 21
71694: PUSH
71695: LD_INT 3
71697: ST_TO_ADDR
// vc_chassis := 25 ;
71698: LD_ADDR_OWVAR 37
71702: PUSH
71703: LD_INT 25
71705: ST_TO_ADDR
// vc_engine := engine_siberite ;
71706: LD_ADDR_OWVAR 39
71710: PUSH
71711: LD_INT 3
71713: ST_TO_ADDR
// vc_control := control_computer ;
71714: LD_ADDR_OWVAR 38
71718: PUSH
71719: LD_INT 3
71721: ST_TO_ADDR
// vc_weapon := 59 ;
71722: LD_ADDR_OWVAR 40
71726: PUSH
71727: LD_INT 59
71729: ST_TO_ADDR
// result := CreateVehicle ;
71730: LD_ADDR_VAR 0 5
71734: PUSH
71735: CALL_OW 45
71739: ST_TO_ADDR
// SetDir ( result , d ) ;
71740: LD_VAR 0 5
71744: PPUSH
71745: LD_VAR 0 4
71749: PPUSH
71750: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71754: LD_VAR 0 5
71758: PPUSH
71759: LD_VAR 0 2
71763: PPUSH
71764: LD_VAR 0 3
71768: PPUSH
71769: LD_INT 0
71771: PPUSH
71772: CALL_OW 48
// end ;
71776: LD_VAR 0 5
71780: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71781: LD_INT 0
71783: PPUSH
71784: PPUSH
71785: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71786: LD_ADDR_VAR 0 2
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: LD_INT 0
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: LD_INT 0
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71809: LD_VAR 0 1
71813: NOT
71814: PUSH
71815: LD_VAR 0 1
71819: PPUSH
71820: CALL_OW 264
71824: PUSH
71825: LD_INT 12
71827: PUSH
71828: LD_INT 51
71830: PUSH
71831: LD_INT 32
71833: PUSH
71834: LD_INT 89
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: IN
71843: NOT
71844: OR
71845: IFFALSE 71849
// exit ;
71847: GO 71947
// for i := 1 to 3 do
71849: LD_ADDR_VAR 0 3
71853: PUSH
71854: DOUBLE
71855: LD_INT 1
71857: DEC
71858: ST_TO_ADDR
71859: LD_INT 3
71861: PUSH
71862: FOR_TO
71863: IFFALSE 71945
// begin tmp := GetCargo ( cargo , i ) ;
71865: LD_ADDR_VAR 0 4
71869: PUSH
71870: LD_VAR 0 1
71874: PPUSH
71875: LD_VAR 0 3
71879: PPUSH
71880: CALL_OW 289
71884: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71885: LD_ADDR_VAR 0 2
71889: PUSH
71890: LD_VAR 0 2
71894: PPUSH
71895: LD_VAR 0 3
71899: PPUSH
71900: LD_VAR 0 4
71904: PPUSH
71905: CALL_OW 1
71909: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71910: LD_ADDR_VAR 0 2
71914: PUSH
71915: LD_VAR 0 2
71919: PPUSH
71920: LD_INT 4
71922: PPUSH
71923: LD_VAR 0 2
71927: PUSH
71928: LD_INT 4
71930: ARRAY
71931: PUSH
71932: LD_VAR 0 4
71936: PLUS
71937: PPUSH
71938: CALL_OW 1
71942: ST_TO_ADDR
// end ;
71943: GO 71862
71945: POP
71946: POP
// end ;
71947: LD_VAR 0 2
71951: RET
// export function Length ( array ) ; begin
71952: LD_INT 0
71954: PPUSH
// result := array + 0 ;
71955: LD_ADDR_VAR 0 2
71959: PUSH
71960: LD_VAR 0 1
71964: PUSH
71965: LD_INT 0
71967: PLUS
71968: ST_TO_ADDR
// end ;
71969: LD_VAR 0 2
71973: RET
// export function PrepareArray ( array ) ; begin
71974: LD_INT 0
71976: PPUSH
// result := array diff 0 ;
71977: LD_ADDR_VAR 0 2
71981: PUSH
71982: LD_VAR 0 1
71986: PUSH
71987: LD_INT 0
71989: DIFF
71990: ST_TO_ADDR
// if not result [ 1 ] then
71991: LD_VAR 0 2
71995: PUSH
71996: LD_INT 1
71998: ARRAY
71999: NOT
72000: IFFALSE 72020
// result := Delete ( result , 1 ) ;
72002: LD_ADDR_VAR 0 2
72006: PUSH
72007: LD_VAR 0 2
72011: PPUSH
72012: LD_INT 1
72014: PPUSH
72015: CALL_OW 3
72019: ST_TO_ADDR
// end ;
72020: LD_VAR 0 2
72024: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72025: LD_INT 0
72027: PPUSH
72028: PPUSH
72029: PPUSH
72030: PPUSH
// sibRocketRange := 25 ;
72031: LD_ADDR_VAR 0 6
72035: PUSH
72036: LD_INT 25
72038: ST_TO_ADDR
// result := false ;
72039: LD_ADDR_VAR 0 4
72043: PUSH
72044: LD_INT 0
72046: ST_TO_ADDR
// for i := 0 to 5 do
72047: LD_ADDR_VAR 0 5
72051: PUSH
72052: DOUBLE
72053: LD_INT 0
72055: DEC
72056: ST_TO_ADDR
72057: LD_INT 5
72059: PUSH
72060: FOR_TO
72061: IFFALSE 72128
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72063: LD_VAR 0 1
72067: PPUSH
72068: LD_VAR 0 5
72072: PPUSH
72073: LD_VAR 0 6
72077: PPUSH
72078: CALL_OW 272
72082: PPUSH
72083: LD_VAR 0 2
72087: PPUSH
72088: LD_VAR 0 5
72092: PPUSH
72093: LD_VAR 0 6
72097: PPUSH
72098: CALL_OW 273
72102: PPUSH
72103: LD_VAR 0 3
72107: PPUSH
72108: CALL_OW 309
72112: IFFALSE 72126
// begin result := true ;
72114: LD_ADDR_VAR 0 4
72118: PUSH
72119: LD_INT 1
72121: ST_TO_ADDR
// exit ;
72122: POP
72123: POP
72124: GO 72130
// end ;
72126: GO 72060
72128: POP
72129: POP
// end ;
72130: LD_VAR 0 4
72134: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72135: LD_INT 0
72137: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72138: LD_VAR 0 1
72142: PPUSH
72143: LD_VAR 0 2
72147: PPUSH
72148: LD_INT 0
72150: PPUSH
72151: LD_INT 0
72153: PPUSH
72154: LD_INT 1
72156: PPUSH
72157: LD_INT 0
72159: PPUSH
72160: CALL_OW 587
// end ;
72164: LD_VAR 0 3
72168: RET
// export function CenterOnNow ( unit ) ; begin
72169: LD_INT 0
72171: PPUSH
// result := IsInUnit ( unit ) ;
72172: LD_ADDR_VAR 0 2
72176: PUSH
72177: LD_VAR 0 1
72181: PPUSH
72182: CALL_OW 310
72186: ST_TO_ADDR
// if not result then
72187: LD_VAR 0 2
72191: NOT
72192: IFFALSE 72204
// result := unit ;
72194: LD_ADDR_VAR 0 2
72198: PUSH
72199: LD_VAR 0 1
72203: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72204: LD_VAR 0 1
72208: PPUSH
72209: CALL_OW 87
// end ;
72213: LD_VAR 0 2
72217: RET
// export function ComMoveHex ( unit , hex ) ; begin
72218: LD_INT 0
72220: PPUSH
// if not hex then
72221: LD_VAR 0 2
72225: NOT
72226: IFFALSE 72230
// exit ;
72228: GO 72283
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72230: LD_VAR 0 2
72234: PUSH
72235: LD_INT 1
72237: ARRAY
72238: PPUSH
72239: LD_VAR 0 2
72243: PUSH
72244: LD_INT 2
72246: ARRAY
72247: PPUSH
72248: CALL_OW 428
72252: IFFALSE 72256
// exit ;
72254: GO 72283
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72256: LD_VAR 0 1
72260: PPUSH
72261: LD_VAR 0 2
72265: PUSH
72266: LD_INT 1
72268: ARRAY
72269: PPUSH
72270: LD_VAR 0 2
72274: PUSH
72275: LD_INT 2
72277: ARRAY
72278: PPUSH
72279: CALL_OW 111
// end ;
72283: LD_VAR 0 3
72287: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72288: LD_INT 0
72290: PPUSH
72291: PPUSH
72292: PPUSH
// if not unit or not enemy then
72293: LD_VAR 0 1
72297: NOT
72298: PUSH
72299: LD_VAR 0 2
72303: NOT
72304: OR
72305: IFFALSE 72309
// exit ;
72307: GO 72433
// x := GetX ( enemy ) ;
72309: LD_ADDR_VAR 0 4
72313: PUSH
72314: LD_VAR 0 2
72318: PPUSH
72319: CALL_OW 250
72323: ST_TO_ADDR
// y := GetY ( enemy ) ;
72324: LD_ADDR_VAR 0 5
72328: PUSH
72329: LD_VAR 0 2
72333: PPUSH
72334: CALL_OW 251
72338: ST_TO_ADDR
// if ValidHex ( x , y ) then
72339: LD_VAR 0 4
72343: PPUSH
72344: LD_VAR 0 5
72348: PPUSH
72349: CALL_OW 488
72353: IFFALSE 72433
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72355: LD_VAR 0 2
72359: PPUSH
72360: CALL_OW 247
72364: PUSH
72365: LD_INT 3
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: IN
72375: PUSH
72376: LD_VAR 0 1
72380: PPUSH
72381: CALL_OW 255
72385: PPUSH
72386: LD_VAR 0 2
72390: PPUSH
72391: CALL_OW 292
72395: AND
72396: IFFALSE 72414
// ComAttackUnit ( unit , enemy ) else
72398: LD_VAR 0 1
72402: PPUSH
72403: LD_VAR 0 2
72407: PPUSH
72408: CALL_OW 115
72412: GO 72433
// ComAgressiveMove ( unit , x , y ) ;
72414: LD_VAR 0 1
72418: PPUSH
72419: LD_VAR 0 4
72423: PPUSH
72424: LD_VAR 0 5
72428: PPUSH
72429: CALL_OW 114
// end ; end_of_file
72433: LD_VAR 0 3
72437: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72438: LD_VAR 0 1
72442: PUSH
72443: LD_INT 200
72445: DOUBLE
72446: GREATEREQUAL
72447: IFFALSE 72455
72449: LD_INT 299
72451: DOUBLE
72452: LESSEQUAL
72453: IFTRUE 72457
72455: GO 72489
72457: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72458: LD_VAR 0 1
72462: PPUSH
72463: LD_VAR 0 2
72467: PPUSH
72468: LD_VAR 0 3
72472: PPUSH
72473: LD_VAR 0 4
72477: PPUSH
72478: LD_VAR 0 5
72482: PPUSH
72483: CALL 26162 0 5
72487: GO 72566
72489: LD_INT 300
72491: DOUBLE
72492: GREATEREQUAL
72493: IFFALSE 72501
72495: LD_INT 399
72497: DOUBLE
72498: LESSEQUAL
72499: IFTRUE 72503
72501: GO 72565
72503: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72504: LD_VAR 0 1
72508: PPUSH
72509: LD_VAR 0 2
72513: PPUSH
72514: LD_VAR 0 3
72518: PPUSH
72519: LD_VAR 0 4
72523: PPUSH
72524: LD_VAR 0 5
72528: PPUSH
72529: LD_VAR 0 6
72533: PPUSH
72534: LD_VAR 0 7
72538: PPUSH
72539: LD_VAR 0 8
72543: PPUSH
72544: LD_VAR 0 9
72548: PPUSH
72549: LD_VAR 0 10
72553: PPUSH
72554: LD_VAR 0 11
72558: PPUSH
72559: CALL 22487 0 11
72563: GO 72566
72565: POP
// end ;
72566: PPOPN 11
72568: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72569: LD_VAR 0 1
72573: PPUSH
72574: LD_VAR 0 2
72578: PPUSH
72579: LD_VAR 0 3
72583: PPUSH
72584: LD_VAR 0 4
72588: PPUSH
72589: LD_VAR 0 5
72593: PPUSH
72594: CALL 25898 0 5
// end ; end_of_file
72598: PPOPN 5
72600: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72601: LD_VAR 0 1
72605: PPUSH
72606: LD_VAR 0 2
72610: PPUSH
72611: LD_VAR 0 3
72615: PPUSH
72616: LD_VAR 0 4
72620: PPUSH
72621: LD_VAR 0 5
72625: PPUSH
72626: LD_VAR 0 6
72630: PPUSH
72631: CALL 10139 0 6
// end ;
72635: PPOPN 6
72637: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72638: LD_INT 0
72640: PPUSH
// begin if not units then
72641: LD_VAR 0 1
72645: NOT
72646: IFFALSE 72650
// exit ;
72648: GO 72650
// end ;
72650: PPOPN 7
72652: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72653: CALL 10043 0 0
// end ;
72657: PPOPN 1
72659: END
