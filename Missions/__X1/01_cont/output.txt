// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5338
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5338
// if meetJohnny then
5306: LD_EXP 3
5310: IFFALSE 5326
// Say ( Heike , DH-dogtag-found ) else
5312: LD_EXP 16
5316: PPUSH
5317: LD_STRING DH-dogtag-found
5319: PPUSH
5320: CALL_OW 88
5324: GO 5338
// Say ( Heike , DH-dogtag-found-no-american ) ;
5326: LD_EXP 16
5330: PPUSH
5331: LD_STRING DH-dogtag-found-no-american
5333: PPUSH
5334: CALL_OW 88
// end ;
5338: PPOPN 1
5340: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5341: LD_EXP 8
5345: NOT
5346: PUSH
5347: LD_EXP 7
5351: NOT
5352: AND
5353: PUSH
5354: LD_INT 5
5356: PPUSH
5357: LD_EXP 16
5361: PPUSH
5362: CALL_OW 292
5366: AND
5367: PUSH
5368: LD_EXP 16
5372: PPUSH
5373: LD_EXP 17
5377: PPUSH
5378: CALL_OW 296
5382: PUSH
5383: LD_INT 8
5385: LESS
5386: AND
5387: IFFALSE 5779
5389: GO 5391
5391: DISABLE
// begin olafSpotted := true ;
5392: LD_ADDR_EXP 8
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if HasTask ( Olaf ) then
5400: LD_EXP 17
5404: PPUSH
5405: CALL_OW 314
5409: IFFALSE 5420
// ComStop ( Olaf ) ;
5411: LD_EXP 17
5415: PPUSH
5416: CALL_OW 141
// InGameOn ;
5420: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 296
5438: PUSH
5439: LD_INT 8
5441: GREATER
5442: IFFALSE 5458
// ComMoveUnit ( Olaf , Heike ) ;
5444: LD_EXP 17
5448: PPUSH
5449: LD_EXP 16
5453: PPUSH
5454: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5458: LD_INT 35
5460: PPUSH
5461: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_EXP 16
5474: PPUSH
5475: CALL_OW 296
5479: PUSH
5480: LD_INT 8
5482: LESSEQUAL
5483: IFFALSE 5458
// ComTurnUnit ( Heike , Olaf ) ;
5485: LD_EXP 16
5489: PPUSH
5490: LD_EXP 17
5494: PPUSH
5495: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5499: LD_EXP 17
5503: PPUSH
5504: LD_EXP 16
5508: PPUSH
5509: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5513: LD_INT 18
5515: PPUSH
5516: CALL_OW 67
// DialogueOn ;
5520: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5524: LD_EXP 17
5528: PPUSH
5529: LD_STRING DO-olaf-1
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5536: LD_EXP 16
5540: PPUSH
5541: LD_STRING DH-olaf-1
5543: PPUSH
5544: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5548: LD_EXP 17
5552: PPUSH
5553: LD_STRING DO-olaf-2
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5560: LD_EXP 16
5564: PPUSH
5565: LD_STRING DH-olaf-2
5567: PPUSH
5568: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5572: LD_EXP 17
5576: PPUSH
5577: LD_STRING DO-olaf-3
5579: PPUSH
5580: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5584: LD_EXP 17
5588: PPUSH
5589: LD_STRING DO-olaf-4
5591: PPUSH
5592: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5596: LD_EXP 16
5600: PPUSH
5601: LD_STRING DH-olaf-4
5603: PPUSH
5604: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5608: LD_EXP 17
5612: PPUSH
5613: LD_STRING DO-olaf-5
5615: PPUSH
5616: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5620: LD_EXP 16
5624: PPUSH
5625: LD_STRING DH-olaf-5
5627: PPUSH
5628: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-6
5639: PPUSH
5640: CALL_OW 88
// if russianSpotted or johnnySaved then
5644: LD_EXP 9
5648: PUSH
5649: LD_EXP 4
5653: OR
5654: IFFALSE 5682
// begin Say ( Heike , DH-olaf-6a ) ;
5656: LD_EXP 16
5660: PPUSH
5661: LD_STRING DH-olaf-6a
5663: PPUSH
5664: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING DO-olaf-7a
5675: PPUSH
5676: CALL_OW 88
// end else
5680: GO 5706
// begin Say ( Heike , DH-olaf-6b ) ;
5682: LD_EXP 16
5686: PPUSH
5687: LD_STRING DH-olaf-6b
5689: PPUSH
5690: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5694: LD_EXP 17
5698: PPUSH
5699: LD_STRING DO-olaf-7b
5701: PPUSH
5702: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5706: LD_EXP 17
5710: PPUSH
5711: LD_STRING DO-olaf-8
5713: PPUSH
5714: CALL_OW 88
// DialogueOff ;
5718: CALL_OW 7
// InGameOff ;
5722: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5726: LD_STRING O3_camp_cont
5728: PPUSH
5729: CALL_OW 337
// if not johnnySaved then
5733: LD_EXP 4
5737: NOT
5738: IFFALSE 5749
// KillUnit ( Johnny ) ;
5740: LD_EXP 25
5744: PPUSH
5745: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5749: LD_EXP 17
5753: PPUSH
5754: LD_INT 52
5756: PPUSH
5757: LD_INT 90
5759: PPUSH
5760: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5764: LD_EXP 17
5768: PPUSH
5769: LD_INT 53
5771: PPUSH
5772: LD_INT 89
5774: PPUSH
5775: CALL_OW 178
// end ;
5779: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5780: LD_EXP 8
5784: NOT
5785: PUSH
5786: LD_EXP 16
5790: PPUSH
5791: LD_EXP 18
5795: PPUSH
5796: CALL_OW 296
5800: PUSH
5801: LD_INT 36
5803: LESS
5804: AND
5805: IFFALSE 5825
5807: GO 5809
5809: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5810: LD_EXP 17
5814: PPUSH
5815: LD_INT 39
5817: PPUSH
5818: LD_INT 71
5820: PPUSH
5821: CALL_OW 111
5825: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5826: LD_EXP 7
5830: NOT
5831: PUSH
5832: LD_INT 2
5834: PPUSH
5835: LD_EXP 19
5839: PPUSH
5840: CALL_OW 292
5844: PUSH
5845: LD_INT 2
5847: PPUSH
5848: LD_EXP 18
5852: PPUSH
5853: CALL_OW 292
5857: OR
5858: AND
5859: IFFALSE 7180
5861: GO 5863
5863: DISABLE
5864: LD_INT 0
5866: PPUSH
5867: PPUSH
5868: PPUSH
// begin if not johnnySaved then
5869: LD_EXP 4
5873: NOT
5874: IFFALSE 5885
// KillUnit ( Johnny ) ;
5876: LD_EXP 25
5880: PPUSH
5881: CALL_OW 66
// mercenariesSpotted := true ;
5885: LD_ADDR_EXP 7
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5893: LD_STRING O4_camp_cont
5895: PPUSH
5896: CALL_OW 337
// InGameOn ;
5900: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5904: LD_INT 53
5906: PPUSH
5907: LD_INT 89
5909: PPUSH
5910: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5914: LD_INT 53
5916: PPUSH
5917: LD_INT 89
5919: PPUSH
5920: LD_INT 2
5922: PPUSH
5923: LD_INT 8
5925: NEG
5926: PPUSH
5927: CALL_OW 330
// if olafSpotted then
5931: LD_EXP 8
5935: IFFALSE 6053
// begin AddComTurnUnit ( Olaf , Heike ) ;
5937: LD_EXP 17
5941: PPUSH
5942: LD_EXP 16
5946: PPUSH
5947: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5951: LD_EXP 16
5955: PPUSH
5956: LD_INT 51
5958: PPUSH
5959: LD_INT 86
5961: PPUSH
5962: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5966: LD_EXP 16
5970: PPUSH
5971: LD_EXP 17
5975: PPUSH
5976: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-1
5987: PPUSH
5988: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5992: LD_EXP 18
5996: PUSH
5997: LD_EXP 19
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: LD_EXP 16
6010: PPUSH
6011: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
6015: LD_EXP 18
6019: PPUSH
6020: LD_STRING DG-camp-1
6022: PPUSH
6023: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_STRING DH-camp-1
6034: PPUSH
6035: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6039: LD_EXP 17
6043: PPUSH
6044: LD_STRING DO-camp-2
6046: PPUSH
6047: CALL_OW 88
// end else
6051: GO 6448
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6053: LD_EXP 16
6057: PPUSH
6058: LD_INT 51
6060: PPUSH
6061: LD_INT 86
6063: PPUSH
6064: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6068: LD_EXP 16
6072: PPUSH
6073: LD_EXP 18
6077: PPUSH
6078: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6082: LD_EXP 18
6086: PUSH
6087: LD_EXP 19
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: LD_EXP 16
6100: PPUSH
6101: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6105: LD_EXP 18
6109: PPUSH
6110: LD_STRING DG-camp-1a
6112: PPUSH
6113: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6117: LD_EXP 16
6121: PPUSH
6122: LD_STRING DH-camp-1a
6124: PPUSH
6125: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6129: LD_INT 1
6131: PPUSH
6132: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_EXP 17
6145: PPUSH
6146: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_STRING DM-camp-1a
6157: PPUSH
6158: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6162: LD_EXP 17
6166: PPUSH
6167: LD_INT 52
6169: PPUSH
6170: LD_INT 90
6172: PPUSH
6173: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6177: LD_EXP 19
6181: PPUSH
6182: LD_EXP 16
6186: PPUSH
6187: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6191: LD_EXP 18
6195: PPUSH
6196: LD_STRING DG-camp-2a
6198: PPUSH
6199: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6203: LD_EXP 16
6207: PPUSH
6208: LD_STRING DH-camp-2a
6210: PPUSH
6211: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6215: LD_EXP 19
6219: PPUSH
6220: LD_STRING DM-camp-2a
6222: PPUSH
6223: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6234: LD_EXP 17
6238: PPUSH
6239: LD_EXP 16
6243: PPUSH
6244: CALL_OW 296
6248: PUSH
6249: LD_INT 10
6251: LESS
6252: IFFALSE 6227
// AddComTurnUnit ( Olaf , Heike ) ;
6254: LD_EXP 17
6258: PPUSH
6259: LD_EXP 16
6263: PPUSH
6264: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6268: LD_EXP 19
6272: PPUSH
6273: LD_EXP 16
6277: PPUSH
6278: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6282: LD_EXP 17
6286: PPUSH
6287: LD_STRING DO-camp-2a
6289: PPUSH
6290: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6294: LD_EXP 16
6298: PPUSH
6299: LD_EXP 17
6303: PPUSH
6304: CALL_OW 119
// if russianSpotted then
6308: LD_EXP 9
6312: IFFALSE 6352
// begin Say ( Heike , DH-camp-2aa ) ;
6314: LD_EXP 16
6318: PPUSH
6319: LD_STRING DH-camp-2aa
6321: PPUSH
6322: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6326: LD_EXP 18
6330: PPUSH
6331: LD_STRING DG-camp-2aa
6333: PPUSH
6334: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6338: LD_EXP 19
6342: PPUSH
6343: LD_STRING DM-camp-2aa
6345: PPUSH
6346: CALL_OW 88
// end else
6350: GO 6376
// begin Say ( Heike , DH-camp-2ab ) ;
6352: LD_EXP 16
6356: PPUSH
6357: LD_STRING DH-camp-2ab
6359: PPUSH
6360: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6364: LD_EXP 19
6368: PPUSH
6369: LD_STRING DM-camp-2ab
6371: PPUSH
6372: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6376: LD_EXP 16
6380: PPUSH
6381: LD_STRING DH-camp-3a
6383: PPUSH
6384: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6388: LD_EXP 17
6392: PPUSH
6393: LD_STRING DO-camp-3a
6395: PPUSH
6396: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6400: LD_EXP 18
6404: PPUSH
6405: LD_STRING DG-camp-3a
6407: PPUSH
6408: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6412: LD_EXP 16
6416: PPUSH
6417: LD_STRING DH-camp-4aa
6419: PPUSH
6420: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6424: LD_EXP 19
6428: PPUSH
6429: LD_STRING DM-camp-4aa
6431: PPUSH
6432: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6436: LD_EXP 17
6440: PPUSH
6441: LD_STRING DO-camp-4a
6443: PPUSH
6444: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6448: LD_EXP 17
6452: PPUSH
6453: LD_STRING DO-camp-3
6455: PPUSH
6456: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6460: LD_EXP 17
6464: PPUSH
6465: LD_STRING DO-camp-4
6467: PPUSH
6468: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6472: LD_EXP 18
6476: PPUSH
6477: LD_EXP 17
6481: PPUSH
6482: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6486: LD_EXP 18
6490: PPUSH
6491: LD_STRING DG-camp-4
6493: PPUSH
6494: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6498: LD_EXP 16
6502: PPUSH
6503: LD_EXP 18
6507: PPUSH
6508: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6512: LD_EXP 16
6516: PPUSH
6517: LD_STRING DH-camp-4
6519: PPUSH
6520: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6524: LD_EXP 19
6528: PUSH
6529: LD_EXP 17
6533: PUSH
6534: LD_EXP 18
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PPUSH
6544: LD_EXP 16
6548: PPUSH
6549: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6553: LD_EXP 18
6557: PPUSH
6558: LD_STRING DG-camp-5
6560: PPUSH
6561: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6565: LD_EXP 18
6569: PPUSH
6570: LD_STRING DG-camp-6
6572: PPUSH
6573: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6577: LD_EXP 16
6581: PPUSH
6582: LD_STRING DH-camp-6
6584: PPUSH
6585: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6589: LD_EXP 18
6593: PPUSH
6594: LD_STRING DG-camp-7
6596: PPUSH
6597: CALL_OW 88
// if DogTagFound then
6601: LD_EXP 6
6605: IFFALSE 6645
// begin Say ( Heike , DH-quest-1a ) ;
6607: LD_EXP 16
6611: PPUSH
6612: LD_STRING DH-quest-1a
6614: PPUSH
6615: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6619: LD_EXP 18
6623: PPUSH
6624: LD_STRING DG-quest-1a
6626: PPUSH
6627: CALL_OW 88
// mercenariesQuestDone := true ;
6631: LD_ADDR_EXP 11
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// InGameOff ;
6639: CALL_OW 9
// end else
6643: GO 6811
// begin Say ( Heike , DH-camp-7 ) ;
6645: LD_EXP 16
6649: PPUSH
6650: LD_STRING DH-camp-7
6652: PPUSH
6653: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6657: LD_EXP 16
6661: PPUSH
6662: CALL_OW 256
6666: PUSH
6667: LD_INT 1000
6669: LESS
6670: IFFALSE 6762
// begin Say ( Olaf , DO-heal-1 ) ;
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING DO-heal-1
6679: PPUSH
6680: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 51
6691: PPUSH
6692: LD_INT 88
6694: PPUSH
6695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6699: LD_INT 35
6701: PPUSH
6702: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6706: LD_EXP 16
6710: PPUSH
6711: LD_EXP 17
6715: PPUSH
6716: CALL_OW 296
6720: PUSH
6721: LD_INT 4
6723: LESS
6724: PUSH
6725: LD_EXP 16
6729: PPUSH
6730: LD_INT 51
6732: PPUSH
6733: LD_INT 88
6735: PPUSH
6736: CALL_OW 307
6740: OR
6741: IFFALSE 6699
// SetLives ( Heike , 1000 ) ;
6743: LD_EXP 16
6747: PPUSH
6748: LD_INT 1000
6750: PPUSH
6751: CALL_OW 234
// wait ( 0 0$2 ) ;
6755: LD_INT 70
6757: PPUSH
6758: CALL_OW 67
// end ; InGameOff ;
6762: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6766: LD_EXP 17
6770: PUSH
6771: LD_EXP 18
6775: PUSH
6776: LD_EXP 19
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: PPUSH
6786: LD_INT 53
6788: PPUSH
6789: LD_INT 89
6791: PPUSH
6792: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6796: LD_STRING O5_proof_cont
6798: PPUSH
6799: CALL_OW 337
// mercenariesQuestReady := true ;
6803: LD_ADDR_EXP 10
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6811: LD_EXP 10
6815: NOT
6816: IFFALSE 6820
// exit ;
6818: GO 7180
// wait ( 0 0$35 ) ;
6820: LD_INT 1225
6822: PPUSH
6823: CALL_OW 67
// driver := PreparePatrolTank ;
6827: LD_ADDR_VAR 0 2
6831: PUSH
6832: CALL 2821 0 0
6836: ST_TO_ADDR
// if not driver then
6837: LD_VAR 0 2
6841: NOT
6842: IFFALSE 6846
// exit ;
6844: GO 7180
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6846: LD_INT 2
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: LD_INT 2
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: CALL_OW 310
6876: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_INT 500
6884: PPUSH
6885: CALL_OW 234
// SetLives ( driver , 450 ) ;
6889: LD_VAR 0 2
6893: PPUSH
6894: LD_INT 450
6896: PPUSH
6897: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6901: LD_VAR 0 2
6905: PPUSH
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6916: LD_INT 35
6918: PPUSH
6919: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6923: LD_VAR 0 3
6927: PPUSH
6928: LD_INT 59
6930: PPUSH
6931: LD_INT 60
6933: PPUSH
6934: CALL_OW 307
6938: IFFALSE 6916
// if not See ( 1 , Heike ) then
6940: LD_INT 1
6942: PPUSH
6943: LD_EXP 16
6947: PPUSH
6948: CALL_OW 292
6952: NOT
6953: IFFALSE 7077
// begin if Difficulty < 3 then
6955: LD_OWVAR 67
6959: PUSH
6960: LD_INT 3
6962: LESS
6963: IFFALSE 6981
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6965: LD_INT 59
6967: PPUSH
6968: LD_INT 60
6970: PPUSH
6971: LD_INT 2
6973: PPUSH
6974: LD_INT 6
6976: PPUSH
6977: CALL_OW 330
// ComExitVehicle ( driver ) ;
6981: LD_VAR 0 2
6985: PPUSH
6986: CALL_OW 121
// wait ( 0 0$1 ) ;
6990: LD_INT 35
6992: PPUSH
6993: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_INT 58
7004: PPUSH
7005: LD_INT 54
7007: PPUSH
7008: CALL_OW 171
// wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
7019: LD_VAR 0 2
7023: PPUSH
7024: LD_INT 57
7026: PPUSH
7027: LD_INT 53
7029: PPUSH
7030: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7034: LD_VAR 0 2
7038: PPUSH
7039: LD_INT 350
7041: PPUSH
7042: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7046: LD_VAR 0 2
7050: PPUSH
7051: LD_VAR 0 3
7055: PPUSH
7056: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_INT 107
7067: PPUSH
7068: LD_INT 118
7070: PPUSH
7071: CALL_OW 171
// end else
7075: GO 7092
// begin ComMoveXY ( driver , 107 , 118 ) ;
7077: LD_VAR 0 2
7081: PPUSH
7082: LD_INT 107
7084: PPUSH
7085: LD_INT 118
7087: PPUSH
7088: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7092: LD_INT 35
7094: PPUSH
7095: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7099: LD_VAR 0 3
7103: PPUSH
7104: LD_INT 107
7106: PPUSH
7107: LD_INT 118
7109: PPUSH
7110: CALL_OW 307
7114: PUSH
7115: LD_VAR 0 2
7119: PPUSH
7120: CALL_OW 301
7124: OR
7125: IFFALSE 7092
// if IsDead ( driver [ 1 ] ) then
7127: LD_VAR 0 2
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: CALL_OW 301
7140: IFFALSE 7144
// exit ;
7142: GO 7180
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7144: LD_ADDR_VAR 0 1
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: PUSH
7164: FOR_IN
7165: IFFALSE 7178
// RemoveUnit ( i ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL_OW 64
7176: GO 7164
7178: POP
7179: POP
// end ;
7180: PPOPN 3
7182: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7183: LD_INT 10
7185: PPUSH
7186: LD_INT 22
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 21
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 70
7214: IFFALSE 7288
7216: GO 7218
7218: DISABLE
// begin InGameOn ;
7219: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7223: LD_EXP 17
7227: PUSH
7228: LD_EXP 19
7232: PUSH
7233: LD_EXP 18
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: LD_EXP 16
7247: PPUSH
7248: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7252: LD_EXP 19
7256: PPUSH
7257: LD_STRING DM-quest-1
7259: PPUSH
7260: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7264: LD_EXP 18
7268: PPUSH
7269: LD_STRING DG-quest-1
7271: PPUSH
7272: CALL_OW 88
// InGameOff ;
7276: CALL_OW 9
// mercenariesQuestDone := true ;
7280: LD_ADDR_EXP 11
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// end ;
7288: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7289: LD_EXP 16
7293: PPUSH
7294: LD_INT 10
7296: PPUSH
7297: CALL_OW 308
7301: PUSH
7302: LD_EXP 6
7306: AND
7307: PUSH
7308: LD_EXP 10
7312: AND
7313: PUSH
7314: LD_INT 10
7316: PPUSH
7317: LD_INT 22
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 21
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 70
7345: NOT
7346: AND
7347: IFFALSE 7519
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin InGameOn ;
7355: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7359: LD_EXP 17
7363: PUSH
7364: LD_EXP 19
7368: PUSH
7369: LD_EXP 18
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PPUSH
7379: LD_EXP 16
7383: PPUSH
7384: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7388: LD_EXP 16
7392: PPUSH
7393: LD_INT 54
7395: PPUSH
7396: LD_INT 86
7398: PPUSH
7399: CALL_OW 111
// p := p + 1 ;
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 1
7415: PLUS
7416: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// p := p + 1 ;
7424: LD_ADDR_VAR 0 1
7428: PUSH
7429: LD_VAR 0 1
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7438: LD_EXP 16
7442: PPUSH
7443: LD_EXP 18
7447: PPUSH
7448: CALL_OW 296
7452: PUSH
7453: LD_INT 4
7455: LESS
7456: PUSH
7457: LD_VAR 0 1
7461: PUSH
7462: LD_INT 5
7464: GREATER
7465: OR
7466: IFFALSE 7417
// Say ( Mike , DM-quest-1 ) ;
7468: LD_EXP 19
7472: PPUSH
7473: LD_STRING DM-quest-1
7475: PPUSH
7476: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7480: LD_EXP 18
7484: PPUSH
7485: LD_STRING DG-quest-1
7487: PPUSH
7488: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7492: LD_EXP 16
7496: PPUSH
7497: LD_INT 55
7499: PPUSH
7500: LD_INT 87
7502: PPUSH
7503: CALL_OW 111
// InGameOff ;
7507: CALL_OW 9
// mercenariesQuestDone := true ;
7511: LD_ADDR_EXP 11
7515: PUSH
7516: LD_INT 1
7518: ST_TO_ADDR
// end ;
7519: PPOPN 1
7521: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7522: LD_EXP 16
7526: PUSH
7527: LD_INT 55
7529: PUSH
7530: EMPTY
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: IN
7538: IFFALSE 7578
7540: GO 7542
7542: DISABLE
// begin if Difficulty < 3 then
7543: LD_OWVAR 67
7547: PUSH
7548: LD_INT 3
7550: LESS
7551: IFFALSE 7566
// RemoveSeeing ( 59 , 60 , 2 ) ;
7553: LD_INT 59
7555: PPUSH
7556: LD_INT 60
7558: PPUSH
7559: LD_INT 2
7561: PPUSH
7562: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7566: LD_EXP 16
7570: PPUSH
7571: LD_STRING DH-driver
7573: PPUSH
7574: CALL_OW 88
// end ;
7578: END
// every 0 0$1 trigger mercenariesQuestDone do
7579: LD_EXP 11
7583: IFFALSE 8071
7585: GO 7587
7587: DISABLE
// begin if mercenariesQuestReady then
7588: LD_EXP 10
7592: IFFALSE 7601
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7594: LD_STRING O5_proof_cont_out
7596: PPUSH
7597: CALL_OW 337
// InGameOn ;
7601: CALL_OW 8
// if IsInUnit ( Heike ) then
7605: LD_EXP 16
7609: PPUSH
7610: CALL_OW 310
7614: IFFALSE 7625
// ComExitVehicle ( Heike ) ;
7616: LD_EXP 16
7620: PPUSH
7621: CALL_OW 121
// wait ( 3 ) ;
7625: LD_INT 3
7627: PPUSH
7628: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7632: LD_EXP 16
7636: PPUSH
7637: LD_EXP 18
7641: PPUSH
7642: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7646: LD_EXP 17
7650: PUSH
7651: LD_EXP 19
7655: PUSH
7656: LD_EXP 18
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: LD_EXP 16
7670: PPUSH
7671: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7675: LD_EXP 16
7679: PPUSH
7680: LD_STRING DH-quest-done-1
7682: PPUSH
7683: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7687: LD_EXP 19
7691: PPUSH
7692: LD_STRING DM-quest-done-1
7694: PPUSH
7695: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7699: LD_EXP 18
7703: PPUSH
7704: LD_STRING DG-quest-done-1
7706: PPUSH
7707: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7711: LD_EXP 16
7715: PPUSH
7716: LD_EXP 17
7720: PPUSH
7721: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7725: LD_EXP 16
7729: PPUSH
7730: LD_STRING DH-quest-done-2
7732: PPUSH
7733: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7737: LD_EXP 17
7741: PPUSH
7742: LD_STRING DO-quest-done-2
7744: PPUSH
7745: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7749: LD_EXP 17
7753: PPUSH
7754: LD_STRING DO-quest-done-3
7756: PPUSH
7757: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7761: LD_EXP 18
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: LD_INT 90
7771: PPUSH
7772: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7776: LD_EXP 18
7780: PPUSH
7781: LD_INT 50
7783: PPUSH
7784: LD_INT 89
7786: PPUSH
7787: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7791: LD_EXP 16
7795: PPUSH
7796: LD_EXP 18
7800: PPUSH
7801: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7805: LD_EXP 18
7809: PPUSH
7810: LD_STRING DG-quest-done-4
7812: PPUSH
7813: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7817: LD_EXP 18
7821: PPUSH
7822: LD_EXP 16
7826: PPUSH
7827: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7831: LD_EXP 16
7835: PPUSH
7836: CALL_OW 256
7840: PUSH
7841: LD_INT 1000
7843: LESS
7844: IFFALSE 7936
// begin Say ( Olaf , DO-heal-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING DO-heal-1
7853: PPUSH
7854: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 51
7865: PPUSH
7866: LD_INT 88
7868: PPUSH
7869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7873: LD_INT 35
7875: PPUSH
7876: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7880: LD_EXP 16
7884: PPUSH
7885: LD_EXP 17
7889: PPUSH
7890: CALL_OW 296
7894: PUSH
7895: LD_INT 4
7897: LESS
7898: PUSH
7899: LD_EXP 16
7903: PPUSH
7904: LD_INT 51
7906: PPUSH
7907: LD_INT 88
7909: PPUSH
7910: CALL_OW 307
7914: OR
7915: IFFALSE 7873
// SetLives ( Heike , 1000 ) ;
7917: LD_EXP 16
7921: PPUSH
7922: LD_INT 1000
7924: PPUSH
7925: CALL_OW 234
// wait ( 0 0$2 ) ;
7929: LD_INT 70
7931: PPUSH
7932: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7936: LD_EXP 16
7940: PPUSH
7941: LD_STRING DH-quest-done-4
7943: PPUSH
7944: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7948: LD_EXP 17
7952: PPUSH
7953: LD_STRING DO-quest-done-4
7955: PPUSH
7956: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7960: LD_EXP 16
7964: PPUSH
7965: LD_EXP 17
7969: PPUSH
7970: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7974: LD_EXP 16
7978: PPUSH
7979: LD_STRING DH-quest-done-5
7981: PPUSH
7982: CALL_OW 88
// InGameOff ;
7986: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7990: LD_STRING O6_end_cont
7992: PPUSH
7993: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7997: LD_EXP 18
8001: PPUSH
8002: LD_INT 2
8004: PPUSH
8005: CALL_OW 235
// SetSide ( Mike , 2 ) ;
8009: LD_EXP 19
8013: PPUSH
8014: LD_INT 2
8016: PPUSH
8017: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8021: LD_INT 42
8023: PPUSH
8024: LD_INT 2
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8034: LD_EXP 17
8038: PPUSH
8039: LD_INT 53
8041: PPUSH
8042: LD_INT 89
8044: PPUSH
8045: CALL_OW 118
// lastObjectiveActive := true ;
8049: LD_ADDR_EXP 12
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8057: LD_INT 1
8059: PPUSH
8060: LD_INT 1
8062: PPUSH
8063: CALL_OW 424
// PreparePrison ;
8067: CALL 1164 0 0
// end ;
8071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8072: LD_INT 22
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 91
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 4
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 69
8104: IFFALSE 8262
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8113: LD_INT 245
8115: PUSH
8116: LD_INT 210
8118: PUSH
8119: LD_INT 210
8121: PUSH
8122: LD_INT 175
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: LD_OWVAR 67
8135: ARRAY
8136: PPUSH
8137: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 54
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: ST_TO_ADDR
// if not tmp then
8182: LD_VAR 0 2
8186: NOT
8187: IFFALSE 8191
// exit ;
8189: GO 8262
// for i in tmp do
8191: LD_ADDR_VAR 0 1
8195: PUSH
8196: LD_VAR 0 2
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8230
// begin ComExitBuilding ( i ) ;
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 121
8220: PPUSH
8221: LD_INT 22
8223: PPUSH
8224: CALL_OW 174
// end ;
8228: GO 8201
8230: POP
8231: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8232: LD_EXP 23
8236: PPUSH
8237: LD_INT 121
8239: PPUSH
8240: LD_INT 22
8242: PPUSH
8243: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8247: LD_EXP 24
8251: PPUSH
8252: LD_INT 121
8254: PPUSH
8255: LD_INT 22
8257: PPUSH
8258: CALL_OW 114
// end ;
8262: PPOPN 2
8264: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8265: LD_INT 22
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 91
8277: PUSH
8278: LD_INT 8
8280: PUSH
8281: LD_INT 4
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 69
8297: IFFALSE 8455
8299: GO 8301
8301: DISABLE
8302: LD_INT 0
8304: PPUSH
8305: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8306: LD_INT 315
8308: PUSH
8309: LD_INT 280
8311: PUSH
8312: LD_INT 245
8314: PUSH
8315: LD_INT 210
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: LD_OWVAR 67
8328: ARRAY
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 25
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 54
8361: PUSH
8362: EMPTY
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 69
8374: ST_TO_ADDR
// if not tmp then
8375: LD_VAR 0 2
8379: NOT
8380: IFFALSE 8384
// exit ;
8382: GO 8455
// for i in tmp do
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_VAR 0 2
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8423
// begin ComExitBuilding ( i ) ;
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8406: LD_VAR 0 1
8410: PPUSH
8411: LD_INT 142
8413: PPUSH
8414: LD_INT 71
8416: PPUSH
8417: CALL_OW 174
// end ;
8421: GO 8394
8423: POP
8424: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8425: LD_EXP 23
8429: PPUSH
8430: LD_INT 142
8432: PPUSH
8433: LD_INT 71
8435: PPUSH
8436: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8440: LD_EXP 24
8444: PPUSH
8445: LD_INT 142
8447: PPUSH
8448: LD_INT 71
8450: PPUSH
8451: CALL_OW 114
// end ;
8455: PPOPN 2
8457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8458: LD_INT 22
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 58
8480: PUSH
8481: EMPTY
8482: LIST
8483: PUSH
8484: LD_INT 3
8486: PUSH
8487: LD_INT 24
8489: PUSH
8490: LD_INT 1000
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 91
8503: PUSH
8504: LD_EXP 17
8508: PUSH
8509: LD_INT 8
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 69
8528: PUSH
8529: LD_EXP 17
8533: PPUSH
8534: CALL_OW 302
8538: AND
8539: IFFALSE 8653
8541: GO 8543
8543: DISABLE
// begin enable ;
8544: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8545: LD_EXP 17
8549: PPUSH
8550: LD_INT 22
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 21
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 58
8572: PUSH
8573: EMPTY
8574: LIST
8575: PUSH
8576: LD_INT 3
8578: PUSH
8579: LD_INT 24
8581: PUSH
8582: LD_INT 1000
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_INT 91
8595: PUSH
8596: LD_EXP 17
8600: PUSH
8601: LD_INT 8
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: PUSH
8621: LD_INT 1
8623: ARRAY
8624: PPUSH
8625: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8629: LD_EXP 17
8633: PPUSH
8634: LD_INT 52
8636: PPUSH
8637: LD_INT 90
8639: PPUSH
8640: CALL_OW 171
// AddComHold ( Olaf ) ;
8644: LD_EXP 17
8648: PPUSH
8649: CALL_OW 200
// end ;
8653: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 2
8661: PPUSH
8662: CALL_OW 302
8666: NOT
8667: AND
8668: PUSH
8669: LD_OWVAR 67
8673: PUSH
8674: LD_INT 1
8676: EQUAL
8677: AND
8678: PUSH
8679: LD_EXP 13
8683: NOT
8684: AND
8685: IFFALSE 8702
8687: GO 8689
8689: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8690: LD_EXP 16
8694: PPUSH
8695: LD_STRING DH-prison-missing
8697: PPUSH
8698: CALL_OW 88
// end ;
8702: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8703: LD_EXP 12
8707: PUSH
8708: LD_INT 8
8710: PPUSH
8711: CALL_OW 302
8715: NOT
8716: AND
8717: PUSH
8718: LD_OWVAR 67
8722: PUSH
8723: LD_INT 1
8725: GREATER
8726: AND
8727: PUSH
8728: LD_EXP 13
8732: NOT
8733: AND
8734: IFFALSE 8751
8736: GO 8738
8738: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8739: LD_EXP 16
8743: PPUSH
8744: LD_STRING DH-prison-missing
8746: PPUSH
8747: CALL_OW 88
// end ;
8751: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8752: LD_EXP 12
8756: PUSH
8757: LD_INT 3
8759: PPUSH
8760: CALL_OW 302
8764: NOT
8765: AND
8766: PUSH
8767: LD_EXP 13
8771: NOT
8772: AND
8773: IFFALSE 8790
8775: GO 8777
8777: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8778: LD_EXP 16
8782: PPUSH
8783: LD_STRING DH-prison-missing-a
8785: PPUSH
8786: CALL_OW 88
// end ;
8790: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8791: LD_EXP 12
8795: PUSH
8796: LD_INT 10
8798: PPUSH
8799: CALL_OW 302
8803: NOT
8804: AND
8805: PUSH
8806: LD_EXP 13
8810: NOT
8811: AND
8812: IFFALSE 8829
8814: GO 8816
8816: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8817: LD_EXP 16
8821: PPUSH
8822: LD_STRING DH-prison-missing-a
8824: PPUSH
8825: CALL_OW 88
// end ;
8829: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8830: LD_EXP 13
8834: NOT
8835: PUSH
8836: LD_EXP 12
8840: AND
8841: PUSH
8842: LD_INT 2
8844: PPUSH
8845: LD_EXP 20
8849: PPUSH
8850: CALL_OW 292
8854: AND
8855: IFFALSE 9000
8857: GO 8859
8859: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8860: LD_EXP 20
8864: PPUSH
8865: LD_EXP 16
8869: PPUSH
8870: CALL_OW 119
// DialogueOn ;
8874: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8878: LD_EXP 20
8882: PPUSH
8883: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8887: LD_EXP 20
8891: PPUSH
8892: LD_STRING DK-prison-found
8894: PPUSH
8895: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8899: LD_EXP 16
8903: PPUSH
8904: LD_STRING DH-prison-found
8906: PPUSH
8907: CALL_OW 88
// DialogueOff ;
8911: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8915: LD_EXP 20
8919: PPUSH
8920: LD_INT 2
8922: PPUSH
8923: CALL_OW 235
// prisonFound := true ;
8927: LD_ADDR_EXP 13
8931: PUSH
8932: LD_INT 1
8934: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8935: LD_STRING O6_prison_out
8937: PPUSH
8938: CALL_OW 337
// ComAgressiveMove ( russianForces , GetX ( Heike ) , GetY ( Heike ) ) ;
8942: LD_EXP 23
8946: PPUSH
8947: LD_EXP 16
8951: PPUSH
8952: CALL_OW 250
8956: PPUSH
8957: LD_EXP 16
8961: PPUSH
8962: CALL_OW 251
8966: PPUSH
8967: CALL_OW 114
// ComAgressiveMove ( russianTank , GetX ( Heike ) , GetY ( Heike ) ) ;
8971: LD_EXP 24
8975: PPUSH
8976: LD_EXP 16
8980: PPUSH
8981: CALL_OW 250
8985: PPUSH
8986: LD_EXP 16
8990: PPUSH
8991: CALL_OW 251
8995: PPUSH
8996: CALL_OW 114
// end ;
9000: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
9001: LD_EXP 16
9005: PPUSH
9006: CALL_OW 256
9010: PUSH
9011: LD_INT 500
9013: LESS
9014: IFFALSE 9027
9016: GO 9018
9018: DISABLE
// heikeHurt := true ;
9019: LD_ADDR_EXP 14
9023: PUSH
9024: LD_INT 1
9026: ST_TO_ADDR
9027: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
9028: LD_INT 22
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 21
9040: PUSH
9041: LD_INT 3
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 69
9056: IFFALSE 9372
9058: GO 9060
9060: DISABLE
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
// begin uc_side := 3 ;
9066: LD_ADDR_OWVAR 20
9070: PUSH
9071: LD_INT 3
9073: ST_TO_ADDR
// uc_nation := 3 ;
9074: LD_ADDR_OWVAR 21
9078: PUSH
9079: LD_INT 3
9081: ST_TO_ADDR
// tmp := [ ] ;
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: EMPTY
9088: ST_TO_ADDR
// for i := 1 to 5 do
9089: LD_ADDR_VAR 0 1
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_INT 5
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9211
// begin PrepareHuman ( false , 1 , 4 ) ;
9105: LD_INT 0
9107: PPUSH
9108: LD_INT 1
9110: PPUSH
9111: LD_INT 4
9113: PPUSH
9114: CALL_OW 380
// un := CreateHuman ;
9118: LD_ADDR_VAR 0 3
9122: PUSH
9123: CALL_OW 44
9127: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_INT 4
9135: PPUSH
9136: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9140: LD_VAR 0 3
9144: PPUSH
9145: LD_INT 158
9147: PPUSH
9148: LD_INT 80
9150: PPUSH
9151: LD_INT 0
9153: PPUSH
9154: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 147
9165: PPUSH
9166: LD_INT 75
9168: PPUSH
9169: CALL_OW 111
// wait ( 0 0$1 ) ;
9173: LD_INT 35
9175: PPUSH
9176: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_VAR 0 2
9194: PUSH
9195: LD_INT 1
9197: PLUS
9198: PPUSH
9199: LD_VAR 0 3
9203: PPUSH
9204: CALL_OW 1
9208: ST_TO_ADDR
// end ;
9209: GO 9102
9211: POP
9212: POP
// repeat wait ( 0 0$1 ) ;
9213: LD_INT 35
9215: PPUSH
9216: CALL_OW 67
// for i in tmp do
9220: LD_ADDR_VAR 0 1
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: FOR_IN
9231: IFFALSE 9352
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
9233: LD_ADDR_VAR 0 3
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 74
9262: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 250
9276: PPUSH
9277: LD_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: CALL_OW 251
9290: PPUSH
9291: CALL_OW 428
9295: IFFALSE 9336
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_VAR 0 3
9306: PUSH
9307: LD_INT 1
9309: ARRAY
9310: PPUSH
9311: CALL_OW 250
9315: PPUSH
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: CALL_OW 251
9329: PPUSH
9330: CALL_OW 114
9334: GO 9350
// ComAttackUnit ( i , Heike ) ;
9336: LD_VAR 0 1
9340: PPUSH
9341: LD_EXP 16
9345: PPUSH
9346: CALL_OW 115
// end ;
9350: GO 9230
9352: POP
9353: POP
// until IsDead ( Heike ) or not tmp ;
9354: LD_EXP 16
9358: PPUSH
9359: CALL_OW 301
9363: PUSH
9364: LD_VAR 0 2
9368: NOT
9369: OR
9370: IFFALSE 9213
// end ;
9372: PPOPN 3
9374: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9375: LD_EXP 12
9379: PUSH
9380: LD_EXP 16
9384: PPUSH
9385: CALL_OW 302
9389: AND
9390: PUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_INT 21
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 22
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 50
9416: PUSH
9417: EMPTY
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 71
9429: PUSH
9430: LD_INT 0
9432: EQUAL
9433: AND
9434: IFFALSE 9858
9436: GO 9438
9438: DISABLE
9439: LD_INT 0
9441: PPUSH
// begin if not heikeHurt then
9442: LD_EXP 14
9446: NOT
9447: IFFALSE 9456
// SetAchievement ( ACH_INVINCIBLE ) ;
9449: LD_STRING ACH_INVINCIBLE
9451: PPUSH
9452: CALL_OW 543
// if tick <= 6 6$00 then
9456: LD_OWVAR 1
9460: PUSH
9461: LD_INT 12600
9463: LESSEQUAL
9464: IFFALSE 9473
// SetAchievement ( ACH_HSPEED_1 ) ;
9466: LD_STRING ACH_HSPEED_1
9468: PPUSH
9469: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9473: LD_STRING enableBioCharacter(BIO_GIVI)
9475: PPUSH
9476: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9480: LD_STRING enableBioCharacter(BIO_MIKE)
9482: PPUSH
9483: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9487: LD_STRING enableBioCharacter(BIO_OLAF)
9489: PPUSH
9490: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 50
9521: PUSH
9522: EMPTY
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// if Kamil in tmp then
9535: LD_EXP 20
9539: PUSH
9540: LD_VAR 0 1
9544: IN
9545: IFFALSE 9554
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9547: LD_STRING enableBioCharacter(BIO_KAMI)
9549: PPUSH
9550: CALL_OW 559
// if prisonFound then
9554: LD_EXP 13
9558: IFFALSE 9597
// begin if not IsOk ( Kamil ) then
9560: LD_EXP 20
9564: PPUSH
9565: CALL_OW 302
9569: NOT
9570: IFFALSE 9585
// AddMedal ( med1 , - 2 ) else
9572: LD_STRING med1
9574: PPUSH
9575: LD_INT 2
9577: NEG
9578: PPUSH
9579: CALL_OW 101
9583: GO 9595
// AddMedal ( med1 , 1 ) ;
9585: LD_STRING med1
9587: PPUSH
9588: LD_INT 1
9590: PPUSH
9591: CALL_OW 101
// end else
9595: GO 9608
// AddMedal ( med1 , - 1 ) ;
9597: LD_STRING med1
9599: PPUSH
9600: LD_INT 1
9602: NEG
9603: PPUSH
9604: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 3
9615: LESS
9616: PUSH
9617: LD_EXP 13
9621: NOT
9622: AND
9623: PUSH
9624: LD_VAR 0 1
9628: PUSH
9629: LD_INT 4
9631: LESS
9632: PUSH
9633: LD_EXP 13
9637: AND
9638: OR
9639: IFFALSE 9654
// AddMedal ( med2 , - 1 ) else
9641: LD_STRING med2
9643: PPUSH
9644: LD_INT 1
9646: NEG
9647: PPUSH
9648: CALL_OW 101
9652: GO 9664
// AddMedal ( med2 , 1 ) ;
9654: LD_STRING med2
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9664: LD_EXP 13
9668: PUSH
9669: LD_EXP 4
9673: AND
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: LD_INT 4
9682: GREATEREQUAL
9683: AND
9684: IFFALSE 9698
// AddMedal ( med3 , 1 ) else
9686: LD_STRING med3
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: CALL_OW 101
9696: GO 9709
// AddMedal ( med3 , - 1 ) ;
9698: LD_STRING med3
9700: PPUSH
9701: LD_INT 1
9703: NEG
9704: PPUSH
9705: CALL_OW 101
// GiveMedals ( MAIN ) ;
9709: LD_STRING MAIN
9711: PPUSH
9712: CALL_OW 102
// RewardPeople ( tmp ) ;
9716: LD_VAR 0 1
9720: PPUSH
9721: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9725: LD_EXP 4
9729: PPUSH
9730: LD_STRING 01_JohnnySaved
9732: PPUSH
9733: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9737: LD_EXP 16
9741: PPUSH
9742: LD_STRING 01_Heike
9744: PPUSH
9745: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9749: LD_EXP 18
9753: PPUSH
9754: CALL_OW 302
9758: PUSH
9759: LD_EXP 18
9763: PUSH
9764: LD_VAR 0 1
9768: IN
9769: AND
9770: IFFALSE 9784
// SaveCharacters ( Givi , 01_Givi ) ;
9772: LD_EXP 18
9776: PPUSH
9777: LD_STRING 01_Givi
9779: PPUSH
9780: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9784: LD_EXP 19
9788: PPUSH
9789: CALL_OW 302
9793: PUSH
9794: LD_EXP 19
9798: PUSH
9799: LD_VAR 0 1
9803: IN
9804: AND
9805: IFFALSE 9819
// SaveCharacters ( Mike , 01_Mike ) ;
9807: LD_EXP 19
9811: PPUSH
9812: LD_STRING 01_Mike
9814: PPUSH
9815: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9819: LD_EXP 20
9823: PPUSH
9824: CALL_OW 302
9828: PUSH
9829: LD_EXP 20
9833: PUSH
9834: LD_VAR 0 1
9838: IN
9839: AND
9840: IFFALSE 9854
// SaveCharacters ( Kamil , 01_Kamil ) ;
9842: LD_EXP 20
9846: PPUSH
9847: LD_STRING 01_Kamil
9849: PPUSH
9850: CALL_OW 38
// YouWin ;
9854: CALL_OW 103
// end ; end_of_file
9858: PPOPN 1
9860: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9861: LD_VAR 0 1
9865: PUSH
9866: LD_EXP 16
9870: EQUAL
9871: IFFALSE 9880
// YouLost ( Heike ) ;
9873: LD_STRING Heike
9875: PPUSH
9876: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 25
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PPUSH
9909: CALL_OW 69
9913: IN
9914: IFFALSE 10020
// begin if un in russianPatrol then
9916: LD_VAR 0 1
9920: PUSH
9921: LD_EXP 21
9925: IN
9926: IFFALSE 9944
// russianPatrol := russianPatrol diff un ;
9928: LD_ADDR_EXP 21
9932: PUSH
9933: LD_EXP 21
9937: PUSH
9938: LD_VAR 0 1
9942: DIFF
9943: ST_TO_ADDR
// if un in russianForestPatrol then
9944: LD_VAR 0 1
9948: PUSH
9949: LD_EXP 22
9953: IN
9954: IFFALSE 9972
// russianForestPatrol := russianForestPatrol diff un ;
9956: LD_ADDR_EXP 22
9960: PUSH
9961: LD_EXP 22
9965: PUSH
9966: LD_VAR 0 1
9970: DIFF
9971: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9972: LD_ADDR_EXP 5
9976: PUSH
9977: LD_EXP 5
9981: PPUSH
9982: LD_EXP 5
9986: PUSH
9987: LD_INT 1
9989: PLUS
9990: PPUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 250
10000: PUSH
10001: LD_VAR 0 1
10005: PPUSH
10006: CALL_OW 251
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 1
10019: ST_TO_ADDR
// end ; end ;
10020: PPOPN 1
10022: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
10023: LD_VAR 0 1
10027: PUSH
10028: LD_EXP 16
10032: EQUAL
10033: IFFALSE 10042
// YouLost ( Heike ) ;
10035: LD_STRING Heike
10037: PPUSH
10038: CALL_OW 104
// if un = Olaf then
10042: LD_VAR 0 1
10046: PUSH
10047: LD_EXP 17
10051: EQUAL
10052: IFFALSE 10061
// YouLost ( Olaf ) ;
10054: LD_STRING Olaf
10056: PPUSH
10057: CALL_OW 104
// end ;
10061: PPOPN 1
10063: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 2
10071: EQUAL
10072: PUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 5
10080: EQUAL
10081: AND
10082: IFFALSE 10091
// YouLost ( FriendlyFire ) ;
10084: LD_STRING FriendlyFire
10086: PPUSH
10087: CALL_OW 104
// end ; end_of_file
10091: PPOPN 2
10093: END
// export globalGameSaveCounter ; every 0 0$1 do
10094: GO 10096
10096: DISABLE
// begin enable ;
10097: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10098: LD_STRING updateTimer(
10100: PUSH
10101: LD_OWVAR 1
10105: STR
10106: PUSH
10107: LD_STRING );
10109: STR
10110: PPUSH
10111: CALL_OW 559
// end ;
10115: END
// every 0 0$1 do
10116: GO 10118
10118: DISABLE
// begin globalGameSaveCounter := 0 ;
10119: LD_ADDR_EXP 26
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10127: LD_STRING setGameSaveCounter(0)
10129: PPUSH
10130: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10134: LD_STRING initStreamRollete();
10136: PPUSH
10137: CALL_OW 559
// InitStreamMode ;
10141: CALL 11484 0 0
// DefineStreamItems ( false ) ;
10145: LD_INT 0
10147: PPUSH
10148: CALL 11948 0 1
// end ;
10152: END
// export function SOS_MapStart ( ) ; begin
10153: LD_INT 0
10155: PPUSH
// if streamModeActive then
10156: LD_EXP 27
10160: IFFALSE 10169
// DefineStreamItems ( true ) ;
10162: LD_INT 1
10164: PPUSH
10165: CALL 11948 0 1
// UpdateLuaVariables ( ) ;
10169: CALL 10186 0 0
// UpdateFactoryWaypoints ( ) ;
10173: CALL 24950 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10177: CALL 25202 0 0
// end ;
10181: LD_VAR 0 1
10185: RET
// function UpdateLuaVariables ( ) ; begin
10186: LD_INT 0
10188: PPUSH
// if globalGameSaveCounter then
10189: LD_EXP 26
10193: IFFALSE 10227
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10195: LD_ADDR_EXP 26
10199: PUSH
10200: LD_EXP 26
10204: PPUSH
10205: CALL 70418 0 1
10209: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10210: LD_STRING setGameSaveCounter(
10212: PUSH
10213: LD_EXP 26
10217: STR
10218: PUSH
10219: LD_STRING )
10221: STR
10222: PPUSH
10223: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10227: LD_STRING setGameDifficulty(
10229: PUSH
10230: LD_OWVAR 67
10234: STR
10235: PUSH
10236: LD_STRING )
10238: STR
10239: PPUSH
10240: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10244: LD_STRING displayDifficulty(
10246: PUSH
10247: LD_OWVAR 67
10251: STR
10252: PUSH
10253: LD_STRING )
10255: STR
10256: PPUSH
10257: CALL_OW 559
// end ;
10261: LD_VAR 0 1
10265: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10266: LD_INT 0
10268: PPUSH
// if p2 = stream_mode then
10269: LD_VAR 0 2
10273: PUSH
10274: LD_INT 100
10276: EQUAL
10277: IFFALSE 11280
// begin if not StreamModeActive then
10279: LD_EXP 27
10283: NOT
10284: IFFALSE 10294
// StreamModeActive := true ;
10286: LD_ADDR_EXP 27
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 0 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 0
10301: EQUAL
10302: IFFALSE 10308
// InitStreamMode ;
10304: CALL 11484 0 0
// if p3 = 1 then
10308: LD_VAR 0 3
10312: PUSH
10313: LD_INT 1
10315: EQUAL
10316: IFFALSE 10326
// sRocket := true ;
10318: LD_ADDR_EXP 32
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if p3 = 2 then
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 2
10333: EQUAL
10334: IFFALSE 10344
// sSpeed := true ;
10336: LD_ADDR_EXP 31
10340: PUSH
10341: LD_INT 1
10343: ST_TO_ADDR
// if p3 = 3 then
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 3
10351: EQUAL
10352: IFFALSE 10362
// sEngine := true ;
10354: LD_ADDR_EXP 33
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// if p3 = 4 then
10362: LD_VAR 0 3
10366: PUSH
10367: LD_INT 4
10369: EQUAL
10370: IFFALSE 10380
// sSpec := true ;
10372: LD_ADDR_EXP 30
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// if p3 = 5 then
10380: LD_VAR 0 3
10384: PUSH
10385: LD_INT 5
10387: EQUAL
10388: IFFALSE 10398
// sLevel := true ;
10390: LD_ADDR_EXP 34
10394: PUSH
10395: LD_INT 1
10397: ST_TO_ADDR
// if p3 = 6 then
10398: LD_VAR 0 3
10402: PUSH
10403: LD_INT 6
10405: EQUAL
10406: IFFALSE 10416
// sArmoury := true ;
10408: LD_ADDR_EXP 35
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// if p3 = 7 then
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 7
10423: EQUAL
10424: IFFALSE 10434
// sRadar := true ;
10426: LD_ADDR_EXP 36
10430: PUSH
10431: LD_INT 1
10433: ST_TO_ADDR
// if p3 = 8 then
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 8
10441: EQUAL
10442: IFFALSE 10452
// sBunker := true ;
10444: LD_ADDR_EXP 37
10448: PUSH
10449: LD_INT 1
10451: ST_TO_ADDR
// if p3 = 9 then
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 9
10459: EQUAL
10460: IFFALSE 10470
// sHack := true ;
10462: LD_ADDR_EXP 38
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// if p3 = 10 then
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 10
10477: EQUAL
10478: IFFALSE 10488
// sFire := true ;
10480: LD_ADDR_EXP 39
10484: PUSH
10485: LD_INT 1
10487: ST_TO_ADDR
// if p3 = 11 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_INT 11
10495: EQUAL
10496: IFFALSE 10506
// sRefresh := true ;
10498: LD_ADDR_EXP 40
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if p3 = 12 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 12
10513: EQUAL
10514: IFFALSE 10524
// sExp := true ;
10516: LD_ADDR_EXP 41
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// if p3 = 13 then
10524: LD_VAR 0 3
10528: PUSH
10529: LD_INT 13
10531: EQUAL
10532: IFFALSE 10542
// sDepot := true ;
10534: LD_ADDR_EXP 42
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// if p3 = 14 then
10542: LD_VAR 0 3
10546: PUSH
10547: LD_INT 14
10549: EQUAL
10550: IFFALSE 10560
// sFlag := true ;
10552: LD_ADDR_EXP 43
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
// if p3 = 15 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_INT 15
10567: EQUAL
10568: IFFALSE 10578
// sKamikadze := true ;
10570: LD_ADDR_EXP 51
10574: PUSH
10575: LD_INT 1
10577: ST_TO_ADDR
// if p3 = 16 then
10578: LD_VAR 0 3
10582: PUSH
10583: LD_INT 16
10585: EQUAL
10586: IFFALSE 10596
// sTroll := true ;
10588: LD_ADDR_EXP 52
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// if p3 = 17 then
10596: LD_VAR 0 3
10600: PUSH
10601: LD_INT 17
10603: EQUAL
10604: IFFALSE 10614
// sSlow := true ;
10606: LD_ADDR_EXP 53
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// if p3 = 18 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 18
10621: EQUAL
10622: IFFALSE 10632
// sLack := true ;
10624: LD_ADDR_EXP 54
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// if p3 = 19 then
10632: LD_VAR 0 3
10636: PUSH
10637: LD_INT 19
10639: EQUAL
10640: IFFALSE 10650
// sTank := true ;
10642: LD_ADDR_EXP 56
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// if p3 = 20 then
10650: LD_VAR 0 3
10654: PUSH
10655: LD_INT 20
10657: EQUAL
10658: IFFALSE 10668
// sRemote := true ;
10660: LD_ADDR_EXP 57
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// if p3 = 21 then
10668: LD_VAR 0 3
10672: PUSH
10673: LD_INT 21
10675: EQUAL
10676: IFFALSE 10686
// sPowell := true ;
10678: LD_ADDR_EXP 58
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// if p3 = 22 then
10686: LD_VAR 0 3
10690: PUSH
10691: LD_INT 22
10693: EQUAL
10694: IFFALSE 10704
// sTeleport := true ;
10696: LD_ADDR_EXP 61
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// if p3 = 23 then
10704: LD_VAR 0 3
10708: PUSH
10709: LD_INT 23
10711: EQUAL
10712: IFFALSE 10722
// sOilTower := true ;
10714: LD_ADDR_EXP 63
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// if p3 = 24 then
10722: LD_VAR 0 3
10726: PUSH
10727: LD_INT 24
10729: EQUAL
10730: IFFALSE 10740
// sShovel := true ;
10732: LD_ADDR_EXP 64
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// if p3 = 25 then
10740: LD_VAR 0 3
10744: PUSH
10745: LD_INT 25
10747: EQUAL
10748: IFFALSE 10758
// sSheik := true ;
10750: LD_ADDR_EXP 65
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// if p3 = 26 then
10758: LD_VAR 0 3
10762: PUSH
10763: LD_INT 26
10765: EQUAL
10766: IFFALSE 10776
// sEarthquake := true ;
10768: LD_ADDR_EXP 67
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// if p3 = 27 then
10776: LD_VAR 0 3
10780: PUSH
10781: LD_INT 27
10783: EQUAL
10784: IFFALSE 10794
// sAI := true ;
10786: LD_ADDR_EXP 68
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// if p3 = 28 then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_INT 28
10801: EQUAL
10802: IFFALSE 10812
// sCargo := true ;
10804: LD_ADDR_EXP 71
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// if p3 = 29 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_INT 29
10819: EQUAL
10820: IFFALSE 10830
// sDLaser := true ;
10822: LD_ADDR_EXP 72
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// if p3 = 30 then
10830: LD_VAR 0 3
10834: PUSH
10835: LD_INT 30
10837: EQUAL
10838: IFFALSE 10848
// sExchange := true ;
10840: LD_ADDR_EXP 73
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// if p3 = 31 then
10848: LD_VAR 0 3
10852: PUSH
10853: LD_INT 31
10855: EQUAL
10856: IFFALSE 10866
// sFac := true ;
10858: LD_ADDR_EXP 74
10862: PUSH
10863: LD_INT 1
10865: ST_TO_ADDR
// if p3 = 32 then
10866: LD_VAR 0 3
10870: PUSH
10871: LD_INT 32
10873: EQUAL
10874: IFFALSE 10884
// sPower := true ;
10876: LD_ADDR_EXP 75
10880: PUSH
10881: LD_INT 1
10883: ST_TO_ADDR
// if p3 = 33 then
10884: LD_VAR 0 3
10888: PUSH
10889: LD_INT 33
10891: EQUAL
10892: IFFALSE 10902
// sRandom := true ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// if p3 = 34 then
10902: LD_VAR 0 3
10906: PUSH
10907: LD_INT 34
10909: EQUAL
10910: IFFALSE 10920
// sShield := true ;
10912: LD_ADDR_EXP 77
10916: PUSH
10917: LD_INT 1
10919: ST_TO_ADDR
// if p3 = 35 then
10920: LD_VAR 0 3
10924: PUSH
10925: LD_INT 35
10927: EQUAL
10928: IFFALSE 10938
// sTime := true ;
10930: LD_ADDR_EXP 78
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
// if p3 = 36 then
10938: LD_VAR 0 3
10942: PUSH
10943: LD_INT 36
10945: EQUAL
10946: IFFALSE 10956
// sTools := true ;
10948: LD_ADDR_EXP 79
10952: PUSH
10953: LD_INT 1
10955: ST_TO_ADDR
// if p3 = 101 then
10956: LD_VAR 0 3
10960: PUSH
10961: LD_INT 101
10963: EQUAL
10964: IFFALSE 10974
// sSold := true ;
10966: LD_ADDR_EXP 44
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// if p3 = 102 then
10974: LD_VAR 0 3
10978: PUSH
10979: LD_INT 102
10981: EQUAL
10982: IFFALSE 10992
// sDiff := true ;
10984: LD_ADDR_EXP 45
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// if p3 = 103 then
10992: LD_VAR 0 3
10996: PUSH
10997: LD_INT 103
10999: EQUAL
11000: IFFALSE 11010
// sFog := true ;
11002: LD_ADDR_EXP 48
11006: PUSH
11007: LD_INT 1
11009: ST_TO_ADDR
// if p3 = 104 then
11010: LD_VAR 0 3
11014: PUSH
11015: LD_INT 104
11017: EQUAL
11018: IFFALSE 11028
// sReset := true ;
11020: LD_ADDR_EXP 49
11024: PUSH
11025: LD_INT 1
11027: ST_TO_ADDR
// if p3 = 105 then
11028: LD_VAR 0 3
11032: PUSH
11033: LD_INT 105
11035: EQUAL
11036: IFFALSE 11046
// sSun := true ;
11038: LD_ADDR_EXP 50
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// if p3 = 106 then
11046: LD_VAR 0 3
11050: PUSH
11051: LD_INT 106
11053: EQUAL
11054: IFFALSE 11064
// sTiger := true ;
11056: LD_ADDR_EXP 46
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if p3 = 107 then
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 107
11071: EQUAL
11072: IFFALSE 11082
// sBomb := true ;
11074: LD_ADDR_EXP 47
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// if p3 = 108 then
11082: LD_VAR 0 3
11086: PUSH
11087: LD_INT 108
11089: EQUAL
11090: IFFALSE 11100
// sWound := true ;
11092: LD_ADDR_EXP 55
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
// if p3 = 109 then
11100: LD_VAR 0 3
11104: PUSH
11105: LD_INT 109
11107: EQUAL
11108: IFFALSE 11118
// sBetray := true ;
11110: LD_ADDR_EXP 59
11114: PUSH
11115: LD_INT 1
11117: ST_TO_ADDR
// if p3 = 110 then
11118: LD_VAR 0 3
11122: PUSH
11123: LD_INT 110
11125: EQUAL
11126: IFFALSE 11136
// sContamin := true ;
11128: LD_ADDR_EXP 60
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 111 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 111
11143: EQUAL
11144: IFFALSE 11154
// sOil := true ;
11146: LD_ADDR_EXP 62
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// if p3 = 112 then
11154: LD_VAR 0 3
11158: PUSH
11159: LD_INT 112
11161: EQUAL
11162: IFFALSE 11172
// sStu := true ;
11164: LD_ADDR_EXP 66
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// if p3 = 113 then
11172: LD_VAR 0 3
11176: PUSH
11177: LD_INT 113
11179: EQUAL
11180: IFFALSE 11190
// sBazooka := true ;
11182: LD_ADDR_EXP 69
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 114 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 114
11197: EQUAL
11198: IFFALSE 11208
// sMortar := true ;
11200: LD_ADDR_EXP 70
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 115 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 115
11215: EQUAL
11216: IFFALSE 11226
// sRanger := true ;
11218: LD_ADDR_EXP 80
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 116 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 116
11233: EQUAL
11234: IFFALSE 11244
// sComputer := true ;
11236: LD_ADDR_EXP 81
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// if p3 = 117 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 117
11251: EQUAL
11252: IFFALSE 11262
// s30 := true ;
11254: LD_ADDR_EXP 82
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 118 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 118
11269: EQUAL
11270: IFFALSE 11280
// s60 := true ;
11272: LD_ADDR_EXP 83
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// end ; if p2 = hack_mode then
11280: LD_VAR 0 2
11284: PUSH
11285: LD_INT 101
11287: EQUAL
11288: IFFALSE 11416
// begin case p3 of 1 :
11290: LD_VAR 0 3
11294: PUSH
11295: LD_INT 1
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11310
11303: POP
// hHackUnlimitedResources ; 2 :
11304: CALL 23563 0 0
11308: GO 11416
11310: LD_INT 2
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11325
11318: POP
// hHackSetLevel10 ; 3 :
11319: CALL 23696 0 0
11323: GO 11416
11325: LD_INT 3
11327: DOUBLE
11328: EQUAL
11329: IFTRUE 11333
11331: GO 11340
11333: POP
// hHackSetLevel10YourUnits ; 4 :
11334: CALL 23781 0 0
11338: GO 11416
11340: LD_INT 4
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11355
11348: POP
// hHackInvincible ; 5 :
11349: CALL 24229 0 0
11353: GO 11416
11355: LD_INT 5
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11370
11363: POP
// hHackInvisible ; 6 :
11364: CALL 24340 0 0
11368: GO 11416
11370: LD_INT 6
11372: DOUBLE
11373: EQUAL
11374: IFTRUE 11378
11376: GO 11385
11378: POP
// hHackChangeYourSide ; 7 :
11379: CALL 24397 0 0
11383: GO 11416
11385: LD_INT 7
11387: DOUBLE
11388: EQUAL
11389: IFTRUE 11393
11391: GO 11400
11393: POP
// hHackChangeUnitSide ; 8 :
11394: CALL 24439 0 0
11398: GO 11416
11400: LD_INT 8
11402: DOUBLE
11403: EQUAL
11404: IFTRUE 11408
11406: GO 11415
11408: POP
// hHackFog ; end ;
11409: CALL 24540 0 0
11413: GO 11416
11415: POP
// end ; if p2 = game_save_mode then
11416: LD_VAR 0 2
11420: PUSH
11421: LD_INT 102
11423: EQUAL
11424: IFFALSE 11479
// begin if p3 = 1 then
11426: LD_VAR 0 3
11430: PUSH
11431: LD_INT 1
11433: EQUAL
11434: IFFALSE 11446
// globalGameSaveCounter := p4 ;
11436: LD_ADDR_EXP 26
11440: PUSH
11441: LD_VAR 0 4
11445: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11446: LD_VAR 0 3
11450: PUSH
11451: LD_INT 2
11453: EQUAL
11454: PUSH
11455: LD_EXP 26
11459: AND
11460: IFFALSE 11479
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11462: LD_STRING setGameSaveCounter(
11464: PUSH
11465: LD_EXP 26
11469: STR
11470: PUSH
11471: LD_STRING )
11473: STR
11474: PPUSH
11475: CALL_OW 559
// end ; end ;
11479: LD_VAR 0 7
11483: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11484: LD_INT 0
11486: PPUSH
// streamModeActive := false ;
11487: LD_ADDR_EXP 27
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// normalCounter := 36 ;
11495: LD_ADDR_EXP 28
11499: PUSH
11500: LD_INT 36
11502: ST_TO_ADDR
// hardcoreCounter := 18 ;
11503: LD_ADDR_EXP 29
11507: PUSH
11508: LD_INT 18
11510: ST_TO_ADDR
// sRocket := false ;
11511: LD_ADDR_EXP 32
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sSpeed := false ;
11519: LD_ADDR_EXP 31
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sEngine := false ;
11527: LD_ADDR_EXP 33
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sSpec := false ;
11535: LD_ADDR_EXP 30
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sLevel := false ;
11543: LD_ADDR_EXP 34
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sArmoury := false ;
11551: LD_ADDR_EXP 35
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sRadar := false ;
11559: LD_ADDR_EXP 36
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sBunker := false ;
11567: LD_ADDR_EXP 37
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// sHack := false ;
11575: LD_ADDR_EXP 38
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// sFire := false ;
11583: LD_ADDR_EXP 39
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// sRefresh := false ;
11591: LD_ADDR_EXP 40
11595: PUSH
11596: LD_INT 0
11598: ST_TO_ADDR
// sExp := false ;
11599: LD_ADDR_EXP 41
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// sDepot := false ;
11607: LD_ADDR_EXP 42
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// sFlag := false ;
11615: LD_ADDR_EXP 43
11619: PUSH
11620: LD_INT 0
11622: ST_TO_ADDR
// sKamikadze := false ;
11623: LD_ADDR_EXP 51
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// sTroll := false ;
11631: LD_ADDR_EXP 52
11635: PUSH
11636: LD_INT 0
11638: ST_TO_ADDR
// sSlow := false ;
11639: LD_ADDR_EXP 53
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// sLack := false ;
11647: LD_ADDR_EXP 54
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// sTank := false ;
11655: LD_ADDR_EXP 56
11659: PUSH
11660: LD_INT 0
11662: ST_TO_ADDR
// sRemote := false ;
11663: LD_ADDR_EXP 57
11667: PUSH
11668: LD_INT 0
11670: ST_TO_ADDR
// sPowell := false ;
11671: LD_ADDR_EXP 58
11675: PUSH
11676: LD_INT 0
11678: ST_TO_ADDR
// sTeleport := false ;
11679: LD_ADDR_EXP 61
11683: PUSH
11684: LD_INT 0
11686: ST_TO_ADDR
// sOilTower := false ;
11687: LD_ADDR_EXP 63
11691: PUSH
11692: LD_INT 0
11694: ST_TO_ADDR
// sShovel := false ;
11695: LD_ADDR_EXP 64
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// sSheik := false ;
11703: LD_ADDR_EXP 65
11707: PUSH
11708: LD_INT 0
11710: ST_TO_ADDR
// sEarthquake := false ;
11711: LD_ADDR_EXP 67
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// sAI := false ;
11719: LD_ADDR_EXP 68
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sCargo := false ;
11727: LD_ADDR_EXP 71
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sDLaser := false ;
11735: LD_ADDR_EXP 72
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sExchange := false ;
11743: LD_ADDR_EXP 73
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sFac := false ;
11751: LD_ADDR_EXP 74
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sPower := false ;
11759: LD_ADDR_EXP 75
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sRandom := false ;
11767: LD_ADDR_EXP 76
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sShield := false ;
11775: LD_ADDR_EXP 77
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sTime := false ;
11783: LD_ADDR_EXP 78
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sTools := false ;
11791: LD_ADDR_EXP 79
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sSold := false ;
11799: LD_ADDR_EXP 44
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sDiff := false ;
11807: LD_ADDR_EXP 45
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sFog := false ;
11815: LD_ADDR_EXP 48
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sReset := false ;
11823: LD_ADDR_EXP 49
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sSun := false ;
11831: LD_ADDR_EXP 50
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sTiger := false ;
11839: LD_ADDR_EXP 46
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sBomb := false ;
11847: LD_ADDR_EXP 47
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sWound := false ;
11855: LD_ADDR_EXP 55
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sBetray := false ;
11863: LD_ADDR_EXP 59
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sContamin := false ;
11871: LD_ADDR_EXP 60
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sOil := false ;
11879: LD_ADDR_EXP 62
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sStu := false ;
11887: LD_ADDR_EXP 66
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sBazooka := false ;
11895: LD_ADDR_EXP 69
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sMortar := false ;
11903: LD_ADDR_EXP 70
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sRanger := false ;
11911: LD_ADDR_EXP 80
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sComputer := false ;
11919: LD_ADDR_EXP 81
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// s30 := false ;
11927: LD_ADDR_EXP 82
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// s60 := false ;
11935: LD_ADDR_EXP 83
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// end ;
11943: LD_VAR 0 1
11947: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11948: LD_INT 0
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
11955: PPUSH
11956: PPUSH
// result := [ ] ;
11957: LD_ADDR_VAR 0 2
11961: PUSH
11962: EMPTY
11963: ST_TO_ADDR
// if campaign_id = 1 then
11964: LD_OWVAR 69
11968: PUSH
11969: LD_INT 1
11971: EQUAL
11972: IFFALSE 15138
// begin case mission_number of 1 :
11974: LD_OWVAR 70
11978: PUSH
11979: LD_INT 1
11981: DOUBLE
11982: EQUAL
11983: IFTRUE 11987
11985: GO 12063
11987: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: LD_INT 4
11998: PUSH
11999: LD_INT 11
12001: PUSH
12002: LD_INT 12
12004: PUSH
12005: LD_INT 15
12007: PUSH
12008: LD_INT 16
12010: PUSH
12011: LD_INT 22
12013: PUSH
12014: LD_INT 23
12016: PUSH
12017: LD_INT 26
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 101
12033: PUSH
12034: LD_INT 102
12036: PUSH
12037: LD_INT 106
12039: PUSH
12040: LD_INT 116
12042: PUSH
12043: LD_INT 117
12045: PUSH
12046: LD_INT 118
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 15136
12063: LD_INT 2
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12155
12071: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12072: LD_ADDR_VAR 0 2
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: LD_INT 11
12085: PUSH
12086: LD_INT 12
12088: PUSH
12089: LD_INT 15
12091: PUSH
12092: LD_INT 16
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: LD_INT 23
12100: PUSH
12101: LD_INT 26
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 101
12117: PUSH
12118: LD_INT 102
12120: PUSH
12121: LD_INT 105
12123: PUSH
12124: LD_INT 106
12126: PUSH
12127: LD_INT 108
12129: PUSH
12130: LD_INT 116
12132: PUSH
12133: LD_INT 117
12135: PUSH
12136: LD_INT 118
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: ST_TO_ADDR
12153: GO 15136
12155: LD_INT 3
12157: DOUBLE
12158: EQUAL
12159: IFTRUE 12163
12161: GO 12251
12163: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12164: LD_ADDR_VAR 0 2
12168: PUSH
12169: LD_INT 2
12171: PUSH
12172: LD_INT 4
12174: PUSH
12175: LD_INT 5
12177: PUSH
12178: LD_INT 11
12180: PUSH
12181: LD_INT 12
12183: PUSH
12184: LD_INT 15
12186: PUSH
12187: LD_INT 16
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 26
12195: PUSH
12196: LD_INT 36
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 101
12213: PUSH
12214: LD_INT 102
12216: PUSH
12217: LD_INT 105
12219: PUSH
12220: LD_INT 106
12222: PUSH
12223: LD_INT 108
12225: PUSH
12226: LD_INT 116
12228: PUSH
12229: LD_INT 117
12231: PUSH
12232: LD_INT 118
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: ST_TO_ADDR
12249: GO 15136
12251: LD_INT 4
12253: DOUBLE
12254: EQUAL
12255: IFTRUE 12259
12257: GO 12355
12259: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12260: LD_ADDR_VAR 0 2
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: LD_INT 4
12270: PUSH
12271: LD_INT 5
12273: PUSH
12274: LD_INT 8
12276: PUSH
12277: LD_INT 11
12279: PUSH
12280: LD_INT 12
12282: PUSH
12283: LD_INT 15
12285: PUSH
12286: LD_INT 16
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_INT 23
12294: PUSH
12295: LD_INT 26
12297: PUSH
12298: LD_INT 36
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 101
12317: PUSH
12318: LD_INT 102
12320: PUSH
12321: LD_INT 105
12323: PUSH
12324: LD_INT 106
12326: PUSH
12327: LD_INT 108
12329: PUSH
12330: LD_INT 116
12332: PUSH
12333: LD_INT 117
12335: PUSH
12336: LD_INT 118
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: ST_TO_ADDR
12353: GO 15136
12355: LD_INT 5
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12475
12363: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12364: LD_ADDR_VAR 0 2
12368: PUSH
12369: LD_INT 2
12371: PUSH
12372: LD_INT 4
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: LD_INT 6
12380: PUSH
12381: LD_INT 8
12383: PUSH
12384: LD_INT 11
12386: PUSH
12387: LD_INT 12
12389: PUSH
12390: LD_INT 15
12392: PUSH
12393: LD_INT 16
12395: PUSH
12396: LD_INT 22
12398: PUSH
12399: LD_INT 23
12401: PUSH
12402: LD_INT 25
12404: PUSH
12405: LD_INT 26
12407: PUSH
12408: LD_INT 36
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 101
12429: PUSH
12430: LD_INT 102
12432: PUSH
12433: LD_INT 105
12435: PUSH
12436: LD_INT 106
12438: PUSH
12439: LD_INT 108
12441: PUSH
12442: LD_INT 109
12444: PUSH
12445: LD_INT 112
12447: PUSH
12448: LD_INT 116
12450: PUSH
12451: LD_INT 117
12453: PUSH
12454: LD_INT 118
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: ST_TO_ADDR
12473: GO 15136
12475: LD_INT 6
12477: DOUBLE
12478: EQUAL
12479: IFTRUE 12483
12481: GO 12615
12483: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12484: LD_ADDR_VAR 0 2
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: LD_INT 5
12497: PUSH
12498: LD_INT 6
12500: PUSH
12501: LD_INT 8
12503: PUSH
12504: LD_INT 11
12506: PUSH
12507: LD_INT 12
12509: PUSH
12510: LD_INT 15
12512: PUSH
12513: LD_INT 16
12515: PUSH
12516: LD_INT 20
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 22
12524: PUSH
12525: LD_INT 23
12527: PUSH
12528: LD_INT 25
12530: PUSH
12531: LD_INT 26
12533: PUSH
12534: LD_INT 30
12536: PUSH
12537: LD_INT 31
12539: PUSH
12540: LD_INT 32
12542: PUSH
12543: LD_INT 36
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 101
12569: PUSH
12570: LD_INT 102
12572: PUSH
12573: LD_INT 105
12575: PUSH
12576: LD_INT 106
12578: PUSH
12579: LD_INT 108
12581: PUSH
12582: LD_INT 109
12584: PUSH
12585: LD_INT 112
12587: PUSH
12588: LD_INT 116
12590: PUSH
12591: LD_INT 117
12593: PUSH
12594: LD_INT 118
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: ST_TO_ADDR
12613: GO 15136
12615: LD_INT 7
12617: DOUBLE
12618: EQUAL
12619: IFTRUE 12623
12621: GO 12735
12623: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 4
12634: PUSH
12635: LD_INT 5
12637: PUSH
12638: LD_INT 7
12640: PUSH
12641: LD_INT 11
12643: PUSH
12644: LD_INT 12
12646: PUSH
12647: LD_INT 15
12649: PUSH
12650: LD_INT 16
12652: PUSH
12653: LD_INT 20
12655: PUSH
12656: LD_INT 21
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_INT 23
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 26
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 101
12689: PUSH
12690: LD_INT 102
12692: PUSH
12693: LD_INT 103
12695: PUSH
12696: LD_INT 105
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 108
12704: PUSH
12705: LD_INT 112
12707: PUSH
12708: LD_INT 116
12710: PUSH
12711: LD_INT 117
12713: PUSH
12714: LD_INT 118
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: ST_TO_ADDR
12733: GO 15136
12735: LD_INT 8
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12883
12743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12744: LD_ADDR_VAR 0 2
12748: PUSH
12749: LD_INT 2
12751: PUSH
12752: LD_INT 4
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: LD_INT 6
12760: PUSH
12761: LD_INT 7
12763: PUSH
12764: LD_INT 8
12766: PUSH
12767: LD_INT 11
12769: PUSH
12770: LD_INT 12
12772: PUSH
12773: LD_INT 15
12775: PUSH
12776: LD_INT 16
12778: PUSH
12779: LD_INT 20
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 22
12787: PUSH
12788: LD_INT 23
12790: PUSH
12791: LD_INT 25
12793: PUSH
12794: LD_INT 26
12796: PUSH
12797: LD_INT 30
12799: PUSH
12800: LD_INT 31
12802: PUSH
12803: LD_INT 32
12805: PUSH
12806: LD_INT 36
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 105
12842: PUSH
12843: LD_INT 106
12845: PUSH
12846: LD_INT 108
12848: PUSH
12849: LD_INT 109
12851: PUSH
12852: LD_INT 112
12854: PUSH
12855: LD_INT 116
12857: PUSH
12858: LD_INT 117
12860: PUSH
12861: LD_INT 118
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: ST_TO_ADDR
12881: GO 15136
12883: LD_INT 9
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 13039
12891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12892: LD_ADDR_VAR 0 2
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: LD_INT 4
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: LD_INT 6
12908: PUSH
12909: LD_INT 7
12911: PUSH
12912: LD_INT 8
12914: PUSH
12915: LD_INT 11
12917: PUSH
12918: LD_INT 12
12920: PUSH
12921: LD_INT 15
12923: PUSH
12924: LD_INT 16
12926: PUSH
12927: LD_INT 20
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_INT 23
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 28
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 31
12953: PUSH
12954: LD_INT 32
12956: PUSH
12957: LD_INT 36
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 101
12985: PUSH
12986: LD_INT 102
12988: PUSH
12989: LD_INT 103
12991: PUSH
12992: LD_INT 105
12994: PUSH
12995: LD_INT 106
12997: PUSH
12998: LD_INT 108
13000: PUSH
13001: LD_INT 109
13003: PUSH
13004: LD_INT 112
13006: PUSH
13007: LD_INT 114
13009: PUSH
13010: LD_INT 116
13012: PUSH
13013: LD_INT 117
13015: PUSH
13016: LD_INT 118
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: ST_TO_ADDR
13037: GO 15136
13039: LD_INT 10
13041: DOUBLE
13042: EQUAL
13043: IFTRUE 13047
13045: GO 13243
13047: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13048: LD_ADDR_VAR 0 2
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: LD_INT 6
13064: PUSH
13065: LD_INT 7
13067: PUSH
13068: LD_INT 8
13070: PUSH
13071: LD_INT 9
13073: PUSH
13074: LD_INT 10
13076: PUSH
13077: LD_INT 11
13079: PUSH
13080: LD_INT 12
13082: PUSH
13083: LD_INT 13
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 17
13097: PUSH
13098: LD_INT 18
13100: PUSH
13101: LD_INT 19
13103: PUSH
13104: LD_INT 20
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 26
13124: PUSH
13125: LD_INT 28
13127: PUSH
13128: LD_INT 30
13130: PUSH
13131: LD_INT 31
13133: PUSH
13134: LD_INT 32
13136: PUSH
13137: LD_INT 36
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 101
13173: PUSH
13174: LD_INT 102
13176: PUSH
13177: LD_INT 103
13179: PUSH
13180: LD_INT 104
13182: PUSH
13183: LD_INT 105
13185: PUSH
13186: LD_INT 106
13188: PUSH
13189: LD_INT 107
13191: PUSH
13192: LD_INT 108
13194: PUSH
13195: LD_INT 109
13197: PUSH
13198: LD_INT 110
13200: PUSH
13201: LD_INT 111
13203: PUSH
13204: LD_INT 112
13206: PUSH
13207: LD_INT 114
13209: PUSH
13210: LD_INT 116
13212: PUSH
13213: LD_INT 117
13215: PUSH
13216: LD_INT 118
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: ST_TO_ADDR
13241: GO 15136
13243: LD_INT 11
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 13455
13251: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13252: LD_ADDR_VAR 0 2
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: LD_INT 3
13262: PUSH
13263: LD_INT 4
13265: PUSH
13266: LD_INT 5
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: LD_INT 7
13274: PUSH
13275: LD_INT 8
13277: PUSH
13278: LD_INT 9
13280: PUSH
13281: LD_INT 10
13283: PUSH
13284: LD_INT 11
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: LD_INT 13
13292: PUSH
13293: LD_INT 14
13295: PUSH
13296: LD_INT 15
13298: PUSH
13299: LD_INT 16
13301: PUSH
13302: LD_INT 17
13304: PUSH
13305: LD_INT 18
13307: PUSH
13308: LD_INT 19
13310: PUSH
13311: LD_INT 20
13313: PUSH
13314: LD_INT 21
13316: PUSH
13317: LD_INT 22
13319: PUSH
13320: LD_INT 23
13322: PUSH
13323: LD_INT 24
13325: PUSH
13326: LD_INT 25
13328: PUSH
13329: LD_INT 26
13331: PUSH
13332: LD_INT 28
13334: PUSH
13335: LD_INT 30
13337: PUSH
13338: LD_INT 31
13340: PUSH
13341: LD_INT 32
13343: PUSH
13344: LD_INT 34
13346: PUSH
13347: LD_INT 36
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 101
13385: PUSH
13386: LD_INT 102
13388: PUSH
13389: LD_INT 103
13391: PUSH
13392: LD_INT 104
13394: PUSH
13395: LD_INT 105
13397: PUSH
13398: LD_INT 106
13400: PUSH
13401: LD_INT 107
13403: PUSH
13404: LD_INT 108
13406: PUSH
13407: LD_INT 109
13409: PUSH
13410: LD_INT 110
13412: PUSH
13413: LD_INT 111
13415: PUSH
13416: LD_INT 112
13418: PUSH
13419: LD_INT 114
13421: PUSH
13422: LD_INT 116
13424: PUSH
13425: LD_INT 117
13427: PUSH
13428: LD_INT 118
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: ST_TO_ADDR
13453: GO 15136
13455: LD_INT 12
13457: DOUBLE
13458: EQUAL
13459: IFTRUE 13463
13461: GO 13683
13463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: LD_INT 4
13480: PUSH
13481: LD_INT 5
13483: PUSH
13484: LD_INT 6
13486: PUSH
13487: LD_INT 7
13489: PUSH
13490: LD_INT 8
13492: PUSH
13493: LD_INT 9
13495: PUSH
13496: LD_INT 10
13498: PUSH
13499: LD_INT 11
13501: PUSH
13502: LD_INT 12
13504: PUSH
13505: LD_INT 13
13507: PUSH
13508: LD_INT 14
13510: PUSH
13511: LD_INT 15
13513: PUSH
13514: LD_INT 16
13516: PUSH
13517: LD_INT 17
13519: PUSH
13520: LD_INT 18
13522: PUSH
13523: LD_INT 19
13525: PUSH
13526: LD_INT 20
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 23
13537: PUSH
13538: LD_INT 24
13540: PUSH
13541: LD_INT 25
13543: PUSH
13544: LD_INT 26
13546: PUSH
13547: LD_INT 27
13549: PUSH
13550: LD_INT 28
13552: PUSH
13553: LD_INT 30
13555: PUSH
13556: LD_INT 31
13558: PUSH
13559: LD_INT 32
13561: PUSH
13562: LD_INT 33
13564: PUSH
13565: LD_INT 34
13567: PUSH
13568: LD_INT 36
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 101
13609: PUSH
13610: LD_INT 102
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: LD_INT 104
13618: PUSH
13619: LD_INT 105
13621: PUSH
13622: LD_INT 106
13624: PUSH
13625: LD_INT 107
13627: PUSH
13628: LD_INT 108
13630: PUSH
13631: LD_INT 109
13633: PUSH
13634: LD_INT 110
13636: PUSH
13637: LD_INT 111
13639: PUSH
13640: LD_INT 112
13642: PUSH
13643: LD_INT 113
13645: PUSH
13646: LD_INT 114
13648: PUSH
13649: LD_INT 116
13651: PUSH
13652: LD_INT 117
13654: PUSH
13655: LD_INT 118
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: ST_TO_ADDR
13681: GO 15136
13683: LD_INT 13
13685: DOUBLE
13686: EQUAL
13687: IFTRUE 13691
13689: GO 13899
13691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13692: LD_ADDR_VAR 0 2
13696: PUSH
13697: LD_INT 1
13699: PUSH
13700: LD_INT 2
13702: PUSH
13703: LD_INT 3
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 8
13714: PUSH
13715: LD_INT 9
13717: PUSH
13718: LD_INT 10
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 14
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 17
13738: PUSH
13739: LD_INT 18
13741: PUSH
13742: LD_INT 19
13744: PUSH
13745: LD_INT 20
13747: PUSH
13748: LD_INT 21
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 23
13756: PUSH
13757: LD_INT 24
13759: PUSH
13760: LD_INT 25
13762: PUSH
13763: LD_INT 26
13765: PUSH
13766: LD_INT 27
13768: PUSH
13769: LD_INT 28
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: LD_INT 32
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 36
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 101
13825: PUSH
13826: LD_INT 102
13828: PUSH
13829: LD_INT 103
13831: PUSH
13832: LD_INT 104
13834: PUSH
13835: LD_INT 105
13837: PUSH
13838: LD_INT 106
13840: PUSH
13841: LD_INT 107
13843: PUSH
13844: LD_INT 108
13846: PUSH
13847: LD_INT 109
13849: PUSH
13850: LD_INT 110
13852: PUSH
13853: LD_INT 111
13855: PUSH
13856: LD_INT 112
13858: PUSH
13859: LD_INT 113
13861: PUSH
13862: LD_INT 114
13864: PUSH
13865: LD_INT 116
13867: PUSH
13868: LD_INT 117
13870: PUSH
13871: LD_INT 118
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
13897: GO 15136
13899: LD_INT 14
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 14131
13907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: LD_INT 4
13924: PUSH
13925: LD_INT 5
13927: PUSH
13928: LD_INT 6
13930: PUSH
13931: LD_INT 7
13933: PUSH
13934: LD_INT 8
13936: PUSH
13937: LD_INT 9
13939: PUSH
13940: LD_INT 10
13942: PUSH
13943: LD_INT 11
13945: PUSH
13946: LD_INT 12
13948: PUSH
13949: LD_INT 13
13951: PUSH
13952: LD_INT 14
13954: PUSH
13955: LD_INT 15
13957: PUSH
13958: LD_INT 16
13960: PUSH
13961: LD_INT 17
13963: PUSH
13964: LD_INT 18
13966: PUSH
13967: LD_INT 19
13969: PUSH
13970: LD_INT 20
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 22
13978: PUSH
13979: LD_INT 23
13981: PUSH
13982: LD_INT 24
13984: PUSH
13985: LD_INT 25
13987: PUSH
13988: LD_INT 26
13990: PUSH
13991: LD_INT 27
13993: PUSH
13994: LD_INT 28
13996: PUSH
13997: LD_INT 29
13999: PUSH
14000: LD_INT 30
14002: PUSH
14003: LD_INT 31
14005: PUSH
14006: LD_INT 32
14008: PUSH
14009: LD_INT 33
14011: PUSH
14012: LD_INT 34
14014: PUSH
14015: LD_INT 36
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 101
14057: PUSH
14058: LD_INT 102
14060: PUSH
14061: LD_INT 103
14063: PUSH
14064: LD_INT 104
14066: PUSH
14067: LD_INT 105
14069: PUSH
14070: LD_INT 106
14072: PUSH
14073: LD_INT 107
14075: PUSH
14076: LD_INT 108
14078: PUSH
14079: LD_INT 109
14081: PUSH
14082: LD_INT 110
14084: PUSH
14085: LD_INT 111
14087: PUSH
14088: LD_INT 112
14090: PUSH
14091: LD_INT 113
14093: PUSH
14094: LD_INT 114
14096: PUSH
14097: LD_INT 116
14099: PUSH
14100: LD_INT 117
14102: PUSH
14103: LD_INT 118
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: ST_TO_ADDR
14129: GO 15136
14131: LD_INT 15
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14363
14139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14140: LD_ADDR_VAR 0 2
14144: PUSH
14145: LD_INT 1
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: LD_INT 5
14159: PUSH
14160: LD_INT 6
14162: PUSH
14163: LD_INT 7
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: LD_INT 10
14174: PUSH
14175: LD_INT 11
14177: PUSH
14178: LD_INT 12
14180: PUSH
14181: LD_INT 13
14183: PUSH
14184: LD_INT 14
14186: PUSH
14187: LD_INT 15
14189: PUSH
14190: LD_INT 16
14192: PUSH
14193: LD_INT 17
14195: PUSH
14196: LD_INT 18
14198: PUSH
14199: LD_INT 19
14201: PUSH
14202: LD_INT 20
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 22
14210: PUSH
14211: LD_INT 23
14213: PUSH
14214: LD_INT 24
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 26
14222: PUSH
14223: LD_INT 27
14225: PUSH
14226: LD_INT 28
14228: PUSH
14229: LD_INT 29
14231: PUSH
14232: LD_INT 30
14234: PUSH
14235: LD_INT 31
14237: PUSH
14238: LD_INT 32
14240: PUSH
14241: LD_INT 33
14243: PUSH
14244: LD_INT 34
14246: PUSH
14247: LD_INT 36
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 101
14289: PUSH
14290: LD_INT 102
14292: PUSH
14293: LD_INT 103
14295: PUSH
14296: LD_INT 104
14298: PUSH
14299: LD_INT 105
14301: PUSH
14302: LD_INT 106
14304: PUSH
14305: LD_INT 107
14307: PUSH
14308: LD_INT 108
14310: PUSH
14311: LD_INT 109
14313: PUSH
14314: LD_INT 110
14316: PUSH
14317: LD_INT 111
14319: PUSH
14320: LD_INT 112
14322: PUSH
14323: LD_INT 113
14325: PUSH
14326: LD_INT 114
14328: PUSH
14329: LD_INT 116
14331: PUSH
14332: LD_INT 117
14334: PUSH
14335: LD_INT 118
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: ST_TO_ADDR
14361: GO 15136
14363: LD_INT 16
14365: DOUBLE
14366: EQUAL
14367: IFTRUE 14371
14369: GO 14507
14371: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14372: LD_ADDR_VAR 0 2
14376: PUSH
14377: LD_INT 2
14379: PUSH
14380: LD_INT 4
14382: PUSH
14383: LD_INT 5
14385: PUSH
14386: LD_INT 7
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 15
14397: PUSH
14398: LD_INT 16
14400: PUSH
14401: LD_INT 20
14403: PUSH
14404: LD_INT 21
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 23
14412: PUSH
14413: LD_INT 25
14415: PUSH
14416: LD_INT 26
14418: PUSH
14419: LD_INT 30
14421: PUSH
14422: LD_INT 31
14424: PUSH
14425: LD_INT 32
14427: PUSH
14428: LD_INT 33
14430: PUSH
14431: LD_INT 34
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 101
14457: PUSH
14458: LD_INT 102
14460: PUSH
14461: LD_INT 103
14463: PUSH
14464: LD_INT 106
14466: PUSH
14467: LD_INT 108
14469: PUSH
14470: LD_INT 112
14472: PUSH
14473: LD_INT 113
14475: PUSH
14476: LD_INT 114
14478: PUSH
14479: LD_INT 116
14481: PUSH
14482: LD_INT 117
14484: PUSH
14485: LD_INT 118
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: ST_TO_ADDR
14505: GO 15136
14507: LD_INT 17
14509: DOUBLE
14510: EQUAL
14511: IFTRUE 14515
14513: GO 14739
14515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14516: LD_ADDR_VAR 0 2
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: LD_INT 2
14526: PUSH
14527: LD_INT 3
14529: PUSH
14530: LD_INT 4
14532: PUSH
14533: LD_INT 5
14535: PUSH
14536: LD_INT 6
14538: PUSH
14539: LD_INT 7
14541: PUSH
14542: LD_INT 8
14544: PUSH
14545: LD_INT 9
14547: PUSH
14548: LD_INT 10
14550: PUSH
14551: LD_INT 11
14553: PUSH
14554: LD_INT 12
14556: PUSH
14557: LD_INT 13
14559: PUSH
14560: LD_INT 14
14562: PUSH
14563: LD_INT 15
14565: PUSH
14566: LD_INT 16
14568: PUSH
14569: LD_INT 17
14571: PUSH
14572: LD_INT 18
14574: PUSH
14575: LD_INT 19
14577: PUSH
14578: LD_INT 20
14580: PUSH
14581: LD_INT 21
14583: PUSH
14584: LD_INT 22
14586: PUSH
14587: LD_INT 23
14589: PUSH
14590: LD_INT 24
14592: PUSH
14593: LD_INT 25
14595: PUSH
14596: LD_INT 26
14598: PUSH
14599: LD_INT 27
14601: PUSH
14602: LD_INT 28
14604: PUSH
14605: LD_INT 29
14607: PUSH
14608: LD_INT 30
14610: PUSH
14611: LD_INT 31
14613: PUSH
14614: LD_INT 32
14616: PUSH
14617: LD_INT 33
14619: PUSH
14620: LD_INT 34
14622: PUSH
14623: LD_INT 36
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 101
14665: PUSH
14666: LD_INT 102
14668: PUSH
14669: LD_INT 103
14671: PUSH
14672: LD_INT 104
14674: PUSH
14675: LD_INT 105
14677: PUSH
14678: LD_INT 106
14680: PUSH
14681: LD_INT 107
14683: PUSH
14684: LD_INT 108
14686: PUSH
14687: LD_INT 109
14689: PUSH
14690: LD_INT 110
14692: PUSH
14693: LD_INT 111
14695: PUSH
14696: LD_INT 112
14698: PUSH
14699: LD_INT 113
14701: PUSH
14702: LD_INT 114
14704: PUSH
14705: LD_INT 116
14707: PUSH
14708: LD_INT 117
14710: PUSH
14711: LD_INT 118
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: ST_TO_ADDR
14737: GO 15136
14739: LD_INT 18
14741: DOUBLE
14742: EQUAL
14743: IFTRUE 14747
14745: GO 14895
14747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14748: LD_ADDR_VAR 0 2
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: LD_INT 4
14758: PUSH
14759: LD_INT 5
14761: PUSH
14762: LD_INT 7
14764: PUSH
14765: LD_INT 11
14767: PUSH
14768: LD_INT 12
14770: PUSH
14771: LD_INT 15
14773: PUSH
14774: LD_INT 16
14776: PUSH
14777: LD_INT 20
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 25
14791: PUSH
14792: LD_INT 26
14794: PUSH
14795: LD_INT 30
14797: PUSH
14798: LD_INT 31
14800: PUSH
14801: LD_INT 32
14803: PUSH
14804: LD_INT 33
14806: PUSH
14807: LD_INT 34
14809: PUSH
14810: LD_INT 35
14812: PUSH
14813: LD_INT 36
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 101
14841: PUSH
14842: LD_INT 102
14844: PUSH
14845: LD_INT 103
14847: PUSH
14848: LD_INT 106
14850: PUSH
14851: LD_INT 108
14853: PUSH
14854: LD_INT 112
14856: PUSH
14857: LD_INT 113
14859: PUSH
14860: LD_INT 114
14862: PUSH
14863: LD_INT 115
14865: PUSH
14866: LD_INT 116
14868: PUSH
14869: LD_INT 117
14871: PUSH
14872: LD_INT 118
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: ST_TO_ADDR
14893: GO 15136
14895: LD_INT 19
14897: DOUBLE
14898: EQUAL
14899: IFTRUE 14903
14901: GO 15135
14903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14904: LD_ADDR_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 3
14917: PUSH
14918: LD_INT 4
14920: PUSH
14921: LD_INT 5
14923: PUSH
14924: LD_INT 6
14926: PUSH
14927: LD_INT 7
14929: PUSH
14930: LD_INT 8
14932: PUSH
14933: LD_INT 9
14935: PUSH
14936: LD_INT 10
14938: PUSH
14939: LD_INT 11
14941: PUSH
14942: LD_INT 12
14944: PUSH
14945: LD_INT 13
14947: PUSH
14948: LD_INT 14
14950: PUSH
14951: LD_INT 15
14953: PUSH
14954: LD_INT 16
14956: PUSH
14957: LD_INT 17
14959: PUSH
14960: LD_INT 18
14962: PUSH
14963: LD_INT 19
14965: PUSH
14966: LD_INT 20
14968: PUSH
14969: LD_INT 21
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 23
14977: PUSH
14978: LD_INT 24
14980: PUSH
14981: LD_INT 25
14983: PUSH
14984: LD_INT 26
14986: PUSH
14987: LD_INT 27
14989: PUSH
14990: LD_INT 28
14992: PUSH
14993: LD_INT 29
14995: PUSH
14996: LD_INT 30
14998: PUSH
14999: LD_INT 31
15001: PUSH
15002: LD_INT 32
15004: PUSH
15005: LD_INT 33
15007: PUSH
15008: LD_INT 34
15010: PUSH
15011: LD_INT 35
15013: PUSH
15014: LD_INT 36
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 101
15057: PUSH
15058: LD_INT 102
15060: PUSH
15061: LD_INT 103
15063: PUSH
15064: LD_INT 104
15066: PUSH
15067: LD_INT 105
15069: PUSH
15070: LD_INT 106
15072: PUSH
15073: LD_INT 107
15075: PUSH
15076: LD_INT 108
15078: PUSH
15079: LD_INT 109
15081: PUSH
15082: LD_INT 110
15084: PUSH
15085: LD_INT 111
15087: PUSH
15088: LD_INT 112
15090: PUSH
15091: LD_INT 113
15093: PUSH
15094: LD_INT 114
15096: PUSH
15097: LD_INT 115
15099: PUSH
15100: LD_INT 116
15102: PUSH
15103: LD_INT 117
15105: PUSH
15106: LD_INT 118
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: ST_TO_ADDR
15133: GO 15136
15135: POP
// end else
15136: GO 15367
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: LD_INT 2
15148: PUSH
15149: LD_INT 3
15151: PUSH
15152: LD_INT 4
15154: PUSH
15155: LD_INT 5
15157: PUSH
15158: LD_INT 6
15160: PUSH
15161: LD_INT 7
15163: PUSH
15164: LD_INT 8
15166: PUSH
15167: LD_INT 9
15169: PUSH
15170: LD_INT 10
15172: PUSH
15173: LD_INT 11
15175: PUSH
15176: LD_INT 12
15178: PUSH
15179: LD_INT 13
15181: PUSH
15182: LD_INT 14
15184: PUSH
15185: LD_INT 15
15187: PUSH
15188: LD_INT 16
15190: PUSH
15191: LD_INT 17
15193: PUSH
15194: LD_INT 18
15196: PUSH
15197: LD_INT 19
15199: PUSH
15200: LD_INT 20
15202: PUSH
15203: LD_INT 21
15205: PUSH
15206: LD_INT 22
15208: PUSH
15209: LD_INT 23
15211: PUSH
15212: LD_INT 24
15214: PUSH
15215: LD_INT 25
15217: PUSH
15218: LD_INT 26
15220: PUSH
15221: LD_INT 27
15223: PUSH
15224: LD_INT 28
15226: PUSH
15227: LD_INT 29
15229: PUSH
15230: LD_INT 30
15232: PUSH
15233: LD_INT 31
15235: PUSH
15236: LD_INT 32
15238: PUSH
15239: LD_INT 33
15241: PUSH
15242: LD_INT 34
15244: PUSH
15245: LD_INT 35
15247: PUSH
15248: LD_INT 36
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 101
15291: PUSH
15292: LD_INT 102
15294: PUSH
15295: LD_INT 103
15297: PUSH
15298: LD_INT 104
15300: PUSH
15301: LD_INT 105
15303: PUSH
15304: LD_INT 106
15306: PUSH
15307: LD_INT 107
15309: PUSH
15310: LD_INT 108
15312: PUSH
15313: LD_INT 109
15315: PUSH
15316: LD_INT 110
15318: PUSH
15319: LD_INT 111
15321: PUSH
15322: LD_INT 112
15324: PUSH
15325: LD_INT 113
15327: PUSH
15328: LD_INT 114
15330: PUSH
15331: LD_INT 115
15333: PUSH
15334: LD_INT 116
15336: PUSH
15337: LD_INT 117
15339: PUSH
15340: LD_INT 118
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: ST_TO_ADDR
// if result then
15367: LD_VAR 0 2
15371: IFFALSE 16157
// begin normal :=  ;
15373: LD_ADDR_VAR 0 5
15377: PUSH
15378: LD_STRING 
15380: ST_TO_ADDR
// hardcore :=  ;
15381: LD_ADDR_VAR 0 6
15385: PUSH
15386: LD_STRING 
15388: ST_TO_ADDR
// active :=  ;
15389: LD_ADDR_VAR 0 7
15393: PUSH
15394: LD_STRING 
15396: ST_TO_ADDR
// for i = 1 to normalCounter do
15397: LD_ADDR_VAR 0 8
15401: PUSH
15402: DOUBLE
15403: LD_INT 1
15405: DEC
15406: ST_TO_ADDR
15407: LD_EXP 28
15411: PUSH
15412: FOR_TO
15413: IFFALSE 15514
// begin tmp := 0 ;
15415: LD_ADDR_VAR 0 3
15419: PUSH
15420: LD_STRING 0
15422: ST_TO_ADDR
// if result [ 1 ] then
15423: LD_VAR 0 2
15427: PUSH
15428: LD_INT 1
15430: ARRAY
15431: IFFALSE 15496
// if result [ 1 ] [ 1 ] = i then
15433: LD_VAR 0 2
15437: PUSH
15438: LD_INT 1
15440: ARRAY
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PUSH
15446: LD_VAR 0 8
15450: EQUAL
15451: IFFALSE 15496
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15453: LD_ADDR_VAR 0 2
15457: PUSH
15458: LD_VAR 0 2
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: LD_VAR 0 2
15470: PUSH
15471: LD_INT 1
15473: ARRAY
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: CALL_OW 3
15482: PPUSH
15483: CALL_OW 1
15487: ST_TO_ADDR
// tmp := 1 ;
15488: LD_ADDR_VAR 0 3
15492: PUSH
15493: LD_STRING 1
15495: ST_TO_ADDR
// end ; normal := normal & tmp ;
15496: LD_ADDR_VAR 0 5
15500: PUSH
15501: LD_VAR 0 5
15505: PUSH
15506: LD_VAR 0 3
15510: STR
15511: ST_TO_ADDR
// end ;
15512: GO 15412
15514: POP
15515: POP
// for i = 1 to hardcoreCounter do
15516: LD_ADDR_VAR 0 8
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_EXP 29
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15637
// begin tmp := 0 ;
15534: LD_ADDR_VAR 0 3
15538: PUSH
15539: LD_STRING 0
15541: ST_TO_ADDR
// if result [ 2 ] then
15542: LD_VAR 0 2
15546: PUSH
15547: LD_INT 2
15549: ARRAY
15550: IFFALSE 15619
// if result [ 2 ] [ 1 ] = 100 + i then
15552: LD_VAR 0 2
15556: PUSH
15557: LD_INT 2
15559: ARRAY
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PUSH
15565: LD_INT 100
15567: PUSH
15568: LD_VAR 0 8
15572: PLUS
15573: EQUAL
15574: IFFALSE 15619
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_INT 2
15588: PPUSH
15589: LD_VAR 0 2
15593: PUSH
15594: LD_INT 2
15596: ARRAY
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 3
15605: PPUSH
15606: CALL_OW 1
15610: ST_TO_ADDR
// tmp := 1 ;
15611: LD_ADDR_VAR 0 3
15615: PUSH
15616: LD_STRING 1
15618: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15619: LD_ADDR_VAR 0 6
15623: PUSH
15624: LD_VAR 0 6
15628: PUSH
15629: LD_VAR 0 3
15633: STR
15634: ST_TO_ADDR
// end ;
15635: GO 15531
15637: POP
15638: POP
// if isGameLoad then
15639: LD_VAR 0 1
15643: IFFALSE 16118
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15645: LD_ADDR_VAR 0 4
15649: PUSH
15650: LD_EXP 32
15654: PUSH
15655: LD_EXP 31
15659: PUSH
15660: LD_EXP 33
15664: PUSH
15665: LD_EXP 30
15669: PUSH
15670: LD_EXP 34
15674: PUSH
15675: LD_EXP 35
15679: PUSH
15680: LD_EXP 36
15684: PUSH
15685: LD_EXP 37
15689: PUSH
15690: LD_EXP 38
15694: PUSH
15695: LD_EXP 39
15699: PUSH
15700: LD_EXP 40
15704: PUSH
15705: LD_EXP 41
15709: PUSH
15710: LD_EXP 42
15714: PUSH
15715: LD_EXP 43
15719: PUSH
15720: LD_EXP 51
15724: PUSH
15725: LD_EXP 52
15729: PUSH
15730: LD_EXP 53
15734: PUSH
15735: LD_EXP 54
15739: PUSH
15740: LD_EXP 56
15744: PUSH
15745: LD_EXP 57
15749: PUSH
15750: LD_EXP 58
15754: PUSH
15755: LD_EXP 61
15759: PUSH
15760: LD_EXP 63
15764: PUSH
15765: LD_EXP 64
15769: PUSH
15770: LD_EXP 65
15774: PUSH
15775: LD_EXP 67
15779: PUSH
15780: LD_EXP 68
15784: PUSH
15785: LD_EXP 71
15789: PUSH
15790: LD_EXP 72
15794: PUSH
15795: LD_EXP 73
15799: PUSH
15800: LD_EXP 74
15804: PUSH
15805: LD_EXP 75
15809: PUSH
15810: LD_EXP 76
15814: PUSH
15815: LD_EXP 77
15819: PUSH
15820: LD_EXP 78
15824: PUSH
15825: LD_EXP 79
15829: PUSH
15830: LD_EXP 44
15834: PUSH
15835: LD_EXP 45
15839: PUSH
15840: LD_EXP 48
15844: PUSH
15845: LD_EXP 49
15849: PUSH
15850: LD_EXP 50
15854: PUSH
15855: LD_EXP 46
15859: PUSH
15860: LD_EXP 47
15864: PUSH
15865: LD_EXP 55
15869: PUSH
15870: LD_EXP 59
15874: PUSH
15875: LD_EXP 60
15879: PUSH
15880: LD_EXP 62
15884: PUSH
15885: LD_EXP 66
15889: PUSH
15890: LD_EXP 69
15894: PUSH
15895: LD_EXP 70
15899: PUSH
15900: LD_EXP 80
15904: PUSH
15905: LD_EXP 81
15909: PUSH
15910: LD_EXP 82
15914: PUSH
15915: LD_EXP 83
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
// tmp :=  ;
15976: LD_ADDR_VAR 0 3
15980: PUSH
15981: LD_STRING 
15983: ST_TO_ADDR
// for i = 1 to normalCounter do
15984: LD_ADDR_VAR 0 8
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_EXP 28
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16036
// begin if flags [ i ] then
16002: LD_VAR 0 4
16006: PUSH
16007: LD_VAR 0 8
16011: ARRAY
16012: IFFALSE 16034
// tmp := tmp & i & ; ;
16014: LD_ADDR_VAR 0 3
16018: PUSH
16019: LD_VAR 0 3
16023: PUSH
16024: LD_VAR 0 8
16028: STR
16029: PUSH
16030: LD_STRING ;
16032: STR
16033: ST_TO_ADDR
// end ;
16034: GO 15999
16036: POP
16037: POP
// for i = 1 to hardcoreCounter do
16038: LD_ADDR_VAR 0 8
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_EXP 29
16052: PUSH
16053: FOR_TO
16054: IFFALSE 16100
// begin if flags [ normalCounter + i ] then
16056: LD_VAR 0 4
16060: PUSH
16061: LD_EXP 28
16065: PUSH
16066: LD_VAR 0 8
16070: PLUS
16071: ARRAY
16072: IFFALSE 16098
// tmp := tmp & ( 100 + i ) & ; ;
16074: LD_ADDR_VAR 0 3
16078: PUSH
16079: LD_VAR 0 3
16083: PUSH
16084: LD_INT 100
16086: PUSH
16087: LD_VAR 0 8
16091: PLUS
16092: STR
16093: PUSH
16094: LD_STRING ;
16096: STR
16097: ST_TO_ADDR
// end ;
16098: GO 16053
16100: POP
16101: POP
// if tmp then
16102: LD_VAR 0 3
16106: IFFALSE 16118
// active := tmp ;
16108: LD_ADDR_VAR 0 7
16112: PUSH
16113: LD_VAR 0 3
16117: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16118: LD_STRING getStreamItemsFromMission("
16120: PUSH
16121: LD_VAR 0 5
16125: STR
16126: PUSH
16127: LD_STRING ","
16129: STR
16130: PUSH
16131: LD_VAR 0 6
16135: STR
16136: PUSH
16137: LD_STRING ","
16139: STR
16140: PUSH
16141: LD_VAR 0 7
16145: STR
16146: PUSH
16147: LD_STRING ")
16149: STR
16150: PPUSH
16151: CALL_OW 559
// end else
16155: GO 16164
// ToLua ( getStreamItemsFromMission("","","") ) ;
16157: LD_STRING getStreamItemsFromMission("","","")
16159: PPUSH
16160: CALL_OW 559
// end ;
16164: LD_VAR 0 2
16168: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16169: LD_EXP 27
16173: PUSH
16174: LD_EXP 32
16178: AND
16179: IFFALSE 16303
16181: GO 16183
16183: DISABLE
16184: LD_INT 0
16186: PPUSH
16187: PPUSH
// begin enable ;
16188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: LD_INT 22
16196: PUSH
16197: LD_OWVAR 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: LD_INT 34
16211: PUSH
16212: LD_INT 7
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 45
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 28
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 34
16241: PUSH
16242: LD_INT 47
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PPUSH
16260: CALL_OW 69
16264: ST_TO_ADDR
// if not tmp then
16265: LD_VAR 0 2
16269: NOT
16270: IFFALSE 16274
// exit ;
16272: GO 16303
// for i in tmp do
16274: LD_ADDR_VAR 0 1
16278: PUSH
16279: LD_VAR 0 2
16283: PUSH
16284: FOR_IN
16285: IFFALSE 16301
// begin SetLives ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 234
// end ;
16299: GO 16284
16301: POP
16302: POP
// end ;
16303: PPOPN 2
16305: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16306: LD_EXP 27
16310: PUSH
16311: LD_EXP 33
16315: AND
16316: IFFALSE 16400
16318: GO 16320
16320: DISABLE
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
// begin enable ;
16325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_INT 22
16333: PUSH
16334: LD_OWVAR 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 32
16345: PUSH
16346: LD_INT 3
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PPUSH
16357: CALL_OW 69
16361: ST_TO_ADDR
// if not tmp then
16362: LD_VAR 0 2
16366: NOT
16367: IFFALSE 16371
// exit ;
16369: GO 16400
// for i in tmp do
16371: LD_ADDR_VAR 0 1
16375: PUSH
16376: LD_VAR 0 2
16380: PUSH
16381: FOR_IN
16382: IFFALSE 16398
// begin SetLives ( i , 0 ) ;
16384: LD_VAR 0 1
16388: PPUSH
16389: LD_INT 0
16391: PPUSH
16392: CALL_OW 234
// end ;
16396: GO 16381
16398: POP
16399: POP
// end ;
16400: PPOPN 2
16402: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16403: LD_EXP 27
16407: PUSH
16408: LD_EXP 30
16412: AND
16413: IFFALSE 16506
16415: GO 16417
16417: DISABLE
16418: LD_INT 0
16420: PPUSH
// begin enable ;
16421: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_OWVAR 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: LD_INT 25
16444: PUSH
16445: LD_INT 5
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 25
16454: PUSH
16455: LD_INT 9
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 25
16464: PUSH
16465: LD_INT 8
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PPUSH
16482: CALL_OW 69
16486: PUSH
16487: FOR_IN
16488: IFFALSE 16504
// begin SetClass ( i , 1 ) ;
16490: LD_VAR 0 1
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 336
// end ;
16502: GO 16487
16504: POP
16505: POP
// end ;
16506: PPOPN 1
16508: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16509: LD_EXP 27
16513: PUSH
16514: LD_EXP 31
16518: AND
16519: PUSH
16520: LD_OWVAR 65
16524: PUSH
16525: LD_INT 7
16527: LESS
16528: AND
16529: IFFALSE 16543
16531: GO 16533
16533: DISABLE
// begin enable ;
16534: ENABLE
// game_speed := 7 ;
16535: LD_ADDR_OWVAR 65
16539: PUSH
16540: LD_INT 7
16542: ST_TO_ADDR
// end ;
16543: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16544: LD_EXP 27
16548: PUSH
16549: LD_EXP 34
16553: AND
16554: IFFALSE 16756
16556: GO 16558
16558: DISABLE
16559: LD_INT 0
16561: PPUSH
16562: PPUSH
16563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16564: LD_ADDR_VAR 0 3
16568: PUSH
16569: LD_INT 81
16571: PUSH
16572: LD_OWVAR 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: ST_TO_ADDR
// if not tmp then
16600: LD_VAR 0 3
16604: NOT
16605: IFFALSE 16609
// exit ;
16607: GO 16756
// if tmp > 5 then
16609: LD_VAR 0 3
16613: PUSH
16614: LD_INT 5
16616: GREATER
16617: IFFALSE 16629
// k := 5 else
16619: LD_ADDR_VAR 0 2
16623: PUSH
16624: LD_INT 5
16626: ST_TO_ADDR
16627: GO 16639
// k := tmp ;
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_VAR 0 3
16638: ST_TO_ADDR
// for i := 1 to k do
16639: LD_ADDR_VAR 0 1
16643: PUSH
16644: DOUBLE
16645: LD_INT 1
16647: DEC
16648: ST_TO_ADDR
16649: LD_VAR 0 2
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16754
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 1
16666: ARRAY
16667: PPUSH
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 4
16675: MOD
16676: PUSH
16677: LD_INT 1
16679: PLUS
16680: PPUSH
16681: CALL_OW 259
16685: PUSH
16686: LD_INT 10
16688: LESS
16689: IFFALSE 16752
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16691: LD_VAR 0 3
16695: PUSH
16696: LD_VAR 0 1
16700: ARRAY
16701: PPUSH
16702: LD_VAR 0 1
16706: PUSH
16707: LD_INT 4
16709: MOD
16710: PUSH
16711: LD_INT 1
16713: PLUS
16714: PPUSH
16715: LD_VAR 0 3
16719: PUSH
16720: LD_VAR 0 1
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 1
16730: PUSH
16731: LD_INT 4
16733: MOD
16734: PUSH
16735: LD_INT 1
16737: PLUS
16738: PPUSH
16739: CALL_OW 259
16743: PUSH
16744: LD_INT 1
16746: PLUS
16747: PPUSH
16748: CALL_OW 237
16752: GO 16654
16754: POP
16755: POP
// end ;
16756: PPOPN 3
16758: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16759: LD_EXP 27
16763: PUSH
16764: LD_EXP 35
16768: AND
16769: IFFALSE 16789
16771: GO 16773
16773: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16774: LD_INT 4
16776: PPUSH
16777: LD_OWVAR 2
16781: PPUSH
16782: LD_INT 0
16784: PPUSH
16785: CALL_OW 324
16789: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16790: LD_EXP 27
16794: PUSH
16795: LD_EXP 64
16799: AND
16800: IFFALSE 16820
16802: GO 16804
16804: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16805: LD_INT 19
16807: PPUSH
16808: LD_OWVAR 2
16812: PPUSH
16813: LD_INT 0
16815: PPUSH
16816: CALL_OW 324
16820: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16821: LD_EXP 27
16825: PUSH
16826: LD_EXP 36
16830: AND
16831: IFFALSE 16933
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// begin enable ;
16840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16841: LD_ADDR_VAR 0 2
16845: PUSH
16846: LD_INT 22
16848: PUSH
16849: LD_OWVAR 2
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 34
16863: PUSH
16864: LD_INT 11
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 34
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PPUSH
16890: CALL_OW 69
16894: ST_TO_ADDR
// if not tmp then
16895: LD_VAR 0 2
16899: NOT
16900: IFFALSE 16904
// exit ;
16902: GO 16933
// for i in tmp do
16904: LD_ADDR_VAR 0 1
16908: PUSH
16909: LD_VAR 0 2
16913: PUSH
16914: FOR_IN
16915: IFFALSE 16931
// begin SetLives ( i , 0 ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_INT 0
16924: PPUSH
16925: CALL_OW 234
// end ;
16929: GO 16914
16931: POP
16932: POP
// end ;
16933: PPOPN 2
16935: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16936: LD_EXP 27
16940: PUSH
16941: LD_EXP 37
16945: AND
16946: IFFALSE 16966
16948: GO 16950
16950: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16951: LD_INT 32
16953: PPUSH
16954: LD_OWVAR 2
16958: PPUSH
16959: LD_INT 0
16961: PPUSH
16962: CALL_OW 324
16966: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16967: LD_EXP 27
16971: PUSH
16972: LD_EXP 38
16976: AND
16977: IFFALSE 17158
16979: GO 16981
16981: DISABLE
16982: LD_INT 0
16984: PPUSH
16985: PPUSH
16986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_OWVAR 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 33
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: ST_TO_ADDR
// if not tmp then
17023: LD_VAR 0 2
17027: NOT
17028: IFFALSE 17032
// exit ;
17030: GO 17158
// side := 0 ;
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// for i := 1 to 8 do
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: DOUBLE
17046: LD_INT 1
17048: DEC
17049: ST_TO_ADDR
17050: LD_INT 8
17052: PUSH
17053: FOR_TO
17054: IFFALSE 17102
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17056: LD_OWVAR 2
17060: PUSH
17061: LD_VAR 0 1
17065: NONEQUAL
17066: PUSH
17067: LD_OWVAR 2
17071: PPUSH
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 81
17081: PUSH
17082: LD_INT 2
17084: EQUAL
17085: AND
17086: IFFALSE 17100
// begin side := i ;
17088: LD_ADDR_VAR 0 3
17092: PUSH
17093: LD_VAR 0 1
17097: ST_TO_ADDR
// break ;
17098: GO 17102
// end ;
17100: GO 17053
17102: POP
17103: POP
// if not side then
17104: LD_VAR 0 3
17108: NOT
17109: IFFALSE 17113
// exit ;
17111: GO 17158
// for i := 1 to tmp do
17113: LD_ADDR_VAR 0 1
17117: PUSH
17118: DOUBLE
17119: LD_INT 1
17121: DEC
17122: ST_TO_ADDR
17123: LD_VAR 0 2
17127: PUSH
17128: FOR_TO
17129: IFFALSE 17156
// if Prob ( 60 ) then
17131: LD_INT 60
17133: PPUSH
17134: CALL_OW 13
17138: IFFALSE 17154
// SetSide ( i , side ) ;
17140: LD_VAR 0 1
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: CALL_OW 235
17154: GO 17128
17156: POP
17157: POP
// end ;
17158: PPOPN 3
17160: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17161: LD_EXP 27
17165: PUSH
17166: LD_EXP 40
17170: AND
17171: IFFALSE 17290
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_OWVAR 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 21
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 3
17208: PUSH
17209: LD_INT 23
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PUSH
17233: FOR_IN
17234: IFFALSE 17288
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 257
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 4
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: IN
17264: IFFALSE 17286
// SetClass ( un , rand ( 1 , 4 ) ) ;
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 4
17276: PPUSH
17277: CALL_OW 12
17281: PPUSH
17282: CALL_OW 336
17286: GO 17233
17288: POP
17289: POP
// end ;
17290: PPOPN 1
17292: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17293: LD_EXP 27
17297: PUSH
17298: LD_EXP 39
17302: AND
17303: IFFALSE 17382
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17311: LD_ADDR_VAR 0 1
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_OWVAR 2
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 21
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 69
17346: ST_TO_ADDR
// if not tmp then
17347: LD_VAR 0 1
17351: NOT
17352: IFFALSE 17356
// exit ;
17354: GO 17382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17356: LD_VAR 0 1
17360: PUSH
17361: LD_INT 1
17363: PPUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 12
17373: ARRAY
17374: PPUSH
17375: LD_INT 100
17377: PPUSH
17378: CALL_OW 234
// end ;
17382: PPOPN 1
17384: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17385: LD_EXP 27
17389: PUSH
17390: LD_EXP 41
17394: AND
17395: IFFALSE 17493
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17403: LD_ADDR_VAR 0 1
17407: PUSH
17408: LD_INT 22
17410: PUSH
17411: LD_OWVAR 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 21
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: ST_TO_ADDR
// if not tmp then
17439: LD_VAR 0 1
17443: NOT
17444: IFFALSE 17448
// exit ;
17446: GO 17493
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17448: LD_VAR 0 1
17452: PUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 12
17465: ARRAY
17466: PPUSH
17467: LD_INT 1
17469: PPUSH
17470: LD_INT 4
17472: PPUSH
17473: CALL_OW 12
17477: PPUSH
17478: LD_INT 3000
17480: PPUSH
17481: LD_INT 9000
17483: PPUSH
17484: CALL_OW 12
17488: PPUSH
17489: CALL_OW 492
// end ;
17493: PPOPN 1
17495: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17496: LD_EXP 27
17500: PUSH
17501: LD_EXP 42
17505: AND
17506: IFFALSE 17526
17508: GO 17510
17510: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17511: LD_INT 1
17513: PPUSH
17514: LD_OWVAR 2
17518: PPUSH
17519: LD_INT 0
17521: PPUSH
17522: CALL_OW 324
17526: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17527: LD_EXP 27
17531: PUSH
17532: LD_EXP 43
17536: AND
17537: IFFALSE 17620
17539: GO 17541
17541: DISABLE
17542: LD_INT 0
17544: PPUSH
17545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17546: LD_ADDR_VAR 0 2
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_OWVAR 2
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 21
17565: PUSH
17566: LD_INT 3
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 69
17581: ST_TO_ADDR
// if not tmp then
17582: LD_VAR 0 2
17586: NOT
17587: IFFALSE 17591
// exit ;
17589: GO 17620
// for i in tmp do
17591: LD_ADDR_VAR 0 1
17595: PUSH
17596: LD_VAR 0 2
17600: PUSH
17601: FOR_IN
17602: IFFALSE 17618
// SetBLevel ( i , 10 ) ;
17604: LD_VAR 0 1
17608: PPUSH
17609: LD_INT 10
17611: PPUSH
17612: CALL_OW 241
17616: GO 17601
17618: POP
17619: POP
// end ;
17620: PPOPN 2
17622: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17623: LD_EXP 27
17627: PUSH
17628: LD_EXP 44
17632: AND
17633: IFFALSE 17744
17635: GO 17637
17637: DISABLE
17638: LD_INT 0
17640: PPUSH
17641: PPUSH
17642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_INT 22
17650: PUSH
17651: LD_OWVAR 2
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 25
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PPUSH
17674: CALL_OW 69
17678: ST_TO_ADDR
// if not tmp then
17679: LD_VAR 0 3
17683: NOT
17684: IFFALSE 17688
// exit ;
17686: GO 17744
// un := tmp [ rand ( 1 , tmp ) ] ;
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_VAR 0 3
17697: PUSH
17698: LD_INT 1
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: CALL_OW 12
17710: ARRAY
17711: ST_TO_ADDR
// if Crawls ( un ) then
17712: LD_VAR 0 2
17716: PPUSH
17717: CALL_OW 318
17721: IFFALSE 17732
// ComWalk ( un ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17732: LD_VAR 0 2
17736: PPUSH
17737: LD_INT 5
17739: PPUSH
17740: CALL_OW 336
// end ;
17744: PPOPN 3
17746: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17747: LD_EXP 27
17751: PUSH
17752: LD_EXP 45
17756: AND
17757: PUSH
17758: LD_OWVAR 67
17762: PUSH
17763: LD_INT 4
17765: LESS
17766: AND
17767: IFFALSE 17786
17769: GO 17771
17771: DISABLE
// begin Difficulty := Difficulty + 1 ;
17772: LD_ADDR_OWVAR 67
17776: PUSH
17777: LD_OWVAR 67
17781: PUSH
17782: LD_INT 1
17784: PLUS
17785: ST_TO_ADDR
// end ;
17786: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17787: LD_EXP 27
17791: PUSH
17792: LD_EXP 46
17796: AND
17797: IFFALSE 17900
17799: GO 17801
17801: DISABLE
17802: LD_INT 0
17804: PPUSH
// begin for i := 1 to 5 do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 5
17817: PUSH
17818: FOR_TO
17819: IFFALSE 17898
// begin uc_nation := nation_nature ;
17821: LD_ADDR_OWVAR 21
17825: PUSH
17826: LD_INT 0
17828: ST_TO_ADDR
// uc_side := 0 ;
17829: LD_ADDR_OWVAR 20
17833: PUSH
17834: LD_INT 0
17836: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17837: LD_ADDR_OWVAR 29
17841: PUSH
17842: LD_INT 12
17844: PUSH
17845: LD_INT 12
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: ST_TO_ADDR
// hc_agressivity := 20 ;
17852: LD_ADDR_OWVAR 35
17856: PUSH
17857: LD_INT 20
17859: ST_TO_ADDR
// hc_class := class_tiger ;
17860: LD_ADDR_OWVAR 28
17864: PUSH
17865: LD_INT 14
17867: ST_TO_ADDR
// hc_gallery :=  ;
17868: LD_ADDR_OWVAR 33
17872: PUSH
17873: LD_STRING 
17875: ST_TO_ADDR
// hc_name :=  ;
17876: LD_ADDR_OWVAR 26
17880: PUSH
17881: LD_STRING 
17883: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17884: CALL_OW 44
17888: PPUSH
17889: LD_INT 0
17891: PPUSH
17892: CALL_OW 51
// end ;
17896: GO 17818
17898: POP
17899: POP
// end ;
17900: PPOPN 1
17902: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17903: LD_EXP 27
17907: PUSH
17908: LD_EXP 47
17912: AND
17913: IFFALSE 17922
17915: GO 17917
17917: DISABLE
// StreamSibBomb ;
17918: CALL 17923 0 0
17922: END
// export function StreamSibBomb ; var i , x , y ; begin
17923: LD_INT 0
17925: PPUSH
17926: PPUSH
17927: PPUSH
17928: PPUSH
// result := false ;
17929: LD_ADDR_VAR 0 1
17933: PUSH
17934: LD_INT 0
17936: ST_TO_ADDR
// for i := 1 to 16 do
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: DOUBLE
17943: LD_INT 1
17945: DEC
17946: ST_TO_ADDR
17947: LD_INT 16
17949: PUSH
17950: FOR_TO
17951: IFFALSE 18150
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17953: LD_ADDR_VAR 0 3
17957: PUSH
17958: LD_INT 10
17960: PUSH
17961: LD_INT 20
17963: PUSH
17964: LD_INT 30
17966: PUSH
17967: LD_INT 40
17969: PUSH
17970: LD_INT 50
17972: PUSH
17973: LD_INT 60
17975: PUSH
17976: LD_INT 70
17978: PUSH
17979: LD_INT 80
17981: PUSH
17982: LD_INT 90
17984: PUSH
17985: LD_INT 100
17987: PUSH
17988: LD_INT 110
17990: PUSH
17991: LD_INT 120
17993: PUSH
17994: LD_INT 130
17996: PUSH
17997: LD_INT 140
17999: PUSH
18000: LD_INT 150
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 1
18022: PPUSH
18023: LD_INT 15
18025: PPUSH
18026: CALL_OW 12
18030: ARRAY
18031: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18032: LD_ADDR_VAR 0 4
18036: PUSH
18037: LD_INT 10
18039: PUSH
18040: LD_INT 20
18042: PUSH
18043: LD_INT 30
18045: PUSH
18046: LD_INT 40
18048: PUSH
18049: LD_INT 50
18051: PUSH
18052: LD_INT 60
18054: PUSH
18055: LD_INT 70
18057: PUSH
18058: LD_INT 80
18060: PUSH
18061: LD_INT 90
18063: PUSH
18064: LD_INT 100
18066: PUSH
18067: LD_INT 110
18069: PUSH
18070: LD_INT 120
18072: PUSH
18073: LD_INT 130
18075: PUSH
18076: LD_INT 140
18078: PUSH
18079: LD_INT 150
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 1
18101: PPUSH
18102: LD_INT 15
18104: PPUSH
18105: CALL_OW 12
18109: ARRAY
18110: ST_TO_ADDR
// if ValidHex ( x , y ) then
18111: LD_VAR 0 3
18115: PPUSH
18116: LD_VAR 0 4
18120: PPUSH
18121: CALL_OW 488
18125: IFFALSE 18148
// begin result := [ x , y ] ;
18127: LD_ADDR_VAR 0 1
18131: PUSH
18132: LD_VAR 0 3
18136: PUSH
18137: LD_VAR 0 4
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: ST_TO_ADDR
// break ;
18146: GO 18150
// end ; end ;
18148: GO 17950
18150: POP
18151: POP
// if result then
18152: LD_VAR 0 1
18156: IFFALSE 18216
// begin ToLua ( playSibBomb() ) ;
18158: LD_STRING playSibBomb()
18160: PPUSH
18161: CALL_OW 559
// wait ( 0 0$14 ) ;
18165: LD_INT 490
18167: PPUSH
18168: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 1
18179: ARRAY
18180: PPUSH
18181: LD_VAR 0 1
18185: PUSH
18186: LD_INT 2
18188: ARRAY
18189: PPUSH
18190: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18194: LD_VAR 0 1
18198: PUSH
18199: LD_INT 1
18201: ARRAY
18202: PPUSH
18203: LD_VAR 0 1
18207: PUSH
18208: LD_INT 2
18210: ARRAY
18211: PPUSH
18212: CALL_OW 429
// end ; end ;
18216: LD_VAR 0 1
18220: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18221: LD_EXP 27
18225: PUSH
18226: LD_EXP 49
18230: AND
18231: IFFALSE 18243
18233: GO 18235
18235: DISABLE
// YouLost (  ) ;
18236: LD_STRING 
18238: PPUSH
18239: CALL_OW 104
18243: END
// every 0 0$1 trigger StreamModeActive and sFog do
18244: LD_EXP 27
18248: PUSH
18249: LD_EXP 48
18253: AND
18254: IFFALSE 18268
18256: GO 18258
18258: DISABLE
// FogOff ( your_side ) ;
18259: LD_OWVAR 2
18263: PPUSH
18264: CALL_OW 344
18268: END
// every 0 0$1 trigger StreamModeActive and sSun do
18269: LD_EXP 27
18273: PUSH
18274: LD_EXP 50
18278: AND
18279: IFFALSE 18307
18281: GO 18283
18283: DISABLE
// begin solar_recharge_percent := 0 ;
18284: LD_ADDR_OWVAR 79
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18292: LD_INT 10500
18294: PPUSH
18295: CALL_OW 67
// solar_recharge_percent := 100 ;
18299: LD_ADDR_OWVAR 79
18303: PUSH
18304: LD_INT 100
18306: ST_TO_ADDR
// end ;
18307: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18308: LD_EXP 27
18312: PUSH
18313: LD_EXP 51
18317: AND
18318: IFFALSE 18557
18320: GO 18322
18322: DISABLE
18323: LD_INT 0
18325: PPUSH
18326: PPUSH
18327: PPUSH
// begin tmp := [ ] ;
18328: LD_ADDR_VAR 0 3
18332: PUSH
18333: EMPTY
18334: ST_TO_ADDR
// for i := 1 to 6 do
18335: LD_ADDR_VAR 0 1
18339: PUSH
18340: DOUBLE
18341: LD_INT 1
18343: DEC
18344: ST_TO_ADDR
18345: LD_INT 6
18347: PUSH
18348: FOR_TO
18349: IFFALSE 18454
// begin uc_nation := nation_nature ;
18351: LD_ADDR_OWVAR 21
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// uc_side := 0 ;
18359: LD_ADDR_OWVAR 20
18363: PUSH
18364: LD_INT 0
18366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18367: LD_ADDR_OWVAR 29
18371: PUSH
18372: LD_INT 12
18374: PUSH
18375: LD_INT 12
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: ST_TO_ADDR
// hc_agressivity := 20 ;
18382: LD_ADDR_OWVAR 35
18386: PUSH
18387: LD_INT 20
18389: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18390: LD_ADDR_OWVAR 28
18394: PUSH
18395: LD_INT 17
18397: ST_TO_ADDR
// hc_gallery :=  ;
18398: LD_ADDR_OWVAR 33
18402: PUSH
18403: LD_STRING 
18405: ST_TO_ADDR
// hc_name :=  ;
18406: LD_ADDR_OWVAR 26
18410: PUSH
18411: LD_STRING 
18413: ST_TO_ADDR
// un := CreateHuman ;
18414: LD_ADDR_VAR 0 2
18418: PUSH
18419: CALL_OW 44
18423: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18424: LD_VAR 0 2
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 51
// tmp := tmp ^ un ;
18436: LD_ADDR_VAR 0 3
18440: PUSH
18441: LD_VAR 0 3
18445: PUSH
18446: LD_VAR 0 2
18450: ADD
18451: ST_TO_ADDR
// end ;
18452: GO 18348
18454: POP
18455: POP
// repeat wait ( 0 0$1 ) ;
18456: LD_INT 35
18458: PPUSH
18459: CALL_OW 67
// for un in tmp do
18463: LD_ADDR_VAR 0 2
18467: PUSH
18468: LD_VAR 0 3
18472: PUSH
18473: FOR_IN
18474: IFFALSE 18548
// begin if IsDead ( un ) then
18476: LD_VAR 0 2
18480: PPUSH
18481: CALL_OW 301
18485: IFFALSE 18505
// begin tmp := tmp diff un ;
18487: LD_ADDR_VAR 0 3
18491: PUSH
18492: LD_VAR 0 3
18496: PUSH
18497: LD_VAR 0 2
18501: DIFF
18502: ST_TO_ADDR
// continue ;
18503: GO 18473
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18505: LD_VAR 0 2
18509: PPUSH
18510: LD_INT 3
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PPUSH
18532: LD_VAR 0 2
18536: PPUSH
18537: CALL_OW 74
18541: PPUSH
18542: CALL_OW 115
// end ;
18546: GO 18473
18548: POP
18549: POP
// until not tmp ;
18550: LD_VAR 0 3
18554: NOT
18555: IFFALSE 18456
// end ;
18557: PPOPN 3
18559: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18560: LD_EXP 27
18564: PUSH
18565: LD_EXP 52
18569: AND
18570: IFFALSE 18624
18572: GO 18574
18574: DISABLE
// begin ToLua ( displayTroll(); ) ;
18575: LD_STRING displayTroll();
18577: PPUSH
18578: CALL_OW 559
// wait ( 3 3$00 ) ;
18582: LD_INT 6300
18584: PPUSH
18585: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18589: LD_STRING hideTroll();
18591: PPUSH
18592: CALL_OW 559
// wait ( 1 1$00 ) ;
18596: LD_INT 2100
18598: PPUSH
18599: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18603: LD_STRING displayTroll();
18605: PPUSH
18606: CALL_OW 559
// wait ( 1 1$00 ) ;
18610: LD_INT 2100
18612: PPUSH
18613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18617: LD_STRING hideTroll();
18619: PPUSH
18620: CALL_OW 559
// end ;
18624: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18625: LD_EXP 27
18629: PUSH
18630: LD_EXP 53
18634: AND
18635: IFFALSE 18698
18637: GO 18639
18639: DISABLE
18640: LD_INT 0
18642: PPUSH
// begin p := 0 ;
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_INT 0
18650: ST_TO_ADDR
// repeat game_speed := 1 ;
18651: LD_ADDR_OWVAR 65
18655: PUSH
18656: LD_INT 1
18658: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18659: LD_INT 35
18661: PPUSH
18662: CALL_OW 67
// p := p + 1 ;
18666: LD_ADDR_VAR 0 1
18670: PUSH
18671: LD_VAR 0 1
18675: PUSH
18676: LD_INT 1
18678: PLUS
18679: ST_TO_ADDR
// until p >= 60 ;
18680: LD_VAR 0 1
18684: PUSH
18685: LD_INT 60
18687: GREATEREQUAL
18688: IFFALSE 18651
// game_speed := 4 ;
18690: LD_ADDR_OWVAR 65
18694: PUSH
18695: LD_INT 4
18697: ST_TO_ADDR
// end ;
18698: PPOPN 1
18700: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18701: LD_EXP 27
18705: PUSH
18706: LD_EXP 54
18710: AND
18711: IFFALSE 18857
18713: GO 18715
18715: DISABLE
18716: LD_INT 0
18718: PPUSH
18719: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18720: LD_ADDR_VAR 0 1
18724: PUSH
18725: LD_INT 22
18727: PUSH
18728: LD_OWVAR 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 30
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 30
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PPUSH
18769: CALL_OW 69
18773: ST_TO_ADDR
// if not depot then
18774: LD_VAR 0 1
18778: NOT
18779: IFFALSE 18783
// exit ;
18781: GO 18857
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18783: LD_ADDR_VAR 0 2
18787: PUSH
18788: LD_VAR 0 1
18792: PUSH
18793: LD_INT 1
18795: PPUSH
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 12
18805: ARRAY
18806: PPUSH
18807: CALL_OW 274
18811: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: LD_INT 0
18822: PPUSH
18823: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18827: LD_VAR 0 2
18831: PPUSH
18832: LD_INT 2
18834: PPUSH
18835: LD_INT 0
18837: PPUSH
18838: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_INT 3
18849: PPUSH
18850: LD_INT 0
18852: PPUSH
18853: CALL_OW 277
// end ;
18857: PPOPN 2
18859: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18860: LD_EXP 27
18864: PUSH
18865: LD_EXP 55
18869: AND
18870: IFFALSE 18967
18872: GO 18874
18874: DISABLE
18875: LD_INT 0
18877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18878: LD_ADDR_VAR 0 1
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 3
18907: PUSH
18908: LD_INT 23
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: ST_TO_ADDR
// if not tmp then
18932: LD_VAR 0 1
18936: NOT
18937: IFFALSE 18941
// exit ;
18939: GO 18967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 1
18948: PPUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL_OW 12
18958: ARRAY
18959: PPUSH
18960: LD_INT 200
18962: PPUSH
18963: CALL_OW 234
// end ;
18967: PPOPN 1
18969: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18970: LD_EXP 27
18974: PUSH
18975: LD_EXP 56
18979: AND
18980: IFFALSE 19059
18982: GO 18984
18984: DISABLE
18985: LD_INT 0
18987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18988: LD_ADDR_VAR 0 1
18992: PUSH
18993: LD_INT 22
18995: PUSH
18996: LD_OWVAR 2
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 21
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PPUSH
19019: CALL_OW 69
19023: ST_TO_ADDR
// if not tmp then
19024: LD_VAR 0 1
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19033: LD_VAR 0 1
19037: PUSH
19038: LD_INT 1
19040: PPUSH
19041: LD_VAR 0 1
19045: PPUSH
19046: CALL_OW 12
19050: ARRAY
19051: PPUSH
19052: LD_INT 60
19054: PPUSH
19055: CALL_OW 234
// end ;
19059: PPOPN 1
19061: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19062: LD_EXP 27
19066: PUSH
19067: LD_EXP 57
19071: AND
19072: IFFALSE 19171
19074: GO 19076
19076: DISABLE
19077: LD_INT 0
19079: PPUSH
19080: PPUSH
// begin enable ;
19081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_OWVAR 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 61
19101: PUSH
19102: EMPTY
19103: LIST
19104: PUSH
19105: LD_INT 33
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: PPUSH
19120: CALL_OW 69
19124: ST_TO_ADDR
// if not tmp then
19125: LD_VAR 0 1
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19171
// for i in tmp do
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: LD_VAR 0 1
19143: PUSH
19144: FOR_IN
19145: IFFALSE 19169
// if IsControledBy ( i ) then
19147: LD_VAR 0 2
19151: PPUSH
19152: CALL_OW 312
19156: IFFALSE 19167
// ComUnlink ( i ) ;
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 136
19167: GO 19144
19169: POP
19170: POP
// end ;
19171: PPOPN 2
19173: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19174: LD_EXP 27
19178: PUSH
19179: LD_EXP 58
19183: AND
19184: IFFALSE 19324
19186: GO 19188
19188: DISABLE
19189: LD_INT 0
19191: PPUSH
19192: PPUSH
// begin ToLua ( displayPowell(); ) ;
19193: LD_STRING displayPowell();
19195: PPUSH
19196: CALL_OW 559
// uc_side := 0 ;
19200: LD_ADDR_OWVAR 20
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// uc_nation := 2 ;
19208: LD_ADDR_OWVAR 21
19212: PUSH
19213: LD_INT 2
19215: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19216: LD_ADDR_OWVAR 37
19220: PUSH
19221: LD_INT 14
19223: ST_TO_ADDR
// vc_engine := engine_siberite ;
19224: LD_ADDR_OWVAR 39
19228: PUSH
19229: LD_INT 3
19231: ST_TO_ADDR
// vc_control := control_apeman ;
19232: LD_ADDR_OWVAR 38
19236: PUSH
19237: LD_INT 5
19239: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19240: LD_ADDR_OWVAR 40
19244: PUSH
19245: LD_INT 29
19247: ST_TO_ADDR
// un := CreateVehicle ;
19248: LD_ADDR_VAR 0 2
19252: PUSH
19253: CALL_OW 45
19257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19270: LD_INT 35
19272: PPUSH
19273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19277: LD_VAR 0 2
19281: PPUSH
19282: LD_INT 22
19284: PUSH
19285: LD_OWVAR 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PPUSH
19294: CALL_OW 69
19298: PPUSH
19299: LD_VAR 0 2
19303: PPUSH
19304: CALL_OW 74
19308: PPUSH
19309: CALL_OW 115
// until IsDead ( un ) ;
19313: LD_VAR 0 2
19317: PPUSH
19318: CALL_OW 301
19322: IFFALSE 19270
// end ;
19324: PPOPN 2
19326: END
// every 0 0$1 trigger StreamModeActive and sStu do
19327: LD_EXP 27
19331: PUSH
19332: LD_EXP 66
19336: AND
19337: IFFALSE 19353
19339: GO 19341
19341: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19342: LD_STRING displayStucuk();
19344: PPUSH
19345: CALL_OW 559
// ResetFog ;
19349: CALL_OW 335
// end ;
19353: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19354: LD_EXP 27
19358: PUSH
19359: LD_EXP 59
19363: AND
19364: IFFALSE 19505
19366: GO 19368
19368: DISABLE
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19373: LD_ADDR_VAR 0 2
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_OWVAR 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PPUSH
19404: CALL_OW 69
19408: ST_TO_ADDR
// if not tmp then
19409: LD_VAR 0 2
19413: NOT
19414: IFFALSE 19418
// exit ;
19416: GO 19505
// un := tmp [ rand ( 1 , tmp ) ] ;
19418: LD_ADDR_VAR 0 1
19422: PUSH
19423: LD_VAR 0 2
19427: PUSH
19428: LD_INT 1
19430: PPUSH
19431: LD_VAR 0 2
19435: PPUSH
19436: CALL_OW 12
19440: ARRAY
19441: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19442: LD_VAR 0 1
19446: PPUSH
19447: LD_INT 0
19449: PPUSH
19450: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_OWVAR 3
19463: PUSH
19464: LD_VAR 0 1
19468: DIFF
19469: PPUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL_OW 74
19479: PPUSH
19480: CALL_OW 115
// wait ( 0 0$20 ) ;
19484: LD_INT 700
19486: PPUSH
19487: CALL_OW 67
// SetSide ( un , your_side ) ;
19491: LD_VAR 0 1
19495: PPUSH
19496: LD_OWVAR 2
19500: PPUSH
19501: CALL_OW 235
// end ;
19505: PPOPN 2
19507: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19508: LD_EXP 27
19512: PUSH
19513: LD_EXP 60
19517: AND
19518: IFFALSE 19624
19520: GO 19522
19522: DISABLE
19523: LD_INT 0
19525: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_INT 22
19533: PUSH
19534: LD_OWVAR 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 30
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PPUSH
19575: CALL_OW 69
19579: ST_TO_ADDR
// if not depot then
19580: LD_VAR 0 1
19584: NOT
19585: IFFALSE 19589
// exit ;
19587: GO 19624
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19589: LD_VAR 0 1
19593: PUSH
19594: LD_INT 1
19596: ARRAY
19597: PPUSH
19598: CALL_OW 250
19602: PPUSH
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 1
19610: ARRAY
19611: PPUSH
19612: CALL_OW 251
19616: PPUSH
19617: LD_INT 70
19619: PPUSH
19620: CALL_OW 495
// end ;
19624: PPOPN 1
19626: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19627: LD_EXP 27
19631: PUSH
19632: LD_EXP 61
19636: AND
19637: IFFALSE 19848
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
19646: PPUSH
19647: PPUSH
19648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19649: LD_ADDR_VAR 0 5
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_OWVAR 2
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 21
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 69
19684: ST_TO_ADDR
// if not tmp then
19685: LD_VAR 0 5
19689: NOT
19690: IFFALSE 19694
// exit ;
19692: GO 19848
// for i in tmp do
19694: LD_ADDR_VAR 0 1
19698: PUSH
19699: LD_VAR 0 5
19703: PUSH
19704: FOR_IN
19705: IFFALSE 19846
// begin d := rand ( 0 , 5 ) ;
19707: LD_ADDR_VAR 0 4
19711: PUSH
19712: LD_INT 0
19714: PPUSH
19715: LD_INT 5
19717: PPUSH
19718: CALL_OW 12
19722: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 250
19737: PPUSH
19738: LD_VAR 0 4
19742: PPUSH
19743: LD_INT 3
19745: PPUSH
19746: LD_INT 12
19748: PPUSH
19749: CALL_OW 12
19753: PPUSH
19754: CALL_OW 272
19758: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_VAR 0 1
19768: PPUSH
19769: CALL_OW 251
19773: PPUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: LD_INT 3
19781: PPUSH
19782: LD_INT 12
19784: PPUSH
19785: CALL_OW 12
19789: PPUSH
19790: CALL_OW 273
19794: ST_TO_ADDR
// if ValidHex ( x , y ) then
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: CALL_OW 488
19809: IFFALSE 19844
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19811: LD_VAR 0 1
19815: PPUSH
19816: LD_VAR 0 2
19820: PPUSH
19821: LD_VAR 0 3
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: LD_INT 6
19831: PPUSH
19832: CALL_OW 12
19836: PPUSH
19837: LD_INT 1
19839: PPUSH
19840: CALL_OW 483
// end ;
19844: GO 19704
19846: POP
19847: POP
// end ;
19848: PPOPN 5
19850: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19851: LD_EXP 27
19855: PUSH
19856: LD_EXP 62
19860: AND
19861: IFFALSE 19955
19863: GO 19865
19865: DISABLE
19866: LD_INT 0
19868: PPUSH
19869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19870: LD_ADDR_VAR 0 2
19874: PUSH
19875: LD_INT 22
19877: PUSH
19878: LD_OWVAR 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 32
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 21
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 69
19916: ST_TO_ADDR
// if not tmp then
19917: LD_VAR 0 2
19921: NOT
19922: IFFALSE 19926
// exit ;
19924: GO 19955
// for i in tmp do
19926: LD_ADDR_VAR 0 1
19930: PUSH
19931: LD_VAR 0 2
19935: PUSH
19936: FOR_IN
19937: IFFALSE 19953
// SetFuel ( i , 0 ) ;
19939: LD_VAR 0 1
19943: PPUSH
19944: LD_INT 0
19946: PPUSH
19947: CALL_OW 240
19951: GO 19936
19953: POP
19954: POP
// end ;
19955: PPOPN 2
19957: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19958: LD_EXP 27
19962: PUSH
19963: LD_EXP 63
19967: AND
19968: IFFALSE 20034
19970: GO 19972
19972: DISABLE
19973: LD_INT 0
19975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19976: LD_ADDR_VAR 0 1
19980: PUSH
19981: LD_INT 22
19983: PUSH
19984: LD_OWVAR 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 30
19995: PUSH
19996: LD_INT 29
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 69
20011: ST_TO_ADDR
// if not tmp then
20012: LD_VAR 0 1
20016: NOT
20017: IFFALSE 20021
// exit ;
20019: GO 20034
// DestroyUnit ( tmp [ 1 ] ) ;
20021: LD_VAR 0 1
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PPUSH
20030: CALL_OW 65
// end ;
20034: PPOPN 1
20036: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20037: LD_EXP 27
20041: PUSH
20042: LD_EXP 65
20046: AND
20047: IFFALSE 20176
20049: GO 20051
20051: DISABLE
20052: LD_INT 0
20054: PPUSH
// begin uc_side := 0 ;
20055: LD_ADDR_OWVAR 20
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// uc_nation := nation_arabian ;
20063: LD_ADDR_OWVAR 21
20067: PUSH
20068: LD_INT 2
20070: ST_TO_ADDR
// hc_gallery :=  ;
20071: LD_ADDR_OWVAR 33
20075: PUSH
20076: LD_STRING 
20078: ST_TO_ADDR
// hc_name :=  ;
20079: LD_ADDR_OWVAR 26
20083: PUSH
20084: LD_STRING 
20086: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20087: LD_INT 1
20089: PPUSH
20090: LD_INT 11
20092: PPUSH
20093: LD_INT 10
20095: PPUSH
20096: CALL_OW 380
// un := CreateHuman ;
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: CALL_OW 44
20109: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20110: LD_VAR 0 1
20114: PPUSH
20115: LD_INT 1
20117: PPUSH
20118: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20122: LD_INT 35
20124: PPUSH
20125: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_INT 22
20136: PUSH
20137: LD_OWVAR 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PPUSH
20146: CALL_OW 69
20150: PPUSH
20151: LD_VAR 0 1
20155: PPUSH
20156: CALL_OW 74
20160: PPUSH
20161: CALL_OW 115
// until IsDead ( un ) ;
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 301
20174: IFFALSE 20122
// end ;
20176: PPOPN 1
20178: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20179: LD_EXP 27
20183: PUSH
20184: LD_EXP 67
20188: AND
20189: IFFALSE 20201
20191: GO 20193
20193: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20194: LD_STRING earthquake(getX(game), 0, 32)
20196: PPUSH
20197: CALL_OW 559
20201: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20202: LD_EXP 27
20206: PUSH
20207: LD_EXP 68
20211: AND
20212: IFFALSE 20303
20214: GO 20216
20216: DISABLE
20217: LD_INT 0
20219: PPUSH
// begin enable ;
20220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20221: LD_ADDR_VAR 0 1
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 33
20250: PUSH
20251: LD_INT 3
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 1
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20277: LD_VAR 0 1
20281: PUSH
20282: LD_INT 1
20284: PPUSH
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 12
20294: ARRAY
20295: PPUSH
20296: LD_INT 1
20298: PPUSH
20299: CALL_OW 234
// end ;
20303: PPOPN 1
20305: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20306: LD_EXP 27
20310: PUSH
20311: LD_EXP 69
20315: AND
20316: IFFALSE 20457
20318: GO 20320
20320: DISABLE
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 25
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: ST_TO_ADDR
// if not tmp then
20362: LD_VAR 0 3
20366: NOT
20367: IFFALSE 20371
// exit ;
20369: GO 20457
// un := tmp [ rand ( 1 , tmp ) ] ;
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: ST_TO_ADDR
// if Crawls ( un ) then
20395: LD_VAR 0 2
20399: PPUSH
20400: CALL_OW 318
20404: IFFALSE 20415
// ComWalk ( un ) ;
20406: LD_VAR 0 2
20410: PPUSH
20411: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20415: LD_VAR 0 2
20419: PPUSH
20420: LD_INT 9
20422: PPUSH
20423: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20427: LD_INT 28
20429: PPUSH
20430: LD_OWVAR 2
20434: PPUSH
20435: LD_INT 2
20437: PPUSH
20438: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20442: LD_INT 29
20444: PPUSH
20445: LD_OWVAR 2
20449: PPUSH
20450: LD_INT 2
20452: PPUSH
20453: CALL_OW 322
// end ;
20457: PPOPN 3
20459: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20460: LD_EXP 27
20464: PUSH
20465: LD_EXP 70
20469: AND
20470: IFFALSE 20581
20472: GO 20474
20474: DISABLE
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
20479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20480: LD_ADDR_VAR 0 3
20484: PUSH
20485: LD_INT 22
20487: PUSH
20488: LD_OWVAR 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 25
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PPUSH
20511: CALL_OW 69
20515: ST_TO_ADDR
// if not tmp then
20516: LD_VAR 0 3
20520: NOT
20521: IFFALSE 20525
// exit ;
20523: GO 20581
// un := tmp [ rand ( 1 , tmp ) ] ;
20525: LD_ADDR_VAR 0 2
20529: PUSH
20530: LD_VAR 0 3
20534: PUSH
20535: LD_INT 1
20537: PPUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: CALL_OW 12
20547: ARRAY
20548: ST_TO_ADDR
// if Crawls ( un ) then
20549: LD_VAR 0 2
20553: PPUSH
20554: CALL_OW 318
20558: IFFALSE 20569
// ComWalk ( un ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20569: LD_VAR 0 2
20573: PPUSH
20574: LD_INT 8
20576: PPUSH
20577: CALL_OW 336
// end ;
20581: PPOPN 3
20583: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20584: LD_EXP 27
20588: PUSH
20589: LD_EXP 71
20593: AND
20594: IFFALSE 20738
20596: GO 20598
20598: DISABLE
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_INT 22
20610: PUSH
20611: LD_OWVAR 2
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 21
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 34
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 34
20645: PUSH
20646: LD_INT 51
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 34
20655: PUSH
20656: LD_INT 32
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 69
20678: ST_TO_ADDR
// if not tmp then
20679: LD_VAR 0 2
20683: NOT
20684: IFFALSE 20688
// exit ;
20686: GO 20738
// for i in tmp do
20688: LD_ADDR_VAR 0 1
20692: PUSH
20693: LD_VAR 0 2
20697: PUSH
20698: FOR_IN
20699: IFFALSE 20736
// if GetCargo ( i , mat_artifact ) = 0 then
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_INT 4
20708: PPUSH
20709: CALL_OW 289
20713: PUSH
20714: LD_INT 0
20716: EQUAL
20717: IFFALSE 20734
// SetCargo ( i , mat_siberit , 100 ) ;
20719: LD_VAR 0 1
20723: PPUSH
20724: LD_INT 3
20726: PPUSH
20727: LD_INT 100
20729: PPUSH
20730: CALL_OW 290
20734: GO 20698
20736: POP
20737: POP
// end ;
20738: PPOPN 2
20740: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20741: LD_EXP 27
20745: PUSH
20746: LD_EXP 72
20750: AND
20751: IFFALSE 20934
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PPUSH
20777: CALL_OW 69
20781: ST_TO_ADDR
// if not tmp then
20782: LD_VAR 0 2
20786: NOT
20787: IFFALSE 20791
// exit ;
20789: GO 20934
// for i := 1 to 2 do
20791: LD_ADDR_VAR 0 1
20795: PUSH
20796: DOUBLE
20797: LD_INT 1
20799: DEC
20800: ST_TO_ADDR
20801: LD_INT 2
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20932
// begin uc_side := your_side ;
20807: LD_ADDR_OWVAR 20
20811: PUSH
20812: LD_OWVAR 2
20816: ST_TO_ADDR
// uc_nation := nation_american ;
20817: LD_ADDR_OWVAR 21
20821: PUSH
20822: LD_INT 1
20824: ST_TO_ADDR
// vc_chassis := us_morphling ;
20825: LD_ADDR_OWVAR 37
20829: PUSH
20830: LD_INT 5
20832: ST_TO_ADDR
// vc_engine := engine_siberite ;
20833: LD_ADDR_OWVAR 39
20837: PUSH
20838: LD_INT 3
20840: ST_TO_ADDR
// vc_control := control_computer ;
20841: LD_ADDR_OWVAR 38
20845: PUSH
20846: LD_INT 3
20848: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20849: LD_ADDR_OWVAR 40
20853: PUSH
20854: LD_INT 10
20856: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20857: LD_VAR 0 2
20861: PUSH
20862: LD_INT 1
20864: ARRAY
20865: PPUSH
20866: CALL_OW 310
20870: NOT
20871: IFFALSE 20918
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20873: CALL_OW 45
20877: PPUSH
20878: LD_VAR 0 2
20882: PUSH
20883: LD_INT 1
20885: ARRAY
20886: PPUSH
20887: CALL_OW 250
20891: PPUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_INT 1
20899: ARRAY
20900: PPUSH
20901: CALL_OW 251
20905: PPUSH
20906: LD_INT 12
20908: PPUSH
20909: LD_INT 1
20911: PPUSH
20912: CALL_OW 50
20916: GO 20930
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20918: CALL_OW 45
20922: PPUSH
20923: LD_INT 1
20925: PPUSH
20926: CALL_OW 51
// end ;
20930: GO 20804
20932: POP
20933: POP
// end ;
20934: PPOPN 2
20936: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20937: LD_EXP 27
20941: PUSH
20942: LD_EXP 73
20946: AND
20947: IFFALSE 21169
20949: GO 20951
20951: DISABLE
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20960: LD_ADDR_VAR 0 6
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_OWVAR 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: LD_INT 23
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: PPUSH
21009: CALL_OW 69
21013: ST_TO_ADDR
// if not tmp then
21014: LD_VAR 0 6
21018: NOT
21019: IFFALSE 21023
// exit ;
21021: GO 21169
// s1 := rand ( 1 , 4 ) ;
21023: LD_ADDR_VAR 0 2
21027: PUSH
21028: LD_INT 1
21030: PPUSH
21031: LD_INT 4
21033: PPUSH
21034: CALL_OW 12
21038: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21039: LD_ADDR_VAR 0 4
21043: PUSH
21044: LD_VAR 0 6
21048: PUSH
21049: LD_INT 1
21051: ARRAY
21052: PPUSH
21053: LD_VAR 0 2
21057: PPUSH
21058: CALL_OW 259
21062: ST_TO_ADDR
// if s1 = 1 then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 1
21070: EQUAL
21071: IFFALSE 21091
// s2 := rand ( 2 , 4 ) else
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 2
21080: PPUSH
21081: LD_INT 4
21083: PPUSH
21084: CALL_OW 12
21088: ST_TO_ADDR
21089: GO 21099
// s2 := 1 ;
21091: LD_ADDR_VAR 0 3
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: LD_VAR 0 6
21108: PUSH
21109: LD_INT 1
21111: ARRAY
21112: PPUSH
21113: LD_VAR 0 3
21117: PPUSH
21118: CALL_OW 259
21122: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21123: LD_VAR 0 6
21127: PUSH
21128: LD_INT 1
21130: ARRAY
21131: PPUSH
21132: LD_VAR 0 2
21136: PPUSH
21137: LD_VAR 0 5
21141: PPUSH
21142: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21146: LD_VAR 0 6
21150: PUSH
21151: LD_INT 1
21153: ARRAY
21154: PPUSH
21155: LD_VAR 0 3
21159: PPUSH
21160: LD_VAR 0 4
21164: PPUSH
21165: CALL_OW 237
// end ;
21169: PPOPN 6
21171: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21172: LD_EXP 27
21176: PUSH
21177: LD_EXP 74
21181: AND
21182: IFFALSE 21261
21184: GO 21186
21186: DISABLE
21187: LD_INT 0
21189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_OWVAR 2
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PPUSH
21221: CALL_OW 69
21225: ST_TO_ADDR
// if not tmp then
21226: LD_VAR 0 1
21230: NOT
21231: IFFALSE 21235
// exit ;
21233: GO 21261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21235: LD_VAR 0 1
21239: PUSH
21240: LD_INT 1
21242: PPUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: CALL_OW 12
21252: ARRAY
21253: PPUSH
21254: LD_INT 1
21256: PPUSH
21257: CALL_OW 234
// end ;
21261: PPOPN 1
21263: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21264: LD_EXP 27
21268: PUSH
21269: LD_EXP 75
21273: AND
21274: IFFALSE 21386
21276: GO 21278
21278: DISABLE
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21283: LD_ADDR_VAR 0 2
21287: PUSH
21288: LD_INT 22
21290: PUSH
21291: LD_OWVAR 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: LD_INT 30
21305: PUSH
21306: LD_INT 27
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 30
21315: PUSH
21316: LD_INT 26
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 30
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: ST_TO_ADDR
// if not tmp then
21348: LD_VAR 0 2
21352: NOT
21353: IFFALSE 21357
// exit ;
21355: GO 21386
// for i in tmp do
21357: LD_ADDR_VAR 0 1
21361: PUSH
21362: LD_VAR 0 2
21366: PUSH
21367: FOR_IN
21368: IFFALSE 21384
// SetLives ( i , 1 ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: LD_INT 1
21377: PPUSH
21378: CALL_OW 234
21382: GO 21367
21384: POP
21385: POP
// end ;
21386: PPOPN 2
21388: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21389: LD_EXP 27
21393: PUSH
21394: LD_EXP 76
21398: AND
21399: IFFALSE 21686
21401: GO 21403
21403: DISABLE
21404: LD_INT 0
21406: PPUSH
21407: PPUSH
21408: PPUSH
// begin i := rand ( 1 , 7 ) ;
21409: LD_ADDR_VAR 0 1
21413: PUSH
21414: LD_INT 1
21416: PPUSH
21417: LD_INT 7
21419: PPUSH
21420: CALL_OW 12
21424: ST_TO_ADDR
// case i of 1 :
21425: LD_VAR 0 1
21429: PUSH
21430: LD_INT 1
21432: DOUBLE
21433: EQUAL
21434: IFTRUE 21438
21436: GO 21448
21438: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21439: LD_STRING earthquake(getX(game), 0, 32)
21441: PPUSH
21442: CALL_OW 559
21446: GO 21686
21448: LD_INT 2
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21470
21456: POP
// begin ToLua ( displayStucuk(); ) ;
21457: LD_STRING displayStucuk();
21459: PPUSH
21460: CALL_OW 559
// ResetFog ;
21464: CALL_OW 335
// end ; 3 :
21468: GO 21686
21470: LD_INT 3
21472: DOUBLE
21473: EQUAL
21474: IFTRUE 21478
21476: GO 21582
21478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21479: LD_ADDR_VAR 0 2
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_OWVAR 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 25
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PPUSH
21510: CALL_OW 69
21514: ST_TO_ADDR
// if not tmp then
21515: LD_VAR 0 2
21519: NOT
21520: IFFALSE 21524
// exit ;
21522: GO 21686
// un := tmp [ rand ( 1 , tmp ) ] ;
21524: LD_ADDR_VAR 0 3
21528: PUSH
21529: LD_VAR 0 2
21533: PUSH
21534: LD_INT 1
21536: PPUSH
21537: LD_VAR 0 2
21541: PPUSH
21542: CALL_OW 12
21546: ARRAY
21547: ST_TO_ADDR
// if Crawls ( un ) then
21548: LD_VAR 0 3
21552: PPUSH
21553: CALL_OW 318
21557: IFFALSE 21568
// ComWalk ( un ) ;
21559: LD_VAR 0 3
21563: PPUSH
21564: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21568: LD_VAR 0 3
21572: PPUSH
21573: LD_INT 8
21575: PPUSH
21576: CALL_OW 336
// end ; 4 :
21580: GO 21686
21582: LD_INT 4
21584: DOUBLE
21585: EQUAL
21586: IFTRUE 21590
21588: GO 21664
21590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: LD_INT 22
21598: PUSH
21599: LD_OWVAR 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 30
21610: PUSH
21611: LD_INT 29
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PPUSH
21622: CALL_OW 69
21626: ST_TO_ADDR
// if not tmp then
21627: LD_VAR 0 2
21631: NOT
21632: IFFALSE 21636
// exit ;
21634: GO 21686
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21636: LD_VAR 0 2
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21649: LD_VAR 0 2
21653: PUSH
21654: LD_INT 1
21656: ARRAY
21657: PPUSH
21658: CALL_OW 65
// end ; 5 .. 7 :
21662: GO 21686
21664: LD_INT 5
21666: DOUBLE
21667: GREATEREQUAL
21668: IFFALSE 21676
21670: LD_INT 7
21672: DOUBLE
21673: LESSEQUAL
21674: IFTRUE 21678
21676: GO 21685
21678: POP
// StreamSibBomb ; end ;
21679: CALL 17923 0 0
21683: GO 21686
21685: POP
// end ;
21686: PPOPN 3
21688: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21689: LD_EXP 27
21693: PUSH
21694: LD_EXP 77
21698: AND
21699: IFFALSE 21855
21701: GO 21703
21703: DISABLE
21704: LD_INT 0
21706: PPUSH
21707: PPUSH
21708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21709: LD_ADDR_VAR 0 2
21713: PUSH
21714: LD_INT 81
21716: PUSH
21717: LD_OWVAR 2
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 21
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 69
21762: ST_TO_ADDR
// if not tmp then
21763: LD_VAR 0 2
21767: NOT
21768: IFFALSE 21772
// exit ;
21770: GO 21855
// p := 0 ;
21772: LD_ADDR_VAR 0 3
21776: PUSH
21777: LD_INT 0
21779: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21780: LD_INT 35
21782: PPUSH
21783: CALL_OW 67
// p := p + 1 ;
21787: LD_ADDR_VAR 0 3
21791: PUSH
21792: LD_VAR 0 3
21796: PUSH
21797: LD_INT 1
21799: PLUS
21800: ST_TO_ADDR
// for i in tmp do
21801: LD_ADDR_VAR 0 1
21805: PUSH
21806: LD_VAR 0 2
21810: PUSH
21811: FOR_IN
21812: IFFALSE 21843
// if GetLives ( i ) < 1000 then
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 256
21823: PUSH
21824: LD_INT 1000
21826: LESS
21827: IFFALSE 21841
// SetLives ( i , 1000 ) ;
21829: LD_VAR 0 1
21833: PPUSH
21834: LD_INT 1000
21836: PPUSH
21837: CALL_OW 234
21841: GO 21811
21843: POP
21844: POP
// until p > 20 ;
21845: LD_VAR 0 3
21849: PUSH
21850: LD_INT 20
21852: GREATER
21853: IFFALSE 21780
// end ;
21855: PPOPN 3
21857: END
// every 0 0$1 trigger StreamModeActive and sTime do
21858: LD_EXP 27
21862: PUSH
21863: LD_EXP 78
21867: AND
21868: IFFALSE 21903
21870: GO 21872
21872: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21873: LD_INT 28
21875: PPUSH
21876: LD_OWVAR 2
21880: PPUSH
21881: LD_INT 2
21883: PPUSH
21884: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21888: LD_INT 30
21890: PPUSH
21891: LD_OWVAR 2
21895: PPUSH
21896: LD_INT 2
21898: PPUSH
21899: CALL_OW 322
// end ;
21903: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21904: LD_EXP 27
21908: PUSH
21909: LD_EXP 79
21913: AND
21914: IFFALSE 22035
21916: GO 21918
21918: DISABLE
21919: LD_INT 0
21921: PPUSH
21922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21923: LD_ADDR_VAR 0 2
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_OWVAR 2
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 21
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 23
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: ST_TO_ADDR
// if not tmp then
21977: LD_VAR 0 2
21981: NOT
21982: IFFALSE 21986
// exit ;
21984: GO 22035
// for i in tmp do
21986: LD_ADDR_VAR 0 1
21990: PUSH
21991: LD_VAR 0 2
21995: PUSH
21996: FOR_IN
21997: IFFALSE 22033
// begin if Crawls ( i ) then
21999: LD_VAR 0 1
22003: PPUSH
22004: CALL_OW 318
22008: IFFALSE 22019
// ComWalk ( i ) ;
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 138
// SetClass ( i , 2 ) ;
22019: LD_VAR 0 1
22023: PPUSH
22024: LD_INT 2
22026: PPUSH
22027: CALL_OW 336
// end ;
22031: GO 21996
22033: POP
22034: POP
// end ;
22035: PPOPN 2
22037: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22038: LD_EXP 27
22042: PUSH
22043: LD_EXP 80
22047: AND
22048: IFFALSE 22336
22050: GO 22052
22052: DISABLE
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
22057: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22058: LD_OWVAR 2
22062: PPUSH
22063: LD_INT 9
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22076: LD_INT 9
22078: PPUSH
22079: LD_OWVAR 2
22083: PPUSH
22084: CALL_OW 343
// uc_side := 9 ;
22088: LD_ADDR_OWVAR 20
22092: PUSH
22093: LD_INT 9
22095: ST_TO_ADDR
// uc_nation := 2 ;
22096: LD_ADDR_OWVAR 21
22100: PUSH
22101: LD_INT 2
22103: ST_TO_ADDR
// hc_name := Dark Warrior ;
22104: LD_ADDR_OWVAR 26
22108: PUSH
22109: LD_STRING Dark Warrior
22111: ST_TO_ADDR
// hc_gallery :=  ;
22112: LD_ADDR_OWVAR 33
22116: PUSH
22117: LD_STRING 
22119: ST_TO_ADDR
// hc_noskilllimit := true ;
22120: LD_ADDR_OWVAR 76
22124: PUSH
22125: LD_INT 1
22127: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22128: LD_ADDR_OWVAR 31
22132: PUSH
22133: LD_INT 30
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 30
22141: PUSH
22142: LD_INT 30
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// un := CreateHuman ;
22151: LD_ADDR_VAR 0 3
22155: PUSH
22156: CALL_OW 44
22160: ST_TO_ADDR
// hc_noskilllimit := false ;
22161: LD_ADDR_OWVAR 76
22165: PUSH
22166: LD_INT 0
22168: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22169: LD_VAR 0 3
22173: PPUSH
22174: LD_INT 1
22176: PPUSH
22177: CALL_OW 51
// ToLua ( playRanger() ) ;
22181: LD_STRING playRanger()
22183: PPUSH
22184: CALL_OW 559
// p := 0 ;
22188: LD_ADDR_VAR 0 2
22192: PUSH
22193: LD_INT 0
22195: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22196: LD_INT 35
22198: PPUSH
22199: CALL_OW 67
// p := p + 1 ;
22203: LD_ADDR_VAR 0 2
22207: PUSH
22208: LD_VAR 0 2
22212: PUSH
22213: LD_INT 1
22215: PLUS
22216: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22217: LD_VAR 0 3
22221: PPUSH
22222: CALL_OW 256
22226: PUSH
22227: LD_INT 1000
22229: LESS
22230: IFFALSE 22244
// SetLives ( un , 1000 ) ;
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 1000
22239: PPUSH
22240: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22244: LD_VAR 0 3
22248: PPUSH
22249: LD_INT 81
22251: PUSH
22252: LD_OWVAR 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 91
22263: PUSH
22264: LD_VAR 0 3
22268: PUSH
22269: LD_INT 30
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 69
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: CALL_OW 74
22295: PPUSH
22296: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22300: LD_VAR 0 2
22304: PUSH
22305: LD_INT 80
22307: GREATER
22308: PUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: CALL_OW 301
22318: OR
22319: IFFALSE 22196
// if un then
22321: LD_VAR 0 3
22325: IFFALSE 22336
// RemoveUnit ( un ) ;
22327: LD_VAR 0 3
22331: PPUSH
22332: CALL_OW 64
// end ;
22336: PPOPN 3
22338: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22339: LD_EXP 81
22343: IFFALSE 22459
22345: GO 22347
22347: DISABLE
22348: LD_INT 0
22350: PPUSH
22351: PPUSH
22352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 81
22360: PUSH
22361: LD_OWVAR 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PPUSH
22384: CALL_OW 69
22388: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22389: LD_STRING playComputer()
22391: PPUSH
22392: CALL_OW 559
// if not tmp then
22396: LD_VAR 0 2
22400: NOT
22401: IFFALSE 22405
// exit ;
22403: GO 22459
// for i in tmp do
22405: LD_ADDR_VAR 0 1
22409: PUSH
22410: LD_VAR 0 2
22414: PUSH
22415: FOR_IN
22416: IFFALSE 22457
// for j := 1 to 4 do
22418: LD_ADDR_VAR 0 3
22422: PUSH
22423: DOUBLE
22424: LD_INT 1
22426: DEC
22427: ST_TO_ADDR
22428: LD_INT 4
22430: PUSH
22431: FOR_TO
22432: IFFALSE 22453
// SetSkill ( i , j , 10 ) ;
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_VAR 0 3
22443: PPUSH
22444: LD_INT 10
22446: PPUSH
22447: CALL_OW 237
22451: GO 22431
22453: POP
22454: POP
22455: GO 22415
22457: POP
22458: POP
// end ;
22459: PPOPN 3
22461: END
// every 0 0$1 trigger s30 do var i , tmp ;
22462: LD_EXP 82
22466: IFFALSE 22535
22468: GO 22470
22470: DISABLE
22471: LD_INT 0
22473: PPUSH
22474: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22475: LD_ADDR_VAR 0 2
22479: PUSH
22480: LD_INT 22
22482: PUSH
22483: LD_OWVAR 2
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: ST_TO_ADDR
// if not tmp then
22497: LD_VAR 0 2
22501: NOT
22502: IFFALSE 22506
// exit ;
22504: GO 22535
// for i in tmp do
22506: LD_ADDR_VAR 0 1
22510: PUSH
22511: LD_VAR 0 2
22515: PUSH
22516: FOR_IN
22517: IFFALSE 22533
// SetLives ( i , 300 ) ;
22519: LD_VAR 0 1
22523: PPUSH
22524: LD_INT 300
22526: PPUSH
22527: CALL_OW 234
22531: GO 22516
22533: POP
22534: POP
// end ;
22535: PPOPN 2
22537: END
// every 0 0$1 trigger s60 do var i , tmp ;
22538: LD_EXP 83
22542: IFFALSE 22611
22544: GO 22546
22546: DISABLE
22547: LD_INT 0
22549: PPUSH
22550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 22
22558: PUSH
22559: LD_OWVAR 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: ST_TO_ADDR
// if not tmp then
22573: LD_VAR 0 2
22577: NOT
22578: IFFALSE 22582
// exit ;
22580: GO 22611
// for i in tmp do
22582: LD_ADDR_VAR 0 1
22586: PUSH
22587: LD_VAR 0 2
22591: PUSH
22592: FOR_IN
22593: IFFALSE 22609
// SetLives ( i , 600 ) ;
22595: LD_VAR 0 1
22599: PPUSH
22600: LD_INT 600
22602: PPUSH
22603: CALL_OW 234
22607: GO 22592
22609: POP
22610: POP
// end ;
22611: PPOPN 2
22613: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22614: LD_INT 0
22616: PPUSH
// case cmd of 301 :
22617: LD_VAR 0 1
22621: PUSH
22622: LD_INT 301
22624: DOUBLE
22625: EQUAL
22626: IFTRUE 22630
22628: GO 22662
22630: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22631: LD_VAR 0 6
22635: PPUSH
22636: LD_VAR 0 7
22640: PPUSH
22641: LD_VAR 0 8
22645: PPUSH
22646: LD_VAR 0 4
22650: PPUSH
22651: LD_VAR 0 5
22655: PPUSH
22656: CALL 23871 0 5
22660: GO 22783
22662: LD_INT 302
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22707
22670: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22671: LD_VAR 0 6
22675: PPUSH
22676: LD_VAR 0 7
22680: PPUSH
22681: LD_VAR 0 8
22685: PPUSH
22686: LD_VAR 0 9
22690: PPUSH
22691: LD_VAR 0 4
22695: PPUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: CALL 23962 0 6
22705: GO 22783
22707: LD_INT 303
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22752
22715: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22716: LD_VAR 0 6
22720: PPUSH
22721: LD_VAR 0 7
22725: PPUSH
22726: LD_VAR 0 8
22730: PPUSH
22731: LD_VAR 0 9
22735: PPUSH
22736: LD_VAR 0 4
22740: PPUSH
22741: LD_VAR 0 5
22745: PPUSH
22746: CALL 22788 0 6
22750: GO 22783
22752: LD_INT 304
22754: DOUBLE
22755: EQUAL
22756: IFTRUE 22760
22758: GO 22782
22760: POP
// hHackTeleport ( unit , x , y ) ; end ;
22761: LD_VAR 0 2
22765: PPUSH
22766: LD_VAR 0 4
22770: PPUSH
22771: LD_VAR 0 5
22775: PPUSH
22776: CALL 24555 0 3
22780: GO 22783
22782: POP
// end ;
22783: LD_VAR 0 12
22787: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22792: LD_VAR 0 1
22796: PUSH
22797: LD_INT 1
22799: LESS
22800: PUSH
22801: LD_VAR 0 1
22805: PUSH
22806: LD_INT 3
22808: GREATER
22809: OR
22810: PUSH
22811: LD_VAR 0 5
22815: PPUSH
22816: LD_VAR 0 6
22820: PPUSH
22821: CALL_OW 428
22825: OR
22826: IFFALSE 22830
// exit ;
22828: GO 23558
// uc_side := your_side ;
22830: LD_ADDR_OWVAR 20
22834: PUSH
22835: LD_OWVAR 2
22839: ST_TO_ADDR
// uc_nation := nation ;
22840: LD_ADDR_OWVAR 21
22844: PUSH
22845: LD_VAR 0 1
22849: ST_TO_ADDR
// bc_level = 1 ;
22850: LD_ADDR_OWVAR 43
22854: PUSH
22855: LD_INT 1
22857: ST_TO_ADDR
// case btype of 1 :
22858: LD_VAR 0 2
22862: PUSH
22863: LD_INT 1
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 22882
22871: POP
// bc_type := b_depot ; 2 :
22872: LD_ADDR_OWVAR 42
22876: PUSH
22877: LD_INT 0
22879: ST_TO_ADDR
22880: GO 23502
22882: LD_INT 2
22884: DOUBLE
22885: EQUAL
22886: IFTRUE 22890
22888: GO 22901
22890: POP
// bc_type := b_warehouse ; 3 :
22891: LD_ADDR_OWVAR 42
22895: PUSH
22896: LD_INT 1
22898: ST_TO_ADDR
22899: GO 23502
22901: LD_INT 3
22903: DOUBLE
22904: EQUAL
22905: IFTRUE 22909
22907: GO 22920
22909: POP
// bc_type := b_lab ; 4 .. 9 :
22910: LD_ADDR_OWVAR 42
22914: PUSH
22915: LD_INT 6
22917: ST_TO_ADDR
22918: GO 23502
22920: LD_INT 4
22922: DOUBLE
22923: GREATEREQUAL
22924: IFFALSE 22932
22926: LD_INT 9
22928: DOUBLE
22929: LESSEQUAL
22930: IFTRUE 22934
22932: GO 22994
22934: POP
// begin bc_type := b_lab_half ;
22935: LD_ADDR_OWVAR 42
22939: PUSH
22940: LD_INT 7
22942: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22943: LD_ADDR_OWVAR 44
22947: PUSH
22948: LD_INT 10
22950: PUSH
22951: LD_INT 11
22953: PUSH
22954: LD_INT 12
22956: PUSH
22957: LD_INT 15
22959: PUSH
22960: LD_INT 14
22962: PUSH
22963: LD_INT 13
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_VAR 0 2
22978: PUSH
22979: LD_INT 3
22981: MINUS
22982: ARRAY
22983: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22984: LD_ADDR_OWVAR 45
22988: PUSH
22989: LD_INT 9
22991: ST_TO_ADDR
// end ; 10 .. 13 :
22992: GO 23502
22994: LD_INT 10
22996: DOUBLE
22997: GREATEREQUAL
22998: IFFALSE 23006
23000: LD_INT 13
23002: DOUBLE
23003: LESSEQUAL
23004: IFTRUE 23008
23006: GO 23085
23008: POP
// begin bc_type := b_lab_full ;
23009: LD_ADDR_OWVAR 42
23013: PUSH
23014: LD_INT 8
23016: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23017: LD_ADDR_OWVAR 44
23021: PUSH
23022: LD_INT 10
23024: PUSH
23025: LD_INT 12
23027: PUSH
23028: LD_INT 14
23030: PUSH
23031: LD_INT 13
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: PUSH
23040: LD_VAR 0 2
23044: PUSH
23045: LD_INT 9
23047: MINUS
23048: ARRAY
23049: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23050: LD_ADDR_OWVAR 45
23054: PUSH
23055: LD_INT 11
23057: PUSH
23058: LD_INT 15
23060: PUSH
23061: LD_INT 12
23063: PUSH
23064: LD_INT 15
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: PUSH
23073: LD_VAR 0 2
23077: PUSH
23078: LD_INT 9
23080: MINUS
23081: ARRAY
23082: ST_TO_ADDR
// end ; 14 :
23083: GO 23502
23085: LD_INT 14
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23104
23093: POP
// bc_type := b_workshop ; 15 :
23094: LD_ADDR_OWVAR 42
23098: PUSH
23099: LD_INT 2
23101: ST_TO_ADDR
23102: GO 23502
23104: LD_INT 15
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23123
23112: POP
// bc_type := b_factory ; 16 :
23113: LD_ADDR_OWVAR 42
23117: PUSH
23118: LD_INT 3
23120: ST_TO_ADDR
23121: GO 23502
23123: LD_INT 16
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23142
23131: POP
// bc_type := b_ext_gun ; 17 :
23132: LD_ADDR_OWVAR 42
23136: PUSH
23137: LD_INT 17
23139: ST_TO_ADDR
23140: GO 23502
23142: LD_INT 17
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23178
23150: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23151: LD_ADDR_OWVAR 42
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 23
23161: PUSH
23162: LD_INT 19
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: PUSH
23170: LD_VAR 0 1
23174: ARRAY
23175: ST_TO_ADDR
23176: GO 23502
23178: LD_INT 18
23180: DOUBLE
23181: EQUAL
23182: IFTRUE 23186
23184: GO 23197
23186: POP
// bc_type := b_ext_radar ; 19 :
23187: LD_ADDR_OWVAR 42
23191: PUSH
23192: LD_INT 20
23194: ST_TO_ADDR
23195: GO 23502
23197: LD_INT 19
23199: DOUBLE
23200: EQUAL
23201: IFTRUE 23205
23203: GO 23216
23205: POP
// bc_type := b_ext_radio ; 20 :
23206: LD_ADDR_OWVAR 42
23210: PUSH
23211: LD_INT 22
23213: ST_TO_ADDR
23214: GO 23502
23216: LD_INT 20
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23235
23224: POP
// bc_type := b_ext_siberium ; 21 :
23225: LD_ADDR_OWVAR 42
23229: PUSH
23230: LD_INT 21
23232: ST_TO_ADDR
23233: GO 23502
23235: LD_INT 21
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23254
23243: POP
// bc_type := b_ext_computer ; 22 :
23244: LD_ADDR_OWVAR 42
23248: PUSH
23249: LD_INT 24
23251: ST_TO_ADDR
23252: GO 23502
23254: LD_INT 22
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23273
23262: POP
// bc_type := b_ext_track ; 23 :
23263: LD_ADDR_OWVAR 42
23267: PUSH
23268: LD_INT 16
23270: ST_TO_ADDR
23271: GO 23502
23273: LD_INT 23
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23292
23281: POP
// bc_type := b_ext_laser ; 24 :
23282: LD_ADDR_OWVAR 42
23286: PUSH
23287: LD_INT 25
23289: ST_TO_ADDR
23290: GO 23502
23292: LD_INT 24
23294: DOUBLE
23295: EQUAL
23296: IFTRUE 23300
23298: GO 23311
23300: POP
// bc_type := b_control_tower ; 25 :
23301: LD_ADDR_OWVAR 42
23305: PUSH
23306: LD_INT 36
23308: ST_TO_ADDR
23309: GO 23502
23311: LD_INT 25
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23330
23319: POP
// bc_type := b_breastwork ; 26 :
23320: LD_ADDR_OWVAR 42
23324: PUSH
23325: LD_INT 31
23327: ST_TO_ADDR
23328: GO 23502
23330: LD_INT 26
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23338
23336: GO 23349
23338: POP
// bc_type := b_bunker ; 27 :
23339: LD_ADDR_OWVAR 42
23343: PUSH
23344: LD_INT 32
23346: ST_TO_ADDR
23347: GO 23502
23349: LD_INT 27
23351: DOUBLE
23352: EQUAL
23353: IFTRUE 23357
23355: GO 23368
23357: POP
// bc_type := b_turret ; 28 :
23358: LD_ADDR_OWVAR 42
23362: PUSH
23363: LD_INT 33
23365: ST_TO_ADDR
23366: GO 23502
23368: LD_INT 28
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23387
23376: POP
// bc_type := b_armoury ; 29 :
23377: LD_ADDR_OWVAR 42
23381: PUSH
23382: LD_INT 4
23384: ST_TO_ADDR
23385: GO 23502
23387: LD_INT 29
23389: DOUBLE
23390: EQUAL
23391: IFTRUE 23395
23393: GO 23406
23395: POP
// bc_type := b_barracks ; 30 :
23396: LD_ADDR_OWVAR 42
23400: PUSH
23401: LD_INT 5
23403: ST_TO_ADDR
23404: GO 23502
23406: LD_INT 30
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23425
23414: POP
// bc_type := b_solar_power ; 31 :
23415: LD_ADDR_OWVAR 42
23419: PUSH
23420: LD_INT 27
23422: ST_TO_ADDR
23423: GO 23502
23425: LD_INT 31
23427: DOUBLE
23428: EQUAL
23429: IFTRUE 23433
23431: GO 23444
23433: POP
// bc_type := b_oil_power ; 32 :
23434: LD_ADDR_OWVAR 42
23438: PUSH
23439: LD_INT 26
23441: ST_TO_ADDR
23442: GO 23502
23444: LD_INT 32
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23463
23452: POP
// bc_type := b_siberite_power ; 33 :
23453: LD_ADDR_OWVAR 42
23457: PUSH
23458: LD_INT 28
23460: ST_TO_ADDR
23461: GO 23502
23463: LD_INT 33
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23482
23471: POP
// bc_type := b_oil_mine ; 34 :
23472: LD_ADDR_OWVAR 42
23476: PUSH
23477: LD_INT 29
23479: ST_TO_ADDR
23480: GO 23502
23482: LD_INT 34
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23501
23490: POP
// bc_type := b_siberite_mine ; end ;
23491: LD_ADDR_OWVAR 42
23495: PUSH
23496: LD_INT 30
23498: ST_TO_ADDR
23499: GO 23502
23501: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23502: LD_ADDR_VAR 0 8
23506: PUSH
23507: LD_VAR 0 5
23511: PPUSH
23512: LD_VAR 0 6
23516: PPUSH
23517: LD_VAR 0 3
23521: PPUSH
23522: CALL_OW 47
23526: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23527: LD_OWVAR 42
23531: PUSH
23532: LD_INT 32
23534: PUSH
23535: LD_INT 33
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: IN
23542: IFFALSE 23558
// PlaceWeaponTurret ( b , weapon ) ;
23544: LD_VAR 0 8
23548: PPUSH
23549: LD_VAR 0 4
23553: PPUSH
23554: CALL_OW 431
// end ;
23558: LD_VAR 0 7
23562: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23563: LD_INT 0
23565: PPUSH
23566: PPUSH
23567: PPUSH
23568: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_OWVAR 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 30
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 30
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PPUSH
23618: CALL_OW 69
23622: ST_TO_ADDR
// if not tmp then
23623: LD_VAR 0 4
23627: NOT
23628: IFFALSE 23632
// exit ;
23630: GO 23691
// for i in tmp do
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_VAR 0 4
23641: PUSH
23642: FOR_IN
23643: IFFALSE 23689
// for j = 1 to 3 do
23645: LD_ADDR_VAR 0 3
23649: PUSH
23650: DOUBLE
23651: LD_INT 1
23653: DEC
23654: ST_TO_ADDR
23655: LD_INT 3
23657: PUSH
23658: FOR_TO
23659: IFFALSE 23685
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23661: LD_VAR 0 2
23665: PPUSH
23666: CALL_OW 274
23670: PPUSH
23671: LD_VAR 0 3
23675: PPUSH
23676: LD_INT 99999
23678: PPUSH
23679: CALL_OW 277
23683: GO 23658
23685: POP
23686: POP
23687: GO 23642
23689: POP
23690: POP
// end ;
23691: LD_VAR 0 1
23695: RET
// export function hHackSetLevel10 ; var i , j ; begin
23696: LD_INT 0
23698: PPUSH
23699: PPUSH
23700: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23701: LD_ADDR_VAR 0 2
23705: PUSH
23706: LD_INT 21
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PPUSH
23716: CALL_OW 69
23720: PUSH
23721: FOR_IN
23722: IFFALSE 23774
// if IsSelected ( i ) then
23724: LD_VAR 0 2
23728: PPUSH
23729: CALL_OW 306
23733: IFFALSE 23772
// begin for j := 1 to 4 do
23735: LD_ADDR_VAR 0 3
23739: PUSH
23740: DOUBLE
23741: LD_INT 1
23743: DEC
23744: ST_TO_ADDR
23745: LD_INT 4
23747: PUSH
23748: FOR_TO
23749: IFFALSE 23770
// SetSkill ( i , j , 10 ) ;
23751: LD_VAR 0 2
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 10
23763: PPUSH
23764: CALL_OW 237
23768: GO 23748
23770: POP
23771: POP
// end ;
23772: GO 23721
23774: POP
23775: POP
// end ;
23776: LD_VAR 0 1
23780: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23781: LD_INT 0
23783: PPUSH
23784: PPUSH
23785: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23786: LD_ADDR_VAR 0 2
23790: PUSH
23791: LD_INT 22
23793: PUSH
23794: LD_OWVAR 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 21
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: PUSH
23822: FOR_IN
23823: IFFALSE 23864
// begin for j := 1 to 4 do
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: DOUBLE
23831: LD_INT 1
23833: DEC
23834: ST_TO_ADDR
23835: LD_INT 4
23837: PUSH
23838: FOR_TO
23839: IFFALSE 23860
// SetSkill ( i , j , 10 ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: LD_INT 10
23853: PPUSH
23854: CALL_OW 237
23858: GO 23838
23860: POP
23861: POP
// end ;
23862: GO 23822
23864: POP
23865: POP
// end ;
23866: LD_VAR 0 1
23870: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23871: LD_INT 0
23873: PPUSH
// uc_side := your_side ;
23874: LD_ADDR_OWVAR 20
23878: PUSH
23879: LD_OWVAR 2
23883: ST_TO_ADDR
// uc_nation := nation ;
23884: LD_ADDR_OWVAR 21
23888: PUSH
23889: LD_VAR 0 1
23893: ST_TO_ADDR
// InitHc ;
23894: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23898: LD_INT 0
23900: PPUSH
23901: LD_VAR 0 2
23905: PPUSH
23906: LD_VAR 0 3
23910: PPUSH
23911: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23915: LD_VAR 0 4
23919: PPUSH
23920: LD_VAR 0 5
23924: PPUSH
23925: CALL_OW 428
23929: PUSH
23930: LD_INT 0
23932: EQUAL
23933: IFFALSE 23957
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23935: CALL_OW 44
23939: PPUSH
23940: LD_VAR 0 4
23944: PPUSH
23945: LD_VAR 0 5
23949: PPUSH
23950: LD_INT 1
23952: PPUSH
23953: CALL_OW 48
// end ;
23957: LD_VAR 0 6
23961: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23962: LD_INT 0
23964: PPUSH
23965: PPUSH
// uc_side := your_side ;
23966: LD_ADDR_OWVAR 20
23970: PUSH
23971: LD_OWVAR 2
23975: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23976: LD_VAR 0 1
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: LD_INT 4
23992: PUSH
23993: LD_INT 5
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: IN
24003: IFFALSE 24015
// uc_nation := nation_american else
24005: LD_ADDR_OWVAR 21
24009: PUSH
24010: LD_INT 1
24012: ST_TO_ADDR
24013: GO 24058
// if chassis in [ 11 , 12 , 13 , 14 ] then
24015: LD_VAR 0 1
24019: PUSH
24020: LD_INT 11
24022: PUSH
24023: LD_INT 12
24025: PUSH
24026: LD_INT 13
24028: PUSH
24029: LD_INT 14
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: IN
24038: IFFALSE 24050
// uc_nation := nation_arabian else
24040: LD_ADDR_OWVAR 21
24044: PUSH
24045: LD_INT 2
24047: ST_TO_ADDR
24048: GO 24058
// uc_nation := nation_russian ;
24050: LD_ADDR_OWVAR 21
24054: PUSH
24055: LD_INT 3
24057: ST_TO_ADDR
// vc_chassis := chassis ;
24058: LD_ADDR_OWVAR 37
24062: PUSH
24063: LD_VAR 0 1
24067: ST_TO_ADDR
// vc_engine := engine ;
24068: LD_ADDR_OWVAR 39
24072: PUSH
24073: LD_VAR 0 2
24077: ST_TO_ADDR
// vc_control := control ;
24078: LD_ADDR_OWVAR 38
24082: PUSH
24083: LD_VAR 0 3
24087: ST_TO_ADDR
// vc_weapon := weapon ;
24088: LD_ADDR_OWVAR 40
24092: PUSH
24093: LD_VAR 0 4
24097: ST_TO_ADDR
// un := CreateVehicle ;
24098: LD_ADDR_VAR 0 8
24102: PUSH
24103: CALL_OW 45
24107: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24108: LD_VAR 0 8
24112: PPUSH
24113: LD_INT 0
24115: PPUSH
24116: LD_INT 5
24118: PPUSH
24119: CALL_OW 12
24123: PPUSH
24124: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24128: LD_VAR 0 8
24132: PPUSH
24133: LD_VAR 0 5
24137: PPUSH
24138: LD_VAR 0 6
24142: PPUSH
24143: LD_INT 1
24145: PPUSH
24146: CALL_OW 48
// end ;
24150: LD_VAR 0 7
24154: RET
// export hInvincible ; every 1 do
24155: GO 24157
24157: DISABLE
// hInvincible := [ ] ;
24158: LD_ADDR_EXP 84
24162: PUSH
24163: EMPTY
24164: ST_TO_ADDR
24165: END
// every 10 do var i ;
24166: GO 24168
24168: DISABLE
24169: LD_INT 0
24171: PPUSH
// begin enable ;
24172: ENABLE
// if not hInvincible then
24173: LD_EXP 84
24177: NOT
24178: IFFALSE 24182
// exit ;
24180: GO 24226
// for i in hInvincible do
24182: LD_ADDR_VAR 0 1
24186: PUSH
24187: LD_EXP 84
24191: PUSH
24192: FOR_IN
24193: IFFALSE 24224
// if GetLives ( i ) < 1000 then
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 256
24204: PUSH
24205: LD_INT 1000
24207: LESS
24208: IFFALSE 24222
// SetLives ( i , 1000 ) ;
24210: LD_VAR 0 1
24214: PPUSH
24215: LD_INT 1000
24217: PPUSH
24218: CALL_OW 234
24222: GO 24192
24224: POP
24225: POP
// end ;
24226: PPOPN 1
24228: END
// export function hHackInvincible ; var i ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24233: LD_ADDR_VAR 0 2
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 21
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 21
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PUSH
24271: FOR_IN
24272: IFFALSE 24333
// if IsSelected ( i ) then
24274: LD_VAR 0 2
24278: PPUSH
24279: CALL_OW 306
24283: IFFALSE 24331
// begin if i in hInvincible then
24285: LD_VAR 0 2
24289: PUSH
24290: LD_EXP 84
24294: IN
24295: IFFALSE 24315
// hInvincible := hInvincible diff i else
24297: LD_ADDR_EXP 84
24301: PUSH
24302: LD_EXP 84
24306: PUSH
24307: LD_VAR 0 2
24311: DIFF
24312: ST_TO_ADDR
24313: GO 24331
// hInvincible := hInvincible union i ;
24315: LD_ADDR_EXP 84
24319: PUSH
24320: LD_EXP 84
24324: PUSH
24325: LD_VAR 0 2
24329: UNION
24330: ST_TO_ADDR
// end ;
24331: GO 24271
24333: POP
24334: POP
// end ;
24335: LD_VAR 0 1
24339: RET
// export function hHackInvisible ; var i , j ; begin
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
24344: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_INT 21
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PPUSH
24360: CALL_OW 69
24364: PUSH
24365: FOR_IN
24366: IFFALSE 24390
// if IsSelected ( i ) then
24368: LD_VAR 0 2
24372: PPUSH
24373: CALL_OW 306
24377: IFFALSE 24388
// ComForceInvisible ( i ) ;
24379: LD_VAR 0 2
24383: PPUSH
24384: CALL_OW 496
24388: GO 24365
24390: POP
24391: POP
// end ;
24392: LD_VAR 0 1
24396: RET
// export function hHackChangeYourSide ; begin
24397: LD_INT 0
24399: PPUSH
// if your_side = 8 then
24400: LD_OWVAR 2
24404: PUSH
24405: LD_INT 8
24407: EQUAL
24408: IFFALSE 24420
// your_side := 0 else
24410: LD_ADDR_OWVAR 2
24414: PUSH
24415: LD_INT 0
24417: ST_TO_ADDR
24418: GO 24434
// your_side := your_side + 1 ;
24420: LD_ADDR_OWVAR 2
24424: PUSH
24425: LD_OWVAR 2
24429: PUSH
24430: LD_INT 1
24432: PLUS
24433: ST_TO_ADDR
// end ;
24434: LD_VAR 0 1
24438: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24439: LD_INT 0
24441: PPUSH
24442: PPUSH
24443: PPUSH
// for i in all_units do
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_OWVAR 3
24453: PUSH
24454: FOR_IN
24455: IFFALSE 24533
// if IsSelected ( i ) then
24457: LD_VAR 0 2
24461: PPUSH
24462: CALL_OW 306
24466: IFFALSE 24531
// begin j := GetSide ( i ) ;
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_VAR 0 2
24477: PPUSH
24478: CALL_OW 255
24482: ST_TO_ADDR
// if j = 8 then
24483: LD_VAR 0 3
24487: PUSH
24488: LD_INT 8
24490: EQUAL
24491: IFFALSE 24503
// j := 0 else
24493: LD_ADDR_VAR 0 3
24497: PUSH
24498: LD_INT 0
24500: ST_TO_ADDR
24501: GO 24517
// j := j + 1 ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 3
24512: PUSH
24513: LD_INT 1
24515: PLUS
24516: ST_TO_ADDR
// SetSide ( i , j ) ;
24517: LD_VAR 0 2
24521: PPUSH
24522: LD_VAR 0 3
24526: PPUSH
24527: CALL_OW 235
// end ;
24531: GO 24454
24533: POP
24534: POP
// end ;
24535: LD_VAR 0 1
24539: RET
// export function hHackFog ; begin
24540: LD_INT 0
24542: PPUSH
// FogOff ( true ) ;
24543: LD_INT 1
24545: PPUSH
24546: CALL_OW 344
// end ;
24550: LD_VAR 0 1
24554: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24555: LD_INT 0
24557: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: LD_VAR 0 3
24572: PPUSH
24573: LD_INT 1
24575: PPUSH
24576: LD_INT 1
24578: PPUSH
24579: CALL_OW 483
// CenterOnXY ( x , y ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 3
24592: PPUSH
24593: CALL_OW 84
// end ;
24597: LD_VAR 0 4
24601: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24602: LD_INT 0
24604: PPUSH
24605: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24606: LD_VAR 0 1
24610: NOT
24611: PUSH
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_VAR 0 3
24621: PPUSH
24622: CALL_OW 488
24626: NOT
24627: OR
24628: PUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 266
24638: PUSH
24639: LD_INT 3
24641: NONEQUAL
24642: PUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 247
24652: PUSH
24653: LD_INT 1
24655: EQUAL
24656: NOT
24657: AND
24658: OR
24659: IFFALSE 24663
// exit ;
24661: GO 24945
// if GetType ( factory ) = unit_human then
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 247
24672: PUSH
24673: LD_INT 1
24675: EQUAL
24676: IFFALSE 24693
// factory := IsInUnit ( factory ) ;
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 310
24692: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 266
24702: PUSH
24703: LD_INT 3
24705: NONEQUAL
24706: IFFALSE 24710
// exit ;
24708: GO 24945
// for i := 1 to Count ( factoryWaypoints ) do
24710: LD_ADDR_VAR 0 5
24714: PUSH
24715: DOUBLE
24716: LD_INT 1
24718: DEC
24719: ST_TO_ADDR
24720: LD_EXP 85
24724: PPUSH
24725: CALL 33448 0 1
24729: PUSH
24730: FOR_TO
24731: IFFALSE 24893
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
24733: LD_VAR 0 2
24737: PPUSH
24738: LD_VAR 0 3
24742: PPUSH
24743: CALL_OW 428
24747: PUSH
24748: LD_EXP 85
24752: PUSH
24753: LD_VAR 0 5
24757: ARRAY
24758: PUSH
24759: LD_INT 2
24761: ARRAY
24762: EQUAL
24763: IFFALSE 24795
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24765: LD_ADDR_EXP 85
24769: PUSH
24770: LD_EXP 85
24774: PPUSH
24775: LD_VAR 0 5
24779: PPUSH
24780: CALL_OW 3
24784: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24785: CALL 24950 0 0
// exit ;
24789: POP
24790: POP
24791: GO 24945
// end else
24793: GO 24891
// if factory = factoryWaypoints [ i ] [ 2 ] then
24795: LD_VAR 0 1
24799: PUSH
24800: LD_EXP 85
24804: PUSH
24805: LD_VAR 0 5
24809: ARRAY
24810: PUSH
24811: LD_INT 2
24813: ARRAY
24814: EQUAL
24815: IFFALSE 24891
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24817: LD_ADDR_EXP 85
24821: PUSH
24822: LD_EXP 85
24826: PPUSH
24827: LD_VAR 0 5
24831: PPUSH
24832: CALL_OW 3
24836: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24837: LD_ADDR_EXP 85
24841: PUSH
24842: LD_EXP 85
24846: PPUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 255
24856: PUSH
24857: LD_VAR 0 1
24861: PUSH
24862: LD_VAR 0 2
24866: PUSH
24867: LD_VAR 0 3
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: PPUSH
24878: CALL 69057 0 2
24882: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24883: CALL 24950 0 0
// exit ;
24887: POP
24888: POP
24889: GO 24945
// end ; end ;
24891: GO 24730
24893: POP
24894: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24895: LD_ADDR_EXP 85
24899: PUSH
24900: LD_EXP 85
24904: PPUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 255
24914: PUSH
24915: LD_VAR 0 1
24919: PUSH
24920: LD_VAR 0 2
24924: PUSH
24925: LD_VAR 0 3
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: PPUSH
24936: CALL 69057 0 2
24940: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24941: CALL 24950 0 0
// end ;
24945: LD_VAR 0 4
24949: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24950: LD_INT 0
24952: PPUSH
24953: PPUSH
24954: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24955: LD_STRING resetFactoryWaypoint();
24957: PPUSH
24958: CALL_OW 559
// if factoryWaypoints then
24962: LD_EXP 85
24966: IFFALSE 25087
// begin list := factoryWaypoints ;
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_EXP 85
24977: ST_TO_ADDR
// for i := 1 to list do
24978: LD_ADDR_VAR 0 2
24982: PUSH
24983: DOUBLE
24984: LD_INT 1
24986: DEC
24987: ST_TO_ADDR
24988: LD_VAR 0 3
24992: PUSH
24993: FOR_TO
24994: IFFALSE 25085
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24996: LD_STRING setFactoryWaypointXY(
24998: PUSH
24999: LD_VAR 0 3
25003: PUSH
25004: LD_VAR 0 2
25008: ARRAY
25009: PUSH
25010: LD_INT 1
25012: ARRAY
25013: STR
25014: PUSH
25015: LD_STRING ,
25017: STR
25018: PUSH
25019: LD_VAR 0 3
25023: PUSH
25024: LD_VAR 0 2
25028: ARRAY
25029: PUSH
25030: LD_INT 2
25032: ARRAY
25033: STR
25034: PUSH
25035: LD_STRING ,
25037: STR
25038: PUSH
25039: LD_VAR 0 3
25043: PUSH
25044: LD_VAR 0 2
25048: ARRAY
25049: PUSH
25050: LD_INT 3
25052: ARRAY
25053: STR
25054: PUSH
25055: LD_STRING ,
25057: STR
25058: PUSH
25059: LD_VAR 0 3
25063: PUSH
25064: LD_VAR 0 2
25068: ARRAY
25069: PUSH
25070: LD_INT 4
25072: ARRAY
25073: STR
25074: PUSH
25075: LD_STRING )
25077: STR
25078: PPUSH
25079: CALL_OW 559
25083: GO 24993
25085: POP
25086: POP
// end ; end ;
25087: LD_VAR 0 1
25091: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25092: LD_INT 0
25094: PPUSH
// if HexInfo ( x , y ) = warehouse then
25095: LD_VAR 0 2
25099: PPUSH
25100: LD_VAR 0 3
25104: PPUSH
25105: CALL_OW 428
25109: PUSH
25110: LD_VAR 0 1
25114: EQUAL
25115: IFFALSE 25142
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25117: LD_ADDR_EXP 86
25121: PUSH
25122: LD_EXP 86
25126: PPUSH
25127: LD_VAR 0 1
25131: PPUSH
25132: LD_INT 0
25134: PPUSH
25135: CALL_OW 1
25139: ST_TO_ADDR
25140: GO 25193
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25142: LD_ADDR_EXP 86
25146: PUSH
25147: LD_EXP 86
25151: PPUSH
25152: LD_VAR 0 1
25156: PPUSH
25157: LD_VAR 0 1
25161: PPUSH
25162: CALL_OW 255
25166: PUSH
25167: LD_VAR 0 1
25171: PUSH
25172: LD_VAR 0 2
25176: PUSH
25177: LD_VAR 0 3
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: PPUSH
25188: CALL_OW 1
25192: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25193: CALL 25202 0 0
// end ;
25197: LD_VAR 0 4
25201: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25202: LD_INT 0
25204: PPUSH
25205: PPUSH
25206: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25207: LD_STRING resetWarehouseGatheringPoints();
25209: PPUSH
25210: CALL_OW 559
// if warehouseGatheringPoints then
25214: LD_EXP 86
25218: IFFALSE 25344
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_EXP 86
25229: PPUSH
25230: CALL 72819 0 1
25234: ST_TO_ADDR
// for i := 1 to list do
25235: LD_ADDR_VAR 0 2
25239: PUSH
25240: DOUBLE
25241: LD_INT 1
25243: DEC
25244: ST_TO_ADDR
25245: LD_VAR 0 3
25249: PUSH
25250: FOR_TO
25251: IFFALSE 25342
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25253: LD_STRING setWarehouseGatheringPointXY(
25255: PUSH
25256: LD_VAR 0 3
25260: PUSH
25261: LD_VAR 0 2
25265: ARRAY
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: STR
25271: PUSH
25272: LD_STRING ,
25274: STR
25275: PUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 2
25285: ARRAY
25286: PUSH
25287: LD_INT 2
25289: ARRAY
25290: STR
25291: PUSH
25292: LD_STRING ,
25294: STR
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_VAR 0 2
25305: ARRAY
25306: PUSH
25307: LD_INT 3
25309: ARRAY
25310: STR
25311: PUSH
25312: LD_STRING ,
25314: STR
25315: PUSH
25316: LD_VAR 0 3
25320: PUSH
25321: LD_VAR 0 2
25325: ARRAY
25326: PUSH
25327: LD_INT 4
25329: ARRAY
25330: STR
25331: PUSH
25332: LD_STRING )
25334: STR
25335: PPUSH
25336: CALL_OW 559
25340: GO 25250
25342: POP
25343: POP
// end ; end ;
25344: LD_VAR 0 1
25348: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25349: LD_EXP 86
25353: IFFALSE 26038
25355: GO 25357
25357: DISABLE
25358: LD_INT 0
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
25367: PPUSH
25368: PPUSH
// begin enable ;
25369: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25370: LD_ADDR_VAR 0 3
25374: PUSH
25375: LD_EXP 86
25379: PPUSH
25380: CALL 72819 0 1
25384: ST_TO_ADDR
// if not list then
25385: LD_VAR 0 3
25389: NOT
25390: IFFALSE 25394
// exit ;
25392: GO 26038
// for i := 1 to list do
25394: LD_ADDR_VAR 0 1
25398: PUSH
25399: DOUBLE
25400: LD_INT 1
25402: DEC
25403: ST_TO_ADDR
25404: LD_VAR 0 3
25408: PUSH
25409: FOR_TO
25410: IFFALSE 26036
// begin depot := list [ i ] [ 2 ] ;
25412: LD_ADDR_VAR 0 8
25416: PUSH
25417: LD_VAR 0 3
25421: PUSH
25422: LD_VAR 0 1
25426: ARRAY
25427: PUSH
25428: LD_INT 2
25430: ARRAY
25431: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25432: LD_ADDR_VAR 0 5
25436: PUSH
25437: LD_VAR 0 3
25441: PUSH
25442: LD_VAR 0 1
25446: ARRAY
25447: PUSH
25448: LD_INT 1
25450: ARRAY
25451: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25452: LD_VAR 0 8
25456: PPUSH
25457: CALL_OW 301
25461: PUSH
25462: LD_VAR 0 5
25466: PUSH
25467: LD_VAR 0 8
25471: PPUSH
25472: CALL_OW 255
25476: NONEQUAL
25477: OR
25478: IFFALSE 25507
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25480: LD_ADDR_EXP 86
25484: PUSH
25485: LD_EXP 86
25489: PPUSH
25490: LD_VAR 0 8
25494: PPUSH
25495: LD_INT 0
25497: PPUSH
25498: CALL_OW 1
25502: ST_TO_ADDR
// exit ;
25503: POP
25504: POP
25505: GO 26038
// end ; x := list [ i ] [ 3 ] ;
25507: LD_ADDR_VAR 0 6
25511: PUSH
25512: LD_VAR 0 3
25516: PUSH
25517: LD_VAR 0 1
25521: ARRAY
25522: PUSH
25523: LD_INT 3
25525: ARRAY
25526: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25527: LD_ADDR_VAR 0 7
25531: PUSH
25532: LD_VAR 0 3
25536: PUSH
25537: LD_VAR 0 1
25541: ARRAY
25542: PUSH
25543: LD_INT 4
25545: ARRAY
25546: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25547: LD_ADDR_VAR 0 9
25551: PUSH
25552: LD_VAR 0 6
25556: PPUSH
25557: LD_VAR 0 7
25561: PPUSH
25562: LD_INT 16
25564: PPUSH
25565: CALL 71403 0 3
25569: ST_TO_ADDR
// if not cratesNearbyPoint then
25570: LD_VAR 0 9
25574: NOT
25575: IFFALSE 25581
// exit ;
25577: POP
25578: POP
25579: GO 26038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25581: LD_ADDR_VAR 0 4
25585: PUSH
25586: LD_INT 22
25588: PUSH
25589: LD_VAR 0 5
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: LD_INT 60
25603: PUSH
25604: EMPTY
25605: LIST
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 91
25613: PUSH
25614: LD_VAR 0 8
25618: PUSH
25619: LD_INT 6
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 25
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 25
25642: PUSH
25643: LD_INT 16
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL_OW 69
25665: PUSH
25666: LD_VAR 0 8
25670: PPUSH
25671: CALL_OW 313
25675: PPUSH
25676: LD_INT 3
25678: PUSH
25679: LD_INT 60
25681: PUSH
25682: EMPTY
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 25
25694: PUSH
25695: LD_INT 2
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 25
25704: PUSH
25705: LD_INT 16
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 72
25725: UNION
25726: ST_TO_ADDR
// if tmp then
25727: LD_VAR 0 4
25731: IFFALSE 25811
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25733: LD_ADDR_VAR 0 4
25737: PUSH
25738: LD_VAR 0 4
25742: PPUSH
25743: LD_INT 3
25745: PPUSH
25746: CALL 69372 0 2
25750: ST_TO_ADDR
// for j in tmp do
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 4
25760: PUSH
25761: FOR_IN
25762: IFFALSE 25805
// begin if IsInUnit ( j ) then
25764: LD_VAR 0 2
25768: PPUSH
25769: CALL_OW 310
25773: IFFALSE 25784
// ComExit ( j ) ;
25775: LD_VAR 0 2
25779: PPUSH
25780: CALL 69455 0 1
// AddComCollect ( j , x , y ) ;
25784: LD_VAR 0 2
25788: PPUSH
25789: LD_VAR 0 6
25793: PPUSH
25794: LD_VAR 0 7
25798: PPUSH
25799: CALL_OW 177
// end ;
25803: GO 25761
25805: POP
25806: POP
// exit ;
25807: POP
25808: POP
25809: GO 26038
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25811: LD_ADDR_VAR 0 4
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_VAR 0 5
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 91
25830: PUSH
25831: LD_VAR 0 8
25835: PUSH
25836: LD_INT 8
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: LD_INT 34
25849: PUSH
25850: LD_INT 12
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 34
25859: PUSH
25860: LD_INT 51
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 34
25869: PUSH
25870: LD_INT 32
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 34
25879: PUSH
25880: LD_INT 89
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: PPUSH
25899: CALL_OW 69
25903: ST_TO_ADDR
// if tmp then
25904: LD_VAR 0 4
25908: IFFALSE 26034
// begin for j in tmp do
25910: LD_ADDR_VAR 0 2
25914: PUSH
25915: LD_VAR 0 4
25919: PUSH
25920: FOR_IN
25921: IFFALSE 26032
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25923: LD_VAR 0 2
25927: PPUSH
25928: CALL_OW 262
25932: PUSH
25933: LD_INT 3
25935: EQUAL
25936: PUSH
25937: LD_VAR 0 2
25941: PPUSH
25942: CALL_OW 261
25946: PUSH
25947: LD_INT 20
25949: GREATER
25950: OR
25951: PUSH
25952: LD_VAR 0 2
25956: PPUSH
25957: CALL_OW 314
25961: NOT
25962: AND
25963: PUSH
25964: LD_VAR 0 2
25968: PPUSH
25969: CALL_OW 263
25973: PUSH
25974: LD_INT 1
25976: NONEQUAL
25977: PUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: CALL_OW 311
25987: OR
25988: AND
25989: IFFALSE 26030
// begin ComCollect ( j , x , y ) ;
25991: LD_VAR 0 2
25995: PPUSH
25996: LD_VAR 0 6
26000: PPUSH
26001: LD_VAR 0 7
26005: PPUSH
26006: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26010: LD_VAR 0 2
26014: PPUSH
26015: LD_VAR 0 8
26019: PPUSH
26020: CALL_OW 172
// exit ;
26024: POP
26025: POP
26026: POP
26027: POP
26028: GO 26038
// end ;
26030: GO 25920
26032: POP
26033: POP
// end ; end ;
26034: GO 25409
26036: POP
26037: POP
// end ; end_of_file end_of_file
26038: PPOPN 9
26040: END
// export function SOS_UnitDestroyed ( un ) ; begin
26041: LD_INT 0
26043: PPUSH
// ComRadiation ( un ) ;
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL 27030 0 1
// end ;
26053: LD_VAR 0 2
26057: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26058: LD_INT 0
26060: PPUSH
// ComRadiation ( un ) ;
26061: LD_VAR 0 1
26065: PPUSH
26066: CALL 27030 0 1
// end ;
26070: LD_VAR 0 2
26074: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26075: LD_INT 0
26077: PPUSH
// end ;
26078: LD_VAR 0 4
26082: RET
// export function SOS_Command ( cmd ) ; begin
26083: LD_INT 0
26085: PPUSH
// end ;
26086: LD_VAR 0 2
26090: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26091: LD_INT 0
26093: PPUSH
// end ;
26094: LD_VAR 0 6
26098: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
// if not vehicle or not factory then
26106: LD_VAR 0 1
26110: NOT
26111: PUSH
26112: LD_VAR 0 2
26116: NOT
26117: OR
26118: IFFALSE 26122
// exit ;
26120: GO 26621
// if not factoryWaypoints then
26122: LD_EXP 85
26126: NOT
26127: IFFALSE 26131
// exit ;
26129: GO 26621
// for i := 1 to Count ( factoryWaypoints ) do
26131: LD_ADDR_VAR 0 4
26135: PUSH
26136: DOUBLE
26137: LD_INT 1
26139: DEC
26140: ST_TO_ADDR
26141: LD_EXP 85
26145: PPUSH
26146: CALL 33448 0 1
26150: PUSH
26151: FOR_TO
26152: IFFALSE 26619
// if factoryWaypoints [ i ] [ 2 ] = factory then
26154: LD_EXP 85
26158: PUSH
26159: LD_VAR 0 4
26163: ARRAY
26164: PUSH
26165: LD_INT 2
26167: ARRAY
26168: PUSH
26169: LD_VAR 0 2
26173: EQUAL
26174: IFFALSE 26617
// begin if GetControl ( vehicle ) = control_manual then
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 263
26185: PUSH
26186: LD_INT 1
26188: EQUAL
26189: IFFALSE 26500
// begin driver := IsDrivenBy ( vehicle ) ;
26191: LD_ADDR_VAR 0 6
26195: PUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: CALL_OW 311
26205: ST_TO_ADDR
// tag := GetTag ( driver ) ;
26206: LD_ADDR_VAR 0 5
26210: PUSH
26211: LD_VAR 0 6
26215: PPUSH
26216: CALL_OW 110
26220: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
26221: LD_VAR 0 5
26225: PUSH
26226: LD_INT 501
26228: EQUAL
26229: PUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 110
26239: PUSH
26240: LD_INT 501
26242: EQUAL
26243: OR
26244: IFFALSE 26250
// exit ;
26246: POP
26247: POP
26248: GO 26621
// if not HasTask ( driver ) then
26250: LD_VAR 0 6
26254: PPUSH
26255: CALL_OW 314
26259: NOT
26260: IFFALSE 26498
// begin SetTag ( driver , tDriver ) ;
26262: LD_VAR 0 6
26266: PPUSH
26267: LD_INT 501
26269: PPUSH
26270: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
26274: LD_VAR 0 1
26278: PPUSH
26279: LD_INT 501
26281: PPUSH
26282: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26286: LD_ADDR_VAR 0 7
26290: PUSH
26291: LD_EXP 85
26295: PUSH
26296: LD_VAR 0 4
26300: ARRAY
26301: PUSH
26302: LD_INT 3
26304: ARRAY
26305: PPUSH
26306: LD_EXP 85
26310: PUSH
26311: LD_VAR 0 4
26315: ARRAY
26316: PUSH
26317: LD_INT 4
26319: ARRAY
26320: PPUSH
26321: CALL_OW 428
26325: ST_TO_ADDR
// if hex then
26326: LD_VAR 0 7
26330: IFFALSE 26348
// ComMoveUnit ( driver , hex ) else
26332: LD_VAR 0 6
26336: PPUSH
26337: LD_VAR 0 7
26341: PPUSH
26342: CALL_OW 112
26346: GO 26387
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26348: LD_VAR 0 6
26352: PPUSH
26353: LD_EXP 85
26357: PUSH
26358: LD_VAR 0 4
26362: ARRAY
26363: PUSH
26364: LD_INT 3
26366: ARRAY
26367: PPUSH
26368: LD_EXP 85
26372: PUSH
26373: LD_VAR 0 4
26377: ARRAY
26378: PUSH
26379: LD_INT 4
26381: ARRAY
26382: PPUSH
26383: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26387: LD_VAR 0 6
26391: PPUSH
26392: CALL_OW 181
// if Multiplayer then
26396: LD_OWVAR 4
26400: IFFALSE 26449
// begin repeat wait ( 10 ) ;
26402: LD_INT 10
26404: PPUSH
26405: CALL_OW 67
// until not IsInUnit ( driver ) ;
26409: LD_VAR 0 6
26413: PPUSH
26414: CALL_OW 310
26418: NOT
26419: IFFALSE 26402
// if not HasTask ( driver ) then
26421: LD_VAR 0 6
26425: PPUSH
26426: CALL_OW 314
26430: NOT
26431: IFFALSE 26447
// ComEnterUnit ( driver , factory ) ;
26433: LD_VAR 0 6
26437: PPUSH
26438: LD_VAR 0 2
26442: PPUSH
26443: CALL_OW 120
// end else
26447: GO 26463
// AddComEnterUnit ( driver , factory ) ;
26449: LD_VAR 0 6
26453: PPUSH
26454: LD_VAR 0 2
26458: PPUSH
26459: CALL_OW 180
// wait ( 0 0$1 ) ;
26463: LD_INT 35
26465: PPUSH
26466: CALL_OW 67
// SetTag ( driver , tag ) ;
26470: LD_VAR 0 6
26474: PPUSH
26475: LD_VAR 0 5
26479: PPUSH
26480: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
26484: LD_VAR 0 1
26488: PPUSH
26489: LD_INT 0
26491: PPUSH
26492: CALL_OW 109
// break ;
26496: GO 26619
// end ; end else
26498: GO 26617
// if GetControl ( vehicle ) = control_remote then
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 263
26509: PUSH
26510: LD_INT 2
26512: EQUAL
26513: IFFALSE 26576
// begin wait ( 0 0$2 ) ;
26515: LD_INT 70
26517: PPUSH
26518: CALL_OW 67
// if Connect ( vehicle ) then
26522: LD_VAR 0 1
26526: PPUSH
26527: CALL 39654 0 1
26531: IFFALSE 26572
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26533: LD_VAR 0 1
26537: PPUSH
26538: LD_EXP 85
26542: PUSH
26543: LD_VAR 0 4
26547: ARRAY
26548: PUSH
26549: LD_INT 3
26551: ARRAY
26552: PPUSH
26553: LD_EXP 85
26557: PUSH
26558: LD_VAR 0 4
26562: ARRAY
26563: PUSH
26564: LD_INT 4
26566: ARRAY
26567: PPUSH
26568: CALL_OW 171
// break ;
26572: GO 26619
// end else
26574: GO 26617
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26576: LD_VAR 0 1
26580: PPUSH
26581: LD_EXP 85
26585: PUSH
26586: LD_VAR 0 4
26590: ARRAY
26591: PUSH
26592: LD_INT 3
26594: ARRAY
26595: PPUSH
26596: LD_EXP 85
26600: PUSH
26601: LD_VAR 0 4
26605: ARRAY
26606: PUSH
26607: LD_INT 4
26609: ARRAY
26610: PPUSH
26611: CALL_OW 171
// break ;
26615: GO 26619
// end ; end ;
26617: GO 26151
26619: POP
26620: POP
// end ;
26621: LD_VAR 0 3
26625: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26626: LD_INT 0
26628: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26629: LD_VAR 0 1
26633: PUSH
26634: LD_INT 250
26636: EQUAL
26637: PUSH
26638: LD_VAR 0 2
26642: PPUSH
26643: CALL_OW 264
26647: PUSH
26648: LD_INT 81
26650: EQUAL
26651: AND
26652: IFFALSE 26673
// MinerPlaceMine ( unit , x , y ) ;
26654: LD_VAR 0 2
26658: PPUSH
26659: LD_VAR 0 4
26663: PPUSH
26664: LD_VAR 0 5
26668: PPUSH
26669: CALL 29765 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26673: LD_VAR 0 1
26677: PUSH
26678: LD_INT 251
26680: EQUAL
26681: PUSH
26682: LD_VAR 0 2
26686: PPUSH
26687: CALL_OW 264
26691: PUSH
26692: LD_INT 81
26694: EQUAL
26695: AND
26696: IFFALSE 26717
// MinerDetonateMine ( unit , x , y ) ;
26698: LD_VAR 0 2
26702: PPUSH
26703: LD_VAR 0 4
26707: PPUSH
26708: LD_VAR 0 5
26712: PPUSH
26713: CALL 30040 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26717: LD_VAR 0 1
26721: PUSH
26722: LD_INT 252
26724: EQUAL
26725: PUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: CALL_OW 264
26735: PUSH
26736: LD_INT 81
26738: EQUAL
26739: AND
26740: IFFALSE 26761
// MinerCreateMinefield ( unit , x , y ) ;
26742: LD_VAR 0 2
26746: PPUSH
26747: LD_VAR 0 4
26751: PPUSH
26752: LD_VAR 0 5
26756: PPUSH
26757: CALL 30457 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26761: LD_VAR 0 1
26765: PUSH
26766: LD_INT 253
26768: EQUAL
26769: PUSH
26770: LD_VAR 0 2
26774: PPUSH
26775: CALL_OW 257
26779: PUSH
26780: LD_INT 5
26782: EQUAL
26783: AND
26784: IFFALSE 26805
// ComBinocular ( unit , x , y ) ;
26786: LD_VAR 0 2
26790: PPUSH
26791: LD_VAR 0 4
26795: PPUSH
26796: LD_VAR 0 5
26800: PPUSH
26801: CALL 30826 0 3
// if selectedUnit then
26805: LD_VAR 0 3
26809: IFFALSE 26865
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26811: LD_VAR 0 1
26815: PUSH
26816: LD_INT 254
26818: EQUAL
26819: PUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: CALL_OW 264
26829: PUSH
26830: LD_INT 99
26832: EQUAL
26833: AND
26834: PUSH
26835: LD_VAR 0 3
26839: PPUSH
26840: CALL_OW 263
26844: PUSH
26845: LD_INT 3
26847: EQUAL
26848: AND
26849: IFFALSE 26865
// HackDestroyVehicle ( unit , selectedUnit ) ;
26851: LD_VAR 0 2
26855: PPUSH
26856: LD_VAR 0 3
26860: PPUSH
26861: CALL 29129 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26865: LD_VAR 0 1
26869: PUSH
26870: LD_INT 255
26872: EQUAL
26873: PUSH
26874: LD_VAR 0 2
26878: PPUSH
26879: CALL_OW 264
26883: PUSH
26884: LD_INT 14
26886: PUSH
26887: LD_INT 53
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: IN
26894: AND
26895: PUSH
26896: LD_VAR 0 4
26900: PPUSH
26901: LD_VAR 0 5
26905: PPUSH
26906: CALL_OW 488
26910: AND
26911: IFFALSE 26935
// CutTreeXYR ( unit , x , y , 12 ) ;
26913: LD_VAR 0 2
26917: PPUSH
26918: LD_VAR 0 4
26922: PPUSH
26923: LD_VAR 0 5
26927: PPUSH
26928: LD_INT 12
26930: PPUSH
26931: CALL 27126 0 4
// if cmd = 256 then
26935: LD_VAR 0 1
26939: PUSH
26940: LD_INT 256
26942: EQUAL
26943: IFFALSE 26964
// SetFactoryWaypoint ( unit , x , y ) ;
26945: LD_VAR 0 2
26949: PPUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: LD_VAR 0 5
26959: PPUSH
26960: CALL 24602 0 3
// if cmd = 257 then
26964: LD_VAR 0 1
26968: PUSH
26969: LD_INT 257
26971: EQUAL
26972: IFFALSE 26993
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26974: LD_VAR 0 2
26978: PPUSH
26979: LD_VAR 0 4
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: CALL 25092 0 3
// if cmd = 258 then
26993: LD_VAR 0 1
26997: PUSH
26998: LD_INT 258
27000: EQUAL
27001: IFFALSE 27025
// BurnTreeXYR ( unit , x , y , 8 ) ;
27003: LD_VAR 0 2
27007: PPUSH
27008: LD_VAR 0 4
27012: PPUSH
27013: LD_VAR 0 5
27017: PPUSH
27018: LD_INT 8
27020: PPUSH
27021: CALL 27520 0 4
// end ;
27025: LD_VAR 0 6
27029: RET
// export function ComRadiation ( un ) ; var eff ; begin
27030: LD_INT 0
27032: PPUSH
27033: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 264
27043: PUSH
27044: LD_INT 91
27046: NONEQUAL
27047: IFFALSE 27051
// exit ;
27049: GO 27121
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27051: LD_INT 68
27053: PPUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL_OW 255
27063: PPUSH
27064: CALL_OW 321
27068: PUSH
27069: LD_INT 2
27071: EQUAL
27072: IFFALSE 27084
// eff := 70 else
27074: LD_ADDR_VAR 0 3
27078: PUSH
27079: LD_INT 70
27081: ST_TO_ADDR
27082: GO 27092
// eff := 30 ;
27084: LD_ADDR_VAR 0 3
27088: PUSH
27089: LD_INT 30
27091: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL_OW 250
27101: PPUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 251
27111: PPUSH
27112: LD_VAR 0 3
27116: PPUSH
27117: CALL_OW 495
// end ;
27121: LD_VAR 0 2
27125: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27126: LD_INT 0
27128: PPUSH
27129: PPUSH
27130: PPUSH
27131: PPUSH
27132: PPUSH
27133: PPUSH
27134: PPUSH
27135: PPUSH
27136: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27137: LD_VAR 0 1
27141: PPUSH
27142: CALL_OW 302
27146: NOT
27147: PUSH
27148: LD_VAR 0 2
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 488
27162: NOT
27163: OR
27164: PUSH
27165: LD_VAR 0 4
27169: NOT
27170: OR
27171: IFFALSE 27175
// exit ;
27173: GO 27515
// list := [ ] ;
27175: LD_ADDR_VAR 0 13
27179: PUSH
27180: EMPTY
27181: ST_TO_ADDR
// if x - r < 0 then
27182: LD_VAR 0 2
27186: PUSH
27187: LD_VAR 0 4
27191: MINUS
27192: PUSH
27193: LD_INT 0
27195: LESS
27196: IFFALSE 27208
// min_x := 0 else
27198: LD_ADDR_VAR 0 7
27202: PUSH
27203: LD_INT 0
27205: ST_TO_ADDR
27206: GO 27224
// min_x := x - r ;
27208: LD_ADDR_VAR 0 7
27212: PUSH
27213: LD_VAR 0 2
27217: PUSH
27218: LD_VAR 0 4
27222: MINUS
27223: ST_TO_ADDR
// if y - r < 0 then
27224: LD_VAR 0 3
27228: PUSH
27229: LD_VAR 0 4
27233: MINUS
27234: PUSH
27235: LD_INT 0
27237: LESS
27238: IFFALSE 27250
// min_y := 0 else
27240: LD_ADDR_VAR 0 8
27244: PUSH
27245: LD_INT 0
27247: ST_TO_ADDR
27248: GO 27266
// min_y := y - r ;
27250: LD_ADDR_VAR 0 8
27254: PUSH
27255: LD_VAR 0 3
27259: PUSH
27260: LD_VAR 0 4
27264: MINUS
27265: ST_TO_ADDR
// max_x := x + r ;
27266: LD_ADDR_VAR 0 9
27270: PUSH
27271: LD_VAR 0 2
27275: PUSH
27276: LD_VAR 0 4
27280: PLUS
27281: ST_TO_ADDR
// max_y := y + r ;
27282: LD_ADDR_VAR 0 10
27286: PUSH
27287: LD_VAR 0 3
27291: PUSH
27292: LD_VAR 0 4
27296: PLUS
27297: ST_TO_ADDR
// for _x = min_x to max_x do
27298: LD_ADDR_VAR 0 11
27302: PUSH
27303: DOUBLE
27304: LD_VAR 0 7
27308: DEC
27309: ST_TO_ADDR
27310: LD_VAR 0 9
27314: PUSH
27315: FOR_TO
27316: IFFALSE 27433
// for _y = min_y to max_y do
27318: LD_ADDR_VAR 0 12
27322: PUSH
27323: DOUBLE
27324: LD_VAR 0 8
27328: DEC
27329: ST_TO_ADDR
27330: LD_VAR 0 10
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27429
// begin if not ValidHex ( _x , _y ) then
27338: LD_VAR 0 11
27342: PPUSH
27343: LD_VAR 0 12
27347: PPUSH
27348: CALL_OW 488
27352: NOT
27353: IFFALSE 27357
// continue ;
27355: GO 27335
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27357: LD_VAR 0 11
27361: PPUSH
27362: LD_VAR 0 12
27366: PPUSH
27367: CALL_OW 351
27371: PUSH
27372: LD_VAR 0 11
27376: PPUSH
27377: LD_VAR 0 12
27381: PPUSH
27382: CALL_OW 554
27386: AND
27387: IFFALSE 27427
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27389: LD_ADDR_VAR 0 13
27393: PUSH
27394: LD_VAR 0 13
27398: PPUSH
27399: LD_VAR 0 13
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: PPUSH
27408: LD_VAR 0 11
27412: PUSH
27413: LD_VAR 0 12
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 2
27426: ST_TO_ADDR
// end ;
27427: GO 27335
27429: POP
27430: POP
27431: GO 27315
27433: POP
27434: POP
// if not list then
27435: LD_VAR 0 13
27439: NOT
27440: IFFALSE 27444
// exit ;
27442: GO 27515
// for i in list do
27444: LD_ADDR_VAR 0 6
27448: PUSH
27449: LD_VAR 0 13
27453: PUSH
27454: FOR_IN
27455: IFFALSE 27513
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27457: LD_VAR 0 1
27461: PPUSH
27462: LD_STRING M
27464: PUSH
27465: LD_VAR 0 6
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PUSH
27474: LD_VAR 0 6
27478: PUSH
27479: LD_INT 2
27481: ARRAY
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: PPUSH
27507: CALL_OW 447
27511: GO 27454
27513: POP
27514: POP
// end ;
27515: LD_VAR 0 5
27519: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27520: LD_INT 0
27522: PPUSH
27523: PPUSH
27524: PPUSH
27525: PPUSH
27526: PPUSH
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27532: LD_VAR 0 1
27536: PPUSH
27537: CALL_OW 302
27541: NOT
27542: PUSH
27543: LD_VAR 0 2
27547: PPUSH
27548: LD_VAR 0 3
27552: PPUSH
27553: CALL_OW 488
27557: NOT
27558: OR
27559: PUSH
27560: LD_VAR 0 4
27564: NOT
27565: OR
27566: IFFALSE 27570
// exit ;
27568: GO 28083
// list := [ ] ;
27570: LD_ADDR_VAR 0 13
27574: PUSH
27575: EMPTY
27576: ST_TO_ADDR
// if x - r < 0 then
27577: LD_VAR 0 2
27581: PUSH
27582: LD_VAR 0 4
27586: MINUS
27587: PUSH
27588: LD_INT 0
27590: LESS
27591: IFFALSE 27603
// min_x := 0 else
27593: LD_ADDR_VAR 0 7
27597: PUSH
27598: LD_INT 0
27600: ST_TO_ADDR
27601: GO 27619
// min_x := x - r ;
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: LD_VAR 0 2
27612: PUSH
27613: LD_VAR 0 4
27617: MINUS
27618: ST_TO_ADDR
// if y - r < 0 then
27619: LD_VAR 0 3
27623: PUSH
27624: LD_VAR 0 4
27628: MINUS
27629: PUSH
27630: LD_INT 0
27632: LESS
27633: IFFALSE 27645
// min_y := 0 else
27635: LD_ADDR_VAR 0 8
27639: PUSH
27640: LD_INT 0
27642: ST_TO_ADDR
27643: GO 27661
// min_y := y - r ;
27645: LD_ADDR_VAR 0 8
27649: PUSH
27650: LD_VAR 0 3
27654: PUSH
27655: LD_VAR 0 4
27659: MINUS
27660: ST_TO_ADDR
// max_x := x + r ;
27661: LD_ADDR_VAR 0 9
27665: PUSH
27666: LD_VAR 0 2
27670: PUSH
27671: LD_VAR 0 4
27675: PLUS
27676: ST_TO_ADDR
// max_y := y + r ;
27677: LD_ADDR_VAR 0 10
27681: PUSH
27682: LD_VAR 0 3
27686: PUSH
27687: LD_VAR 0 4
27691: PLUS
27692: ST_TO_ADDR
// for _x = min_x to max_x do
27693: LD_ADDR_VAR 0 11
27697: PUSH
27698: DOUBLE
27699: LD_VAR 0 7
27703: DEC
27704: ST_TO_ADDR
27705: LD_VAR 0 9
27709: PUSH
27710: FOR_TO
27711: IFFALSE 27828
// for _y = min_y to max_y do
27713: LD_ADDR_VAR 0 12
27717: PUSH
27718: DOUBLE
27719: LD_VAR 0 8
27723: DEC
27724: ST_TO_ADDR
27725: LD_VAR 0 10
27729: PUSH
27730: FOR_TO
27731: IFFALSE 27824
// begin if not ValidHex ( _x , _y ) then
27733: LD_VAR 0 11
27737: PPUSH
27738: LD_VAR 0 12
27742: PPUSH
27743: CALL_OW 488
27747: NOT
27748: IFFALSE 27752
// continue ;
27750: GO 27730
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27752: LD_VAR 0 11
27756: PPUSH
27757: LD_VAR 0 12
27761: PPUSH
27762: CALL_OW 351
27766: PUSH
27767: LD_VAR 0 11
27771: PPUSH
27772: LD_VAR 0 12
27776: PPUSH
27777: CALL_OW 554
27781: AND
27782: IFFALSE 27822
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27784: LD_ADDR_VAR 0 13
27788: PUSH
27789: LD_VAR 0 13
27793: PPUSH
27794: LD_VAR 0 13
27798: PUSH
27799: LD_INT 1
27801: PLUS
27802: PPUSH
27803: LD_VAR 0 11
27807: PUSH
27808: LD_VAR 0 12
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PPUSH
27817: CALL_OW 2
27821: ST_TO_ADDR
// end ;
27822: GO 27730
27824: POP
27825: POP
27826: GO 27710
27828: POP
27829: POP
// if not list then
27830: LD_VAR 0 13
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 28083
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27839: LD_ADDR_VAR 0 13
27843: PUSH
27844: LD_VAR 0 1
27848: PPUSH
27849: LD_VAR 0 13
27853: PPUSH
27854: LD_INT 1
27856: PPUSH
27857: LD_INT 1
27859: PPUSH
27860: CALL 36796 0 4
27864: ST_TO_ADDR
// ComStop ( flame ) ;
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL_OW 141
// for i in list do
27874: LD_ADDR_VAR 0 6
27878: PUSH
27879: LD_VAR 0 13
27883: PUSH
27884: FOR_IN
27885: IFFALSE 27916
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27887: LD_VAR 0 1
27891: PPUSH
27892: LD_VAR 0 6
27896: PUSH
27897: LD_INT 1
27899: ARRAY
27900: PPUSH
27901: LD_VAR 0 6
27905: PUSH
27906: LD_INT 2
27908: ARRAY
27909: PPUSH
27910: CALL_OW 176
27914: GO 27884
27916: POP
27917: POP
// repeat wait ( 0 0$1 ) ;
27918: LD_INT 35
27920: PPUSH
27921: CALL_OW 67
// task := GetTaskList ( flame ) ;
27925: LD_ADDR_VAR 0 14
27929: PUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: CALL_OW 437
27939: ST_TO_ADDR
// if not task then
27940: LD_VAR 0 14
27944: NOT
27945: IFFALSE 27949
// exit ;
27947: GO 28083
// if task [ 1 ] [ 1 ] <> | then
27949: LD_VAR 0 14
27953: PUSH
27954: LD_INT 1
27956: ARRAY
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: PUSH
27962: LD_STRING |
27964: NONEQUAL
27965: IFFALSE 27969
// exit ;
27967: GO 28083
// _x := task [ 1 ] [ 2 ] ;
27969: LD_ADDR_VAR 0 11
27973: PUSH
27974: LD_VAR 0 14
27978: PUSH
27979: LD_INT 1
27981: ARRAY
27982: PUSH
27983: LD_INT 2
27985: ARRAY
27986: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27987: LD_ADDR_VAR 0 12
27991: PUSH
27992: LD_VAR 0 14
27996: PUSH
27997: LD_INT 1
27999: ARRAY
28000: PUSH
28001: LD_INT 3
28003: ARRAY
28004: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28005: LD_VAR 0 11
28009: PPUSH
28010: LD_VAR 0 12
28014: PPUSH
28015: CALL_OW 351
28019: NOT
28020: PUSH
28021: LD_VAR 0 11
28025: PPUSH
28026: LD_VAR 0 12
28030: PPUSH
28031: CALL_OW 554
28035: NOT
28036: OR
28037: IFFALSE 28071
// begin task := Delete ( task , 1 ) ;
28039: LD_ADDR_VAR 0 14
28043: PUSH
28044: LD_VAR 0 14
28048: PPUSH
28049: LD_INT 1
28051: PPUSH
28052: CALL_OW 3
28056: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28057: LD_VAR 0 1
28061: PPUSH
28062: LD_VAR 0 14
28066: PPUSH
28067: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28071: LD_VAR 0 1
28075: PPUSH
28076: CALL_OW 314
28080: NOT
28081: IFFALSE 27918
// end ;
28083: LD_VAR 0 5
28087: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28088: LD_EXP 88
28092: NOT
28093: IFFALSE 28143
28095: GO 28097
28097: DISABLE
// begin initHack := true ;
28098: LD_ADDR_EXP 88
28102: PUSH
28103: LD_INT 1
28105: ST_TO_ADDR
// hackTanks := [ ] ;
28106: LD_ADDR_EXP 89
28110: PUSH
28111: EMPTY
28112: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28113: LD_ADDR_EXP 90
28117: PUSH
28118: EMPTY
28119: ST_TO_ADDR
// hackLimit := 3 ;
28120: LD_ADDR_EXP 91
28124: PUSH
28125: LD_INT 3
28127: ST_TO_ADDR
// hackDist := 12 ;
28128: LD_ADDR_EXP 92
28132: PUSH
28133: LD_INT 12
28135: ST_TO_ADDR
// hackCounter := [ ] ;
28136: LD_ADDR_EXP 93
28140: PUSH
28141: EMPTY
28142: ST_TO_ADDR
// end ;
28143: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28144: LD_EXP 88
28148: PUSH
28149: LD_INT 34
28151: PUSH
28152: LD_INT 99
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PPUSH
28159: CALL_OW 69
28163: AND
28164: IFFALSE 28417
28166: GO 28168
28168: DISABLE
28169: LD_INT 0
28171: PPUSH
28172: PPUSH
// begin enable ;
28173: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28174: LD_ADDR_VAR 0 1
28178: PUSH
28179: LD_INT 34
28181: PUSH
28182: LD_INT 99
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: PUSH
28194: FOR_IN
28195: IFFALSE 28415
// begin if not i in hackTanks then
28197: LD_VAR 0 1
28201: PUSH
28202: LD_EXP 89
28206: IN
28207: NOT
28208: IFFALSE 28291
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28210: LD_ADDR_EXP 89
28214: PUSH
28215: LD_EXP 89
28219: PPUSH
28220: LD_EXP 89
28224: PUSH
28225: LD_INT 1
28227: PLUS
28228: PPUSH
28229: LD_VAR 0 1
28233: PPUSH
28234: CALL_OW 1
28238: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28239: LD_ADDR_EXP 90
28243: PUSH
28244: LD_EXP 90
28248: PPUSH
28249: LD_EXP 90
28253: PUSH
28254: LD_INT 1
28256: PLUS
28257: PPUSH
28258: EMPTY
28259: PPUSH
28260: CALL_OW 1
28264: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28265: LD_ADDR_EXP 93
28269: PUSH
28270: LD_EXP 93
28274: PPUSH
28275: LD_EXP 93
28279: PUSH
28280: LD_INT 1
28282: PLUS
28283: PPUSH
28284: EMPTY
28285: PPUSH
28286: CALL_OW 1
28290: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28291: LD_VAR 0 1
28295: PPUSH
28296: CALL_OW 302
28300: NOT
28301: IFFALSE 28314
// begin HackUnlinkAll ( i ) ;
28303: LD_VAR 0 1
28307: PPUSH
28308: CALL 28420 0 1
// continue ;
28312: GO 28194
// end ; HackCheckCapturedStatus ( i ) ;
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL 28863 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28323: LD_ADDR_VAR 0 2
28327: PUSH
28328: LD_INT 81
28330: PUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 255
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 33
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 91
28357: PUSH
28358: LD_VAR 0 1
28362: PUSH
28363: LD_EXP 92
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 50
28375: PUSH
28376: EMPTY
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: PPUSH
28385: CALL_OW 69
28389: ST_TO_ADDR
// if not tmp then
28390: LD_VAR 0 2
28394: NOT
28395: IFFALSE 28399
// continue ;
28397: GO 28194
// HackLink ( i , tmp ) ;
28399: LD_VAR 0 1
28403: PPUSH
28404: LD_VAR 0 2
28408: PPUSH
28409: CALL 28556 0 2
// end ;
28413: GO 28194
28415: POP
28416: POP
// end ;
28417: PPOPN 2
28419: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28420: LD_INT 0
28422: PPUSH
28423: PPUSH
28424: PPUSH
// if not hack in hackTanks then
28425: LD_VAR 0 1
28429: PUSH
28430: LD_EXP 89
28434: IN
28435: NOT
28436: IFFALSE 28440
// exit ;
28438: GO 28551
// index := GetElementIndex ( hackTanks , hack ) ;
28440: LD_ADDR_VAR 0 4
28444: PUSH
28445: LD_EXP 89
28449: PPUSH
28450: LD_VAR 0 1
28454: PPUSH
28455: CALL 36093 0 2
28459: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28460: LD_EXP 90
28464: PUSH
28465: LD_VAR 0 4
28469: ARRAY
28470: IFFALSE 28551
// begin for i in hackTanksCaptured [ index ] do
28472: LD_ADDR_VAR 0 3
28476: PUSH
28477: LD_EXP 90
28481: PUSH
28482: LD_VAR 0 4
28486: ARRAY
28487: PUSH
28488: FOR_IN
28489: IFFALSE 28515
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28491: LD_VAR 0 3
28495: PUSH
28496: LD_INT 1
28498: ARRAY
28499: PPUSH
28500: LD_VAR 0 3
28504: PUSH
28505: LD_INT 2
28507: ARRAY
28508: PPUSH
28509: CALL_OW 235
28513: GO 28488
28515: POP
28516: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28517: LD_ADDR_EXP 90
28521: PUSH
28522: LD_EXP 90
28526: PPUSH
28527: LD_VAR 0 4
28531: PPUSH
28532: EMPTY
28533: PPUSH
28534: CALL_OW 1
28538: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28539: LD_VAR 0 1
28543: PPUSH
28544: LD_INT 0
28546: PPUSH
28547: CALL_OW 505
// end ; end ;
28551: LD_VAR 0 2
28555: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28556: LD_INT 0
28558: PPUSH
28559: PPUSH
28560: PPUSH
// if not hack in hackTanks or not vehicles then
28561: LD_VAR 0 1
28565: PUSH
28566: LD_EXP 89
28570: IN
28571: NOT
28572: PUSH
28573: LD_VAR 0 2
28577: NOT
28578: OR
28579: IFFALSE 28583
// exit ;
28581: GO 28858
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28583: LD_ADDR_VAR 0 2
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_VAR 0 2
28597: PPUSH
28598: LD_INT 1
28600: PPUSH
28601: LD_INT 1
28603: PPUSH
28604: CALL 36743 0 4
28608: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28609: LD_ADDR_VAR 0 5
28613: PUSH
28614: LD_EXP 89
28618: PPUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL 36093 0 2
28628: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28629: LD_EXP 90
28633: PUSH
28634: LD_VAR 0 5
28638: ARRAY
28639: PUSH
28640: LD_EXP 91
28644: LESS
28645: IFFALSE 28834
// begin for i := 1 to vehicles do
28647: LD_ADDR_VAR 0 4
28651: PUSH
28652: DOUBLE
28653: LD_INT 1
28655: DEC
28656: ST_TO_ADDR
28657: LD_VAR 0 2
28661: PUSH
28662: FOR_TO
28663: IFFALSE 28832
// begin if hackTanksCaptured [ index ] = hackLimit then
28665: LD_EXP 90
28669: PUSH
28670: LD_VAR 0 5
28674: ARRAY
28675: PUSH
28676: LD_EXP 91
28680: EQUAL
28681: IFFALSE 28685
// break ;
28683: GO 28832
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28685: LD_ADDR_EXP 93
28689: PUSH
28690: LD_EXP 93
28694: PPUSH
28695: LD_VAR 0 5
28699: PPUSH
28700: LD_EXP 93
28704: PUSH
28705: LD_VAR 0 5
28709: ARRAY
28710: PUSH
28711: LD_INT 1
28713: PLUS
28714: PPUSH
28715: CALL_OW 1
28719: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28720: LD_ADDR_EXP 90
28724: PUSH
28725: LD_EXP 90
28729: PPUSH
28730: LD_VAR 0 5
28734: PUSH
28735: LD_EXP 90
28739: PUSH
28740: LD_VAR 0 5
28744: ARRAY
28745: PUSH
28746: LD_INT 1
28748: PLUS
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PPUSH
28754: LD_VAR 0 2
28758: PUSH
28759: LD_VAR 0 4
28763: ARRAY
28764: PUSH
28765: LD_VAR 0 2
28769: PUSH
28770: LD_VAR 0 4
28774: ARRAY
28775: PPUSH
28776: CALL_OW 255
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PPUSH
28785: CALL 36308 0 3
28789: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28790: LD_VAR 0 2
28794: PUSH
28795: LD_VAR 0 4
28799: ARRAY
28800: PPUSH
28801: LD_VAR 0 1
28805: PPUSH
28806: CALL_OW 255
28810: PPUSH
28811: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28815: LD_VAR 0 2
28819: PUSH
28820: LD_VAR 0 4
28824: ARRAY
28825: PPUSH
28826: CALL_OW 141
// end ;
28830: GO 28662
28832: POP
28833: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28834: LD_VAR 0 1
28838: PPUSH
28839: LD_EXP 90
28843: PUSH
28844: LD_VAR 0 5
28848: ARRAY
28849: PUSH
28850: LD_INT 0
28852: PLUS
28853: PPUSH
28854: CALL_OW 505
// end ;
28858: LD_VAR 0 3
28862: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28863: LD_INT 0
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
// if not hack in hackTanks then
28869: LD_VAR 0 1
28873: PUSH
28874: LD_EXP 89
28878: IN
28879: NOT
28880: IFFALSE 28884
// exit ;
28882: GO 29124
// index := GetElementIndex ( hackTanks , hack ) ;
28884: LD_ADDR_VAR 0 4
28888: PUSH
28889: LD_EXP 89
28893: PPUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL 36093 0 2
28903: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: DOUBLE
28910: LD_EXP 90
28914: PUSH
28915: LD_VAR 0 4
28919: ARRAY
28920: INC
28921: ST_TO_ADDR
28922: LD_INT 1
28924: PUSH
28925: FOR_DOWNTO
28926: IFFALSE 29098
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28928: LD_ADDR_VAR 0 5
28932: PUSH
28933: LD_EXP 90
28937: PUSH
28938: LD_VAR 0 4
28942: ARRAY
28943: PUSH
28944: LD_VAR 0 3
28948: ARRAY
28949: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28950: LD_VAR 0 5
28954: PUSH
28955: LD_INT 1
28957: ARRAY
28958: PPUSH
28959: CALL_OW 302
28963: NOT
28964: PUSH
28965: LD_VAR 0 5
28969: PUSH
28970: LD_INT 1
28972: ARRAY
28973: PPUSH
28974: CALL_OW 255
28978: PUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 255
28988: NONEQUAL
28989: OR
28990: IFFALSE 29096
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28992: LD_VAR 0 5
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: PPUSH
29001: CALL_OW 305
29005: PUSH
29006: LD_VAR 0 5
29010: PUSH
29011: LD_INT 1
29013: ARRAY
29014: PPUSH
29015: CALL_OW 255
29019: PUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL_OW 255
29029: EQUAL
29030: AND
29031: IFFALSE 29055
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29033: LD_VAR 0 5
29037: PUSH
29038: LD_INT 1
29040: ARRAY
29041: PPUSH
29042: LD_VAR 0 5
29046: PUSH
29047: LD_INT 2
29049: ARRAY
29050: PPUSH
29051: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29055: LD_ADDR_EXP 90
29059: PUSH
29060: LD_EXP 90
29064: PPUSH
29065: LD_VAR 0 4
29069: PPUSH
29070: LD_EXP 90
29074: PUSH
29075: LD_VAR 0 4
29079: ARRAY
29080: PPUSH
29081: LD_VAR 0 3
29085: PPUSH
29086: CALL_OW 3
29090: PPUSH
29091: CALL_OW 1
29095: ST_TO_ADDR
// end ; end ;
29096: GO 28925
29098: POP
29099: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29100: LD_VAR 0 1
29104: PPUSH
29105: LD_EXP 90
29109: PUSH
29110: LD_VAR 0 4
29114: ARRAY
29115: PUSH
29116: LD_INT 0
29118: PLUS
29119: PPUSH
29120: CALL_OW 505
// end ;
29124: LD_VAR 0 2
29128: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29129: LD_INT 0
29131: PPUSH
29132: PPUSH
29133: PPUSH
29134: PPUSH
// if not hack in hackTanks then
29135: LD_VAR 0 1
29139: PUSH
29140: LD_EXP 89
29144: IN
29145: NOT
29146: IFFALSE 29150
// exit ;
29148: GO 29235
// index := GetElementIndex ( hackTanks , hack ) ;
29150: LD_ADDR_VAR 0 5
29154: PUSH
29155: LD_EXP 89
29159: PPUSH
29160: LD_VAR 0 1
29164: PPUSH
29165: CALL 36093 0 2
29169: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29170: LD_ADDR_VAR 0 4
29174: PUSH
29175: DOUBLE
29176: LD_INT 1
29178: DEC
29179: ST_TO_ADDR
29180: LD_EXP 90
29184: PUSH
29185: LD_VAR 0 5
29189: ARRAY
29190: PUSH
29191: FOR_TO
29192: IFFALSE 29233
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29194: LD_EXP 90
29198: PUSH
29199: LD_VAR 0 5
29203: ARRAY
29204: PUSH
29205: LD_VAR 0 4
29209: ARRAY
29210: PUSH
29211: LD_INT 1
29213: ARRAY
29214: PUSH
29215: LD_VAR 0 2
29219: EQUAL
29220: IFFALSE 29231
// KillUnit ( vehicle ) ;
29222: LD_VAR 0 2
29226: PPUSH
29227: CALL_OW 66
29231: GO 29191
29233: POP
29234: POP
// end ;
29235: LD_VAR 0 3
29239: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29240: LD_EXP 94
29244: NOT
29245: IFFALSE 29280
29247: GO 29249
29249: DISABLE
// begin initMiner := true ;
29250: LD_ADDR_EXP 94
29254: PUSH
29255: LD_INT 1
29257: ST_TO_ADDR
// minersList := [ ] ;
29258: LD_ADDR_EXP 95
29262: PUSH
29263: EMPTY
29264: ST_TO_ADDR
// minerMinesList := [ ] ;
29265: LD_ADDR_EXP 96
29269: PUSH
29270: EMPTY
29271: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29272: LD_ADDR_EXP 97
29276: PUSH
29277: LD_INT 5
29279: ST_TO_ADDR
// end ;
29280: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29281: LD_EXP 94
29285: PUSH
29286: LD_INT 34
29288: PUSH
29289: LD_INT 81
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PPUSH
29296: CALL_OW 69
29300: AND
29301: IFFALSE 29762
29303: GO 29305
29305: DISABLE
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
// begin enable ;
29312: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29313: LD_ADDR_VAR 0 1
29317: PUSH
29318: LD_INT 34
29320: PUSH
29321: LD_INT 81
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: PUSH
29333: FOR_IN
29334: IFFALSE 29406
// begin if not i in minersList then
29336: LD_VAR 0 1
29340: PUSH
29341: LD_EXP 95
29345: IN
29346: NOT
29347: IFFALSE 29404
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29349: LD_ADDR_EXP 95
29353: PUSH
29354: LD_EXP 95
29358: PPUSH
29359: LD_EXP 95
29363: PUSH
29364: LD_INT 1
29366: PLUS
29367: PPUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: CALL_OW 1
29377: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29378: LD_ADDR_EXP 96
29382: PUSH
29383: LD_EXP 96
29387: PPUSH
29388: LD_EXP 96
29392: PUSH
29393: LD_INT 1
29395: PLUS
29396: PPUSH
29397: EMPTY
29398: PPUSH
29399: CALL_OW 1
29403: ST_TO_ADDR
// end end ;
29404: GO 29333
29406: POP
29407: POP
// for i := minerMinesList downto 1 do
29408: LD_ADDR_VAR 0 1
29412: PUSH
29413: DOUBLE
29414: LD_EXP 96
29418: INC
29419: ST_TO_ADDR
29420: LD_INT 1
29422: PUSH
29423: FOR_DOWNTO
29424: IFFALSE 29760
// begin if IsLive ( minersList [ i ] ) then
29426: LD_EXP 95
29430: PUSH
29431: LD_VAR 0 1
29435: ARRAY
29436: PPUSH
29437: CALL_OW 300
29441: IFFALSE 29469
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29443: LD_EXP 95
29447: PUSH
29448: LD_VAR 0 1
29452: ARRAY
29453: PPUSH
29454: LD_EXP 96
29458: PUSH
29459: LD_VAR 0 1
29463: ARRAY
29464: PPUSH
29465: CALL_OW 505
// if not minerMinesList [ i ] then
29469: LD_EXP 96
29473: PUSH
29474: LD_VAR 0 1
29478: ARRAY
29479: NOT
29480: IFFALSE 29484
// continue ;
29482: GO 29423
// for j := minerMinesList [ i ] downto 1 do
29484: LD_ADDR_VAR 0 2
29488: PUSH
29489: DOUBLE
29490: LD_EXP 96
29494: PUSH
29495: LD_VAR 0 1
29499: ARRAY
29500: INC
29501: ST_TO_ADDR
29502: LD_INT 1
29504: PUSH
29505: FOR_DOWNTO
29506: IFFALSE 29756
// begin side := GetSide ( minersList [ i ] ) ;
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_EXP 95
29517: PUSH
29518: LD_VAR 0 1
29522: ARRAY
29523: PPUSH
29524: CALL_OW 255
29528: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29529: LD_ADDR_VAR 0 4
29533: PUSH
29534: LD_EXP 96
29538: PUSH
29539: LD_VAR 0 1
29543: ARRAY
29544: PUSH
29545: LD_VAR 0 2
29549: ARRAY
29550: PUSH
29551: LD_INT 1
29553: ARRAY
29554: PPUSH
29555: LD_EXP 96
29559: PUSH
29560: LD_VAR 0 1
29564: ARRAY
29565: PUSH
29566: LD_VAR 0 2
29570: ARRAY
29571: PUSH
29572: LD_INT 2
29574: ARRAY
29575: PPUSH
29576: CALL_OW 428
29580: ST_TO_ADDR
// if not tmp then
29581: LD_VAR 0 4
29585: NOT
29586: IFFALSE 29590
// continue ;
29588: GO 29505
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29590: LD_VAR 0 4
29594: PUSH
29595: LD_INT 81
29597: PUSH
29598: LD_VAR 0 3
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 69
29611: IN
29612: PUSH
29613: LD_EXP 96
29617: PUSH
29618: LD_VAR 0 1
29622: ARRAY
29623: PUSH
29624: LD_VAR 0 2
29628: ARRAY
29629: PUSH
29630: LD_INT 1
29632: ARRAY
29633: PPUSH
29634: LD_EXP 96
29638: PUSH
29639: LD_VAR 0 1
29643: ARRAY
29644: PUSH
29645: LD_VAR 0 2
29649: ARRAY
29650: PUSH
29651: LD_INT 2
29653: ARRAY
29654: PPUSH
29655: CALL_OW 458
29659: AND
29660: IFFALSE 29754
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29662: LD_EXP 96
29666: PUSH
29667: LD_VAR 0 1
29671: ARRAY
29672: PUSH
29673: LD_VAR 0 2
29677: ARRAY
29678: PUSH
29679: LD_INT 1
29681: ARRAY
29682: PPUSH
29683: LD_EXP 96
29687: PUSH
29688: LD_VAR 0 1
29692: ARRAY
29693: PUSH
29694: LD_VAR 0 2
29698: ARRAY
29699: PUSH
29700: LD_INT 2
29702: ARRAY
29703: PPUSH
29704: LD_VAR 0 3
29708: PPUSH
29709: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29713: LD_ADDR_EXP 96
29717: PUSH
29718: LD_EXP 96
29722: PPUSH
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_EXP 96
29732: PUSH
29733: LD_VAR 0 1
29737: ARRAY
29738: PPUSH
29739: LD_VAR 0 2
29743: PPUSH
29744: CALL_OW 3
29748: PPUSH
29749: CALL_OW 1
29753: ST_TO_ADDR
// end ; end ;
29754: GO 29505
29756: POP
29757: POP
// end ;
29758: GO 29423
29760: POP
29761: POP
// end ;
29762: PPOPN 4
29764: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29765: LD_INT 0
29767: PPUSH
29768: PPUSH
// result := false ;
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: LD_INT 0
29776: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 264
29786: PUSH
29787: LD_INT 81
29789: EQUAL
29790: NOT
29791: IFFALSE 29795
// exit ;
29793: GO 30035
// index := GetElementIndex ( minersList , unit ) ;
29795: LD_ADDR_VAR 0 5
29799: PUSH
29800: LD_EXP 95
29804: PPUSH
29805: LD_VAR 0 1
29809: PPUSH
29810: CALL 36093 0 2
29814: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29815: LD_EXP 96
29819: PUSH
29820: LD_VAR 0 5
29824: ARRAY
29825: PUSH
29826: LD_EXP 97
29830: GREATEREQUAL
29831: IFFALSE 29835
// exit ;
29833: GO 30035
// ComMoveXY ( unit , x , y ) ;
29835: LD_VAR 0 1
29839: PPUSH
29840: LD_VAR 0 2
29844: PPUSH
29845: LD_VAR 0 3
29849: PPUSH
29850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29854: LD_INT 35
29856: PPUSH
29857: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29861: LD_VAR 0 1
29865: PPUSH
29866: LD_VAR 0 2
29870: PPUSH
29871: LD_VAR 0 3
29875: PPUSH
29876: CALL 67854 0 3
29880: NOT
29881: PUSH
29882: LD_VAR 0 1
29886: PPUSH
29887: CALL_OW 314
29891: AND
29892: IFFALSE 29896
// exit ;
29894: GO 30035
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29896: LD_VAR 0 2
29900: PPUSH
29901: LD_VAR 0 3
29905: PPUSH
29906: CALL_OW 428
29910: PUSH
29911: LD_VAR 0 1
29915: EQUAL
29916: PUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 314
29926: NOT
29927: AND
29928: IFFALSE 29854
// PlaySoundXY ( x , y , PlantMine ) ;
29930: LD_VAR 0 2
29934: PPUSH
29935: LD_VAR 0 3
29939: PPUSH
29940: LD_STRING PlantMine
29942: PPUSH
29943: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29947: LD_VAR 0 2
29951: PPUSH
29952: LD_VAR 0 3
29956: PPUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 255
29966: PPUSH
29967: LD_INT 0
29969: PPUSH
29970: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29974: LD_ADDR_EXP 96
29978: PUSH
29979: LD_EXP 96
29983: PPUSH
29984: LD_VAR 0 5
29988: PUSH
29989: LD_EXP 96
29993: PUSH
29994: LD_VAR 0 5
29998: ARRAY
29999: PUSH
30000: LD_INT 1
30002: PLUS
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PPUSH
30008: LD_VAR 0 2
30012: PUSH
30013: LD_VAR 0 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PPUSH
30022: CALL 36308 0 3
30026: ST_TO_ADDR
// result := true ;
30027: LD_ADDR_VAR 0 4
30031: PUSH
30032: LD_INT 1
30034: ST_TO_ADDR
// end ;
30035: LD_VAR 0 4
30039: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30040: LD_INT 0
30042: PPUSH
30043: PPUSH
30044: PPUSH
// if not unit in minersList then
30045: LD_VAR 0 1
30049: PUSH
30050: LD_EXP 95
30054: IN
30055: NOT
30056: IFFALSE 30060
// exit ;
30058: GO 30452
// index := GetElementIndex ( minersList , unit ) ;
30060: LD_ADDR_VAR 0 6
30064: PUSH
30065: LD_EXP 95
30069: PPUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL 36093 0 2
30079: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: DOUBLE
30086: LD_EXP 96
30090: PUSH
30091: LD_VAR 0 6
30095: ARRAY
30096: INC
30097: ST_TO_ADDR
30098: LD_INT 1
30100: PUSH
30101: FOR_DOWNTO
30102: IFFALSE 30263
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30104: LD_EXP 96
30108: PUSH
30109: LD_VAR 0 6
30113: ARRAY
30114: PUSH
30115: LD_VAR 0 5
30119: ARRAY
30120: PUSH
30121: LD_INT 1
30123: ARRAY
30124: PUSH
30125: LD_VAR 0 2
30129: EQUAL
30130: PUSH
30131: LD_EXP 96
30135: PUSH
30136: LD_VAR 0 6
30140: ARRAY
30141: PUSH
30142: LD_VAR 0 5
30146: ARRAY
30147: PUSH
30148: LD_INT 2
30150: ARRAY
30151: PUSH
30152: LD_VAR 0 3
30156: EQUAL
30157: AND
30158: IFFALSE 30261
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30160: LD_EXP 96
30164: PUSH
30165: LD_VAR 0 6
30169: ARRAY
30170: PUSH
30171: LD_VAR 0 5
30175: ARRAY
30176: PUSH
30177: LD_INT 1
30179: ARRAY
30180: PPUSH
30181: LD_EXP 96
30185: PUSH
30186: LD_VAR 0 6
30190: ARRAY
30191: PUSH
30192: LD_VAR 0 5
30196: ARRAY
30197: PUSH
30198: LD_INT 2
30200: ARRAY
30201: PPUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 255
30211: PPUSH
30212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30216: LD_ADDR_EXP 96
30220: PUSH
30221: LD_EXP 96
30225: PPUSH
30226: LD_VAR 0 6
30230: PPUSH
30231: LD_EXP 96
30235: PUSH
30236: LD_VAR 0 6
30240: ARRAY
30241: PPUSH
30242: LD_VAR 0 5
30246: PPUSH
30247: CALL_OW 3
30251: PPUSH
30252: CALL_OW 1
30256: ST_TO_ADDR
// exit ;
30257: POP
30258: POP
30259: GO 30452
// end ; end ;
30261: GO 30101
30263: POP
30264: POP
// for i := minerMinesList [ index ] downto 1 do
30265: LD_ADDR_VAR 0 5
30269: PUSH
30270: DOUBLE
30271: LD_EXP 96
30275: PUSH
30276: LD_VAR 0 6
30280: ARRAY
30281: INC
30282: ST_TO_ADDR
30283: LD_INT 1
30285: PUSH
30286: FOR_DOWNTO
30287: IFFALSE 30450
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30289: LD_EXP 96
30293: PUSH
30294: LD_VAR 0 6
30298: ARRAY
30299: PUSH
30300: LD_VAR 0 5
30304: ARRAY
30305: PUSH
30306: LD_INT 1
30308: ARRAY
30309: PPUSH
30310: LD_EXP 96
30314: PUSH
30315: LD_VAR 0 6
30319: ARRAY
30320: PUSH
30321: LD_VAR 0 5
30325: ARRAY
30326: PUSH
30327: LD_INT 2
30329: ARRAY
30330: PPUSH
30331: LD_VAR 0 2
30335: PPUSH
30336: LD_VAR 0 3
30340: PPUSH
30341: CALL_OW 298
30345: PUSH
30346: LD_INT 6
30348: LESS
30349: IFFALSE 30448
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30351: LD_EXP 96
30355: PUSH
30356: LD_VAR 0 6
30360: ARRAY
30361: PUSH
30362: LD_VAR 0 5
30366: ARRAY
30367: PUSH
30368: LD_INT 1
30370: ARRAY
30371: PPUSH
30372: LD_EXP 96
30376: PUSH
30377: LD_VAR 0 6
30381: ARRAY
30382: PUSH
30383: LD_VAR 0 5
30387: ARRAY
30388: PUSH
30389: LD_INT 2
30391: ARRAY
30392: PPUSH
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 255
30402: PPUSH
30403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30407: LD_ADDR_EXP 96
30411: PUSH
30412: LD_EXP 96
30416: PPUSH
30417: LD_VAR 0 6
30421: PPUSH
30422: LD_EXP 96
30426: PUSH
30427: LD_VAR 0 6
30431: ARRAY
30432: PPUSH
30433: LD_VAR 0 5
30437: PPUSH
30438: CALL_OW 3
30442: PPUSH
30443: CALL_OW 1
30447: ST_TO_ADDR
// end ; end ;
30448: GO 30286
30450: POP
30451: POP
// end ;
30452: LD_VAR 0 4
30456: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30457: LD_INT 0
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 264
30477: PUSH
30478: LD_INT 81
30480: EQUAL
30481: NOT
30482: PUSH
30483: LD_VAR 0 1
30487: PUSH
30488: LD_EXP 95
30492: IN
30493: NOT
30494: OR
30495: IFFALSE 30499
// exit ;
30497: GO 30821
// index := GetElementIndex ( minersList , unit ) ;
30499: LD_ADDR_VAR 0 6
30503: PUSH
30504: LD_EXP 95
30508: PPUSH
30509: LD_VAR 0 1
30513: PPUSH
30514: CALL 36093 0 2
30518: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30519: LD_ADDR_VAR 0 8
30523: PUSH
30524: LD_EXP 97
30528: PUSH
30529: LD_EXP 96
30533: PUSH
30534: LD_VAR 0 6
30538: ARRAY
30539: MINUS
30540: ST_TO_ADDR
// if not minesFreeAmount then
30541: LD_VAR 0 8
30545: NOT
30546: IFFALSE 30550
// exit ;
30548: GO 30821
// tmp := [ ] ;
30550: LD_ADDR_VAR 0 7
30554: PUSH
30555: EMPTY
30556: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30557: LD_ADDR_VAR 0 5
30561: PUSH
30562: DOUBLE
30563: LD_INT 1
30565: DEC
30566: ST_TO_ADDR
30567: LD_VAR 0 8
30571: PUSH
30572: FOR_TO
30573: IFFALSE 30768
// begin _d := rand ( 0 , 5 ) ;
30575: LD_ADDR_VAR 0 11
30579: PUSH
30580: LD_INT 0
30582: PPUSH
30583: LD_INT 5
30585: PPUSH
30586: CALL_OW 12
30590: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30591: LD_ADDR_VAR 0 12
30595: PUSH
30596: LD_INT 2
30598: PPUSH
30599: LD_INT 6
30601: PPUSH
30602: CALL_OW 12
30606: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30607: LD_ADDR_VAR 0 9
30611: PUSH
30612: LD_VAR 0 2
30616: PPUSH
30617: LD_VAR 0 11
30621: PPUSH
30622: LD_VAR 0 12
30626: PPUSH
30627: CALL_OW 272
30631: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30632: LD_ADDR_VAR 0 10
30636: PUSH
30637: LD_VAR 0 3
30641: PPUSH
30642: LD_VAR 0 11
30646: PPUSH
30647: LD_VAR 0 12
30651: PPUSH
30652: CALL_OW 273
30656: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30657: LD_VAR 0 9
30661: PPUSH
30662: LD_VAR 0 10
30666: PPUSH
30667: CALL_OW 488
30671: PUSH
30672: LD_VAR 0 9
30676: PUSH
30677: LD_VAR 0 10
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_VAR 0 7
30690: IN
30691: NOT
30692: AND
30693: PUSH
30694: LD_VAR 0 9
30698: PPUSH
30699: LD_VAR 0 10
30703: PPUSH
30704: CALL_OW 458
30708: NOT
30709: AND
30710: IFFALSE 30752
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30712: LD_ADDR_VAR 0 7
30716: PUSH
30717: LD_VAR 0 7
30721: PPUSH
30722: LD_VAR 0 7
30726: PUSH
30727: LD_INT 1
30729: PLUS
30730: PPUSH
30731: LD_VAR 0 9
30735: PUSH
30736: LD_VAR 0 10
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 1
30749: ST_TO_ADDR
30750: GO 30766
// i := i - 1 ;
30752: LD_ADDR_VAR 0 5
30756: PUSH
30757: LD_VAR 0 5
30761: PUSH
30762: LD_INT 1
30764: MINUS
30765: ST_TO_ADDR
// end ;
30766: GO 30572
30768: POP
30769: POP
// for i in tmp do
30770: LD_ADDR_VAR 0 5
30774: PUSH
30775: LD_VAR 0 7
30779: PUSH
30780: FOR_IN
30781: IFFALSE 30819
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_VAR 0 5
30792: PUSH
30793: LD_INT 1
30795: ARRAY
30796: PPUSH
30797: LD_VAR 0 5
30801: PUSH
30802: LD_INT 2
30804: ARRAY
30805: PPUSH
30806: CALL 29765 0 3
30810: NOT
30811: IFFALSE 30817
// exit ;
30813: POP
30814: POP
30815: GO 30821
30817: GO 30780
30819: POP
30820: POP
// end ;
30821: LD_VAR 0 4
30825: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
30826: LD_INT 0
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
// if GetClass ( unit ) <> class_sniper then
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 257
30846: PUSH
30847: LD_INT 5
30849: NONEQUAL
30850: IFFALSE 30854
// exit ;
30852: GO 31320
// dist := 8 ;
30854: LD_ADDR_VAR 0 5
30858: PUSH
30859: LD_INT 8
30861: ST_TO_ADDR
// viewRange := 12 ;
30862: LD_ADDR_VAR 0 8
30866: PUSH
30867: LD_INT 12
30869: ST_TO_ADDR
// side := GetSide ( unit ) ;
30870: LD_ADDR_VAR 0 6
30874: PUSH
30875: LD_VAR 0 1
30879: PPUSH
30880: CALL_OW 255
30884: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30885: LD_INT 61
30887: PPUSH
30888: LD_VAR 0 6
30892: PPUSH
30893: CALL_OW 321
30897: PUSH
30898: LD_INT 2
30900: EQUAL
30901: IFFALSE 30911
// viewRange := 16 ;
30903: LD_ADDR_VAR 0 8
30907: PUSH
30908: LD_INT 16
30910: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30911: LD_VAR 0 1
30915: PPUSH
30916: LD_VAR 0 2
30920: PPUSH
30921: LD_VAR 0 3
30925: PPUSH
30926: CALL_OW 297
30930: PUSH
30931: LD_VAR 0 5
30935: GREATER
30936: IFFALSE 31015
// begin ComMoveXY ( unit , x , y ) ;
30938: LD_VAR 0 1
30942: PPUSH
30943: LD_VAR 0 2
30947: PPUSH
30948: LD_VAR 0 3
30952: PPUSH
30953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30957: LD_INT 35
30959: PPUSH
30960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30964: LD_VAR 0 1
30968: PPUSH
30969: LD_VAR 0 2
30973: PPUSH
30974: LD_VAR 0 3
30978: PPUSH
30979: CALL 67854 0 3
30983: NOT
30984: IFFALSE 30988
// exit ;
30986: GO 31320
// until GetDistUnitXY ( unit , x , y ) < dist ;
30988: LD_VAR 0 1
30992: PPUSH
30993: LD_VAR 0 2
30997: PPUSH
30998: LD_VAR 0 3
31002: PPUSH
31003: CALL_OW 297
31007: PUSH
31008: LD_VAR 0 5
31012: LESS
31013: IFFALSE 30957
// end ; ComTurnXY ( unit , x , y ) ;
31015: LD_VAR 0 1
31019: PPUSH
31020: LD_VAR 0 2
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: CALL_OW 118
// repeat if Multiplayer then
31034: LD_OWVAR 4
31038: IFFALSE 31049
// wait ( 35 ) else
31040: LD_INT 35
31042: PPUSH
31043: CALL_OW 67
31047: GO 31056
// wait ( 5 ) ;
31049: LD_INT 5
31051: PPUSH
31052: CALL_OW 67
// _d := GetDir ( unit ) ;
31056: LD_ADDR_VAR 0 11
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 254
31070: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
31071: LD_ADDR_VAR 0 7
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 250
31085: PPUSH
31086: LD_VAR 0 1
31090: PPUSH
31091: CALL_OW 251
31095: PPUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: LD_VAR 0 3
31105: PPUSH
31106: CALL 70462 0 4
31110: ST_TO_ADDR
// until dir = _d ;
31111: LD_VAR 0 7
31115: PUSH
31116: LD_VAR 0 11
31120: EQUAL
31121: IFFALSE 31034
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
31123: LD_ADDR_VAR 0 9
31127: PUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 250
31137: PPUSH
31138: LD_VAR 0 7
31142: PPUSH
31143: LD_VAR 0 5
31147: PPUSH
31148: CALL_OW 272
31152: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
31153: LD_ADDR_VAR 0 10
31157: PUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 251
31167: PPUSH
31168: LD_VAR 0 7
31172: PPUSH
31173: LD_VAR 0 5
31177: PPUSH
31178: CALL_OW 273
31182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31183: LD_VAR 0 9
31187: PPUSH
31188: LD_VAR 0 10
31192: PPUSH
31193: CALL_OW 488
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31320
// ComAnimCustom ( unit , 1 ) ;
31202: LD_VAR 0 1
31206: PPUSH
31207: LD_INT 1
31209: PPUSH
31210: CALL_OW 592
// p := 0 ;
31214: LD_ADDR_VAR 0 12
31218: PUSH
31219: LD_INT 0
31221: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31222: LD_VAR 0 9
31226: PPUSH
31227: LD_VAR 0 10
31231: PPUSH
31232: LD_VAR 0 6
31236: PPUSH
31237: LD_VAR 0 8
31241: PPUSH
31242: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
31246: LD_INT 35
31248: PPUSH
31249: CALL_OW 67
// p := Inc ( p ) ;
31253: LD_ADDR_VAR 0 12
31257: PUSH
31258: LD_VAR 0 12
31262: PPUSH
31263: CALL 70418 0 1
31267: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
31268: LD_VAR 0 12
31272: PUSH
31273: LD_INT 3
31275: EQUAL
31276: PUSH
31277: LD_VAR 0 1
31281: PPUSH
31282: CALL_OW 302
31286: NOT
31287: OR
31288: PUSH
31289: LD_VAR 0 1
31293: PPUSH
31294: CALL_OW 301
31298: OR
31299: IFFALSE 31246
// RemoveSeeing ( _x , _y , side ) ;
31301: LD_VAR 0 9
31305: PPUSH
31306: LD_VAR 0 10
31310: PPUSH
31311: LD_VAR 0 6
31315: PPUSH
31316: CALL_OW 331
// end ; end_of_file
31320: LD_VAR 0 4
31324: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
// if exist_mode then
31329: LD_VAR 0 2
31333: IFFALSE 31379
// begin unit := CreateCharacter ( prefix & ident ) ;
31335: LD_ADDR_VAR 0 5
31339: PUSH
31340: LD_VAR 0 3
31344: PUSH
31345: LD_VAR 0 1
31349: STR
31350: PPUSH
31351: CALL_OW 34
31355: ST_TO_ADDR
// if unit then
31356: LD_VAR 0 5
31360: IFFALSE 31377
// DeleteCharacters ( prefix & ident ) ;
31362: LD_VAR 0 3
31366: PUSH
31367: LD_VAR 0 1
31371: STR
31372: PPUSH
31373: CALL_OW 40
// end else
31377: GO 31394
// unit := NewCharacter ( ident ) ;
31379: LD_ADDR_VAR 0 5
31383: PUSH
31384: LD_VAR 0 1
31388: PPUSH
31389: CALL_OW 25
31393: ST_TO_ADDR
// result := unit ;
31394: LD_ADDR_VAR 0 4
31398: PUSH
31399: LD_VAR 0 5
31403: ST_TO_ADDR
// end ;
31404: LD_VAR 0 4
31408: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31409: LD_INT 0
31411: PPUSH
31412: PPUSH
// if not side or not nation then
31413: LD_VAR 0 1
31417: NOT
31418: PUSH
31419: LD_VAR 0 2
31423: NOT
31424: OR
31425: IFFALSE 31429
// exit ;
31427: GO 32197
// case nation of nation_american :
31429: LD_VAR 0 2
31433: PUSH
31434: LD_INT 1
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31656
31442: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31443: LD_ADDR_VAR 0 4
31447: PUSH
31448: LD_INT 35
31450: PUSH
31451: LD_INT 45
31453: PUSH
31454: LD_INT 46
31456: PUSH
31457: LD_INT 47
31459: PUSH
31460: LD_INT 82
31462: PUSH
31463: LD_INT 83
31465: PUSH
31466: LD_INT 84
31468: PUSH
31469: LD_INT 85
31471: PUSH
31472: LD_INT 86
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: LD_INT 6
31483: PUSH
31484: LD_INT 15
31486: PUSH
31487: LD_INT 16
31489: PUSH
31490: LD_INT 7
31492: PUSH
31493: LD_INT 12
31495: PUSH
31496: LD_INT 13
31498: PUSH
31499: LD_INT 10
31501: PUSH
31502: LD_INT 14
31504: PUSH
31505: LD_INT 20
31507: PUSH
31508: LD_INT 21
31510: PUSH
31511: LD_INT 22
31513: PUSH
31514: LD_INT 25
31516: PUSH
31517: LD_INT 32
31519: PUSH
31520: LD_INT 27
31522: PUSH
31523: LD_INT 36
31525: PUSH
31526: LD_INT 69
31528: PUSH
31529: LD_INT 39
31531: PUSH
31532: LD_INT 34
31534: PUSH
31535: LD_INT 40
31537: PUSH
31538: LD_INT 48
31540: PUSH
31541: LD_INT 49
31543: PUSH
31544: LD_INT 50
31546: PUSH
31547: LD_INT 51
31549: PUSH
31550: LD_INT 52
31552: PUSH
31553: LD_INT 53
31555: PUSH
31556: LD_INT 54
31558: PUSH
31559: LD_INT 55
31561: PUSH
31562: LD_INT 56
31564: PUSH
31565: LD_INT 57
31567: PUSH
31568: LD_INT 58
31570: PUSH
31571: LD_INT 59
31573: PUSH
31574: LD_INT 60
31576: PUSH
31577: LD_INT 61
31579: PUSH
31580: LD_INT 62
31582: PUSH
31583: LD_INT 80
31585: PUSH
31586: LD_INT 82
31588: PUSH
31589: LD_INT 83
31591: PUSH
31592: LD_INT 84
31594: PUSH
31595: LD_INT 85
31597: PUSH
31598: LD_INT 86
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
31654: GO 32121
31656: LD_INT 2
31658: DOUBLE
31659: EQUAL
31660: IFTRUE 31664
31662: GO 31890
31664: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31665: LD_ADDR_VAR 0 4
31669: PUSH
31670: LD_INT 35
31672: PUSH
31673: LD_INT 45
31675: PUSH
31676: LD_INT 46
31678: PUSH
31679: LD_INT 47
31681: PUSH
31682: LD_INT 82
31684: PUSH
31685: LD_INT 83
31687: PUSH
31688: LD_INT 84
31690: PUSH
31691: LD_INT 85
31693: PUSH
31694: LD_INT 87
31696: PUSH
31697: LD_INT 70
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 11
31705: PUSH
31706: LD_INT 3
31708: PUSH
31709: LD_INT 4
31711: PUSH
31712: LD_INT 5
31714: PUSH
31715: LD_INT 6
31717: PUSH
31718: LD_INT 15
31720: PUSH
31721: LD_INT 18
31723: PUSH
31724: LD_INT 7
31726: PUSH
31727: LD_INT 17
31729: PUSH
31730: LD_INT 8
31732: PUSH
31733: LD_INT 20
31735: PUSH
31736: LD_INT 21
31738: PUSH
31739: LD_INT 22
31741: PUSH
31742: LD_INT 72
31744: PUSH
31745: LD_INT 26
31747: PUSH
31748: LD_INT 69
31750: PUSH
31751: LD_INT 39
31753: PUSH
31754: LD_INT 40
31756: PUSH
31757: LD_INT 41
31759: PUSH
31760: LD_INT 42
31762: PUSH
31763: LD_INT 43
31765: PUSH
31766: LD_INT 48
31768: PUSH
31769: LD_INT 49
31771: PUSH
31772: LD_INT 50
31774: PUSH
31775: LD_INT 51
31777: PUSH
31778: LD_INT 52
31780: PUSH
31781: LD_INT 53
31783: PUSH
31784: LD_INT 54
31786: PUSH
31787: LD_INT 55
31789: PUSH
31790: LD_INT 56
31792: PUSH
31793: LD_INT 60
31795: PUSH
31796: LD_INT 61
31798: PUSH
31799: LD_INT 62
31801: PUSH
31802: LD_INT 66
31804: PUSH
31805: LD_INT 67
31807: PUSH
31808: LD_INT 68
31810: PUSH
31811: LD_INT 81
31813: PUSH
31814: LD_INT 82
31816: PUSH
31817: LD_INT 83
31819: PUSH
31820: LD_INT 84
31822: PUSH
31823: LD_INT 85
31825: PUSH
31826: LD_INT 87
31828: PUSH
31829: LD_INT 88
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
31888: GO 32121
31890: LD_INT 3
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 32120
31898: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31899: LD_ADDR_VAR 0 4
31903: PUSH
31904: LD_INT 46
31906: PUSH
31907: LD_INT 47
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: LD_INT 82
31918: PUSH
31919: LD_INT 83
31921: PUSH
31922: LD_INT 84
31924: PUSH
31925: LD_INT 85
31927: PUSH
31928: LD_INT 86
31930: PUSH
31931: LD_INT 11
31933: PUSH
31934: LD_INT 9
31936: PUSH
31937: LD_INT 20
31939: PUSH
31940: LD_INT 19
31942: PUSH
31943: LD_INT 21
31945: PUSH
31946: LD_INT 24
31948: PUSH
31949: LD_INT 22
31951: PUSH
31952: LD_INT 25
31954: PUSH
31955: LD_INT 28
31957: PUSH
31958: LD_INT 29
31960: PUSH
31961: LD_INT 30
31963: PUSH
31964: LD_INT 31
31966: PUSH
31967: LD_INT 37
31969: PUSH
31970: LD_INT 38
31972: PUSH
31973: LD_INT 32
31975: PUSH
31976: LD_INT 27
31978: PUSH
31979: LD_INT 33
31981: PUSH
31982: LD_INT 69
31984: PUSH
31985: LD_INT 39
31987: PUSH
31988: LD_INT 34
31990: PUSH
31991: LD_INT 40
31993: PUSH
31994: LD_INT 71
31996: PUSH
31997: LD_INT 23
31999: PUSH
32000: LD_INT 44
32002: PUSH
32003: LD_INT 48
32005: PUSH
32006: LD_INT 49
32008: PUSH
32009: LD_INT 50
32011: PUSH
32012: LD_INT 51
32014: PUSH
32015: LD_INT 52
32017: PUSH
32018: LD_INT 53
32020: PUSH
32021: LD_INT 54
32023: PUSH
32024: LD_INT 55
32026: PUSH
32027: LD_INT 56
32029: PUSH
32030: LD_INT 57
32032: PUSH
32033: LD_INT 58
32035: PUSH
32036: LD_INT 59
32038: PUSH
32039: LD_INT 63
32041: PUSH
32042: LD_INT 64
32044: PUSH
32045: LD_INT 65
32047: PUSH
32048: LD_INT 82
32050: PUSH
32051: LD_INT 83
32053: PUSH
32054: LD_INT 84
32056: PUSH
32057: LD_INT 85
32059: PUSH
32060: LD_INT 86
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: ST_TO_ADDR
32118: GO 32121
32120: POP
// if state > - 1 and state < 3 then
32121: LD_VAR 0 3
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: GREATER
32130: PUSH
32131: LD_VAR 0 3
32135: PUSH
32136: LD_INT 3
32138: LESS
32139: AND
32140: IFFALSE 32197
// for i in result do
32142: LD_ADDR_VAR 0 5
32146: PUSH
32147: LD_VAR 0 4
32151: PUSH
32152: FOR_IN
32153: IFFALSE 32195
// if GetTech ( i , side ) <> state then
32155: LD_VAR 0 5
32159: PPUSH
32160: LD_VAR 0 1
32164: PPUSH
32165: CALL_OW 321
32169: PUSH
32170: LD_VAR 0 3
32174: NONEQUAL
32175: IFFALSE 32193
// result := result diff i ;
32177: LD_ADDR_VAR 0 4
32181: PUSH
32182: LD_VAR 0 4
32186: PUSH
32187: LD_VAR 0 5
32191: DIFF
32192: ST_TO_ADDR
32193: GO 32152
32195: POP
32196: POP
// end ;
32197: LD_VAR 0 4
32201: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32202: LD_INT 0
32204: PPUSH
32205: PPUSH
32206: PPUSH
// result := true ;
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_INT 1
32214: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32215: LD_ADDR_VAR 0 5
32219: PUSH
32220: LD_VAR 0 2
32224: PPUSH
32225: CALL_OW 480
32229: ST_TO_ADDR
// if not tmp then
32230: LD_VAR 0 5
32234: NOT
32235: IFFALSE 32239
// exit ;
32237: GO 32288
// for i in tmp do
32239: LD_ADDR_VAR 0 4
32243: PUSH
32244: LD_VAR 0 5
32248: PUSH
32249: FOR_IN
32250: IFFALSE 32286
// if GetTech ( i , side ) <> state_researched then
32252: LD_VAR 0 4
32256: PPUSH
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 321
32266: PUSH
32267: LD_INT 2
32269: NONEQUAL
32270: IFFALSE 32284
// begin result := false ;
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: LD_INT 0
32279: ST_TO_ADDR
// exit ;
32280: POP
32281: POP
32282: GO 32288
// end ;
32284: GO 32249
32286: POP
32287: POP
// end ;
32288: LD_VAR 0 3
32292: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32293: LD_INT 0
32295: PPUSH
32296: PPUSH
32297: PPUSH
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32308: LD_VAR 0 1
32312: NOT
32313: PUSH
32314: LD_VAR 0 1
32318: PPUSH
32319: CALL_OW 257
32323: PUSH
32324: LD_INT 9
32326: NONEQUAL
32327: OR
32328: IFFALSE 32332
// exit ;
32330: GO 32905
// side := GetSide ( unit ) ;
32332: LD_ADDR_VAR 0 9
32336: PUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: CALL_OW 255
32346: ST_TO_ADDR
// tech_space := tech_spacanom ;
32347: LD_ADDR_VAR 0 12
32351: PUSH
32352: LD_INT 29
32354: ST_TO_ADDR
// tech_time := tech_taurad ;
32355: LD_ADDR_VAR 0 13
32359: PUSH
32360: LD_INT 28
32362: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32363: LD_ADDR_VAR 0 11
32367: PUSH
32368: LD_VAR 0 1
32372: PPUSH
32373: CALL_OW 310
32377: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32378: LD_VAR 0 11
32382: PPUSH
32383: CALL_OW 247
32387: PUSH
32388: LD_INT 2
32390: EQUAL
32391: IFFALSE 32395
// exit ;
32393: GO 32905
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32395: LD_ADDR_VAR 0 8
32399: PUSH
32400: LD_INT 81
32402: PUSH
32403: LD_VAR 0 9
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 3
32414: PUSH
32415: LD_INT 21
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PPUSH
32433: CALL_OW 69
32437: ST_TO_ADDR
// if not tmp then
32438: LD_VAR 0 8
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 32905
// if in_unit then
32447: LD_VAR 0 11
32451: IFFALSE 32475
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32453: LD_ADDR_VAR 0 10
32457: PUSH
32458: LD_VAR 0 8
32462: PPUSH
32463: LD_VAR 0 11
32467: PPUSH
32468: CALL_OW 74
32472: ST_TO_ADDR
32473: GO 32495
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32475: LD_ADDR_VAR 0 10
32479: PUSH
32480: LD_VAR 0 8
32484: PPUSH
32485: LD_VAR 0 1
32489: PPUSH
32490: CALL_OW 74
32494: ST_TO_ADDR
// if not enemy then
32495: LD_VAR 0 10
32499: NOT
32500: IFFALSE 32504
// exit ;
32502: GO 32905
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32504: LD_VAR 0 11
32508: PUSH
32509: LD_VAR 0 11
32513: PPUSH
32514: LD_VAR 0 10
32518: PPUSH
32519: CALL_OW 296
32523: PUSH
32524: LD_INT 13
32526: GREATER
32527: AND
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: LD_VAR 0 10
32538: PPUSH
32539: CALL_OW 296
32543: PUSH
32544: LD_INT 12
32546: GREATER
32547: OR
32548: IFFALSE 32552
// exit ;
32550: GO 32905
// missile := [ 1 ] ;
32552: LD_ADDR_VAR 0 14
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32563: LD_VAR 0 9
32567: PPUSH
32568: LD_VAR 0 12
32572: PPUSH
32573: CALL_OW 325
32577: IFFALSE 32606
// missile := Replace ( missile , missile + 1 , 2 ) ;
32579: LD_ADDR_VAR 0 14
32583: PUSH
32584: LD_VAR 0 14
32588: PPUSH
32589: LD_VAR 0 14
32593: PUSH
32594: LD_INT 1
32596: PLUS
32597: PPUSH
32598: LD_INT 2
32600: PPUSH
32601: CALL_OW 1
32605: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32606: LD_VAR 0 9
32610: PPUSH
32611: LD_VAR 0 13
32615: PPUSH
32616: CALL_OW 325
32620: PUSH
32621: LD_VAR 0 10
32625: PPUSH
32626: CALL_OW 255
32630: PPUSH
32631: LD_VAR 0 13
32635: PPUSH
32636: CALL_OW 325
32640: NOT
32641: AND
32642: IFFALSE 32671
// missile := Replace ( missile , missile + 1 , 3 ) ;
32644: LD_ADDR_VAR 0 14
32648: PUSH
32649: LD_VAR 0 14
32653: PPUSH
32654: LD_VAR 0 14
32658: PUSH
32659: LD_INT 1
32661: PLUS
32662: PPUSH
32663: LD_INT 3
32665: PPUSH
32666: CALL_OW 1
32670: ST_TO_ADDR
// if missile < 2 then
32671: LD_VAR 0 14
32675: PUSH
32676: LD_INT 2
32678: LESS
32679: IFFALSE 32683
// exit ;
32681: GO 32905
// x := GetX ( enemy ) ;
32683: LD_ADDR_VAR 0 4
32687: PUSH
32688: LD_VAR 0 10
32692: PPUSH
32693: CALL_OW 250
32697: ST_TO_ADDR
// y := GetY ( enemy ) ;
32698: LD_ADDR_VAR 0 5
32702: PUSH
32703: LD_VAR 0 10
32707: PPUSH
32708: CALL_OW 251
32712: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32713: LD_ADDR_VAR 0 6
32717: PUSH
32718: LD_VAR 0 4
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PPUSH
32727: LD_INT 1
32729: PPUSH
32730: CALL_OW 12
32734: PLUS
32735: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32736: LD_ADDR_VAR 0 7
32740: PUSH
32741: LD_VAR 0 5
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PPUSH
32750: LD_INT 1
32752: PPUSH
32753: CALL_OW 12
32757: PLUS
32758: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32759: LD_VAR 0 6
32763: PPUSH
32764: LD_VAR 0 7
32768: PPUSH
32769: CALL_OW 488
32773: NOT
32774: IFFALSE 32796
// begin _x := x ;
32776: LD_ADDR_VAR 0 6
32780: PUSH
32781: LD_VAR 0 4
32785: ST_TO_ADDR
// _y := y ;
32786: LD_ADDR_VAR 0 7
32790: PUSH
32791: LD_VAR 0 5
32795: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32796: LD_ADDR_VAR 0 3
32800: PUSH
32801: LD_INT 1
32803: PPUSH
32804: LD_VAR 0 14
32808: PPUSH
32809: CALL_OW 12
32813: ST_TO_ADDR
// case i of 1 :
32814: LD_VAR 0 3
32818: PUSH
32819: LD_INT 1
32821: DOUBLE
32822: EQUAL
32823: IFTRUE 32827
32825: GO 32844
32827: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32828: LD_VAR 0 1
32832: PPUSH
32833: LD_VAR 0 10
32837: PPUSH
32838: CALL_OW 115
32842: GO 32905
32844: LD_INT 2
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32852
32850: GO 32874
32852: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32853: LD_VAR 0 1
32857: PPUSH
32858: LD_VAR 0 6
32862: PPUSH
32863: LD_VAR 0 7
32867: PPUSH
32868: CALL_OW 153
32872: GO 32905
32874: LD_INT 3
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32904
32882: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32883: LD_VAR 0 1
32887: PPUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: LD_VAR 0 7
32897: PPUSH
32898: CALL_OW 154
32902: GO 32905
32904: POP
// end ;
32905: LD_VAR 0 2
32909: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32910: LD_INT 0
32912: PPUSH
32913: PPUSH
32914: PPUSH
32915: PPUSH
32916: PPUSH
32917: PPUSH
// if not unit or not building then
32918: LD_VAR 0 1
32922: NOT
32923: PUSH
32924: LD_VAR 0 2
32928: NOT
32929: OR
32930: IFFALSE 32934
// exit ;
32932: GO 33092
// x := GetX ( building ) ;
32934: LD_ADDR_VAR 0 5
32938: PUSH
32939: LD_VAR 0 2
32943: PPUSH
32944: CALL_OW 250
32948: ST_TO_ADDR
// y := GetY ( building ) ;
32949: LD_ADDR_VAR 0 6
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL_OW 251
32963: ST_TO_ADDR
// for i = 0 to 5 do
32964: LD_ADDR_VAR 0 4
32968: PUSH
32969: DOUBLE
32970: LD_INT 0
32972: DEC
32973: ST_TO_ADDR
32974: LD_INT 5
32976: PUSH
32977: FOR_TO
32978: IFFALSE 33090
// begin _x := ShiftX ( x , i , 3 ) ;
32980: LD_ADDR_VAR 0 7
32984: PUSH
32985: LD_VAR 0 5
32989: PPUSH
32990: LD_VAR 0 4
32994: PPUSH
32995: LD_INT 3
32997: PPUSH
32998: CALL_OW 272
33002: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33003: LD_ADDR_VAR 0 8
33007: PUSH
33008: LD_VAR 0 6
33012: PPUSH
33013: LD_VAR 0 4
33017: PPUSH
33018: LD_INT 3
33020: PPUSH
33021: CALL_OW 273
33025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33026: LD_VAR 0 7
33030: PPUSH
33031: LD_VAR 0 8
33035: PPUSH
33036: CALL_OW 488
33040: NOT
33041: IFFALSE 33045
// continue ;
33043: GO 32977
// if HexInfo ( _x , _y ) = 0 then
33045: LD_VAR 0 7
33049: PPUSH
33050: LD_VAR 0 8
33054: PPUSH
33055: CALL_OW 428
33059: PUSH
33060: LD_INT 0
33062: EQUAL
33063: IFFALSE 33088
// begin ComMoveXY ( unit , _x , _y ) ;
33065: LD_VAR 0 1
33069: PPUSH
33070: LD_VAR 0 7
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: CALL_OW 111
// exit ;
33084: POP
33085: POP
33086: GO 33092
// end ; end ;
33088: GO 32977
33090: POP
33091: POP
// end ;
33092: LD_VAR 0 3
33096: RET
// export function ScanBase ( side , base_area ) ; begin
33097: LD_INT 0
33099: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33100: LD_ADDR_VAR 0 3
33104: PUSH
33105: LD_VAR 0 2
33109: PPUSH
33110: LD_INT 81
33112: PUSH
33113: LD_VAR 0 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PPUSH
33122: CALL_OW 70
33126: ST_TO_ADDR
// end ;
33127: LD_VAR 0 3
33131: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33132: LD_INT 0
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
// result := false ;
33138: LD_ADDR_VAR 0 2
33142: PUSH
33143: LD_INT 0
33145: ST_TO_ADDR
// side := GetSide ( unit ) ;
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_VAR 0 1
33155: PPUSH
33156: CALL_OW 255
33160: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33161: LD_ADDR_VAR 0 4
33165: PUSH
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL_OW 248
33175: ST_TO_ADDR
// case nat of 1 :
33176: LD_VAR 0 4
33180: PUSH
33181: LD_INT 1
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// tech := tech_lassight ; 2 :
33190: LD_ADDR_VAR 0 5
33194: PUSH
33195: LD_INT 12
33197: ST_TO_ADDR
33198: GO 33239
33200: LD_INT 2
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// tech := tech_mortar ; 3 :
33209: LD_ADDR_VAR 0 5
33213: PUSH
33214: LD_INT 41
33216: ST_TO_ADDR
33217: GO 33239
33219: LD_INT 3
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// tech := tech_bazooka ; end ;
33228: LD_ADDR_VAR 0 5
33232: PUSH
33233: LD_INT 44
33235: ST_TO_ADDR
33236: GO 33239
33238: POP
// if Researched ( side , tech ) then
33239: LD_VAR 0 3
33243: PPUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: CALL_OW 325
33253: IFFALSE 33280
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33255: LD_ADDR_VAR 0 2
33259: PUSH
33260: LD_INT 5
33262: PUSH
33263: LD_INT 8
33265: PUSH
33266: LD_INT 9
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: PUSH
33274: LD_VAR 0 4
33278: ARRAY
33279: ST_TO_ADDR
// end ;
33280: LD_VAR 0 2
33284: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33285: LD_INT 0
33287: PPUSH
33288: PPUSH
33289: PPUSH
// if not mines then
33290: LD_VAR 0 2
33294: NOT
33295: IFFALSE 33299
// exit ;
33297: GO 33443
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33299: LD_ADDR_VAR 0 5
33303: PUSH
33304: LD_INT 81
33306: PUSH
33307: LD_VAR 0 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 3
33318: PUSH
33319: LD_INT 21
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL_OW 69
33341: ST_TO_ADDR
// for i in mines do
33342: LD_ADDR_VAR 0 4
33346: PUSH
33347: LD_VAR 0 2
33351: PUSH
33352: FOR_IN
33353: IFFALSE 33441
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33355: LD_VAR 0 4
33359: PUSH
33360: LD_INT 1
33362: ARRAY
33363: PPUSH
33364: LD_VAR 0 4
33368: PUSH
33369: LD_INT 2
33371: ARRAY
33372: PPUSH
33373: CALL_OW 458
33377: NOT
33378: IFFALSE 33382
// continue ;
33380: GO 33352
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33382: LD_VAR 0 4
33386: PUSH
33387: LD_INT 1
33389: ARRAY
33390: PPUSH
33391: LD_VAR 0 4
33395: PUSH
33396: LD_INT 2
33398: ARRAY
33399: PPUSH
33400: CALL_OW 428
33404: PUSH
33405: LD_VAR 0 5
33409: IN
33410: IFFALSE 33439
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33412: LD_VAR 0 4
33416: PUSH
33417: LD_INT 1
33419: ARRAY
33420: PPUSH
33421: LD_VAR 0 4
33425: PUSH
33426: LD_INT 2
33428: ARRAY
33429: PPUSH
33430: LD_VAR 0 1
33434: PPUSH
33435: CALL_OW 456
// end ;
33439: GO 33352
33441: POP
33442: POP
// end ;
33443: LD_VAR 0 3
33447: RET
// export function Count ( array ) ; begin
33448: LD_INT 0
33450: PPUSH
// result := array + 0 ;
33451: LD_ADDR_VAR 0 2
33455: PUSH
33456: LD_VAR 0 1
33460: PUSH
33461: LD_INT 0
33463: PLUS
33464: ST_TO_ADDR
// end ;
33465: LD_VAR 0 2
33469: RET
// export function IsEmpty ( building ) ; begin
33470: LD_INT 0
33472: PPUSH
// if not building then
33473: LD_VAR 0 1
33477: NOT
33478: IFFALSE 33482
// exit ;
33480: GO 33525
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33482: LD_ADDR_VAR 0 2
33486: PUSH
33487: LD_VAR 0 1
33491: PUSH
33492: LD_INT 22
33494: PUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 255
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 58
33511: PUSH
33512: EMPTY
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 69
33523: IN
33524: ST_TO_ADDR
// end ;
33525: LD_VAR 0 2
33529: RET
// export function IsNotFull ( building ) ; var places ; begin
33530: LD_INT 0
33532: PPUSH
33533: PPUSH
// if not building then
33534: LD_VAR 0 1
33538: NOT
33539: IFFALSE 33543
// exit ;
33541: GO 33571
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33543: LD_ADDR_VAR 0 2
33547: PUSH
33548: LD_VAR 0 1
33552: PPUSH
33553: LD_INT 3
33555: PUSH
33556: LD_INT 62
33558: PUSH
33559: EMPTY
33560: LIST
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PPUSH
33566: CALL_OW 72
33570: ST_TO_ADDR
// end ;
33571: LD_VAR 0 2
33575: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33576: LD_INT 0
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
// tmp := [ ] ;
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: EMPTY
33588: ST_TO_ADDR
// list := [ ] ;
33589: LD_ADDR_VAR 0 5
33593: PUSH
33594: EMPTY
33595: ST_TO_ADDR
// for i = 16 to 25 do
33596: LD_ADDR_VAR 0 4
33600: PUSH
33601: DOUBLE
33602: LD_INT 16
33604: DEC
33605: ST_TO_ADDR
33606: LD_INT 25
33608: PUSH
33609: FOR_TO
33610: IFFALSE 33683
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_VAR 0 3
33621: PUSH
33622: LD_INT 22
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: CALL_OW 255
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 91
33641: PUSH
33642: LD_VAR 0 1
33646: PUSH
33647: LD_INT 6
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 30
33657: PUSH
33658: LD_VAR 0 4
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: PPUSH
33675: CALL_OW 69
33679: ADD
33680: ST_TO_ADDR
33681: GO 33609
33683: POP
33684: POP
// for i = 1 to tmp do
33685: LD_ADDR_VAR 0 4
33689: PUSH
33690: DOUBLE
33691: LD_INT 1
33693: DEC
33694: ST_TO_ADDR
33695: LD_VAR 0 3
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33789
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33703: LD_ADDR_VAR 0 5
33707: PUSH
33708: LD_VAR 0 5
33712: PUSH
33713: LD_VAR 0 3
33717: PUSH
33718: LD_VAR 0 4
33722: ARRAY
33723: PPUSH
33724: CALL_OW 266
33728: PUSH
33729: LD_VAR 0 3
33733: PUSH
33734: LD_VAR 0 4
33738: ARRAY
33739: PPUSH
33740: CALL_OW 250
33744: PUSH
33745: LD_VAR 0 3
33749: PUSH
33750: LD_VAR 0 4
33754: ARRAY
33755: PPUSH
33756: CALL_OW 251
33760: PUSH
33761: LD_VAR 0 3
33765: PUSH
33766: LD_VAR 0 4
33770: ARRAY
33771: PPUSH
33772: CALL_OW 254
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: ADD
33786: ST_TO_ADDR
33787: GO 33700
33789: POP
33790: POP
// result := list ;
33791: LD_ADDR_VAR 0 2
33795: PUSH
33796: LD_VAR 0 5
33800: ST_TO_ADDR
// end ;
33801: LD_VAR 0 2
33805: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33806: LD_INT 0
33808: PPUSH
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
// if not factory then
33815: LD_VAR 0 1
33819: NOT
33820: IFFALSE 33824
// exit ;
33822: GO 34417
// if control = control_apeman then
33824: LD_VAR 0 4
33828: PUSH
33829: LD_INT 5
33831: EQUAL
33832: IFFALSE 33941
// begin tmp := UnitsInside ( factory ) ;
33834: LD_ADDR_VAR 0 8
33838: PUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 313
33848: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33849: LD_VAR 0 8
33853: PPUSH
33854: LD_INT 25
33856: PUSH
33857: LD_INT 12
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PPUSH
33864: CALL_OW 72
33868: NOT
33869: IFFALSE 33879
// control := control_manual ;
33871: LD_ADDR_VAR 0 4
33875: PUSH
33876: LD_INT 1
33878: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33879: LD_ADDR_VAR 0 8
33883: PUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: CALL 33576 0 1
33893: ST_TO_ADDR
// if tmp then
33894: LD_VAR 0 8
33898: IFFALSE 33941
// begin for i in tmp do
33900: LD_ADDR_VAR 0 7
33904: PUSH
33905: LD_VAR 0 8
33909: PUSH
33910: FOR_IN
33911: IFFALSE 33939
// if i [ 1 ] = b_ext_radio then
33913: LD_VAR 0 7
33917: PUSH
33918: LD_INT 1
33920: ARRAY
33921: PUSH
33922: LD_INT 22
33924: EQUAL
33925: IFFALSE 33937
// begin control := control_remote ;
33927: LD_ADDR_VAR 0 4
33931: PUSH
33932: LD_INT 2
33934: ST_TO_ADDR
// break ;
33935: GO 33939
// end ;
33937: GO 33910
33939: POP
33940: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33941: LD_VAR 0 1
33945: PPUSH
33946: LD_VAR 0 2
33950: PPUSH
33951: LD_VAR 0 3
33955: PPUSH
33956: LD_VAR 0 4
33960: PPUSH
33961: LD_VAR 0 5
33965: PPUSH
33966: CALL_OW 448
33970: IFFALSE 34005
// begin result := [ chassis , engine , control , weapon ] ;
33972: LD_ADDR_VAR 0 6
33976: PUSH
33977: LD_VAR 0 2
33981: PUSH
33982: LD_VAR 0 3
33986: PUSH
33987: LD_VAR 0 4
33991: PUSH
33992: LD_VAR 0 5
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// exit ;
34003: GO 34417
// end ; _chassis := AvailableChassisList ( factory ) ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_VAR 0 1
34014: PPUSH
34015: CALL_OW 475
34019: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34020: LD_ADDR_VAR 0 11
34024: PUSH
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL_OW 476
34034: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34035: LD_ADDR_VAR 0 12
34039: PUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 477
34049: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34050: LD_ADDR_VAR 0 10
34054: PUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: CALL_OW 478
34064: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34065: LD_VAR 0 9
34069: NOT
34070: PUSH
34071: LD_VAR 0 11
34075: NOT
34076: OR
34077: PUSH
34078: LD_VAR 0 12
34082: NOT
34083: OR
34084: PUSH
34085: LD_VAR 0 10
34089: NOT
34090: OR
34091: IFFALSE 34126
// begin result := [ chassis , engine , control , weapon ] ;
34093: LD_ADDR_VAR 0 6
34097: PUSH
34098: LD_VAR 0 2
34102: PUSH
34103: LD_VAR 0 3
34107: PUSH
34108: LD_VAR 0 4
34112: PUSH
34113: LD_VAR 0 5
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: ST_TO_ADDR
// exit ;
34124: GO 34417
// end ; if not chassis in _chassis then
34126: LD_VAR 0 2
34130: PUSH
34131: LD_VAR 0 9
34135: IN
34136: NOT
34137: IFFALSE 34163
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34139: LD_ADDR_VAR 0 2
34143: PUSH
34144: LD_VAR 0 9
34148: PUSH
34149: LD_INT 1
34151: PPUSH
34152: LD_VAR 0 9
34156: PPUSH
34157: CALL_OW 12
34161: ARRAY
34162: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34163: LD_VAR 0 2
34167: PPUSH
34168: LD_VAR 0 3
34172: PPUSH
34173: CALL 34422 0 2
34177: NOT
34178: IFFALSE 34237
// repeat engine := _engine [ 1 ] ;
34180: LD_ADDR_VAR 0 3
34184: PUSH
34185: LD_VAR 0 11
34189: PUSH
34190: LD_INT 1
34192: ARRAY
34193: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34194: LD_ADDR_VAR 0 11
34198: PUSH
34199: LD_VAR 0 11
34203: PPUSH
34204: LD_INT 1
34206: PPUSH
34207: CALL_OW 3
34211: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34212: LD_VAR 0 2
34216: PPUSH
34217: LD_VAR 0 3
34221: PPUSH
34222: CALL 34422 0 2
34226: PUSH
34227: LD_VAR 0 11
34231: PUSH
34232: EMPTY
34233: EQUAL
34234: OR
34235: IFFALSE 34180
// if not control in _control then
34237: LD_VAR 0 4
34241: PUSH
34242: LD_VAR 0 12
34246: IN
34247: NOT
34248: IFFALSE 34274
// control := _control [ rand ( 1 , _control ) ] ;
34250: LD_ADDR_VAR 0 4
34254: PUSH
34255: LD_VAR 0 12
34259: PUSH
34260: LD_INT 1
34262: PPUSH
34263: LD_VAR 0 12
34267: PPUSH
34268: CALL_OW 12
34272: ARRAY
34273: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34274: LD_VAR 0 2
34278: PPUSH
34279: LD_VAR 0 5
34283: PPUSH
34284: CALL 34642 0 2
34288: NOT
34289: IFFALSE 34348
// repeat weapon := _weapon [ 1 ] ;
34291: LD_ADDR_VAR 0 5
34295: PUSH
34296: LD_VAR 0 10
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34305: LD_ADDR_VAR 0 10
34309: PUSH
34310: LD_VAR 0 10
34314: PPUSH
34315: LD_INT 1
34317: PPUSH
34318: CALL_OW 3
34322: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34323: LD_VAR 0 2
34327: PPUSH
34328: LD_VAR 0 5
34332: PPUSH
34333: CALL 34642 0 2
34337: PUSH
34338: LD_VAR 0 10
34342: PUSH
34343: EMPTY
34344: EQUAL
34345: OR
34346: IFFALSE 34291
// result := [ ] ;
34348: LD_ADDR_VAR 0 6
34352: PUSH
34353: EMPTY
34354: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_VAR 0 2
34364: PPUSH
34365: LD_VAR 0 3
34369: PPUSH
34370: LD_VAR 0 4
34374: PPUSH
34375: LD_VAR 0 5
34379: PPUSH
34380: CALL_OW 448
34384: IFFALSE 34417
// result := [ chassis , engine , control , weapon ] ;
34386: LD_ADDR_VAR 0 6
34390: PUSH
34391: LD_VAR 0 2
34395: PUSH
34396: LD_VAR 0 3
34400: PUSH
34401: LD_VAR 0 4
34405: PUSH
34406: LD_VAR 0 5
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// end ;
34417: LD_VAR 0 6
34421: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34422: LD_INT 0
34424: PPUSH
// if not chassis or not engine then
34425: LD_VAR 0 1
34429: NOT
34430: PUSH
34431: LD_VAR 0 2
34435: NOT
34436: OR
34437: IFFALSE 34441
// exit ;
34439: GO 34637
// case engine of engine_solar :
34441: LD_VAR 0 2
34445: PUSH
34446: LD_INT 2
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34454
34452: GO 34492
34454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34455: LD_ADDR_VAR 0 3
34459: PUSH
34460: LD_INT 11
34462: PUSH
34463: LD_INT 12
34465: PUSH
34466: LD_INT 13
34468: PUSH
34469: LD_INT 14
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
34490: GO 34621
34492: LD_INT 1
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34562
34500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34501: LD_ADDR_VAR 0 3
34505: PUSH
34506: LD_INT 11
34508: PUSH
34509: LD_INT 12
34511: PUSH
34512: LD_INT 13
34514: PUSH
34515: LD_INT 14
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: LD_INT 4
34529: PUSH
34530: LD_INT 5
34532: PUSH
34533: LD_INT 21
34535: PUSH
34536: LD_INT 23
34538: PUSH
34539: LD_INT 22
34541: PUSH
34542: LD_INT 24
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: ST_TO_ADDR
34560: GO 34621
34562: LD_INT 3
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34620
34570: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34571: LD_ADDR_VAR 0 3
34575: PUSH
34576: LD_INT 13
34578: PUSH
34579: LD_INT 14
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: LD_INT 4
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: LD_INT 21
34596: PUSH
34597: LD_INT 22
34599: PUSH
34600: LD_INT 23
34602: PUSH
34603: LD_INT 24
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
34618: GO 34621
34620: POP
// result := ( chassis in result ) ;
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_VAR 0 1
34630: PUSH
34631: LD_VAR 0 3
34635: IN
34636: ST_TO_ADDR
// end ;
34637: LD_VAR 0 3
34641: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34642: LD_INT 0
34644: PPUSH
// if not chassis or not weapon then
34645: LD_VAR 0 1
34649: NOT
34650: PUSH
34651: LD_VAR 0 2
34655: NOT
34656: OR
34657: IFFALSE 34661
// exit ;
34659: GO 35721
// case weapon of us_machine_gun :
34661: LD_VAR 0 2
34665: PUSH
34666: LD_INT 2
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34704
34674: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: LD_INT 4
34691: PUSH
34692: LD_INT 5
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
34702: GO 35705
34704: LD_INT 3
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34742
34712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 3
34726: PUSH
34727: LD_INT 4
34729: PUSH
34730: LD_INT 5
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: ST_TO_ADDR
34740: GO 35705
34742: LD_INT 11
34744: DOUBLE
34745: EQUAL
34746: IFTRUE 34750
34748: GO 34780
34750: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34751: LD_ADDR_VAR 0 3
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 2
34761: PUSH
34762: LD_INT 3
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 5
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: ST_TO_ADDR
34778: GO 35705
34780: LD_INT 4
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34788
34786: GO 34814
34788: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34789: LD_ADDR_VAR 0 3
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: LD_INT 4
34802: PUSH
34803: LD_INT 5
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: ST_TO_ADDR
34812: GO 35705
34814: LD_INT 5
34816: DOUBLE
34817: EQUAL
34818: IFTRUE 34822
34820: GO 34848
34822: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34823: LD_ADDR_VAR 0 3
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: ST_TO_ADDR
34846: GO 35705
34848: LD_INT 9
34850: DOUBLE
34851: EQUAL
34852: IFTRUE 34856
34854: GO 34882
34856: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34857: LD_ADDR_VAR 0 3
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: LD_INT 5
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
34880: GO 35705
34882: LD_INT 7
34884: DOUBLE
34885: EQUAL
34886: IFTRUE 34890
34888: GO 34916
34890: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 4
34904: PUSH
34905: LD_INT 5
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: ST_TO_ADDR
34914: GO 35705
34916: LD_INT 12
34918: DOUBLE
34919: EQUAL
34920: IFTRUE 34924
34922: GO 34950
34924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34925: LD_ADDR_VAR 0 3
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: LD_INT 3
34935: PUSH
34936: LD_INT 4
34938: PUSH
34939: LD_INT 5
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: ST_TO_ADDR
34948: GO 35705
34950: LD_INT 13
34952: DOUBLE
34953: EQUAL
34954: IFTRUE 34958
34956: GO 34984
34958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34959: LD_ADDR_VAR 0 3
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 4
34972: PUSH
34973: LD_INT 5
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: ST_TO_ADDR
34982: GO 35705
34984: LD_INT 14
34986: DOUBLE
34987: EQUAL
34988: IFTRUE 34992
34990: GO 35010
34992: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34993: LD_ADDR_VAR 0 3
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: ST_TO_ADDR
35008: GO 35705
35010: LD_INT 6
35012: DOUBLE
35013: EQUAL
35014: IFTRUE 35018
35016: GO 35036
35018: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_INT 4
35026: PUSH
35027: LD_INT 5
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: ST_TO_ADDR
35034: GO 35705
35036: LD_INT 10
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35062
35044: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_INT 4
35052: PUSH
35053: LD_INT 5
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 35705
35062: LD_INT 22
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35096
35070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 11
35078: PUSH
35079: LD_INT 12
35081: PUSH
35082: LD_INT 13
35084: PUSH
35085: LD_INT 14
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
35094: GO 35705
35096: LD_INT 23
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35130
35104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_INT 11
35112: PUSH
35113: LD_INT 12
35115: PUSH
35116: LD_INT 13
35118: PUSH
35119: LD_INT 14
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
35128: GO 35705
35130: LD_INT 24
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35164
35138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_INT 11
35146: PUSH
35147: LD_INT 12
35149: PUSH
35150: LD_INT 13
35152: PUSH
35153: LD_INT 14
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
35162: GO 35705
35164: LD_INT 30
35166: DOUBLE
35167: EQUAL
35168: IFTRUE 35172
35170: GO 35198
35172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35173: LD_ADDR_VAR 0 3
35177: PUSH
35178: LD_INT 11
35180: PUSH
35181: LD_INT 12
35183: PUSH
35184: LD_INT 13
35186: PUSH
35187: LD_INT 14
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: ST_TO_ADDR
35196: GO 35705
35198: LD_INT 25
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35206
35204: GO 35224
35206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35207: LD_ADDR_VAR 0 3
35211: PUSH
35212: LD_INT 13
35214: PUSH
35215: LD_INT 14
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: ST_TO_ADDR
35222: GO 35705
35224: LD_INT 27
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35250
35232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35233: LD_ADDR_VAR 0 3
35237: PUSH
35238: LD_INT 13
35240: PUSH
35241: LD_INT 14
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: ST_TO_ADDR
35248: GO 35705
35250: LD_INT 92
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35258
35256: GO 35284
35258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: LD_INT 11
35266: PUSH
35267: LD_INT 12
35269: PUSH
35270: LD_INT 13
35272: PUSH
35273: LD_INT 14
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: ST_TO_ADDR
35282: GO 35705
35284: LD_INT 28
35286: DOUBLE
35287: EQUAL
35288: IFTRUE 35292
35290: GO 35310
35292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35293: LD_ADDR_VAR 0 3
35297: PUSH
35298: LD_INT 13
35300: PUSH
35301: LD_INT 14
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: ST_TO_ADDR
35308: GO 35705
35310: LD_INT 29
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35318
35316: GO 35336
35318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35319: LD_ADDR_VAR 0 3
35323: PUSH
35324: LD_INT 13
35326: PUSH
35327: LD_INT 14
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: ST_TO_ADDR
35334: GO 35705
35336: LD_INT 31
35338: DOUBLE
35339: EQUAL
35340: IFTRUE 35344
35342: GO 35362
35344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: LD_INT 13
35352: PUSH
35353: LD_INT 14
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: ST_TO_ADDR
35360: GO 35705
35362: LD_INT 26
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35388
35370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_INT 13
35378: PUSH
35379: LD_INT 14
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: ST_TO_ADDR
35386: GO 35705
35388: LD_INT 42
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35422
35396: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 21
35404: PUSH
35405: LD_INT 22
35407: PUSH
35408: LD_INT 23
35410: PUSH
35411: LD_INT 24
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
35420: GO 35705
35422: LD_INT 43
35424: DOUBLE
35425: EQUAL
35426: IFTRUE 35430
35428: GO 35456
35430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35431: LD_ADDR_VAR 0 3
35435: PUSH
35436: LD_INT 21
35438: PUSH
35439: LD_INT 22
35441: PUSH
35442: LD_INT 23
35444: PUSH
35445: LD_INT 24
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
35454: GO 35705
35456: LD_INT 44
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 35490
35464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35465: LD_ADDR_VAR 0 3
35469: PUSH
35470: LD_INT 21
35472: PUSH
35473: LD_INT 22
35475: PUSH
35476: LD_INT 23
35478: PUSH
35479: LD_INT 24
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
35488: GO 35705
35490: LD_INT 45
35492: DOUBLE
35493: EQUAL
35494: IFTRUE 35498
35496: GO 35524
35498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35499: LD_ADDR_VAR 0 3
35503: PUSH
35504: LD_INT 21
35506: PUSH
35507: LD_INT 22
35509: PUSH
35510: LD_INT 23
35512: PUSH
35513: LD_INT 24
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
35522: GO 35705
35524: LD_INT 49
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35532
35530: GO 35558
35532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35533: LD_ADDR_VAR 0 3
35537: PUSH
35538: LD_INT 21
35540: PUSH
35541: LD_INT 22
35543: PUSH
35544: LD_INT 23
35546: PUSH
35547: LD_INT 24
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: ST_TO_ADDR
35556: GO 35705
35558: LD_INT 51
35560: DOUBLE
35561: EQUAL
35562: IFTRUE 35566
35564: GO 35592
35566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35567: LD_ADDR_VAR 0 3
35571: PUSH
35572: LD_INT 21
35574: PUSH
35575: LD_INT 22
35577: PUSH
35578: LD_INT 23
35580: PUSH
35581: LD_INT 24
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: ST_TO_ADDR
35590: GO 35705
35592: LD_INT 52
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35600
35598: GO 35626
35600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35601: LD_ADDR_VAR 0 3
35605: PUSH
35606: LD_INT 21
35608: PUSH
35609: LD_INT 22
35611: PUSH
35612: LD_INT 23
35614: PUSH
35615: LD_INT 24
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: ST_TO_ADDR
35624: GO 35705
35626: LD_INT 53
35628: DOUBLE
35629: EQUAL
35630: IFTRUE 35634
35632: GO 35652
35634: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35635: LD_ADDR_VAR 0 3
35639: PUSH
35640: LD_INT 23
35642: PUSH
35643: LD_INT 24
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: ST_TO_ADDR
35650: GO 35705
35652: LD_INT 46
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35678
35660: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35661: LD_ADDR_VAR 0 3
35665: PUSH
35666: LD_INT 23
35668: PUSH
35669: LD_INT 24
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: ST_TO_ADDR
35676: GO 35705
35678: LD_INT 47
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35686
35684: GO 35704
35686: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35687: LD_ADDR_VAR 0 3
35691: PUSH
35692: LD_INT 23
35694: PUSH
35695: LD_INT 24
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: ST_TO_ADDR
35702: GO 35705
35704: POP
// result := ( chassis in result ) ;
35705: LD_ADDR_VAR 0 3
35709: PUSH
35710: LD_VAR 0 1
35714: PUSH
35715: LD_VAR 0 3
35719: IN
35720: ST_TO_ADDR
// end ;
35721: LD_VAR 0 3
35725: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35726: LD_INT 0
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
// result := array ;
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 1
35744: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35745: LD_VAR 0 1
35749: NOT
35750: PUSH
35751: LD_VAR 0 2
35755: NOT
35756: OR
35757: PUSH
35758: LD_VAR 0 3
35762: NOT
35763: OR
35764: PUSH
35765: LD_VAR 0 2
35769: PUSH
35770: LD_VAR 0 1
35774: GREATER
35775: OR
35776: PUSH
35777: LD_VAR 0 3
35781: PUSH
35782: LD_VAR 0 1
35786: GREATER
35787: OR
35788: IFFALSE 35792
// exit ;
35790: GO 36088
// if direction then
35792: LD_VAR 0 4
35796: IFFALSE 35860
// begin d := 1 ;
35798: LD_ADDR_VAR 0 9
35802: PUSH
35803: LD_INT 1
35805: ST_TO_ADDR
// if i_from > i_to then
35806: LD_VAR 0 2
35810: PUSH
35811: LD_VAR 0 3
35815: GREATER
35816: IFFALSE 35842
// length := ( array - i_from ) + i_to else
35818: LD_ADDR_VAR 0 11
35822: PUSH
35823: LD_VAR 0 1
35827: PUSH
35828: LD_VAR 0 2
35832: MINUS
35833: PUSH
35834: LD_VAR 0 3
35838: PLUS
35839: ST_TO_ADDR
35840: GO 35858
// length := i_to - i_from ;
35842: LD_ADDR_VAR 0 11
35846: PUSH
35847: LD_VAR 0 3
35851: PUSH
35852: LD_VAR 0 2
35856: MINUS
35857: ST_TO_ADDR
// end else
35858: GO 35921
// begin d := - 1 ;
35860: LD_ADDR_VAR 0 9
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: ST_TO_ADDR
// if i_from > i_to then
35869: LD_VAR 0 2
35873: PUSH
35874: LD_VAR 0 3
35878: GREATER
35879: IFFALSE 35899
// length := i_from - i_to else
35881: LD_ADDR_VAR 0 11
35885: PUSH
35886: LD_VAR 0 2
35890: PUSH
35891: LD_VAR 0 3
35895: MINUS
35896: ST_TO_ADDR
35897: GO 35921
// length := ( array - i_to ) + i_from ;
35899: LD_ADDR_VAR 0 11
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: LD_VAR 0 3
35913: MINUS
35914: PUSH
35915: LD_VAR 0 2
35919: PLUS
35920: ST_TO_ADDR
// end ; if not length then
35921: LD_VAR 0 11
35925: NOT
35926: IFFALSE 35930
// exit ;
35928: GO 36088
// tmp := array ;
35930: LD_ADDR_VAR 0 10
35934: PUSH
35935: LD_VAR 0 1
35939: ST_TO_ADDR
// for i = 1 to length do
35940: LD_ADDR_VAR 0 6
35944: PUSH
35945: DOUBLE
35946: LD_INT 1
35948: DEC
35949: ST_TO_ADDR
35950: LD_VAR 0 11
35954: PUSH
35955: FOR_TO
35956: IFFALSE 36076
// begin for j = 1 to array do
35958: LD_ADDR_VAR 0 7
35962: PUSH
35963: DOUBLE
35964: LD_INT 1
35966: DEC
35967: ST_TO_ADDR
35968: LD_VAR 0 1
35972: PUSH
35973: FOR_TO
35974: IFFALSE 36062
// begin k := j + d ;
35976: LD_ADDR_VAR 0 8
35980: PUSH
35981: LD_VAR 0 7
35985: PUSH
35986: LD_VAR 0 9
35990: PLUS
35991: ST_TO_ADDR
// if k > array then
35992: LD_VAR 0 8
35996: PUSH
35997: LD_VAR 0 1
36001: GREATER
36002: IFFALSE 36012
// k := 1 ;
36004: LD_ADDR_VAR 0 8
36008: PUSH
36009: LD_INT 1
36011: ST_TO_ADDR
// if not k then
36012: LD_VAR 0 8
36016: NOT
36017: IFFALSE 36029
// k := array ;
36019: LD_ADDR_VAR 0 8
36023: PUSH
36024: LD_VAR 0 1
36028: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36029: LD_ADDR_VAR 0 10
36033: PUSH
36034: LD_VAR 0 10
36038: PPUSH
36039: LD_VAR 0 8
36043: PPUSH
36044: LD_VAR 0 1
36048: PUSH
36049: LD_VAR 0 7
36053: ARRAY
36054: PPUSH
36055: CALL_OW 1
36059: ST_TO_ADDR
// end ;
36060: GO 35973
36062: POP
36063: POP
// array := tmp ;
36064: LD_ADDR_VAR 0 1
36068: PUSH
36069: LD_VAR 0 10
36073: ST_TO_ADDR
// end ;
36074: GO 35955
36076: POP
36077: POP
// result := array ;
36078: LD_ADDR_VAR 0 5
36082: PUSH
36083: LD_VAR 0 1
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 5
36092: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36093: LD_INT 0
36095: PPUSH
36096: PPUSH
// result := 0 ;
36097: LD_ADDR_VAR 0 3
36101: PUSH
36102: LD_INT 0
36104: ST_TO_ADDR
// if not array or not value in array then
36105: LD_VAR 0 1
36109: NOT
36110: PUSH
36111: LD_VAR 0 2
36115: PUSH
36116: LD_VAR 0 1
36120: IN
36121: NOT
36122: OR
36123: IFFALSE 36127
// exit ;
36125: GO 36181
// for i = 1 to array do
36127: LD_ADDR_VAR 0 4
36131: PUSH
36132: DOUBLE
36133: LD_INT 1
36135: DEC
36136: ST_TO_ADDR
36137: LD_VAR 0 1
36141: PUSH
36142: FOR_TO
36143: IFFALSE 36179
// if value = array [ i ] then
36145: LD_VAR 0 2
36149: PUSH
36150: LD_VAR 0 1
36154: PUSH
36155: LD_VAR 0 4
36159: ARRAY
36160: EQUAL
36161: IFFALSE 36177
// begin result := i ;
36163: LD_ADDR_VAR 0 3
36167: PUSH
36168: LD_VAR 0 4
36172: ST_TO_ADDR
// exit ;
36173: POP
36174: POP
36175: GO 36181
// end ;
36177: GO 36142
36179: POP
36180: POP
// end ;
36181: LD_VAR 0 3
36185: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36186: LD_INT 0
36188: PPUSH
// vc_chassis := chassis ;
36189: LD_ADDR_OWVAR 37
36193: PUSH
36194: LD_VAR 0 1
36198: ST_TO_ADDR
// vc_engine := engine ;
36199: LD_ADDR_OWVAR 39
36203: PUSH
36204: LD_VAR 0 2
36208: ST_TO_ADDR
// vc_control := control ;
36209: LD_ADDR_OWVAR 38
36213: PUSH
36214: LD_VAR 0 3
36218: ST_TO_ADDR
// vc_weapon := weapon ;
36219: LD_ADDR_OWVAR 40
36223: PUSH
36224: LD_VAR 0 4
36228: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36229: LD_ADDR_OWVAR 41
36233: PUSH
36234: LD_VAR 0 5
36238: ST_TO_ADDR
// end ;
36239: LD_VAR 0 6
36243: RET
// export function WantPlant ( unit ) ; var task ; begin
36244: LD_INT 0
36246: PPUSH
36247: PPUSH
// result := false ;
36248: LD_ADDR_VAR 0 2
36252: PUSH
36253: LD_INT 0
36255: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36256: LD_ADDR_VAR 0 3
36260: PUSH
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 437
36270: ST_TO_ADDR
// if task then
36271: LD_VAR 0 3
36275: IFFALSE 36303
// if task [ 1 ] [ 1 ] = p then
36277: LD_VAR 0 3
36281: PUSH
36282: LD_INT 1
36284: ARRAY
36285: PUSH
36286: LD_INT 1
36288: ARRAY
36289: PUSH
36290: LD_STRING p
36292: EQUAL
36293: IFFALSE 36303
// result := true ;
36295: LD_ADDR_VAR 0 2
36299: PUSH
36300: LD_INT 1
36302: ST_TO_ADDR
// end ;
36303: LD_VAR 0 2
36307: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36308: LD_INT 0
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
// if pos < 1 then
36314: LD_VAR 0 2
36318: PUSH
36319: LD_INT 1
36321: LESS
36322: IFFALSE 36326
// exit ;
36324: GO 36629
// if pos = 1 then
36326: LD_VAR 0 2
36330: PUSH
36331: LD_INT 1
36333: EQUAL
36334: IFFALSE 36367
// result := Replace ( arr , pos [ 1 ] , value ) else
36336: LD_ADDR_VAR 0 4
36340: PUSH
36341: LD_VAR 0 1
36345: PPUSH
36346: LD_VAR 0 2
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: PPUSH
36355: LD_VAR 0 3
36359: PPUSH
36360: CALL_OW 1
36364: ST_TO_ADDR
36365: GO 36629
// begin tmp := arr ;
36367: LD_ADDR_VAR 0 6
36371: PUSH
36372: LD_VAR 0 1
36376: ST_TO_ADDR
// s_arr := [ tmp ] ;
36377: LD_ADDR_VAR 0 7
36381: PUSH
36382: LD_VAR 0 6
36386: PUSH
36387: EMPTY
36388: LIST
36389: ST_TO_ADDR
// for i = 1 to pos - 1 do
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: DOUBLE
36396: LD_INT 1
36398: DEC
36399: ST_TO_ADDR
36400: LD_VAR 0 2
36404: PUSH
36405: LD_INT 1
36407: MINUS
36408: PUSH
36409: FOR_TO
36410: IFFALSE 36455
// begin tmp := tmp [ pos [ i ] ] ;
36412: LD_ADDR_VAR 0 6
36416: PUSH
36417: LD_VAR 0 6
36421: PUSH
36422: LD_VAR 0 2
36426: PUSH
36427: LD_VAR 0 5
36431: ARRAY
36432: ARRAY
36433: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36434: LD_ADDR_VAR 0 7
36438: PUSH
36439: LD_VAR 0 7
36443: PUSH
36444: LD_VAR 0 6
36448: PUSH
36449: EMPTY
36450: LIST
36451: ADD
36452: ST_TO_ADDR
// end ;
36453: GO 36409
36455: POP
36456: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36457: LD_ADDR_VAR 0 6
36461: PUSH
36462: LD_VAR 0 6
36466: PPUSH
36467: LD_VAR 0 2
36471: PUSH
36472: LD_VAR 0 2
36476: ARRAY
36477: PPUSH
36478: LD_VAR 0 3
36482: PPUSH
36483: CALL_OW 1
36487: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36488: LD_ADDR_VAR 0 7
36492: PUSH
36493: LD_VAR 0 7
36497: PPUSH
36498: LD_VAR 0 7
36502: PPUSH
36503: LD_VAR 0 6
36507: PPUSH
36508: CALL_OW 1
36512: ST_TO_ADDR
// for i = s_arr downto 2 do
36513: LD_ADDR_VAR 0 5
36517: PUSH
36518: DOUBLE
36519: LD_VAR 0 7
36523: INC
36524: ST_TO_ADDR
36525: LD_INT 2
36527: PUSH
36528: FOR_DOWNTO
36529: IFFALSE 36613
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36531: LD_ADDR_VAR 0 6
36535: PUSH
36536: LD_VAR 0 7
36540: PUSH
36541: LD_VAR 0 5
36545: PUSH
36546: LD_INT 1
36548: MINUS
36549: ARRAY
36550: PPUSH
36551: LD_VAR 0 2
36555: PUSH
36556: LD_VAR 0 5
36560: PUSH
36561: LD_INT 1
36563: MINUS
36564: ARRAY
36565: PPUSH
36566: LD_VAR 0 7
36570: PUSH
36571: LD_VAR 0 5
36575: ARRAY
36576: PPUSH
36577: CALL_OW 1
36581: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36582: LD_ADDR_VAR 0 7
36586: PUSH
36587: LD_VAR 0 7
36591: PPUSH
36592: LD_VAR 0 5
36596: PUSH
36597: LD_INT 1
36599: MINUS
36600: PPUSH
36601: LD_VAR 0 6
36605: PPUSH
36606: CALL_OW 1
36610: ST_TO_ADDR
// end ;
36611: GO 36528
36613: POP
36614: POP
// result := s_arr [ 1 ] ;
36615: LD_ADDR_VAR 0 4
36619: PUSH
36620: LD_VAR 0 7
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: ST_TO_ADDR
// end ; end ;
36629: LD_VAR 0 4
36633: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36634: LD_INT 0
36636: PPUSH
36637: PPUSH
// if not list then
36638: LD_VAR 0 1
36642: NOT
36643: IFFALSE 36647
// exit ;
36645: GO 36738
// i := list [ pos1 ] ;
36647: LD_ADDR_VAR 0 5
36651: PUSH
36652: LD_VAR 0 1
36656: PUSH
36657: LD_VAR 0 2
36661: ARRAY
36662: ST_TO_ADDR
// if not i then
36663: LD_VAR 0 5
36667: NOT
36668: IFFALSE 36672
// exit ;
36670: GO 36738
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36672: LD_ADDR_VAR 0 1
36676: PUSH
36677: LD_VAR 0 1
36681: PPUSH
36682: LD_VAR 0 2
36686: PPUSH
36687: LD_VAR 0 1
36691: PUSH
36692: LD_VAR 0 3
36696: ARRAY
36697: PPUSH
36698: CALL_OW 1
36702: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36703: LD_ADDR_VAR 0 1
36707: PUSH
36708: LD_VAR 0 1
36712: PPUSH
36713: LD_VAR 0 3
36717: PPUSH
36718: LD_VAR 0 5
36722: PPUSH
36723: CALL_OW 1
36727: ST_TO_ADDR
// result := list ;
36728: LD_ADDR_VAR 0 4
36732: PUSH
36733: LD_VAR 0 1
36737: ST_TO_ADDR
// end ;
36738: LD_VAR 0 4
36742: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36743: LD_INT 0
36745: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36746: LD_ADDR_VAR 0 5
36750: PUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 250
36760: PPUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL_OW 251
36770: PPUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: LD_VAR 0 3
36780: PPUSH
36781: LD_VAR 0 4
36785: PPUSH
36786: CALL 37164 0 5
36790: ST_TO_ADDR
// end ;
36791: LD_VAR 0 5
36795: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36796: LD_INT 0
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
// if not list or not unit then
36802: LD_VAR 0 2
36806: NOT
36807: PUSH
36808: LD_VAR 0 1
36812: NOT
36813: OR
36814: IFFALSE 36818
// exit ;
36816: GO 37159
// result := [ ] ;
36818: LD_ADDR_VAR 0 5
36822: PUSH
36823: EMPTY
36824: ST_TO_ADDR
// for i in list do
36825: LD_ADDR_VAR 0 6
36829: PUSH
36830: LD_VAR 0 2
36834: PUSH
36835: FOR_IN
36836: IFFALSE 37054
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36838: LD_ADDR_VAR 0 8
36842: PUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: LD_VAR 0 6
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: LD_VAR 0 6
36861: PUSH
36862: LD_INT 2
36864: ARRAY
36865: PPUSH
36866: CALL_OW 297
36870: ST_TO_ADDR
// if not Count ( result ) then
36871: LD_VAR 0 5
36875: PPUSH
36876: CALL 33448 0 1
36880: NOT
36881: IFFALSE 36914
// begin result := Join ( result , [ i , tmp ] ) ;
36883: LD_ADDR_VAR 0 5
36887: PUSH
36888: LD_VAR 0 5
36892: PPUSH
36893: LD_VAR 0 6
36897: PUSH
36898: LD_VAR 0 8
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PPUSH
36907: CALL 69057 0 2
36911: ST_TO_ADDR
// continue ;
36912: GO 36835
// end ; if result [ result ] [ 2 ] <= tmp then
36914: LD_VAR 0 5
36918: PUSH
36919: LD_VAR 0 5
36923: ARRAY
36924: PUSH
36925: LD_INT 2
36927: ARRAY
36928: PUSH
36929: LD_VAR 0 8
36933: LESSEQUAL
36934: IFFALSE 36967
// result := Join ( result , [ i , tmp ] ) else
36936: LD_ADDR_VAR 0 5
36940: PUSH
36941: LD_VAR 0 5
36945: PPUSH
36946: LD_VAR 0 6
36950: PUSH
36951: LD_VAR 0 8
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PPUSH
36960: CALL 69057 0 2
36964: ST_TO_ADDR
36965: GO 37052
// begin for j := 1 to Count ( result ) do
36967: LD_ADDR_VAR 0 7
36971: PUSH
36972: DOUBLE
36973: LD_INT 1
36975: DEC
36976: ST_TO_ADDR
36977: LD_VAR 0 5
36981: PPUSH
36982: CALL 33448 0 1
36986: PUSH
36987: FOR_TO
36988: IFFALSE 37050
// begin if tmp < result [ j ] [ 2 ] then
36990: LD_VAR 0 8
36994: PUSH
36995: LD_VAR 0 5
36999: PUSH
37000: LD_VAR 0 7
37004: ARRAY
37005: PUSH
37006: LD_INT 2
37008: ARRAY
37009: LESS
37010: IFFALSE 37048
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37012: LD_ADDR_VAR 0 5
37016: PUSH
37017: LD_VAR 0 5
37021: PPUSH
37022: LD_VAR 0 7
37026: PPUSH
37027: LD_VAR 0 6
37031: PUSH
37032: LD_VAR 0 8
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PPUSH
37041: CALL_OW 2
37045: ST_TO_ADDR
// break ;
37046: GO 37050
// end ; end ;
37048: GO 36987
37050: POP
37051: POP
// end ; end ;
37052: GO 36835
37054: POP
37055: POP
// if result and not asc then
37056: LD_VAR 0 5
37060: PUSH
37061: LD_VAR 0 3
37065: NOT
37066: AND
37067: IFFALSE 37084
// result := ReverseArray ( result ) ;
37069: LD_ADDR_VAR 0 5
37073: PUSH
37074: LD_VAR 0 5
37078: PPUSH
37079: CALL 64324 0 1
37083: ST_TO_ADDR
// tmp := [ ] ;
37084: LD_ADDR_VAR 0 8
37088: PUSH
37089: EMPTY
37090: ST_TO_ADDR
// if mode then
37091: LD_VAR 0 4
37095: IFFALSE 37159
// begin for i := 1 to result do
37097: LD_ADDR_VAR 0 6
37101: PUSH
37102: DOUBLE
37103: LD_INT 1
37105: DEC
37106: ST_TO_ADDR
37107: LD_VAR 0 5
37111: PUSH
37112: FOR_TO
37113: IFFALSE 37147
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37115: LD_ADDR_VAR 0 8
37119: PUSH
37120: LD_VAR 0 8
37124: PPUSH
37125: LD_VAR 0 5
37129: PUSH
37130: LD_VAR 0 6
37134: ARRAY
37135: PUSH
37136: LD_INT 1
37138: ARRAY
37139: PPUSH
37140: CALL 69057 0 2
37144: ST_TO_ADDR
37145: GO 37112
37147: POP
37148: POP
// result := tmp ;
37149: LD_ADDR_VAR 0 5
37153: PUSH
37154: LD_VAR 0 8
37158: ST_TO_ADDR
// end ; end ;
37159: LD_VAR 0 5
37163: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37164: LD_INT 0
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
// if not list then
37170: LD_VAR 0 3
37174: NOT
37175: IFFALSE 37179
// exit ;
37177: GO 37567
// result := [ ] ;
37179: LD_ADDR_VAR 0 6
37183: PUSH
37184: EMPTY
37185: ST_TO_ADDR
// for i in list do
37186: LD_ADDR_VAR 0 7
37190: PUSH
37191: LD_VAR 0 3
37195: PUSH
37196: FOR_IN
37197: IFFALSE 37399
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37199: LD_ADDR_VAR 0 9
37203: PUSH
37204: LD_VAR 0 7
37208: PPUSH
37209: LD_VAR 0 1
37213: PPUSH
37214: LD_VAR 0 2
37218: PPUSH
37219: CALL_OW 297
37223: ST_TO_ADDR
// if not result then
37224: LD_VAR 0 6
37228: NOT
37229: IFFALSE 37255
// result := [ [ i , tmp ] ] else
37231: LD_ADDR_VAR 0 6
37235: PUSH
37236: LD_VAR 0 7
37240: PUSH
37241: LD_VAR 0 9
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: ST_TO_ADDR
37253: GO 37397
// begin if result [ result ] [ 2 ] <= tmp then
37255: LD_VAR 0 6
37259: PUSH
37260: LD_VAR 0 6
37264: ARRAY
37265: PUSH
37266: LD_INT 2
37268: ARRAY
37269: PUSH
37270: LD_VAR 0 9
37274: LESSEQUAL
37275: IFFALSE 37317
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37277: LD_ADDR_VAR 0 6
37281: PUSH
37282: LD_VAR 0 6
37286: PPUSH
37287: LD_VAR 0 6
37291: PUSH
37292: LD_INT 1
37294: PLUS
37295: PPUSH
37296: LD_VAR 0 7
37300: PUSH
37301: LD_VAR 0 9
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PPUSH
37310: CALL_OW 2
37314: ST_TO_ADDR
37315: GO 37397
// for j := 1 to result do
37317: LD_ADDR_VAR 0 8
37321: PUSH
37322: DOUBLE
37323: LD_INT 1
37325: DEC
37326: ST_TO_ADDR
37327: LD_VAR 0 6
37331: PUSH
37332: FOR_TO
37333: IFFALSE 37395
// begin if tmp < result [ j ] [ 2 ] then
37335: LD_VAR 0 9
37339: PUSH
37340: LD_VAR 0 6
37344: PUSH
37345: LD_VAR 0 8
37349: ARRAY
37350: PUSH
37351: LD_INT 2
37353: ARRAY
37354: LESS
37355: IFFALSE 37393
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37357: LD_ADDR_VAR 0 6
37361: PUSH
37362: LD_VAR 0 6
37366: PPUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_VAR 0 7
37376: PUSH
37377: LD_VAR 0 9
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PPUSH
37386: CALL_OW 2
37390: ST_TO_ADDR
// break ;
37391: GO 37395
// end ; end ;
37393: GO 37332
37395: POP
37396: POP
// end ; end ;
37397: GO 37196
37399: POP
37400: POP
// if result and not asc then
37401: LD_VAR 0 6
37405: PUSH
37406: LD_VAR 0 4
37410: NOT
37411: AND
37412: IFFALSE 37487
// begin tmp := result ;
37414: LD_ADDR_VAR 0 9
37418: PUSH
37419: LD_VAR 0 6
37423: ST_TO_ADDR
// for i = tmp downto 1 do
37424: LD_ADDR_VAR 0 7
37428: PUSH
37429: DOUBLE
37430: LD_VAR 0 9
37434: INC
37435: ST_TO_ADDR
37436: LD_INT 1
37438: PUSH
37439: FOR_DOWNTO
37440: IFFALSE 37485
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37442: LD_ADDR_VAR 0 6
37446: PUSH
37447: LD_VAR 0 6
37451: PPUSH
37452: LD_VAR 0 9
37456: PUSH
37457: LD_VAR 0 7
37461: MINUS
37462: PUSH
37463: LD_INT 1
37465: PLUS
37466: PPUSH
37467: LD_VAR 0 9
37471: PUSH
37472: LD_VAR 0 7
37476: ARRAY
37477: PPUSH
37478: CALL_OW 1
37482: ST_TO_ADDR
37483: GO 37439
37485: POP
37486: POP
// end ; tmp := [ ] ;
37487: LD_ADDR_VAR 0 9
37491: PUSH
37492: EMPTY
37493: ST_TO_ADDR
// if mode then
37494: LD_VAR 0 5
37498: IFFALSE 37567
// begin for i = 1 to result do
37500: LD_ADDR_VAR 0 7
37504: PUSH
37505: DOUBLE
37506: LD_INT 1
37508: DEC
37509: ST_TO_ADDR
37510: LD_VAR 0 6
37514: PUSH
37515: FOR_TO
37516: IFFALSE 37555
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37518: LD_ADDR_VAR 0 9
37522: PUSH
37523: LD_VAR 0 9
37527: PPUSH
37528: LD_VAR 0 7
37532: PPUSH
37533: LD_VAR 0 6
37537: PUSH
37538: LD_VAR 0 7
37542: ARRAY
37543: PUSH
37544: LD_INT 1
37546: ARRAY
37547: PPUSH
37548: CALL_OW 1
37552: ST_TO_ADDR
37553: GO 37515
37555: POP
37556: POP
// result := tmp ;
37557: LD_ADDR_VAR 0 6
37561: PUSH
37562: LD_VAR 0 9
37566: ST_TO_ADDR
// end ; end ;
37567: LD_VAR 0 6
37571: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37572: LD_INT 0
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// if not x or not y then
37602: LD_VAR 0 2
37606: NOT
37607: PUSH
37608: LD_VAR 0 3
37612: NOT
37613: OR
37614: IFFALSE 37618
// exit ;
37616: GO 39268
// if not range then
37618: LD_VAR 0 4
37622: NOT
37623: IFFALSE 37633
// range := 10 ;
37625: LD_ADDR_VAR 0 4
37629: PUSH
37630: LD_INT 10
37632: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37633: LD_ADDR_VAR 0 8
37637: PUSH
37638: LD_INT 81
37640: PUSH
37641: LD_VAR 0 1
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 92
37652: PUSH
37653: LD_VAR 0 2
37657: PUSH
37658: LD_VAR 0 3
37662: PUSH
37663: LD_VAR 0 4
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 21
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: PPUSH
37696: CALL_OW 69
37700: ST_TO_ADDR
// if not tmp then
37701: LD_VAR 0 8
37705: NOT
37706: IFFALSE 37710
// exit ;
37708: GO 39268
// for i in tmp do
37710: LD_ADDR_VAR 0 6
37714: PUSH
37715: LD_VAR 0 8
37719: PUSH
37720: FOR_IN
37721: IFFALSE 39243
// begin points := [ 0 , 0 , 0 ] ;
37723: LD_ADDR_VAR 0 9
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// bpoints := 1 ;
37742: LD_ADDR_VAR 0 10
37746: PUSH
37747: LD_INT 1
37749: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37750: LD_VAR 0 6
37754: PPUSH
37755: CALL_OW 247
37759: PUSH
37760: LD_INT 1
37762: DOUBLE
37763: EQUAL
37764: IFTRUE 37768
37766: GO 38346
37768: POP
// begin if GetClass ( i ) = 1 then
37769: LD_VAR 0 6
37773: PPUSH
37774: CALL_OW 257
37778: PUSH
37779: LD_INT 1
37781: EQUAL
37782: IFFALSE 37803
// points := [ 10 , 5 , 3 ] ;
37784: LD_ADDR_VAR 0 9
37788: PUSH
37789: LD_INT 10
37791: PUSH
37792: LD_INT 5
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37803: LD_VAR 0 6
37807: PPUSH
37808: CALL_OW 257
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 4
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: IN
37827: IFFALSE 37848
// points := [ 3 , 2 , 1 ] ;
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37848: LD_VAR 0 6
37852: PPUSH
37853: CALL_OW 257
37857: PUSH
37858: LD_INT 5
37860: EQUAL
37861: IFFALSE 37882
// points := [ 130 , 5 , 2 ] ;
37863: LD_ADDR_VAR 0 9
37867: PUSH
37868: LD_INT 130
37870: PUSH
37871: LD_INT 5
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37882: LD_VAR 0 6
37886: PPUSH
37887: CALL_OW 257
37891: PUSH
37892: LD_INT 8
37894: EQUAL
37895: IFFALSE 37916
// points := [ 35 , 35 , 30 ] ;
37897: LD_ADDR_VAR 0 9
37901: PUSH
37902: LD_INT 35
37904: PUSH
37905: LD_INT 35
37907: PUSH
37908: LD_INT 30
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37916: LD_VAR 0 6
37920: PPUSH
37921: CALL_OW 257
37925: PUSH
37926: LD_INT 9
37928: EQUAL
37929: IFFALSE 37950
// points := [ 20 , 55 , 40 ] ;
37931: LD_ADDR_VAR 0 9
37935: PUSH
37936: LD_INT 20
37938: PUSH
37939: LD_INT 55
37941: PUSH
37942: LD_INT 40
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37950: LD_VAR 0 6
37954: PPUSH
37955: CALL_OW 257
37959: PUSH
37960: LD_INT 12
37962: PUSH
37963: LD_INT 16
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: IN
37970: IFFALSE 37991
// points := [ 5 , 3 , 2 ] ;
37972: LD_ADDR_VAR 0 9
37976: PUSH
37977: LD_INT 5
37979: PUSH
37980: LD_INT 3
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37991: LD_VAR 0 6
37995: PPUSH
37996: CALL_OW 257
38000: PUSH
38001: LD_INT 17
38003: EQUAL
38004: IFFALSE 38025
// points := [ 100 , 50 , 75 ] ;
38006: LD_ADDR_VAR 0 9
38010: PUSH
38011: LD_INT 100
38013: PUSH
38014: LD_INT 50
38016: PUSH
38017: LD_INT 75
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38025: LD_VAR 0 6
38029: PPUSH
38030: CALL_OW 257
38034: PUSH
38035: LD_INT 15
38037: EQUAL
38038: IFFALSE 38059
// points := [ 10 , 5 , 3 ] ;
38040: LD_ADDR_VAR 0 9
38044: PUSH
38045: LD_INT 10
38047: PUSH
38048: LD_INT 5
38050: PUSH
38051: LD_INT 3
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38059: LD_VAR 0 6
38063: PPUSH
38064: CALL_OW 257
38068: PUSH
38069: LD_INT 14
38071: EQUAL
38072: IFFALSE 38093
// points := [ 10 , 0 , 0 ] ;
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: LD_INT 10
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38093: LD_VAR 0 6
38097: PPUSH
38098: CALL_OW 257
38102: PUSH
38103: LD_INT 11
38105: EQUAL
38106: IFFALSE 38127
// points := [ 30 , 10 , 5 ] ;
38108: LD_ADDR_VAR 0 9
38112: PUSH
38113: LD_INT 30
38115: PUSH
38116: LD_INT 10
38118: PUSH
38119: LD_INT 5
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38127: LD_VAR 0 1
38131: PPUSH
38132: LD_INT 5
38134: PPUSH
38135: CALL_OW 321
38139: PUSH
38140: LD_INT 2
38142: EQUAL
38143: IFFALSE 38160
// bpoints := bpoints * 1.8 ;
38145: LD_ADDR_VAR 0 10
38149: PUSH
38150: LD_VAR 0 10
38154: PUSH
38155: LD_REAL  1.80000000000000E+0000
38158: MUL
38159: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38160: LD_VAR 0 6
38164: PPUSH
38165: CALL_OW 257
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: LD_INT 4
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: IN
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: LD_INT 51
38196: PPUSH
38197: CALL_OW 321
38201: PUSH
38202: LD_INT 2
38204: EQUAL
38205: AND
38206: IFFALSE 38223
// bpoints := bpoints * 1.2 ;
38208: LD_ADDR_VAR 0 10
38212: PUSH
38213: LD_VAR 0 10
38217: PUSH
38218: LD_REAL  1.20000000000000E+0000
38221: MUL
38222: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38223: LD_VAR 0 6
38227: PPUSH
38228: CALL_OW 257
38232: PUSH
38233: LD_INT 5
38235: PUSH
38236: LD_INT 7
38238: PUSH
38239: LD_INT 9
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: IN
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: LD_INT 52
38255: PPUSH
38256: CALL_OW 321
38260: PUSH
38261: LD_INT 2
38263: EQUAL
38264: AND
38265: IFFALSE 38282
// bpoints := bpoints * 1.5 ;
38267: LD_ADDR_VAR 0 10
38271: PUSH
38272: LD_VAR 0 10
38276: PUSH
38277: LD_REAL  1.50000000000000E+0000
38280: MUL
38281: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38282: LD_VAR 0 1
38286: PPUSH
38287: LD_INT 66
38289: PPUSH
38290: CALL_OW 321
38294: PUSH
38295: LD_INT 2
38297: EQUAL
38298: IFFALSE 38315
// bpoints := bpoints * 1.1 ;
38300: LD_ADDR_VAR 0 10
38304: PUSH
38305: LD_VAR 0 10
38309: PUSH
38310: LD_REAL  1.10000000000000E+0000
38313: MUL
38314: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38315: LD_ADDR_VAR 0 10
38319: PUSH
38320: LD_VAR 0 10
38324: PUSH
38325: LD_VAR 0 6
38329: PPUSH
38330: LD_INT 1
38332: PPUSH
38333: CALL_OW 259
38337: PUSH
38338: LD_REAL  1.15000000000000E+0000
38341: MUL
38342: MUL
38343: ST_TO_ADDR
// end ; unit_vehicle :
38344: GO 39172
38346: LD_INT 2
38348: DOUBLE
38349: EQUAL
38350: IFTRUE 38354
38352: GO 39160
38354: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38355: LD_VAR 0 6
38359: PPUSH
38360: CALL_OW 264
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 42
38370: PUSH
38371: LD_INT 24
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: IN
38379: IFFALSE 38400
// points := [ 25 , 5 , 3 ] ;
38381: LD_ADDR_VAR 0 9
38385: PUSH
38386: LD_INT 25
38388: PUSH
38389: LD_INT 5
38391: PUSH
38392: LD_INT 3
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38400: LD_VAR 0 6
38404: PPUSH
38405: CALL_OW 264
38409: PUSH
38410: LD_INT 4
38412: PUSH
38413: LD_INT 43
38415: PUSH
38416: LD_INT 25
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: IN
38424: IFFALSE 38445
// points := [ 40 , 15 , 5 ] ;
38426: LD_ADDR_VAR 0 9
38430: PUSH
38431: LD_INT 40
38433: PUSH
38434: LD_INT 15
38436: PUSH
38437: LD_INT 5
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38445: LD_VAR 0 6
38449: PPUSH
38450: CALL_OW 264
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: LD_INT 23
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: IN
38465: IFFALSE 38486
// points := [ 7 , 25 , 8 ] ;
38467: LD_ADDR_VAR 0 9
38471: PUSH
38472: LD_INT 7
38474: PUSH
38475: LD_INT 25
38477: PUSH
38478: LD_INT 8
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38486: LD_VAR 0 6
38490: PPUSH
38491: CALL_OW 264
38495: PUSH
38496: LD_INT 5
38498: PUSH
38499: LD_INT 27
38501: PUSH
38502: LD_INT 44
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: IN
38510: IFFALSE 38531
// points := [ 14 , 50 , 16 ] ;
38512: LD_ADDR_VAR 0 9
38516: PUSH
38517: LD_INT 14
38519: PUSH
38520: LD_INT 50
38522: PUSH
38523: LD_INT 16
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38531: LD_VAR 0 6
38535: PPUSH
38536: CALL_OW 264
38540: PUSH
38541: LD_INT 6
38543: PUSH
38544: LD_INT 46
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: IN
38551: IFFALSE 38572
// points := [ 32 , 120 , 70 ] ;
38553: LD_ADDR_VAR 0 9
38557: PUSH
38558: LD_INT 32
38560: PUSH
38561: LD_INT 120
38563: PUSH
38564: LD_INT 70
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38572: LD_VAR 0 6
38576: PPUSH
38577: CALL_OW 264
38581: PUSH
38582: LD_INT 7
38584: PUSH
38585: LD_INT 28
38587: PUSH
38588: LD_INT 45
38590: PUSH
38591: LD_INT 92
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: IN
38600: IFFALSE 38621
// points := [ 35 , 20 , 45 ] ;
38602: LD_ADDR_VAR 0 9
38606: PUSH
38607: LD_INT 35
38609: PUSH
38610: LD_INT 20
38612: PUSH
38613: LD_INT 45
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38621: LD_VAR 0 6
38625: PPUSH
38626: CALL_OW 264
38630: PUSH
38631: LD_INT 47
38633: PUSH
38634: EMPTY
38635: LIST
38636: IN
38637: IFFALSE 38658
// points := [ 67 , 45 , 75 ] ;
38639: LD_ADDR_VAR 0 9
38643: PUSH
38644: LD_INT 67
38646: PUSH
38647: LD_INT 45
38649: PUSH
38650: LD_INT 75
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38658: LD_VAR 0 6
38662: PPUSH
38663: CALL_OW 264
38667: PUSH
38668: LD_INT 26
38670: PUSH
38671: EMPTY
38672: LIST
38673: IN
38674: IFFALSE 38695
// points := [ 120 , 30 , 80 ] ;
38676: LD_ADDR_VAR 0 9
38680: PUSH
38681: LD_INT 120
38683: PUSH
38684: LD_INT 30
38686: PUSH
38687: LD_INT 80
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38695: LD_VAR 0 6
38699: PPUSH
38700: CALL_OW 264
38704: PUSH
38705: LD_INT 22
38707: PUSH
38708: EMPTY
38709: LIST
38710: IN
38711: IFFALSE 38732
// points := [ 40 , 1 , 1 ] ;
38713: LD_ADDR_VAR 0 9
38717: PUSH
38718: LD_INT 40
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38732: LD_VAR 0 6
38736: PPUSH
38737: CALL_OW 264
38741: PUSH
38742: LD_INT 29
38744: PUSH
38745: EMPTY
38746: LIST
38747: IN
38748: IFFALSE 38769
// points := [ 70 , 200 , 400 ] ;
38750: LD_ADDR_VAR 0 9
38754: PUSH
38755: LD_INT 70
38757: PUSH
38758: LD_INT 200
38760: PUSH
38761: LD_INT 400
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38769: LD_VAR 0 6
38773: PPUSH
38774: CALL_OW 264
38778: PUSH
38779: LD_INT 14
38781: PUSH
38782: LD_INT 53
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: IN
38789: IFFALSE 38810
// points := [ 40 , 10 , 20 ] ;
38791: LD_ADDR_VAR 0 9
38795: PUSH
38796: LD_INT 40
38798: PUSH
38799: LD_INT 10
38801: PUSH
38802: LD_INT 20
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38810: LD_VAR 0 6
38814: PPUSH
38815: CALL_OW 264
38819: PUSH
38820: LD_INT 9
38822: PUSH
38823: EMPTY
38824: LIST
38825: IN
38826: IFFALSE 38847
// points := [ 5 , 70 , 20 ] ;
38828: LD_ADDR_VAR 0 9
38832: PUSH
38833: LD_INT 5
38835: PUSH
38836: LD_INT 70
38838: PUSH
38839: LD_INT 20
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38847: LD_VAR 0 6
38851: PPUSH
38852: CALL_OW 264
38856: PUSH
38857: LD_INT 10
38859: PUSH
38860: EMPTY
38861: LIST
38862: IN
38863: IFFALSE 38884
// points := [ 35 , 110 , 70 ] ;
38865: LD_ADDR_VAR 0 9
38869: PUSH
38870: LD_INT 35
38872: PUSH
38873: LD_INT 110
38875: PUSH
38876: LD_INT 70
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38884: LD_VAR 0 6
38888: PPUSH
38889: CALL_OW 265
38893: PUSH
38894: LD_INT 25
38896: EQUAL
38897: IFFALSE 38918
// points := [ 80 , 65 , 100 ] ;
38899: LD_ADDR_VAR 0 9
38903: PUSH
38904: LD_INT 80
38906: PUSH
38907: LD_INT 65
38909: PUSH
38910: LD_INT 100
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38918: LD_VAR 0 6
38922: PPUSH
38923: CALL_OW 263
38927: PUSH
38928: LD_INT 1
38930: EQUAL
38931: IFFALSE 38966
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38933: LD_ADDR_VAR 0 10
38937: PUSH
38938: LD_VAR 0 10
38942: PUSH
38943: LD_VAR 0 6
38947: PPUSH
38948: CALL_OW 311
38952: PPUSH
38953: LD_INT 3
38955: PPUSH
38956: CALL_OW 259
38960: PUSH
38961: LD_INT 4
38963: MUL
38964: MUL
38965: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38966: LD_VAR 0 6
38970: PPUSH
38971: CALL_OW 263
38975: PUSH
38976: LD_INT 2
38978: EQUAL
38979: IFFALSE 39030
// begin j := IsControledBy ( i ) ;
38981: LD_ADDR_VAR 0 7
38985: PUSH
38986: LD_VAR 0 6
38990: PPUSH
38991: CALL_OW 312
38995: ST_TO_ADDR
// if j then
38996: LD_VAR 0 7
39000: IFFALSE 39030
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39002: LD_ADDR_VAR 0 10
39006: PUSH
39007: LD_VAR 0 10
39011: PUSH
39012: LD_VAR 0 7
39016: PPUSH
39017: LD_INT 3
39019: PPUSH
39020: CALL_OW 259
39024: PUSH
39025: LD_INT 3
39027: MUL
39028: MUL
39029: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39030: LD_VAR 0 6
39034: PPUSH
39035: CALL_OW 264
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: LD_INT 6
39045: PUSH
39046: LD_INT 46
39048: PUSH
39049: LD_INT 44
39051: PUSH
39052: LD_INT 47
39054: PUSH
39055: LD_INT 45
39057: PUSH
39058: LD_INT 28
39060: PUSH
39061: LD_INT 7
39063: PUSH
39064: LD_INT 27
39066: PUSH
39067: LD_INT 29
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: IN
39082: PUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: LD_INT 52
39090: PPUSH
39091: CALL_OW 321
39095: PUSH
39096: LD_INT 2
39098: EQUAL
39099: AND
39100: IFFALSE 39117
// bpoints := bpoints * 1.2 ;
39102: LD_ADDR_VAR 0 10
39106: PUSH
39107: LD_VAR 0 10
39111: PUSH
39112: LD_REAL  1.20000000000000E+0000
39115: MUL
39116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39117: LD_VAR 0 6
39121: PPUSH
39122: CALL_OW 264
39126: PUSH
39127: LD_INT 6
39129: PUSH
39130: LD_INT 46
39132: PUSH
39133: LD_INT 47
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: IN
39141: IFFALSE 39158
// bpoints := bpoints * 1.2 ;
39143: LD_ADDR_VAR 0 10
39147: PUSH
39148: LD_VAR 0 10
39152: PUSH
39153: LD_REAL  1.20000000000000E+0000
39156: MUL
39157: ST_TO_ADDR
// end ; unit_building :
39158: GO 39172
39160: LD_INT 3
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39168
39166: GO 39171
39168: POP
// ; end ;
39169: GO 39172
39171: POP
// for j = 1 to 3 do
39172: LD_ADDR_VAR 0 7
39176: PUSH
39177: DOUBLE
39178: LD_INT 1
39180: DEC
39181: ST_TO_ADDR
39182: LD_INT 3
39184: PUSH
39185: FOR_TO
39186: IFFALSE 39239
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39188: LD_ADDR_VAR 0 5
39192: PUSH
39193: LD_VAR 0 5
39197: PPUSH
39198: LD_VAR 0 7
39202: PPUSH
39203: LD_VAR 0 5
39207: PUSH
39208: LD_VAR 0 7
39212: ARRAY
39213: PUSH
39214: LD_VAR 0 9
39218: PUSH
39219: LD_VAR 0 7
39223: ARRAY
39224: PUSH
39225: LD_VAR 0 10
39229: MUL
39230: PLUS
39231: PPUSH
39232: CALL_OW 1
39236: ST_TO_ADDR
39237: GO 39185
39239: POP
39240: POP
// end ;
39241: GO 37720
39243: POP
39244: POP
// result := Replace ( result , 4 , tmp ) ;
39245: LD_ADDR_VAR 0 5
39249: PUSH
39250: LD_VAR 0 5
39254: PPUSH
39255: LD_INT 4
39257: PPUSH
39258: LD_VAR 0 8
39262: PPUSH
39263: CALL_OW 1
39267: ST_TO_ADDR
// end ;
39268: LD_VAR 0 5
39272: RET
// export function DangerAtRange ( unit , range ) ; begin
39273: LD_INT 0
39275: PPUSH
// if not unit then
39276: LD_VAR 0 1
39280: NOT
39281: IFFALSE 39285
// exit ;
39283: GO 39330
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: LD_VAR 0 1
39294: PPUSH
39295: CALL_OW 255
39299: PPUSH
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 250
39309: PPUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 251
39319: PPUSH
39320: LD_VAR 0 2
39324: PPUSH
39325: CALL 37572 0 4
39329: ST_TO_ADDR
// end ;
39330: LD_VAR 0 3
39334: RET
// export function DangerInArea ( side , area ) ; begin
39335: LD_INT 0
39337: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39338: LD_ADDR_VAR 0 3
39342: PUSH
39343: LD_VAR 0 2
39347: PPUSH
39348: LD_INT 81
39350: PUSH
39351: LD_VAR 0 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PPUSH
39360: CALL_OW 70
39364: ST_TO_ADDR
// end ;
39365: LD_VAR 0 3
39369: RET
// export function IsExtension ( b ) ; begin
39370: LD_INT 0
39372: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39373: LD_ADDR_VAR 0 2
39377: PUSH
39378: LD_VAR 0 1
39382: PUSH
39383: LD_INT 23
39385: PUSH
39386: LD_INT 20
39388: PUSH
39389: LD_INT 22
39391: PUSH
39392: LD_INT 17
39394: PUSH
39395: LD_INT 24
39397: PUSH
39398: LD_INT 21
39400: PUSH
39401: LD_INT 19
39403: PUSH
39404: LD_INT 16
39406: PUSH
39407: LD_INT 25
39409: PUSH
39410: LD_INT 18
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: IN
39425: ST_TO_ADDR
// end ;
39426: LD_VAR 0 2
39430: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39431: LD_INT 0
39433: PPUSH
39434: PPUSH
39435: PPUSH
// result := [ ] ;
39436: LD_ADDR_VAR 0 4
39440: PUSH
39441: EMPTY
39442: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39443: LD_ADDR_VAR 0 5
39447: PUSH
39448: LD_VAR 0 2
39452: PPUSH
39453: LD_INT 21
39455: PUSH
39456: LD_INT 3
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PPUSH
39463: CALL_OW 70
39467: ST_TO_ADDR
// if not tmp then
39468: LD_VAR 0 5
39472: NOT
39473: IFFALSE 39477
// exit ;
39475: GO 39541
// if checkLink then
39477: LD_VAR 0 3
39481: IFFALSE 39531
// begin for i in tmp do
39483: LD_ADDR_VAR 0 6
39487: PUSH
39488: LD_VAR 0 5
39492: PUSH
39493: FOR_IN
39494: IFFALSE 39529
// if GetBase ( i ) <> base then
39496: LD_VAR 0 6
39500: PPUSH
39501: CALL_OW 274
39505: PUSH
39506: LD_VAR 0 1
39510: NONEQUAL
39511: IFFALSE 39527
// ComLinkToBase ( base , i ) ;
39513: LD_VAR 0 1
39517: PPUSH
39518: LD_VAR 0 6
39522: PPUSH
39523: CALL_OW 169
39527: GO 39493
39529: POP
39530: POP
// end ; result := tmp ;
39531: LD_ADDR_VAR 0 4
39535: PUSH
39536: LD_VAR 0 5
39540: ST_TO_ADDR
// end ;
39541: LD_VAR 0 4
39545: RET
// export function ComComplete ( units , b ) ; var i ; begin
39546: LD_INT 0
39548: PPUSH
39549: PPUSH
// if not units then
39550: LD_VAR 0 1
39554: NOT
39555: IFFALSE 39559
// exit ;
39557: GO 39649
// for i in units do
39559: LD_ADDR_VAR 0 4
39563: PUSH
39564: LD_VAR 0 1
39568: PUSH
39569: FOR_IN
39570: IFFALSE 39647
// if BuildingStatus ( b ) = bs_build then
39572: LD_VAR 0 2
39576: PPUSH
39577: CALL_OW 461
39581: PUSH
39582: LD_INT 1
39584: EQUAL
39585: IFFALSE 39645
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39587: LD_VAR 0 4
39591: PPUSH
39592: LD_STRING h
39594: PUSH
39595: LD_VAR 0 2
39599: PPUSH
39600: CALL_OW 250
39604: PUSH
39605: LD_VAR 0 2
39609: PPUSH
39610: CALL_OW 251
39614: PUSH
39615: LD_VAR 0 2
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: PPUSH
39641: CALL_OW 446
39645: GO 39569
39647: POP
39648: POP
// end ;
39649: LD_VAR 0 3
39653: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39662: LD_VAR 0 1
39666: NOT
39667: PUSH
39668: LD_VAR 0 1
39672: PPUSH
39673: CALL_OW 263
39677: PUSH
39678: LD_INT 2
39680: NONEQUAL
39681: OR
39682: IFFALSE 39686
// exit ;
39684: GO 40002
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39686: LD_ADDR_VAR 0 6
39690: PUSH
39691: LD_INT 22
39693: PUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 255
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 30
39713: PUSH
39714: LD_INT 36
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 34
39723: PUSH
39724: LD_INT 31
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PPUSH
39740: CALL_OW 69
39744: ST_TO_ADDR
// if not tmp then
39745: LD_VAR 0 6
39749: NOT
39750: IFFALSE 39754
// exit ;
39752: GO 40002
// result := [ ] ;
39754: LD_ADDR_VAR 0 2
39758: PUSH
39759: EMPTY
39760: ST_TO_ADDR
// for i in tmp do
39761: LD_ADDR_VAR 0 3
39765: PUSH
39766: LD_VAR 0 6
39770: PUSH
39771: FOR_IN
39772: IFFALSE 39843
// begin t := UnitsInside ( i ) ;
39774: LD_ADDR_VAR 0 4
39778: PUSH
39779: LD_VAR 0 3
39783: PPUSH
39784: CALL_OW 313
39788: ST_TO_ADDR
// if t then
39789: LD_VAR 0 4
39793: IFFALSE 39841
// for j in t do
39795: LD_ADDR_VAR 0 7
39799: PUSH
39800: LD_VAR 0 4
39804: PUSH
39805: FOR_IN
39806: IFFALSE 39839
// result := Replace ( result , result + 1 , j ) ;
39808: LD_ADDR_VAR 0 2
39812: PUSH
39813: LD_VAR 0 2
39817: PPUSH
39818: LD_VAR 0 2
39822: PUSH
39823: LD_INT 1
39825: PLUS
39826: PPUSH
39827: LD_VAR 0 7
39831: PPUSH
39832: CALL_OW 1
39836: ST_TO_ADDR
39837: GO 39805
39839: POP
39840: POP
// end ;
39841: GO 39771
39843: POP
39844: POP
// if not result then
39845: LD_VAR 0 2
39849: NOT
39850: IFFALSE 39854
// exit ;
39852: GO 40002
// mech := result [ 1 ] ;
39854: LD_ADDR_VAR 0 5
39858: PUSH
39859: LD_VAR 0 2
39863: PUSH
39864: LD_INT 1
39866: ARRAY
39867: ST_TO_ADDR
// if result > 1 then
39868: LD_VAR 0 2
39872: PUSH
39873: LD_INT 1
39875: GREATER
39876: IFFALSE 39988
// begin for i = 2 to result do
39878: LD_ADDR_VAR 0 3
39882: PUSH
39883: DOUBLE
39884: LD_INT 2
39886: DEC
39887: ST_TO_ADDR
39888: LD_VAR 0 2
39892: PUSH
39893: FOR_TO
39894: IFFALSE 39986
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39896: LD_ADDR_VAR 0 4
39900: PUSH
39901: LD_VAR 0 2
39905: PUSH
39906: LD_VAR 0 3
39910: ARRAY
39911: PPUSH
39912: LD_INT 3
39914: PPUSH
39915: CALL_OW 259
39919: PUSH
39920: LD_VAR 0 2
39924: PUSH
39925: LD_VAR 0 3
39929: ARRAY
39930: PPUSH
39931: CALL_OW 432
39935: MINUS
39936: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39937: LD_VAR 0 4
39941: PUSH
39942: LD_VAR 0 5
39946: PPUSH
39947: LD_INT 3
39949: PPUSH
39950: CALL_OW 259
39954: PUSH
39955: LD_VAR 0 5
39959: PPUSH
39960: CALL_OW 432
39964: MINUS
39965: GREATEREQUAL
39966: IFFALSE 39984
// mech := result [ i ] ;
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_VAR 0 2
39977: PUSH
39978: LD_VAR 0 3
39982: ARRAY
39983: ST_TO_ADDR
// end ;
39984: GO 39893
39986: POP
39987: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39988: LD_VAR 0 1
39992: PPUSH
39993: LD_VAR 0 5
39997: PPUSH
39998: CALL_OW 135
// end ;
40002: LD_VAR 0 2
40006: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40007: LD_INT 0
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
// result := [ ] ;
40022: LD_ADDR_VAR 0 7
40026: PUSH
40027: EMPTY
40028: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 266
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: IN
40049: NOT
40050: IFFALSE 40054
// exit ;
40052: GO 41688
// if name then
40054: LD_VAR 0 3
40058: IFFALSE 40074
// SetBName ( base_dep , name ) ;
40060: LD_VAR 0 1
40064: PPUSH
40065: LD_VAR 0 3
40069: PPUSH
40070: CALL_OW 500
// base := GetBase ( base_dep ) ;
40074: LD_ADDR_VAR 0 15
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: CALL_OW 274
40088: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40089: LD_ADDR_VAR 0 16
40093: PUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 255
40103: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40104: LD_ADDR_VAR 0 17
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: CALL_OW 248
40118: ST_TO_ADDR
// if sources then
40119: LD_VAR 0 5
40123: IFFALSE 40170
// for i = 1 to 3 do
40125: LD_ADDR_VAR 0 8
40129: PUSH
40130: DOUBLE
40131: LD_INT 1
40133: DEC
40134: ST_TO_ADDR
40135: LD_INT 3
40137: PUSH
40138: FOR_TO
40139: IFFALSE 40168
// AddResourceType ( base , i , sources [ i ] ) ;
40141: LD_VAR 0 15
40145: PPUSH
40146: LD_VAR 0 8
40150: PPUSH
40151: LD_VAR 0 5
40155: PUSH
40156: LD_VAR 0 8
40160: ARRAY
40161: PPUSH
40162: CALL_OW 276
40166: GO 40138
40168: POP
40169: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40170: LD_ADDR_VAR 0 18
40174: PUSH
40175: LD_VAR 0 15
40179: PPUSH
40180: LD_VAR 0 2
40184: PPUSH
40185: LD_INT 1
40187: PPUSH
40188: CALL 39431 0 3
40192: ST_TO_ADDR
// InitHc ;
40193: CALL_OW 19
// InitUc ;
40197: CALL_OW 18
// uc_side := side ;
40201: LD_ADDR_OWVAR 20
40205: PUSH
40206: LD_VAR 0 16
40210: ST_TO_ADDR
// uc_nation := nation ;
40211: LD_ADDR_OWVAR 21
40215: PUSH
40216: LD_VAR 0 17
40220: ST_TO_ADDR
// if buildings then
40221: LD_VAR 0 18
40225: IFFALSE 41547
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40227: LD_ADDR_VAR 0 19
40231: PUSH
40232: LD_VAR 0 18
40236: PPUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 30
40242: PUSH
40243: LD_INT 29
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 30
40252: PUSH
40253: LD_INT 30
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: PPUSH
40265: CALL_OW 72
40269: ST_TO_ADDR
// if tmp then
40270: LD_VAR 0 19
40274: IFFALSE 40322
// for i in tmp do
40276: LD_ADDR_VAR 0 8
40280: PUSH
40281: LD_VAR 0 19
40285: PUSH
40286: FOR_IN
40287: IFFALSE 40320
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40289: LD_VAR 0 8
40293: PPUSH
40294: CALL_OW 250
40298: PPUSH
40299: LD_VAR 0 8
40303: PPUSH
40304: CALL_OW 251
40308: PPUSH
40309: LD_VAR 0 16
40313: PPUSH
40314: CALL_OW 441
40318: GO 40286
40320: POP
40321: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40322: LD_VAR 0 18
40326: PPUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 30
40332: PUSH
40333: LD_INT 32
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 30
40342: PUSH
40343: LD_INT 33
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: PPUSH
40355: CALL_OW 72
40359: IFFALSE 40447
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40361: LD_ADDR_VAR 0 8
40365: PUSH
40366: LD_VAR 0 18
40370: PPUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 30
40376: PUSH
40377: LD_INT 32
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 30
40386: PUSH
40387: LD_INT 33
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: PPUSH
40399: CALL_OW 72
40403: PUSH
40404: FOR_IN
40405: IFFALSE 40445
// begin if not GetBWeapon ( i ) then
40407: LD_VAR 0 8
40411: PPUSH
40412: CALL_OW 269
40416: NOT
40417: IFFALSE 40443
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40419: LD_VAR 0 8
40423: PPUSH
40424: LD_VAR 0 8
40428: PPUSH
40429: LD_VAR 0 2
40433: PPUSH
40434: CALL 41693 0 2
40438: PPUSH
40439: CALL_OW 431
// end ;
40443: GO 40404
40445: POP
40446: POP
// end ; for i = 1 to personel do
40447: LD_ADDR_VAR 0 8
40451: PUSH
40452: DOUBLE
40453: LD_INT 1
40455: DEC
40456: ST_TO_ADDR
40457: LD_VAR 0 6
40461: PUSH
40462: FOR_TO
40463: IFFALSE 41527
// begin if i > 4 then
40465: LD_VAR 0 8
40469: PUSH
40470: LD_INT 4
40472: GREATER
40473: IFFALSE 40477
// break ;
40475: GO 41527
// case i of 1 :
40477: LD_VAR 0 8
40481: PUSH
40482: LD_INT 1
40484: DOUBLE
40485: EQUAL
40486: IFTRUE 40490
40488: GO 40570
40490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40491: LD_ADDR_VAR 0 12
40495: PUSH
40496: LD_VAR 0 18
40500: PPUSH
40501: LD_INT 22
40503: PUSH
40504: LD_VAR 0 16
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 58
40515: PUSH
40516: EMPTY
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 30
40524: PUSH
40525: LD_INT 32
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 30
40534: PUSH
40535: LD_INT 4
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 30
40544: PUSH
40545: LD_INT 5
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 72
40567: ST_TO_ADDR
40568: GO 40792
40570: LD_INT 2
40572: DOUBLE
40573: EQUAL
40574: IFTRUE 40578
40576: GO 40640
40578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40579: LD_ADDR_VAR 0 12
40583: PUSH
40584: LD_VAR 0 18
40588: PPUSH
40589: LD_INT 22
40591: PUSH
40592: LD_VAR 0 16
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 30
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 30
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PPUSH
40633: CALL_OW 72
40637: ST_TO_ADDR
40638: GO 40792
40640: LD_INT 3
40642: DOUBLE
40643: EQUAL
40644: IFTRUE 40648
40646: GO 40710
40648: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40649: LD_ADDR_VAR 0 12
40653: PUSH
40654: LD_VAR 0 18
40658: PPUSH
40659: LD_INT 22
40661: PUSH
40662: LD_VAR 0 16
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 30
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 30
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PPUSH
40703: CALL_OW 72
40707: ST_TO_ADDR
40708: GO 40792
40710: LD_INT 4
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40791
40718: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40719: LD_ADDR_VAR 0 12
40723: PUSH
40724: LD_VAR 0 18
40728: PPUSH
40729: LD_INT 22
40731: PUSH
40732: LD_VAR 0 16
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 30
40746: PUSH
40747: LD_INT 6
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 30
40756: PUSH
40757: LD_INT 7
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 30
40766: PUSH
40767: LD_INT 8
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PPUSH
40784: CALL_OW 72
40788: ST_TO_ADDR
40789: GO 40792
40791: POP
// if i = 1 then
40792: LD_VAR 0 8
40796: PUSH
40797: LD_INT 1
40799: EQUAL
40800: IFFALSE 40911
// begin tmp := [ ] ;
40802: LD_ADDR_VAR 0 19
40806: PUSH
40807: EMPTY
40808: ST_TO_ADDR
// for j in f do
40809: LD_ADDR_VAR 0 9
40813: PUSH
40814: LD_VAR 0 12
40818: PUSH
40819: FOR_IN
40820: IFFALSE 40893
// if GetBType ( j ) = b_bunker then
40822: LD_VAR 0 9
40826: PPUSH
40827: CALL_OW 266
40831: PUSH
40832: LD_INT 32
40834: EQUAL
40835: IFFALSE 40862
// tmp := Insert ( tmp , 1 , j ) else
40837: LD_ADDR_VAR 0 19
40841: PUSH
40842: LD_VAR 0 19
40846: PPUSH
40847: LD_INT 1
40849: PPUSH
40850: LD_VAR 0 9
40854: PPUSH
40855: CALL_OW 2
40859: ST_TO_ADDR
40860: GO 40891
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40862: LD_ADDR_VAR 0 19
40866: PUSH
40867: LD_VAR 0 19
40871: PPUSH
40872: LD_VAR 0 19
40876: PUSH
40877: LD_INT 1
40879: PLUS
40880: PPUSH
40881: LD_VAR 0 9
40885: PPUSH
40886: CALL_OW 2
40890: ST_TO_ADDR
40891: GO 40819
40893: POP
40894: POP
// if tmp then
40895: LD_VAR 0 19
40899: IFFALSE 40911
// f := tmp ;
40901: LD_ADDR_VAR 0 12
40905: PUSH
40906: LD_VAR 0 19
40910: ST_TO_ADDR
// end ; x := personel [ i ] ;
40911: LD_ADDR_VAR 0 13
40915: PUSH
40916: LD_VAR 0 6
40920: PUSH
40921: LD_VAR 0 8
40925: ARRAY
40926: ST_TO_ADDR
// if x = - 1 then
40927: LD_VAR 0 13
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: EQUAL
40936: IFFALSE 41145
// begin for j in f do
40938: LD_ADDR_VAR 0 9
40942: PUSH
40943: LD_VAR 0 12
40947: PUSH
40948: FOR_IN
40949: IFFALSE 41141
// repeat InitHc ;
40951: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40955: LD_VAR 0 9
40959: PPUSH
40960: CALL_OW 266
40964: PUSH
40965: LD_INT 5
40967: EQUAL
40968: IFFALSE 41038
// begin if UnitsInside ( j ) < 3 then
40970: LD_VAR 0 9
40974: PPUSH
40975: CALL_OW 313
40979: PUSH
40980: LD_INT 3
40982: LESS
40983: IFFALSE 41019
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40985: LD_INT 0
40987: PPUSH
40988: LD_INT 5
40990: PUSH
40991: LD_INT 8
40993: PUSH
40994: LD_INT 9
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: PUSH
41002: LD_VAR 0 17
41006: ARRAY
41007: PPUSH
41008: LD_VAR 0 4
41012: PPUSH
41013: CALL_OW 380
41017: GO 41036
// PrepareHuman ( false , i , skill ) ;
41019: LD_INT 0
41021: PPUSH
41022: LD_VAR 0 8
41026: PPUSH
41027: LD_VAR 0 4
41031: PPUSH
41032: CALL_OW 380
// end else
41036: GO 41055
// PrepareHuman ( false , i , skill ) ;
41038: LD_INT 0
41040: PPUSH
41041: LD_VAR 0 8
41045: PPUSH
41046: LD_VAR 0 4
41050: PPUSH
41051: CALL_OW 380
// un := CreateHuman ;
41055: LD_ADDR_VAR 0 14
41059: PUSH
41060: CALL_OW 44
41064: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41065: LD_ADDR_VAR 0 7
41069: PUSH
41070: LD_VAR 0 7
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: LD_VAR 0 14
41082: PPUSH
41083: CALL_OW 2
41087: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41088: LD_VAR 0 14
41092: PPUSH
41093: LD_VAR 0 9
41097: PPUSH
41098: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41102: LD_VAR 0 9
41106: PPUSH
41107: CALL_OW 313
41111: PUSH
41112: LD_INT 6
41114: EQUAL
41115: PUSH
41116: LD_VAR 0 9
41120: PPUSH
41121: CALL_OW 266
41125: PUSH
41126: LD_INT 32
41128: PUSH
41129: LD_INT 31
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: IN
41136: OR
41137: IFFALSE 40951
41139: GO 40948
41141: POP
41142: POP
// end else
41143: GO 41525
// for j = 1 to x do
41145: LD_ADDR_VAR 0 9
41149: PUSH
41150: DOUBLE
41151: LD_INT 1
41153: DEC
41154: ST_TO_ADDR
41155: LD_VAR 0 13
41159: PUSH
41160: FOR_TO
41161: IFFALSE 41523
// begin InitHc ;
41163: CALL_OW 19
// if not f then
41167: LD_VAR 0 12
41171: NOT
41172: IFFALSE 41261
// begin PrepareHuman ( false , i , skill ) ;
41174: LD_INT 0
41176: PPUSH
41177: LD_VAR 0 8
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: CALL_OW 380
// un := CreateHuman ;
41191: LD_ADDR_VAR 0 14
41195: PUSH
41196: CALL_OW 44
41200: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41201: LD_ADDR_VAR 0 7
41205: PUSH
41206: LD_VAR 0 7
41210: PPUSH
41211: LD_INT 1
41213: PPUSH
41214: LD_VAR 0 14
41218: PPUSH
41219: CALL_OW 2
41223: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41224: LD_VAR 0 14
41228: PPUSH
41229: LD_VAR 0 1
41233: PPUSH
41234: CALL_OW 250
41238: PPUSH
41239: LD_VAR 0 1
41243: PPUSH
41244: CALL_OW 251
41248: PPUSH
41249: LD_INT 10
41251: PPUSH
41252: LD_INT 0
41254: PPUSH
41255: CALL_OW 50
// continue ;
41259: GO 41160
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41261: LD_VAR 0 12
41265: PUSH
41266: LD_INT 1
41268: ARRAY
41269: PPUSH
41270: CALL_OW 313
41274: PUSH
41275: LD_VAR 0 12
41279: PUSH
41280: LD_INT 1
41282: ARRAY
41283: PPUSH
41284: CALL_OW 266
41288: PUSH
41289: LD_INT 32
41291: PUSH
41292: LD_INT 31
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: IN
41299: AND
41300: PUSH
41301: LD_VAR 0 12
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: PPUSH
41310: CALL_OW 313
41314: PUSH
41315: LD_INT 6
41317: EQUAL
41318: OR
41319: IFFALSE 41339
// f := Delete ( f , 1 ) ;
41321: LD_ADDR_VAR 0 12
41325: PUSH
41326: LD_VAR 0 12
41330: PPUSH
41331: LD_INT 1
41333: PPUSH
41334: CALL_OW 3
41338: ST_TO_ADDR
// if not f then
41339: LD_VAR 0 12
41343: NOT
41344: IFFALSE 41362
// begin x := x + 2 ;
41346: LD_ADDR_VAR 0 13
41350: PUSH
41351: LD_VAR 0 13
41355: PUSH
41356: LD_INT 2
41358: PLUS
41359: ST_TO_ADDR
// continue ;
41360: GO 41160
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41362: LD_VAR 0 12
41366: PUSH
41367: LD_INT 1
41369: ARRAY
41370: PPUSH
41371: CALL_OW 266
41375: PUSH
41376: LD_INT 5
41378: EQUAL
41379: IFFALSE 41453
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41381: LD_VAR 0 12
41385: PUSH
41386: LD_INT 1
41388: ARRAY
41389: PPUSH
41390: CALL_OW 313
41394: PUSH
41395: LD_INT 3
41397: LESS
41398: IFFALSE 41434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41400: LD_INT 0
41402: PPUSH
41403: LD_INT 5
41405: PUSH
41406: LD_INT 8
41408: PUSH
41409: LD_INT 9
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: PUSH
41417: LD_VAR 0 17
41421: ARRAY
41422: PPUSH
41423: LD_VAR 0 4
41427: PPUSH
41428: CALL_OW 380
41432: GO 41451
// PrepareHuman ( false , i , skill ) ;
41434: LD_INT 0
41436: PPUSH
41437: LD_VAR 0 8
41441: PPUSH
41442: LD_VAR 0 4
41446: PPUSH
41447: CALL_OW 380
// end else
41451: GO 41470
// PrepareHuman ( false , i , skill ) ;
41453: LD_INT 0
41455: PPUSH
41456: LD_VAR 0 8
41460: PPUSH
41461: LD_VAR 0 4
41465: PPUSH
41466: CALL_OW 380
// un := CreateHuman ;
41470: LD_ADDR_VAR 0 14
41474: PUSH
41475: CALL_OW 44
41479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41480: LD_ADDR_VAR 0 7
41484: PUSH
41485: LD_VAR 0 7
41489: PPUSH
41490: LD_INT 1
41492: PPUSH
41493: LD_VAR 0 14
41497: PPUSH
41498: CALL_OW 2
41502: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41503: LD_VAR 0 14
41507: PPUSH
41508: LD_VAR 0 12
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PPUSH
41517: CALL_OW 52
// end ;
41521: GO 41160
41523: POP
41524: POP
// end ;
41525: GO 40462
41527: POP
41528: POP
// result := result ^ buildings ;
41529: LD_ADDR_VAR 0 7
41533: PUSH
41534: LD_VAR 0 7
41538: PUSH
41539: LD_VAR 0 18
41543: ADD
41544: ST_TO_ADDR
// end else
41545: GO 41688
// begin for i = 1 to personel do
41547: LD_ADDR_VAR 0 8
41551: PUSH
41552: DOUBLE
41553: LD_INT 1
41555: DEC
41556: ST_TO_ADDR
41557: LD_VAR 0 6
41561: PUSH
41562: FOR_TO
41563: IFFALSE 41686
// begin if i > 4 then
41565: LD_VAR 0 8
41569: PUSH
41570: LD_INT 4
41572: GREATER
41573: IFFALSE 41577
// break ;
41575: GO 41686
// x := personel [ i ] ;
41577: LD_ADDR_VAR 0 13
41581: PUSH
41582: LD_VAR 0 6
41586: PUSH
41587: LD_VAR 0 8
41591: ARRAY
41592: ST_TO_ADDR
// if x = - 1 then
41593: LD_VAR 0 13
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: EQUAL
41602: IFFALSE 41606
// continue ;
41604: GO 41562
// PrepareHuman ( false , i , skill ) ;
41606: LD_INT 0
41608: PPUSH
41609: LD_VAR 0 8
41613: PPUSH
41614: LD_VAR 0 4
41618: PPUSH
41619: CALL_OW 380
// un := CreateHuman ;
41623: LD_ADDR_VAR 0 14
41627: PUSH
41628: CALL_OW 44
41632: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41633: LD_VAR 0 14
41637: PPUSH
41638: LD_VAR 0 1
41642: PPUSH
41643: CALL_OW 250
41647: PPUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 251
41657: PPUSH
41658: LD_INT 10
41660: PPUSH
41661: LD_INT 0
41663: PPUSH
41664: CALL_OW 50
// result := result ^ un ;
41668: LD_ADDR_VAR 0 7
41672: PUSH
41673: LD_VAR 0 7
41677: PUSH
41678: LD_VAR 0 14
41682: ADD
41683: ST_TO_ADDR
// end ;
41684: GO 41562
41686: POP
41687: POP
// end ; end ;
41688: LD_VAR 0 7
41692: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41693: LD_INT 0
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
// result := false ;
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: LD_INT 0
41718: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41719: LD_VAR 0 1
41723: NOT
41724: PUSH
41725: LD_VAR 0 1
41729: PPUSH
41730: CALL_OW 266
41734: PUSH
41735: LD_INT 32
41737: PUSH
41738: LD_INT 33
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: IN
41745: NOT
41746: OR
41747: IFFALSE 41751
// exit ;
41749: GO 42860
// nat := GetNation ( tower ) ;
41751: LD_ADDR_VAR 0 12
41755: PUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: CALL_OW 248
41765: ST_TO_ADDR
// side := GetSide ( tower ) ;
41766: LD_ADDR_VAR 0 16
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 255
41780: ST_TO_ADDR
// x := GetX ( tower ) ;
41781: LD_ADDR_VAR 0 10
41785: PUSH
41786: LD_VAR 0 1
41790: PPUSH
41791: CALL_OW 250
41795: ST_TO_ADDR
// y := GetY ( tower ) ;
41796: LD_ADDR_VAR 0 11
41800: PUSH
41801: LD_VAR 0 1
41805: PPUSH
41806: CALL_OW 251
41810: ST_TO_ADDR
// if not x or not y then
41811: LD_VAR 0 10
41815: NOT
41816: PUSH
41817: LD_VAR 0 11
41821: NOT
41822: OR
41823: IFFALSE 41827
// exit ;
41825: GO 42860
// weapon := 0 ;
41827: LD_ADDR_VAR 0 18
41831: PUSH
41832: LD_INT 0
41834: ST_TO_ADDR
// fac_list := [ ] ;
41835: LD_ADDR_VAR 0 17
41839: PUSH
41840: EMPTY
41841: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41842: LD_ADDR_VAR 0 6
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 274
41856: PPUSH
41857: LD_VAR 0 2
41861: PPUSH
41862: LD_INT 0
41864: PPUSH
41865: CALL 39431 0 3
41869: PPUSH
41870: LD_INT 30
41872: PUSH
41873: LD_INT 3
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PPUSH
41880: CALL_OW 72
41884: ST_TO_ADDR
// if not factories then
41885: LD_VAR 0 6
41889: NOT
41890: IFFALSE 41894
// exit ;
41892: GO 42860
// for i in factories do
41894: LD_ADDR_VAR 0 8
41898: PUSH
41899: LD_VAR 0 6
41903: PUSH
41904: FOR_IN
41905: IFFALSE 41930
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41907: LD_ADDR_VAR 0 17
41911: PUSH
41912: LD_VAR 0 17
41916: PUSH
41917: LD_VAR 0 8
41921: PPUSH
41922: CALL_OW 478
41926: UNION
41927: ST_TO_ADDR
41928: GO 41904
41930: POP
41931: POP
// if not fac_list then
41932: LD_VAR 0 17
41936: NOT
41937: IFFALSE 41941
// exit ;
41939: GO 42860
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41941: LD_ADDR_VAR 0 5
41945: PUSH
41946: LD_INT 4
41948: PUSH
41949: LD_INT 5
41951: PUSH
41952: LD_INT 9
41954: PUSH
41955: LD_INT 10
41957: PUSH
41958: LD_INT 6
41960: PUSH
41961: LD_INT 7
41963: PUSH
41964: LD_INT 11
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 27
41978: PUSH
41979: LD_INT 28
41981: PUSH
41982: LD_INT 26
41984: PUSH
41985: LD_INT 30
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 43
41996: PUSH
41997: LD_INT 44
41999: PUSH
42000: LD_INT 46
42002: PUSH
42003: LD_INT 45
42005: PUSH
42006: LD_INT 47
42008: PUSH
42009: LD_INT 49
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: LD_VAR 0 12
42029: ARRAY
42030: ST_TO_ADDR
// list := list isect fac_list ;
42031: LD_ADDR_VAR 0 5
42035: PUSH
42036: LD_VAR 0 5
42040: PUSH
42041: LD_VAR 0 17
42045: ISECT
42046: ST_TO_ADDR
// if not list then
42047: LD_VAR 0 5
42051: NOT
42052: IFFALSE 42056
// exit ;
42054: GO 42860
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42056: LD_VAR 0 12
42060: PUSH
42061: LD_INT 3
42063: EQUAL
42064: PUSH
42065: LD_INT 49
42067: PUSH
42068: LD_VAR 0 5
42072: IN
42073: AND
42074: PUSH
42075: LD_INT 31
42077: PPUSH
42078: LD_VAR 0 16
42082: PPUSH
42083: CALL_OW 321
42087: PUSH
42088: LD_INT 2
42090: EQUAL
42091: AND
42092: IFFALSE 42152
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42094: LD_INT 22
42096: PUSH
42097: LD_VAR 0 16
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 35
42108: PUSH
42109: LD_INT 49
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 91
42118: PUSH
42119: LD_VAR 0 1
42123: PUSH
42124: LD_INT 10
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: PPUSH
42137: CALL_OW 69
42141: NOT
42142: IFFALSE 42152
// weapon := ru_time_lapser ;
42144: LD_ADDR_VAR 0 18
42148: PUSH
42149: LD_INT 49
42151: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42152: LD_VAR 0 12
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: IN
42167: PUSH
42168: LD_INT 11
42170: PUSH
42171: LD_VAR 0 5
42175: IN
42176: PUSH
42177: LD_INT 30
42179: PUSH
42180: LD_VAR 0 5
42184: IN
42185: OR
42186: AND
42187: PUSH
42188: LD_INT 6
42190: PPUSH
42191: LD_VAR 0 16
42195: PPUSH
42196: CALL_OW 321
42200: PUSH
42201: LD_INT 2
42203: EQUAL
42204: AND
42205: IFFALSE 42370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42207: LD_INT 22
42209: PUSH
42210: LD_VAR 0 16
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 35
42224: PUSH
42225: LD_INT 11
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 35
42234: PUSH
42235: LD_INT 30
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 91
42249: PUSH
42250: LD_VAR 0 1
42254: PUSH
42255: LD_INT 18
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: PPUSH
42268: CALL_OW 69
42272: NOT
42273: PUSH
42274: LD_INT 22
42276: PUSH
42277: LD_VAR 0 16
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 30
42291: PUSH
42292: LD_INT 32
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 30
42301: PUSH
42302: LD_INT 33
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 91
42316: PUSH
42317: LD_VAR 0 1
42321: PUSH
42322: LD_INT 12
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: PPUSH
42338: CALL_OW 69
42342: PUSH
42343: LD_INT 2
42345: GREATER
42346: AND
42347: IFFALSE 42370
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42349: LD_ADDR_VAR 0 18
42353: PUSH
42354: LD_INT 11
42356: PUSH
42357: LD_INT 30
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_VAR 0 12
42368: ARRAY
42369: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42370: LD_VAR 0 18
42374: NOT
42375: PUSH
42376: LD_INT 40
42378: PPUSH
42379: LD_VAR 0 16
42383: PPUSH
42384: CALL_OW 321
42388: PUSH
42389: LD_INT 2
42391: EQUAL
42392: AND
42393: PUSH
42394: LD_INT 7
42396: PUSH
42397: LD_VAR 0 5
42401: IN
42402: PUSH
42403: LD_INT 28
42405: PUSH
42406: LD_VAR 0 5
42410: IN
42411: OR
42412: PUSH
42413: LD_INT 45
42415: PUSH
42416: LD_VAR 0 5
42420: IN
42421: OR
42422: AND
42423: IFFALSE 42677
// begin hex := GetHexInfo ( x , y ) ;
42425: LD_ADDR_VAR 0 4
42429: PUSH
42430: LD_VAR 0 10
42434: PPUSH
42435: LD_VAR 0 11
42439: PPUSH
42440: CALL_OW 546
42444: ST_TO_ADDR
// if hex [ 1 ] then
42445: LD_VAR 0 4
42449: PUSH
42450: LD_INT 1
42452: ARRAY
42453: IFFALSE 42457
// exit ;
42455: GO 42860
// height := hex [ 2 ] ;
42457: LD_ADDR_VAR 0 15
42461: PUSH
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 2
42469: ARRAY
42470: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42471: LD_ADDR_VAR 0 14
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 5
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
// for i in tmp do
42494: LD_ADDR_VAR 0 8
42498: PUSH
42499: LD_VAR 0 14
42503: PUSH
42504: FOR_IN
42505: IFFALSE 42675
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42507: LD_ADDR_VAR 0 9
42511: PUSH
42512: LD_VAR 0 10
42516: PPUSH
42517: LD_VAR 0 8
42521: PPUSH
42522: LD_INT 5
42524: PPUSH
42525: CALL_OW 272
42529: PUSH
42530: LD_VAR 0 11
42534: PPUSH
42535: LD_VAR 0 8
42539: PPUSH
42540: LD_INT 5
42542: PPUSH
42543: CALL_OW 273
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42552: LD_VAR 0 9
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PPUSH
42561: LD_VAR 0 9
42565: PUSH
42566: LD_INT 2
42568: ARRAY
42569: PPUSH
42570: CALL_OW 488
42574: IFFALSE 42673
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42576: LD_ADDR_VAR 0 4
42580: PUSH
42581: LD_VAR 0 9
42585: PUSH
42586: LD_INT 1
42588: ARRAY
42589: PPUSH
42590: LD_VAR 0 9
42594: PUSH
42595: LD_INT 2
42597: ARRAY
42598: PPUSH
42599: CALL_OW 546
42603: ST_TO_ADDR
// if hex [ 1 ] then
42604: LD_VAR 0 4
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: IFFALSE 42616
// continue ;
42614: GO 42504
// h := hex [ 2 ] ;
42616: LD_ADDR_VAR 0 13
42620: PUSH
42621: LD_VAR 0 4
42625: PUSH
42626: LD_INT 2
42628: ARRAY
42629: ST_TO_ADDR
// if h + 7 < height then
42630: LD_VAR 0 13
42634: PUSH
42635: LD_INT 7
42637: PLUS
42638: PUSH
42639: LD_VAR 0 15
42643: LESS
42644: IFFALSE 42673
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42646: LD_ADDR_VAR 0 18
42650: PUSH
42651: LD_INT 7
42653: PUSH
42654: LD_INT 28
42656: PUSH
42657: LD_INT 45
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: PUSH
42665: LD_VAR 0 12
42669: ARRAY
42670: ST_TO_ADDR
// break ;
42671: GO 42675
// end ; end ; end ;
42673: GO 42504
42675: POP
42676: POP
// end ; if not weapon then
42677: LD_VAR 0 18
42681: NOT
42682: IFFALSE 42742
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42684: LD_ADDR_VAR 0 5
42688: PUSH
42689: LD_VAR 0 5
42693: PUSH
42694: LD_INT 11
42696: PUSH
42697: LD_INT 30
42699: PUSH
42700: LD_INT 49
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: DIFF
42708: ST_TO_ADDR
// if not list then
42709: LD_VAR 0 5
42713: NOT
42714: IFFALSE 42718
// exit ;
42716: GO 42860
// weapon := list [ rand ( 1 , list ) ] ;
42718: LD_ADDR_VAR 0 18
42722: PUSH
42723: LD_VAR 0 5
42727: PUSH
42728: LD_INT 1
42730: PPUSH
42731: LD_VAR 0 5
42735: PPUSH
42736: CALL_OW 12
42740: ARRAY
42741: ST_TO_ADDR
// end ; if weapon then
42742: LD_VAR 0 18
42746: IFFALSE 42860
// begin tmp := CostOfWeapon ( weapon ) ;
42748: LD_ADDR_VAR 0 14
42752: PUSH
42753: LD_VAR 0 18
42757: PPUSH
42758: CALL_OW 451
42762: ST_TO_ADDR
// j := GetBase ( tower ) ;
42763: LD_ADDR_VAR 0 9
42767: PUSH
42768: LD_VAR 0 1
42772: PPUSH
42773: CALL_OW 274
42777: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42778: LD_VAR 0 9
42782: PPUSH
42783: LD_INT 1
42785: PPUSH
42786: CALL_OW 275
42790: PUSH
42791: LD_VAR 0 14
42795: PUSH
42796: LD_INT 1
42798: ARRAY
42799: GREATEREQUAL
42800: PUSH
42801: LD_VAR 0 9
42805: PPUSH
42806: LD_INT 2
42808: PPUSH
42809: CALL_OW 275
42813: PUSH
42814: LD_VAR 0 14
42818: PUSH
42819: LD_INT 2
42821: ARRAY
42822: GREATEREQUAL
42823: AND
42824: PUSH
42825: LD_VAR 0 9
42829: PPUSH
42830: LD_INT 3
42832: PPUSH
42833: CALL_OW 275
42837: PUSH
42838: LD_VAR 0 14
42842: PUSH
42843: LD_INT 3
42845: ARRAY
42846: GREATEREQUAL
42847: AND
42848: IFFALSE 42860
// result := weapon ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_VAR 0 18
42859: ST_TO_ADDR
// end ; end ;
42860: LD_VAR 0 3
42864: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42865: LD_INT 0
42867: PPUSH
42868: PPUSH
// result := true ;
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 1
42876: ST_TO_ADDR
// if array1 = array2 then
42877: LD_VAR 0 1
42881: PUSH
42882: LD_VAR 0 2
42886: EQUAL
42887: IFFALSE 42947
// begin for i = 1 to array1 do
42889: LD_ADDR_VAR 0 4
42893: PUSH
42894: DOUBLE
42895: LD_INT 1
42897: DEC
42898: ST_TO_ADDR
42899: LD_VAR 0 1
42903: PUSH
42904: FOR_TO
42905: IFFALSE 42943
// if array1 [ i ] <> array2 [ i ] then
42907: LD_VAR 0 1
42911: PUSH
42912: LD_VAR 0 4
42916: ARRAY
42917: PUSH
42918: LD_VAR 0 2
42922: PUSH
42923: LD_VAR 0 4
42927: ARRAY
42928: NONEQUAL
42929: IFFALSE 42941
// begin result := false ;
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_INT 0
42938: ST_TO_ADDR
// break ;
42939: GO 42943
// end ;
42941: GO 42904
42943: POP
42944: POP
// end else
42945: GO 42955
// result := false ;
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 0
42954: ST_TO_ADDR
// end ;
42955: LD_VAR 0 3
42959: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42960: LD_INT 0
42962: PPUSH
42963: PPUSH
// if not array1 or not array2 then
42964: LD_VAR 0 1
42968: NOT
42969: PUSH
42970: LD_VAR 0 2
42974: NOT
42975: OR
42976: IFFALSE 42980
// exit ;
42978: GO 43044
// result := true ;
42980: LD_ADDR_VAR 0 3
42984: PUSH
42985: LD_INT 1
42987: ST_TO_ADDR
// for i = 1 to array1 do
42988: LD_ADDR_VAR 0 4
42992: PUSH
42993: DOUBLE
42994: LD_INT 1
42996: DEC
42997: ST_TO_ADDR
42998: LD_VAR 0 1
43002: PUSH
43003: FOR_TO
43004: IFFALSE 43042
// if array1 [ i ] <> array2 [ i ] then
43006: LD_VAR 0 1
43010: PUSH
43011: LD_VAR 0 4
43015: ARRAY
43016: PUSH
43017: LD_VAR 0 2
43021: PUSH
43022: LD_VAR 0 4
43026: ARRAY
43027: NONEQUAL
43028: IFFALSE 43040
// begin result := false ;
43030: LD_ADDR_VAR 0 3
43034: PUSH
43035: LD_INT 0
43037: ST_TO_ADDR
// break ;
43038: GO 43042
// end ;
43040: GO 43003
43042: POP
43043: POP
// end ;
43044: LD_VAR 0 3
43048: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43049: LD_INT 0
43051: PPUSH
43052: PPUSH
43053: PPUSH
// pom := GetBase ( fac ) ;
43054: LD_ADDR_VAR 0 5
43058: PUSH
43059: LD_VAR 0 1
43063: PPUSH
43064: CALL_OW 274
43068: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43069: LD_ADDR_VAR 0 4
43073: PUSH
43074: LD_VAR 0 2
43078: PUSH
43079: LD_INT 1
43081: ARRAY
43082: PPUSH
43083: LD_VAR 0 2
43087: PUSH
43088: LD_INT 2
43090: ARRAY
43091: PPUSH
43092: LD_VAR 0 2
43096: PUSH
43097: LD_INT 3
43099: ARRAY
43100: PPUSH
43101: LD_VAR 0 2
43105: PUSH
43106: LD_INT 4
43108: ARRAY
43109: PPUSH
43110: CALL_OW 449
43114: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_VAR 0 5
43124: PPUSH
43125: LD_INT 1
43127: PPUSH
43128: CALL_OW 275
43132: PUSH
43133: LD_VAR 0 4
43137: PUSH
43138: LD_INT 1
43140: ARRAY
43141: GREATEREQUAL
43142: PUSH
43143: LD_VAR 0 5
43147: PPUSH
43148: LD_INT 2
43150: PPUSH
43151: CALL_OW 275
43155: PUSH
43156: LD_VAR 0 4
43160: PUSH
43161: LD_INT 2
43163: ARRAY
43164: GREATEREQUAL
43165: AND
43166: PUSH
43167: LD_VAR 0 5
43171: PPUSH
43172: LD_INT 3
43174: PPUSH
43175: CALL_OW 275
43179: PUSH
43180: LD_VAR 0 4
43184: PUSH
43185: LD_INT 3
43187: ARRAY
43188: GREATEREQUAL
43189: AND
43190: ST_TO_ADDR
// end ;
43191: LD_VAR 0 3
43195: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43196: LD_INT 0
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
// pom := GetBase ( building ) ;
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_VAR 0 1
43211: PPUSH
43212: CALL_OW 274
43216: ST_TO_ADDR
// if not pom then
43217: LD_VAR 0 3
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43396
// btype := GetBType ( building ) ;
43226: LD_ADDR_VAR 0 5
43230: PUSH
43231: LD_VAR 0 1
43235: PPUSH
43236: CALL_OW 266
43240: ST_TO_ADDR
// if btype = b_armoury then
43241: LD_VAR 0 5
43245: PUSH
43246: LD_INT 4
43248: EQUAL
43249: IFFALSE 43259
// btype := b_barracks ;
43251: LD_ADDR_VAR 0 5
43255: PUSH
43256: LD_INT 5
43258: ST_TO_ADDR
// if btype = b_depot then
43259: LD_VAR 0 5
43263: PUSH
43264: LD_INT 0
43266: EQUAL
43267: IFFALSE 43277
// btype := b_warehouse ;
43269: LD_ADDR_VAR 0 5
43273: PUSH
43274: LD_INT 1
43276: ST_TO_ADDR
// if btype = b_workshop then
43277: LD_VAR 0 5
43281: PUSH
43282: LD_INT 2
43284: EQUAL
43285: IFFALSE 43295
// btype := b_factory ;
43287: LD_ADDR_VAR 0 5
43291: PUSH
43292: LD_INT 3
43294: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43295: LD_ADDR_VAR 0 4
43299: PUSH
43300: LD_VAR 0 5
43304: PPUSH
43305: LD_VAR 0 1
43309: PPUSH
43310: CALL_OW 248
43314: PPUSH
43315: CALL_OW 450
43319: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43320: LD_ADDR_VAR 0 2
43324: PUSH
43325: LD_VAR 0 3
43329: PPUSH
43330: LD_INT 1
43332: PPUSH
43333: CALL_OW 275
43337: PUSH
43338: LD_VAR 0 4
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: GREATEREQUAL
43347: PUSH
43348: LD_VAR 0 3
43352: PPUSH
43353: LD_INT 2
43355: PPUSH
43356: CALL_OW 275
43360: PUSH
43361: LD_VAR 0 4
43365: PUSH
43366: LD_INT 2
43368: ARRAY
43369: GREATEREQUAL
43370: AND
43371: PUSH
43372: LD_VAR 0 3
43376: PPUSH
43377: LD_INT 3
43379: PPUSH
43380: CALL_OW 275
43384: PUSH
43385: LD_VAR 0 4
43389: PUSH
43390: LD_INT 3
43392: ARRAY
43393: GREATEREQUAL
43394: AND
43395: ST_TO_ADDR
// end ;
43396: LD_VAR 0 2
43400: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43401: LD_INT 0
43403: PPUSH
43404: PPUSH
43405: PPUSH
// pom := GetBase ( building ) ;
43406: LD_ADDR_VAR 0 4
43410: PUSH
43411: LD_VAR 0 1
43415: PPUSH
43416: CALL_OW 274
43420: ST_TO_ADDR
// if not pom then
43421: LD_VAR 0 4
43425: NOT
43426: IFFALSE 43430
// exit ;
43428: GO 43531
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43430: LD_ADDR_VAR 0 5
43434: PUSH
43435: LD_VAR 0 2
43439: PPUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: CALL_OW 248
43449: PPUSH
43450: CALL_OW 450
43454: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_VAR 0 4
43464: PPUSH
43465: LD_INT 1
43467: PPUSH
43468: CALL_OW 275
43472: PUSH
43473: LD_VAR 0 5
43477: PUSH
43478: LD_INT 1
43480: ARRAY
43481: GREATEREQUAL
43482: PUSH
43483: LD_VAR 0 4
43487: PPUSH
43488: LD_INT 2
43490: PPUSH
43491: CALL_OW 275
43495: PUSH
43496: LD_VAR 0 5
43500: PUSH
43501: LD_INT 2
43503: ARRAY
43504: GREATEREQUAL
43505: AND
43506: PUSH
43507: LD_VAR 0 4
43511: PPUSH
43512: LD_INT 3
43514: PPUSH
43515: CALL_OW 275
43519: PUSH
43520: LD_VAR 0 5
43524: PUSH
43525: LD_INT 3
43527: ARRAY
43528: GREATEREQUAL
43529: AND
43530: ST_TO_ADDR
// end ;
43531: LD_VAR 0 3
43535: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43536: LD_INT 0
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
// result := false ;
43549: LD_ADDR_VAR 0 8
43553: PUSH
43554: LD_INT 0
43556: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43557: LD_VAR 0 5
43561: NOT
43562: PUSH
43563: LD_VAR 0 1
43567: NOT
43568: OR
43569: PUSH
43570: LD_VAR 0 2
43574: NOT
43575: OR
43576: PUSH
43577: LD_VAR 0 3
43581: NOT
43582: OR
43583: IFFALSE 43587
// exit ;
43585: GO 44401
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43587: LD_ADDR_VAR 0 14
43591: PUSH
43592: LD_VAR 0 1
43596: PPUSH
43597: LD_VAR 0 2
43601: PPUSH
43602: LD_VAR 0 3
43606: PPUSH
43607: LD_VAR 0 4
43611: PPUSH
43612: LD_VAR 0 5
43616: PUSH
43617: LD_INT 1
43619: ARRAY
43620: PPUSH
43621: CALL_OW 248
43625: PPUSH
43626: LD_INT 0
43628: PPUSH
43629: CALL 45654 0 6
43633: ST_TO_ADDR
// if not hexes then
43634: LD_VAR 0 14
43638: NOT
43639: IFFALSE 43643
// exit ;
43641: GO 44401
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43643: LD_ADDR_VAR 0 17
43647: PUSH
43648: LD_VAR 0 5
43652: PPUSH
43653: LD_INT 22
43655: PUSH
43656: LD_VAR 0 13
43660: PPUSH
43661: CALL_OW 255
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 30
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 30
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PPUSH
43702: CALL_OW 72
43706: ST_TO_ADDR
// for i = 1 to hexes do
43707: LD_ADDR_VAR 0 9
43711: PUSH
43712: DOUBLE
43713: LD_INT 1
43715: DEC
43716: ST_TO_ADDR
43717: LD_VAR 0 14
43721: PUSH
43722: FOR_TO
43723: IFFALSE 44399
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43725: LD_ADDR_VAR 0 13
43729: PUSH
43730: LD_VAR 0 14
43734: PUSH
43735: LD_VAR 0 9
43739: ARRAY
43740: PUSH
43741: LD_INT 1
43743: ARRAY
43744: PPUSH
43745: LD_VAR 0 14
43749: PUSH
43750: LD_VAR 0 9
43754: ARRAY
43755: PUSH
43756: LD_INT 2
43758: ARRAY
43759: PPUSH
43760: CALL_OW 428
43764: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43765: LD_VAR 0 14
43769: PUSH
43770: LD_VAR 0 9
43774: ARRAY
43775: PUSH
43776: LD_INT 1
43778: ARRAY
43779: PPUSH
43780: LD_VAR 0 14
43784: PUSH
43785: LD_VAR 0 9
43789: ARRAY
43790: PUSH
43791: LD_INT 2
43793: ARRAY
43794: PPUSH
43795: CALL_OW 351
43799: PUSH
43800: LD_VAR 0 14
43804: PUSH
43805: LD_VAR 0 9
43809: ARRAY
43810: PUSH
43811: LD_INT 1
43813: ARRAY
43814: PPUSH
43815: LD_VAR 0 14
43819: PUSH
43820: LD_VAR 0 9
43824: ARRAY
43825: PUSH
43826: LD_INT 2
43828: ARRAY
43829: PPUSH
43830: CALL_OW 488
43834: NOT
43835: OR
43836: PUSH
43837: LD_VAR 0 13
43841: PPUSH
43842: CALL_OW 247
43846: PUSH
43847: LD_INT 3
43849: EQUAL
43850: OR
43851: IFFALSE 43857
// exit ;
43853: POP
43854: POP
43855: GO 44401
// if not tmp then
43857: LD_VAR 0 13
43861: NOT
43862: IFFALSE 43866
// continue ;
43864: GO 43722
// result := true ;
43866: LD_ADDR_VAR 0 8
43870: PUSH
43871: LD_INT 1
43873: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43874: LD_VAR 0 6
43878: PUSH
43879: LD_VAR 0 13
43883: PPUSH
43884: CALL_OW 247
43888: PUSH
43889: LD_INT 2
43891: EQUAL
43892: AND
43893: PUSH
43894: LD_VAR 0 13
43898: PPUSH
43899: CALL_OW 263
43903: PUSH
43904: LD_INT 1
43906: EQUAL
43907: AND
43908: IFFALSE 44072
// begin if IsDrivenBy ( tmp ) then
43910: LD_VAR 0 13
43914: PPUSH
43915: CALL_OW 311
43919: IFFALSE 43923
// continue ;
43921: GO 43722
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43923: LD_VAR 0 6
43927: PPUSH
43928: LD_INT 3
43930: PUSH
43931: LD_INT 60
43933: PUSH
43934: EMPTY
43935: LIST
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: LD_INT 55
43946: PUSH
43947: EMPTY
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PPUSH
43958: CALL_OW 72
43962: IFFALSE 44070
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43964: LD_ADDR_VAR 0 18
43968: PUSH
43969: LD_VAR 0 6
43973: PPUSH
43974: LD_INT 3
43976: PUSH
43977: LD_INT 60
43979: PUSH
43980: EMPTY
43981: LIST
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: LD_INT 55
43992: PUSH
43993: EMPTY
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PPUSH
44004: CALL_OW 72
44008: PUSH
44009: LD_INT 1
44011: ARRAY
44012: ST_TO_ADDR
// if IsInUnit ( driver ) then
44013: LD_VAR 0 18
44017: PPUSH
44018: CALL_OW 310
44022: IFFALSE 44033
// ComExit ( driver ) ;
44024: LD_VAR 0 18
44028: PPUSH
44029: CALL 69455 0 1
// AddComEnterUnit ( driver , tmp ) ;
44033: LD_VAR 0 18
44037: PPUSH
44038: LD_VAR 0 13
44042: PPUSH
44043: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44047: LD_VAR 0 18
44051: PPUSH
44052: LD_VAR 0 7
44056: PPUSH
44057: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44061: LD_VAR 0 18
44065: PPUSH
44066: CALL_OW 181
// end ; continue ;
44070: GO 43722
// end ; if not cleaners or not tmp in cleaners then
44072: LD_VAR 0 6
44076: NOT
44077: PUSH
44078: LD_VAR 0 13
44082: PUSH
44083: LD_VAR 0 6
44087: IN
44088: NOT
44089: OR
44090: IFFALSE 44397
// begin if dep then
44092: LD_VAR 0 17
44096: IFFALSE 44232
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44098: LD_ADDR_VAR 0 16
44102: PUSH
44103: LD_VAR 0 17
44107: PUSH
44108: LD_INT 1
44110: ARRAY
44111: PPUSH
44112: CALL_OW 250
44116: PPUSH
44117: LD_VAR 0 17
44121: PUSH
44122: LD_INT 1
44124: ARRAY
44125: PPUSH
44126: CALL_OW 254
44130: PPUSH
44131: LD_INT 5
44133: PPUSH
44134: CALL_OW 272
44138: PUSH
44139: LD_VAR 0 17
44143: PUSH
44144: LD_INT 1
44146: ARRAY
44147: PPUSH
44148: CALL_OW 251
44152: PPUSH
44153: LD_VAR 0 17
44157: PUSH
44158: LD_INT 1
44160: ARRAY
44161: PPUSH
44162: CALL_OW 254
44166: PPUSH
44167: LD_INT 5
44169: PPUSH
44170: CALL_OW 273
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44179: LD_VAR 0 16
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: PPUSH
44188: LD_VAR 0 16
44192: PUSH
44193: LD_INT 2
44195: ARRAY
44196: PPUSH
44197: CALL_OW 488
44201: IFFALSE 44232
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44203: LD_VAR 0 13
44207: PPUSH
44208: LD_VAR 0 16
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: PPUSH
44217: LD_VAR 0 16
44221: PUSH
44222: LD_INT 2
44224: ARRAY
44225: PPUSH
44226: CALL_OW 111
// continue ;
44230: GO 43722
// end ; end ; r := GetDir ( tmp ) ;
44232: LD_ADDR_VAR 0 15
44236: PUSH
44237: LD_VAR 0 13
44241: PPUSH
44242: CALL_OW 254
44246: ST_TO_ADDR
// if r = 5 then
44247: LD_VAR 0 15
44251: PUSH
44252: LD_INT 5
44254: EQUAL
44255: IFFALSE 44265
// r := 0 ;
44257: LD_ADDR_VAR 0 15
44261: PUSH
44262: LD_INT 0
44264: ST_TO_ADDR
// for j = r to 5 do
44265: LD_ADDR_VAR 0 10
44269: PUSH
44270: DOUBLE
44271: LD_VAR 0 15
44275: DEC
44276: ST_TO_ADDR
44277: LD_INT 5
44279: PUSH
44280: FOR_TO
44281: IFFALSE 44395
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44283: LD_ADDR_VAR 0 11
44287: PUSH
44288: LD_VAR 0 13
44292: PPUSH
44293: CALL_OW 250
44297: PPUSH
44298: LD_VAR 0 10
44302: PPUSH
44303: LD_INT 2
44305: PPUSH
44306: CALL_OW 272
44310: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44311: LD_ADDR_VAR 0 12
44315: PUSH
44316: LD_VAR 0 13
44320: PPUSH
44321: CALL_OW 251
44325: PPUSH
44326: LD_VAR 0 10
44330: PPUSH
44331: LD_INT 2
44333: PPUSH
44334: CALL_OW 273
44338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44339: LD_VAR 0 11
44343: PPUSH
44344: LD_VAR 0 12
44348: PPUSH
44349: CALL_OW 488
44353: PUSH
44354: LD_VAR 0 11
44358: PPUSH
44359: LD_VAR 0 12
44363: PPUSH
44364: CALL_OW 428
44368: NOT
44369: AND
44370: IFFALSE 44393
// begin ComMoveXY ( tmp , _x , _y ) ;
44372: LD_VAR 0 13
44376: PPUSH
44377: LD_VAR 0 11
44381: PPUSH
44382: LD_VAR 0 12
44386: PPUSH
44387: CALL_OW 111
// break ;
44391: GO 44395
// end ; end ;
44393: GO 44280
44395: POP
44396: POP
// end ; end ;
44397: GO 43722
44399: POP
44400: POP
// end ;
44401: LD_VAR 0 8
44405: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44406: LD_INT 0
44408: PPUSH
// result := true ;
44409: LD_ADDR_VAR 0 3
44413: PUSH
44414: LD_INT 1
44416: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44417: LD_VAR 0 2
44421: PUSH
44422: LD_INT 24
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44436
44428: LD_INT 33
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44461
44436: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_INT 32
44444: PPUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 321
44454: PUSH
44455: LD_INT 2
44457: EQUAL
44458: ST_TO_ADDR
44459: GO 44777
44461: LD_INT 20
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44494
44469: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 6
44477: PPUSH
44478: LD_VAR 0 1
44482: PPUSH
44483: CALL_OW 321
44487: PUSH
44488: LD_INT 2
44490: EQUAL
44491: ST_TO_ADDR
44492: GO 44777
44494: LD_INT 22
44496: DOUBLE
44497: EQUAL
44498: IFTRUE 44508
44500: LD_INT 36
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44508
44506: GO 44533
44508: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44509: LD_ADDR_VAR 0 3
44513: PUSH
44514: LD_INT 15
44516: PPUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 321
44526: PUSH
44527: LD_INT 2
44529: EQUAL
44530: ST_TO_ADDR
44531: GO 44777
44533: LD_INT 30
44535: DOUBLE
44536: EQUAL
44537: IFTRUE 44541
44539: GO 44566
44541: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44542: LD_ADDR_VAR 0 3
44546: PUSH
44547: LD_INT 20
44549: PPUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: CALL_OW 321
44559: PUSH
44560: LD_INT 2
44562: EQUAL
44563: ST_TO_ADDR
44564: GO 44777
44566: LD_INT 28
44568: DOUBLE
44569: EQUAL
44570: IFTRUE 44580
44572: LD_INT 21
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44605
44580: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_INT 21
44588: PPUSH
44589: LD_VAR 0 1
44593: PPUSH
44594: CALL_OW 321
44598: PUSH
44599: LD_INT 2
44601: EQUAL
44602: ST_TO_ADDR
44603: GO 44777
44605: LD_INT 16
44607: DOUBLE
44608: EQUAL
44609: IFTRUE 44613
44611: GO 44638
44613: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44614: LD_ADDR_VAR 0 3
44618: PUSH
44619: LD_INT 84
44621: PPUSH
44622: LD_VAR 0 1
44626: PPUSH
44627: CALL_OW 321
44631: PUSH
44632: LD_INT 2
44634: EQUAL
44635: ST_TO_ADDR
44636: GO 44777
44638: LD_INT 19
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44652
44644: LD_INT 23
44646: DOUBLE
44647: EQUAL
44648: IFTRUE 44652
44650: GO 44677
44652: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_INT 83
44660: PPUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: CALL_OW 321
44670: PUSH
44671: LD_INT 2
44673: EQUAL
44674: ST_TO_ADDR
44675: GO 44777
44677: LD_INT 17
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44710
44685: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 39
44693: PPUSH
44694: LD_VAR 0 1
44698: PPUSH
44699: CALL_OW 321
44703: PUSH
44704: LD_INT 2
44706: EQUAL
44707: ST_TO_ADDR
44708: GO 44777
44710: LD_INT 18
44712: DOUBLE
44713: EQUAL
44714: IFTRUE 44718
44716: GO 44743
44718: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44719: LD_ADDR_VAR 0 3
44723: PUSH
44724: LD_INT 40
44726: PPUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: CALL_OW 321
44736: PUSH
44737: LD_INT 2
44739: EQUAL
44740: ST_TO_ADDR
44741: GO 44777
44743: LD_INT 27
44745: DOUBLE
44746: EQUAL
44747: IFTRUE 44751
44749: GO 44776
44751: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44752: LD_ADDR_VAR 0 3
44756: PUSH
44757: LD_INT 35
44759: PPUSH
44760: LD_VAR 0 1
44764: PPUSH
44765: CALL_OW 321
44769: PUSH
44770: LD_INT 2
44772: EQUAL
44773: ST_TO_ADDR
44774: GO 44777
44776: POP
// end ;
44777: LD_VAR 0 3
44781: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44782: LD_INT 0
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
// result := false ;
44795: LD_ADDR_VAR 0 6
44799: PUSH
44800: LD_INT 0
44802: ST_TO_ADDR
// if btype = b_depot then
44803: LD_VAR 0 2
44807: PUSH
44808: LD_INT 0
44810: EQUAL
44811: IFFALSE 44823
// begin result := true ;
44813: LD_ADDR_VAR 0 6
44817: PUSH
44818: LD_INT 1
44820: ST_TO_ADDR
// exit ;
44821: GO 45649
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44823: LD_VAR 0 1
44827: NOT
44828: PUSH
44829: LD_VAR 0 1
44833: PPUSH
44834: CALL_OW 266
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: IN
44849: NOT
44850: OR
44851: PUSH
44852: LD_VAR 0 2
44856: NOT
44857: OR
44858: PUSH
44859: LD_VAR 0 5
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: LD_INT 5
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: IN
44890: NOT
44891: OR
44892: PUSH
44893: LD_VAR 0 3
44897: PPUSH
44898: LD_VAR 0 4
44902: PPUSH
44903: CALL_OW 488
44907: NOT
44908: OR
44909: IFFALSE 44913
// exit ;
44911: GO 45649
// side := GetSide ( depot ) ;
44913: LD_ADDR_VAR 0 9
44917: PUSH
44918: LD_VAR 0 1
44922: PPUSH
44923: CALL_OW 255
44927: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44928: LD_VAR 0 9
44932: PPUSH
44933: LD_VAR 0 2
44937: PPUSH
44938: CALL 44406 0 2
44942: NOT
44943: IFFALSE 44947
// exit ;
44945: GO 45649
// pom := GetBase ( depot ) ;
44947: LD_ADDR_VAR 0 10
44951: PUSH
44952: LD_VAR 0 1
44956: PPUSH
44957: CALL_OW 274
44961: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44962: LD_ADDR_VAR 0 11
44966: PUSH
44967: LD_VAR 0 2
44971: PPUSH
44972: LD_VAR 0 1
44976: PPUSH
44977: CALL_OW 248
44981: PPUSH
44982: CALL_OW 450
44986: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44987: LD_VAR 0 10
44991: PPUSH
44992: LD_INT 1
44994: PPUSH
44995: CALL_OW 275
44999: PUSH
45000: LD_VAR 0 11
45004: PUSH
45005: LD_INT 1
45007: ARRAY
45008: GREATEREQUAL
45009: PUSH
45010: LD_VAR 0 10
45014: PPUSH
45015: LD_INT 2
45017: PPUSH
45018: CALL_OW 275
45022: PUSH
45023: LD_VAR 0 11
45027: PUSH
45028: LD_INT 2
45030: ARRAY
45031: GREATEREQUAL
45032: AND
45033: PUSH
45034: LD_VAR 0 10
45038: PPUSH
45039: LD_INT 3
45041: PPUSH
45042: CALL_OW 275
45046: PUSH
45047: LD_VAR 0 11
45051: PUSH
45052: LD_INT 3
45054: ARRAY
45055: GREATEREQUAL
45056: AND
45057: NOT
45058: IFFALSE 45062
// exit ;
45060: GO 45649
// if GetBType ( depot ) = b_depot then
45062: LD_VAR 0 1
45066: PPUSH
45067: CALL_OW 266
45071: PUSH
45072: LD_INT 0
45074: EQUAL
45075: IFFALSE 45087
// dist := 28 else
45077: LD_ADDR_VAR 0 14
45081: PUSH
45082: LD_INT 28
45084: ST_TO_ADDR
45085: GO 45095
// dist := 36 ;
45087: LD_ADDR_VAR 0 14
45091: PUSH
45092: LD_INT 36
45094: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45095: LD_VAR 0 1
45099: PPUSH
45100: LD_VAR 0 3
45104: PPUSH
45105: LD_VAR 0 4
45109: PPUSH
45110: CALL_OW 297
45114: PUSH
45115: LD_VAR 0 14
45119: GREATER
45120: IFFALSE 45124
// exit ;
45122: GO 45649
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45124: LD_ADDR_VAR 0 12
45128: PUSH
45129: LD_VAR 0 2
45133: PPUSH
45134: LD_VAR 0 3
45138: PPUSH
45139: LD_VAR 0 4
45143: PPUSH
45144: LD_VAR 0 5
45148: PPUSH
45149: LD_VAR 0 1
45153: PPUSH
45154: CALL_OW 248
45158: PPUSH
45159: LD_INT 0
45161: PPUSH
45162: CALL 45654 0 6
45166: ST_TO_ADDR
// if not hexes then
45167: LD_VAR 0 12
45171: NOT
45172: IFFALSE 45176
// exit ;
45174: GO 45649
// hex := GetHexInfo ( x , y ) ;
45176: LD_ADDR_VAR 0 15
45180: PUSH
45181: LD_VAR 0 3
45185: PPUSH
45186: LD_VAR 0 4
45190: PPUSH
45191: CALL_OW 546
45195: ST_TO_ADDR
// if hex [ 1 ] then
45196: LD_VAR 0 15
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: IFFALSE 45208
// exit ;
45206: GO 45649
// height := hex [ 2 ] ;
45208: LD_ADDR_VAR 0 13
45212: PUSH
45213: LD_VAR 0 15
45217: PUSH
45218: LD_INT 2
45220: ARRAY
45221: ST_TO_ADDR
// for i = 1 to hexes do
45222: LD_ADDR_VAR 0 7
45226: PUSH
45227: DOUBLE
45228: LD_INT 1
45230: DEC
45231: ST_TO_ADDR
45232: LD_VAR 0 12
45236: PUSH
45237: FOR_TO
45238: IFFALSE 45568
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45240: LD_VAR 0 12
45244: PUSH
45245: LD_VAR 0 7
45249: ARRAY
45250: PUSH
45251: LD_INT 1
45253: ARRAY
45254: PPUSH
45255: LD_VAR 0 12
45259: PUSH
45260: LD_VAR 0 7
45264: ARRAY
45265: PUSH
45266: LD_INT 2
45268: ARRAY
45269: PPUSH
45270: CALL_OW 488
45274: NOT
45275: PUSH
45276: LD_VAR 0 12
45280: PUSH
45281: LD_VAR 0 7
45285: ARRAY
45286: PUSH
45287: LD_INT 1
45289: ARRAY
45290: PPUSH
45291: LD_VAR 0 12
45295: PUSH
45296: LD_VAR 0 7
45300: ARRAY
45301: PUSH
45302: LD_INT 2
45304: ARRAY
45305: PPUSH
45306: CALL_OW 428
45310: PUSH
45311: LD_INT 0
45313: GREATER
45314: OR
45315: PUSH
45316: LD_VAR 0 12
45320: PUSH
45321: LD_VAR 0 7
45325: ARRAY
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PPUSH
45331: LD_VAR 0 12
45335: PUSH
45336: LD_VAR 0 7
45340: ARRAY
45341: PUSH
45342: LD_INT 2
45344: ARRAY
45345: PPUSH
45346: CALL_OW 351
45350: OR
45351: IFFALSE 45357
// exit ;
45353: POP
45354: POP
45355: GO 45649
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45357: LD_ADDR_VAR 0 8
45361: PUSH
45362: LD_VAR 0 12
45366: PUSH
45367: LD_VAR 0 7
45371: ARRAY
45372: PUSH
45373: LD_INT 1
45375: ARRAY
45376: PPUSH
45377: LD_VAR 0 12
45381: PUSH
45382: LD_VAR 0 7
45386: ARRAY
45387: PUSH
45388: LD_INT 2
45390: ARRAY
45391: PPUSH
45392: CALL_OW 546
45396: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45397: LD_VAR 0 8
45401: PUSH
45402: LD_INT 1
45404: ARRAY
45405: PUSH
45406: LD_VAR 0 8
45410: PUSH
45411: LD_INT 2
45413: ARRAY
45414: PUSH
45415: LD_VAR 0 13
45419: PUSH
45420: LD_INT 2
45422: PLUS
45423: GREATER
45424: OR
45425: PUSH
45426: LD_VAR 0 8
45430: PUSH
45431: LD_INT 2
45433: ARRAY
45434: PUSH
45435: LD_VAR 0 13
45439: PUSH
45440: LD_INT 2
45442: MINUS
45443: LESS
45444: OR
45445: PUSH
45446: LD_VAR 0 8
45450: PUSH
45451: LD_INT 3
45453: ARRAY
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 8
45460: PUSH
45461: LD_INT 9
45463: PUSH
45464: LD_INT 10
45466: PUSH
45467: LD_INT 11
45469: PUSH
45470: LD_INT 12
45472: PUSH
45473: LD_INT 13
45475: PUSH
45476: LD_INT 16
45478: PUSH
45479: LD_INT 17
45481: PUSH
45482: LD_INT 18
45484: PUSH
45485: LD_INT 19
45487: PUSH
45488: LD_INT 20
45490: PUSH
45491: LD_INT 21
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: IN
45509: NOT
45510: OR
45511: PUSH
45512: LD_VAR 0 8
45516: PUSH
45517: LD_INT 5
45519: ARRAY
45520: NOT
45521: OR
45522: PUSH
45523: LD_VAR 0 8
45527: PUSH
45528: LD_INT 6
45530: ARRAY
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 7
45540: PUSH
45541: LD_INT 9
45543: PUSH
45544: LD_INT 10
45546: PUSH
45547: LD_INT 11
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: IN
45558: NOT
45559: OR
45560: IFFALSE 45566
// exit ;
45562: POP
45563: POP
45564: GO 45649
// end ;
45566: GO 45237
45568: POP
45569: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45570: LD_VAR 0 9
45574: PPUSH
45575: LD_VAR 0 3
45579: PPUSH
45580: LD_VAR 0 4
45584: PPUSH
45585: LD_INT 20
45587: PPUSH
45588: CALL 37572 0 4
45592: PUSH
45593: LD_INT 4
45595: ARRAY
45596: IFFALSE 45600
// exit ;
45598: GO 45649
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45600: LD_VAR 0 2
45604: PUSH
45605: LD_INT 29
45607: PUSH
45608: LD_INT 30
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: IN
45615: PUSH
45616: LD_VAR 0 3
45620: PPUSH
45621: LD_VAR 0 4
45625: PPUSH
45626: LD_VAR 0 9
45630: PPUSH
45631: CALL_OW 440
45635: NOT
45636: AND
45637: IFFALSE 45641
// exit ;
45639: GO 45649
// result := true ;
45641: LD_ADDR_VAR 0 6
45645: PUSH
45646: LD_INT 1
45648: ST_TO_ADDR
// end ;
45649: LD_VAR 0 6
45653: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45654: LD_INT 0
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
45681: PPUSH
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
45711: PPUSH
45712: PPUSH
45713: PPUSH
// result = [ ] ;
45714: LD_ADDR_VAR 0 7
45718: PUSH
45719: EMPTY
45720: ST_TO_ADDR
// temp_list = [ ] ;
45721: LD_ADDR_VAR 0 9
45725: PUSH
45726: EMPTY
45727: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45728: LD_VAR 0 4
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: LD_INT 4
45747: PUSH
45748: LD_INT 5
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: IN
45759: NOT
45760: PUSH
45761: LD_VAR 0 1
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: IN
45776: PUSH
45777: LD_VAR 0 5
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: IN
45796: NOT
45797: AND
45798: OR
45799: IFFALSE 45803
// exit ;
45801: GO 64194
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45803: LD_VAR 0 1
45807: PUSH
45808: LD_INT 6
45810: PUSH
45811: LD_INT 7
45813: PUSH
45814: LD_INT 8
45816: PUSH
45817: LD_INT 13
45819: PUSH
45820: LD_INT 12
45822: PUSH
45823: LD_INT 15
45825: PUSH
45826: LD_INT 11
45828: PUSH
45829: LD_INT 14
45831: PUSH
45832: LD_INT 10
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: IN
45846: IFFALSE 45856
// btype = b_lab ;
45848: LD_ADDR_VAR 0 1
45852: PUSH
45853: LD_INT 6
45855: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45856: LD_VAR 0 6
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: IN
45875: NOT
45876: PUSH
45877: LD_VAR 0 1
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 3
45893: PUSH
45894: LD_INT 6
45896: PUSH
45897: LD_INT 36
45899: PUSH
45900: LD_INT 4
45902: PUSH
45903: LD_INT 5
45905: PUSH
45906: LD_INT 31
45908: PUSH
45909: LD_INT 32
45911: PUSH
45912: LD_INT 33
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: IN
45928: NOT
45929: PUSH
45930: LD_VAR 0 6
45934: PUSH
45935: LD_INT 1
45937: EQUAL
45938: AND
45939: OR
45940: PUSH
45941: LD_VAR 0 1
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 3
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: IN
45956: NOT
45957: PUSH
45958: LD_VAR 0 6
45962: PUSH
45963: LD_INT 2
45965: EQUAL
45966: AND
45967: OR
45968: IFFALSE 45978
// mode = 0 ;
45970: LD_ADDR_VAR 0 6
45974: PUSH
45975: LD_INT 0
45977: ST_TO_ADDR
// case mode of 0 :
45978: LD_VAR 0 6
45982: PUSH
45983: LD_INT 0
45985: DOUBLE
45986: EQUAL
45987: IFTRUE 45991
45989: GO 57444
45991: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45992: LD_ADDR_VAR 0 11
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 3
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46185: LD_ADDR_VAR 0 12
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46381: LD_ADDR_VAR 0 13
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 3
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 3
46552: NEG
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46580: LD_ADDR_VAR 0 14
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 3
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46776: LD_ADDR_VAR 0 15
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46969: LD_ADDR_VAR 0 16
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47162: LD_ADDR_VAR 0 17
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47392: LD_ADDR_VAR 0 18
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47622: LD_ADDR_VAR 0 19
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47852: LD_ADDR_VAR 0 20
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48082: LD_ADDR_VAR 0 21
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48312: LD_ADDR_VAR 0 22
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48542: LD_ADDR_VAR 0 23
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48822: LD_ADDR_VAR 0 24
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49098: LD_ADDR_VAR 0 25
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49372: LD_ADDR_VAR 0 26
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49648: LD_ADDR_VAR 0 27
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49928: LD_ADDR_VAR 0 28
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 3
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50210: LD_ADDR_VAR 0 29
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50489: LD_ADDR_VAR 0 30
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50767: LD_ADDR_VAR 0 31
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51045: LD_ADDR_VAR 0 32
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 33
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51602: LD_ADDR_VAR 0 34
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51882: LD_ADDR_VAR 0 35
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51994: LD_ADDR_VAR 0 36
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52106: LD_ADDR_VAR 0 37
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52218: LD_ADDR_VAR 0 38
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52330: LD_ADDR_VAR 0 39
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52442: LD_ADDR_VAR 0 40
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52554: LD_ADDR_VAR 0 41
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 3
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52904: LD_ADDR_VAR 0 42
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 2
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53254: LD_ADDR_VAR 0 43
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53602: LD_ADDR_VAR 0 44
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53952: LD_ADDR_VAR 0 45
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 3
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54302: LD_ADDR_VAR 0 46
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54650: LD_ADDR_VAR 0 47
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54801: LD_ADDR_VAR 0 48
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54948: LD_ADDR_VAR 0 49
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55092: LD_ADDR_VAR 0 50
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55236: LD_ADDR_VAR 0 51
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55383: LD_ADDR_VAR 0 52
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55534: LD_ADDR_VAR 0 53
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55764: LD_ADDR_VAR 0 54
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55994: LD_ADDR_VAR 0 55
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56224: LD_ADDR_VAR 0 56
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56454: LD_ADDR_VAR 0 57
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56684: LD_ADDR_VAR 0 58
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56914: LD_ADDR_VAR 0 59
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57002: LD_ADDR_VAR 0 60
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57090: LD_ADDR_VAR 0 61
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57178: LD_ADDR_VAR 0 62
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57266: LD_ADDR_VAR 0 63
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57354: LD_ADDR_VAR 0 64
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// end ; 1 :
57442: GO 63339
57444: LD_INT 1
57446: DOUBLE
57447: EQUAL
57448: IFTRUE 57452
57450: GO 60075
57452: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57453: LD_ADDR_VAR 0 11
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57497: LD_ADDR_VAR 0 12
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57538: LD_ADDR_VAR 0 13
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57578: LD_ADDR_VAR 0 14
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57619: LD_ADDR_VAR 0 15
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 3
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57663: LD_ADDR_VAR 0 16
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57709: LD_ADDR_VAR 0 17
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57753: LD_ADDR_VAR 0 18
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57794: LD_ADDR_VAR 0 19
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57834: LD_ADDR_VAR 0 20
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57875: LD_ADDR_VAR 0 21
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57919: LD_ADDR_VAR 0 22
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57965: LD_ADDR_VAR 0 23
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 4
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58009: LD_ADDR_VAR 0 24
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 4
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58050: LD_ADDR_VAR 0 25
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 4
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 4
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58090: LD_ADDR_VAR 0 26
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 3
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58131: LD_ADDR_VAR 0 27
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58175: LD_ADDR_VAR 0 28
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 4
58206: NEG
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58221: LD_ADDR_VAR 0 29
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 4
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 5
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 5
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 6
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 6
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 5
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58376: LD_ADDR_VAR 0 30
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 4
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 4
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 5
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 6
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 6
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58519: LD_ADDR_VAR 0 31
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 4
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: LD_INT 4
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 5
58586: PUSH
58587: LD_INT 4
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 5
58596: PUSH
58597: LD_INT 5
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 4
58606: PUSH
58607: LD_INT 5
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 6
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 6
58626: PUSH
58627: LD_INT 6
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 5
58636: PUSH
58637: LD_INT 6
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58658: LD_ADDR_VAR 0 32
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 5
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 5
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 6
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 6
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 5
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58801: LD_ADDR_VAR 0 33
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 4
58853: NEG
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 4
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 5
58887: NEG
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 5
58898: NEG
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 5
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 6
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 6
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58956: LD_ADDR_VAR 0 34
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: NEG
59024: PUSH
59025: LD_INT 4
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 4
59035: NEG
59036: PUSH
59037: LD_INT 5
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: LD_INT 4
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 5
59059: NEG
59060: PUSH
59061: LD_INT 5
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 5
59071: NEG
59072: PUSH
59073: LD_INT 6
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 6
59083: NEG
59084: PUSH
59085: LD_INT 5
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 6
59095: NEG
59096: PUSH
59097: LD_INT 6
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59119: LD_ADDR_VAR 0 41
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59163: LD_ADDR_VAR 0 42
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59204: LD_ADDR_VAR 0 43
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59244: LD_ADDR_VAR 0 44
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: LIST
59284: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59285: LD_ADDR_VAR 0 45
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59329: LD_ADDR_VAR 0 46
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: LD_INT 3
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59375: LD_ADDR_VAR 0 47
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: LD_INT 3
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 3
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59408: LD_ADDR_VAR 0 48
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59439: LD_ADDR_VAR 0 49
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59468: LD_ADDR_VAR 0 50
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59497: LD_ADDR_VAR 0 51
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59528: LD_ADDR_VAR 0 52
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59561: LD_ADDR_VAR 0 53
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59605: LD_ADDR_VAR 0 54
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59646: LD_ADDR_VAR 0 55
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59686: LD_ADDR_VAR 0 56
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: LIST
59726: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59727: LD_ADDR_VAR 0 57
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: LIST
59770: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59771: LD_ADDR_VAR 0 58
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: LIST
59816: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59817: LD_ADDR_VAR 0 59
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: LIST
59860: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59861: LD_ADDR_VAR 0 60
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59902: LD_ADDR_VAR 0 61
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59942: LD_ADDR_VAR 0 62
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59983: LD_ADDR_VAR 0 63
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60027: LD_ADDR_VAR 0 64
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// end ; 2 :
60073: GO 63339
60075: LD_INT 2
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60083
60081: GO 63338
60083: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60084: LD_ADDR_VAR 0 29
60088: PUSH
60089: LD_INT 4
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 5
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 5
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 3
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 5
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 4
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: LD_INT 4
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: LD_INT 4
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: LD_INT 4
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 4
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 5
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 5
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 4
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 5
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 4
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 4
60469: NEG
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 4
60481: NEG
60482: PUSH
60483: LD_INT 5
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 5
60529: NEG
60530: PUSH
60531: LD_INT 4
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 5
60541: NEG
60542: PUSH
60543: LD_INT 5
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: LD_INT 5
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 5
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60622: LD_ADDR_VAR 0 30
60626: PUSH
60627: LD_INT 4
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 4
60639: PUSH
60640: LD_INT 3
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 5
60649: PUSH
60650: LD_INT 4
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 5
60659: PUSH
60660: LD_INT 5
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: LD_INT 5
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 5
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 5
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 4
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 4
60812: NEG
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 4
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 5
60868: NEG
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 5
60879: NEG
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: LD_INT 4
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 4
60986: NEG
60987: PUSH
60988: LD_INT 4
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: LD_INT 4
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 4
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 4
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 5
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 4
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 4
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 5
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: LD_INT 5
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61169: LD_ADDR_VAR 0 31
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 4
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 5
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 5
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 5
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 4
61371: NEG
61372: PUSH
61373: LD_INT 4
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 4
61383: NEG
61384: PUSH
61385: LD_INT 5
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: LD_INT 4
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 4
61419: NEG
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 5
61431: NEG
61432: PUSH
61433: LD_INT 4
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 5
61443: NEG
61444: PUSH
61445: LD_INT 5
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: LD_INT 5
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 5
61467: NEG
61468: PUSH
61469: LD_INT 3
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 3
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 4
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 4
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 4
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 4
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61719: LD_ADDR_VAR 0 32
61723: PUSH
61724: LD_INT 4
61726: NEG
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 4
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 4
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 5
61782: NEG
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 5
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 5
61805: NEG
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: LD_INT 4
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 3
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 4
61888: NEG
61889: PUSH
61890: LD_INT 3
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 4
61900: NEG
61901: PUSH
61902: LD_INT 4
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: NEG
61913: PUSH
61914: LD_INT 4
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 4
61924: NEG
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 4
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 5
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 4
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 3
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 4
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 5
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: LD_INT 5
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 4
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 4
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 4
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 5
62151: PUSH
62152: LD_INT 4
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 5
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 4
62171: PUSH
62172: LD_INT 5
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62266: LD_ADDR_VAR 0 33
62270: PUSH
62271: LD_INT 4
62273: NEG
62274: PUSH
62275: LD_INT 4
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 4
62285: NEG
62286: PUSH
62287: LD_INT 5
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 4
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 4
62321: NEG
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 5
62333: NEG
62334: PUSH
62335: LD_INT 4
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 5
62345: NEG
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: NEG
62358: PUSH
62359: LD_INT 5
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 5
62369: NEG
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 4
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 2
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 3
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 4
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: LD_INT 4
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 5
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 5
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 4
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: LD_INT 4
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 4
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 4
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 4
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 5
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 5
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 4
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: LD_INT 5
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62804: LD_ADDR_VAR 0 34
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 4
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 5
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: LD_INT 4
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 3
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 4
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: LD_INT 5
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: LD_INT 5
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 4
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 4
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 4
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 4
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 5
63026: PUSH
63027: LD_INT 4
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 5
63036: PUSH
63037: LD_INT 5
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 4
63046: PUSH
63047: LD_INT 5
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: LD_INT 4
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 5
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: LD_INT 5
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 4
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 4
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 3
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: LD_INT 4
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 4
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 4
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 3
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 4
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 5
63245: NEG
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 5
63256: NEG
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 5
63268: NEG
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// end ; end ;
63336: GO 63339
63338: POP
// case btype of b_depot , b_warehouse :
63339: LD_VAR 0 1
63343: PUSH
63344: LD_INT 0
63346: DOUBLE
63347: EQUAL
63348: IFTRUE 63358
63350: LD_INT 1
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63358
63356: GO 63559
63358: POP
// case nation of nation_american :
63359: LD_VAR 0 5
63363: PUSH
63364: LD_INT 1
63366: DOUBLE
63367: EQUAL
63368: IFTRUE 63372
63370: GO 63428
63372: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63373: LD_ADDR_VAR 0 9
63377: PUSH
63378: LD_VAR 0 11
63382: PUSH
63383: LD_VAR 0 12
63387: PUSH
63388: LD_VAR 0 13
63392: PUSH
63393: LD_VAR 0 14
63397: PUSH
63398: LD_VAR 0 15
63402: PUSH
63403: LD_VAR 0 16
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: PUSH
63416: LD_VAR 0 4
63420: PUSH
63421: LD_INT 1
63423: PLUS
63424: ARRAY
63425: ST_TO_ADDR
63426: GO 63557
63428: LD_INT 2
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63436
63434: GO 63492
63436: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63437: LD_ADDR_VAR 0 9
63441: PUSH
63442: LD_VAR 0 17
63446: PUSH
63447: LD_VAR 0 18
63451: PUSH
63452: LD_VAR 0 19
63456: PUSH
63457: LD_VAR 0 20
63461: PUSH
63462: LD_VAR 0 21
63466: PUSH
63467: LD_VAR 0 22
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: PUSH
63480: LD_VAR 0 4
63484: PUSH
63485: LD_INT 1
63487: PLUS
63488: ARRAY
63489: ST_TO_ADDR
63490: GO 63557
63492: LD_INT 3
63494: DOUBLE
63495: EQUAL
63496: IFTRUE 63500
63498: GO 63556
63500: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63501: LD_ADDR_VAR 0 9
63505: PUSH
63506: LD_VAR 0 23
63510: PUSH
63511: LD_VAR 0 24
63515: PUSH
63516: LD_VAR 0 25
63520: PUSH
63521: LD_VAR 0 26
63525: PUSH
63526: LD_VAR 0 27
63530: PUSH
63531: LD_VAR 0 28
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: PUSH
63544: LD_VAR 0 4
63548: PUSH
63549: LD_INT 1
63551: PLUS
63552: ARRAY
63553: ST_TO_ADDR
63554: GO 63557
63556: POP
63557: GO 64112
63559: LD_INT 2
63561: DOUBLE
63562: EQUAL
63563: IFTRUE 63573
63565: LD_INT 3
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63629
63573: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63574: LD_ADDR_VAR 0 9
63578: PUSH
63579: LD_VAR 0 29
63583: PUSH
63584: LD_VAR 0 30
63588: PUSH
63589: LD_VAR 0 31
63593: PUSH
63594: LD_VAR 0 32
63598: PUSH
63599: LD_VAR 0 33
63603: PUSH
63604: LD_VAR 0 34
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: LD_VAR 0 4
63621: PUSH
63622: LD_INT 1
63624: PLUS
63625: ARRAY
63626: ST_TO_ADDR
63627: GO 64112
63629: LD_INT 16
63631: DOUBLE
63632: EQUAL
63633: IFTRUE 63691
63635: LD_INT 17
63637: DOUBLE
63638: EQUAL
63639: IFTRUE 63691
63641: LD_INT 18
63643: DOUBLE
63644: EQUAL
63645: IFTRUE 63691
63647: LD_INT 19
63649: DOUBLE
63650: EQUAL
63651: IFTRUE 63691
63653: LD_INT 22
63655: DOUBLE
63656: EQUAL
63657: IFTRUE 63691
63659: LD_INT 20
63661: DOUBLE
63662: EQUAL
63663: IFTRUE 63691
63665: LD_INT 21
63667: DOUBLE
63668: EQUAL
63669: IFTRUE 63691
63671: LD_INT 23
63673: DOUBLE
63674: EQUAL
63675: IFTRUE 63691
63677: LD_INT 24
63679: DOUBLE
63680: EQUAL
63681: IFTRUE 63691
63683: LD_INT 25
63685: DOUBLE
63686: EQUAL
63687: IFTRUE 63691
63689: GO 63747
63691: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63692: LD_ADDR_VAR 0 9
63696: PUSH
63697: LD_VAR 0 35
63701: PUSH
63702: LD_VAR 0 36
63706: PUSH
63707: LD_VAR 0 37
63711: PUSH
63712: LD_VAR 0 38
63716: PUSH
63717: LD_VAR 0 39
63721: PUSH
63722: LD_VAR 0 40
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: PUSH
63735: LD_VAR 0 4
63739: PUSH
63740: LD_INT 1
63742: PLUS
63743: ARRAY
63744: ST_TO_ADDR
63745: GO 64112
63747: LD_INT 6
63749: DOUBLE
63750: EQUAL
63751: IFTRUE 63803
63753: LD_INT 7
63755: DOUBLE
63756: EQUAL
63757: IFTRUE 63803
63759: LD_INT 8
63761: DOUBLE
63762: EQUAL
63763: IFTRUE 63803
63765: LD_INT 13
63767: DOUBLE
63768: EQUAL
63769: IFTRUE 63803
63771: LD_INT 12
63773: DOUBLE
63774: EQUAL
63775: IFTRUE 63803
63777: LD_INT 15
63779: DOUBLE
63780: EQUAL
63781: IFTRUE 63803
63783: LD_INT 11
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63803
63789: LD_INT 14
63791: DOUBLE
63792: EQUAL
63793: IFTRUE 63803
63795: LD_INT 10
63797: DOUBLE
63798: EQUAL
63799: IFTRUE 63803
63801: GO 63859
63803: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63804: LD_ADDR_VAR 0 9
63808: PUSH
63809: LD_VAR 0 41
63813: PUSH
63814: LD_VAR 0 42
63818: PUSH
63819: LD_VAR 0 43
63823: PUSH
63824: LD_VAR 0 44
63828: PUSH
63829: LD_VAR 0 45
63833: PUSH
63834: LD_VAR 0 46
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: PUSH
63847: LD_VAR 0 4
63851: PUSH
63852: LD_INT 1
63854: PLUS
63855: ARRAY
63856: ST_TO_ADDR
63857: GO 64112
63859: LD_INT 36
63861: DOUBLE
63862: EQUAL
63863: IFTRUE 63867
63865: GO 63923
63867: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63868: LD_ADDR_VAR 0 9
63872: PUSH
63873: LD_VAR 0 47
63877: PUSH
63878: LD_VAR 0 48
63882: PUSH
63883: LD_VAR 0 49
63887: PUSH
63888: LD_VAR 0 50
63892: PUSH
63893: LD_VAR 0 51
63897: PUSH
63898: LD_VAR 0 52
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: LD_VAR 0 4
63915: PUSH
63916: LD_INT 1
63918: PLUS
63919: ARRAY
63920: ST_TO_ADDR
63921: GO 64112
63923: LD_INT 4
63925: DOUBLE
63926: EQUAL
63927: IFTRUE 63949
63929: LD_INT 5
63931: DOUBLE
63932: EQUAL
63933: IFTRUE 63949
63935: LD_INT 34
63937: DOUBLE
63938: EQUAL
63939: IFTRUE 63949
63941: LD_INT 37
63943: DOUBLE
63944: EQUAL
63945: IFTRUE 63949
63947: GO 64005
63949: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63950: LD_ADDR_VAR 0 9
63954: PUSH
63955: LD_VAR 0 53
63959: PUSH
63960: LD_VAR 0 54
63964: PUSH
63965: LD_VAR 0 55
63969: PUSH
63970: LD_VAR 0 56
63974: PUSH
63975: LD_VAR 0 57
63979: PUSH
63980: LD_VAR 0 58
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: PUSH
63993: LD_VAR 0 4
63997: PUSH
63998: LD_INT 1
64000: PLUS
64001: ARRAY
64002: ST_TO_ADDR
64003: GO 64112
64005: LD_INT 31
64007: DOUBLE
64008: EQUAL
64009: IFTRUE 64055
64011: LD_INT 32
64013: DOUBLE
64014: EQUAL
64015: IFTRUE 64055
64017: LD_INT 33
64019: DOUBLE
64020: EQUAL
64021: IFTRUE 64055
64023: LD_INT 27
64025: DOUBLE
64026: EQUAL
64027: IFTRUE 64055
64029: LD_INT 26
64031: DOUBLE
64032: EQUAL
64033: IFTRUE 64055
64035: LD_INT 28
64037: DOUBLE
64038: EQUAL
64039: IFTRUE 64055
64041: LD_INT 29
64043: DOUBLE
64044: EQUAL
64045: IFTRUE 64055
64047: LD_INT 30
64049: DOUBLE
64050: EQUAL
64051: IFTRUE 64055
64053: GO 64111
64055: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64056: LD_ADDR_VAR 0 9
64060: PUSH
64061: LD_VAR 0 59
64065: PUSH
64066: LD_VAR 0 60
64070: PUSH
64071: LD_VAR 0 61
64075: PUSH
64076: LD_VAR 0 62
64080: PUSH
64081: LD_VAR 0 63
64085: PUSH
64086: LD_VAR 0 64
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: PUSH
64099: LD_VAR 0 4
64103: PUSH
64104: LD_INT 1
64106: PLUS
64107: ARRAY
64108: ST_TO_ADDR
64109: GO 64112
64111: POP
// temp_list2 = [ ] ;
64112: LD_ADDR_VAR 0 10
64116: PUSH
64117: EMPTY
64118: ST_TO_ADDR
// for i in temp_list do
64119: LD_ADDR_VAR 0 8
64123: PUSH
64124: LD_VAR 0 9
64128: PUSH
64129: FOR_IN
64130: IFFALSE 64182
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64132: LD_ADDR_VAR 0 10
64136: PUSH
64137: LD_VAR 0 10
64141: PUSH
64142: LD_VAR 0 8
64146: PUSH
64147: LD_INT 1
64149: ARRAY
64150: PUSH
64151: LD_VAR 0 2
64155: PLUS
64156: PUSH
64157: LD_VAR 0 8
64161: PUSH
64162: LD_INT 2
64164: ARRAY
64165: PUSH
64166: LD_VAR 0 3
64170: PLUS
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: ADD
64179: ST_TO_ADDR
64180: GO 64129
64182: POP
64183: POP
// result = temp_list2 ;
64184: LD_ADDR_VAR 0 7
64188: PUSH
64189: LD_VAR 0 10
64193: ST_TO_ADDR
// end ;
64194: LD_VAR 0 7
64198: RET
// export function EnemyInRange ( unit , dist ) ; begin
64199: LD_INT 0
64201: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64202: LD_ADDR_VAR 0 3
64206: PUSH
64207: LD_VAR 0 1
64211: PPUSH
64212: CALL_OW 255
64216: PPUSH
64217: LD_VAR 0 1
64221: PPUSH
64222: CALL_OW 250
64226: PPUSH
64227: LD_VAR 0 1
64231: PPUSH
64232: CALL_OW 251
64236: PPUSH
64237: LD_VAR 0 2
64241: PPUSH
64242: CALL 37572 0 4
64246: PUSH
64247: LD_INT 4
64249: ARRAY
64250: ST_TO_ADDR
// end ;
64251: LD_VAR 0 3
64255: RET
// export function PlayerSeeMe ( unit ) ; begin
64256: LD_INT 0
64258: PPUSH
// result := See ( your_side , unit ) ;
64259: LD_ADDR_VAR 0 2
64263: PUSH
64264: LD_OWVAR 2
64268: PPUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL_OW 292
64278: ST_TO_ADDR
// end ;
64279: LD_VAR 0 2
64283: RET
// export function ReverseDir ( unit ) ; begin
64284: LD_INT 0
64286: PPUSH
// if not unit then
64287: LD_VAR 0 1
64291: NOT
64292: IFFALSE 64296
// exit ;
64294: GO 64319
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64296: LD_ADDR_VAR 0 2
64300: PUSH
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL_OW 254
64310: PUSH
64311: LD_INT 3
64313: PLUS
64314: PUSH
64315: LD_INT 6
64317: MOD
64318: ST_TO_ADDR
// end ;
64319: LD_VAR 0 2
64323: RET
// export function ReverseArray ( array ) ; var i ; begin
64324: LD_INT 0
64326: PPUSH
64327: PPUSH
// if not array then
64328: LD_VAR 0 1
64332: NOT
64333: IFFALSE 64337
// exit ;
64335: GO 64392
// result := [ ] ;
64337: LD_ADDR_VAR 0 2
64341: PUSH
64342: EMPTY
64343: ST_TO_ADDR
// for i := array downto 1 do
64344: LD_ADDR_VAR 0 3
64348: PUSH
64349: DOUBLE
64350: LD_VAR 0 1
64354: INC
64355: ST_TO_ADDR
64356: LD_INT 1
64358: PUSH
64359: FOR_DOWNTO
64360: IFFALSE 64390
// result := Join ( result , array [ i ] ) ;
64362: LD_ADDR_VAR 0 2
64366: PUSH
64367: LD_VAR 0 2
64371: PPUSH
64372: LD_VAR 0 1
64376: PUSH
64377: LD_VAR 0 3
64381: ARRAY
64382: PPUSH
64383: CALL 69057 0 2
64387: ST_TO_ADDR
64388: GO 64359
64390: POP
64391: POP
// end ;
64392: LD_VAR 0 2
64396: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64397: LD_INT 0
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
64404: PPUSH
// if not unit or not hexes then
64405: LD_VAR 0 1
64409: NOT
64410: PUSH
64411: LD_VAR 0 2
64415: NOT
64416: OR
64417: IFFALSE 64421
// exit ;
64419: GO 64544
// dist := 9999 ;
64421: LD_ADDR_VAR 0 5
64425: PUSH
64426: LD_INT 9999
64428: ST_TO_ADDR
// for i = 1 to hexes do
64429: LD_ADDR_VAR 0 4
64433: PUSH
64434: DOUBLE
64435: LD_INT 1
64437: DEC
64438: ST_TO_ADDR
64439: LD_VAR 0 2
64443: PUSH
64444: FOR_TO
64445: IFFALSE 64532
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64447: LD_ADDR_VAR 0 6
64451: PUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: LD_VAR 0 2
64461: PUSH
64462: LD_VAR 0 4
64466: ARRAY
64467: PUSH
64468: LD_INT 1
64470: ARRAY
64471: PPUSH
64472: LD_VAR 0 2
64476: PUSH
64477: LD_VAR 0 4
64481: ARRAY
64482: PUSH
64483: LD_INT 2
64485: ARRAY
64486: PPUSH
64487: CALL_OW 297
64491: ST_TO_ADDR
// if tdist < dist then
64492: LD_VAR 0 6
64496: PUSH
64497: LD_VAR 0 5
64501: LESS
64502: IFFALSE 64530
// begin hex := hexes [ i ] ;
64504: LD_ADDR_VAR 0 8
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: LD_VAR 0 4
64518: ARRAY
64519: ST_TO_ADDR
// dist := tdist ;
64520: LD_ADDR_VAR 0 5
64524: PUSH
64525: LD_VAR 0 6
64529: ST_TO_ADDR
// end ; end ;
64530: GO 64444
64532: POP
64533: POP
// result := hex ;
64534: LD_ADDR_VAR 0 3
64538: PUSH
64539: LD_VAR 0 8
64543: ST_TO_ADDR
// end ;
64544: LD_VAR 0 3
64548: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64553: LD_VAR 0 1
64557: NOT
64558: PUSH
64559: LD_VAR 0 1
64563: PUSH
64564: LD_INT 21
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 23
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PPUSH
64588: CALL_OW 69
64592: IN
64593: NOT
64594: OR
64595: IFFALSE 64599
// exit ;
64597: GO 64646
// for i = 1 to 3 do
64599: LD_ADDR_VAR 0 3
64603: PUSH
64604: DOUBLE
64605: LD_INT 1
64607: DEC
64608: ST_TO_ADDR
64609: LD_INT 3
64611: PUSH
64612: FOR_TO
64613: IFFALSE 64644
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64615: LD_VAR 0 1
64619: PPUSH
64620: CALL_OW 250
64624: PPUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: CALL_OW 251
64634: PPUSH
64635: LD_INT 1
64637: PPUSH
64638: CALL_OW 453
64642: GO 64612
64644: POP
64645: POP
// end ;
64646: LD_VAR 0 2
64650: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64651: LD_INT 0
64653: PPUSH
64654: PPUSH
64655: PPUSH
64656: PPUSH
64657: PPUSH
64658: PPUSH
// if not unit or not enemy_unit then
64659: LD_VAR 0 1
64663: NOT
64664: PUSH
64665: LD_VAR 0 2
64669: NOT
64670: OR
64671: IFFALSE 64675
// exit ;
64673: GO 65142
// if GetLives ( i ) < 250 then
64675: LD_VAR 0 4
64679: PPUSH
64680: CALL_OW 256
64684: PUSH
64685: LD_INT 250
64687: LESS
64688: IFFALSE 64701
// begin ComAutodestruct ( i ) ;
64690: LD_VAR 0 4
64694: PPUSH
64695: CALL 64549 0 1
// exit ;
64699: GO 65142
// end ; x := GetX ( enemy_unit ) ;
64701: LD_ADDR_VAR 0 7
64705: PUSH
64706: LD_VAR 0 2
64710: PPUSH
64711: CALL_OW 250
64715: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64716: LD_ADDR_VAR 0 8
64720: PUSH
64721: LD_VAR 0 2
64725: PPUSH
64726: CALL_OW 251
64730: ST_TO_ADDR
// if not x or not y then
64731: LD_VAR 0 7
64735: NOT
64736: PUSH
64737: LD_VAR 0 8
64741: NOT
64742: OR
64743: IFFALSE 64747
// exit ;
64745: GO 65142
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64747: LD_ADDR_VAR 0 6
64751: PUSH
64752: LD_VAR 0 7
64756: PPUSH
64757: LD_INT 0
64759: PPUSH
64760: LD_INT 4
64762: PPUSH
64763: CALL_OW 272
64767: PUSH
64768: LD_VAR 0 8
64772: PPUSH
64773: LD_INT 0
64775: PPUSH
64776: LD_INT 4
64778: PPUSH
64779: CALL_OW 273
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_VAR 0 7
64792: PPUSH
64793: LD_INT 1
64795: PPUSH
64796: LD_INT 4
64798: PPUSH
64799: CALL_OW 272
64803: PUSH
64804: LD_VAR 0 8
64808: PPUSH
64809: LD_INT 1
64811: PPUSH
64812: LD_INT 4
64814: PPUSH
64815: CALL_OW 273
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_VAR 0 7
64828: PPUSH
64829: LD_INT 2
64831: PPUSH
64832: LD_INT 4
64834: PPUSH
64835: CALL_OW 272
64839: PUSH
64840: LD_VAR 0 8
64844: PPUSH
64845: LD_INT 2
64847: PPUSH
64848: LD_INT 4
64850: PPUSH
64851: CALL_OW 273
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_VAR 0 7
64864: PPUSH
64865: LD_INT 3
64867: PPUSH
64868: LD_INT 4
64870: PPUSH
64871: CALL_OW 272
64875: PUSH
64876: LD_VAR 0 8
64880: PPUSH
64881: LD_INT 3
64883: PPUSH
64884: LD_INT 4
64886: PPUSH
64887: CALL_OW 273
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_VAR 0 7
64900: PPUSH
64901: LD_INT 4
64903: PPUSH
64904: LD_INT 4
64906: PPUSH
64907: CALL_OW 272
64911: PUSH
64912: LD_VAR 0 8
64916: PPUSH
64917: LD_INT 4
64919: PPUSH
64920: LD_INT 4
64922: PPUSH
64923: CALL_OW 273
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_VAR 0 7
64936: PPUSH
64937: LD_INT 5
64939: PPUSH
64940: LD_INT 4
64942: PPUSH
64943: CALL_OW 272
64947: PUSH
64948: LD_VAR 0 8
64952: PPUSH
64953: LD_INT 5
64955: PPUSH
64956: LD_INT 4
64958: PPUSH
64959: CALL_OW 273
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: ST_TO_ADDR
// for i = tmp downto 1 do
64976: LD_ADDR_VAR 0 4
64980: PUSH
64981: DOUBLE
64982: LD_VAR 0 6
64986: INC
64987: ST_TO_ADDR
64988: LD_INT 1
64990: PUSH
64991: FOR_DOWNTO
64992: IFFALSE 65093
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64994: LD_VAR 0 6
64998: PUSH
64999: LD_VAR 0 4
65003: ARRAY
65004: PUSH
65005: LD_INT 1
65007: ARRAY
65008: PPUSH
65009: LD_VAR 0 6
65013: PUSH
65014: LD_VAR 0 4
65018: ARRAY
65019: PUSH
65020: LD_INT 2
65022: ARRAY
65023: PPUSH
65024: CALL_OW 488
65028: NOT
65029: PUSH
65030: LD_VAR 0 6
65034: PUSH
65035: LD_VAR 0 4
65039: ARRAY
65040: PUSH
65041: LD_INT 1
65043: ARRAY
65044: PPUSH
65045: LD_VAR 0 6
65049: PUSH
65050: LD_VAR 0 4
65054: ARRAY
65055: PUSH
65056: LD_INT 2
65058: ARRAY
65059: PPUSH
65060: CALL_OW 428
65064: PUSH
65065: LD_INT 0
65067: NONEQUAL
65068: OR
65069: IFFALSE 65091
// tmp := Delete ( tmp , i ) ;
65071: LD_ADDR_VAR 0 6
65075: PUSH
65076: LD_VAR 0 6
65080: PPUSH
65081: LD_VAR 0 4
65085: PPUSH
65086: CALL_OW 3
65090: ST_TO_ADDR
65091: GO 64991
65093: POP
65094: POP
// j := GetClosestHex ( unit , tmp ) ;
65095: LD_ADDR_VAR 0 5
65099: PUSH
65100: LD_VAR 0 1
65104: PPUSH
65105: LD_VAR 0 6
65109: PPUSH
65110: CALL 64397 0 2
65114: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65115: LD_VAR 0 1
65119: PPUSH
65120: LD_VAR 0 5
65124: PUSH
65125: LD_INT 1
65127: ARRAY
65128: PPUSH
65129: LD_VAR 0 5
65133: PUSH
65134: LD_INT 2
65136: ARRAY
65137: PPUSH
65138: CALL_OW 111
// end ;
65142: LD_VAR 0 3
65146: RET
// export function PrepareApemanSoldier ( ) ; begin
65147: LD_INT 0
65149: PPUSH
// uc_nation := 0 ;
65150: LD_ADDR_OWVAR 21
65154: PUSH
65155: LD_INT 0
65157: ST_TO_ADDR
// hc_sex := sex_male ;
65158: LD_ADDR_OWVAR 27
65162: PUSH
65163: LD_INT 1
65165: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65166: LD_ADDR_OWVAR 28
65170: PUSH
65171: LD_INT 15
65173: ST_TO_ADDR
// hc_gallery :=  ;
65174: LD_ADDR_OWVAR 33
65178: PUSH
65179: LD_STRING 
65181: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65182: LD_ADDR_OWVAR 31
65186: PUSH
65187: LD_INT 0
65189: PPUSH
65190: LD_INT 3
65192: PPUSH
65193: CALL_OW 12
65197: PUSH
65198: LD_INT 0
65200: PPUSH
65201: LD_INT 3
65203: PPUSH
65204: CALL_OW 12
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// end ;
65221: LD_VAR 0 1
65225: RET
// export function PrepareApemanEngineer ( ) ; begin
65226: LD_INT 0
65228: PPUSH
// uc_nation := 0 ;
65229: LD_ADDR_OWVAR 21
65233: PUSH
65234: LD_INT 0
65236: ST_TO_ADDR
// hc_sex := sex_male ;
65237: LD_ADDR_OWVAR 27
65241: PUSH
65242: LD_INT 1
65244: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65245: LD_ADDR_OWVAR 28
65249: PUSH
65250: LD_INT 16
65252: ST_TO_ADDR
// hc_gallery :=  ;
65253: LD_ADDR_OWVAR 33
65257: PUSH
65258: LD_STRING 
65260: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65261: LD_ADDR_OWVAR 31
65265: PUSH
65266: LD_INT 0
65268: PPUSH
65269: LD_INT 3
65271: PPUSH
65272: CALL_OW 12
65276: PUSH
65277: LD_INT 0
65279: PPUSH
65280: LD_INT 3
65282: PPUSH
65283: CALL_OW 12
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: ST_TO_ADDR
// end ;
65300: LD_VAR 0 1
65304: RET
// export function PrepareApeman ( agressivity ) ; begin
65305: LD_INT 0
65307: PPUSH
// uc_side := 0 ;
65308: LD_ADDR_OWVAR 20
65312: PUSH
65313: LD_INT 0
65315: ST_TO_ADDR
// uc_nation := 0 ;
65316: LD_ADDR_OWVAR 21
65320: PUSH
65321: LD_INT 0
65323: ST_TO_ADDR
// hc_sex := sex_male ;
65324: LD_ADDR_OWVAR 27
65328: PUSH
65329: LD_INT 1
65331: ST_TO_ADDR
// hc_class := class_apeman ;
65332: LD_ADDR_OWVAR 28
65336: PUSH
65337: LD_INT 12
65339: ST_TO_ADDR
// hc_gallery :=  ;
65340: LD_ADDR_OWVAR 33
65344: PUSH
65345: LD_STRING 
65347: ST_TO_ADDR
// if agressivity = 0 then
65348: LD_VAR 0 1
65352: PUSH
65353: LD_INT 0
65355: EQUAL
65356: IFFALSE 65368
// hc_agressivity := 0 else
65358: LD_ADDR_OWVAR 35
65362: PUSH
65363: LD_INT 0
65365: ST_TO_ADDR
65366: GO 65389
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65368: LD_ADDR_OWVAR 35
65372: PUSH
65373: LD_VAR 0 1
65377: NEG
65378: PPUSH
65379: LD_VAR 0 1
65383: PPUSH
65384: CALL_OW 12
65388: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65389: LD_ADDR_OWVAR 31
65393: PUSH
65394: LD_INT 0
65396: PPUSH
65397: LD_INT 3
65399: PPUSH
65400: CALL_OW 12
65404: PUSH
65405: LD_INT 0
65407: PPUSH
65408: LD_INT 3
65410: PPUSH
65411: CALL_OW 12
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: ST_TO_ADDR
// end ;
65428: LD_VAR 0 2
65432: RET
// export function PrepareTiger ( agressivity ) ; begin
65433: LD_INT 0
65435: PPUSH
// uc_side := 0 ;
65436: LD_ADDR_OWVAR 20
65440: PUSH
65441: LD_INT 0
65443: ST_TO_ADDR
// uc_nation := 0 ;
65444: LD_ADDR_OWVAR 21
65448: PUSH
65449: LD_INT 0
65451: ST_TO_ADDR
// hc_class := class_tiger ;
65452: LD_ADDR_OWVAR 28
65456: PUSH
65457: LD_INT 14
65459: ST_TO_ADDR
// hc_gallery :=  ;
65460: LD_ADDR_OWVAR 33
65464: PUSH
65465: LD_STRING 
65467: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65468: LD_ADDR_OWVAR 35
65472: PUSH
65473: LD_VAR 0 1
65477: NEG
65478: PPUSH
65479: LD_VAR 0 1
65483: PPUSH
65484: CALL_OW 12
65488: ST_TO_ADDR
// end ;
65489: LD_VAR 0 2
65493: RET
// export function PrepareEnchidna ( ) ; begin
65494: LD_INT 0
65496: PPUSH
// uc_side := 0 ;
65497: LD_ADDR_OWVAR 20
65501: PUSH
65502: LD_INT 0
65504: ST_TO_ADDR
// uc_nation := 0 ;
65505: LD_ADDR_OWVAR 21
65509: PUSH
65510: LD_INT 0
65512: ST_TO_ADDR
// hc_class := class_baggie ;
65513: LD_ADDR_OWVAR 28
65517: PUSH
65518: LD_INT 13
65520: ST_TO_ADDR
// hc_gallery :=  ;
65521: LD_ADDR_OWVAR 33
65525: PUSH
65526: LD_STRING 
65528: ST_TO_ADDR
// end ;
65529: LD_VAR 0 1
65533: RET
// export function PrepareFrog ( ) ; begin
65534: LD_INT 0
65536: PPUSH
// uc_side := 0 ;
65537: LD_ADDR_OWVAR 20
65541: PUSH
65542: LD_INT 0
65544: ST_TO_ADDR
// uc_nation := 0 ;
65545: LD_ADDR_OWVAR 21
65549: PUSH
65550: LD_INT 0
65552: ST_TO_ADDR
// hc_class := class_frog ;
65553: LD_ADDR_OWVAR 28
65557: PUSH
65558: LD_INT 19
65560: ST_TO_ADDR
// hc_gallery :=  ;
65561: LD_ADDR_OWVAR 33
65565: PUSH
65566: LD_STRING 
65568: ST_TO_ADDR
// end ;
65569: LD_VAR 0 1
65573: RET
// export function PrepareFish ( ) ; begin
65574: LD_INT 0
65576: PPUSH
// uc_side := 0 ;
65577: LD_ADDR_OWVAR 20
65581: PUSH
65582: LD_INT 0
65584: ST_TO_ADDR
// uc_nation := 0 ;
65585: LD_ADDR_OWVAR 21
65589: PUSH
65590: LD_INT 0
65592: ST_TO_ADDR
// hc_class := class_fish ;
65593: LD_ADDR_OWVAR 28
65597: PUSH
65598: LD_INT 20
65600: ST_TO_ADDR
// hc_gallery :=  ;
65601: LD_ADDR_OWVAR 33
65605: PUSH
65606: LD_STRING 
65608: ST_TO_ADDR
// end ;
65609: LD_VAR 0 1
65613: RET
// export function PrepareBird ( ) ; begin
65614: LD_INT 0
65616: PPUSH
// uc_side := 0 ;
65617: LD_ADDR_OWVAR 20
65621: PUSH
65622: LD_INT 0
65624: ST_TO_ADDR
// uc_nation := 0 ;
65625: LD_ADDR_OWVAR 21
65629: PUSH
65630: LD_INT 0
65632: ST_TO_ADDR
// hc_class := class_phororhacos ;
65633: LD_ADDR_OWVAR 28
65637: PUSH
65638: LD_INT 18
65640: ST_TO_ADDR
// hc_gallery :=  ;
65641: LD_ADDR_OWVAR 33
65645: PUSH
65646: LD_STRING 
65648: ST_TO_ADDR
// end ;
65649: LD_VAR 0 1
65653: RET
// export function PrepareHorse ( ) ; begin
65654: LD_INT 0
65656: PPUSH
// uc_side := 0 ;
65657: LD_ADDR_OWVAR 20
65661: PUSH
65662: LD_INT 0
65664: ST_TO_ADDR
// uc_nation := 0 ;
65665: LD_ADDR_OWVAR 21
65669: PUSH
65670: LD_INT 0
65672: ST_TO_ADDR
// hc_class := class_horse ;
65673: LD_ADDR_OWVAR 28
65677: PUSH
65678: LD_INT 21
65680: ST_TO_ADDR
// hc_gallery :=  ;
65681: LD_ADDR_OWVAR 33
65685: PUSH
65686: LD_STRING 
65688: ST_TO_ADDR
// end ;
65689: LD_VAR 0 1
65693: RET
// export function PrepareMastodont ( ) ; begin
65694: LD_INT 0
65696: PPUSH
// uc_side := 0 ;
65697: LD_ADDR_OWVAR 20
65701: PUSH
65702: LD_INT 0
65704: ST_TO_ADDR
// uc_nation := 0 ;
65705: LD_ADDR_OWVAR 21
65709: PUSH
65710: LD_INT 0
65712: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65713: LD_ADDR_OWVAR 37
65717: PUSH
65718: LD_INT 31
65720: ST_TO_ADDR
// vc_control := control_rider ;
65721: LD_ADDR_OWVAR 38
65725: PUSH
65726: LD_INT 4
65728: ST_TO_ADDR
// end ;
65729: LD_VAR 0 1
65733: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65734: LD_INT 0
65736: PPUSH
65737: PPUSH
65738: PPUSH
// uc_side = 0 ;
65739: LD_ADDR_OWVAR 20
65743: PUSH
65744: LD_INT 0
65746: ST_TO_ADDR
// uc_nation = 0 ;
65747: LD_ADDR_OWVAR 21
65751: PUSH
65752: LD_INT 0
65754: ST_TO_ADDR
// InitHc_All ( ) ;
65755: CALL_OW 584
// InitVc ;
65759: CALL_OW 20
// if mastodonts then
65763: LD_VAR 0 6
65767: IFFALSE 65834
// for i = 1 to mastodonts do
65769: LD_ADDR_VAR 0 11
65773: PUSH
65774: DOUBLE
65775: LD_INT 1
65777: DEC
65778: ST_TO_ADDR
65779: LD_VAR 0 6
65783: PUSH
65784: FOR_TO
65785: IFFALSE 65832
// begin vc_chassis := 31 ;
65787: LD_ADDR_OWVAR 37
65791: PUSH
65792: LD_INT 31
65794: ST_TO_ADDR
// vc_control := control_rider ;
65795: LD_ADDR_OWVAR 38
65799: PUSH
65800: LD_INT 4
65802: ST_TO_ADDR
// animal := CreateVehicle ;
65803: LD_ADDR_VAR 0 12
65807: PUSH
65808: CALL_OW 45
65812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65813: LD_VAR 0 12
65817: PPUSH
65818: LD_VAR 0 8
65822: PPUSH
65823: LD_INT 0
65825: PPUSH
65826: CALL 67962 0 3
// end ;
65830: GO 65784
65832: POP
65833: POP
// if horses then
65834: LD_VAR 0 5
65838: IFFALSE 65905
// for i = 1 to horses do
65840: LD_ADDR_VAR 0 11
65844: PUSH
65845: DOUBLE
65846: LD_INT 1
65848: DEC
65849: ST_TO_ADDR
65850: LD_VAR 0 5
65854: PUSH
65855: FOR_TO
65856: IFFALSE 65903
// begin hc_class := 21 ;
65858: LD_ADDR_OWVAR 28
65862: PUSH
65863: LD_INT 21
65865: ST_TO_ADDR
// hc_gallery :=  ;
65866: LD_ADDR_OWVAR 33
65870: PUSH
65871: LD_STRING 
65873: ST_TO_ADDR
// animal := CreateHuman ;
65874: LD_ADDR_VAR 0 12
65878: PUSH
65879: CALL_OW 44
65883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65884: LD_VAR 0 12
65888: PPUSH
65889: LD_VAR 0 8
65893: PPUSH
65894: LD_INT 0
65896: PPUSH
65897: CALL 67962 0 3
// end ;
65901: GO 65855
65903: POP
65904: POP
// if birds then
65905: LD_VAR 0 1
65909: IFFALSE 65976
// for i = 1 to birds do
65911: LD_ADDR_VAR 0 11
65915: PUSH
65916: DOUBLE
65917: LD_INT 1
65919: DEC
65920: ST_TO_ADDR
65921: LD_VAR 0 1
65925: PUSH
65926: FOR_TO
65927: IFFALSE 65974
// begin hc_class := 18 ;
65929: LD_ADDR_OWVAR 28
65933: PUSH
65934: LD_INT 18
65936: ST_TO_ADDR
// hc_gallery =  ;
65937: LD_ADDR_OWVAR 33
65941: PUSH
65942: LD_STRING 
65944: ST_TO_ADDR
// animal := CreateHuman ;
65945: LD_ADDR_VAR 0 12
65949: PUSH
65950: CALL_OW 44
65954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65955: LD_VAR 0 12
65959: PPUSH
65960: LD_VAR 0 8
65964: PPUSH
65965: LD_INT 0
65967: PPUSH
65968: CALL 67962 0 3
// end ;
65972: GO 65926
65974: POP
65975: POP
// if tigers then
65976: LD_VAR 0 2
65980: IFFALSE 66064
// for i = 1 to tigers do
65982: LD_ADDR_VAR 0 11
65986: PUSH
65987: DOUBLE
65988: LD_INT 1
65990: DEC
65991: ST_TO_ADDR
65992: LD_VAR 0 2
65996: PUSH
65997: FOR_TO
65998: IFFALSE 66062
// begin hc_class = class_tiger ;
66000: LD_ADDR_OWVAR 28
66004: PUSH
66005: LD_INT 14
66007: ST_TO_ADDR
// hc_gallery =  ;
66008: LD_ADDR_OWVAR 33
66012: PUSH
66013: LD_STRING 
66015: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66016: LD_ADDR_OWVAR 35
66020: PUSH
66021: LD_INT 7
66023: NEG
66024: PPUSH
66025: LD_INT 7
66027: PPUSH
66028: CALL_OW 12
66032: ST_TO_ADDR
// animal := CreateHuman ;
66033: LD_ADDR_VAR 0 12
66037: PUSH
66038: CALL_OW 44
66042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66043: LD_VAR 0 12
66047: PPUSH
66048: LD_VAR 0 8
66052: PPUSH
66053: LD_INT 0
66055: PPUSH
66056: CALL 67962 0 3
// end ;
66060: GO 65997
66062: POP
66063: POP
// if apemans then
66064: LD_VAR 0 3
66068: IFFALSE 66191
// for i = 1 to apemans do
66070: LD_ADDR_VAR 0 11
66074: PUSH
66075: DOUBLE
66076: LD_INT 1
66078: DEC
66079: ST_TO_ADDR
66080: LD_VAR 0 3
66084: PUSH
66085: FOR_TO
66086: IFFALSE 66189
// begin hc_class = class_apeman ;
66088: LD_ADDR_OWVAR 28
66092: PUSH
66093: LD_INT 12
66095: ST_TO_ADDR
// hc_gallery =  ;
66096: LD_ADDR_OWVAR 33
66100: PUSH
66101: LD_STRING 
66103: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66104: LD_ADDR_OWVAR 35
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PPUSH
66113: LD_INT 2
66115: PPUSH
66116: CALL_OW 12
66120: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66121: LD_ADDR_OWVAR 31
66125: PUSH
66126: LD_INT 1
66128: PPUSH
66129: LD_INT 3
66131: PPUSH
66132: CALL_OW 12
66136: PUSH
66137: LD_INT 1
66139: PPUSH
66140: LD_INT 3
66142: PPUSH
66143: CALL_OW 12
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: ST_TO_ADDR
// animal := CreateHuman ;
66160: LD_ADDR_VAR 0 12
66164: PUSH
66165: CALL_OW 44
66169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66170: LD_VAR 0 12
66174: PPUSH
66175: LD_VAR 0 8
66179: PPUSH
66180: LD_INT 0
66182: PPUSH
66183: CALL 67962 0 3
// end ;
66187: GO 66085
66189: POP
66190: POP
// if enchidnas then
66191: LD_VAR 0 4
66195: IFFALSE 66262
// for i = 1 to enchidnas do
66197: LD_ADDR_VAR 0 11
66201: PUSH
66202: DOUBLE
66203: LD_INT 1
66205: DEC
66206: ST_TO_ADDR
66207: LD_VAR 0 4
66211: PUSH
66212: FOR_TO
66213: IFFALSE 66260
// begin hc_class = 13 ;
66215: LD_ADDR_OWVAR 28
66219: PUSH
66220: LD_INT 13
66222: ST_TO_ADDR
// hc_gallery =  ;
66223: LD_ADDR_OWVAR 33
66227: PUSH
66228: LD_STRING 
66230: ST_TO_ADDR
// animal := CreateHuman ;
66231: LD_ADDR_VAR 0 12
66235: PUSH
66236: CALL_OW 44
66240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66241: LD_VAR 0 12
66245: PPUSH
66246: LD_VAR 0 8
66250: PPUSH
66251: LD_INT 0
66253: PPUSH
66254: CALL 67962 0 3
// end ;
66258: GO 66212
66260: POP
66261: POP
// if fishes then
66262: LD_VAR 0 7
66266: IFFALSE 66333
// for i = 1 to fishes do
66268: LD_ADDR_VAR 0 11
66272: PUSH
66273: DOUBLE
66274: LD_INT 1
66276: DEC
66277: ST_TO_ADDR
66278: LD_VAR 0 7
66282: PUSH
66283: FOR_TO
66284: IFFALSE 66331
// begin hc_class = 20 ;
66286: LD_ADDR_OWVAR 28
66290: PUSH
66291: LD_INT 20
66293: ST_TO_ADDR
// hc_gallery =  ;
66294: LD_ADDR_OWVAR 33
66298: PUSH
66299: LD_STRING 
66301: ST_TO_ADDR
// animal := CreateHuman ;
66302: LD_ADDR_VAR 0 12
66306: PUSH
66307: CALL_OW 44
66311: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66312: LD_VAR 0 12
66316: PPUSH
66317: LD_VAR 0 9
66321: PPUSH
66322: LD_INT 0
66324: PPUSH
66325: CALL 67962 0 3
// end ;
66329: GO 66283
66331: POP
66332: POP
// end ;
66333: LD_VAR 0 10
66337: RET
// export function WantHeal ( sci , unit ) ; begin
66338: LD_INT 0
66340: PPUSH
// if GetTaskList ( sci ) > 0 then
66341: LD_VAR 0 1
66345: PPUSH
66346: CALL_OW 437
66350: PUSH
66351: LD_INT 0
66353: GREATER
66354: IFFALSE 66424
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 437
66365: PUSH
66366: LD_INT 1
66368: ARRAY
66369: PUSH
66370: LD_INT 1
66372: ARRAY
66373: PUSH
66374: LD_STRING l
66376: EQUAL
66377: PUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: CALL_OW 437
66387: PUSH
66388: LD_INT 1
66390: ARRAY
66391: PUSH
66392: LD_INT 4
66394: ARRAY
66395: PUSH
66396: LD_VAR 0 2
66400: EQUAL
66401: AND
66402: IFFALSE 66414
// result := true else
66404: LD_ADDR_VAR 0 3
66408: PUSH
66409: LD_INT 1
66411: ST_TO_ADDR
66412: GO 66422
// result := false ;
66414: LD_ADDR_VAR 0 3
66418: PUSH
66419: LD_INT 0
66421: ST_TO_ADDR
// end else
66422: GO 66432
// result := false ;
66424: LD_ADDR_VAR 0 3
66428: PUSH
66429: LD_INT 0
66431: ST_TO_ADDR
// end ;
66432: LD_VAR 0 3
66436: RET
// export function HealTarget ( sci ) ; begin
66437: LD_INT 0
66439: PPUSH
// if not sci then
66440: LD_VAR 0 1
66444: NOT
66445: IFFALSE 66449
// exit ;
66447: GO 66514
// result := 0 ;
66449: LD_ADDR_VAR 0 2
66453: PUSH
66454: LD_INT 0
66456: ST_TO_ADDR
// if GetTaskList ( sci ) then
66457: LD_VAR 0 1
66461: PPUSH
66462: CALL_OW 437
66466: IFFALSE 66514
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 437
66477: PUSH
66478: LD_INT 1
66480: ARRAY
66481: PUSH
66482: LD_INT 1
66484: ARRAY
66485: PUSH
66486: LD_STRING l
66488: EQUAL
66489: IFFALSE 66514
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66491: LD_ADDR_VAR 0 2
66495: PUSH
66496: LD_VAR 0 1
66500: PPUSH
66501: CALL_OW 437
66505: PUSH
66506: LD_INT 1
66508: ARRAY
66509: PUSH
66510: LD_INT 4
66512: ARRAY
66513: ST_TO_ADDR
// end ;
66514: LD_VAR 0 2
66518: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66519: LD_INT 0
66521: PPUSH
66522: PPUSH
66523: PPUSH
66524: PPUSH
// if not base_units then
66525: LD_VAR 0 1
66529: NOT
66530: IFFALSE 66534
// exit ;
66532: GO 66621
// result := false ;
66534: LD_ADDR_VAR 0 2
66538: PUSH
66539: LD_INT 0
66541: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66542: LD_ADDR_VAR 0 5
66546: PUSH
66547: LD_VAR 0 1
66551: PPUSH
66552: LD_INT 21
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PPUSH
66562: CALL_OW 72
66566: ST_TO_ADDR
// if not tmp then
66567: LD_VAR 0 5
66571: NOT
66572: IFFALSE 66576
// exit ;
66574: GO 66621
// for i in tmp do
66576: LD_ADDR_VAR 0 3
66580: PUSH
66581: LD_VAR 0 5
66585: PUSH
66586: FOR_IN
66587: IFFALSE 66619
// begin result := EnemyInRange ( i , 22 ) ;
66589: LD_ADDR_VAR 0 2
66593: PUSH
66594: LD_VAR 0 3
66598: PPUSH
66599: LD_INT 22
66601: PPUSH
66602: CALL 64199 0 2
66606: ST_TO_ADDR
// if result then
66607: LD_VAR 0 2
66611: IFFALSE 66617
// exit ;
66613: POP
66614: POP
66615: GO 66621
// end ;
66617: GO 66586
66619: POP
66620: POP
// end ;
66621: LD_VAR 0 2
66625: RET
// export function FilterByTag ( units , tag ) ; begin
66626: LD_INT 0
66628: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66629: LD_ADDR_VAR 0 3
66633: PUSH
66634: LD_VAR 0 1
66638: PPUSH
66639: LD_INT 120
66641: PUSH
66642: LD_VAR 0 2
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PPUSH
66651: CALL_OW 72
66655: ST_TO_ADDR
// end ;
66656: LD_VAR 0 3
66660: RET
// export function IsDriver ( un ) ; begin
66661: LD_INT 0
66663: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66664: LD_ADDR_VAR 0 2
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_INT 55
66676: PUSH
66677: EMPTY
66678: LIST
66679: PPUSH
66680: CALL_OW 69
66684: IN
66685: ST_TO_ADDR
// end ;
66686: LD_VAR 0 2
66690: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66691: LD_INT 0
66693: PPUSH
66694: PPUSH
// list := [ ] ;
66695: LD_ADDR_VAR 0 5
66699: PUSH
66700: EMPTY
66701: ST_TO_ADDR
// case d of 0 :
66702: LD_VAR 0 3
66706: PUSH
66707: LD_INT 0
66709: DOUBLE
66710: EQUAL
66711: IFTRUE 66715
66713: GO 66848
66715: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66716: LD_ADDR_VAR 0 5
66720: PUSH
66721: LD_VAR 0 1
66725: PUSH
66726: LD_INT 4
66728: MINUS
66729: PUSH
66730: LD_VAR 0 2
66734: PUSH
66735: LD_INT 4
66737: MINUS
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: PUSH
66747: LD_VAR 0 1
66751: PUSH
66752: LD_INT 3
66754: MINUS
66755: PUSH
66756: LD_VAR 0 2
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: PUSH
66769: LD_VAR 0 1
66773: PUSH
66774: LD_INT 4
66776: PLUS
66777: PUSH
66778: LD_VAR 0 2
66782: PUSH
66783: LD_INT 4
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: LIST
66790: PUSH
66791: LD_VAR 0 1
66795: PUSH
66796: LD_INT 3
66798: PLUS
66799: PUSH
66800: LD_VAR 0 2
66804: PUSH
66805: LD_INT 3
66807: PLUS
66808: PUSH
66809: LD_INT 5
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: PUSH
66817: LD_VAR 0 1
66821: PUSH
66822: LD_VAR 0 2
66826: PUSH
66827: LD_INT 4
66829: PLUS
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: ST_TO_ADDR
// end ; 1 :
66846: GO 67546
66848: LD_INT 1
66850: DOUBLE
66851: EQUAL
66852: IFTRUE 66856
66854: GO 66989
66856: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66857: LD_ADDR_VAR 0 5
66861: PUSH
66862: LD_VAR 0 1
66866: PUSH
66867: LD_VAR 0 2
66871: PUSH
66872: LD_INT 4
66874: MINUS
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: PUSH
66884: LD_VAR 0 1
66888: PUSH
66889: LD_INT 3
66891: MINUS
66892: PUSH
66893: LD_VAR 0 2
66897: PUSH
66898: LD_INT 3
66900: MINUS
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: PUSH
66910: LD_VAR 0 1
66914: PUSH
66915: LD_INT 4
66917: MINUS
66918: PUSH
66919: LD_VAR 0 2
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: LIST
66931: PUSH
66932: LD_VAR 0 1
66936: PUSH
66937: LD_VAR 0 2
66941: PUSH
66942: LD_INT 3
66944: PLUS
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: PUSH
66954: LD_VAR 0 1
66958: PUSH
66959: LD_INT 4
66961: PLUS
66962: PUSH
66963: LD_VAR 0 2
66967: PUSH
66968: LD_INT 4
66970: PLUS
66971: PUSH
66972: LD_INT 5
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: LIST
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// end ; 2 :
66987: GO 67546
66989: LD_INT 2
66991: DOUBLE
66992: EQUAL
66993: IFTRUE 66997
66995: GO 67126
66997: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66998: LD_ADDR_VAR 0 5
67002: PUSH
67003: LD_VAR 0 1
67007: PUSH
67008: LD_VAR 0 2
67012: PUSH
67013: LD_INT 3
67015: MINUS
67016: PUSH
67017: LD_INT 3
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: PUSH
67025: LD_VAR 0 1
67029: PUSH
67030: LD_INT 4
67032: PLUS
67033: PUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_INT 4
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: PUSH
67047: LD_VAR 0 1
67051: PUSH
67052: LD_VAR 0 2
67056: PUSH
67057: LD_INT 4
67059: PLUS
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: PUSH
67069: LD_VAR 0 1
67073: PUSH
67074: LD_INT 3
67076: MINUS
67077: PUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: PUSH
67091: LD_VAR 0 1
67095: PUSH
67096: LD_INT 4
67098: MINUS
67099: PUSH
67100: LD_VAR 0 2
67104: PUSH
67105: LD_INT 4
67107: MINUS
67108: PUSH
67109: LD_INT 2
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// end ; 3 :
67124: GO 67546
67126: LD_INT 3
67128: DOUBLE
67129: EQUAL
67130: IFTRUE 67134
67132: GO 67267
67134: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67135: LD_ADDR_VAR 0 5
67139: PUSH
67140: LD_VAR 0 1
67144: PUSH
67145: LD_INT 3
67147: PLUS
67148: PUSH
67149: LD_VAR 0 2
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: PUSH
67162: LD_VAR 0 1
67166: PUSH
67167: LD_INT 4
67169: PLUS
67170: PUSH
67171: LD_VAR 0 2
67175: PUSH
67176: LD_INT 4
67178: PLUS
67179: PUSH
67180: LD_INT 5
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: PUSH
67188: LD_VAR 0 1
67192: PUSH
67193: LD_INT 4
67195: MINUS
67196: PUSH
67197: LD_VAR 0 2
67201: PUSH
67202: LD_INT 1
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: PUSH
67210: LD_VAR 0 1
67214: PUSH
67215: LD_VAR 0 2
67219: PUSH
67220: LD_INT 4
67222: MINUS
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: PUSH
67232: LD_VAR 0 1
67236: PUSH
67237: LD_INT 3
67239: MINUS
67240: PUSH
67241: LD_VAR 0 2
67245: PUSH
67246: LD_INT 3
67248: MINUS
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: ST_TO_ADDR
// end ; 4 :
67265: GO 67546
67267: LD_INT 4
67269: DOUBLE
67270: EQUAL
67271: IFTRUE 67275
67273: GO 67408
67275: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67276: LD_ADDR_VAR 0 5
67280: PUSH
67281: LD_VAR 0 1
67285: PUSH
67286: LD_VAR 0 2
67290: PUSH
67291: LD_INT 4
67293: PLUS
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: PUSH
67303: LD_VAR 0 1
67307: PUSH
67308: LD_INT 3
67310: PLUS
67311: PUSH
67312: LD_VAR 0 2
67316: PUSH
67317: LD_INT 3
67319: PLUS
67320: PUSH
67321: LD_INT 5
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: PUSH
67329: LD_VAR 0 1
67333: PUSH
67334: LD_INT 4
67336: PLUS
67337: PUSH
67338: LD_VAR 0 2
67342: PUSH
67343: LD_INT 4
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: LIST
67350: PUSH
67351: LD_VAR 0 1
67355: PUSH
67356: LD_VAR 0 2
67360: PUSH
67361: LD_INT 3
67363: MINUS
67364: PUSH
67365: LD_INT 3
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: LIST
67372: PUSH
67373: LD_VAR 0 1
67377: PUSH
67378: LD_INT 4
67380: MINUS
67381: PUSH
67382: LD_VAR 0 2
67386: PUSH
67387: LD_INT 4
67389: MINUS
67390: PUSH
67391: LD_INT 2
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: ST_TO_ADDR
// end ; 5 :
67406: GO 67546
67408: LD_INT 5
67410: DOUBLE
67411: EQUAL
67412: IFTRUE 67416
67414: GO 67545
67416: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67417: LD_ADDR_VAR 0 5
67421: PUSH
67422: LD_VAR 0 1
67426: PUSH
67427: LD_INT 4
67429: MINUS
67430: PUSH
67431: LD_VAR 0 2
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: PUSH
67444: LD_VAR 0 1
67448: PUSH
67449: LD_VAR 0 2
67453: PUSH
67454: LD_INT 4
67456: MINUS
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: PUSH
67466: LD_VAR 0 1
67470: PUSH
67471: LD_INT 4
67473: PLUS
67474: PUSH
67475: LD_VAR 0 2
67479: PUSH
67480: LD_INT 4
67482: PLUS
67483: PUSH
67484: LD_INT 5
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: LIST
67491: PUSH
67492: LD_VAR 0 1
67496: PUSH
67497: LD_INT 3
67499: PLUS
67500: PUSH
67501: LD_VAR 0 2
67505: PUSH
67506: LD_INT 4
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: LIST
67513: PUSH
67514: LD_VAR 0 1
67518: PUSH
67519: LD_VAR 0 2
67523: PUSH
67524: LD_INT 3
67526: PLUS
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: LIST
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: ST_TO_ADDR
// end ; end ;
67543: GO 67546
67545: POP
// result := list ;
67546: LD_ADDR_VAR 0 4
67550: PUSH
67551: LD_VAR 0 5
67555: ST_TO_ADDR
// end ;
67556: LD_VAR 0 4
67560: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67561: LD_INT 0
67563: PPUSH
67564: PPUSH
67565: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67566: LD_VAR 0 1
67570: NOT
67571: PUSH
67572: LD_VAR 0 2
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: IN
67595: NOT
67596: OR
67597: IFFALSE 67601
// exit ;
67599: GO 67684
// tmp := [ ] ;
67601: LD_ADDR_VAR 0 5
67605: PUSH
67606: EMPTY
67607: ST_TO_ADDR
// for i in units do
67608: LD_ADDR_VAR 0 4
67612: PUSH
67613: LD_VAR 0 1
67617: PUSH
67618: FOR_IN
67619: IFFALSE 67653
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67621: LD_ADDR_VAR 0 5
67625: PUSH
67626: LD_VAR 0 5
67630: PPUSH
67631: LD_VAR 0 4
67635: PPUSH
67636: LD_VAR 0 2
67640: PPUSH
67641: CALL_OW 259
67645: PPUSH
67646: CALL 69057 0 2
67650: ST_TO_ADDR
67651: GO 67618
67653: POP
67654: POP
// if not tmp then
67655: LD_VAR 0 5
67659: NOT
67660: IFFALSE 67664
// exit ;
67662: GO 67684
// result := SortListByListDesc ( units , tmp ) ;
67664: LD_ADDR_VAR 0 3
67668: PUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: LD_VAR 0 5
67678: PPUSH
67679: CALL_OW 77
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 3
67688: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67689: LD_INT 0
67691: PPUSH
67692: PPUSH
67693: PPUSH
// result := false ;
67694: LD_ADDR_VAR 0 3
67698: PUSH
67699: LD_INT 0
67701: ST_TO_ADDR
// if not building then
67702: LD_VAR 0 2
67706: NOT
67707: IFFALSE 67711
// exit ;
67709: GO 67849
// x := GetX ( building ) ;
67711: LD_ADDR_VAR 0 4
67715: PUSH
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 250
67725: ST_TO_ADDR
// y := GetY ( building ) ;
67726: LD_ADDR_VAR 0 5
67730: PUSH
67731: LD_VAR 0 2
67735: PPUSH
67736: CALL_OW 251
67740: ST_TO_ADDR
// if not x or not y then
67741: LD_VAR 0 4
67745: NOT
67746: PUSH
67747: LD_VAR 0 5
67751: NOT
67752: OR
67753: IFFALSE 67757
// exit ;
67755: GO 67849
// if GetTaskList ( unit ) then
67757: LD_VAR 0 1
67761: PPUSH
67762: CALL_OW 437
67766: IFFALSE 67849
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67768: LD_STRING e
67770: PUSH
67771: LD_VAR 0 1
67775: PPUSH
67776: CALL_OW 437
67780: PUSH
67781: LD_INT 1
67783: ARRAY
67784: PUSH
67785: LD_INT 1
67787: ARRAY
67788: EQUAL
67789: PUSH
67790: LD_VAR 0 4
67794: PUSH
67795: LD_VAR 0 1
67799: PPUSH
67800: CALL_OW 437
67804: PUSH
67805: LD_INT 1
67807: ARRAY
67808: PUSH
67809: LD_INT 2
67811: ARRAY
67812: EQUAL
67813: AND
67814: PUSH
67815: LD_VAR 0 5
67819: PUSH
67820: LD_VAR 0 1
67824: PPUSH
67825: CALL_OW 437
67829: PUSH
67830: LD_INT 1
67832: ARRAY
67833: PUSH
67834: LD_INT 3
67836: ARRAY
67837: EQUAL
67838: AND
67839: IFFALSE 67849
// result := true end ;
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_INT 1
67848: ST_TO_ADDR
// end ;
67849: LD_VAR 0 3
67853: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67854: LD_INT 0
67856: PPUSH
// result := false ;
67857: LD_ADDR_VAR 0 4
67861: PUSH
67862: LD_INT 0
67864: ST_TO_ADDR
// if GetTaskList ( unit ) then
67865: LD_VAR 0 1
67869: PPUSH
67870: CALL_OW 437
67874: IFFALSE 67957
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67876: LD_STRING M
67878: PUSH
67879: LD_VAR 0 1
67883: PPUSH
67884: CALL_OW 437
67888: PUSH
67889: LD_INT 1
67891: ARRAY
67892: PUSH
67893: LD_INT 1
67895: ARRAY
67896: EQUAL
67897: PUSH
67898: LD_VAR 0 2
67902: PUSH
67903: LD_VAR 0 1
67907: PPUSH
67908: CALL_OW 437
67912: PUSH
67913: LD_INT 1
67915: ARRAY
67916: PUSH
67917: LD_INT 2
67919: ARRAY
67920: EQUAL
67921: AND
67922: PUSH
67923: LD_VAR 0 3
67927: PUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: CALL_OW 437
67937: PUSH
67938: LD_INT 1
67940: ARRAY
67941: PUSH
67942: LD_INT 3
67944: ARRAY
67945: EQUAL
67946: AND
67947: IFFALSE 67957
// result := true ;
67949: LD_ADDR_VAR 0 4
67953: PUSH
67954: LD_INT 1
67956: ST_TO_ADDR
// end ; end ;
67957: LD_VAR 0 4
67961: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67962: LD_INT 0
67964: PPUSH
67965: PPUSH
67966: PPUSH
67967: PPUSH
// if not unit or not area then
67968: LD_VAR 0 1
67972: NOT
67973: PUSH
67974: LD_VAR 0 2
67978: NOT
67979: OR
67980: IFFALSE 67984
// exit ;
67982: GO 68160
// tmp := AreaToList ( area , i ) ;
67984: LD_ADDR_VAR 0 6
67988: PUSH
67989: LD_VAR 0 2
67993: PPUSH
67994: LD_VAR 0 5
67998: PPUSH
67999: CALL_OW 517
68003: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68004: LD_ADDR_VAR 0 5
68008: PUSH
68009: DOUBLE
68010: LD_INT 1
68012: DEC
68013: ST_TO_ADDR
68014: LD_VAR 0 6
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: PUSH
68023: FOR_TO
68024: IFFALSE 68158
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68026: LD_ADDR_VAR 0 7
68030: PUSH
68031: LD_VAR 0 6
68035: PUSH
68036: LD_INT 1
68038: ARRAY
68039: PUSH
68040: LD_VAR 0 5
68044: ARRAY
68045: PUSH
68046: LD_VAR 0 6
68050: PUSH
68051: LD_INT 2
68053: ARRAY
68054: PUSH
68055: LD_VAR 0 5
68059: ARRAY
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68065: LD_INT 92
68067: PUSH
68068: LD_VAR 0 7
68072: PUSH
68073: LD_INT 1
68075: ARRAY
68076: PUSH
68077: LD_VAR 0 7
68081: PUSH
68082: LD_INT 2
68084: ARRAY
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: PPUSH
68095: CALL_OW 69
68099: PUSH
68100: LD_INT 0
68102: EQUAL
68103: IFFALSE 68156
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68105: LD_VAR 0 1
68109: PPUSH
68110: LD_VAR 0 7
68114: PUSH
68115: LD_INT 1
68117: ARRAY
68118: PPUSH
68119: LD_VAR 0 7
68123: PUSH
68124: LD_INT 2
68126: ARRAY
68127: PPUSH
68128: LD_VAR 0 3
68132: PPUSH
68133: CALL_OW 48
// result := IsPlaced ( unit ) ;
68137: LD_ADDR_VAR 0 4
68141: PUSH
68142: LD_VAR 0 1
68146: PPUSH
68147: CALL_OW 305
68151: ST_TO_ADDR
// exit ;
68152: POP
68153: POP
68154: GO 68160
// end ; end ;
68156: GO 68023
68158: POP
68159: POP
// end ;
68160: LD_VAR 0 4
68164: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68165: LD_INT 0
68167: PPUSH
68168: PPUSH
68169: PPUSH
// if not side or side > 8 then
68170: LD_VAR 0 1
68174: NOT
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_INT 8
68183: GREATER
68184: OR
68185: IFFALSE 68189
// exit ;
68187: GO 68376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68189: LD_ADDR_VAR 0 4
68193: PUSH
68194: LD_INT 22
68196: PUSH
68197: LD_VAR 0 1
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 21
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PPUSH
68220: CALL_OW 69
68224: ST_TO_ADDR
// if not tmp then
68225: LD_VAR 0 4
68229: NOT
68230: IFFALSE 68234
// exit ;
68232: GO 68376
// enable_addtolog := true ;
68234: LD_ADDR_OWVAR 81
68238: PUSH
68239: LD_INT 1
68241: ST_TO_ADDR
// AddToLog ( [ ) ;
68242: LD_STRING [
68244: PPUSH
68245: CALL_OW 561
// for i in tmp do
68249: LD_ADDR_VAR 0 3
68253: PUSH
68254: LD_VAR 0 4
68258: PUSH
68259: FOR_IN
68260: IFFALSE 68367
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68262: LD_STRING [
68264: PUSH
68265: LD_VAR 0 3
68269: PPUSH
68270: CALL_OW 266
68274: STR
68275: PUSH
68276: LD_STRING , 
68278: STR
68279: PUSH
68280: LD_VAR 0 3
68284: PPUSH
68285: CALL_OW 250
68289: STR
68290: PUSH
68291: LD_STRING , 
68293: STR
68294: PUSH
68295: LD_VAR 0 3
68299: PPUSH
68300: CALL_OW 251
68304: STR
68305: PUSH
68306: LD_STRING , 
68308: STR
68309: PUSH
68310: LD_VAR 0 3
68314: PPUSH
68315: CALL_OW 254
68319: STR
68320: PUSH
68321: LD_STRING , 
68323: STR
68324: PUSH
68325: LD_VAR 0 3
68329: PPUSH
68330: LD_INT 1
68332: PPUSH
68333: CALL_OW 268
68337: STR
68338: PUSH
68339: LD_STRING , 
68341: STR
68342: PUSH
68343: LD_VAR 0 3
68347: PPUSH
68348: LD_INT 2
68350: PPUSH
68351: CALL_OW 268
68355: STR
68356: PUSH
68357: LD_STRING ],
68359: STR
68360: PPUSH
68361: CALL_OW 561
// end ;
68365: GO 68259
68367: POP
68368: POP
// AddToLog ( ]; ) ;
68369: LD_STRING ];
68371: PPUSH
68372: CALL_OW 561
// end ;
68376: LD_VAR 0 2
68380: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68381: LD_INT 0
68383: PPUSH
68384: PPUSH
68385: PPUSH
68386: PPUSH
68387: PPUSH
// if not area or not rate or not max then
68388: LD_VAR 0 1
68392: NOT
68393: PUSH
68394: LD_VAR 0 2
68398: NOT
68399: OR
68400: PUSH
68401: LD_VAR 0 4
68405: NOT
68406: OR
68407: IFFALSE 68411
// exit ;
68409: GO 68600
// while 1 do
68411: LD_INT 1
68413: IFFALSE 68600
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68415: LD_ADDR_VAR 0 9
68419: PUSH
68420: LD_VAR 0 1
68424: PPUSH
68425: LD_INT 1
68427: PPUSH
68428: CALL_OW 287
68432: PUSH
68433: LD_INT 10
68435: MUL
68436: ST_TO_ADDR
// r := rate / 10 ;
68437: LD_ADDR_VAR 0 7
68441: PUSH
68442: LD_VAR 0 2
68446: PUSH
68447: LD_INT 10
68449: DIVREAL
68450: ST_TO_ADDR
// time := 1 1$00 ;
68451: LD_ADDR_VAR 0 8
68455: PUSH
68456: LD_INT 2100
68458: ST_TO_ADDR
// if amount < min then
68459: LD_VAR 0 9
68463: PUSH
68464: LD_VAR 0 3
68468: LESS
68469: IFFALSE 68487
// r := r * 2 else
68471: LD_ADDR_VAR 0 7
68475: PUSH
68476: LD_VAR 0 7
68480: PUSH
68481: LD_INT 2
68483: MUL
68484: ST_TO_ADDR
68485: GO 68513
// if amount > max then
68487: LD_VAR 0 9
68491: PUSH
68492: LD_VAR 0 4
68496: GREATER
68497: IFFALSE 68513
// r := r / 2 ;
68499: LD_ADDR_VAR 0 7
68503: PUSH
68504: LD_VAR 0 7
68508: PUSH
68509: LD_INT 2
68511: DIVREAL
68512: ST_TO_ADDR
// time := time / r ;
68513: LD_ADDR_VAR 0 8
68517: PUSH
68518: LD_VAR 0 8
68522: PUSH
68523: LD_VAR 0 7
68527: DIVREAL
68528: ST_TO_ADDR
// if time < 0 then
68529: LD_VAR 0 8
68533: PUSH
68534: LD_INT 0
68536: LESS
68537: IFFALSE 68554
// time := time * - 1 ;
68539: LD_ADDR_VAR 0 8
68543: PUSH
68544: LD_VAR 0 8
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: MUL
68553: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68554: LD_VAR 0 8
68558: PUSH
68559: LD_INT 35
68561: PPUSH
68562: LD_INT 875
68564: PPUSH
68565: CALL_OW 12
68569: PLUS
68570: PPUSH
68571: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68575: LD_INT 1
68577: PPUSH
68578: LD_INT 5
68580: PPUSH
68581: CALL_OW 12
68585: PPUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: LD_INT 1
68593: PPUSH
68594: CALL_OW 55
// end ;
68598: GO 68411
// end ;
68600: LD_VAR 0 5
68604: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68605: LD_INT 0
68607: PPUSH
68608: PPUSH
68609: PPUSH
68610: PPUSH
68611: PPUSH
68612: PPUSH
68613: PPUSH
68614: PPUSH
// if not turrets or not factories then
68615: LD_VAR 0 1
68619: NOT
68620: PUSH
68621: LD_VAR 0 2
68625: NOT
68626: OR
68627: IFFALSE 68631
// exit ;
68629: GO 68938
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68631: LD_ADDR_VAR 0 10
68635: PUSH
68636: LD_INT 5
68638: PUSH
68639: LD_INT 6
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: LD_INT 4
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 3
68658: PUSH
68659: LD_INT 5
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 24
68673: PUSH
68674: LD_INT 25
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 23
68683: PUSH
68684: LD_INT 27
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 42
68697: PUSH
68698: LD_INT 43
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 44
68707: PUSH
68708: LD_INT 46
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 45
68717: PUSH
68718: LD_INT 47
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: ST_TO_ADDR
// result := [ ] ;
68735: LD_ADDR_VAR 0 3
68739: PUSH
68740: EMPTY
68741: ST_TO_ADDR
// for i in turrets do
68742: LD_ADDR_VAR 0 4
68746: PUSH
68747: LD_VAR 0 1
68751: PUSH
68752: FOR_IN
68753: IFFALSE 68936
// begin nat := GetNation ( i ) ;
68755: LD_ADDR_VAR 0 7
68759: PUSH
68760: LD_VAR 0 4
68764: PPUSH
68765: CALL_OW 248
68769: ST_TO_ADDR
// weapon := 0 ;
68770: LD_ADDR_VAR 0 8
68774: PUSH
68775: LD_INT 0
68777: ST_TO_ADDR
// if not nat then
68778: LD_VAR 0 7
68782: NOT
68783: IFFALSE 68787
// continue ;
68785: GO 68752
// for j in list [ nat ] do
68787: LD_ADDR_VAR 0 5
68791: PUSH
68792: LD_VAR 0 10
68796: PUSH
68797: LD_VAR 0 7
68801: ARRAY
68802: PUSH
68803: FOR_IN
68804: IFFALSE 68845
// if GetBWeapon ( i ) = j [ 1 ] then
68806: LD_VAR 0 4
68810: PPUSH
68811: CALL_OW 269
68815: PUSH
68816: LD_VAR 0 5
68820: PUSH
68821: LD_INT 1
68823: ARRAY
68824: EQUAL
68825: IFFALSE 68843
// begin weapon := j [ 2 ] ;
68827: LD_ADDR_VAR 0 8
68831: PUSH
68832: LD_VAR 0 5
68836: PUSH
68837: LD_INT 2
68839: ARRAY
68840: ST_TO_ADDR
// break ;
68841: GO 68845
// end ;
68843: GO 68803
68845: POP
68846: POP
// if not weapon then
68847: LD_VAR 0 8
68851: NOT
68852: IFFALSE 68856
// continue ;
68854: GO 68752
// for k in factories do
68856: LD_ADDR_VAR 0 6
68860: PUSH
68861: LD_VAR 0 2
68865: PUSH
68866: FOR_IN
68867: IFFALSE 68932
// begin weapons := AvailableWeaponList ( k ) ;
68869: LD_ADDR_VAR 0 9
68873: PUSH
68874: LD_VAR 0 6
68878: PPUSH
68879: CALL_OW 478
68883: ST_TO_ADDR
// if not weapons then
68884: LD_VAR 0 9
68888: NOT
68889: IFFALSE 68893
// continue ;
68891: GO 68866
// if weapon in weapons then
68893: LD_VAR 0 8
68897: PUSH
68898: LD_VAR 0 9
68902: IN
68903: IFFALSE 68930
// begin result := [ i , weapon ] ;
68905: LD_ADDR_VAR 0 3
68909: PUSH
68910: LD_VAR 0 4
68914: PUSH
68915: LD_VAR 0 8
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: ST_TO_ADDR
// exit ;
68924: POP
68925: POP
68926: POP
68927: POP
68928: GO 68938
// end ; end ;
68930: GO 68866
68932: POP
68933: POP
// end ;
68934: GO 68752
68936: POP
68937: POP
// end ;
68938: LD_VAR 0 3
68942: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68943: LD_INT 0
68945: PPUSH
// if not side or side > 8 then
68946: LD_VAR 0 3
68950: NOT
68951: PUSH
68952: LD_VAR 0 3
68956: PUSH
68957: LD_INT 8
68959: GREATER
68960: OR
68961: IFFALSE 68965
// exit ;
68963: GO 69024
// if not range then
68965: LD_VAR 0 4
68969: NOT
68970: IFFALSE 68981
// range := - 12 ;
68972: LD_ADDR_VAR 0 4
68976: PUSH
68977: LD_INT 12
68979: NEG
68980: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68981: LD_VAR 0 1
68985: PPUSH
68986: LD_VAR 0 2
68990: PPUSH
68991: LD_VAR 0 3
68995: PPUSH
68996: LD_VAR 0 4
69000: PPUSH
69001: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: LD_VAR 0 3
69019: PPUSH
69020: CALL_OW 331
// end ;
69024: LD_VAR 0 5
69028: RET
// export function Video ( mode ) ; begin
69029: LD_INT 0
69031: PPUSH
// ingame_video = mode ;
69032: LD_ADDR_OWVAR 52
69036: PUSH
69037: LD_VAR 0 1
69041: ST_TO_ADDR
// interface_hidden = mode ;
69042: LD_ADDR_OWVAR 54
69046: PUSH
69047: LD_VAR 0 1
69051: ST_TO_ADDR
// end ;
69052: LD_VAR 0 2
69056: RET
// export function Join ( array , element ) ; begin
69057: LD_INT 0
69059: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69060: LD_ADDR_VAR 0 3
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: LD_VAR 0 1
69074: PUSH
69075: LD_INT 1
69077: PLUS
69078: PPUSH
69079: LD_VAR 0 2
69083: PPUSH
69084: CALL_OW 1
69088: ST_TO_ADDR
// end ;
69089: LD_VAR 0 3
69093: RET
// export function JoinUnion ( array , element ) ; begin
69094: LD_INT 0
69096: PPUSH
// result := array union element ;
69097: LD_ADDR_VAR 0 3
69101: PUSH
69102: LD_VAR 0 1
69106: PUSH
69107: LD_VAR 0 2
69111: UNION
69112: ST_TO_ADDR
// end ;
69113: LD_VAR 0 3
69117: RET
// export function GetBehemoths ( side ) ; begin
69118: LD_INT 0
69120: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_INT 22
69128: PUSH
69129: LD_VAR 0 1
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 31
69140: PUSH
69141: LD_INT 25
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PPUSH
69152: CALL_OW 69
69156: ST_TO_ADDR
// end ;
69157: LD_VAR 0 2
69161: RET
// export function Shuffle ( array ) ; var i , index ; begin
69162: LD_INT 0
69164: PPUSH
69165: PPUSH
69166: PPUSH
// result := [ ] ;
69167: LD_ADDR_VAR 0 2
69171: PUSH
69172: EMPTY
69173: ST_TO_ADDR
// if not array then
69174: LD_VAR 0 1
69178: NOT
69179: IFFALSE 69183
// exit ;
69181: GO 69282
// Randomize ;
69183: CALL_OW 10
// for i = array downto 1 do
69187: LD_ADDR_VAR 0 3
69191: PUSH
69192: DOUBLE
69193: LD_VAR 0 1
69197: INC
69198: ST_TO_ADDR
69199: LD_INT 1
69201: PUSH
69202: FOR_DOWNTO
69203: IFFALSE 69280
// begin index := rand ( 1 , array ) ;
69205: LD_ADDR_VAR 0 4
69209: PUSH
69210: LD_INT 1
69212: PPUSH
69213: LD_VAR 0 1
69217: PPUSH
69218: CALL_OW 12
69222: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69223: LD_ADDR_VAR 0 2
69227: PUSH
69228: LD_VAR 0 2
69232: PPUSH
69233: LD_VAR 0 2
69237: PUSH
69238: LD_INT 1
69240: PLUS
69241: PPUSH
69242: LD_VAR 0 1
69246: PUSH
69247: LD_VAR 0 4
69251: ARRAY
69252: PPUSH
69253: CALL_OW 2
69257: ST_TO_ADDR
// array := Delete ( array , index ) ;
69258: LD_ADDR_VAR 0 1
69262: PUSH
69263: LD_VAR 0 1
69267: PPUSH
69268: LD_VAR 0 4
69272: PPUSH
69273: CALL_OW 3
69277: ST_TO_ADDR
// end ;
69278: GO 69202
69280: POP
69281: POP
// end ;
69282: LD_VAR 0 2
69286: RET
// export function GetBaseMaterials ( base ) ; begin
69287: LD_INT 0
69289: PPUSH
// result := [ 0 , 0 , 0 ] ;
69290: LD_ADDR_VAR 0 2
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 0
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: ST_TO_ADDR
// if not base then
69309: LD_VAR 0 1
69313: NOT
69314: IFFALSE 69318
// exit ;
69316: GO 69367
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69318: LD_ADDR_VAR 0 2
69322: PUSH
69323: LD_VAR 0 1
69327: PPUSH
69328: LD_INT 1
69330: PPUSH
69331: CALL_OW 275
69335: PUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: LD_INT 2
69343: PPUSH
69344: CALL_OW 275
69348: PUSH
69349: LD_VAR 0 1
69353: PPUSH
69354: LD_INT 3
69356: PPUSH
69357: CALL_OW 275
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: ST_TO_ADDR
// end ;
69367: LD_VAR 0 2
69371: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69372: LD_INT 0
69374: PPUSH
69375: PPUSH
// result := array ;
69376: LD_ADDR_VAR 0 3
69380: PUSH
69381: LD_VAR 0 1
69385: ST_TO_ADDR
// if size >= result then
69386: LD_VAR 0 2
69390: PUSH
69391: LD_VAR 0 3
69395: GREATEREQUAL
69396: IFFALSE 69400
// exit ;
69398: GO 69450
// if size then
69400: LD_VAR 0 2
69404: IFFALSE 69450
// for i := array downto size do
69406: LD_ADDR_VAR 0 4
69410: PUSH
69411: DOUBLE
69412: LD_VAR 0 1
69416: INC
69417: ST_TO_ADDR
69418: LD_VAR 0 2
69422: PUSH
69423: FOR_DOWNTO
69424: IFFALSE 69448
// result := Delete ( result , result ) ;
69426: LD_ADDR_VAR 0 3
69430: PUSH
69431: LD_VAR 0 3
69435: PPUSH
69436: LD_VAR 0 3
69440: PPUSH
69441: CALL_OW 3
69445: ST_TO_ADDR
69446: GO 69423
69448: POP
69449: POP
// end ;
69450: LD_VAR 0 3
69454: RET
// export function ComExit ( unit ) ; var tmp ; begin
69455: LD_INT 0
69457: PPUSH
69458: PPUSH
// if not IsInUnit ( unit ) then
69459: LD_VAR 0 1
69463: PPUSH
69464: CALL_OW 310
69468: NOT
69469: IFFALSE 69473
// exit ;
69471: GO 69533
// tmp := IsInUnit ( unit ) ;
69473: LD_ADDR_VAR 0 3
69477: PUSH
69478: LD_VAR 0 1
69482: PPUSH
69483: CALL_OW 310
69487: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69488: LD_VAR 0 3
69492: PPUSH
69493: CALL_OW 247
69497: PUSH
69498: LD_INT 2
69500: EQUAL
69501: IFFALSE 69514
// ComExitVehicle ( unit ) else
69503: LD_VAR 0 1
69507: PPUSH
69508: CALL_OW 121
69512: GO 69523
// ComExitBuilding ( unit ) ;
69514: LD_VAR 0 1
69518: PPUSH
69519: CALL_OW 122
// result := tmp ;
69523: LD_ADDR_VAR 0 2
69527: PUSH
69528: LD_VAR 0 3
69532: ST_TO_ADDR
// end ;
69533: LD_VAR 0 2
69537: RET
// export function ComExitAll ( units ) ; var i ; begin
69538: LD_INT 0
69540: PPUSH
69541: PPUSH
// if not units then
69542: LD_VAR 0 1
69546: NOT
69547: IFFALSE 69551
// exit ;
69549: GO 69577
// for i in units do
69551: LD_ADDR_VAR 0 3
69555: PUSH
69556: LD_VAR 0 1
69560: PUSH
69561: FOR_IN
69562: IFFALSE 69575
// ComExit ( i ) ;
69564: LD_VAR 0 3
69568: PPUSH
69569: CALL 69455 0 1
69573: GO 69561
69575: POP
69576: POP
// end ;
69577: LD_VAR 0 2
69581: RET
// export function ResetHc ; begin
69582: LD_INT 0
69584: PPUSH
// InitHc ;
69585: CALL_OW 19
// hc_importance := 0 ;
69589: LD_ADDR_OWVAR 32
69593: PUSH
69594: LD_INT 0
69596: ST_TO_ADDR
// end ;
69597: LD_VAR 0 1
69601: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69602: LD_INT 0
69604: PPUSH
69605: PPUSH
69606: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69607: LD_ADDR_VAR 0 6
69611: PUSH
69612: LD_VAR 0 1
69616: PUSH
69617: LD_VAR 0 3
69621: PLUS
69622: PUSH
69623: LD_INT 2
69625: DIV
69626: ST_TO_ADDR
// if _x < 0 then
69627: LD_VAR 0 6
69631: PUSH
69632: LD_INT 0
69634: LESS
69635: IFFALSE 69652
// _x := _x * - 1 ;
69637: LD_ADDR_VAR 0 6
69641: PUSH
69642: LD_VAR 0 6
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: MUL
69651: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69652: LD_ADDR_VAR 0 7
69656: PUSH
69657: LD_VAR 0 2
69661: PUSH
69662: LD_VAR 0 4
69666: PLUS
69667: PUSH
69668: LD_INT 2
69670: DIV
69671: ST_TO_ADDR
// if _y < 0 then
69672: LD_VAR 0 7
69676: PUSH
69677: LD_INT 0
69679: LESS
69680: IFFALSE 69697
// _y := _y * - 1 ;
69682: LD_ADDR_VAR 0 7
69686: PUSH
69687: LD_VAR 0 7
69691: PUSH
69692: LD_INT 1
69694: NEG
69695: MUL
69696: ST_TO_ADDR
// result := [ _x , _y ] ;
69697: LD_ADDR_VAR 0 5
69701: PUSH
69702: LD_VAR 0 6
69706: PUSH
69707: LD_VAR 0 7
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: ST_TO_ADDR
// end ;
69716: LD_VAR 0 5
69720: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69721: LD_INT 0
69723: PPUSH
69724: PPUSH
69725: PPUSH
69726: PPUSH
// task := GetTaskList ( unit ) ;
69727: LD_ADDR_VAR 0 7
69731: PUSH
69732: LD_VAR 0 1
69736: PPUSH
69737: CALL_OW 437
69741: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69742: LD_VAR 0 7
69746: NOT
69747: PUSH
69748: LD_VAR 0 1
69752: PPUSH
69753: LD_VAR 0 2
69757: PPUSH
69758: CALL_OW 308
69762: NOT
69763: AND
69764: IFFALSE 69768
// exit ;
69766: GO 69886
// if IsInArea ( unit , area ) then
69768: LD_VAR 0 1
69772: PPUSH
69773: LD_VAR 0 2
69777: PPUSH
69778: CALL_OW 308
69782: IFFALSE 69800
// begin ComMoveToArea ( unit , goAway ) ;
69784: LD_VAR 0 1
69788: PPUSH
69789: LD_VAR 0 3
69793: PPUSH
69794: CALL_OW 113
// exit ;
69798: GO 69886
// end ; if task [ 1 ] [ 1 ] <> M then
69800: LD_VAR 0 7
69804: PUSH
69805: LD_INT 1
69807: ARRAY
69808: PUSH
69809: LD_INT 1
69811: ARRAY
69812: PUSH
69813: LD_STRING M
69815: NONEQUAL
69816: IFFALSE 69820
// exit ;
69818: GO 69886
// x := task [ 1 ] [ 2 ] ;
69820: LD_ADDR_VAR 0 5
69824: PUSH
69825: LD_VAR 0 7
69829: PUSH
69830: LD_INT 1
69832: ARRAY
69833: PUSH
69834: LD_INT 2
69836: ARRAY
69837: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69838: LD_ADDR_VAR 0 6
69842: PUSH
69843: LD_VAR 0 7
69847: PUSH
69848: LD_INT 1
69850: ARRAY
69851: PUSH
69852: LD_INT 3
69854: ARRAY
69855: ST_TO_ADDR
// if InArea ( x , y , area ) then
69856: LD_VAR 0 5
69860: PPUSH
69861: LD_VAR 0 6
69865: PPUSH
69866: LD_VAR 0 2
69870: PPUSH
69871: CALL_OW 309
69875: IFFALSE 69886
// ComStop ( unit ) ;
69877: LD_VAR 0 1
69881: PPUSH
69882: CALL_OW 141
// end ;
69886: LD_VAR 0 4
69890: RET
// export function Abs ( value ) ; begin
69891: LD_INT 0
69893: PPUSH
// result := value ;
69894: LD_ADDR_VAR 0 2
69898: PUSH
69899: LD_VAR 0 1
69903: ST_TO_ADDR
// if value < 0 then
69904: LD_VAR 0 1
69908: PUSH
69909: LD_INT 0
69911: LESS
69912: IFFALSE 69929
// result := value * - 1 ;
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_VAR 0 1
69923: PUSH
69924: LD_INT 1
69926: NEG
69927: MUL
69928: ST_TO_ADDR
// end ;
69929: LD_VAR 0 2
69933: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69934: LD_INT 0
69936: PPUSH
69937: PPUSH
69938: PPUSH
69939: PPUSH
69940: PPUSH
69941: PPUSH
69942: PPUSH
69943: PPUSH
// if not unit or not building then
69944: LD_VAR 0 1
69948: NOT
69949: PUSH
69950: LD_VAR 0 2
69954: NOT
69955: OR
69956: IFFALSE 69960
// exit ;
69958: GO 70186
// x := GetX ( building ) ;
69960: LD_ADDR_VAR 0 4
69964: PUSH
69965: LD_VAR 0 2
69969: PPUSH
69970: CALL_OW 250
69974: ST_TO_ADDR
// y := GetY ( building ) ;
69975: LD_ADDR_VAR 0 6
69979: PUSH
69980: LD_VAR 0 2
69984: PPUSH
69985: CALL_OW 251
69989: ST_TO_ADDR
// d := GetDir ( building ) ;
69990: LD_ADDR_VAR 0 8
69994: PUSH
69995: LD_VAR 0 2
69999: PPUSH
70000: CALL_OW 254
70004: ST_TO_ADDR
// r := 4 ;
70005: LD_ADDR_VAR 0 9
70009: PUSH
70010: LD_INT 4
70012: ST_TO_ADDR
// for i := 1 to 5 do
70013: LD_ADDR_VAR 0 10
70017: PUSH
70018: DOUBLE
70019: LD_INT 1
70021: DEC
70022: ST_TO_ADDR
70023: LD_INT 5
70025: PUSH
70026: FOR_TO
70027: IFFALSE 70184
// begin _x := ShiftX ( x , d , r + i ) ;
70029: LD_ADDR_VAR 0 5
70033: PUSH
70034: LD_VAR 0 4
70038: PPUSH
70039: LD_VAR 0 8
70043: PPUSH
70044: LD_VAR 0 9
70048: PUSH
70049: LD_VAR 0 10
70053: PLUS
70054: PPUSH
70055: CALL_OW 272
70059: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70060: LD_ADDR_VAR 0 7
70064: PUSH
70065: LD_VAR 0 6
70069: PPUSH
70070: LD_VAR 0 8
70074: PPUSH
70075: LD_VAR 0 9
70079: PUSH
70080: LD_VAR 0 10
70084: PLUS
70085: PPUSH
70086: CALL_OW 273
70090: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70091: LD_VAR 0 5
70095: PPUSH
70096: LD_VAR 0 7
70100: PPUSH
70101: CALL_OW 488
70105: PUSH
70106: LD_VAR 0 5
70110: PPUSH
70111: LD_VAR 0 7
70115: PPUSH
70116: CALL_OW 428
70120: PPUSH
70121: CALL_OW 247
70125: PUSH
70126: LD_INT 3
70128: PUSH
70129: LD_INT 2
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: IN
70136: NOT
70137: AND
70138: IFFALSE 70182
// begin ComMoveXY ( unit , _x , _y ) ;
70140: LD_VAR 0 1
70144: PPUSH
70145: LD_VAR 0 5
70149: PPUSH
70150: LD_VAR 0 7
70154: PPUSH
70155: CALL_OW 111
// result := [ _x , _y ] ;
70159: LD_ADDR_VAR 0 3
70163: PUSH
70164: LD_VAR 0 5
70168: PUSH
70169: LD_VAR 0 7
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: ST_TO_ADDR
// exit ;
70178: POP
70179: POP
70180: GO 70186
// end ; end ;
70182: GO 70026
70184: POP
70185: POP
// end ;
70186: LD_VAR 0 3
70190: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70191: LD_INT 0
70193: PPUSH
70194: PPUSH
70195: PPUSH
// result := 0 ;
70196: LD_ADDR_VAR 0 3
70200: PUSH
70201: LD_INT 0
70203: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70204: LD_VAR 0 1
70208: PUSH
70209: LD_INT 0
70211: LESS
70212: PUSH
70213: LD_VAR 0 1
70217: PUSH
70218: LD_INT 8
70220: GREATER
70221: OR
70222: PUSH
70223: LD_VAR 0 2
70227: PUSH
70228: LD_INT 0
70230: LESS
70231: OR
70232: PUSH
70233: LD_VAR 0 2
70237: PUSH
70238: LD_INT 8
70240: GREATER
70241: OR
70242: IFFALSE 70246
// exit ;
70244: GO 70321
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70246: LD_ADDR_VAR 0 4
70250: PUSH
70251: LD_INT 22
70253: PUSH
70254: LD_VAR 0 2
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PPUSH
70263: CALL_OW 69
70267: PUSH
70268: FOR_IN
70269: IFFALSE 70319
// begin un := UnitShoot ( i ) ;
70271: LD_ADDR_VAR 0 5
70275: PUSH
70276: LD_VAR 0 4
70280: PPUSH
70281: CALL_OW 504
70285: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70286: LD_VAR 0 5
70290: PPUSH
70291: CALL_OW 255
70295: PUSH
70296: LD_VAR 0 1
70300: EQUAL
70301: IFFALSE 70317
// begin result := un ;
70303: LD_ADDR_VAR 0 3
70307: PUSH
70308: LD_VAR 0 5
70312: ST_TO_ADDR
// exit ;
70313: POP
70314: POP
70315: GO 70321
// end ; end ;
70317: GO 70268
70319: POP
70320: POP
// end ;
70321: LD_VAR 0 3
70325: RET
// export function GetCargoBay ( units ) ; begin
70326: LD_INT 0
70328: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70329: LD_ADDR_VAR 0 2
70333: PUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: LD_INT 2
70341: PUSH
70342: LD_INT 34
70344: PUSH
70345: LD_INT 12
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 34
70354: PUSH
70355: LD_INT 51
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 34
70364: PUSH
70365: LD_INT 32
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 34
70374: PUSH
70375: LD_INT 89
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: PPUSH
70389: CALL_OW 72
70393: ST_TO_ADDR
// end ;
70394: LD_VAR 0 2
70398: RET
// export function Negate ( value ) ; begin
70399: LD_INT 0
70401: PPUSH
// result := not value ;
70402: LD_ADDR_VAR 0 2
70406: PUSH
70407: LD_VAR 0 1
70411: NOT
70412: ST_TO_ADDR
// end ;
70413: LD_VAR 0 2
70417: RET
// export function Inc ( value ) ; begin
70418: LD_INT 0
70420: PPUSH
// result := value + 1 ;
70421: LD_ADDR_VAR 0 2
70425: PUSH
70426: LD_VAR 0 1
70430: PUSH
70431: LD_INT 1
70433: PLUS
70434: ST_TO_ADDR
// end ;
70435: LD_VAR 0 2
70439: RET
// export function Dec ( value ) ; begin
70440: LD_INT 0
70442: PPUSH
// result := value - 1 ;
70443: LD_ADDR_VAR 0 2
70447: PUSH
70448: LD_VAR 0 1
70452: PUSH
70453: LD_INT 1
70455: MINUS
70456: ST_TO_ADDR
// end ;
70457: LD_VAR 0 2
70461: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
70470: PPUSH
70471: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70472: LD_VAR 0 1
70476: PPUSH
70477: LD_VAR 0 2
70481: PPUSH
70482: CALL_OW 488
70486: NOT
70487: PUSH
70488: LD_VAR 0 3
70492: PPUSH
70493: LD_VAR 0 4
70497: PPUSH
70498: CALL_OW 488
70502: NOT
70503: OR
70504: IFFALSE 70517
// begin result := - 1 ;
70506: LD_ADDR_VAR 0 5
70510: PUSH
70511: LD_INT 1
70513: NEG
70514: ST_TO_ADDR
// exit ;
70515: GO 70752
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70517: LD_ADDR_VAR 0 12
70521: PUSH
70522: LD_VAR 0 1
70526: PPUSH
70527: LD_VAR 0 2
70531: PPUSH
70532: LD_VAR 0 3
70536: PPUSH
70537: LD_VAR 0 4
70541: PPUSH
70542: CALL 69602 0 4
70546: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70547: LD_ADDR_VAR 0 11
70551: PUSH
70552: LD_VAR 0 1
70556: PPUSH
70557: LD_VAR 0 2
70561: PPUSH
70562: LD_VAR 0 12
70566: PUSH
70567: LD_INT 1
70569: ARRAY
70570: PPUSH
70571: LD_VAR 0 12
70575: PUSH
70576: LD_INT 2
70578: ARRAY
70579: PPUSH
70580: CALL_OW 298
70584: ST_TO_ADDR
// distance := 9999 ;
70585: LD_ADDR_VAR 0 10
70589: PUSH
70590: LD_INT 9999
70592: ST_TO_ADDR
// for i := 0 to 5 do
70593: LD_ADDR_VAR 0 6
70597: PUSH
70598: DOUBLE
70599: LD_INT 0
70601: DEC
70602: ST_TO_ADDR
70603: LD_INT 5
70605: PUSH
70606: FOR_TO
70607: IFFALSE 70750
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70609: LD_ADDR_VAR 0 7
70613: PUSH
70614: LD_VAR 0 1
70618: PPUSH
70619: LD_VAR 0 6
70623: PPUSH
70624: LD_VAR 0 11
70628: PPUSH
70629: CALL_OW 272
70633: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70634: LD_ADDR_VAR 0 8
70638: PUSH
70639: LD_VAR 0 2
70643: PPUSH
70644: LD_VAR 0 6
70648: PPUSH
70649: LD_VAR 0 11
70653: PPUSH
70654: CALL_OW 273
70658: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70659: LD_VAR 0 7
70663: PPUSH
70664: LD_VAR 0 8
70668: PPUSH
70669: CALL_OW 488
70673: NOT
70674: IFFALSE 70678
// continue ;
70676: GO 70606
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70678: LD_ADDR_VAR 0 9
70682: PUSH
70683: LD_VAR 0 12
70687: PUSH
70688: LD_INT 1
70690: ARRAY
70691: PPUSH
70692: LD_VAR 0 12
70696: PUSH
70697: LD_INT 2
70699: ARRAY
70700: PPUSH
70701: LD_VAR 0 7
70705: PPUSH
70706: LD_VAR 0 8
70710: PPUSH
70711: CALL_OW 298
70715: ST_TO_ADDR
// if tmp < distance then
70716: LD_VAR 0 9
70720: PUSH
70721: LD_VAR 0 10
70725: LESS
70726: IFFALSE 70748
// begin result := i ;
70728: LD_ADDR_VAR 0 5
70732: PUSH
70733: LD_VAR 0 6
70737: ST_TO_ADDR
// distance := tmp ;
70738: LD_ADDR_VAR 0 10
70742: PUSH
70743: LD_VAR 0 9
70747: ST_TO_ADDR
// end ; end ;
70748: GO 70606
70750: POP
70751: POP
// end ;
70752: LD_VAR 0 5
70756: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
// if not driver or not IsInUnit ( driver ) then
70761: LD_VAR 0 1
70765: NOT
70766: PUSH
70767: LD_VAR 0 1
70771: PPUSH
70772: CALL_OW 310
70776: NOT
70777: OR
70778: IFFALSE 70782
// exit ;
70780: GO 70872
// vehicle := IsInUnit ( driver ) ;
70782: LD_ADDR_VAR 0 3
70786: PUSH
70787: LD_VAR 0 1
70791: PPUSH
70792: CALL_OW 310
70796: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70797: LD_VAR 0 1
70801: PPUSH
70802: LD_STRING \
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: PUSH
70832: LD_STRING E
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: LD_VAR 0 3
70845: PUSH
70846: LD_INT 0
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PPUSH
70868: CALL_OW 446
// end ;
70872: LD_VAR 0 2
70876: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70877: LD_INT 0
70879: PPUSH
70880: PPUSH
// if not driver or not IsInUnit ( driver ) then
70881: LD_VAR 0 1
70885: NOT
70886: PUSH
70887: LD_VAR 0 1
70891: PPUSH
70892: CALL_OW 310
70896: NOT
70897: OR
70898: IFFALSE 70902
// exit ;
70900: GO 70992
// vehicle := IsInUnit ( driver ) ;
70902: LD_ADDR_VAR 0 3
70906: PUSH
70907: LD_VAR 0 1
70911: PPUSH
70912: CALL_OW 310
70916: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70917: LD_VAR 0 1
70921: PPUSH
70922: LD_STRING \
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: LD_INT 0
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: PUSH
70952: LD_STRING E
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: LD_VAR 0 3
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PPUSH
70988: CALL_OW 447
// end ;
70992: LD_VAR 0 2
70996: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70997: LD_INT 0
70999: PPUSH
71000: PPUSH
71001: PPUSH
// tmp := [ ] ;
71002: LD_ADDR_VAR 0 5
71006: PUSH
71007: EMPTY
71008: ST_TO_ADDR
// for i in units do
71009: LD_ADDR_VAR 0 4
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: FOR_IN
71020: IFFALSE 71058
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71022: LD_ADDR_VAR 0 5
71026: PUSH
71027: LD_VAR 0 5
71031: PPUSH
71032: LD_VAR 0 5
71036: PUSH
71037: LD_INT 1
71039: PLUS
71040: PPUSH
71041: LD_VAR 0 4
71045: PPUSH
71046: CALL_OW 256
71050: PPUSH
71051: CALL_OW 2
71055: ST_TO_ADDR
71056: GO 71019
71058: POP
71059: POP
// if not tmp then
71060: LD_VAR 0 5
71064: NOT
71065: IFFALSE 71069
// exit ;
71067: GO 71117
// if asc then
71069: LD_VAR 0 2
71073: IFFALSE 71097
// result := SortListByListAsc ( units , tmp ) else
71075: LD_ADDR_VAR 0 3
71079: PUSH
71080: LD_VAR 0 1
71084: PPUSH
71085: LD_VAR 0 5
71089: PPUSH
71090: CALL_OW 76
71094: ST_TO_ADDR
71095: GO 71117
// result := SortListByListDesc ( units , tmp ) ;
71097: LD_ADDR_VAR 0 3
71101: PUSH
71102: LD_VAR 0 1
71106: PPUSH
71107: LD_VAR 0 5
71111: PPUSH
71112: CALL_OW 77
71116: ST_TO_ADDR
// end ;
71117: LD_VAR 0 3
71121: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71122: LD_INT 0
71124: PPUSH
71125: PPUSH
// task := GetTaskList ( mech ) ;
71126: LD_ADDR_VAR 0 4
71130: PUSH
71131: LD_VAR 0 1
71135: PPUSH
71136: CALL_OW 437
71140: ST_TO_ADDR
// if not task then
71141: LD_VAR 0 4
71145: NOT
71146: IFFALSE 71150
// exit ;
71148: GO 71192
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71150: LD_ADDR_VAR 0 3
71154: PUSH
71155: LD_VAR 0 4
71159: PUSH
71160: LD_INT 1
71162: ARRAY
71163: PUSH
71164: LD_INT 1
71166: ARRAY
71167: PUSH
71168: LD_STRING r
71170: EQUAL
71171: PUSH
71172: LD_VAR 0 4
71176: PUSH
71177: LD_INT 1
71179: ARRAY
71180: PUSH
71181: LD_INT 4
71183: ARRAY
71184: PUSH
71185: LD_VAR 0 2
71189: EQUAL
71190: AND
71191: ST_TO_ADDR
// end ;
71192: LD_VAR 0 3
71196: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71197: LD_INT 0
71199: PPUSH
// SetDir ( unit , d ) ;
71200: LD_VAR 0 1
71204: PPUSH
71205: LD_VAR 0 4
71209: PPUSH
71210: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71214: LD_VAR 0 1
71218: PPUSH
71219: LD_VAR 0 2
71223: PPUSH
71224: LD_VAR 0 3
71228: PPUSH
71229: LD_VAR 0 5
71233: PPUSH
71234: CALL_OW 48
// end ;
71238: LD_VAR 0 6
71242: RET
// export function ToNaturalNumber ( number ) ; begin
71243: LD_INT 0
71245: PPUSH
// result := number div 1 ;
71246: LD_ADDR_VAR 0 2
71250: PUSH
71251: LD_VAR 0 1
71255: PUSH
71256: LD_INT 1
71258: DIV
71259: ST_TO_ADDR
// if number < 0 then
71260: LD_VAR 0 1
71264: PUSH
71265: LD_INT 0
71267: LESS
71268: IFFALSE 71278
// result := 0 ;
71270: LD_ADDR_VAR 0 2
71274: PUSH
71275: LD_INT 0
71277: ST_TO_ADDR
// end ;
71278: LD_VAR 0 2
71282: RET
// export function SortByClass ( units , class ) ; var un ; begin
71283: LD_INT 0
71285: PPUSH
71286: PPUSH
// if not units or not class then
71287: LD_VAR 0 1
71291: NOT
71292: PUSH
71293: LD_VAR 0 2
71297: NOT
71298: OR
71299: IFFALSE 71303
// exit ;
71301: GO 71398
// result := [ ] ;
71303: LD_ADDR_VAR 0 3
71307: PUSH
71308: EMPTY
71309: ST_TO_ADDR
// for un in units do
71310: LD_ADDR_VAR 0 4
71314: PUSH
71315: LD_VAR 0 1
71319: PUSH
71320: FOR_IN
71321: IFFALSE 71396
// if GetClass ( un ) = class then
71323: LD_VAR 0 4
71327: PPUSH
71328: CALL_OW 257
71332: PUSH
71333: LD_VAR 0 2
71337: EQUAL
71338: IFFALSE 71365
// result := Insert ( result , 1 , un ) else
71340: LD_ADDR_VAR 0 3
71344: PUSH
71345: LD_VAR 0 3
71349: PPUSH
71350: LD_INT 1
71352: PPUSH
71353: LD_VAR 0 4
71357: PPUSH
71358: CALL_OW 2
71362: ST_TO_ADDR
71363: GO 71394
// result := Replace ( result , result + 1 , un ) ;
71365: LD_ADDR_VAR 0 3
71369: PUSH
71370: LD_VAR 0 3
71374: PPUSH
71375: LD_VAR 0 3
71379: PUSH
71380: LD_INT 1
71382: PLUS
71383: PPUSH
71384: LD_VAR 0 4
71388: PPUSH
71389: CALL_OW 1
71393: ST_TO_ADDR
71394: GO 71320
71396: POP
71397: POP
// end ;
71398: LD_VAR 0 3
71402: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71403: LD_INT 0
71405: PPUSH
71406: PPUSH
71407: PPUSH
71408: PPUSH
71409: PPUSH
71410: PPUSH
71411: PPUSH
// result := [ ] ;
71412: LD_ADDR_VAR 0 4
71416: PUSH
71417: EMPTY
71418: ST_TO_ADDR
// if x - r < 0 then
71419: LD_VAR 0 1
71423: PUSH
71424: LD_VAR 0 3
71428: MINUS
71429: PUSH
71430: LD_INT 0
71432: LESS
71433: IFFALSE 71445
// min_x := 0 else
71435: LD_ADDR_VAR 0 8
71439: PUSH
71440: LD_INT 0
71442: ST_TO_ADDR
71443: GO 71461
// min_x := x - r ;
71445: LD_ADDR_VAR 0 8
71449: PUSH
71450: LD_VAR 0 1
71454: PUSH
71455: LD_VAR 0 3
71459: MINUS
71460: ST_TO_ADDR
// if y - r < 0 then
71461: LD_VAR 0 2
71465: PUSH
71466: LD_VAR 0 3
71470: MINUS
71471: PUSH
71472: LD_INT 0
71474: LESS
71475: IFFALSE 71487
// min_y := 0 else
71477: LD_ADDR_VAR 0 7
71481: PUSH
71482: LD_INT 0
71484: ST_TO_ADDR
71485: GO 71503
// min_y := y - r ;
71487: LD_ADDR_VAR 0 7
71491: PUSH
71492: LD_VAR 0 2
71496: PUSH
71497: LD_VAR 0 3
71501: MINUS
71502: ST_TO_ADDR
// max_x := x + r ;
71503: LD_ADDR_VAR 0 9
71507: PUSH
71508: LD_VAR 0 1
71512: PUSH
71513: LD_VAR 0 3
71517: PLUS
71518: ST_TO_ADDR
// max_y := y + r ;
71519: LD_ADDR_VAR 0 10
71523: PUSH
71524: LD_VAR 0 2
71528: PUSH
71529: LD_VAR 0 3
71533: PLUS
71534: ST_TO_ADDR
// for _x = min_x to max_x do
71535: LD_ADDR_VAR 0 5
71539: PUSH
71540: DOUBLE
71541: LD_VAR 0 8
71545: DEC
71546: ST_TO_ADDR
71547: LD_VAR 0 9
71551: PUSH
71552: FOR_TO
71553: IFFALSE 71654
// for _y = min_y to max_y do
71555: LD_ADDR_VAR 0 6
71559: PUSH
71560: DOUBLE
71561: LD_VAR 0 7
71565: DEC
71566: ST_TO_ADDR
71567: LD_VAR 0 10
71571: PUSH
71572: FOR_TO
71573: IFFALSE 71650
// begin if not ValidHex ( _x , _y ) then
71575: LD_VAR 0 5
71579: PPUSH
71580: LD_VAR 0 6
71584: PPUSH
71585: CALL_OW 488
71589: NOT
71590: IFFALSE 71594
// continue ;
71592: GO 71572
// if GetResourceTypeXY ( _x , _y ) then
71594: LD_VAR 0 5
71598: PPUSH
71599: LD_VAR 0 6
71603: PPUSH
71604: CALL_OW 283
71608: IFFALSE 71648
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71610: LD_ADDR_VAR 0 4
71614: PUSH
71615: LD_VAR 0 4
71619: PPUSH
71620: LD_VAR 0 4
71624: PUSH
71625: LD_INT 1
71627: PLUS
71628: PPUSH
71629: LD_VAR 0 5
71633: PUSH
71634: LD_VAR 0 6
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PPUSH
71643: CALL_OW 1
71647: ST_TO_ADDR
// end ;
71648: GO 71572
71650: POP
71651: POP
71652: GO 71552
71654: POP
71655: POP
// end ;
71656: LD_VAR 0 4
71660: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71661: LD_INT 0
71663: PPUSH
71664: PPUSH
71665: PPUSH
71666: PPUSH
71667: PPUSH
71668: PPUSH
71669: PPUSH
71670: PPUSH
// if not units then
71671: LD_VAR 0 1
71675: NOT
71676: IFFALSE 71680
// exit ;
71678: GO 72208
// result := UnitFilter ( units , [ f_ok ] ) ;
71680: LD_ADDR_VAR 0 3
71684: PUSH
71685: LD_VAR 0 1
71689: PPUSH
71690: LD_INT 50
71692: PUSH
71693: EMPTY
71694: LIST
71695: PPUSH
71696: CALL_OW 72
71700: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71701: LD_ADDR_VAR 0 8
71705: PUSH
71706: LD_VAR 0 1
71710: PUSH
71711: LD_INT 1
71713: ARRAY
71714: PPUSH
71715: CALL_OW 255
71719: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71720: LD_ADDR_VAR 0 10
71724: PUSH
71725: LD_INT 29
71727: PUSH
71728: LD_INT 91
71730: PUSH
71731: LD_INT 49
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: LIST
71738: ST_TO_ADDR
// if not result then
71739: LD_VAR 0 3
71743: NOT
71744: IFFALSE 71748
// exit ;
71746: GO 72208
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71748: LD_ADDR_VAR 0 5
71752: PUSH
71753: LD_INT 81
71755: PUSH
71756: LD_VAR 0 8
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PPUSH
71765: CALL_OW 69
71769: ST_TO_ADDR
// for i in result do
71770: LD_ADDR_VAR 0 4
71774: PUSH
71775: LD_VAR 0 3
71779: PUSH
71780: FOR_IN
71781: IFFALSE 72206
// begin tag := GetTag ( i ) + 1 ;
71783: LD_ADDR_VAR 0 9
71787: PUSH
71788: LD_VAR 0 4
71792: PPUSH
71793: CALL_OW 110
71797: PUSH
71798: LD_INT 1
71800: PLUS
71801: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71802: LD_ADDR_VAR 0 7
71806: PUSH
71807: LD_VAR 0 4
71811: PPUSH
71812: CALL_OW 250
71816: PPUSH
71817: LD_VAR 0 4
71821: PPUSH
71822: CALL_OW 251
71826: PPUSH
71827: LD_INT 4
71829: PPUSH
71830: CALL 71403 0 3
71834: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71835: LD_VAR 0 4
71839: PPUSH
71840: CALL_OW 247
71844: PUSH
71845: LD_INT 2
71847: EQUAL
71848: PUSH
71849: LD_VAR 0 7
71853: PUSH
71854: LD_INT 2
71856: GREATER
71857: AND
71858: PUSH
71859: LD_VAR 0 4
71863: PPUSH
71864: CALL_OW 264
71868: PUSH
71869: LD_VAR 0 10
71873: IN
71874: NOT
71875: AND
71876: IFFALSE 71915
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71878: LD_VAR 0 4
71882: PPUSH
71883: LD_VAR 0 7
71887: PUSH
71888: LD_INT 1
71890: ARRAY
71891: PUSH
71892: LD_INT 1
71894: ARRAY
71895: PPUSH
71896: LD_VAR 0 7
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PUSH
71905: LD_INT 2
71907: ARRAY
71908: PPUSH
71909: CALL_OW 116
71913: GO 72204
// if path > tag then
71915: LD_VAR 0 2
71919: PUSH
71920: LD_VAR 0 9
71924: GREATER
71925: IFFALSE 72133
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71927: LD_ADDR_VAR 0 6
71931: PUSH
71932: LD_VAR 0 5
71936: PPUSH
71937: LD_INT 91
71939: PUSH
71940: LD_VAR 0 4
71944: PUSH
71945: LD_INT 8
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: LIST
71952: PPUSH
71953: CALL_OW 72
71957: ST_TO_ADDR
// if nearEnemy then
71958: LD_VAR 0 6
71962: IFFALSE 72031
// begin if GetWeapon ( i ) = ru_time_lapser then
71964: LD_VAR 0 4
71968: PPUSH
71969: CALL_OW 264
71973: PUSH
71974: LD_INT 49
71976: EQUAL
71977: IFFALSE 72005
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71979: LD_VAR 0 4
71983: PPUSH
71984: LD_VAR 0 6
71988: PPUSH
71989: LD_VAR 0 4
71993: PPUSH
71994: CALL_OW 74
71998: PPUSH
71999: CALL_OW 112
72003: GO 72029
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72005: LD_VAR 0 4
72009: PPUSH
72010: LD_VAR 0 6
72014: PPUSH
72015: LD_VAR 0 4
72019: PPUSH
72020: CALL_OW 74
72024: PPUSH
72025: CALL 73279 0 2
// end else
72029: GO 72131
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72031: LD_VAR 0 4
72035: PPUSH
72036: LD_VAR 0 2
72040: PUSH
72041: LD_VAR 0 9
72045: ARRAY
72046: PUSH
72047: LD_INT 1
72049: ARRAY
72050: PPUSH
72051: LD_VAR 0 2
72055: PUSH
72056: LD_VAR 0 9
72060: ARRAY
72061: PUSH
72062: LD_INT 2
72064: ARRAY
72065: PPUSH
72066: CALL_OW 297
72070: PUSH
72071: LD_INT 6
72073: GREATER
72074: IFFALSE 72117
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72076: LD_VAR 0 4
72080: PPUSH
72081: LD_VAR 0 2
72085: PUSH
72086: LD_VAR 0 9
72090: ARRAY
72091: PUSH
72092: LD_INT 1
72094: ARRAY
72095: PPUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_VAR 0 9
72105: ARRAY
72106: PUSH
72107: LD_INT 2
72109: ARRAY
72110: PPUSH
72111: CALL_OW 114
72115: GO 72131
// SetTag ( i , tag ) ;
72117: LD_VAR 0 4
72121: PPUSH
72122: LD_VAR 0 9
72126: PPUSH
72127: CALL_OW 109
// end else
72131: GO 72204
// if enemy then
72133: LD_VAR 0 5
72137: IFFALSE 72204
// begin if GetWeapon ( i ) = ru_time_lapser then
72139: LD_VAR 0 4
72143: PPUSH
72144: CALL_OW 264
72148: PUSH
72149: LD_INT 49
72151: EQUAL
72152: IFFALSE 72180
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72154: LD_VAR 0 4
72158: PPUSH
72159: LD_VAR 0 5
72163: PPUSH
72164: LD_VAR 0 4
72168: PPUSH
72169: CALL_OW 74
72173: PPUSH
72174: CALL_OW 112
72178: GO 72204
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72180: LD_VAR 0 4
72184: PPUSH
72185: LD_VAR 0 5
72189: PPUSH
72190: LD_VAR 0 4
72194: PPUSH
72195: CALL_OW 74
72199: PPUSH
72200: CALL 73279 0 2
// end ; end ;
72204: GO 71780
72206: POP
72207: POP
// end ;
72208: LD_VAR 0 3
72212: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72213: LD_INT 0
72215: PPUSH
72216: PPUSH
72217: PPUSH
// if not unit or IsInUnit ( unit ) then
72218: LD_VAR 0 1
72222: NOT
72223: PUSH
72224: LD_VAR 0 1
72228: PPUSH
72229: CALL_OW 310
72233: OR
72234: IFFALSE 72238
// exit ;
72236: GO 72329
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72238: LD_ADDR_VAR 0 4
72242: PUSH
72243: LD_VAR 0 1
72247: PPUSH
72248: CALL_OW 250
72252: PPUSH
72253: LD_VAR 0 2
72257: PPUSH
72258: LD_INT 1
72260: PPUSH
72261: CALL_OW 272
72265: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72266: LD_ADDR_VAR 0 5
72270: PUSH
72271: LD_VAR 0 1
72275: PPUSH
72276: CALL_OW 251
72280: PPUSH
72281: LD_VAR 0 2
72285: PPUSH
72286: LD_INT 1
72288: PPUSH
72289: CALL_OW 273
72293: ST_TO_ADDR
// if ValidHex ( x , y ) then
72294: LD_VAR 0 4
72298: PPUSH
72299: LD_VAR 0 5
72303: PPUSH
72304: CALL_OW 488
72308: IFFALSE 72329
// ComTurnXY ( unit , x , y ) ;
72310: LD_VAR 0 1
72314: PPUSH
72315: LD_VAR 0 4
72319: PPUSH
72320: LD_VAR 0 5
72324: PPUSH
72325: CALL_OW 118
// end ;
72329: LD_VAR 0 3
72333: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72334: LD_INT 0
72336: PPUSH
72337: PPUSH
// result := false ;
72338: LD_ADDR_VAR 0 3
72342: PUSH
72343: LD_INT 0
72345: ST_TO_ADDR
// if not units then
72346: LD_VAR 0 2
72350: NOT
72351: IFFALSE 72355
// exit ;
72353: GO 72400
// for i in units do
72355: LD_ADDR_VAR 0 4
72359: PUSH
72360: LD_VAR 0 2
72364: PUSH
72365: FOR_IN
72366: IFFALSE 72398
// if See ( side , i ) then
72368: LD_VAR 0 1
72372: PPUSH
72373: LD_VAR 0 4
72377: PPUSH
72378: CALL_OW 292
72382: IFFALSE 72396
// begin result := true ;
72384: LD_ADDR_VAR 0 3
72388: PUSH
72389: LD_INT 1
72391: ST_TO_ADDR
// exit ;
72392: POP
72393: POP
72394: GO 72400
// end ;
72396: GO 72365
72398: POP
72399: POP
// end ;
72400: LD_VAR 0 3
72404: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72405: LD_INT 0
72407: PPUSH
72408: PPUSH
72409: PPUSH
72410: PPUSH
// if not unit or not points then
72411: LD_VAR 0 1
72415: NOT
72416: PUSH
72417: LD_VAR 0 2
72421: NOT
72422: OR
72423: IFFALSE 72427
// exit ;
72425: GO 72517
// dist := 99999 ;
72427: LD_ADDR_VAR 0 5
72431: PUSH
72432: LD_INT 99999
72434: ST_TO_ADDR
// for i in points do
72435: LD_ADDR_VAR 0 4
72439: PUSH
72440: LD_VAR 0 2
72444: PUSH
72445: FOR_IN
72446: IFFALSE 72515
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72448: LD_ADDR_VAR 0 6
72452: PUSH
72453: LD_VAR 0 1
72457: PPUSH
72458: LD_VAR 0 4
72462: PUSH
72463: LD_INT 1
72465: ARRAY
72466: PPUSH
72467: LD_VAR 0 4
72471: PUSH
72472: LD_INT 2
72474: ARRAY
72475: PPUSH
72476: CALL_OW 297
72480: ST_TO_ADDR
// if tmpDist < dist then
72481: LD_VAR 0 6
72485: PUSH
72486: LD_VAR 0 5
72490: LESS
72491: IFFALSE 72513
// begin result := i ;
72493: LD_ADDR_VAR 0 3
72497: PUSH
72498: LD_VAR 0 4
72502: ST_TO_ADDR
// dist := tmpDist ;
72503: LD_ADDR_VAR 0 5
72507: PUSH
72508: LD_VAR 0 6
72512: ST_TO_ADDR
// end ; end ;
72513: GO 72445
72515: POP
72516: POP
// end ;
72517: LD_VAR 0 3
72521: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72522: LD_INT 0
72524: PPUSH
// uc_side := side ;
72525: LD_ADDR_OWVAR 20
72529: PUSH
72530: LD_VAR 0 1
72534: ST_TO_ADDR
// uc_nation := 3 ;
72535: LD_ADDR_OWVAR 21
72539: PUSH
72540: LD_INT 3
72542: ST_TO_ADDR
// vc_chassis := 25 ;
72543: LD_ADDR_OWVAR 37
72547: PUSH
72548: LD_INT 25
72550: ST_TO_ADDR
// vc_engine := engine_siberite ;
72551: LD_ADDR_OWVAR 39
72555: PUSH
72556: LD_INT 3
72558: ST_TO_ADDR
// vc_control := control_computer ;
72559: LD_ADDR_OWVAR 38
72563: PUSH
72564: LD_INT 3
72566: ST_TO_ADDR
// vc_weapon := 59 ;
72567: LD_ADDR_OWVAR 40
72571: PUSH
72572: LD_INT 59
72574: ST_TO_ADDR
// result := CreateVehicle ;
72575: LD_ADDR_VAR 0 5
72579: PUSH
72580: CALL_OW 45
72584: ST_TO_ADDR
// SetDir ( result , d ) ;
72585: LD_VAR 0 5
72589: PPUSH
72590: LD_VAR 0 4
72594: PPUSH
72595: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72599: LD_VAR 0 5
72603: PPUSH
72604: LD_VAR 0 2
72608: PPUSH
72609: LD_VAR 0 3
72613: PPUSH
72614: LD_INT 0
72616: PPUSH
72617: CALL_OW 48
// end ;
72621: LD_VAR 0 5
72625: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72626: LD_INT 0
72628: PPUSH
72629: PPUSH
72630: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72631: LD_ADDR_VAR 0 2
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: LD_INT 0
72644: PUSH
72645: LD_INT 0
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72654: LD_VAR 0 1
72658: NOT
72659: PUSH
72660: LD_VAR 0 1
72664: PPUSH
72665: CALL_OW 264
72669: PUSH
72670: LD_INT 12
72672: PUSH
72673: LD_INT 51
72675: PUSH
72676: LD_INT 32
72678: PUSH
72679: LD_INT 89
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: IN
72688: NOT
72689: OR
72690: IFFALSE 72694
// exit ;
72692: GO 72792
// for i := 1 to 3 do
72694: LD_ADDR_VAR 0 3
72698: PUSH
72699: DOUBLE
72700: LD_INT 1
72702: DEC
72703: ST_TO_ADDR
72704: LD_INT 3
72706: PUSH
72707: FOR_TO
72708: IFFALSE 72790
// begin tmp := GetCargo ( cargo , i ) ;
72710: LD_ADDR_VAR 0 4
72714: PUSH
72715: LD_VAR 0 1
72719: PPUSH
72720: LD_VAR 0 3
72724: PPUSH
72725: CALL_OW 289
72729: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72730: LD_ADDR_VAR 0 2
72734: PUSH
72735: LD_VAR 0 2
72739: PPUSH
72740: LD_VAR 0 3
72744: PPUSH
72745: LD_VAR 0 4
72749: PPUSH
72750: CALL_OW 1
72754: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72755: LD_ADDR_VAR 0 2
72759: PUSH
72760: LD_VAR 0 2
72764: PPUSH
72765: LD_INT 4
72767: PPUSH
72768: LD_VAR 0 2
72772: PUSH
72773: LD_INT 4
72775: ARRAY
72776: PUSH
72777: LD_VAR 0 4
72781: PLUS
72782: PPUSH
72783: CALL_OW 1
72787: ST_TO_ADDR
// end ;
72788: GO 72707
72790: POP
72791: POP
// end ;
72792: LD_VAR 0 2
72796: RET
// export function Length ( array ) ; begin
72797: LD_INT 0
72799: PPUSH
// result := array + 0 ;
72800: LD_ADDR_VAR 0 2
72804: PUSH
72805: LD_VAR 0 1
72809: PUSH
72810: LD_INT 0
72812: PLUS
72813: ST_TO_ADDR
// end ;
72814: LD_VAR 0 2
72818: RET
// export function PrepareArray ( array ) ; begin
72819: LD_INT 0
72821: PPUSH
// result := array diff 0 ;
72822: LD_ADDR_VAR 0 2
72826: PUSH
72827: LD_VAR 0 1
72831: PUSH
72832: LD_INT 0
72834: DIFF
72835: ST_TO_ADDR
// if not result [ 1 ] then
72836: LD_VAR 0 2
72840: PUSH
72841: LD_INT 1
72843: ARRAY
72844: NOT
72845: IFFALSE 72865
// result := Delete ( result , 1 ) ;
72847: LD_ADDR_VAR 0 2
72851: PUSH
72852: LD_VAR 0 2
72856: PPUSH
72857: LD_INT 1
72859: PPUSH
72860: CALL_OW 3
72864: ST_TO_ADDR
// end ;
72865: LD_VAR 0 2
72869: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72870: LD_INT 0
72872: PPUSH
72873: PPUSH
72874: PPUSH
72875: PPUSH
// sibRocketRange := 25 ;
72876: LD_ADDR_VAR 0 6
72880: PUSH
72881: LD_INT 25
72883: ST_TO_ADDR
// result := false ;
72884: LD_ADDR_VAR 0 4
72888: PUSH
72889: LD_INT 0
72891: ST_TO_ADDR
// for i := 0 to 5 do
72892: LD_ADDR_VAR 0 5
72896: PUSH
72897: DOUBLE
72898: LD_INT 0
72900: DEC
72901: ST_TO_ADDR
72902: LD_INT 5
72904: PUSH
72905: FOR_TO
72906: IFFALSE 72973
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72908: LD_VAR 0 1
72912: PPUSH
72913: LD_VAR 0 5
72917: PPUSH
72918: LD_VAR 0 6
72922: PPUSH
72923: CALL_OW 272
72927: PPUSH
72928: LD_VAR 0 2
72932: PPUSH
72933: LD_VAR 0 5
72937: PPUSH
72938: LD_VAR 0 6
72942: PPUSH
72943: CALL_OW 273
72947: PPUSH
72948: LD_VAR 0 3
72952: PPUSH
72953: CALL_OW 309
72957: IFFALSE 72971
// begin result := true ;
72959: LD_ADDR_VAR 0 4
72963: PUSH
72964: LD_INT 1
72966: ST_TO_ADDR
// exit ;
72967: POP
72968: POP
72969: GO 72975
// end ;
72971: GO 72905
72973: POP
72974: POP
// end ;
72975: LD_VAR 0 4
72979: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72980: LD_INT 0
72982: PPUSH
72983: PPUSH
72984: PPUSH
// if btype = b_depot then
72985: LD_VAR 0 2
72989: PUSH
72990: LD_INT 0
72992: EQUAL
72993: IFFALSE 73005
// begin result := true ;
72995: LD_ADDR_VAR 0 3
72999: PUSH
73000: LD_INT 1
73002: ST_TO_ADDR
// exit ;
73003: GO 73121
// end ; pom := GetBase ( depot ) ;
73005: LD_ADDR_VAR 0 4
73009: PUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: CALL_OW 274
73019: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73020: LD_ADDR_VAR 0 5
73024: PUSH
73025: LD_VAR 0 2
73029: PPUSH
73030: LD_VAR 0 1
73034: PPUSH
73035: CALL_OW 248
73039: PPUSH
73040: CALL_OW 450
73044: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73045: LD_ADDR_VAR 0 3
73049: PUSH
73050: LD_VAR 0 4
73054: PPUSH
73055: LD_INT 1
73057: PPUSH
73058: CALL_OW 275
73062: PUSH
73063: LD_VAR 0 5
73067: PUSH
73068: LD_INT 1
73070: ARRAY
73071: GREATEREQUAL
73072: PUSH
73073: LD_VAR 0 4
73077: PPUSH
73078: LD_INT 2
73080: PPUSH
73081: CALL_OW 275
73085: PUSH
73086: LD_VAR 0 5
73090: PUSH
73091: LD_INT 2
73093: ARRAY
73094: GREATEREQUAL
73095: AND
73096: PUSH
73097: LD_VAR 0 4
73101: PPUSH
73102: LD_INT 3
73104: PPUSH
73105: CALL_OW 275
73109: PUSH
73110: LD_VAR 0 5
73114: PUSH
73115: LD_INT 3
73117: ARRAY
73118: GREATEREQUAL
73119: AND
73120: ST_TO_ADDR
// end ;
73121: LD_VAR 0 3
73125: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73126: LD_INT 0
73128: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_VAR 0 2
73138: PPUSH
73139: LD_INT 0
73141: PPUSH
73142: LD_INT 0
73144: PPUSH
73145: LD_INT 1
73147: PPUSH
73148: LD_INT 0
73150: PPUSH
73151: CALL_OW 587
// end ;
73155: LD_VAR 0 3
73159: RET
// export function CenterOnNow ( unit ) ; begin
73160: LD_INT 0
73162: PPUSH
// result := IsInUnit ( unit ) ;
73163: LD_ADDR_VAR 0 2
73167: PUSH
73168: LD_VAR 0 1
73172: PPUSH
73173: CALL_OW 310
73177: ST_TO_ADDR
// if not result then
73178: LD_VAR 0 2
73182: NOT
73183: IFFALSE 73195
// result := unit ;
73185: LD_ADDR_VAR 0 2
73189: PUSH
73190: LD_VAR 0 1
73194: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73195: LD_VAR 0 1
73199: PPUSH
73200: CALL_OW 87
// end ;
73204: LD_VAR 0 2
73208: RET
// export function ComMoveHex ( unit , hex ) ; begin
73209: LD_INT 0
73211: PPUSH
// if not hex then
73212: LD_VAR 0 2
73216: NOT
73217: IFFALSE 73221
// exit ;
73219: GO 73274
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73221: LD_VAR 0 2
73225: PUSH
73226: LD_INT 1
73228: ARRAY
73229: PPUSH
73230: LD_VAR 0 2
73234: PUSH
73235: LD_INT 2
73237: ARRAY
73238: PPUSH
73239: CALL_OW 428
73243: IFFALSE 73247
// exit ;
73245: GO 73274
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73247: LD_VAR 0 1
73251: PPUSH
73252: LD_VAR 0 2
73256: PUSH
73257: LD_INT 1
73259: ARRAY
73260: PPUSH
73261: LD_VAR 0 2
73265: PUSH
73266: LD_INT 2
73268: ARRAY
73269: PPUSH
73270: CALL_OW 111
// end ;
73274: LD_VAR 0 3
73278: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73279: LD_INT 0
73281: PPUSH
73282: PPUSH
73283: PPUSH
// if not unit or not enemy then
73284: LD_VAR 0 1
73288: NOT
73289: PUSH
73290: LD_VAR 0 2
73294: NOT
73295: OR
73296: IFFALSE 73300
// exit ;
73298: GO 73424
// x := GetX ( enemy ) ;
73300: LD_ADDR_VAR 0 4
73304: PUSH
73305: LD_VAR 0 2
73309: PPUSH
73310: CALL_OW 250
73314: ST_TO_ADDR
// y := GetY ( enemy ) ;
73315: LD_ADDR_VAR 0 5
73319: PUSH
73320: LD_VAR 0 2
73324: PPUSH
73325: CALL_OW 251
73329: ST_TO_ADDR
// if ValidHex ( x , y ) then
73330: LD_VAR 0 4
73334: PPUSH
73335: LD_VAR 0 5
73339: PPUSH
73340: CALL_OW 488
73344: IFFALSE 73424
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73346: LD_VAR 0 2
73350: PPUSH
73351: CALL_OW 247
73355: PUSH
73356: LD_INT 3
73358: PUSH
73359: LD_INT 2
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: IN
73366: PUSH
73367: LD_VAR 0 1
73371: PPUSH
73372: CALL_OW 255
73376: PPUSH
73377: LD_VAR 0 2
73381: PPUSH
73382: CALL_OW 292
73386: OR
73387: IFFALSE 73405
// ComAttackUnit ( unit , enemy ) else
73389: LD_VAR 0 1
73393: PPUSH
73394: LD_VAR 0 2
73398: PPUSH
73399: CALL_OW 115
73403: GO 73424
// ComAgressiveMove ( unit , x , y ) ;
73405: LD_VAR 0 1
73409: PPUSH
73410: LD_VAR 0 4
73414: PPUSH
73415: LD_VAR 0 5
73419: PPUSH
73420: CALL_OW 114
// end ;
73424: LD_VAR 0 3
73428: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73429: LD_INT 0
73431: PPUSH
73432: PPUSH
73433: PPUSH
// list := AreaToList ( area , 0 ) ;
73434: LD_ADDR_VAR 0 5
73438: PUSH
73439: LD_VAR 0 1
73443: PPUSH
73444: LD_INT 0
73446: PPUSH
73447: CALL_OW 517
73451: ST_TO_ADDR
// if not list then
73452: LD_VAR 0 5
73456: NOT
73457: IFFALSE 73461
// exit ;
73459: GO 73591
// if all then
73461: LD_VAR 0 2
73465: IFFALSE 73553
// begin for i := 1 to list [ 1 ] do
73467: LD_ADDR_VAR 0 4
73471: PUSH
73472: DOUBLE
73473: LD_INT 1
73475: DEC
73476: ST_TO_ADDR
73477: LD_VAR 0 5
73481: PUSH
73482: LD_INT 1
73484: ARRAY
73485: PUSH
73486: FOR_TO
73487: IFFALSE 73549
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: LD_VAR 0 3
73498: PPUSH
73499: LD_VAR 0 3
73503: PUSH
73504: LD_INT 1
73506: PLUS
73507: PPUSH
73508: LD_VAR 0 5
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PUSH
73517: LD_VAR 0 4
73521: ARRAY
73522: PUSH
73523: LD_VAR 0 5
73527: PUSH
73528: LD_INT 2
73530: ARRAY
73531: PUSH
73532: LD_VAR 0 4
73536: ARRAY
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PPUSH
73542: CALL_OW 1
73546: ST_TO_ADDR
73547: GO 73486
73549: POP
73550: POP
// exit ;
73551: GO 73591
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73553: LD_ADDR_VAR 0 3
73557: PUSH
73558: LD_VAR 0 5
73562: PUSH
73563: LD_INT 1
73565: ARRAY
73566: PUSH
73567: LD_INT 1
73569: ARRAY
73570: PUSH
73571: LD_VAR 0 5
73575: PUSH
73576: LD_INT 2
73578: ARRAY
73579: PUSH
73580: LD_INT 1
73582: ARRAY
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: EMPTY
73589: LIST
73590: ST_TO_ADDR
// end ;
73591: LD_VAR 0 3
73595: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73596: LD_INT 0
73598: PPUSH
73599: PPUSH
// list := AreaToList ( area , 0 ) ;
73600: LD_ADDR_VAR 0 4
73604: PUSH
73605: LD_VAR 0 1
73609: PPUSH
73610: LD_INT 0
73612: PPUSH
73613: CALL_OW 517
73617: ST_TO_ADDR
// if not list then
73618: LD_VAR 0 4
73622: NOT
73623: IFFALSE 73627
// exit ;
73625: GO 73668
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73627: LD_ADDR_VAR 0 3
73631: PUSH
73632: LD_VAR 0 4
73636: PUSH
73637: LD_INT 1
73639: ARRAY
73640: PUSH
73641: LD_INT 1
73643: ARRAY
73644: PUSH
73645: LD_VAR 0 4
73649: PUSH
73650: LD_INT 2
73652: ARRAY
73653: PUSH
73654: LD_INT 1
73656: ARRAY
73657: PUSH
73658: LD_VAR 0 2
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: LIST
73667: ST_TO_ADDR
// end ;
73668: LD_VAR 0 3
73672: RET
// export function First ( array ) ; begin
73673: LD_INT 0
73675: PPUSH
// if not array then
73676: LD_VAR 0 1
73680: NOT
73681: IFFALSE 73685
// exit ;
73683: GO 73699
// result := array [ 1 ] ;
73685: LD_ADDR_VAR 0 2
73689: PUSH
73690: LD_VAR 0 1
73694: PUSH
73695: LD_INT 1
73697: ARRAY
73698: ST_TO_ADDR
// end ;
73699: LD_VAR 0 2
73703: RET
// export function Last ( array ) ; begin
73704: LD_INT 0
73706: PPUSH
// if not array then
73707: LD_VAR 0 1
73711: NOT
73712: IFFALSE 73716
// exit ;
73714: GO 73732
// result := array [ array ] ;
73716: LD_ADDR_VAR 0 2
73720: PUSH
73721: LD_VAR 0 1
73725: PUSH
73726: LD_VAR 0 1
73730: ARRAY
73731: ST_TO_ADDR
// end ;
73732: LD_VAR 0 2
73736: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73737: LD_INT 0
73739: PPUSH
73740: PPUSH
// result := [ ] ;
73741: LD_ADDR_VAR 0 5
73745: PUSH
73746: EMPTY
73747: ST_TO_ADDR
// if not array then
73748: LD_VAR 0 1
73752: NOT
73753: IFFALSE 73757
// exit ;
73755: GO 73869
// for i := 1 to array do
73757: LD_ADDR_VAR 0 6
73761: PUSH
73762: DOUBLE
73763: LD_INT 1
73765: DEC
73766: ST_TO_ADDR
73767: LD_VAR 0 1
73771: PUSH
73772: FOR_TO
73773: IFFALSE 73867
// if array [ i ] [ index ] = value then
73775: LD_VAR 0 1
73779: PUSH
73780: LD_VAR 0 6
73784: ARRAY
73785: PUSH
73786: LD_VAR 0 2
73790: ARRAY
73791: PUSH
73792: LD_VAR 0 3
73796: EQUAL
73797: IFFALSE 73865
// begin if indexColumn then
73799: LD_VAR 0 4
73803: IFFALSE 73839
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73805: LD_ADDR_VAR 0 5
73809: PUSH
73810: LD_VAR 0 5
73814: PPUSH
73815: LD_VAR 0 1
73819: PUSH
73820: LD_VAR 0 6
73824: ARRAY
73825: PUSH
73826: LD_VAR 0 4
73830: ARRAY
73831: PPUSH
73832: CALL 69057 0 2
73836: ST_TO_ADDR
73837: GO 73865
// result := Join ( result , array [ i ] ) ;
73839: LD_ADDR_VAR 0 5
73843: PUSH
73844: LD_VAR 0 5
73848: PPUSH
73849: LD_VAR 0 1
73853: PUSH
73854: LD_VAR 0 6
73858: ARRAY
73859: PPUSH
73860: CALL 69057 0 2
73864: ST_TO_ADDR
// end ;
73865: GO 73772
73867: POP
73868: POP
// end ;
73869: LD_VAR 0 5
73873: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73874: LD_INT 0
73876: PPUSH
// if not vehicles or not parkingPoint then
73877: LD_VAR 0 1
73881: NOT
73882: PUSH
73883: LD_VAR 0 2
73887: NOT
73888: OR
73889: IFFALSE 73893
// exit ;
73891: GO 73991
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73893: LD_ADDR_VAR 0 1
73897: PUSH
73898: LD_VAR 0 1
73902: PPUSH
73903: LD_INT 50
73905: PUSH
73906: EMPTY
73907: LIST
73908: PUSH
73909: LD_INT 3
73911: PUSH
73912: LD_INT 92
73914: PUSH
73915: LD_VAR 0 2
73919: PUSH
73920: LD_INT 1
73922: ARRAY
73923: PUSH
73924: LD_VAR 0 2
73928: PUSH
73929: LD_INT 2
73931: ARRAY
73932: PUSH
73933: LD_INT 8
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PPUSH
73950: CALL_OW 72
73954: ST_TO_ADDR
// if not vehicles then
73955: LD_VAR 0 1
73959: NOT
73960: IFFALSE 73964
// exit ;
73962: GO 73991
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73964: LD_VAR 0 1
73968: PPUSH
73969: LD_VAR 0 2
73973: PUSH
73974: LD_INT 1
73976: ARRAY
73977: PPUSH
73978: LD_VAR 0 2
73982: PUSH
73983: LD_INT 2
73985: ARRAY
73986: PPUSH
73987: CALL_OW 111
// end ;
73991: LD_VAR 0 3
73995: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73996: LD_INT 0
73998: PPUSH
73999: PPUSH
74000: PPUSH
// if not side or not area then
74001: LD_VAR 0 1
74005: NOT
74006: PUSH
74007: LD_VAR 0 2
74011: NOT
74012: OR
74013: IFFALSE 74017
// exit ;
74015: GO 74136
// tmp := AreaToList ( area , 0 ) ;
74017: LD_ADDR_VAR 0 5
74021: PUSH
74022: LD_VAR 0 2
74026: PPUSH
74027: LD_INT 0
74029: PPUSH
74030: CALL_OW 517
74034: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74035: LD_ADDR_VAR 0 4
74039: PUSH
74040: DOUBLE
74041: LD_INT 1
74043: DEC
74044: ST_TO_ADDR
74045: LD_VAR 0 5
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: PUSH
74054: FOR_TO
74055: IFFALSE 74134
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74057: LD_VAR 0 5
74061: PUSH
74062: LD_INT 1
74064: ARRAY
74065: PUSH
74066: LD_VAR 0 4
74070: ARRAY
74071: PPUSH
74072: LD_VAR 0 5
74076: PUSH
74077: LD_INT 2
74079: ARRAY
74080: PUSH
74081: LD_VAR 0 4
74085: ARRAY
74086: PPUSH
74087: CALL_OW 351
74091: IFFALSE 74132
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74093: LD_VAR 0 5
74097: PUSH
74098: LD_INT 1
74100: ARRAY
74101: PUSH
74102: LD_VAR 0 4
74106: ARRAY
74107: PPUSH
74108: LD_VAR 0 5
74112: PUSH
74113: LD_INT 2
74115: ARRAY
74116: PUSH
74117: LD_VAR 0 4
74121: ARRAY
74122: PPUSH
74123: LD_VAR 0 1
74127: PPUSH
74128: CALL_OW 244
// end ;
74132: GO 74054
74134: POP
74135: POP
// end ; end_of_file
74136: LD_VAR 0 3
74140: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74141: LD_VAR 0 1
74145: PUSH
74146: LD_INT 200
74148: DOUBLE
74149: GREATEREQUAL
74150: IFFALSE 74158
74152: LD_INT 299
74154: DOUBLE
74155: LESSEQUAL
74156: IFTRUE 74160
74158: GO 74192
74160: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74161: LD_VAR 0 1
74165: PPUSH
74166: LD_VAR 0 2
74170: PPUSH
74171: LD_VAR 0 3
74175: PPUSH
74176: LD_VAR 0 4
74180: PPUSH
74181: LD_VAR 0 5
74185: PPUSH
74186: CALL 26626 0 5
74190: GO 74269
74192: LD_INT 300
74194: DOUBLE
74195: GREATEREQUAL
74196: IFFALSE 74204
74198: LD_INT 399
74200: DOUBLE
74201: LESSEQUAL
74202: IFTRUE 74206
74204: GO 74268
74206: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74207: LD_VAR 0 1
74211: PPUSH
74212: LD_VAR 0 2
74216: PPUSH
74217: LD_VAR 0 3
74221: PPUSH
74222: LD_VAR 0 4
74226: PPUSH
74227: LD_VAR 0 5
74231: PPUSH
74232: LD_VAR 0 6
74236: PPUSH
74237: LD_VAR 0 7
74241: PPUSH
74242: LD_VAR 0 8
74246: PPUSH
74247: LD_VAR 0 9
74251: PPUSH
74252: LD_VAR 0 10
74256: PPUSH
74257: LD_VAR 0 11
74261: PPUSH
74262: CALL 22614 0 11
74266: GO 74269
74268: POP
// end ;
74269: PPOPN 11
74271: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74272: LD_VAR 0 1
74276: PPUSH
74277: LD_VAR 0 2
74281: PPUSH
74282: LD_VAR 0 3
74286: PPUSH
74287: LD_VAR 0 4
74291: PPUSH
74292: LD_VAR 0 5
74296: PPUSH
74297: CALL 26091 0 5
// end ; end_of_file
74301: PPOPN 5
74303: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_VAR 0 2
74313: PPUSH
74314: LD_VAR 0 3
74318: PPUSH
74319: LD_VAR 0 4
74323: PPUSH
74324: LD_VAR 0 5
74328: PPUSH
74329: LD_VAR 0 6
74333: PPUSH
74334: CALL 10266 0 6
// end ;
74338: PPOPN 6
74340: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74341: LD_INT 0
74343: PPUSH
// begin if not units then
74344: LD_VAR 0 1
74348: NOT
74349: IFFALSE 74353
// exit ;
74351: GO 74353
// end ;
74353: PPOPN 7
74355: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74356: CALL 10153 0 0
// end ;
74360: PPOPN 1
74362: END
