// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8203
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8203
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// end ;
8203: PPOPN 2
8205: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8206: LD_INT 22
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 91
8218: PUSH
8219: LD_INT 8
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 69
8238: IFFALSE 8396
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8247: LD_INT 315
8249: PUSH
8250: LD_INT 280
8252: PUSH
8253: LD_INT 245
8255: PUSH
8256: LD_INT 210
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: LD_OWVAR 67
8269: ARRAY
8270: PPUSH
8271: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 54
8302: PUSH
8303: EMPTY
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: ST_TO_ADDR
// if not tmp then
8316: LD_VAR 0 2
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8396
// for i in tmp do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_VAR 0 2
8334: PUSH
8335: FOR_IN
8336: IFFALSE 8364
// begin ComExitBuilding ( i ) ;
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 174
// end ;
8362: GO 8335
8364: POP
8365: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8366: LD_EXP 23
8370: PPUSH
8371: LD_INT 142
8373: PPUSH
8374: LD_INT 71
8376: PPUSH
8377: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_INT 142
8388: PPUSH
8389: LD_INT 71
8391: PPUSH
8392: CALL_OW 114
// end ;
8396: PPOPN 2
8398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8399: LD_INT 22
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 58
8421: PUSH
8422: EMPTY
8423: LIST
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 1000
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 91
8444: PUSH
8445: LD_EXP 17
8449: PUSH
8450: LD_INT 8
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PUSH
8470: LD_EXP 17
8474: PPUSH
8475: CALL_OW 302
8479: AND
8480: IFFALSE 8594
8482: GO 8484
8484: DISABLE
// begin enable ;
8485: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8486: LD_EXP 17
8490: PPUSH
8491: LD_INT 22
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 58
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1000
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 91
8536: PUSH
8537: LD_EXP 17
8541: PUSH
8542: LD_INT 8
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 69
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8570: LD_EXP 17
8574: PPUSH
8575: LD_INT 52
8577: PPUSH
8578: LD_INT 90
8580: PPUSH
8581: CALL_OW 171
// AddComHold ( Olaf ) ;
8585: LD_EXP 17
8589: PPUSH
8590: CALL_OW 200
// end ;
8594: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8595: LD_EXP 12
8599: PUSH
8600: LD_INT 2
8602: PPUSH
8603: CALL_OW 302
8607: NOT
8608: AND
8609: PUSH
8610: LD_OWVAR 67
8614: PUSH
8615: LD_INT 1
8617: EQUAL
8618: AND
8619: PUSH
8620: LD_EXP 13
8624: NOT
8625: AND
8626: IFFALSE 8643
8628: GO 8630
8630: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8631: LD_EXP 16
8635: PPUSH
8636: LD_STRING DH-prison-missing
8638: PPUSH
8639: CALL_OW 88
// end ;
8643: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8644: LD_EXP 12
8648: PUSH
8649: LD_INT 8
8651: PPUSH
8652: CALL_OW 302
8656: NOT
8657: AND
8658: PUSH
8659: LD_OWVAR 67
8663: PUSH
8664: LD_INT 1
8666: GREATER
8667: AND
8668: PUSH
8669: LD_EXP 13
8673: NOT
8674: AND
8675: IFFALSE 8692
8677: GO 8679
8679: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8680: LD_EXP 16
8684: PPUSH
8685: LD_STRING DH-prison-missing
8687: PPUSH
8688: CALL_OW 88
// end ;
8692: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8693: LD_EXP 12
8697: PUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 302
8705: NOT
8706: AND
8707: PUSH
8708: LD_EXP 13
8712: NOT
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8719: LD_EXP 16
8723: PPUSH
8724: LD_STRING DH-prison-missing-a
8726: PPUSH
8727: CALL_OW 88
// end ;
8731: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8732: LD_EXP 12
8736: PUSH
8737: LD_INT 10
8739: PPUSH
8740: CALL_OW 302
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 13
8751: NOT
8752: AND
8753: IFFALSE 8770
8755: GO 8757
8757: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8758: LD_EXP 16
8762: PPUSH
8763: LD_STRING DH-prison-missing-a
8765: PPUSH
8766: CALL_OW 88
// end ;
8770: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8771: LD_EXP 13
8775: NOT
8776: PUSH
8777: LD_EXP 12
8781: AND
8782: PUSH
8783: LD_INT 2
8785: PPUSH
8786: LD_EXP 20
8790: PPUSH
8791: CALL_OW 292
8795: AND
8796: IFFALSE 8883
8798: GO 8800
8800: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8801: LD_EXP 20
8805: PPUSH
8806: LD_EXP 16
8810: PPUSH
8811: CALL_OW 119
// DialogueOn ;
8815: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8828: LD_EXP 20
8832: PPUSH
8833: LD_STRING DK-prison-found
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8840: LD_EXP 16
8844: PPUSH
8845: LD_STRING DH-prison-found
8847: PPUSH
8848: CALL_OW 88
// DialogueOff ;
8852: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 235
// prisonFound := true ;
8868: LD_ADDR_EXP 13
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8876: LD_STRING O6_prison_out
8878: PPUSH
8879: CALL_OW 337
// end ;
8883: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8884: LD_EXP 16
8888: PPUSH
8889: CALL_OW 256
8893: PUSH
8894: LD_INT 500
8896: LESS
8897: IFFALSE 8910
8899: GO 8901
8901: DISABLE
// heikeHurt := true ;
8902: LD_ADDR_EXP 14
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
8910: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8911: LD_INT 22
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: IFFALSE 9255
8941: GO 8943
8943: DISABLE
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
// begin uc_side := 3 ;
8949: LD_ADDR_OWVAR 20
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// uc_nation := 3 ;
8957: LD_ADDR_OWVAR 21
8961: PUSH
8962: LD_INT 3
8964: ST_TO_ADDR
// tmp := [ ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// for i := 1 to 5 do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_INT 5
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9094
// begin PrepareHuman ( false , 1 , 4 ) ;
8988: LD_INT 0
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 4
8996: PPUSH
8997: CALL_OW 380
// un := CreateHuman ;
9001: LD_ADDR_VAR 0 3
9005: PUSH
9006: CALL_OW 44
9010: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9011: LD_VAR 0 3
9015: PPUSH
9016: LD_INT 4
9018: PPUSH
9019: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 158
9030: PPUSH
9031: LD_INT 80
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 147
9048: PPUSH
9049: LD_INT 75
9051: PPUSH
9052: CALL_OW 111
// wait ( 0 0$1 ) ;
9056: LD_INT 35
9058: PPUSH
9059: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9063: LD_ADDR_VAR 0 2
9067: PUSH
9068: LD_VAR 0 2
9072: PPUSH
9073: LD_VAR 0 2
9077: PUSH
9078: LD_INT 1
9080: PLUS
9081: PPUSH
9082: LD_VAR 0 3
9086: PPUSH
9087: CALL_OW 1
9091: ST_TO_ADDR
// end ;
9092: GO 8985
9094: POP
9095: POP
// repeat wait ( 0 0$1 ) ;
9096: LD_INT 35
9098: PPUSH
9099: CALL_OW 67
// for i in tmp do
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9235
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 74
9145: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: CALL_OW 250
9159: PPUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: CALL_OW 251
9173: PPUSH
9174: CALL_OW 428
9178: IFFALSE 9219
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 250
9198: PPUSH
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: CALL_OW 251
9212: PPUSH
9213: CALL_OW 114
9217: GO 9233
// ComAttackUnit ( i , Heike ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_EXP 16
9228: PPUSH
9229: CALL_OW 115
// end ;
9233: GO 9113
9235: POP
9236: POP
// until IsDead ( Heike ) or not tmp ;
9237: LD_EXP 16
9241: PPUSH
9242: CALL_OW 301
9246: PUSH
9247: LD_VAR 0 2
9251: NOT
9252: OR
9253: IFFALSE 9096
// end ;
9255: PPOPN 3
9257: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9258: LD_EXP 12
9262: PUSH
9263: LD_EXP 16
9267: PPUSH
9268: CALL_OW 302
9272: AND
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 22
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 50
9299: PUSH
9300: EMPTY
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 71
9312: PUSH
9313: LD_INT 0
9315: EQUAL
9316: AND
9317: IFFALSE 9668
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin if not heikeHurt then
9325: LD_EXP 14
9329: NOT
9330: IFFALSE 9339
// SetAchievement ( ACH_INVINCIBLE ) ;
9332: LD_STRING ACH_INVINCIBLE
9334: PPUSH
9335: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9339: LD_STRING enableBioCharacter(BIO_GIVI)
9341: PPUSH
9342: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9346: LD_STRING enableBioCharacter(BIO_MIKE)
9348: PPUSH
9349: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9353: LD_STRING enableBioCharacter(BIO_OLAF)
9355: PPUSH
9356: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9360: LD_ADDR_VAR 0 1
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 50
9387: PUSH
9388: EMPTY
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 69
9400: ST_TO_ADDR
// if prisonFound then
9401: LD_EXP 13
9405: IFFALSE 9419
// AddMedal ( med1 , 1 ) else
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 101
9417: GO 9430
// AddMedal ( med1 , - 1 ) ;
9419: LD_STRING med1
9421: PPUSH
9422: LD_INT 1
9424: NEG
9425: PPUSH
9426: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9430: LD_VAR 0 1
9434: PUSH
9435: LD_INT 3
9437: LESS
9438: PUSH
9439: LD_EXP 13
9443: NOT
9444: AND
9445: PUSH
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 4
9453: LESS
9454: PUSH
9455: LD_EXP 13
9459: AND
9460: OR
9461: IFFALSE 9476
// AddMedal ( med2 , - 1 ) else
9463: LD_STRING med2
9465: PPUSH
9466: LD_INT 1
9468: NEG
9469: PPUSH
9470: CALL_OW 101
9474: GO 9486
// AddMedal ( med2 , 1 ) ;
9476: LD_STRING med2
9478: PPUSH
9479: LD_INT 1
9481: PPUSH
9482: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9486: LD_EXP 13
9490: PUSH
9491: LD_EXP 4
9495: AND
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 4
9504: GREATEREQUAL
9505: AND
9506: IFFALSE 9520
// AddMedal ( med3 , 1 ) else
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 101
9518: GO 9531
// AddMedal ( med3 , - 1 ) ;
9520: LD_STRING med3
9522: PPUSH
9523: LD_INT 1
9525: NEG
9526: PPUSH
9527: CALL_OW 101
// GiveMedals ( MAIN ) ;
9531: LD_STRING MAIN
9533: PPUSH
9534: CALL_OW 102
// RewardPeople ( tmp ) ;
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9547: LD_EXP 16
9551: PPUSH
9552: LD_STRING 01_Heike
9554: PPUSH
9555: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9559: LD_EXP 18
9563: PPUSH
9564: CALL_OW 302
9568: PUSH
9569: LD_EXP 18
9573: PUSH
9574: LD_VAR 0 1
9578: IN
9579: AND
9580: IFFALSE 9594
// SaveCharacters ( Givi , 01_Givi ) ;
9582: LD_EXP 18
9586: PPUSH
9587: LD_STRING 01_Givi
9589: PPUSH
9590: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9594: LD_EXP 19
9598: PPUSH
9599: CALL_OW 302
9603: PUSH
9604: LD_EXP 19
9608: PUSH
9609: LD_VAR 0 1
9613: IN
9614: AND
9615: IFFALSE 9629
// SaveCharacters ( Mike , 01_Mike ) ;
9617: LD_EXP 19
9621: PPUSH
9622: LD_STRING 01_Mike
9624: PPUSH
9625: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9629: LD_EXP 20
9633: PPUSH
9634: CALL_OW 302
9638: PUSH
9639: LD_EXP 20
9643: PUSH
9644: LD_VAR 0 1
9648: IN
9649: AND
9650: IFFALSE 9664
// SaveCharacters ( Kamil , 01_Kamil ) ;
9652: LD_EXP 20
9656: PPUSH
9657: LD_STRING 01_Kamil
9659: PPUSH
9660: CALL_OW 38
// YouWin ;
9664: CALL_OW 103
// end ; end_of_file
9668: PPOPN 1
9670: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9671: LD_VAR 0 1
9675: PUSH
9676: LD_EXP 16
9680: EQUAL
9681: IFFALSE 9690
// YouLost ( Heike ) ;
9683: LD_STRING Heike
9685: PPUSH
9686: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_INT 22
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 25
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PPUSH
9719: CALL_OW 69
9723: IN
9724: IFFALSE 9830
// begin if un in russianPatrol then
9726: LD_VAR 0 1
9730: PUSH
9731: LD_EXP 21
9735: IN
9736: IFFALSE 9754
// russianPatrol := russianPatrol diff un ;
9738: LD_ADDR_EXP 21
9742: PUSH
9743: LD_EXP 21
9747: PUSH
9748: LD_VAR 0 1
9752: DIFF
9753: ST_TO_ADDR
// if un in russianForestPatrol then
9754: LD_VAR 0 1
9758: PUSH
9759: LD_EXP 22
9763: IN
9764: IFFALSE 9782
// russianForestPatrol := russianForestPatrol diff un ;
9766: LD_ADDR_EXP 22
9770: PUSH
9771: LD_EXP 22
9775: PUSH
9776: LD_VAR 0 1
9780: DIFF
9781: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9782: LD_ADDR_EXP 5
9786: PUSH
9787: LD_EXP 5
9791: PPUSH
9792: LD_EXP 5
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: PPUSH
9801: LD_VAR 0 1
9805: PPUSH
9806: CALL_OW 250
9810: PUSH
9811: LD_VAR 0 1
9815: PPUSH
9816: CALL_OW 251
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 1
9829: ST_TO_ADDR
// end ; end ;
9830: PPOPN 1
9832: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9833: LD_VAR 0 1
9837: PUSH
9838: LD_EXP 16
9842: EQUAL
9843: IFFALSE 9852
// YouLost ( Heike ) ;
9845: LD_STRING Heike
9847: PPUSH
9848: CALL_OW 104
// if un = Olaf then
9852: LD_VAR 0 1
9856: PUSH
9857: LD_EXP 17
9861: EQUAL
9862: IFFALSE 9871
// YouLost ( Olaf ) ;
9864: LD_STRING Olaf
9866: PPUSH
9867: CALL_OW 104
// end ;
9871: PPOPN 1
9873: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 2
9881: EQUAL
9882: PUSH
9883: LD_VAR 0 2
9887: PUSH
9888: LD_INT 5
9890: EQUAL
9891: AND
9892: IFFALSE 9901
// YouLost ( FriendlyFire ) ;
9894: LD_STRING FriendlyFire
9896: PPUSH
9897: CALL_OW 104
// end ; end_of_file
9901: PPOPN 2
9903: END
// every 0 0$1 do
9904: GO 9906
9906: DISABLE
// begin enable ;
9907: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9908: LD_STRING updateTimer(
9910: PUSH
9911: LD_OWVAR 1
9915: STR
9916: PUSH
9917: LD_STRING );
9919: STR
9920: PPUSH
9921: CALL_OW 559
// end ;
9925: END
// export function SOS_MapStart ( ) ; begin
9926: LD_INT 0
9928: PPUSH
// if streamModeActive then
9929: LD_EXP 26
9933: IFFALSE 9942
// DefineStreamItems ( true ) ;
9935: LD_INT 1
9937: PPUSH
9938: CALL 11596 0 1
// UpdateFactoryWaypoints ( ) ;
9942: CALL 24457 0 0
// UpdateWarhouseGatheringPoints ( ) ;
9946: CALL 24710 0 0
// end ;
9950: LD_VAR 0 1
9954: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9955: LD_INT 0
9957: PPUSH
// if p2 = 100 then
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 100
9965: EQUAL
9966: IFFALSE 10969
// begin if not StreamModeActive then
9968: LD_EXP 26
9972: NOT
9973: IFFALSE 9983
// StreamModeActive := true ;
9975: LD_ADDR_EXP 26
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// if p3 = 0 then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 0
9990: EQUAL
9991: IFFALSE 9997
// InitStreamMode ;
9993: CALL 11132 0 0
// if p3 = 1 then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: EQUAL
10005: IFFALSE 10015
// sRocket := true ;
10007: LD_ADDR_EXP 31
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// if p3 = 2 then
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 2
10022: EQUAL
10023: IFFALSE 10033
// sSpeed := true ;
10025: LD_ADDR_EXP 30
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// if p3 = 3 then
10033: LD_VAR 0 3
10037: PUSH
10038: LD_INT 3
10040: EQUAL
10041: IFFALSE 10051
// sEngine := true ;
10043: LD_ADDR_EXP 32
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// if p3 = 4 then
10051: LD_VAR 0 3
10055: PUSH
10056: LD_INT 4
10058: EQUAL
10059: IFFALSE 10069
// sSpec := true ;
10061: LD_ADDR_EXP 29
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// if p3 = 5 then
10069: LD_VAR 0 3
10073: PUSH
10074: LD_INT 5
10076: EQUAL
10077: IFFALSE 10087
// sLevel := true ;
10079: LD_ADDR_EXP 33
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// if p3 = 6 then
10087: LD_VAR 0 3
10091: PUSH
10092: LD_INT 6
10094: EQUAL
10095: IFFALSE 10105
// sArmoury := true ;
10097: LD_ADDR_EXP 34
10101: PUSH
10102: LD_INT 1
10104: ST_TO_ADDR
// if p3 = 7 then
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 7
10112: EQUAL
10113: IFFALSE 10123
// sRadar := true ;
10115: LD_ADDR_EXP 35
10119: PUSH
10120: LD_INT 1
10122: ST_TO_ADDR
// if p3 = 8 then
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 8
10130: EQUAL
10131: IFFALSE 10141
// sBunker := true ;
10133: LD_ADDR_EXP 36
10137: PUSH
10138: LD_INT 1
10140: ST_TO_ADDR
// if p3 = 9 then
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 9
10148: EQUAL
10149: IFFALSE 10159
// sHack := true ;
10151: LD_ADDR_EXP 37
10155: PUSH
10156: LD_INT 1
10158: ST_TO_ADDR
// if p3 = 10 then
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 10
10166: EQUAL
10167: IFFALSE 10177
// sFire := true ;
10169: LD_ADDR_EXP 38
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
// if p3 = 11 then
10177: LD_VAR 0 3
10181: PUSH
10182: LD_INT 11
10184: EQUAL
10185: IFFALSE 10195
// sRefresh := true ;
10187: LD_ADDR_EXP 39
10191: PUSH
10192: LD_INT 1
10194: ST_TO_ADDR
// if p3 = 12 then
10195: LD_VAR 0 3
10199: PUSH
10200: LD_INT 12
10202: EQUAL
10203: IFFALSE 10213
// sExp := true ;
10205: LD_ADDR_EXP 40
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// if p3 = 13 then
10213: LD_VAR 0 3
10217: PUSH
10218: LD_INT 13
10220: EQUAL
10221: IFFALSE 10231
// sDepot := true ;
10223: LD_ADDR_EXP 41
10227: PUSH
10228: LD_INT 1
10230: ST_TO_ADDR
// if p3 = 14 then
10231: LD_VAR 0 3
10235: PUSH
10236: LD_INT 14
10238: EQUAL
10239: IFFALSE 10249
// sFlag := true ;
10241: LD_ADDR_EXP 42
10245: PUSH
10246: LD_INT 1
10248: ST_TO_ADDR
// if p3 = 15 then
10249: LD_VAR 0 3
10253: PUSH
10254: LD_INT 15
10256: EQUAL
10257: IFFALSE 10267
// sKamikadze := true ;
10259: LD_ADDR_EXP 50
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
// if p3 = 16 then
10267: LD_VAR 0 3
10271: PUSH
10272: LD_INT 16
10274: EQUAL
10275: IFFALSE 10285
// sTroll := true ;
10277: LD_ADDR_EXP 51
10281: PUSH
10282: LD_INT 1
10284: ST_TO_ADDR
// if p3 = 17 then
10285: LD_VAR 0 3
10289: PUSH
10290: LD_INT 17
10292: EQUAL
10293: IFFALSE 10303
// sSlow := true ;
10295: LD_ADDR_EXP 52
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// if p3 = 18 then
10303: LD_VAR 0 3
10307: PUSH
10308: LD_INT 18
10310: EQUAL
10311: IFFALSE 10321
// sLack := true ;
10313: LD_ADDR_EXP 53
10317: PUSH
10318: LD_INT 1
10320: ST_TO_ADDR
// if p3 = 19 then
10321: LD_VAR 0 3
10325: PUSH
10326: LD_INT 19
10328: EQUAL
10329: IFFALSE 10339
// sTank := true ;
10331: LD_ADDR_EXP 55
10335: PUSH
10336: LD_INT 1
10338: ST_TO_ADDR
// if p3 = 20 then
10339: LD_VAR 0 3
10343: PUSH
10344: LD_INT 20
10346: EQUAL
10347: IFFALSE 10357
// sRemote := true ;
10349: LD_ADDR_EXP 56
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// if p3 = 21 then
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 21
10364: EQUAL
10365: IFFALSE 10375
// sPowell := true ;
10367: LD_ADDR_EXP 57
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// if p3 = 22 then
10375: LD_VAR 0 3
10379: PUSH
10380: LD_INT 22
10382: EQUAL
10383: IFFALSE 10393
// sTeleport := true ;
10385: LD_ADDR_EXP 60
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// if p3 = 23 then
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 23
10400: EQUAL
10401: IFFALSE 10411
// sOilTower := true ;
10403: LD_ADDR_EXP 62
10407: PUSH
10408: LD_INT 1
10410: ST_TO_ADDR
// if p3 = 24 then
10411: LD_VAR 0 3
10415: PUSH
10416: LD_INT 24
10418: EQUAL
10419: IFFALSE 10429
// sShovel := true ;
10421: LD_ADDR_EXP 63
10425: PUSH
10426: LD_INT 1
10428: ST_TO_ADDR
// if p3 = 25 then
10429: LD_VAR 0 3
10433: PUSH
10434: LD_INT 25
10436: EQUAL
10437: IFFALSE 10447
// sSheik := true ;
10439: LD_ADDR_EXP 64
10443: PUSH
10444: LD_INT 1
10446: ST_TO_ADDR
// if p3 = 26 then
10447: LD_VAR 0 3
10451: PUSH
10452: LD_INT 26
10454: EQUAL
10455: IFFALSE 10465
// sEarthquake := true ;
10457: LD_ADDR_EXP 66
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
// if p3 = 27 then
10465: LD_VAR 0 3
10469: PUSH
10470: LD_INT 27
10472: EQUAL
10473: IFFALSE 10483
// sAI := true ;
10475: LD_ADDR_EXP 67
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// if p3 = 28 then
10483: LD_VAR 0 3
10487: PUSH
10488: LD_INT 28
10490: EQUAL
10491: IFFALSE 10501
// sCargo := true ;
10493: LD_ADDR_EXP 70
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// if p3 = 29 then
10501: LD_VAR 0 3
10505: PUSH
10506: LD_INT 29
10508: EQUAL
10509: IFFALSE 10519
// sDLaser := true ;
10511: LD_ADDR_EXP 71
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// if p3 = 30 then
10519: LD_VAR 0 3
10523: PUSH
10524: LD_INT 30
10526: EQUAL
10527: IFFALSE 10537
// sExchange := true ;
10529: LD_ADDR_EXP 72
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// if p3 = 31 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_INT 31
10544: EQUAL
10545: IFFALSE 10555
// sFac := true ;
10547: LD_ADDR_EXP 73
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// if p3 = 32 then
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 32
10562: EQUAL
10563: IFFALSE 10573
// sPower := true ;
10565: LD_ADDR_EXP 74
10569: PUSH
10570: LD_INT 1
10572: ST_TO_ADDR
// if p3 = 33 then
10573: LD_VAR 0 3
10577: PUSH
10578: LD_INT 33
10580: EQUAL
10581: IFFALSE 10591
// sRandom := true ;
10583: LD_ADDR_EXP 75
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// if p3 = 34 then
10591: LD_VAR 0 3
10595: PUSH
10596: LD_INT 34
10598: EQUAL
10599: IFFALSE 10609
// sShield := true ;
10601: LD_ADDR_EXP 76
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// if p3 = 35 then
10609: LD_VAR 0 3
10613: PUSH
10614: LD_INT 35
10616: EQUAL
10617: IFFALSE 10627
// sTime := true ;
10619: LD_ADDR_EXP 77
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// if p3 = 36 then
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 36
10634: EQUAL
10635: IFFALSE 10645
// sTools := true ;
10637: LD_ADDR_EXP 78
10641: PUSH
10642: LD_INT 1
10644: ST_TO_ADDR
// if p3 = 101 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 101
10652: EQUAL
10653: IFFALSE 10663
// sSold := true ;
10655: LD_ADDR_EXP 43
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// if p3 = 102 then
10663: LD_VAR 0 3
10667: PUSH
10668: LD_INT 102
10670: EQUAL
10671: IFFALSE 10681
// sDiff := true ;
10673: LD_ADDR_EXP 44
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// if p3 = 103 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_INT 103
10688: EQUAL
10689: IFFALSE 10699
// sFog := true ;
10691: LD_ADDR_EXP 47
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// if p3 = 104 then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 104
10706: EQUAL
10707: IFFALSE 10717
// sReset := true ;
10709: LD_ADDR_EXP 48
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// if p3 = 105 then
10717: LD_VAR 0 3
10721: PUSH
10722: LD_INT 105
10724: EQUAL
10725: IFFALSE 10735
// sSun := true ;
10727: LD_ADDR_EXP 49
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// if p3 = 106 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 106
10742: EQUAL
10743: IFFALSE 10753
// sTiger := true ;
10745: LD_ADDR_EXP 45
10749: PUSH
10750: LD_INT 1
10752: ST_TO_ADDR
// if p3 = 107 then
10753: LD_VAR 0 3
10757: PUSH
10758: LD_INT 107
10760: EQUAL
10761: IFFALSE 10771
// sBomb := true ;
10763: LD_ADDR_EXP 46
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// if p3 = 108 then
10771: LD_VAR 0 3
10775: PUSH
10776: LD_INT 108
10778: EQUAL
10779: IFFALSE 10789
// sWound := true ;
10781: LD_ADDR_EXP 54
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// if p3 = 109 then
10789: LD_VAR 0 3
10793: PUSH
10794: LD_INT 109
10796: EQUAL
10797: IFFALSE 10807
// sBetray := true ;
10799: LD_ADDR_EXP 58
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// if p3 = 110 then
10807: LD_VAR 0 3
10811: PUSH
10812: LD_INT 110
10814: EQUAL
10815: IFFALSE 10825
// sContamin := true ;
10817: LD_ADDR_EXP 59
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// if p3 = 111 then
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 111
10832: EQUAL
10833: IFFALSE 10843
// sOil := true ;
10835: LD_ADDR_EXP 61
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// if p3 = 112 then
10843: LD_VAR 0 3
10847: PUSH
10848: LD_INT 112
10850: EQUAL
10851: IFFALSE 10861
// sStu := true ;
10853: LD_ADDR_EXP 65
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// if p3 = 113 then
10861: LD_VAR 0 3
10865: PUSH
10866: LD_INT 113
10868: EQUAL
10869: IFFALSE 10879
// sBazooka := true ;
10871: LD_ADDR_EXP 68
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// if p3 = 114 then
10879: LD_VAR 0 3
10883: PUSH
10884: LD_INT 114
10886: EQUAL
10887: IFFALSE 10897
// sMortar := true ;
10889: LD_ADDR_EXP 69
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// if p3 = 115 then
10897: LD_VAR 0 3
10901: PUSH
10902: LD_INT 115
10904: EQUAL
10905: IFFALSE 10915
// sRanger := true ;
10907: LD_ADDR_EXP 79
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// if p3 = 116 then
10915: LD_VAR 0 3
10919: PUSH
10920: LD_INT 116
10922: EQUAL
10923: IFFALSE 10933
// sComputer := true ;
10925: LD_ADDR_EXP 80
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// if p3 = 117 then
10933: LD_VAR 0 3
10937: PUSH
10938: LD_INT 117
10940: EQUAL
10941: IFFALSE 10951
// s30 := true ;
10943: LD_ADDR_EXP 81
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// if p3 = 118 then
10951: LD_VAR 0 3
10955: PUSH
10956: LD_INT 118
10958: EQUAL
10959: IFFALSE 10969
// s60 := true ;
10961: LD_ADDR_EXP 82
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// end ; if p2 = 101 then
10969: LD_VAR 0 2
10973: PUSH
10974: LD_INT 101
10976: EQUAL
10977: IFFALSE 11105
// begin case p3 of 1 :
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 1
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 10999
10992: POP
// hHackUnlimitedResources ; 2 :
10993: CALL 23203 0 0
10997: GO 11105
10999: LD_INT 2
11001: DOUBLE
11002: EQUAL
11003: IFTRUE 11007
11005: GO 11014
11007: POP
// hHackSetLevel10 ; 3 :
11008: CALL 23336 0 0
11012: GO 11105
11014: LD_INT 3
11016: DOUBLE
11017: EQUAL
11018: IFTRUE 11022
11020: GO 11029
11022: POP
// hHackSetLevel10YourUnits ; 4 :
11023: CALL 23421 0 0
11027: GO 11105
11029: LD_INT 4
11031: DOUBLE
11032: EQUAL
11033: IFTRUE 11037
11035: GO 11044
11037: POP
// hHackInvincible ; 5 :
11038: CALL 23869 0 0
11042: GO 11105
11044: LD_INT 5
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11059
11052: POP
// hHackInvisible ; 6 :
11053: CALL 23980 0 0
11057: GO 11105
11059: LD_INT 6
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11074
11067: POP
// hHackChangeYourSide ; 7 :
11068: CALL 24037 0 0
11072: GO 11105
11074: LD_INT 7
11076: DOUBLE
11077: EQUAL
11078: IFTRUE 11082
11080: GO 11089
11082: POP
// hHackChangeUnitSide ; 8 :
11083: CALL 24079 0 0
11087: GO 11105
11089: LD_INT 8
11091: DOUBLE
11092: EQUAL
11093: IFTRUE 11097
11095: GO 11104
11097: POP
// hHackFog ; end ;
11098: CALL 24180 0 0
11102: GO 11105
11104: POP
// end ; end ;
11105: LD_VAR 0 7
11109: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11110: GO 11112
11112: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11113: LD_STRING initStreamRollete();
11115: PPUSH
11116: CALL_OW 559
// InitStreamMode ;
11120: CALL 11132 0 0
// DefineStreamItems ( false ) ;
11124: LD_INT 0
11126: PPUSH
11127: CALL 11596 0 1
// end ;
11131: END
// function InitStreamMode ; begin
11132: LD_INT 0
11134: PPUSH
// streamModeActive := false ;
11135: LD_ADDR_EXP 26
11139: PUSH
11140: LD_INT 0
11142: ST_TO_ADDR
// normalCounter := 36 ;
11143: LD_ADDR_EXP 27
11147: PUSH
11148: LD_INT 36
11150: ST_TO_ADDR
// hardcoreCounter := 18 ;
11151: LD_ADDR_EXP 28
11155: PUSH
11156: LD_INT 18
11158: ST_TO_ADDR
// sRocket := false ;
11159: LD_ADDR_EXP 31
11163: PUSH
11164: LD_INT 0
11166: ST_TO_ADDR
// sSpeed := false ;
11167: LD_ADDR_EXP 30
11171: PUSH
11172: LD_INT 0
11174: ST_TO_ADDR
// sEngine := false ;
11175: LD_ADDR_EXP 32
11179: PUSH
11180: LD_INT 0
11182: ST_TO_ADDR
// sSpec := false ;
11183: LD_ADDR_EXP 29
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// sLevel := false ;
11191: LD_ADDR_EXP 33
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// sArmoury := false ;
11199: LD_ADDR_EXP 34
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// sRadar := false ;
11207: LD_ADDR_EXP 35
11211: PUSH
11212: LD_INT 0
11214: ST_TO_ADDR
// sBunker := false ;
11215: LD_ADDR_EXP 36
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// sHack := false ;
11223: LD_ADDR_EXP 37
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
// sFire := false ;
11231: LD_ADDR_EXP 38
11235: PUSH
11236: LD_INT 0
11238: ST_TO_ADDR
// sRefresh := false ;
11239: LD_ADDR_EXP 39
11243: PUSH
11244: LD_INT 0
11246: ST_TO_ADDR
// sExp := false ;
11247: LD_ADDR_EXP 40
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// sDepot := false ;
11255: LD_ADDR_EXP 41
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// sFlag := false ;
11263: LD_ADDR_EXP 42
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// sKamikadze := false ;
11271: LD_ADDR_EXP 50
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// sTroll := false ;
11279: LD_ADDR_EXP 51
11283: PUSH
11284: LD_INT 0
11286: ST_TO_ADDR
// sSlow := false ;
11287: LD_ADDR_EXP 52
11291: PUSH
11292: LD_INT 0
11294: ST_TO_ADDR
// sLack := false ;
11295: LD_ADDR_EXP 53
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// sTank := false ;
11303: LD_ADDR_EXP 55
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// sRemote := false ;
11311: LD_ADDR_EXP 56
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// sPowell := false ;
11319: LD_ADDR_EXP 57
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// sTeleport := false ;
11327: LD_ADDR_EXP 60
11331: PUSH
11332: LD_INT 0
11334: ST_TO_ADDR
// sOilTower := false ;
11335: LD_ADDR_EXP 62
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
// sShovel := false ;
11343: LD_ADDR_EXP 63
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// sSheik := false ;
11351: LD_ADDR_EXP 64
11355: PUSH
11356: LD_INT 0
11358: ST_TO_ADDR
// sEarthquake := false ;
11359: LD_ADDR_EXP 66
11363: PUSH
11364: LD_INT 0
11366: ST_TO_ADDR
// sAI := false ;
11367: LD_ADDR_EXP 67
11371: PUSH
11372: LD_INT 0
11374: ST_TO_ADDR
// sCargo := false ;
11375: LD_ADDR_EXP 70
11379: PUSH
11380: LD_INT 0
11382: ST_TO_ADDR
// sDLaser := false ;
11383: LD_ADDR_EXP 71
11387: PUSH
11388: LD_INT 0
11390: ST_TO_ADDR
// sExchange := false ;
11391: LD_ADDR_EXP 72
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// sFac := false ;
11399: LD_ADDR_EXP 73
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// sPower := false ;
11407: LD_ADDR_EXP 74
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// sRandom := false ;
11415: LD_ADDR_EXP 75
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// sShield := false ;
11423: LD_ADDR_EXP 76
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// sTime := false ;
11431: LD_ADDR_EXP 77
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// sTools := false ;
11439: LD_ADDR_EXP 78
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// sSold := false ;
11447: LD_ADDR_EXP 43
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// sDiff := false ;
11455: LD_ADDR_EXP 44
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// sFog := false ;
11463: LD_ADDR_EXP 47
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// sReset := false ;
11471: LD_ADDR_EXP 48
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// sSun := false ;
11479: LD_ADDR_EXP 49
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// sTiger := false ;
11487: LD_ADDR_EXP 45
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// sBomb := false ;
11495: LD_ADDR_EXP 46
11499: PUSH
11500: LD_INT 0
11502: ST_TO_ADDR
// sWound := false ;
11503: LD_ADDR_EXP 54
11507: PUSH
11508: LD_INT 0
11510: ST_TO_ADDR
// sBetray := false ;
11511: LD_ADDR_EXP 58
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sContamin := false ;
11519: LD_ADDR_EXP 59
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sOil := false ;
11527: LD_ADDR_EXP 61
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sStu := false ;
11535: LD_ADDR_EXP 65
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sBazooka := false ;
11543: LD_ADDR_EXP 68
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sMortar := false ;
11551: LD_ADDR_EXP 69
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sRanger := false ;
11559: LD_ADDR_EXP 79
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sComputer := false ;
11567: LD_ADDR_EXP 80
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// s30 := false ;
11575: LD_ADDR_EXP 81
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// s60 := false ;
11583: LD_ADDR_EXP 82
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// end ;
11591: LD_VAR 0 1
11595: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11596: LD_INT 0
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
// result := [ ] ;
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: EMPTY
11611: ST_TO_ADDR
// if campaign_id = 1 then
11612: LD_OWVAR 69
11616: PUSH
11617: LD_INT 1
11619: EQUAL
11620: IFFALSE 14786
// begin case mission_number of 1 :
11622: LD_OWVAR 70
11626: PUSH
11627: LD_INT 1
11629: DOUBLE
11630: EQUAL
11631: IFTRUE 11635
11633: GO 11711
11635: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_INT 2
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: LD_INT 11
11649: PUSH
11650: LD_INT 12
11652: PUSH
11653: LD_INT 15
11655: PUSH
11656: LD_INT 16
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 23
11664: PUSH
11665: LD_INT 26
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 101
11681: PUSH
11682: LD_INT 102
11684: PUSH
11685: LD_INT 106
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: ST_TO_ADDR
11709: GO 14784
11711: LD_INT 2
11713: DOUBLE
11714: EQUAL
11715: IFTRUE 11719
11717: GO 11803
11719: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11720: LD_ADDR_VAR 0 2
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 4
11730: PUSH
11731: LD_INT 11
11733: PUSH
11734: LD_INT 12
11736: PUSH
11737: LD_INT 15
11739: PUSH
11740: LD_INT 16
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 23
11748: PUSH
11749: LD_INT 26
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 101
11765: PUSH
11766: LD_INT 102
11768: PUSH
11769: LD_INT 105
11771: PUSH
11772: LD_INT 106
11774: PUSH
11775: LD_INT 108
11777: PUSH
11778: LD_INT 116
11780: PUSH
11781: LD_INT 117
11783: PUSH
11784: LD_INT 118
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
11801: GO 14784
11803: LD_INT 3
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 11899
11811: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11812: LD_ADDR_VAR 0 2
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 4
11822: PUSH
11823: LD_INT 5
11825: PUSH
11826: LD_INT 11
11828: PUSH
11829: LD_INT 12
11831: PUSH
11832: LD_INT 15
11834: PUSH
11835: LD_INT 16
11837: PUSH
11838: LD_INT 22
11840: PUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 36
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 101
11861: PUSH
11862: LD_INT 102
11864: PUSH
11865: LD_INT 105
11867: PUSH
11868: LD_INT 106
11870: PUSH
11871: LD_INT 108
11873: PUSH
11874: LD_INT 116
11876: PUSH
11877: LD_INT 117
11879: PUSH
11880: LD_INT 118
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: ST_TO_ADDR
11897: GO 14784
11899: LD_INT 4
11901: DOUBLE
11902: EQUAL
11903: IFTRUE 11907
11905: GO 12003
11907: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11908: LD_ADDR_VAR 0 2
11912: PUSH
11913: LD_INT 2
11915: PUSH
11916: LD_INT 4
11918: PUSH
11919: LD_INT 5
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: LD_INT 11
11927: PUSH
11928: LD_INT 12
11930: PUSH
11931: LD_INT 15
11933: PUSH
11934: LD_INT 16
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 23
11942: PUSH
11943: LD_INT 26
11945: PUSH
11946: LD_INT 36
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 101
11965: PUSH
11966: LD_INT 102
11968: PUSH
11969: LD_INT 105
11971: PUSH
11972: LD_INT 106
11974: PUSH
11975: LD_INT 108
11977: PUSH
11978: LD_INT 116
11980: PUSH
11981: LD_INT 117
11983: PUSH
11984: LD_INT 118
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: ST_TO_ADDR
12001: GO 14784
12003: LD_INT 5
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12123
12011: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 2
12019: PUSH
12020: LD_INT 4
12022: PUSH
12023: LD_INT 5
12025: PUSH
12026: LD_INT 6
12028: PUSH
12029: LD_INT 8
12031: PUSH
12032: LD_INT 11
12034: PUSH
12035: LD_INT 12
12037: PUSH
12038: LD_INT 15
12040: PUSH
12041: LD_INT 16
12043: PUSH
12044: LD_INT 22
12046: PUSH
12047: LD_INT 23
12049: PUSH
12050: LD_INT 25
12052: PUSH
12053: LD_INT 26
12055: PUSH
12056: LD_INT 36
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 101
12077: PUSH
12078: LD_INT 102
12080: PUSH
12081: LD_INT 105
12083: PUSH
12084: LD_INT 106
12086: PUSH
12087: LD_INT 108
12089: PUSH
12090: LD_INT 109
12092: PUSH
12093: LD_INT 112
12095: PUSH
12096: LD_INT 116
12098: PUSH
12099: LD_INT 117
12101: PUSH
12102: LD_INT 118
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: ST_TO_ADDR
12121: GO 14784
12123: LD_INT 6
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12263
12131: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 4
12142: PUSH
12143: LD_INT 5
12145: PUSH
12146: LD_INT 6
12148: PUSH
12149: LD_INT 8
12151: PUSH
12152: LD_INT 11
12154: PUSH
12155: LD_INT 12
12157: PUSH
12158: LD_INT 15
12160: PUSH
12161: LD_INT 16
12163: PUSH
12164: LD_INT 20
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 23
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 26
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 31
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: LD_INT 36
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 101
12217: PUSH
12218: LD_INT 102
12220: PUSH
12221: LD_INT 105
12223: PUSH
12224: LD_INT 106
12226: PUSH
12227: LD_INT 108
12229: PUSH
12230: LD_INT 109
12232: PUSH
12233: LD_INT 112
12235: PUSH
12236: LD_INT 116
12238: PUSH
12239: LD_INT 117
12241: PUSH
12242: LD_INT 118
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: ST_TO_ADDR
12261: GO 14784
12263: LD_INT 7
12265: DOUBLE
12266: EQUAL
12267: IFTRUE 12271
12269: GO 12383
12271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 4
12282: PUSH
12283: LD_INT 5
12285: PUSH
12286: LD_INT 7
12288: PUSH
12289: LD_INT 11
12291: PUSH
12292: LD_INT 12
12294: PUSH
12295: LD_INT 15
12297: PUSH
12298: LD_INT 16
12300: PUSH
12301: LD_INT 20
12303: PUSH
12304: LD_INT 21
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: LD_INT 23
12312: PUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 26
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 101
12337: PUSH
12338: LD_INT 102
12340: PUSH
12341: LD_INT 103
12343: PUSH
12344: LD_INT 105
12346: PUSH
12347: LD_INT 106
12349: PUSH
12350: LD_INT 108
12352: PUSH
12353: LD_INT 112
12355: PUSH
12356: LD_INT 116
12358: PUSH
12359: LD_INT 117
12361: PUSH
12362: LD_INT 118
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: ST_TO_ADDR
12381: GO 14784
12383: LD_INT 8
12385: DOUBLE
12386: EQUAL
12387: IFTRUE 12391
12389: GO 12531
12391: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12392: LD_ADDR_VAR 0 2
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: LD_INT 6
12408: PUSH
12409: LD_INT 7
12411: PUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 11
12417: PUSH
12418: LD_INT 12
12420: PUSH
12421: LD_INT 15
12423: PUSH
12424: LD_INT 16
12426: PUSH
12427: LD_INT 20
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: LD_INT 23
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 26
12444: PUSH
12445: LD_INT 30
12447: PUSH
12448: LD_INT 31
12450: PUSH
12451: LD_INT 32
12453: PUSH
12454: LD_INT 36
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 101
12481: PUSH
12482: LD_INT 102
12484: PUSH
12485: LD_INT 103
12487: PUSH
12488: LD_INT 105
12490: PUSH
12491: LD_INT 106
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 112
12502: PUSH
12503: LD_INT 116
12505: PUSH
12506: LD_INT 117
12508: PUSH
12509: LD_INT 118
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: ST_TO_ADDR
12529: GO 14784
12531: LD_INT 9
12533: DOUBLE
12534: EQUAL
12535: IFTRUE 12539
12537: GO 12687
12539: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_INT 2
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: LD_INT 5
12553: PUSH
12554: LD_INT 6
12556: PUSH
12557: LD_INT 7
12559: PUSH
12560: LD_INT 8
12562: PUSH
12563: LD_INT 11
12565: PUSH
12566: LD_INT 12
12568: PUSH
12569: LD_INT 15
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 26
12592: PUSH
12593: LD_INT 28
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 31
12601: PUSH
12602: LD_INT 32
12604: PUSH
12605: LD_INT 36
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 101
12633: PUSH
12634: LD_INT 102
12636: PUSH
12637: LD_INT 103
12639: PUSH
12640: LD_INT 105
12642: PUSH
12643: LD_INT 106
12645: PUSH
12646: LD_INT 108
12648: PUSH
12649: LD_INT 109
12651: PUSH
12652: LD_INT 112
12654: PUSH
12655: LD_INT 114
12657: PUSH
12658: LD_INT 116
12660: PUSH
12661: LD_INT 117
12663: PUSH
12664: LD_INT 118
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: ST_TO_ADDR
12685: GO 14784
12687: LD_INT 10
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12891
12695: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 28
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 31
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 36
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 101
12821: PUSH
12822: LD_INT 102
12824: PUSH
12825: LD_INT 103
12827: PUSH
12828: LD_INT 104
12830: PUSH
12831: LD_INT 105
12833: PUSH
12834: LD_INT 106
12836: PUSH
12837: LD_INT 107
12839: PUSH
12840: LD_INT 108
12842: PUSH
12843: LD_INT 109
12845: PUSH
12846: LD_INT 110
12848: PUSH
12849: LD_INT 111
12851: PUSH
12852: LD_INT 112
12854: PUSH
12855: LD_INT 114
12857: PUSH
12858: LD_INT 116
12860: PUSH
12861: LD_INT 117
12863: PUSH
12864: LD_INT 118
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: ST_TO_ADDR
12889: GO 14784
12891: LD_INT 11
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 13103
12899: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 3
12910: PUSH
12911: LD_INT 4
12913: PUSH
12914: LD_INT 5
12916: PUSH
12917: LD_INT 6
12919: PUSH
12920: LD_INT 7
12922: PUSH
12923: LD_INT 8
12925: PUSH
12926: LD_INT 9
12928: PUSH
12929: LD_INT 10
12931: PUSH
12932: LD_INT 11
12934: PUSH
12935: LD_INT 12
12937: PUSH
12938: LD_INT 13
12940: PUSH
12941: LD_INT 14
12943: PUSH
12944: LD_INT 15
12946: PUSH
12947: LD_INT 16
12949: PUSH
12950: LD_INT 17
12952: PUSH
12953: LD_INT 18
12955: PUSH
12956: LD_INT 19
12958: PUSH
12959: LD_INT 20
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 24
12973: PUSH
12974: LD_INT 25
12976: PUSH
12977: LD_INT 26
12979: PUSH
12980: LD_INT 28
12982: PUSH
12983: LD_INT 30
12985: PUSH
12986: LD_INT 31
12988: PUSH
12989: LD_INT 32
12991: PUSH
12992: LD_INT 34
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 101
13033: PUSH
13034: LD_INT 102
13036: PUSH
13037: LD_INT 103
13039: PUSH
13040: LD_INT 104
13042: PUSH
13043: LD_INT 105
13045: PUSH
13046: LD_INT 106
13048: PUSH
13049: LD_INT 107
13051: PUSH
13052: LD_INT 108
13054: PUSH
13055: LD_INT 109
13057: PUSH
13058: LD_INT 110
13060: PUSH
13061: LD_INT 111
13063: PUSH
13064: LD_INT 112
13066: PUSH
13067: LD_INT 114
13069: PUSH
13070: LD_INT 116
13072: PUSH
13073: LD_INT 117
13075: PUSH
13076: LD_INT 118
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: ST_TO_ADDR
13101: GO 14784
13103: LD_INT 12
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13331
13111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13112: LD_ADDR_VAR 0 2
13116: PUSH
13117: LD_INT 1
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 3
13125: PUSH
13126: LD_INT 4
13128: PUSH
13129: LD_INT 5
13131: PUSH
13132: LD_INT 6
13134: PUSH
13135: LD_INT 7
13137: PUSH
13138: LD_INT 8
13140: PUSH
13141: LD_INT 9
13143: PUSH
13144: LD_INT 10
13146: PUSH
13147: LD_INT 11
13149: PUSH
13150: LD_INT 12
13152: PUSH
13153: LD_INT 13
13155: PUSH
13156: LD_INT 14
13158: PUSH
13159: LD_INT 15
13161: PUSH
13162: LD_INT 16
13164: PUSH
13165: LD_INT 17
13167: PUSH
13168: LD_INT 18
13170: PUSH
13171: LD_INT 19
13173: PUSH
13174: LD_INT 20
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_INT 23
13185: PUSH
13186: LD_INT 24
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 27
13197: PUSH
13198: LD_INT 28
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: LD_INT 31
13206: PUSH
13207: LD_INT 32
13209: PUSH
13210: LD_INT 33
13212: PUSH
13213: LD_INT 34
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 101
13257: PUSH
13258: LD_INT 102
13260: PUSH
13261: LD_INT 103
13263: PUSH
13264: LD_INT 104
13266: PUSH
13267: LD_INT 105
13269: PUSH
13270: LD_INT 106
13272: PUSH
13273: LD_INT 107
13275: PUSH
13276: LD_INT 108
13278: PUSH
13279: LD_INT 109
13281: PUSH
13282: LD_INT 110
13284: PUSH
13285: LD_INT 111
13287: PUSH
13288: LD_INT 112
13290: PUSH
13291: LD_INT 113
13293: PUSH
13294: LD_INT 114
13296: PUSH
13297: LD_INT 116
13299: PUSH
13300: LD_INT 117
13302: PUSH
13303: LD_INT 118
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: ST_TO_ADDR
13329: GO 14784
13331: LD_INT 13
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13547
13339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_INT 1
13347: PUSH
13348: LD_INT 2
13350: PUSH
13351: LD_INT 3
13353: PUSH
13354: LD_INT 4
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: LD_INT 8
13362: PUSH
13363: LD_INT 9
13365: PUSH
13366: LD_INT 10
13368: PUSH
13369: LD_INT 11
13371: PUSH
13372: LD_INT 12
13374: PUSH
13375: LD_INT 14
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 17
13386: PUSH
13387: LD_INT 18
13389: PUSH
13390: LD_INT 19
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 24
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 26
13413: PUSH
13414: LD_INT 27
13416: PUSH
13417: LD_INT 28
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 31
13425: PUSH
13426: LD_INT 32
13428: PUSH
13429: LD_INT 33
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 36
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 101
13473: PUSH
13474: LD_INT 102
13476: PUSH
13477: LD_INT 103
13479: PUSH
13480: LD_INT 104
13482: PUSH
13483: LD_INT 105
13485: PUSH
13486: LD_INT 106
13488: PUSH
13489: LD_INT 107
13491: PUSH
13492: LD_INT 108
13494: PUSH
13495: LD_INT 109
13497: PUSH
13498: LD_INT 110
13500: PUSH
13501: LD_INT 111
13503: PUSH
13504: LD_INT 112
13506: PUSH
13507: LD_INT 113
13509: PUSH
13510: LD_INT 114
13512: PUSH
13513: LD_INT 116
13515: PUSH
13516: LD_INT 117
13518: PUSH
13519: LD_INT 118
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: ST_TO_ADDR
13545: GO 14784
13547: LD_INT 14
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13779
13555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: LD_INT 2
13566: PUSH
13567: LD_INT 3
13569: PUSH
13570: LD_INT 4
13572: PUSH
13573: LD_INT 5
13575: PUSH
13576: LD_INT 6
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 9
13587: PUSH
13588: LD_INT 10
13590: PUSH
13591: LD_INT 11
13593: PUSH
13594: LD_INT 12
13596: PUSH
13597: LD_INT 13
13599: PUSH
13600: LD_INT 14
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: LD_INT 16
13608: PUSH
13609: LD_INT 17
13611: PUSH
13612: LD_INT 18
13614: PUSH
13615: LD_INT 19
13617: PUSH
13618: LD_INT 20
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 23
13629: PUSH
13630: LD_INT 24
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 27
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 29
13647: PUSH
13648: LD_INT 30
13650: PUSH
13651: LD_INT 31
13653: PUSH
13654: LD_INT 32
13656: PUSH
13657: LD_INT 33
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 36
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 101
13705: PUSH
13706: LD_INT 102
13708: PUSH
13709: LD_INT 103
13711: PUSH
13712: LD_INT 104
13714: PUSH
13715: LD_INT 105
13717: PUSH
13718: LD_INT 106
13720: PUSH
13721: LD_INT 107
13723: PUSH
13724: LD_INT 108
13726: PUSH
13727: LD_INT 109
13729: PUSH
13730: LD_INT 110
13732: PUSH
13733: LD_INT 111
13735: PUSH
13736: LD_INT 112
13738: PUSH
13739: LD_INT 113
13741: PUSH
13742: LD_INT 114
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 14784
13779: LD_INT 15
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 14011
13787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 7
13813: PUSH
13814: LD_INT 8
13816: PUSH
13817: LD_INT 9
13819: PUSH
13820: LD_INT 10
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 13
13831: PUSH
13832: LD_INT 14
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 17
13843: PUSH
13844: LD_INT 18
13846: PUSH
13847: LD_INT 19
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 26
13870: PUSH
13871: LD_INT 27
13873: PUSH
13874: LD_INT 28
13876: PUSH
13877: LD_INT 29
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 31
13885: PUSH
13886: LD_INT 32
13888: PUSH
13889: LD_INT 33
13891: PUSH
13892: LD_INT 34
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 101
13937: PUSH
13938: LD_INT 102
13940: PUSH
13941: LD_INT 103
13943: PUSH
13944: LD_INT 104
13946: PUSH
13947: LD_INT 105
13949: PUSH
13950: LD_INT 106
13952: PUSH
13953: LD_INT 107
13955: PUSH
13956: LD_INT 108
13958: PUSH
13959: LD_INT 109
13961: PUSH
13962: LD_INT 110
13964: PUSH
13965: LD_INT 111
13967: PUSH
13968: LD_INT 112
13970: PUSH
13971: LD_INT 113
13973: PUSH
13974: LD_INT 114
13976: PUSH
13977: LD_INT 116
13979: PUSH
13980: LD_INT 117
13982: PUSH
13983: LD_INT 118
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: ST_TO_ADDR
14009: GO 14784
14011: LD_INT 16
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14155
14019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 4
14030: PUSH
14031: LD_INT 5
14033: PUSH
14034: LD_INT 7
14036: PUSH
14037: LD_INT 11
14039: PUSH
14040: LD_INT 12
14042: PUSH
14043: LD_INT 15
14045: PUSH
14046: LD_INT 16
14048: PUSH
14049: LD_INT 20
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 23
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 26
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 31
14072: PUSH
14073: LD_INT 32
14075: PUSH
14076: LD_INT 33
14078: PUSH
14079: LD_INT 34
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 101
14105: PUSH
14106: LD_INT 102
14108: PUSH
14109: LD_INT 103
14111: PUSH
14112: LD_INT 106
14114: PUSH
14115: LD_INT 108
14117: PUSH
14118: LD_INT 112
14120: PUSH
14121: LD_INT 113
14123: PUSH
14124: LD_INT 114
14126: PUSH
14127: LD_INT 116
14129: PUSH
14130: LD_INT 117
14132: PUSH
14133: LD_INT 118
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: ST_TO_ADDR
14153: GO 14784
14155: LD_INT 17
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14387
14163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: LD_INT 2
14174: PUSH
14175: LD_INT 3
14177: PUSH
14178: LD_INT 4
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: LD_INT 6
14186: PUSH
14187: LD_INT 7
14189: PUSH
14190: LD_INT 8
14192: PUSH
14193: LD_INT 9
14195: PUSH
14196: LD_INT 10
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 13
14207: PUSH
14208: LD_INT 14
14210: PUSH
14211: LD_INT 15
14213: PUSH
14214: LD_INT 16
14216: PUSH
14217: LD_INT 17
14219: PUSH
14220: LD_INT 18
14222: PUSH
14223: LD_INT 19
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 24
14240: PUSH
14241: LD_INT 25
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: LD_INT 27
14249: PUSH
14250: LD_INT 28
14252: PUSH
14253: LD_INT 29
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 36
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 101
14313: PUSH
14314: LD_INT 102
14316: PUSH
14317: LD_INT 103
14319: PUSH
14320: LD_INT 104
14322: PUSH
14323: LD_INT 105
14325: PUSH
14326: LD_INT 106
14328: PUSH
14329: LD_INT 107
14331: PUSH
14332: LD_INT 108
14334: PUSH
14335: LD_INT 109
14337: PUSH
14338: LD_INT 110
14340: PUSH
14341: LD_INT 111
14343: PUSH
14344: LD_INT 112
14346: PUSH
14347: LD_INT 113
14349: PUSH
14350: LD_INT 114
14352: PUSH
14353: LD_INT 116
14355: PUSH
14356: LD_INT 117
14358: PUSH
14359: LD_INT 118
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14784
14387: LD_INT 18
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14543
14395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14396: LD_ADDR_VAR 0 2
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 5
14409: PUSH
14410: LD_INT 7
14412: PUSH
14413: LD_INT 11
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 15
14421: PUSH
14422: LD_INT 16
14424: PUSH
14425: LD_INT 20
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 25
14439: PUSH
14440: LD_INT 26
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 35
14460: PUSH
14461: LD_INT 36
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 101
14489: PUSH
14490: LD_INT 102
14492: PUSH
14493: LD_INT 103
14495: PUSH
14496: LD_INT 106
14498: PUSH
14499: LD_INT 108
14501: PUSH
14502: LD_INT 112
14504: PUSH
14505: LD_INT 113
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 115
14513: PUSH
14514: LD_INT 116
14516: PUSH
14517: LD_INT 117
14519: PUSH
14520: LD_INT 118
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: ST_TO_ADDR
14541: GO 14784
14543: LD_INT 19
14545: DOUBLE
14546: EQUAL
14547: IFTRUE 14551
14549: GO 14783
14551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14552: LD_ADDR_VAR 0 2
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: LD_INT 3
14565: PUSH
14566: LD_INT 4
14568: PUSH
14569: LD_INT 5
14571: PUSH
14572: LD_INT 6
14574: PUSH
14575: LD_INT 7
14577: PUSH
14578: LD_INT 8
14580: PUSH
14581: LD_INT 9
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: LD_INT 11
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: LD_INT 13
14595: PUSH
14596: LD_INT 14
14598: PUSH
14599: LD_INT 15
14601: PUSH
14602: LD_INT 16
14604: PUSH
14605: LD_INT 17
14607: PUSH
14608: LD_INT 18
14610: PUSH
14611: LD_INT 19
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_INT 23
14625: PUSH
14626: LD_INT 24
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 26
14634: PUSH
14635: LD_INT 27
14637: PUSH
14638: LD_INT 28
14640: PUSH
14641: LD_INT 29
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: LD_INT 32
14652: PUSH
14653: LD_INT 33
14655: PUSH
14656: LD_INT 34
14658: PUSH
14659: LD_INT 35
14661: PUSH
14662: LD_INT 36
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 101
14705: PUSH
14706: LD_INT 102
14708: PUSH
14709: LD_INT 103
14711: PUSH
14712: LD_INT 104
14714: PUSH
14715: LD_INT 105
14717: PUSH
14718: LD_INT 106
14720: PUSH
14721: LD_INT 107
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 109
14729: PUSH
14730: LD_INT 110
14732: PUSH
14733: LD_INT 111
14735: PUSH
14736: LD_INT 112
14738: PUSH
14739: LD_INT 113
14741: PUSH
14742: LD_INT 114
14744: PUSH
14745: LD_INT 115
14747: PUSH
14748: LD_INT 116
14750: PUSH
14751: LD_INT 117
14753: PUSH
14754: LD_INT 118
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: ST_TO_ADDR
14781: GO 14784
14783: POP
// end else
14784: GO 15015
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 6
14808: PUSH
14809: LD_INT 7
14811: PUSH
14812: LD_INT 8
14814: PUSH
14815: LD_INT 9
14817: PUSH
14818: LD_INT 10
14820: PUSH
14821: LD_INT 11
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: LD_INT 13
14829: PUSH
14830: LD_INT 14
14832: PUSH
14833: LD_INT 15
14835: PUSH
14836: LD_INT 16
14838: PUSH
14839: LD_INT 17
14841: PUSH
14842: LD_INT 18
14844: PUSH
14845: LD_INT 19
14847: PUSH
14848: LD_INT 20
14850: PUSH
14851: LD_INT 21
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_INT 23
14859: PUSH
14860: LD_INT 24
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 26
14868: PUSH
14869: LD_INT 27
14871: PUSH
14872: LD_INT 28
14874: PUSH
14875: LD_INT 29
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 35
14895: PUSH
14896: LD_INT 36
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 101
14939: PUSH
14940: LD_INT 102
14942: PUSH
14943: LD_INT 103
14945: PUSH
14946: LD_INT 104
14948: PUSH
14949: LD_INT 105
14951: PUSH
14952: LD_INT 106
14954: PUSH
14955: LD_INT 107
14957: PUSH
14958: LD_INT 108
14960: PUSH
14961: LD_INT 109
14963: PUSH
14964: LD_INT 110
14966: PUSH
14967: LD_INT 111
14969: PUSH
14970: LD_INT 112
14972: PUSH
14973: LD_INT 113
14975: PUSH
14976: LD_INT 114
14978: PUSH
14979: LD_INT 115
14981: PUSH
14982: LD_INT 116
14984: PUSH
14985: LD_INT 117
14987: PUSH
14988: LD_INT 118
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: ST_TO_ADDR
// if result then
15015: LD_VAR 0 2
15019: IFFALSE 15805
// begin normal :=  ;
15021: LD_ADDR_VAR 0 5
15025: PUSH
15026: LD_STRING 
15028: ST_TO_ADDR
// hardcore :=  ;
15029: LD_ADDR_VAR 0 6
15033: PUSH
15034: LD_STRING 
15036: ST_TO_ADDR
// active :=  ;
15037: LD_ADDR_VAR 0 7
15041: PUSH
15042: LD_STRING 
15044: ST_TO_ADDR
// for i = 1 to normalCounter do
15045: LD_ADDR_VAR 0 8
15049: PUSH
15050: DOUBLE
15051: LD_INT 1
15053: DEC
15054: ST_TO_ADDR
15055: LD_EXP 27
15059: PUSH
15060: FOR_TO
15061: IFFALSE 15162
// begin tmp := 0 ;
15063: LD_ADDR_VAR 0 3
15067: PUSH
15068: LD_STRING 0
15070: ST_TO_ADDR
// if result [ 1 ] then
15071: LD_VAR 0 2
15075: PUSH
15076: LD_INT 1
15078: ARRAY
15079: IFFALSE 15144
// if result [ 1 ] [ 1 ] = i then
15081: LD_VAR 0 2
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PUSH
15090: LD_INT 1
15092: ARRAY
15093: PUSH
15094: LD_VAR 0 8
15098: EQUAL
15099: IFFALSE 15144
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15101: LD_ADDR_VAR 0 2
15105: PUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 3
15130: PPUSH
15131: CALL_OW 1
15135: ST_TO_ADDR
// tmp := 1 ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_STRING 1
15143: ST_TO_ADDR
// end ; normal := normal & tmp ;
15144: LD_ADDR_VAR 0 5
15148: PUSH
15149: LD_VAR 0 5
15153: PUSH
15154: LD_VAR 0 3
15158: STR
15159: ST_TO_ADDR
// end ;
15160: GO 15060
15162: POP
15163: POP
// for i = 1 to hardcoreCounter do
15164: LD_ADDR_VAR 0 8
15168: PUSH
15169: DOUBLE
15170: LD_INT 1
15172: DEC
15173: ST_TO_ADDR
15174: LD_EXP 28
15178: PUSH
15179: FOR_TO
15180: IFFALSE 15285
// begin tmp := 0 ;
15182: LD_ADDR_VAR 0 3
15186: PUSH
15187: LD_STRING 0
15189: ST_TO_ADDR
// if result [ 2 ] then
15190: LD_VAR 0 2
15194: PUSH
15195: LD_INT 2
15197: ARRAY
15198: IFFALSE 15267
// if result [ 2 ] [ 1 ] = 100 + i then
15200: LD_VAR 0 2
15204: PUSH
15205: LD_INT 2
15207: ARRAY
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PUSH
15213: LD_INT 100
15215: PUSH
15216: LD_VAR 0 8
15220: PLUS
15221: EQUAL
15222: IFFALSE 15267
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15224: LD_ADDR_VAR 0 2
15228: PUSH
15229: LD_VAR 0 2
15233: PPUSH
15234: LD_INT 2
15236: PPUSH
15237: LD_VAR 0 2
15241: PUSH
15242: LD_INT 2
15244: ARRAY
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 3
15253: PPUSH
15254: CALL_OW 1
15258: ST_TO_ADDR
// tmp := 1 ;
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_STRING 1
15266: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15267: LD_ADDR_VAR 0 6
15271: PUSH
15272: LD_VAR 0 6
15276: PUSH
15277: LD_VAR 0 3
15281: STR
15282: ST_TO_ADDR
// end ;
15283: GO 15179
15285: POP
15286: POP
// if isGameLoad then
15287: LD_VAR 0 1
15291: IFFALSE 15766
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15293: LD_ADDR_VAR 0 4
15297: PUSH
15298: LD_EXP 31
15302: PUSH
15303: LD_EXP 30
15307: PUSH
15308: LD_EXP 32
15312: PUSH
15313: LD_EXP 29
15317: PUSH
15318: LD_EXP 33
15322: PUSH
15323: LD_EXP 34
15327: PUSH
15328: LD_EXP 35
15332: PUSH
15333: LD_EXP 36
15337: PUSH
15338: LD_EXP 37
15342: PUSH
15343: LD_EXP 38
15347: PUSH
15348: LD_EXP 39
15352: PUSH
15353: LD_EXP 40
15357: PUSH
15358: LD_EXP 41
15362: PUSH
15363: LD_EXP 42
15367: PUSH
15368: LD_EXP 50
15372: PUSH
15373: LD_EXP 51
15377: PUSH
15378: LD_EXP 52
15382: PUSH
15383: LD_EXP 53
15387: PUSH
15388: LD_EXP 55
15392: PUSH
15393: LD_EXP 56
15397: PUSH
15398: LD_EXP 57
15402: PUSH
15403: LD_EXP 60
15407: PUSH
15408: LD_EXP 62
15412: PUSH
15413: LD_EXP 63
15417: PUSH
15418: LD_EXP 64
15422: PUSH
15423: LD_EXP 66
15427: PUSH
15428: LD_EXP 67
15432: PUSH
15433: LD_EXP 70
15437: PUSH
15438: LD_EXP 71
15442: PUSH
15443: LD_EXP 72
15447: PUSH
15448: LD_EXP 73
15452: PUSH
15453: LD_EXP 74
15457: PUSH
15458: LD_EXP 75
15462: PUSH
15463: LD_EXP 76
15467: PUSH
15468: LD_EXP 77
15472: PUSH
15473: LD_EXP 78
15477: PUSH
15478: LD_EXP 43
15482: PUSH
15483: LD_EXP 44
15487: PUSH
15488: LD_EXP 47
15492: PUSH
15493: LD_EXP 48
15497: PUSH
15498: LD_EXP 49
15502: PUSH
15503: LD_EXP 45
15507: PUSH
15508: LD_EXP 46
15512: PUSH
15513: LD_EXP 54
15517: PUSH
15518: LD_EXP 58
15522: PUSH
15523: LD_EXP 59
15527: PUSH
15528: LD_EXP 61
15532: PUSH
15533: LD_EXP 65
15537: PUSH
15538: LD_EXP 68
15542: PUSH
15543: LD_EXP 69
15547: PUSH
15548: LD_EXP 79
15552: PUSH
15553: LD_EXP 80
15557: PUSH
15558: LD_EXP 81
15562: PUSH
15563: LD_EXP 82
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: ST_TO_ADDR
// tmp :=  ;
15624: LD_ADDR_VAR 0 3
15628: PUSH
15629: LD_STRING 
15631: ST_TO_ADDR
// for i = 1 to normalCounter do
15632: LD_ADDR_VAR 0 8
15636: PUSH
15637: DOUBLE
15638: LD_INT 1
15640: DEC
15641: ST_TO_ADDR
15642: LD_EXP 27
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15684
// begin if flags [ i ] then
15650: LD_VAR 0 4
15654: PUSH
15655: LD_VAR 0 8
15659: ARRAY
15660: IFFALSE 15682
// tmp := tmp & i & ; ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_VAR 0 3
15671: PUSH
15672: LD_VAR 0 8
15676: STR
15677: PUSH
15678: LD_STRING ;
15680: STR
15681: ST_TO_ADDR
// end ;
15682: GO 15647
15684: POP
15685: POP
// for i = 1 to hardcoreCounter do
15686: LD_ADDR_VAR 0 8
15690: PUSH
15691: DOUBLE
15692: LD_INT 1
15694: DEC
15695: ST_TO_ADDR
15696: LD_EXP 28
15700: PUSH
15701: FOR_TO
15702: IFFALSE 15748
// begin if flags [ normalCounter + i ] then
15704: LD_VAR 0 4
15708: PUSH
15709: LD_EXP 27
15713: PUSH
15714: LD_VAR 0 8
15718: PLUS
15719: ARRAY
15720: IFFALSE 15746
// tmp := tmp & ( 100 + i ) & ; ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 3
15731: PUSH
15732: LD_INT 100
15734: PUSH
15735: LD_VAR 0 8
15739: PLUS
15740: STR
15741: PUSH
15742: LD_STRING ;
15744: STR
15745: ST_TO_ADDR
// end ;
15746: GO 15701
15748: POP
15749: POP
// if tmp then
15750: LD_VAR 0 3
15754: IFFALSE 15766
// active := tmp ;
15756: LD_ADDR_VAR 0 7
15760: PUSH
15761: LD_VAR 0 3
15765: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15766: LD_STRING getStreamItemsFromMission("
15768: PUSH
15769: LD_VAR 0 5
15773: STR
15774: PUSH
15775: LD_STRING ","
15777: STR
15778: PUSH
15779: LD_VAR 0 6
15783: STR
15784: PUSH
15785: LD_STRING ","
15787: STR
15788: PUSH
15789: LD_VAR 0 7
15793: STR
15794: PUSH
15795: LD_STRING ")
15797: STR
15798: PPUSH
15799: CALL_OW 559
// end else
15803: GO 15812
// ToLua ( getStreamItemsFromMission("","","") ) ;
15805: LD_STRING getStreamItemsFromMission("","","")
15807: PPUSH
15808: CALL_OW 559
// end ;
15812: LD_VAR 0 2
15816: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15817: LD_EXP 26
15821: PUSH
15822: LD_EXP 31
15826: AND
15827: IFFALSE 15951
15829: GO 15831
15831: DISABLE
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
// begin enable ;
15836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 22
15844: PUSH
15845: LD_OWVAR 2
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 2
15856: PUSH
15857: LD_INT 34
15859: PUSH
15860: LD_INT 7
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 34
15869: PUSH
15870: LD_INT 45
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 34
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 34
15889: PUSH
15890: LD_INT 47
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: ST_TO_ADDR
// if not tmp then
15913: LD_VAR 0 2
15917: NOT
15918: IFFALSE 15922
// exit ;
15920: GO 15951
// for i in tmp do
15922: LD_ADDR_VAR 0 1
15926: PUSH
15927: LD_VAR 0 2
15931: PUSH
15932: FOR_IN
15933: IFFALSE 15949
// begin SetLives ( i , 0 ) ;
15935: LD_VAR 0 1
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: CALL_OW 234
// end ;
15947: GO 15932
15949: POP
15950: POP
// end ;
15951: PPOPN 2
15953: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15954: LD_EXP 26
15958: PUSH
15959: LD_EXP 32
15963: AND
15964: IFFALSE 16048
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
15972: PPUSH
// begin enable ;
15973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15974: LD_ADDR_VAR 0 2
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_OWVAR 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 32
15993: PUSH
15994: LD_INT 3
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if not tmp then
16010: LD_VAR 0 2
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16048
// for i in tmp do
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: FOR_IN
16030: IFFALSE 16046
// begin SetLives ( i , 0 ) ;
16032: LD_VAR 0 1
16036: PPUSH
16037: LD_INT 0
16039: PPUSH
16040: CALL_OW 234
// end ;
16044: GO 16029
16046: POP
16047: POP
// end ;
16048: PPOPN 2
16050: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16051: LD_EXP 26
16055: PUSH
16056: LD_EXP 29
16060: AND
16061: IFFALSE 16154
16063: GO 16065
16065: DISABLE
16066: LD_INT 0
16068: PPUSH
// begin enable ;
16069: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16070: LD_ADDR_VAR 0 1
16074: PUSH
16075: LD_INT 22
16077: PUSH
16078: LD_OWVAR 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: LD_INT 25
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 25
16102: PUSH
16103: LD_INT 9
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 25
16112: PUSH
16113: LD_INT 8
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PPUSH
16130: CALL_OW 69
16134: PUSH
16135: FOR_IN
16136: IFFALSE 16152
// begin SetClass ( i , 1 ) ;
16138: LD_VAR 0 1
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 336
// end ;
16150: GO 16135
16152: POP
16153: POP
// end ;
16154: PPOPN 1
16156: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16157: LD_EXP 26
16161: PUSH
16162: LD_EXP 30
16166: AND
16167: PUSH
16168: LD_OWVAR 65
16172: PUSH
16173: LD_INT 7
16175: LESS
16176: AND
16177: IFFALSE 16191
16179: GO 16181
16181: DISABLE
// begin enable ;
16182: ENABLE
// game_speed := 7 ;
16183: LD_ADDR_OWVAR 65
16187: PUSH
16188: LD_INT 7
16190: ST_TO_ADDR
// end ;
16191: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16192: LD_EXP 26
16196: PUSH
16197: LD_EXP 33
16201: AND
16202: IFFALSE 16404
16204: GO 16206
16206: DISABLE
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
16211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_INT 81
16219: PUSH
16220: LD_OWVAR 2
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: ST_TO_ADDR
// if not tmp then
16248: LD_VAR 0 3
16252: NOT
16253: IFFALSE 16257
// exit ;
16255: GO 16404
// if tmp > 5 then
16257: LD_VAR 0 3
16261: PUSH
16262: LD_INT 5
16264: GREATER
16265: IFFALSE 16277
// k := 5 else
16267: LD_ADDR_VAR 0 2
16271: PUSH
16272: LD_INT 5
16274: ST_TO_ADDR
16275: GO 16287
// k := tmp ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_VAR 0 3
16286: ST_TO_ADDR
// for i := 1 to k do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_VAR 0 2
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16402
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16305: LD_VAR 0 3
16309: PUSH
16310: LD_VAR 0 1
16314: ARRAY
16315: PPUSH
16316: LD_VAR 0 1
16320: PUSH
16321: LD_INT 4
16323: MOD
16324: PUSH
16325: LD_INT 1
16327: PLUS
16328: PPUSH
16329: CALL_OW 259
16333: PUSH
16334: LD_INT 10
16336: LESS
16337: IFFALSE 16400
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16339: LD_VAR 0 3
16343: PUSH
16344: LD_VAR 0 1
16348: ARRAY
16349: PPUSH
16350: LD_VAR 0 1
16354: PUSH
16355: LD_INT 4
16357: MOD
16358: PUSH
16359: LD_INT 1
16361: PLUS
16362: PPUSH
16363: LD_VAR 0 3
16367: PUSH
16368: LD_VAR 0 1
16372: ARRAY
16373: PPUSH
16374: LD_VAR 0 1
16378: PUSH
16379: LD_INT 4
16381: MOD
16382: PUSH
16383: LD_INT 1
16385: PLUS
16386: PPUSH
16387: CALL_OW 259
16391: PUSH
16392: LD_INT 1
16394: PLUS
16395: PPUSH
16396: CALL_OW 237
16400: GO 16302
16402: POP
16403: POP
// end ;
16404: PPOPN 3
16406: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16407: LD_EXP 26
16411: PUSH
16412: LD_EXP 34
16416: AND
16417: IFFALSE 16437
16419: GO 16421
16421: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16422: LD_INT 4
16424: PPUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_INT 0
16432: PPUSH
16433: CALL_OW 324
16437: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16438: LD_EXP 26
16442: PUSH
16443: LD_EXP 63
16447: AND
16448: IFFALSE 16468
16450: GO 16452
16452: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16453: LD_INT 19
16455: PPUSH
16456: LD_OWVAR 2
16460: PPUSH
16461: LD_INT 0
16463: PPUSH
16464: CALL_OW 324
16468: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16469: LD_EXP 26
16473: PUSH
16474: LD_EXP 35
16478: AND
16479: IFFALSE 16581
16481: GO 16483
16483: DISABLE
16484: LD_INT 0
16486: PPUSH
16487: PPUSH
// begin enable ;
16488: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16489: LD_ADDR_VAR 0 2
16493: PUSH
16494: LD_INT 22
16496: PUSH
16497: LD_OWVAR 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 34
16511: PUSH
16512: LD_INT 11
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 34
16521: PUSH
16522: LD_INT 30
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: ST_TO_ADDR
// if not tmp then
16543: LD_VAR 0 2
16547: NOT
16548: IFFALSE 16552
// exit ;
16550: GO 16581
// for i in tmp do
16552: LD_ADDR_VAR 0 1
16556: PUSH
16557: LD_VAR 0 2
16561: PUSH
16562: FOR_IN
16563: IFFALSE 16579
// begin SetLives ( i , 0 ) ;
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_INT 0
16572: PPUSH
16573: CALL_OW 234
// end ;
16577: GO 16562
16579: POP
16580: POP
// end ;
16581: PPOPN 2
16583: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16584: LD_EXP 26
16588: PUSH
16589: LD_EXP 36
16593: AND
16594: IFFALSE 16614
16596: GO 16598
16598: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16599: LD_INT 32
16601: PPUSH
16602: LD_OWVAR 2
16606: PPUSH
16607: LD_INT 0
16609: PPUSH
16610: CALL_OW 324
16614: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16615: LD_EXP 26
16619: PUSH
16620: LD_EXP 37
16624: AND
16625: IFFALSE 16806
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
16634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16635: LD_ADDR_VAR 0 2
16639: PUSH
16640: LD_INT 22
16642: PUSH
16643: LD_OWVAR 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 33
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: ST_TO_ADDR
// if not tmp then
16671: LD_VAR 0 2
16675: NOT
16676: IFFALSE 16680
// exit ;
16678: GO 16806
// side := 0 ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// for i := 1 to 8 do
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: DOUBLE
16694: LD_INT 1
16696: DEC
16697: ST_TO_ADDR
16698: LD_INT 8
16700: PUSH
16701: FOR_TO
16702: IFFALSE 16750
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16704: LD_OWVAR 2
16708: PUSH
16709: LD_VAR 0 1
16713: NONEQUAL
16714: PUSH
16715: LD_OWVAR 2
16719: PPUSH
16720: LD_VAR 0 1
16724: PPUSH
16725: CALL_OW 81
16729: PUSH
16730: LD_INT 2
16732: EQUAL
16733: AND
16734: IFFALSE 16748
// begin side := i ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_VAR 0 1
16745: ST_TO_ADDR
// break ;
16746: GO 16750
// end ;
16748: GO 16701
16750: POP
16751: POP
// if not side then
16752: LD_VAR 0 3
16756: NOT
16757: IFFALSE 16761
// exit ;
16759: GO 16806
// for i := 1 to tmp do
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: DOUBLE
16767: LD_INT 1
16769: DEC
16770: ST_TO_ADDR
16771: LD_VAR 0 2
16775: PUSH
16776: FOR_TO
16777: IFFALSE 16804
// if Prob ( 60 ) then
16779: LD_INT 60
16781: PPUSH
16782: CALL_OW 13
16786: IFFALSE 16802
// SetSide ( i , side ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: CALL_OW 235
16802: GO 16776
16804: POP
16805: POP
// end ;
16806: PPOPN 3
16808: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16809: LD_EXP 26
16813: PUSH
16814: LD_EXP 39
16818: AND
16819: IFFALSE 16938
16821: GO 16823
16823: DISABLE
16824: LD_INT 0
16826: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16827: LD_ADDR_VAR 0 1
16831: PUSH
16832: LD_INT 22
16834: PUSH
16835: LD_OWVAR 2
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 21
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: LD_INT 23
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: PUSH
16881: FOR_IN
16882: IFFALSE 16936
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16884: LD_VAR 0 1
16888: PPUSH
16889: CALL_OW 257
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 2
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 4
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: IN
16912: IFFALSE 16934
// SetClass ( un , rand ( 1 , 4 ) ) ;
16914: LD_VAR 0 1
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: LD_INT 4
16924: PPUSH
16925: CALL_OW 12
16929: PPUSH
16930: CALL_OW 336
16934: GO 16881
16936: POP
16937: POP
// end ;
16938: PPOPN 1
16940: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16941: LD_EXP 26
16945: PUSH
16946: LD_EXP 38
16950: AND
16951: IFFALSE 17030
16953: GO 16955
16955: DISABLE
16956: LD_INT 0
16958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16959: LD_ADDR_VAR 0 1
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_OWVAR 2
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 21
16978: PUSH
16979: LD_INT 3
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: ST_TO_ADDR
// if not tmp then
16995: LD_VAR 0 1
16999: NOT
17000: IFFALSE 17004
// exit ;
17002: GO 17030
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17004: LD_VAR 0 1
17008: PUSH
17009: LD_INT 1
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 12
17021: ARRAY
17022: PPUSH
17023: LD_INT 100
17025: PPUSH
17026: CALL_OW 234
// end ;
17030: PPOPN 1
17032: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17033: LD_EXP 26
17037: PUSH
17038: LD_EXP 40
17042: AND
17043: IFFALSE 17141
17045: GO 17047
17047: DISABLE
17048: LD_INT 0
17050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17051: LD_ADDR_VAR 0 1
17055: PUSH
17056: LD_INT 22
17058: PUSH
17059: LD_OWVAR 2
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: ST_TO_ADDR
// if not tmp then
17087: LD_VAR 0 1
17091: NOT
17092: IFFALSE 17096
// exit ;
17094: GO 17141
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17096: LD_VAR 0 1
17100: PUSH
17101: LD_INT 1
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 12
17113: ARRAY
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: LD_INT 4
17120: PPUSH
17121: CALL_OW 12
17125: PPUSH
17126: LD_INT 3000
17128: PPUSH
17129: LD_INT 9000
17131: PPUSH
17132: CALL_OW 12
17136: PPUSH
17137: CALL_OW 492
// end ;
17141: PPOPN 1
17143: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17144: LD_EXP 26
17148: PUSH
17149: LD_EXP 41
17153: AND
17154: IFFALSE 17174
17156: GO 17158
17158: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17159: LD_INT 1
17161: PPUSH
17162: LD_OWVAR 2
17166: PPUSH
17167: LD_INT 0
17169: PPUSH
17170: CALL_OW 324
17174: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17175: LD_EXP 26
17179: PUSH
17180: LD_EXP 42
17184: AND
17185: IFFALSE 17268
17187: GO 17189
17189: DISABLE
17190: LD_INT 0
17192: PPUSH
17193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_INT 22
17201: PUSH
17202: LD_OWVAR 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 21
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 2
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17268
// for i in tmp do
17239: LD_ADDR_VAR 0 1
17243: PUSH
17244: LD_VAR 0 2
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17266
// SetBLevel ( i , 10 ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 10
17259: PPUSH
17260: CALL_OW 241
17264: GO 17249
17266: POP
17267: POP
// end ;
17268: PPOPN 2
17270: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17271: LD_EXP 26
17275: PUSH
17276: LD_EXP 43
17280: AND
17281: IFFALSE 17392
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_INT 22
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 25
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 3
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17392
// un := tmp [ rand ( 1 , tmp ) ] ;
17336: LD_ADDR_VAR 0 2
17340: PUSH
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 1
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: CALL_OW 12
17358: ARRAY
17359: ST_TO_ADDR
// if Crawls ( un ) then
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 318
17369: IFFALSE 17380
// ComWalk ( un ) ;
17371: LD_VAR 0 2
17375: PPUSH
17376: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17380: LD_VAR 0 2
17384: PPUSH
17385: LD_INT 5
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: PPOPN 3
17394: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17395: LD_EXP 26
17399: PUSH
17400: LD_EXP 44
17404: AND
17405: PUSH
17406: LD_OWVAR 67
17410: PUSH
17411: LD_INT 4
17413: LESS
17414: AND
17415: IFFALSE 17434
17417: GO 17419
17419: DISABLE
// begin Difficulty := Difficulty + 1 ;
17420: LD_ADDR_OWVAR 67
17424: PUSH
17425: LD_OWVAR 67
17429: PUSH
17430: LD_INT 1
17432: PLUS
17433: ST_TO_ADDR
// end ;
17434: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17435: LD_EXP 26
17439: PUSH
17440: LD_EXP 45
17444: AND
17445: IFFALSE 17548
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
// begin for i := 1 to 5 do
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: DOUBLE
17459: LD_INT 1
17461: DEC
17462: ST_TO_ADDR
17463: LD_INT 5
17465: PUSH
17466: FOR_TO
17467: IFFALSE 17546
// begin uc_nation := nation_nature ;
17469: LD_ADDR_OWVAR 21
17473: PUSH
17474: LD_INT 0
17476: ST_TO_ADDR
// uc_side := 0 ;
17477: LD_ADDR_OWVAR 20
17481: PUSH
17482: LD_INT 0
17484: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17485: LD_ADDR_OWVAR 29
17489: PUSH
17490: LD_INT 12
17492: PUSH
17493: LD_INT 12
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: ST_TO_ADDR
// hc_agressivity := 20 ;
17500: LD_ADDR_OWVAR 35
17504: PUSH
17505: LD_INT 20
17507: ST_TO_ADDR
// hc_class := class_tiger ;
17508: LD_ADDR_OWVAR 28
17512: PUSH
17513: LD_INT 14
17515: ST_TO_ADDR
// hc_gallery :=  ;
17516: LD_ADDR_OWVAR 33
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hc_name :=  ;
17524: LD_ADDR_OWVAR 26
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17532: CALL_OW 44
17536: PPUSH
17537: LD_INT 0
17539: PPUSH
17540: CALL_OW 51
// end ;
17544: GO 17466
17546: POP
17547: POP
// end ;
17548: PPOPN 1
17550: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17551: LD_EXP 26
17555: PUSH
17556: LD_EXP 46
17560: AND
17561: IFFALSE 17570
17563: GO 17565
17565: DISABLE
// StreamSibBomb ;
17566: CALL 17571 0 0
17570: END
// export function StreamSibBomb ; var i , x , y ; begin
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
// result := false ;
17577: LD_ADDR_VAR 0 1
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// for i := 1 to 16 do
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: DOUBLE
17591: LD_INT 1
17593: DEC
17594: ST_TO_ADDR
17595: LD_INT 16
17597: PUSH
17598: FOR_TO
17599: IFFALSE 17798
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17601: LD_ADDR_VAR 0 3
17605: PUSH
17606: LD_INT 10
17608: PUSH
17609: LD_INT 20
17611: PUSH
17612: LD_INT 30
17614: PUSH
17615: LD_INT 40
17617: PUSH
17618: LD_INT 50
17620: PUSH
17621: LD_INT 60
17623: PUSH
17624: LD_INT 70
17626: PUSH
17627: LD_INT 80
17629: PUSH
17630: LD_INT 90
17632: PUSH
17633: LD_INT 100
17635: PUSH
17636: LD_INT 110
17638: PUSH
17639: LD_INT 120
17641: PUSH
17642: LD_INT 130
17644: PUSH
17645: LD_INT 140
17647: PUSH
17648: LD_INT 150
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 15
17673: PPUSH
17674: CALL_OW 12
17678: ARRAY
17679: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_INT 10
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: LD_INT 30
17693: PUSH
17694: LD_INT 40
17696: PUSH
17697: LD_INT 50
17699: PUSH
17700: LD_INT 60
17702: PUSH
17703: LD_INT 70
17705: PUSH
17706: LD_INT 80
17708: PUSH
17709: LD_INT 90
17711: PUSH
17712: LD_INT 100
17714: PUSH
17715: LD_INT 110
17717: PUSH
17718: LD_INT 120
17720: PUSH
17721: LD_INT 130
17723: PUSH
17724: LD_INT 140
17726: PUSH
17727: LD_INT 150
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 15
17752: PPUSH
17753: CALL_OW 12
17757: ARRAY
17758: ST_TO_ADDR
// if ValidHex ( x , y ) then
17759: LD_VAR 0 3
17763: PPUSH
17764: LD_VAR 0 4
17768: PPUSH
17769: CALL_OW 488
17773: IFFALSE 17796
// begin result := [ x , y ] ;
17775: LD_ADDR_VAR 0 1
17779: PUSH
17780: LD_VAR 0 3
17784: PUSH
17785: LD_VAR 0 4
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: ST_TO_ADDR
// break ;
17794: GO 17798
// end ; end ;
17796: GO 17598
17798: POP
17799: POP
// if result then
17800: LD_VAR 0 1
17804: IFFALSE 17864
// begin ToLua ( playSibBomb() ) ;
17806: LD_STRING playSibBomb()
17808: PPUSH
17809: CALL_OW 559
// wait ( 0 0$14 ) ;
17813: LD_INT 490
17815: PPUSH
17816: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17820: LD_VAR 0 1
17824: PUSH
17825: LD_INT 1
17827: ARRAY
17828: PPUSH
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 2
17836: ARRAY
17837: PPUSH
17838: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17842: LD_VAR 0 1
17846: PUSH
17847: LD_INT 1
17849: ARRAY
17850: PPUSH
17851: LD_VAR 0 1
17855: PUSH
17856: LD_INT 2
17858: ARRAY
17859: PPUSH
17860: CALL_OW 429
// end ; end ;
17864: LD_VAR 0 1
17868: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17869: LD_EXP 26
17873: PUSH
17874: LD_EXP 48
17878: AND
17879: IFFALSE 17891
17881: GO 17883
17883: DISABLE
// YouLost (  ) ;
17884: LD_STRING 
17886: PPUSH
17887: CALL_OW 104
17891: END
// every 0 0$1 trigger StreamModeActive and sFog do
17892: LD_EXP 26
17896: PUSH
17897: LD_EXP 47
17901: AND
17902: IFFALSE 17916
17904: GO 17906
17906: DISABLE
// FogOff ( your_side ) ;
17907: LD_OWVAR 2
17911: PPUSH
17912: CALL_OW 344
17916: END
// every 0 0$1 trigger StreamModeActive and sSun do
17917: LD_EXP 26
17921: PUSH
17922: LD_EXP 49
17926: AND
17927: IFFALSE 17955
17929: GO 17931
17931: DISABLE
// begin solar_recharge_percent := 0 ;
17932: LD_ADDR_OWVAR 79
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17940: LD_INT 10500
17942: PPUSH
17943: CALL_OW 67
// solar_recharge_percent := 100 ;
17947: LD_ADDR_OWVAR 79
17951: PUSH
17952: LD_INT 100
17954: ST_TO_ADDR
// end ;
17955: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17956: LD_EXP 26
17960: PUSH
17961: LD_EXP 50
17965: AND
17966: IFFALSE 18205
17968: GO 17970
17970: DISABLE
17971: LD_INT 0
17973: PPUSH
17974: PPUSH
17975: PPUSH
// begin tmp := [ ] ;
17976: LD_ADDR_VAR 0 3
17980: PUSH
17981: EMPTY
17982: ST_TO_ADDR
// for i := 1 to 6 do
17983: LD_ADDR_VAR 0 1
17987: PUSH
17988: DOUBLE
17989: LD_INT 1
17991: DEC
17992: ST_TO_ADDR
17993: LD_INT 6
17995: PUSH
17996: FOR_TO
17997: IFFALSE 18102
// begin uc_nation := nation_nature ;
17999: LD_ADDR_OWVAR 21
18003: PUSH
18004: LD_INT 0
18006: ST_TO_ADDR
// uc_side := 0 ;
18007: LD_ADDR_OWVAR 20
18011: PUSH
18012: LD_INT 0
18014: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18015: LD_ADDR_OWVAR 29
18019: PUSH
18020: LD_INT 12
18022: PUSH
18023: LD_INT 12
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: ST_TO_ADDR
// hc_agressivity := 20 ;
18030: LD_ADDR_OWVAR 35
18034: PUSH
18035: LD_INT 20
18037: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18038: LD_ADDR_OWVAR 28
18042: PUSH
18043: LD_INT 17
18045: ST_TO_ADDR
// hc_gallery :=  ;
18046: LD_ADDR_OWVAR 33
18050: PUSH
18051: LD_STRING 
18053: ST_TO_ADDR
// hc_name :=  ;
18054: LD_ADDR_OWVAR 26
18058: PUSH
18059: LD_STRING 
18061: ST_TO_ADDR
// un := CreateHuman ;
18062: LD_ADDR_VAR 0 2
18066: PUSH
18067: CALL_OW 44
18071: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 51
// tmp := tmp ^ un ;
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: LD_VAR 0 3
18093: PUSH
18094: LD_VAR 0 2
18098: ADD
18099: ST_TO_ADDR
// end ;
18100: GO 17996
18102: POP
18103: POP
// repeat wait ( 0 0$1 ) ;
18104: LD_INT 35
18106: PPUSH
18107: CALL_OW 67
// for un in tmp do
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_VAR 0 3
18120: PUSH
18121: FOR_IN
18122: IFFALSE 18196
// begin if IsDead ( un ) then
18124: LD_VAR 0 2
18128: PPUSH
18129: CALL_OW 301
18133: IFFALSE 18153
// begin tmp := tmp diff un ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_VAR 0 3
18144: PUSH
18145: LD_VAR 0 2
18149: DIFF
18150: ST_TO_ADDR
// continue ;
18151: GO 18121
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_INT 3
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_INT 0
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 69
18179: PPUSH
18180: LD_VAR 0 2
18184: PPUSH
18185: CALL_OW 74
18189: PPUSH
18190: CALL_OW 115
// end ;
18194: GO 18121
18196: POP
18197: POP
// until not tmp ;
18198: LD_VAR 0 3
18202: NOT
18203: IFFALSE 18104
// end ;
18205: PPOPN 3
18207: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18208: LD_EXP 26
18212: PUSH
18213: LD_EXP 51
18217: AND
18218: IFFALSE 18272
18220: GO 18222
18222: DISABLE
// begin ToLua ( displayTroll(); ) ;
18223: LD_STRING displayTroll();
18225: PPUSH
18226: CALL_OW 559
// wait ( 3 3$00 ) ;
18230: LD_INT 6300
18232: PPUSH
18233: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18237: LD_STRING hideTroll();
18239: PPUSH
18240: CALL_OW 559
// wait ( 1 1$00 ) ;
18244: LD_INT 2100
18246: PPUSH
18247: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18251: LD_STRING displayTroll();
18253: PPUSH
18254: CALL_OW 559
// wait ( 1 1$00 ) ;
18258: LD_INT 2100
18260: PPUSH
18261: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18265: LD_STRING hideTroll();
18267: PPUSH
18268: CALL_OW 559
// end ;
18272: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18273: LD_EXP 26
18277: PUSH
18278: LD_EXP 52
18282: AND
18283: IFFALSE 18346
18285: GO 18287
18287: DISABLE
18288: LD_INT 0
18290: PPUSH
// begin p := 0 ;
18291: LD_ADDR_VAR 0 1
18295: PUSH
18296: LD_INT 0
18298: ST_TO_ADDR
// repeat game_speed := 1 ;
18299: LD_ADDR_OWVAR 65
18303: PUSH
18304: LD_INT 1
18306: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18307: LD_INT 35
18309: PPUSH
18310: CALL_OW 67
// p := p + 1 ;
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_VAR 0 1
18323: PUSH
18324: LD_INT 1
18326: PLUS
18327: ST_TO_ADDR
// until p >= 60 ;
18328: LD_VAR 0 1
18332: PUSH
18333: LD_INT 60
18335: GREATEREQUAL
18336: IFFALSE 18299
// game_speed := 4 ;
18338: LD_ADDR_OWVAR 65
18342: PUSH
18343: LD_INT 4
18345: ST_TO_ADDR
// end ;
18346: PPOPN 1
18348: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18349: LD_EXP 26
18353: PUSH
18354: LD_EXP 53
18358: AND
18359: IFFALSE 18505
18361: GO 18363
18363: DISABLE
18364: LD_INT 0
18366: PPUSH
18367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18368: LD_ADDR_VAR 0 1
18372: PUSH
18373: LD_INT 22
18375: PUSH
18376: LD_OWVAR 2
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 30
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not depot then
18422: LD_VAR 0 1
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18505
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18431: LD_ADDR_VAR 0 2
18435: PUSH
18436: LD_VAR 0 1
18440: PUSH
18441: LD_INT 1
18443: PPUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 12
18453: ARRAY
18454: PPUSH
18455: CALL_OW 274
18459: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: LD_INT 0
18470: PPUSH
18471: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18475: LD_VAR 0 2
18479: PPUSH
18480: LD_INT 2
18482: PPUSH
18483: LD_INT 0
18485: PPUSH
18486: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_INT 3
18497: PPUSH
18498: LD_INT 0
18500: PPUSH
18501: CALL_OW 277
// end ;
18505: PPOPN 2
18507: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18508: LD_EXP 26
18512: PUSH
18513: LD_EXP 54
18517: AND
18518: IFFALSE 18615
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18526: LD_ADDR_VAR 0 1
18530: PUSH
18531: LD_INT 22
18533: PUSH
18534: LD_OWVAR 2
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 21
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: LD_INT 23
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL_OW 69
18579: ST_TO_ADDR
// if not tmp then
18580: LD_VAR 0 1
18584: NOT
18585: IFFALSE 18589
// exit ;
18587: GO 18615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18589: LD_VAR 0 1
18593: PUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: PPUSH
18608: LD_INT 200
18610: PPUSH
18611: CALL_OW 234
// end ;
18615: PPOPN 1
18617: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18618: LD_EXP 26
18622: PUSH
18623: LD_EXP 55
18627: AND
18628: IFFALSE 18707
18630: GO 18632
18632: DISABLE
18633: LD_INT 0
18635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 21
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: ST_TO_ADDR
// if not tmp then
18672: LD_VAR 0 1
18676: NOT
18677: IFFALSE 18681
// exit ;
18679: GO 18707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 1
18688: PPUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 60
18702: PPUSH
18703: CALL_OW 234
// end ;
18707: PPOPN 1
18709: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18710: LD_EXP 26
18714: PUSH
18715: LD_EXP 56
18719: AND
18720: IFFALSE 18819
18722: GO 18724
18724: DISABLE
18725: LD_INT 0
18727: PPUSH
18728: PPUSH
// begin enable ;
18729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: LD_INT 22
18737: PUSH
18738: LD_OWVAR 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 61
18749: PUSH
18750: EMPTY
18751: LIST
18752: PUSH
18753: LD_INT 33
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 1
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18819
// for i in tmp do
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: FOR_IN
18793: IFFALSE 18817
// if IsControledBy ( i ) then
18795: LD_VAR 0 2
18799: PPUSH
18800: CALL_OW 312
18804: IFFALSE 18815
// ComUnlink ( i ) ;
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL_OW 136
18815: GO 18792
18817: POP
18818: POP
// end ;
18819: PPOPN 2
18821: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18822: LD_EXP 26
18826: PUSH
18827: LD_EXP 57
18831: AND
18832: IFFALSE 18972
18834: GO 18836
18836: DISABLE
18837: LD_INT 0
18839: PPUSH
18840: PPUSH
// begin ToLua ( displayPowell(); ) ;
18841: LD_STRING displayPowell();
18843: PPUSH
18844: CALL_OW 559
// uc_side := 0 ;
18848: LD_ADDR_OWVAR 20
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
// uc_nation := 2 ;
18856: LD_ADDR_OWVAR 21
18860: PUSH
18861: LD_INT 2
18863: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18864: LD_ADDR_OWVAR 37
18868: PUSH
18869: LD_INT 14
18871: ST_TO_ADDR
// vc_engine := engine_siberite ;
18872: LD_ADDR_OWVAR 39
18876: PUSH
18877: LD_INT 3
18879: ST_TO_ADDR
// vc_control := control_apeman ;
18880: LD_ADDR_OWVAR 38
18884: PUSH
18885: LD_INT 5
18887: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18888: LD_ADDR_OWVAR 40
18892: PUSH
18893: LD_INT 29
18895: ST_TO_ADDR
// un := CreateVehicle ;
18896: LD_ADDR_VAR 0 2
18900: PUSH
18901: CALL_OW 45
18905: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18906: LD_VAR 0 2
18910: PPUSH
18911: LD_INT 1
18913: PPUSH
18914: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18918: LD_INT 35
18920: PPUSH
18921: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18925: LD_VAR 0 2
18929: PPUSH
18930: LD_INT 22
18932: PUSH
18933: LD_OWVAR 2
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PPUSH
18942: CALL_OW 69
18946: PPUSH
18947: LD_VAR 0 2
18951: PPUSH
18952: CALL_OW 74
18956: PPUSH
18957: CALL_OW 115
// until IsDead ( un ) ;
18961: LD_VAR 0 2
18965: PPUSH
18966: CALL_OW 301
18970: IFFALSE 18918
// end ;
18972: PPOPN 2
18974: END
// every 0 0$1 trigger StreamModeActive and sStu do
18975: LD_EXP 26
18979: PUSH
18980: LD_EXP 65
18984: AND
18985: IFFALSE 19001
18987: GO 18989
18989: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18990: LD_STRING displayStucuk();
18992: PPUSH
18993: CALL_OW 559
// ResetFog ;
18997: CALL_OW 335
// end ;
19001: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19002: LD_EXP 26
19006: PUSH
19007: LD_EXP 58
19011: AND
19012: IFFALSE 19153
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_OWVAR 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 21
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: ST_TO_ADDR
// if not tmp then
19057: LD_VAR 0 2
19061: NOT
19062: IFFALSE 19066
// exit ;
19064: GO 19153
// un := tmp [ rand ( 1 , tmp ) ] ;
19066: LD_ADDR_VAR 0 1
19070: PUSH
19071: LD_VAR 0 2
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_VAR 0 2
19083: PPUSH
19084: CALL_OW 12
19088: ARRAY
19089: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19090: LD_VAR 0 1
19094: PPUSH
19095: LD_INT 0
19097: PPUSH
19098: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19102: LD_VAR 0 1
19106: PPUSH
19107: LD_OWVAR 3
19111: PUSH
19112: LD_VAR 0 1
19116: DIFF
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 74
19127: PPUSH
19128: CALL_OW 115
// wait ( 0 0$20 ) ;
19132: LD_INT 700
19134: PPUSH
19135: CALL_OW 67
// SetSide ( un , your_side ) ;
19139: LD_VAR 0 1
19143: PPUSH
19144: LD_OWVAR 2
19148: PPUSH
19149: CALL_OW 235
// end ;
19153: PPOPN 2
19155: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19156: LD_EXP 26
19160: PUSH
19161: LD_EXP 59
19165: AND
19166: IFFALSE 19272
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_OWVAR 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 30
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 30
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 69
19227: ST_TO_ADDR
// if not depot then
19228: LD_VAR 0 1
19232: NOT
19233: IFFALSE 19237
// exit ;
19235: GO 19272
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19237: LD_VAR 0 1
19241: PUSH
19242: LD_INT 1
19244: ARRAY
19245: PPUSH
19246: CALL_OW 250
19250: PPUSH
19251: LD_VAR 0 1
19255: PUSH
19256: LD_INT 1
19258: ARRAY
19259: PPUSH
19260: CALL_OW 251
19264: PPUSH
19265: LD_INT 70
19267: PPUSH
19268: CALL_OW 495
// end ;
19272: PPOPN 1
19274: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19275: LD_EXP 26
19279: PUSH
19280: LD_EXP 60
19284: AND
19285: IFFALSE 19496
19287: GO 19289
19289: DISABLE
19290: LD_INT 0
19292: PPUSH
19293: PPUSH
19294: PPUSH
19295: PPUSH
19296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19297: LD_ADDR_VAR 0 5
19301: PUSH
19302: LD_INT 22
19304: PUSH
19305: LD_OWVAR 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ST_TO_ADDR
// if not tmp then
19333: LD_VAR 0 5
19337: NOT
19338: IFFALSE 19342
// exit ;
19340: GO 19496
// for i in tmp do
19342: LD_ADDR_VAR 0 1
19346: PUSH
19347: LD_VAR 0 5
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19494
// begin d := rand ( 0 , 5 ) ;
19355: LD_ADDR_VAR 0 4
19359: PUSH
19360: LD_INT 0
19362: PPUSH
19363: LD_INT 5
19365: PPUSH
19366: CALL_OW 12
19370: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19371: LD_ADDR_VAR 0 2
19375: PUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 250
19385: PPUSH
19386: LD_VAR 0 4
19390: PPUSH
19391: LD_INT 3
19393: PPUSH
19394: LD_INT 12
19396: PPUSH
19397: CALL_OW 12
19401: PPUSH
19402: CALL_OW 272
19406: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19407: LD_ADDR_VAR 0 3
19411: PUSH
19412: LD_VAR 0 1
19416: PPUSH
19417: CALL_OW 251
19421: PPUSH
19422: LD_VAR 0 4
19426: PPUSH
19427: LD_INT 3
19429: PPUSH
19430: LD_INT 12
19432: PPUSH
19433: CALL_OW 12
19437: PPUSH
19438: CALL_OW 273
19442: ST_TO_ADDR
// if ValidHex ( x , y ) then
19443: LD_VAR 0 2
19447: PPUSH
19448: LD_VAR 0 3
19452: PPUSH
19453: CALL_OW 488
19457: IFFALSE 19492
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19459: LD_VAR 0 1
19463: PPUSH
19464: LD_VAR 0 2
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: LD_INT 3
19476: PPUSH
19477: LD_INT 6
19479: PPUSH
19480: CALL_OW 12
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: CALL_OW 483
// end ;
19492: GO 19352
19494: POP
19495: POP
// end ;
19496: PPOPN 5
19498: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19499: LD_EXP 26
19503: PUSH
19504: LD_EXP 61
19508: AND
19509: IFFALSE 19603
19511: GO 19513
19513: DISABLE
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_INT 22
19525: PUSH
19526: LD_OWVAR 2
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 32
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 21
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: PPUSH
19560: CALL_OW 69
19564: ST_TO_ADDR
// if not tmp then
19565: LD_VAR 0 2
19569: NOT
19570: IFFALSE 19574
// exit ;
19572: GO 19603
// for i in tmp do
19574: LD_ADDR_VAR 0 1
19578: PUSH
19579: LD_VAR 0 2
19583: PUSH
19584: FOR_IN
19585: IFFALSE 19601
// SetFuel ( i , 0 ) ;
19587: LD_VAR 0 1
19591: PPUSH
19592: LD_INT 0
19594: PPUSH
19595: CALL_OW 240
19599: GO 19584
19601: POP
19602: POP
// end ;
19603: PPOPN 2
19605: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19606: LD_EXP 26
19610: PUSH
19611: LD_EXP 62
19615: AND
19616: IFFALSE 19682
19618: GO 19620
19620: DISABLE
19621: LD_INT 0
19623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_OWVAR 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 30
19643: PUSH
19644: LD_INT 29
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 69
19659: ST_TO_ADDR
// if not tmp then
19660: LD_VAR 0 1
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19682
// DestroyUnit ( tmp [ 1 ] ) ;
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: PPUSH
19678: CALL_OW 65
// end ;
19682: PPOPN 1
19684: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19685: LD_EXP 26
19689: PUSH
19690: LD_EXP 64
19694: AND
19695: IFFALSE 19824
19697: GO 19699
19699: DISABLE
19700: LD_INT 0
19702: PPUSH
// begin uc_side := 0 ;
19703: LD_ADDR_OWVAR 20
19707: PUSH
19708: LD_INT 0
19710: ST_TO_ADDR
// uc_nation := nation_arabian ;
19711: LD_ADDR_OWVAR 21
19715: PUSH
19716: LD_INT 2
19718: ST_TO_ADDR
// hc_gallery :=  ;
19719: LD_ADDR_OWVAR 33
19723: PUSH
19724: LD_STRING 
19726: ST_TO_ADDR
// hc_name :=  ;
19727: LD_ADDR_OWVAR 26
19731: PUSH
19732: LD_STRING 
19734: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19735: LD_INT 1
19737: PPUSH
19738: LD_INT 11
19740: PPUSH
19741: LD_INT 10
19743: PPUSH
19744: CALL_OW 380
// un := CreateHuman ;
19748: LD_ADDR_VAR 0 1
19752: PUSH
19753: CALL_OW 44
19757: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19770: LD_INT 35
19772: PPUSH
19773: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_INT 22
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PPUSH
19794: CALL_OW 69
19798: PPUSH
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 74
19808: PPUSH
19809: CALL_OW 115
// until IsDead ( un ) ;
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 301
19822: IFFALSE 19770
// end ;
19824: PPOPN 1
19826: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19827: LD_EXP 26
19831: PUSH
19832: LD_EXP 66
19836: AND
19837: IFFALSE 19849
19839: GO 19841
19841: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19842: LD_STRING earthquake(getX(game), 0, 32)
19844: PPUSH
19845: CALL_OW 559
19849: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19850: LD_EXP 26
19854: PUSH
19855: LD_EXP 67
19859: AND
19860: IFFALSE 19951
19862: GO 19864
19864: DISABLE
19865: LD_INT 0
19867: PPUSH
// begin enable ;
19868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19869: LD_ADDR_VAR 0 1
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_OWVAR 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 21
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 33
19898: PUSH
19899: LD_INT 3
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: PPUSH
19911: CALL_OW 69
19915: ST_TO_ADDR
// if not tmp then
19916: LD_VAR 0 1
19920: NOT
19921: IFFALSE 19925
// exit ;
19923: GO 19951
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19925: LD_VAR 0 1
19929: PUSH
19930: LD_INT 1
19932: PPUSH
19933: LD_VAR 0 1
19937: PPUSH
19938: CALL_OW 12
19942: ARRAY
19943: PPUSH
19944: LD_INT 1
19946: PPUSH
19947: CALL_OW 234
// end ;
19951: PPOPN 1
19953: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19954: LD_EXP 26
19958: PUSH
19959: LD_EXP 68
19963: AND
19964: IFFALSE 20105
19966: GO 19968
19968: DISABLE
19969: LD_INT 0
19971: PPUSH
19972: PPUSH
19973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_INT 22
19981: PUSH
19982: LD_OWVAR 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 25
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PPUSH
20005: CALL_OW 69
20009: ST_TO_ADDR
// if not tmp then
20010: LD_VAR 0 3
20014: NOT
20015: IFFALSE 20019
// exit ;
20017: GO 20105
// un := tmp [ rand ( 1 , tmp ) ] ;
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 1
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: CALL_OW 12
20041: ARRAY
20042: ST_TO_ADDR
// if Crawls ( un ) then
20043: LD_VAR 0 2
20047: PPUSH
20048: CALL_OW 318
20052: IFFALSE 20063
// ComWalk ( un ) ;
20054: LD_VAR 0 2
20058: PPUSH
20059: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20063: LD_VAR 0 2
20067: PPUSH
20068: LD_INT 9
20070: PPUSH
20071: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20075: LD_INT 28
20077: PPUSH
20078: LD_OWVAR 2
20082: PPUSH
20083: LD_INT 2
20085: PPUSH
20086: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20090: LD_INT 29
20092: PPUSH
20093: LD_OWVAR 2
20097: PPUSH
20098: LD_INT 2
20100: PPUSH
20101: CALL_OW 322
// end ;
20105: PPOPN 3
20107: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20108: LD_EXP 26
20112: PUSH
20113: LD_EXP 69
20117: AND
20118: IFFALSE 20229
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
20127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20128: LD_ADDR_VAR 0 3
20132: PUSH
20133: LD_INT 22
20135: PUSH
20136: LD_OWVAR 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 25
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: ST_TO_ADDR
// if not tmp then
20164: LD_VAR 0 3
20168: NOT
20169: IFFALSE 20173
// exit ;
20171: GO 20229
// un := tmp [ rand ( 1 , tmp ) ] ;
20173: LD_ADDR_VAR 0 2
20177: PUSH
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 1
20185: PPUSH
20186: LD_VAR 0 3
20190: PPUSH
20191: CALL_OW 12
20195: ARRAY
20196: ST_TO_ADDR
// if Crawls ( un ) then
20197: LD_VAR 0 2
20201: PPUSH
20202: CALL_OW 318
20206: IFFALSE 20217
// ComWalk ( un ) ;
20208: LD_VAR 0 2
20212: PPUSH
20213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20217: LD_VAR 0 2
20221: PPUSH
20222: LD_INT 8
20224: PPUSH
20225: CALL_OW 336
// end ;
20229: PPOPN 3
20231: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20232: LD_EXP 26
20236: PUSH
20237: LD_EXP 70
20241: AND
20242: IFFALSE 20386
20244: GO 20246
20246: DISABLE
20247: LD_INT 0
20249: PPUSH
20250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 34
20283: PUSH
20284: LD_INT 12
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 34
20293: PUSH
20294: LD_INT 51
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 34
20303: PUSH
20304: LD_INT 32
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: PPUSH
20322: CALL_OW 69
20326: ST_TO_ADDR
// if not tmp then
20327: LD_VAR 0 2
20331: NOT
20332: IFFALSE 20336
// exit ;
20334: GO 20386
// for i in tmp do
20336: LD_ADDR_VAR 0 1
20340: PUSH
20341: LD_VAR 0 2
20345: PUSH
20346: FOR_IN
20347: IFFALSE 20384
// if GetCargo ( i , mat_artifact ) = 0 then
20349: LD_VAR 0 1
20353: PPUSH
20354: LD_INT 4
20356: PPUSH
20357: CALL_OW 289
20361: PUSH
20362: LD_INT 0
20364: EQUAL
20365: IFFALSE 20382
// SetCargo ( i , mat_siberit , 100 ) ;
20367: LD_VAR 0 1
20371: PPUSH
20372: LD_INT 3
20374: PPUSH
20375: LD_INT 100
20377: PPUSH
20378: CALL_OW 290
20382: GO 20346
20384: POP
20385: POP
// end ;
20386: PPOPN 2
20388: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20389: LD_EXP 26
20393: PUSH
20394: LD_EXP 71
20398: AND
20399: IFFALSE 20582
20401: GO 20403
20403: DISABLE
20404: LD_INT 0
20406: PPUSH
20407: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_OWVAR 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: ST_TO_ADDR
// if not tmp then
20430: LD_VAR 0 2
20434: NOT
20435: IFFALSE 20439
// exit ;
20437: GO 20582
// for i := 1 to 2 do
20439: LD_ADDR_VAR 0 1
20443: PUSH
20444: DOUBLE
20445: LD_INT 1
20447: DEC
20448: ST_TO_ADDR
20449: LD_INT 2
20451: PUSH
20452: FOR_TO
20453: IFFALSE 20580
// begin uc_side := your_side ;
20455: LD_ADDR_OWVAR 20
20459: PUSH
20460: LD_OWVAR 2
20464: ST_TO_ADDR
// uc_nation := nation_american ;
20465: LD_ADDR_OWVAR 21
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// vc_chassis := us_morphling ;
20473: LD_ADDR_OWVAR 37
20477: PUSH
20478: LD_INT 5
20480: ST_TO_ADDR
// vc_engine := engine_siberite ;
20481: LD_ADDR_OWVAR 39
20485: PUSH
20486: LD_INT 3
20488: ST_TO_ADDR
// vc_control := control_computer ;
20489: LD_ADDR_OWVAR 38
20493: PUSH
20494: LD_INT 3
20496: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20497: LD_ADDR_OWVAR 40
20501: PUSH
20502: LD_INT 10
20504: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20505: LD_VAR 0 2
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: CALL_OW 310
20518: NOT
20519: IFFALSE 20566
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20521: CALL_OW 45
20525: PPUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 1
20533: ARRAY
20534: PPUSH
20535: CALL_OW 250
20539: PPUSH
20540: LD_VAR 0 2
20544: PUSH
20545: LD_INT 1
20547: ARRAY
20548: PPUSH
20549: CALL_OW 251
20553: PPUSH
20554: LD_INT 12
20556: PPUSH
20557: LD_INT 1
20559: PPUSH
20560: CALL_OW 50
20564: GO 20578
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20566: CALL_OW 45
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 51
// end ;
20578: GO 20452
20580: POP
20581: POP
// end ;
20582: PPOPN 2
20584: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20585: LD_EXP 26
20589: PUSH
20590: LD_EXP 72
20594: AND
20595: IFFALSE 20817
20597: GO 20599
20599: DISABLE
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20608: LD_ADDR_VAR 0 6
20612: PUSH
20613: LD_INT 22
20615: PUSH
20616: LD_OWVAR 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 3
20637: PUSH
20638: LD_INT 23
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: PPUSH
20657: CALL_OW 69
20661: ST_TO_ADDR
// if not tmp then
20662: LD_VAR 0 6
20666: NOT
20667: IFFALSE 20671
// exit ;
20669: GO 20817
// s1 := rand ( 1 , 4 ) ;
20671: LD_ADDR_VAR 0 2
20675: PUSH
20676: LD_INT 1
20678: PPUSH
20679: LD_INT 4
20681: PPUSH
20682: CALL_OW 12
20686: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20687: LD_ADDR_VAR 0 4
20691: PUSH
20692: LD_VAR 0 6
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: PPUSH
20701: LD_VAR 0 2
20705: PPUSH
20706: CALL_OW 259
20710: ST_TO_ADDR
// if s1 = 1 then
20711: LD_VAR 0 2
20715: PUSH
20716: LD_INT 1
20718: EQUAL
20719: IFFALSE 20739
// s2 := rand ( 2 , 4 ) else
20721: LD_ADDR_VAR 0 3
20725: PUSH
20726: LD_INT 2
20728: PPUSH
20729: LD_INT 4
20731: PPUSH
20732: CALL_OW 12
20736: ST_TO_ADDR
20737: GO 20747
// s2 := 1 ;
20739: LD_ADDR_VAR 0 3
20743: PUSH
20744: LD_INT 1
20746: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20747: LD_ADDR_VAR 0 5
20751: PUSH
20752: LD_VAR 0 6
20756: PUSH
20757: LD_INT 1
20759: ARRAY
20760: PPUSH
20761: LD_VAR 0 3
20765: PPUSH
20766: CALL_OW 259
20770: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20771: LD_VAR 0 6
20775: PUSH
20776: LD_INT 1
20778: ARRAY
20779: PPUSH
20780: LD_VAR 0 2
20784: PPUSH
20785: LD_VAR 0 5
20789: PPUSH
20790: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20794: LD_VAR 0 6
20798: PUSH
20799: LD_INT 1
20801: ARRAY
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: LD_VAR 0 4
20812: PPUSH
20813: CALL_OW 237
// end ;
20817: PPOPN 6
20819: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20820: LD_EXP 26
20824: PUSH
20825: LD_EXP 73
20829: AND
20830: IFFALSE 20909
20832: GO 20834
20834: DISABLE
20835: LD_INT 0
20837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20838: LD_ADDR_VAR 0 1
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_OWVAR 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PPUSH
20869: CALL_OW 69
20873: ST_TO_ADDR
// if not tmp then
20874: LD_VAR 0 1
20878: NOT
20879: IFFALSE 20883
// exit ;
20881: GO 20909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20883: LD_VAR 0 1
20887: PUSH
20888: LD_INT 1
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 12
20900: ARRAY
20901: PPUSH
20902: LD_INT 1
20904: PPUSH
20905: CALL_OW 234
// end ;
20909: PPOPN 1
20911: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20912: LD_EXP 26
20916: PUSH
20917: LD_EXP 74
20921: AND
20922: IFFALSE 21034
20924: GO 20926
20926: DISABLE
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20931: LD_ADDR_VAR 0 2
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_OWVAR 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 2
20950: PUSH
20951: LD_INT 30
20953: PUSH
20954: LD_INT 27
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 30
20963: PUSH
20964: LD_INT 26
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 28
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: ST_TO_ADDR
// if not tmp then
20996: LD_VAR 0 2
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21034
// for i in tmp do
21005: LD_ADDR_VAR 0 1
21009: PUSH
21010: LD_VAR 0 2
21014: PUSH
21015: FOR_IN
21016: IFFALSE 21032
// SetLives ( i , 1 ) ;
21018: LD_VAR 0 1
21022: PPUSH
21023: LD_INT 1
21025: PPUSH
21026: CALL_OW 234
21030: GO 21015
21032: POP
21033: POP
// end ;
21034: PPOPN 2
21036: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21037: LD_EXP 26
21041: PUSH
21042: LD_EXP 75
21046: AND
21047: IFFALSE 21334
21049: GO 21051
21051: DISABLE
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
21056: PPUSH
// begin i := rand ( 1 , 7 ) ;
21057: LD_ADDR_VAR 0 1
21061: PUSH
21062: LD_INT 1
21064: PPUSH
21065: LD_INT 7
21067: PPUSH
21068: CALL_OW 12
21072: ST_TO_ADDR
// case i of 1 :
21073: LD_VAR 0 1
21077: PUSH
21078: LD_INT 1
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21096
21086: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21087: LD_STRING earthquake(getX(game), 0, 32)
21089: PPUSH
21090: CALL_OW 559
21094: GO 21334
21096: LD_INT 2
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21118
21104: POP
// begin ToLua ( displayStucuk(); ) ;
21105: LD_STRING displayStucuk();
21107: PPUSH
21108: CALL_OW 559
// ResetFog ;
21112: CALL_OW 335
// end ; 3 :
21116: GO 21334
21118: LD_INT 3
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21230
21126: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21127: LD_ADDR_VAR 0 2
21131: PUSH
21132: LD_INT 22
21134: PUSH
21135: LD_OWVAR 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 25
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PPUSH
21158: CALL_OW 69
21162: ST_TO_ADDR
// if not tmp then
21163: LD_VAR 0 2
21167: NOT
21168: IFFALSE 21172
// exit ;
21170: GO 21334
// un := tmp [ rand ( 1 , tmp ) ] ;
21172: LD_ADDR_VAR 0 3
21176: PUSH
21177: LD_VAR 0 2
21181: PUSH
21182: LD_INT 1
21184: PPUSH
21185: LD_VAR 0 2
21189: PPUSH
21190: CALL_OW 12
21194: ARRAY
21195: ST_TO_ADDR
// if Crawls ( un ) then
21196: LD_VAR 0 3
21200: PPUSH
21201: CALL_OW 318
21205: IFFALSE 21216
// ComWalk ( un ) ;
21207: LD_VAR 0 3
21211: PPUSH
21212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_INT 8
21223: PPUSH
21224: CALL_OW 336
// end ; 4 :
21228: GO 21334
21230: LD_INT 4
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21312
21238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 29
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 2
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21334
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21284: LD_VAR 0 2
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: PPUSH
21293: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21297: LD_VAR 0 2
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: CALL_OW 65
// end ; 5 .. 7 :
21310: GO 21334
21312: LD_INT 5
21314: DOUBLE
21315: GREATEREQUAL
21316: IFFALSE 21324
21318: LD_INT 7
21320: DOUBLE
21321: LESSEQUAL
21322: IFTRUE 21326
21324: GO 21333
21326: POP
// StreamSibBomb ; end ;
21327: CALL 17571 0 0
21331: GO 21334
21333: POP
// end ;
21334: PPOPN 3
21336: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21337: LD_EXP 26
21341: PUSH
21342: LD_EXP 76
21346: AND
21347: IFFALSE 21503
21349: GO 21351
21351: DISABLE
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
21356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 81
21364: PUSH
21365: LD_OWVAR 2
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: LD_INT 21
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 21
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 69
21410: ST_TO_ADDR
// if not tmp then
21411: LD_VAR 0 2
21415: NOT
21416: IFFALSE 21420
// exit ;
21418: GO 21503
// p := 0 ;
21420: LD_ADDR_VAR 0 3
21424: PUSH
21425: LD_INT 0
21427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21428: LD_INT 35
21430: PPUSH
21431: CALL_OW 67
// p := p + 1 ;
21435: LD_ADDR_VAR 0 3
21439: PUSH
21440: LD_VAR 0 3
21444: PUSH
21445: LD_INT 1
21447: PLUS
21448: ST_TO_ADDR
// for i in tmp do
21449: LD_ADDR_VAR 0 1
21453: PUSH
21454: LD_VAR 0 2
21458: PUSH
21459: FOR_IN
21460: IFFALSE 21491
// if GetLives ( i ) < 1000 then
21462: LD_VAR 0 1
21466: PPUSH
21467: CALL_OW 256
21471: PUSH
21472: LD_INT 1000
21474: LESS
21475: IFFALSE 21489
// SetLives ( i , 1000 ) ;
21477: LD_VAR 0 1
21481: PPUSH
21482: LD_INT 1000
21484: PPUSH
21485: CALL_OW 234
21489: GO 21459
21491: POP
21492: POP
// until p > 20 ;
21493: LD_VAR 0 3
21497: PUSH
21498: LD_INT 20
21500: GREATER
21501: IFFALSE 21428
// end ;
21503: PPOPN 3
21505: END
// every 0 0$1 trigger StreamModeActive and sTime do
21506: LD_EXP 26
21510: PUSH
21511: LD_EXP 77
21515: AND
21516: IFFALSE 21551
21518: GO 21520
21520: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21521: LD_INT 28
21523: PPUSH
21524: LD_OWVAR 2
21528: PPUSH
21529: LD_INT 2
21531: PPUSH
21532: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21536: LD_INT 30
21538: PPUSH
21539: LD_OWVAR 2
21543: PPUSH
21544: LD_INT 2
21546: PPUSH
21547: CALL_OW 322
// end ;
21551: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21552: LD_EXP 26
21556: PUSH
21557: LD_EXP 78
21561: AND
21562: IFFALSE 21683
21564: GO 21566
21566: DISABLE
21567: LD_INT 0
21569: PPUSH
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21571: LD_ADDR_VAR 0 2
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 21
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 23
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: PPUSH
21620: CALL_OW 69
21624: ST_TO_ADDR
// if not tmp then
21625: LD_VAR 0 2
21629: NOT
21630: IFFALSE 21634
// exit ;
21632: GO 21683
// for i in tmp do
21634: LD_ADDR_VAR 0 1
21638: PUSH
21639: LD_VAR 0 2
21643: PUSH
21644: FOR_IN
21645: IFFALSE 21681
// begin if Crawls ( i ) then
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 318
21656: IFFALSE 21667
// ComWalk ( i ) ;
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 138
// SetClass ( i , 2 ) ;
21667: LD_VAR 0 1
21671: PPUSH
21672: LD_INT 2
21674: PPUSH
21675: CALL_OW 336
// end ;
21679: GO 21644
21681: POP
21682: POP
// end ;
21683: PPOPN 2
21685: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21686: LD_EXP 26
21690: PUSH
21691: LD_EXP 79
21695: AND
21696: IFFALSE 21984
21698: GO 21700
21700: DISABLE
21701: LD_INT 0
21703: PPUSH
21704: PPUSH
21705: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21706: LD_OWVAR 2
21710: PPUSH
21711: LD_INT 9
21713: PPUSH
21714: LD_INT 1
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21724: LD_INT 9
21726: PPUSH
21727: LD_OWVAR 2
21731: PPUSH
21732: CALL_OW 343
// uc_side := 9 ;
21736: LD_ADDR_OWVAR 20
21740: PUSH
21741: LD_INT 9
21743: ST_TO_ADDR
// uc_nation := 2 ;
21744: LD_ADDR_OWVAR 21
21748: PUSH
21749: LD_INT 2
21751: ST_TO_ADDR
// hc_name := Dark Warrior ;
21752: LD_ADDR_OWVAR 26
21756: PUSH
21757: LD_STRING Dark Warrior
21759: ST_TO_ADDR
// hc_gallery :=  ;
21760: LD_ADDR_OWVAR 33
21764: PUSH
21765: LD_STRING 
21767: ST_TO_ADDR
// hc_noskilllimit := true ;
21768: LD_ADDR_OWVAR 76
21772: PUSH
21773: LD_INT 1
21775: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21776: LD_ADDR_OWVAR 31
21780: PUSH
21781: LD_INT 30
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 30
21789: PUSH
21790: LD_INT 30
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: ST_TO_ADDR
// un := CreateHuman ;
21799: LD_ADDR_VAR 0 3
21803: PUSH
21804: CALL_OW 44
21808: ST_TO_ADDR
// hc_noskilllimit := false ;
21809: LD_ADDR_OWVAR 76
21813: PUSH
21814: LD_INT 0
21816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21817: LD_VAR 0 3
21821: PPUSH
21822: LD_INT 1
21824: PPUSH
21825: CALL_OW 51
// ToLua ( playRanger() ) ;
21829: LD_STRING playRanger()
21831: PPUSH
21832: CALL_OW 559
// p := 0 ;
21836: LD_ADDR_VAR 0 2
21840: PUSH
21841: LD_INT 0
21843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21844: LD_INT 35
21846: PPUSH
21847: CALL_OW 67
// p := p + 1 ;
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_VAR 0 2
21860: PUSH
21861: LD_INT 1
21863: PLUS
21864: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21865: LD_VAR 0 3
21869: PPUSH
21870: CALL_OW 256
21874: PUSH
21875: LD_INT 1000
21877: LESS
21878: IFFALSE 21892
// SetLives ( un , 1000 ) ;
21880: LD_VAR 0 3
21884: PPUSH
21885: LD_INT 1000
21887: PPUSH
21888: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21892: LD_VAR 0 3
21896: PPUSH
21897: LD_INT 81
21899: PUSH
21900: LD_OWVAR 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 91
21911: PUSH
21912: LD_VAR 0 3
21916: PUSH
21917: LD_INT 30
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: PPUSH
21934: LD_VAR 0 3
21938: PPUSH
21939: CALL_OW 74
21943: PPUSH
21944: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21948: LD_VAR 0 2
21952: PUSH
21953: LD_INT 80
21955: GREATER
21956: PUSH
21957: LD_VAR 0 3
21961: PPUSH
21962: CALL_OW 301
21966: OR
21967: IFFALSE 21844
// if un then
21969: LD_VAR 0 3
21973: IFFALSE 21984
// RemoveUnit ( un ) ;
21975: LD_VAR 0 3
21979: PPUSH
21980: CALL_OW 64
// end ;
21984: PPOPN 3
21986: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21987: LD_EXP 80
21991: IFFALSE 22107
21993: GO 21995
21995: DISABLE
21996: LD_INT 0
21998: PPUSH
21999: PPUSH
22000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22001: LD_ADDR_VAR 0 2
22005: PUSH
22006: LD_INT 81
22008: PUSH
22009: LD_OWVAR 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PPUSH
22032: CALL_OW 69
22036: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22037: LD_STRING playComputer()
22039: PPUSH
22040: CALL_OW 559
// if not tmp then
22044: LD_VAR 0 2
22048: NOT
22049: IFFALSE 22053
// exit ;
22051: GO 22107
// for i in tmp do
22053: LD_ADDR_VAR 0 1
22057: PUSH
22058: LD_VAR 0 2
22062: PUSH
22063: FOR_IN
22064: IFFALSE 22105
// for j := 1 to 4 do
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: DOUBLE
22072: LD_INT 1
22074: DEC
22075: ST_TO_ADDR
22076: LD_INT 4
22078: PUSH
22079: FOR_TO
22080: IFFALSE 22101
// SetSkill ( i , j , 10 ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_VAR 0 3
22091: PPUSH
22092: LD_INT 10
22094: PPUSH
22095: CALL_OW 237
22099: GO 22079
22101: POP
22102: POP
22103: GO 22063
22105: POP
22106: POP
// end ;
22107: PPOPN 3
22109: END
// every 0 0$1 trigger s30 do var i , tmp ;
22110: LD_EXP 81
22114: IFFALSE 22183
22116: GO 22118
22118: DISABLE
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_INT 22
22130: PUSH
22131: LD_OWVAR 2
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: ST_TO_ADDR
// if not tmp then
22145: LD_VAR 0 2
22149: NOT
22150: IFFALSE 22154
// exit ;
22152: GO 22183
// for i in tmp do
22154: LD_ADDR_VAR 0 1
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: FOR_IN
22165: IFFALSE 22181
// SetLives ( i , 300 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_INT 300
22174: PPUSH
22175: CALL_OW 234
22179: GO 22164
22181: POP
22182: POP
// end ;
22183: PPOPN 2
22185: END
// every 0 0$1 trigger s60 do var i , tmp ;
22186: LD_EXP 82
22190: IFFALSE 22259
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22199: LD_ADDR_VAR 0 2
22203: PUSH
22204: LD_INT 22
22206: PUSH
22207: LD_OWVAR 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 69
22220: ST_TO_ADDR
// if not tmp then
22221: LD_VAR 0 2
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22259
// for i in tmp do
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_VAR 0 2
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22257
// SetLives ( i , 600 ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_INT 600
22250: PPUSH
22251: CALL_OW 234
22255: GO 22240
22257: POP
22258: POP
// end ;
22259: PPOPN 2
22261: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22262: LD_INT 0
22264: PPUSH
// case cmd of 301 :
22265: LD_VAR 0 1
22269: PUSH
22270: LD_INT 301
22272: DOUBLE
22273: EQUAL
22274: IFTRUE 22278
22276: GO 22310
22278: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22279: LD_VAR 0 6
22283: PPUSH
22284: LD_VAR 0 7
22288: PPUSH
22289: LD_VAR 0 8
22293: PPUSH
22294: LD_VAR 0 4
22298: PPUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: CALL 23511 0 5
22308: GO 22431
22310: LD_INT 302
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22355
22318: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22319: LD_VAR 0 6
22323: PPUSH
22324: LD_VAR 0 7
22328: PPUSH
22329: LD_VAR 0 8
22333: PPUSH
22334: LD_VAR 0 9
22338: PPUSH
22339: LD_VAR 0 4
22343: PPUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: CALL 23602 0 6
22353: GO 22431
22355: LD_INT 303
22357: DOUBLE
22358: EQUAL
22359: IFTRUE 22363
22361: GO 22400
22363: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22364: LD_VAR 0 6
22368: PPUSH
22369: LD_VAR 0 7
22373: PPUSH
22374: LD_VAR 0 8
22378: PPUSH
22379: LD_VAR 0 9
22383: PPUSH
22384: LD_VAR 0 4
22388: PPUSH
22389: LD_VAR 0 5
22393: PPUSH
22394: CALL 22436 0 6
22398: GO 22431
22400: LD_INT 304
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22430
22408: POP
// hHackTeleport ( unit , x , y ) ; end ;
22409: LD_VAR 0 2
22413: PPUSH
22414: LD_VAR 0 4
22418: PPUSH
22419: LD_VAR 0 5
22423: PPUSH
22424: CALL 24195 0 3
22428: GO 22431
22430: POP
// end ;
22431: LD_VAR 0 12
22435: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22436: LD_INT 0
22438: PPUSH
22439: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22440: LD_VAR 0 1
22444: PUSH
22445: LD_INT 1
22447: LESS
22448: PUSH
22449: LD_VAR 0 1
22453: PUSH
22454: LD_INT 3
22456: GREATER
22457: OR
22458: PUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: LD_VAR 0 6
22468: PPUSH
22469: CALL_OW 428
22473: OR
22474: IFFALSE 22478
// exit ;
22476: GO 23198
// uc_side := your_side ;
22478: LD_ADDR_OWVAR 20
22482: PUSH
22483: LD_OWVAR 2
22487: ST_TO_ADDR
// uc_nation := nation ;
22488: LD_ADDR_OWVAR 21
22492: PUSH
22493: LD_VAR 0 1
22497: ST_TO_ADDR
// bc_level = 1 ;
22498: LD_ADDR_OWVAR 43
22502: PUSH
22503: LD_INT 1
22505: ST_TO_ADDR
// case btype of 1 :
22506: LD_VAR 0 2
22510: PUSH
22511: LD_INT 1
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22530
22519: POP
// bc_type := b_depot ; 2 :
22520: LD_ADDR_OWVAR 42
22524: PUSH
22525: LD_INT 0
22527: ST_TO_ADDR
22528: GO 23142
22530: LD_INT 2
22532: DOUBLE
22533: EQUAL
22534: IFTRUE 22538
22536: GO 22549
22538: POP
// bc_type := b_warehouse ; 3 :
22539: LD_ADDR_OWVAR 42
22543: PUSH
22544: LD_INT 1
22546: ST_TO_ADDR
22547: GO 23142
22549: LD_INT 3
22551: DOUBLE
22552: EQUAL
22553: IFTRUE 22557
22555: GO 22568
22557: POP
// bc_type := b_lab ; 4 .. 9 :
22558: LD_ADDR_OWVAR 42
22562: PUSH
22563: LD_INT 6
22565: ST_TO_ADDR
22566: GO 23142
22568: LD_INT 4
22570: DOUBLE
22571: GREATEREQUAL
22572: IFFALSE 22580
22574: LD_INT 9
22576: DOUBLE
22577: LESSEQUAL
22578: IFTRUE 22582
22580: GO 22634
22582: POP
// begin bc_type := b_lab_half ;
22583: LD_ADDR_OWVAR 42
22587: PUSH
22588: LD_INT 7
22590: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22591: LD_ADDR_OWVAR 44
22595: PUSH
22596: LD_INT 10
22598: PUSH
22599: LD_INT 11
22601: PUSH
22602: LD_INT 12
22604: PUSH
22605: LD_INT 15
22607: PUSH
22608: LD_INT 14
22610: PUSH
22611: LD_INT 13
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: LD_VAR 0 2
22626: PUSH
22627: LD_INT 3
22629: MINUS
22630: ARRAY
22631: ST_TO_ADDR
// end ; 10 .. 13 :
22632: GO 23142
22634: LD_INT 10
22636: DOUBLE
22637: GREATEREQUAL
22638: IFFALSE 22646
22640: LD_INT 13
22642: DOUBLE
22643: LESSEQUAL
22644: IFTRUE 22648
22646: GO 22725
22648: POP
// begin bc_type := b_lab_full ;
22649: LD_ADDR_OWVAR 42
22653: PUSH
22654: LD_INT 8
22656: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22657: LD_ADDR_OWVAR 44
22661: PUSH
22662: LD_INT 10
22664: PUSH
22665: LD_INT 12
22667: PUSH
22668: LD_INT 14
22670: PUSH
22671: LD_INT 13
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: LD_VAR 0 2
22684: PUSH
22685: LD_INT 9
22687: MINUS
22688: ARRAY
22689: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22690: LD_ADDR_OWVAR 45
22694: PUSH
22695: LD_INT 11
22697: PUSH
22698: LD_INT 15
22700: PUSH
22701: LD_INT 12
22703: PUSH
22704: LD_INT 15
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_VAR 0 2
22717: PUSH
22718: LD_INT 9
22720: MINUS
22721: ARRAY
22722: ST_TO_ADDR
// end ; 14 :
22723: GO 23142
22725: LD_INT 14
22727: DOUBLE
22728: EQUAL
22729: IFTRUE 22733
22731: GO 22744
22733: POP
// bc_type := b_workshop ; 15 :
22734: LD_ADDR_OWVAR 42
22738: PUSH
22739: LD_INT 2
22741: ST_TO_ADDR
22742: GO 23142
22744: LD_INT 15
22746: DOUBLE
22747: EQUAL
22748: IFTRUE 22752
22750: GO 22763
22752: POP
// bc_type := b_factory ; 16 :
22753: LD_ADDR_OWVAR 42
22757: PUSH
22758: LD_INT 3
22760: ST_TO_ADDR
22761: GO 23142
22763: LD_INT 16
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22782
22771: POP
// bc_type := b_ext_gun ; 17 :
22772: LD_ADDR_OWVAR 42
22776: PUSH
22777: LD_INT 17
22779: ST_TO_ADDR
22780: GO 23142
22782: LD_INT 17
22784: DOUBLE
22785: EQUAL
22786: IFTRUE 22790
22788: GO 22818
22790: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22791: LD_ADDR_OWVAR 42
22795: PUSH
22796: LD_INT 19
22798: PUSH
22799: LD_INT 23
22801: PUSH
22802: LD_INT 19
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: PUSH
22810: LD_VAR 0 1
22814: ARRAY
22815: ST_TO_ADDR
22816: GO 23142
22818: LD_INT 18
22820: DOUBLE
22821: EQUAL
22822: IFTRUE 22826
22824: GO 22837
22826: POP
// bc_type := b_ext_radar ; 19 :
22827: LD_ADDR_OWVAR 42
22831: PUSH
22832: LD_INT 20
22834: ST_TO_ADDR
22835: GO 23142
22837: LD_INT 19
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 22856
22845: POP
// bc_type := b_ext_radio ; 20 :
22846: LD_ADDR_OWVAR 42
22850: PUSH
22851: LD_INT 22
22853: ST_TO_ADDR
22854: GO 23142
22856: LD_INT 20
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 22875
22864: POP
// bc_type := b_ext_siberium ; 21 :
22865: LD_ADDR_OWVAR 42
22869: PUSH
22870: LD_INT 21
22872: ST_TO_ADDR
22873: GO 23142
22875: LD_INT 21
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22894
22883: POP
// bc_type := b_ext_computer ; 22 :
22884: LD_ADDR_OWVAR 42
22888: PUSH
22889: LD_INT 24
22891: ST_TO_ADDR
22892: GO 23142
22894: LD_INT 22
22896: DOUBLE
22897: EQUAL
22898: IFTRUE 22902
22900: GO 22913
22902: POP
// bc_type := b_ext_track ; 23 :
22903: LD_ADDR_OWVAR 42
22907: PUSH
22908: LD_INT 16
22910: ST_TO_ADDR
22911: GO 23142
22913: LD_INT 23
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 22932
22921: POP
// bc_type := b_ext_laser ; 24 :
22922: LD_ADDR_OWVAR 42
22926: PUSH
22927: LD_INT 25
22929: ST_TO_ADDR
22930: GO 23142
22932: LD_INT 24
22934: DOUBLE
22935: EQUAL
22936: IFTRUE 22940
22938: GO 22951
22940: POP
// bc_type := b_control_tower ; 25 :
22941: LD_ADDR_OWVAR 42
22945: PUSH
22946: LD_INT 36
22948: ST_TO_ADDR
22949: GO 23142
22951: LD_INT 25
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 22970
22959: POP
// bc_type := b_breastwork ; 26 :
22960: LD_ADDR_OWVAR 42
22964: PUSH
22965: LD_INT 31
22967: ST_TO_ADDR
22968: GO 23142
22970: LD_INT 26
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 22989
22978: POP
// bc_type := b_bunker ; 27 :
22979: LD_ADDR_OWVAR 42
22983: PUSH
22984: LD_INT 32
22986: ST_TO_ADDR
22987: GO 23142
22989: LD_INT 27
22991: DOUBLE
22992: EQUAL
22993: IFTRUE 22997
22995: GO 23008
22997: POP
// bc_type := b_turret ; 28 :
22998: LD_ADDR_OWVAR 42
23002: PUSH
23003: LD_INT 33
23005: ST_TO_ADDR
23006: GO 23142
23008: LD_INT 28
23010: DOUBLE
23011: EQUAL
23012: IFTRUE 23016
23014: GO 23027
23016: POP
// bc_type := b_armoury ; 29 :
23017: LD_ADDR_OWVAR 42
23021: PUSH
23022: LD_INT 4
23024: ST_TO_ADDR
23025: GO 23142
23027: LD_INT 29
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23046
23035: POP
// bc_type := b_barracks ; 30 :
23036: LD_ADDR_OWVAR 42
23040: PUSH
23041: LD_INT 5
23043: ST_TO_ADDR
23044: GO 23142
23046: LD_INT 30
23048: DOUBLE
23049: EQUAL
23050: IFTRUE 23054
23052: GO 23065
23054: POP
// bc_type := b_solar_power ; 31 :
23055: LD_ADDR_OWVAR 42
23059: PUSH
23060: LD_INT 27
23062: ST_TO_ADDR
23063: GO 23142
23065: LD_INT 31
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23073
23071: GO 23084
23073: POP
// bc_type := b_oil_power ; 32 :
23074: LD_ADDR_OWVAR 42
23078: PUSH
23079: LD_INT 26
23081: ST_TO_ADDR
23082: GO 23142
23084: LD_INT 32
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23103
23092: POP
// bc_type := b_siberite_power ; 33 :
23093: LD_ADDR_OWVAR 42
23097: PUSH
23098: LD_INT 28
23100: ST_TO_ADDR
23101: GO 23142
23103: LD_INT 33
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23111
23109: GO 23122
23111: POP
// bc_type := b_oil_mine ; 34 :
23112: LD_ADDR_OWVAR 42
23116: PUSH
23117: LD_INT 29
23119: ST_TO_ADDR
23120: GO 23142
23122: LD_INT 34
23124: DOUBLE
23125: EQUAL
23126: IFTRUE 23130
23128: GO 23141
23130: POP
// bc_type := b_siberite_mine ; end ;
23131: LD_ADDR_OWVAR 42
23135: PUSH
23136: LD_INT 30
23138: ST_TO_ADDR
23139: GO 23142
23141: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23142: LD_ADDR_VAR 0 8
23146: PUSH
23147: LD_VAR 0 5
23151: PPUSH
23152: LD_VAR 0 6
23156: PPUSH
23157: LD_VAR 0 3
23161: PPUSH
23162: CALL_OW 47
23166: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23167: LD_OWVAR 42
23171: PUSH
23172: LD_INT 32
23174: PUSH
23175: LD_INT 33
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: IN
23182: IFFALSE 23198
// PlaceWeaponTurret ( b , weapon ) ;
23184: LD_VAR 0 8
23188: PPUSH
23189: LD_VAR 0 4
23193: PPUSH
23194: CALL_OW 431
// end ;
23198: LD_VAR 0 7
23202: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23203: LD_INT 0
23205: PPUSH
23206: PPUSH
23207: PPUSH
23208: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: LD_INT 22
23216: PUSH
23217: LD_OWVAR 2
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: LD_INT 30
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PPUSH
23258: CALL_OW 69
23262: ST_TO_ADDR
// if not tmp then
23263: LD_VAR 0 4
23267: NOT
23268: IFFALSE 23272
// exit ;
23270: GO 23331
// for i in tmp do
23272: LD_ADDR_VAR 0 2
23276: PUSH
23277: LD_VAR 0 4
23281: PUSH
23282: FOR_IN
23283: IFFALSE 23329
// for j = 1 to 3 do
23285: LD_ADDR_VAR 0 3
23289: PUSH
23290: DOUBLE
23291: LD_INT 1
23293: DEC
23294: ST_TO_ADDR
23295: LD_INT 3
23297: PUSH
23298: FOR_TO
23299: IFFALSE 23325
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23301: LD_VAR 0 2
23305: PPUSH
23306: CALL_OW 274
23310: PPUSH
23311: LD_VAR 0 3
23315: PPUSH
23316: LD_INT 99999
23318: PPUSH
23319: CALL_OW 277
23323: GO 23298
23325: POP
23326: POP
23327: GO 23282
23329: POP
23330: POP
// end ;
23331: LD_VAR 0 1
23335: RET
// export function hHackSetLevel10 ; var i , j ; begin
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
23340: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23341: LD_ADDR_VAR 0 2
23345: PUSH
23346: LD_INT 21
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PPUSH
23356: CALL_OW 69
23360: PUSH
23361: FOR_IN
23362: IFFALSE 23414
// if IsSelected ( i ) then
23364: LD_VAR 0 2
23368: PPUSH
23369: CALL_OW 306
23373: IFFALSE 23412
// begin for j := 1 to 4 do
23375: LD_ADDR_VAR 0 3
23379: PUSH
23380: DOUBLE
23381: LD_INT 1
23383: DEC
23384: ST_TO_ADDR
23385: LD_INT 4
23387: PUSH
23388: FOR_TO
23389: IFFALSE 23410
// SetSkill ( i , j , 10 ) ;
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 10
23403: PPUSH
23404: CALL_OW 237
23408: GO 23388
23410: POP
23411: POP
// end ;
23412: GO 23361
23414: POP
23415: POP
// end ;
23416: LD_VAR 0 1
23420: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23421: LD_INT 0
23423: PPUSH
23424: PPUSH
23425: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_OWVAR 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 21
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PPUSH
23457: CALL_OW 69
23461: PUSH
23462: FOR_IN
23463: IFFALSE 23504
// begin for j := 1 to 4 do
23465: LD_ADDR_VAR 0 3
23469: PUSH
23470: DOUBLE
23471: LD_INT 1
23473: DEC
23474: ST_TO_ADDR
23475: LD_INT 4
23477: PUSH
23478: FOR_TO
23479: IFFALSE 23500
// SetSkill ( i , j , 10 ) ;
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_VAR 0 3
23490: PPUSH
23491: LD_INT 10
23493: PPUSH
23494: CALL_OW 237
23498: GO 23478
23500: POP
23501: POP
// end ;
23502: GO 23462
23504: POP
23505: POP
// end ;
23506: LD_VAR 0 1
23510: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23511: LD_INT 0
23513: PPUSH
// uc_side := your_side ;
23514: LD_ADDR_OWVAR 20
23518: PUSH
23519: LD_OWVAR 2
23523: ST_TO_ADDR
// uc_nation := nation ;
23524: LD_ADDR_OWVAR 21
23528: PUSH
23529: LD_VAR 0 1
23533: ST_TO_ADDR
// InitHc ;
23534: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23538: LD_INT 0
23540: PPUSH
23541: LD_VAR 0 2
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23555: LD_VAR 0 4
23559: PPUSH
23560: LD_VAR 0 5
23564: PPUSH
23565: CALL_OW 428
23569: PUSH
23570: LD_INT 0
23572: EQUAL
23573: IFFALSE 23597
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23575: CALL_OW 44
23579: PPUSH
23580: LD_VAR 0 4
23584: PPUSH
23585: LD_VAR 0 5
23589: PPUSH
23590: LD_INT 1
23592: PPUSH
23593: CALL_OW 48
// end ;
23597: LD_VAR 0 6
23601: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23602: LD_INT 0
23604: PPUSH
23605: PPUSH
// uc_side := your_side ;
23606: LD_ADDR_OWVAR 20
23610: PUSH
23611: LD_OWVAR 2
23615: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23616: LD_VAR 0 1
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: LD_INT 3
23629: PUSH
23630: LD_INT 4
23632: PUSH
23633: LD_INT 5
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: IN
23643: IFFALSE 23655
// uc_nation := nation_american else
23645: LD_ADDR_OWVAR 21
23649: PUSH
23650: LD_INT 1
23652: ST_TO_ADDR
23653: GO 23698
// if chassis in [ 11 , 12 , 13 , 14 ] then
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 11
23662: PUSH
23663: LD_INT 12
23665: PUSH
23666: LD_INT 13
23668: PUSH
23669: LD_INT 14
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: IN
23678: IFFALSE 23690
// uc_nation := nation_arabian else
23680: LD_ADDR_OWVAR 21
23684: PUSH
23685: LD_INT 2
23687: ST_TO_ADDR
23688: GO 23698
// uc_nation := nation_russian ;
23690: LD_ADDR_OWVAR 21
23694: PUSH
23695: LD_INT 3
23697: ST_TO_ADDR
// vc_chassis := chassis ;
23698: LD_ADDR_OWVAR 37
23702: PUSH
23703: LD_VAR 0 1
23707: ST_TO_ADDR
// vc_engine := engine ;
23708: LD_ADDR_OWVAR 39
23712: PUSH
23713: LD_VAR 0 2
23717: ST_TO_ADDR
// vc_control := control ;
23718: LD_ADDR_OWVAR 38
23722: PUSH
23723: LD_VAR 0 3
23727: ST_TO_ADDR
// vc_weapon := weapon ;
23728: LD_ADDR_OWVAR 40
23732: PUSH
23733: LD_VAR 0 4
23737: ST_TO_ADDR
// un := CreateVehicle ;
23738: LD_ADDR_VAR 0 8
23742: PUSH
23743: CALL_OW 45
23747: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23748: LD_VAR 0 8
23752: PPUSH
23753: LD_INT 0
23755: PPUSH
23756: LD_INT 5
23758: PPUSH
23759: CALL_OW 12
23763: PPUSH
23764: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23768: LD_VAR 0 8
23772: PPUSH
23773: LD_VAR 0 5
23777: PPUSH
23778: LD_VAR 0 6
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 48
// end ;
23790: LD_VAR 0 7
23794: RET
// export hInvincible ; every 1 do
23795: GO 23797
23797: DISABLE
// hInvincible := [ ] ;
23798: LD_ADDR_EXP 83
23802: PUSH
23803: EMPTY
23804: ST_TO_ADDR
23805: END
// every 10 do var i ;
23806: GO 23808
23808: DISABLE
23809: LD_INT 0
23811: PPUSH
// begin enable ;
23812: ENABLE
// if not hInvincible then
23813: LD_EXP 83
23817: NOT
23818: IFFALSE 23822
// exit ;
23820: GO 23866
// for i in hInvincible do
23822: LD_ADDR_VAR 0 1
23826: PUSH
23827: LD_EXP 83
23831: PUSH
23832: FOR_IN
23833: IFFALSE 23864
// if GetLives ( i ) < 1000 then
23835: LD_VAR 0 1
23839: PPUSH
23840: CALL_OW 256
23844: PUSH
23845: LD_INT 1000
23847: LESS
23848: IFFALSE 23862
// SetLives ( i , 1000 ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_INT 1000
23857: PPUSH
23858: CALL_OW 234
23862: GO 23832
23864: POP
23865: POP
// end ;
23866: PPOPN 1
23868: END
// export function hHackInvincible ; var i ; begin
23869: LD_INT 0
23871: PPUSH
23872: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23873: LD_ADDR_VAR 0 2
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 21
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 21
23893: PUSH
23894: LD_INT 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 69
23910: PUSH
23911: FOR_IN
23912: IFFALSE 23973
// if IsSelected ( i ) then
23914: LD_VAR 0 2
23918: PPUSH
23919: CALL_OW 306
23923: IFFALSE 23971
// begin if i in hInvincible then
23925: LD_VAR 0 2
23929: PUSH
23930: LD_EXP 83
23934: IN
23935: IFFALSE 23955
// hInvincible := hInvincible diff i else
23937: LD_ADDR_EXP 83
23941: PUSH
23942: LD_EXP 83
23946: PUSH
23947: LD_VAR 0 2
23951: DIFF
23952: ST_TO_ADDR
23953: GO 23971
// hInvincible := hInvincible union i ;
23955: LD_ADDR_EXP 83
23959: PUSH
23960: LD_EXP 83
23964: PUSH
23965: LD_VAR 0 2
23969: UNION
23970: ST_TO_ADDR
// end ;
23971: GO 23911
23973: POP
23974: POP
// end ;
23975: LD_VAR 0 1
23979: RET
// export function hHackInvisible ; var i , j ; begin
23980: LD_INT 0
23982: PPUSH
23983: PPUSH
23984: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23985: LD_ADDR_VAR 0 2
23989: PUSH
23990: LD_INT 21
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PPUSH
24000: CALL_OW 69
24004: PUSH
24005: FOR_IN
24006: IFFALSE 24030
// if IsSelected ( i ) then
24008: LD_VAR 0 2
24012: PPUSH
24013: CALL_OW 306
24017: IFFALSE 24028
// ComForceInvisible ( i ) ;
24019: LD_VAR 0 2
24023: PPUSH
24024: CALL_OW 496
24028: GO 24005
24030: POP
24031: POP
// end ;
24032: LD_VAR 0 1
24036: RET
// export function hHackChangeYourSide ; begin
24037: LD_INT 0
24039: PPUSH
// if your_side = 8 then
24040: LD_OWVAR 2
24044: PUSH
24045: LD_INT 8
24047: EQUAL
24048: IFFALSE 24060
// your_side := 0 else
24050: LD_ADDR_OWVAR 2
24054: PUSH
24055: LD_INT 0
24057: ST_TO_ADDR
24058: GO 24074
// your_side := your_side + 1 ;
24060: LD_ADDR_OWVAR 2
24064: PUSH
24065: LD_OWVAR 2
24069: PUSH
24070: LD_INT 1
24072: PLUS
24073: ST_TO_ADDR
// end ;
24074: LD_VAR 0 1
24078: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24079: LD_INT 0
24081: PPUSH
24082: PPUSH
24083: PPUSH
// for i in all_units do
24084: LD_ADDR_VAR 0 2
24088: PUSH
24089: LD_OWVAR 3
24093: PUSH
24094: FOR_IN
24095: IFFALSE 24173
// if IsSelected ( i ) then
24097: LD_VAR 0 2
24101: PPUSH
24102: CALL_OW 306
24106: IFFALSE 24171
// begin j := GetSide ( i ) ;
24108: LD_ADDR_VAR 0 3
24112: PUSH
24113: LD_VAR 0 2
24117: PPUSH
24118: CALL_OW 255
24122: ST_TO_ADDR
// if j = 8 then
24123: LD_VAR 0 3
24127: PUSH
24128: LD_INT 8
24130: EQUAL
24131: IFFALSE 24143
// j := 0 else
24133: LD_ADDR_VAR 0 3
24137: PUSH
24138: LD_INT 0
24140: ST_TO_ADDR
24141: GO 24157
// j := j + 1 ;
24143: LD_ADDR_VAR 0 3
24147: PUSH
24148: LD_VAR 0 3
24152: PUSH
24153: LD_INT 1
24155: PLUS
24156: ST_TO_ADDR
// SetSide ( i , j ) ;
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_VAR 0 3
24166: PPUSH
24167: CALL_OW 235
// end ;
24171: GO 24094
24173: POP
24174: POP
// end ;
24175: LD_VAR 0 1
24179: RET
// export function hHackFog ; begin
24180: LD_INT 0
24182: PPUSH
// FogOff ( true ) ;
24183: LD_INT 1
24185: PPUSH
24186: CALL_OW 344
// end ;
24190: LD_VAR 0 1
24194: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24195: LD_INT 0
24197: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_VAR 0 3
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: LD_INT 1
24218: PPUSH
24219: CALL_OW 483
// CenterOnXY ( x , y ) ;
24223: LD_VAR 0 2
24227: PPUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 84
// end ;
24237: LD_VAR 0 4
24241: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24242: LD_INT 0
24244: PPUSH
24245: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24246: LD_VAR 0 1
24250: NOT
24251: PUSH
24252: LD_VAR 0 2
24256: PPUSH
24257: LD_VAR 0 3
24261: PPUSH
24262: CALL_OW 488
24266: NOT
24267: OR
24268: PUSH
24269: LD_VAR 0 1
24273: PPUSH
24274: CALL_OW 266
24278: PUSH
24279: LD_INT 3
24281: NONEQUAL
24282: PUSH
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 247
24292: PUSH
24293: LD_INT 1
24295: EQUAL
24296: NOT
24297: AND
24298: OR
24299: IFFALSE 24303
// exit ;
24301: GO 24452
// if GetType ( factory ) = unit_human then
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL_OW 247
24312: PUSH
24313: LD_INT 1
24315: EQUAL
24316: IFFALSE 24333
// factory := IsInUnit ( factory ) ;
24318: LD_ADDR_VAR 0 1
24322: PUSH
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 310
24332: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 266
24342: PUSH
24343: LD_INT 3
24345: NONEQUAL
24346: IFFALSE 24350
// exit ;
24348: GO 24452
// if HexInfo ( x , y ) = factory then
24350: LD_VAR 0 2
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: CALL_OW 428
24364: PUSH
24365: LD_VAR 0 1
24369: EQUAL
24370: IFFALSE 24397
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24372: LD_ADDR_EXP 84
24376: PUSH
24377: LD_EXP 84
24381: PPUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_INT 0
24389: PPUSH
24390: CALL_OW 1
24394: ST_TO_ADDR
24395: GO 24448
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24397: LD_ADDR_EXP 84
24401: PUSH
24402: LD_EXP 84
24406: PPUSH
24407: LD_VAR 0 1
24411: PPUSH
24412: LD_VAR 0 1
24416: PPUSH
24417: CALL_OW 255
24421: PUSH
24422: LD_VAR 0 1
24426: PUSH
24427: LD_VAR 0 2
24431: PUSH
24432: LD_VAR 0 3
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 1
24447: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24448: CALL 24457 0 0
// end ;
24452: LD_VAR 0 4
24456: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
24457: LD_INT 0
24459: PPUSH
24460: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24461: LD_STRING resetFactoryWaypoint();
24463: PPUSH
24464: CALL_OW 559
// if factoryWaypoints then
24468: LD_EXP 84
24472: IFFALSE 24595
// begin for i := 1 to factoryWaypoints do
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: DOUBLE
24480: LD_INT 1
24482: DEC
24483: ST_TO_ADDR
24484: LD_EXP 84
24488: PUSH
24489: FOR_TO
24490: IFFALSE 24593
// if factoryWaypoints [ i ] then
24492: LD_EXP 84
24496: PUSH
24497: LD_VAR 0 2
24501: ARRAY
24502: IFFALSE 24591
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
24504: LD_STRING setFactoryWaypointXY(
24506: PUSH
24507: LD_EXP 84
24511: PUSH
24512: LD_VAR 0 2
24516: ARRAY
24517: PUSH
24518: LD_INT 1
24520: ARRAY
24521: STR
24522: PUSH
24523: LD_STRING ,
24525: STR
24526: PUSH
24527: LD_EXP 84
24531: PUSH
24532: LD_VAR 0 2
24536: ARRAY
24537: PUSH
24538: LD_INT 2
24540: ARRAY
24541: STR
24542: PUSH
24543: LD_STRING ,
24545: STR
24546: PUSH
24547: LD_EXP 84
24551: PUSH
24552: LD_VAR 0 2
24556: ARRAY
24557: PUSH
24558: LD_INT 3
24560: ARRAY
24561: STR
24562: PUSH
24563: LD_STRING ,
24565: STR
24566: PUSH
24567: LD_EXP 84
24571: PUSH
24572: LD_VAR 0 2
24576: ARRAY
24577: PUSH
24578: LD_INT 4
24580: ARRAY
24581: STR
24582: PUSH
24583: LD_STRING )
24585: STR
24586: PPUSH
24587: CALL_OW 559
24591: GO 24489
24593: POP
24594: POP
// end ; end ;
24595: LD_VAR 0 1
24599: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
24600: LD_INT 0
24602: PPUSH
// if HexInfo ( x , y ) = warehouse then
24603: LD_VAR 0 2
24607: PPUSH
24608: LD_VAR 0 3
24612: PPUSH
24613: CALL_OW 428
24617: PUSH
24618: LD_VAR 0 1
24622: EQUAL
24623: IFFALSE 24650
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24625: LD_ADDR_EXP 85
24629: PUSH
24630: LD_EXP 85
24634: PPUSH
24635: LD_VAR 0 1
24639: PPUSH
24640: LD_INT 0
24642: PPUSH
24643: CALL_OW 1
24647: ST_TO_ADDR
24648: GO 24701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24650: LD_ADDR_EXP 85
24654: PUSH
24655: LD_EXP 85
24659: PPUSH
24660: LD_VAR 0 1
24664: PPUSH
24665: LD_VAR 0 1
24669: PPUSH
24670: CALL_OW 255
24674: PUSH
24675: LD_VAR 0 1
24679: PUSH
24680: LD_VAR 0 2
24684: PUSH
24685: LD_VAR 0 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: PPUSH
24696: CALL_OW 1
24700: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
24701: CALL 24710 0 0
// end ;
24705: LD_VAR 0 4
24709: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
24710: LD_INT 0
24712: PPUSH
24713: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24714: LD_STRING resetWarehouseGatheringPoints();
24716: PPUSH
24717: CALL_OW 559
// if warehouseGatheringPoints then
24721: LD_EXP 85
24725: IFFALSE 24848
// begin for i := 1 to warehouseGatheringPoints do
24727: LD_ADDR_VAR 0 2
24731: PUSH
24732: DOUBLE
24733: LD_INT 1
24735: DEC
24736: ST_TO_ADDR
24737: LD_EXP 85
24741: PUSH
24742: FOR_TO
24743: IFFALSE 24846
// if warehouseGatheringPoints [ i ] then
24745: LD_EXP 85
24749: PUSH
24750: LD_VAR 0 2
24754: ARRAY
24755: IFFALSE 24844
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
24757: LD_STRING setWarhouseGatheringPointXY(
24759: PUSH
24760: LD_EXP 85
24764: PUSH
24765: LD_VAR 0 2
24769: ARRAY
24770: PUSH
24771: LD_INT 1
24773: ARRAY
24774: STR
24775: PUSH
24776: LD_STRING ,
24778: STR
24779: PUSH
24780: LD_EXP 85
24784: PUSH
24785: LD_VAR 0 2
24789: ARRAY
24790: PUSH
24791: LD_INT 2
24793: ARRAY
24794: STR
24795: PUSH
24796: LD_STRING ,
24798: STR
24799: PUSH
24800: LD_EXP 85
24804: PUSH
24805: LD_VAR 0 2
24809: ARRAY
24810: PUSH
24811: LD_INT 3
24813: ARRAY
24814: STR
24815: PUSH
24816: LD_STRING ,
24818: STR
24819: PUSH
24820: LD_EXP 85
24824: PUSH
24825: LD_VAR 0 2
24829: ARRAY
24830: PUSH
24831: LD_INT 4
24833: ARRAY
24834: STR
24835: PUSH
24836: LD_STRING )
24838: STR
24839: PPUSH
24840: CALL_OW 559
24844: GO 24742
24846: POP
24847: POP
// end ; end ;
24848: LD_VAR 0 1
24852: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24853: LD_EXP 85
24857: IFFALSE 25486
24859: GO 24861
24861: DISABLE
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
24866: PPUSH
24867: PPUSH
24868: PPUSH
24869: PPUSH
24870: PPUSH
24871: PPUSH
24872: PPUSH
// begin enable ;
24873: ENABLE
// list := warehouseGatheringPoints diff 0 ;
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_EXP 85
24883: PUSH
24884: LD_INT 0
24886: DIFF
24887: ST_TO_ADDR
// for i := 1 to list do
24888: LD_ADDR_VAR 0 1
24892: PUSH
24893: DOUBLE
24894: LD_INT 1
24896: DEC
24897: ST_TO_ADDR
24898: LD_VAR 0 3
24902: PUSH
24903: FOR_TO
24904: IFFALSE 25484
// begin if not list [ i ] then
24906: LD_VAR 0 3
24910: PUSH
24911: LD_VAR 0 1
24915: ARRAY
24916: NOT
24917: IFFALSE 24921
// continue ;
24919: GO 24903
// depot := list [ i ] [ 2 ] ;
24921: LD_ADDR_VAR 0 8
24925: PUSH
24926: LD_VAR 0 3
24930: PUSH
24931: LD_VAR 0 1
24935: ARRAY
24936: PUSH
24937: LD_INT 2
24939: ARRAY
24940: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24941: LD_ADDR_VAR 0 5
24945: PUSH
24946: LD_VAR 0 3
24950: PUSH
24951: LD_VAR 0 1
24955: ARRAY
24956: PUSH
24957: LD_INT 1
24959: ARRAY
24960: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24961: LD_VAR 0 8
24965: PPUSH
24966: CALL_OW 301
24970: PUSH
24971: LD_VAR 0 5
24975: PUSH
24976: LD_VAR 0 8
24980: PPUSH
24981: CALL_OW 255
24985: NONEQUAL
24986: OR
24987: IFFALSE 25016
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24989: LD_ADDR_EXP 85
24993: PUSH
24994: LD_EXP 85
24998: PPUSH
24999: LD_VAR 0 8
25003: PPUSH
25004: LD_INT 0
25006: PPUSH
25007: CALL_OW 1
25011: ST_TO_ADDR
// exit ;
25012: POP
25013: POP
25014: GO 25486
// end ; x := list [ i ] [ 3 ] ;
25016: LD_ADDR_VAR 0 6
25020: PUSH
25021: LD_VAR 0 3
25025: PUSH
25026: LD_VAR 0 1
25030: ARRAY
25031: PUSH
25032: LD_INT 3
25034: ARRAY
25035: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25036: LD_ADDR_VAR 0 7
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: LD_VAR 0 1
25050: ARRAY
25051: PUSH
25052: LD_INT 4
25054: ARRAY
25055: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
25056: LD_ADDR_VAR 0 9
25060: PUSH
25061: LD_VAR 0 6
25065: PPUSH
25066: LD_VAR 0 7
25070: PPUSH
25071: LD_INT 12
25073: PPUSH
25074: CALL 69717 0 3
25078: ST_TO_ADDR
// if not cratesNearbyPoint then
25079: LD_VAR 0 9
25083: NOT
25084: IFFALSE 25090
// exit ;
25086: POP
25087: POP
25088: GO 25486
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25090: LD_ADDR_VAR 0 4
25094: PUSH
25095: LD_INT 22
25097: PUSH
25098: LD_VAR 0 5
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 3
25109: PUSH
25110: LD_INT 60
25112: PUSH
25113: EMPTY
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 25
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 25
25135: PUSH
25136: LD_INT 16
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 69
25157: PUSH
25158: LD_VAR 0 8
25162: PPUSH
25163: CALL_OW 313
25167: PPUSH
25168: LD_INT 3
25170: PUSH
25171: LD_INT 60
25173: PUSH
25174: EMPTY
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 2
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 25
25196: PUSH
25197: LD_INT 16
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 72
25217: UNION
25218: ST_TO_ADDR
// if tmp then
25219: LD_VAR 0 4
25223: IFFALSE 25303
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25225: LD_ADDR_VAR 0 4
25229: PUSH
25230: LD_VAR 0 4
25234: PPUSH
25235: LD_INT 3
25237: PPUSH
25238: CALL 67684 0 2
25242: ST_TO_ADDR
// for j in tmp do
25243: LD_ADDR_VAR 0 2
25247: PUSH
25248: LD_VAR 0 4
25252: PUSH
25253: FOR_IN
25254: IFFALSE 25297
// begin if IsInUnit ( j ) then
25256: LD_VAR 0 2
25260: PPUSH
25261: CALL_OW 310
25265: IFFALSE 25276
// ComExit ( j ) ;
25267: LD_VAR 0 2
25271: PPUSH
25272: CALL 67767 0 1
// AddComCollect ( j , x , y ) ;
25276: LD_VAR 0 2
25280: PPUSH
25281: LD_VAR 0 6
25285: PPUSH
25286: LD_VAR 0 7
25290: PPUSH
25291: CALL_OW 177
// end ;
25295: GO 25253
25297: POP
25298: POP
// exit ;
25299: POP
25300: POP
25301: GO 25486
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25303: LD_ADDR_VAR 0 4
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_VAR 0 5
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 34
25325: PUSH
25326: LD_INT 12
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 34
25335: PUSH
25336: LD_INT 51
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 34
25345: PUSH
25346: LD_INT 32
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 34
25355: PUSH
25356: LD_EXP 98
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PPUSH
25376: CALL_OW 69
25380: ST_TO_ADDR
// if tmp then
25381: LD_VAR 0 4
25385: IFFALSE 25482
// begin for j in tmp do
25387: LD_ADDR_VAR 0 2
25391: PUSH
25392: LD_VAR 0 4
25396: PUSH
25397: FOR_IN
25398: IFFALSE 25480
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
25400: LD_VAR 0 1
25404: PPUSH
25405: CALL_OW 261
25409: PUSH
25410: LD_INT 20
25412: GREATER
25413: PUSH
25414: LD_VAR 0 1
25418: PPUSH
25419: CALL_OW 314
25423: NOT
25424: AND
25425: PUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 263
25435: PUSH
25436: LD_INT 1
25438: NONEQUAL
25439: PUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 311
25449: OR
25450: AND
25451: IFFALSE 25478
// begin ComCollect ( j , x , y ) ;
25453: LD_VAR 0 2
25457: PPUSH
25458: LD_VAR 0 6
25462: PPUSH
25463: LD_VAR 0 7
25467: PPUSH
25468: CALL_OW 117
// exit ;
25472: POP
25473: POP
25474: POP
25475: POP
25476: GO 25486
// end ;
25478: GO 25397
25480: POP
25481: POP
// end ; end ;
25482: GO 24903
25484: POP
25485: POP
// end ; end_of_file end_of_file
25486: PPOPN 9
25488: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25489: LD_INT 0
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 264
25504: PUSH
25505: LD_EXP 101
25509: EQUAL
25510: IFFALSE 25582
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25512: LD_INT 68
25514: PPUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 255
25524: PPUSH
25525: CALL_OW 321
25529: PUSH
25530: LD_INT 2
25532: EQUAL
25533: IFFALSE 25545
// eff := 70 else
25535: LD_ADDR_VAR 0 4
25539: PUSH
25540: LD_INT 70
25542: ST_TO_ADDR
25543: GO 25553
// eff := 30 ;
25545: LD_ADDR_VAR 0 4
25549: PUSH
25550: LD_INT 30
25552: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 250
25562: PPUSH
25563: LD_VAR 0 1
25567: PPUSH
25568: CALL_OW 251
25572: PPUSH
25573: LD_VAR 0 4
25577: PPUSH
25578: CALL_OW 495
// end ; end ;
25582: LD_VAR 0 2
25586: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25587: LD_INT 0
25589: PPUSH
// end ;
25590: LD_VAR 0 4
25594: RET
// export function SOS_Command ( cmd ) ; begin
25595: LD_INT 0
25597: PPUSH
// end ;
25598: LD_VAR 0 2
25602: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25603: LD_INT 0
25605: PPUSH
// end ;
25606: LD_VAR 0 6
25610: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25611: LD_INT 0
25613: PPUSH
25614: PPUSH
// if not vehicle or not factory then
25615: LD_VAR 0 1
25619: NOT
25620: PUSH
25621: LD_VAR 0 2
25625: NOT
25626: OR
25627: IFFALSE 25631
// exit ;
25629: GO 25862
// if factoryWaypoints >= factory then
25631: LD_EXP 84
25635: PUSH
25636: LD_VAR 0 2
25640: GREATEREQUAL
25641: IFFALSE 25862
// if factoryWaypoints [ factory ] then
25643: LD_EXP 84
25647: PUSH
25648: LD_VAR 0 2
25652: ARRAY
25653: IFFALSE 25862
// begin if GetControl ( vehicle ) = control_manual then
25655: LD_VAR 0 1
25659: PPUSH
25660: CALL_OW 263
25664: PUSH
25665: LD_INT 1
25667: EQUAL
25668: IFFALSE 25749
// begin driver := IsDrivenBy ( vehicle ) ;
25670: LD_ADDR_VAR 0 4
25674: PUSH
25675: LD_VAR 0 1
25679: PPUSH
25680: CALL_OW 311
25684: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25685: LD_VAR 0 4
25689: PPUSH
25690: LD_EXP 84
25694: PUSH
25695: LD_VAR 0 2
25699: ARRAY
25700: PUSH
25701: LD_INT 3
25703: ARRAY
25704: PPUSH
25705: LD_EXP 84
25709: PUSH
25710: LD_VAR 0 2
25714: ARRAY
25715: PUSH
25716: LD_INT 4
25718: ARRAY
25719: PPUSH
25720: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25724: LD_VAR 0 4
25728: PPUSH
25729: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25733: LD_VAR 0 4
25737: PPUSH
25738: LD_VAR 0 2
25742: PPUSH
25743: CALL_OW 180
// end else
25747: GO 25862
// if GetControl ( vehicle ) = control_remote then
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 263
25758: PUSH
25759: LD_INT 2
25761: EQUAL
25762: IFFALSE 25823
// begin wait ( 0 0$2 ) ;
25764: LD_INT 70
25766: PPUSH
25767: CALL_OW 67
// if Connect ( vehicle ) then
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL 38078 0 1
25780: IFFALSE 25821
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25782: LD_VAR 0 1
25786: PPUSH
25787: LD_EXP 84
25791: PUSH
25792: LD_VAR 0 2
25796: ARRAY
25797: PUSH
25798: LD_INT 3
25800: ARRAY
25801: PPUSH
25802: LD_EXP 84
25806: PUSH
25807: LD_VAR 0 2
25811: ARRAY
25812: PUSH
25813: LD_INT 4
25815: ARRAY
25816: PPUSH
25817: CALL_OW 171
// end else
25821: GO 25862
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25823: LD_VAR 0 1
25827: PPUSH
25828: LD_EXP 84
25832: PUSH
25833: LD_VAR 0 2
25837: ARRAY
25838: PUSH
25839: LD_INT 3
25841: ARRAY
25842: PPUSH
25843: LD_EXP 84
25847: PUSH
25848: LD_VAR 0 2
25852: ARRAY
25853: PUSH
25854: LD_INT 4
25856: ARRAY
25857: PPUSH
25858: CALL_OW 171
// end ; end ;
25862: LD_VAR 0 3
25866: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25867: LD_INT 0
25869: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25870: LD_VAR 0 1
25874: PUSH
25875: LD_INT 250
25877: EQUAL
25878: PUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: CALL_OW 264
25888: PUSH
25889: LD_EXP 104
25893: EQUAL
25894: AND
25895: IFFALSE 25916
// MinerPlaceMine ( unit , x , y ) ;
25897: LD_VAR 0 2
25901: PPUSH
25902: LD_VAR 0 4
25906: PPUSH
25907: LD_VAR 0 5
25911: PPUSH
25912: CALL 28315 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25916: LD_VAR 0 1
25920: PUSH
25921: LD_INT 251
25923: EQUAL
25924: PUSH
25925: LD_VAR 0 2
25929: PPUSH
25930: CALL_OW 264
25934: PUSH
25935: LD_EXP 104
25939: EQUAL
25940: AND
25941: IFFALSE 25962
// MinerDetonateMine ( unit , x , y ) ;
25943: LD_VAR 0 2
25947: PPUSH
25948: LD_VAR 0 4
25952: PPUSH
25953: LD_VAR 0 5
25957: PPUSH
25958: CALL 28592 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25962: LD_VAR 0 1
25966: PUSH
25967: LD_INT 252
25969: EQUAL
25970: PUSH
25971: LD_VAR 0 2
25975: PPUSH
25976: CALL_OW 264
25980: PUSH
25981: LD_EXP 104
25985: EQUAL
25986: AND
25987: IFFALSE 26008
// MinerCreateMinefield ( unit , x , y ) ;
25989: LD_VAR 0 2
25993: PPUSH
25994: LD_VAR 0 4
25998: PPUSH
25999: LD_VAR 0 5
26003: PPUSH
26004: CALL 29009 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26008: LD_VAR 0 1
26012: PUSH
26013: LD_INT 253
26015: EQUAL
26016: PUSH
26017: LD_VAR 0 2
26021: PPUSH
26022: CALL_OW 257
26026: PUSH
26027: LD_INT 5
26029: EQUAL
26030: AND
26031: IFFALSE 26052
// ComBinocular ( unit , x , y ) ;
26033: LD_VAR 0 2
26037: PPUSH
26038: LD_VAR 0 4
26042: PPUSH
26043: LD_VAR 0 5
26047: PPUSH
26048: CALL 29380 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26052: LD_VAR 0 1
26056: PUSH
26057: LD_INT 254
26059: EQUAL
26060: PUSH
26061: LD_VAR 0 2
26065: PPUSH
26066: CALL_OW 264
26070: PUSH
26071: LD_EXP 99
26075: EQUAL
26076: AND
26077: PUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: CALL_OW 263
26087: PUSH
26088: LD_INT 3
26090: EQUAL
26091: AND
26092: IFFALSE 26108
// HackDestroyVehicle ( unit , selectedUnit ) ;
26094: LD_VAR 0 2
26098: PPUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: CALL 27675 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26108: LD_VAR 0 1
26112: PUSH
26113: LD_INT 255
26115: EQUAL
26116: PUSH
26117: LD_VAR 0 2
26121: PPUSH
26122: CALL_OW 264
26126: PUSH
26127: LD_INT 14
26129: PUSH
26130: LD_INT 53
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: IN
26137: AND
26138: PUSH
26139: LD_VAR 0 4
26143: PPUSH
26144: LD_VAR 0 5
26148: PPUSH
26149: CALL_OW 488
26153: AND
26154: IFFALSE 26178
// CutTreeXYR ( unit , x , y , 12 ) ;
26156: LD_VAR 0 2
26160: PPUSH
26161: LD_VAR 0 4
26165: PPUSH
26166: LD_VAR 0 5
26170: PPUSH
26171: LD_INT 12
26173: PPUSH
26174: CALL 26241 0 4
// if cmd = 256 then
26178: LD_VAR 0 1
26182: PUSH
26183: LD_INT 256
26185: EQUAL
26186: IFFALSE 26207
// SetFactoryWaypoint ( unit , x , y ) ;
26188: LD_VAR 0 2
26192: PPUSH
26193: LD_VAR 0 4
26197: PPUSH
26198: LD_VAR 0 5
26202: PPUSH
26203: CALL 24242 0 3
// if cmd = 257 then
26207: LD_VAR 0 1
26211: PUSH
26212: LD_INT 257
26214: EQUAL
26215: IFFALSE 26236
// SetWarhouseGatheringPoint ( unit , x , y ) ;
26217: LD_VAR 0 2
26221: PPUSH
26222: LD_VAR 0 4
26226: PPUSH
26227: LD_VAR 0 5
26231: PPUSH
26232: CALL 24600 0 3
// end ;
26236: LD_VAR 0 6
26240: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26241: LD_INT 0
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26252: LD_VAR 0 1
26256: NOT
26257: PUSH
26258: LD_VAR 0 2
26262: PPUSH
26263: LD_VAR 0 3
26267: PPUSH
26268: CALL_OW 488
26272: NOT
26273: OR
26274: PUSH
26275: LD_VAR 0 4
26279: NOT
26280: OR
26281: IFFALSE 26285
// exit ;
26283: GO 26625
// list := [ ] ;
26285: LD_ADDR_VAR 0 13
26289: PUSH
26290: EMPTY
26291: ST_TO_ADDR
// if x - r < 0 then
26292: LD_VAR 0 2
26296: PUSH
26297: LD_VAR 0 4
26301: MINUS
26302: PUSH
26303: LD_INT 0
26305: LESS
26306: IFFALSE 26318
// min_x := 0 else
26308: LD_ADDR_VAR 0 7
26312: PUSH
26313: LD_INT 0
26315: ST_TO_ADDR
26316: GO 26334
// min_x := x - r ;
26318: LD_ADDR_VAR 0 7
26322: PUSH
26323: LD_VAR 0 2
26327: PUSH
26328: LD_VAR 0 4
26332: MINUS
26333: ST_TO_ADDR
// if y - r < 0 then
26334: LD_VAR 0 3
26338: PUSH
26339: LD_VAR 0 4
26343: MINUS
26344: PUSH
26345: LD_INT 0
26347: LESS
26348: IFFALSE 26360
// min_y := 0 else
26350: LD_ADDR_VAR 0 8
26354: PUSH
26355: LD_INT 0
26357: ST_TO_ADDR
26358: GO 26376
// min_y := y - r ;
26360: LD_ADDR_VAR 0 8
26364: PUSH
26365: LD_VAR 0 3
26369: PUSH
26370: LD_VAR 0 4
26374: MINUS
26375: ST_TO_ADDR
// max_x := x + r ;
26376: LD_ADDR_VAR 0 9
26380: PUSH
26381: LD_VAR 0 2
26385: PUSH
26386: LD_VAR 0 4
26390: PLUS
26391: ST_TO_ADDR
// max_y := y + r ;
26392: LD_ADDR_VAR 0 10
26396: PUSH
26397: LD_VAR 0 3
26401: PUSH
26402: LD_VAR 0 4
26406: PLUS
26407: ST_TO_ADDR
// for _x = min_x to max_x do
26408: LD_ADDR_VAR 0 11
26412: PUSH
26413: DOUBLE
26414: LD_VAR 0 7
26418: DEC
26419: ST_TO_ADDR
26420: LD_VAR 0 9
26424: PUSH
26425: FOR_TO
26426: IFFALSE 26543
// for _y = min_y to max_y do
26428: LD_ADDR_VAR 0 12
26432: PUSH
26433: DOUBLE
26434: LD_VAR 0 8
26438: DEC
26439: ST_TO_ADDR
26440: LD_VAR 0 10
26444: PUSH
26445: FOR_TO
26446: IFFALSE 26539
// begin if not ValidHex ( _x , _y ) then
26448: LD_VAR 0 11
26452: PPUSH
26453: LD_VAR 0 12
26457: PPUSH
26458: CALL_OW 488
26462: NOT
26463: IFFALSE 26467
// continue ;
26465: GO 26445
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26467: LD_VAR 0 11
26471: PPUSH
26472: LD_VAR 0 12
26476: PPUSH
26477: CALL_OW 351
26481: PUSH
26482: LD_VAR 0 11
26486: PPUSH
26487: LD_VAR 0 12
26491: PPUSH
26492: CALL_OW 554
26496: AND
26497: IFFALSE 26537
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26499: LD_ADDR_VAR 0 13
26503: PUSH
26504: LD_VAR 0 13
26508: PPUSH
26509: LD_VAR 0 13
26513: PUSH
26514: LD_INT 1
26516: PLUS
26517: PPUSH
26518: LD_VAR 0 11
26522: PUSH
26523: LD_VAR 0 12
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL_OW 2
26536: ST_TO_ADDR
// end ;
26537: GO 26445
26539: POP
26540: POP
26541: GO 26425
26543: POP
26544: POP
// if not list then
26545: LD_VAR 0 13
26549: NOT
26550: IFFALSE 26554
// exit ;
26552: GO 26625
// for i in list do
26554: LD_ADDR_VAR 0 6
26558: PUSH
26559: LD_VAR 0 13
26563: PUSH
26564: FOR_IN
26565: IFFALSE 26623
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26567: LD_VAR 0 1
26571: PPUSH
26572: LD_STRING M
26574: PUSH
26575: LD_VAR 0 6
26579: PUSH
26580: LD_INT 1
26582: ARRAY
26583: PUSH
26584: LD_VAR 0 6
26588: PUSH
26589: LD_INT 2
26591: ARRAY
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: PPUSH
26617: CALL_OW 447
26621: GO 26564
26623: POP
26624: POP
// end ;
26625: LD_VAR 0 5
26629: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26630: LD_EXP 87
26634: NOT
26635: IFFALSE 26685
26637: GO 26639
26639: DISABLE
// begin initHack := true ;
26640: LD_ADDR_EXP 87
26644: PUSH
26645: LD_INT 1
26647: ST_TO_ADDR
// hackTanks := [ ] ;
26648: LD_ADDR_EXP 88
26652: PUSH
26653: EMPTY
26654: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26655: LD_ADDR_EXP 89
26659: PUSH
26660: EMPTY
26661: ST_TO_ADDR
// hackLimit := 3 ;
26662: LD_ADDR_EXP 90
26666: PUSH
26667: LD_INT 3
26669: ST_TO_ADDR
// hackDist := 12 ;
26670: LD_ADDR_EXP 91
26674: PUSH
26675: LD_INT 12
26677: ST_TO_ADDR
// hackCounter := [ ] ;
26678: LD_ADDR_EXP 92
26682: PUSH
26683: EMPTY
26684: ST_TO_ADDR
// end ;
26685: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26686: LD_EXP 87
26690: PUSH
26691: LD_INT 34
26693: PUSH
26694: LD_EXP 99
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PPUSH
26703: CALL_OW 69
26707: AND
26708: IFFALSE 26963
26710: GO 26712
26712: DISABLE
26713: LD_INT 0
26715: PPUSH
26716: PPUSH
// begin enable ;
26717: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26718: LD_ADDR_VAR 0 1
26722: PUSH
26723: LD_INT 34
26725: PUSH
26726: LD_EXP 99
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PPUSH
26735: CALL_OW 69
26739: PUSH
26740: FOR_IN
26741: IFFALSE 26961
// begin if not i in hackTanks then
26743: LD_VAR 0 1
26747: PUSH
26748: LD_EXP 88
26752: IN
26753: NOT
26754: IFFALSE 26837
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26756: LD_ADDR_EXP 88
26760: PUSH
26761: LD_EXP 88
26765: PPUSH
26766: LD_EXP 88
26770: PUSH
26771: LD_INT 1
26773: PLUS
26774: PPUSH
26775: LD_VAR 0 1
26779: PPUSH
26780: CALL_OW 1
26784: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26785: LD_ADDR_EXP 89
26789: PUSH
26790: LD_EXP 89
26794: PPUSH
26795: LD_EXP 89
26799: PUSH
26800: LD_INT 1
26802: PLUS
26803: PPUSH
26804: EMPTY
26805: PPUSH
26806: CALL_OW 1
26810: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26811: LD_ADDR_EXP 92
26815: PUSH
26816: LD_EXP 92
26820: PPUSH
26821: LD_EXP 92
26825: PUSH
26826: LD_INT 1
26828: PLUS
26829: PPUSH
26830: EMPTY
26831: PPUSH
26832: CALL_OW 1
26836: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 302
26846: NOT
26847: IFFALSE 26860
// begin HackUnlinkAll ( i ) ;
26849: LD_VAR 0 1
26853: PPUSH
26854: CALL 26966 0 1
// continue ;
26858: GO 26740
// end ; HackCheckCapturedStatus ( i ) ;
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL 27409 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26869: LD_ADDR_VAR 0 2
26873: PUSH
26874: LD_INT 81
26876: PUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 255
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 33
26893: PUSH
26894: LD_INT 3
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 91
26903: PUSH
26904: LD_VAR 0 1
26908: PUSH
26909: LD_EXP 91
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 50
26921: PUSH
26922: EMPTY
26923: LIST
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: PPUSH
26931: CALL_OW 69
26935: ST_TO_ADDR
// if not tmp then
26936: LD_VAR 0 2
26940: NOT
26941: IFFALSE 26945
// continue ;
26943: GO 26740
// HackLink ( i , tmp ) ;
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: CALL 27102 0 2
// end ;
26959: GO 26740
26961: POP
26962: POP
// end ;
26963: PPOPN 2
26965: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26966: LD_INT 0
26968: PPUSH
26969: PPUSH
26970: PPUSH
// if not hack in hackTanks then
26971: LD_VAR 0 1
26975: PUSH
26976: LD_EXP 88
26980: IN
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27097
// index := GetElementIndex ( hackTanks , hack ) ;
26986: LD_ADDR_VAR 0 4
26990: PUSH
26991: LD_EXP 88
26995: PPUSH
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL 34892 0 2
27005: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27006: LD_EXP 89
27010: PUSH
27011: LD_VAR 0 4
27015: ARRAY
27016: IFFALSE 27097
// begin for i in hackTanksCaptured [ index ] do
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_EXP 89
27027: PUSH
27028: LD_VAR 0 4
27032: ARRAY
27033: PUSH
27034: FOR_IN
27035: IFFALSE 27061
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27037: LD_VAR 0 3
27041: PUSH
27042: LD_INT 1
27044: ARRAY
27045: PPUSH
27046: LD_VAR 0 3
27050: PUSH
27051: LD_INT 2
27053: ARRAY
27054: PPUSH
27055: CALL_OW 235
27059: GO 27034
27061: POP
27062: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27063: LD_ADDR_EXP 89
27067: PUSH
27068: LD_EXP 89
27072: PPUSH
27073: LD_VAR 0 4
27077: PPUSH
27078: EMPTY
27079: PPUSH
27080: CALL_OW 1
27084: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27085: LD_VAR 0 1
27089: PPUSH
27090: LD_INT 0
27092: PPUSH
27093: CALL_OW 505
// end ; end ;
27097: LD_VAR 0 2
27101: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27102: LD_INT 0
27104: PPUSH
27105: PPUSH
27106: PPUSH
// if not hack in hackTanks or not vehicles then
27107: LD_VAR 0 1
27111: PUSH
27112: LD_EXP 88
27116: IN
27117: NOT
27118: PUSH
27119: LD_VAR 0 2
27123: NOT
27124: OR
27125: IFFALSE 27129
// exit ;
27127: GO 27404
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27129: LD_ADDR_VAR 0 2
27133: PUSH
27134: LD_VAR 0 1
27138: PPUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_INT 1
27146: PPUSH
27147: LD_INT 1
27149: PPUSH
27150: CALL 35542 0 4
27154: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27155: LD_ADDR_VAR 0 5
27159: PUSH
27160: LD_EXP 88
27164: PPUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL 34892 0 2
27174: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27175: LD_EXP 89
27179: PUSH
27180: LD_VAR 0 5
27184: ARRAY
27185: PUSH
27186: LD_EXP 90
27190: LESS
27191: IFFALSE 27380
// begin for i := 1 to vehicles do
27193: LD_ADDR_VAR 0 4
27197: PUSH
27198: DOUBLE
27199: LD_INT 1
27201: DEC
27202: ST_TO_ADDR
27203: LD_VAR 0 2
27207: PUSH
27208: FOR_TO
27209: IFFALSE 27378
// begin if hackTanksCaptured [ index ] = hackLimit then
27211: LD_EXP 89
27215: PUSH
27216: LD_VAR 0 5
27220: ARRAY
27221: PUSH
27222: LD_EXP 90
27226: EQUAL
27227: IFFALSE 27231
// break ;
27229: GO 27378
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27231: LD_ADDR_EXP 92
27235: PUSH
27236: LD_EXP 92
27240: PPUSH
27241: LD_VAR 0 5
27245: PPUSH
27246: LD_EXP 92
27250: PUSH
27251: LD_VAR 0 5
27255: ARRAY
27256: PUSH
27257: LD_INT 1
27259: PLUS
27260: PPUSH
27261: CALL_OW 1
27265: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27266: LD_ADDR_EXP 89
27270: PUSH
27271: LD_EXP 89
27275: PPUSH
27276: LD_VAR 0 5
27280: PUSH
27281: LD_EXP 89
27285: PUSH
27286: LD_VAR 0 5
27290: ARRAY
27291: PUSH
27292: LD_INT 1
27294: PLUS
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PPUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_VAR 0 4
27309: ARRAY
27310: PUSH
27311: LD_VAR 0 2
27315: PUSH
27316: LD_VAR 0 4
27320: ARRAY
27321: PPUSH
27322: CALL_OW 255
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PPUSH
27331: CALL 35107 0 3
27335: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27336: LD_VAR 0 2
27340: PUSH
27341: LD_VAR 0 4
27345: ARRAY
27346: PPUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 255
27356: PPUSH
27357: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27361: LD_VAR 0 2
27365: PUSH
27366: LD_VAR 0 4
27370: ARRAY
27371: PPUSH
27372: CALL_OW 141
// end ;
27376: GO 27208
27378: POP
27379: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_EXP 89
27389: PUSH
27390: LD_VAR 0 5
27394: ARRAY
27395: PUSH
27396: LD_INT 0
27398: PLUS
27399: PPUSH
27400: CALL_OW 505
// end ;
27404: LD_VAR 0 3
27408: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27409: LD_INT 0
27411: PPUSH
27412: PPUSH
27413: PPUSH
27414: PPUSH
// if not hack in hackTanks then
27415: LD_VAR 0 1
27419: PUSH
27420: LD_EXP 88
27424: IN
27425: NOT
27426: IFFALSE 27430
// exit ;
27428: GO 27670
// index := GetElementIndex ( hackTanks , hack ) ;
27430: LD_ADDR_VAR 0 4
27434: PUSH
27435: LD_EXP 88
27439: PPUSH
27440: LD_VAR 0 1
27444: PPUSH
27445: CALL 34892 0 2
27449: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27450: LD_ADDR_VAR 0 3
27454: PUSH
27455: DOUBLE
27456: LD_EXP 89
27460: PUSH
27461: LD_VAR 0 4
27465: ARRAY
27466: INC
27467: ST_TO_ADDR
27468: LD_INT 1
27470: PUSH
27471: FOR_DOWNTO
27472: IFFALSE 27644
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27474: LD_ADDR_VAR 0 5
27478: PUSH
27479: LD_EXP 89
27483: PUSH
27484: LD_VAR 0 4
27488: ARRAY
27489: PUSH
27490: LD_VAR 0 3
27494: ARRAY
27495: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27496: LD_VAR 0 5
27500: PUSH
27501: LD_INT 1
27503: ARRAY
27504: PPUSH
27505: CALL_OW 302
27509: NOT
27510: PUSH
27511: LD_VAR 0 5
27515: PUSH
27516: LD_INT 1
27518: ARRAY
27519: PPUSH
27520: CALL_OW 255
27524: PUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 255
27534: NONEQUAL
27535: OR
27536: IFFALSE 27642
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27538: LD_VAR 0 5
27542: PUSH
27543: LD_INT 1
27545: ARRAY
27546: PPUSH
27547: CALL_OW 305
27551: PUSH
27552: LD_VAR 0 5
27556: PUSH
27557: LD_INT 1
27559: ARRAY
27560: PPUSH
27561: CALL_OW 255
27565: PUSH
27566: LD_VAR 0 1
27570: PPUSH
27571: CALL_OW 255
27575: EQUAL
27576: AND
27577: IFFALSE 27601
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27579: LD_VAR 0 5
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: PPUSH
27588: LD_VAR 0 5
27592: PUSH
27593: LD_INT 2
27595: ARRAY
27596: PPUSH
27597: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27601: LD_ADDR_EXP 89
27605: PUSH
27606: LD_EXP 89
27610: PPUSH
27611: LD_VAR 0 4
27615: PPUSH
27616: LD_EXP 89
27620: PUSH
27621: LD_VAR 0 4
27625: ARRAY
27626: PPUSH
27627: LD_VAR 0 3
27631: PPUSH
27632: CALL_OW 3
27636: PPUSH
27637: CALL_OW 1
27641: ST_TO_ADDR
// end ; end ;
27642: GO 27471
27644: POP
27645: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27646: LD_VAR 0 1
27650: PPUSH
27651: LD_EXP 89
27655: PUSH
27656: LD_VAR 0 4
27660: ARRAY
27661: PUSH
27662: LD_INT 0
27664: PLUS
27665: PPUSH
27666: CALL_OW 505
// end ;
27670: LD_VAR 0 2
27674: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27675: LD_INT 0
27677: PPUSH
27678: PPUSH
27679: PPUSH
27680: PPUSH
// if not hack in hackTanks then
27681: LD_VAR 0 1
27685: PUSH
27686: LD_EXP 88
27690: IN
27691: NOT
27692: IFFALSE 27696
// exit ;
27694: GO 27781
// index := GetElementIndex ( hackTanks , hack ) ;
27696: LD_ADDR_VAR 0 5
27700: PUSH
27701: LD_EXP 88
27705: PPUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL 34892 0 2
27715: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27716: LD_ADDR_VAR 0 4
27720: PUSH
27721: DOUBLE
27722: LD_INT 1
27724: DEC
27725: ST_TO_ADDR
27726: LD_EXP 89
27730: PUSH
27731: LD_VAR 0 5
27735: ARRAY
27736: PUSH
27737: FOR_TO
27738: IFFALSE 27779
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27740: LD_EXP 89
27744: PUSH
27745: LD_VAR 0 5
27749: ARRAY
27750: PUSH
27751: LD_VAR 0 4
27755: ARRAY
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: PUSH
27761: LD_VAR 0 2
27765: EQUAL
27766: IFFALSE 27777
// KillUnit ( vehicle ) ;
27768: LD_VAR 0 2
27772: PPUSH
27773: CALL_OW 66
27777: GO 27737
27779: POP
27780: POP
// end ;
27781: LD_VAR 0 3
27785: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27786: LD_EXP 93
27790: NOT
27791: IFFALSE 27826
27793: GO 27795
27795: DISABLE
// begin initMiner := true ;
27796: LD_ADDR_EXP 93
27800: PUSH
27801: LD_INT 1
27803: ST_TO_ADDR
// minersList := [ ] ;
27804: LD_ADDR_EXP 94
27808: PUSH
27809: EMPTY
27810: ST_TO_ADDR
// minerMinesList := [ ] ;
27811: LD_ADDR_EXP 95
27815: PUSH
27816: EMPTY
27817: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27818: LD_ADDR_EXP 96
27822: PUSH
27823: LD_INT 5
27825: ST_TO_ADDR
// end ;
27826: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27827: LD_EXP 93
27831: PUSH
27832: LD_INT 34
27834: PUSH
27835: LD_EXP 104
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PPUSH
27844: CALL_OW 69
27848: AND
27849: IFFALSE 28312
27851: GO 27853
27853: DISABLE
27854: LD_INT 0
27856: PPUSH
27857: PPUSH
27858: PPUSH
27859: PPUSH
// begin enable ;
27860: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27861: LD_ADDR_VAR 0 1
27865: PUSH
27866: LD_INT 34
27868: PUSH
27869: LD_EXP 104
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PPUSH
27878: CALL_OW 69
27882: PUSH
27883: FOR_IN
27884: IFFALSE 27956
// begin if not i in minersList then
27886: LD_VAR 0 1
27890: PUSH
27891: LD_EXP 94
27895: IN
27896: NOT
27897: IFFALSE 27954
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27899: LD_ADDR_EXP 94
27903: PUSH
27904: LD_EXP 94
27908: PPUSH
27909: LD_EXP 94
27913: PUSH
27914: LD_INT 1
27916: PLUS
27917: PPUSH
27918: LD_VAR 0 1
27922: PPUSH
27923: CALL_OW 1
27927: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27928: LD_ADDR_EXP 95
27932: PUSH
27933: LD_EXP 95
27937: PPUSH
27938: LD_EXP 95
27942: PUSH
27943: LD_INT 1
27945: PLUS
27946: PPUSH
27947: EMPTY
27948: PPUSH
27949: CALL_OW 1
27953: ST_TO_ADDR
// end end ;
27954: GO 27883
27956: POP
27957: POP
// for i := minerMinesList downto 1 do
27958: LD_ADDR_VAR 0 1
27962: PUSH
27963: DOUBLE
27964: LD_EXP 95
27968: INC
27969: ST_TO_ADDR
27970: LD_INT 1
27972: PUSH
27973: FOR_DOWNTO
27974: IFFALSE 28310
// begin if IsLive ( minersList [ i ] ) then
27976: LD_EXP 94
27980: PUSH
27981: LD_VAR 0 1
27985: ARRAY
27986: PPUSH
27987: CALL_OW 300
27991: IFFALSE 28019
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27993: LD_EXP 94
27997: PUSH
27998: LD_VAR 0 1
28002: ARRAY
28003: PPUSH
28004: LD_EXP 95
28008: PUSH
28009: LD_VAR 0 1
28013: ARRAY
28014: PPUSH
28015: CALL_OW 505
// if not minerMinesList [ i ] then
28019: LD_EXP 95
28023: PUSH
28024: LD_VAR 0 1
28028: ARRAY
28029: NOT
28030: IFFALSE 28034
// continue ;
28032: GO 27973
// for j := minerMinesList [ i ] downto 1 do
28034: LD_ADDR_VAR 0 2
28038: PUSH
28039: DOUBLE
28040: LD_EXP 95
28044: PUSH
28045: LD_VAR 0 1
28049: ARRAY
28050: INC
28051: ST_TO_ADDR
28052: LD_INT 1
28054: PUSH
28055: FOR_DOWNTO
28056: IFFALSE 28306
// begin side := GetSide ( minersList [ i ] ) ;
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_EXP 94
28067: PUSH
28068: LD_VAR 0 1
28072: ARRAY
28073: PPUSH
28074: CALL_OW 255
28078: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28079: LD_ADDR_VAR 0 4
28083: PUSH
28084: LD_EXP 95
28088: PUSH
28089: LD_VAR 0 1
28093: ARRAY
28094: PUSH
28095: LD_VAR 0 2
28099: ARRAY
28100: PUSH
28101: LD_INT 1
28103: ARRAY
28104: PPUSH
28105: LD_EXP 95
28109: PUSH
28110: LD_VAR 0 1
28114: ARRAY
28115: PUSH
28116: LD_VAR 0 2
28120: ARRAY
28121: PUSH
28122: LD_INT 2
28124: ARRAY
28125: PPUSH
28126: CALL_OW 428
28130: ST_TO_ADDR
// if not tmp then
28131: LD_VAR 0 4
28135: NOT
28136: IFFALSE 28140
// continue ;
28138: GO 28055
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28140: LD_VAR 0 4
28144: PUSH
28145: LD_INT 81
28147: PUSH
28148: LD_VAR 0 3
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 69
28161: IN
28162: PUSH
28163: LD_EXP 95
28167: PUSH
28168: LD_VAR 0 1
28172: ARRAY
28173: PUSH
28174: LD_VAR 0 2
28178: ARRAY
28179: PUSH
28180: LD_INT 1
28182: ARRAY
28183: PPUSH
28184: LD_EXP 95
28188: PUSH
28189: LD_VAR 0 1
28193: ARRAY
28194: PUSH
28195: LD_VAR 0 2
28199: ARRAY
28200: PUSH
28201: LD_INT 2
28203: ARRAY
28204: PPUSH
28205: CALL_OW 458
28209: AND
28210: IFFALSE 28304
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28212: LD_EXP 95
28216: PUSH
28217: LD_VAR 0 1
28221: ARRAY
28222: PUSH
28223: LD_VAR 0 2
28227: ARRAY
28228: PUSH
28229: LD_INT 1
28231: ARRAY
28232: PPUSH
28233: LD_EXP 95
28237: PUSH
28238: LD_VAR 0 1
28242: ARRAY
28243: PUSH
28244: LD_VAR 0 2
28248: ARRAY
28249: PUSH
28250: LD_INT 2
28252: ARRAY
28253: PPUSH
28254: LD_VAR 0 3
28258: PPUSH
28259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28263: LD_ADDR_EXP 95
28267: PUSH
28268: LD_EXP 95
28272: PPUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: LD_EXP 95
28282: PUSH
28283: LD_VAR 0 1
28287: ARRAY
28288: PPUSH
28289: LD_VAR 0 2
28293: PPUSH
28294: CALL_OW 3
28298: PPUSH
28299: CALL_OW 1
28303: ST_TO_ADDR
// end ; end ;
28304: GO 28055
28306: POP
28307: POP
// end ;
28308: GO 27973
28310: POP
28311: POP
// end ;
28312: PPOPN 4
28314: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28315: LD_INT 0
28317: PPUSH
28318: PPUSH
// result := false ;
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: LD_INT 0
28326: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 264
28336: PUSH
28337: LD_EXP 104
28341: EQUAL
28342: NOT
28343: IFFALSE 28347
// exit ;
28345: GO 28587
// index := GetElementIndex ( minersList , unit ) ;
28347: LD_ADDR_VAR 0 5
28351: PUSH
28352: LD_EXP 94
28356: PPUSH
28357: LD_VAR 0 1
28361: PPUSH
28362: CALL 34892 0 2
28366: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28367: LD_EXP 95
28371: PUSH
28372: LD_VAR 0 5
28376: ARRAY
28377: PUSH
28378: LD_EXP 96
28382: GREATEREQUAL
28383: IFFALSE 28387
// exit ;
28385: GO 28587
// ComMoveXY ( unit , x , y ) ;
28387: LD_VAR 0 1
28391: PPUSH
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_VAR 0 3
28401: PPUSH
28402: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28406: LD_INT 35
28408: PPUSH
28409: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28413: LD_VAR 0 1
28417: PPUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: LD_VAR 0 3
28427: PPUSH
28428: CALL 66178 0 3
28432: NOT
28433: PUSH
28434: LD_VAR 0 1
28438: PPUSH
28439: CALL_OW 314
28443: AND
28444: IFFALSE 28448
// exit ;
28446: GO 28587
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_VAR 0 3
28457: PPUSH
28458: CALL_OW 428
28462: PUSH
28463: LD_VAR 0 1
28467: EQUAL
28468: PUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 314
28478: NOT
28479: AND
28480: IFFALSE 28406
// PlaySoundXY ( x , y , PlantMine ) ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 3
28491: PPUSH
28492: LD_STRING PlantMine
28494: PPUSH
28495: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28499: LD_VAR 0 2
28503: PPUSH
28504: LD_VAR 0 3
28508: PPUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 255
28518: PPUSH
28519: LD_INT 0
28521: PPUSH
28522: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28526: LD_ADDR_EXP 95
28530: PUSH
28531: LD_EXP 95
28535: PPUSH
28536: LD_VAR 0 5
28540: PUSH
28541: LD_EXP 95
28545: PUSH
28546: LD_VAR 0 5
28550: ARRAY
28551: PUSH
28552: LD_INT 1
28554: PLUS
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PPUSH
28560: LD_VAR 0 2
28564: PUSH
28565: LD_VAR 0 3
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL 35107 0 3
28578: ST_TO_ADDR
// result := true ;
28579: LD_ADDR_VAR 0 4
28583: PUSH
28584: LD_INT 1
28586: ST_TO_ADDR
// end ;
28587: LD_VAR 0 4
28591: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28592: LD_INT 0
28594: PPUSH
28595: PPUSH
28596: PPUSH
// if not unit in minersList then
28597: LD_VAR 0 1
28601: PUSH
28602: LD_EXP 94
28606: IN
28607: NOT
28608: IFFALSE 28612
// exit ;
28610: GO 29004
// index := GetElementIndex ( minersList , unit ) ;
28612: LD_ADDR_VAR 0 6
28616: PUSH
28617: LD_EXP 94
28621: PPUSH
28622: LD_VAR 0 1
28626: PPUSH
28627: CALL 34892 0 2
28631: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28632: LD_ADDR_VAR 0 5
28636: PUSH
28637: DOUBLE
28638: LD_EXP 95
28642: PUSH
28643: LD_VAR 0 6
28647: ARRAY
28648: INC
28649: ST_TO_ADDR
28650: LD_INT 1
28652: PUSH
28653: FOR_DOWNTO
28654: IFFALSE 28815
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28656: LD_EXP 95
28660: PUSH
28661: LD_VAR 0 6
28665: ARRAY
28666: PUSH
28667: LD_VAR 0 5
28671: ARRAY
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: PUSH
28677: LD_VAR 0 2
28681: EQUAL
28682: PUSH
28683: LD_EXP 95
28687: PUSH
28688: LD_VAR 0 6
28692: ARRAY
28693: PUSH
28694: LD_VAR 0 5
28698: ARRAY
28699: PUSH
28700: LD_INT 2
28702: ARRAY
28703: PUSH
28704: LD_VAR 0 3
28708: EQUAL
28709: AND
28710: IFFALSE 28813
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28712: LD_EXP 95
28716: PUSH
28717: LD_VAR 0 6
28721: ARRAY
28722: PUSH
28723: LD_VAR 0 5
28727: ARRAY
28728: PUSH
28729: LD_INT 1
28731: ARRAY
28732: PPUSH
28733: LD_EXP 95
28737: PUSH
28738: LD_VAR 0 6
28742: ARRAY
28743: PUSH
28744: LD_VAR 0 5
28748: ARRAY
28749: PUSH
28750: LD_INT 2
28752: ARRAY
28753: PPUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL_OW 255
28763: PPUSH
28764: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28768: LD_ADDR_EXP 95
28772: PUSH
28773: LD_EXP 95
28777: PPUSH
28778: LD_VAR 0 6
28782: PPUSH
28783: LD_EXP 95
28787: PUSH
28788: LD_VAR 0 6
28792: ARRAY
28793: PPUSH
28794: LD_VAR 0 5
28798: PPUSH
28799: CALL_OW 3
28803: PPUSH
28804: CALL_OW 1
28808: ST_TO_ADDR
// exit ;
28809: POP
28810: POP
28811: GO 29004
// end ; end ;
28813: GO 28653
28815: POP
28816: POP
// for i := minerMinesList [ index ] downto 1 do
28817: LD_ADDR_VAR 0 5
28821: PUSH
28822: DOUBLE
28823: LD_EXP 95
28827: PUSH
28828: LD_VAR 0 6
28832: ARRAY
28833: INC
28834: ST_TO_ADDR
28835: LD_INT 1
28837: PUSH
28838: FOR_DOWNTO
28839: IFFALSE 29002
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28841: LD_EXP 95
28845: PUSH
28846: LD_VAR 0 6
28850: ARRAY
28851: PUSH
28852: LD_VAR 0 5
28856: ARRAY
28857: PUSH
28858: LD_INT 1
28860: ARRAY
28861: PPUSH
28862: LD_EXP 95
28866: PUSH
28867: LD_VAR 0 6
28871: ARRAY
28872: PUSH
28873: LD_VAR 0 5
28877: ARRAY
28878: PUSH
28879: LD_INT 2
28881: ARRAY
28882: PPUSH
28883: LD_VAR 0 2
28887: PPUSH
28888: LD_VAR 0 3
28892: PPUSH
28893: CALL_OW 298
28897: PUSH
28898: LD_INT 6
28900: LESS
28901: IFFALSE 29000
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28903: LD_EXP 95
28907: PUSH
28908: LD_VAR 0 6
28912: ARRAY
28913: PUSH
28914: LD_VAR 0 5
28918: ARRAY
28919: PUSH
28920: LD_INT 1
28922: ARRAY
28923: PPUSH
28924: LD_EXP 95
28928: PUSH
28929: LD_VAR 0 6
28933: ARRAY
28934: PUSH
28935: LD_VAR 0 5
28939: ARRAY
28940: PUSH
28941: LD_INT 2
28943: ARRAY
28944: PPUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 255
28954: PPUSH
28955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28959: LD_ADDR_EXP 95
28963: PUSH
28964: LD_EXP 95
28968: PPUSH
28969: LD_VAR 0 6
28973: PPUSH
28974: LD_EXP 95
28978: PUSH
28979: LD_VAR 0 6
28983: ARRAY
28984: PPUSH
28985: LD_VAR 0 5
28989: PPUSH
28990: CALL_OW 3
28994: PPUSH
28995: CALL_OW 1
28999: ST_TO_ADDR
// end ; end ;
29000: GO 28838
29002: POP
29003: POP
// end ;
29004: LD_VAR 0 4
29008: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29009: LD_INT 0
29011: PPUSH
29012: PPUSH
29013: PPUSH
29014: PPUSH
29015: PPUSH
29016: PPUSH
29017: PPUSH
29018: PPUSH
29019: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL_OW 264
29029: PUSH
29030: LD_EXP 104
29034: EQUAL
29035: NOT
29036: PUSH
29037: LD_VAR 0 1
29041: PUSH
29042: LD_EXP 94
29046: IN
29047: NOT
29048: OR
29049: IFFALSE 29053
// exit ;
29051: GO 29375
// index := GetElementIndex ( minersList , unit ) ;
29053: LD_ADDR_VAR 0 6
29057: PUSH
29058: LD_EXP 94
29062: PPUSH
29063: LD_VAR 0 1
29067: PPUSH
29068: CALL 34892 0 2
29072: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29073: LD_ADDR_VAR 0 8
29077: PUSH
29078: LD_EXP 96
29082: PUSH
29083: LD_EXP 95
29087: PUSH
29088: LD_VAR 0 6
29092: ARRAY
29093: MINUS
29094: ST_TO_ADDR
// if not minesFreeAmount then
29095: LD_VAR 0 8
29099: NOT
29100: IFFALSE 29104
// exit ;
29102: GO 29375
// tmp := [ ] ;
29104: LD_ADDR_VAR 0 7
29108: PUSH
29109: EMPTY
29110: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29111: LD_ADDR_VAR 0 5
29115: PUSH
29116: DOUBLE
29117: LD_INT 1
29119: DEC
29120: ST_TO_ADDR
29121: LD_VAR 0 8
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29322
// begin _d := rand ( 0 , 5 ) ;
29129: LD_ADDR_VAR 0 11
29133: PUSH
29134: LD_INT 0
29136: PPUSH
29137: LD_INT 5
29139: PPUSH
29140: CALL_OW 12
29144: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29145: LD_ADDR_VAR 0 12
29149: PUSH
29150: LD_INT 2
29152: PPUSH
29153: LD_INT 6
29155: PPUSH
29156: CALL_OW 12
29160: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29161: LD_ADDR_VAR 0 9
29165: PUSH
29166: LD_VAR 0 2
29170: PPUSH
29171: LD_VAR 0 11
29175: PPUSH
29176: LD_VAR 0 12
29180: PPUSH
29181: CALL_OW 272
29185: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29186: LD_ADDR_VAR 0 10
29190: PUSH
29191: LD_VAR 0 3
29195: PPUSH
29196: LD_VAR 0 11
29200: PPUSH
29201: LD_VAR 0 12
29205: PPUSH
29206: CALL_OW 273
29210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29211: LD_VAR 0 9
29215: PPUSH
29216: LD_VAR 0 10
29220: PPUSH
29221: CALL_OW 488
29225: PUSH
29226: LD_VAR 0 9
29230: PUSH
29231: LD_VAR 0 10
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_VAR 0 7
29244: IN
29245: NOT
29246: AND
29247: PUSH
29248: LD_VAR 0 9
29252: PPUSH
29253: LD_VAR 0 10
29257: PPUSH
29258: CALL_OW 458
29262: NOT
29263: AND
29264: IFFALSE 29306
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29266: LD_ADDR_VAR 0 7
29270: PUSH
29271: LD_VAR 0 7
29275: PPUSH
29276: LD_VAR 0 7
29280: PUSH
29281: LD_INT 1
29283: PLUS
29284: PPUSH
29285: LD_VAR 0 9
29289: PUSH
29290: LD_VAR 0 10
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 1
29303: ST_TO_ADDR
29304: GO 29320
// i := i - 1 ;
29306: LD_ADDR_VAR 0 5
29310: PUSH
29311: LD_VAR 0 5
29315: PUSH
29316: LD_INT 1
29318: MINUS
29319: ST_TO_ADDR
// end ;
29320: GO 29126
29322: POP
29323: POP
// for i in tmp do
29324: LD_ADDR_VAR 0 5
29328: PUSH
29329: LD_VAR 0 7
29333: PUSH
29334: FOR_IN
29335: IFFALSE 29373
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29337: LD_VAR 0 1
29341: PPUSH
29342: LD_VAR 0 5
29346: PUSH
29347: LD_INT 1
29349: ARRAY
29350: PPUSH
29351: LD_VAR 0 5
29355: PUSH
29356: LD_INT 2
29358: ARRAY
29359: PPUSH
29360: CALL 28315 0 3
29364: NOT
29365: IFFALSE 29371
// exit ;
29367: POP
29368: POP
29369: GO 29375
29371: GO 29334
29373: POP
29374: POP
// end ;
29375: LD_VAR 0 4
29379: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
// if not GetClass ( unit ) = class_sniper then
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 257
29398: PUSH
29399: LD_INT 5
29401: EQUAL
29402: NOT
29403: IFFALSE 29407
// exit ;
29405: GO 29795
// dist := 8 ;
29407: LD_ADDR_VAR 0 5
29411: PUSH
29412: LD_INT 8
29414: ST_TO_ADDR
// viewRange := 12 ;
29415: LD_ADDR_VAR 0 7
29419: PUSH
29420: LD_INT 12
29422: ST_TO_ADDR
// side := GetSide ( unit ) ;
29423: LD_ADDR_VAR 0 6
29427: PUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 255
29437: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29438: LD_INT 61
29440: PPUSH
29441: LD_VAR 0 6
29445: PPUSH
29446: CALL_OW 321
29450: PUSH
29451: LD_INT 2
29453: EQUAL
29454: IFFALSE 29464
// viewRange := 16 ;
29456: LD_ADDR_VAR 0 7
29460: PUSH
29461: LD_INT 16
29463: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29464: LD_VAR 0 1
29468: PPUSH
29469: LD_VAR 0 2
29473: PPUSH
29474: LD_VAR 0 3
29478: PPUSH
29479: CALL_OW 297
29483: PUSH
29484: LD_VAR 0 5
29488: GREATER
29489: IFFALSE 29568
// begin ComMoveXY ( unit , x , y ) ;
29491: LD_VAR 0 1
29495: PPUSH
29496: LD_VAR 0 2
29500: PPUSH
29501: LD_VAR 0 3
29505: PPUSH
29506: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29510: LD_INT 35
29512: PPUSH
29513: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29517: LD_VAR 0 1
29521: PPUSH
29522: LD_VAR 0 2
29526: PPUSH
29527: LD_VAR 0 3
29531: PPUSH
29532: CALL 66178 0 3
29536: NOT
29537: IFFALSE 29541
// exit ;
29539: GO 29795
// until GetDistUnitXY ( unit , x , y ) < dist ;
29541: LD_VAR 0 1
29545: PPUSH
29546: LD_VAR 0 2
29550: PPUSH
29551: LD_VAR 0 3
29555: PPUSH
29556: CALL_OW 297
29560: PUSH
29561: LD_VAR 0 5
29565: LESS
29566: IFFALSE 29510
// end ; ComTurnXY ( unit , x , y ) ;
29568: LD_VAR 0 1
29572: PPUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: LD_VAR 0 3
29582: PPUSH
29583: CALL_OW 118
// wait ( 5 ) ;
29587: LD_INT 5
29589: PPUSH
29590: CALL_OW 67
// _d := GetDir ( unit ) ;
29594: LD_ADDR_VAR 0 10
29598: PUSH
29599: LD_VAR 0 1
29603: PPUSH
29604: CALL_OW 254
29608: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29609: LD_ADDR_VAR 0 8
29613: PUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL_OW 250
29623: PPUSH
29624: LD_VAR 0 10
29628: PPUSH
29629: LD_VAR 0 5
29633: PPUSH
29634: CALL_OW 272
29638: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29639: LD_ADDR_VAR 0 9
29643: PUSH
29644: LD_VAR 0 1
29648: PPUSH
29649: CALL_OW 251
29653: PPUSH
29654: LD_VAR 0 10
29658: PPUSH
29659: LD_VAR 0 5
29663: PPUSH
29664: CALL_OW 273
29668: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29669: LD_VAR 0 8
29673: PPUSH
29674: LD_VAR 0 9
29678: PPUSH
29679: CALL_OW 488
29683: NOT
29684: IFFALSE 29688
// exit ;
29686: GO 29795
// ComAnimCustom ( unit , 1 ) ;
29688: LD_VAR 0 1
29692: PPUSH
29693: LD_INT 1
29695: PPUSH
29696: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29700: LD_VAR 0 8
29704: PPUSH
29705: LD_VAR 0 9
29709: PPUSH
29710: LD_VAR 0 6
29714: PPUSH
29715: LD_VAR 0 7
29719: PPUSH
29720: CALL_OW 330
// repeat wait ( 1 ) ;
29724: LD_INT 1
29726: PPUSH
29727: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29731: LD_VAR 0 1
29735: PPUSH
29736: CALL_OW 316
29740: PUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: CALL_OW 314
29750: OR
29751: PUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 302
29761: NOT
29762: OR
29763: PUSH
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 301
29773: OR
29774: IFFALSE 29724
// RemoveSeeing ( _x , _y , side ) ;
29776: LD_VAR 0 8
29780: PPUSH
29781: LD_VAR 0 9
29785: PPUSH
29786: LD_VAR 0 6
29790: PPUSH
29791: CALL_OW 331
// end ; end_of_file
29795: LD_VAR 0 4
29799: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
29800: LD_INT 0
29802: PPUSH
// ar_miner := 81 ;
29803: LD_ADDR_EXP 104
29807: PUSH
29808: LD_INT 81
29810: ST_TO_ADDR
// ar_crane := 88 ;
29811: LD_ADDR_EXP 103
29815: PUSH
29816: LD_INT 88
29818: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29819: LD_ADDR_EXP 98
29823: PUSH
29824: LD_INT 89
29826: ST_TO_ADDR
// us_hack := 99 ;
29827: LD_ADDR_EXP 99
29831: PUSH
29832: LD_INT 99
29834: ST_TO_ADDR
// us_artillery := 97 ;
29835: LD_ADDR_EXP 100
29839: PUSH
29840: LD_INT 97
29842: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29843: LD_ADDR_EXP 101
29847: PUSH
29848: LD_INT 91
29850: ST_TO_ADDR
// ar_mortar := 92 ;
29851: LD_ADDR_EXP 102
29855: PUSH
29856: LD_INT 92
29858: ST_TO_ADDR
// ru_flamethrower := 93 ;
29859: LD_ADDR_EXP 105
29863: PUSH
29864: LD_INT 93
29866: ST_TO_ADDR
// ru_radar := 98 ;
29867: LD_ADDR_EXP 97
29871: PUSH
29872: LD_INT 98
29874: ST_TO_ADDR
// tech_Artillery := 80 ;
29875: LD_ADDR_EXP 106
29879: PUSH
29880: LD_INT 80
29882: ST_TO_ADDR
// tech_RadMat := 81 ;
29883: LD_ADDR_EXP 107
29887: PUSH
29888: LD_INT 81
29890: ST_TO_ADDR
// tech_BasicTools := 82 ;
29891: LD_ADDR_EXP 108
29895: PUSH
29896: LD_INT 82
29898: ST_TO_ADDR
// tech_Cargo := 83 ;
29899: LD_ADDR_EXP 109
29903: PUSH
29904: LD_INT 83
29906: ST_TO_ADDR
// tech_Track := 84 ;
29907: LD_ADDR_EXP 110
29911: PUSH
29912: LD_INT 84
29914: ST_TO_ADDR
// tech_Crane := 85 ;
29915: LD_ADDR_EXP 111
29919: PUSH
29920: LD_INT 85
29922: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29923: LD_ADDR_EXP 112
29927: PUSH
29928: LD_INT 86
29930: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29931: LD_ADDR_EXP 113
29935: PUSH
29936: LD_INT 87
29938: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29939: LD_ADDR_EXP 114
29943: PUSH
29944: LD_INT 88
29946: ST_TO_ADDR
// class_mastodont := 31 ;
29947: LD_ADDR_EXP 115
29951: PUSH
29952: LD_INT 31
29954: ST_TO_ADDR
// end ;
29955: LD_VAR 0 1
29959: RET
// every 1 do
29960: GO 29962
29962: DISABLE
// InitGlobalVariables ; end_of_file
29963: CALL 29800 0 0
29967: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29968: LD_INT 0
29970: PPUSH
29971: PPUSH
// if exist_mode then
29972: LD_VAR 0 2
29976: IFFALSE 30001
// unit := CreateCharacter ( prefix & ident ) else
29978: LD_ADDR_VAR 0 5
29982: PUSH
29983: LD_VAR 0 3
29987: PUSH
29988: LD_VAR 0 1
29992: STR
29993: PPUSH
29994: CALL_OW 34
29998: ST_TO_ADDR
29999: GO 30016
// unit := NewCharacter ( ident ) ;
30001: LD_ADDR_VAR 0 5
30005: PUSH
30006: LD_VAR 0 1
30010: PPUSH
30011: CALL_OW 25
30015: ST_TO_ADDR
// result := unit ;
30016: LD_ADDR_VAR 0 4
30020: PUSH
30021: LD_VAR 0 5
30025: ST_TO_ADDR
// end ;
30026: LD_VAR 0 4
30030: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
// if not side or not nation then
30035: LD_VAR 0 1
30039: NOT
30040: PUSH
30041: LD_VAR 0 2
30045: NOT
30046: OR
30047: IFFALSE 30051
// exit ;
30049: GO 30819
// case nation of nation_american :
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30278
30064: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30065: LD_ADDR_VAR 0 4
30069: PUSH
30070: LD_INT 35
30072: PUSH
30073: LD_INT 45
30075: PUSH
30076: LD_INT 46
30078: PUSH
30079: LD_INT 47
30081: PUSH
30082: LD_INT 82
30084: PUSH
30085: LD_INT 83
30087: PUSH
30088: LD_INT 84
30090: PUSH
30091: LD_INT 85
30093: PUSH
30094: LD_INT 86
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: LD_INT 6
30105: PUSH
30106: LD_INT 15
30108: PUSH
30109: LD_INT 16
30111: PUSH
30112: LD_INT 7
30114: PUSH
30115: LD_INT 12
30117: PUSH
30118: LD_INT 13
30120: PUSH
30121: LD_INT 10
30123: PUSH
30124: LD_INT 14
30126: PUSH
30127: LD_INT 20
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 22
30135: PUSH
30136: LD_INT 25
30138: PUSH
30139: LD_INT 32
30141: PUSH
30142: LD_INT 27
30144: PUSH
30145: LD_INT 36
30147: PUSH
30148: LD_INT 69
30150: PUSH
30151: LD_INT 39
30153: PUSH
30154: LD_INT 34
30156: PUSH
30157: LD_INT 40
30159: PUSH
30160: LD_INT 48
30162: PUSH
30163: LD_INT 49
30165: PUSH
30166: LD_INT 50
30168: PUSH
30169: LD_INT 51
30171: PUSH
30172: LD_INT 52
30174: PUSH
30175: LD_INT 53
30177: PUSH
30178: LD_INT 54
30180: PUSH
30181: LD_INT 55
30183: PUSH
30184: LD_INT 56
30186: PUSH
30187: LD_INT 57
30189: PUSH
30190: LD_INT 58
30192: PUSH
30193: LD_INT 59
30195: PUSH
30196: LD_INT 60
30198: PUSH
30199: LD_INT 61
30201: PUSH
30202: LD_INT 62
30204: PUSH
30205: LD_INT 80
30207: PUSH
30208: LD_INT 82
30210: PUSH
30211: LD_INT 83
30213: PUSH
30214: LD_INT 84
30216: PUSH
30217: LD_INT 85
30219: PUSH
30220: LD_INT 86
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: ST_TO_ADDR
30276: GO 30743
30278: LD_INT 2
30280: DOUBLE
30281: EQUAL
30282: IFTRUE 30286
30284: GO 30512
30286: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30287: LD_ADDR_VAR 0 4
30291: PUSH
30292: LD_INT 35
30294: PUSH
30295: LD_INT 45
30297: PUSH
30298: LD_INT 46
30300: PUSH
30301: LD_INT 47
30303: PUSH
30304: LD_INT 82
30306: PUSH
30307: LD_INT 83
30309: PUSH
30310: LD_INT 84
30312: PUSH
30313: LD_INT 85
30315: PUSH
30316: LD_INT 87
30318: PUSH
30319: LD_INT 70
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 11
30327: PUSH
30328: LD_INT 3
30330: PUSH
30331: LD_INT 4
30333: PUSH
30334: LD_INT 5
30336: PUSH
30337: LD_INT 6
30339: PUSH
30340: LD_INT 15
30342: PUSH
30343: LD_INT 18
30345: PUSH
30346: LD_INT 7
30348: PUSH
30349: LD_INT 17
30351: PUSH
30352: LD_INT 8
30354: PUSH
30355: LD_INT 20
30357: PUSH
30358: LD_INT 21
30360: PUSH
30361: LD_INT 22
30363: PUSH
30364: LD_INT 72
30366: PUSH
30367: LD_INT 26
30369: PUSH
30370: LD_INT 69
30372: PUSH
30373: LD_INT 39
30375: PUSH
30376: LD_INT 40
30378: PUSH
30379: LD_INT 41
30381: PUSH
30382: LD_INT 42
30384: PUSH
30385: LD_INT 43
30387: PUSH
30388: LD_INT 48
30390: PUSH
30391: LD_INT 49
30393: PUSH
30394: LD_INT 50
30396: PUSH
30397: LD_INT 51
30399: PUSH
30400: LD_INT 52
30402: PUSH
30403: LD_INT 53
30405: PUSH
30406: LD_INT 54
30408: PUSH
30409: LD_INT 55
30411: PUSH
30412: LD_INT 56
30414: PUSH
30415: LD_INT 60
30417: PUSH
30418: LD_INT 61
30420: PUSH
30421: LD_INT 62
30423: PUSH
30424: LD_INT 66
30426: PUSH
30427: LD_INT 67
30429: PUSH
30430: LD_INT 68
30432: PUSH
30433: LD_INT 81
30435: PUSH
30436: LD_INT 82
30438: PUSH
30439: LD_INT 83
30441: PUSH
30442: LD_INT 84
30444: PUSH
30445: LD_INT 85
30447: PUSH
30448: LD_INT 87
30450: PUSH
30451: LD_INT 88
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: ST_TO_ADDR
30510: GO 30743
30512: LD_INT 3
30514: DOUBLE
30515: EQUAL
30516: IFTRUE 30520
30518: GO 30742
30520: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30521: LD_ADDR_VAR 0 4
30525: PUSH
30526: LD_INT 46
30528: PUSH
30529: LD_INT 47
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: LD_INT 82
30540: PUSH
30541: LD_INT 83
30543: PUSH
30544: LD_INT 84
30546: PUSH
30547: LD_INT 85
30549: PUSH
30550: LD_INT 86
30552: PUSH
30553: LD_INT 11
30555: PUSH
30556: LD_INT 9
30558: PUSH
30559: LD_INT 20
30561: PUSH
30562: LD_INT 19
30564: PUSH
30565: LD_INT 21
30567: PUSH
30568: LD_INT 24
30570: PUSH
30571: LD_INT 22
30573: PUSH
30574: LD_INT 25
30576: PUSH
30577: LD_INT 28
30579: PUSH
30580: LD_INT 29
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 31
30588: PUSH
30589: LD_INT 37
30591: PUSH
30592: LD_INT 38
30594: PUSH
30595: LD_INT 32
30597: PUSH
30598: LD_INT 27
30600: PUSH
30601: LD_INT 33
30603: PUSH
30604: LD_INT 69
30606: PUSH
30607: LD_INT 39
30609: PUSH
30610: LD_INT 34
30612: PUSH
30613: LD_INT 40
30615: PUSH
30616: LD_INT 71
30618: PUSH
30619: LD_INT 23
30621: PUSH
30622: LD_INT 44
30624: PUSH
30625: LD_INT 48
30627: PUSH
30628: LD_INT 49
30630: PUSH
30631: LD_INT 50
30633: PUSH
30634: LD_INT 51
30636: PUSH
30637: LD_INT 52
30639: PUSH
30640: LD_INT 53
30642: PUSH
30643: LD_INT 54
30645: PUSH
30646: LD_INT 55
30648: PUSH
30649: LD_INT 56
30651: PUSH
30652: LD_INT 57
30654: PUSH
30655: LD_INT 58
30657: PUSH
30658: LD_INT 59
30660: PUSH
30661: LD_INT 63
30663: PUSH
30664: LD_INT 64
30666: PUSH
30667: LD_INT 65
30669: PUSH
30670: LD_INT 82
30672: PUSH
30673: LD_INT 83
30675: PUSH
30676: LD_INT 84
30678: PUSH
30679: LD_INT 85
30681: PUSH
30682: LD_INT 86
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
30740: GO 30743
30742: POP
// if state > - 1 and state < 3 then
30743: LD_VAR 0 3
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: GREATER
30752: PUSH
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 3
30760: LESS
30761: AND
30762: IFFALSE 30819
// for i in result do
30764: LD_ADDR_VAR 0 5
30768: PUSH
30769: LD_VAR 0 4
30773: PUSH
30774: FOR_IN
30775: IFFALSE 30817
// if GetTech ( i , side ) <> state then
30777: LD_VAR 0 5
30781: PPUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: CALL_OW 321
30791: PUSH
30792: LD_VAR 0 3
30796: NONEQUAL
30797: IFFALSE 30815
// result := result diff i ;
30799: LD_ADDR_VAR 0 4
30803: PUSH
30804: LD_VAR 0 4
30808: PUSH
30809: LD_VAR 0 5
30813: DIFF
30814: ST_TO_ADDR
30815: GO 30774
30817: POP
30818: POP
// end ;
30819: LD_VAR 0 4
30823: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30824: LD_INT 0
30826: PPUSH
30827: PPUSH
30828: PPUSH
// result := true ;
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 1
30836: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30837: LD_ADDR_VAR 0 5
30841: PUSH
30842: LD_VAR 0 2
30846: PPUSH
30847: CALL_OW 480
30851: ST_TO_ADDR
// if not tmp then
30852: LD_VAR 0 5
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 30910
// for i in tmp do
30861: LD_ADDR_VAR 0 4
30865: PUSH
30866: LD_VAR 0 5
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30908
// if GetTech ( i , side ) <> state_researched then
30874: LD_VAR 0 4
30878: PPUSH
30879: LD_VAR 0 1
30883: PPUSH
30884: CALL_OW 321
30888: PUSH
30889: LD_INT 2
30891: NONEQUAL
30892: IFFALSE 30906
// begin result := false ;
30894: LD_ADDR_VAR 0 3
30898: PUSH
30899: LD_INT 0
30901: ST_TO_ADDR
// exit ;
30902: POP
30903: POP
30904: GO 30910
// end ;
30906: GO 30871
30908: POP
30909: POP
// end ;
30910: LD_VAR 0 3
30914: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30915: LD_INT 0
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
30928: PPUSH
30929: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30930: LD_VAR 0 1
30934: NOT
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 257
30945: PUSH
30946: LD_INT 9
30948: NONEQUAL
30949: OR
30950: IFFALSE 30954
// exit ;
30952: GO 31527
// side := GetSide ( unit ) ;
30954: LD_ADDR_VAR 0 9
30958: PUSH
30959: LD_VAR 0 1
30963: PPUSH
30964: CALL_OW 255
30968: ST_TO_ADDR
// tech_space := tech_spacanom ;
30969: LD_ADDR_VAR 0 12
30973: PUSH
30974: LD_INT 29
30976: ST_TO_ADDR
// tech_time := tech_taurad ;
30977: LD_ADDR_VAR 0 13
30981: PUSH
30982: LD_INT 28
30984: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30985: LD_ADDR_VAR 0 11
30989: PUSH
30990: LD_VAR 0 1
30994: PPUSH
30995: CALL_OW 310
30999: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31000: LD_VAR 0 11
31004: PPUSH
31005: CALL_OW 247
31009: PUSH
31010: LD_INT 2
31012: EQUAL
31013: IFFALSE 31017
// exit ;
31015: GO 31527
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31017: LD_ADDR_VAR 0 8
31021: PUSH
31022: LD_INT 81
31024: PUSH
31025: LD_VAR 0 9
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: LD_INT 21
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PPUSH
31055: CALL_OW 69
31059: ST_TO_ADDR
// if not tmp then
31060: LD_VAR 0 8
31064: NOT
31065: IFFALSE 31069
// exit ;
31067: GO 31527
// if in_unit then
31069: LD_VAR 0 11
31073: IFFALSE 31097
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31075: LD_ADDR_VAR 0 10
31079: PUSH
31080: LD_VAR 0 8
31084: PPUSH
31085: LD_VAR 0 11
31089: PPUSH
31090: CALL_OW 74
31094: ST_TO_ADDR
31095: GO 31117
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31097: LD_ADDR_VAR 0 10
31101: PUSH
31102: LD_VAR 0 8
31106: PPUSH
31107: LD_VAR 0 1
31111: PPUSH
31112: CALL_OW 74
31116: ST_TO_ADDR
// if not enemy then
31117: LD_VAR 0 10
31121: NOT
31122: IFFALSE 31126
// exit ;
31124: GO 31527
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31126: LD_VAR 0 11
31130: PUSH
31131: LD_VAR 0 11
31135: PPUSH
31136: LD_VAR 0 10
31140: PPUSH
31141: CALL_OW 296
31145: PUSH
31146: LD_INT 13
31148: GREATER
31149: AND
31150: PUSH
31151: LD_VAR 0 1
31155: PPUSH
31156: LD_VAR 0 10
31160: PPUSH
31161: CALL_OW 296
31165: PUSH
31166: LD_INT 12
31168: GREATER
31169: OR
31170: IFFALSE 31174
// exit ;
31172: GO 31527
// missile := [ 1 ] ;
31174: LD_ADDR_VAR 0 14
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31185: LD_VAR 0 9
31189: PPUSH
31190: LD_VAR 0 12
31194: PPUSH
31195: CALL_OW 325
31199: IFFALSE 31228
// missile := Replace ( missile , missile + 1 , 2 ) ;
31201: LD_ADDR_VAR 0 14
31205: PUSH
31206: LD_VAR 0 14
31210: PPUSH
31211: LD_VAR 0 14
31215: PUSH
31216: LD_INT 1
31218: PLUS
31219: PPUSH
31220: LD_INT 2
31222: PPUSH
31223: CALL_OW 1
31227: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31228: LD_VAR 0 9
31232: PPUSH
31233: LD_VAR 0 13
31237: PPUSH
31238: CALL_OW 325
31242: PUSH
31243: LD_VAR 0 10
31247: PPUSH
31248: CALL_OW 255
31252: PPUSH
31253: LD_VAR 0 13
31257: PPUSH
31258: CALL_OW 325
31262: NOT
31263: AND
31264: IFFALSE 31293
// missile := Replace ( missile , missile + 1 , 3 ) ;
31266: LD_ADDR_VAR 0 14
31270: PUSH
31271: LD_VAR 0 14
31275: PPUSH
31276: LD_VAR 0 14
31280: PUSH
31281: LD_INT 1
31283: PLUS
31284: PPUSH
31285: LD_INT 3
31287: PPUSH
31288: CALL_OW 1
31292: ST_TO_ADDR
// if missile < 2 then
31293: LD_VAR 0 14
31297: PUSH
31298: LD_INT 2
31300: LESS
31301: IFFALSE 31305
// exit ;
31303: GO 31527
// x := GetX ( enemy ) ;
31305: LD_ADDR_VAR 0 4
31309: PUSH
31310: LD_VAR 0 10
31314: PPUSH
31315: CALL_OW 250
31319: ST_TO_ADDR
// y := GetY ( enemy ) ;
31320: LD_ADDR_VAR 0 5
31324: PUSH
31325: LD_VAR 0 10
31329: PPUSH
31330: CALL_OW 251
31334: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31335: LD_ADDR_VAR 0 6
31339: PUSH
31340: LD_VAR 0 4
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PPUSH
31349: LD_INT 1
31351: PPUSH
31352: CALL_OW 12
31356: PLUS
31357: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31358: LD_ADDR_VAR 0 7
31362: PUSH
31363: LD_VAR 0 5
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PPUSH
31372: LD_INT 1
31374: PPUSH
31375: CALL_OW 12
31379: PLUS
31380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31381: LD_VAR 0 6
31385: PPUSH
31386: LD_VAR 0 7
31390: PPUSH
31391: CALL_OW 488
31395: NOT
31396: IFFALSE 31418
// begin _x := x ;
31398: LD_ADDR_VAR 0 6
31402: PUSH
31403: LD_VAR 0 4
31407: ST_TO_ADDR
// _y := y ;
31408: LD_ADDR_VAR 0 7
31412: PUSH
31413: LD_VAR 0 5
31417: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31418: LD_ADDR_VAR 0 3
31422: PUSH
31423: LD_INT 1
31425: PPUSH
31426: LD_VAR 0 14
31430: PPUSH
31431: CALL_OW 12
31435: ST_TO_ADDR
// case i of 1 :
31436: LD_VAR 0 3
31440: PUSH
31441: LD_INT 1
31443: DOUBLE
31444: EQUAL
31445: IFTRUE 31449
31447: GO 31466
31449: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31450: LD_VAR 0 1
31454: PPUSH
31455: LD_VAR 0 10
31459: PPUSH
31460: CALL_OW 115
31464: GO 31527
31466: LD_INT 2
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31496
31474: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31475: LD_VAR 0 1
31479: PPUSH
31480: LD_VAR 0 6
31484: PPUSH
31485: LD_VAR 0 7
31489: PPUSH
31490: CALL_OW 153
31494: GO 31527
31496: LD_INT 3
31498: DOUBLE
31499: EQUAL
31500: IFTRUE 31504
31502: GO 31526
31504: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31505: LD_VAR 0 1
31509: PPUSH
31510: LD_VAR 0 6
31514: PPUSH
31515: LD_VAR 0 7
31519: PPUSH
31520: CALL_OW 154
31524: GO 31527
31526: POP
// end ;
31527: LD_VAR 0 2
31531: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31532: LD_INT 0
31534: PPUSH
31535: PPUSH
31536: PPUSH
31537: PPUSH
31538: PPUSH
31539: PPUSH
// if not unit or not building then
31540: LD_VAR 0 1
31544: NOT
31545: PUSH
31546: LD_VAR 0 2
31550: NOT
31551: OR
31552: IFFALSE 31556
// exit ;
31554: GO 31714
// x := GetX ( building ) ;
31556: LD_ADDR_VAR 0 5
31560: PUSH
31561: LD_VAR 0 2
31565: PPUSH
31566: CALL_OW 250
31570: ST_TO_ADDR
// y := GetY ( building ) ;
31571: LD_ADDR_VAR 0 6
31575: PUSH
31576: LD_VAR 0 2
31580: PPUSH
31581: CALL_OW 251
31585: ST_TO_ADDR
// for i = 0 to 5 do
31586: LD_ADDR_VAR 0 4
31590: PUSH
31591: DOUBLE
31592: LD_INT 0
31594: DEC
31595: ST_TO_ADDR
31596: LD_INT 5
31598: PUSH
31599: FOR_TO
31600: IFFALSE 31712
// begin _x := ShiftX ( x , i , 3 ) ;
31602: LD_ADDR_VAR 0 7
31606: PUSH
31607: LD_VAR 0 5
31611: PPUSH
31612: LD_VAR 0 4
31616: PPUSH
31617: LD_INT 3
31619: PPUSH
31620: CALL_OW 272
31624: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31625: LD_ADDR_VAR 0 8
31629: PUSH
31630: LD_VAR 0 6
31634: PPUSH
31635: LD_VAR 0 4
31639: PPUSH
31640: LD_INT 3
31642: PPUSH
31643: CALL_OW 273
31647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31648: LD_VAR 0 7
31652: PPUSH
31653: LD_VAR 0 8
31657: PPUSH
31658: CALL_OW 488
31662: NOT
31663: IFFALSE 31667
// continue ;
31665: GO 31599
// if HexInfo ( _x , _y ) = 0 then
31667: LD_VAR 0 7
31671: PPUSH
31672: LD_VAR 0 8
31676: PPUSH
31677: CALL_OW 428
31681: PUSH
31682: LD_INT 0
31684: EQUAL
31685: IFFALSE 31710
// begin ComMoveXY ( unit , _x , _y ) ;
31687: LD_VAR 0 1
31691: PPUSH
31692: LD_VAR 0 7
31696: PPUSH
31697: LD_VAR 0 8
31701: PPUSH
31702: CALL_OW 111
// exit ;
31706: POP
31707: POP
31708: GO 31714
// end ; end ;
31710: GO 31599
31712: POP
31713: POP
// end ;
31714: LD_VAR 0 3
31718: RET
// export function ScanBase ( side , base_area ) ; begin
31719: LD_INT 0
31721: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31722: LD_ADDR_VAR 0 3
31726: PUSH
31727: LD_VAR 0 2
31731: PPUSH
31732: LD_INT 81
31734: PUSH
31735: LD_VAR 0 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PPUSH
31744: CALL_OW 70
31748: ST_TO_ADDR
// end ;
31749: LD_VAR 0 3
31753: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31754: LD_INT 0
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
// result := false ;
31760: LD_ADDR_VAR 0 2
31764: PUSH
31765: LD_INT 0
31767: ST_TO_ADDR
// side := GetSide ( unit ) ;
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: CALL_OW 255
31782: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31783: LD_ADDR_VAR 0 4
31787: PUSH
31788: LD_VAR 0 1
31792: PPUSH
31793: CALL_OW 248
31797: ST_TO_ADDR
// case nat of 1 :
31798: LD_VAR 0 4
31802: PUSH
31803: LD_INT 1
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31822
31811: POP
// tech := tech_lassight ; 2 :
31812: LD_ADDR_VAR 0 5
31816: PUSH
31817: LD_INT 12
31819: ST_TO_ADDR
31820: GO 31861
31822: LD_INT 2
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 31841
31830: POP
// tech := tech_mortar ; 3 :
31831: LD_ADDR_VAR 0 5
31835: PUSH
31836: LD_INT 41
31838: ST_TO_ADDR
31839: GO 31861
31841: LD_INT 3
31843: DOUBLE
31844: EQUAL
31845: IFTRUE 31849
31847: GO 31860
31849: POP
// tech := tech_bazooka ; end ;
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: LD_INT 44
31857: ST_TO_ADDR
31858: GO 31861
31860: POP
// if Researched ( side , tech ) then
31861: LD_VAR 0 3
31865: PPUSH
31866: LD_VAR 0 5
31870: PPUSH
31871: CALL_OW 325
31875: IFFALSE 31902
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31877: LD_ADDR_VAR 0 2
31881: PUSH
31882: LD_INT 5
31884: PUSH
31885: LD_INT 8
31887: PUSH
31888: LD_INT 9
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: PUSH
31896: LD_VAR 0 4
31900: ARRAY
31901: ST_TO_ADDR
// end ;
31902: LD_VAR 0 2
31906: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31907: LD_INT 0
31909: PPUSH
31910: PPUSH
31911: PPUSH
// if not mines then
31912: LD_VAR 0 2
31916: NOT
31917: IFFALSE 31921
// exit ;
31919: GO 32065
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31921: LD_ADDR_VAR 0 5
31925: PUSH
31926: LD_INT 81
31928: PUSH
31929: LD_VAR 0 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 21
31943: PUSH
31944: LD_INT 3
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PPUSH
31959: CALL_OW 69
31963: ST_TO_ADDR
// for i in mines do
31964: LD_ADDR_VAR 0 4
31968: PUSH
31969: LD_VAR 0 2
31973: PUSH
31974: FOR_IN
31975: IFFALSE 32063
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31977: LD_VAR 0 4
31981: PUSH
31982: LD_INT 1
31984: ARRAY
31985: PPUSH
31986: LD_VAR 0 4
31990: PUSH
31991: LD_INT 2
31993: ARRAY
31994: PPUSH
31995: CALL_OW 458
31999: NOT
32000: IFFALSE 32004
// continue ;
32002: GO 31974
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32004: LD_VAR 0 4
32008: PUSH
32009: LD_INT 1
32011: ARRAY
32012: PPUSH
32013: LD_VAR 0 4
32017: PUSH
32018: LD_INT 2
32020: ARRAY
32021: PPUSH
32022: CALL_OW 428
32026: PUSH
32027: LD_VAR 0 5
32031: IN
32032: IFFALSE 32061
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32034: LD_VAR 0 4
32038: PUSH
32039: LD_INT 1
32041: ARRAY
32042: PPUSH
32043: LD_VAR 0 4
32047: PUSH
32048: LD_INT 2
32050: ARRAY
32051: PPUSH
32052: LD_VAR 0 1
32056: PPUSH
32057: CALL_OW 456
// end ;
32061: GO 31974
32063: POP
32064: POP
// end ;
32065: LD_VAR 0 3
32069: RET
// export function Count ( array ) ; var i ; begin
32070: LD_INT 0
32072: PPUSH
32073: PPUSH
// result := 0 ;
32074: LD_ADDR_VAR 0 2
32078: PUSH
32079: LD_INT 0
32081: ST_TO_ADDR
// for i in array do
32082: LD_ADDR_VAR 0 3
32086: PUSH
32087: LD_VAR 0 1
32091: PUSH
32092: FOR_IN
32093: IFFALSE 32117
// if i then
32095: LD_VAR 0 3
32099: IFFALSE 32115
// result := result + 1 ;
32101: LD_ADDR_VAR 0 2
32105: PUSH
32106: LD_VAR 0 2
32110: PUSH
32111: LD_INT 1
32113: PLUS
32114: ST_TO_ADDR
32115: GO 32092
32117: POP
32118: POP
// end ;
32119: LD_VAR 0 2
32123: RET
// export function IsEmpty ( building ) ; begin
32124: LD_INT 0
32126: PPUSH
// if not building then
32127: LD_VAR 0 1
32131: NOT
32132: IFFALSE 32136
// exit ;
32134: GO 32179
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32136: LD_ADDR_VAR 0 2
32140: PUSH
32141: LD_VAR 0 1
32145: PUSH
32146: LD_INT 22
32148: PUSH
32149: LD_VAR 0 1
32153: PPUSH
32154: CALL_OW 255
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 58
32165: PUSH
32166: EMPTY
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PPUSH
32173: CALL_OW 69
32177: IN
32178: ST_TO_ADDR
// end ;
32179: LD_VAR 0 2
32183: RET
// export function IsNotFull ( building ) ; var places ; begin
32184: LD_INT 0
32186: PPUSH
32187: PPUSH
// if not building then
32188: LD_VAR 0 1
32192: NOT
32193: IFFALSE 32197
// exit ;
32195: GO 32368
// result := false ;
32197: LD_ADDR_VAR 0 2
32201: PUSH
32202: LD_INT 0
32204: ST_TO_ADDR
// places := 0 ;
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: LD_INT 0
32212: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32213: LD_VAR 0 1
32217: PPUSH
32218: CALL_OW 266
32222: PUSH
32223: LD_INT 0
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32285
32229: LD_INT 1
32231: DOUBLE
32232: EQUAL
32233: IFTRUE 32285
32235: LD_INT 6
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32285
32241: LD_INT 7
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32285
32247: LD_INT 8
32249: DOUBLE
32250: EQUAL
32251: IFTRUE 32285
32253: LD_INT 4
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32285
32259: LD_INT 5
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32285
32265: LD_INT 2
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32285
32271: LD_INT 3
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32285
32277: LD_INT 35
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// places := 6 ; b_bunker , b_breastwork :
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: LD_INT 6
32293: ST_TO_ADDR
32294: GO 32341
32296: LD_INT 32
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32310
32302: LD_INT 31
32304: DOUBLE
32305: EQUAL
32306: IFTRUE 32310
32308: GO 32321
32310: POP
// places := 1 ; b_control_tower :
32311: LD_ADDR_VAR 0 3
32315: PUSH
32316: LD_INT 1
32318: ST_TO_ADDR
32319: GO 32341
32321: LD_INT 36
32323: DOUBLE
32324: EQUAL
32325: IFTRUE 32329
32327: GO 32340
32329: POP
// places := 3 ; end ;
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: LD_INT 3
32337: ST_TO_ADDR
32338: GO 32341
32340: POP
// if places then
32341: LD_VAR 0 3
32345: IFFALSE 32368
// result := UnitsInside ( building ) < places ;
32347: LD_ADDR_VAR 0 2
32351: PUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: CALL_OW 313
32361: PUSH
32362: LD_VAR 0 3
32366: LESS
32367: ST_TO_ADDR
// end ;
32368: LD_VAR 0 2
32372: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32373: LD_INT 0
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
// tmp := [ ] ;
32379: LD_ADDR_VAR 0 3
32383: PUSH
32384: EMPTY
32385: ST_TO_ADDR
// list := [ ] ;
32386: LD_ADDR_VAR 0 5
32390: PUSH
32391: EMPTY
32392: ST_TO_ADDR
// for i = 16 to 25 do
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: DOUBLE
32399: LD_INT 16
32401: DEC
32402: ST_TO_ADDR
32403: LD_INT 25
32405: PUSH
32406: FOR_TO
32407: IFFALSE 32480
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32409: LD_ADDR_VAR 0 3
32413: PUSH
32414: LD_VAR 0 3
32418: PUSH
32419: LD_INT 22
32421: PUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL_OW 255
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 91
32438: PUSH
32439: LD_VAR 0 1
32443: PUSH
32444: LD_INT 6
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 30
32454: PUSH
32455: LD_VAR 0 4
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: PUSH
32469: EMPTY
32470: LIST
32471: PPUSH
32472: CALL_OW 69
32476: ADD
32477: ST_TO_ADDR
32478: GO 32406
32480: POP
32481: POP
// for i = 1 to tmp do
32482: LD_ADDR_VAR 0 4
32486: PUSH
32487: DOUBLE
32488: LD_INT 1
32490: DEC
32491: ST_TO_ADDR
32492: LD_VAR 0 3
32496: PUSH
32497: FOR_TO
32498: IFFALSE 32586
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32500: LD_ADDR_VAR 0 5
32504: PUSH
32505: LD_VAR 0 5
32509: PUSH
32510: LD_VAR 0 3
32514: PUSH
32515: LD_VAR 0 4
32519: ARRAY
32520: PPUSH
32521: CALL_OW 266
32525: PUSH
32526: LD_VAR 0 3
32530: PUSH
32531: LD_VAR 0 4
32535: ARRAY
32536: PPUSH
32537: CALL_OW 250
32541: PUSH
32542: LD_VAR 0 3
32546: PUSH
32547: LD_VAR 0 4
32551: ARRAY
32552: PPUSH
32553: CALL_OW 251
32557: PUSH
32558: LD_VAR 0 3
32562: PUSH
32563: LD_VAR 0 4
32567: ARRAY
32568: PPUSH
32569: CALL_OW 254
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: PUSH
32580: EMPTY
32581: LIST
32582: ADD
32583: ST_TO_ADDR
32584: GO 32497
32586: POP
32587: POP
// result := list ;
32588: LD_ADDR_VAR 0 2
32592: PUSH
32593: LD_VAR 0 5
32597: ST_TO_ADDR
// end ;
32598: LD_VAR 0 2
32602: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32603: LD_INT 0
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
// if not factory then
32612: LD_VAR 0 1
32616: NOT
32617: IFFALSE 32621
// exit ;
32619: GO 33214
// if control = control_apeman then
32621: LD_VAR 0 4
32625: PUSH
32626: LD_INT 5
32628: EQUAL
32629: IFFALSE 32738
// begin tmp := UnitsInside ( factory ) ;
32631: LD_ADDR_VAR 0 8
32635: PUSH
32636: LD_VAR 0 1
32640: PPUSH
32641: CALL_OW 313
32645: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32646: LD_VAR 0 8
32650: PPUSH
32651: LD_INT 25
32653: PUSH
32654: LD_INT 12
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PPUSH
32661: CALL_OW 72
32665: NOT
32666: IFFALSE 32676
// control := control_manual ;
32668: LD_ADDR_VAR 0 4
32672: PUSH
32673: LD_INT 1
32675: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32676: LD_ADDR_VAR 0 8
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL 32373 0 1
32690: ST_TO_ADDR
// if tmp then
32691: LD_VAR 0 8
32695: IFFALSE 32738
// begin for i in tmp do
32697: LD_ADDR_VAR 0 7
32701: PUSH
32702: LD_VAR 0 8
32706: PUSH
32707: FOR_IN
32708: IFFALSE 32736
// if i [ 1 ] = b_ext_radio then
32710: LD_VAR 0 7
32714: PUSH
32715: LD_INT 1
32717: ARRAY
32718: PUSH
32719: LD_INT 22
32721: EQUAL
32722: IFFALSE 32734
// begin control := control_remote ;
32724: LD_ADDR_VAR 0 4
32728: PUSH
32729: LD_INT 2
32731: ST_TO_ADDR
// break ;
32732: GO 32736
// end ;
32734: GO 32707
32736: POP
32737: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32738: LD_VAR 0 1
32742: PPUSH
32743: LD_VAR 0 2
32747: PPUSH
32748: LD_VAR 0 3
32752: PPUSH
32753: LD_VAR 0 4
32757: PPUSH
32758: LD_VAR 0 5
32762: PPUSH
32763: CALL_OW 448
32767: IFFALSE 32802
// begin result := [ chassis , engine , control , weapon ] ;
32769: LD_ADDR_VAR 0 6
32773: PUSH
32774: LD_VAR 0 2
32778: PUSH
32779: LD_VAR 0 3
32783: PUSH
32784: LD_VAR 0 4
32788: PUSH
32789: LD_VAR 0 5
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: ST_TO_ADDR
// exit ;
32800: GO 33214
// end ; _chassis := AvailableChassisList ( factory ) ;
32802: LD_ADDR_VAR 0 9
32806: PUSH
32807: LD_VAR 0 1
32811: PPUSH
32812: CALL_OW 475
32816: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32817: LD_ADDR_VAR 0 11
32821: PUSH
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 476
32831: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32832: LD_ADDR_VAR 0 12
32836: PUSH
32837: LD_VAR 0 1
32841: PPUSH
32842: CALL_OW 477
32846: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32847: LD_ADDR_VAR 0 10
32851: PUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL_OW 478
32861: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32862: LD_VAR 0 9
32866: NOT
32867: PUSH
32868: LD_VAR 0 11
32872: NOT
32873: OR
32874: PUSH
32875: LD_VAR 0 12
32879: NOT
32880: OR
32881: PUSH
32882: LD_VAR 0 10
32886: NOT
32887: OR
32888: IFFALSE 32923
// begin result := [ chassis , engine , control , weapon ] ;
32890: LD_ADDR_VAR 0 6
32894: PUSH
32895: LD_VAR 0 2
32899: PUSH
32900: LD_VAR 0 3
32904: PUSH
32905: LD_VAR 0 4
32909: PUSH
32910: LD_VAR 0 5
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// exit ;
32921: GO 33214
// end ; if not chassis in _chassis then
32923: LD_VAR 0 2
32927: PUSH
32928: LD_VAR 0 9
32932: IN
32933: NOT
32934: IFFALSE 32960
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32936: LD_ADDR_VAR 0 2
32940: PUSH
32941: LD_VAR 0 9
32945: PUSH
32946: LD_INT 1
32948: PPUSH
32949: LD_VAR 0 9
32953: PPUSH
32954: CALL_OW 12
32958: ARRAY
32959: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32960: LD_VAR 0 2
32964: PPUSH
32965: LD_VAR 0 3
32969: PPUSH
32970: CALL 33219 0 2
32974: NOT
32975: IFFALSE 33034
// repeat engine := _engine [ 1 ] ;
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_VAR 0 11
32986: PUSH
32987: LD_INT 1
32989: ARRAY
32990: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32991: LD_ADDR_VAR 0 11
32995: PUSH
32996: LD_VAR 0 11
33000: PPUSH
33001: LD_INT 1
33003: PPUSH
33004: CALL_OW 3
33008: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33009: LD_VAR 0 2
33013: PPUSH
33014: LD_VAR 0 3
33018: PPUSH
33019: CALL 33219 0 2
33023: PUSH
33024: LD_VAR 0 11
33028: PUSH
33029: EMPTY
33030: EQUAL
33031: OR
33032: IFFALSE 32977
// if not control in _control then
33034: LD_VAR 0 4
33038: PUSH
33039: LD_VAR 0 12
33043: IN
33044: NOT
33045: IFFALSE 33071
// control := _control [ rand ( 1 , _control ) ] ;
33047: LD_ADDR_VAR 0 4
33051: PUSH
33052: LD_VAR 0 12
33056: PUSH
33057: LD_INT 1
33059: PPUSH
33060: LD_VAR 0 12
33064: PPUSH
33065: CALL_OW 12
33069: ARRAY
33070: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33071: LD_VAR 0 2
33075: PPUSH
33076: LD_VAR 0 5
33080: PPUSH
33081: CALL 33439 0 2
33085: NOT
33086: IFFALSE 33145
// repeat weapon := _weapon [ 1 ] ;
33088: LD_ADDR_VAR 0 5
33092: PUSH
33093: LD_VAR 0 10
33097: PUSH
33098: LD_INT 1
33100: ARRAY
33101: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33102: LD_ADDR_VAR 0 10
33106: PUSH
33107: LD_VAR 0 10
33111: PPUSH
33112: LD_INT 1
33114: PPUSH
33115: CALL_OW 3
33119: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33120: LD_VAR 0 2
33124: PPUSH
33125: LD_VAR 0 5
33129: PPUSH
33130: CALL 33439 0 2
33134: PUSH
33135: LD_VAR 0 10
33139: PUSH
33140: EMPTY
33141: EQUAL
33142: OR
33143: IFFALSE 33088
// result := [ ] ;
33145: LD_ADDR_VAR 0 6
33149: PUSH
33150: EMPTY
33151: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33152: LD_VAR 0 1
33156: PPUSH
33157: LD_VAR 0 2
33161: PPUSH
33162: LD_VAR 0 3
33166: PPUSH
33167: LD_VAR 0 4
33171: PPUSH
33172: LD_VAR 0 5
33176: PPUSH
33177: CALL_OW 448
33181: IFFALSE 33214
// result := [ chassis , engine , control , weapon ] ;
33183: LD_ADDR_VAR 0 6
33187: PUSH
33188: LD_VAR 0 2
33192: PUSH
33193: LD_VAR 0 3
33197: PUSH
33198: LD_VAR 0 4
33202: PUSH
33203: LD_VAR 0 5
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: ST_TO_ADDR
// end ;
33214: LD_VAR 0 6
33218: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33219: LD_INT 0
33221: PPUSH
// if not chassis or not engine then
33222: LD_VAR 0 1
33226: NOT
33227: PUSH
33228: LD_VAR 0 2
33232: NOT
33233: OR
33234: IFFALSE 33238
// exit ;
33236: GO 33434
// case engine of engine_solar :
33238: LD_VAR 0 2
33242: PUSH
33243: LD_INT 2
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33289
33251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_INT 11
33259: PUSH
33260: LD_INT 12
33262: PUSH
33263: LD_INT 13
33265: PUSH
33266: LD_INT 14
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
33287: GO 33418
33289: LD_INT 1
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33359
33297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_INT 11
33305: PUSH
33306: LD_INT 12
33308: PUSH
33309: LD_INT 13
33311: PUSH
33312: LD_INT 14
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: LD_INT 3
33323: PUSH
33324: LD_INT 4
33326: PUSH
33327: LD_INT 5
33329: PUSH
33330: LD_INT 21
33332: PUSH
33333: LD_INT 23
33335: PUSH
33336: LD_INT 22
33338: PUSH
33339: LD_INT 24
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: ST_TO_ADDR
33357: GO 33418
33359: LD_INT 3
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33417
33367: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33368: LD_ADDR_VAR 0 3
33372: PUSH
33373: LD_INT 13
33375: PUSH
33376: LD_INT 14
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 3
33384: PUSH
33385: LD_INT 4
33387: PUSH
33388: LD_INT 5
33390: PUSH
33391: LD_INT 21
33393: PUSH
33394: LD_INT 22
33396: PUSH
33397: LD_INT 23
33399: PUSH
33400: LD_INT 24
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: ST_TO_ADDR
33415: GO 33418
33417: POP
// result := ( chassis in result ) ;
33418: LD_ADDR_VAR 0 3
33422: PUSH
33423: LD_VAR 0 1
33427: PUSH
33428: LD_VAR 0 3
33432: IN
33433: ST_TO_ADDR
// end ;
33434: LD_VAR 0 3
33438: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33439: LD_INT 0
33441: PPUSH
// if not chassis or not weapon then
33442: LD_VAR 0 1
33446: NOT
33447: PUSH
33448: LD_VAR 0 2
33452: NOT
33453: OR
33454: IFFALSE 33458
// exit ;
33456: GO 34520
// case weapon of us_machine_gun :
33458: LD_VAR 0 2
33462: PUSH
33463: LD_INT 2
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33501
33471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: LD_INT 5
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
33499: GO 34504
33501: LD_INT 3
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33539
33509: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: LD_INT 5
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 34504
33539: LD_INT 11
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33577
33547: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 2
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
33575: GO 34504
33577: LD_INT 4
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33611
33585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 3
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: LD_INT 5
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: ST_TO_ADDR
33609: GO 34504
33611: LD_INT 5
33613: DOUBLE
33614: EQUAL
33615: IFTRUE 33619
33617: GO 33645
33619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33620: LD_ADDR_VAR 0 3
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
33643: GO 34504
33645: LD_INT 9
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33679
33653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33654: LD_ADDR_VAR 0 3
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: ST_TO_ADDR
33677: GO 34504
33679: LD_INT 7
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33713
33687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: LD_INT 5
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: ST_TO_ADDR
33711: GO 34504
33713: LD_INT 12
33715: DOUBLE
33716: EQUAL
33717: IFTRUE 33721
33719: GO 33747
33721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33722: LD_ADDR_VAR 0 3
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 3
33732: PUSH
33733: LD_INT 4
33735: PUSH
33736: LD_INT 5
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: ST_TO_ADDR
33745: GO 34504
33747: LD_INT 13
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33755
33753: GO 33781
33755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: LD_INT 3
33766: PUSH
33767: LD_INT 4
33769: PUSH
33770: LD_INT 5
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: ST_TO_ADDR
33779: GO 34504
33781: LD_INT 14
33783: DOUBLE
33784: EQUAL
33785: IFTRUE 33789
33787: GO 33807
33789: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33790: LD_ADDR_VAR 0 3
33794: PUSH
33795: LD_INT 4
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: ST_TO_ADDR
33805: GO 34504
33807: LD_INT 6
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 33833
33815: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33816: LD_ADDR_VAR 0 3
33820: PUSH
33821: LD_INT 4
33823: PUSH
33824: LD_INT 5
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: ST_TO_ADDR
33831: GO 34504
33833: LD_INT 10
33835: DOUBLE
33836: EQUAL
33837: IFTRUE 33841
33839: GO 33859
33841: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_INT 4
33849: PUSH
33850: LD_INT 5
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: ST_TO_ADDR
33857: GO 34504
33859: LD_INT 22
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33893
33867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_INT 11
33875: PUSH
33876: LD_INT 12
33878: PUSH
33879: LD_INT 13
33881: PUSH
33882: LD_INT 14
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
33891: GO 34504
33893: LD_INT 23
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33927
33901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 11
33909: PUSH
33910: LD_INT 12
33912: PUSH
33913: LD_INT 13
33915: PUSH
33916: LD_INT 14
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: ST_TO_ADDR
33925: GO 34504
33927: LD_INT 24
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33961
33935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33936: LD_ADDR_VAR 0 3
33940: PUSH
33941: LD_INT 11
33943: PUSH
33944: LD_INT 12
33946: PUSH
33947: LD_INT 13
33949: PUSH
33950: LD_INT 14
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: ST_TO_ADDR
33959: GO 34504
33961: LD_INT 30
33963: DOUBLE
33964: EQUAL
33965: IFTRUE 33969
33967: GO 33995
33969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: LD_INT 11
33977: PUSH
33978: LD_INT 12
33980: PUSH
33981: LD_INT 13
33983: PUSH
33984: LD_INT 14
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: ST_TO_ADDR
33993: GO 34504
33995: LD_INT 25
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34003
34001: GO 34021
34003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34004: LD_ADDR_VAR 0 3
34008: PUSH
34009: LD_INT 13
34011: PUSH
34012: LD_INT 14
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: ST_TO_ADDR
34019: GO 34504
34021: LD_INT 27
34023: DOUBLE
34024: EQUAL
34025: IFTRUE 34029
34027: GO 34047
34029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34030: LD_ADDR_VAR 0 3
34034: PUSH
34035: LD_INT 13
34037: PUSH
34038: LD_INT 14
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: ST_TO_ADDR
34045: GO 34504
34047: LD_EXP 102
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34083
34057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34058: LD_ADDR_VAR 0 3
34062: PUSH
34063: LD_INT 11
34065: PUSH
34066: LD_INT 12
34068: PUSH
34069: LD_INT 13
34071: PUSH
34072: LD_INT 14
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
34081: GO 34504
34083: LD_INT 28
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34109
34091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34092: LD_ADDR_VAR 0 3
34096: PUSH
34097: LD_INT 13
34099: PUSH
34100: LD_INT 14
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: ST_TO_ADDR
34107: GO 34504
34109: LD_INT 29
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34117
34115: GO 34135
34117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34118: LD_ADDR_VAR 0 3
34122: PUSH
34123: LD_INT 13
34125: PUSH
34126: LD_INT 14
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: ST_TO_ADDR
34133: GO 34504
34135: LD_INT 31
34137: DOUBLE
34138: EQUAL
34139: IFTRUE 34143
34141: GO 34161
34143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_INT 13
34151: PUSH
34152: LD_INT 14
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: ST_TO_ADDR
34159: GO 34504
34161: LD_INT 26
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34187
34169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_INT 13
34177: PUSH
34178: LD_INT 14
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: ST_TO_ADDR
34185: GO 34504
34187: LD_INT 42
34189: DOUBLE
34190: EQUAL
34191: IFTRUE 34195
34193: GO 34221
34195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34196: LD_ADDR_VAR 0 3
34200: PUSH
34201: LD_INT 21
34203: PUSH
34204: LD_INT 22
34206: PUSH
34207: LD_INT 23
34209: PUSH
34210: LD_INT 24
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: ST_TO_ADDR
34219: GO 34504
34221: LD_INT 43
34223: DOUBLE
34224: EQUAL
34225: IFTRUE 34229
34227: GO 34255
34229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34230: LD_ADDR_VAR 0 3
34234: PUSH
34235: LD_INT 21
34237: PUSH
34238: LD_INT 22
34240: PUSH
34241: LD_INT 23
34243: PUSH
34244: LD_INT 24
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
34253: GO 34504
34255: LD_INT 44
34257: DOUBLE
34258: EQUAL
34259: IFTRUE 34263
34261: GO 34289
34263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34264: LD_ADDR_VAR 0 3
34268: PUSH
34269: LD_INT 21
34271: PUSH
34272: LD_INT 22
34274: PUSH
34275: LD_INT 23
34277: PUSH
34278: LD_INT 24
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
34287: GO 34504
34289: LD_INT 45
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34323
34297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: LD_INT 21
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_INT 23
34311: PUSH
34312: LD_INT 24
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: ST_TO_ADDR
34321: GO 34504
34323: LD_INT 49
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34331
34329: GO 34357
34331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 21
34339: PUSH
34340: LD_INT 22
34342: PUSH
34343: LD_INT 23
34345: PUSH
34346: LD_INT 24
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
34355: GO 34504
34357: LD_INT 51
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34391
34365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_INT 21
34373: PUSH
34374: LD_INT 22
34376: PUSH
34377: LD_INT 23
34379: PUSH
34380: LD_INT 24
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
34389: GO 34504
34391: LD_INT 52
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34425
34399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 21
34407: PUSH
34408: LD_INT 22
34410: PUSH
34411: LD_INT 23
34413: PUSH
34414: LD_INT 24
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
34423: GO 34504
34425: LD_INT 53
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34433
34431: GO 34451
34433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34434: LD_ADDR_VAR 0 3
34438: PUSH
34439: LD_INT 23
34441: PUSH
34442: LD_INT 24
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: ST_TO_ADDR
34449: GO 34504
34451: LD_INT 46
34453: DOUBLE
34454: EQUAL
34455: IFTRUE 34459
34457: GO 34477
34459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34460: LD_ADDR_VAR 0 3
34464: PUSH
34465: LD_INT 23
34467: PUSH
34468: LD_INT 24
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: ST_TO_ADDR
34475: GO 34504
34477: LD_INT 47
34479: DOUBLE
34480: EQUAL
34481: IFTRUE 34485
34483: GO 34503
34485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34486: LD_ADDR_VAR 0 3
34490: PUSH
34491: LD_INT 23
34493: PUSH
34494: LD_INT 24
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: ST_TO_ADDR
34501: GO 34504
34503: POP
// result := ( chassis in result ) ;
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_VAR 0 1
34513: PUSH
34514: LD_VAR 0 3
34518: IN
34519: ST_TO_ADDR
// end ;
34520: LD_VAR 0 3
34524: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34525: LD_INT 0
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
// result := array ;
34534: LD_ADDR_VAR 0 5
34538: PUSH
34539: LD_VAR 0 1
34543: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34544: LD_VAR 0 1
34548: NOT
34549: PUSH
34550: LD_VAR 0 2
34554: NOT
34555: OR
34556: PUSH
34557: LD_VAR 0 3
34561: NOT
34562: OR
34563: PUSH
34564: LD_VAR 0 2
34568: PUSH
34569: LD_VAR 0 1
34573: GREATER
34574: OR
34575: PUSH
34576: LD_VAR 0 3
34580: PUSH
34581: LD_VAR 0 1
34585: GREATER
34586: OR
34587: IFFALSE 34591
// exit ;
34589: GO 34887
// if direction then
34591: LD_VAR 0 4
34595: IFFALSE 34659
// begin d := 1 ;
34597: LD_ADDR_VAR 0 9
34601: PUSH
34602: LD_INT 1
34604: ST_TO_ADDR
// if i_from > i_to then
34605: LD_VAR 0 2
34609: PUSH
34610: LD_VAR 0 3
34614: GREATER
34615: IFFALSE 34641
// length := ( array - i_from ) + i_to else
34617: LD_ADDR_VAR 0 11
34621: PUSH
34622: LD_VAR 0 1
34626: PUSH
34627: LD_VAR 0 2
34631: MINUS
34632: PUSH
34633: LD_VAR 0 3
34637: PLUS
34638: ST_TO_ADDR
34639: GO 34657
// length := i_to - i_from ;
34641: LD_ADDR_VAR 0 11
34645: PUSH
34646: LD_VAR 0 3
34650: PUSH
34651: LD_VAR 0 2
34655: MINUS
34656: ST_TO_ADDR
// end else
34657: GO 34720
// begin d := - 1 ;
34659: LD_ADDR_VAR 0 9
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: ST_TO_ADDR
// if i_from > i_to then
34668: LD_VAR 0 2
34672: PUSH
34673: LD_VAR 0 3
34677: GREATER
34678: IFFALSE 34698
// length := i_from - i_to else
34680: LD_ADDR_VAR 0 11
34684: PUSH
34685: LD_VAR 0 2
34689: PUSH
34690: LD_VAR 0 3
34694: MINUS
34695: ST_TO_ADDR
34696: GO 34720
// length := ( array - i_to ) + i_from ;
34698: LD_ADDR_VAR 0 11
34702: PUSH
34703: LD_VAR 0 1
34707: PUSH
34708: LD_VAR 0 3
34712: MINUS
34713: PUSH
34714: LD_VAR 0 2
34718: PLUS
34719: ST_TO_ADDR
// end ; if not length then
34720: LD_VAR 0 11
34724: NOT
34725: IFFALSE 34729
// exit ;
34727: GO 34887
// tmp := array ;
34729: LD_ADDR_VAR 0 10
34733: PUSH
34734: LD_VAR 0 1
34738: ST_TO_ADDR
// for i = 1 to length do
34739: LD_ADDR_VAR 0 6
34743: PUSH
34744: DOUBLE
34745: LD_INT 1
34747: DEC
34748: ST_TO_ADDR
34749: LD_VAR 0 11
34753: PUSH
34754: FOR_TO
34755: IFFALSE 34875
// begin for j = 1 to array do
34757: LD_ADDR_VAR 0 7
34761: PUSH
34762: DOUBLE
34763: LD_INT 1
34765: DEC
34766: ST_TO_ADDR
34767: LD_VAR 0 1
34771: PUSH
34772: FOR_TO
34773: IFFALSE 34861
// begin k := j + d ;
34775: LD_ADDR_VAR 0 8
34779: PUSH
34780: LD_VAR 0 7
34784: PUSH
34785: LD_VAR 0 9
34789: PLUS
34790: ST_TO_ADDR
// if k > array then
34791: LD_VAR 0 8
34795: PUSH
34796: LD_VAR 0 1
34800: GREATER
34801: IFFALSE 34811
// k := 1 ;
34803: LD_ADDR_VAR 0 8
34807: PUSH
34808: LD_INT 1
34810: ST_TO_ADDR
// if not k then
34811: LD_VAR 0 8
34815: NOT
34816: IFFALSE 34828
// k := array ;
34818: LD_ADDR_VAR 0 8
34822: PUSH
34823: LD_VAR 0 1
34827: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34828: LD_ADDR_VAR 0 10
34832: PUSH
34833: LD_VAR 0 10
34837: PPUSH
34838: LD_VAR 0 8
34842: PPUSH
34843: LD_VAR 0 1
34847: PUSH
34848: LD_VAR 0 7
34852: ARRAY
34853: PPUSH
34854: CALL_OW 1
34858: ST_TO_ADDR
// end ;
34859: GO 34772
34861: POP
34862: POP
// array := tmp ;
34863: LD_ADDR_VAR 0 1
34867: PUSH
34868: LD_VAR 0 10
34872: ST_TO_ADDR
// end ;
34873: GO 34754
34875: POP
34876: POP
// result := array ;
34877: LD_ADDR_VAR 0 5
34881: PUSH
34882: LD_VAR 0 1
34886: ST_TO_ADDR
// end ;
34887: LD_VAR 0 5
34891: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34892: LD_INT 0
34894: PPUSH
34895: PPUSH
// result := 0 ;
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_INT 0
34903: ST_TO_ADDR
// if not array or not value in array then
34904: LD_VAR 0 1
34908: NOT
34909: PUSH
34910: LD_VAR 0 2
34914: PUSH
34915: LD_VAR 0 1
34919: IN
34920: NOT
34921: OR
34922: IFFALSE 34926
// exit ;
34924: GO 34980
// for i = 1 to array do
34926: LD_ADDR_VAR 0 4
34930: PUSH
34931: DOUBLE
34932: LD_INT 1
34934: DEC
34935: ST_TO_ADDR
34936: LD_VAR 0 1
34940: PUSH
34941: FOR_TO
34942: IFFALSE 34978
// if value = array [ i ] then
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 1
34953: PUSH
34954: LD_VAR 0 4
34958: ARRAY
34959: EQUAL
34960: IFFALSE 34976
// begin result := i ;
34962: LD_ADDR_VAR 0 3
34966: PUSH
34967: LD_VAR 0 4
34971: ST_TO_ADDR
// exit ;
34972: POP
34973: POP
34974: GO 34980
// end ;
34976: GO 34941
34978: POP
34979: POP
// end ;
34980: LD_VAR 0 3
34984: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34985: LD_INT 0
34987: PPUSH
// vc_chassis := chassis ;
34988: LD_ADDR_OWVAR 37
34992: PUSH
34993: LD_VAR 0 1
34997: ST_TO_ADDR
// vc_engine := engine ;
34998: LD_ADDR_OWVAR 39
35002: PUSH
35003: LD_VAR 0 2
35007: ST_TO_ADDR
// vc_control := control ;
35008: LD_ADDR_OWVAR 38
35012: PUSH
35013: LD_VAR 0 3
35017: ST_TO_ADDR
// vc_weapon := weapon ;
35018: LD_ADDR_OWVAR 40
35022: PUSH
35023: LD_VAR 0 4
35027: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35028: LD_ADDR_OWVAR 41
35032: PUSH
35033: LD_VAR 0 5
35037: ST_TO_ADDR
// end ;
35038: LD_VAR 0 6
35042: RET
// export function WantPlant ( unit ) ; var task ; begin
35043: LD_INT 0
35045: PPUSH
35046: PPUSH
// result := false ;
35047: LD_ADDR_VAR 0 2
35051: PUSH
35052: LD_INT 0
35054: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35055: LD_ADDR_VAR 0 3
35059: PUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 437
35069: ST_TO_ADDR
// if task then
35070: LD_VAR 0 3
35074: IFFALSE 35102
// if task [ 1 ] [ 1 ] = p then
35076: LD_VAR 0 3
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PUSH
35085: LD_INT 1
35087: ARRAY
35088: PUSH
35089: LD_STRING p
35091: EQUAL
35092: IFFALSE 35102
// result := true ;
35094: LD_ADDR_VAR 0 2
35098: PUSH
35099: LD_INT 1
35101: ST_TO_ADDR
// end ;
35102: LD_VAR 0 2
35106: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35107: LD_INT 0
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
// if pos < 1 then
35113: LD_VAR 0 2
35117: PUSH
35118: LD_INT 1
35120: LESS
35121: IFFALSE 35125
// exit ;
35123: GO 35428
// if pos = 1 then
35125: LD_VAR 0 2
35129: PUSH
35130: LD_INT 1
35132: EQUAL
35133: IFFALSE 35166
// result := Replace ( arr , pos [ 1 ] , value ) else
35135: LD_ADDR_VAR 0 4
35139: PUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: LD_VAR 0 2
35149: PUSH
35150: LD_INT 1
35152: ARRAY
35153: PPUSH
35154: LD_VAR 0 3
35158: PPUSH
35159: CALL_OW 1
35163: ST_TO_ADDR
35164: GO 35428
// begin tmp := arr ;
35166: LD_ADDR_VAR 0 6
35170: PUSH
35171: LD_VAR 0 1
35175: ST_TO_ADDR
// s_arr := [ tmp ] ;
35176: LD_ADDR_VAR 0 7
35180: PUSH
35181: LD_VAR 0 6
35185: PUSH
35186: EMPTY
35187: LIST
35188: ST_TO_ADDR
// for i = 1 to pos - 1 do
35189: LD_ADDR_VAR 0 5
35193: PUSH
35194: DOUBLE
35195: LD_INT 1
35197: DEC
35198: ST_TO_ADDR
35199: LD_VAR 0 2
35203: PUSH
35204: LD_INT 1
35206: MINUS
35207: PUSH
35208: FOR_TO
35209: IFFALSE 35254
// begin tmp := tmp [ pos [ i ] ] ;
35211: LD_ADDR_VAR 0 6
35215: PUSH
35216: LD_VAR 0 6
35220: PUSH
35221: LD_VAR 0 2
35225: PUSH
35226: LD_VAR 0 5
35230: ARRAY
35231: ARRAY
35232: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35233: LD_ADDR_VAR 0 7
35237: PUSH
35238: LD_VAR 0 7
35242: PUSH
35243: LD_VAR 0 6
35247: PUSH
35248: EMPTY
35249: LIST
35250: ADD
35251: ST_TO_ADDR
// end ;
35252: GO 35208
35254: POP
35255: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35256: LD_ADDR_VAR 0 6
35260: PUSH
35261: LD_VAR 0 6
35265: PPUSH
35266: LD_VAR 0 2
35270: PUSH
35271: LD_VAR 0 2
35275: ARRAY
35276: PPUSH
35277: LD_VAR 0 3
35281: PPUSH
35282: CALL_OW 1
35286: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35287: LD_ADDR_VAR 0 7
35291: PUSH
35292: LD_VAR 0 7
35296: PPUSH
35297: LD_VAR 0 7
35301: PPUSH
35302: LD_VAR 0 6
35306: PPUSH
35307: CALL_OW 1
35311: ST_TO_ADDR
// for i = s_arr downto 2 do
35312: LD_ADDR_VAR 0 5
35316: PUSH
35317: DOUBLE
35318: LD_VAR 0 7
35322: INC
35323: ST_TO_ADDR
35324: LD_INT 2
35326: PUSH
35327: FOR_DOWNTO
35328: IFFALSE 35412
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35330: LD_ADDR_VAR 0 6
35334: PUSH
35335: LD_VAR 0 7
35339: PUSH
35340: LD_VAR 0 5
35344: PUSH
35345: LD_INT 1
35347: MINUS
35348: ARRAY
35349: PPUSH
35350: LD_VAR 0 2
35354: PUSH
35355: LD_VAR 0 5
35359: PUSH
35360: LD_INT 1
35362: MINUS
35363: ARRAY
35364: PPUSH
35365: LD_VAR 0 7
35369: PUSH
35370: LD_VAR 0 5
35374: ARRAY
35375: PPUSH
35376: CALL_OW 1
35380: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35381: LD_ADDR_VAR 0 7
35385: PUSH
35386: LD_VAR 0 7
35390: PPUSH
35391: LD_VAR 0 5
35395: PUSH
35396: LD_INT 1
35398: MINUS
35399: PPUSH
35400: LD_VAR 0 6
35404: PPUSH
35405: CALL_OW 1
35409: ST_TO_ADDR
// end ;
35410: GO 35327
35412: POP
35413: POP
// result := s_arr [ 1 ] ;
35414: LD_ADDR_VAR 0 4
35418: PUSH
35419: LD_VAR 0 7
35423: PUSH
35424: LD_INT 1
35426: ARRAY
35427: ST_TO_ADDR
// end ; end ;
35428: LD_VAR 0 4
35432: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35433: LD_INT 0
35435: PPUSH
35436: PPUSH
// if not list then
35437: LD_VAR 0 1
35441: NOT
35442: IFFALSE 35446
// exit ;
35444: GO 35537
// i := list [ pos1 ] ;
35446: LD_ADDR_VAR 0 5
35450: PUSH
35451: LD_VAR 0 1
35455: PUSH
35456: LD_VAR 0 2
35460: ARRAY
35461: ST_TO_ADDR
// if not i then
35462: LD_VAR 0 5
35466: NOT
35467: IFFALSE 35471
// exit ;
35469: GO 35537
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35471: LD_ADDR_VAR 0 1
35475: PUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: LD_VAR 0 2
35485: PPUSH
35486: LD_VAR 0 1
35490: PUSH
35491: LD_VAR 0 3
35495: ARRAY
35496: PPUSH
35497: CALL_OW 1
35501: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35502: LD_ADDR_VAR 0 1
35506: PUSH
35507: LD_VAR 0 1
35511: PPUSH
35512: LD_VAR 0 3
35516: PPUSH
35517: LD_VAR 0 5
35521: PPUSH
35522: CALL_OW 1
35526: ST_TO_ADDR
// result := list ;
35527: LD_ADDR_VAR 0 4
35531: PUSH
35532: LD_VAR 0 1
35536: ST_TO_ADDR
// end ;
35537: LD_VAR 0 4
35541: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35542: LD_INT 0
35544: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35545: LD_ADDR_VAR 0 5
35549: PUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 250
35559: PPUSH
35560: LD_VAR 0 1
35564: PPUSH
35565: CALL_OW 251
35569: PPUSH
35570: LD_VAR 0 2
35574: PPUSH
35575: LD_VAR 0 3
35579: PPUSH
35580: LD_VAR 0 4
35584: PPUSH
35585: CALL 35595 0 5
35589: ST_TO_ADDR
// end ;
35590: LD_VAR 0 5
35594: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35595: LD_INT 0
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
// if not list then
35601: LD_VAR 0 3
35605: NOT
35606: IFFALSE 35610
// exit ;
35608: GO 35998
// result := [ ] ;
35610: LD_ADDR_VAR 0 6
35614: PUSH
35615: EMPTY
35616: ST_TO_ADDR
// for i in list do
35617: LD_ADDR_VAR 0 7
35621: PUSH
35622: LD_VAR 0 3
35626: PUSH
35627: FOR_IN
35628: IFFALSE 35830
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_VAR 0 7
35639: PPUSH
35640: LD_VAR 0 1
35644: PPUSH
35645: LD_VAR 0 2
35649: PPUSH
35650: CALL_OW 297
35654: ST_TO_ADDR
// if not result then
35655: LD_VAR 0 6
35659: NOT
35660: IFFALSE 35686
// result := [ [ i , tmp ] ] else
35662: LD_ADDR_VAR 0 6
35666: PUSH
35667: LD_VAR 0 7
35671: PUSH
35672: LD_VAR 0 9
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: EMPTY
35682: LIST
35683: ST_TO_ADDR
35684: GO 35828
// begin if result [ result ] [ 2 ] < tmp then
35686: LD_VAR 0 6
35690: PUSH
35691: LD_VAR 0 6
35695: ARRAY
35696: PUSH
35697: LD_INT 2
35699: ARRAY
35700: PUSH
35701: LD_VAR 0 9
35705: LESS
35706: IFFALSE 35748
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35708: LD_ADDR_VAR 0 6
35712: PUSH
35713: LD_VAR 0 6
35717: PPUSH
35718: LD_VAR 0 6
35722: PUSH
35723: LD_INT 1
35725: PLUS
35726: PPUSH
35727: LD_VAR 0 7
35731: PUSH
35732: LD_VAR 0 9
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PPUSH
35741: CALL_OW 2
35745: ST_TO_ADDR
35746: GO 35828
// for j = 1 to result do
35748: LD_ADDR_VAR 0 8
35752: PUSH
35753: DOUBLE
35754: LD_INT 1
35756: DEC
35757: ST_TO_ADDR
35758: LD_VAR 0 6
35762: PUSH
35763: FOR_TO
35764: IFFALSE 35826
// begin if tmp < result [ j ] [ 2 ] then
35766: LD_VAR 0 9
35770: PUSH
35771: LD_VAR 0 6
35775: PUSH
35776: LD_VAR 0 8
35780: ARRAY
35781: PUSH
35782: LD_INT 2
35784: ARRAY
35785: LESS
35786: IFFALSE 35824
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35788: LD_ADDR_VAR 0 6
35792: PUSH
35793: LD_VAR 0 6
35797: PPUSH
35798: LD_VAR 0 8
35802: PPUSH
35803: LD_VAR 0 7
35807: PUSH
35808: LD_VAR 0 9
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 2
35821: ST_TO_ADDR
// break ;
35822: GO 35826
// end ; end ;
35824: GO 35763
35826: POP
35827: POP
// end ; end ;
35828: GO 35627
35830: POP
35831: POP
// if result and not asc then
35832: LD_VAR 0 6
35836: PUSH
35837: LD_VAR 0 4
35841: NOT
35842: AND
35843: IFFALSE 35918
// begin tmp := result ;
35845: LD_ADDR_VAR 0 9
35849: PUSH
35850: LD_VAR 0 6
35854: ST_TO_ADDR
// for i = tmp downto 1 do
35855: LD_ADDR_VAR 0 7
35859: PUSH
35860: DOUBLE
35861: LD_VAR 0 9
35865: INC
35866: ST_TO_ADDR
35867: LD_INT 1
35869: PUSH
35870: FOR_DOWNTO
35871: IFFALSE 35916
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35873: LD_ADDR_VAR 0 6
35877: PUSH
35878: LD_VAR 0 6
35882: PPUSH
35883: LD_VAR 0 9
35887: PUSH
35888: LD_VAR 0 7
35892: MINUS
35893: PUSH
35894: LD_INT 1
35896: PLUS
35897: PPUSH
35898: LD_VAR 0 9
35902: PUSH
35903: LD_VAR 0 7
35907: ARRAY
35908: PPUSH
35909: CALL_OW 1
35913: ST_TO_ADDR
35914: GO 35870
35916: POP
35917: POP
// end ; tmp := [ ] ;
35918: LD_ADDR_VAR 0 9
35922: PUSH
35923: EMPTY
35924: ST_TO_ADDR
// if mode then
35925: LD_VAR 0 5
35929: IFFALSE 35998
// begin for i = 1 to result do
35931: LD_ADDR_VAR 0 7
35935: PUSH
35936: DOUBLE
35937: LD_INT 1
35939: DEC
35940: ST_TO_ADDR
35941: LD_VAR 0 6
35945: PUSH
35946: FOR_TO
35947: IFFALSE 35986
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35949: LD_ADDR_VAR 0 9
35953: PUSH
35954: LD_VAR 0 9
35958: PPUSH
35959: LD_VAR 0 7
35963: PPUSH
35964: LD_VAR 0 6
35968: PUSH
35969: LD_VAR 0 7
35973: ARRAY
35974: PUSH
35975: LD_INT 1
35977: ARRAY
35978: PPUSH
35979: CALL_OW 1
35983: ST_TO_ADDR
35984: GO 35946
35986: POP
35987: POP
// result := tmp ;
35988: LD_ADDR_VAR 0 6
35992: PUSH
35993: LD_VAR 0 9
35997: ST_TO_ADDR
// end ; end ;
35998: LD_VAR 0 6
36002: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36003: LD_INT 0
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36011: LD_ADDR_VAR 0 5
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: ST_TO_ADDR
// if not x or not y then
36033: LD_VAR 0 2
36037: NOT
36038: PUSH
36039: LD_VAR 0 3
36043: NOT
36044: OR
36045: IFFALSE 36049
// exit ;
36047: GO 37701
// if not range then
36049: LD_VAR 0 4
36053: NOT
36054: IFFALSE 36064
// range := 10 ;
36056: LD_ADDR_VAR 0 4
36060: PUSH
36061: LD_INT 10
36063: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36064: LD_ADDR_VAR 0 8
36068: PUSH
36069: LD_INT 81
36071: PUSH
36072: LD_VAR 0 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 92
36083: PUSH
36084: LD_VAR 0 2
36088: PUSH
36089: LD_VAR 0 3
36093: PUSH
36094: LD_VAR 0 4
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: LD_INT 21
36110: PUSH
36111: LD_INT 3
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: PPUSH
36127: CALL_OW 69
36131: ST_TO_ADDR
// if not tmp then
36132: LD_VAR 0 8
36136: NOT
36137: IFFALSE 36141
// exit ;
36139: GO 37701
// for i in tmp do
36141: LD_ADDR_VAR 0 6
36145: PUSH
36146: LD_VAR 0 8
36150: PUSH
36151: FOR_IN
36152: IFFALSE 37676
// begin points := [ 0 , 0 , 0 ] ;
36154: LD_ADDR_VAR 0 9
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: ST_TO_ADDR
// bpoints := 1 ;
36173: LD_ADDR_VAR 0 10
36177: PUSH
36178: LD_INT 1
36180: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36181: LD_VAR 0 6
36185: PPUSH
36186: CALL_OW 247
36190: PUSH
36191: LD_INT 1
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36777
36199: POP
// begin if GetClass ( i ) = 1 then
36200: LD_VAR 0 6
36204: PPUSH
36205: CALL_OW 257
36209: PUSH
36210: LD_INT 1
36212: EQUAL
36213: IFFALSE 36234
// points := [ 10 , 5 , 3 ] ;
36215: LD_ADDR_VAR 0 9
36219: PUSH
36220: LD_INT 10
36222: PUSH
36223: LD_INT 5
36225: PUSH
36226: LD_INT 3
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36234: LD_VAR 0 6
36238: PPUSH
36239: CALL_OW 257
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 4
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: IN
36258: IFFALSE 36279
// points := [ 3 , 2 , 1 ] ;
36260: LD_ADDR_VAR 0 9
36264: PUSH
36265: LD_INT 3
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36279: LD_VAR 0 6
36283: PPUSH
36284: CALL_OW 257
36288: PUSH
36289: LD_INT 5
36291: EQUAL
36292: IFFALSE 36313
// points := [ 130 , 5 , 2 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 130
36301: PUSH
36302: LD_INT 5
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 257
36322: PUSH
36323: LD_INT 8
36325: EQUAL
36326: IFFALSE 36347
// points := [ 35 , 35 , 30 ] ;
36328: LD_ADDR_VAR 0 9
36332: PUSH
36333: LD_INT 35
36335: PUSH
36336: LD_INT 35
36338: PUSH
36339: LD_INT 30
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36347: LD_VAR 0 6
36351: PPUSH
36352: CALL_OW 257
36356: PUSH
36357: LD_INT 9
36359: EQUAL
36360: IFFALSE 36381
// points := [ 20 , 55 , 40 ] ;
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_INT 20
36369: PUSH
36370: LD_INT 55
36372: PUSH
36373: LD_INT 40
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36381: LD_VAR 0 6
36385: PPUSH
36386: CALL_OW 257
36390: PUSH
36391: LD_INT 12
36393: PUSH
36394: LD_INT 16
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: IN
36401: IFFALSE 36422
// points := [ 5 , 3 , 2 ] ;
36403: LD_ADDR_VAR 0 9
36407: PUSH
36408: LD_INT 5
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: LD_INT 2
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36422: LD_VAR 0 6
36426: PPUSH
36427: CALL_OW 257
36431: PUSH
36432: LD_INT 17
36434: EQUAL
36435: IFFALSE 36456
// points := [ 100 , 50 , 75 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 100
36444: PUSH
36445: LD_INT 50
36447: PUSH
36448: LD_INT 75
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 257
36465: PUSH
36466: LD_INT 15
36468: EQUAL
36469: IFFALSE 36490
// points := [ 10 , 5 , 3 ] ;
36471: LD_ADDR_VAR 0 9
36475: PUSH
36476: LD_INT 10
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36490: LD_VAR 0 6
36494: PPUSH
36495: CALL_OW 257
36499: PUSH
36500: LD_INT 14
36502: EQUAL
36503: IFFALSE 36524
// points := [ 10 , 0 , 0 ] ;
36505: LD_ADDR_VAR 0 9
36509: PUSH
36510: LD_INT 10
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36524: LD_VAR 0 6
36528: PPUSH
36529: CALL_OW 257
36533: PUSH
36534: LD_INT 11
36536: EQUAL
36537: IFFALSE 36558
// points := [ 30 , 10 , 5 ] ;
36539: LD_ADDR_VAR 0 9
36543: PUSH
36544: LD_INT 30
36546: PUSH
36547: LD_INT 10
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36558: LD_VAR 0 1
36562: PPUSH
36563: LD_INT 5
36565: PPUSH
36566: CALL_OW 321
36570: PUSH
36571: LD_INT 2
36573: EQUAL
36574: IFFALSE 36591
// bpoints := bpoints * 1.8 ;
36576: LD_ADDR_VAR 0 10
36580: PUSH
36581: LD_VAR 0 10
36585: PUSH
36586: LD_REAL  1.80000000000000E+0000
36589: MUL
36590: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36591: LD_VAR 0 6
36595: PPUSH
36596: CALL_OW 257
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 3
36609: PUSH
36610: LD_INT 4
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: IN
36619: PUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: LD_INT 51
36627: PPUSH
36628: CALL_OW 321
36632: PUSH
36633: LD_INT 2
36635: EQUAL
36636: AND
36637: IFFALSE 36654
// bpoints := bpoints * 1.2 ;
36639: LD_ADDR_VAR 0 10
36643: PUSH
36644: LD_VAR 0 10
36648: PUSH
36649: LD_REAL  1.20000000000000E+0000
36652: MUL
36653: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36654: LD_VAR 0 6
36658: PPUSH
36659: CALL_OW 257
36663: PUSH
36664: LD_INT 5
36666: PUSH
36667: LD_INT 7
36669: PUSH
36670: LD_INT 9
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: IN
36678: PUSH
36679: LD_VAR 0 1
36683: PPUSH
36684: LD_INT 52
36686: PPUSH
36687: CALL_OW 321
36691: PUSH
36692: LD_INT 2
36694: EQUAL
36695: AND
36696: IFFALSE 36713
// bpoints := bpoints * 1.5 ;
36698: LD_ADDR_VAR 0 10
36702: PUSH
36703: LD_VAR 0 10
36707: PUSH
36708: LD_REAL  1.50000000000000E+0000
36711: MUL
36712: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_INT 66
36720: PPUSH
36721: CALL_OW 321
36725: PUSH
36726: LD_INT 2
36728: EQUAL
36729: IFFALSE 36746
// bpoints := bpoints * 1.1 ;
36731: LD_ADDR_VAR 0 10
36735: PUSH
36736: LD_VAR 0 10
36740: PUSH
36741: LD_REAL  1.10000000000000E+0000
36744: MUL
36745: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36746: LD_ADDR_VAR 0 10
36750: PUSH
36751: LD_VAR 0 10
36755: PUSH
36756: LD_VAR 0 6
36760: PPUSH
36761: LD_INT 1
36763: PPUSH
36764: CALL_OW 259
36768: PUSH
36769: LD_REAL  1.15000000000000E+0000
36772: MUL
36773: MUL
36774: ST_TO_ADDR
// end ; unit_vehicle :
36775: GO 37605
36777: LD_INT 2
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 37593
36785: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 264
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: LD_INT 42
36801: PUSH
36802: LD_INT 24
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: IN
36810: IFFALSE 36831
// points := [ 25 , 5 , 3 ] ;
36812: LD_ADDR_VAR 0 9
36816: PUSH
36817: LD_INT 25
36819: PUSH
36820: LD_INT 5
36822: PUSH
36823: LD_INT 3
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36831: LD_VAR 0 6
36835: PPUSH
36836: CALL_OW 264
36840: PUSH
36841: LD_INT 4
36843: PUSH
36844: LD_INT 43
36846: PUSH
36847: LD_INT 25
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: LIST
36854: IN
36855: IFFALSE 36876
// points := [ 40 , 15 , 5 ] ;
36857: LD_ADDR_VAR 0 9
36861: PUSH
36862: LD_INT 40
36864: PUSH
36865: LD_INT 15
36867: PUSH
36868: LD_INT 5
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36876: LD_VAR 0 6
36880: PPUSH
36881: CALL_OW 264
36885: PUSH
36886: LD_INT 3
36888: PUSH
36889: LD_INT 23
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: IN
36896: IFFALSE 36917
// points := [ 7 , 25 , 8 ] ;
36898: LD_ADDR_VAR 0 9
36902: PUSH
36903: LD_INT 7
36905: PUSH
36906: LD_INT 25
36908: PUSH
36909: LD_INT 8
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36917: LD_VAR 0 6
36921: PPUSH
36922: CALL_OW 264
36926: PUSH
36927: LD_INT 5
36929: PUSH
36930: LD_INT 27
36932: PUSH
36933: LD_INT 44
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: IN
36941: IFFALSE 36962
// points := [ 14 , 50 , 16 ] ;
36943: LD_ADDR_VAR 0 9
36947: PUSH
36948: LD_INT 14
36950: PUSH
36951: LD_INT 50
36953: PUSH
36954: LD_INT 16
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36962: LD_VAR 0 6
36966: PPUSH
36967: CALL_OW 264
36971: PUSH
36972: LD_INT 6
36974: PUSH
36975: LD_INT 46
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: IN
36982: IFFALSE 37003
// points := [ 32 , 120 , 70 ] ;
36984: LD_ADDR_VAR 0 9
36988: PUSH
36989: LD_INT 32
36991: PUSH
36992: LD_INT 120
36994: PUSH
36995: LD_INT 70
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37003: LD_VAR 0 6
37007: PPUSH
37008: CALL_OW 264
37012: PUSH
37013: LD_INT 7
37015: PUSH
37016: LD_INT 28
37018: PUSH
37019: LD_INT 45
37021: PUSH
37022: LD_EXP 102
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: IN
37033: IFFALSE 37054
// points := [ 35 , 20 , 45 ] ;
37035: LD_ADDR_VAR 0 9
37039: PUSH
37040: LD_INT 35
37042: PUSH
37043: LD_INT 20
37045: PUSH
37046: LD_INT 45
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37054: LD_VAR 0 6
37058: PPUSH
37059: CALL_OW 264
37063: PUSH
37064: LD_INT 47
37066: PUSH
37067: EMPTY
37068: LIST
37069: IN
37070: IFFALSE 37091
// points := [ 67 , 45 , 75 ] ;
37072: LD_ADDR_VAR 0 9
37076: PUSH
37077: LD_INT 67
37079: PUSH
37080: LD_INT 45
37082: PUSH
37083: LD_INT 75
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37091: LD_VAR 0 6
37095: PPUSH
37096: CALL_OW 264
37100: PUSH
37101: LD_INT 26
37103: PUSH
37104: EMPTY
37105: LIST
37106: IN
37107: IFFALSE 37128
// points := [ 120 , 30 , 80 ] ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_INT 120
37116: PUSH
37117: LD_INT 30
37119: PUSH
37120: LD_INT 80
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37128: LD_VAR 0 6
37132: PPUSH
37133: CALL_OW 264
37137: PUSH
37138: LD_INT 22
37140: PUSH
37141: EMPTY
37142: LIST
37143: IN
37144: IFFALSE 37165
// points := [ 40 , 1 , 1 ] ;
37146: LD_ADDR_VAR 0 9
37150: PUSH
37151: LD_INT 40
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37165: LD_VAR 0 6
37169: PPUSH
37170: CALL_OW 264
37174: PUSH
37175: LD_INT 29
37177: PUSH
37178: EMPTY
37179: LIST
37180: IN
37181: IFFALSE 37202
// points := [ 70 , 200 , 400 ] ;
37183: LD_ADDR_VAR 0 9
37187: PUSH
37188: LD_INT 70
37190: PUSH
37191: LD_INT 200
37193: PUSH
37194: LD_INT 400
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37202: LD_VAR 0 6
37206: PPUSH
37207: CALL_OW 264
37211: PUSH
37212: LD_INT 14
37214: PUSH
37215: LD_INT 53
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: IN
37222: IFFALSE 37243
// points := [ 40 , 10 , 20 ] ;
37224: LD_ADDR_VAR 0 9
37228: PUSH
37229: LD_INT 40
37231: PUSH
37232: LD_INT 10
37234: PUSH
37235: LD_INT 20
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37243: LD_VAR 0 6
37247: PPUSH
37248: CALL_OW 264
37252: PUSH
37253: LD_INT 9
37255: PUSH
37256: EMPTY
37257: LIST
37258: IN
37259: IFFALSE 37280
// points := [ 5 , 70 , 20 ] ;
37261: LD_ADDR_VAR 0 9
37265: PUSH
37266: LD_INT 5
37268: PUSH
37269: LD_INT 70
37271: PUSH
37272: LD_INT 20
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37280: LD_VAR 0 6
37284: PPUSH
37285: CALL_OW 264
37289: PUSH
37290: LD_INT 10
37292: PUSH
37293: EMPTY
37294: LIST
37295: IN
37296: IFFALSE 37317
// points := [ 35 , 110 , 70 ] ;
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_INT 35
37305: PUSH
37306: LD_INT 110
37308: PUSH
37309: LD_INT 70
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37317: LD_VAR 0 6
37321: PPUSH
37322: CALL_OW 265
37326: PUSH
37327: LD_INT 25
37329: EQUAL
37330: IFFALSE 37351
// points := [ 80 , 65 , 100 ] ;
37332: LD_ADDR_VAR 0 9
37336: PUSH
37337: LD_INT 80
37339: PUSH
37340: LD_INT 65
37342: PUSH
37343: LD_INT 100
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37351: LD_VAR 0 6
37355: PPUSH
37356: CALL_OW 263
37360: PUSH
37361: LD_INT 1
37363: EQUAL
37364: IFFALSE 37399
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37366: LD_ADDR_VAR 0 10
37370: PUSH
37371: LD_VAR 0 10
37375: PUSH
37376: LD_VAR 0 6
37380: PPUSH
37381: CALL_OW 311
37385: PPUSH
37386: LD_INT 3
37388: PPUSH
37389: CALL_OW 259
37393: PUSH
37394: LD_INT 4
37396: MUL
37397: MUL
37398: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37399: LD_VAR 0 6
37403: PPUSH
37404: CALL_OW 263
37408: PUSH
37409: LD_INT 2
37411: EQUAL
37412: IFFALSE 37463
// begin j := IsControledBy ( i ) ;
37414: LD_ADDR_VAR 0 7
37418: PUSH
37419: LD_VAR 0 6
37423: PPUSH
37424: CALL_OW 312
37428: ST_TO_ADDR
// if j then
37429: LD_VAR 0 7
37433: IFFALSE 37463
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37435: LD_ADDR_VAR 0 10
37439: PUSH
37440: LD_VAR 0 10
37444: PUSH
37445: LD_VAR 0 7
37449: PPUSH
37450: LD_INT 3
37452: PPUSH
37453: CALL_OW 259
37457: PUSH
37458: LD_INT 3
37460: MUL
37461: MUL
37462: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37463: LD_VAR 0 6
37467: PPUSH
37468: CALL_OW 264
37472: PUSH
37473: LD_INT 5
37475: PUSH
37476: LD_INT 6
37478: PUSH
37479: LD_INT 46
37481: PUSH
37482: LD_INT 44
37484: PUSH
37485: LD_INT 47
37487: PUSH
37488: LD_INT 45
37490: PUSH
37491: LD_INT 28
37493: PUSH
37494: LD_INT 7
37496: PUSH
37497: LD_INT 27
37499: PUSH
37500: LD_INT 29
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: IN
37515: PUSH
37516: LD_VAR 0 1
37520: PPUSH
37521: LD_INT 52
37523: PPUSH
37524: CALL_OW 321
37528: PUSH
37529: LD_INT 2
37531: EQUAL
37532: AND
37533: IFFALSE 37550
// bpoints := bpoints * 1.2 ;
37535: LD_ADDR_VAR 0 10
37539: PUSH
37540: LD_VAR 0 10
37544: PUSH
37545: LD_REAL  1.20000000000000E+0000
37548: MUL
37549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37550: LD_VAR 0 6
37554: PPUSH
37555: CALL_OW 264
37559: PUSH
37560: LD_INT 6
37562: PUSH
37563: LD_INT 46
37565: PUSH
37566: LD_INT 47
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: IN
37574: IFFALSE 37591
// bpoints := bpoints * 1.2 ;
37576: LD_ADDR_VAR 0 10
37580: PUSH
37581: LD_VAR 0 10
37585: PUSH
37586: LD_REAL  1.20000000000000E+0000
37589: MUL
37590: ST_TO_ADDR
// end ; unit_building :
37591: GO 37605
37593: LD_INT 3
37595: DOUBLE
37596: EQUAL
37597: IFTRUE 37601
37599: GO 37604
37601: POP
// ; end ;
37602: GO 37605
37604: POP
// for j = 1 to 3 do
37605: LD_ADDR_VAR 0 7
37609: PUSH
37610: DOUBLE
37611: LD_INT 1
37613: DEC
37614: ST_TO_ADDR
37615: LD_INT 3
37617: PUSH
37618: FOR_TO
37619: IFFALSE 37672
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37621: LD_ADDR_VAR 0 5
37625: PUSH
37626: LD_VAR 0 5
37630: PPUSH
37631: LD_VAR 0 7
37635: PPUSH
37636: LD_VAR 0 5
37640: PUSH
37641: LD_VAR 0 7
37645: ARRAY
37646: PUSH
37647: LD_VAR 0 9
37651: PUSH
37652: LD_VAR 0 7
37656: ARRAY
37657: PUSH
37658: LD_VAR 0 10
37662: MUL
37663: PLUS
37664: PPUSH
37665: CALL_OW 1
37669: ST_TO_ADDR
37670: GO 37618
37672: POP
37673: POP
// end ;
37674: GO 36151
37676: POP
37677: POP
// result := Replace ( result , 4 , tmp ) ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: LD_VAR 0 5
37687: PPUSH
37688: LD_INT 4
37690: PPUSH
37691: LD_VAR 0 8
37695: PPUSH
37696: CALL_OW 1
37700: ST_TO_ADDR
// end ;
37701: LD_VAR 0 5
37705: RET
// export function DangerAtRange ( unit , range ) ; begin
37706: LD_INT 0
37708: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 255
37723: PPUSH
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 250
37733: PPUSH
37734: LD_VAR 0 1
37738: PPUSH
37739: CALL_OW 251
37743: PPUSH
37744: LD_VAR 0 2
37748: PPUSH
37749: CALL 36003 0 4
37753: ST_TO_ADDR
// end ;
37754: LD_VAR 0 3
37758: RET
// export function DangerInArea ( side , area ) ; begin
37759: LD_INT 0
37761: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37762: LD_ADDR_VAR 0 3
37766: PUSH
37767: LD_VAR 0 2
37771: PPUSH
37772: LD_INT 81
37774: PUSH
37775: LD_VAR 0 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PPUSH
37784: CALL_OW 70
37788: ST_TO_ADDR
// end ;
37789: LD_VAR 0 3
37793: RET
// export function IsExtension ( b ) ; begin
37794: LD_INT 0
37796: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37797: LD_ADDR_VAR 0 2
37801: PUSH
37802: LD_VAR 0 1
37806: PUSH
37807: LD_INT 23
37809: PUSH
37810: LD_INT 20
37812: PUSH
37813: LD_INT 22
37815: PUSH
37816: LD_INT 17
37818: PUSH
37819: LD_INT 24
37821: PUSH
37822: LD_INT 21
37824: PUSH
37825: LD_INT 19
37827: PUSH
37828: LD_INT 16
37830: PUSH
37831: LD_INT 25
37833: PUSH
37834: LD_INT 18
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: IN
37849: ST_TO_ADDR
// end ;
37850: LD_VAR 0 2
37854: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37855: LD_INT 0
37857: PPUSH
37858: PPUSH
37859: PPUSH
// result := [ ] ;
37860: LD_ADDR_VAR 0 4
37864: PUSH
37865: EMPTY
37866: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37867: LD_ADDR_VAR 0 5
37871: PUSH
37872: LD_VAR 0 2
37876: PPUSH
37877: LD_INT 21
37879: PUSH
37880: LD_INT 3
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PPUSH
37887: CALL_OW 70
37891: ST_TO_ADDR
// if not tmp then
37892: LD_VAR 0 5
37896: NOT
37897: IFFALSE 37901
// exit ;
37899: GO 37965
// if checkLink then
37901: LD_VAR 0 3
37905: IFFALSE 37955
// begin for i in tmp do
37907: LD_ADDR_VAR 0 6
37911: PUSH
37912: LD_VAR 0 5
37916: PUSH
37917: FOR_IN
37918: IFFALSE 37953
// if GetBase ( i ) <> base then
37920: LD_VAR 0 6
37924: PPUSH
37925: CALL_OW 274
37929: PUSH
37930: LD_VAR 0 1
37934: NONEQUAL
37935: IFFALSE 37951
// ComLinkToBase ( base , i ) ;
37937: LD_VAR 0 1
37941: PPUSH
37942: LD_VAR 0 6
37946: PPUSH
37947: CALL_OW 169
37951: GO 37917
37953: POP
37954: POP
// end ; result := tmp ;
37955: LD_ADDR_VAR 0 4
37959: PUSH
37960: LD_VAR 0 5
37964: ST_TO_ADDR
// end ;
37965: LD_VAR 0 4
37969: RET
// export function ComComplete ( units , b ) ; var i ; begin
37970: LD_INT 0
37972: PPUSH
37973: PPUSH
// if not units then
37974: LD_VAR 0 1
37978: NOT
37979: IFFALSE 37983
// exit ;
37981: GO 38073
// for i in units do
37983: LD_ADDR_VAR 0 4
37987: PUSH
37988: LD_VAR 0 1
37992: PUSH
37993: FOR_IN
37994: IFFALSE 38071
// if BuildingStatus ( b ) = bs_build then
37996: LD_VAR 0 2
38000: PPUSH
38001: CALL_OW 461
38005: PUSH
38006: LD_INT 1
38008: EQUAL
38009: IFFALSE 38069
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38011: LD_VAR 0 4
38015: PPUSH
38016: LD_STRING h
38018: PUSH
38019: LD_VAR 0 2
38023: PPUSH
38024: CALL_OW 250
38028: PUSH
38029: LD_VAR 0 2
38033: PPUSH
38034: CALL_OW 251
38038: PUSH
38039: LD_VAR 0 2
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: PPUSH
38065: CALL_OW 446
38069: GO 37993
38071: POP
38072: POP
// end ;
38073: LD_VAR 0 3
38077: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38078: LD_INT 0
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38086: LD_VAR 0 1
38090: NOT
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 263
38101: PUSH
38102: LD_INT 2
38104: NONEQUAL
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38426
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38110: LD_ADDR_VAR 0 6
38114: PUSH
38115: LD_INT 22
38117: PUSH
38118: LD_VAR 0 1
38122: PPUSH
38123: CALL_OW 255
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: LD_INT 30
38137: PUSH
38138: LD_INT 36
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 34
38147: PUSH
38148: LD_INT 31
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PPUSH
38164: CALL_OW 69
38168: ST_TO_ADDR
// if not tmp then
38169: LD_VAR 0 6
38173: NOT
38174: IFFALSE 38178
// exit ;
38176: GO 38426
// result := [ ] ;
38178: LD_ADDR_VAR 0 2
38182: PUSH
38183: EMPTY
38184: ST_TO_ADDR
// for i in tmp do
38185: LD_ADDR_VAR 0 3
38189: PUSH
38190: LD_VAR 0 6
38194: PUSH
38195: FOR_IN
38196: IFFALSE 38267
// begin t := UnitsInside ( i ) ;
38198: LD_ADDR_VAR 0 4
38202: PUSH
38203: LD_VAR 0 3
38207: PPUSH
38208: CALL_OW 313
38212: ST_TO_ADDR
// if t then
38213: LD_VAR 0 4
38217: IFFALSE 38265
// for j in t do
38219: LD_ADDR_VAR 0 7
38223: PUSH
38224: LD_VAR 0 4
38228: PUSH
38229: FOR_IN
38230: IFFALSE 38263
// result := Replace ( result , result + 1 , j ) ;
38232: LD_ADDR_VAR 0 2
38236: PUSH
38237: LD_VAR 0 2
38241: PPUSH
38242: LD_VAR 0 2
38246: PUSH
38247: LD_INT 1
38249: PLUS
38250: PPUSH
38251: LD_VAR 0 7
38255: PPUSH
38256: CALL_OW 1
38260: ST_TO_ADDR
38261: GO 38229
38263: POP
38264: POP
// end ;
38265: GO 38195
38267: POP
38268: POP
// if not result then
38269: LD_VAR 0 2
38273: NOT
38274: IFFALSE 38278
// exit ;
38276: GO 38426
// mech := result [ 1 ] ;
38278: LD_ADDR_VAR 0 5
38282: PUSH
38283: LD_VAR 0 2
38287: PUSH
38288: LD_INT 1
38290: ARRAY
38291: ST_TO_ADDR
// if result > 1 then
38292: LD_VAR 0 2
38296: PUSH
38297: LD_INT 1
38299: GREATER
38300: IFFALSE 38412
// begin for i = 2 to result do
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: DOUBLE
38308: LD_INT 2
38310: DEC
38311: ST_TO_ADDR
38312: LD_VAR 0 2
38316: PUSH
38317: FOR_TO
38318: IFFALSE 38410
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38320: LD_ADDR_VAR 0 4
38324: PUSH
38325: LD_VAR 0 2
38329: PUSH
38330: LD_VAR 0 3
38334: ARRAY
38335: PPUSH
38336: LD_INT 3
38338: PPUSH
38339: CALL_OW 259
38343: PUSH
38344: LD_VAR 0 2
38348: PUSH
38349: LD_VAR 0 3
38353: ARRAY
38354: PPUSH
38355: CALL_OW 432
38359: MINUS
38360: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38361: LD_VAR 0 4
38365: PUSH
38366: LD_VAR 0 5
38370: PPUSH
38371: LD_INT 3
38373: PPUSH
38374: CALL_OW 259
38378: PUSH
38379: LD_VAR 0 5
38383: PPUSH
38384: CALL_OW 432
38388: MINUS
38389: GREATEREQUAL
38390: IFFALSE 38408
// mech := result [ i ] ;
38392: LD_ADDR_VAR 0 5
38396: PUSH
38397: LD_VAR 0 2
38401: PUSH
38402: LD_VAR 0 3
38406: ARRAY
38407: ST_TO_ADDR
// end ;
38408: GO 38317
38410: POP
38411: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38412: LD_VAR 0 1
38416: PPUSH
38417: LD_VAR 0 5
38421: PPUSH
38422: CALL_OW 135
// end ;
38426: LD_VAR 0 2
38430: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38431: LD_INT 0
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
// result := [ ] ;
38446: LD_ADDR_VAR 0 7
38450: PUSH
38451: EMPTY
38452: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 266
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: IN
38473: NOT
38474: IFFALSE 38478
// exit ;
38476: GO 40112
// if name then
38478: LD_VAR 0 3
38482: IFFALSE 38498
// SetBName ( base_dep , name ) ;
38484: LD_VAR 0 1
38488: PPUSH
38489: LD_VAR 0 3
38493: PPUSH
38494: CALL_OW 500
// base := GetBase ( base_dep ) ;
38498: LD_ADDR_VAR 0 15
38502: PUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 274
38512: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38513: LD_ADDR_VAR 0 16
38517: PUSH
38518: LD_VAR 0 1
38522: PPUSH
38523: CALL_OW 255
38527: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38528: LD_ADDR_VAR 0 17
38532: PUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 248
38542: ST_TO_ADDR
// if sources then
38543: LD_VAR 0 5
38547: IFFALSE 38594
// for i = 1 to 3 do
38549: LD_ADDR_VAR 0 8
38553: PUSH
38554: DOUBLE
38555: LD_INT 1
38557: DEC
38558: ST_TO_ADDR
38559: LD_INT 3
38561: PUSH
38562: FOR_TO
38563: IFFALSE 38592
// AddResourceType ( base , i , sources [ i ] ) ;
38565: LD_VAR 0 15
38569: PPUSH
38570: LD_VAR 0 8
38574: PPUSH
38575: LD_VAR 0 5
38579: PUSH
38580: LD_VAR 0 8
38584: ARRAY
38585: PPUSH
38586: CALL_OW 276
38590: GO 38562
38592: POP
38593: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38594: LD_ADDR_VAR 0 18
38598: PUSH
38599: LD_VAR 0 15
38603: PPUSH
38604: LD_VAR 0 2
38608: PPUSH
38609: LD_INT 1
38611: PPUSH
38612: CALL 37855 0 3
38616: ST_TO_ADDR
// InitHc ;
38617: CALL_OW 19
// InitUc ;
38621: CALL_OW 18
// uc_side := side ;
38625: LD_ADDR_OWVAR 20
38629: PUSH
38630: LD_VAR 0 16
38634: ST_TO_ADDR
// uc_nation := nation ;
38635: LD_ADDR_OWVAR 21
38639: PUSH
38640: LD_VAR 0 17
38644: ST_TO_ADDR
// if buildings then
38645: LD_VAR 0 18
38649: IFFALSE 39971
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38651: LD_ADDR_VAR 0 19
38655: PUSH
38656: LD_VAR 0 18
38660: PPUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 30
38666: PUSH
38667: LD_INT 29
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 30
38676: PUSH
38677: LD_INT 30
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: PPUSH
38689: CALL_OW 72
38693: ST_TO_ADDR
// if tmp then
38694: LD_VAR 0 19
38698: IFFALSE 38746
// for i in tmp do
38700: LD_ADDR_VAR 0 8
38704: PUSH
38705: LD_VAR 0 19
38709: PUSH
38710: FOR_IN
38711: IFFALSE 38744
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38713: LD_VAR 0 8
38717: PPUSH
38718: CALL_OW 250
38722: PPUSH
38723: LD_VAR 0 8
38727: PPUSH
38728: CALL_OW 251
38732: PPUSH
38733: LD_VAR 0 16
38737: PPUSH
38738: CALL_OW 441
38742: GO 38710
38744: POP
38745: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38746: LD_VAR 0 18
38750: PPUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 30
38756: PUSH
38757: LD_INT 32
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 30
38766: PUSH
38767: LD_INT 33
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 72
38783: IFFALSE 38871
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38785: LD_ADDR_VAR 0 8
38789: PUSH
38790: LD_VAR 0 18
38794: PPUSH
38795: LD_INT 2
38797: PUSH
38798: LD_INT 30
38800: PUSH
38801: LD_INT 32
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 30
38810: PUSH
38811: LD_INT 33
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: PPUSH
38823: CALL_OW 72
38827: PUSH
38828: FOR_IN
38829: IFFALSE 38869
// begin if not GetBWeapon ( i ) then
38831: LD_VAR 0 8
38835: PPUSH
38836: CALL_OW 269
38840: NOT
38841: IFFALSE 38867
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38843: LD_VAR 0 8
38847: PPUSH
38848: LD_VAR 0 8
38852: PPUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: CALL 40117 0 2
38862: PPUSH
38863: CALL_OW 431
// end ;
38867: GO 38828
38869: POP
38870: POP
// end ; for i = 1 to personel do
38871: LD_ADDR_VAR 0 8
38875: PUSH
38876: DOUBLE
38877: LD_INT 1
38879: DEC
38880: ST_TO_ADDR
38881: LD_VAR 0 6
38885: PUSH
38886: FOR_TO
38887: IFFALSE 39951
// begin if i > 4 then
38889: LD_VAR 0 8
38893: PUSH
38894: LD_INT 4
38896: GREATER
38897: IFFALSE 38901
// break ;
38899: GO 39951
// case i of 1 :
38901: LD_VAR 0 8
38905: PUSH
38906: LD_INT 1
38908: DOUBLE
38909: EQUAL
38910: IFTRUE 38914
38912: GO 38994
38914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38915: LD_ADDR_VAR 0 12
38919: PUSH
38920: LD_VAR 0 18
38924: PPUSH
38925: LD_INT 22
38927: PUSH
38928: LD_VAR 0 16
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 58
38939: PUSH
38940: EMPTY
38941: LIST
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: LD_INT 30
38948: PUSH
38949: LD_INT 32
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 30
38958: PUSH
38959: LD_INT 4
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 30
38968: PUSH
38969: LD_INT 5
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: PPUSH
38987: CALL_OW 72
38991: ST_TO_ADDR
38992: GO 39216
38994: LD_INT 2
38996: DOUBLE
38997: EQUAL
38998: IFTRUE 39002
39000: GO 39064
39002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39003: LD_ADDR_VAR 0 12
39007: PUSH
39008: LD_VAR 0 18
39012: PPUSH
39013: LD_INT 22
39015: PUSH
39016: LD_VAR 0 16
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: LD_INT 30
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 30
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PPUSH
39057: CALL_OW 72
39061: ST_TO_ADDR
39062: GO 39216
39064: LD_INT 3
39066: DOUBLE
39067: EQUAL
39068: IFTRUE 39072
39070: GO 39134
39072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39073: LD_ADDR_VAR 0 12
39077: PUSH
39078: LD_VAR 0 18
39082: PPUSH
39083: LD_INT 22
39085: PUSH
39086: LD_VAR 0 16
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 30
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 30
39110: PUSH
39111: LD_INT 3
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PPUSH
39127: CALL_OW 72
39131: ST_TO_ADDR
39132: GO 39216
39134: LD_INT 4
39136: DOUBLE
39137: EQUAL
39138: IFTRUE 39142
39140: GO 39215
39142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39143: LD_ADDR_VAR 0 12
39147: PUSH
39148: LD_VAR 0 18
39152: PPUSH
39153: LD_INT 22
39155: PUSH
39156: LD_VAR 0 16
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 30
39170: PUSH
39171: LD_INT 6
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 30
39180: PUSH
39181: LD_INT 7
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 30
39190: PUSH
39191: LD_INT 8
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PPUSH
39208: CALL_OW 72
39212: ST_TO_ADDR
39213: GO 39216
39215: POP
// if i = 1 then
39216: LD_VAR 0 8
39220: PUSH
39221: LD_INT 1
39223: EQUAL
39224: IFFALSE 39335
// begin tmp := [ ] ;
39226: LD_ADDR_VAR 0 19
39230: PUSH
39231: EMPTY
39232: ST_TO_ADDR
// for j in f do
39233: LD_ADDR_VAR 0 9
39237: PUSH
39238: LD_VAR 0 12
39242: PUSH
39243: FOR_IN
39244: IFFALSE 39317
// if GetBType ( j ) = b_bunker then
39246: LD_VAR 0 9
39250: PPUSH
39251: CALL_OW 266
39255: PUSH
39256: LD_INT 32
39258: EQUAL
39259: IFFALSE 39286
// tmp := Insert ( tmp , 1 , j ) else
39261: LD_ADDR_VAR 0 19
39265: PUSH
39266: LD_VAR 0 19
39270: PPUSH
39271: LD_INT 1
39273: PPUSH
39274: LD_VAR 0 9
39278: PPUSH
39279: CALL_OW 2
39283: ST_TO_ADDR
39284: GO 39315
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39286: LD_ADDR_VAR 0 19
39290: PUSH
39291: LD_VAR 0 19
39295: PPUSH
39296: LD_VAR 0 19
39300: PUSH
39301: LD_INT 1
39303: PLUS
39304: PPUSH
39305: LD_VAR 0 9
39309: PPUSH
39310: CALL_OW 2
39314: ST_TO_ADDR
39315: GO 39243
39317: POP
39318: POP
// if tmp then
39319: LD_VAR 0 19
39323: IFFALSE 39335
// f := tmp ;
39325: LD_ADDR_VAR 0 12
39329: PUSH
39330: LD_VAR 0 19
39334: ST_TO_ADDR
// end ; x := personel [ i ] ;
39335: LD_ADDR_VAR 0 13
39339: PUSH
39340: LD_VAR 0 6
39344: PUSH
39345: LD_VAR 0 8
39349: ARRAY
39350: ST_TO_ADDR
// if x = - 1 then
39351: LD_VAR 0 13
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: EQUAL
39360: IFFALSE 39569
// begin for j in f do
39362: LD_ADDR_VAR 0 9
39366: PUSH
39367: LD_VAR 0 12
39371: PUSH
39372: FOR_IN
39373: IFFALSE 39565
// repeat InitHc ;
39375: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39379: LD_VAR 0 9
39383: PPUSH
39384: CALL_OW 266
39388: PUSH
39389: LD_INT 5
39391: EQUAL
39392: IFFALSE 39462
// begin if UnitsInside ( j ) < 3 then
39394: LD_VAR 0 9
39398: PPUSH
39399: CALL_OW 313
39403: PUSH
39404: LD_INT 3
39406: LESS
39407: IFFALSE 39443
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39409: LD_INT 0
39411: PPUSH
39412: LD_INT 5
39414: PUSH
39415: LD_INT 8
39417: PUSH
39418: LD_INT 9
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_VAR 0 17
39430: ARRAY
39431: PPUSH
39432: LD_VAR 0 4
39436: PPUSH
39437: CALL_OW 380
39441: GO 39460
// PrepareHuman ( false , i , skill ) ;
39443: LD_INT 0
39445: PPUSH
39446: LD_VAR 0 8
39450: PPUSH
39451: LD_VAR 0 4
39455: PPUSH
39456: CALL_OW 380
// end else
39460: GO 39479
// PrepareHuman ( false , i , skill ) ;
39462: LD_INT 0
39464: PPUSH
39465: LD_VAR 0 8
39469: PPUSH
39470: LD_VAR 0 4
39474: PPUSH
39475: CALL_OW 380
// un := CreateHuman ;
39479: LD_ADDR_VAR 0 14
39483: PUSH
39484: CALL_OW 44
39488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39489: LD_ADDR_VAR 0 7
39493: PUSH
39494: LD_VAR 0 7
39498: PPUSH
39499: LD_INT 1
39501: PPUSH
39502: LD_VAR 0 14
39506: PPUSH
39507: CALL_OW 2
39511: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39512: LD_VAR 0 14
39516: PPUSH
39517: LD_VAR 0 9
39521: PPUSH
39522: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39526: LD_VAR 0 9
39530: PPUSH
39531: CALL_OW 313
39535: PUSH
39536: LD_INT 6
39538: EQUAL
39539: PUSH
39540: LD_VAR 0 9
39544: PPUSH
39545: CALL_OW 266
39549: PUSH
39550: LD_INT 32
39552: PUSH
39553: LD_INT 31
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: IN
39560: OR
39561: IFFALSE 39375
39563: GO 39372
39565: POP
39566: POP
// end else
39567: GO 39949
// for j = 1 to x do
39569: LD_ADDR_VAR 0 9
39573: PUSH
39574: DOUBLE
39575: LD_INT 1
39577: DEC
39578: ST_TO_ADDR
39579: LD_VAR 0 13
39583: PUSH
39584: FOR_TO
39585: IFFALSE 39947
// begin InitHc ;
39587: CALL_OW 19
// if not f then
39591: LD_VAR 0 12
39595: NOT
39596: IFFALSE 39685
// begin PrepareHuman ( false , i , skill ) ;
39598: LD_INT 0
39600: PPUSH
39601: LD_VAR 0 8
39605: PPUSH
39606: LD_VAR 0 4
39610: PPUSH
39611: CALL_OW 380
// un := CreateHuman ;
39615: LD_ADDR_VAR 0 14
39619: PUSH
39620: CALL_OW 44
39624: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39625: LD_ADDR_VAR 0 7
39629: PUSH
39630: LD_VAR 0 7
39634: PPUSH
39635: LD_INT 1
39637: PPUSH
39638: LD_VAR 0 14
39642: PPUSH
39643: CALL_OW 2
39647: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39648: LD_VAR 0 14
39652: PPUSH
39653: LD_VAR 0 1
39657: PPUSH
39658: CALL_OW 250
39662: PPUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 251
39672: PPUSH
39673: LD_INT 10
39675: PPUSH
39676: LD_INT 0
39678: PPUSH
39679: CALL_OW 50
// continue ;
39683: GO 39584
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39685: LD_VAR 0 12
39689: PUSH
39690: LD_INT 1
39692: ARRAY
39693: PPUSH
39694: CALL_OW 313
39698: PUSH
39699: LD_VAR 0 12
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: PPUSH
39708: CALL_OW 266
39712: PUSH
39713: LD_INT 32
39715: PUSH
39716: LD_INT 31
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: IN
39723: AND
39724: PUSH
39725: LD_VAR 0 12
39729: PUSH
39730: LD_INT 1
39732: ARRAY
39733: PPUSH
39734: CALL_OW 313
39738: PUSH
39739: LD_INT 6
39741: EQUAL
39742: OR
39743: IFFALSE 39763
// f := Delete ( f , 1 ) ;
39745: LD_ADDR_VAR 0 12
39749: PUSH
39750: LD_VAR 0 12
39754: PPUSH
39755: LD_INT 1
39757: PPUSH
39758: CALL_OW 3
39762: ST_TO_ADDR
// if not f then
39763: LD_VAR 0 12
39767: NOT
39768: IFFALSE 39786
// begin x := x + 2 ;
39770: LD_ADDR_VAR 0 13
39774: PUSH
39775: LD_VAR 0 13
39779: PUSH
39780: LD_INT 2
39782: PLUS
39783: ST_TO_ADDR
// continue ;
39784: GO 39584
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39786: LD_VAR 0 12
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: PPUSH
39795: CALL_OW 266
39799: PUSH
39800: LD_INT 5
39802: EQUAL
39803: IFFALSE 39877
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39805: LD_VAR 0 12
39809: PUSH
39810: LD_INT 1
39812: ARRAY
39813: PPUSH
39814: CALL_OW 313
39818: PUSH
39819: LD_INT 3
39821: LESS
39822: IFFALSE 39858
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39824: LD_INT 0
39826: PPUSH
39827: LD_INT 5
39829: PUSH
39830: LD_INT 8
39832: PUSH
39833: LD_INT 9
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: PUSH
39841: LD_VAR 0 17
39845: ARRAY
39846: PPUSH
39847: LD_VAR 0 4
39851: PPUSH
39852: CALL_OW 380
39856: GO 39875
// PrepareHuman ( false , i , skill ) ;
39858: LD_INT 0
39860: PPUSH
39861: LD_VAR 0 8
39865: PPUSH
39866: LD_VAR 0 4
39870: PPUSH
39871: CALL_OW 380
// end else
39875: GO 39894
// PrepareHuman ( false , i , skill ) ;
39877: LD_INT 0
39879: PPUSH
39880: LD_VAR 0 8
39884: PPUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: CALL_OW 380
// un := CreateHuman ;
39894: LD_ADDR_VAR 0 14
39898: PUSH
39899: CALL_OW 44
39903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39904: LD_ADDR_VAR 0 7
39908: PUSH
39909: LD_VAR 0 7
39913: PPUSH
39914: LD_INT 1
39916: PPUSH
39917: LD_VAR 0 14
39921: PPUSH
39922: CALL_OW 2
39926: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39927: LD_VAR 0 14
39931: PPUSH
39932: LD_VAR 0 12
39936: PUSH
39937: LD_INT 1
39939: ARRAY
39940: PPUSH
39941: CALL_OW 52
// end ;
39945: GO 39584
39947: POP
39948: POP
// end ;
39949: GO 38886
39951: POP
39952: POP
// result := result ^ buildings ;
39953: LD_ADDR_VAR 0 7
39957: PUSH
39958: LD_VAR 0 7
39962: PUSH
39963: LD_VAR 0 18
39967: ADD
39968: ST_TO_ADDR
// end else
39969: GO 40112
// begin for i = 1 to personel do
39971: LD_ADDR_VAR 0 8
39975: PUSH
39976: DOUBLE
39977: LD_INT 1
39979: DEC
39980: ST_TO_ADDR
39981: LD_VAR 0 6
39985: PUSH
39986: FOR_TO
39987: IFFALSE 40110
// begin if i > 4 then
39989: LD_VAR 0 8
39993: PUSH
39994: LD_INT 4
39996: GREATER
39997: IFFALSE 40001
// break ;
39999: GO 40110
// x := personel [ i ] ;
40001: LD_ADDR_VAR 0 13
40005: PUSH
40006: LD_VAR 0 6
40010: PUSH
40011: LD_VAR 0 8
40015: ARRAY
40016: ST_TO_ADDR
// if x = - 1 then
40017: LD_VAR 0 13
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: EQUAL
40026: IFFALSE 40030
// continue ;
40028: GO 39986
// PrepareHuman ( false , i , skill ) ;
40030: LD_INT 0
40032: PPUSH
40033: LD_VAR 0 8
40037: PPUSH
40038: LD_VAR 0 4
40042: PPUSH
40043: CALL_OW 380
// un := CreateHuman ;
40047: LD_ADDR_VAR 0 14
40051: PUSH
40052: CALL_OW 44
40056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40057: LD_VAR 0 14
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 250
40071: PPUSH
40072: LD_VAR 0 1
40076: PPUSH
40077: CALL_OW 251
40081: PPUSH
40082: LD_INT 10
40084: PPUSH
40085: LD_INT 0
40087: PPUSH
40088: CALL_OW 50
// result := result ^ un ;
40092: LD_ADDR_VAR 0 7
40096: PUSH
40097: LD_VAR 0 7
40101: PUSH
40102: LD_VAR 0 14
40106: ADD
40107: ST_TO_ADDR
// end ;
40108: GO 39986
40110: POP
40111: POP
// end ; end ;
40112: LD_VAR 0 7
40116: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40117: LD_INT 0
40119: PPUSH
40120: PPUSH
40121: PPUSH
40122: PPUSH
40123: PPUSH
40124: PPUSH
40125: PPUSH
40126: PPUSH
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
// result := false ;
40135: LD_ADDR_VAR 0 3
40139: PUSH
40140: LD_INT 0
40142: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40143: LD_VAR 0 1
40147: NOT
40148: PUSH
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 266
40158: PUSH
40159: LD_INT 32
40161: PUSH
40162: LD_INT 33
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: IN
40169: NOT
40170: OR
40171: IFFALSE 40175
// exit ;
40173: GO 41284
// nat := GetNation ( tower ) ;
40175: LD_ADDR_VAR 0 12
40179: PUSH
40180: LD_VAR 0 1
40184: PPUSH
40185: CALL_OW 248
40189: ST_TO_ADDR
// side := GetSide ( tower ) ;
40190: LD_ADDR_VAR 0 16
40194: PUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 255
40204: ST_TO_ADDR
// x := GetX ( tower ) ;
40205: LD_ADDR_VAR 0 10
40209: PUSH
40210: LD_VAR 0 1
40214: PPUSH
40215: CALL_OW 250
40219: ST_TO_ADDR
// y := GetY ( tower ) ;
40220: LD_ADDR_VAR 0 11
40224: PUSH
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 251
40234: ST_TO_ADDR
// if not x or not y then
40235: LD_VAR 0 10
40239: NOT
40240: PUSH
40241: LD_VAR 0 11
40245: NOT
40246: OR
40247: IFFALSE 40251
// exit ;
40249: GO 41284
// weapon := 0 ;
40251: LD_ADDR_VAR 0 18
40255: PUSH
40256: LD_INT 0
40258: ST_TO_ADDR
// fac_list := [ ] ;
40259: LD_ADDR_VAR 0 17
40263: PUSH
40264: EMPTY
40265: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40266: LD_ADDR_VAR 0 6
40270: PUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 274
40280: PPUSH
40281: LD_VAR 0 2
40285: PPUSH
40286: LD_INT 0
40288: PPUSH
40289: CALL 37855 0 3
40293: PPUSH
40294: LD_INT 30
40296: PUSH
40297: LD_INT 3
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PPUSH
40304: CALL_OW 72
40308: ST_TO_ADDR
// if not factories then
40309: LD_VAR 0 6
40313: NOT
40314: IFFALSE 40318
// exit ;
40316: GO 41284
// for i in factories do
40318: LD_ADDR_VAR 0 8
40322: PUSH
40323: LD_VAR 0 6
40327: PUSH
40328: FOR_IN
40329: IFFALSE 40354
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40331: LD_ADDR_VAR 0 17
40335: PUSH
40336: LD_VAR 0 17
40340: PUSH
40341: LD_VAR 0 8
40345: PPUSH
40346: CALL_OW 478
40350: UNION
40351: ST_TO_ADDR
40352: GO 40328
40354: POP
40355: POP
// if not fac_list then
40356: LD_VAR 0 17
40360: NOT
40361: IFFALSE 40365
// exit ;
40363: GO 41284
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40365: LD_ADDR_VAR 0 5
40369: PUSH
40370: LD_INT 4
40372: PUSH
40373: LD_INT 5
40375: PUSH
40376: LD_INT 9
40378: PUSH
40379: LD_INT 10
40381: PUSH
40382: LD_INT 6
40384: PUSH
40385: LD_INT 7
40387: PUSH
40388: LD_INT 11
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 27
40402: PUSH
40403: LD_INT 28
40405: PUSH
40406: LD_INT 26
40408: PUSH
40409: LD_INT 30
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 43
40420: PUSH
40421: LD_INT 44
40423: PUSH
40424: LD_INT 46
40426: PUSH
40427: LD_INT 45
40429: PUSH
40430: LD_INT 47
40432: PUSH
40433: LD_INT 49
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: PUSH
40449: LD_VAR 0 12
40453: ARRAY
40454: ST_TO_ADDR
// list := list isect fac_list ;
40455: LD_ADDR_VAR 0 5
40459: PUSH
40460: LD_VAR 0 5
40464: PUSH
40465: LD_VAR 0 17
40469: ISECT
40470: ST_TO_ADDR
// if not list then
40471: LD_VAR 0 5
40475: NOT
40476: IFFALSE 40480
// exit ;
40478: GO 41284
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40480: LD_VAR 0 12
40484: PUSH
40485: LD_INT 3
40487: EQUAL
40488: PUSH
40489: LD_INT 49
40491: PUSH
40492: LD_VAR 0 5
40496: IN
40497: AND
40498: PUSH
40499: LD_INT 31
40501: PPUSH
40502: LD_VAR 0 16
40506: PPUSH
40507: CALL_OW 321
40511: PUSH
40512: LD_INT 2
40514: EQUAL
40515: AND
40516: IFFALSE 40576
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40518: LD_INT 22
40520: PUSH
40521: LD_VAR 0 16
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 35
40532: PUSH
40533: LD_INT 49
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 91
40542: PUSH
40543: LD_VAR 0 1
40547: PUSH
40548: LD_INT 10
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: PPUSH
40561: CALL_OW 69
40565: NOT
40566: IFFALSE 40576
// weapon := ru_time_lapser ;
40568: LD_ADDR_VAR 0 18
40572: PUSH
40573: LD_INT 49
40575: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40576: LD_VAR 0 12
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: IN
40591: PUSH
40592: LD_INT 11
40594: PUSH
40595: LD_VAR 0 5
40599: IN
40600: PUSH
40601: LD_INT 30
40603: PUSH
40604: LD_VAR 0 5
40608: IN
40609: OR
40610: AND
40611: PUSH
40612: LD_INT 6
40614: PPUSH
40615: LD_VAR 0 16
40619: PPUSH
40620: CALL_OW 321
40624: PUSH
40625: LD_INT 2
40627: EQUAL
40628: AND
40629: IFFALSE 40794
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40631: LD_INT 22
40633: PUSH
40634: LD_VAR 0 16
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: LD_INT 35
40648: PUSH
40649: LD_INT 11
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 35
40658: PUSH
40659: LD_INT 30
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 91
40673: PUSH
40674: LD_VAR 0 1
40678: PUSH
40679: LD_INT 18
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: PPUSH
40692: CALL_OW 69
40696: NOT
40697: PUSH
40698: LD_INT 22
40700: PUSH
40701: LD_VAR 0 16
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: LD_INT 30
40715: PUSH
40716: LD_INT 32
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 30
40725: PUSH
40726: LD_INT 33
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 91
40740: PUSH
40741: LD_VAR 0 1
40745: PUSH
40746: LD_INT 12
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: PPUSH
40762: CALL_OW 69
40766: PUSH
40767: LD_INT 2
40769: GREATER
40770: AND
40771: IFFALSE 40794
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40773: LD_ADDR_VAR 0 18
40777: PUSH
40778: LD_INT 11
40780: PUSH
40781: LD_INT 30
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_VAR 0 12
40792: ARRAY
40793: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40794: LD_VAR 0 18
40798: NOT
40799: PUSH
40800: LD_INT 40
40802: PPUSH
40803: LD_VAR 0 16
40807: PPUSH
40808: CALL_OW 321
40812: PUSH
40813: LD_INT 2
40815: EQUAL
40816: AND
40817: PUSH
40818: LD_INT 7
40820: PUSH
40821: LD_VAR 0 5
40825: IN
40826: PUSH
40827: LD_INT 28
40829: PUSH
40830: LD_VAR 0 5
40834: IN
40835: OR
40836: PUSH
40837: LD_INT 45
40839: PUSH
40840: LD_VAR 0 5
40844: IN
40845: OR
40846: AND
40847: IFFALSE 41101
// begin hex := GetHexInfo ( x , y ) ;
40849: LD_ADDR_VAR 0 4
40853: PUSH
40854: LD_VAR 0 10
40858: PPUSH
40859: LD_VAR 0 11
40863: PPUSH
40864: CALL_OW 546
40868: ST_TO_ADDR
// if hex [ 1 ] then
40869: LD_VAR 0 4
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: IFFALSE 40881
// exit ;
40879: GO 41284
// height := hex [ 2 ] ;
40881: LD_ADDR_VAR 0 15
40885: PUSH
40886: LD_VAR 0 4
40890: PUSH
40891: LD_INT 2
40893: ARRAY
40894: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40895: LD_ADDR_VAR 0 14
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 5
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: ST_TO_ADDR
// for i in tmp do
40918: LD_ADDR_VAR 0 8
40922: PUSH
40923: LD_VAR 0 14
40927: PUSH
40928: FOR_IN
40929: IFFALSE 41099
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40931: LD_ADDR_VAR 0 9
40935: PUSH
40936: LD_VAR 0 10
40940: PPUSH
40941: LD_VAR 0 8
40945: PPUSH
40946: LD_INT 5
40948: PPUSH
40949: CALL_OW 272
40953: PUSH
40954: LD_VAR 0 11
40958: PPUSH
40959: LD_VAR 0 8
40963: PPUSH
40964: LD_INT 5
40966: PPUSH
40967: CALL_OW 273
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40976: LD_VAR 0 9
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PPUSH
40985: LD_VAR 0 9
40989: PUSH
40990: LD_INT 2
40992: ARRAY
40993: PPUSH
40994: CALL_OW 488
40998: IFFALSE 41097
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41000: LD_ADDR_VAR 0 4
41004: PUSH
41005: LD_VAR 0 9
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PPUSH
41014: LD_VAR 0 9
41018: PUSH
41019: LD_INT 2
41021: ARRAY
41022: PPUSH
41023: CALL_OW 546
41027: ST_TO_ADDR
// if hex [ 1 ] then
41028: LD_VAR 0 4
41032: PUSH
41033: LD_INT 1
41035: ARRAY
41036: IFFALSE 41040
// continue ;
41038: GO 40928
// h := hex [ 2 ] ;
41040: LD_ADDR_VAR 0 13
41044: PUSH
41045: LD_VAR 0 4
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: ST_TO_ADDR
// if h + 7 < height then
41054: LD_VAR 0 13
41058: PUSH
41059: LD_INT 7
41061: PLUS
41062: PUSH
41063: LD_VAR 0 15
41067: LESS
41068: IFFALSE 41097
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41070: LD_ADDR_VAR 0 18
41074: PUSH
41075: LD_INT 7
41077: PUSH
41078: LD_INT 28
41080: PUSH
41081: LD_INT 45
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: LIST
41088: PUSH
41089: LD_VAR 0 12
41093: ARRAY
41094: ST_TO_ADDR
// break ;
41095: GO 41099
// end ; end ; end ;
41097: GO 40928
41099: POP
41100: POP
// end ; if not weapon then
41101: LD_VAR 0 18
41105: NOT
41106: IFFALSE 41166
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41108: LD_ADDR_VAR 0 5
41112: PUSH
41113: LD_VAR 0 5
41117: PUSH
41118: LD_INT 11
41120: PUSH
41121: LD_INT 30
41123: PUSH
41124: LD_INT 49
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: DIFF
41132: ST_TO_ADDR
// if not list then
41133: LD_VAR 0 5
41137: NOT
41138: IFFALSE 41142
// exit ;
41140: GO 41284
// weapon := list [ rand ( 1 , list ) ] ;
41142: LD_ADDR_VAR 0 18
41146: PUSH
41147: LD_VAR 0 5
41151: PUSH
41152: LD_INT 1
41154: PPUSH
41155: LD_VAR 0 5
41159: PPUSH
41160: CALL_OW 12
41164: ARRAY
41165: ST_TO_ADDR
// end ; if weapon then
41166: LD_VAR 0 18
41170: IFFALSE 41284
// begin tmp := CostOfWeapon ( weapon ) ;
41172: LD_ADDR_VAR 0 14
41176: PUSH
41177: LD_VAR 0 18
41181: PPUSH
41182: CALL_OW 451
41186: ST_TO_ADDR
// j := GetBase ( tower ) ;
41187: LD_ADDR_VAR 0 9
41191: PUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 274
41201: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41202: LD_VAR 0 9
41206: PPUSH
41207: LD_INT 1
41209: PPUSH
41210: CALL_OW 275
41214: PUSH
41215: LD_VAR 0 14
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: GREATEREQUAL
41224: PUSH
41225: LD_VAR 0 9
41229: PPUSH
41230: LD_INT 2
41232: PPUSH
41233: CALL_OW 275
41237: PUSH
41238: LD_VAR 0 14
41242: PUSH
41243: LD_INT 2
41245: ARRAY
41246: GREATEREQUAL
41247: AND
41248: PUSH
41249: LD_VAR 0 9
41253: PPUSH
41254: LD_INT 3
41256: PPUSH
41257: CALL_OW 275
41261: PUSH
41262: LD_VAR 0 14
41266: PUSH
41267: LD_INT 3
41269: ARRAY
41270: GREATEREQUAL
41271: AND
41272: IFFALSE 41284
// result := weapon ;
41274: LD_ADDR_VAR 0 3
41278: PUSH
41279: LD_VAR 0 18
41283: ST_TO_ADDR
// end ; end ;
41284: LD_VAR 0 3
41288: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41289: LD_INT 0
41291: PPUSH
41292: PPUSH
// result := true ;
41293: LD_ADDR_VAR 0 3
41297: PUSH
41298: LD_INT 1
41300: ST_TO_ADDR
// if array1 = array2 then
41301: LD_VAR 0 1
41305: PUSH
41306: LD_VAR 0 2
41310: EQUAL
41311: IFFALSE 41371
// begin for i = 1 to array1 do
41313: LD_ADDR_VAR 0 4
41317: PUSH
41318: DOUBLE
41319: LD_INT 1
41321: DEC
41322: ST_TO_ADDR
41323: LD_VAR 0 1
41327: PUSH
41328: FOR_TO
41329: IFFALSE 41367
// if array1 [ i ] <> array2 [ i ] then
41331: LD_VAR 0 1
41335: PUSH
41336: LD_VAR 0 4
41340: ARRAY
41341: PUSH
41342: LD_VAR 0 2
41346: PUSH
41347: LD_VAR 0 4
41351: ARRAY
41352: NONEQUAL
41353: IFFALSE 41365
// begin result := false ;
41355: LD_ADDR_VAR 0 3
41359: PUSH
41360: LD_INT 0
41362: ST_TO_ADDR
// break ;
41363: GO 41367
// end ;
41365: GO 41328
41367: POP
41368: POP
// end else
41369: GO 41379
// result := false ;
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: LD_INT 0
41378: ST_TO_ADDR
// end ;
41379: LD_VAR 0 3
41383: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
// if not array1 or not array2 then
41388: LD_VAR 0 1
41392: NOT
41393: PUSH
41394: LD_VAR 0 2
41398: NOT
41399: OR
41400: IFFALSE 41404
// exit ;
41402: GO 41468
// result := true ;
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 1
41411: ST_TO_ADDR
// for i = 1 to array1 do
41412: LD_ADDR_VAR 0 4
41416: PUSH
41417: DOUBLE
41418: LD_INT 1
41420: DEC
41421: ST_TO_ADDR
41422: LD_VAR 0 1
41426: PUSH
41427: FOR_TO
41428: IFFALSE 41466
// if array1 [ i ] <> array2 [ i ] then
41430: LD_VAR 0 1
41434: PUSH
41435: LD_VAR 0 4
41439: ARRAY
41440: PUSH
41441: LD_VAR 0 2
41445: PUSH
41446: LD_VAR 0 4
41450: ARRAY
41451: NONEQUAL
41452: IFFALSE 41464
// begin result := false ;
41454: LD_ADDR_VAR 0 3
41458: PUSH
41459: LD_INT 0
41461: ST_TO_ADDR
// break ;
41462: GO 41466
// end ;
41464: GO 41427
41466: POP
41467: POP
// end ;
41468: LD_VAR 0 3
41472: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
41477: PPUSH
// pom := GetBase ( fac ) ;
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: CALL_OW 274
41492: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41493: LD_ADDR_VAR 0 4
41497: PUSH
41498: LD_VAR 0 2
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: PPUSH
41507: LD_VAR 0 2
41511: PUSH
41512: LD_INT 2
41514: ARRAY
41515: PPUSH
41516: LD_VAR 0 2
41520: PUSH
41521: LD_INT 3
41523: ARRAY
41524: PPUSH
41525: LD_VAR 0 2
41529: PUSH
41530: LD_INT 4
41532: ARRAY
41533: PPUSH
41534: CALL_OW 449
41538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_VAR 0 5
41548: PPUSH
41549: LD_INT 1
41551: PPUSH
41552: CALL_OW 275
41556: PUSH
41557: LD_VAR 0 4
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: GREATEREQUAL
41566: PUSH
41567: LD_VAR 0 5
41571: PPUSH
41572: LD_INT 2
41574: PPUSH
41575: CALL_OW 275
41579: PUSH
41580: LD_VAR 0 4
41584: PUSH
41585: LD_INT 2
41587: ARRAY
41588: GREATEREQUAL
41589: AND
41590: PUSH
41591: LD_VAR 0 5
41595: PPUSH
41596: LD_INT 3
41598: PPUSH
41599: CALL_OW 275
41603: PUSH
41604: LD_VAR 0 4
41608: PUSH
41609: LD_INT 3
41611: ARRAY
41612: GREATEREQUAL
41613: AND
41614: ST_TO_ADDR
// end ;
41615: LD_VAR 0 3
41619: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41620: LD_INT 0
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
// pom := GetBase ( building ) ;
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_VAR 0 1
41635: PPUSH
41636: CALL_OW 274
41640: ST_TO_ADDR
// if not pom then
41641: LD_VAR 0 3
41645: NOT
41646: IFFALSE 41650
// exit ;
41648: GO 41820
// btype := GetBType ( building ) ;
41650: LD_ADDR_VAR 0 5
41654: PUSH
41655: LD_VAR 0 1
41659: PPUSH
41660: CALL_OW 266
41664: ST_TO_ADDR
// if btype = b_armoury then
41665: LD_VAR 0 5
41669: PUSH
41670: LD_INT 4
41672: EQUAL
41673: IFFALSE 41683
// btype := b_barracks ;
41675: LD_ADDR_VAR 0 5
41679: PUSH
41680: LD_INT 5
41682: ST_TO_ADDR
// if btype = b_depot then
41683: LD_VAR 0 5
41687: PUSH
41688: LD_INT 0
41690: EQUAL
41691: IFFALSE 41701
// btype := b_warehouse ;
41693: LD_ADDR_VAR 0 5
41697: PUSH
41698: LD_INT 1
41700: ST_TO_ADDR
// if btype = b_workshop then
41701: LD_VAR 0 5
41705: PUSH
41706: LD_INT 2
41708: EQUAL
41709: IFFALSE 41719
// btype := b_factory ;
41711: LD_ADDR_VAR 0 5
41715: PUSH
41716: LD_INT 3
41718: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41719: LD_ADDR_VAR 0 4
41723: PUSH
41724: LD_VAR 0 5
41728: PPUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: CALL_OW 248
41738: PPUSH
41739: CALL_OW 450
41743: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41744: LD_ADDR_VAR 0 2
41748: PUSH
41749: LD_VAR 0 3
41753: PPUSH
41754: LD_INT 1
41756: PPUSH
41757: CALL_OW 275
41761: PUSH
41762: LD_VAR 0 4
41766: PUSH
41767: LD_INT 1
41769: ARRAY
41770: GREATEREQUAL
41771: PUSH
41772: LD_VAR 0 3
41776: PPUSH
41777: LD_INT 2
41779: PPUSH
41780: CALL_OW 275
41784: PUSH
41785: LD_VAR 0 4
41789: PUSH
41790: LD_INT 2
41792: ARRAY
41793: GREATEREQUAL
41794: AND
41795: PUSH
41796: LD_VAR 0 3
41800: PPUSH
41801: LD_INT 3
41803: PPUSH
41804: CALL_OW 275
41808: PUSH
41809: LD_VAR 0 4
41813: PUSH
41814: LD_INT 3
41816: ARRAY
41817: GREATEREQUAL
41818: AND
41819: ST_TO_ADDR
// end ;
41820: LD_VAR 0 2
41824: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41825: LD_INT 0
41827: PPUSH
41828: PPUSH
41829: PPUSH
// pom := GetBase ( building ) ;
41830: LD_ADDR_VAR 0 4
41834: PUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 274
41844: ST_TO_ADDR
// if not pom then
41845: LD_VAR 0 4
41849: NOT
41850: IFFALSE 41854
// exit ;
41852: GO 41955
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41854: LD_ADDR_VAR 0 5
41858: PUSH
41859: LD_VAR 0 2
41863: PPUSH
41864: LD_VAR 0 1
41868: PPUSH
41869: CALL_OW 248
41873: PPUSH
41874: CALL_OW 450
41878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_VAR 0 4
41888: PPUSH
41889: LD_INT 1
41891: PPUSH
41892: CALL_OW 275
41896: PUSH
41897: LD_VAR 0 5
41901: PUSH
41902: LD_INT 1
41904: ARRAY
41905: GREATEREQUAL
41906: PUSH
41907: LD_VAR 0 4
41911: PPUSH
41912: LD_INT 2
41914: PPUSH
41915: CALL_OW 275
41919: PUSH
41920: LD_VAR 0 5
41924: PUSH
41925: LD_INT 2
41927: ARRAY
41928: GREATEREQUAL
41929: AND
41930: PUSH
41931: LD_VAR 0 4
41935: PPUSH
41936: LD_INT 3
41938: PPUSH
41939: CALL_OW 275
41943: PUSH
41944: LD_VAR 0 5
41948: PUSH
41949: LD_INT 3
41951: ARRAY
41952: GREATEREQUAL
41953: AND
41954: ST_TO_ADDR
// end ;
41955: LD_VAR 0 3
41959: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41960: LD_INT 0
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
// result := false ;
41973: LD_ADDR_VAR 0 8
41977: PUSH
41978: LD_INT 0
41980: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41981: LD_VAR 0 5
41985: NOT
41986: PUSH
41987: LD_VAR 0 1
41991: NOT
41992: OR
41993: PUSH
41994: LD_VAR 0 2
41998: NOT
41999: OR
42000: PUSH
42001: LD_VAR 0 3
42005: NOT
42006: OR
42007: IFFALSE 42011
// exit ;
42009: GO 42825
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42011: LD_ADDR_VAR 0 14
42015: PUSH
42016: LD_VAR 0 1
42020: PPUSH
42021: LD_VAR 0 2
42025: PPUSH
42026: LD_VAR 0 3
42030: PPUSH
42031: LD_VAR 0 4
42035: PPUSH
42036: LD_VAR 0 5
42040: PUSH
42041: LD_INT 1
42043: ARRAY
42044: PPUSH
42045: CALL_OW 248
42049: PPUSH
42050: LD_INT 0
42052: PPUSH
42053: CALL 44062 0 6
42057: ST_TO_ADDR
// if not hexes then
42058: LD_VAR 0 14
42062: NOT
42063: IFFALSE 42067
// exit ;
42065: GO 42825
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42067: LD_ADDR_VAR 0 17
42071: PUSH
42072: LD_VAR 0 5
42076: PPUSH
42077: LD_INT 22
42079: PUSH
42080: LD_VAR 0 13
42084: PPUSH
42085: CALL_OW 255
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 30
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 30
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PPUSH
42126: CALL_OW 72
42130: ST_TO_ADDR
// for i = 1 to hexes do
42131: LD_ADDR_VAR 0 9
42135: PUSH
42136: DOUBLE
42137: LD_INT 1
42139: DEC
42140: ST_TO_ADDR
42141: LD_VAR 0 14
42145: PUSH
42146: FOR_TO
42147: IFFALSE 42823
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42149: LD_ADDR_VAR 0 13
42153: PUSH
42154: LD_VAR 0 14
42158: PUSH
42159: LD_VAR 0 9
42163: ARRAY
42164: PUSH
42165: LD_INT 1
42167: ARRAY
42168: PPUSH
42169: LD_VAR 0 14
42173: PUSH
42174: LD_VAR 0 9
42178: ARRAY
42179: PUSH
42180: LD_INT 2
42182: ARRAY
42183: PPUSH
42184: CALL_OW 428
42188: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42189: LD_VAR 0 14
42193: PUSH
42194: LD_VAR 0 9
42198: ARRAY
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_VAR 0 14
42208: PUSH
42209: LD_VAR 0 9
42213: ARRAY
42214: PUSH
42215: LD_INT 2
42217: ARRAY
42218: PPUSH
42219: CALL_OW 351
42223: PUSH
42224: LD_VAR 0 14
42228: PUSH
42229: LD_VAR 0 9
42233: ARRAY
42234: PUSH
42235: LD_INT 1
42237: ARRAY
42238: PPUSH
42239: LD_VAR 0 14
42243: PUSH
42244: LD_VAR 0 9
42248: ARRAY
42249: PUSH
42250: LD_INT 2
42252: ARRAY
42253: PPUSH
42254: CALL_OW 488
42258: NOT
42259: OR
42260: PUSH
42261: LD_VAR 0 13
42265: PPUSH
42266: CALL_OW 247
42270: PUSH
42271: LD_INT 3
42273: EQUAL
42274: OR
42275: IFFALSE 42281
// exit ;
42277: POP
42278: POP
42279: GO 42825
// if not tmp then
42281: LD_VAR 0 13
42285: NOT
42286: IFFALSE 42290
// continue ;
42288: GO 42146
// result := true ;
42290: LD_ADDR_VAR 0 8
42294: PUSH
42295: LD_INT 1
42297: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42298: LD_VAR 0 6
42302: PUSH
42303: LD_VAR 0 13
42307: PPUSH
42308: CALL_OW 247
42312: PUSH
42313: LD_INT 2
42315: EQUAL
42316: AND
42317: PUSH
42318: LD_VAR 0 13
42322: PPUSH
42323: CALL_OW 263
42327: PUSH
42328: LD_INT 1
42330: EQUAL
42331: AND
42332: IFFALSE 42496
// begin if IsDrivenBy ( tmp ) then
42334: LD_VAR 0 13
42338: PPUSH
42339: CALL_OW 311
42343: IFFALSE 42347
// continue ;
42345: GO 42146
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42347: LD_VAR 0 6
42351: PPUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 60
42357: PUSH
42358: EMPTY
42359: LIST
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 3
42367: PUSH
42368: LD_INT 55
42370: PUSH
42371: EMPTY
42372: LIST
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PPUSH
42382: CALL_OW 72
42386: IFFALSE 42494
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42388: LD_ADDR_VAR 0 18
42392: PUSH
42393: LD_VAR 0 6
42397: PPUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 60
42403: PUSH
42404: EMPTY
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: LD_INT 55
42416: PUSH
42417: EMPTY
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PPUSH
42428: CALL_OW 72
42432: PUSH
42433: LD_INT 1
42435: ARRAY
42436: ST_TO_ADDR
// if IsInUnit ( driver ) then
42437: LD_VAR 0 18
42441: PPUSH
42442: CALL_OW 310
42446: IFFALSE 42457
// ComExit ( driver ) ;
42448: LD_VAR 0 18
42452: PPUSH
42453: CALL 67767 0 1
// AddComEnterUnit ( driver , tmp ) ;
42457: LD_VAR 0 18
42461: PPUSH
42462: LD_VAR 0 13
42466: PPUSH
42467: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42471: LD_VAR 0 18
42475: PPUSH
42476: LD_VAR 0 7
42480: PPUSH
42481: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42485: LD_VAR 0 18
42489: PPUSH
42490: CALL_OW 181
// end ; continue ;
42494: GO 42146
// end ; if not cleaners or not tmp in cleaners then
42496: LD_VAR 0 6
42500: NOT
42501: PUSH
42502: LD_VAR 0 13
42506: PUSH
42507: LD_VAR 0 6
42511: IN
42512: NOT
42513: OR
42514: IFFALSE 42821
// begin if dep then
42516: LD_VAR 0 17
42520: IFFALSE 42656
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42522: LD_ADDR_VAR 0 16
42526: PUSH
42527: LD_VAR 0 17
42531: PUSH
42532: LD_INT 1
42534: ARRAY
42535: PPUSH
42536: CALL_OW 250
42540: PPUSH
42541: LD_VAR 0 17
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: PPUSH
42550: CALL_OW 254
42554: PPUSH
42555: LD_INT 5
42557: PPUSH
42558: CALL_OW 272
42562: PUSH
42563: LD_VAR 0 17
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PPUSH
42572: CALL_OW 251
42576: PPUSH
42577: LD_VAR 0 17
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: PPUSH
42586: CALL_OW 254
42590: PPUSH
42591: LD_INT 5
42593: PPUSH
42594: CALL_OW 273
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42603: LD_VAR 0 16
42607: PUSH
42608: LD_INT 1
42610: ARRAY
42611: PPUSH
42612: LD_VAR 0 16
42616: PUSH
42617: LD_INT 2
42619: ARRAY
42620: PPUSH
42621: CALL_OW 488
42625: IFFALSE 42656
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42627: LD_VAR 0 13
42631: PPUSH
42632: LD_VAR 0 16
42636: PUSH
42637: LD_INT 1
42639: ARRAY
42640: PPUSH
42641: LD_VAR 0 16
42645: PUSH
42646: LD_INT 2
42648: ARRAY
42649: PPUSH
42650: CALL_OW 111
// continue ;
42654: GO 42146
// end ; end ; r := GetDir ( tmp ) ;
42656: LD_ADDR_VAR 0 15
42660: PUSH
42661: LD_VAR 0 13
42665: PPUSH
42666: CALL_OW 254
42670: ST_TO_ADDR
// if r = 5 then
42671: LD_VAR 0 15
42675: PUSH
42676: LD_INT 5
42678: EQUAL
42679: IFFALSE 42689
// r := 0 ;
42681: LD_ADDR_VAR 0 15
42685: PUSH
42686: LD_INT 0
42688: ST_TO_ADDR
// for j = r to 5 do
42689: LD_ADDR_VAR 0 10
42693: PUSH
42694: DOUBLE
42695: LD_VAR 0 15
42699: DEC
42700: ST_TO_ADDR
42701: LD_INT 5
42703: PUSH
42704: FOR_TO
42705: IFFALSE 42819
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42707: LD_ADDR_VAR 0 11
42711: PUSH
42712: LD_VAR 0 13
42716: PPUSH
42717: CALL_OW 250
42721: PPUSH
42722: LD_VAR 0 10
42726: PPUSH
42727: LD_INT 2
42729: PPUSH
42730: CALL_OW 272
42734: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42735: LD_ADDR_VAR 0 12
42739: PUSH
42740: LD_VAR 0 13
42744: PPUSH
42745: CALL_OW 251
42749: PPUSH
42750: LD_VAR 0 10
42754: PPUSH
42755: LD_INT 2
42757: PPUSH
42758: CALL_OW 273
42762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42763: LD_VAR 0 11
42767: PPUSH
42768: LD_VAR 0 12
42772: PPUSH
42773: CALL_OW 488
42777: PUSH
42778: LD_VAR 0 11
42782: PPUSH
42783: LD_VAR 0 12
42787: PPUSH
42788: CALL_OW 428
42792: NOT
42793: AND
42794: IFFALSE 42817
// begin ComMoveXY ( tmp , _x , _y ) ;
42796: LD_VAR 0 13
42800: PPUSH
42801: LD_VAR 0 11
42805: PPUSH
42806: LD_VAR 0 12
42810: PPUSH
42811: CALL_OW 111
// break ;
42815: GO 42819
// end ; end ;
42817: GO 42704
42819: POP
42820: POP
// end ; end ;
42821: GO 42146
42823: POP
42824: POP
// end ;
42825: LD_VAR 0 8
42829: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42830: LD_INT 0
42832: PPUSH
// result := true ;
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_INT 1
42840: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42841: LD_VAR 0 2
42845: PUSH
42846: LD_INT 24
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42860
42852: LD_INT 33
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42885
42860: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_INT 32
42868: PPUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: CALL_OW 321
42878: PUSH
42879: LD_INT 2
42881: EQUAL
42882: ST_TO_ADDR
42883: GO 43205
42885: LD_INT 20
42887: DOUBLE
42888: EQUAL
42889: IFTRUE 42893
42891: GO 42918
42893: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42894: LD_ADDR_VAR 0 3
42898: PUSH
42899: LD_INT 6
42901: PPUSH
42902: LD_VAR 0 1
42906: PPUSH
42907: CALL_OW 321
42911: PUSH
42912: LD_INT 2
42914: EQUAL
42915: ST_TO_ADDR
42916: GO 43205
42918: LD_INT 22
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42932
42924: LD_INT 36
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 42957
42932: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42933: LD_ADDR_VAR 0 3
42937: PUSH
42938: LD_INT 15
42940: PPUSH
42941: LD_VAR 0 1
42945: PPUSH
42946: CALL_OW 321
42950: PUSH
42951: LD_INT 2
42953: EQUAL
42954: ST_TO_ADDR
42955: GO 43205
42957: LD_INT 30
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 42990
42965: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_INT 20
42973: PPUSH
42974: LD_VAR 0 1
42978: PPUSH
42979: CALL_OW 321
42983: PUSH
42984: LD_INT 2
42986: EQUAL
42987: ST_TO_ADDR
42988: GO 43205
42990: LD_INT 28
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 43004
42996: LD_INT 21
42998: DOUBLE
42999: EQUAL
43000: IFTRUE 43004
43002: GO 43029
43004: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43005: LD_ADDR_VAR 0 3
43009: PUSH
43010: LD_INT 21
43012: PPUSH
43013: LD_VAR 0 1
43017: PPUSH
43018: CALL_OW 321
43022: PUSH
43023: LD_INT 2
43025: EQUAL
43026: ST_TO_ADDR
43027: GO 43205
43029: LD_INT 16
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43037
43035: GO 43064
43037: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_EXP 110
43047: PPUSH
43048: LD_VAR 0 1
43052: PPUSH
43053: CALL_OW 321
43057: PUSH
43058: LD_INT 2
43060: EQUAL
43061: ST_TO_ADDR
43062: GO 43205
43064: LD_INT 19
43066: DOUBLE
43067: EQUAL
43068: IFTRUE 43078
43070: LD_INT 23
43072: DOUBLE
43073: EQUAL
43074: IFTRUE 43078
43076: GO 43105
43078: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43079: LD_ADDR_VAR 0 3
43083: PUSH
43084: LD_EXP 109
43088: PPUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: CALL_OW 321
43098: PUSH
43099: LD_INT 2
43101: EQUAL
43102: ST_TO_ADDR
43103: GO 43205
43105: LD_INT 17
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43138
43113: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_INT 39
43121: PPUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 321
43131: PUSH
43132: LD_INT 2
43134: EQUAL
43135: ST_TO_ADDR
43136: GO 43205
43138: LD_INT 18
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43146
43144: GO 43171
43146: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: LD_INT 40
43154: PPUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL_OW 321
43164: PUSH
43165: LD_INT 2
43167: EQUAL
43168: ST_TO_ADDR
43169: GO 43205
43171: LD_INT 27
43173: DOUBLE
43174: EQUAL
43175: IFTRUE 43179
43177: GO 43204
43179: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43180: LD_ADDR_VAR 0 3
43184: PUSH
43185: LD_INT 35
43187: PPUSH
43188: LD_VAR 0 1
43192: PPUSH
43193: CALL_OW 321
43197: PUSH
43198: LD_INT 2
43200: EQUAL
43201: ST_TO_ADDR
43202: GO 43205
43204: POP
// end ;
43205: LD_VAR 0 3
43209: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43210: LD_INT 0
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
// result := false ;
43223: LD_ADDR_VAR 0 6
43227: PUSH
43228: LD_INT 0
43230: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43231: LD_VAR 0 1
43235: NOT
43236: PUSH
43237: LD_VAR 0 1
43241: PPUSH
43242: CALL_OW 266
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: IN
43257: NOT
43258: OR
43259: PUSH
43260: LD_VAR 0 2
43264: NOT
43265: OR
43266: PUSH
43267: LD_VAR 0 5
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: LD_INT 4
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: IN
43298: NOT
43299: OR
43300: PUSH
43301: LD_VAR 0 3
43305: PPUSH
43306: LD_VAR 0 4
43310: PPUSH
43311: CALL_OW 488
43315: NOT
43316: OR
43317: IFFALSE 43321
// exit ;
43319: GO 44057
// side := GetSide ( depot ) ;
43321: LD_ADDR_VAR 0 9
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 255
43335: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43336: LD_VAR 0 9
43340: PPUSH
43341: LD_VAR 0 2
43345: PPUSH
43346: CALL 42830 0 2
43350: NOT
43351: IFFALSE 43355
// exit ;
43353: GO 44057
// pom := GetBase ( depot ) ;
43355: LD_ADDR_VAR 0 10
43359: PUSH
43360: LD_VAR 0 1
43364: PPUSH
43365: CALL_OW 274
43369: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43370: LD_ADDR_VAR 0 11
43374: PUSH
43375: LD_VAR 0 2
43379: PPUSH
43380: LD_VAR 0 1
43384: PPUSH
43385: CALL_OW 248
43389: PPUSH
43390: CALL_OW 450
43394: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43395: LD_VAR 0 10
43399: PPUSH
43400: LD_INT 1
43402: PPUSH
43403: CALL_OW 275
43407: PUSH
43408: LD_VAR 0 11
43412: PUSH
43413: LD_INT 1
43415: ARRAY
43416: GREATEREQUAL
43417: PUSH
43418: LD_VAR 0 10
43422: PPUSH
43423: LD_INT 2
43425: PPUSH
43426: CALL_OW 275
43430: PUSH
43431: LD_VAR 0 11
43435: PUSH
43436: LD_INT 2
43438: ARRAY
43439: GREATEREQUAL
43440: AND
43441: PUSH
43442: LD_VAR 0 10
43446: PPUSH
43447: LD_INT 3
43449: PPUSH
43450: CALL_OW 275
43454: PUSH
43455: LD_VAR 0 11
43459: PUSH
43460: LD_INT 3
43462: ARRAY
43463: GREATEREQUAL
43464: AND
43465: NOT
43466: IFFALSE 43470
// exit ;
43468: GO 44057
// if GetBType ( depot ) = b_depot then
43470: LD_VAR 0 1
43474: PPUSH
43475: CALL_OW 266
43479: PUSH
43480: LD_INT 0
43482: EQUAL
43483: IFFALSE 43495
// dist := 28 else
43485: LD_ADDR_VAR 0 14
43489: PUSH
43490: LD_INT 28
43492: ST_TO_ADDR
43493: GO 43503
// dist := 36 ;
43495: LD_ADDR_VAR 0 14
43499: PUSH
43500: LD_INT 36
43502: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43503: LD_VAR 0 1
43507: PPUSH
43508: LD_VAR 0 3
43512: PPUSH
43513: LD_VAR 0 4
43517: PPUSH
43518: CALL_OW 297
43522: PUSH
43523: LD_VAR 0 14
43527: GREATER
43528: IFFALSE 43532
// exit ;
43530: GO 44057
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43532: LD_ADDR_VAR 0 12
43536: PUSH
43537: LD_VAR 0 2
43541: PPUSH
43542: LD_VAR 0 3
43546: PPUSH
43547: LD_VAR 0 4
43551: PPUSH
43552: LD_VAR 0 5
43556: PPUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL_OW 248
43566: PPUSH
43567: LD_INT 0
43569: PPUSH
43570: CALL 44062 0 6
43574: ST_TO_ADDR
// if not hexes then
43575: LD_VAR 0 12
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 44057
// hex := GetHexInfo ( x , y ) ;
43584: LD_ADDR_VAR 0 15
43588: PUSH
43589: LD_VAR 0 3
43593: PPUSH
43594: LD_VAR 0 4
43598: PPUSH
43599: CALL_OW 546
43603: ST_TO_ADDR
// if hex [ 1 ] then
43604: LD_VAR 0 15
43608: PUSH
43609: LD_INT 1
43611: ARRAY
43612: IFFALSE 43616
// exit ;
43614: GO 44057
// height := hex [ 2 ] ;
43616: LD_ADDR_VAR 0 13
43620: PUSH
43621: LD_VAR 0 15
43625: PUSH
43626: LD_INT 2
43628: ARRAY
43629: ST_TO_ADDR
// for i = 1 to hexes do
43630: LD_ADDR_VAR 0 7
43634: PUSH
43635: DOUBLE
43636: LD_INT 1
43638: DEC
43639: ST_TO_ADDR
43640: LD_VAR 0 12
43644: PUSH
43645: FOR_TO
43646: IFFALSE 43976
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43648: LD_VAR 0 12
43652: PUSH
43653: LD_VAR 0 7
43657: ARRAY
43658: PUSH
43659: LD_INT 1
43661: ARRAY
43662: PPUSH
43663: LD_VAR 0 12
43667: PUSH
43668: LD_VAR 0 7
43672: ARRAY
43673: PUSH
43674: LD_INT 2
43676: ARRAY
43677: PPUSH
43678: CALL_OW 488
43682: NOT
43683: PUSH
43684: LD_VAR 0 12
43688: PUSH
43689: LD_VAR 0 7
43693: ARRAY
43694: PUSH
43695: LD_INT 1
43697: ARRAY
43698: PPUSH
43699: LD_VAR 0 12
43703: PUSH
43704: LD_VAR 0 7
43708: ARRAY
43709: PUSH
43710: LD_INT 2
43712: ARRAY
43713: PPUSH
43714: CALL_OW 428
43718: PUSH
43719: LD_INT 0
43721: GREATER
43722: OR
43723: PUSH
43724: LD_VAR 0 12
43728: PUSH
43729: LD_VAR 0 7
43733: ARRAY
43734: PUSH
43735: LD_INT 1
43737: ARRAY
43738: PPUSH
43739: LD_VAR 0 12
43743: PUSH
43744: LD_VAR 0 7
43748: ARRAY
43749: PUSH
43750: LD_INT 2
43752: ARRAY
43753: PPUSH
43754: CALL_OW 351
43758: OR
43759: IFFALSE 43765
// exit ;
43761: POP
43762: POP
43763: GO 44057
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43765: LD_ADDR_VAR 0 8
43769: PUSH
43770: LD_VAR 0 12
43774: PUSH
43775: LD_VAR 0 7
43779: ARRAY
43780: PUSH
43781: LD_INT 1
43783: ARRAY
43784: PPUSH
43785: LD_VAR 0 12
43789: PUSH
43790: LD_VAR 0 7
43794: ARRAY
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: PPUSH
43800: CALL_OW 546
43804: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43805: LD_VAR 0 8
43809: PUSH
43810: LD_INT 1
43812: ARRAY
43813: PUSH
43814: LD_VAR 0 8
43818: PUSH
43819: LD_INT 2
43821: ARRAY
43822: PUSH
43823: LD_VAR 0 13
43827: PUSH
43828: LD_INT 2
43830: PLUS
43831: GREATER
43832: OR
43833: PUSH
43834: LD_VAR 0 8
43838: PUSH
43839: LD_INT 2
43841: ARRAY
43842: PUSH
43843: LD_VAR 0 13
43847: PUSH
43848: LD_INT 2
43850: MINUS
43851: LESS
43852: OR
43853: PUSH
43854: LD_VAR 0 8
43858: PUSH
43859: LD_INT 3
43861: ARRAY
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 8
43868: PUSH
43869: LD_INT 9
43871: PUSH
43872: LD_INT 10
43874: PUSH
43875: LD_INT 11
43877: PUSH
43878: LD_INT 12
43880: PUSH
43881: LD_INT 13
43883: PUSH
43884: LD_INT 16
43886: PUSH
43887: LD_INT 17
43889: PUSH
43890: LD_INT 18
43892: PUSH
43893: LD_INT 19
43895: PUSH
43896: LD_INT 20
43898: PUSH
43899: LD_INT 21
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: IN
43917: NOT
43918: OR
43919: PUSH
43920: LD_VAR 0 8
43924: PUSH
43925: LD_INT 5
43927: ARRAY
43928: NOT
43929: OR
43930: PUSH
43931: LD_VAR 0 8
43935: PUSH
43936: LD_INT 6
43938: ARRAY
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 7
43948: PUSH
43949: LD_INT 9
43951: PUSH
43952: LD_INT 10
43954: PUSH
43955: LD_INT 11
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: IN
43966: NOT
43967: OR
43968: IFFALSE 43974
// exit ;
43970: POP
43971: POP
43972: GO 44057
// end ;
43974: GO 43645
43976: POP
43977: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43978: LD_VAR 0 9
43982: PPUSH
43983: LD_VAR 0 3
43987: PPUSH
43988: LD_VAR 0 4
43992: PPUSH
43993: LD_INT 20
43995: PPUSH
43996: CALL 36003 0 4
44000: PUSH
44001: LD_INT 4
44003: ARRAY
44004: IFFALSE 44008
// exit ;
44006: GO 44057
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44008: LD_VAR 0 2
44012: PUSH
44013: LD_INT 29
44015: PUSH
44016: LD_INT 30
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: IN
44023: PUSH
44024: LD_VAR 0 3
44028: PPUSH
44029: LD_VAR 0 4
44033: PPUSH
44034: LD_VAR 0 9
44038: PPUSH
44039: CALL_OW 440
44043: NOT
44044: AND
44045: IFFALSE 44049
// exit ;
44047: GO 44057
// result := true ;
44049: LD_ADDR_VAR 0 6
44053: PUSH
44054: LD_INT 1
44056: ST_TO_ADDR
// end ;
44057: LD_VAR 0 6
44061: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44062: LD_INT 0
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
44121: PPUSH
// result = [ ] ;
44122: LD_ADDR_VAR 0 7
44126: PUSH
44127: EMPTY
44128: ST_TO_ADDR
// temp_list = [ ] ;
44129: LD_ADDR_VAR 0 9
44133: PUSH
44134: EMPTY
44135: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44136: LD_VAR 0 4
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: LD_INT 4
44155: PUSH
44156: LD_INT 5
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: IN
44167: NOT
44168: PUSH
44169: LD_VAR 0 1
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: IN
44184: PUSH
44185: LD_VAR 0 5
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: IN
44204: NOT
44205: AND
44206: OR
44207: IFFALSE 44211
// exit ;
44209: GO 62602
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44211: LD_VAR 0 1
44215: PUSH
44216: LD_INT 6
44218: PUSH
44219: LD_INT 7
44221: PUSH
44222: LD_INT 8
44224: PUSH
44225: LD_INT 13
44227: PUSH
44228: LD_INT 12
44230: PUSH
44231: LD_INT 15
44233: PUSH
44234: LD_INT 11
44236: PUSH
44237: LD_INT 14
44239: PUSH
44240: LD_INT 10
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: IN
44254: IFFALSE 44264
// btype = b_lab ;
44256: LD_ADDR_VAR 0 1
44260: PUSH
44261: LD_INT 6
44263: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44264: LD_VAR 0 6
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: IN
44283: NOT
44284: PUSH
44285: LD_VAR 0 1
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: LD_INT 6
44304: PUSH
44305: LD_INT 36
44307: PUSH
44308: LD_INT 4
44310: PUSH
44311: LD_INT 5
44313: PUSH
44314: LD_INT 31
44316: PUSH
44317: LD_INT 32
44319: PUSH
44320: LD_INT 33
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: IN
44336: NOT
44337: PUSH
44338: LD_VAR 0 6
44342: PUSH
44343: LD_INT 1
44345: EQUAL
44346: AND
44347: OR
44348: PUSH
44349: LD_VAR 0 1
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: IN
44364: NOT
44365: PUSH
44366: LD_VAR 0 6
44370: PUSH
44371: LD_INT 2
44373: EQUAL
44374: AND
44375: OR
44376: IFFALSE 44386
// mode = 0 ;
44378: LD_ADDR_VAR 0 6
44382: PUSH
44383: LD_INT 0
44385: ST_TO_ADDR
// case mode of 0 :
44386: LD_VAR 0 6
44390: PUSH
44391: LD_INT 0
44393: DOUBLE
44394: EQUAL
44395: IFTRUE 44399
44397: GO 55852
44399: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44400: LD_ADDR_VAR 0 11
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44593: LD_ADDR_VAR 0 12
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44789: LD_ADDR_VAR 0 13
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 3
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 3
44960: NEG
44961: PUSH
44962: LD_INT 3
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44988: LD_ADDR_VAR 0 14
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 3
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45184: LD_ADDR_VAR 0 15
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45377: LD_ADDR_VAR 0 16
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45570: LD_ADDR_VAR 0 17
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45800: LD_ADDR_VAR 0 18
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46030: LD_ADDR_VAR 0 19
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46260: LD_ADDR_VAR 0 20
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46490: LD_ADDR_VAR 0 21
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 22
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46950: LD_ADDR_VAR 0 23
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 3
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47230: LD_ADDR_VAR 0 24
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47506: LD_ADDR_VAR 0 25
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47780: LD_ADDR_VAR 0 26
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48056: LD_ADDR_VAR 0 27
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48336: LD_ADDR_VAR 0 28
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48618: LD_ADDR_VAR 0 29
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 3
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 3
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48897: LD_ADDR_VAR 0 30
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: LD_INT 3
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 3
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49175: LD_ADDR_VAR 0 31
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49453: LD_ADDR_VAR 0 32
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 3
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49731: LD_ADDR_VAR 0 33
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50010: LD_ADDR_VAR 0 34
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 3
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50290: LD_ADDR_VAR 0 35
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50402: LD_ADDR_VAR 0 36
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50514: LD_ADDR_VAR 0 37
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50626: LD_ADDR_VAR 0 38
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50738: LD_ADDR_VAR 0 39
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50850: LD_ADDR_VAR 0 40
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50962: LD_ADDR_VAR 0 41
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 3
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51312: LD_ADDR_VAR 0 42
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 3
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: LD_INT 3
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51662: LD_ADDR_VAR 0 43
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 3
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 3
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52010: LD_ADDR_VAR 0 44
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52360: LD_ADDR_VAR 0 45
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 3
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: LD_INT 3
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 3
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52710: LD_ADDR_VAR 0 46
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53058: LD_ADDR_VAR 0 47
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53209: LD_ADDR_VAR 0 48
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53356: LD_ADDR_VAR 0 49
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53500: LD_ADDR_VAR 0 50
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53644: LD_ADDR_VAR 0 51
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53791: LD_ADDR_VAR 0 52
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53942: LD_ADDR_VAR 0 53
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54172: LD_ADDR_VAR 0 54
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54402: LD_ADDR_VAR 0 55
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54632: LD_ADDR_VAR 0 56
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54862: LD_ADDR_VAR 0 57
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55092: LD_ADDR_VAR 0 58
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55322: LD_ADDR_VAR 0 59
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55410: LD_ADDR_VAR 0 60
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55498: LD_ADDR_VAR 0 61
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55586: LD_ADDR_VAR 0 62
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55674: LD_ADDR_VAR 0 63
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55762: LD_ADDR_VAR 0 64
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// end ; 1 :
55850: GO 61747
55852: LD_INT 1
55854: DOUBLE
55855: EQUAL
55856: IFTRUE 55860
55858: GO 58483
55860: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55861: LD_ADDR_VAR 0 11
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55905: LD_ADDR_VAR 0 12
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55946: LD_ADDR_VAR 0 13
55950: PUSH
55951: LD_INT 3
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 3
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55986: LD_ADDR_VAR 0 14
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 3
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56027: LD_ADDR_VAR 0 15
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56071: LD_ADDR_VAR 0 16
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56117: LD_ADDR_VAR 0 17
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56161: LD_ADDR_VAR 0 18
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 3
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56202: LD_ADDR_VAR 0 19
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56242: LD_ADDR_VAR 0 20
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56283: LD_ADDR_VAR 0 21
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56327: LD_ADDR_VAR 0 22
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56373: LD_ADDR_VAR 0 23
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56417: LD_ADDR_VAR 0 24
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56458: LD_ADDR_VAR 0 25
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 4
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 4
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56498: LD_ADDR_VAR 0 26
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56539: LD_ADDR_VAR 0 27
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 4
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56583: LD_ADDR_VAR 0 28
56587: PUSH
56588: LD_INT 3
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56629: LD_ADDR_VAR 0 29
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 5
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 5
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 6
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 6
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 5
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56784: LD_ADDR_VAR 0 30
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 3
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 4
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 4
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 5
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 5
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 5
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 6
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 6
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56927: LD_ADDR_VAR 0 31
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 4
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: LD_INT 4
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 5
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: LD_INT 5
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 4
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 6
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 6
57034: PUSH
57035: LD_INT 6
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: PUSH
57045: LD_INT 6
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57066: LD_ADDR_VAR 0 32
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 4
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 5
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 5
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 4
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 6
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 6
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 5
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57209: LD_ADDR_VAR 0 33
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 4
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 5
57295: NEG
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 5
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 5
57318: NEG
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 6
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 6
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57364: LD_ADDR_VAR 0 34
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 4
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 4
57431: NEG
57432: PUSH
57433: LD_INT 4
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 4
57443: NEG
57444: PUSH
57445: LD_INT 5
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 4
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 5
57467: NEG
57468: PUSH
57469: LD_INT 5
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 5
57479: NEG
57480: PUSH
57481: LD_INT 6
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 6
57491: NEG
57492: PUSH
57493: LD_INT 5
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 6
57503: NEG
57504: PUSH
57505: LD_INT 6
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57527: LD_ADDR_VAR 0 41
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: LD_INT 3
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57571: LD_ADDR_VAR 0 42
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57612: LD_ADDR_VAR 0 43
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57652: LD_ADDR_VAR 0 44
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57693: LD_ADDR_VAR 0 45
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57737: LD_ADDR_VAR 0 46
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57783: LD_ADDR_VAR 0 47
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57816: LD_ADDR_VAR 0 48
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57847: LD_ADDR_VAR 0 49
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57876: LD_ADDR_VAR 0 50
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57905: LD_ADDR_VAR 0 51
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57936: LD_ADDR_VAR 0 52
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57969: LD_ADDR_VAR 0 53
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58013: LD_ADDR_VAR 0 54
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58054: LD_ADDR_VAR 0 55
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58094: LD_ADDR_VAR 0 56
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58135: LD_ADDR_VAR 0 57
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58179: LD_ADDR_VAR 0 58
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 3
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58225: LD_ADDR_VAR 0 59
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58269: LD_ADDR_VAR 0 60
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58310: LD_ADDR_VAR 0 61
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58350: LD_ADDR_VAR 0 62
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58391: LD_ADDR_VAR 0 63
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58435: LD_ADDR_VAR 0 64
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// end ; 2 :
58481: GO 61747
58483: LD_INT 2
58485: DOUBLE
58486: EQUAL
58487: IFTRUE 58491
58489: GO 61746
58491: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58492: LD_ADDR_VAR 0 29
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 5
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 5
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 3
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 5
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 4
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 4
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: LD_INT 4
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 4
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 4
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 4
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 4
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 5
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 5
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 4
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 5
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 4
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 4
58877: NEG
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: LD_INT 5
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 4
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 5
58937: NEG
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 5
58949: NEG
58950: PUSH
58951: LD_INT 5
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 5
58973: NEG
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59030: LD_ADDR_VAR 0 30
59034: PUSH
59035: LD_INT 4
59037: PUSH
59038: LD_INT 4
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 4
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 5
59057: PUSH
59058: LD_INT 4
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: LD_INT 5
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: PUSH
59078: LD_INT 5
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: LD_INT 4
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 5
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 5
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 4
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 3
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: LD_INT 4
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: NEG
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: NEG
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 5
59276: NEG
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 5
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 3
59334: NEG
59335: PUSH
59336: LD_INT 4
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: LD_INT 3
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 4
59394: NEG
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 4
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 4
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 5
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 5
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59577: LD_ADDR_VAR 0 31
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: LD_INT 4
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 3
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 5
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 5
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 4
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 5
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 4
59733: NEG
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 4
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 4
59779: NEG
59780: PUSH
59781: LD_INT 4
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: NEG
59792: PUSH
59793: LD_INT 5
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: LD_INT 4
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: LD_INT 3
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: LD_INT 3
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 5
59839: NEG
59840: PUSH
59841: LD_INT 4
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 5
59851: NEG
59852: PUSH
59853: LD_INT 5
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: LD_INT 3
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 4
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: LD_INT 4
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 4
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 5
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 5
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 5
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60127: LD_ADDR_VAR 0 32
60131: PUSH
60132: LD_INT 4
60134: NEG
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 4
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 4
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: NEG
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 5
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 5
60213: NEG
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: LD_INT 4
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 4
60296: NEG
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 4
60308: NEG
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: LD_INT 4
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 4
60332: NEG
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 4
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 5
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: LD_INT 5
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 4
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: PUSH
60540: LD_INT 4
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 4
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 5
60559: PUSH
60560: LD_INT 4
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 5
60569: PUSH
60570: LD_INT 5
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: LD_INT 5
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: LD_INT 4
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 5
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 3
60619: PUSH
60620: LD_INT 5
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60674: LD_ADDR_VAR 0 33
60678: PUSH
60679: LD_INT 4
60681: NEG
60682: PUSH
60683: LD_INT 4
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 4
60693: NEG
60694: PUSH
60695: LD_INT 5
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 3
60705: NEG
60706: PUSH
60707: LD_INT 4
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: LD_INT 3
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 5
60741: NEG
60742: PUSH
60743: LD_INT 4
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 5
60753: NEG
60754: PUSH
60755: LD_INT 5
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: LD_INT 5
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 3
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 3
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 4
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 4
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 4
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 5
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 5
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 3
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 3
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 4
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 4
61014: PUSH
61015: LD_INT 4
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: LD_INT 4
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 4
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 4
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 3
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 5
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 5
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 4
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: LD_INT 5
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61212: LD_ADDR_VAR 0 34
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 5
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 4
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 5
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 5
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 4
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 4
61414: PUSH
61415: LD_INT 4
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 5
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: LD_INT 5
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: LD_INT 5
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: LD_INT 4
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 5
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 3
61494: PUSH
61495: LD_INT 5
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 3
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 4
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 4
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 5
61653: NEG
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 5
61664: NEG
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 5
61676: NEG
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// end ; end ;
61744: GO 61747
61746: POP
// case btype of b_depot , b_warehouse :
61747: LD_VAR 0 1
61751: PUSH
61752: LD_INT 0
61754: DOUBLE
61755: EQUAL
61756: IFTRUE 61766
61758: LD_INT 1
61760: DOUBLE
61761: EQUAL
61762: IFTRUE 61766
61764: GO 61967
61766: POP
// case nation of nation_american :
61767: LD_VAR 0 5
61771: PUSH
61772: LD_INT 1
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61780
61778: GO 61836
61780: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61781: LD_ADDR_VAR 0 9
61785: PUSH
61786: LD_VAR 0 11
61790: PUSH
61791: LD_VAR 0 12
61795: PUSH
61796: LD_VAR 0 13
61800: PUSH
61801: LD_VAR 0 14
61805: PUSH
61806: LD_VAR 0 15
61810: PUSH
61811: LD_VAR 0 16
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: PUSH
61824: LD_VAR 0 4
61828: PUSH
61829: LD_INT 1
61831: PLUS
61832: ARRAY
61833: ST_TO_ADDR
61834: GO 61965
61836: LD_INT 2
61838: DOUBLE
61839: EQUAL
61840: IFTRUE 61844
61842: GO 61900
61844: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61845: LD_ADDR_VAR 0 9
61849: PUSH
61850: LD_VAR 0 17
61854: PUSH
61855: LD_VAR 0 18
61859: PUSH
61860: LD_VAR 0 19
61864: PUSH
61865: LD_VAR 0 20
61869: PUSH
61870: LD_VAR 0 21
61874: PUSH
61875: LD_VAR 0 22
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 4
61892: PUSH
61893: LD_INT 1
61895: PLUS
61896: ARRAY
61897: ST_TO_ADDR
61898: GO 61965
61900: LD_INT 3
61902: DOUBLE
61903: EQUAL
61904: IFTRUE 61908
61906: GO 61964
61908: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61909: LD_ADDR_VAR 0 9
61913: PUSH
61914: LD_VAR 0 23
61918: PUSH
61919: LD_VAR 0 24
61923: PUSH
61924: LD_VAR 0 25
61928: PUSH
61929: LD_VAR 0 26
61933: PUSH
61934: LD_VAR 0 27
61938: PUSH
61939: LD_VAR 0 28
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: PUSH
61952: LD_VAR 0 4
61956: PUSH
61957: LD_INT 1
61959: PLUS
61960: ARRAY
61961: ST_TO_ADDR
61962: GO 61965
61964: POP
61965: GO 62520
61967: LD_INT 2
61969: DOUBLE
61970: EQUAL
61971: IFTRUE 61981
61973: LD_INT 3
61975: DOUBLE
61976: EQUAL
61977: IFTRUE 61981
61979: GO 62037
61981: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61982: LD_ADDR_VAR 0 9
61986: PUSH
61987: LD_VAR 0 29
61991: PUSH
61992: LD_VAR 0 30
61996: PUSH
61997: LD_VAR 0 31
62001: PUSH
62002: LD_VAR 0 32
62006: PUSH
62007: LD_VAR 0 33
62011: PUSH
62012: LD_VAR 0 34
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: LD_VAR 0 4
62029: PUSH
62030: LD_INT 1
62032: PLUS
62033: ARRAY
62034: ST_TO_ADDR
62035: GO 62520
62037: LD_INT 16
62039: DOUBLE
62040: EQUAL
62041: IFTRUE 62099
62043: LD_INT 17
62045: DOUBLE
62046: EQUAL
62047: IFTRUE 62099
62049: LD_INT 18
62051: DOUBLE
62052: EQUAL
62053: IFTRUE 62099
62055: LD_INT 19
62057: DOUBLE
62058: EQUAL
62059: IFTRUE 62099
62061: LD_INT 22
62063: DOUBLE
62064: EQUAL
62065: IFTRUE 62099
62067: LD_INT 20
62069: DOUBLE
62070: EQUAL
62071: IFTRUE 62099
62073: LD_INT 21
62075: DOUBLE
62076: EQUAL
62077: IFTRUE 62099
62079: LD_INT 23
62081: DOUBLE
62082: EQUAL
62083: IFTRUE 62099
62085: LD_INT 24
62087: DOUBLE
62088: EQUAL
62089: IFTRUE 62099
62091: LD_INT 25
62093: DOUBLE
62094: EQUAL
62095: IFTRUE 62099
62097: GO 62155
62099: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62100: LD_ADDR_VAR 0 9
62104: PUSH
62105: LD_VAR 0 35
62109: PUSH
62110: LD_VAR 0 36
62114: PUSH
62115: LD_VAR 0 37
62119: PUSH
62120: LD_VAR 0 38
62124: PUSH
62125: LD_VAR 0 39
62129: PUSH
62130: LD_VAR 0 40
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: PUSH
62143: LD_VAR 0 4
62147: PUSH
62148: LD_INT 1
62150: PLUS
62151: ARRAY
62152: ST_TO_ADDR
62153: GO 62520
62155: LD_INT 6
62157: DOUBLE
62158: EQUAL
62159: IFTRUE 62211
62161: LD_INT 7
62163: DOUBLE
62164: EQUAL
62165: IFTRUE 62211
62167: LD_INT 8
62169: DOUBLE
62170: EQUAL
62171: IFTRUE 62211
62173: LD_INT 13
62175: DOUBLE
62176: EQUAL
62177: IFTRUE 62211
62179: LD_INT 12
62181: DOUBLE
62182: EQUAL
62183: IFTRUE 62211
62185: LD_INT 15
62187: DOUBLE
62188: EQUAL
62189: IFTRUE 62211
62191: LD_INT 11
62193: DOUBLE
62194: EQUAL
62195: IFTRUE 62211
62197: LD_INT 14
62199: DOUBLE
62200: EQUAL
62201: IFTRUE 62211
62203: LD_INT 10
62205: DOUBLE
62206: EQUAL
62207: IFTRUE 62211
62209: GO 62267
62211: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62212: LD_ADDR_VAR 0 9
62216: PUSH
62217: LD_VAR 0 41
62221: PUSH
62222: LD_VAR 0 42
62226: PUSH
62227: LD_VAR 0 43
62231: PUSH
62232: LD_VAR 0 44
62236: PUSH
62237: LD_VAR 0 45
62241: PUSH
62242: LD_VAR 0 46
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: PUSH
62255: LD_VAR 0 4
62259: PUSH
62260: LD_INT 1
62262: PLUS
62263: ARRAY
62264: ST_TO_ADDR
62265: GO 62520
62267: LD_INT 36
62269: DOUBLE
62270: EQUAL
62271: IFTRUE 62275
62273: GO 62331
62275: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62276: LD_ADDR_VAR 0 9
62280: PUSH
62281: LD_VAR 0 47
62285: PUSH
62286: LD_VAR 0 48
62290: PUSH
62291: LD_VAR 0 49
62295: PUSH
62296: LD_VAR 0 50
62300: PUSH
62301: LD_VAR 0 51
62305: PUSH
62306: LD_VAR 0 52
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: PUSH
62319: LD_VAR 0 4
62323: PUSH
62324: LD_INT 1
62326: PLUS
62327: ARRAY
62328: ST_TO_ADDR
62329: GO 62520
62331: LD_INT 4
62333: DOUBLE
62334: EQUAL
62335: IFTRUE 62357
62337: LD_INT 5
62339: DOUBLE
62340: EQUAL
62341: IFTRUE 62357
62343: LD_INT 34
62345: DOUBLE
62346: EQUAL
62347: IFTRUE 62357
62349: LD_INT 37
62351: DOUBLE
62352: EQUAL
62353: IFTRUE 62357
62355: GO 62413
62357: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62358: LD_ADDR_VAR 0 9
62362: PUSH
62363: LD_VAR 0 53
62367: PUSH
62368: LD_VAR 0 54
62372: PUSH
62373: LD_VAR 0 55
62377: PUSH
62378: LD_VAR 0 56
62382: PUSH
62383: LD_VAR 0 57
62387: PUSH
62388: LD_VAR 0 58
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: PUSH
62401: LD_VAR 0 4
62405: PUSH
62406: LD_INT 1
62408: PLUS
62409: ARRAY
62410: ST_TO_ADDR
62411: GO 62520
62413: LD_INT 31
62415: DOUBLE
62416: EQUAL
62417: IFTRUE 62463
62419: LD_INT 32
62421: DOUBLE
62422: EQUAL
62423: IFTRUE 62463
62425: LD_INT 33
62427: DOUBLE
62428: EQUAL
62429: IFTRUE 62463
62431: LD_INT 27
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62463
62437: LD_INT 26
62439: DOUBLE
62440: EQUAL
62441: IFTRUE 62463
62443: LD_INT 28
62445: DOUBLE
62446: EQUAL
62447: IFTRUE 62463
62449: LD_INT 29
62451: DOUBLE
62452: EQUAL
62453: IFTRUE 62463
62455: LD_INT 30
62457: DOUBLE
62458: EQUAL
62459: IFTRUE 62463
62461: GO 62519
62463: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62464: LD_ADDR_VAR 0 9
62468: PUSH
62469: LD_VAR 0 59
62473: PUSH
62474: LD_VAR 0 60
62478: PUSH
62479: LD_VAR 0 61
62483: PUSH
62484: LD_VAR 0 62
62488: PUSH
62489: LD_VAR 0 63
62493: PUSH
62494: LD_VAR 0 64
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_VAR 0 4
62511: PUSH
62512: LD_INT 1
62514: PLUS
62515: ARRAY
62516: ST_TO_ADDR
62517: GO 62520
62519: POP
// temp_list2 = [ ] ;
62520: LD_ADDR_VAR 0 10
62524: PUSH
62525: EMPTY
62526: ST_TO_ADDR
// for i in temp_list do
62527: LD_ADDR_VAR 0 8
62531: PUSH
62532: LD_VAR 0 9
62536: PUSH
62537: FOR_IN
62538: IFFALSE 62590
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62540: LD_ADDR_VAR 0 10
62544: PUSH
62545: LD_VAR 0 10
62549: PUSH
62550: LD_VAR 0 8
62554: PUSH
62555: LD_INT 1
62557: ARRAY
62558: PUSH
62559: LD_VAR 0 2
62563: PLUS
62564: PUSH
62565: LD_VAR 0 8
62569: PUSH
62570: LD_INT 2
62572: ARRAY
62573: PUSH
62574: LD_VAR 0 3
62578: PLUS
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: ADD
62587: ST_TO_ADDR
62588: GO 62537
62590: POP
62591: POP
// result = temp_list2 ;
62592: LD_ADDR_VAR 0 7
62596: PUSH
62597: LD_VAR 0 10
62601: ST_TO_ADDR
// end ;
62602: LD_VAR 0 7
62606: RET
// export function EnemyInRange ( unit , dist ) ; begin
62607: LD_INT 0
62609: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62610: LD_ADDR_VAR 0 3
62614: PUSH
62615: LD_VAR 0 1
62619: PPUSH
62620: CALL_OW 255
62624: PPUSH
62625: LD_VAR 0 1
62629: PPUSH
62630: CALL_OW 250
62634: PPUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: CALL_OW 251
62644: PPUSH
62645: LD_VAR 0 2
62649: PPUSH
62650: CALL 36003 0 4
62654: PUSH
62655: LD_INT 4
62657: ARRAY
62658: ST_TO_ADDR
// end ;
62659: LD_VAR 0 3
62663: RET
// export function PlayerSeeMe ( unit ) ; begin
62664: LD_INT 0
62666: PPUSH
// result := See ( your_side , unit ) ;
62667: LD_ADDR_VAR 0 2
62671: PUSH
62672: LD_OWVAR 2
62676: PPUSH
62677: LD_VAR 0 1
62681: PPUSH
62682: CALL_OW 292
62686: ST_TO_ADDR
// end ;
62687: LD_VAR 0 2
62691: RET
// export function ReverseDir ( unit ) ; begin
62692: LD_INT 0
62694: PPUSH
// if not unit then
62695: LD_VAR 0 1
62699: NOT
62700: IFFALSE 62704
// exit ;
62702: GO 62727
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62704: LD_ADDR_VAR 0 2
62708: PUSH
62709: LD_VAR 0 1
62713: PPUSH
62714: CALL_OW 254
62718: PUSH
62719: LD_INT 3
62721: PLUS
62722: PUSH
62723: LD_INT 6
62725: MOD
62726: ST_TO_ADDR
// end ;
62727: LD_VAR 0 2
62731: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62732: LD_INT 0
62734: PPUSH
62735: PPUSH
62736: PPUSH
62737: PPUSH
62738: PPUSH
// if not hexes then
62739: LD_VAR 0 2
62743: NOT
62744: IFFALSE 62748
// exit ;
62746: GO 62896
// dist := 9999 ;
62748: LD_ADDR_VAR 0 5
62752: PUSH
62753: LD_INT 9999
62755: ST_TO_ADDR
// for i = 1 to hexes do
62756: LD_ADDR_VAR 0 4
62760: PUSH
62761: DOUBLE
62762: LD_INT 1
62764: DEC
62765: ST_TO_ADDR
62766: LD_VAR 0 2
62770: PUSH
62771: FOR_TO
62772: IFFALSE 62884
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62774: LD_VAR 0 1
62778: PPUSH
62779: LD_VAR 0 2
62783: PUSH
62784: LD_VAR 0 4
62788: ARRAY
62789: PUSH
62790: LD_INT 1
62792: ARRAY
62793: PPUSH
62794: LD_VAR 0 2
62798: PUSH
62799: LD_VAR 0 4
62803: ARRAY
62804: PUSH
62805: LD_INT 2
62807: ARRAY
62808: PPUSH
62809: CALL_OW 297
62813: PUSH
62814: LD_VAR 0 5
62818: LESS
62819: IFFALSE 62882
// begin hex := hexes [ i ] ;
62821: LD_ADDR_VAR 0 7
62825: PUSH
62826: LD_VAR 0 2
62830: PUSH
62831: LD_VAR 0 4
62835: ARRAY
62836: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62837: LD_ADDR_VAR 0 5
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_VAR 0 4
62856: ARRAY
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PPUSH
62862: LD_VAR 0 2
62866: PUSH
62867: LD_VAR 0 4
62871: ARRAY
62872: PUSH
62873: LD_INT 2
62875: ARRAY
62876: PPUSH
62877: CALL_OW 297
62881: ST_TO_ADDR
// end ; end ;
62882: GO 62771
62884: POP
62885: POP
// result := hex ;
62886: LD_ADDR_VAR 0 3
62890: PUSH
62891: LD_VAR 0 7
62895: ST_TO_ADDR
// end ;
62896: LD_VAR 0 3
62900: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62901: LD_INT 0
62903: PPUSH
62904: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62905: LD_VAR 0 1
62909: NOT
62910: PUSH
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 21
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 23
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PPUSH
62940: CALL_OW 69
62944: IN
62945: NOT
62946: OR
62947: IFFALSE 62951
// exit ;
62949: GO 62998
// for i = 1 to 3 do
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: DOUBLE
62957: LD_INT 1
62959: DEC
62960: ST_TO_ADDR
62961: LD_INT 3
62963: PUSH
62964: FOR_TO
62965: IFFALSE 62996
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62967: LD_VAR 0 1
62971: PPUSH
62972: CALL_OW 250
62976: PPUSH
62977: LD_VAR 0 1
62981: PPUSH
62982: CALL_OW 251
62986: PPUSH
62987: LD_INT 1
62989: PPUSH
62990: CALL_OW 453
62994: GO 62964
62996: POP
62997: POP
// end ;
62998: LD_VAR 0 2
63002: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63003: LD_INT 0
63005: PPUSH
63006: PPUSH
63007: PPUSH
63008: PPUSH
63009: PPUSH
63010: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63011: LD_VAR 0 1
63015: NOT
63016: PUSH
63017: LD_VAR 0 2
63021: NOT
63022: OR
63023: PUSH
63024: LD_VAR 0 1
63028: PPUSH
63029: CALL_OW 314
63033: OR
63034: IFFALSE 63038
// exit ;
63036: GO 63479
// x := GetX ( enemy_unit ) ;
63038: LD_ADDR_VAR 0 7
63042: PUSH
63043: LD_VAR 0 2
63047: PPUSH
63048: CALL_OW 250
63052: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63053: LD_ADDR_VAR 0 8
63057: PUSH
63058: LD_VAR 0 2
63062: PPUSH
63063: CALL_OW 251
63067: ST_TO_ADDR
// if not x or not y then
63068: LD_VAR 0 7
63072: NOT
63073: PUSH
63074: LD_VAR 0 8
63078: NOT
63079: OR
63080: IFFALSE 63084
// exit ;
63082: GO 63479
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63084: LD_ADDR_VAR 0 6
63088: PUSH
63089: LD_VAR 0 7
63093: PPUSH
63094: LD_INT 0
63096: PPUSH
63097: LD_INT 4
63099: PPUSH
63100: CALL_OW 272
63104: PUSH
63105: LD_VAR 0 8
63109: PPUSH
63110: LD_INT 0
63112: PPUSH
63113: LD_INT 4
63115: PPUSH
63116: CALL_OW 273
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_VAR 0 7
63129: PPUSH
63130: LD_INT 1
63132: PPUSH
63133: LD_INT 4
63135: PPUSH
63136: CALL_OW 272
63140: PUSH
63141: LD_VAR 0 8
63145: PPUSH
63146: LD_INT 1
63148: PPUSH
63149: LD_INT 4
63151: PPUSH
63152: CALL_OW 273
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_VAR 0 7
63165: PPUSH
63166: LD_INT 2
63168: PPUSH
63169: LD_INT 4
63171: PPUSH
63172: CALL_OW 272
63176: PUSH
63177: LD_VAR 0 8
63181: PPUSH
63182: LD_INT 2
63184: PPUSH
63185: LD_INT 4
63187: PPUSH
63188: CALL_OW 273
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_VAR 0 7
63201: PPUSH
63202: LD_INT 3
63204: PPUSH
63205: LD_INT 4
63207: PPUSH
63208: CALL_OW 272
63212: PUSH
63213: LD_VAR 0 8
63217: PPUSH
63218: LD_INT 3
63220: PPUSH
63221: LD_INT 4
63223: PPUSH
63224: CALL_OW 273
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_VAR 0 7
63237: PPUSH
63238: LD_INT 4
63240: PPUSH
63241: LD_INT 4
63243: PPUSH
63244: CALL_OW 272
63248: PUSH
63249: LD_VAR 0 8
63253: PPUSH
63254: LD_INT 4
63256: PPUSH
63257: LD_INT 4
63259: PPUSH
63260: CALL_OW 273
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_VAR 0 7
63273: PPUSH
63274: LD_INT 5
63276: PPUSH
63277: LD_INT 4
63279: PPUSH
63280: CALL_OW 272
63284: PUSH
63285: LD_VAR 0 8
63289: PPUSH
63290: LD_INT 5
63292: PPUSH
63293: LD_INT 4
63295: PPUSH
63296: CALL_OW 273
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// for i = tmp downto 1 do
63313: LD_ADDR_VAR 0 4
63317: PUSH
63318: DOUBLE
63319: LD_VAR 0 6
63323: INC
63324: ST_TO_ADDR
63325: LD_INT 1
63327: PUSH
63328: FOR_DOWNTO
63329: IFFALSE 63430
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63331: LD_VAR 0 6
63335: PUSH
63336: LD_VAR 0 4
63340: ARRAY
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PPUSH
63346: LD_VAR 0 6
63350: PUSH
63351: LD_VAR 0 4
63355: ARRAY
63356: PUSH
63357: LD_INT 2
63359: ARRAY
63360: PPUSH
63361: CALL_OW 488
63365: NOT
63366: PUSH
63367: LD_VAR 0 6
63371: PUSH
63372: LD_VAR 0 4
63376: ARRAY
63377: PUSH
63378: LD_INT 1
63380: ARRAY
63381: PPUSH
63382: LD_VAR 0 6
63386: PUSH
63387: LD_VAR 0 4
63391: ARRAY
63392: PUSH
63393: LD_INT 2
63395: ARRAY
63396: PPUSH
63397: CALL_OW 428
63401: PUSH
63402: LD_INT 0
63404: NONEQUAL
63405: OR
63406: IFFALSE 63428
// tmp := Delete ( tmp , i ) ;
63408: LD_ADDR_VAR 0 6
63412: PUSH
63413: LD_VAR 0 6
63417: PPUSH
63418: LD_VAR 0 4
63422: PPUSH
63423: CALL_OW 3
63427: ST_TO_ADDR
63428: GO 63328
63430: POP
63431: POP
// j := GetClosestHex ( unit , tmp ) ;
63432: LD_ADDR_VAR 0 5
63436: PUSH
63437: LD_VAR 0 1
63441: PPUSH
63442: LD_VAR 0 6
63446: PPUSH
63447: CALL 62732 0 2
63451: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63452: LD_VAR 0 1
63456: PPUSH
63457: LD_VAR 0 5
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PPUSH
63466: LD_VAR 0 5
63470: PUSH
63471: LD_INT 2
63473: ARRAY
63474: PPUSH
63475: CALL_OW 111
// end ;
63479: LD_VAR 0 3
63483: RET
// export function PrepareApemanSoldier ( ) ; begin
63484: LD_INT 0
63486: PPUSH
// uc_nation := 0 ;
63487: LD_ADDR_OWVAR 21
63491: PUSH
63492: LD_INT 0
63494: ST_TO_ADDR
// hc_sex := sex_male ;
63495: LD_ADDR_OWVAR 27
63499: PUSH
63500: LD_INT 1
63502: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63503: LD_ADDR_OWVAR 28
63507: PUSH
63508: LD_INT 15
63510: ST_TO_ADDR
// hc_gallery :=  ;
63511: LD_ADDR_OWVAR 33
63515: PUSH
63516: LD_STRING 
63518: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63519: LD_ADDR_OWVAR 31
63523: PUSH
63524: LD_INT 0
63526: PPUSH
63527: LD_INT 3
63529: PPUSH
63530: CALL_OW 12
63534: PUSH
63535: LD_INT 0
63537: PPUSH
63538: LD_INT 3
63540: PPUSH
63541: CALL_OW 12
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: ST_TO_ADDR
// end ;
63558: LD_VAR 0 1
63562: RET
// export function PrepareApemanEngineer ( ) ; begin
63563: LD_INT 0
63565: PPUSH
// uc_nation := 0 ;
63566: LD_ADDR_OWVAR 21
63570: PUSH
63571: LD_INT 0
63573: ST_TO_ADDR
// hc_sex := sex_male ;
63574: LD_ADDR_OWVAR 27
63578: PUSH
63579: LD_INT 1
63581: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63582: LD_ADDR_OWVAR 28
63586: PUSH
63587: LD_INT 16
63589: ST_TO_ADDR
// hc_gallery :=  ;
63590: LD_ADDR_OWVAR 33
63594: PUSH
63595: LD_STRING 
63597: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63598: LD_ADDR_OWVAR 31
63602: PUSH
63603: LD_INT 0
63605: PPUSH
63606: LD_INT 3
63608: PPUSH
63609: CALL_OW 12
63613: PUSH
63614: LD_INT 0
63616: PPUSH
63617: LD_INT 3
63619: PPUSH
63620: CALL_OW 12
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// end ;
63637: LD_VAR 0 1
63641: RET
// export function PrepareApeman ( agressivity ) ; begin
63642: LD_INT 0
63644: PPUSH
// uc_side := 0 ;
63645: LD_ADDR_OWVAR 20
63649: PUSH
63650: LD_INT 0
63652: ST_TO_ADDR
// uc_nation := 0 ;
63653: LD_ADDR_OWVAR 21
63657: PUSH
63658: LD_INT 0
63660: ST_TO_ADDR
// hc_sex := sex_male ;
63661: LD_ADDR_OWVAR 27
63665: PUSH
63666: LD_INT 1
63668: ST_TO_ADDR
// hc_class := class_apeman ;
63669: LD_ADDR_OWVAR 28
63673: PUSH
63674: LD_INT 12
63676: ST_TO_ADDR
// hc_gallery :=  ;
63677: LD_ADDR_OWVAR 33
63681: PUSH
63682: LD_STRING 
63684: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63685: LD_ADDR_OWVAR 35
63689: PUSH
63690: LD_VAR 0 1
63694: NEG
63695: PPUSH
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 12
63705: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63706: LD_ADDR_OWVAR 31
63710: PUSH
63711: LD_INT 0
63713: PPUSH
63714: LD_INT 3
63716: PPUSH
63717: CALL_OW 12
63721: PUSH
63722: LD_INT 0
63724: PPUSH
63725: LD_INT 3
63727: PPUSH
63728: CALL_OW 12
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: ST_TO_ADDR
// end ;
63745: LD_VAR 0 2
63749: RET
// export function PrepareTiger ( agressivity ) ; begin
63750: LD_INT 0
63752: PPUSH
// uc_side := 0 ;
63753: LD_ADDR_OWVAR 20
63757: PUSH
63758: LD_INT 0
63760: ST_TO_ADDR
// uc_nation := 0 ;
63761: LD_ADDR_OWVAR 21
63765: PUSH
63766: LD_INT 0
63768: ST_TO_ADDR
// hc_class := class_tiger ;
63769: LD_ADDR_OWVAR 28
63773: PUSH
63774: LD_INT 14
63776: ST_TO_ADDR
// hc_gallery :=  ;
63777: LD_ADDR_OWVAR 33
63781: PUSH
63782: LD_STRING 
63784: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63785: LD_ADDR_OWVAR 35
63789: PUSH
63790: LD_VAR 0 1
63794: NEG
63795: PPUSH
63796: LD_VAR 0 1
63800: PPUSH
63801: CALL_OW 12
63805: ST_TO_ADDR
// end ;
63806: LD_VAR 0 2
63810: RET
// export function PrepareEnchidna ( ) ; begin
63811: LD_INT 0
63813: PPUSH
// uc_side := 0 ;
63814: LD_ADDR_OWVAR 20
63818: PUSH
63819: LD_INT 0
63821: ST_TO_ADDR
// uc_nation := 0 ;
63822: LD_ADDR_OWVAR 21
63826: PUSH
63827: LD_INT 0
63829: ST_TO_ADDR
// hc_class := class_baggie ;
63830: LD_ADDR_OWVAR 28
63834: PUSH
63835: LD_INT 13
63837: ST_TO_ADDR
// hc_gallery :=  ;
63838: LD_ADDR_OWVAR 33
63842: PUSH
63843: LD_STRING 
63845: ST_TO_ADDR
// end ;
63846: LD_VAR 0 1
63850: RET
// export function PrepareFrog ( ) ; begin
63851: LD_INT 0
63853: PPUSH
// uc_side := 0 ;
63854: LD_ADDR_OWVAR 20
63858: PUSH
63859: LD_INT 0
63861: ST_TO_ADDR
// uc_nation := 0 ;
63862: LD_ADDR_OWVAR 21
63866: PUSH
63867: LD_INT 0
63869: ST_TO_ADDR
// hc_class := class_frog ;
63870: LD_ADDR_OWVAR 28
63874: PUSH
63875: LD_INT 19
63877: ST_TO_ADDR
// hc_gallery :=  ;
63878: LD_ADDR_OWVAR 33
63882: PUSH
63883: LD_STRING 
63885: ST_TO_ADDR
// end ;
63886: LD_VAR 0 1
63890: RET
// export function PrepareFish ( ) ; begin
63891: LD_INT 0
63893: PPUSH
// uc_side := 0 ;
63894: LD_ADDR_OWVAR 20
63898: PUSH
63899: LD_INT 0
63901: ST_TO_ADDR
// uc_nation := 0 ;
63902: LD_ADDR_OWVAR 21
63906: PUSH
63907: LD_INT 0
63909: ST_TO_ADDR
// hc_class := class_fish ;
63910: LD_ADDR_OWVAR 28
63914: PUSH
63915: LD_INT 20
63917: ST_TO_ADDR
// hc_gallery :=  ;
63918: LD_ADDR_OWVAR 33
63922: PUSH
63923: LD_STRING 
63925: ST_TO_ADDR
// end ;
63926: LD_VAR 0 1
63930: RET
// export function PrepareBird ( ) ; begin
63931: LD_INT 0
63933: PPUSH
// uc_side := 0 ;
63934: LD_ADDR_OWVAR 20
63938: PUSH
63939: LD_INT 0
63941: ST_TO_ADDR
// uc_nation := 0 ;
63942: LD_ADDR_OWVAR 21
63946: PUSH
63947: LD_INT 0
63949: ST_TO_ADDR
// hc_class := class_phororhacos ;
63950: LD_ADDR_OWVAR 28
63954: PUSH
63955: LD_INT 18
63957: ST_TO_ADDR
// hc_gallery :=  ;
63958: LD_ADDR_OWVAR 33
63962: PUSH
63963: LD_STRING 
63965: ST_TO_ADDR
// end ;
63966: LD_VAR 0 1
63970: RET
// export function PrepareHorse ( ) ; begin
63971: LD_INT 0
63973: PPUSH
// uc_side := 0 ;
63974: LD_ADDR_OWVAR 20
63978: PUSH
63979: LD_INT 0
63981: ST_TO_ADDR
// uc_nation := 0 ;
63982: LD_ADDR_OWVAR 21
63986: PUSH
63987: LD_INT 0
63989: ST_TO_ADDR
// hc_class := 21 ;
63990: LD_ADDR_OWVAR 28
63994: PUSH
63995: LD_INT 21
63997: ST_TO_ADDR
// hc_gallery :=  ;
63998: LD_ADDR_OWVAR 33
64002: PUSH
64003: LD_STRING 
64005: ST_TO_ADDR
// end ;
64006: LD_VAR 0 1
64010: RET
// export function PrepareMastodont ( ) ; begin
64011: LD_INT 0
64013: PPUSH
// uc_side := 0 ;
64014: LD_ADDR_OWVAR 20
64018: PUSH
64019: LD_INT 0
64021: ST_TO_ADDR
// uc_nation := 0 ;
64022: LD_ADDR_OWVAR 21
64026: PUSH
64027: LD_INT 0
64029: ST_TO_ADDR
// vc_chassis := 31 ;
64030: LD_ADDR_OWVAR 37
64034: PUSH
64035: LD_INT 31
64037: ST_TO_ADDR
// vc_control := control_rider ;
64038: LD_ADDR_OWVAR 38
64042: PUSH
64043: LD_INT 4
64045: ST_TO_ADDR
// end ;
64046: LD_VAR 0 1
64050: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64051: LD_INT 0
64053: PPUSH
64054: PPUSH
64055: PPUSH
// uc_side = 0 ;
64056: LD_ADDR_OWVAR 20
64060: PUSH
64061: LD_INT 0
64063: ST_TO_ADDR
// uc_nation = 0 ;
64064: LD_ADDR_OWVAR 21
64068: PUSH
64069: LD_INT 0
64071: ST_TO_ADDR
// InitHc_All ( ) ;
64072: CALL_OW 584
// InitVc ;
64076: CALL_OW 20
// if mastodonts then
64080: LD_VAR 0 6
64084: IFFALSE 64151
// for i = 1 to mastodonts do
64086: LD_ADDR_VAR 0 11
64090: PUSH
64091: DOUBLE
64092: LD_INT 1
64094: DEC
64095: ST_TO_ADDR
64096: LD_VAR 0 6
64100: PUSH
64101: FOR_TO
64102: IFFALSE 64149
// begin vc_chassis := 31 ;
64104: LD_ADDR_OWVAR 37
64108: PUSH
64109: LD_INT 31
64111: ST_TO_ADDR
// vc_control := control_rider ;
64112: LD_ADDR_OWVAR 38
64116: PUSH
64117: LD_INT 4
64119: ST_TO_ADDR
// animal := CreateVehicle ;
64120: LD_ADDR_VAR 0 12
64124: PUSH
64125: CALL_OW 45
64129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64130: LD_VAR 0 12
64134: PPUSH
64135: LD_VAR 0 8
64139: PPUSH
64140: LD_INT 0
64142: PPUSH
64143: CALL 66286 0 3
// end ;
64147: GO 64101
64149: POP
64150: POP
// if horses then
64151: LD_VAR 0 5
64155: IFFALSE 64222
// for i = 1 to horses do
64157: LD_ADDR_VAR 0 11
64161: PUSH
64162: DOUBLE
64163: LD_INT 1
64165: DEC
64166: ST_TO_ADDR
64167: LD_VAR 0 5
64171: PUSH
64172: FOR_TO
64173: IFFALSE 64220
// begin hc_class := 21 ;
64175: LD_ADDR_OWVAR 28
64179: PUSH
64180: LD_INT 21
64182: ST_TO_ADDR
// hc_gallery :=  ;
64183: LD_ADDR_OWVAR 33
64187: PUSH
64188: LD_STRING 
64190: ST_TO_ADDR
// animal := CreateHuman ;
64191: LD_ADDR_VAR 0 12
64195: PUSH
64196: CALL_OW 44
64200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64201: LD_VAR 0 12
64205: PPUSH
64206: LD_VAR 0 8
64210: PPUSH
64211: LD_INT 0
64213: PPUSH
64214: CALL 66286 0 3
// end ;
64218: GO 64172
64220: POP
64221: POP
// if birds then
64222: LD_VAR 0 1
64226: IFFALSE 64293
// for i = 1 to birds do
64228: LD_ADDR_VAR 0 11
64232: PUSH
64233: DOUBLE
64234: LD_INT 1
64236: DEC
64237: ST_TO_ADDR
64238: LD_VAR 0 1
64242: PUSH
64243: FOR_TO
64244: IFFALSE 64291
// begin hc_class = 18 ;
64246: LD_ADDR_OWVAR 28
64250: PUSH
64251: LD_INT 18
64253: ST_TO_ADDR
// hc_gallery =  ;
64254: LD_ADDR_OWVAR 33
64258: PUSH
64259: LD_STRING 
64261: ST_TO_ADDR
// animal := CreateHuman ;
64262: LD_ADDR_VAR 0 12
64266: PUSH
64267: CALL_OW 44
64271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64272: LD_VAR 0 12
64276: PPUSH
64277: LD_VAR 0 8
64281: PPUSH
64282: LD_INT 0
64284: PPUSH
64285: CALL 66286 0 3
// end ;
64289: GO 64243
64291: POP
64292: POP
// if tigers then
64293: LD_VAR 0 2
64297: IFFALSE 64381
// for i = 1 to tigers do
64299: LD_ADDR_VAR 0 11
64303: PUSH
64304: DOUBLE
64305: LD_INT 1
64307: DEC
64308: ST_TO_ADDR
64309: LD_VAR 0 2
64313: PUSH
64314: FOR_TO
64315: IFFALSE 64379
// begin hc_class = class_tiger ;
64317: LD_ADDR_OWVAR 28
64321: PUSH
64322: LD_INT 14
64324: ST_TO_ADDR
// hc_gallery =  ;
64325: LD_ADDR_OWVAR 33
64329: PUSH
64330: LD_STRING 
64332: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64333: LD_ADDR_OWVAR 35
64337: PUSH
64338: LD_INT 7
64340: NEG
64341: PPUSH
64342: LD_INT 7
64344: PPUSH
64345: CALL_OW 12
64349: ST_TO_ADDR
// animal := CreateHuman ;
64350: LD_ADDR_VAR 0 12
64354: PUSH
64355: CALL_OW 44
64359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64360: LD_VAR 0 12
64364: PPUSH
64365: LD_VAR 0 8
64369: PPUSH
64370: LD_INT 0
64372: PPUSH
64373: CALL 66286 0 3
// end ;
64377: GO 64314
64379: POP
64380: POP
// if apemans then
64381: LD_VAR 0 3
64385: IFFALSE 64508
// for i = 1 to apemans do
64387: LD_ADDR_VAR 0 11
64391: PUSH
64392: DOUBLE
64393: LD_INT 1
64395: DEC
64396: ST_TO_ADDR
64397: LD_VAR 0 3
64401: PUSH
64402: FOR_TO
64403: IFFALSE 64506
// begin hc_class = class_apeman ;
64405: LD_ADDR_OWVAR 28
64409: PUSH
64410: LD_INT 12
64412: ST_TO_ADDR
// hc_gallery =  ;
64413: LD_ADDR_OWVAR 33
64417: PUSH
64418: LD_STRING 
64420: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64421: LD_ADDR_OWVAR 35
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PPUSH
64430: LD_INT 2
64432: PPUSH
64433: CALL_OW 12
64437: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64438: LD_ADDR_OWVAR 31
64442: PUSH
64443: LD_INT 1
64445: PPUSH
64446: LD_INT 3
64448: PPUSH
64449: CALL_OW 12
64453: PUSH
64454: LD_INT 1
64456: PPUSH
64457: LD_INT 3
64459: PPUSH
64460: CALL_OW 12
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// animal := CreateHuman ;
64477: LD_ADDR_VAR 0 12
64481: PUSH
64482: CALL_OW 44
64486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64487: LD_VAR 0 12
64491: PPUSH
64492: LD_VAR 0 8
64496: PPUSH
64497: LD_INT 0
64499: PPUSH
64500: CALL 66286 0 3
// end ;
64504: GO 64402
64506: POP
64507: POP
// if enchidnas then
64508: LD_VAR 0 4
64512: IFFALSE 64579
// for i = 1 to enchidnas do
64514: LD_ADDR_VAR 0 11
64518: PUSH
64519: DOUBLE
64520: LD_INT 1
64522: DEC
64523: ST_TO_ADDR
64524: LD_VAR 0 4
64528: PUSH
64529: FOR_TO
64530: IFFALSE 64577
// begin hc_class = 13 ;
64532: LD_ADDR_OWVAR 28
64536: PUSH
64537: LD_INT 13
64539: ST_TO_ADDR
// hc_gallery =  ;
64540: LD_ADDR_OWVAR 33
64544: PUSH
64545: LD_STRING 
64547: ST_TO_ADDR
// animal := CreateHuman ;
64548: LD_ADDR_VAR 0 12
64552: PUSH
64553: CALL_OW 44
64557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64558: LD_VAR 0 12
64562: PPUSH
64563: LD_VAR 0 8
64567: PPUSH
64568: LD_INT 0
64570: PPUSH
64571: CALL 66286 0 3
// end ;
64575: GO 64529
64577: POP
64578: POP
// if fishes then
64579: LD_VAR 0 7
64583: IFFALSE 64650
// for i = 1 to fishes do
64585: LD_ADDR_VAR 0 11
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_VAR 0 7
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64648
// begin hc_class = 20 ;
64603: LD_ADDR_OWVAR 28
64607: PUSH
64608: LD_INT 20
64610: ST_TO_ADDR
// hc_gallery =  ;
64611: LD_ADDR_OWVAR 33
64615: PUSH
64616: LD_STRING 
64618: ST_TO_ADDR
// animal := CreateHuman ;
64619: LD_ADDR_VAR 0 12
64623: PUSH
64624: CALL_OW 44
64628: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64629: LD_VAR 0 12
64633: PPUSH
64634: LD_VAR 0 9
64638: PPUSH
64639: LD_INT 0
64641: PPUSH
64642: CALL 66286 0 3
// end ;
64646: GO 64600
64648: POP
64649: POP
// end ;
64650: LD_VAR 0 10
64654: RET
// export function WantHeal ( sci , unit ) ; begin
64655: LD_INT 0
64657: PPUSH
// if GetTaskList ( sci ) > 0 then
64658: LD_VAR 0 1
64662: PPUSH
64663: CALL_OW 437
64667: PUSH
64668: LD_INT 0
64670: GREATER
64671: IFFALSE 64741
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64673: LD_VAR 0 1
64677: PPUSH
64678: CALL_OW 437
64682: PUSH
64683: LD_INT 1
64685: ARRAY
64686: PUSH
64687: LD_INT 1
64689: ARRAY
64690: PUSH
64691: LD_STRING l
64693: EQUAL
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 437
64704: PUSH
64705: LD_INT 1
64707: ARRAY
64708: PUSH
64709: LD_INT 4
64711: ARRAY
64712: PUSH
64713: LD_VAR 0 2
64717: EQUAL
64718: AND
64719: IFFALSE 64731
// result := true else
64721: LD_ADDR_VAR 0 3
64725: PUSH
64726: LD_INT 1
64728: ST_TO_ADDR
64729: GO 64739
// result := false ;
64731: LD_ADDR_VAR 0 3
64735: PUSH
64736: LD_INT 0
64738: ST_TO_ADDR
// end else
64739: GO 64749
// result := false ;
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: LD_INT 0
64748: ST_TO_ADDR
// end ;
64749: LD_VAR 0 3
64753: RET
// export function HealTarget ( sci ) ; begin
64754: LD_INT 0
64756: PPUSH
// if not sci then
64757: LD_VAR 0 1
64761: NOT
64762: IFFALSE 64766
// exit ;
64764: GO 64831
// result := 0 ;
64766: LD_ADDR_VAR 0 2
64770: PUSH
64771: LD_INT 0
64773: ST_TO_ADDR
// if GetTaskList ( sci ) then
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 437
64783: IFFALSE 64831
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64785: LD_VAR 0 1
64789: PPUSH
64790: CALL_OW 437
64794: PUSH
64795: LD_INT 1
64797: ARRAY
64798: PUSH
64799: LD_INT 1
64801: ARRAY
64802: PUSH
64803: LD_STRING l
64805: EQUAL
64806: IFFALSE 64831
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64808: LD_ADDR_VAR 0 2
64812: PUSH
64813: LD_VAR 0 1
64817: PPUSH
64818: CALL_OW 437
64822: PUSH
64823: LD_INT 1
64825: ARRAY
64826: PUSH
64827: LD_INT 4
64829: ARRAY
64830: ST_TO_ADDR
// end ;
64831: LD_VAR 0 2
64835: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64836: LD_INT 0
64838: PPUSH
64839: PPUSH
64840: PPUSH
64841: PPUSH
// if not base_units then
64842: LD_VAR 0 1
64846: NOT
64847: IFFALSE 64851
// exit ;
64849: GO 64938
// result := false ;
64851: LD_ADDR_VAR 0 2
64855: PUSH
64856: LD_INT 0
64858: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64859: LD_ADDR_VAR 0 5
64863: PUSH
64864: LD_VAR 0 1
64868: PPUSH
64869: LD_INT 21
64871: PUSH
64872: LD_INT 3
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PPUSH
64879: CALL_OW 72
64883: ST_TO_ADDR
// if not tmp then
64884: LD_VAR 0 5
64888: NOT
64889: IFFALSE 64893
// exit ;
64891: GO 64938
// for i in tmp do
64893: LD_ADDR_VAR 0 3
64897: PUSH
64898: LD_VAR 0 5
64902: PUSH
64903: FOR_IN
64904: IFFALSE 64936
// begin result := EnemyInRange ( i , 22 ) ;
64906: LD_ADDR_VAR 0 2
64910: PUSH
64911: LD_VAR 0 3
64915: PPUSH
64916: LD_INT 22
64918: PPUSH
64919: CALL 62607 0 2
64923: ST_TO_ADDR
// if result then
64924: LD_VAR 0 2
64928: IFFALSE 64934
// exit ;
64930: POP
64931: POP
64932: GO 64938
// end ;
64934: GO 64903
64936: POP
64937: POP
// end ;
64938: LD_VAR 0 2
64942: RET
// export function FilterByTag ( units , tag ) ; begin
64943: LD_INT 0
64945: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64946: LD_ADDR_VAR 0 3
64950: PUSH
64951: LD_VAR 0 1
64955: PPUSH
64956: LD_INT 120
64958: PUSH
64959: LD_VAR 0 2
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PPUSH
64968: CALL_OW 72
64972: ST_TO_ADDR
// end ;
64973: LD_VAR 0 3
64977: RET
// export function IsDriver ( un ) ; begin
64978: LD_INT 0
64980: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64981: LD_ADDR_VAR 0 2
64985: PUSH
64986: LD_VAR 0 1
64990: PUSH
64991: LD_INT 55
64993: PUSH
64994: EMPTY
64995: LIST
64996: PPUSH
64997: CALL_OW 69
65001: IN
65002: ST_TO_ADDR
// end ;
65003: LD_VAR 0 2
65007: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65008: LD_INT 0
65010: PPUSH
65011: PPUSH
// list := [ ] ;
65012: LD_ADDR_VAR 0 5
65016: PUSH
65017: EMPTY
65018: ST_TO_ADDR
// case d of 0 :
65019: LD_VAR 0 3
65023: PUSH
65024: LD_INT 0
65026: DOUBLE
65027: EQUAL
65028: IFTRUE 65032
65030: GO 65165
65032: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65033: LD_ADDR_VAR 0 5
65037: PUSH
65038: LD_VAR 0 1
65042: PUSH
65043: LD_INT 4
65045: MINUS
65046: PUSH
65047: LD_VAR 0 2
65051: PUSH
65052: LD_INT 4
65054: MINUS
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: PUSH
65064: LD_VAR 0 1
65068: PUSH
65069: LD_INT 3
65071: MINUS
65072: PUSH
65073: LD_VAR 0 2
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: LD_VAR 0 1
65090: PUSH
65091: LD_INT 4
65093: PLUS
65094: PUSH
65095: LD_VAR 0 2
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: LIST
65107: PUSH
65108: LD_VAR 0 1
65112: PUSH
65113: LD_INT 3
65115: PLUS
65116: PUSH
65117: LD_VAR 0 2
65121: PUSH
65122: LD_INT 3
65124: PLUS
65125: PUSH
65126: LD_INT 5
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: PUSH
65134: LD_VAR 0 1
65138: PUSH
65139: LD_VAR 0 2
65143: PUSH
65144: LD_INT 4
65146: PLUS
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: LIST
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// end ; 1 :
65163: GO 65863
65165: LD_INT 1
65167: DOUBLE
65168: EQUAL
65169: IFTRUE 65173
65171: GO 65306
65173: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65174: LD_ADDR_VAR 0 5
65178: PUSH
65179: LD_VAR 0 1
65183: PUSH
65184: LD_VAR 0 2
65188: PUSH
65189: LD_INT 4
65191: MINUS
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: PUSH
65201: LD_VAR 0 1
65205: PUSH
65206: LD_INT 3
65208: MINUS
65209: PUSH
65210: LD_VAR 0 2
65214: PUSH
65215: LD_INT 3
65217: MINUS
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: LD_VAR 0 1
65231: PUSH
65232: LD_INT 4
65234: MINUS
65235: PUSH
65236: LD_VAR 0 2
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: PUSH
65249: LD_VAR 0 1
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 3
65261: PLUS
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: PUSH
65271: LD_VAR 0 1
65275: PUSH
65276: LD_INT 4
65278: PLUS
65279: PUSH
65280: LD_VAR 0 2
65284: PUSH
65285: LD_INT 4
65287: PLUS
65288: PUSH
65289: LD_INT 5
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: ST_TO_ADDR
// end ; 2 :
65304: GO 65863
65306: LD_INT 2
65308: DOUBLE
65309: EQUAL
65310: IFTRUE 65314
65312: GO 65443
65314: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65315: LD_ADDR_VAR 0 5
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_VAR 0 2
65329: PUSH
65330: LD_INT 3
65332: MINUS
65333: PUSH
65334: LD_INT 3
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: PUSH
65342: LD_VAR 0 1
65346: PUSH
65347: LD_INT 4
65349: PLUS
65350: PUSH
65351: LD_VAR 0 2
65355: PUSH
65356: LD_INT 4
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: LD_VAR 0 2
65373: PUSH
65374: LD_INT 4
65376: PLUS
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: LD_INT 3
65393: MINUS
65394: PUSH
65395: LD_VAR 0 2
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 4
65415: MINUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 4
65424: MINUS
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// end ; 3 :
65441: GO 65863
65443: LD_INT 3
65445: DOUBLE
65446: EQUAL
65447: IFTRUE 65451
65449: GO 65584
65451: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65452: LD_ADDR_VAR 0 5
65456: PUSH
65457: LD_VAR 0 1
65461: PUSH
65462: LD_INT 3
65464: PLUS
65465: PUSH
65466: LD_VAR 0 2
65470: PUSH
65471: LD_INT 4
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: PUSH
65479: LD_VAR 0 1
65483: PUSH
65484: LD_INT 4
65486: PLUS
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 4
65495: PLUS
65496: PUSH
65497: LD_INT 5
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: PUSH
65505: LD_VAR 0 1
65509: PUSH
65510: LD_INT 4
65512: MINUS
65513: PUSH
65514: LD_VAR 0 2
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: LIST
65526: PUSH
65527: LD_VAR 0 1
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 4
65539: MINUS
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: PUSH
65549: LD_VAR 0 1
65553: PUSH
65554: LD_INT 3
65556: MINUS
65557: PUSH
65558: LD_VAR 0 2
65562: PUSH
65563: LD_INT 3
65565: MINUS
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: ST_TO_ADDR
// end ; 4 :
65582: GO 65863
65584: LD_INT 4
65586: DOUBLE
65587: EQUAL
65588: IFTRUE 65592
65590: GO 65725
65592: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65593: LD_ADDR_VAR 0 5
65597: PUSH
65598: LD_VAR 0 1
65602: PUSH
65603: LD_VAR 0 2
65607: PUSH
65608: LD_INT 4
65610: PLUS
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: PUSH
65620: LD_VAR 0 1
65624: PUSH
65625: LD_INT 3
65627: PLUS
65628: PUSH
65629: LD_VAR 0 2
65633: PUSH
65634: LD_INT 3
65636: PLUS
65637: PUSH
65638: LD_INT 5
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: PUSH
65646: LD_VAR 0 1
65650: PUSH
65651: LD_INT 4
65653: PLUS
65654: PUSH
65655: LD_VAR 0 2
65659: PUSH
65660: LD_INT 4
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: PUSH
65668: LD_VAR 0 1
65672: PUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_INT 3
65680: MINUS
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: PUSH
65690: LD_VAR 0 1
65694: PUSH
65695: LD_INT 4
65697: MINUS
65698: PUSH
65699: LD_VAR 0 2
65703: PUSH
65704: LD_INT 4
65706: MINUS
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// end ; 5 :
65723: GO 65863
65725: LD_INT 5
65727: DOUBLE
65728: EQUAL
65729: IFTRUE 65733
65731: GO 65862
65733: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65734: LD_ADDR_VAR 0 5
65738: PUSH
65739: LD_VAR 0 1
65743: PUSH
65744: LD_INT 4
65746: MINUS
65747: PUSH
65748: LD_VAR 0 2
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: PUSH
65761: LD_VAR 0 1
65765: PUSH
65766: LD_VAR 0 2
65770: PUSH
65771: LD_INT 4
65773: MINUS
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: PUSH
65783: LD_VAR 0 1
65787: PUSH
65788: LD_INT 4
65790: PLUS
65791: PUSH
65792: LD_VAR 0 2
65796: PUSH
65797: LD_INT 4
65799: PLUS
65800: PUSH
65801: LD_INT 5
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: PUSH
65809: LD_VAR 0 1
65813: PUSH
65814: LD_INT 3
65816: PLUS
65817: PUSH
65818: LD_VAR 0 2
65822: PUSH
65823: LD_INT 4
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: PUSH
65831: LD_VAR 0 1
65835: PUSH
65836: LD_VAR 0 2
65840: PUSH
65841: LD_INT 3
65843: PLUS
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: ST_TO_ADDR
// end ; end ;
65860: GO 65863
65862: POP
// result := list ;
65863: LD_ADDR_VAR 0 4
65867: PUSH
65868: LD_VAR 0 5
65872: ST_TO_ADDR
// end ;
65873: LD_VAR 0 4
65877: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65878: LD_INT 0
65880: PPUSH
65881: PPUSH
65882: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65883: LD_VAR 0 1
65887: NOT
65888: PUSH
65889: LD_VAR 0 2
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 4
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: IN
65912: NOT
65913: OR
65914: IFFALSE 65918
// exit ;
65916: GO 66010
// tmp := [ ] ;
65918: LD_ADDR_VAR 0 5
65922: PUSH
65923: EMPTY
65924: ST_TO_ADDR
// for i in units do
65925: LD_ADDR_VAR 0 4
65929: PUSH
65930: LD_VAR 0 1
65934: PUSH
65935: FOR_IN
65936: IFFALSE 65979
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65938: LD_ADDR_VAR 0 5
65942: PUSH
65943: LD_VAR 0 5
65947: PPUSH
65948: LD_VAR 0 5
65952: PUSH
65953: LD_INT 1
65955: PLUS
65956: PPUSH
65957: LD_VAR 0 4
65961: PPUSH
65962: LD_VAR 0 2
65966: PPUSH
65967: CALL_OW 259
65971: PPUSH
65972: CALL_OW 2
65976: ST_TO_ADDR
65977: GO 65935
65979: POP
65980: POP
// if not tmp then
65981: LD_VAR 0 5
65985: NOT
65986: IFFALSE 65990
// exit ;
65988: GO 66010
// result := SortListByListDesc ( units , tmp ) ;
65990: LD_ADDR_VAR 0 3
65994: PUSH
65995: LD_VAR 0 1
65999: PPUSH
66000: LD_VAR 0 5
66004: PPUSH
66005: CALL_OW 77
66009: ST_TO_ADDR
// end ;
66010: LD_VAR 0 3
66014: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66015: LD_INT 0
66017: PPUSH
66018: PPUSH
66019: PPUSH
// result := false ;
66020: LD_ADDR_VAR 0 3
66024: PUSH
66025: LD_INT 0
66027: ST_TO_ADDR
// x := GetX ( building ) ;
66028: LD_ADDR_VAR 0 4
66032: PUSH
66033: LD_VAR 0 2
66037: PPUSH
66038: CALL_OW 250
66042: ST_TO_ADDR
// y := GetY ( building ) ;
66043: LD_ADDR_VAR 0 5
66047: PUSH
66048: LD_VAR 0 2
66052: PPUSH
66053: CALL_OW 251
66057: ST_TO_ADDR
// if not building or not x or not y then
66058: LD_VAR 0 2
66062: NOT
66063: PUSH
66064: LD_VAR 0 4
66068: NOT
66069: OR
66070: PUSH
66071: LD_VAR 0 5
66075: NOT
66076: OR
66077: IFFALSE 66081
// exit ;
66079: GO 66173
// if GetTaskList ( unit ) then
66081: LD_VAR 0 1
66085: PPUSH
66086: CALL_OW 437
66090: IFFALSE 66173
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66092: LD_STRING e
66094: PUSH
66095: LD_VAR 0 1
66099: PPUSH
66100: CALL_OW 437
66104: PUSH
66105: LD_INT 1
66107: ARRAY
66108: PUSH
66109: LD_INT 1
66111: ARRAY
66112: EQUAL
66113: PUSH
66114: LD_VAR 0 4
66118: PUSH
66119: LD_VAR 0 1
66123: PPUSH
66124: CALL_OW 437
66128: PUSH
66129: LD_INT 1
66131: ARRAY
66132: PUSH
66133: LD_INT 2
66135: ARRAY
66136: EQUAL
66137: AND
66138: PUSH
66139: LD_VAR 0 5
66143: PUSH
66144: LD_VAR 0 1
66148: PPUSH
66149: CALL_OW 437
66153: PUSH
66154: LD_INT 1
66156: ARRAY
66157: PUSH
66158: LD_INT 3
66160: ARRAY
66161: EQUAL
66162: AND
66163: IFFALSE 66173
// result := true end ;
66165: LD_ADDR_VAR 0 3
66169: PUSH
66170: LD_INT 1
66172: ST_TO_ADDR
// end ;
66173: LD_VAR 0 3
66177: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66178: LD_INT 0
66180: PPUSH
// result := false ;
66181: LD_ADDR_VAR 0 4
66185: PUSH
66186: LD_INT 0
66188: ST_TO_ADDR
// if GetTaskList ( unit ) then
66189: LD_VAR 0 1
66193: PPUSH
66194: CALL_OW 437
66198: IFFALSE 66281
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66200: LD_STRING M
66202: PUSH
66203: LD_VAR 0 1
66207: PPUSH
66208: CALL_OW 437
66212: PUSH
66213: LD_INT 1
66215: ARRAY
66216: PUSH
66217: LD_INT 1
66219: ARRAY
66220: EQUAL
66221: PUSH
66222: LD_VAR 0 2
66226: PUSH
66227: LD_VAR 0 1
66231: PPUSH
66232: CALL_OW 437
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PUSH
66241: LD_INT 2
66243: ARRAY
66244: EQUAL
66245: AND
66246: PUSH
66247: LD_VAR 0 3
66251: PUSH
66252: LD_VAR 0 1
66256: PPUSH
66257: CALL_OW 437
66261: PUSH
66262: LD_INT 1
66264: ARRAY
66265: PUSH
66266: LD_INT 3
66268: ARRAY
66269: EQUAL
66270: AND
66271: IFFALSE 66281
// result := true ;
66273: LD_ADDR_VAR 0 4
66277: PUSH
66278: LD_INT 1
66280: ST_TO_ADDR
// end ; end ;
66281: LD_VAR 0 4
66285: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66286: LD_INT 0
66288: PPUSH
66289: PPUSH
66290: PPUSH
66291: PPUSH
// if not unit or not area then
66292: LD_VAR 0 1
66296: NOT
66297: PUSH
66298: LD_VAR 0 2
66302: NOT
66303: OR
66304: IFFALSE 66308
// exit ;
66306: GO 66472
// tmp := AreaToList ( area , i ) ;
66308: LD_ADDR_VAR 0 6
66312: PUSH
66313: LD_VAR 0 2
66317: PPUSH
66318: LD_VAR 0 5
66322: PPUSH
66323: CALL_OW 517
66327: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66328: LD_ADDR_VAR 0 5
66332: PUSH
66333: DOUBLE
66334: LD_INT 1
66336: DEC
66337: ST_TO_ADDR
66338: LD_VAR 0 6
66342: PUSH
66343: LD_INT 1
66345: ARRAY
66346: PUSH
66347: FOR_TO
66348: IFFALSE 66470
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66350: LD_ADDR_VAR 0 7
66354: PUSH
66355: LD_VAR 0 6
66359: PUSH
66360: LD_INT 1
66362: ARRAY
66363: PUSH
66364: LD_VAR 0 5
66368: ARRAY
66369: PUSH
66370: LD_VAR 0 6
66374: PUSH
66375: LD_INT 2
66377: ARRAY
66378: PUSH
66379: LD_VAR 0 5
66383: ARRAY
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66389: LD_VAR 0 7
66393: PUSH
66394: LD_INT 1
66396: ARRAY
66397: PPUSH
66398: LD_VAR 0 7
66402: PUSH
66403: LD_INT 2
66405: ARRAY
66406: PPUSH
66407: CALL_OW 428
66411: PUSH
66412: LD_INT 0
66414: EQUAL
66415: IFFALSE 66468
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66417: LD_VAR 0 1
66421: PPUSH
66422: LD_VAR 0 7
66426: PUSH
66427: LD_INT 1
66429: ARRAY
66430: PPUSH
66431: LD_VAR 0 7
66435: PUSH
66436: LD_INT 2
66438: ARRAY
66439: PPUSH
66440: LD_VAR 0 3
66444: PPUSH
66445: CALL_OW 48
// result := IsPlaced ( unit ) ;
66449: LD_ADDR_VAR 0 4
66453: PUSH
66454: LD_VAR 0 1
66458: PPUSH
66459: CALL_OW 305
66463: ST_TO_ADDR
// exit ;
66464: POP
66465: POP
66466: GO 66472
// end ; end ;
66468: GO 66347
66470: POP
66471: POP
// end ;
66472: LD_VAR 0 4
66476: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66477: LD_INT 0
66479: PPUSH
66480: PPUSH
66481: PPUSH
// if not side or side > 8 then
66482: LD_VAR 0 1
66486: NOT
66487: PUSH
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 8
66495: GREATER
66496: OR
66497: IFFALSE 66501
// exit ;
66499: GO 66688
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66501: LD_ADDR_VAR 0 4
66505: PUSH
66506: LD_INT 22
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 21
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PPUSH
66532: CALL_OW 69
66536: ST_TO_ADDR
// if not tmp then
66537: LD_VAR 0 4
66541: NOT
66542: IFFALSE 66546
// exit ;
66544: GO 66688
// enable_addtolog := true ;
66546: LD_ADDR_OWVAR 81
66550: PUSH
66551: LD_INT 1
66553: ST_TO_ADDR
// AddToLog ( [ ) ;
66554: LD_STRING [
66556: PPUSH
66557: CALL_OW 561
// for i in tmp do
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: LD_VAR 0 4
66570: PUSH
66571: FOR_IN
66572: IFFALSE 66679
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66574: LD_STRING [
66576: PUSH
66577: LD_VAR 0 3
66581: PPUSH
66582: CALL_OW 266
66586: STR
66587: PUSH
66588: LD_STRING , 
66590: STR
66591: PUSH
66592: LD_VAR 0 3
66596: PPUSH
66597: CALL_OW 250
66601: STR
66602: PUSH
66603: LD_STRING , 
66605: STR
66606: PUSH
66607: LD_VAR 0 3
66611: PPUSH
66612: CALL_OW 251
66616: STR
66617: PUSH
66618: LD_STRING , 
66620: STR
66621: PUSH
66622: LD_VAR 0 3
66626: PPUSH
66627: CALL_OW 254
66631: STR
66632: PUSH
66633: LD_STRING , 
66635: STR
66636: PUSH
66637: LD_VAR 0 3
66641: PPUSH
66642: LD_INT 1
66644: PPUSH
66645: CALL_OW 268
66649: STR
66650: PUSH
66651: LD_STRING , 
66653: STR
66654: PUSH
66655: LD_VAR 0 3
66659: PPUSH
66660: LD_INT 2
66662: PPUSH
66663: CALL_OW 268
66667: STR
66668: PUSH
66669: LD_STRING ],
66671: STR
66672: PPUSH
66673: CALL_OW 561
// end ;
66677: GO 66571
66679: POP
66680: POP
// AddToLog ( ]; ) ;
66681: LD_STRING ];
66683: PPUSH
66684: CALL_OW 561
// end ;
66688: LD_VAR 0 2
66692: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
66699: PPUSH
// if not area or not rate or not max then
66700: LD_VAR 0 1
66704: NOT
66705: PUSH
66706: LD_VAR 0 2
66710: NOT
66711: OR
66712: PUSH
66713: LD_VAR 0 4
66717: NOT
66718: OR
66719: IFFALSE 66723
// exit ;
66721: GO 66912
// while 1 do
66723: LD_INT 1
66725: IFFALSE 66912
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66727: LD_ADDR_VAR 0 9
66731: PUSH
66732: LD_VAR 0 1
66736: PPUSH
66737: LD_INT 1
66739: PPUSH
66740: CALL_OW 287
66744: PUSH
66745: LD_INT 10
66747: MUL
66748: ST_TO_ADDR
// r := rate / 10 ;
66749: LD_ADDR_VAR 0 7
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 10
66761: DIVREAL
66762: ST_TO_ADDR
// time := 1 1$00 ;
66763: LD_ADDR_VAR 0 8
66767: PUSH
66768: LD_INT 2100
66770: ST_TO_ADDR
// if amount < min then
66771: LD_VAR 0 9
66775: PUSH
66776: LD_VAR 0 3
66780: LESS
66781: IFFALSE 66799
// r := r * 2 else
66783: LD_ADDR_VAR 0 7
66787: PUSH
66788: LD_VAR 0 7
66792: PUSH
66793: LD_INT 2
66795: MUL
66796: ST_TO_ADDR
66797: GO 66825
// if amount > max then
66799: LD_VAR 0 9
66803: PUSH
66804: LD_VAR 0 4
66808: GREATER
66809: IFFALSE 66825
// r := r / 2 ;
66811: LD_ADDR_VAR 0 7
66815: PUSH
66816: LD_VAR 0 7
66820: PUSH
66821: LD_INT 2
66823: DIVREAL
66824: ST_TO_ADDR
// time := time / r ;
66825: LD_ADDR_VAR 0 8
66829: PUSH
66830: LD_VAR 0 8
66834: PUSH
66835: LD_VAR 0 7
66839: DIVREAL
66840: ST_TO_ADDR
// if time < 0 then
66841: LD_VAR 0 8
66845: PUSH
66846: LD_INT 0
66848: LESS
66849: IFFALSE 66866
// time := time * - 1 ;
66851: LD_ADDR_VAR 0 8
66855: PUSH
66856: LD_VAR 0 8
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: MUL
66865: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66866: LD_VAR 0 8
66870: PUSH
66871: LD_INT 35
66873: PPUSH
66874: LD_INT 875
66876: PPUSH
66877: CALL_OW 12
66881: PLUS
66882: PPUSH
66883: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66887: LD_INT 1
66889: PPUSH
66890: LD_INT 5
66892: PPUSH
66893: CALL_OW 12
66897: PPUSH
66898: LD_VAR 0 1
66902: PPUSH
66903: LD_INT 1
66905: PPUSH
66906: CALL_OW 55
// end ;
66910: GO 66723
// end ;
66912: LD_VAR 0 5
66916: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66917: LD_INT 0
66919: PPUSH
66920: PPUSH
66921: PPUSH
66922: PPUSH
66923: PPUSH
66924: PPUSH
66925: PPUSH
66926: PPUSH
// if not turrets or not factories then
66927: LD_VAR 0 1
66931: NOT
66932: PUSH
66933: LD_VAR 0 2
66937: NOT
66938: OR
66939: IFFALSE 66943
// exit ;
66941: GO 67250
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66943: LD_ADDR_VAR 0 10
66947: PUSH
66948: LD_INT 5
66950: PUSH
66951: LD_INT 6
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: LD_INT 4
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: LD_INT 5
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 24
66985: PUSH
66986: LD_INT 25
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 23
66995: PUSH
66996: LD_INT 27
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 42
67009: PUSH
67010: LD_INT 43
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 44
67019: PUSH
67020: LD_INT 46
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 45
67029: PUSH
67030: LD_INT 47
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: LIST
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// result := [ ] ;
67047: LD_ADDR_VAR 0 3
67051: PUSH
67052: EMPTY
67053: ST_TO_ADDR
// for i in turrets do
67054: LD_ADDR_VAR 0 4
67058: PUSH
67059: LD_VAR 0 1
67063: PUSH
67064: FOR_IN
67065: IFFALSE 67248
// begin nat := GetNation ( i ) ;
67067: LD_ADDR_VAR 0 7
67071: PUSH
67072: LD_VAR 0 4
67076: PPUSH
67077: CALL_OW 248
67081: ST_TO_ADDR
// weapon := 0 ;
67082: LD_ADDR_VAR 0 8
67086: PUSH
67087: LD_INT 0
67089: ST_TO_ADDR
// if not nat then
67090: LD_VAR 0 7
67094: NOT
67095: IFFALSE 67099
// continue ;
67097: GO 67064
// for j in list [ nat ] do
67099: LD_ADDR_VAR 0 5
67103: PUSH
67104: LD_VAR 0 10
67108: PUSH
67109: LD_VAR 0 7
67113: ARRAY
67114: PUSH
67115: FOR_IN
67116: IFFALSE 67157
// if GetBWeapon ( i ) = j [ 1 ] then
67118: LD_VAR 0 4
67122: PPUSH
67123: CALL_OW 269
67127: PUSH
67128: LD_VAR 0 5
67132: PUSH
67133: LD_INT 1
67135: ARRAY
67136: EQUAL
67137: IFFALSE 67155
// begin weapon := j [ 2 ] ;
67139: LD_ADDR_VAR 0 8
67143: PUSH
67144: LD_VAR 0 5
67148: PUSH
67149: LD_INT 2
67151: ARRAY
67152: ST_TO_ADDR
// break ;
67153: GO 67157
// end ;
67155: GO 67115
67157: POP
67158: POP
// if not weapon then
67159: LD_VAR 0 8
67163: NOT
67164: IFFALSE 67168
// continue ;
67166: GO 67064
// for k in factories do
67168: LD_ADDR_VAR 0 6
67172: PUSH
67173: LD_VAR 0 2
67177: PUSH
67178: FOR_IN
67179: IFFALSE 67244
// begin weapons := AvailableWeaponList ( k ) ;
67181: LD_ADDR_VAR 0 9
67185: PUSH
67186: LD_VAR 0 6
67190: PPUSH
67191: CALL_OW 478
67195: ST_TO_ADDR
// if not weapons then
67196: LD_VAR 0 9
67200: NOT
67201: IFFALSE 67205
// continue ;
67203: GO 67178
// if weapon in weapons then
67205: LD_VAR 0 8
67209: PUSH
67210: LD_VAR 0 9
67214: IN
67215: IFFALSE 67242
// begin result := [ i , weapon ] ;
67217: LD_ADDR_VAR 0 3
67221: PUSH
67222: LD_VAR 0 4
67226: PUSH
67227: LD_VAR 0 8
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: ST_TO_ADDR
// exit ;
67236: POP
67237: POP
67238: POP
67239: POP
67240: GO 67250
// end ; end ;
67242: GO 67178
67244: POP
67245: POP
// end ;
67246: GO 67064
67248: POP
67249: POP
// end ;
67250: LD_VAR 0 3
67254: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67255: LD_INT 0
67257: PPUSH
// if not side or side > 8 then
67258: LD_VAR 0 3
67262: NOT
67263: PUSH
67264: LD_VAR 0 3
67268: PUSH
67269: LD_INT 8
67271: GREATER
67272: OR
67273: IFFALSE 67277
// exit ;
67275: GO 67336
// if not range then
67277: LD_VAR 0 4
67281: NOT
67282: IFFALSE 67293
// range := - 12 ;
67284: LD_ADDR_VAR 0 4
67288: PUSH
67289: LD_INT 12
67291: NEG
67292: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67293: LD_VAR 0 1
67297: PPUSH
67298: LD_VAR 0 2
67302: PPUSH
67303: LD_VAR 0 3
67307: PPUSH
67308: LD_VAR 0 4
67312: PPUSH
67313: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67317: LD_VAR 0 1
67321: PPUSH
67322: LD_VAR 0 2
67326: PPUSH
67327: LD_VAR 0 3
67331: PPUSH
67332: CALL_OW 331
// end ;
67336: LD_VAR 0 5
67340: RET
// export function Video ( mode ) ; begin
67341: LD_INT 0
67343: PPUSH
// ingame_video = mode ;
67344: LD_ADDR_OWVAR 52
67348: PUSH
67349: LD_VAR 0 1
67353: ST_TO_ADDR
// interface_hidden = mode ;
67354: LD_ADDR_OWVAR 54
67358: PUSH
67359: LD_VAR 0 1
67363: ST_TO_ADDR
// end ;
67364: LD_VAR 0 2
67368: RET
// export function Join ( array , element ) ; begin
67369: LD_INT 0
67371: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67372: LD_ADDR_VAR 0 3
67376: PUSH
67377: LD_VAR 0 1
67381: PPUSH
67382: LD_VAR 0 1
67386: PUSH
67387: LD_INT 1
67389: PLUS
67390: PPUSH
67391: LD_VAR 0 2
67395: PPUSH
67396: CALL_OW 1
67400: ST_TO_ADDR
// end ;
67401: LD_VAR 0 3
67405: RET
// export function JoinUnion ( array , element ) ; begin
67406: LD_INT 0
67408: PPUSH
// result := array union element ;
67409: LD_ADDR_VAR 0 3
67413: PUSH
67414: LD_VAR 0 1
67418: PUSH
67419: LD_VAR 0 2
67423: UNION
67424: ST_TO_ADDR
// end ;
67425: LD_VAR 0 3
67429: RET
// export function GetBehemoths ( side ) ; begin
67430: LD_INT 0
67432: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67433: LD_ADDR_VAR 0 2
67437: PUSH
67438: LD_INT 22
67440: PUSH
67441: LD_VAR 0 1
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 31
67452: PUSH
67453: LD_INT 25
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PPUSH
67464: CALL_OW 69
67468: ST_TO_ADDR
// end ;
67469: LD_VAR 0 2
67473: RET
// export function Shuffle ( array ) ; var i , index ; begin
67474: LD_INT 0
67476: PPUSH
67477: PPUSH
67478: PPUSH
// result := [ ] ;
67479: LD_ADDR_VAR 0 2
67483: PUSH
67484: EMPTY
67485: ST_TO_ADDR
// if not array then
67486: LD_VAR 0 1
67490: NOT
67491: IFFALSE 67495
// exit ;
67493: GO 67594
// Randomize ;
67495: CALL_OW 10
// for i = array downto 1 do
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: DOUBLE
67505: LD_VAR 0 1
67509: INC
67510: ST_TO_ADDR
67511: LD_INT 1
67513: PUSH
67514: FOR_DOWNTO
67515: IFFALSE 67592
// begin index := rand ( 1 , array ) ;
67517: LD_ADDR_VAR 0 4
67521: PUSH
67522: LD_INT 1
67524: PPUSH
67525: LD_VAR 0 1
67529: PPUSH
67530: CALL_OW 12
67534: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67535: LD_ADDR_VAR 0 2
67539: PUSH
67540: LD_VAR 0 2
67544: PPUSH
67545: LD_VAR 0 2
67549: PUSH
67550: LD_INT 1
67552: PLUS
67553: PPUSH
67554: LD_VAR 0 1
67558: PUSH
67559: LD_VAR 0 4
67563: ARRAY
67564: PPUSH
67565: CALL_OW 2
67569: ST_TO_ADDR
// array := Delete ( array , index ) ;
67570: LD_ADDR_VAR 0 1
67574: PUSH
67575: LD_VAR 0 1
67579: PPUSH
67580: LD_VAR 0 4
67584: PPUSH
67585: CALL_OW 3
67589: ST_TO_ADDR
// end ;
67590: GO 67514
67592: POP
67593: POP
// end ;
67594: LD_VAR 0 2
67598: RET
// export function GetBaseMaterials ( base ) ; begin
67599: LD_INT 0
67601: PPUSH
// result := [ 0 , 0 , 0 ] ;
67602: LD_ADDR_VAR 0 2
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// if not base then
67621: LD_VAR 0 1
67625: NOT
67626: IFFALSE 67630
// exit ;
67628: GO 67679
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67630: LD_ADDR_VAR 0 2
67634: PUSH
67635: LD_VAR 0 1
67639: PPUSH
67640: LD_INT 1
67642: PPUSH
67643: CALL_OW 275
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: LD_INT 2
67655: PPUSH
67656: CALL_OW 275
67660: PUSH
67661: LD_VAR 0 1
67665: PPUSH
67666: LD_INT 3
67668: PPUSH
67669: CALL_OW 275
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// end ;
67679: LD_VAR 0 2
67683: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
// result := array ;
67688: LD_ADDR_VAR 0 3
67692: PUSH
67693: LD_VAR 0 1
67697: ST_TO_ADDR
// if size >= result then
67698: LD_VAR 0 2
67702: PUSH
67703: LD_VAR 0 3
67707: GREATEREQUAL
67708: IFFALSE 67712
// exit ;
67710: GO 67762
// if size then
67712: LD_VAR 0 2
67716: IFFALSE 67762
// for i := array downto size do
67718: LD_ADDR_VAR 0 4
67722: PUSH
67723: DOUBLE
67724: LD_VAR 0 1
67728: INC
67729: ST_TO_ADDR
67730: LD_VAR 0 2
67734: PUSH
67735: FOR_DOWNTO
67736: IFFALSE 67760
// result := Delete ( result , result ) ;
67738: LD_ADDR_VAR 0 3
67742: PUSH
67743: LD_VAR 0 3
67747: PPUSH
67748: LD_VAR 0 3
67752: PPUSH
67753: CALL_OW 3
67757: ST_TO_ADDR
67758: GO 67735
67760: POP
67761: POP
// end ;
67762: LD_VAR 0 3
67766: RET
// export function ComExit ( unit ) ; var tmp ; begin
67767: LD_INT 0
67769: PPUSH
67770: PPUSH
// if not IsInUnit ( unit ) then
67771: LD_VAR 0 1
67775: PPUSH
67776: CALL_OW 310
67780: NOT
67781: IFFALSE 67785
// exit ;
67783: GO 67845
// tmp := IsInUnit ( unit ) ;
67785: LD_ADDR_VAR 0 3
67789: PUSH
67790: LD_VAR 0 1
67794: PPUSH
67795: CALL_OW 310
67799: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67800: LD_VAR 0 3
67804: PPUSH
67805: CALL_OW 247
67809: PUSH
67810: LD_INT 2
67812: EQUAL
67813: IFFALSE 67826
// ComExitVehicle ( unit ) else
67815: LD_VAR 0 1
67819: PPUSH
67820: CALL_OW 121
67824: GO 67835
// ComExitBuilding ( unit ) ;
67826: LD_VAR 0 1
67830: PPUSH
67831: CALL_OW 122
// result := tmp ;
67835: LD_ADDR_VAR 0 2
67839: PUSH
67840: LD_VAR 0 3
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 2
67849: RET
// export function ComExitAll ( units ) ; var i ; begin
67850: LD_INT 0
67852: PPUSH
67853: PPUSH
// if not units then
67854: LD_VAR 0 1
67858: NOT
67859: IFFALSE 67863
// exit ;
67861: GO 67889
// for i in units do
67863: LD_ADDR_VAR 0 3
67867: PUSH
67868: LD_VAR 0 1
67872: PUSH
67873: FOR_IN
67874: IFFALSE 67887
// ComExit ( i ) ;
67876: LD_VAR 0 3
67880: PPUSH
67881: CALL 67767 0 1
67885: GO 67873
67887: POP
67888: POP
// end ;
67889: LD_VAR 0 2
67893: RET
// export function ResetHc ; begin
67894: LD_INT 0
67896: PPUSH
// InitHc ;
67897: CALL_OW 19
// hc_importance := 0 ;
67901: LD_ADDR_OWVAR 32
67905: PUSH
67906: LD_INT 0
67908: ST_TO_ADDR
// end ;
67909: LD_VAR 0 1
67913: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67914: LD_INT 0
67916: PPUSH
67917: PPUSH
67918: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67919: LD_ADDR_VAR 0 6
67923: PUSH
67924: LD_VAR 0 1
67928: PUSH
67929: LD_VAR 0 3
67933: PLUS
67934: PUSH
67935: LD_INT 2
67937: DIV
67938: ST_TO_ADDR
// if _x < 0 then
67939: LD_VAR 0 6
67943: PUSH
67944: LD_INT 0
67946: LESS
67947: IFFALSE 67964
// _x := _x * - 1 ;
67949: LD_ADDR_VAR 0 6
67953: PUSH
67954: LD_VAR 0 6
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: MUL
67963: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67964: LD_ADDR_VAR 0 7
67968: PUSH
67969: LD_VAR 0 2
67973: PUSH
67974: LD_VAR 0 4
67978: PLUS
67979: PUSH
67980: LD_INT 2
67982: DIV
67983: ST_TO_ADDR
// if _y < 0 then
67984: LD_VAR 0 7
67988: PUSH
67989: LD_INT 0
67991: LESS
67992: IFFALSE 68009
// _y := _y * - 1 ;
67994: LD_ADDR_VAR 0 7
67998: PUSH
67999: LD_VAR 0 7
68003: PUSH
68004: LD_INT 1
68006: NEG
68007: MUL
68008: ST_TO_ADDR
// result := [ _x , _y ] ;
68009: LD_ADDR_VAR 0 5
68013: PUSH
68014: LD_VAR 0 6
68018: PUSH
68019: LD_VAR 0 7
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: ST_TO_ADDR
// end ;
68028: LD_VAR 0 5
68032: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68033: LD_INT 0
68035: PPUSH
68036: PPUSH
68037: PPUSH
68038: PPUSH
// task := GetTaskList ( unit ) ;
68039: LD_ADDR_VAR 0 7
68043: PUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: CALL_OW 437
68053: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68054: LD_VAR 0 7
68058: NOT
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: LD_VAR 0 2
68069: PPUSH
68070: CALL_OW 308
68074: NOT
68075: AND
68076: IFFALSE 68080
// exit ;
68078: GO 68198
// if IsInArea ( unit , area ) then
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: CALL_OW 308
68094: IFFALSE 68112
// begin ComMoveToArea ( unit , goAway ) ;
68096: LD_VAR 0 1
68100: PPUSH
68101: LD_VAR 0 3
68105: PPUSH
68106: CALL_OW 113
// exit ;
68110: GO 68198
// end ; if task [ 1 ] [ 1 ] <> M then
68112: LD_VAR 0 7
68116: PUSH
68117: LD_INT 1
68119: ARRAY
68120: PUSH
68121: LD_INT 1
68123: ARRAY
68124: PUSH
68125: LD_STRING M
68127: NONEQUAL
68128: IFFALSE 68132
// exit ;
68130: GO 68198
// x := task [ 1 ] [ 2 ] ;
68132: LD_ADDR_VAR 0 5
68136: PUSH
68137: LD_VAR 0 7
68141: PUSH
68142: LD_INT 1
68144: ARRAY
68145: PUSH
68146: LD_INT 2
68148: ARRAY
68149: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68150: LD_ADDR_VAR 0 6
68154: PUSH
68155: LD_VAR 0 7
68159: PUSH
68160: LD_INT 1
68162: ARRAY
68163: PUSH
68164: LD_INT 3
68166: ARRAY
68167: ST_TO_ADDR
// if InArea ( x , y , area ) then
68168: LD_VAR 0 5
68172: PPUSH
68173: LD_VAR 0 6
68177: PPUSH
68178: LD_VAR 0 2
68182: PPUSH
68183: CALL_OW 309
68187: IFFALSE 68198
// ComStop ( unit ) ;
68189: LD_VAR 0 1
68193: PPUSH
68194: CALL_OW 141
// end ;
68198: LD_VAR 0 4
68202: RET
// export function Abs ( value ) ; begin
68203: LD_INT 0
68205: PPUSH
// result := value ;
68206: LD_ADDR_VAR 0 2
68210: PUSH
68211: LD_VAR 0 1
68215: ST_TO_ADDR
// if value < 0 then
68216: LD_VAR 0 1
68220: PUSH
68221: LD_INT 0
68223: LESS
68224: IFFALSE 68241
// result := value * - 1 ;
68226: LD_ADDR_VAR 0 2
68230: PUSH
68231: LD_VAR 0 1
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: MUL
68240: ST_TO_ADDR
// end ;
68241: LD_VAR 0 2
68245: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68246: LD_INT 0
68248: PPUSH
68249: PPUSH
68250: PPUSH
68251: PPUSH
68252: PPUSH
68253: PPUSH
68254: PPUSH
68255: PPUSH
// if not unit or not building then
68256: LD_VAR 0 1
68260: NOT
68261: PUSH
68262: LD_VAR 0 2
68266: NOT
68267: OR
68268: IFFALSE 68272
// exit ;
68270: GO 68498
// x := GetX ( building ) ;
68272: LD_ADDR_VAR 0 4
68276: PUSH
68277: LD_VAR 0 2
68281: PPUSH
68282: CALL_OW 250
68286: ST_TO_ADDR
// y := GetY ( building ) ;
68287: LD_ADDR_VAR 0 6
68291: PUSH
68292: LD_VAR 0 2
68296: PPUSH
68297: CALL_OW 251
68301: ST_TO_ADDR
// d := GetDir ( building ) ;
68302: LD_ADDR_VAR 0 8
68306: PUSH
68307: LD_VAR 0 2
68311: PPUSH
68312: CALL_OW 254
68316: ST_TO_ADDR
// r := 4 ;
68317: LD_ADDR_VAR 0 9
68321: PUSH
68322: LD_INT 4
68324: ST_TO_ADDR
// for i := 1 to 5 do
68325: LD_ADDR_VAR 0 10
68329: PUSH
68330: DOUBLE
68331: LD_INT 1
68333: DEC
68334: ST_TO_ADDR
68335: LD_INT 5
68337: PUSH
68338: FOR_TO
68339: IFFALSE 68496
// begin _x := ShiftX ( x , d , r + i ) ;
68341: LD_ADDR_VAR 0 5
68345: PUSH
68346: LD_VAR 0 4
68350: PPUSH
68351: LD_VAR 0 8
68355: PPUSH
68356: LD_VAR 0 9
68360: PUSH
68361: LD_VAR 0 10
68365: PLUS
68366: PPUSH
68367: CALL_OW 272
68371: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68372: LD_ADDR_VAR 0 7
68376: PUSH
68377: LD_VAR 0 6
68381: PPUSH
68382: LD_VAR 0 8
68386: PPUSH
68387: LD_VAR 0 9
68391: PUSH
68392: LD_VAR 0 10
68396: PLUS
68397: PPUSH
68398: CALL_OW 273
68402: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68403: LD_VAR 0 5
68407: PPUSH
68408: LD_VAR 0 7
68412: PPUSH
68413: CALL_OW 488
68417: PUSH
68418: LD_VAR 0 5
68422: PPUSH
68423: LD_VAR 0 7
68427: PPUSH
68428: CALL_OW 428
68432: PPUSH
68433: CALL_OW 247
68437: PUSH
68438: LD_INT 3
68440: PUSH
68441: LD_INT 2
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: IN
68448: NOT
68449: AND
68450: IFFALSE 68494
// begin ComMoveXY ( unit , _x , _y ) ;
68452: LD_VAR 0 1
68456: PPUSH
68457: LD_VAR 0 5
68461: PPUSH
68462: LD_VAR 0 7
68466: PPUSH
68467: CALL_OW 111
// result := [ _x , _y ] ;
68471: LD_ADDR_VAR 0 3
68475: PUSH
68476: LD_VAR 0 5
68480: PUSH
68481: LD_VAR 0 7
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: ST_TO_ADDR
// exit ;
68490: POP
68491: POP
68492: GO 68498
// end ; end ;
68494: GO 68338
68496: POP
68497: POP
// end ;
68498: LD_VAR 0 3
68502: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68503: LD_INT 0
68505: PPUSH
68506: PPUSH
68507: PPUSH
// result := 0 ;
68508: LD_ADDR_VAR 0 3
68512: PUSH
68513: LD_INT 0
68515: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68516: LD_VAR 0 1
68520: PUSH
68521: LD_INT 0
68523: LESS
68524: PUSH
68525: LD_VAR 0 1
68529: PUSH
68530: LD_INT 8
68532: GREATER
68533: OR
68534: PUSH
68535: LD_VAR 0 2
68539: PUSH
68540: LD_INT 0
68542: LESS
68543: OR
68544: PUSH
68545: LD_VAR 0 2
68549: PUSH
68550: LD_INT 8
68552: GREATER
68553: OR
68554: IFFALSE 68558
// exit ;
68556: GO 68633
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68558: LD_ADDR_VAR 0 4
68562: PUSH
68563: LD_INT 22
68565: PUSH
68566: LD_VAR 0 2
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PPUSH
68575: CALL_OW 69
68579: PUSH
68580: FOR_IN
68581: IFFALSE 68631
// begin un := UnitShoot ( i ) ;
68583: LD_ADDR_VAR 0 5
68587: PUSH
68588: LD_VAR 0 4
68592: PPUSH
68593: CALL_OW 504
68597: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68598: LD_VAR 0 5
68602: PPUSH
68603: CALL_OW 255
68607: PUSH
68608: LD_VAR 0 1
68612: EQUAL
68613: IFFALSE 68629
// begin result := un ;
68615: LD_ADDR_VAR 0 3
68619: PUSH
68620: LD_VAR 0 5
68624: ST_TO_ADDR
// exit ;
68625: POP
68626: POP
68627: GO 68633
// end ; end ;
68629: GO 68580
68631: POP
68632: POP
// end ;
68633: LD_VAR 0 3
68637: RET
// export function GetCargoBay ( units ) ; begin
68638: LD_INT 0
68640: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68641: LD_ADDR_VAR 0 2
68645: PUSH
68646: LD_VAR 0 1
68650: PPUSH
68651: LD_INT 2
68653: PUSH
68654: LD_INT 34
68656: PUSH
68657: LD_INT 12
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 34
68666: PUSH
68667: LD_INT 51
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 34
68676: PUSH
68677: LD_INT 32
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 34
68686: PUSH
68687: LD_EXP 98
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: PPUSH
68703: CALL_OW 72
68707: ST_TO_ADDR
// end ;
68708: LD_VAR 0 2
68712: RET
// export function Negate ( value ) ; begin
68713: LD_INT 0
68715: PPUSH
// result := not value ;
68716: LD_ADDR_VAR 0 2
68720: PUSH
68721: LD_VAR 0 1
68725: NOT
68726: ST_TO_ADDR
// end ;
68727: LD_VAR 0 2
68731: RET
// export function Inc ( value ) ; begin
68732: LD_INT 0
68734: PPUSH
// result := value + 1 ;
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: LD_VAR 0 1
68744: PUSH
68745: LD_INT 1
68747: PLUS
68748: ST_TO_ADDR
// end ;
68749: LD_VAR 0 2
68753: RET
// export function Dec ( value ) ; begin
68754: LD_INT 0
68756: PPUSH
// result := value - 1 ;
68757: LD_ADDR_VAR 0 2
68761: PUSH
68762: LD_VAR 0 1
68766: PUSH
68767: LD_INT 1
68769: MINUS
68770: ST_TO_ADDR
// end ;
68771: LD_VAR 0 2
68775: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68776: LD_INT 0
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
68782: PPUSH
68783: PPUSH
68784: PPUSH
68785: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68786: LD_VAR 0 1
68790: PPUSH
68791: LD_VAR 0 2
68795: PPUSH
68796: CALL_OW 488
68800: NOT
68801: PUSH
68802: LD_VAR 0 3
68806: PPUSH
68807: LD_VAR 0 4
68811: PPUSH
68812: CALL_OW 488
68816: NOT
68817: OR
68818: IFFALSE 68831
// begin result := - 1 ;
68820: LD_ADDR_VAR 0 5
68824: PUSH
68825: LD_INT 1
68827: NEG
68828: ST_TO_ADDR
// exit ;
68829: GO 69066
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68831: LD_ADDR_VAR 0 12
68835: PUSH
68836: LD_VAR 0 1
68840: PPUSH
68841: LD_VAR 0 2
68845: PPUSH
68846: LD_VAR 0 3
68850: PPUSH
68851: LD_VAR 0 4
68855: PPUSH
68856: CALL 67914 0 4
68860: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68861: LD_ADDR_VAR 0 11
68865: PUSH
68866: LD_VAR 0 1
68870: PPUSH
68871: LD_VAR 0 2
68875: PPUSH
68876: LD_VAR 0 12
68880: PUSH
68881: LD_INT 1
68883: ARRAY
68884: PPUSH
68885: LD_VAR 0 12
68889: PUSH
68890: LD_INT 2
68892: ARRAY
68893: PPUSH
68894: CALL_OW 298
68898: ST_TO_ADDR
// distance := 9999 ;
68899: LD_ADDR_VAR 0 10
68903: PUSH
68904: LD_INT 9999
68906: ST_TO_ADDR
// for i := 0 to 5 do
68907: LD_ADDR_VAR 0 6
68911: PUSH
68912: DOUBLE
68913: LD_INT 0
68915: DEC
68916: ST_TO_ADDR
68917: LD_INT 5
68919: PUSH
68920: FOR_TO
68921: IFFALSE 69064
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68923: LD_ADDR_VAR 0 7
68927: PUSH
68928: LD_VAR 0 1
68932: PPUSH
68933: LD_VAR 0 6
68937: PPUSH
68938: LD_VAR 0 11
68942: PPUSH
68943: CALL_OW 272
68947: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68948: LD_ADDR_VAR 0 8
68952: PUSH
68953: LD_VAR 0 2
68957: PPUSH
68958: LD_VAR 0 6
68962: PPUSH
68963: LD_VAR 0 11
68967: PPUSH
68968: CALL_OW 273
68972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68973: LD_VAR 0 7
68977: PPUSH
68978: LD_VAR 0 8
68982: PPUSH
68983: CALL_OW 488
68987: NOT
68988: IFFALSE 68992
// continue ;
68990: GO 68920
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68992: LD_ADDR_VAR 0 9
68996: PUSH
68997: LD_VAR 0 12
69001: PUSH
69002: LD_INT 1
69004: ARRAY
69005: PPUSH
69006: LD_VAR 0 12
69010: PUSH
69011: LD_INT 2
69013: ARRAY
69014: PPUSH
69015: LD_VAR 0 7
69019: PPUSH
69020: LD_VAR 0 8
69024: PPUSH
69025: CALL_OW 298
69029: ST_TO_ADDR
// if tmp < distance then
69030: LD_VAR 0 9
69034: PUSH
69035: LD_VAR 0 10
69039: LESS
69040: IFFALSE 69062
// begin result := i ;
69042: LD_ADDR_VAR 0 5
69046: PUSH
69047: LD_VAR 0 6
69051: ST_TO_ADDR
// distance := tmp ;
69052: LD_ADDR_VAR 0 10
69056: PUSH
69057: LD_VAR 0 9
69061: ST_TO_ADDR
// end ; end ;
69062: GO 68920
69064: POP
69065: POP
// end ;
69066: LD_VAR 0 5
69070: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69071: LD_INT 0
69073: PPUSH
69074: PPUSH
// if not driver or not IsInUnit ( driver ) then
69075: LD_VAR 0 1
69079: NOT
69080: PUSH
69081: LD_VAR 0 1
69085: PPUSH
69086: CALL_OW 310
69090: NOT
69091: OR
69092: IFFALSE 69096
// exit ;
69094: GO 69186
// vehicle := IsInUnit ( driver ) ;
69096: LD_ADDR_VAR 0 3
69100: PUSH
69101: LD_VAR 0 1
69105: PPUSH
69106: CALL_OW 310
69110: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69111: LD_VAR 0 1
69115: PPUSH
69116: LD_STRING \
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: LD_INT 0
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: PUSH
69146: LD_STRING E
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: LD_VAR 0 3
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PPUSH
69182: CALL_OW 446
// end ;
69186: LD_VAR 0 2
69190: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69191: LD_INT 0
69193: PPUSH
69194: PPUSH
// if not driver or not IsInUnit ( driver ) then
69195: LD_VAR 0 1
69199: NOT
69200: PUSH
69201: LD_VAR 0 1
69205: PPUSH
69206: CALL_OW 310
69210: NOT
69211: OR
69212: IFFALSE 69216
// exit ;
69214: GO 69306
// vehicle := IsInUnit ( driver ) ;
69216: LD_ADDR_VAR 0 3
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: CALL_OW 310
69230: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69231: LD_VAR 0 1
69235: PPUSH
69236: LD_STRING \
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: LD_INT 0
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: PUSH
69266: LD_STRING E
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: LD_VAR 0 3
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PPUSH
69302: CALL_OW 447
// end ;
69306: LD_VAR 0 2
69310: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69311: LD_INT 0
69313: PPUSH
69314: PPUSH
69315: PPUSH
// tmp := [ ] ;
69316: LD_ADDR_VAR 0 5
69320: PUSH
69321: EMPTY
69322: ST_TO_ADDR
// for i in units do
69323: LD_ADDR_VAR 0 4
69327: PUSH
69328: LD_VAR 0 1
69332: PUSH
69333: FOR_IN
69334: IFFALSE 69372
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69336: LD_ADDR_VAR 0 5
69340: PUSH
69341: LD_VAR 0 5
69345: PPUSH
69346: LD_VAR 0 5
69350: PUSH
69351: LD_INT 1
69353: PLUS
69354: PPUSH
69355: LD_VAR 0 4
69359: PPUSH
69360: CALL_OW 256
69364: PPUSH
69365: CALL_OW 2
69369: ST_TO_ADDR
69370: GO 69333
69372: POP
69373: POP
// if not tmp then
69374: LD_VAR 0 5
69378: NOT
69379: IFFALSE 69383
// exit ;
69381: GO 69431
// if asc then
69383: LD_VAR 0 2
69387: IFFALSE 69411
// result := SortListByListAsc ( units , tmp ) else
69389: LD_ADDR_VAR 0 3
69393: PUSH
69394: LD_VAR 0 1
69398: PPUSH
69399: LD_VAR 0 5
69403: PPUSH
69404: CALL_OW 76
69408: ST_TO_ADDR
69409: GO 69431
// result := SortListByListDesc ( units , tmp ) ;
69411: LD_ADDR_VAR 0 3
69415: PUSH
69416: LD_VAR 0 1
69420: PPUSH
69421: LD_VAR 0 5
69425: PPUSH
69426: CALL_OW 77
69430: ST_TO_ADDR
// end ;
69431: LD_VAR 0 3
69435: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69436: LD_INT 0
69438: PPUSH
69439: PPUSH
// task := GetTaskList ( mech ) ;
69440: LD_ADDR_VAR 0 4
69444: PUSH
69445: LD_VAR 0 1
69449: PPUSH
69450: CALL_OW 437
69454: ST_TO_ADDR
// if not task then
69455: LD_VAR 0 4
69459: NOT
69460: IFFALSE 69464
// exit ;
69462: GO 69506
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69464: LD_ADDR_VAR 0 3
69468: PUSH
69469: LD_VAR 0 4
69473: PUSH
69474: LD_INT 1
69476: ARRAY
69477: PUSH
69478: LD_INT 1
69480: ARRAY
69481: PUSH
69482: LD_STRING r
69484: EQUAL
69485: PUSH
69486: LD_VAR 0 4
69490: PUSH
69491: LD_INT 1
69493: ARRAY
69494: PUSH
69495: LD_INT 4
69497: ARRAY
69498: PUSH
69499: LD_VAR 0 2
69503: EQUAL
69504: AND
69505: ST_TO_ADDR
// end ;
69506: LD_VAR 0 3
69510: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69511: LD_INT 0
69513: PPUSH
// SetDir ( unit , d ) ;
69514: LD_VAR 0 1
69518: PPUSH
69519: LD_VAR 0 4
69523: PPUSH
69524: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69528: LD_VAR 0 1
69532: PPUSH
69533: LD_VAR 0 2
69537: PPUSH
69538: LD_VAR 0 3
69542: PPUSH
69543: LD_VAR 0 5
69547: PPUSH
69548: CALL_OW 48
// end ;
69552: LD_VAR 0 6
69556: RET
// export function ToNaturalNumber ( number ) ; begin
69557: LD_INT 0
69559: PPUSH
// result := number div 1 ;
69560: LD_ADDR_VAR 0 2
69564: PUSH
69565: LD_VAR 0 1
69569: PUSH
69570: LD_INT 1
69572: DIV
69573: ST_TO_ADDR
// if number < 0 then
69574: LD_VAR 0 1
69578: PUSH
69579: LD_INT 0
69581: LESS
69582: IFFALSE 69592
// result := 0 ;
69584: LD_ADDR_VAR 0 2
69588: PUSH
69589: LD_INT 0
69591: ST_TO_ADDR
// end ;
69592: LD_VAR 0 2
69596: RET
// export function SortByClass ( units , class ) ; var un ; begin
69597: LD_INT 0
69599: PPUSH
69600: PPUSH
// if not units or not class then
69601: LD_VAR 0 1
69605: NOT
69606: PUSH
69607: LD_VAR 0 2
69611: NOT
69612: OR
69613: IFFALSE 69617
// exit ;
69615: GO 69712
// result := [ ] ;
69617: LD_ADDR_VAR 0 3
69621: PUSH
69622: EMPTY
69623: ST_TO_ADDR
// for un in units do
69624: LD_ADDR_VAR 0 4
69628: PUSH
69629: LD_VAR 0 1
69633: PUSH
69634: FOR_IN
69635: IFFALSE 69710
// if GetClass ( un ) = class then
69637: LD_VAR 0 4
69641: PPUSH
69642: CALL_OW 257
69646: PUSH
69647: LD_VAR 0 2
69651: EQUAL
69652: IFFALSE 69679
// result := Insert ( result , 1 , un ) else
69654: LD_ADDR_VAR 0 3
69658: PUSH
69659: LD_VAR 0 3
69663: PPUSH
69664: LD_INT 1
69666: PPUSH
69667: LD_VAR 0 4
69671: PPUSH
69672: CALL_OW 2
69676: ST_TO_ADDR
69677: GO 69708
// result := Replace ( result , result + 1 , un ) ;
69679: LD_ADDR_VAR 0 3
69683: PUSH
69684: LD_VAR 0 3
69688: PPUSH
69689: LD_VAR 0 3
69693: PUSH
69694: LD_INT 1
69696: PLUS
69697: PPUSH
69698: LD_VAR 0 4
69702: PPUSH
69703: CALL_OW 1
69707: ST_TO_ADDR
69708: GO 69634
69710: POP
69711: POP
// end ;
69712: LD_VAR 0 3
69716: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69717: LD_INT 0
69719: PPUSH
69720: PPUSH
69721: PPUSH
69722: PPUSH
69723: PPUSH
69724: PPUSH
69725: PPUSH
// result := [ ] ;
69726: LD_ADDR_VAR 0 4
69730: PUSH
69731: EMPTY
69732: ST_TO_ADDR
// if x - r < 0 then
69733: LD_VAR 0 1
69737: PUSH
69738: LD_VAR 0 3
69742: MINUS
69743: PUSH
69744: LD_INT 0
69746: LESS
69747: IFFALSE 69759
// min_x := 0 else
69749: LD_ADDR_VAR 0 8
69753: PUSH
69754: LD_INT 0
69756: ST_TO_ADDR
69757: GO 69775
// min_x := x - r ;
69759: LD_ADDR_VAR 0 8
69763: PUSH
69764: LD_VAR 0 1
69768: PUSH
69769: LD_VAR 0 3
69773: MINUS
69774: ST_TO_ADDR
// if y - r < 0 then
69775: LD_VAR 0 2
69779: PUSH
69780: LD_VAR 0 3
69784: MINUS
69785: PUSH
69786: LD_INT 0
69788: LESS
69789: IFFALSE 69801
// min_y := 0 else
69791: LD_ADDR_VAR 0 7
69795: PUSH
69796: LD_INT 0
69798: ST_TO_ADDR
69799: GO 69817
// min_y := y - r ;
69801: LD_ADDR_VAR 0 7
69805: PUSH
69806: LD_VAR 0 2
69810: PUSH
69811: LD_VAR 0 3
69815: MINUS
69816: ST_TO_ADDR
// max_x := x + r ;
69817: LD_ADDR_VAR 0 9
69821: PUSH
69822: LD_VAR 0 1
69826: PUSH
69827: LD_VAR 0 3
69831: PLUS
69832: ST_TO_ADDR
// max_y := y + r ;
69833: LD_ADDR_VAR 0 10
69837: PUSH
69838: LD_VAR 0 2
69842: PUSH
69843: LD_VAR 0 3
69847: PLUS
69848: ST_TO_ADDR
// for _x = min_x to max_x do
69849: LD_ADDR_VAR 0 5
69853: PUSH
69854: DOUBLE
69855: LD_VAR 0 8
69859: DEC
69860: ST_TO_ADDR
69861: LD_VAR 0 9
69865: PUSH
69866: FOR_TO
69867: IFFALSE 69968
// for _y = min_y to max_y do
69869: LD_ADDR_VAR 0 6
69873: PUSH
69874: DOUBLE
69875: LD_VAR 0 7
69879: DEC
69880: ST_TO_ADDR
69881: LD_VAR 0 10
69885: PUSH
69886: FOR_TO
69887: IFFALSE 69964
// begin if not ValidHex ( _x , _y ) then
69889: LD_VAR 0 5
69893: PPUSH
69894: LD_VAR 0 6
69898: PPUSH
69899: CALL_OW 488
69903: NOT
69904: IFFALSE 69908
// continue ;
69906: GO 69886
// if GetResourceTypeXY ( _x , _y ) then
69908: LD_VAR 0 5
69912: PPUSH
69913: LD_VAR 0 6
69917: PPUSH
69918: CALL_OW 283
69922: IFFALSE 69962
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69924: LD_ADDR_VAR 0 4
69928: PUSH
69929: LD_VAR 0 4
69933: PPUSH
69934: LD_VAR 0 4
69938: PUSH
69939: LD_INT 1
69941: PLUS
69942: PPUSH
69943: LD_VAR 0 5
69947: PUSH
69948: LD_VAR 0 6
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PPUSH
69957: CALL_OW 1
69961: ST_TO_ADDR
// end ;
69962: GO 69886
69964: POP
69965: POP
69966: GO 69866
69968: POP
69969: POP
// end ;
69970: LD_VAR 0 4
69974: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69975: LD_INT 0
69977: PPUSH
69978: PPUSH
69979: PPUSH
69980: PPUSH
69981: PPUSH
69982: PPUSH
69983: PPUSH
69984: PPUSH
// if not units then
69985: LD_VAR 0 1
69989: NOT
69990: IFFALSE 69994
// exit ;
69992: GO 70520
// result := UnitFilter ( units , [ f_ok ] ) ;
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: LD_VAR 0 1
70003: PPUSH
70004: LD_INT 50
70006: PUSH
70007: EMPTY
70008: LIST
70009: PPUSH
70010: CALL_OW 72
70014: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70015: LD_ADDR_VAR 0 8
70019: PUSH
70020: LD_VAR 0 1
70024: PUSH
70025: LD_INT 1
70027: ARRAY
70028: PPUSH
70029: CALL_OW 255
70033: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70034: LD_ADDR_VAR 0 10
70038: PUSH
70039: LD_INT 29
70041: PUSH
70042: LD_EXP 101
70046: PUSH
70047: LD_INT 49
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: ST_TO_ADDR
// if not result then
70055: LD_VAR 0 3
70059: NOT
70060: IFFALSE 70064
// exit ;
70062: GO 70520
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70064: LD_ADDR_VAR 0 5
70068: PUSH
70069: LD_INT 81
70071: PUSH
70072: LD_VAR 0 8
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PPUSH
70081: CALL_OW 69
70085: ST_TO_ADDR
// for i in result do
70086: LD_ADDR_VAR 0 4
70090: PUSH
70091: LD_VAR 0 3
70095: PUSH
70096: FOR_IN
70097: IFFALSE 70518
// begin tag := GetTag ( i ) + 1 ;
70099: LD_ADDR_VAR 0 9
70103: PUSH
70104: LD_VAR 0 4
70108: PPUSH
70109: CALL_OW 110
70113: PUSH
70114: LD_INT 1
70116: PLUS
70117: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70118: LD_ADDR_VAR 0 7
70122: PUSH
70123: LD_VAR 0 4
70127: PPUSH
70128: CALL_OW 250
70132: PPUSH
70133: LD_VAR 0 4
70137: PPUSH
70138: CALL_OW 251
70142: PPUSH
70143: LD_INT 6
70145: PPUSH
70146: CALL 69717 0 3
70150: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70151: LD_VAR 0 4
70155: PPUSH
70156: CALL_OW 247
70160: PUSH
70161: LD_INT 2
70163: EQUAL
70164: PUSH
70165: LD_VAR 0 7
70169: AND
70170: PUSH
70171: LD_VAR 0 4
70175: PPUSH
70176: CALL_OW 264
70180: PUSH
70181: LD_VAR 0 10
70185: IN
70186: NOT
70187: AND
70188: IFFALSE 70227
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70190: LD_VAR 0 4
70194: PPUSH
70195: LD_VAR 0 7
70199: PUSH
70200: LD_INT 1
70202: ARRAY
70203: PUSH
70204: LD_INT 1
70206: ARRAY
70207: PPUSH
70208: LD_VAR 0 7
70212: PUSH
70213: LD_INT 1
70215: ARRAY
70216: PUSH
70217: LD_INT 2
70219: ARRAY
70220: PPUSH
70221: CALL_OW 116
70225: GO 70516
// if path > tag then
70227: LD_VAR 0 2
70231: PUSH
70232: LD_VAR 0 9
70236: GREATER
70237: IFFALSE 70445
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70239: LD_ADDR_VAR 0 6
70243: PUSH
70244: LD_VAR 0 5
70248: PPUSH
70249: LD_INT 91
70251: PUSH
70252: LD_VAR 0 4
70256: PUSH
70257: LD_INT 8
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: LIST
70264: PPUSH
70265: CALL_OW 72
70269: ST_TO_ADDR
// if nearEnemy then
70270: LD_VAR 0 6
70274: IFFALSE 70343
// begin if GetWeapon ( i ) = ru_time_lapser then
70276: LD_VAR 0 4
70280: PPUSH
70281: CALL_OW 264
70285: PUSH
70286: LD_INT 49
70288: EQUAL
70289: IFFALSE 70317
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70291: LD_VAR 0 4
70295: PPUSH
70296: LD_VAR 0 6
70300: PPUSH
70301: LD_VAR 0 4
70305: PPUSH
70306: CALL_OW 74
70310: PPUSH
70311: CALL_OW 112
70315: GO 70341
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70317: LD_VAR 0 4
70321: PPUSH
70322: LD_VAR 0 6
70326: PPUSH
70327: LD_VAR 0 4
70331: PPUSH
70332: CALL_OW 74
70336: PPUSH
70337: CALL_OW 115
// end else
70341: GO 70443
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70343: LD_VAR 0 4
70347: PPUSH
70348: LD_VAR 0 2
70352: PUSH
70353: LD_VAR 0 9
70357: ARRAY
70358: PUSH
70359: LD_INT 1
70361: ARRAY
70362: PPUSH
70363: LD_VAR 0 2
70367: PUSH
70368: LD_VAR 0 9
70372: ARRAY
70373: PUSH
70374: LD_INT 2
70376: ARRAY
70377: PPUSH
70378: CALL_OW 297
70382: PUSH
70383: LD_INT 6
70385: GREATER
70386: IFFALSE 70429
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70388: LD_VAR 0 4
70392: PPUSH
70393: LD_VAR 0 2
70397: PUSH
70398: LD_VAR 0 9
70402: ARRAY
70403: PUSH
70404: LD_INT 1
70406: ARRAY
70407: PPUSH
70408: LD_VAR 0 2
70412: PUSH
70413: LD_VAR 0 9
70417: ARRAY
70418: PUSH
70419: LD_INT 2
70421: ARRAY
70422: PPUSH
70423: CALL_OW 114
70427: GO 70443
// SetTag ( i , tag ) ;
70429: LD_VAR 0 4
70433: PPUSH
70434: LD_VAR 0 9
70438: PPUSH
70439: CALL_OW 109
// end else
70443: GO 70516
// if enemy then
70445: LD_VAR 0 5
70449: IFFALSE 70516
// begin if GetWeapon ( i ) = ru_time_lapser then
70451: LD_VAR 0 4
70455: PPUSH
70456: CALL_OW 264
70460: PUSH
70461: LD_INT 49
70463: EQUAL
70464: IFFALSE 70492
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70466: LD_VAR 0 4
70470: PPUSH
70471: LD_VAR 0 5
70475: PPUSH
70476: LD_VAR 0 4
70480: PPUSH
70481: CALL_OW 74
70485: PPUSH
70486: CALL_OW 112
70490: GO 70516
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70492: LD_VAR 0 4
70496: PPUSH
70497: LD_VAR 0 5
70501: PPUSH
70502: LD_VAR 0 4
70506: PPUSH
70507: CALL_OW 74
70511: PPUSH
70512: CALL_OW 115
// end ; end ;
70516: GO 70096
70518: POP
70519: POP
// end ;
70520: LD_VAR 0 3
70524: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70525: LD_INT 0
70527: PPUSH
70528: PPUSH
70529: PPUSH
// if not unit or IsInUnit ( unit ) then
70530: LD_VAR 0 1
70534: NOT
70535: PUSH
70536: LD_VAR 0 1
70540: PPUSH
70541: CALL_OW 310
70545: OR
70546: IFFALSE 70550
// exit ;
70548: GO 70641
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70550: LD_ADDR_VAR 0 4
70554: PUSH
70555: LD_VAR 0 1
70559: PPUSH
70560: CALL_OW 250
70564: PPUSH
70565: LD_VAR 0 2
70569: PPUSH
70570: LD_INT 1
70572: PPUSH
70573: CALL_OW 272
70577: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70578: LD_ADDR_VAR 0 5
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 251
70592: PPUSH
70593: LD_VAR 0 2
70597: PPUSH
70598: LD_INT 1
70600: PPUSH
70601: CALL_OW 273
70605: ST_TO_ADDR
// if ValidHex ( x , y ) then
70606: LD_VAR 0 4
70610: PPUSH
70611: LD_VAR 0 5
70615: PPUSH
70616: CALL_OW 488
70620: IFFALSE 70641
// ComTurnXY ( unit , x , y ) ;
70622: LD_VAR 0 1
70626: PPUSH
70627: LD_VAR 0 4
70631: PPUSH
70632: LD_VAR 0 5
70636: PPUSH
70637: CALL_OW 118
// end ;
70641: LD_VAR 0 3
70645: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70646: LD_INT 0
70648: PPUSH
70649: PPUSH
// result := false ;
70650: LD_ADDR_VAR 0 3
70654: PUSH
70655: LD_INT 0
70657: ST_TO_ADDR
// if not units then
70658: LD_VAR 0 2
70662: NOT
70663: IFFALSE 70667
// exit ;
70665: GO 70712
// for i in units do
70667: LD_ADDR_VAR 0 4
70671: PUSH
70672: LD_VAR 0 2
70676: PUSH
70677: FOR_IN
70678: IFFALSE 70710
// if See ( side , i ) then
70680: LD_VAR 0 1
70684: PPUSH
70685: LD_VAR 0 4
70689: PPUSH
70690: CALL_OW 292
70694: IFFALSE 70708
// begin result := true ;
70696: LD_ADDR_VAR 0 3
70700: PUSH
70701: LD_INT 1
70703: ST_TO_ADDR
// exit ;
70704: POP
70705: POP
70706: GO 70712
// end ;
70708: GO 70677
70710: POP
70711: POP
// end ;
70712: LD_VAR 0 3
70716: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70717: LD_INT 0
70719: PPUSH
70720: PPUSH
70721: PPUSH
70722: PPUSH
// if not unit or not points then
70723: LD_VAR 0 1
70727: NOT
70728: PUSH
70729: LD_VAR 0 2
70733: NOT
70734: OR
70735: IFFALSE 70739
// exit ;
70737: GO 70829
// dist := 99999 ;
70739: LD_ADDR_VAR 0 5
70743: PUSH
70744: LD_INT 99999
70746: ST_TO_ADDR
// for i in points do
70747: LD_ADDR_VAR 0 4
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: FOR_IN
70758: IFFALSE 70827
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70760: LD_ADDR_VAR 0 6
70764: PUSH
70765: LD_VAR 0 1
70769: PPUSH
70770: LD_VAR 0 4
70774: PUSH
70775: LD_INT 1
70777: ARRAY
70778: PPUSH
70779: LD_VAR 0 4
70783: PUSH
70784: LD_INT 2
70786: ARRAY
70787: PPUSH
70788: CALL_OW 297
70792: ST_TO_ADDR
// if tmpDist < dist then
70793: LD_VAR 0 6
70797: PUSH
70798: LD_VAR 0 5
70802: LESS
70803: IFFALSE 70825
// begin result := i ;
70805: LD_ADDR_VAR 0 3
70809: PUSH
70810: LD_VAR 0 4
70814: ST_TO_ADDR
// dist := tmpDist ;
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: LD_VAR 0 6
70824: ST_TO_ADDR
// end ; end ;
70825: GO 70757
70827: POP
70828: POP
// end ;
70829: LD_VAR 0 3
70833: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70834: LD_INT 0
70836: PPUSH
// uc_side := side ;
70837: LD_ADDR_OWVAR 20
70841: PUSH
70842: LD_VAR 0 1
70846: ST_TO_ADDR
// uc_nation := 3 ;
70847: LD_ADDR_OWVAR 21
70851: PUSH
70852: LD_INT 3
70854: ST_TO_ADDR
// vc_chassis := 25 ;
70855: LD_ADDR_OWVAR 37
70859: PUSH
70860: LD_INT 25
70862: ST_TO_ADDR
// vc_engine := engine_siberite ;
70863: LD_ADDR_OWVAR 39
70867: PUSH
70868: LD_INT 3
70870: ST_TO_ADDR
// vc_control := control_computer ;
70871: LD_ADDR_OWVAR 38
70875: PUSH
70876: LD_INT 3
70878: ST_TO_ADDR
// vc_weapon := 59 ;
70879: LD_ADDR_OWVAR 40
70883: PUSH
70884: LD_INT 59
70886: ST_TO_ADDR
// result := CreateVehicle ;
70887: LD_ADDR_VAR 0 5
70891: PUSH
70892: CALL_OW 45
70896: ST_TO_ADDR
// SetDir ( result , d ) ;
70897: LD_VAR 0 5
70901: PPUSH
70902: LD_VAR 0 4
70906: PPUSH
70907: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70911: LD_VAR 0 5
70915: PPUSH
70916: LD_VAR 0 2
70920: PPUSH
70921: LD_VAR 0 3
70925: PPUSH
70926: LD_INT 0
70928: PPUSH
70929: CALL_OW 48
// end ;
70933: LD_VAR 0 5
70937: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70938: LD_INT 0
70940: PPUSH
70941: PPUSH
70942: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70943: LD_ADDR_VAR 0 2
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70966: LD_VAR 0 1
70970: NOT
70971: PUSH
70972: LD_VAR 0 1
70976: PPUSH
70977: CALL_OW 264
70981: PUSH
70982: LD_INT 12
70984: PUSH
70985: LD_INT 51
70987: PUSH
70988: LD_INT 32
70990: PUSH
70991: LD_EXP 98
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: IN
71002: NOT
71003: OR
71004: IFFALSE 71008
// exit ;
71006: GO 71106
// for i := 1 to 3 do
71008: LD_ADDR_VAR 0 3
71012: PUSH
71013: DOUBLE
71014: LD_INT 1
71016: DEC
71017: ST_TO_ADDR
71018: LD_INT 3
71020: PUSH
71021: FOR_TO
71022: IFFALSE 71104
// begin tmp := GetCargo ( cargo , i ) ;
71024: LD_ADDR_VAR 0 4
71028: PUSH
71029: LD_VAR 0 1
71033: PPUSH
71034: LD_VAR 0 3
71038: PPUSH
71039: CALL_OW 289
71043: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71044: LD_ADDR_VAR 0 2
71048: PUSH
71049: LD_VAR 0 2
71053: PPUSH
71054: LD_VAR 0 3
71058: PPUSH
71059: LD_VAR 0 4
71063: PPUSH
71064: CALL_OW 1
71068: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71069: LD_ADDR_VAR 0 2
71073: PUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: LD_INT 4
71081: PPUSH
71082: LD_VAR 0 2
71086: PUSH
71087: LD_INT 4
71089: ARRAY
71090: PUSH
71091: LD_VAR 0 4
71095: PLUS
71096: PPUSH
71097: CALL_OW 1
71101: ST_TO_ADDR
// end ;
71102: GO 71021
71104: POP
71105: POP
// end ;
71106: LD_VAR 0 2
71110: RET
// export function Length ( array ) ; begin
71111: LD_INT 0
71113: PPUSH
// result := array + 0 ;
71114: LD_ADDR_VAR 0 2
71118: PUSH
71119: LD_VAR 0 1
71123: PUSH
71124: LD_INT 0
71126: PLUS
71127: ST_TO_ADDR
// end ; end_of_file
71128: LD_VAR 0 2
71132: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71133: LD_VAR 0 1
71137: PUSH
71138: LD_INT 200
71140: DOUBLE
71141: GREATEREQUAL
71142: IFFALSE 71150
71144: LD_INT 299
71146: DOUBLE
71147: LESSEQUAL
71148: IFTRUE 71152
71150: GO 71184
71152: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71153: LD_VAR 0 1
71157: PPUSH
71158: LD_VAR 0 2
71162: PPUSH
71163: LD_VAR 0 3
71167: PPUSH
71168: LD_VAR 0 4
71172: PPUSH
71173: LD_VAR 0 5
71177: PPUSH
71178: CALL 25867 0 5
71182: GO 71261
71184: LD_INT 300
71186: DOUBLE
71187: GREATEREQUAL
71188: IFFALSE 71196
71190: LD_INT 399
71192: DOUBLE
71193: LESSEQUAL
71194: IFTRUE 71198
71196: GO 71260
71198: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71199: LD_VAR 0 1
71203: PPUSH
71204: LD_VAR 0 2
71208: PPUSH
71209: LD_VAR 0 3
71213: PPUSH
71214: LD_VAR 0 4
71218: PPUSH
71219: LD_VAR 0 5
71223: PPUSH
71224: LD_VAR 0 6
71228: PPUSH
71229: LD_VAR 0 7
71233: PPUSH
71234: LD_VAR 0 8
71238: PPUSH
71239: LD_VAR 0 9
71243: PPUSH
71244: LD_VAR 0 10
71248: PPUSH
71249: LD_VAR 0 11
71253: PPUSH
71254: CALL 22262 0 11
71258: GO 71261
71260: POP
// end ;
71261: PPOPN 11
71263: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71264: LD_VAR 0 1
71268: PPUSH
71269: LD_VAR 0 2
71273: PPUSH
71274: LD_VAR 0 3
71278: PPUSH
71279: LD_VAR 0 4
71283: PPUSH
71284: LD_VAR 0 5
71288: PPUSH
71289: CALL 25603 0 5
// end ; end_of_file
71293: PPOPN 5
71295: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71296: LD_VAR 0 1
71300: PPUSH
71301: LD_VAR 0 2
71305: PPUSH
71306: LD_VAR 0 3
71310: PPUSH
71311: LD_VAR 0 4
71315: PPUSH
71316: LD_VAR 0 5
71320: PPUSH
71321: LD_VAR 0 6
71325: PPUSH
71326: CALL 9955 0 6
// end ;
71330: PPOPN 6
71332: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71333: LD_INT 0
71335: PPUSH
// begin if not units then
71336: LD_VAR 0 1
71340: NOT
71341: IFFALSE 71345
// exit ;
71343: GO 71345
// end ;
71345: PPOPN 7
71347: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71348: CALL 9926 0 0
// end ;
71352: PPOPN 1
71354: END
